

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Sun Jan 15 20:16:49 2017

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1527
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	idataBANK4,global,class=CODE,delta=2
     8                           	psect	stringtext,global,class=STRCODE,delta=2
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    17                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    18                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    19                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    20                           	psect	bssBANK7,global,class=BANK7,space=1,delta=1
    21                           	psect	clrtext,global,class=CODE,delta=2
    22                           	psect	inittext,global,class=CODE,delta=2
    23                           	psect	cstackBANK5,global,class=BANK5,space=1,delta=1
    24                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    25                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    26                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    27                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    28                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    29                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    30                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    31                           	psect	text1,local,class=CODE,merge=1,delta=2
    32                           	psect	text2,local,class=CODE,merge=1,delta=2
    33                           	psect	text3,local,class=CODE,merge=1,delta=2
    34                           	psect	text4,local,class=CODE,merge=1,delta=2
    35                           	psect	text5,local,class=CODE,merge=1,delta=2
    36                           	psect	text6,local,class=CODE,merge=1,delta=2
    37                           	psect	text7,local,class=CODE,merge=1,delta=2
    38                           	psect	text8,local,class=CODE,merge=1,delta=2
    39                           	psect	text9,local,class=CODE,merge=1,delta=2
    40                           	psect	text10,local,class=CODE,merge=1,delta=2
    41                           	psect	text11,local,class=CODE,merge=1,delta=2
    42                           	psect	text12,local,class=CODE,merge=1,delta=2
    43                           	psect	text13,local,class=CODE,merge=1,delta=2
    44                           	psect	text14,local,class=CODE,merge=1,delta=2
    45                           	psect	text15,local,class=CODE,merge=1,delta=2
    46                           	psect	text16,local,class=CODE,merge=1,delta=2
    47                           	psect	text17,local,class=CODE,merge=1,delta=2
    48                           	psect	text18,local,class=CODE,merge=1,delta=2
    49                           	psect	text19,local,class=CODE,merge=1,delta=2
    50                           	psect	text20,local,class=CODE,merge=1,delta=2
    51                           	psect	text21,local,class=CODE,merge=1,delta=2
    52                           	psect	text22,local,class=CODE,merge=1,delta=2
    53                           	psect	text23,local,class=CODE,merge=1,delta=2
    54                           	psect	text24,local,class=CODE,merge=1,delta=2
    55                           	psect	text25,local,class=CODE,merge=1,delta=2
    56                           	psect	text26,local,class=CODE,merge=1,delta=2
    57                           	psect	text27,local,class=CODE,merge=1,delta=2
    58                           	psect	text28,local,class=CODE,merge=1,delta=2
    59                           	psect	text29,local,class=CODE,merge=1,delta=2
    60                           	psect	text30,local,class=CODE,merge=1,delta=2
    61                           	psect	text31,local,class=CODE,merge=1,delta=2
    62                           	psect	text32,local,class=CODE,merge=1,delta=2
    63                           	psect	text33,local,class=CODE,merge=1,delta=2
    64                           	psect	text34,local,class=CODE,merge=1,delta=2
    65                           	psect	text35,local,class=CODE,merge=1,delta=2
    66                           	psect	text36,local,class=CODE,merge=1,delta=2
    67                           	psect	text37,local,class=CODE,merge=1,delta=2
    68                           	psect	text38,local,class=CODE,merge=1,delta=2
    69                           	psect	text39,local,class=CODE,merge=1,delta=2
    70                           	psect	text40,local,class=CODE,merge=1,delta=2
    71                           	psect	text41,local,class=CODE,merge=1,delta=2
    72                           	psect	text42,local,class=CODE,merge=1,delta=2
    73                           	psect	text43,local,class=CODE,merge=1,delta=2
    74                           	psect	text44,local,class=CODE,merge=1,delta=2
    75                           	psect	text45,local,class=CODE,merge=1,delta=2
    76                           	psect	text46,local,class=CODE,merge=1,delta=2
    77                           	psect	text47,local,class=CODE,merge=1,delta=2
    78                           	psect	text48,local,class=CODE,merge=1,delta=2
    79                           	psect	text49,local,class=CODE,merge=1,delta=2
    80                           	psect	text50,local,class=CODE,merge=1,delta=2
    81                           	psect	text51,local,class=CODE,merge=1,delta=2
    82                           	psect	text52,local,class=CODE,merge=1,delta=2
    83                           	psect	text53,local,class=CODE,merge=1,delta=2
    84                           	psect	text54,local,class=CODE,merge=1,delta=2
    85                           	psect	text55,local,class=CODE,merge=1,delta=2
    86                           	psect	text56,local,class=CODE,merge=1,delta=2
    87                           	psect	text57,local,class=CODE,merge=1,delta=2
    88                           	psect	text58,local,class=CODE,merge=1,delta=2
    89                           	psect	text59,local,class=CODE,merge=1,delta=2
    90                           	psect	text60,local,class=CODE,merge=1,delta=2
    91                           	psect	text61,local,class=CODE,merge=1,delta=2
    92                           	psect	text62,local,class=CODE,merge=1,delta=2
    93                           	psect	text63,local,class=CODE,merge=1,delta=2
    94                           	psect	text64,local,class=CODE,merge=1,delta=2
    95                           	psect	text65,local,class=CODE,merge=1,delta=2
    96                           	psect	text66,local,class=CODE,merge=1,delta=2
    97                           	psect	text67,local,class=CODE,merge=1,delta=2
    98                           	psect	text68,local,class=CODE,merge=1,delta=2
    99                           	psect	text69,local,class=CODE,merge=1,delta=2
   100                           	psect	text70,local,class=CODE,merge=1,delta=2
   101                           	psect	text71,local,class=CODE,merge=1,delta=2
   102                           	psect	text72,local,class=CODE,merge=1,delta=2
   103                           	psect	text73,local,class=CODE,merge=1,delta=2
   104                           	psect	intentry,global,class=CODE,delta=2
   105                           	psect	text75,local,class=CODE,merge=1,delta=2
   106                           	psect	text76,local,class=CODE,merge=1,delta=2
   107                           	psect	text77,local,class=CODE,merge=1,delta=2
   108                           	psect	text78,local,class=CODE,merge=1,delta=2
   109                           	psect	text79,local,class=CODE,merge=1,delta=2
   110                           	psect	text80,local,class=CODE,merge=1,delta=2
   111                           	dabs	1,0x920,80
   112                           	dabs	1,0x8A0,80
   113                           	dabs	1,0x820,80
   114                           	dabs	1,0x7A0,80
   115                           	dabs	1,0x742,46
   116                           	dabs	1,0x720,34
   117                           	dabs	1,0x6A0,80
   118                           	dabs	1,0x620,80
   119                           	dabs	1,0x5BA,54
   120                           	dabs	1,0x2482,0,_cosArray
   121                           	dabs	1,0x238A,0,_modArray
   122                           	dabs	1,0x7E,2
   123  0000                     	;# 
   124  0001                     	;# 
   125  0002                     	;# 
   126  0003                     	;# 
   127  0004                     	;# 
   128  0005                     	;# 
   129  0006                     	;# 
   130  0007                     	;# 
   131  0008                     	;# 
   132  0009                     	;# 
   133  000A                     	;# 
   134  000B                     	;# 
   135  000C                     	;# 
   136  000D                     	;# 
   137  000E                     	;# 
   138  000F                     	;# 
   139  0010                     	;# 
   140  0011                     	;# 
   141  0012                     	;# 
   142  0013                     	;# 
   143  0014                     	;# 
   144  0015                     	;# 
   145  0016                     	;# 
   146  0016                     	;# 
   147  0017                     	;# 
   148  0018                     	;# 
   149  0019                     	;# 
   150  001A                     	;# 
   151  001B                     	;# 
   152  001C                     	;# 
   153  008C                     	;# 
   154  008D                     	;# 
   155  008E                     	;# 
   156  008F                     	;# 
   157  0090                     	;# 
   158  0091                     	;# 
   159  0092                     	;# 
   160  0093                     	;# 
   161  0094                     	;# 
   162  0095                     	;# 
   163  0096                     	;# 
   164  0097                     	;# 
   165  0099                     	;# 
   166  009A                     	;# 
   167  009B                     	;# 
   168  009B                     	;# 
   169  009C                     	;# 
   170  009D                     	;# 
   171  009E                     	;# 
   172  010C                     	;# 
   173  010D                     	;# 
   174  010E                     	;# 
   175  010F                     	;# 
   176  0110                     	;# 
   177  0116                     	;# 
   178  0117                     	;# 
   179  011D                     	;# 
   180  018C                     	;# 
   181  018D                     	;# 
   182  018F                     	;# 
   183  0190                     	;# 
   184  0191                     	;# 
   185  0191                     	;# 
   186  0192                     	;# 
   187  0193                     	;# 
   188  0193                     	;# 
   189  0194                     	;# 
   190  0195                     	;# 
   191  0196                     	;# 
   192  0197                     	;# 
   193  0199                     	;# 
   194  0199                     	;# 
   195  0199                     	;# 
   196  019A                     	;# 
   197  019A                     	;# 
   198  019A                     	;# 
   199  019B                     	;# 
   200  019B                     	;# 
   201  019B                     	;# 
   202  019B                     	;# 
   203  019B                     	;# 
   204  019C                     	;# 
   205  019C                     	;# 
   206  019C                     	;# 
   207  019D                     	;# 
   208  019D                     	;# 
   209  019D                     	;# 
   210  019E                     	;# 
   211  019E                     	;# 
   212  019E                     	;# 
   213  019F                     	;# 
   214  019F                     	;# 
   215  019F                     	;# 
   216  020D                     	;# 
   217  020F                     	;# 
   218  0210                     	;# 
   219  0211                     	;# 
   220  0211                     	;# 
   221  0212                     	;# 
   222  0212                     	;# 
   223  0213                     	;# 
   224  0213                     	;# 
   225  0214                     	;# 
   226  0214                     	;# 
   227  0215                     	;# 
   228  0215                     	;# 
   229  0215                     	;# 
   230  0216                     	;# 
   231  0216                     	;# 
   232  0217                     	;# 
   233  0217                     	;# 
   234  0219                     	;# 
   235  021A                     	;# 
   236  021B                     	;# 
   237  021C                     	;# 
   238  021D                     	;# 
   239  021E                     	;# 
   240  021F                     	;# 
   241  028C                     	;# 
   242  028D                     	;# 
   243  0291                     	;# 
   244  0291                     	;# 
   245  0292                     	;# 
   246  0293                     	;# 
   247  0298                     	;# 
   248  0298                     	;# 
   249  0299                     	;# 
   250  029A                     	;# 
   251  029D                     	;# 
   252  029E                     	;# 
   253  029F                     	;# 
   254  030C                     	;# 
   255  030D                     	;# 
   256  0311                     	;# 
   257  0311                     	;# 
   258  0312                     	;# 
   259  0313                     	;# 
   260  0318                     	;# 
   261  0318                     	;# 
   262  0319                     	;# 
   263  031A                     	;# 
   264  031C                     	;# 
   265  031C                     	;# 
   266  031D                     	;# 
   267  031E                     	;# 
   268  038C                     	;# 
   269  038D                     	;# 
   270  0394                     	;# 
   271  0395                     	;# 
   272  0396                     	;# 
   273  040C                     	;# 
   274  040D                     	;# 
   275  0411                     	;# 
   276  0411                     	;# 
   277  0412                     	;# 
   278  0413                     	;# 
   279  0414                     	;# 
   280  0415                     	;# 
   281  0416                     	;# 
   282  0417                     	;# 
   283  0418                     	;# 
   284  0418                     	;# 
   285  0419                     	;# 
   286  041A                     	;# 
   287  041B                     	;# 
   288  041C                     	;# 
   289  041D                     	;# 
   290  041E                     	;# 
   291  048D                     	;# 
   292  0491                     	;# 
   293  0491                     	;# 
   294  0492                     	;# 
   295  0492                     	;# 
   296  0493                     	;# 
   297  0493                     	;# 
   298  0493                     	;# 
   299  0494                     	;# 
   300  0494                     	;# 
   301  0495                     	;# 
   302  0495                     	;# 
   303  0496                     	;# 
   304  0496                     	;# 
   305  0497                     	;# 
   306  0497                     	;# 
   307  0595                     	;# 
   308  0596                     	;# 
   309  0597                     	;# 
   310  059C                     	;# 
   311  059D                     	;# 
   312  059E                     	;# 
   313  0611                     	;# 
   314  0611                     	;# 
   315  0612                     	;# 
   316  0613                     	;# 
   317  0614                     	;# 
   318  0614                     	;# 
   319  0615                     	;# 
   320  0616                     	;# 
   321  0617                     	;# 
   322  0617                     	;# 
   323  0618                     	;# 
   324  0619                     	;# 
   325  061A                     	;# 
   326  061A                     	;# 
   327  061B                     	;# 
   328  061C                     	;# 
   329  061D                     	;# 
   330  061D                     	;# 
   331  061E                     	;# 
   332  061F                     	;# 
   333  0FE4                     	;# 
   334  0FE5                     	;# 
   335  0FE6                     	;# 
   336  0FE7                     	;# 
   337  0FE8                     	;# 
   338  0FE9                     	;# 
   339  0FEA                     	;# 
   340  0FEB                     	;# 
   341  0FED                     	;# 
   342  0FEE                     	;# 
   343  0FEF                     	;# 
   344  0000                     	;# 
   345  0001                     	;# 
   346  0002                     	;# 
   347  0003                     	;# 
   348  0004                     	;# 
   349  0005                     	;# 
   350  0006                     	;# 
   351  0007                     	;# 
   352  0008                     	;# 
   353  0009                     	;# 
   354  000A                     	;# 
   355  000B                     	;# 
   356  000C                     	;# 
   357  000D                     	;# 
   358  000E                     	;# 
   359  000F                     	;# 
   360  0010                     	;# 
   361  0011                     	;# 
   362  0012                     	;# 
   363  0013                     	;# 
   364  0014                     	;# 
   365  0015                     	;# 
   366  0016                     	;# 
   367  0016                     	;# 
   368  0017                     	;# 
   369  0018                     	;# 
   370  0019                     	;# 
   371  001A                     	;# 
   372  001B                     	;# 
   373  001C                     	;# 
   374  008C                     	;# 
   375  008D                     	;# 
   376  008E                     	;# 
   377  008F                     	;# 
   378  0090                     	;# 
   379  0091                     	;# 
   380  0092                     	;# 
   381  0093                     	;# 
   382  0094                     	;# 
   383  0095                     	;# 
   384  0096                     	;# 
   385  0097                     	;# 
   386  0099                     	;# 
   387  009A                     	;# 
   388  009B                     	;# 
   389  009B                     	;# 
   390  009C                     	;# 
   391  009D                     	;# 
   392  009E                     	;# 
   393  010C                     	;# 
   394  010D                     	;# 
   395  010E                     	;# 
   396  010F                     	;# 
   397  0110                     	;# 
   398  0116                     	;# 
   399  0117                     	;# 
   400  011D                     	;# 
   401  018C                     	;# 
   402  018D                     	;# 
   403  018F                     	;# 
   404  0190                     	;# 
   405  0191                     	;# 
   406  0191                     	;# 
   407  0192                     	;# 
   408  0193                     	;# 
   409  0193                     	;# 
   410  0194                     	;# 
   411  0195                     	;# 
   412  0196                     	;# 
   413  0197                     	;# 
   414  0199                     	;# 
   415  0199                     	;# 
   416  0199                     	;# 
   417  019A                     	;# 
   418  019A                     	;# 
   419  019A                     	;# 
   420  019B                     	;# 
   421  019B                     	;# 
   422  019B                     	;# 
   423  019B                     	;# 
   424  019B                     	;# 
   425  019C                     	;# 
   426  019C                     	;# 
   427  019C                     	;# 
   428  019D                     	;# 
   429  019D                     	;# 
   430  019D                     	;# 
   431  019E                     	;# 
   432  019E                     	;# 
   433  019E                     	;# 
   434  019F                     	;# 
   435  019F                     	;# 
   436  019F                     	;# 
   437  020D                     	;# 
   438  020F                     	;# 
   439  0210                     	;# 
   440  0211                     	;# 
   441  0211                     	;# 
   442  0212                     	;# 
   443  0212                     	;# 
   444  0213                     	;# 
   445  0213                     	;# 
   446  0214                     	;# 
   447  0214                     	;# 
   448  0215                     	;# 
   449  0215                     	;# 
   450  0215                     	;# 
   451  0216                     	;# 
   452  0216                     	;# 
   453  0217                     	;# 
   454  0217                     	;# 
   455  0219                     	;# 
   456  021A                     	;# 
   457  021B                     	;# 
   458  021C                     	;# 
   459  021D                     	;# 
   460  021E                     	;# 
   461  021F                     	;# 
   462  028C                     	;# 
   463  028D                     	;# 
   464  0291                     	;# 
   465  0291                     	;# 
   466  0292                     	;# 
   467  0293                     	;# 
   468  0298                     	;# 
   469  0298                     	;# 
   470  0299                     	;# 
   471  029A                     	;# 
   472  029D                     	;# 
   473  029E                     	;# 
   474  029F                     	;# 
   475  030C                     	;# 
   476  030D                     	;# 
   477  0311                     	;# 
   478  0311                     	;# 
   479  0312                     	;# 
   480  0313                     	;# 
   481  0318                     	;# 
   482  0318                     	;# 
   483  0319                     	;# 
   484  031A                     	;# 
   485  031C                     	;# 
   486  031C                     	;# 
   487  031D                     	;# 
   488  031E                     	;# 
   489  038C                     	;# 
   490  038D                     	;# 
   491  0394                     	;# 
   492  0395                     	;# 
   493  0396                     	;# 
   494  040C                     	;# 
   495  040D                     	;# 
   496  0411                     	;# 
   497  0411                     	;# 
   498  0412                     	;# 
   499  0413                     	;# 
   500  0414                     	;# 
   501  0415                     	;# 
   502  0416                     	;# 
   503  0417                     	;# 
   504  0418                     	;# 
   505  0418                     	;# 
   506  0419                     	;# 
   507  041A                     	;# 
   508  041B                     	;# 
   509  041C                     	;# 
   510  041D                     	;# 
   511  041E                     	;# 
   512  048D                     	;# 
   513  0491                     	;# 
   514  0491                     	;# 
   515  0492                     	;# 
   516  0492                     	;# 
   517  0493                     	;# 
   518  0493                     	;# 
   519  0493                     	;# 
   520  0494                     	;# 
   521  0494                     	;# 
   522  0495                     	;# 
   523  0495                     	;# 
   524  0496                     	;# 
   525  0496                     	;# 
   526  0497                     	;# 
   527  0497                     	;# 
   528  0595                     	;# 
   529  0596                     	;# 
   530  0597                     	;# 
   531  059C                     	;# 
   532  059D                     	;# 
   533  059E                     	;# 
   534  0611                     	;# 
   535  0611                     	;# 
   536  0612                     	;# 
   537  0613                     	;# 
   538  0614                     	;# 
   539  0614                     	;# 
   540  0615                     	;# 
   541  0616                     	;# 
   542  0617                     	;# 
   543  0617                     	;# 
   544  0618                     	;# 
   545  0619                     	;# 
   546  061A                     	;# 
   547  061A                     	;# 
   548  061B                     	;# 
   549  061C                     	;# 
   550  061D                     	;# 
   551  061D                     	;# 
   552  061E                     	;# 
   553  061F                     	;# 
   554  0FE4                     	;# 
   555  0FE5                     	;# 
   556  0FE6                     	;# 
   557  0FE7                     	;# 
   558  0FE8                     	;# 
   559  0FE9                     	;# 
   560  0FEA                     	;# 
   561  0FEB                     	;# 
   562  0FED                     	;# 
   563  0FEE                     	;# 
   564  0FEF                     	;# 
   565  0000                     	;# 
   566  0001                     	;# 
   567  0002                     	;# 
   568  0003                     	;# 
   569  0004                     	;# 
   570  0005                     	;# 
   571  0006                     	;# 
   572  0007                     	;# 
   573  0008                     	;# 
   574  0009                     	;# 
   575  000A                     	;# 
   576  000B                     	;# 
   577  000C                     	;# 
   578  000D                     	;# 
   579  000E                     	;# 
   580  000F                     	;# 
   581  0010                     	;# 
   582  0011                     	;# 
   583  0012                     	;# 
   584  0013                     	;# 
   585  0014                     	;# 
   586  0015                     	;# 
   587  0016                     	;# 
   588  0016                     	;# 
   589  0017                     	;# 
   590  0018                     	;# 
   591  0019                     	;# 
   592  001A                     	;# 
   593  001B                     	;# 
   594  001C                     	;# 
   595  008C                     	;# 
   596  008D                     	;# 
   597  008E                     	;# 
   598  008F                     	;# 
   599  0090                     	;# 
   600  0091                     	;# 
   601  0092                     	;# 
   602  0093                     	;# 
   603  0094                     	;# 
   604  0095                     	;# 
   605  0096                     	;# 
   606  0097                     	;# 
   607  0099                     	;# 
   608  009A                     	;# 
   609  009B                     	;# 
   610  009B                     	;# 
   611  009C                     	;# 
   612  009D                     	;# 
   613  009E                     	;# 
   614  010C                     	;# 
   615  010D                     	;# 
   616  010E                     	;# 
   617  010F                     	;# 
   618  0110                     	;# 
   619  0116                     	;# 
   620  0117                     	;# 
   621  011D                     	;# 
   622  018C                     	;# 
   623  018D                     	;# 
   624  018F                     	;# 
   625  0190                     	;# 
   626  0191                     	;# 
   627  0191                     	;# 
   628  0192                     	;# 
   629  0193                     	;# 
   630  0193                     	;# 
   631  0194                     	;# 
   632  0195                     	;# 
   633  0196                     	;# 
   634  0197                     	;# 
   635  0199                     	;# 
   636  0199                     	;# 
   637  0199                     	;# 
   638  019A                     	;# 
   639  019A                     	;# 
   640  019A                     	;# 
   641  019B                     	;# 
   642  019B                     	;# 
   643  019B                     	;# 
   644  019B                     	;# 
   645  019B                     	;# 
   646  019C                     	;# 
   647  019C                     	;# 
   648  019C                     	;# 
   649  019D                     	;# 
   650  019D                     	;# 
   651  019D                     	;# 
   652  019E                     	;# 
   653  019E                     	;# 
   654  019E                     	;# 
   655  019F                     	;# 
   656  019F                     	;# 
   657  019F                     	;# 
   658  020D                     	;# 
   659  020F                     	;# 
   660  0210                     	;# 
   661  0211                     	;# 
   662  0211                     	;# 
   663  0212                     	;# 
   664  0212                     	;# 
   665  0213                     	;# 
   666  0213                     	;# 
   667  0214                     	;# 
   668  0214                     	;# 
   669  0215                     	;# 
   670  0215                     	;# 
   671  0215                     	;# 
   672  0216                     	;# 
   673  0216                     	;# 
   674  0217                     	;# 
   675  0217                     	;# 
   676  0219                     	;# 
   677  021A                     	;# 
   678  021B                     	;# 
   679  021C                     	;# 
   680  021D                     	;# 
   681  021E                     	;# 
   682  021F                     	;# 
   683  028C                     	;# 
   684  028D                     	;# 
   685  0291                     	;# 
   686  0291                     	;# 
   687  0292                     	;# 
   688  0293                     	;# 
   689  0298                     	;# 
   690  0298                     	;# 
   691  0299                     	;# 
   692  029A                     	;# 
   693  029D                     	;# 
   694  029E                     	;# 
   695  029F                     	;# 
   696  030C                     	;# 
   697  030D                     	;# 
   698  0311                     	;# 
   699  0311                     	;# 
   700  0312                     	;# 
   701  0313                     	;# 
   702  0318                     	;# 
   703  0318                     	;# 
   704  0319                     	;# 
   705  031A                     	;# 
   706  031C                     	;# 
   707  031C                     	;# 
   708  031D                     	;# 
   709  031E                     	;# 
   710  038C                     	;# 
   711  038D                     	;# 
   712  0394                     	;# 
   713  0395                     	;# 
   714  0396                     	;# 
   715  040C                     	;# 
   716  040D                     	;# 
   717  0411                     	;# 
   718  0411                     	;# 
   719  0412                     	;# 
   720  0413                     	;# 
   721  0414                     	;# 
   722  0415                     	;# 
   723  0416                     	;# 
   724  0417                     	;# 
   725  0418                     	;# 
   726  0418                     	;# 
   727  0419                     	;# 
   728  041A                     	;# 
   729  041B                     	;# 
   730  041C                     	;# 
   731  041D                     	;# 
   732  041E                     	;# 
   733  048D                     	;# 
   734  0491                     	;# 
   735  0491                     	;# 
   736  0492                     	;# 
   737  0492                     	;# 
   738  0493                     	;# 
   739  0493                     	;# 
   740  0493                     	;# 
   741  0494                     	;# 
   742  0494                     	;# 
   743  0495                     	;# 
   744  0495                     	;# 
   745  0496                     	;# 
   746  0496                     	;# 
   747  0497                     	;# 
   748  0497                     	;# 
   749  0595                     	;# 
   750  0596                     	;# 
   751  0597                     	;# 
   752  059C                     	;# 
   753  059D                     	;# 
   754  059E                     	;# 
   755  0611                     	;# 
   756  0611                     	;# 
   757  0612                     	;# 
   758  0613                     	;# 
   759  0614                     	;# 
   760  0614                     	;# 
   761  0615                     	;# 
   762  0616                     	;# 
   763  0617                     	;# 
   764  0617                     	;# 
   765  0618                     	;# 
   766  0619                     	;# 
   767  061A                     	;# 
   768  061A                     	;# 
   769  061B                     	;# 
   770  061C                     	;# 
   771  061D                     	;# 
   772  061D                     	;# 
   773  061E                     	;# 
   774  061F                     	;# 
   775  0FE4                     	;# 
   776  0FE5                     	;# 
   777  0FE6                     	;# 
   778  0FE7                     	;# 
   779  0FE8                     	;# 
   780  0FE9                     	;# 
   781  0FEA                     	;# 
   782  0FEB                     	;# 
   783  0FED                     	;# 
   784  0FEE                     	;# 
   785  0FEF                     	;# 
   786  0000                     	;# 
   787  0001                     	;# 
   788  0002                     	;# 
   789  0003                     	;# 
   790  0004                     	;# 
   791  0005                     	;# 
   792  0006                     	;# 
   793  0007                     	;# 
   794  0008                     	;# 
   795  0009                     	;# 
   796  000A                     	;# 
   797  000B                     	;# 
   798  000C                     	;# 
   799  000D                     	;# 
   800  000E                     	;# 
   801  000F                     	;# 
   802  0010                     	;# 
   803  0011                     	;# 
   804  0012                     	;# 
   805  0013                     	;# 
   806  0014                     	;# 
   807  0015                     	;# 
   808  0016                     	;# 
   809  0016                     	;# 
   810  0017                     	;# 
   811  0018                     	;# 
   812  0019                     	;# 
   813  001A                     	;# 
   814  001B                     	;# 
   815  001C                     	;# 
   816  008C                     	;# 
   817  008D                     	;# 
   818  008E                     	;# 
   819  008F                     	;# 
   820  0090                     	;# 
   821  0091                     	;# 
   822  0092                     	;# 
   823  0093                     	;# 
   824  0094                     	;# 
   825  0095                     	;# 
   826  0096                     	;# 
   827  0097                     	;# 
   828  0099                     	;# 
   829  009A                     	;# 
   830  009B                     	;# 
   831  009B                     	;# 
   832  009C                     	;# 
   833  009D                     	;# 
   834  009E                     	;# 
   835  010C                     	;# 
   836  010D                     	;# 
   837  010E                     	;# 
   838  010F                     	;# 
   839  0110                     	;# 
   840  0116                     	;# 
   841  0117                     	;# 
   842  011D                     	;# 
   843  018C                     	;# 
   844  018D                     	;# 
   845  018F                     	;# 
   846  0190                     	;# 
   847  0191                     	;# 
   848  0191                     	;# 
   849  0192                     	;# 
   850  0193                     	;# 
   851  0193                     	;# 
   852  0194                     	;# 
   853  0195                     	;# 
   854  0196                     	;# 
   855  0197                     	;# 
   856  0199                     	;# 
   857  0199                     	;# 
   858  0199                     	;# 
   859  019A                     	;# 
   860  019A                     	;# 
   861  019A                     	;# 
   862  019B                     	;# 
   863  019B                     	;# 
   864  019B                     	;# 
   865  019B                     	;# 
   866  019B                     	;# 
   867  019C                     	;# 
   868  019C                     	;# 
   869  019C                     	;# 
   870  019D                     	;# 
   871  019D                     	;# 
   872  019D                     	;# 
   873  019E                     	;# 
   874  019E                     	;# 
   875  019E                     	;# 
   876  019F                     	;# 
   877  019F                     	;# 
   878  019F                     	;# 
   879  020D                     	;# 
   880  020F                     	;# 
   881  0210                     	;# 
   882  0211                     	;# 
   883  0211                     	;# 
   884  0212                     	;# 
   885  0212                     	;# 
   886  0213                     	;# 
   887  0213                     	;# 
   888  0214                     	;# 
   889  0214                     	;# 
   890  0215                     	;# 
   891  0215                     	;# 
   892  0215                     	;# 
   893  0216                     	;# 
   894  0216                     	;# 
   895  0217                     	;# 
   896  0217                     	;# 
   897  0219                     	;# 
   898  021A                     	;# 
   899  021B                     	;# 
   900  021C                     	;# 
   901  021D                     	;# 
   902  021E                     	;# 
   903  021F                     	;# 
   904  028C                     	;# 
   905  028D                     	;# 
   906  0291                     	;# 
   907  0291                     	;# 
   908  0292                     	;# 
   909  0293                     	;# 
   910  0298                     	;# 
   911  0298                     	;# 
   912  0299                     	;# 
   913  029A                     	;# 
   914  029D                     	;# 
   915  029E                     	;# 
   916  029F                     	;# 
   917  030C                     	;# 
   918  030D                     	;# 
   919  0311                     	;# 
   920  0311                     	;# 
   921  0312                     	;# 
   922  0313                     	;# 
   923  0318                     	;# 
   924  0318                     	;# 
   925  0319                     	;# 
   926  031A                     	;# 
   927  031C                     	;# 
   928  031C                     	;# 
   929  031D                     	;# 
   930  031E                     	;# 
   931  038C                     	;# 
   932  038D                     	;# 
   933  0394                     	;# 
   934  0395                     	;# 
   935  0396                     	;# 
   936  040C                     	;# 
   937  040D                     	;# 
   938  0411                     	;# 
   939  0411                     	;# 
   940  0412                     	;# 
   941  0413                     	;# 
   942  0414                     	;# 
   943  0415                     	;# 
   944  0416                     	;# 
   945  0417                     	;# 
   946  0418                     	;# 
   947  0418                     	;# 
   948  0419                     	;# 
   949  041A                     	;# 
   950  041B                     	;# 
   951  041C                     	;# 
   952  041D                     	;# 
   953  041E                     	;# 
   954  048D                     	;# 
   955  0491                     	;# 
   956  0491                     	;# 
   957  0492                     	;# 
   958  0492                     	;# 
   959  0493                     	;# 
   960  0493                     	;# 
   961  0493                     	;# 
   962  0494                     	;# 
   963  0494                     	;# 
   964  0495                     	;# 
   965  0495                     	;# 
   966  0496                     	;# 
   967  0496                     	;# 
   968  0497                     	;# 
   969  0497                     	;# 
   970  0595                     	;# 
   971  0596                     	;# 
   972  0597                     	;# 
   973  059C                     	;# 
   974  059D                     	;# 
   975  059E                     	;# 
   976  0611                     	;# 
   977  0611                     	;# 
   978  0612                     	;# 
   979  0613                     	;# 
   980  0614                     	;# 
   981  0614                     	;# 
   982  0615                     	;# 
   983  0616                     	;# 
   984  0617                     	;# 
   985  0617                     	;# 
   986  0618                     	;# 
   987  0619                     	;# 
   988  061A                     	;# 
   989  061A                     	;# 
   990  061B                     	;# 
   991  061C                     	;# 
   992  061D                     	;# 
   993  061D                     	;# 
   994  061E                     	;# 
   995  061F                     	;# 
   996  0FE4                     	;# 
   997  0FE5                     	;# 
   998  0FE6                     	;# 
   999  0FE7                     	;# 
  1000  0FE8                     	;# 
  1001  0FE9                     	;# 
  1002  0FEA                     	;# 
  1003  0FEB                     	;# 
  1004  0FED                     	;# 
  1005  0FEE                     	;# 
  1006  0FEF                     	;# 
  1007  0000                     	;# 
  1008  0001                     	;# 
  1009  0002                     	;# 
  1010  0003                     	;# 
  1011  0004                     	;# 
  1012  0005                     	;# 
  1013  0006                     	;# 
  1014  0007                     	;# 
  1015  0008                     	;# 
  1016  0009                     	;# 
  1017  000A                     	;# 
  1018  000B                     	;# 
  1019  000C                     	;# 
  1020  000D                     	;# 
  1021  000E                     	;# 
  1022  000F                     	;# 
  1023  0010                     	;# 
  1024  0011                     	;# 
  1025  0012                     	;# 
  1026  0013                     	;# 
  1027  0014                     	;# 
  1028  0015                     	;# 
  1029  0016                     	;# 
  1030  0016                     	;# 
  1031  0017                     	;# 
  1032  0018                     	;# 
  1033  0019                     	;# 
  1034  001A                     	;# 
  1035  001B                     	;# 
  1036  001C                     	;# 
  1037  008C                     	;# 
  1038  008D                     	;# 
  1039  008E                     	;# 
  1040  008F                     	;# 
  1041  0090                     	;# 
  1042  0091                     	;# 
  1043  0092                     	;# 
  1044  0093                     	;# 
  1045  0094                     	;# 
  1046  0095                     	;# 
  1047  0096                     	;# 
  1048  0097                     	;# 
  1049  0099                     	;# 
  1050  009A                     	;# 
  1051  009B                     	;# 
  1052  009B                     	;# 
  1053  009C                     	;# 
  1054  009D                     	;# 
  1055  009E                     	;# 
  1056  010C                     	;# 
  1057  010D                     	;# 
  1058  010E                     	;# 
  1059  010F                     	;# 
  1060  0110                     	;# 
  1061  0116                     	;# 
  1062  0117                     	;# 
  1063  011D                     	;# 
  1064  018C                     	;# 
  1065  018D                     	;# 
  1066  018F                     	;# 
  1067  0190                     	;# 
  1068  0191                     	;# 
  1069  0191                     	;# 
  1070  0192                     	;# 
  1071  0193                     	;# 
  1072  0193                     	;# 
  1073  0194                     	;# 
  1074  0195                     	;# 
  1075  0196                     	;# 
  1076  0197                     	;# 
  1077  0199                     	;# 
  1078  0199                     	;# 
  1079  0199                     	;# 
  1080  019A                     	;# 
  1081  019A                     	;# 
  1082  019A                     	;# 
  1083  019B                     	;# 
  1084  019B                     	;# 
  1085  019B                     	;# 
  1086  019B                     	;# 
  1087  019B                     	;# 
  1088  019C                     	;# 
  1089  019C                     	;# 
  1090  019C                     	;# 
  1091  019D                     	;# 
  1092  019D                     	;# 
  1093  019D                     	;# 
  1094  019E                     	;# 
  1095  019E                     	;# 
  1096  019E                     	;# 
  1097  019F                     	;# 
  1098  019F                     	;# 
  1099  019F                     	;# 
  1100  020D                     	;# 
  1101  020F                     	;# 
  1102  0210                     	;# 
  1103  0211                     	;# 
  1104  0211                     	;# 
  1105  0212                     	;# 
  1106  0212                     	;# 
  1107  0213                     	;# 
  1108  0213                     	;# 
  1109  0214                     	;# 
  1110  0214                     	;# 
  1111  0215                     	;# 
  1112  0215                     	;# 
  1113  0215                     	;# 
  1114  0216                     	;# 
  1115  0216                     	;# 
  1116  0217                     	;# 
  1117  0217                     	;# 
  1118  0219                     	;# 
  1119  021A                     	;# 
  1120  021B                     	;# 
  1121  021C                     	;# 
  1122  021D                     	;# 
  1123  021E                     	;# 
  1124  021F                     	;# 
  1125  028C                     	;# 
  1126  028D                     	;# 
  1127  0291                     	;# 
  1128  0291                     	;# 
  1129  0292                     	;# 
  1130  0293                     	;# 
  1131  0298                     	;# 
  1132  0298                     	;# 
  1133  0299                     	;# 
  1134  029A                     	;# 
  1135  029D                     	;# 
  1136  029E                     	;# 
  1137  029F                     	;# 
  1138  030C                     	;# 
  1139  030D                     	;# 
  1140  0311                     	;# 
  1141  0311                     	;# 
  1142  0312                     	;# 
  1143  0313                     	;# 
  1144  0318                     	;# 
  1145  0318                     	;# 
  1146  0319                     	;# 
  1147  031A                     	;# 
  1148  031C                     	;# 
  1149  031C                     	;# 
  1150  031D                     	;# 
  1151  031E                     	;# 
  1152  038C                     	;# 
  1153  038D                     	;# 
  1154  0394                     	;# 
  1155  0395                     	;# 
  1156  0396                     	;# 
  1157  040C                     	;# 
  1158  040D                     	;# 
  1159  0411                     	;# 
  1160  0411                     	;# 
  1161  0412                     	;# 
  1162  0413                     	;# 
  1163  0414                     	;# 
  1164  0415                     	;# 
  1165  0416                     	;# 
  1166  0417                     	;# 
  1167  0418                     	;# 
  1168  0418                     	;# 
  1169  0419                     	;# 
  1170  041A                     	;# 
  1171  041B                     	;# 
  1172  041C                     	;# 
  1173  041D                     	;# 
  1174  041E                     	;# 
  1175  048D                     	;# 
  1176  0491                     	;# 
  1177  0491                     	;# 
  1178  0492                     	;# 
  1179  0492                     	;# 
  1180  0493                     	;# 
  1181  0493                     	;# 
  1182  0493                     	;# 
  1183  0494                     	;# 
  1184  0494                     	;# 
  1185  0495                     	;# 
  1186  0495                     	;# 
  1187  0496                     	;# 
  1188  0496                     	;# 
  1189  0497                     	;# 
  1190  0497                     	;# 
  1191  0595                     	;# 
  1192  0596                     	;# 
  1193  0597                     	;# 
  1194  059C                     	;# 
  1195  059D                     	;# 
  1196  059E                     	;# 
  1197  0611                     	;# 
  1198  0611                     	;# 
  1199  0612                     	;# 
  1200  0613                     	;# 
  1201  0614                     	;# 
  1202  0614                     	;# 
  1203  0615                     	;# 
  1204  0616                     	;# 
  1205  0617                     	;# 
  1206  0617                     	;# 
  1207  0618                     	;# 
  1208  0619                     	;# 
  1209  061A                     	;# 
  1210  061A                     	;# 
  1211  061B                     	;# 
  1212  061C                     	;# 
  1213  061D                     	;# 
  1214  061D                     	;# 
  1215  061E                     	;# 
  1216  061F                     	;# 
  1217  0FE4                     	;# 
  1218  0FE5                     	;# 
  1219  0FE6                     	;# 
  1220  0FE7                     	;# 
  1221  0FE8                     	;# 
  1222  0FE9                     	;# 
  1223  0FEA                     	;# 
  1224  0FEB                     	;# 
  1225  0FED                     	;# 
  1226  0FEE                     	;# 
  1227  0FEF                     	;# 
  1228  0000                     	;# 
  1229  0001                     	;# 
  1230  0002                     	;# 
  1231  0003                     	;# 
  1232  0004                     	;# 
  1233  0005                     	;# 
  1234  0006                     	;# 
  1235  0007                     	;# 
  1236  0008                     	;# 
  1237  0009                     	;# 
  1238  000A                     	;# 
  1239  000B                     	;# 
  1240  000C                     	;# 
  1241  000D                     	;# 
  1242  000E                     	;# 
  1243  000F                     	;# 
  1244  0010                     	;# 
  1245  0011                     	;# 
  1246  0012                     	;# 
  1247  0013                     	;# 
  1248  0014                     	;# 
  1249  0015                     	;# 
  1250  0016                     	;# 
  1251  0016                     	;# 
  1252  0017                     	;# 
  1253  0018                     	;# 
  1254  0019                     	;# 
  1255  001A                     	;# 
  1256  001B                     	;# 
  1257  001C                     	;# 
  1258  008C                     	;# 
  1259  008D                     	;# 
  1260  008E                     	;# 
  1261  008F                     	;# 
  1262  0090                     	;# 
  1263  0091                     	;# 
  1264  0092                     	;# 
  1265  0093                     	;# 
  1266  0094                     	;# 
  1267  0095                     	;# 
  1268  0096                     	;# 
  1269  0097                     	;# 
  1270  0099                     	;# 
  1271  009A                     	;# 
  1272  009B                     	;# 
  1273  009B                     	;# 
  1274  009C                     	;# 
  1275  009D                     	;# 
  1276  009E                     	;# 
  1277  010C                     	;# 
  1278  010D                     	;# 
  1279  010E                     	;# 
  1280  010F                     	;# 
  1281  0110                     	;# 
  1282  0116                     	;# 
  1283  0117                     	;# 
  1284  011D                     	;# 
  1285  018C                     	;# 
  1286  018D                     	;# 
  1287  018F                     	;# 
  1288  0190                     	;# 
  1289  0191                     	;# 
  1290  0191                     	;# 
  1291  0192                     	;# 
  1292  0193                     	;# 
  1293  0193                     	;# 
  1294  0194                     	;# 
  1295  0195                     	;# 
  1296  0196                     	;# 
  1297  0197                     	;# 
  1298  0199                     	;# 
  1299  0199                     	;# 
  1300  0199                     	;# 
  1301  019A                     	;# 
  1302  019A                     	;# 
  1303  019A                     	;# 
  1304  019B                     	;# 
  1305  019B                     	;# 
  1306  019B                     	;# 
  1307  019B                     	;# 
  1308  019B                     	;# 
  1309  019C                     	;# 
  1310  019C                     	;# 
  1311  019C                     	;# 
  1312  019D                     	;# 
  1313  019D                     	;# 
  1314  019D                     	;# 
  1315  019E                     	;# 
  1316  019E                     	;# 
  1317  019E                     	;# 
  1318  019F                     	;# 
  1319  019F                     	;# 
  1320  019F                     	;# 
  1321  020D                     	;# 
  1322  020F                     	;# 
  1323  0210                     	;# 
  1324  0211                     	;# 
  1325  0211                     	;# 
  1326  0212                     	;# 
  1327  0212                     	;# 
  1328  0213                     	;# 
  1329  0213                     	;# 
  1330  0214                     	;# 
  1331  0214                     	;# 
  1332  0215                     	;# 
  1333  0215                     	;# 
  1334  0215                     	;# 
  1335  0216                     	;# 
  1336  0216                     	;# 
  1337  0217                     	;# 
  1338  0217                     	;# 
  1339  0219                     	;# 
  1340  021A                     	;# 
  1341  021B                     	;# 
  1342  021C                     	;# 
  1343  021D                     	;# 
  1344  021E                     	;# 
  1345  021F                     	;# 
  1346  028C                     	;# 
  1347  028D                     	;# 
  1348  0291                     	;# 
  1349  0291                     	;# 
  1350  0292                     	;# 
  1351  0293                     	;# 
  1352  0298                     	;# 
  1353  0298                     	;# 
  1354  0299                     	;# 
  1355  029A                     	;# 
  1356  029D                     	;# 
  1357  029E                     	;# 
  1358  029F                     	;# 
  1359  030C                     	;# 
  1360  030D                     	;# 
  1361  0311                     	;# 
  1362  0311                     	;# 
  1363  0312                     	;# 
  1364  0313                     	;# 
  1365  0318                     	;# 
  1366  0318                     	;# 
  1367  0319                     	;# 
  1368  031A                     	;# 
  1369  031C                     	;# 
  1370  031C                     	;# 
  1371  031D                     	;# 
  1372  031E                     	;# 
  1373  038C                     	;# 
  1374  038D                     	;# 
  1375  0394                     	;# 
  1376  0395                     	;# 
  1377  0396                     	;# 
  1378  040C                     	;# 
  1379  040D                     	;# 
  1380  0411                     	;# 
  1381  0411                     	;# 
  1382  0412                     	;# 
  1383  0413                     	;# 
  1384  0414                     	;# 
  1385  0415                     	;# 
  1386  0416                     	;# 
  1387  0417                     	;# 
  1388  0418                     	;# 
  1389  0418                     	;# 
  1390  0419                     	;# 
  1391  041A                     	;# 
  1392  041B                     	;# 
  1393  041C                     	;# 
  1394  041D                     	;# 
  1395  041E                     	;# 
  1396  048D                     	;# 
  1397  0491                     	;# 
  1398  0491                     	;# 
  1399  0492                     	;# 
  1400  0492                     	;# 
  1401  0493                     	;# 
  1402  0493                     	;# 
  1403  0493                     	;# 
  1404  0494                     	;# 
  1405  0494                     	;# 
  1406  0495                     	;# 
  1407  0495                     	;# 
  1408  0496                     	;# 
  1409  0496                     	;# 
  1410  0497                     	;# 
  1411  0497                     	;# 
  1412  0595                     	;# 
  1413  0596                     	;# 
  1414  0597                     	;# 
  1415  059C                     	;# 
  1416  059D                     	;# 
  1417  059E                     	;# 
  1418  0611                     	;# 
  1419  0611                     	;# 
  1420  0612                     	;# 
  1421  0613                     	;# 
  1422  0614                     	;# 
  1423  0614                     	;# 
  1424  0615                     	;# 
  1425  0616                     	;# 
  1426  0617                     	;# 
  1427  0617                     	;# 
  1428  0618                     	;# 
  1429  0619                     	;# 
  1430  061A                     	;# 
  1431  061A                     	;# 
  1432  061B                     	;# 
  1433  061C                     	;# 
  1434  061D                     	;# 
  1435  061D                     	;# 
  1436  061E                     	;# 
  1437  061F                     	;# 
  1438  0FE4                     	;# 
  1439  0FE5                     	;# 
  1440  0FE6                     	;# 
  1441  0FE7                     	;# 
  1442  0FE8                     	;# 
  1443  0FE9                     	;# 
  1444  0FEA                     	;# 
  1445  0FEB                     	;# 
  1446  0FED                     	;# 
  1447  0FEE                     	;# 
  1448  0FEF                     	;# 
  1449  0000                     	;# 
  1450  0001                     	;# 
  1451  0002                     	;# 
  1452  0003                     	;# 
  1453  0004                     	;# 
  1454  0005                     	;# 
  1455  0006                     	;# 
  1456  0007                     	;# 
  1457  0008                     	;# 
  1458  0009                     	;# 
  1459  000A                     	;# 
  1460  000B                     	;# 
  1461  000C                     	;# 
  1462  000D                     	;# 
  1463  000E                     	;# 
  1464  000F                     	;# 
  1465  0010                     	;# 
  1466  0011                     	;# 
  1467  0012                     	;# 
  1468  0013                     	;# 
  1469  0014                     	;# 
  1470  0015                     	;# 
  1471  0016                     	;# 
  1472  0016                     	;# 
  1473  0017                     	;# 
  1474  0018                     	;# 
  1475  0019                     	;# 
  1476  001A                     	;# 
  1477  001B                     	;# 
  1478  001C                     	;# 
  1479  008C                     	;# 
  1480  008D                     	;# 
  1481  008E                     	;# 
  1482  008F                     	;# 
  1483  0090                     	;# 
  1484  0091                     	;# 
  1485  0092                     	;# 
  1486  0093                     	;# 
  1487  0094                     	;# 
  1488  0095                     	;# 
  1489  0096                     	;# 
  1490  0097                     	;# 
  1491  0099                     	;# 
  1492  009A                     	;# 
  1493  009B                     	;# 
  1494  009B                     	;# 
  1495  009C                     	;# 
  1496  009D                     	;# 
  1497  009E                     	;# 
  1498  010C                     	;# 
  1499  010D                     	;# 
  1500  010E                     	;# 
  1501  010F                     	;# 
  1502  0110                     	;# 
  1503  0116                     	;# 
  1504  0117                     	;# 
  1505  011D                     	;# 
  1506  018C                     	;# 
  1507  018D                     	;# 
  1508  018F                     	;# 
  1509  0190                     	;# 
  1510  0191                     	;# 
  1511  0191                     	;# 
  1512  0192                     	;# 
  1513  0193                     	;# 
  1514  0193                     	;# 
  1515  0194                     	;# 
  1516  0195                     	;# 
  1517  0196                     	;# 
  1518  0197                     	;# 
  1519  0199                     	;# 
  1520  0199                     	;# 
  1521  0199                     	;# 
  1522  019A                     	;# 
  1523  019A                     	;# 
  1524  019A                     	;# 
  1525  019B                     	;# 
  1526  019B                     	;# 
  1527  019B                     	;# 
  1528  019B                     	;# 
  1529  019B                     	;# 
  1530  019C                     	;# 
  1531  019C                     	;# 
  1532  019C                     	;# 
  1533  019D                     	;# 
  1534  019D                     	;# 
  1535  019D                     	;# 
  1536  019E                     	;# 
  1537  019E                     	;# 
  1538  019E                     	;# 
  1539  019F                     	;# 
  1540  019F                     	;# 
  1541  019F                     	;# 
  1542  020D                     	;# 
  1543  020F                     	;# 
  1544  0210                     	;# 
  1545  0211                     	;# 
  1546  0211                     	;# 
  1547  0212                     	;# 
  1548  0212                     	;# 
  1549  0213                     	;# 
  1550  0213                     	;# 
  1551  0214                     	;# 
  1552  0214                     	;# 
  1553  0215                     	;# 
  1554  0215                     	;# 
  1555  0215                     	;# 
  1556  0216                     	;# 
  1557  0216                     	;# 
  1558  0217                     	;# 
  1559  0217                     	;# 
  1560  0219                     	;# 
  1561  021A                     	;# 
  1562  021B                     	;# 
  1563  021C                     	;# 
  1564  021D                     	;# 
  1565  021E                     	;# 
  1566  021F                     	;# 
  1567  028C                     	;# 
  1568  028D                     	;# 
  1569  0291                     	;# 
  1570  0291                     	;# 
  1571  0292                     	;# 
  1572  0293                     	;# 
  1573  0298                     	;# 
  1574  0298                     	;# 
  1575  0299                     	;# 
  1576  029A                     	;# 
  1577  029D                     	;# 
  1578  029E                     	;# 
  1579  029F                     	;# 
  1580  030C                     	;# 
  1581  030D                     	;# 
  1582  0311                     	;# 
  1583  0311                     	;# 
  1584  0312                     	;# 
  1585  0313                     	;# 
  1586  0318                     	;# 
  1587  0318                     	;# 
  1588  0319                     	;# 
  1589  031A                     	;# 
  1590  031C                     	;# 
  1591  031C                     	;# 
  1592  031D                     	;# 
  1593  031E                     	;# 
  1594  038C                     	;# 
  1595  038D                     	;# 
  1596  0394                     	;# 
  1597  0395                     	;# 
  1598  0396                     	;# 
  1599  040C                     	;# 
  1600  040D                     	;# 
  1601  0411                     	;# 
  1602  0411                     	;# 
  1603  0412                     	;# 
  1604  0413                     	;# 
  1605  0414                     	;# 
  1606  0415                     	;# 
  1607  0416                     	;# 
  1608  0417                     	;# 
  1609  0418                     	;# 
  1610  0418                     	;# 
  1611  0419                     	;# 
  1612  041A                     	;# 
  1613  041B                     	;# 
  1614  041C                     	;# 
  1615  041D                     	;# 
  1616  041E                     	;# 
  1617  048D                     	;# 
  1618  0491                     	;# 
  1619  0491                     	;# 
  1620  0492                     	;# 
  1621  0492                     	;# 
  1622  0493                     	;# 
  1623  0493                     	;# 
  1624  0493                     	;# 
  1625  0494                     	;# 
  1626  0494                     	;# 
  1627  0495                     	;# 
  1628  0495                     	;# 
  1629  0496                     	;# 
  1630  0496                     	;# 
  1631  0497                     	;# 
  1632  0497                     	;# 
  1633  0595                     	;# 
  1634  0596                     	;# 
  1635  0597                     	;# 
  1636  059C                     	;# 
  1637  059D                     	;# 
  1638  059E                     	;# 
  1639  0611                     	;# 
  1640  0611                     	;# 
  1641  0612                     	;# 
  1642  0613                     	;# 
  1643  0614                     	;# 
  1644  0614                     	;# 
  1645  0615                     	;# 
  1646  0616                     	;# 
  1647  0617                     	;# 
  1648  0617                     	;# 
  1649  0618                     	;# 
  1650  0619                     	;# 
  1651  061A                     	;# 
  1652  061A                     	;# 
  1653  061B                     	;# 
  1654  061C                     	;# 
  1655  061D                     	;# 
  1656  061D                     	;# 
  1657  061E                     	;# 
  1658  061F                     	;# 
  1659  0FE4                     	;# 
  1660  0FE5                     	;# 
  1661  0FE6                     	;# 
  1662  0FE7                     	;# 
  1663  0FE8                     	;# 
  1664  0FE9                     	;# 
  1665  0FEA                     	;# 
  1666  0FEB                     	;# 
  1667  0FED                     	;# 
  1668  0FEE                     	;# 
  1669  0FEF                     	;# 
  1670  0000                     	;# 
  1671  0001                     	;# 
  1672  0002                     	;# 
  1673  0003                     	;# 
  1674  0004                     	;# 
  1675  0005                     	;# 
  1676  0006                     	;# 
  1677  0007                     	;# 
  1678  0008                     	;# 
  1679  0009                     	;# 
  1680  000A                     	;# 
  1681  000B                     	;# 
  1682  000C                     	;# 
  1683  000D                     	;# 
  1684  000E                     	;# 
  1685  000F                     	;# 
  1686  0010                     	;# 
  1687  0011                     	;# 
  1688  0012                     	;# 
  1689  0013                     	;# 
  1690  0014                     	;# 
  1691  0015                     	;# 
  1692  0016                     	;# 
  1693  0016                     	;# 
  1694  0017                     	;# 
  1695  0018                     	;# 
  1696  0019                     	;# 
  1697  001A                     	;# 
  1698  001B                     	;# 
  1699  001C                     	;# 
  1700  008C                     	;# 
  1701  008D                     	;# 
  1702  008E                     	;# 
  1703  008F                     	;# 
  1704  0090                     	;# 
  1705  0091                     	;# 
  1706  0092                     	;# 
  1707  0093                     	;# 
  1708  0094                     	;# 
  1709  0095                     	;# 
  1710  0096                     	;# 
  1711  0097                     	;# 
  1712  0099                     	;# 
  1713  009A                     	;# 
  1714  009B                     	;# 
  1715  009B                     	;# 
  1716  009C                     	;# 
  1717  009D                     	;# 
  1718  009E                     	;# 
  1719  010C                     	;# 
  1720  010D                     	;# 
  1721  010E                     	;# 
  1722  010F                     	;# 
  1723  0110                     	;# 
  1724  0116                     	;# 
  1725  0117                     	;# 
  1726  011D                     	;# 
  1727  018C                     	;# 
  1728  018D                     	;# 
  1729  018F                     	;# 
  1730  0190                     	;# 
  1731  0191                     	;# 
  1732  0191                     	;# 
  1733  0192                     	;# 
  1734  0193                     	;# 
  1735  0193                     	;# 
  1736  0194                     	;# 
  1737  0195                     	;# 
  1738  0196                     	;# 
  1739  0197                     	;# 
  1740  0199                     	;# 
  1741  0199                     	;# 
  1742  0199                     	;# 
  1743  019A                     	;# 
  1744  019A                     	;# 
  1745  019A                     	;# 
  1746  019B                     	;# 
  1747  019B                     	;# 
  1748  019B                     	;# 
  1749  019B                     	;# 
  1750  019B                     	;# 
  1751  019C                     	;# 
  1752  019C                     	;# 
  1753  019C                     	;# 
  1754  019D                     	;# 
  1755  019D                     	;# 
  1756  019D                     	;# 
  1757  019E                     	;# 
  1758  019E                     	;# 
  1759  019E                     	;# 
  1760  019F                     	;# 
  1761  019F                     	;# 
  1762  019F                     	;# 
  1763  020D                     	;# 
  1764  020F                     	;# 
  1765  0210                     	;# 
  1766  0211                     	;# 
  1767  0211                     	;# 
  1768  0212                     	;# 
  1769  0212                     	;# 
  1770  0213                     	;# 
  1771  0213                     	;# 
  1772  0214                     	;# 
  1773  0214                     	;# 
  1774  0215                     	;# 
  1775  0215                     	;# 
  1776  0215                     	;# 
  1777  0216                     	;# 
  1778  0216                     	;# 
  1779  0217                     	;# 
  1780  0217                     	;# 
  1781  0219                     	;# 
  1782  021A                     	;# 
  1783  021B                     	;# 
  1784  021C                     	;# 
  1785  021D                     	;# 
  1786  021E                     	;# 
  1787  021F                     	;# 
  1788  028C                     	;# 
  1789  028D                     	;# 
  1790  0291                     	;# 
  1791  0291                     	;# 
  1792  0292                     	;# 
  1793  0293                     	;# 
  1794  0298                     	;# 
  1795  0298                     	;# 
  1796  0299                     	;# 
  1797  029A                     	;# 
  1798  029D                     	;# 
  1799  029E                     	;# 
  1800  029F                     	;# 
  1801  030C                     	;# 
  1802  030D                     	;# 
  1803  0311                     	;# 
  1804  0311                     	;# 
  1805  0312                     	;# 
  1806  0313                     	;# 
  1807  0318                     	;# 
  1808  0318                     	;# 
  1809  0319                     	;# 
  1810  031A                     	;# 
  1811  031C                     	;# 
  1812  031C                     	;# 
  1813  031D                     	;# 
  1814  031E                     	;# 
  1815  038C                     	;# 
  1816  038D                     	;# 
  1817  0394                     	;# 
  1818  0395                     	;# 
  1819  0396                     	;# 
  1820  040C                     	;# 
  1821  040D                     	;# 
  1822  0411                     	;# 
  1823  0411                     	;# 
  1824  0412                     	;# 
  1825  0413                     	;# 
  1826  0414                     	;# 
  1827  0415                     	;# 
  1828  0416                     	;# 
  1829  0417                     	;# 
  1830  0418                     	;# 
  1831  0418                     	;# 
  1832  0419                     	;# 
  1833  041A                     	;# 
  1834  041B                     	;# 
  1835  041C                     	;# 
  1836  041D                     	;# 
  1837  041E                     	;# 
  1838  048D                     	;# 
  1839  0491                     	;# 
  1840  0491                     	;# 
  1841  0492                     	;# 
  1842  0492                     	;# 
  1843  0493                     	;# 
  1844  0493                     	;# 
  1845  0493                     	;# 
  1846  0494                     	;# 
  1847  0494                     	;# 
  1848  0495                     	;# 
  1849  0495                     	;# 
  1850  0496                     	;# 
  1851  0496                     	;# 
  1852  0497                     	;# 
  1853  0497                     	;# 
  1854  0595                     	;# 
  1855  0596                     	;# 
  1856  0597                     	;# 
  1857  059C                     	;# 
  1858  059D                     	;# 
  1859  059E                     	;# 
  1860  0611                     	;# 
  1861  0611                     	;# 
  1862  0612                     	;# 
  1863  0613                     	;# 
  1864  0614                     	;# 
  1865  0614                     	;# 
  1866  0615                     	;# 
  1867  0616                     	;# 
  1868  0617                     	;# 
  1869  0617                     	;# 
  1870  0618                     	;# 
  1871  0619                     	;# 
  1872  061A                     	;# 
  1873  061A                     	;# 
  1874  061B                     	;# 
  1875  061C                     	;# 
  1876  061D                     	;# 
  1877  061D                     	;# 
  1878  061E                     	;# 
  1879  061F                     	;# 
  1880  0FE4                     	;# 
  1881  0FE5                     	;# 
  1882  0FE6                     	;# 
  1883  0FE7                     	;# 
  1884  0FE8                     	;# 
  1885  0FE9                     	;# 
  1886  0FEA                     	;# 
  1887  0FEB                     	;# 
  1888  0FED                     	;# 
  1889  0FEE                     	;# 
  1890  0FEF                     	;# 
  1891  0000                     	;# 
  1892  0001                     	;# 
  1893  0002                     	;# 
  1894  0003                     	;# 
  1895  0004                     	;# 
  1896  0005                     	;# 
  1897  0006                     	;# 
  1898  0007                     	;# 
  1899  0008                     	;# 
  1900  0009                     	;# 
  1901  000A                     	;# 
  1902  000B                     	;# 
  1903  000C                     	;# 
  1904  000D                     	;# 
  1905  000E                     	;# 
  1906  000F                     	;# 
  1907  0010                     	;# 
  1908  0011                     	;# 
  1909  0012                     	;# 
  1910  0013                     	;# 
  1911  0014                     	;# 
  1912  0015                     	;# 
  1913  0016                     	;# 
  1914  0016                     	;# 
  1915  0017                     	;# 
  1916  0018                     	;# 
  1917  0019                     	;# 
  1918  001A                     	;# 
  1919  001B                     	;# 
  1920  001C                     	;# 
  1921  008C                     	;# 
  1922  008D                     	;# 
  1923  008E                     	;# 
  1924  008F                     	;# 
  1925  0090                     	;# 
  1926  0091                     	;# 
  1927  0092                     	;# 
  1928  0093                     	;# 
  1929  0094                     	;# 
  1930  0095                     	;# 
  1931  0096                     	;# 
  1932  0097                     	;# 
  1933  0099                     	;# 
  1934  009A                     	;# 
  1935  009B                     	;# 
  1936  009B                     	;# 
  1937  009C                     	;# 
  1938  009D                     	;# 
  1939  009E                     	;# 
  1940  010C                     	;# 
  1941  010D                     	;# 
  1942  010E                     	;# 
  1943  010F                     	;# 
  1944  0110                     	;# 
  1945  0116                     	;# 
  1946  0117                     	;# 
  1947  011D                     	;# 
  1948  018C                     	;# 
  1949  018D                     	;# 
  1950  018F                     	;# 
  1951  0190                     	;# 
  1952  0191                     	;# 
  1953  0191                     	;# 
  1954  0192                     	;# 
  1955  0193                     	;# 
  1956  0193                     	;# 
  1957  0194                     	;# 
  1958  0195                     	;# 
  1959  0196                     	;# 
  1960  0197                     	;# 
  1961  0199                     	;# 
  1962  0199                     	;# 
  1963  0199                     	;# 
  1964  019A                     	;# 
  1965  019A                     	;# 
  1966  019A                     	;# 
  1967  019B                     	;# 
  1968  019B                     	;# 
  1969  019B                     	;# 
  1970  019B                     	;# 
  1971  019B                     	;# 
  1972  019C                     	;# 
  1973  019C                     	;# 
  1974  019C                     	;# 
  1975  019D                     	;# 
  1976  019D                     	;# 
  1977  019D                     	;# 
  1978  019E                     	;# 
  1979  019E                     	;# 
  1980  019E                     	;# 
  1981  019F                     	;# 
  1982  019F                     	;# 
  1983  019F                     	;# 
  1984  020D                     	;# 
  1985  020F                     	;# 
  1986  0210                     	;# 
  1987  0211                     	;# 
  1988  0211                     	;# 
  1989  0212                     	;# 
  1990  0212                     	;# 
  1991  0213                     	;# 
  1992  0213                     	;# 
  1993  0214                     	;# 
  1994  0214                     	;# 
  1995  0215                     	;# 
  1996  0215                     	;# 
  1997  0215                     	;# 
  1998  0216                     	;# 
  1999  0216                     	;# 
  2000  0217                     	;# 
  2001  0217                     	;# 
  2002  0219                     	;# 
  2003  021A                     	;# 
  2004  021B                     	;# 
  2005  021C                     	;# 
  2006  021D                     	;# 
  2007  021E                     	;# 
  2008  021F                     	;# 
  2009  028C                     	;# 
  2010  028D                     	;# 
  2011  0291                     	;# 
  2012  0291                     	;# 
  2013  0292                     	;# 
  2014  0293                     	;# 
  2015  0298                     	;# 
  2016  0298                     	;# 
  2017  0299                     	;# 
  2018  029A                     	;# 
  2019  029D                     	;# 
  2020  029E                     	;# 
  2021  029F                     	;# 
  2022  030C                     	;# 
  2023  030D                     	;# 
  2024  0311                     	;# 
  2025  0311                     	;# 
  2026  0312                     	;# 
  2027  0313                     	;# 
  2028  0318                     	;# 
  2029  0318                     	;# 
  2030  0319                     	;# 
  2031  031A                     	;# 
  2032  031C                     	;# 
  2033  031C                     	;# 
  2034  031D                     	;# 
  2035  031E                     	;# 
  2036  038C                     	;# 
  2037  038D                     	;# 
  2038  0394                     	;# 
  2039  0395                     	;# 
  2040  0396                     	;# 
  2041  040C                     	;# 
  2042  040D                     	;# 
  2043  0411                     	;# 
  2044  0411                     	;# 
  2045  0412                     	;# 
  2046  0413                     	;# 
  2047  0414                     	;# 
  2048  0415                     	;# 
  2049  0416                     	;# 
  2050  0417                     	;# 
  2051  0418                     	;# 
  2052  0418                     	;# 
  2053  0419                     	;# 
  2054  041A                     	;# 
  2055  041B                     	;# 
  2056  041C                     	;# 
  2057  041D                     	;# 
  2058  041E                     	;# 
  2059  048D                     	;# 
  2060  0491                     	;# 
  2061  0491                     	;# 
  2062  0492                     	;# 
  2063  0492                     	;# 
  2064  0493                     	;# 
  2065  0493                     	;# 
  2066  0493                     	;# 
  2067  0494                     	;# 
  2068  0494                     	;# 
  2069  0495                     	;# 
  2070  0495                     	;# 
  2071  0496                     	;# 
  2072  0496                     	;# 
  2073  0497                     	;# 
  2074  0497                     	;# 
  2075  0595                     	;# 
  2076  0596                     	;# 
  2077  0597                     	;# 
  2078  059C                     	;# 
  2079  059D                     	;# 
  2080  059E                     	;# 
  2081  0611                     	;# 
  2082  0611                     	;# 
  2083  0612                     	;# 
  2084  0613                     	;# 
  2085  0614                     	;# 
  2086  0614                     	;# 
  2087  0615                     	;# 
  2088  0616                     	;# 
  2089  0617                     	;# 
  2090  0617                     	;# 
  2091  0618                     	;# 
  2092  0619                     	;# 
  2093  061A                     	;# 
  2094  061A                     	;# 
  2095  061B                     	;# 
  2096  061C                     	;# 
  2097  061D                     	;# 
  2098  061D                     	;# 
  2099  061E                     	;# 
  2100  061F                     	;# 
  2101  0FE4                     	;# 
  2102  0FE5                     	;# 
  2103  0FE6                     	;# 
  2104  0FE7                     	;# 
  2105  0FE8                     	;# 
  2106  0FE9                     	;# 
  2107  0FEA                     	;# 
  2108  0FEB                     	;# 
  2109  0FED                     	;# 
  2110  0FEE                     	;# 
  2111  0FEF                     	;# 
  2112  0000                     	;# 
  2113  0001                     	;# 
  2114  0002                     	;# 
  2115  0003                     	;# 
  2116  0004                     	;# 
  2117  0005                     	;# 
  2118  0006                     	;# 
  2119  0007                     	;# 
  2120  0008                     	;# 
  2121  0009                     	;# 
  2122  000A                     	;# 
  2123  000B                     	;# 
  2124  000C                     	;# 
  2125  000D                     	;# 
  2126  000E                     	;# 
  2127  000F                     	;# 
  2128  0010                     	;# 
  2129  0011                     	;# 
  2130  0012                     	;# 
  2131  0013                     	;# 
  2132  0014                     	;# 
  2133  0015                     	;# 
  2134  0016                     	;# 
  2135  0016                     	;# 
  2136  0017                     	;# 
  2137  0018                     	;# 
  2138  0019                     	;# 
  2139  001A                     	;# 
  2140  001B                     	;# 
  2141  001C                     	;# 
  2142  008C                     	;# 
  2143  008D                     	;# 
  2144  008E                     	;# 
  2145  008F                     	;# 
  2146  0090                     	;# 
  2147  0091                     	;# 
  2148  0092                     	;# 
  2149  0093                     	;# 
  2150  0094                     	;# 
  2151  0095                     	;# 
  2152  0096                     	;# 
  2153  0097                     	;# 
  2154  0099                     	;# 
  2155  009A                     	;# 
  2156  009B                     	;# 
  2157  009B                     	;# 
  2158  009C                     	;# 
  2159  009D                     	;# 
  2160  009E                     	;# 
  2161  010C                     	;# 
  2162  010D                     	;# 
  2163  010E                     	;# 
  2164  010F                     	;# 
  2165  0110                     	;# 
  2166  0116                     	;# 
  2167  0117                     	;# 
  2168  011D                     	;# 
  2169  018C                     	;# 
  2170  018D                     	;# 
  2171  018F                     	;# 
  2172  0190                     	;# 
  2173  0191                     	;# 
  2174  0191                     	;# 
  2175  0192                     	;# 
  2176  0193                     	;# 
  2177  0193                     	;# 
  2178  0194                     	;# 
  2179  0195                     	;# 
  2180  0196                     	;# 
  2181  0197                     	;# 
  2182  0199                     	;# 
  2183  0199                     	;# 
  2184  0199                     	;# 
  2185  019A                     	;# 
  2186  019A                     	;# 
  2187  019A                     	;# 
  2188  019B                     	;# 
  2189  019B                     	;# 
  2190  019B                     	;# 
  2191  019B                     	;# 
  2192  019B                     	;# 
  2193  019C                     	;# 
  2194  019C                     	;# 
  2195  019C                     	;# 
  2196  019D                     	;# 
  2197  019D                     	;# 
  2198  019D                     	;# 
  2199  019E                     	;# 
  2200  019E                     	;# 
  2201  019E                     	;# 
  2202  019F                     	;# 
  2203  019F                     	;# 
  2204  019F                     	;# 
  2205  020D                     	;# 
  2206  020F                     	;# 
  2207  0210                     	;# 
  2208  0211                     	;# 
  2209  0211                     	;# 
  2210  0212                     	;# 
  2211  0212                     	;# 
  2212  0213                     	;# 
  2213  0213                     	;# 
  2214  0214                     	;# 
  2215  0214                     	;# 
  2216  0215                     	;# 
  2217  0215                     	;# 
  2218  0215                     	;# 
  2219  0216                     	;# 
  2220  0216                     	;# 
  2221  0217                     	;# 
  2222  0217                     	;# 
  2223  0219                     	;# 
  2224  021A                     	;# 
  2225  021B                     	;# 
  2226  021C                     	;# 
  2227  021D                     	;# 
  2228  021E                     	;# 
  2229  021F                     	;# 
  2230  028C                     	;# 
  2231  028D                     	;# 
  2232  0291                     	;# 
  2233  0291                     	;# 
  2234  0292                     	;# 
  2235  0293                     	;# 
  2236  0298                     	;# 
  2237  0298                     	;# 
  2238  0299                     	;# 
  2239  029A                     	;# 
  2240  029D                     	;# 
  2241  029E                     	;# 
  2242  029F                     	;# 
  2243  030C                     	;# 
  2244  030D                     	;# 
  2245  0311                     	;# 
  2246  0311                     	;# 
  2247  0312                     	;# 
  2248  0313                     	;# 
  2249  0318                     	;# 
  2250  0318                     	;# 
  2251  0319                     	;# 
  2252  031A                     	;# 
  2253  031C                     	;# 
  2254  031C                     	;# 
  2255  031D                     	;# 
  2256  031E                     	;# 
  2257  038C                     	;# 
  2258  038D                     	;# 
  2259  0394                     	;# 
  2260  0395                     	;# 
  2261  0396                     	;# 
  2262  040C                     	;# 
  2263  040D                     	;# 
  2264  0411                     	;# 
  2265  0411                     	;# 
  2266  0412                     	;# 
  2267  0413                     	;# 
  2268  0414                     	;# 
  2269  0415                     	;# 
  2270  0416                     	;# 
  2271  0417                     	;# 
  2272  0418                     	;# 
  2273  0418                     	;# 
  2274  0419                     	;# 
  2275  041A                     	;# 
  2276  041B                     	;# 
  2277  041C                     	;# 
  2278  041D                     	;# 
  2279  041E                     	;# 
  2280  048D                     	;# 
  2281  0491                     	;# 
  2282  0491                     	;# 
  2283  0492                     	;# 
  2284  0492                     	;# 
  2285  0493                     	;# 
  2286  0493                     	;# 
  2287  0493                     	;# 
  2288  0494                     	;# 
  2289  0494                     	;# 
  2290  0495                     	;# 
  2291  0495                     	;# 
  2292  0496                     	;# 
  2293  0496                     	;# 
  2294  0497                     	;# 
  2295  0497                     	;# 
  2296  0595                     	;# 
  2297  0596                     	;# 
  2298  0597                     	;# 
  2299  059C                     	;# 
  2300  059D                     	;# 
  2301  059E                     	;# 
  2302  0611                     	;# 
  2303  0611                     	;# 
  2304  0612                     	;# 
  2305  0613                     	;# 
  2306  0614                     	;# 
  2307  0614                     	;# 
  2308  0615                     	;# 
  2309  0616                     	;# 
  2310  0617                     	;# 
  2311  0617                     	;# 
  2312  0618                     	;# 
  2313  0619                     	;# 
  2314  061A                     	;# 
  2315  061A                     	;# 
  2316  061B                     	;# 
  2317  061C                     	;# 
  2318  061D                     	;# 
  2319  061D                     	;# 
  2320  061E                     	;# 
  2321  061F                     	;# 
  2322  0FE4                     	;# 
  2323  0FE5                     	;# 
  2324  0FE6                     	;# 
  2325  0FE7                     	;# 
  2326  0FE8                     	;# 
  2327  0FE9                     	;# 
  2328  0FEA                     	;# 
  2329  0FEB                     	;# 
  2330  0FED                     	;# 
  2331  0FEE                     	;# 
  2332  0FEF                     	;# 
  2333  0000                     	;# 
  2334  0001                     	;# 
  2335  0002                     	;# 
  2336  0003                     	;# 
  2337  0004                     	;# 
  2338  0005                     	;# 
  2339  0006                     	;# 
  2340  0007                     	;# 
  2341  0008                     	;# 
  2342  0009                     	;# 
  2343  000A                     	;# 
  2344  000B                     	;# 
  2345  000C                     	;# 
  2346  000D                     	;# 
  2347  000E                     	;# 
  2348  000F                     	;# 
  2349  0010                     	;# 
  2350  0011                     	;# 
  2351  0012                     	;# 
  2352  0013                     	;# 
  2353  0014                     	;# 
  2354  0015                     	;# 
  2355  0016                     	;# 
  2356  0016                     	;# 
  2357  0017                     	;# 
  2358  0018                     	;# 
  2359  0019                     	;# 
  2360  001A                     	;# 
  2361  001B                     	;# 
  2362  001C                     	;# 
  2363  008C                     	;# 
  2364  008D                     	;# 
  2365  008E                     	;# 
  2366  008F                     	;# 
  2367  0090                     	;# 
  2368  0091                     	;# 
  2369  0092                     	;# 
  2370  0093                     	;# 
  2371  0094                     	;# 
  2372  0095                     	;# 
  2373  0096                     	;# 
  2374  0097                     	;# 
  2375  0099                     	;# 
  2376  009A                     	;# 
  2377  009B                     	;# 
  2378  009B                     	;# 
  2379  009C                     	;# 
  2380  009D                     	;# 
  2381  009E                     	;# 
  2382  010C                     	;# 
  2383  010D                     	;# 
  2384  010E                     	;# 
  2385  010F                     	;# 
  2386  0110                     	;# 
  2387  0116                     	;# 
  2388  0117                     	;# 
  2389  011D                     	;# 
  2390  018C                     	;# 
  2391  018D                     	;# 
  2392  018F                     	;# 
  2393  0190                     	;# 
  2394  0191                     	;# 
  2395  0191                     	;# 
  2396  0192                     	;# 
  2397  0193                     	;# 
  2398  0193                     	;# 
  2399  0194                     	;# 
  2400  0195                     	;# 
  2401  0196                     	;# 
  2402  0197                     	;# 
  2403  0199                     	;# 
  2404  0199                     	;# 
  2405  0199                     	;# 
  2406  019A                     	;# 
  2407  019A                     	;# 
  2408  019A                     	;# 
  2409  019B                     	;# 
  2410  019B                     	;# 
  2411  019B                     	;# 
  2412  019B                     	;# 
  2413  019B                     	;# 
  2414  019C                     	;# 
  2415  019C                     	;# 
  2416  019C                     	;# 
  2417  019D                     	;# 
  2418  019D                     	;# 
  2419  019D                     	;# 
  2420  019E                     	;# 
  2421  019E                     	;# 
  2422  019E                     	;# 
  2423  019F                     	;# 
  2424  019F                     	;# 
  2425  019F                     	;# 
  2426  020D                     	;# 
  2427  020F                     	;# 
  2428  0210                     	;# 
  2429  0211                     	;# 
  2430  0211                     	;# 
  2431  0212                     	;# 
  2432  0212                     	;# 
  2433  0213                     	;# 
  2434  0213                     	;# 
  2435  0214                     	;# 
  2436  0214                     	;# 
  2437  0215                     	;# 
  2438  0215                     	;# 
  2439  0215                     	;# 
  2440  0216                     	;# 
  2441  0216                     	;# 
  2442  0217                     	;# 
  2443  0217                     	;# 
  2444  0219                     	;# 
  2445  021A                     	;# 
  2446  021B                     	;# 
  2447  021C                     	;# 
  2448  021D                     	;# 
  2449  021E                     	;# 
  2450  021F                     	;# 
  2451  028C                     	;# 
  2452  028D                     	;# 
  2453  0291                     	;# 
  2454  0291                     	;# 
  2455  0292                     	;# 
  2456  0293                     	;# 
  2457  0298                     	;# 
  2458  0298                     	;# 
  2459  0299                     	;# 
  2460  029A                     	;# 
  2461  029D                     	;# 
  2462  029E                     	;# 
  2463  029F                     	;# 
  2464  030C                     	;# 
  2465  030D                     	;# 
  2466  0311                     	;# 
  2467  0311                     	;# 
  2468  0312                     	;# 
  2469  0313                     	;# 
  2470  0318                     	;# 
  2471  0318                     	;# 
  2472  0319                     	;# 
  2473  031A                     	;# 
  2474  031C                     	;# 
  2475  031C                     	;# 
  2476  031D                     	;# 
  2477  031E                     	;# 
  2478  038C                     	;# 
  2479  038D                     	;# 
  2480  0394                     	;# 
  2481  0395                     	;# 
  2482  0396                     	;# 
  2483  040C                     	;# 
  2484  040D                     	;# 
  2485  0411                     	;# 
  2486  0411                     	;# 
  2487  0412                     	;# 
  2488  0413                     	;# 
  2489  0414                     	;# 
  2490  0415                     	;# 
  2491  0416                     	;# 
  2492  0417                     	;# 
  2493  0418                     	;# 
  2494  0418                     	;# 
  2495  0419                     	;# 
  2496  041A                     	;# 
  2497  041B                     	;# 
  2498  041C                     	;# 
  2499  041D                     	;# 
  2500  041E                     	;# 
  2501  048D                     	;# 
  2502  0491                     	;# 
  2503  0491                     	;# 
  2504  0492                     	;# 
  2505  0492                     	;# 
  2506  0493                     	;# 
  2507  0493                     	;# 
  2508  0493                     	;# 
  2509  0494                     	;# 
  2510  0494                     	;# 
  2511  0495                     	;# 
  2512  0495                     	;# 
  2513  0496                     	;# 
  2514  0496                     	;# 
  2515  0497                     	;# 
  2516  0497                     	;# 
  2517  0595                     	;# 
  2518  0596                     	;# 
  2519  0597                     	;# 
  2520  059C                     	;# 
  2521  059D                     	;# 
  2522  059E                     	;# 
  2523  0611                     	;# 
  2524  0611                     	;# 
  2525  0612                     	;# 
  2526  0613                     	;# 
  2527  0614                     	;# 
  2528  0614                     	;# 
  2529  0615                     	;# 
  2530  0616                     	;# 
  2531  0617                     	;# 
  2532  0617                     	;# 
  2533  0618                     	;# 
  2534  0619                     	;# 
  2535  061A                     	;# 
  2536  061A                     	;# 
  2537  061B                     	;# 
  2538  061C                     	;# 
  2539  061D                     	;# 
  2540  061D                     	;# 
  2541  061E                     	;# 
  2542  061F                     	;# 
  2543  0FE4                     	;# 
  2544  0FE5                     	;# 
  2545  0FE6                     	;# 
  2546  0FE7                     	;# 
  2547  0FE8                     	;# 
  2548  0FE9                     	;# 
  2549  0FEA                     	;# 
  2550  0FEB                     	;# 
  2551  0FED                     	;# 
  2552  0FEE                     	;# 
  2553  0FEF                     	;# 
  2554  0000                     	;# 
  2555  0001                     	;# 
  2556  0002                     	;# 
  2557  0003                     	;# 
  2558  0004                     	;# 
  2559  0005                     	;# 
  2560  0006                     	;# 
  2561  0007                     	;# 
  2562  0008                     	;# 
  2563  0009                     	;# 
  2564  000A                     	;# 
  2565  000B                     	;# 
  2566  000C                     	;# 
  2567  000D                     	;# 
  2568  000E                     	;# 
  2569  000F                     	;# 
  2570  0010                     	;# 
  2571  0011                     	;# 
  2572  0012                     	;# 
  2573  0013                     	;# 
  2574  0014                     	;# 
  2575  0015                     	;# 
  2576  0016                     	;# 
  2577  0016                     	;# 
  2578  0017                     	;# 
  2579  0018                     	;# 
  2580  0019                     	;# 
  2581  001A                     	;# 
  2582  001B                     	;# 
  2583  001C                     	;# 
  2584  008C                     	;# 
  2585  008D                     	;# 
  2586  008E                     	;# 
  2587  008F                     	;# 
  2588  0090                     	;# 
  2589  0091                     	;# 
  2590  0092                     	;# 
  2591  0093                     	;# 
  2592  0094                     	;# 
  2593  0095                     	;# 
  2594  0096                     	;# 
  2595  0097                     	;# 
  2596  0099                     	;# 
  2597  009A                     	;# 
  2598  009B                     	;# 
  2599  009B                     	;# 
  2600  009C                     	;# 
  2601  009D                     	;# 
  2602  009E                     	;# 
  2603  010C                     	;# 
  2604  010D                     	;# 
  2605  010E                     	;# 
  2606  010F                     	;# 
  2607  0110                     	;# 
  2608  0116                     	;# 
  2609  0117                     	;# 
  2610  011D                     	;# 
  2611  018C                     	;# 
  2612  018D                     	;# 
  2613  018F                     	;# 
  2614  0190                     	;# 
  2615  0191                     	;# 
  2616  0191                     	;# 
  2617  0192                     	;# 
  2618  0193                     	;# 
  2619  0193                     	;# 
  2620  0194                     	;# 
  2621  0195                     	;# 
  2622  0196                     	;# 
  2623  0197                     	;# 
  2624  0199                     	;# 
  2625  0199                     	;# 
  2626  0199                     	;# 
  2627  019A                     	;# 
  2628  019A                     	;# 
  2629  019A                     	;# 
  2630  019B                     	;# 
  2631  019B                     	;# 
  2632  019B                     	;# 
  2633  019B                     	;# 
  2634  019B                     	;# 
  2635  019C                     	;# 
  2636  019C                     	;# 
  2637  019C                     	;# 
  2638  019D                     	;# 
  2639  019D                     	;# 
  2640  019D                     	;# 
  2641  019E                     	;# 
  2642  019E                     	;# 
  2643  019E                     	;# 
  2644  019F                     	;# 
  2645  019F                     	;# 
  2646  019F                     	;# 
  2647  020D                     	;# 
  2648  020F                     	;# 
  2649  0210                     	;# 
  2650  0211                     	;# 
  2651  0211                     	;# 
  2652  0212                     	;# 
  2653  0212                     	;# 
  2654  0213                     	;# 
  2655  0213                     	;# 
  2656  0214                     	;# 
  2657  0214                     	;# 
  2658  0215                     	;# 
  2659  0215                     	;# 
  2660  0215                     	;# 
  2661  0216                     	;# 
  2662  0216                     	;# 
  2663  0217                     	;# 
  2664  0217                     	;# 
  2665  0219                     	;# 
  2666  021A                     	;# 
  2667  021B                     	;# 
  2668  021C                     	;# 
  2669  021D                     	;# 
  2670  021E                     	;# 
  2671  021F                     	;# 
  2672  028C                     	;# 
  2673  028D                     	;# 
  2674  0291                     	;# 
  2675  0291                     	;# 
  2676  0292                     	;# 
  2677  0293                     	;# 
  2678  0298                     	;# 
  2679  0298                     	;# 
  2680  0299                     	;# 
  2681  029A                     	;# 
  2682  029D                     	;# 
  2683  029E                     	;# 
  2684  029F                     	;# 
  2685  030C                     	;# 
  2686  030D                     	;# 
  2687  0311                     	;# 
  2688  0311                     	;# 
  2689  0312                     	;# 
  2690  0313                     	;# 
  2691  0318                     	;# 
  2692  0318                     	;# 
  2693  0319                     	;# 
  2694  031A                     	;# 
  2695  031C                     	;# 
  2696  031C                     	;# 
  2697  031D                     	;# 
  2698  031E                     	;# 
  2699  038C                     	;# 
  2700  038D                     	;# 
  2701  0394                     	;# 
  2702  0395                     	;# 
  2703  0396                     	;# 
  2704  040C                     	;# 
  2705  040D                     	;# 
  2706  0411                     	;# 
  2707  0411                     	;# 
  2708  0412                     	;# 
  2709  0413                     	;# 
  2710  0414                     	;# 
  2711  0415                     	;# 
  2712  0416                     	;# 
  2713  0417                     	;# 
  2714  0418                     	;# 
  2715  0418                     	;# 
  2716  0419                     	;# 
  2717  041A                     	;# 
  2718  041B                     	;# 
  2719  041C                     	;# 
  2720  041D                     	;# 
  2721  041E                     	;# 
  2722  048D                     	;# 
  2723  0491                     	;# 
  2724  0491                     	;# 
  2725  0492                     	;# 
  2726  0492                     	;# 
  2727  0493                     	;# 
  2728  0493                     	;# 
  2729  0493                     	;# 
  2730  0494                     	;# 
  2731  0494                     	;# 
  2732  0495                     	;# 
  2733  0495                     	;# 
  2734  0496                     	;# 
  2735  0496                     	;# 
  2736  0497                     	;# 
  2737  0497                     	;# 
  2738  0595                     	;# 
  2739  0596                     	;# 
  2740  0597                     	;# 
  2741  059C                     	;# 
  2742  059D                     	;# 
  2743  059E                     	;# 
  2744  0611                     	;# 
  2745  0611                     	;# 
  2746  0612                     	;# 
  2747  0613                     	;# 
  2748  0614                     	;# 
  2749  0614                     	;# 
  2750  0615                     	;# 
  2751  0616                     	;# 
  2752  0617                     	;# 
  2753  0617                     	;# 
  2754  0618                     	;# 
  2755  0619                     	;# 
  2756  061A                     	;# 
  2757  061A                     	;# 
  2758  061B                     	;# 
  2759  061C                     	;# 
  2760  061D                     	;# 
  2761  061D                     	;# 
  2762  061E                     	;# 
  2763  061F                     	;# 
  2764  0FE4                     	;# 
  2765  0FE5                     	;# 
  2766  0FE6                     	;# 
  2767  0FE7                     	;# 
  2768  0FE8                     	;# 
  2769  0FE9                     	;# 
  2770  0FEA                     	;# 
  2771  0FEB                     	;# 
  2772  0FED                     	;# 
  2773  0FEE                     	;# 
  2774  0FEF                     	;# 
  2775  0000                     	;# 
  2776  0001                     	;# 
  2777  0002                     	;# 
  2778  0003                     	;# 
  2779  0004                     	;# 
  2780  0005                     	;# 
  2781  0006                     	;# 
  2782  0007                     	;# 
  2783  0008                     	;# 
  2784  0009                     	;# 
  2785  000A                     	;# 
  2786  000B                     	;# 
  2787  000C                     	;# 
  2788  000D                     	;# 
  2789  000E                     	;# 
  2790  000F                     	;# 
  2791  0010                     	;# 
  2792  0011                     	;# 
  2793  0012                     	;# 
  2794  0013                     	;# 
  2795  0014                     	;# 
  2796  0015                     	;# 
  2797  0016                     	;# 
  2798  0016                     	;# 
  2799  0017                     	;# 
  2800  0018                     	;# 
  2801  0019                     	;# 
  2802  001A                     	;# 
  2803  001B                     	;# 
  2804  001C                     	;# 
  2805  008C                     	;# 
  2806  008D                     	;# 
  2807  008E                     	;# 
  2808  008F                     	;# 
  2809  0090                     	;# 
  2810  0091                     	;# 
  2811  0092                     	;# 
  2812  0093                     	;# 
  2813  0094                     	;# 
  2814  0095                     	;# 
  2815  0096                     	;# 
  2816  0097                     	;# 
  2817  0099                     	;# 
  2818  009A                     	;# 
  2819  009B                     	;# 
  2820  009B                     	;# 
  2821  009C                     	;# 
  2822  009D                     	;# 
  2823  009E                     	;# 
  2824  010C                     	;# 
  2825  010D                     	;# 
  2826  010E                     	;# 
  2827  010F                     	;# 
  2828  0110                     	;# 
  2829  0116                     	;# 
  2830  0117                     	;# 
  2831  011D                     	;# 
  2832  018C                     	;# 
  2833  018D                     	;# 
  2834  018F                     	;# 
  2835  0190                     	;# 
  2836  0191                     	;# 
  2837  0191                     	;# 
  2838  0192                     	;# 
  2839  0193                     	;# 
  2840  0193                     	;# 
  2841  0194                     	;# 
  2842  0195                     	;# 
  2843  0196                     	;# 
  2844  0197                     	;# 
  2845  0199                     	;# 
  2846  0199                     	;# 
  2847  0199                     	;# 
  2848  019A                     	;# 
  2849  019A                     	;# 
  2850  019A                     	;# 
  2851  019B                     	;# 
  2852  019B                     	;# 
  2853  019B                     	;# 
  2854  019B                     	;# 
  2855  019B                     	;# 
  2856  019C                     	;# 
  2857  019C                     	;# 
  2858  019C                     	;# 
  2859  019D                     	;# 
  2860  019D                     	;# 
  2861  019D                     	;# 
  2862  019E                     	;# 
  2863  019E                     	;# 
  2864  019E                     	;# 
  2865  019F                     	;# 
  2866  019F                     	;# 
  2867  019F                     	;# 
  2868  020D                     	;# 
  2869  020F                     	;# 
  2870  0210                     	;# 
  2871  0211                     	;# 
  2872  0211                     	;# 
  2873  0212                     	;# 
  2874  0212                     	;# 
  2875  0213                     	;# 
  2876  0213                     	;# 
  2877  0214                     	;# 
  2878  0214                     	;# 
  2879  0215                     	;# 
  2880  0215                     	;# 
  2881  0215                     	;# 
  2882  0216                     	;# 
  2883  0216                     	;# 
  2884  0217                     	;# 
  2885  0217                     	;# 
  2886  0219                     	;# 
  2887  021A                     	;# 
  2888  021B                     	;# 
  2889  021C                     	;# 
  2890  021D                     	;# 
  2891  021E                     	;# 
  2892  021F                     	;# 
  2893  028C                     	;# 
  2894  028D                     	;# 
  2895  0291                     	;# 
  2896  0291                     	;# 
  2897  0292                     	;# 
  2898  0293                     	;# 
  2899  0298                     	;# 
  2900  0298                     	;# 
  2901  0299                     	;# 
  2902  029A                     	;# 
  2903  029D                     	;# 
  2904  029E                     	;# 
  2905  029F                     	;# 
  2906  030C                     	;# 
  2907  030D                     	;# 
  2908  0311                     	;# 
  2909  0311                     	;# 
  2910  0312                     	;# 
  2911  0313                     	;# 
  2912  0318                     	;# 
  2913  0318                     	;# 
  2914  0319                     	;# 
  2915  031A                     	;# 
  2916  031C                     	;# 
  2917  031C                     	;# 
  2918  031D                     	;# 
  2919  031E                     	;# 
  2920  038C                     	;# 
  2921  038D                     	;# 
  2922  0394                     	;# 
  2923  0395                     	;# 
  2924  0396                     	;# 
  2925  040C                     	;# 
  2926  040D                     	;# 
  2927  0411                     	;# 
  2928  0411                     	;# 
  2929  0412                     	;# 
  2930  0413                     	;# 
  2931  0414                     	;# 
  2932  0415                     	;# 
  2933  0416                     	;# 
  2934  0417                     	;# 
  2935  0418                     	;# 
  2936  0418                     	;# 
  2937  0419                     	;# 
  2938  041A                     	;# 
  2939  041B                     	;# 
  2940  041C                     	;# 
  2941  041D                     	;# 
  2942  041E                     	;# 
  2943  048D                     	;# 
  2944  0491                     	;# 
  2945  0491                     	;# 
  2946  0492                     	;# 
  2947  0492                     	;# 
  2948  0493                     	;# 
  2949  0493                     	;# 
  2950  0493                     	;# 
  2951  0494                     	;# 
  2952  0494                     	;# 
  2953  0495                     	;# 
  2954  0495                     	;# 
  2955  0496                     	;# 
  2956  0496                     	;# 
  2957  0497                     	;# 
  2958  0497                     	;# 
  2959  0595                     	;# 
  2960  0596                     	;# 
  2961  0597                     	;# 
  2962  059C                     	;# 
  2963  059D                     	;# 
  2964  059E                     	;# 
  2965  0611                     	;# 
  2966  0611                     	;# 
  2967  0612                     	;# 
  2968  0613                     	;# 
  2969  0614                     	;# 
  2970  0614                     	;# 
  2971  0615                     	;# 
  2972  0616                     	;# 
  2973  0617                     	;# 
  2974  0617                     	;# 
  2975  0618                     	;# 
  2976  0619                     	;# 
  2977  061A                     	;# 
  2978  061A                     	;# 
  2979  061B                     	;# 
  2980  061C                     	;# 
  2981  061D                     	;# 
  2982  061D                     	;# 
  2983  061E                     	;# 
  2984  061F                     	;# 
  2985  0FE4                     	;# 
  2986  0FE5                     	;# 
  2987  0FE6                     	;# 
  2988  0FE7                     	;# 
  2989  0FE8                     	;# 
  2990  0FE9                     	;# 
  2991  0FEA                     	;# 
  2992  0FEB                     	;# 
  2993  0FED                     	;# 
  2994  0FEE                     	;# 
  2995  0FEF                     	;# 
  2996  0000                     	;# 
  2997  0001                     	;# 
  2998  0002                     	;# 
  2999  0003                     	;# 
  3000  0004                     	;# 
  3001  0005                     	;# 
  3002  0006                     	;# 
  3003  0007                     	;# 
  3004  0008                     	;# 
  3005  0009                     	;# 
  3006  000A                     	;# 
  3007  000B                     	;# 
  3008  000C                     	;# 
  3009  000D                     	;# 
  3010  000E                     	;# 
  3011  000F                     	;# 
  3012  0010                     	;# 
  3013  0011                     	;# 
  3014  0012                     	;# 
  3015  0013                     	;# 
  3016  0014                     	;# 
  3017  0015                     	;# 
  3018  0016                     	;# 
  3019  0016                     	;# 
  3020  0017                     	;# 
  3021  0018                     	;# 
  3022  0019                     	;# 
  3023  001A                     	;# 
  3024  001B                     	;# 
  3025  001C                     	;# 
  3026  008C                     	;# 
  3027  008D                     	;# 
  3028  008E                     	;# 
  3029  008F                     	;# 
  3030  0090                     	;# 
  3031  0091                     	;# 
  3032  0092                     	;# 
  3033  0093                     	;# 
  3034  0094                     	;# 
  3035  0095                     	;# 
  3036  0096                     	;# 
  3037  0097                     	;# 
  3038  0099                     	;# 
  3039  009A                     	;# 
  3040  009B                     	;# 
  3041  009B                     	;# 
  3042  009C                     	;# 
  3043  009D                     	;# 
  3044  009E                     	;# 
  3045  010C                     	;# 
  3046  010D                     	;# 
  3047  010E                     	;# 
  3048  010F                     	;# 
  3049  0110                     	;# 
  3050  0116                     	;# 
  3051  0117                     	;# 
  3052  011D                     	;# 
  3053  018C                     	;# 
  3054  018D                     	;# 
  3055  018F                     	;# 
  3056  0190                     	;# 
  3057  0191                     	;# 
  3058  0191                     	;# 
  3059  0192                     	;# 
  3060  0193                     	;# 
  3061  0193                     	;# 
  3062  0194                     	;# 
  3063  0195                     	;# 
  3064  0196                     	;# 
  3065  0197                     	;# 
  3066  0199                     	;# 
  3067  0199                     	;# 
  3068  0199                     	;# 
  3069  019A                     	;# 
  3070  019A                     	;# 
  3071  019A                     	;# 
  3072  019B                     	;# 
  3073  019B                     	;# 
  3074  019B                     	;# 
  3075  019B                     	;# 
  3076  019B                     	;# 
  3077  019C                     	;# 
  3078  019C                     	;# 
  3079  019C                     	;# 
  3080  019D                     	;# 
  3081  019D                     	;# 
  3082  019D                     	;# 
  3083  019E                     	;# 
  3084  019E                     	;# 
  3085  019E                     	;# 
  3086  019F                     	;# 
  3087  019F                     	;# 
  3088  019F                     	;# 
  3089  020D                     	;# 
  3090  020F                     	;# 
  3091  0210                     	;# 
  3092  0211                     	;# 
  3093  0211                     	;# 
  3094  0212                     	;# 
  3095  0212                     	;# 
  3096  0213                     	;# 
  3097  0213                     	;# 
  3098  0214                     	;# 
  3099  0214                     	;# 
  3100  0215                     	;# 
  3101  0215                     	;# 
  3102  0215                     	;# 
  3103  0216                     	;# 
  3104  0216                     	;# 
  3105  0217                     	;# 
  3106  0217                     	;# 
  3107  0219                     	;# 
  3108  021A                     	;# 
  3109  021B                     	;# 
  3110  021C                     	;# 
  3111  021D                     	;# 
  3112  021E                     	;# 
  3113  021F                     	;# 
  3114  028C                     	;# 
  3115  028D                     	;# 
  3116  0291                     	;# 
  3117  0291                     	;# 
  3118  0292                     	;# 
  3119  0293                     	;# 
  3120  0298                     	;# 
  3121  0298                     	;# 
  3122  0299                     	;# 
  3123  029A                     	;# 
  3124  029D                     	;# 
  3125  029E                     	;# 
  3126  029F                     	;# 
  3127  030C                     	;# 
  3128  030D                     	;# 
  3129  0311                     	;# 
  3130  0311                     	;# 
  3131  0312                     	;# 
  3132  0313                     	;# 
  3133  0318                     	;# 
  3134  0318                     	;# 
  3135  0319                     	;# 
  3136  031A                     	;# 
  3137  031C                     	;# 
  3138  031C                     	;# 
  3139  031D                     	;# 
  3140  031E                     	;# 
  3141  038C                     	;# 
  3142  038D                     	;# 
  3143  0394                     	;# 
  3144  0395                     	;# 
  3145  0396                     	;# 
  3146  040C                     	;# 
  3147  040D                     	;# 
  3148  0411                     	;# 
  3149  0411                     	;# 
  3150  0412                     	;# 
  3151  0413                     	;# 
  3152  0414                     	;# 
  3153  0415                     	;# 
  3154  0416                     	;# 
  3155  0417                     	;# 
  3156  0418                     	;# 
  3157  0418                     	;# 
  3158  0419                     	;# 
  3159  041A                     	;# 
  3160  041B                     	;# 
  3161  041C                     	;# 
  3162  041D                     	;# 
  3163  041E                     	;# 
  3164  048D                     	;# 
  3165  0491                     	;# 
  3166  0491                     	;# 
  3167  0492                     	;# 
  3168  0492                     	;# 
  3169  0493                     	;# 
  3170  0493                     	;# 
  3171  0493                     	;# 
  3172  0494                     	;# 
  3173  0494                     	;# 
  3174  0495                     	;# 
  3175  0495                     	;# 
  3176  0496                     	;# 
  3177  0496                     	;# 
  3178  0497                     	;# 
  3179  0497                     	;# 
  3180  0595                     	;# 
  3181  0596                     	;# 
  3182  0597                     	;# 
  3183  059C                     	;# 
  3184  059D                     	;# 
  3185  059E                     	;# 
  3186  0611                     	;# 
  3187  0611                     	;# 
  3188  0612                     	;# 
  3189  0613                     	;# 
  3190  0614                     	;# 
  3191  0614                     	;# 
  3192  0615                     	;# 
  3193  0616                     	;# 
  3194  0617                     	;# 
  3195  0617                     	;# 
  3196  0618                     	;# 
  3197  0619                     	;# 
  3198  061A                     	;# 
  3199  061A                     	;# 
  3200  061B                     	;# 
  3201  061C                     	;# 
  3202  061D                     	;# 
  3203  061D                     	;# 
  3204  061E                     	;# 
  3205  061F                     	;# 
  3206  0FE4                     	;# 
  3207  0FE5                     	;# 
  3208  0FE6                     	;# 
  3209  0FE7                     	;# 
  3210  0FE8                     	;# 
  3211  0FE9                     	;# 
  3212  0FEA                     	;# 
  3213  0FEB                     	;# 
  3214  0FED                     	;# 
  3215  0FEE                     	;# 
  3216  0FEF                     	;# 
  3217  0000                     	;# 
  3218  0001                     	;# 
  3219  0002                     	;# 
  3220  0003                     	;# 
  3221  0004                     	;# 
  3222  0005                     	;# 
  3223  0006                     	;# 
  3224  0007                     	;# 
  3225  0008                     	;# 
  3226  0009                     	;# 
  3227  000A                     	;# 
  3228  000B                     	;# 
  3229  000C                     	;# 
  3230  000D                     	;# 
  3231  000E                     	;# 
  3232  000F                     	;# 
  3233  0010                     	;# 
  3234  0011                     	;# 
  3235  0012                     	;# 
  3236  0013                     	;# 
  3237  0014                     	;# 
  3238  0015                     	;# 
  3239  0016                     	;# 
  3240  0016                     	;# 
  3241  0017                     	;# 
  3242  0018                     	;# 
  3243  0019                     	;# 
  3244  001A                     	;# 
  3245  001B                     	;# 
  3246  001C                     	;# 
  3247  008C                     	;# 
  3248  008D                     	;# 
  3249  008E                     	;# 
  3250  008F                     	;# 
  3251  0090                     	;# 
  3252  0091                     	;# 
  3253  0092                     	;# 
  3254  0093                     	;# 
  3255  0094                     	;# 
  3256  0095                     	;# 
  3257  0096                     	;# 
  3258  0097                     	;# 
  3259  0099                     	;# 
  3260  009A                     	;# 
  3261  009B                     	;# 
  3262  009B                     	;# 
  3263  009C                     	;# 
  3264  009D                     	;# 
  3265  009E                     	;# 
  3266  010C                     	;# 
  3267  010D                     	;# 
  3268  010E                     	;# 
  3269  010F                     	;# 
  3270  0110                     	;# 
  3271  0116                     	;# 
  3272  0117                     	;# 
  3273  011D                     	;# 
  3274  018C                     	;# 
  3275  018D                     	;# 
  3276  018F                     	;# 
  3277  0190                     	;# 
  3278  0191                     	;# 
  3279  0191                     	;# 
  3280  0192                     	;# 
  3281  0193                     	;# 
  3282  0193                     	;# 
  3283  0194                     	;# 
  3284  0195                     	;# 
  3285  0196                     	;# 
  3286  0197                     	;# 
  3287  0199                     	;# 
  3288  0199                     	;# 
  3289  0199                     	;# 
  3290  019A                     	;# 
  3291  019A                     	;# 
  3292  019A                     	;# 
  3293  019B                     	;# 
  3294  019B                     	;# 
  3295  019B                     	;# 
  3296  019B                     	;# 
  3297  019B                     	;# 
  3298  019C                     	;# 
  3299  019C                     	;# 
  3300  019C                     	;# 
  3301  019D                     	;# 
  3302  019D                     	;# 
  3303  019D                     	;# 
  3304  019E                     	;# 
  3305  019E                     	;# 
  3306  019E                     	;# 
  3307  019F                     	;# 
  3308  019F                     	;# 
  3309  019F                     	;# 
  3310  020D                     	;# 
  3311  020F                     	;# 
  3312  0210                     	;# 
  3313  0211                     	;# 
  3314  0211                     	;# 
  3315  0212                     	;# 
  3316  0212                     	;# 
  3317  0213                     	;# 
  3318  0213                     	;# 
  3319  0214                     	;# 
  3320  0214                     	;# 
  3321  0215                     	;# 
  3322  0215                     	;# 
  3323  0215                     	;# 
  3324  0216                     	;# 
  3325  0216                     	;# 
  3326  0217                     	;# 
  3327  0217                     	;# 
  3328  0219                     	;# 
  3329  021A                     	;# 
  3330  021B                     	;# 
  3331  021C                     	;# 
  3332  021D                     	;# 
  3333  021E                     	;# 
  3334  021F                     	;# 
  3335  028C                     	;# 
  3336  028D                     	;# 
  3337  0291                     	;# 
  3338  0291                     	;# 
  3339  0292                     	;# 
  3340  0293                     	;# 
  3341  0298                     	;# 
  3342  0298                     	;# 
  3343  0299                     	;# 
  3344  029A                     	;# 
  3345  029D                     	;# 
  3346  029E                     	;# 
  3347  029F                     	;# 
  3348  030C                     	;# 
  3349  030D                     	;# 
  3350  0311                     	;# 
  3351  0311                     	;# 
  3352  0312                     	;# 
  3353  0313                     	;# 
  3354  0318                     	;# 
  3355  0318                     	;# 
  3356  0319                     	;# 
  3357  031A                     	;# 
  3358  031C                     	;# 
  3359  031C                     	;# 
  3360  031D                     	;# 
  3361  031E                     	;# 
  3362  038C                     	;# 
  3363  038D                     	;# 
  3364  0394                     	;# 
  3365  0395                     	;# 
  3366  0396                     	;# 
  3367  040C                     	;# 
  3368  040D                     	;# 
  3369  0411                     	;# 
  3370  0411                     	;# 
  3371  0412                     	;# 
  3372  0413                     	;# 
  3373  0414                     	;# 
  3374  0415                     	;# 
  3375  0416                     	;# 
  3376  0417                     	;# 
  3377  0418                     	;# 
  3378  0418                     	;# 
  3379  0419                     	;# 
  3380  041A                     	;# 
  3381  041B                     	;# 
  3382  041C                     	;# 
  3383  041D                     	;# 
  3384  041E                     	;# 
  3385  048D                     	;# 
  3386  0491                     	;# 
  3387  0491                     	;# 
  3388  0492                     	;# 
  3389  0492                     	;# 
  3390  0493                     	;# 
  3391  0493                     	;# 
  3392  0493                     	;# 
  3393  0494                     	;# 
  3394  0494                     	;# 
  3395  0495                     	;# 
  3396  0495                     	;# 
  3397  0496                     	;# 
  3398  0496                     	;# 
  3399  0497                     	;# 
  3400  0497                     	;# 
  3401  0595                     	;# 
  3402  0596                     	;# 
  3403  0597                     	;# 
  3404  059C                     	;# 
  3405  059D                     	;# 
  3406  059E                     	;# 
  3407  0611                     	;# 
  3408  0611                     	;# 
  3409  0612                     	;# 
  3410  0613                     	;# 
  3411  0614                     	;# 
  3412  0614                     	;# 
  3413  0615                     	;# 
  3414  0616                     	;# 
  3415  0617                     	;# 
  3416  0617                     	;# 
  3417  0618                     	;# 
  3418  0619                     	;# 
  3419  061A                     	;# 
  3420  061A                     	;# 
  3421  061B                     	;# 
  3422  061C                     	;# 
  3423  061D                     	;# 
  3424  061D                     	;# 
  3425  061E                     	;# 
  3426  061F                     	;# 
  3427  0FE4                     	;# 
  3428  0FE5                     	;# 
  3429  0FE6                     	;# 
  3430  0FE7                     	;# 
  3431  0FE8                     	;# 
  3432  0FE9                     	;# 
  3433  0FEA                     	;# 
  3434  0FEB                     	;# 
  3435  0FED                     	;# 
  3436  0FEE                     	;# 
  3437  0FEF                     	;_modArray
  3438                           
  3439                           	psect	idataBANK0
  3440  2D26                     __pidataBANK0:	
  3441                           
  3442                           ;initializer for _baseline_mod_time
  3443  2D26  34D0               	retlw	208
  3444  2D27  3407               	retlw	7
  3445  2D28  3400               	retlw	0
  3446  2D29  3400               	retlw	0
  3447                           
  3448                           ;initializer for _delay_time
  3449  2D2A  34D0               	retlw	208
  3450  2D2B  3407               	retlw	7
  3451  2D2C  3400               	retlw	0
  3452  2D2D  3400               	retlw	0
  3453                           
  3454                           ;initializer for _bottom_push_state
  3455  2D2E  3401               	retlw	1
  3456  2D2F  3400               	retlw	0
  3457                           
  3458                           ;initializer for _long_press_limit
  3459  2D30  34E8               	retlw	232
  3460  2D31  3403               	retlw	3
  3461                           
  3462                           ;initializer for _top_push_state
  3463  2D32  3406               	retlw	6
  3464  2D33  3400               	retlw	0
  3465                           
  3466                           ;initializer for _blink_rate
  3467  2D34  3414               	retlw	20
  3468                           
  3469                           ;initializer for _longTap_state
  3470  2D35  34FF               	retlw	255
  3471                           
  3472                           ;initializer for _num_taps
  3473  2D36  3404               	retlw	4
  3474                           
  3475                           ;initializer for _switchBypass_state
  3476  2D37  34FF               	retlw	255
  3477                           
  3478                           	psect	idataBANK2
  3479  07FF                     __pidataBANK2:	
  3480                           
  3481                           ;initializer for _presetChannel
  3482  07FF  3401               	retlw	1
  3483                           
  3484                           	psect	idataBANK3
  3485  2DAB                     __pidataBANK3:	
  3486                           
  3487                           ;initializer for _knob1_prev
  3488  2DAB  34D0               	retlw	208
  3489  2DAC  3407               	retlw	7
  3490                           
  3491                           ;initializer for _knob2_prev
  3492  2DAD  34D0               	retlw	208
  3493  2DAE  3407               	retlw	7
  3494                           
  3495                           ;initializer for _knob3_prev
  3496  2DAF  34D0               	retlw	208
  3497  2DB0  3407               	retlw	7
  3498                           
  3499                           ;initializer for _knob4_prev
  3500  2DB1  34D0               	retlw	208
  3501  2DB2  3407               	retlw	7
  3502                           
  3503                           ;initializer for _knob5_prev
  3504  2DB3  34D0               	retlw	208
  3505  2DB4  3407               	retlw	7
  3506                           
  3507                           ;initializer for _mod_counter
  3508  2DB5  3401               	retlw	1
  3509  2DB6  3400               	retlw	0
  3510                           
  3511                           ;initializer for _mod_delay_time
  3512  2DB7  34D0               	retlw	208
  3513  2DB8  3407               	retlw	7
  3514                           
  3515                           ;initializer for _symmetry
  3516  2DB9  34B4               	retlw	180
  3517  2DBA  3400               	retlw	0
  3518                           
  3519                           ;initializer for _tap_iteration
  3520  2DBB  3401               	retlw	1
  3521  2DBC  3400               	retlw	0
  3522                           
  3523                           ;initializer for _blink_state
  3524  2DBD  3401               	retlw	1
  3525                           
  3526                           ;initializer for _currentBypassState
  3527  2DBE  34FF               	retlw	255
  3528                           
  3529                           ;initializer for _expSwitchState
  3530  2DBF  34FF               	retlw	255
  3531                           
  3532                           ;initializer for _expressModeCnst
  3533  2DC0  3402               	retlw	2
  3534                           
  3535                           ;initializer for _expressionChannel
  3536  2DC1  3401               	retlw	1
  3537                           
  3538                           ;initializer for _mod_time_changed
  3539  2DC2  3401               	retlw	1
  3540                           
  3541                           ;initializer for _presetModeCnst
  3542  2DC3  3401               	retlw	1
  3543                           
  3544                           ;initializer for _switchTap_state
  3545  2DC4  34FF               	retlw	255
  3546                           
  3547                           	psect	idataBANK4
  3548  2001                     __pidataBANK4:	
  3549                           
  3550                           ;initializer for _blink_delay
  3551  2001  3464               	retlw	100
  3552  2002  3400               	retlw	0
  3553                           
  3554                           ;initializer for _switchBypass_up
  3555  2003  3401               	retlw	1
  3556  2004  3400               	retlw	0
  3557                           
  3558                           	psect	stringtext
  3559  2800                     __pstringtext:	
  3560  2800                     exp@coeff:	
  3561  2800  3400               	retlw	0
  3562  2801  3480               	retlw	128
  3563  2802  343F               	retlw	63
  3564  2803  3472               	retlw	114
  3565  2804  3431               	retlw	49
  3566  2805  343F               	retlw	63
  3567  2806  34FE               	retlw	254
  3568  2807  3475               	retlw	117
  3569  2808  343E               	retlw	62
  3570  2809  3458               	retlw	88
  3571  280A  3463               	retlw	99
  3572  280B  343D               	retlw	61
  3573  280C  3495               	retlw	149
  3574  280D  341D               	retlw	29
  3575  280E  343C               	retlw	60
  3576  280F  34C5               	retlw	197
  3577  2810  34AE               	retlw	174
  3578  2811  343A               	retlw	58
  3579  2812  3479               	retlw	121
  3580  2813  3421               	retlw	33
  3581  2814  3439               	retlw	57
  3582  2815  3494               	retlw	148
  3583  2816  3480               	retlw	128
  3584  2817  3437               	retlw	55
  3585  2818  3493               	retlw	147
  3586  2819  34A7               	retlw	167
  3587  281A  3435               	retlw	53
  3588  281B  3456               	retlw	86
  3589  281C  3415               	retlw	21
  3590  281D  3434               	retlw	52
  3591  281E                     __end_ofexp@coeff:	
  3592  281E                     log@coeff:	
  3593  281E  3400               	retlw	0
  3594  281F  3400               	retlw	0
  3595  2820  3400               	retlw	0
  3596  2821  3400               	retlw	0
  3597  2822  3480               	retlw	128
  3598  2823  343F               	retlw	63
  3599  2824  34F0               	retlw	240
  3600  2825  34FF               	retlw	255
  3601  2826  34BE               	retlw	190
  3602  2827  34E2               	retlw	226
  3603  2828  34A9               	retlw	169
  3604  2829  343E               	retlw	62
  3605  282A  3483               	retlw	131
  3606  282B  3476               	retlw	118
  3607  282C  34BE               	retlw	190
  3608  282D  34AE               	retlw	174
  3609  282E  342B               	retlw	43
  3610  282F  343E               	retlw	62
  3611  2830  343C               	retlw	60
  3612  2831  34C3               	retlw	195
  3613  2832  34BD               	retlw	189
  3614  2833  34D2               	retlw	210
  3615  2834  3413               	retlw	19
  3616  2835  343D               	retlw	61
  3617  2836  3478               	retlw	120
  3618  2837  34D3               	retlw	211
  3619  2838  34BB               	retlw	187
  3620  2839                     __end_oflog@coeff:	
  3621  2839                     sin@coeff_a:	
  3622  2839  34F4               	retlw	244
  3623  283A  344A               	retlw	74
  3624  283B  3448               	retlw	72
  3625  283C  3495               	retlw	149
  3626  283D  3495               	retlw	149
  3627  283E  34C7               	retlw	199
  3628  283F  34C1               	retlw	193
  3629  2840  34DC               	retlw	220
  3630  2841  3445               	retlw	69
  3631  2842  34DC               	retlw	220
  3632  2843  346D               	retlw	109
  3633  2844  34C3               	retlw	195
  3634  2845  34B3               	retlw	179
  3635  2846  3433               	retlw	51
  3636  2847  3440               	retlw	64
  3637  2848                     __end_ofsin@coeff_a:	
  3638  2848                     sin@coeff_b:	
  3639  2848  3434               	retlw	52
  3640  2849  3401               	retlw	1
  3641  284A  3448               	retlw	72
  3642  284B  349D               	retlw	157
  3643  284C  34B0               	retlw	176
  3644  284D  3445               	retlw	69
  3645  284E  3400               	retlw	0
  3646  284F  34DA               	retlw	218
  3647  2850  3442               	retlw	66
  3648  2851  3400               	retlw	0
  3649  2852  3480               	retlw	128
  3650  2853  343F               	retlw	63
  3651  2854                     __end_ofsin@coeff_b:	
  3652  000B                     _INTCONbits	set	11
  3653  0011                     _PIR1bits	set	17
  3654  000C                     _PORTAbits	set	12
  3655  000E                     _PORTCbits	set	14
  3656  000F                     _PORTDbits	set	15
  3657  0010                     _PORTEbits	set	16
  3658  001B                     _PR2	set	27
  3659  001C                     _T2CONbits	set	28
  3660  005F                     _GIE	set	95
  3661  005E                     _PEIE	set	94
  3662  0069                     _RB1	set	105
  3663  009D                     _ADCON0bits	set	157
  3664  009E                     _ADCON1bits	set	158
  3665  009C                     _ADRESH	set	156
  3666  009B                     _ADRESL	set	155
  3667  0095                     _OPTION_REGbits	set	149
  3668  0099                     _OSCCONbits	set	153
  3669  008D                     _TRISBbits	set	141
  3670  008E                     _TRISCbits	set	142
  3671  008F                     _TRISDbits	set	143
  3672  0090                     _TRISEbits	set	144
  3673  048D                     _RCIE	set	1165
  3674  011D                     _APFCONbits	set	285
  3675  010D                     _LATBbits	set	269
  3676  010F                     _LATDbits	set	271
  3677  0190                     _ANSELEbits	set	400
  3678  0192                     _PMADRH	set	402
  3679  0191                     _PMADRL	set	401
  3680  0195                     _PMCON1bits	set	405
  3681  0196                     _PMCON2	set	406
  3682  0194                     _PMDATH	set	404
  3683  0193                     _PMDATL	set	403
  3684  0199                     _RCREG	set	409
  3685  019D                     _RCSTAbits	set	413
  3686  019B                     _SPBRG	set	411
  3687  019A                     _TXREG	set	410
  3688  019E                     _TXSTAbits	set	414
  3689  0291                     _CCPR1	set	657
  3690  0298                     _CCPR2	set	664
  3691  0293                     _CCP1CONbits	set	659
  3692  029A                     _CCP2CONbits	set	666
  3693  029D                     _CCPTMRS0	set	669
  3694  029E                     _CCPTMRS1	set	670
  3695  029F                     _CCPTMRS2	set	671
  3696  0311                     _CCPR3	set	785
  3697  0318                     _CCPR4	set	792
  3698  031C                     _CCPR5	set	796
  3699  0313                     _CCP3CONbits	set	787
  3700  031A                     _CCP4CONbits	set	794
  3701  031E                     _CCP5CONbits	set	798
  3702  030C                     _TRISFbits	set	780
  3703  030D                     _TRISGbits	set	781
  3704  038C                     _LATFbits	set	908
  3705  038D                     _LATGbits	set	909
  3706  040C                     _ANSELFbits	set	1036
  3707  061F                     _CCP10CONbits	set	1567
  3708  0613                     _CCP6CONbits	set	1555
  3709  0616                     _CCP7CONbits	set	1558
  3710  0619                     _CCP8CONbits	set	1561
  3711  061C                     _CCP9CONbits	set	1564
  3712                           
  3713                           ; #config settings
  3714  0000                     
  3715                           	psect	cinit
  3716  02F5                     start_initialization:	
  3717  02F5                     __initialization:		;BIGRAM
  3718                           
  3719                           ; Clear objects allocated to BIGRAM
  3720  02F5  308A               	movlw	low (0+9098)
  3721  02F6  0084               	movwf	4
  3722  02F7  3023               	movlw	high (0+9098)
  3723  02F8  0085               	movwf	5
  3724  02F9  3066               	movlw	102
  3725  02FA  00FE               	movwf	btemp
  3726  02FB  3002               	movlw	2
  3727  02FC  00FF               	movwf	btemp+1
  3728  02FD  31AD  250B  3182   	fcall	clear_ram0
  3729                           
  3730                           ; Clear objects allocated to BANK0
  3731  0300  3052               	movlw	low __pbssBANK0
  3732  0301  0084               	movwf	4
  3733  0302  3000               	movlw	high __pbssBANK0
  3734  0303  0085               	movwf	5
  3735  0304  300E               	movlw	14
  3736  0305  00FE               	movwf	btemp
  3737  0306  3000               	movlw	0
  3738  0307  00FF               	movwf	btemp+1
  3739  0308  31AD  250B  3182   	fcall	clear_ram0
  3740                           
  3741                           ; Clear objects allocated to BANK2
  3742  030B  0022               	movlb	2	; select bank2
  3743  030C  01EA               	clrf	__pbssBANK2& (0+127)
  3744  030D  01EB               	clrf	(__pbssBANK2+1)& (0+127)
  3745                           
  3746                           ; Clear objects allocated to BANK3
  3747  030E  30A0               	movlw	low __pbssBANK3
  3748  030F  0084               	movwf	4
  3749  0310  3001               	movlw	high __pbssBANK3
  3750  0311  0085               	movwf	5
  3751  0312  302D               	movlw	45
  3752  0313  00FE               	movwf	btemp
  3753  0314  3000               	movlw	0
  3754  0315  00FF               	movwf	btemp+1
  3755  0316  31AD  250B  3182   	fcall	clear_ram0
  3756                           
  3757                           ; Clear objects allocated to BANK4
  3758  0319  3020               	movlw	low __pbssBANK4
  3759  031A  0084               	movwf	4
  3760  031B  3002               	movlw	high __pbssBANK4
  3761  031C  0085               	movwf	5
  3762  031D  303E               	movlw	62
  3763  031E  00FE               	movwf	btemp
  3764  031F  3000               	movlw	0
  3765  0320  00FF               	movwf	btemp+1
  3766  0321  31AD  250B  3182   	fcall	clear_ram0
  3767                           
  3768                           ; Clear objects allocated to BANK5
  3769  0324  30A0               	movlw	low __pbssBANK5
  3770  0325  0084               	movwf	4
  3771  0326  3002               	movlw	high __pbssBANK5
  3772  0327  0085               	movwf	5
  3773  0328  302C               	movlw	44
  3774  0329  00FE               	movwf	btemp
  3775  032A  3000               	movlw	0
  3776  032B  00FF               	movwf	btemp+1
  3777  032C  31AD  250B  3182   	fcall	clear_ram0
  3778                           
  3779                           ; Clear objects allocated to BANK6
  3780  032F  3020               	movlw	low __pbssBANK6
  3781  0330  0084               	movwf	4
  3782  0331  3003               	movlw	high __pbssBANK6
  3783  0332  0085               	movwf	5
  3784  0333  3040               	movlw	64
  3785  0334  00FE               	movwf	btemp
  3786  0335  3000               	movlw	0
  3787  0336  00FF               	movwf	btemp+1
  3788  0337  31AD  250B  3182   	fcall	clear_ram0
  3789                           
  3790                           ; Clear objects allocated to BANK7
  3791  033A  30A0               	movlw	low __pbssBANK7
  3792  033B  0084               	movwf	4
  3793  033C  3003               	movlw	high __pbssBANK7
  3794  033D  0085               	movwf	5
  3795  033E  3040               	movlw	64
  3796  033F  00FE               	movwf	btemp
  3797  0340  3000               	movlw	0
  3798  0341  00FF               	movwf	btemp+1
  3799  0342  31AD  250B  3182   	fcall	clear_ram0
  3800                           
  3801                           ; Initialize objects allocated to BANK0
  3802  0345  3026               	movlw	low __pidataBANK0
  3803  0346  0084               	movwf	4
  3804  0347  30AD               	movlw	(high __pidataBANK0)| (0+128)
  3805  0348  0085               	movwf	5
  3806  0349  3040               	movlw	low __pdataBANK0
  3807  034A  0086               	movwf	6
  3808  034B  3000               	movlw	high __pdataBANK0
  3809  034C  0087               	movwf	7
  3810  034D  3000               	movlw	0
  3811  034E  00FF               	movwf	btemp+1
  3812  034F  3012               	movlw	18
  3813  0350  31AC  24FF  3182   	fcall	init_ram
  3814                           
  3815                           ; Initialize objects allocated to BANK2
  3816  0353  3187  27FF  3182   	fcall	__pidataBANK2	;fetch initializer
  3817  0356  00EC               	movwf	__pdataBANK2& (0+127)
  3818                           
  3819                           ; Initialize objects allocated to BANK3
  3820  0357  30AB               	movlw	low __pidataBANK3
  3821  0358  0084               	movwf	4
  3822  0359  30AD               	movlw	(high __pidataBANK3)| (0+128)
  3823  035A  0085               	movwf	5
  3824  035B  30CD               	movlw	low __pdataBANK3
  3825  035C  0086               	movwf	6
  3826  035D  3001               	movlw	high __pdataBANK3
  3827  035E  0087               	movwf	7
  3828  035F  3000               	movlw	0
  3829  0360  00FF               	movwf	btemp+1
  3830  0361  301A               	movlw	26
  3831  0362  31AC  24FF  3182   	fcall	init_ram
  3832                           
  3833                           ; Initialize objects allocated to BANK4
  3834  0365  3001               	movlw	low __pidataBANK4
  3835  0366  0084               	movwf	4
  3836  0367  30A0               	movlw	(high __pidataBANK4)| (0+128)
  3837  0368  0085               	movwf	5
  3838  0369  3066               	movlw	low __pdataBANK4
  3839  036A  0086               	movwf	6
  3840  036B  3002               	movlw	high __pdataBANK4
  3841  036C  0087               	movwf	7
  3842  036D  3000               	movlw	0
  3843  036E  00FF               	movwf	btemp+1
  3844  036F  3004               	movlw	4
  3845  0370  31AC  24FF         	fcall	init_ram
  3846  0372                     end_of_initialization:	
  3847                           ;End of C runtime variable initialization code
  3848                           
  3849  0372                     __end_of__initialization:	
  3850  0372  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3851  0373  0020               	movlb	0
  3852  0374  3183  2B76         	ljmp	_main	;jump to C main() function
  3853                           
  3854                           	psect	bssBANK0
  3855  0052                     __pbssBANK0:	
  3856  0052                     _tap_timer:	
  3857  0052                     	ds	4
  3858  0056                     _timer:	
  3859  0056                     	ds	4
  3860  005A                     _UQEnd:	
  3861  005A                     	ds	1
  3862  005B                     _UQFront:	
  3863  005B                     	ds	1
  3864  005C                     _doubleTap_state:	
  3865  005C                     	ds	1
  3866  005D                     _longBypass_state:	
  3867  005D                     	ds	1
  3868  005E                     _mode2_state:	
  3869  005E                     	ds	1
  3870  005F                     _presetSaveMode:	
  3871  005F                     	ds	1
  3872                           
  3873                           	psect	dataBANK0
  3874  0040                     __pdataBANK0:	
  3875  0040                     _baseline_mod_time:	
  3876  0040                     	ds	4
  3877  0044                     _delay_time:	
  3878  0044                     	ds	4
  3879  0048                     _bottom_push_state:	
  3880  0048                     	ds	2
  3881  004A                     _long_press_limit:	
  3882  004A                     	ds	2
  3883  004C                     _top_push_state:	
  3884  004C                     	ds	2
  3885  004E                     _blink_rate:	
  3886  004E                     	ds	1
  3887  004F                     _longTap_state:	
  3888  004F                     	ds	1
  3889  0050                     _num_taps:	
  3890  0050                     	ds	1
  3891  0051                     _switchBypass_state:	
  3892  0051                     	ds	1
  3893                           
  3894                           	psect	bssBANK2
  3895  016A                     __pbssBANK2:	
  3896  016A                     _suspend_blink:	
  3897  016A                     	ds	1
  3898  016B                     _switchTap_pressed:	
  3899  016B                     	ds	1
  3900                           
  3901                           	psect	dataBANK2
  3902  016C                     __pdataBANK2:	
  3903  016C                     _presetChannel:	
  3904  016C                     	ds	1
  3905                           
  3906                           	psect	bssBANK3
  3907  01A0                     __pbssBANK3:	
  3908  01A0                     _double_timer:	
  3909  01A0                     	ds	4
  3910  01A4                     _mod_timer:	
  3911  01A4                     	ds	4
  3912  01A8                     _sub_timer:	
  3913  01A8                     	ds	4
  3914  01AC                     _knob_1_pos:	
  3915  01AC                     	ds	2
  3916  01AE                     _knob_2_pos:	
  3917  01AE                     	ds	2
  3918  01B0                     _knob_3_pos:	
  3919  01B0                     	ds	2
  3920  01B2                     _knob_4_pos:	
  3921  01B2                     	ds	2
  3922  01B4                     _knob_5_pos:	
  3923  01B4                     	ds	2
  3924  01B6                     _longBypass_timer:	
  3925  01B6                     	ds	2
  3926  01B8                     _longTap_timer:	
  3927  01B8                     	ds	2
  3928  01BA                     _switchBypass_pressed:	
  3929  01BA                     	ds	2
  3930  01BC                     _tmpModDelay:	
  3931  01BC                     	ds	2
  3932  01BE                     _adjust_mod_delay:	
  3933  01BE                     	ds	1
  3934  01BF                     _bottomTactile_pressed:	
  3935  01BF                     	ds	1
  3936  01C0                     _bypass_turning_on:	
  3937  01C0                     	ds	1
  3938  01C1                     _isInitialized:	
  3939  01C1                     	ds	1
  3940  01C2                     _longBypass_down:	
  3941  01C2                     	ds	1
  3942  01C3                     _longBypass_save:	
  3943  01C3                     	ds	1
  3944  01C4                     _longBypass_start:	
  3945  01C4                     	ds	1
  3946  01C5                     _longTap_start:	
  3947  01C5                     	ds	1
  3948  01C6                     _mode1_state:	
  3949  01C6                     	ds	1
  3950  01C7                     _modulation_changed:	
  3951  01C7                     	ds	1
  3952  01C8                     _preset_blink:	
  3953  01C8                     	ds	1
  3954  01C9                     _preset_programmning_on:	
  3955  01C9                     	ds	1
  3956  01CA                     _reset_sub_delay:	
  3957  01CA                     	ds	1
  3958  01CB                     _switchTap_down:	
  3959  01CB                     	ds	1
  3960  01CC                     _topTactile_pressed:	
  3961  01CC                     	ds	1
  3962                           
  3963                           	psect	dataBANK3
  3964  01CD                     __pdataBANK3:	
  3965  01CD                     _knob1_prev:	
  3966  01CD                     	ds	2
  3967  01CF                     _knob2_prev:	
  3968  01CF                     	ds	2
  3969  01D1                     _knob3_prev:	
  3970  01D1                     	ds	2
  3971  01D3                     _knob4_prev:	
  3972  01D3                     	ds	2
  3973  01D5                     _knob5_prev:	
  3974  01D5                     	ds	2
  3975  01D7                     _mod_counter:	
  3976  01D7                     	ds	2
  3977  01D9                     _mod_delay_time:	
  3978  01D9                     	ds	2
  3979  01DB                     _symmetry:	
  3980  01DB                     	ds	2
  3981  01DD                     _tap_iteration:	
  3982  01DD                     	ds	2
  3983  01DF                     _blink_state:	
  3984  01DF                     	ds	1
  3985  01E0                     _currentBypassState:	
  3986  01E0                     	ds	1
  3987  01E1                     _expSwitchState:	
  3988  01E1                     	ds	1
  3989  01E2                     _expressModeCnst:	
  3990  01E2                     	ds	1
  3991  01E3                     _expressionChannel:	
  3992  01E3                     	ds	1
  3993  01E4                     _mod_time_changed:	
  3994  01E4                     	ds	1
  3995  01E5                     _presetModeCnst:	
  3996  01E5                     	ds	1
  3997  01E6                     _switchTap_state:	
  3998  01E6                     	ds	1
  3999                           
  4000                           	psect	bssBANK4
  4001  0220                     __pbssBANK4:	
  4002  0220                     _tap_history:	
  4003  0220                     	ds	20
  4004  0234                     USARTWriteInt@F3536:	
  4005  0234                     	ds	5
  4006  0239                     _ledState:	
  4007  0239                     	ds	4
  4008  023D                     _tap_total:	
  4009  023D                     	ds	4
  4010  0241                     _test_timer:	
  4011  0241                     	ds	4
  4012  0245                     _adjusted_pot_value:	
  4013  0245                     	ds	2
  4014  0247                     _debounce_bypass:	
  4015  0247                     	ds	2
  4016  0249                     _debounce_count:	
  4017  0249                     	ds	2
  4018  024B                     _debounce_mode1:	
  4019  024B                     	ds	2
  4020  024D                     _debounce_mode2:	
  4021  024D                     	ds	2
  4022  024F                     _delayfound:	
  4023  024F                     	ds	2
  4024  0251                     _errno:	
  4025  0251                     	ds	2
  4026  0253                     _mod_value:	
  4027  0253                     	ds	2
  4028  0255                     _oldBaseTime:	
  4029  0255                     	ds	2
  4030  0257                     _oldSymmetry:	
  4031  0257                     	ds	2
  4032  0259                     _switchBypass_toggle:	
  4033  0259                     	ds	2
  4034  025B                     _tmpVal:	
  4035  025B                     	ds	2
  4036  025D                     _iCnt:	
  4037  025D                     	ds	1
  4038                           
  4039                           	psect	dataBANK4
  4040  0266                     __pdataBANK4:	
  4041  0266                     _blink_delay:	
  4042  0266                     	ds	2
  4043  0268                     _switchBypass_up:	
  4044  0268                     	ds	2
  4045                           
  4046                           	psect	bssBANK5
  4047  02A0                     __pbssBANK5:	
  4048  02A0                     _tap:	
  4049  02A0                     	ds	44
  4050                           
  4051                           	psect	bssBANK6
  4052  0320                     __pbssBANK6:	
  4053  0320                     _URBuff:	
  4054  0320                     	ds	64
  4055                           
  4056                           	psect	bssBANK7
  4057  03A0                     __pbssBANK7:	
  4058  03A0                     _myBuf:	
  4059  03A0                     	ds	64
  4060                           
  4061                           	psect	clrtext
  4062  2D0B                     clear_ram0:	
  4063                           ;	Called with FSR0 containing the base address, and
  4064                           ;	btemp/btemp+1 has the size to clear
  4065                           
  4066  2D0B  0064               	clrwdt	;clear the watchdog before getting into this loop
  4067  2D0C                     clrloop0:	
  4068  2D0C  0180               	clrf	0	;clear RAM location pointed to by FSR
  4069  2D0D  3101               	addfsr 0,1
  4070  2D0E  3001               	movlw	1
  4071  2D0F  02FE               	subwf	126,f
  4072  2D10  3000               	movlw	0
  4073  2D11  3BFF               	subwfb	127,f
  4074  2D12  087F               	movf	127,w
  4075  2D13  047E               	iorwf	126,w
  4076  2D14  1903               	btfsc	3,2
  4077  2D15  3400               	retlw	0	;all done for this memory range, return
  4078  2D16  2D0C               	goto	clrloop0	;have we reached the end yet?
  4079                           
  4080                           	psect	inittext
  4081  2CFF                     init_ram:	
  4082  2CFF  00FE               	movwf	126
  4083  2D00                     initloop:	
  4084  2D00  0012               	moviw fsr0++
  4085  2D01  001E               	movwi fsr1++
  4086  2D02  3001               	movlw	1
  4087  2D03  02FE               	subwf	126,f
  4088  2D04  3000               	movlw	0
  4089  2D05  3BFF               	subwfb	127,f
  4090  2D06  087F               	movf	127,w
  4091  2D07  047E               	iorwf	126,w
  4092  2D08  1903               	btfsc	3,2
  4093  2D09  3400               	retlw	0
  4094  2D0A  2D00               	goto	initloop
  4095                           
  4096                           	psect	cstackBANK5
  4097  02CC                     __pcstackBANK5:	
  4098  02CC                     _main$2839:	
  4099                           
  4100                           ; 3 bytes @ 0x0
  4101  02CC                     	ds	3
  4102  02CF                     _main$2840:	
  4103                           
  4104                           ; 3 bytes @ 0x3
  4105  02CF                     	ds	3
  4106  02D2                     _main$2841:	
  4107                           
  4108                           ; 3 bytes @ 0x6
  4109  02D2                     	ds	3
  4110                           
  4111                           	psect	cstackBANK4
  4112  025E                     __pcstackBANK4:	
  4113  025E                     ??_main:	
  4114                           
  4115                           ; 1 bytes @ 0x0
  4116  025E                     	ds	8
  4117                           
  4118                           	psect	cstackBANK3
  4119  01E7                     __pcstackBANK3:	
  4120  01E7                     scaleA100kPot@pwm:	
  4121  01E7                     scaleA10kPot@pwm:	
  4122                           ; 3 bytes @ 0x0
  4123                           
  4124  01E7                     scaleiA10kPot@pwm:	
  4125                           ; 3 bytes @ 0x0
  4126                           
  4127                           
  4128                           ; 3 bytes @ 0x0
  4129  01E7                     	ds	3
  4130  01EA                     _scaleA100kPot$2844:	
  4131  01EA                     _scaleA10kPot$2848:	
  4132                           ; 3 bytes @ 0x3
  4133                           
  4134  01EA                     _scaleiA10kPot$2850:	
  4135                           ; 3 bytes @ 0x3
  4136                           
  4137                           
  4138                           ; 3 bytes @ 0x3
  4139  01EA                     	ds	3
  4140  01ED                     _scaleA100kPot$2845:	
  4141  01ED                     _scaleA10kPot$2849:	
  4142                           ; 3 bytes @ 0x6
  4143                           
  4144  01ED                     _scaleiA10kPot$2851:	
  4145                           ; 3 bytes @ 0x6
  4146                           
  4147                           
  4148                           ; 3 bytes @ 0x6
  4149  01ED                     	ds	3
  4150                           
  4151                           	psect	cstackBANK2
  4152  0120                     __pcstackBANK2:	
  4153  0120                     ?___fttol:	
  4154  0120                     ___fttol@f1:	
  4155                           ; 4 bytes @ 0x0
  4156                           
  4157                           
  4158                           ; 3 bytes @ 0x0
  4159  0120                     	ds	4
  4160  0124                     ??___fttol:	
  4161                           
  4162                           ; 1 bytes @ 0x4
  4163  0124                     	ds	4
  4164  0128                     ___fttol@sign1:	
  4165                           
  4166                           ; 1 bytes @ 0x8
  4167  0128                     	ds	1
  4168  0129                     ___fttol@lval:	
  4169                           
  4170                           ; 4 bytes @ 0x9
  4171  0129                     	ds	4
  4172  012D                     ___fttol@exp1:	
  4173                           
  4174                           ; 1 bytes @ 0xD
  4175  012D                     	ds	1
  4176  012E                     ?_set_subdivision:	
  4177  012E                     ?_modTri:	
  4178                           ; 2 bytes @ 0xE
  4179                           
  4180  012E                     ?_modSaw:	
  4181                           ; 2 bytes @ 0xE
  4182                           
  4183  012E                     ?___wmul:	
  4184                           ; 2 bytes @ 0xE
  4185                           
  4186  012E                     ?_floor:	
  4187                           ; 2 bytes @ 0xE
  4188                           
  4189  012E                     set_subdivision@x:	
  4190                           ; 3 bytes @ 0xE
  4191                           
  4192  012E                     getModulationDelayTime@subDiv:	
  4193                           ; 2 bytes @ 0xE
  4194                           
  4195  012E                     ___wmul@multiplier:	
  4196                           ; 2 bytes @ 0xE
  4197                           
  4198  012E                     modTri@angle:	
  4199                           ; 2 bytes @ 0xE
  4200                           
  4201  012E                     modSaw@angle:	
  4202                           ; 3 bytes @ 0xE
  4203                           
  4204  012E                     floor@x:	
  4205                           ; 3 bytes @ 0xE
  4206                           
  4207                           
  4208                           ; 3 bytes @ 0xE
  4209  012E                     	ds	2
  4210  0130                     set_subdivision@y:	
  4211  0130                     ___wmul@multiplicand:	
  4212                           ; 2 bytes @ 0x10
  4213                           
  4214                           
  4215                           ; 2 bytes @ 0x10
  4216  0130                     	ds	1
  4217  0131                     ??_floor:	
  4218  0131                     modTri@inflection:	
  4219                           ; 1 bytes @ 0x11
  4220                           
  4221  0131                     modSaw@inflection:	
  4222                           ; 3 bytes @ 0x11
  4223                           
  4224                           
  4225                           ; 3 bytes @ 0x11
  4226  0131                     	ds	1
  4227  0132                     ___wmul@product:	
  4228  0132                     set_subdivision@scalar:	
  4229                           ; 2 bytes @ 0x12
  4230                           
  4231  0132                     floor@i:	
  4232                           ; 3 bytes @ 0x12
  4233                           
  4234                           
  4235                           ; 3 bytes @ 0x12
  4236  0132                     	ds	2
  4237  0134                     ?_modCos:	
  4238  0134                     ?_eval_poly:	
  4239                           ; 2 bytes @ 0x14
  4240                           
  4241  0134                     modCos@angle:	
  4242                           ; 3 bytes @ 0x14
  4243                           
  4244  0134                     eval_poly@x:	
  4245                           ; 3 bytes @ 0x14
  4246                           
  4247  0134                     _modTri$2853:	
  4248                           ; 3 bytes @ 0x14
  4249                           
  4250  0134                     _modSaw$2854:	
  4251                           ; 3 bytes @ 0x14
  4252                           
  4253                           
  4254                           ; 3 bytes @ 0x14
  4255  0134                     	ds	1
  4256  0135                     set_subdivision@tmpX:	
  4257  0135                     floor@expon:	
  4258                           ; 2 bytes @ 0x15
  4259                           
  4260                           
  4261                           ; 2 bytes @ 0x15
  4262  0135                     	ds	2
  4263  0137                     ?___ftsub:	
  4264  0137                     eval_poly@d:	
  4265                           ; 3 bytes @ 0x17
  4266                           
  4267  0137                     modCos@inflection:	
  4268                           ; 2 bytes @ 0x17
  4269                           
  4270  0137                     modTri@shift:	
  4271                           ; 3 bytes @ 0x17
  4272                           
  4273  0137                     ___ftsub@f2:	
  4274                           ; 3 bytes @ 0x17
  4275                           
  4276  0137                     _modSaw$2855:	
  4277                           ; 3 bytes @ 0x17
  4278                           
  4279                           
  4280                           ; 3 bytes @ 0x17
  4281  0137                     	ds	2
  4282  0139                     eval_poly@n:	
  4283                           
  4284                           ; 2 bytes @ 0x19
  4285  0139                     	ds	1
  4286  013A                     ??_modCos:	
  4287  013A                     modSaw@mod:	
  4288                           ; 1 bytes @ 0x1A
  4289                           
  4290  013A                     modTri@period:	
  4291                           ; 2 bytes @ 0x1A
  4292                           
  4293  013A                     ___ftsub@f1:	
  4294                           ; 3 bytes @ 0x1A
  4295                           
  4296                           
  4297                           ; 3 bytes @ 0x1A
  4298  013A                     	ds	1
  4299  013B                     eval_poly@res:	
  4300                           
  4301                           ; 3 bytes @ 0x1B
  4302  013B                     	ds	1
  4303  013C                     modSaw@shift:	
  4304  013C                     _modCos$2852:	
  4305                           ; 3 bytes @ 0x1C
  4306                           
  4307                           
  4308                           ; 3 bytes @ 0x1C
  4309  013C                     	ds	1
  4310  013D                     modTri@tmpVal:	
  4311                           
  4312                           ; 3 bytes @ 0x1D
  4313  013D                     	ds	1
  4314  013E                     ?_sin:	
  4315  013E                     ?_log:	
  4316                           ; 3 bytes @ 0x1E
  4317                           
  4318  013E                     ?_ldexp:	
  4319                           ; 3 bytes @ 0x1E
  4320                           
  4321  013E                     sin@f:	
  4322                           ; 3 bytes @ 0x1E
  4323                           
  4324  013E                     ldexp@value:	
  4325                           ; 3 bytes @ 0x1E
  4326                           
  4327  013E                     log@x:	
  4328                           ; 3 bytes @ 0x1E
  4329                           
  4330                           
  4331                           ; 3 bytes @ 0x1E
  4332  013E                     	ds	1
  4333  013F                     modCos@shift:	
  4334  013F                     modSaw@period:	
  4335                           ; 3 bytes @ 0x1F
  4336                           
  4337                           
  4338                           ; 3 bytes @ 0x1F
  4339  013F                     	ds	2
  4340  0141                     ??_sin:	
  4341  0141                     ??_log:	
  4342                           ; 1 bytes @ 0x21
  4343                           
  4344  0141                     ldexp@newexp:	
  4345                           ; 1 bytes @ 0x21
  4346                           
  4347                           
  4348                           ; 2 bytes @ 0x21
  4349  0141                     	ds	1
  4350  0142                     ?_modSawRev:	
  4351  0142                     log@exponent:	
  4352                           ; 2 bytes @ 0x22
  4353                           
  4354  0142                     modCos@period:	
  4355                           ; 2 bytes @ 0x22
  4356                           
  4357  0142                     modSawRev@angle:	
  4358                           ; 3 bytes @ 0x22
  4359                           
  4360  0142                     sin@y:	
  4361                           ; 3 bytes @ 0x22
  4362                           
  4363                           
  4364                           ; 3 bytes @ 0x22
  4365  0142                     	ds	1
  4366  0143                     ??_ldexp:	
  4367                           
  4368                           ; 1 bytes @ 0x23
  4369  0143                     	ds	2
  4370  0145                     modCos@tmpVal:	
  4371  0145                     modSawRev@inflection:	
  4372                           ; 3 bytes @ 0x25
  4373                           
  4374  0145                     _ldexp$2648:	
  4375                           ; 3 bytes @ 0x25
  4376                           
  4377  0145                     _sin$2859:	
  4378                           ; 3 bytes @ 0x25
  4379                           
  4380                           
  4381                           ; 3 bytes @ 0x25
  4382  0145                     	ds	3
  4383  0148                     ??_modSawRev:	
  4384  0148                     ?_modSquare:	
  4385                           ; 1 bytes @ 0x28
  4386                           
  4387  0148                     ?_exp:	
  4388                           ; 2 bytes @ 0x28
  4389                           
  4390  0148                     modSquare@angle:	
  4391                           ; 3 bytes @ 0x28
  4392                           
  4393  0148                     sin@x2:	
  4394                           ; 3 bytes @ 0x28
  4395                           
  4396  0148                     exp@x:	
  4397                           ; 3 bytes @ 0x28
  4398                           
  4399                           
  4400                           ; 3 bytes @ 0x28
  4401  0148                     	ds	3
  4402  014B                     ??_exp:	
  4403  014B                     sin@sgn:	
  4404                           ; 1 bytes @ 0x2B
  4405                           
  4406  014B                     modSquare@inflection:	
  4407                           ; 1 bytes @ 0x2B
  4408                           
  4409                           
  4410                           ; 3 bytes @ 0x2B
  4411  014B                     	ds	1
  4412  014C                     ?_cos:	
  4413  014C                     cos@f:	
  4414                           ; 3 bytes @ 0x2C
  4415                           
  4416  014C                     _exp$2860:	
  4417                           ; 3 bytes @ 0x2C
  4418                           
  4419                           
  4420                           ; 3 bytes @ 0x2C
  4421  014C                     	ds	2
  4422  014E                     modSquare@tmpVal:	
  4423                           
  4424                           ; 2 bytes @ 0x2E
  4425  014E                     	ds	1
  4426  014F                     _exp$2611:	
  4427  014F                     _cos$2856:	
  4428                           ; 3 bytes @ 0x2F
  4429                           
  4430                           
  4431                           ; 3 bytes @ 0x2F
  4432  014F                     	ds	1
  4433  0150                     ??_updateModulationArray:	
  4434                           
  4435                           ; 1 bytes @ 0x30
  4436  0150                     	ds	2
  4437  0152                     ??_calcCosArray:	
  4438  0152                     exp@exponent:	
  4439                           ; 1 bytes @ 0x32
  4440                           
  4441                           
  4442                           ; 2 bytes @ 0x32
  4443  0152                     	ds	2
  4444  0154                     exp@sign:	
  4445  0154                     updateModulationArray@angleFactor:	
  4446                           ; 1 bytes @ 0x34
  4447                           
  4448                           
  4449                           ; 2 bytes @ 0x34
  4450  0154                     	ds	1
  4451  0155                     ?_pow:	
  4452  0155                     pow@x:	
  4453                           ; 3 bytes @ 0x35
  4454                           
  4455                           
  4456                           ; 3 bytes @ 0x35
  4457  0155                     	ds	1
  4458  0156                     updateModulationArray@iAngle_2347:	
  4459  0156                     calcCosArray@tmpVal:	
  4460                           ; 1 bytes @ 0x36
  4461                           
  4462                           
  4463                           ; 3 bytes @ 0x36
  4464  0156                     	ds	1
  4465  0157                     updateModulationArray@subDiv:	
  4466                           
  4467                           ; 2 bytes @ 0x37
  4468  0157                     	ds	1
  4469  0158                     pow@y:	
  4470                           
  4471                           ; 3 bytes @ 0x38
  4472  0158                     	ds	1
  4473  0159                     calcCosArray@iAngle:	
  4474  0159                     updateModulationArray@thisAngle:	
  4475                           ; 1 bytes @ 0x39
  4476                           
  4477                           
  4478                           ; 2 bytes @ 0x39
  4479  0159                     	ds	2
  4480  015B                     ??_pow:	
  4481  015B                     updateModulationArray@iAngle:	
  4482                           ; 1 bytes @ 0x3B
  4483                           
  4484                           
  4485                           ; 1 bytes @ 0x3B
  4486  015B                     	ds	1
  4487  015C                     _pow$2857:	
  4488                           
  4489                           ; 3 bytes @ 0x3C
  4490  015C                     	ds	3
  4491  015F                     _pow$2858:	
  4492                           
  4493                           ; 3 bytes @ 0x3F
  4494  015F                     	ds	3
  4495  0162                     pow@sign:	
  4496                           
  4497                           ; 1 bytes @ 0x42
  4498  0162                     	ds	1
  4499  0163                     pow@yi:	
  4500                           
  4501                           ; 4 bytes @ 0x43
  4502  0163                     	ds	4
  4503  0167                     ?_scaleA10kPot:	
  4504  0167                     ?_scaleiA10kPot:	
  4505                           ; 2 bytes @ 0x47
  4506                           
  4507  0167                     ?_scaleA100kPot:	
  4508                           ; 2 bytes @ 0x47
  4509                           
  4510  0167                     scaleA100kPot@input:	
  4511                           ; 2 bytes @ 0x47
  4512                           
  4513  0167                     scaleA10kPot@input:	
  4514                           ; 3 bytes @ 0x47
  4515                           
  4516  0167                     scaleiA10kPot@input:	
  4517                           ; 3 bytes @ 0x47
  4518                           
  4519                           
  4520                           ; 3 bytes @ 0x47
  4521  0167                     	ds	3
  4522                           
  4523                           	psect	cstackBANK1
  4524  00A0                     __pcstackBANK1:	
  4525  00A0                     ?___ftge:	
  4526  00A0                     ?_set_leds_top:	
  4527                           ; 1 bit 
  4528                           
  4529  00A0                     ?_USARTInit:	
  4530                           ; 1 bytes @ 0x0
  4531                           
  4532  00A0                     ??_ConfigureOscillator:	
  4533                           ; 1 bytes @ 0x0
  4534                           
  4535  00A0                     ??_InitApp:	
  4536                           ; 1 bytes @ 0x0
  4537                           
  4538  00A0                     ??_InitializeTaps:	
  4539                           ; 1 bytes @ 0x0
  4540                           
  4541  00A0                     ??_init_adc:	
  4542                           ; 1 bytes @ 0x0
  4543                           
  4544  00A0                     ??_init_pwm:	
  4545                           ; 1 bytes @ 0x0
  4546                           
  4547  00A0                     ??_init_timer2:	
  4548                           ; 1 bytes @ 0x0
  4549                           
  4550  00A0                     ??_init_timer0:	
  4551                           ; 1 bytes @ 0x0
  4552                           
  4553  00A0                     ?_set_leds_bottom:	
  4554                           ; 1 bytes @ 0x0
  4555                           
  4556  00A0                     ?_setLongBypassState:	
  4557                           ; 1 bytes @ 0x0
  4558                           
  4559  00A0                     ?_setLongTapState:	
  4560                           ; 1 bytes @ 0x0
  4561                           
  4562  00A0                     ?_updateSwitchBypassState:	
  4563                           ; 1 bytes @ 0x0
  4564                           
  4565  00A0                     ?_getModulationSubdivision:	
  4566                           ; 1 bytes @ 0x0
  4567                           
  4568  00A0                     ?_adc_convert:	
  4569                           ; 2 bytes @ 0x0
  4570                           
  4571  00A0                     ?_FLASH_ReadWord:	
  4572                           ; 2 bytes @ 0x0
  4573                           
  4574  00A0                     ?_getSwitchBypassState:	
  4575                           ; 2 bytes @ 0x0
  4576                           
  4577  00A0                     ?___awdiv:	
  4578                           ; 2 bytes @ 0x0
  4579                           
  4580  00A0                     ?___ftpack:	
  4581                           ; 2 bytes @ 0x0
  4582                           
  4583  00A0                     ?_frexp:	
  4584                           ; 3 bytes @ 0x0
  4585                           
  4586  00A0                     ?___lmul:	
  4587                           ; 3 bytes @ 0x0
  4588                           
  4589  00A0                     ?___aldiv:	
  4590                           ; 4 bytes @ 0x0
  4591                           
  4592  00A0                     FLASH_ReadWord@flashAddr:	
  4593                           ; 4 bytes @ 0x0
  4594                           
  4595  00A0                     set_leds_top@x:	
  4596                           ; 2 bytes @ 0x0
  4597                           
  4598  00A0                     set_leds_bottom@x:	
  4599                           ; 2 bytes @ 0x0
  4600                           
  4601  00A0                     updateSwitchBypassState@state:	
  4602                           ; 2 bytes @ 0x0
  4603                           
  4604  00A0                     setLongBypassState@f_state:	
  4605                           ; 2 bytes @ 0x0
  4606                           
  4607  00A0                     setLongTapState@f_state:	
  4608                           ; 2 bytes @ 0x0
  4609                           
  4610  00A0                     USARTInit@baud_rate:	
  4611                           ; 2 bytes @ 0x0
  4612                           
  4613  00A0                     ___awdiv@divisor:	
  4614                           ; 2 bytes @ 0x0
  4615                           
  4616  00A0                     ___ftpack@arg:	
  4617                           ; 2 bytes @ 0x0
  4618                           
  4619  00A0                     ___ftge@ff1:	
  4620                           ; 3 bytes @ 0x0
  4621                           
  4622  00A0                     frexp@value:	
  4623                           ; 3 bytes @ 0x0
  4624                           
  4625  00A0                     ___lmul@multiplier:	
  4626                           ; 3 bytes @ 0x0
  4627                           
  4628  00A0                     ___aldiv@divisor:	
  4629                           ; 4 bytes @ 0x0
  4630                           
  4631                           
  4632                           ; 4 bytes @ 0x0
  4633  00A0                     	ds	1
  4634  00A1                     InitializeTaps@itap:	
  4635                           
  4636                           ; 2 bytes @ 0x1
  4637  00A1                     	ds	1
  4638  00A2                     ??_getModulationSubdivision:	
  4639  00A2                     ??_USARTInit:	
  4640                           ; 1 bytes @ 0x2
  4641                           
  4642  00A2                     ??_adc_convert:	
  4643                           ; 1 bytes @ 0x2
  4644                           
  4645  00A2                     ??_FLASH_ReadWord:	
  4646                           ; 1 bytes @ 0x2
  4647                           
  4648  00A2                     ??_set_leds_bottom:	
  4649                           ; 1 bytes @ 0x2
  4650                           
  4651  00A2                     ??_setLongBypassState:	
  4652                           ; 1 bytes @ 0x2
  4653                           
  4654  00A2                     ??_setLongTapState:	
  4655                           ; 1 bytes @ 0x2
  4656                           
  4657  00A2                     ??_updateSwitchBypassState:	
  4658                           ; 1 bytes @ 0x2
  4659                           
  4660  00A2                     ??_getSwitchBypassState:	
  4661                           ; 1 bytes @ 0x2
  4662                           
  4663  00A2                     FLASH_ReadWord@GIEBitValue:	
  4664                           ; 1 bytes @ 0x2
  4665                           
  4666  00A2                     set_leds_top@ledState:	
  4667                           ; 1 bytes @ 0x2
  4668                           
  4669  00A2                     ___awdiv@dividend:	
  4670                           ; 2 bytes @ 0x2
  4671                           
  4672                           
  4673                           ; 2 bytes @ 0x2
  4674  00A2                     	ds	1
  4675  00A3                     adc_convert@channel:	
  4676  00A3                     ___ftpack@exp:	
  4677                           ; 1 bytes @ 0x3
  4678                           
  4679  00A3                     frexp@eptr:	
  4680                           ; 1 bytes @ 0x3
  4681                           
  4682  00A3                     ___ftge@ff2:	
  4683                           ; 1 bytes @ 0x3
  4684                           
  4685                           
  4686                           ; 3 bytes @ 0x3
  4687  00A3                     	ds	1
  4688  00A4                     ??_set_leds_top:	
  4689  00A4                     ??_ReadSavedSettings:	
  4690                           ; 1 bytes @ 0x4
  4691                           
  4692  00A4                     ??_resetRingLEDs:	
  4693                           ; 1 bytes @ 0x4
  4694                           
  4695  00A4                     ??_setPresetDisplay:	
  4696                           ; 1 bytes @ 0x4
  4697                           
  4698  00A4                     ??_setExpressionDisplay:	
  4699                           ; 1 bytes @ 0x4
  4700                           
  4701  00A4                     ??_frexp:	
  4702                           ; 1 bytes @ 0x4
  4703                           
  4704  00A4                     ??___awdiv:	
  4705                           ; 1 bytes @ 0x4
  4706                           
  4707  00A4                     ___ftpack@sign:	
  4708                           ; 1 bytes @ 0x4
  4709                           
  4710  00A4                     ___lmul@multiplicand:	
  4711                           ; 1 bytes @ 0x4
  4712                           
  4713  00A4                     ___aldiv@dividend:	
  4714                           ; 4 bytes @ 0x4
  4715                           
  4716                           
  4717                           ; 4 bytes @ 0x4
  4718  00A4                     	ds	1
  4719  00A5                     ??___ftpack:	
  4720  00A5                     ___awdiv@counter:	
  4721                           ; 1 bytes @ 0x5
  4722                           
  4723                           
  4724                           ; 1 bytes @ 0x5
  4725  00A5                     	ds	1
  4726  00A6                     ??___ftge:	
  4727  00A6                     setPresetDisplay@ledChannel:	
  4728                           ; 1 bytes @ 0x6
  4729                           
  4730  00A6                     setExpressionDisplay@ledChannel:	
  4731                           ; 1 bytes @ 0x6
  4732                           
  4733  00A6                     ___awdiv@sign:	
  4734                           ; 1 bytes @ 0x6
  4735                           
  4736                           
  4737                           ; 1 bytes @ 0x6
  4738  00A6                     	ds	1
  4739  00A7                     ??_update_mode:	
  4740  00A7                     ??_update_selectMode:	
  4741                           ; 1 bytes @ 0x7
  4742                           
  4743  00A7                     ??_setPedalMode:	
  4744                           ; 1 bytes @ 0x7
  4745                           
  4746  00A7                     ___awdiv@quotient:	
  4747                           ; 1 bytes @ 0x7
  4748                           
  4749                           
  4750                           ; 2 bytes @ 0x7
  4751  00A7                     	ds	1
  4752  00A8                     ??___lmul:	
  4753  00A8                     ??___aldiv:	
  4754                           ; 1 bytes @ 0x8
  4755                           
  4756  00A8                     ?___altoft:	
  4757                           ; 1 bytes @ 0x8
  4758                           
  4759  00A8                     ?___awtoft:	
  4760                           ; 3 bytes @ 0x8
  4761                           
  4762  00A8                     ?___lltoft:	
  4763                           ; 3 bytes @ 0x8
  4764                           
  4765  00A8                     ___awtoft@c:	
  4766                           ; 3 bytes @ 0x8
  4767                           
  4768  00A8                     ___lmul@product:	
  4769                           ; 2 bytes @ 0x8
  4770                           
  4771  00A8                     ___altoft@c:	
  4772                           ; 4 bytes @ 0x8
  4773                           
  4774  00A8                     ___lltoft@c:	
  4775                           ; 4 bytes @ 0x8
  4776                           
  4777                           
  4778                           ; 4 bytes @ 0x8
  4779  00A8                     	ds	1
  4780  00A9                     ___aldiv@counter:	
  4781                           
  4782                           ; 1 bytes @ 0x9
  4783  00A9                     	ds	1
  4784  00AA                     ___aldiv@sign:	
  4785                           
  4786                           ; 1 bytes @ 0xA
  4787  00AA                     	ds	1
  4788  00AB                     ??___awtoft:	
  4789  00AB                     ___aldiv@quotient:	
  4790                           ; 1 bytes @ 0xB
  4791                           
  4792                           
  4793                           ; 4 bytes @ 0xB
  4794  00AB                     	ds	1
  4795  00AC                     ?_wait_ms:	
  4796  00AC                     ??___altoft:	
  4797                           ; 1 bytes @ 0xC
  4798                           
  4799  00AC                     ??___lltoft:	
  4800                           ; 1 bytes @ 0xC
  4801                           
  4802  00AC                     wait_ms@timeSec:	
  4803                           ; 1 bytes @ 0xC
  4804                           
  4805                           
  4806                           ; 2 bytes @ 0xC
  4807  00AC                     	ds	1
  4808  00AD                     ___awtoft@sign:	
  4809  00AD                     ___lltoft@exp:	
  4810                           ; 1 bytes @ 0xD
  4811                           
  4812                           
  4813                           ; 1 bytes @ 0xD
  4814  00AD                     	ds	1
  4815  00AE                     ??_wait_ms:	
  4816  00AE                     ?___ftmul:	
  4817                           ; 1 bytes @ 0xE
  4818                           
  4819  00AE                     ___altoft@exp:	
  4820                           ; 3 bytes @ 0xE
  4821                           
  4822  00AE                     ___ftmul@f1:	
  4823                           ; 1 bytes @ 0xE
  4824                           
  4825  00AE                     wait_ms@timemsl:	
  4826                           ; 3 bytes @ 0xE
  4827                           
  4828                           
  4829                           ; 4 bytes @ 0xE
  4830  00AE                     	ds	1
  4831  00AF                     ___altoft@sign:	
  4832                           
  4833                           ; 1 bytes @ 0xF
  4834  00AF                     	ds	2
  4835  00B1                     ___ftmul@f2:	
  4836                           
  4837                           ; 3 bytes @ 0x11
  4838  00B1                     	ds	1
  4839  00B2                     ??_read_bottom_tactile:	
  4840  00B2                     ??_read_top_tactile:	
  4841                           ; 1 bytes @ 0x12
  4842                           
  4843  00B2                     ??_solidring_tactiles:	
  4844                           ; 1 bytes @ 0x12
  4845                           
  4846  00B2                     ??_ring_tactiles:	
  4847                           ; 1 bytes @ 0x12
  4848                           
  4849  00B2                     ?_setSwitchBypassRelays:	
  4850                           ; 1 bytes @ 0x12
  4851                           
  4852  00B2                     setSwitchBypassRelays@f_state:	
  4853                           ; 1 bytes @ 0x12
  4854                           
  4855                           
  4856                           ; 2 bytes @ 0x12
  4857  00B2                     	ds	1
  4858  00B3                     ring_tactiles@iLed:	
  4859                           
  4860                           ; 2 bytes @ 0x13
  4861  00B3                     	ds	1
  4862  00B4                     ??_setSwitchBypassRelays:	
  4863  00B4                     ??___ftmul:	
  4864                           ; 1 bytes @ 0x14
  4865                           
  4866  00B4                     solidring_tactiles@ring_delay:	
  4867                           ; 1 bytes @ 0x14
  4868                           
  4869                           
  4870                           ; 1 bytes @ 0x14
  4871  00B4                     	ds	1
  4872  00B5                     ring_tactiles@iLed_1538:	
  4873                           
  4874                           ; 2 bytes @ 0x15
  4875  00B5                     	ds	1
  4876  00B6                     ?_setSwitchBypassState:	
  4877  00B6                     setSwitchBypassState@f_state:	
  4878                           ; 1 bytes @ 0x16
  4879                           
  4880                           
  4881                           ; 2 bytes @ 0x16
  4882  00B6                     	ds	1
  4883  00B7                     ??_showSave:	
  4884                           
  4885                           ; 1 bytes @ 0x17
  4886  00B7                     	ds	1
  4887  00B8                     ??_setSwitchBypassState:	
  4888  00B8                     ?_setDoublePressState:	
  4889                           ; 1 bytes @ 0x18
  4890                           
  4891  00B8                     ___ftmul@exp:	
  4892                           ; 1 bytes @ 0x18
  4893                           
  4894  00B8                     setDoublePressState@f_state:	
  4895                           ; 1 bytes @ 0x18
  4896                           
  4897                           
  4898                           ; 2 bytes @ 0x18
  4899  00B8                     	ds	1
  4900  00B9                     ___ftmul@f3_as_product:	
  4901                           
  4902                           ; 3 bytes @ 0x19
  4903  00B9                     	ds	1
  4904  00BA                     ??_initSwitchBypass:	
  4905  00BA                     ??_setDoublePressState:	
  4906                           ; 1 bytes @ 0x1A
  4907                           
  4908  00BA                     initSwitchBypass@initState:	
  4909                           ; 1 bytes @ 0x1A
  4910                           
  4911                           
  4912                           ; 2 bytes @ 0x1A
  4913  00BA                     	ds	2
  4914  00BC                     ??_updateSwitchBypass:	
  4915  00BC                     ??_updateSwitchTap:	
  4916                           ; 1 bytes @ 0x1C
  4917                           
  4918  00BC                     ___ftmul@cntr:	
  4919                           ; 1 bytes @ 0x1C
  4920                           
  4921                           
  4922                           ; 1 bytes @ 0x1C
  4923  00BC                     	ds	1
  4924  00BD                     ___ftmul@sign:	
  4925                           
  4926                           ; 1 bytes @ 0x1D
  4927  00BD                     	ds	1
  4928  00BE                     ?___ftneg:	
  4929  00BE                     ___ftneg@f1:	
  4930                           ; 3 bytes @ 0x1E
  4931                           
  4932                           
  4933                           ; 3 bytes @ 0x1E
  4934  00BE                     	ds	3
  4935  00C1                     ??___ftneg:	
  4936  00C1                     ?___ftadd:	
  4937                           ; 1 bytes @ 0x21
  4938                           
  4939  00C1                     ___ftadd@f1:	
  4940                           ; 3 bytes @ 0x21
  4941                           
  4942                           
  4943                           ; 3 bytes @ 0x21
  4944  00C1                     	ds	1
  4945  00C2                     updateSwitchTap@tapCntDivisor:	
  4946                           
  4947                           ; 2 bytes @ 0x22
  4948  00C2                     	ds	2
  4949  00C4                     updateSwitchTap@iCnt:	
  4950  00C4                     ___ftadd@f2:	
  4951                           ; 1 bytes @ 0x24
  4952                           
  4953                           
  4954                           ; 3 bytes @ 0x24
  4955  00C4                     	ds	3
  4956  00C7                     ??___ftadd:	
  4957                           
  4958                           ; 1 bytes @ 0x27
  4959  00C7                     	ds	4
  4960  00CB                     ___ftadd@sign:	
  4961                           
  4962                           ; 1 bytes @ 0x2B
  4963  00CB                     	ds	1
  4964  00CC                     ___ftadd@exp2:	
  4965                           
  4966                           ; 1 bytes @ 0x2C
  4967  00CC                     	ds	1
  4968  00CD                     ___ftadd@exp1:	
  4969                           
  4970                           ; 1 bytes @ 0x2D
  4971  00CD                     	ds	1
  4972  00CE                     ?___ftdiv:	
  4973  00CE                     ___ftdiv@f2:	
  4974                           ; 3 bytes @ 0x2E
  4975                           
  4976                           
  4977                           ; 3 bytes @ 0x2E
  4978  00CE                     	ds	3
  4979  00D1                     ___ftdiv@f1:	
  4980                           
  4981                           ; 3 bytes @ 0x31
  4982  00D1                     	ds	3
  4983  00D4                     ??___ftdiv:	
  4984                           
  4985                           ; 1 bytes @ 0x34
  4986  00D4                     	ds	4
  4987  00D8                     ___ftdiv@cntr:	
  4988                           
  4989                           ; 1 bytes @ 0x38
  4990  00D8                     	ds	1
  4991  00D9                     ___ftdiv@f3:	
  4992                           
  4993                           ; 3 bytes @ 0x39
  4994  00D9                     	ds	3
  4995  00DC                     ___ftdiv@exp:	
  4996                           
  4997                           ; 1 bytes @ 0x3C
  4998  00DC                     	ds	1
  4999  00DD                     ___ftdiv@sign:	
  5000                           
  5001                           ; 1 bytes @ 0x3D
  5002  00DD                     	ds	1
  5003  00DE                     ?_map:	
  5004  00DE                     map@x:	
  5005                           ; 3 bytes @ 0x3E
  5006                           
  5007                           
  5008                           ; 3 bytes @ 0x3E
  5009  00DE                     	ds	3
  5010  00E1                     map@in_min:	
  5011                           
  5012                           ; 3 bytes @ 0x41
  5013  00E1                     	ds	3
  5014  00E4                     map@in_max:	
  5015                           
  5016                           ; 3 bytes @ 0x44
  5017  00E4                     	ds	3
  5018  00E7                     map@out_min:	
  5019                           
  5020                           ; 3 bytes @ 0x47
  5021  00E7                     	ds	3
  5022  00EA                     map@out_max:	
  5023                           
  5024                           ; 3 bytes @ 0x4A
  5025  00EA                     	ds	3
  5026  00ED                     ??_map:	
  5027  00ED                     _map$2842:	
  5028                           ; 1 bytes @ 0x4D
  5029                           
  5030                           
  5031                           ; 3 bytes @ 0x4D
  5032  00ED                     	ds	3
  5033  00F0                     ??_scaleA10kPot:	
  5034  00F0                     ??_scaleiA10kPot:	
  5035                           ; 1 bytes @ 0x50
  5036                           
  5037  00F0                     ??_scaleA100kPot:	
  5038                           ; 1 bytes @ 0x50
  5039                           
  5040  00F0                     ??_set_subdivision:	
  5041                           ; 1 bytes @ 0x50
  5042                           
  5043  00F0                     ??_getModulationDelayTime:	
  5044                           ; 1 bytes @ 0x50
  5045                           
  5046  00F0                     ??_cos:	
  5047                           ; 1 bytes @ 0x50
  5048                           
  5049  00F0                     ??_modTri:	
  5050                           ; 1 bytes @ 0x50
  5051                           
  5052  00F0                     ??_modSquare:	
  5053                           ; 1 bytes @ 0x50
  5054                           
  5055  00F0                     ??_modSaw:	
  5056                           ; 1 bytes @ 0x50
  5057                           
  5058  00F0                     ??_eval_poly:	
  5059                           ; 1 bytes @ 0x50
  5060                           
  5061  00F0                     ??___wmul:	
  5062                           ; 1 bytes @ 0x50
  5063                           
  5064  00F0                     ??___ftsub:	
  5065                           ; 1 bytes @ 0x50
  5066                           
  5067                           
  5068                           	psect	cstackCOMMON
  5069  0070                     __pcstackCOMMON:	
  5070                           ; 1 bytes @ 0x50
  5071                           
  5072  0070                     ?_calcCosArray:	
  5073  0070                     ?_ConfigureOscillator:	
  5074                           ; 1 bytes @ 0x0
  5075                           
  5076  0070                     ?_InitApp:	
  5077                           ; 1 bytes @ 0x0
  5078                           
  5079  0070                     ?_InitializeTaps:	
  5080                           ; 1 bytes @ 0x0
  5081                           
  5082  0070                     ?_initSwitchBypass:	
  5083                           ; 1 bytes @ 0x0
  5084                           
  5085  0070                     ?_ReadSavedSettings:	
  5086                           ; 1 bytes @ 0x0
  5087                           
  5088  0070                     ?_update_mode:	
  5089                           ; 1 bytes @ 0x0
  5090                           
  5091  0070                     ?_update_selectMode:	
  5092                           ; 1 bytes @ 0x0
  5093                           
  5094  0070                     ?_updateSwitchBypass:	
  5095                           ; 1 bytes @ 0x0
  5096                           
  5097  0070                     ?_updateSwitchTap:	
  5098                           ; 1 bytes @ 0x0
  5099                           
  5100  0070                     ?_read_bottom_tactile:	
  5101                           ; 1 bytes @ 0x0
  5102                           
  5103  0070                     ?_read_top_tactile:	
  5104                           ; 1 bytes @ 0x0
  5105                           
  5106  0070                     ?_getModulationDelayTime:	
  5107                           ; 1 bytes @ 0x0
  5108                           
  5109  0070                     ?_updateModulationArray:	
  5110                           ; 1 bytes @ 0x0
  5111                           
  5112  0070                     ?_init_adc:	
  5113                           ; 1 bytes @ 0x0
  5114                           
  5115  0070                     ?_init_pwm:	
  5116                           ; 1 bytes @ 0x0
  5117                           
  5118  0070                     ?_init_timer2:	
  5119                           ; 1 bytes @ 0x0
  5120                           
  5121  0070                     ?_init_timer0:	
  5122                           ; 1 bytes @ 0x0
  5123                           
  5124  0070                     ?_solidring_tactiles:	
  5125                           ; 1 bytes @ 0x0
  5126                           
  5127  0070                     ?_ring_tactiles:	
  5128                           ; 1 bytes @ 0x0
  5129                           
  5130  0070                     ?_resetRingLEDs:	
  5131                           ; 1 bytes @ 0x0
  5132                           
  5133  0070                     ?_setPedalMode:	
  5134                           ; 1 bytes @ 0x0
  5135                           
  5136  0070                     ?_setPresetDisplay:	
  5137                           ; 1 bytes @ 0x0
  5138                           
  5139  0070                     ?_setExpressionDisplay:	
  5140                           ; 1 bytes @ 0x0
  5141                           
  5142  0070                     ?_isr:	
  5143                           ; 1 bytes @ 0x0
  5144                           
  5145  0070                     ?_main:	
  5146                           ; 1 bytes @ 0x0
  5147                           
  5148  0070                     ?_showSave:	
  5149                           ; 1 bytes @ 0x0
  5150                           
  5151  0070                     ?i1_set_leds_top:	
  5152                           ; 1 bytes @ 0x0
  5153                           
  5154  0070                     ?i1_getModulationSubdivision:	
  5155                           ; 1 bytes @ 0x0
  5156                           
  5157  0070                     ?i1___awdiv:	
  5158                           ; 2 bytes @ 0x0
  5159                           
  5160  0070                     ?i1___lmul:	
  5161                           ; 2 bytes @ 0x0
  5162                           
  5163  0070                     i1set_leds_top@x:	
  5164                           ; 4 bytes @ 0x0
  5165                           
  5166  0070                     i1___awdiv@divisor:	
  5167                           ; 2 bytes @ 0x0
  5168                           
  5169  0070                     i1___lmul@multiplier:	
  5170                           ; 2 bytes @ 0x0
  5171                           
  5172                           
  5173                           ; 4 bytes @ 0x0
  5174  0070                     	ds	2
  5175  0072                     ??i1_getModulationSubdivision:	
  5176  0072                     i1set_leds_top@ledState:	
  5177                           ; 1 bytes @ 0x2
  5178                           
  5179  0072                     i1___awdiv@dividend:	
  5180                           ; 2 bytes @ 0x2
  5181                           
  5182                           
  5183                           ; 2 bytes @ 0x2
  5184  0072                     	ds	2
  5185  0074                     ??i1_set_leds_top:	
  5186  0074                     ??i1___awdiv:	
  5187                           ; 1 bytes @ 0x4
  5188                           
  5189  0074                     i1___lmul@multiplicand:	
  5190                           ; 1 bytes @ 0x4
  5191                           
  5192                           
  5193                           ; 4 bytes @ 0x4
  5194  0074                     	ds	1
  5195  0075                     i1___awdiv@counter:	
  5196                           
  5197                           ; 1 bytes @ 0x5
  5198  0075                     	ds	1
  5199  0076                     i1___awdiv@sign:	
  5200                           
  5201                           ; 1 bytes @ 0x6
  5202  0076                     	ds	1
  5203  0077                     i1___awdiv@quotient:	
  5204                           
  5205                           ; 2 bytes @ 0x7
  5206  0077                     	ds	1
  5207  0078                     ??i1___lmul:	
  5208  0078                     i1___lmul@product:	
  5209                           ; 1 bytes @ 0x8
  5210                           
  5211                           
  5212                           ; 4 bytes @ 0x8
  5213  0078                     	ds	4
  5214  007C                     ??i1___aldiv:	
  5215                           
  5216                           ; 1 bytes @ 0xC
  5217  007C                     	ds	1
  5218  007D                     isr@subDiv:	
  5219                           
  5220                           ; 1 bytes @ 0xD
  5221  007D                     	ds	1
  5222                           
  5223                           	psect	cstackBANK0
  5224  0020                     __pcstackBANK0:	
  5225  0020                     ?i1___aldiv:	
  5226  0020                     i1___aldiv@divisor:	
  5227                           ; 4 bytes @ 0x0
  5228                           
  5229                           
  5230                           ; 4 bytes @ 0x0
  5231  0020                     	ds	4
  5232  0024                     i1___aldiv@dividend:	
  5233                           
  5234                           ; 4 bytes @ 0x4
  5235  0024                     	ds	4
  5236  0028                     i1___aldiv@counter:	
  5237                           
  5238                           ; 1 bytes @ 0x8
  5239  0028                     	ds	1
  5240  0029                     i1___aldiv@sign:	
  5241                           
  5242                           ; 1 bytes @ 0x9
  5243  0029                     	ds	1
  5244  002A                     i1___aldiv@quotient:	
  5245                           
  5246                           ; 4 bytes @ 0xA
  5247  002A                     	ds	4
  5248  002E                     ?_modulation:	
  5249  002E                     modulation@x:	
  5250                           ; 4 bytes @ 0xE
  5251                           
  5252                           
  5253                           ; 4 bytes @ 0xE
  5254  002E                     	ds	4
  5255  0032                     modulation@y:	
  5256                           
  5257                           ; 4 bytes @ 0x12
  5258  0032                     	ds	4
  5259  0036                     ??_modulation:	
  5260                           
  5261                           ; 1 bytes @ 0x16
  5262  0036                     	ds	4
  5263  003A                     ??_isr:	
  5264                           
  5265                           ; 1 bytes @ 0x1A
  5266  003A                     	ds	6
  5267                           
  5268                           	psect	maintext
  5269  0376                     __pmaintext:	
  5270 ;;
  5271 ;;Main: autosize = 0, tempsize = 8, incstack = 0, save=0
  5272 ;;
  5273 ;; *************** function _main *****************
  5274 ;; Defined at:
  5275 ;;		line 69 in file "main.c"
  5276 ;; Parameters:    Size  Location     Type
  5277 ;;		None
  5278 ;; Auto vars:     Size  Location     Type
  5279 ;;		None
  5280 ;; Return value:  Size  Location     Type
  5281 ;;                  1    wreg      void 
  5282 ;; Registers used:
  5283 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5284 ;; Tracked objects:
  5285 ;;		On entry : B1F/0
  5286 ;;		On exit  : 0/0
  5287 ;;		Unchanged: 0/0
  5288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  5289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5290 ;;      Locals:         0       0       0       0       0       0       9       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5291 ;;      Temps:          0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5292 ;;      Totals:         0       0       0       0       0       8       9       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5293 ;;Total ram usage:       17 bytes
  5294 ;; Hardware stack levels required when called:    9
  5295 ;; This function calls:
  5296 ;;		_ConfigureOscillator
  5297 ;;		_InitApp
  5298 ;;		_InitializeTaps
  5299 ;;		_ReadSavedSettings
  5300 ;;		_USARTInit
  5301 ;;		___awtoft
  5302 ;;		___fttol
  5303 ;;		_adc_convert
  5304 ;;		_calcCosArray
  5305 ;;		_getModulationDelayTime
  5306 ;;		_initSwitchBypass
  5307 ;;		_map
  5308 ;;		_read_bottom_tactile
  5309 ;;		_read_top_tactile
  5310 ;;		_scaleA100kPot
  5311 ;;		_scaleA10kPot
  5312 ;;		_scaleiA10kPot
  5313 ;;		_set_subdivision
  5314 ;;		_updateModulationArray
  5315 ;;		_updateSwitchBypass
  5316 ;;		_updateSwitchTap
  5317 ;;		_update_mode
  5318 ;;		_update_selectMode
  5319 ;; This function is called by:
  5320 ;;		Startup code after reset
  5321 ;; This function uses a non-reentrant model
  5322 ;;
  5323                           
  5324                           
  5325                           ;psect for function _main
  5326  0376                     _main:	
  5327                           
  5328                           ;main.c: 70: LATBbits.LATB5 = 0;
  5329                           
  5330                           ;incstack = 0
  5331                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5332  0376  0022               	movlb	2	; select bank2
  5333  0377  128D               	bcf	13,5	;volatile
  5334                           
  5335                           ;main.c: 71: calcCosArray();
  5336  0378  31A7  277F  3183   	fcall	_calcCosArray
  5337                           
  5338                           ;main.c: 79: USARTInit(31250);
  5339  037B  3012               	movlw	18
  5340  037C  0021               	movlb	1	; select bank1
  5341  037D  00A0               	movwf	USARTInit@baud_rate^(0+128)
  5342  037E  307A               	movlw	122
  5343  037F  00A1               	movwf	(USARTInit@baud_rate^(0+128)+1)
  5344  0380  31A2  229F  3183   	fcall	_USARTInit
  5345                           
  5346                           ;main.c: 80: ConfigureOscillator();
  5347  0383  31AC  24DB  3183   	fcall	_ConfigureOscillator
  5348                           
  5349                           ;main.c: 81: InitApp();
  5350  0386  31AF  2732  3183   	fcall	_InitApp
  5351                           
  5352                           ;main.c: 83: PORTEbits.RE0 = 1;
  5353  0389  0020               	movlb	0	; select bank0
  5354  038A  1410               	bsf	16,0	;volatile
  5355                           
  5356                           ;main.c: 84: PORTEbits.RE1 = 1;
  5357  038B  1490               	bsf	16,1	;volatile
  5358                           
  5359                           ;main.c: 85: PORTDbits.RD6 = 1;
  5360  038C  170F               	bsf	15,6	;volatile
  5361                           
  5362                           ;main.c: 86: PORTDbits.RD5 = 1;
  5363  038D  168F               	bsf	15,5	;volatile
  5364                           
  5365                           ;main.c: 87: PORTCbits.RC0 = 1;
  5366  038E  140E               	bsf	14,0	;volatile
  5367                           
  5368                           ;main.c: 88: PORTDbits.RD7 = 1;
  5369  038F  178F               	bsf	15,7	;volatile
  5370                           
  5371                           ;main.c: 92: InitializeTaps();
  5372  0390  3198  2000  3183   	fcall	_InitializeTaps
  5373                           
  5374                           ;main.c: 93: initSwitchBypass();
  5375  0393  31AD  2517  3183   	fcall	_initSwitchBypass
  5376                           
  5377                           ;main.c: 96: ReadSavedSettings();
  5378  0396  31A6  268D  3183   	fcall	_ReadSavedSettings
  5379                           
  5380                           ;main.c: 97: LATBbits.LATB5 = 0;
  5381  0399  0022               	movlb	2	; select bank2
  5382  039A  128D               	bcf	13,5	;volatile
  5383  039B                     l9316:	
  5384                           ;main.c: 98: while (1) {
  5385                           
  5386                           
  5387                           ;main.c: 101: update_mode();
  5388  039B  31AF  27C8  3183   	fcall	_update_mode
  5389                           
  5390                           ;main.c: 102: update_selectMode();
  5391  039E  31A5  255D  3183   	fcall	_update_selectMode
  5392                           
  5393                           ;main.c: 105: updateSwitchBypass();
  5394  03A1  3192  2241  3183   	fcall	_updateSwitchBypass
  5395                           
  5396                           ;main.c: 106: if (presetSaveMode != 1) {
  5397  03A4  0020               	movlb	0	; select bank0
  5398  03A5  035F               	decf	_presetSaveMode,w
  5399  03A6  1903               	btfsc	3,2
  5400  03A7  2BAB               	goto	l9326
  5401                           
  5402                           ;main.c: 107: updateSwitchTap();
  5403  03A8  318B  23D2  3183   	fcall	_updateSwitchTap
  5404  03AB                     l9326:	
  5405                           
  5406                           ;main.c: 108: }
  5407                           ;main.c: 110: if (presetSaveMode != 1 && mode2_state != presetModeCnst) {
  5408  03AB  0020               	movlb	0	; select bank0
  5409  03AC  035F               	decf	_presetSaveMode,w
  5410  03AD  1903               	btfsc	3,2
  5411  03AE  2BBA               	goto	l9332
  5412  03AF  085E               	movf	_mode2_state,w
  5413  03B0  0023               	movlb	3	; select bank3
  5414  03B1  0665               	xorwf	_presetModeCnst^(0+384),w
  5415  03B2  1903               	skipnz
  5416  03B3  2BBA               	goto	l9332
  5417                           
  5418                           ;main.c: 111: read_bottom_tactile();
  5419  03B4  31A3  232B  3183   	fcall	_read_bottom_tactile
  5420                           
  5421                           ;main.c: 112: read_top_tactile();
  5422  03B7  31A3  2375  3183   	fcall	_read_top_tactile
  5423  03BA                     l9332:	
  5424                           
  5425                           ;main.c: 113: }
  5426                           ;main.c: 116: knob_1_pos = adc_convert(0);
  5427  03BA  3000               	movlw	0
  5428  03BB  31AD  2538  3183   	fcall	_adc_convert
  5429  03BE  0021               	movlb	1	; select bank1
  5430  03BF  0821               	movf	(?_adc_convert+1)^(0+128),w
  5431  03C0  0023               	movlb	3	; select bank3
  5432  03C1  00AD               	movwf	(_knob_1_pos+1)^(0+384)
  5433  03C2  0021               	movlb	1	; select bank1
  5434  03C3  0820               	movf	?_adc_convert^(0+128),w
  5435  03C4  0023               	movlb	3	; select bank3
  5436  03C5  00AC               	movwf	_knob_1_pos^(0+384)
  5437                           
  5438                           ;main.c: 117: knob_2_pos = adc_convert(1);
  5439  03C6  3001               	movlw	1
  5440  03C7  31AD  2538  3183   	fcall	_adc_convert
  5441  03CA  0021               	movlb	1	; select bank1
  5442  03CB  0821               	movf	(?_adc_convert+1)^(0+128),w
  5443  03CC  0023               	movlb	3	; select bank3
  5444  03CD  00AF               	movwf	(_knob_2_pos+1)^(0+384)
  5445  03CE  0021               	movlb	1	; select bank1
  5446  03CF  0820               	movf	?_adc_convert^(0+128),w
  5447  03D0  0023               	movlb	3	; select bank3
  5448  03D1  00AE               	movwf	_knob_2_pos^(0+384)
  5449                           
  5450                           ;main.c: 118: knob_3_pos = adc_convert(2);
  5451  03D2  3002               	movlw	2
  5452  03D3  31AD  2538  3183   	fcall	_adc_convert
  5453  03D6  0021               	movlb	1	; select bank1
  5454  03D7  0821               	movf	(?_adc_convert+1)^(0+128),w
  5455  03D8  0023               	movlb	3	; select bank3
  5456  03D9  00B1               	movwf	(_knob_3_pos+1)^(0+384)
  5457  03DA  0021               	movlb	1	; select bank1
  5458  03DB  0820               	movf	?_adc_convert^(0+128),w
  5459  03DC  0023               	movlb	3	; select bank3
  5460  03DD  00B0               	movwf	_knob_3_pos^(0+384)
  5461                           
  5462                           ;main.c: 119: knob_4_pos = adc_convert(3);
  5463  03DE  3003               	movlw	3
  5464  03DF  31AD  2538  3183   	fcall	_adc_convert
  5465  03E2  0021               	movlb	1	; select bank1
  5466  03E3  0821               	movf	(?_adc_convert+1)^(0+128),w
  5467  03E4  0023               	movlb	3	; select bank3
  5468  03E5  00B3               	movwf	(_knob_4_pos+1)^(0+384)
  5469  03E6  0021               	movlb	1	; select bank1
  5470  03E7  0820               	movf	?_adc_convert^(0+128),w
  5471  03E8  0023               	movlb	3	; select bank3
  5472  03E9  00B2               	movwf	_knob_4_pos^(0+384)
  5473                           
  5474                           ;main.c: 120: knob_5_pos = adc_convert(4);
  5475  03EA  3004               	movlw	4
  5476  03EB  31AD  2538  3183   	fcall	_adc_convert
  5477  03EE  0021               	movlb	1	; select bank1
  5478  03EF  0821               	movf	(?_adc_convert+1)^(0+128),w
  5479  03F0  0023               	movlb	3	; select bank3
  5480  03F1  00B5               	movwf	(_knob_5_pos+1)^(0+384)
  5481  03F2  0021               	movlb	1	; select bank1
  5482  03F3  0820               	movf	?_adc_convert^(0+128),w
  5483  03F4  0023               	movlb	3	; select bank3
  5484  03F5  00B4               	movwf	_knob_5_pos^(0+384)
  5485                           
  5486                           ;main.c: 124: if ((knob_1_pos - knob1_prev) >= 4 || (knob_1_pos - knob1_prev) <= -4) {
  5487  03F6  094D               	comf	_knob1_prev^(0+384),w	;volatile
  5488  03F7  0024               	movlb	4	; select bank4
  5489  03F8  00DE               	movwf	??_main^(0+512)
  5490  03F9  0023               	movlb	3	; select bank3
  5491  03FA  094E               	comf	(_knob1_prev+1)^(0+384),w	;volatile
  5492  03FB  0024               	movlb	4	; select bank4
  5493  03FC  00DF               	movwf	(??_main^(0+512)+1)
  5494  03FD  0ADE               	incf	??_main^(0+512),f
  5495  03FE  1903               	skipnz
  5496  03FF  0ADF               	incf	(??_main^(0+512)+1),f
  5497  0400  0023               	movlb	3	; select bank3
  5498  0401  082C               	movf	_knob_1_pos^(0+384),w
  5499  0402  0024               	movlb	4	; select bank4
  5500  0403  075E               	addwf	??_main^(0+512),w
  5501  0404  00E0               	movwf	(??_main+2)^(0+512)
  5502  0405  0023               	movlb	3	; select bank3
  5503  0406  082D               	movf	(_knob_1_pos+1)^(0+384),w
  5504  0407  0024               	movlb	4	; select bank4
  5505  0408  3D5F               	addwfc	(??_main+1)^(0+512),w
  5506  0409  00E1               	movwf	(??_main+3)^(0+512)
  5507  040A  0861               	movf	(??_main+3)^(0+512),w
  5508  040B  3A80               	xorlw	128
  5509  040C  00E2               	movwf	(??_main+4)^(0+512)
  5510  040D  3080               	movlw	128
  5511  040E  0262               	subwf	(??_main+4)^(0+512),w
  5512  040F  1D03               	skipz
  5513  0410  2C13               	goto	u10325
  5514  0411  3004               	movlw	4
  5515  0412  0260               	subwf	(??_main+2)^(0+512),w
  5516  0413                     u10325:	
  5517  0413  1803               	skipnc
  5518  0414  2C35               	goto	l9346
  5519  0415  0023               	movlb	3	; select bank3
  5520  0416  094D               	comf	_knob1_prev^(0+384),w	;volatile
  5521  0417  0024               	movlb	4	; select bank4
  5522  0418  00DE               	movwf	??_main^(0+512)
  5523  0419  0023               	movlb	3	; select bank3
  5524  041A  094E               	comf	(_knob1_prev+1)^(0+384),w	;volatile
  5525  041B  0024               	movlb	4	; select bank4
  5526  041C  00DF               	movwf	(??_main^(0+512)+1)
  5527  041D  0ADE               	incf	??_main^(0+512),f
  5528  041E  1903               	skipnz
  5529  041F  0ADF               	incf	(??_main^(0+512)+1),f
  5530  0420  0023               	movlb	3	; select bank3
  5531  0421  082C               	movf	_knob_1_pos^(0+384),w
  5532  0422  0024               	movlb	4	; select bank4
  5533  0423  075E               	addwf	??_main^(0+512),w
  5534  0424  00E0               	movwf	(??_main+2)^(0+512)
  5535  0425  0023               	movlb	3	; select bank3
  5536  0426  082D               	movf	(_knob_1_pos+1)^(0+384),w
  5537  0427  0024               	movlb	4	; select bank4
  5538  0428  3D5F               	addwfc	(??_main+1)^(0+512),w
  5539  0429  00E1               	movwf	(??_main+3)^(0+512)
  5540  042A  0861               	movf	(??_main+3)^(0+512),w
  5541  042B  3A80               	xorlw	128
  5542  042C  00E2               	movwf	(??_main+4)^(0+512)
  5543  042D  307F               	movlw	127
  5544  042E  0262               	subwf	(??_main+4)^(0+512),w
  5545  042F  1D03               	skipz
  5546  0430  2C33               	goto	u10335
  5547  0431  30FD               	movlw	253
  5548  0432  0260               	subwf	(??_main+2)^(0+512),w
  5549  0433                     u10335:	
  5550  0433  1803               	skipnc
  5551  0434  2C93               	goto	l9356
  5552  0435                     l9346:	
  5553                           
  5554                           ;main.c: 125: knob1_prev = knob_1_pos;
  5555  0435  0023               	movlb	3	; select bank3
  5556  0436  082D               	movf	(_knob_1_pos+1)^(0+384),w
  5557  0437  00CE               	movwf	(_knob1_prev+1)^(0+384)	;volatile
  5558  0438  082C               	movf	_knob_1_pos^(0+384),w
  5559  0439  00CD               	movwf	_knob1_prev^(0+384)	;volatile
  5560                           
  5561                           ;main.c: 126: CCPR4 = scaleA10kPot(knob1_prev);
  5562  043A  084E               	movf	(_knob1_prev+1)^(0+384),w	;volatile
  5563  043B  0021               	movlb	1	; select bank1
  5564  043C  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5565  043D  0023               	movlb	3	; select bank3
  5566  043E  084D               	movf	_knob1_prev^(0+384),w	;volatile
  5567  043F  0021               	movlb	1	; select bank1
  5568  0440  00A8               	movwf	___awtoft@c^(0+128)
  5569  0441  31AE  263A  3183   	fcall	___awtoft
  5570  0444  0021               	movlb	1	; select bank1
  5571  0445  0828               	movf	?___awtoft^(0+128),w
  5572  0446  0025               	movlb	5	; select bank5
  5573  0447  00CC               	movwf	_main$2839^(0+640)
  5574  0448  0021               	movlb	1	; select bank1
  5575  0449  0829               	movf	(?___awtoft+1)^(0+128),w
  5576  044A  0025               	movlb	5	; select bank5
  5577  044B  00CD               	movwf	(_main$2839+1)^(0+640)
  5578  044C  0021               	movlb	1	; select bank1
  5579  044D  082A               	movf	(?___awtoft+2)^(0+128),w
  5580  044E  0025               	movlb	5	; select bank5
  5581  044F  00CE               	movwf	(_main$2839+2)^(0+640)
  5582                           
  5583                           ;main.c: 126: CCPR4 = scaleA10kPot(knob1_prev);
  5584  0450  084C               	movf	_main$2839^(0+640),w
  5585  0451  0022               	movlb	2	; select bank2
  5586  0452  00E7               	movwf	scaleA10kPot@input^(0+256)
  5587  0453  0025               	movlb	5	; select bank5
  5588  0454  084D               	movf	(_main$2839+1)^(0+640),w
  5589  0455  0022               	movlb	2	; select bank2
  5590  0456  00E8               	movwf	(scaleA10kPot@input+1)^(0+256)
  5591  0457  0025               	movlb	5	; select bank5
  5592  0458  084E               	movf	(_main$2839+2)^(0+640),w
  5593  0459  0022               	movlb	2	; select bank2
  5594  045A  00E9               	movwf	(scaleA10kPot@input+2)^(0+256)
  5595  045B  319B  234C  3183   	fcall	_scaleA10kPot
  5596  045E  0022               	movlb	2	; select bank2
  5597  045F  0868               	movf	(?_scaleA10kPot+1)^(0+256),w
  5598  0460  0026               	movlb	6	; select bank6
  5599  0461  0099               	movwf	25	;volatile
  5600  0462  0022               	movlb	2	; select bank2
  5601  0463  0867               	movf	?_scaleA10kPot^(0+256),w
  5602  0464  0026               	movlb	6	; select bank6
  5603  0465  0098               	movwf	24	;volatile
  5604                           
  5605                           ;main.c: 127: CCPR5 = scaleiA10kPot(knob1_prev);
  5606  0466  0023               	movlb	3	; select bank3
  5607  0467  084E               	movf	(_knob1_prev+1)^(0+384),w	;volatile
  5608  0468  0021               	movlb	1	; select bank1
  5609  0469  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5610  046A  0023               	movlb	3	; select bank3
  5611  046B  084D               	movf	_knob1_prev^(0+384),w	;volatile
  5612  046C  0021               	movlb	1	; select bank1
  5613  046D  00A8               	movwf	___awtoft@c^(0+128)
  5614  046E  31AE  263A  3183   	fcall	___awtoft
  5615  0471  0021               	movlb	1	; select bank1
  5616  0472  0828               	movf	?___awtoft^(0+128),w
  5617  0473  0025               	movlb	5	; select bank5
  5618  0474  00CF               	movwf	_main$2840^(0+640)
  5619  0475  0021               	movlb	1	; select bank1
  5620  0476  0829               	movf	(?___awtoft+1)^(0+128),w
  5621  0477  0025               	movlb	5	; select bank5
  5622  0478  00D0               	movwf	(_main$2840+1)^(0+640)
  5623  0479  0021               	movlb	1	; select bank1
  5624  047A  082A               	movf	(?___awtoft+2)^(0+128),w
  5625  047B  0025               	movlb	5	; select bank5
  5626  047C  00D1               	movwf	(_main$2840+2)^(0+640)
  5627                           
  5628                           ;main.c: 127: CCPR5 = scaleiA10kPot(knob1_prev);
  5629  047D  084F               	movf	_main$2840^(0+640),w
  5630  047E  0022               	movlb	2	; select bank2
  5631  047F  00E7               	movwf	scaleiA10kPot@input^(0+256)
  5632  0480  0025               	movlb	5	; select bank5
  5633  0481  0850               	movf	(_main$2840+1)^(0+640),w
  5634  0482  0022               	movlb	2	; select bank2
  5635  0483  00E8               	movwf	(scaleiA10kPot@input+1)^(0+256)
  5636  0484  0025               	movlb	5	; select bank5
  5637  0485  0851               	movf	(_main$2840+2)^(0+640),w
  5638  0486  0022               	movlb	2	; select bank2
  5639  0487  00E9               	movwf	(scaleiA10kPot@input+2)^(0+256)
  5640  0488  319D  251D  3183   	fcall	_scaleiA10kPot
  5641  048B  0022               	movlb	2	; select bank2
  5642  048C  0868               	movf	(?_scaleiA10kPot+1)^(0+256),w
  5643  048D  0026               	movlb	6	; select bank6
  5644  048E  009D               	movwf	29	;volatile
  5645  048F  0022               	movlb	2	; select bank2
  5646  0490  0867               	movf	?_scaleiA10kPot^(0+256),w
  5647  0491  0026               	movlb	6	; select bank6
  5648  0492  009C               	movwf	28	;volatile
  5649  0493                     l9356:	
  5650                           
  5651                           ;main.c: 129: }
  5652                           ;main.c: 133: if (knob_2_pos - knob2_prev >= 4 || knob_2_pos - knob2_prev <= -4) {
  5653  0493  0023               	movlb	3	; select bank3
  5654  0494  094F               	comf	_knob2_prev^(0+384),w	;volatile
  5655  0495  0024               	movlb	4	; select bank4
  5656  0496  00DE               	movwf	??_main^(0+512)
  5657  0497  0023               	movlb	3	; select bank3
  5658  0498  0950               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5659  0499  0024               	movlb	4	; select bank4
  5660  049A  00DF               	movwf	(??_main^(0+512)+1)
  5661  049B  0ADE               	incf	??_main^(0+512),f
  5662  049C  1903               	skipnz
  5663  049D  0ADF               	incf	(??_main^(0+512)+1),f
  5664  049E  0023               	movlb	3	; select bank3
  5665  049F  082E               	movf	_knob_2_pos^(0+384),w
  5666  04A0  0024               	movlb	4	; select bank4
  5667  04A1  075E               	addwf	??_main^(0+512),w
  5668  04A2  00E0               	movwf	(??_main+2)^(0+512)
  5669  04A3  0023               	movlb	3	; select bank3
  5670  04A4  082F               	movf	(_knob_2_pos+1)^(0+384),w
  5671  04A5  0024               	movlb	4	; select bank4
  5672  04A6  3D5F               	addwfc	(??_main+1)^(0+512),w
  5673  04A7  00E1               	movwf	(??_main+3)^(0+512)
  5674  04A8  0861               	movf	(??_main+3)^(0+512),w
  5675  04A9  3A80               	xorlw	128
  5676  04AA  00E2               	movwf	(??_main+4)^(0+512)
  5677  04AB  3080               	movlw	128
  5678  04AC  0262               	subwf	(??_main+4)^(0+512),w
  5679  04AD  1D03               	skipz
  5680  04AE  2CB1               	goto	u10345
  5681  04AF  3004               	movlw	4
  5682  04B0  0260               	subwf	(??_main+2)^(0+512),w
  5683  04B1                     u10345:	
  5684  04B1  1803               	skipnc
  5685  04B2  2CD3               	goto	l9360
  5686  04B3  0023               	movlb	3	; select bank3
  5687  04B4  094F               	comf	_knob2_prev^(0+384),w	;volatile
  5688  04B5  0024               	movlb	4	; select bank4
  5689  04B6  00DE               	movwf	??_main^(0+512)
  5690  04B7  0023               	movlb	3	; select bank3
  5691  04B8  0950               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5692  04B9  0024               	movlb	4	; select bank4
  5693  04BA  00DF               	movwf	(??_main^(0+512)+1)
  5694  04BB  0ADE               	incf	??_main^(0+512),f
  5695  04BC  1903               	skipnz
  5696  04BD  0ADF               	incf	(??_main^(0+512)+1),f
  5697  04BE  0023               	movlb	3	; select bank3
  5698  04BF  082E               	movf	_knob_2_pos^(0+384),w
  5699  04C0  0024               	movlb	4	; select bank4
  5700  04C1  075E               	addwf	??_main^(0+512),w
  5701  04C2  00E0               	movwf	(??_main+2)^(0+512)
  5702  04C3  0023               	movlb	3	; select bank3
  5703  04C4  082F               	movf	(_knob_2_pos+1)^(0+384),w
  5704  04C5  0024               	movlb	4	; select bank4
  5705  04C6  3D5F               	addwfc	(??_main+1)^(0+512),w
  5706  04C7  00E1               	movwf	(??_main+3)^(0+512)
  5707  04C8  0861               	movf	(??_main+3)^(0+512),w
  5708  04C9  3A80               	xorlw	128
  5709  04CA  00E2               	movwf	(??_main+4)^(0+512)
  5710  04CB  307F               	movlw	127
  5711  04CC  0262               	subwf	(??_main+4)^(0+512),w
  5712  04CD  1D03               	skipz
  5713  04CE  2CD1               	goto	u10355
  5714  04CF  30FD               	movlw	253
  5715  04D0  0260               	subwf	(??_main+2)^(0+512),w
  5716  04D1                     u10355:	
  5717  04D1  1803               	skipnc
  5718  04D2  2D49               	goto	l366
  5719  04D3                     l9360:	
  5720                           
  5721                           ;main.c: 134: knob2_prev = knob_2_pos;
  5722  04D3  0023               	movlb	3	; select bank3
  5723  04D4  082F               	movf	(_knob_2_pos+1)^(0+384),w
  5724  04D5  00D0               	movwf	(_knob2_prev+1)^(0+384)	;volatile
  5725  04D6  082E               	movf	_knob_2_pos^(0+384),w
  5726  04D7  00CF               	movwf	_knob2_prev^(0+384)	;volatile
  5727                           
  5728                           ;main.c: 135: CCPR1 = scaleA100kPot(1023-knob2_prev);
  5729  04D8  094F               	comf	_knob2_prev^(0+384),w	;volatile
  5730  04D9  0024               	movlb	4	; select bank4
  5731  04DA  00DE               	movwf	??_main^(0+512)
  5732  04DB  0023               	movlb	3	; select bank3
  5733  04DC  0950               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5734  04DD  0024               	movlb	4	; select bank4
  5735  04DE  00DF               	movwf	(??_main^(0+512)+1)
  5736  04DF  0ADE               	incf	??_main^(0+512),f
  5737  04E0  1903               	skipnz
  5738  04E1  0ADF               	incf	(??_main^(0+512)+1),f
  5739  04E2  085E               	movf	??_main^(0+512),w
  5740  04E3  3EFF               	addlw	255
  5741  04E4  0021               	movlb	1	; select bank1
  5742  04E5  00A8               	movwf	___awtoft@c^(0+128)
  5743  04E6  3003               	movlw	3
  5744  04E7  0024               	movlb	4	; select bank4
  5745  04E8  3D5F               	addwfc	(??_main+1)^(0+512),w
  5746  04E9  0021               	movlb	1	; select bank1
  5747  04EA  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5748  04EB  31AE  263A  3183   	fcall	___awtoft
  5749  04EE  0021               	movlb	1	; select bank1
  5750  04EF  0828               	movf	?___awtoft^(0+128),w
  5751  04F0  0025               	movlb	5	; select bank5
  5752  04F1  00D2               	movwf	_main$2841^(0+640)
  5753  04F2  0021               	movlb	1	; select bank1
  5754  04F3  0829               	movf	(?___awtoft+1)^(0+128),w
  5755  04F4  0025               	movlb	5	; select bank5
  5756  04F5  00D3               	movwf	(_main$2841+1)^(0+640)
  5757  04F6  0021               	movlb	1	; select bank1
  5758  04F7  082A               	movf	(?___awtoft+2)^(0+128),w
  5759  04F8  0025               	movlb	5	; select bank5
  5760  04F9  00D4               	movwf	(_main$2841+2)^(0+640)
  5761                           
  5762                           ;main.c: 135: CCPR1 = scaleA100kPot(1023-knob2_prev);
  5763  04FA  0852               	movf	_main$2841^(0+640),w
  5764  04FB  0022               	movlb	2	; select bank2
  5765  04FC  00E7               	movwf	scaleA100kPot@input^(0+256)
  5766  04FD  0025               	movlb	5	; select bank5
  5767  04FE  0853               	movf	(_main$2841+1)^(0+640),w
  5768  04FF  0022               	movlb	2	; select bank2
  5769  0500  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
  5770  0501  0025               	movlb	5	; select bank5
  5771  0502  0854               	movf	(_main$2841+2)^(0+640),w
  5772  0503  0022               	movlb	2	; select bank2
  5773  0504  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
  5774  0505  3199  212A  3183   	fcall	_scaleA100kPot
  5775  0508  0022               	movlb	2	; select bank2
  5776  0509  0868               	movf	(?_scaleA100kPot+1)^(0+256),w
  5777  050A  0025               	movlb	5	; select bank5
  5778  050B  0092               	movwf	18	;volatile
  5779  050C  0022               	movlb	2	; select bank2
  5780  050D  0867               	movf	?_scaleA100kPot^(0+256),w
  5781  050E  0025               	movlb	5	; select bank5
  5782  050F  0091               	movwf	17	;volatile
  5783                           
  5784                           ;main.c: 136: CCPR2 = scaleA100kPot(1023-knob2_prev);
  5785  0510  0023               	movlb	3	; select bank3
  5786  0511  094F               	comf	_knob2_prev^(0+384),w	;volatile
  5787  0512  0024               	movlb	4	; select bank4
  5788  0513  00DE               	movwf	??_main^(0+512)
  5789  0514  0023               	movlb	3	; select bank3
  5790  0515  0950               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5791  0516  0024               	movlb	4	; select bank4
  5792  0517  00DF               	movwf	(??_main^(0+512)+1)
  5793  0518  0ADE               	incf	??_main^(0+512),f
  5794  0519  1903               	skipnz
  5795  051A  0ADF               	incf	(??_main^(0+512)+1),f
  5796  051B  085E               	movf	??_main^(0+512),w
  5797  051C  3EFF               	addlw	255
  5798  051D  0021               	movlb	1	; select bank1
  5799  051E  00A8               	movwf	___awtoft@c^(0+128)
  5800  051F  3003               	movlw	3
  5801  0520  0024               	movlb	4	; select bank4
  5802  0521  3D5F               	addwfc	(??_main+1)^(0+512),w
  5803  0522  0021               	movlb	1	; select bank1
  5804  0523  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5805  0524  31AE  263A  3183   	fcall	___awtoft
  5806  0527  0021               	movlb	1	; select bank1
  5807  0528  0828               	movf	?___awtoft^(0+128),w
  5808  0529  0025               	movlb	5	; select bank5
  5809  052A  00D2               	movwf	_main$2841^(0+640)
  5810  052B  0021               	movlb	1	; select bank1
  5811  052C  0829               	movf	(?___awtoft+1)^(0+128),w
  5812  052D  0025               	movlb	5	; select bank5
  5813  052E  00D3               	movwf	(_main$2841+1)^(0+640)
  5814  052F  0021               	movlb	1	; select bank1
  5815  0530  082A               	movf	(?___awtoft+2)^(0+128),w
  5816  0531  0025               	movlb	5	; select bank5
  5817  0532  00D4               	movwf	(_main$2841+2)^(0+640)
  5818                           
  5819                           ;main.c: 136: CCPR2 = scaleA100kPot(1023-knob2_prev);
  5820  0533  0852               	movf	_main$2841^(0+640),w
  5821  0534  0022               	movlb	2	; select bank2
  5822  0535  00E7               	movwf	scaleA100kPot@input^(0+256)
  5823  0536  0025               	movlb	5	; select bank5
  5824  0537  0853               	movf	(_main$2841+1)^(0+640),w
  5825  0538  0022               	movlb	2	; select bank2
  5826  0539  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
  5827  053A  0025               	movlb	5	; select bank5
  5828  053B  0854               	movf	(_main$2841+2)^(0+640),w
  5829  053C  0022               	movlb	2	; select bank2
  5830  053D  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
  5831  053E  3199  212A  3183   	fcall	_scaleA100kPot
  5832  0541  0022               	movlb	2	; select bank2
  5833  0542  0868               	movf	(?_scaleA100kPot+1)^(0+256),w
  5834  0543  0025               	movlb	5	; select bank5
  5835  0544  0099               	movwf	25	;volatile
  5836  0545  0022               	movlb	2	; select bank2
  5837  0546  0867               	movf	?_scaleA100kPot^(0+256),w
  5838  0547  0025               	movlb	5	; select bank5
  5839  0548  0098               	movwf	24	;volatile
  5840  0549                     l366:	
  5841                           
  5842                           ;main.c: 137: }
  5843                           ;main.c: 147: oldSymmetry = symmetry;
  5844  0549  0023               	movlb	3	; select bank3
  5845  054A  085C               	movf	(_symmetry+1)^(0+384),w
  5846  054B  0024               	movlb	4	; select bank4
  5847  054C  00D8               	movwf	(_oldSymmetry+1)^(0+512)
  5848  054D  0023               	movlb	3	; select bank3
  5849  054E  085B               	movf	_symmetry^(0+384),w
  5850  054F  0024               	movlb	4	; select bank4
  5851  0550  00D7               	movwf	_oldSymmetry^(0+512)
  5852                           
  5853                           ;main.c: 148: if (knob_3_pos - knob3_prev >= 4 || knob_3_pos - knob3_prev <= -4) {
  5854  0551  0023               	movlb	3	; select bank3
  5855  0552  0951               	comf	_knob3_prev^(0+384),w	;volatile
  5856  0553  0024               	movlb	4	; select bank4
  5857  0554  00DE               	movwf	??_main^(0+512)
  5858  0555  0023               	movlb	3	; select bank3
  5859  0556  0952               	comf	(_knob3_prev+1)^(0+384),w	;volatile
  5860  0557  0024               	movlb	4	; select bank4
  5861  0558  00DF               	movwf	(??_main^(0+512)+1)
  5862  0559  0ADE               	incf	??_main^(0+512),f
  5863  055A  1903               	skipnz
  5864  055B  0ADF               	incf	(??_main^(0+512)+1),f
  5865  055C  0023               	movlb	3	; select bank3
  5866  055D  0830               	movf	_knob_3_pos^(0+384),w
  5867  055E  0024               	movlb	4	; select bank4
  5868  055F  075E               	addwf	??_main^(0+512),w
  5869  0560  00E0               	movwf	(??_main+2)^(0+512)
  5870  0561  0023               	movlb	3	; select bank3
  5871  0562  0831               	movf	(_knob_3_pos+1)^(0+384),w
  5872  0563  0024               	movlb	4	; select bank4
  5873  0564  3D5F               	addwfc	(??_main+1)^(0+512),w
  5874  0565  00E1               	movwf	(??_main+3)^(0+512)
  5875  0566  0861               	movf	(??_main+3)^(0+512),w
  5876  0567  3A80               	xorlw	128
  5877  0568  00E2               	movwf	(??_main+4)^(0+512)
  5878  0569  3080               	movlw	128
  5879  056A  0262               	subwf	(??_main+4)^(0+512),w
  5880  056B  1D03               	skipz
  5881  056C  2D6F               	goto	u10365
  5882  056D  3004               	movlw	4
  5883  056E  0260               	subwf	(??_main+2)^(0+512),w
  5884  056F                     u10365:	
  5885  056F  1803               	skipnc
  5886  0570  2D91               	goto	l9374
  5887  0571  0023               	movlb	3	; select bank3
  5888  0572  0951               	comf	_knob3_prev^(0+384),w	;volatile
  5889  0573  0024               	movlb	4	; select bank4
  5890  0574  00DE               	movwf	??_main^(0+512)
  5891  0575  0023               	movlb	3	; select bank3
  5892  0576  0952               	comf	(_knob3_prev+1)^(0+384),w	;volatile
  5893  0577  0024               	movlb	4	; select bank4
  5894  0578  00DF               	movwf	(??_main^(0+512)+1)
  5895  0579  0ADE               	incf	??_main^(0+512),f
  5896  057A  1903               	skipnz
  5897  057B  0ADF               	incf	(??_main^(0+512)+1),f
  5898  057C  0023               	movlb	3	; select bank3
  5899  057D  0830               	movf	_knob_3_pos^(0+384),w
  5900  057E  0024               	movlb	4	; select bank4
  5901  057F  075E               	addwf	??_main^(0+512),w
  5902  0580  00E0               	movwf	(??_main+2)^(0+512)
  5903  0581  0023               	movlb	3	; select bank3
  5904  0582  0831               	movf	(_knob_3_pos+1)^(0+384),w
  5905  0583  0024               	movlb	4	; select bank4
  5906  0584  3D5F               	addwfc	(??_main+1)^(0+512),w
  5907  0585  00E1               	movwf	(??_main+3)^(0+512)
  5908  0586  0861               	movf	(??_main+3)^(0+512),w
  5909  0587  3A80               	xorlw	128
  5910  0588  00E2               	movwf	(??_main+4)^(0+512)
  5911  0589  307F               	movlw	127
  5912  058A  0262               	subwf	(??_main+4)^(0+512),w
  5913  058B  1D03               	skipz
  5914  058C  2D8F               	goto	u10375
  5915  058D  30FD               	movlw	253
  5916  058E  0260               	subwf	(??_main+2)^(0+512),w
  5917  058F                     u10375:	
  5918  058F  1803               	skipnc
  5919  0590  2DFB               	goto	l9384
  5920  0591                     l9374:	
  5921                           
  5922                           ;main.c: 149: knob3_prev = knob_3_pos;
  5923  0591  0023               	movlb	3	; select bank3
  5924  0592  0831               	movf	(_knob_3_pos+1)^(0+384),w
  5925  0593  00D2               	movwf	(_knob3_prev+1)^(0+384)	;volatile
  5926  0594  0830               	movf	_knob_3_pos^(0+384),w
  5927  0595  00D1               	movwf	_knob3_prev^(0+384)	;volatile
  5928                           
  5929                           ;main.c: 150: symmetry = (int) map(knob3_prev, 0, 1023, 45, 315);
  5930  0596  3080               	movlw	128
  5931  0597  0021               	movlb	1	; select bank1
  5932  0598  00EA               	movwf	map@out_max^(0+128)
  5933  0599  309D               	movlw	157
  5934  059A  00EB               	movwf	(map@out_max+1)^(0+128)
  5935  059B  3043               	movlw	67
  5936  059C  00EC               	movwf	(map@out_max+2)^(0+128)
  5937  059D  3000               	movlw	0
  5938  059E  00E7               	movwf	map@out_min^(0+128)
  5939  059F  3034               	movlw	52
  5940  05A0  00E8               	movwf	(map@out_min+1)^(0+128)
  5941  05A1  3042               	movlw	66
  5942  05A2  00E9               	movwf	(map@out_min+2)^(0+128)
  5943  05A3  30C0               	movlw	192
  5944  05A4  00E4               	movwf	map@in_max^(0+128)
  5945  05A5  307F               	movlw	127
  5946  05A6  00E5               	movwf	(map@in_max+1)^(0+128)
  5947  05A7  3044               	movlw	68
  5948  05A8  00E6               	movwf	(map@in_max+2)^(0+128)
  5949  05A9  3000               	movlw	0
  5950  05AA  00E1               	movwf	map@in_min^(0+128)
  5951  05AB  3000               	movlw	0
  5952  05AC  00E2               	movwf	(map@in_min+1)^(0+128)
  5953  05AD  3000               	movlw	0
  5954  05AE  00E3               	movwf	(map@in_min+2)^(0+128)
  5955  05AF  0023               	movlb	3	; select bank3
  5956  05B0  0852               	movf	(_knob3_prev+1)^(0+384),w	;volatile
  5957  05B1  0021               	movlb	1	; select bank1
  5958  05B2  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5959  05B3  0023               	movlb	3	; select bank3
  5960  05B4  0851               	movf	_knob3_prev^(0+384),w	;volatile
  5961  05B5  0021               	movlb	1	; select bank1
  5962  05B6  00A8               	movwf	___awtoft@c^(0+128)
  5963  05B7  31AE  263A  3183   	fcall	___awtoft
  5964  05BA  0021               	movlb	1	; select bank1
  5965  05BB  0828               	movf	?___awtoft^(0+128),w
  5966  05BC  00DE               	movwf	map@x^(0+128)
  5967  05BD  0829               	movf	(?___awtoft+1)^(0+128),w
  5968  05BE  00DF               	movwf	(map@x+1)^(0+128)
  5969  05BF  082A               	movf	(?___awtoft+2)^(0+128),w
  5970  05C0  00E0               	movwf	(map@x+2)^(0+128)
  5971  05C1  319A  2236  3183   	fcall	_map
  5972  05C4  0021               	movlb	1	; select bank1
  5973  05C5  085E               	movf	?_map^(0+128),w
  5974  05C6  0022               	movlb	2	; select bank2
  5975  05C7  00A0               	movwf	___fttol@f1^(0+256)
  5976  05C8  0021               	movlb	1	; select bank1
  5977  05C9  085F               	movf	(?_map+1)^(0+128),w
  5978  05CA  0022               	movlb	2	; select bank2
  5979  05CB  00A1               	movwf	(___fttol@f1+1)^(0+256)
  5980  05CC  0021               	movlb	1	; select bank1
  5981  05CD  0860               	movf	(?_map+2)^(0+128),w
  5982  05CE  0022               	movlb	2	; select bank2
  5983  05CF  00A2               	movwf	(___fttol@f1+2)^(0+256)
  5984  05D0  3199  21AF  3183   	fcall	___fttol
  5985  05D3  0022               	movlb	2	; select bank2
  5986  05D4  0821               	movf	(?___fttol^(0+256)+1),w
  5987  05D5  0023               	movlb	3	; select bank3
  5988  05D6  00DC               	movwf	(_symmetry+1)^(0+384)
  5989  05D7  0022               	movlb	2	; select bank2
  5990  05D8  0820               	movf	?___fttol^(0+256),w
  5991  05D9  0023               	movlb	3	; select bank3
  5992  05DA  00DB               	movwf	_symmetry^(0+384)
  5993                           
  5994                           ;main.c: 152: if (symmetry > 174 && symmetry < 185) {
  5995  05DB  085C               	movf	(_symmetry+1)^(0+384),w
  5996  05DC  3A80               	xorlw	128
  5997  05DD  0024               	movlb	4	; select bank4
  5998  05DE  00DE               	movwf	??_main^(0+512)
  5999  05DF  3080               	movlw	128
  6000  05E0  025E               	subwf	??_main^(0+512),w
  6001  05E1  1D03               	skipz
  6002  05E2  2DE6               	goto	u10385
  6003  05E3  30AF               	movlw	175
  6004  05E4  0023               	movlb	3	; select bank3
  6005  05E5  025B               	subwf	_symmetry^(0+384),w
  6006  05E6                     u10385:	
  6007  05E6  1C03               	skipc
  6008  05E7  2DF9               	goto	l372
  6009  05E8  0023               	movlb	3	; select bank3
  6010  05E9  085C               	movf	(_symmetry+1)^(0+384),w
  6011  05EA  3A80               	xorlw	128
  6012  05EB  0024               	movlb	4	; select bank4
  6013  05EC  00DE               	movwf	??_main^(0+512)
  6014  05ED  3080               	movlw	128
  6015  05EE  025E               	subwf	??_main^(0+512),w
  6016  05EF  1D03               	skipz
  6017  05F0  2DF4               	goto	u10395
  6018  05F1  30B9               	movlw	185
  6019  05F2  0023               	movlb	3	; select bank3
  6020  05F3  025B               	subwf	_symmetry^(0+384),w
  6021  05F4                     u10395:	
  6022  05F4  1803               	skipnc
  6023  05F5  2DF9               	goto	l372
  6024                           
  6025                           ;main.c: 153: LATBbits.LATB1 = 1;
  6026  05F6  0022               	movlb	2	; select bank2
  6027  05F7  148D               	bsf	13,1	;volatile
  6028                           
  6029                           ;main.c: 154: } else {
  6030  05F8  2DFB               	goto	l9384
  6031  05F9                     l372:	
  6032                           
  6033                           ;main.c: 155: LATBbits.LATB1 = 0;
  6034  05F9  0022               	movlb	2	; select bank2
  6035  05FA  108D               	bcf	13,1	;volatile
  6036  05FB                     l9384:	
  6037                           
  6038                           ;main.c: 156: }
  6039                           ;main.c: 157: }
  6040                           ;main.c: 159: if (oldSymmetry - symmetry >= 2 || oldSymmetry - symmetry <= -2) {
  6041  05FB  0023               	movlb	3	; select bank3
  6042  05FC  095B               	comf	_symmetry^(0+384),w
  6043  05FD  0024               	movlb	4	; select bank4
  6044  05FE  00DE               	movwf	??_main^(0+512)
  6045  05FF  0023               	movlb	3	; select bank3
  6046  0600  095C               	comf	(_symmetry+1)^(0+384),w
  6047  0601  0024               	movlb	4	; select bank4
  6048  0602  00DF               	movwf	(??_main^(0+512)+1)
  6049  0603  0ADE               	incf	??_main^(0+512),f
  6050  0604  1903               	skipnz
  6051  0605  0ADF               	incf	(??_main^(0+512)+1),f
  6052  0606  0857               	movf	_oldSymmetry^(0+512),w
  6053  0607  075E               	addwf	??_main^(0+512),w
  6054  0608  00E0               	movwf	(??_main+2)^(0+512)
  6055  0609  0858               	movf	(_oldSymmetry+1)^(0+512),w
  6056  060A  3D5F               	addwfc	(??_main+1)^(0+512),w
  6057  060B  00E1               	movwf	(??_main+3)^(0+512)
  6058  060C  0861               	movf	(??_main+3)^(0+512),w
  6059  060D  3A80               	xorlw	128
  6060  060E  00E2               	movwf	(??_main+4)^(0+512)
  6061  060F  3080               	movlw	128
  6062  0610  0262               	subwf	(??_main+4)^(0+512),w
  6063  0611  1D03               	skipz
  6064  0612  2E15               	goto	u10405
  6065  0613  3002               	movlw	2
  6066  0614  0260               	subwf	(??_main+2)^(0+512),w
  6067  0615                     u10405:	
  6068  0615  1803               	skipnc
  6069  0616  2E33               	goto	l376
  6070  0617  0023               	movlb	3	; select bank3
  6071  0618  095B               	comf	_symmetry^(0+384),w
  6072  0619  0024               	movlb	4	; select bank4
  6073  061A  00DE               	movwf	??_main^(0+512)
  6074  061B  0023               	movlb	3	; select bank3
  6075  061C  095C               	comf	(_symmetry+1)^(0+384),w
  6076  061D  0024               	movlb	4	; select bank4
  6077  061E  00DF               	movwf	(??_main^(0+512)+1)
  6078  061F  0ADE               	incf	??_main^(0+512),f
  6079  0620  1903               	skipnz
  6080  0621  0ADF               	incf	(??_main^(0+512)+1),f
  6081  0622  0857               	movf	_oldSymmetry^(0+512),w
  6082  0623  075E               	addwf	??_main^(0+512),w
  6083  0624  00E0               	movwf	(??_main+2)^(0+512)
  6084  0625  0858               	movf	(_oldSymmetry+1)^(0+512),w
  6085  0626  3D5F               	addwfc	(??_main+1)^(0+512),w
  6086  0627  00E1               	movwf	(??_main+3)^(0+512)
  6087  0628  0861               	movf	(??_main+3)^(0+512),w
  6088  0629  3A80               	xorlw	128
  6089  062A  00E2               	movwf	(??_main+4)^(0+512)
  6090  062B  307F               	movlw	127
  6091  062C  0262               	subwf	(??_main+4)^(0+512),w
  6092  062D  1D03               	skipz
  6093  062E  2E31               	goto	u10415
  6094  062F  30FF               	movlw	255
  6095  0630  0260               	subwf	(??_main+2)^(0+512),w
  6096  0631                     u10415:	
  6097  0631  1803               	skipnc
  6098  0632  2E36               	goto	l9388
  6099  0633                     l376:	
  6100                           
  6101                           ;main.c: 161: modulation_changed = 1;
  6102  0633  0023               	movlb	3	; select bank3
  6103  0634  01C7               	clrf	_modulation_changed^(0+384)
  6104  0635  0AC7               	incf	_modulation_changed^(0+384),f
  6105  0636                     l9388:	
  6106                           
  6107                           ;main.c: 162: }
  6108                           ;main.c: 171: oldBaseTime = baseline_mod_time;
  6109  0636  0020               	movlb	0	; select bank0
  6110  0637  0841               	movf	_baseline_mod_time+1,w	;volatile
  6111  0638  0024               	movlb	4	; select bank4
  6112  0639  00D6               	movwf	(_oldBaseTime+1)^(0+512)
  6113  063A  0020               	movlb	0	; select bank0
  6114  063B  0840               	movf	_baseline_mod_time,w	;volatile
  6115  063C  0024               	movlb	4	; select bank4
  6116  063D  00D5               	movwf	_oldBaseTime^(0+512)
  6117                           
  6118                           ;main.c: 172: if (knob_4_pos - knob4_prev >= 4 || knob_4_pos - knob4_prev <= -4) {
  6119  063E  0023               	movlb	3	; select bank3
  6120  063F  0953               	comf	_knob4_prev^(0+384),w	;volatile
  6121  0640  0024               	movlb	4	; select bank4
  6122  0641  00DE               	movwf	??_main^(0+512)
  6123  0642  0023               	movlb	3	; select bank3
  6124  0643  0954               	comf	(_knob4_prev+1)^(0+384),w	;volatile
  6125  0644  0024               	movlb	4	; select bank4
  6126  0645  00DF               	movwf	(??_main^(0+512)+1)
  6127  0646  0ADE               	incf	??_main^(0+512),f
  6128  0647  1903               	skipnz
  6129  0648  0ADF               	incf	(??_main^(0+512)+1),f
  6130  0649  0023               	movlb	3	; select bank3
  6131  064A  0832               	movf	_knob_4_pos^(0+384),w
  6132  064B  0024               	movlb	4	; select bank4
  6133  064C  075E               	addwf	??_main^(0+512),w
  6134  064D  00E0               	movwf	(??_main+2)^(0+512)
  6135  064E  0023               	movlb	3	; select bank3
  6136  064F  0833               	movf	(_knob_4_pos+1)^(0+384),w
  6137  0650  0024               	movlb	4	; select bank4
  6138  0651  3D5F               	addwfc	(??_main+1)^(0+512),w
  6139  0652  00E1               	movwf	(??_main+3)^(0+512)
  6140  0653  0861               	movf	(??_main+3)^(0+512),w
  6141  0654  3A80               	xorlw	128
  6142  0655  00E2               	movwf	(??_main+4)^(0+512)
  6143  0656  3080               	movlw	128
  6144  0657  0262               	subwf	(??_main+4)^(0+512),w
  6145  0658  1D03               	skipz
  6146  0659  2E5C               	goto	u10425
  6147  065A  3004               	movlw	4
  6148  065B  0260               	subwf	(??_main+2)^(0+512),w
  6149  065C                     u10425:	
  6150  065C  1803               	skipnc
  6151  065D  2E7E               	goto	l9394
  6152  065E  0023               	movlb	3	; select bank3
  6153  065F  0953               	comf	_knob4_prev^(0+384),w	;volatile
  6154  0660  0024               	movlb	4	; select bank4
  6155  0661  00DE               	movwf	??_main^(0+512)
  6156  0662  0023               	movlb	3	; select bank3
  6157  0663  0954               	comf	(_knob4_prev+1)^(0+384),w	;volatile
  6158  0664  0024               	movlb	4	; select bank4
  6159  0665  00DF               	movwf	(??_main^(0+512)+1)
  6160  0666  0ADE               	incf	??_main^(0+512),f
  6161  0667  1903               	skipnz
  6162  0668  0ADF               	incf	(??_main^(0+512)+1),f
  6163  0669  0023               	movlb	3	; select bank3
  6164  066A  0832               	movf	_knob_4_pos^(0+384),w
  6165  066B  0024               	movlb	4	; select bank4
  6166  066C  075E               	addwf	??_main^(0+512),w
  6167  066D  00E0               	movwf	(??_main+2)^(0+512)
  6168  066E  0023               	movlb	3	; select bank3
  6169  066F  0833               	movf	(_knob_4_pos+1)^(0+384),w
  6170  0670  0024               	movlb	4	; select bank4
  6171  0671  3D5F               	addwfc	(??_main+1)^(0+512),w
  6172  0672  00E1               	movwf	(??_main+3)^(0+512)
  6173  0673  0861               	movf	(??_main+3)^(0+512),w
  6174  0674  3A80               	xorlw	128
  6175  0675  00E2               	movwf	(??_main+4)^(0+512)
  6176  0676  307F               	movlw	127
  6177  0677  0262               	subwf	(??_main+4)^(0+512),w
  6178  0678  1D03               	skipz
  6179  0679  2E7C               	goto	u10435
  6180  067A  30FD               	movlw	253
  6181  067B  0260               	subwf	(??_main+2)^(0+512),w
  6182  067C                     u10435:	
  6183  067C  1803               	skipnc
  6184  067D  2ECD               	goto	l9398
  6185  067E                     l9394:	
  6186                           
  6187                           ;main.c: 173: knob4_prev = knob_4_pos;
  6188  067E  0023               	movlb	3	; select bank3
  6189  067F  0833               	movf	(_knob_4_pos+1)^(0+384),w
  6190  0680  00D4               	movwf	(_knob4_prev+1)^(0+384)	;volatile
  6191  0681  0832               	movf	_knob_4_pos^(0+384),w
  6192  0682  00D3               	movwf	_knob4_prev^(0+384)	;volatile
  6193                           
  6194                           ;main.c: 174: baseline_mod_time = (int)map(knob4_prev, 0, 1023, 180, 2820);
  6195  0683  3040               	movlw	64
  6196  0684  0021               	movlb	1	; select bank1
  6197  0685  00EA               	movwf	map@out_max^(0+128)
  6198  0686  3030               	movlw	48
  6199  0687  00EB               	movwf	(map@out_max+1)^(0+128)
  6200  0688  3045               	movlw	69
  6201  0689  00EC               	movwf	(map@out_max+2)^(0+128)
  6202  068A  3000               	movlw	0
  6203  068B  00E7               	movwf	map@out_min^(0+128)
  6204  068C  3034               	movlw	52
  6205  068D  00E8               	movwf	(map@out_min+1)^(0+128)
  6206  068E  3043               	movlw	67
  6207  068F  00E9               	movwf	(map@out_min+2)^(0+128)
  6208  0690  30C0               	movlw	192
  6209  0691  00E4               	movwf	map@in_max^(0+128)
  6210  0692  307F               	movlw	127
  6211  0693  00E5               	movwf	(map@in_max+1)^(0+128)
  6212  0694  3044               	movlw	68
  6213  0695  00E6               	movwf	(map@in_max+2)^(0+128)
  6214  0696  3000               	movlw	0
  6215  0697  00E1               	movwf	map@in_min^(0+128)
  6216  0698  3000               	movlw	0
  6217  0699  00E2               	movwf	(map@in_min+1)^(0+128)
  6218  069A  3000               	movlw	0
  6219  069B  00E3               	movwf	(map@in_min+2)^(0+128)
  6220  069C  0023               	movlb	3	; select bank3
  6221  069D  0854               	movf	(_knob4_prev+1)^(0+384),w	;volatile
  6222  069E  0021               	movlb	1	; select bank1
  6223  069F  00A9               	movwf	(___awtoft@c+1)^(0+128)
  6224  06A0  0023               	movlb	3	; select bank3
  6225  06A1  0853               	movf	_knob4_prev^(0+384),w	;volatile
  6226  06A2  0021               	movlb	1	; select bank1
  6227  06A3  00A8               	movwf	___awtoft@c^(0+128)
  6228  06A4  31AE  263A  3183   	fcall	___awtoft
  6229  06A7  0021               	movlb	1	; select bank1
  6230  06A8  0828               	movf	?___awtoft^(0+128),w
  6231  06A9  00DE               	movwf	map@x^(0+128)
  6232  06AA  0829               	movf	(?___awtoft+1)^(0+128),w
  6233  06AB  00DF               	movwf	(map@x+1)^(0+128)
  6234  06AC  082A               	movf	(?___awtoft+2)^(0+128),w
  6235  06AD  00E0               	movwf	(map@x+2)^(0+128)
  6236  06AE  319A  2236  3183   	fcall	_map
  6237  06B1  0021               	movlb	1	; select bank1
  6238  06B2  085E               	movf	?_map^(0+128),w
  6239  06B3  0022               	movlb	2	; select bank2
  6240  06B4  00A0               	movwf	___fttol@f1^(0+256)
  6241  06B5  0021               	movlb	1	; select bank1
  6242  06B6  085F               	movf	(?_map+1)^(0+128),w
  6243  06B7  0022               	movlb	2	; select bank2
  6244  06B8  00A1               	movwf	(___fttol@f1+1)^(0+256)
  6245  06B9  0021               	movlb	1	; select bank1
  6246  06BA  0860               	movf	(?_map+2)^(0+128),w
  6247  06BB  0022               	movlb	2	; select bank2
  6248  06BC  00A2               	movwf	(___fttol@f1+2)^(0+256)
  6249  06BD  3199  21AF  3183   	fcall	___fttol
  6250  06C0  0022               	movlb	2	; select bank2
  6251  06C1  0820               	movf	?___fttol^(0+256),w
  6252  06C2  0020               	movlb	0	; select bank0
  6253  06C3  00C0               	movwf	_baseline_mod_time	;volatile
  6254  06C4  0022               	movlb	2	; select bank2
  6255  06C5  0821               	movf	(?___fttol^(0+256)+1),w
  6256  06C6  0020               	movlb	0	; select bank0
  6257  06C7  00C1               	movwf	_baseline_mod_time+1	;volatile
  6258  06C8  0D89               	rlf	9,f
  6259  06C9  3B89               	subwfb	9,f
  6260  06CA  0989               	comf	9,f
  6261  06CB  00C2               	movwf	_baseline_mod_time+2	;volatile
  6262  06CC  00C3               	movwf	_baseline_mod_time+3	;volatile
  6263  06CD                     l9398:	
  6264                           
  6265                           ;main.c: 175: }
  6266                           ;main.c: 177: if (oldBaseTime - baseline_mod_time >= 1 || oldBaseTime - baseline_mod_tim
      +                          e <= -1) {
  6267  06CD  0020               	movlb	0	; select bank0
  6268  06CE  0940               	comf	_baseline_mod_time,w	;volatile
  6269  06CF  0024               	movlb	4	; select bank4
  6270  06D0  00DE               	movwf	??_main^(0+512)
  6271  06D1  0020               	movlb	0	; select bank0
  6272  06D2  0941               	comf	_baseline_mod_time+1,w	;volatile
  6273  06D3  0024               	movlb	4	; select bank4
  6274  06D4  00DF               	movwf	(??_main^(0+512)+1)
  6275  06D5  0020               	movlb	0	; select bank0
  6276  06D6  0942               	comf	_baseline_mod_time+2,w	;volatile
  6277  06D7  0024               	movlb	4	; select bank4
  6278  06D8  00E0               	movwf	(??_main^(0+512)+2)
  6279  06D9  0020               	movlb	0	; select bank0
  6280  06DA  0943               	comf	_baseline_mod_time+3,w	;volatile
  6281  06DB  0024               	movlb	4	; select bank4
  6282  06DC  00E1               	movwf	(??_main^(0+512)+3)
  6283  06DD  0ADE               	incf	??_main^(0+512),f
  6284  06DE  1903               	skipnz
  6285  06DF  0ADF               	incf	(??_main^(0+512)+1),f
  6286  06E0  1903               	skipnz
  6287  06E1  0AE0               	incf	(??_main^(0+512)+2),f
  6288  06E2  1903               	skipnz
  6289  06E3  0AE1               	incf	(??_main^(0+512)+3),f
  6290  06E4  0855               	movf	_oldBaseTime^(0+512),w
  6291  06E5  00E2               	movwf	(??_main+4)^(0+512)
  6292  06E6  0856               	movf	(_oldBaseTime+1)^(0+512),w
  6293  06E7  00E3               	movwf	((??_main+4)^(0+512)+1)
  6294  06E8  3000               	movlw	0
  6295  06E9  1BE3               	btfsc	((??_main+4)^(0+512)+1),7
  6296  06EA  30FF               	movlw	255
  6297  06EB  00E4               	movwf	((??_main+4)^(0+512)+2)
  6298  06EC  00E5               	movwf	((??_main+4)^(0+512)+3)
  6299  06ED  0862               	movf	(??_main+4)^(0+512),w
  6300  06EE  07DE               	addwf	??_main^(0+512),f
  6301  06EF  0863               	movf	(??_main+5)^(0+512),w
  6302  06F0  3DDF               	addwfc	(??_main^(0+512)+1),f
  6303  06F1  0864               	movf	(??_main+6)^(0+512),w
  6304  06F2  3DE0               	addwfc	(??_main^(0+512)+2),f
  6305  06F3  0865               	movf	(??_main+7)^(0+512),w
  6306  06F4  3DE1               	addwfc	(??_main^(0+512)+3),f
  6307  06F5  1BE1               	btfsc	(??_main^(0+512)+3),7
  6308  06F6  2F04               	goto	l9400
  6309  06F7  0861               	movf	(??_main^(0+512)+3),w
  6310  06F8  1D03               	btfss	3,2
  6311  06F9  2F2E               	goto	l382
  6312  06FA  0860               	movf	(??_main^(0+512)+2),w
  6313  06FB  1D03               	btfss	3,2
  6314  06FC  2F2E               	goto	l382
  6315  06FD  085F               	movf	(??_main^(0+512)+1),w
  6316  06FE  1D03               	btfss	3,2
  6317  06FF  2F2E               	goto	l382
  6318  0700  3001               	movlw	1
  6319  0701  025E               	subwf	??_main^(0+512),w
  6320  0702  1803               	btfsc	3,0
  6321  0703  2F2E               	goto	l382
  6322  0704                     l9400:	
  6323  0704  0020               	movlb	0	; select bank0
  6324  0705  0940               	comf	_baseline_mod_time,w	;volatile
  6325  0706  0024               	movlb	4	; select bank4
  6326  0707  00DE               	movwf	??_main^(0+512)
  6327  0708  0020               	movlb	0	; select bank0
  6328  0709  0941               	comf	_baseline_mod_time+1,w	;volatile
  6329  070A  0024               	movlb	4	; select bank4
  6330  070B  00DF               	movwf	(??_main^(0+512)+1)
  6331  070C  0020               	movlb	0	; select bank0
  6332  070D  0942               	comf	_baseline_mod_time+2,w	;volatile
  6333  070E  0024               	movlb	4	; select bank4
  6334  070F  00E0               	movwf	(??_main^(0+512)+2)
  6335  0710  0020               	movlb	0	; select bank0
  6336  0711  0943               	comf	_baseline_mod_time+3,w	;volatile
  6337  0712  0024               	movlb	4	; select bank4
  6338  0713  00E1               	movwf	(??_main^(0+512)+3)
  6339  0714  0ADE               	incf	??_main^(0+512),f
  6340  0715  1903               	skipnz
  6341  0716  0ADF               	incf	(??_main^(0+512)+1),f
  6342  0717  1903               	skipnz
  6343  0718  0AE0               	incf	(??_main^(0+512)+2),f
  6344  0719  1903               	skipnz
  6345  071A  0AE1               	incf	(??_main^(0+512)+3),f
  6346  071B  0855               	movf	_oldBaseTime^(0+512),w
  6347  071C  00E2               	movwf	(??_main+4)^(0+512)
  6348  071D  0856               	movf	(_oldBaseTime+1)^(0+512),w
  6349  071E  00E3               	movwf	((??_main+4)^(0+512)+1)
  6350  071F  3000               	movlw	0
  6351  0720  1BE3               	btfsc	((??_main+4)^(0+512)+1),7
  6352  0721  30FF               	movlw	255
  6353  0722  00E4               	movwf	((??_main+4)^(0+512)+2)
  6354  0723  00E5               	movwf	((??_main+4)^(0+512)+3)
  6355  0724  0862               	movf	(??_main+4)^(0+512),w
  6356  0725  07DE               	addwf	??_main^(0+512),f
  6357  0726  0863               	movf	(??_main+5)^(0+512),w
  6358  0727  3DDF               	addwfc	(??_main^(0+512)+1),f
  6359  0728  0864               	movf	(??_main+6)^(0+512),w
  6360  0729  3DE0               	addwfc	(??_main^(0+512)+2),f
  6361  072A  0865               	movf	(??_main+7)^(0+512),w
  6362  072B  3DE1               	addwfc	(??_main^(0+512)+3),f
  6363  072C  1FE1               	btfss	(??_main+3)^(0+512),7
  6364  072D  2F31               	goto	l9402
  6365  072E                     l382:	
  6366                           
  6367                           ;main.c: 179: mod_time_changed = 1;
  6368  072E  0023               	movlb	3	; select bank3
  6369  072F  01E4               	clrf	_mod_time_changed^(0+384)
  6370  0730  0AE4               	incf	_mod_time_changed^(0+384),f
  6371  0731                     l9402:	
  6372                           
  6373                           ;main.c: 181: }
  6374                           ;main.c: 184: if (knob_5_pos - knob5_prev >= 4 || knob_5_pos - knob5_prev <= -4) {
  6375  0731  0023               	movlb	3	; select bank3
  6376  0732  0955               	comf	_knob5_prev^(0+384),w	;volatile
  6377  0733  0024               	movlb	4	; select bank4
  6378  0734  00DE               	movwf	??_main^(0+512)
  6379  0735  0023               	movlb	3	; select bank3
  6380  0736  0956               	comf	(_knob5_prev+1)^(0+384),w	;volatile
  6381  0737  0024               	movlb	4	; select bank4
  6382  0738  00DF               	movwf	(??_main^(0+512)+1)
  6383  0739  0ADE               	incf	??_main^(0+512),f
  6384  073A  1903               	skipnz
  6385  073B  0ADF               	incf	(??_main^(0+512)+1),f
  6386  073C  0023               	movlb	3	; select bank3
  6387  073D  0834               	movf	_knob_5_pos^(0+384),w
  6388  073E  0024               	movlb	4	; select bank4
  6389  073F  075E               	addwf	??_main^(0+512),w
  6390  0740  00E0               	movwf	(??_main+2)^(0+512)
  6391  0741  0023               	movlb	3	; select bank3
  6392  0742  0835               	movf	(_knob_5_pos+1)^(0+384),w
  6393  0743  0024               	movlb	4	; select bank4
  6394  0744  3D5F               	addwfc	(??_main+1)^(0+512),w
  6395  0745  00E1               	movwf	(??_main+3)^(0+512)
  6396  0746  0861               	movf	(??_main+3)^(0+512),w
  6397  0747  3A80               	xorlw	128
  6398  0748  00E2               	movwf	(??_main+4)^(0+512)
  6399  0749  3080               	movlw	128
  6400  074A  0262               	subwf	(??_main+4)^(0+512),w
  6401  074B  1D03               	skipz
  6402  074C  2F4F               	goto	u10465
  6403  074D  3004               	movlw	4
  6404  074E  0260               	subwf	(??_main+2)^(0+512),w
  6405  074F                     u10465:	
  6406  074F  1803               	skipnc
  6407  0750  2F71               	goto	l9406
  6408  0751  0023               	movlb	3	; select bank3
  6409  0752  0955               	comf	_knob5_prev^(0+384),w	;volatile
  6410  0753  0024               	movlb	4	; select bank4
  6411  0754  00DE               	movwf	??_main^(0+512)
  6412  0755  0023               	movlb	3	; select bank3
  6413  0756  0956               	comf	(_knob5_prev+1)^(0+384),w	;volatile
  6414  0757  0024               	movlb	4	; select bank4
  6415  0758  00DF               	movwf	(??_main^(0+512)+1)
  6416  0759  0ADE               	incf	??_main^(0+512),f
  6417  075A  1903               	skipnz
  6418  075B  0ADF               	incf	(??_main^(0+512)+1),f
  6419  075C  0023               	movlb	3	; select bank3
  6420  075D  0834               	movf	_knob_5_pos^(0+384),w
  6421  075E  0024               	movlb	4	; select bank4
  6422  075F  075E               	addwf	??_main^(0+512),w
  6423  0760  00E0               	movwf	(??_main+2)^(0+512)
  6424  0761  0023               	movlb	3	; select bank3
  6425  0762  0835               	movf	(_knob_5_pos+1)^(0+384),w
  6426  0763  0024               	movlb	4	; select bank4
  6427  0764  3D5F               	addwfc	(??_main+1)^(0+512),w
  6428  0765  00E1               	movwf	(??_main+3)^(0+512)
  6429  0766  0861               	movf	(??_main+3)^(0+512),w
  6430  0767  3A80               	xorlw	128
  6431  0768  00E2               	movwf	(??_main+4)^(0+512)
  6432  0769  307F               	movlw	127
  6433  076A  0262               	subwf	(??_main+4)^(0+512),w
  6434  076B  1D03               	skipz
  6435  076C  2F6F               	goto	u10475
  6436  076D  30FD               	movlw	253
  6437  076E  0260               	subwf	(??_main+2)^(0+512),w
  6438  076F                     u10475:	
  6439  076F  1803               	skipnc
  6440  0770  2FBB               	goto	l9410
  6441  0771                     l9406:	
  6442                           
  6443                           ;main.c: 185: knob5_prev = knob_5_pos;
  6444  0771  0023               	movlb	3	; select bank3
  6445  0772  0835               	movf	(_knob_5_pos+1)^(0+384),w
  6446  0773  00D6               	movwf	(_knob5_prev+1)^(0+384)	;volatile
  6447  0774  0834               	movf	_knob_5_pos^(0+384),w
  6448  0775  00D5               	movwf	_knob5_prev^(0+384)	;volatile
  6449                           
  6450                           ;main.c: 186: adjusted_pot_value = (int)map(knob5_prev, 0, 1023, 1275, 0);
  6451  0776  3000               	movlw	0
  6452  0777  0021               	movlb	1	; select bank1
  6453  0778  00EA               	movwf	map@out_max^(0+128)
  6454  0779  3000               	movlw	0
  6455  077A  00EB               	movwf	(map@out_max+1)^(0+128)
  6456  077B  3000               	movlw	0
  6457  077C  00EC               	movwf	(map@out_max+2)^(0+128)
  6458  077D  3060               	movlw	96
  6459  077E  00E7               	movwf	map@out_min^(0+128)
  6460  077F  309F               	movlw	159
  6461  0780  00E8               	movwf	(map@out_min+1)^(0+128)
  6462  0781  3044               	movlw	68
  6463  0782  00E9               	movwf	(map@out_min+2)^(0+128)
  6464  0783  30C0               	movlw	192
  6465  0784  00E4               	movwf	map@in_max^(0+128)
  6466  0785  307F               	movlw	127
  6467  0786  00E5               	movwf	(map@in_max+1)^(0+128)
  6468  0787  3044               	movlw	68
  6469  0788  00E6               	movwf	(map@in_max+2)^(0+128)
  6470  0789  3000               	movlw	0
  6471  078A  00E1               	movwf	map@in_min^(0+128)
  6472  078B  3000               	movlw	0
  6473  078C  00E2               	movwf	(map@in_min+1)^(0+128)
  6474  078D  3000               	movlw	0
  6475  078E  00E3               	movwf	(map@in_min+2)^(0+128)
  6476  078F  0023               	movlb	3	; select bank3
  6477  0790  0856               	movf	(_knob5_prev+1)^(0+384),w	;volatile
  6478  0791  0021               	movlb	1	; select bank1
  6479  0792  00A9               	movwf	(___awtoft@c+1)^(0+128)
  6480  0793  0023               	movlb	3	; select bank3
  6481  0794  0855               	movf	_knob5_prev^(0+384),w	;volatile
  6482  0795  0021               	movlb	1	; select bank1
  6483  0796  00A8               	movwf	___awtoft@c^(0+128)
  6484  0797  31AE  263A  3183   	fcall	___awtoft
  6485  079A  0021               	movlb	1	; select bank1
  6486  079B  0828               	movf	?___awtoft^(0+128),w
  6487  079C  00DE               	movwf	map@x^(0+128)
  6488  079D  0829               	movf	(?___awtoft+1)^(0+128),w
  6489  079E  00DF               	movwf	(map@x+1)^(0+128)
  6490  079F  082A               	movf	(?___awtoft+2)^(0+128),w
  6491  07A0  00E0               	movwf	(map@x+2)^(0+128)
  6492  07A1  319A  2236  3183   	fcall	_map
  6493  07A4  0021               	movlb	1	; select bank1
  6494  07A5  085E               	movf	?_map^(0+128),w
  6495  07A6  0022               	movlb	2	; select bank2
  6496  07A7  00A0               	movwf	___fttol@f1^(0+256)
  6497  07A8  0021               	movlb	1	; select bank1
  6498  07A9  085F               	movf	(?_map+1)^(0+128),w
  6499  07AA  0022               	movlb	2	; select bank2
  6500  07AB  00A1               	movwf	(___fttol@f1+1)^(0+256)
  6501  07AC  0021               	movlb	1	; select bank1
  6502  07AD  0860               	movf	(?_map+2)^(0+128),w
  6503  07AE  0022               	movlb	2	; select bank2
  6504  07AF  00A2               	movwf	(___fttol@f1+2)^(0+256)
  6505  07B0  3199  21AF  3183   	fcall	___fttol
  6506  07B3  0022               	movlb	2	; select bank2
  6507  07B4  0821               	movf	(?___fttol^(0+256)+1),w
  6508  07B5  0024               	movlb	4	; select bank4
  6509  07B6  00C6               	movwf	(_adjusted_pot_value+1)^(0+512)
  6510  07B7  0022               	movlb	2	; select bank2
  6511  07B8  0820               	movf	?___fttol^(0+256),w
  6512  07B9  0024               	movlb	4	; select bank4
  6513  07BA  00C5               	movwf	_adjusted_pot_value^(0+512)
  6514  07BB                     l9410:	
  6515                           
  6516                           ;main.c: 187: }
  6517                           ;main.c: 192: if (mod_time_changed == 1) {
  6518  07BB  0023               	movlb	3	; select bank3
  6519  07BC  0364               	decf	_mod_time_changed^(0+384),w
  6520  07BD  1D03               	btfss	3,2
  6521  07BE  2FEE               	goto	l9422
  6522                           
  6523                           ;main.c: 194: delay_time = baseline_mod_time;
  6524  07BF  0020               	movlb	0	; select bank0
  6525  07C0  0843               	movf	_baseline_mod_time+3,w	;volatile
  6526  07C1  00C7               	movwf	_delay_time+3	;volatile
  6527  07C2  0842               	movf	_baseline_mod_time+2,w	;volatile
  6528  07C3  00C6               	movwf	_delay_time+2	;volatile
  6529  07C4  0841               	movf	_baseline_mod_time+1,w	;volatile
  6530  07C5  00C5               	movwf	_delay_time+1	;volatile
  6531  07C6  0840               	movf	_baseline_mod_time,w	;volatile
  6532  07C7  00C4               	movwf	_delay_time	;volatile
  6533                           
  6534                           ;main.c: 195: delay_time = set_subdivision(baseline_mod_time, top_push_state);
  6535  07C8  0841               	movf	_baseline_mod_time+1,w	;volatile
  6536  07C9  0022               	movlb	2	; select bank2
  6537  07CA  00AF               	movwf	(set_subdivision@x+1)^(0+256)
  6538  07CB  0020               	movlb	0	; select bank0
  6539  07CC  0840               	movf	_baseline_mod_time,w	;volatile
  6540  07CD  0022               	movlb	2	; select bank2
  6541  07CE  00AE               	movwf	set_subdivision@x^(0+256)
  6542  07CF  0020               	movlb	0	; select bank0
  6543  07D0  084D               	movf	_top_push_state+1,w
  6544  07D1  0022               	movlb	2	; select bank2
  6545  07D2  00B1               	movwf	(set_subdivision@y+1)^(0+256)
  6546  07D3  0020               	movlb	0	; select bank0
  6547  07D4  084C               	movf	_top_push_state,w
  6548  07D5  0022               	movlb	2	; select bank2
  6549  07D6  00B0               	movwf	set_subdivision@y^(0+256)
  6550  07D7  319A  22C1  3183   	fcall	_set_subdivision
  6551  07DA  0022               	movlb	2	; select bank2
  6552  07DB  082E               	movf	?_set_subdivision^(0+256),w
  6553  07DC  0020               	movlb	0	; select bank0
  6554  07DD  00C4               	movwf	_delay_time	;volatile
  6555  07DE  0022               	movlb	2	; select bank2
  6556  07DF  082F               	movf	(?_set_subdivision+1)^(0+256),w
  6557  07E0  0020               	movlb	0	; select bank0
  6558  07E1  00C5               	movwf	_delay_time+1	;volatile
  6559  07E2  0D89               	rlf	9,f
  6560  07E3  3B89               	subwfb	9,f
  6561  07E4  0989               	comf	9,f
  6562  07E5  00C6               	movwf	_delay_time+2	;volatile
  6563  07E6  00C7               	movwf	_delay_time+3	;volatile
  6564                           
  6565                           ;main.c: 196: getModulationDelayTime();
  6566  07E7  31A4  24B6  3183   	fcall	_getModulationDelayTime
  6567                           
  6568                           ;main.c: 197: modulation_changed = 1;
  6569  07EA  0023               	movlb	3	; select bank3
  6570  07EB  01C7               	clrf	_modulation_changed^(0+384)
  6571  07EC  0AC7               	incf	_modulation_changed^(0+384),f
  6572                           
  6573                           ;main.c: 198: mod_time_changed = 0;
  6574  07ED  01E4               	clrf	_mod_time_changed^(0+384)
  6575  07EE                     l9422:	
  6576                           
  6577                           ;main.c: 200: }
  6578                           ;main.c: 203: if (modulation_changed == 1) {
  6579  07EE  0347               	decf	_modulation_changed^(0+384),w
  6580  07EF  1D03               	btfss	3,2
  6581  07F0  2B9B               	goto	l9316
  6582                           
  6583                           ;main.c: 204: updateModulationArray();
  6584  07F1  318D  25BA  3183   	fcall	_updateModulationArray
  6585                           
  6586                           ;main.c: 205: isInitialized = 1;
  6587  07F4  0023               	movlb	3	; select bank3
  6588  07F5  01C1               	clrf	_isInitialized^(0+384)
  6589  07F6  0AC1               	incf	_isInitialized^(0+384),f
  6590  07F7  2B9B               	goto	l9316
  6591  07F8                     __end_of_main:	
  6592                           
  6593                           	psect	text1
  6594  255D                     __ptext1:	
  6595 ;; *************** function _update_selectMode *****************
  6596 ;; Defined at:
  6597 ;;		line 139 in file "tactiles.c"
  6598 ;; Parameters:    Size  Location     Type
  6599 ;;		None
  6600 ;; Auto vars:     Size  Location     Type
  6601 ;;		None
  6602 ;; Return value:  Size  Location     Type
  6603 ;;                  1    wreg      void 
  6604 ;; Registers used:
  6605 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6606 ;; Tracked objects:
  6607 ;;		On entry : 0/0
  6608 ;;		On exit  : 0/0
  6609 ;;		Unchanged: 0/0
  6610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6612 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6613 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6614 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6615 ;;Total ram usage:        1 bytes
  6616 ;; Hardware stack levels used:    1
  6617 ;; Hardware stack levels required when called:    5
  6618 ;; This function calls:
  6619 ;;		_setExpressionDisplay
  6620 ;;		_setPresetDisplay
  6621 ;; This function is called by:
  6622 ;;		_main
  6623 ;; This function uses a non-reentrant model
  6624 ;;
  6625                           
  6626                           
  6627                           ;psect for function _update_selectMode
  6628  255D                     _update_selectMode:	
  6629                           
  6630                           ;tactiles.c: 140: if (mode2_state == 0 && presetSaveMode != 1) {
  6631                           
  6632                           ;incstack = 0
  6633                           ; Regs used in _update_selectMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6634  255D  0020               	movlb	0	; select bank0
  6635  255E  085E               	movf	_mode2_state,w
  6636  255F  1D03               	btfss	3,2
  6637  2560  2D64               	goto	l1024
  6638  2561  035F               	decf	_presetSaveMode,w
  6639  2562  1D03               	btfss	3,2
  6640  2563  0008               	return
  6641  2564                     l1024:	
  6642                           ;tactiles.c: 142: return;
  6643                           
  6644                           
  6645                           ;tactiles.c: 143: }
  6646                           ;tactiles.c: 144: if (PORTDbits.RD7 == 0) {
  6647  2564  1B8F               	btfsc	15,7	;volatile
  6648  2565  2DB2               	goto	l8862
  6649                           
  6650                           ;tactiles.c: 145: debounce_mode1++;
  6651  2566  3001               	movlw	1
  6652  2567  0024               	movlb	4	; select bank4
  6653  2568  07CB               	addwf	_debounce_mode1^(0+512),f
  6654  2569  3000               	movlw	0
  6655  256A  3DCC               	addwfc	(_debounce_mode1+1)^(0+512),f
  6656                           
  6657                           ;tactiles.c: 146: if (debounce_mode1 > 25) {
  6658  256B  084C               	movf	(_debounce_mode1+1)^(0+512),w
  6659  256C  3A80               	xorlw	128
  6660  256D  0021               	movlb	1	; select bank1
  6661  256E  00A7               	movwf	??_update_selectMode^(0+128)
  6662  256F  3080               	movlw	128
  6663  2570  0227               	subwf	??_update_selectMode^(0+128),w
  6664  2571  1D03               	skipz
  6665  2572  2D76               	goto	u9485
  6666  2573  301A               	movlw	26
  6667  2574  0024               	movlb	4	; select bank4
  6668  2575  024B               	subwf	_debounce_mode1^(0+512),w
  6669  2576                     u9485:	
  6670  2576  1C03               	skipc
  6671  2577  0008               	return
  6672                           
  6673                           ;tactiles.c: 147: debounce_mode1 = 25;
  6674  2578  3019               	movlw	25
  6675  2579  0024               	movlb	4	; select bank4
  6676  257A  00CB               	movwf	_debounce_mode1^(0+512)
  6677  257B  3000               	movlw	0
  6678  257C  00CC               	movwf	(_debounce_mode1^(0+512)+1)
  6679                           
  6680                           ;tactiles.c: 148: if (mode2_state == presetModeCnst || presetSaveMode == 1) {
  6681  257D  0020               	movlb	0	; select bank0
  6682  257E  085E               	movf	_mode2_state,w
  6683  257F  0023               	movlb	3	; select bank3
  6684  2580  0665               	xorwf	_presetModeCnst^(0+384),w
  6685  2581  1903               	skipnz
  6686  2582  2D87               	goto	l8844
  6687  2583  0020               	movlb	0	; select bank0
  6688  2584  035F               	decf	_presetSaveMode,w
  6689  2585  1D03               	btfss	3,2
  6690  2586  2D98               	goto	l8852
  6691  2587                     l8844:	
  6692                           
  6693                           ;tactiles.c: 149: presetChannel++;
  6694  2587  3001               	movlw	1
  6695  2588  0021               	movlb	1	; select bank1
  6696  2589  00A7               	movwf	??_update_selectMode^(0+128)
  6697  258A  0827               	movf	??_update_selectMode^(0+128),w
  6698  258B  0022               	movlb	2	; select bank2
  6699  258C  07EC               	addwf	_presetChannel^(0+256),f
  6700                           
  6701                           ;tactiles.c: 150: if (presetChannel > 10) {
  6702  258D  300B               	movlw	11
  6703  258E  026C               	subwf	_presetChannel^(0+256),w
  6704  258F  1C03               	skipc
  6705  2590  2D93               	goto	l8850
  6706                           
  6707                           ;tactiles.c: 151: presetChannel = 1;
  6708  2591  01EC               	clrf	_presetChannel^(0+256)
  6709  2592  0AEC               	incf	_presetChannel^(0+256),f
  6710  2593                     l8850:	
  6711                           
  6712                           ;tactiles.c: 152: }
  6713                           ;tactiles.c: 153: setPresetDisplay(presetChannel);
  6714  2593  086C               	movf	_presetChannel^(0+256),w
  6715  2594  31A0  2035  31A5   	fcall	_setPresetDisplay
  6716                           
  6717                           ;tactiles.c: 154: } else if (mode2_state == expressModeCnst) {
  6718  2597  2DAE               	goto	l1035
  6719  2598                     l8852:	
  6720  2598  0020               	movlb	0	; select bank0
  6721  2599  085E               	movf	_mode2_state,w
  6722  259A  0023               	movlb	3	; select bank3
  6723  259B  0662               	xorwf	_expressModeCnst^(0+384),w
  6724  259C  1D03               	skipz
  6725  259D  2DAE               	goto	l1035
  6726                           
  6727                           ;tactiles.c: 155: expressionChannel++;
  6728  259E  3001               	movlw	1
  6729  259F  0021               	movlb	1	; select bank1
  6730  25A0  00A7               	movwf	??_update_selectMode^(0+128)
  6731  25A1  0827               	movf	??_update_selectMode^(0+128),w
  6732  25A2  0023               	movlb	3	; select bank3
  6733  25A3  07E3               	addwf	_expressionChannel^(0+384),f
  6734                           
  6735                           ;tactiles.c: 156: if (expressionChannel > 5) {
  6736  25A4  3006               	movlw	6
  6737  25A5  0263               	subwf	_expressionChannel^(0+384),w
  6738  25A6  1C03               	skipc
  6739  25A7  2DAA               	goto	l8860
  6740                           
  6741                           ;tactiles.c: 157: expressionChannel = 1;
  6742  25A8  01E3               	clrf	_expressionChannel^(0+384)
  6743  25A9  0AE3               	incf	_expressionChannel^(0+384),f
  6744  25AA                     l8860:	
  6745                           
  6746                           ;tactiles.c: 158: }
  6747                           ;tactiles.c: 159: setExpressionDisplay(expressionChannel);
  6748  25AA  0863               	movf	_expressionChannel^(0+384),w
  6749  25AB  31AD  255F  31A5   	fcall	_setExpressionDisplay
  6750  25AE                     l1035:	
  6751                           ;tactiles.c: 160: }
  6752                           ;tactiles.c: 167: while (PORTDbits.RD7 == 0) {
  6753                           
  6754  25AE  0020               	movlb	0	; select bank0
  6755  25AF  1B8F               	btfsc	15,7	;volatile
  6756  25B0  0008               	return
  6757  25B1  2DAE               	goto	l1035
  6758  25B2                     l8862:	
  6759                           ;tactiles.c: 168: }
  6760                           ;tactiles.c: 169: }
  6761                           ;tactiles.c: 170: } else {
  6762                           
  6763                           
  6764                           ;tactiles.c: 171: debounce_mode1 = 0;
  6765  25B2  0024               	movlb	4	; select bank4
  6766  25B3  01CB               	clrf	_debounce_mode1^(0+512)
  6767  25B4  01CC               	clrf	(_debounce_mode1+1)^(0+512)
  6768  25B5  0008               	return
  6769  25B6                     __end_of_update_selectMode:	
  6770                           
  6771                           	psect	text2
  6772  2FC8                     __ptext2:	
  6773 ;; *************** function _update_mode *****************
  6774 ;; Defined at:
  6775 ;;		line 87 in file "tactiles.c"
  6776 ;; Parameters:    Size  Location     Type
  6777 ;;		None
  6778 ;; Auto vars:     Size  Location     Type
  6779 ;;		None
  6780 ;; Return value:  Size  Location     Type
  6781 ;;                  1    wreg      void 
  6782 ;; Registers used:
  6783 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6784 ;; Tracked objects:
  6785 ;;		On entry : 0/0
  6786 ;;		On exit  : 0/0
  6787 ;;		Unchanged: 0/0
  6788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6791 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6792 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6793 ;;Total ram usage:        1 bytes
  6794 ;; Hardware stack levels used:    1
  6795 ;; Hardware stack levels required when called:    6
  6796 ;; This function calls:
  6797 ;;		_resetRingLEDs
  6798 ;;		_setPedalMode
  6799 ;; This function is called by:
  6800 ;;		_main
  6801 ;; This function uses a non-reentrant model
  6802 ;;
  6803                           
  6804                           
  6805                           ;psect for function _update_mode
  6806  2FC8                     _update_mode:	
  6807                           
  6808                           ;tactiles.c: 92: if (PORTCbits.RC0 == 0) {
  6809                           
  6810                           ;incstack = 0
  6811                           ; Regs used in _update_mode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6812  2FC8  0020               	movlb	0	; select bank0
  6813  2FC9  180E               	btfsc	14,0	;volatile
  6814  2FCA  2FFC               	goto	l8830
  6815                           
  6816                           ;tactiles.c: 95: debounce_mode2++;
  6817  2FCB  3001               	movlw	1
  6818  2FCC  0024               	movlb	4	; select bank4
  6819  2FCD  07CD               	addwf	_debounce_mode2^(0+512),f
  6820  2FCE  3000               	movlw	0
  6821  2FCF  3DCE               	addwfc	(_debounce_mode2+1)^(0+512),f
  6822                           
  6823                           ;tactiles.c: 96: if (debounce_mode2 > 25) {
  6824  2FD0  084E               	movf	(_debounce_mode2+1)^(0+512),w
  6825  2FD1  3A80               	xorlw	128
  6826  2FD2  0021               	movlb	1	; select bank1
  6827  2FD3  00A7               	movwf	??_update_mode^(0+128)
  6828  2FD4  3080               	movlw	128
  6829  2FD5  0227               	subwf	??_update_mode^(0+128),w
  6830  2FD6  1D03               	skipz
  6831  2FD7  2FDB               	goto	u9415
  6832  2FD8  301A               	movlw	26
  6833  2FD9  0024               	movlb	4	; select bank4
  6834  2FDA  024D               	subwf	_debounce_mode2^(0+512),w
  6835  2FDB                     u9415:	
  6836  2FDB  1C03               	skipc
  6837  2FDC  0008               	return
  6838                           
  6839                           ;tactiles.c: 97: debounce_mode2 = 25;
  6840  2FDD  3019               	movlw	25
  6841  2FDE  0024               	movlb	4	; select bank4
  6842  2FDF  00CD               	movwf	_debounce_mode2^(0+512)
  6843  2FE0  3000               	movlw	0
  6844  2FE1  00CE               	movwf	(_debounce_mode2^(0+512)+1)
  6845                           
  6846                           ;tactiles.c: 99: if (presetSaveMode == 1) {
  6847  2FE2  0020               	movlb	0	; select bank0
  6848  2FE3  035F               	decf	_presetSaveMode,w
  6849  2FE4  1D03               	btfss	3,2
  6850  2FE5  2FEB               	goto	l8822
  6851                           
  6852                           ;tactiles.c: 100: presetSaveMode = 0;
  6853  2FE6  01DF               	clrf	_presetSaveMode
  6854                           
  6855                           ;tactiles.c: 101: resetRingLEDs();
  6856  2FE7  31AD  2577  31AF   	fcall	_resetRingLEDs
  6857                           
  6858                           ;tactiles.c: 102: } else {
  6859  2FEA  2FF5               	goto	l8828
  6860  2FEB                     l8822:	
  6861                           
  6862                           ;tactiles.c: 103: mode2_state++;
  6863  2FEB  3001               	movlw	1
  6864  2FEC  0021               	movlb	1	; select bank1
  6865  2FED  00A7               	movwf	??_update_mode^(0+128)
  6866  2FEE  0827               	movf	??_update_mode^(0+128),w
  6867  2FEF  0020               	movlb	0	; select bank0
  6868  2FF0  07DE               	addwf	_mode2_state,f
  6869                           
  6870                           ;tactiles.c: 104: if (mode2_state > 2) {
  6871  2FF1  3003               	movlw	3
  6872  2FF2  025E               	subwf	_mode2_state,w
  6873  2FF3  1803               	btfsc	3,0
  6874                           
  6875                           ;tactiles.c: 105: mode2_state = 0;
  6876  2FF4  01DE               	clrf	_mode2_state
  6877  2FF5                     l8828:	
  6878                           
  6879                           ;tactiles.c: 106: }
  6880                           ;tactiles.c: 107: }
  6881                           ;tactiles.c: 109: setPedalMode();
  6882  2FF5  31AE  265C  31AF   	fcall	_setPedalMode
  6883  2FF8                     l1009:	
  6884                           ;tactiles.c: 110: while (PORTCbits.RC0 == 0) {
  6885                           
  6886  2FF8  0020               	movlb	0	; select bank0
  6887  2FF9  180E               	btfsc	14,0	;volatile
  6888  2FFA  0008               	return
  6889  2FFB  2FF8               	goto	l1009
  6890  2FFC                     l8830:	
  6891                           ;tactiles.c: 111: }
  6892                           ;tactiles.c: 112: }
  6893                           ;tactiles.c: 113: } else {
  6894                           
  6895                           
  6896                           ;tactiles.c: 114: debounce_mode2 = 0;
  6897  2FFC  0024               	movlb	4	; select bank4
  6898  2FFD  01CD               	clrf	_debounce_mode2^(0+512)
  6899  2FFE  01CE               	clrf	(_debounce_mode2+1)^(0+512)
  6900  2FFF  0008               	return
  6901  3000                     __end_of_update_mode:	
  6902                           
  6903                           	psect	text3
  6904  0BD2                     __ptext3:	
  6905 ;; *************** function _updateSwitchTap *****************
  6906 ;; Defined at:
  6907 ;;		line 48 in file "SwitchTap.c"
  6908 ;; Parameters:    Size  Location     Type
  6909 ;;		None
  6910 ;; Auto vars:     Size  Location     Type
  6911 ;;  tapCntDiviso    2   34[BANK1 ] int 
  6912 ;;  iCnt            1   36[BANK1 ] unsigned char 
  6913 ;; Return value:  Size  Location     Type
  6914 ;;                  1    wreg      void 
  6915 ;; Registers used:
  6916 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6917 ;; Tracked objects:
  6918 ;;		On entry : 0/0
  6919 ;;		On exit  : 0/0
  6920 ;;		Unchanged: 0/0
  6921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6923 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6924 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6925 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6926 ;;Total ram usage:        9 bytes
  6927 ;; Hardware stack levels used:    1
  6928 ;; Hardware stack levels required when called:    8
  6929 ;; This function calls:
  6930 ;;		___aldiv
  6931 ;;		_setDoublePressState
  6932 ;;		_setLongTapState
  6933 ;; This function is called by:
  6934 ;;		_main
  6935 ;; This function uses a non-reentrant model
  6936 ;;
  6937                           
  6938                           
  6939                           ;psect for function _updateSwitchTap
  6940  0BD2                     _updateSwitchTap:	
  6941                           
  6942                           ;SwitchTap.c: 49: uint8_t iCnt = 0;
  6943                           
  6944                           ;incstack = 0
  6945                           ; Regs used in _updateSwitchTap: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6946  0BD2  0021               	movlb	1	; select bank1
  6947  0BD3  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  6948                           
  6949                           ;SwitchTap.c: 57: if (PORTEbits.RE0 == 0) {
  6950  0BD4  0020               	movlb	0	; select bank0
  6951  0BD5  1810               	btfsc	16,0	;volatile
  6952  0BD6  2BDE               	goto	l8984
  6953                           
  6954                           ;SwitchTap.c: 58: if (switchTap_pressed > 0) {
  6955  0BD7  0022               	movlb	2	; select bank2
  6956  0BD8  086B               	movf	_switchTap_pressed^(0+256),w
  6957  0BD9  1903               	btfsc	3,2
  6958  0BDA  2BE9               	goto	l1442
  6959                           
  6960                           ;SwitchTap.c: 59: switchTap_pressed--;
  6961  0BDB  3001               	movlw	1
  6962  0BDC  02EB               	subwf	_switchTap_pressed^(0+256),f
  6963                           
  6964                           ;SwitchTap.c: 60: }
  6965                           ;SwitchTap.c: 61: } else if (switchTap_pressed < 25) {
  6966  0BDD  2BE9               	goto	l1442
  6967  0BDE                     l8984:	
  6968  0BDE  3019               	movlw	25
  6969  0BDF  0022               	movlb	2	; select bank2
  6970  0BE0  026B               	subwf	_switchTap_pressed^(0+256),w
  6971  0BE1  1803               	skipnc
  6972  0BE2  2BE9               	goto	l1442
  6973                           
  6974                           ;SwitchTap.c: 62: switchTap_pressed++;
  6975  0BE3  3001               	movlw	1
  6976  0BE4  0021               	movlb	1	; select bank1
  6977  0BE5  00BC               	movwf	??_updateSwitchTap^(0+128)
  6978  0BE6  083C               	movf	??_updateSwitchTap^(0+128),w
  6979  0BE7  0022               	movlb	2	; select bank2
  6980  0BE8  07EB               	addwf	_switchTap_pressed^(0+256),f
  6981  0BE9                     l1442:	
  6982                           
  6983                           ;SwitchTap.c: 63: }
  6984                           ;SwitchTap.c: 69: if (switchTap_pressed == 0) {
  6985  0BE9  086B               	movf	_switchTap_pressed^(0+256),w
  6986  0BEA  1D03               	btfss	3,2
  6987  0BEB  2DA1               	goto	l9068
  6988                           
  6989                           ;SwitchTap.c: 73: if (tap_timer >= 1563) {
  6990  0BEC  0020               	movlb	0	; select bank0
  6991  0BED  1BD5               	btfsc	_tap_timer+3,7	;volatile
  6992  0BEE  2C75               	goto	l9028
  6993  0BEF  0855               	movf	_tap_timer+3,w	;volatile
  6994  0BF0  1D03               	btfss	3,2
  6995  0BF1  2BFB               	goto	l8990
  6996  0BF2  0854               	movf	_tap_timer+2,w	;volatile
  6997  0BF3  1D03               	btfss	3,2
  6998  0BF4  2BFB               	goto	l8990
  6999  0BF5  301B               	movlw	27
  7000  0BF6  0252               	subwf	_tap_timer,w	;volatile
  7001  0BF7  3006               	movlw	6
  7002  0BF8  3B53               	subwfb	_tap_timer+1,w	;volatile
  7003  0BF9  1C03               	btfss	3,0
  7004  0BFA  2C75               	goto	l9028
  7005  0BFB                     l8990:	
  7006                           
  7007                           ;SwitchTap.c: 76: if (switchTap_down != 1) {
  7008  0BFB  0023               	movlb	3	; select bank3
  7009  0BFC  034B               	decf	_switchTap_down^(0+384),w
  7010  0BFD  1903               	btfsc	3,2
  7011  0BFE  2C3A               	goto	l9006
  7012                           
  7013                           ;SwitchTap.c: 78: switchTap_down = 1;
  7014  0BFF  01CB               	clrf	_switchTap_down^(0+384)
  7015  0C00  0ACB               	incf	_switchTap_down^(0+384),f
  7016                           
  7017                           ;SwitchTap.c: 79: tap_timer = 0;
  7018  0C01  3000               	movlw	0
  7019  0C02  0020               	movlb	0	; select bank0
  7020  0C03  00D5               	movwf	_tap_timer+3	;volatile
  7021  0C04  3000               	movlw	0
  7022  0C05  00D4               	movwf	_tap_timer+2	;volatile
  7023  0C06  3000               	movlw	0
  7024  0C07  00D3               	movwf	_tap_timer+1	;volatile
  7025  0C08  3000               	movlw	0
  7026  0C09  00D2               	movwf	_tap_timer	;volatile
  7027                           
  7028                           ;SwitchTap.c: 80: tap_iteration = 1;
  7029  0C0A  3001               	movlw	1
  7030  0C0B  0023               	movlb	3	; select bank3
  7031  0C0C  00DD               	movwf	_tap_iteration^(0+384)
  7032  0C0D  3000               	movlw	0
  7033  0C0E  00DE               	movwf	(_tap_iteration^(0+384)+1)
  7034                           
  7035                           ;SwitchTap.c: 81: tap_total = 0;
  7036  0C0F  3000               	movlw	0
  7037  0C10  0024               	movlb	4	; select bank4
  7038  0C11  00C0               	movwf	(_tap_total+3)^(0+512)
  7039  0C12  3000               	movlw	0
  7040  0C13  00BF               	movwf	(_tap_total+2)^(0+512)
  7041  0C14  3000               	movlw	0
  7042  0C15  00BE               	movwf	(_tap_total+1)^(0+512)
  7043  0C16  3000               	movlw	0
  7044  0C17  00BD               	movwf	_tap_total^(0+512)
  7045                           
  7046                           ;SwitchTap.c: 82: mod_time_changed = 0;
  7047  0C18  0023               	movlb	3	; select bank3
  7048  0C19  01E4               	clrf	_mod_time_changed^(0+384)
  7049                           
  7050                           ;SwitchTap.c: 84: for (iCnt = 1; iCnt <= num_taps; iCnt++) {
  7051  0C1A  0021               	movlb	1	; select bank1
  7052  0C1B  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  7053  0C1C  0AC4               	incf	updateSwitchTap@iCnt^(0+128),f
  7054  0C1D                     l9004:	
  7055  0C1D  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7056  0C1E  0020               	movlb	0	; select bank0
  7057  0C1F  0250               	subwf	_num_taps,w
  7058  0C20  1C03               	btfss	3,0
  7059  0C21  2C3A               	goto	l9006
  7060                           
  7061                           ;SwitchTap.c: 85: tap_history[iCnt] = 0;
  7062  0C22  0021               	movlb	1	; select bank1
  7063  0C23  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7064  0C24  00BC               	movwf	??_updateSwitchTap^(0+128)
  7065  0C25  3001               	movlw	1
  7066  0C26                     u9855:	
  7067  0C26  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7068  0C27  3EFF               	addlw	-1
  7069  0C28  1D03               	skipz
  7070  0C29  2C26               	goto	u9855
  7071  0C2A  353C               	lslf	??_updateSwitchTap^(0+128),w
  7072  0C2B  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7073  0C2C  0086               	movwf	6
  7074  0C2D  3002               	movlw	2	; select bank4/5
  7075  0C2E  0087               	movwf	7
  7076  0C2F  3000               	movlw	0
  7077  0C30  3FC0               	movwi [0]fsr1
  7078  0C31  3000               	movlw	0
  7079  0C32  3FC1               	movwi [1]fsr1
  7080  0C33  3FC2               	movwi [2]fsr1
  7081  0C34  3FC3               	movwi [3]fsr1
  7082  0C35  3001               	movlw	1
  7083  0C36  00BC               	movwf	??_updateSwitchTap^(0+128)
  7084  0C37  083C               	movf	??_updateSwitchTap^(0+128),w
  7085  0C38  07C4               	addwf	updateSwitchTap@iCnt^(0+128),f
  7086  0C39  2C1D               	goto	l9004
  7087  0C3A                     l9006:	
  7088                           
  7089                           ;SwitchTap.c: 86: }
  7090                           ;SwitchTap.c: 87: }
  7091                           ;SwitchTap.c: 90: if (longTap_start == 0) {
  7092  0C3A  0023               	movlb	3	; select bank3
  7093  0C3B  0845               	movf	_longTap_start^(0+384),w
  7094  0C3C  1D03               	btfss	3,2
  7095  0C3D  2C45               	goto	l9012
  7096                           
  7097                           ;SwitchTap.c: 91: longTap_start = 1;
  7098  0C3E  01C5               	clrf	_longTap_start^(0+384)
  7099  0C3F  0AC5               	incf	_longTap_start^(0+384),f
  7100                           
  7101                           ;SwitchTap.c: 92: longTap_state = 0;
  7102  0C40  0020               	movlb	0	; select bank0
  7103  0C41  01CF               	clrf	_longTap_state	;volatile
  7104                           
  7105                           ;SwitchTap.c: 93: longTap_timer = 0;
  7106  0C42  0023               	movlb	3	; select bank3
  7107  0C43  01B8               	clrf	_longTap_timer^(0+384)	;volatile
  7108  0C44  01B9               	clrf	(_longTap_timer+1)^(0+384)	;volatile
  7109  0C45                     l9012:	
  7110                           
  7111                           ;SwitchTap.c: 94: }
  7112                           ;SwitchTap.c: 98: if (longTap_timer >= long_press_limit && longTap_state == 0 && doubleT
      +                          ap_state == 0) {
  7113  0C45  0020               	movlb	0	; select bank0
  7114  0C46  084B               	movf	_long_press_limit+1,w
  7115  0C47  0023               	movlb	3	; select bank3
  7116  0C48  0239               	subwf	(_longTap_timer+1)^(0+384),w	;volatile
  7117  0C49  1D03               	skipz
  7118  0C4A  2C4F               	goto	u9885
  7119  0C4B  0020               	movlb	0	; select bank0
  7120  0C4C  084A               	movf	_long_press_limit,w
  7121  0C4D  0023               	movlb	3	; select bank3
  7122  0C4E  0238               	subwf	_longTap_timer^(0+384),w	;volatile
  7123  0C4F                     u9885:	
  7124  0C4F  1C03               	skipc
  7125  0C50  0008               	return
  7126  0C51  0020               	movlb	0	; select bank0
  7127  0C52  084F               	movf	_longTap_state,w	;volatile
  7128  0C53  1D03               	btfss	3,2
  7129  0C54  0008               	return
  7130  0C55  085C               	movf	_doubleTap_state,w	;volatile
  7131  0C56  1D03               	btfss	3,2
  7132  0C57  0008               	return
  7133                           
  7134                           ;SwitchTap.c: 100: longTap_timer = long_press_limit;
  7135  0C58  084B               	movf	_long_press_limit+1,w
  7136  0C59  0023               	movlb	3	; select bank3
  7137  0C5A  00B9               	movwf	(_longTap_timer+1)^(0+384)	;volatile
  7138  0C5B  0020               	movlb	0	; select bank0
  7139  0C5C  084A               	movf	_long_press_limit,w
  7140  0C5D  0023               	movlb	3	; select bank3
  7141  0C5E  00B8               	movwf	_longTap_timer^(0+384)	;volatile
  7142                           
  7143                           ;SwitchTap.c: 102: LATBbits.LATB4 = 0;
  7144  0C5F  0022               	movlb	2	; select bank2
  7145  0C60  120D               	bcf	13,4	;volatile
  7146                           
  7147                           ;SwitchTap.c: 103: if (longBypass_start != 1) {
  7148  0C61  0023               	movlb	3	; select bank3
  7149  0C62  0344               	decf	_longBypass_start^(0+384),w
  7150  0C63  1903               	btfsc	3,2
  7151  0C64  2C6D               	goto	l9026
  7152                           
  7153                           ;SwitchTap.c: 104: setLongTapState(1);
  7154  0C65  3001               	movlw	1
  7155  0C66  0021               	movlb	1	; select bank1
  7156  0C67  00A0               	movwf	setLongTapState@f_state^(0+128)
  7157  0C68  3000               	movlw	0
  7158  0C69  00A1               	movwf	(setLongTapState@f_state^(0+128)+1)
  7159  0C6A  31AD  2591         	fcall	_setLongTapState
  7160                           
  7161                           ;SwitchTap.c: 105: } else {
  7162  0C6C  0008               	return
  7163  0C6D                     l9026:	
  7164                           
  7165                           ;SwitchTap.c: 106: setDoublePressState(1);
  7166  0C6D  3001               	movlw	1
  7167  0C6E  0021               	movlb	1	; select bank1
  7168  0C6F  00B8               	movwf	setDoublePressState@f_state^(0+128)
  7169  0C70  3000               	movlw	0
  7170  0C71  00B9               	movwf	(setDoublePressState@f_state^(0+128)+1)
  7171  0C72  31A1  2160         	fcall	_setDoublePressState
  7172                           
  7173                           ;SwitchTap.c: 107: }
  7174                           ;SwitchTap.c: 108: }
  7175                           ;SwitchTap.c: 110: } else if (tap_timer < 1563 && longTap_state == 0 && switchTap_down !
      +                          = 1) {
  7176  0C74  0008               	return
  7177  0C75                     l9028:	
  7178  0C75  0020               	movlb	0	; select bank0
  7179  0C76  1BD5               	btfsc	_tap_timer+3,7	;volatile
  7180  0C77  2C84               	goto	l9030
  7181  0C78  0855               	movf	_tap_timer+3,w	;volatile
  7182  0C79  1D03               	btfss	3,2
  7183  0C7A  0008               	return
  7184  0C7B  0854               	movf	_tap_timer+2,w	;volatile
  7185  0C7C  1D03               	btfss	3,2
  7186  0C7D  0008               	return
  7187  0C7E  301B               	movlw	27
  7188  0C7F  0252               	subwf	_tap_timer,w	;volatile
  7189  0C80  3006               	movlw	6
  7190  0C81  3B53               	subwfb	_tap_timer+1,w	;volatile
  7191  0C82  1803               	btfsc	3,0
  7192  0C83  0008               	return
  7193  0C84                     l9030:	
  7194  0C84  084F               	movf	_longTap_state,w	;volatile
  7195  0C85  1D03               	btfss	3,2
  7196  0C86  0008               	return
  7197  0C87  0023               	movlb	3	; select bank3
  7198  0C88  034B               	decf	_switchTap_down^(0+384),w
  7199  0C89  1903               	btfsc	3,2
  7200  0C8A  0008               	return
  7201                           
  7202                           ;SwitchTap.c: 112: switchTap_down = 1;
  7203  0C8B  01CB               	clrf	_switchTap_down^(0+384)
  7204  0C8C  0ACB               	incf	_switchTap_down^(0+384),f
  7205                           
  7206                           ;SwitchTap.c: 113: if (tap_timer >= 1172) {
  7207  0C8D  0020               	movlb	0	; select bank0
  7208  0C8E  1BD5               	btfsc	_tap_timer+3,7	;volatile
  7209  0C8F  2CA4               	goto	l1456
  7210  0C90  0855               	movf	_tap_timer+3,w	;volatile
  7211  0C91  1D03               	btfss	3,2
  7212  0C92  2C9C               	goto	l9038
  7213  0C93  0854               	movf	_tap_timer+2,w	;volatile
  7214  0C94  1D03               	btfss	3,2
  7215  0C95  2C9C               	goto	l9038
  7216  0C96  3094               	movlw	148
  7217  0C97  0252               	subwf	_tap_timer,w	;volatile
  7218  0C98  3004               	movlw	4
  7219  0C99  3B53               	subwfb	_tap_timer+1,w	;volatile
  7220  0C9A  1C03               	btfss	3,0
  7221  0C9B  2CA4               	goto	l1456
  7222  0C9C                     l9038:	
  7223                           
  7224                           ;SwitchTap.c: 114: tap_timer = 1172;
  7225  0C9C  3000               	movlw	0
  7226  0C9D  00D5               	movwf	_tap_timer+3	;volatile
  7227  0C9E  3000               	movlw	0
  7228  0C9F  00D4               	movwf	_tap_timer+2	;volatile
  7229  0CA0  3004               	movlw	4
  7230  0CA1  00D3               	movwf	_tap_timer+1	;volatile
  7231  0CA2  3094               	movlw	148
  7232  0CA3  00D2               	movwf	_tap_timer	;volatile
  7233  0CA4                     l1456:	
  7234                           
  7235                           ;SwitchTap.c: 115: }
  7236                           ;SwitchTap.c: 117: int tapCntDivisor = num_taps;
  7237  0CA4  0850               	movf	_num_taps,w
  7238  0CA5  0021               	movlb	1	; select bank1
  7239  0CA6  00BC               	movwf	??_updateSwitchTap^(0+128)
  7240  0CA7  01BD               	clrf	(??_updateSwitchTap^(0+128)+1)
  7241  0CA8  083C               	movf	??_updateSwitchTap^(0+128),w
  7242  0CA9  00C2               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  7243  0CAA  083D               	movf	(??_updateSwitchTap+1)^(0+128),w
  7244  0CAB  00C3               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  7245                           
  7246                           ;SwitchTap.c: 118: if (tap_iteration <= num_taps) {
  7247  0CAC  0023               	movlb	3	; select bank3
  7248  0CAD  085E               	movf	(_tap_iteration+1)^(0+384),w
  7249  0CAE  3A80               	xorlw	128
  7250  0CAF  3C80               	sublw	128
  7251  0CB0  1D03               	skipz
  7252  0CB1  2CB5               	goto	u9965
  7253  0CB2  085D               	movf	_tap_iteration^(0+384),w
  7254  0CB3  0020               	movlb	0	; select bank0
  7255  0CB4  0250               	subwf	_num_taps,w
  7256  0CB5                     u9965:	
  7257  0CB5  1C03               	skipc
  7258  0CB6  2CE7               	goto	l9046
  7259                           
  7260                           ;SwitchTap.c: 119: tap_total += tap_timer;
  7261  0CB7  0020               	movlb	0	; select bank0
  7262  0CB8  0852               	movf	_tap_timer,w	;volatile
  7263  0CB9  0024               	movlb	4	; select bank4
  7264  0CBA  07BD               	addwf	_tap_total^(0+512),f
  7265  0CBB  0020               	movlb	0	; select bank0
  7266  0CBC  0853               	movf	_tap_timer+1,w	;volatile
  7267  0CBD  0024               	movlb	4	; select bank4
  7268  0CBE  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  7269  0CBF  0020               	movlb	0	; select bank0
  7270  0CC0  0854               	movf	_tap_timer+2,w	;volatile
  7271  0CC1  0024               	movlb	4	; select bank4
  7272  0CC2  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  7273  0CC3  0020               	movlb	0	; select bank0
  7274  0CC4  0855               	movf	_tap_timer+3,w	;volatile
  7275  0CC5  0024               	movlb	4	; select bank4
  7276  0CC6  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  7277                           
  7278                           ;SwitchTap.c: 120: tap_history[tap_iteration] = tap_timer;
  7279  0CC7  0023               	movlb	3	; select bank3
  7280  0CC8  085D               	movf	_tap_iteration^(0+384),w
  7281  0CC9  0021               	movlb	1	; select bank1
  7282  0CCA  00BC               	movwf	??_updateSwitchTap^(0+128)
  7283  0CCB  3001               	movlw	1
  7284  0CCC                     u9975:	
  7285  0CCC  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7286  0CCD  3EFF               	addlw	-1
  7287  0CCE  1D03               	skipz
  7288  0CCF  2CCC               	goto	u9975
  7289  0CD0  353C               	lslf	??_updateSwitchTap^(0+128),w
  7290  0CD1  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7291  0CD2  0086               	movwf	6
  7292  0CD3  3002               	movlw	2	; select bank4/5
  7293  0CD4  0087               	movwf	7
  7294  0CD5  0020               	movlb	0	; select bank0
  7295  0CD6  0852               	movf	_tap_timer,w	;volatile
  7296  0CD7  3FC0               	movwi [0]fsr1
  7297  0CD8  0853               	movf	_tap_timer+1,w	;volatile
  7298  0CD9  3FC1               	movwi [1]fsr1
  7299  0CDA  0854               	movf	_tap_timer+2,w	;volatile
  7300  0CDB  3FC2               	movwi [2]fsr1
  7301  0CDC  0855               	movf	_tap_timer+3,w	;volatile
  7302  0CDD  3FC3               	movwi [3]fsr1
  7303                           
  7304                           ;SwitchTap.c: 121: tapCntDivisor = tap_iteration;
  7305  0CDE  0023               	movlb	3	; select bank3
  7306  0CDF  085E               	movf	(_tap_iteration+1)^(0+384),w
  7307  0CE0  0021               	movlb	1	; select bank1
  7308  0CE1  00C3               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  7309  0CE2  0023               	movlb	3	; select bank3
  7310  0CE3  085D               	movf	_tap_iteration^(0+384),w
  7311  0CE4  0021               	movlb	1	; select bank1
  7312  0CE5  00C2               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  7313                           
  7314                           ;SwitchTap.c: 122: } else {
  7315  0CE6  2D63               	goto	l9060
  7316  0CE7                     l9046:	
  7317                           
  7318                           ;SwitchTap.c: 123: tap_total = 0;
  7319  0CE7  3000               	movlw	0
  7320  0CE8  0024               	movlb	4	; select bank4
  7321  0CE9  00C0               	movwf	(_tap_total+3)^(0+512)
  7322  0CEA  3000               	movlw	0
  7323  0CEB  00BF               	movwf	(_tap_total+2)^(0+512)
  7324  0CEC  3000               	movlw	0
  7325  0CED  00BE               	movwf	(_tap_total+1)^(0+512)
  7326  0CEE  3000               	movlw	0
  7327  0CEF  00BD               	movwf	_tap_total^(0+512)
  7328                           
  7329                           ;SwitchTap.c: 124: for (iCnt = 1; iCnt < num_taps; iCnt++) {
  7330  0CF0  0021               	movlb	1	; select bank1
  7331  0CF1  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  7332  0CF2  0AC4               	incf	updateSwitchTap@iCnt^(0+128),f
  7333  0CF3                     l9054:	
  7334  0CF3  0020               	movlb	0	; select bank0
  7335  0CF4  0850               	movf	_num_taps,w
  7336  0CF5  0021               	movlb	1	; select bank1
  7337  0CF6  0244               	subwf	updateSwitchTap@iCnt^(0+128),w
  7338  0CF7  1803               	btfsc	3,0
  7339  0CF8  2D3D               	goto	l9056
  7340                           
  7341                           ;SwitchTap.c: 125: tap_history[iCnt] = tap_history[iCnt + 1];
  7342  0CF9  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7343  0CFA  00BC               	movwf	??_updateSwitchTap^(0+128)
  7344  0CFB  3001               	movlw	1
  7345  0CFC                     u9985:	
  7346  0CFC  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7347  0CFD  3EFF               	addlw	-1
  7348  0CFE  1D03               	skipz
  7349  0CFF  2CFC               	goto	u9985
  7350  0D00  353C               	lslf	??_updateSwitchTap^(0+128),w
  7351  0D01  3E04               	addlw	4
  7352  0D02  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7353  0D03  0086               	movwf	6
  7354  0D04  3002               	movlw	2	; select bank4/5
  7355  0D05  0087               	movwf	7
  7356  0D06  3F40               	moviw [0]fsr1
  7357  0D07  00BD               	movwf	(??_updateSwitchTap+1)^(0+128)
  7358  0D08  3F41               	moviw [1]fsr1
  7359  0D09  00BE               	movwf	((??_updateSwitchTap+1)^(0+128)+1)
  7360  0D0A  3F42               	moviw [2]fsr1
  7361  0D0B  00BF               	movwf	((??_updateSwitchTap+1)^(0+128)+2)
  7362  0D0C  3F43               	moviw [3]fsr1
  7363  0D0D  00C0               	movwf	((??_updateSwitchTap+1)^(0+128)+3)
  7364  0D0E  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7365  0D0F  00C1               	movwf	(??_updateSwitchTap+5)^(0+128)
  7366  0D10  3001               	movlw	1
  7367  0D11                     u9995:	
  7368  0D11  35C1               	lslf	(??_updateSwitchTap+5)^(0+128),f
  7369  0D12  3EFF               	addlw	-1
  7370  0D13  1D03               	skipz
  7371  0D14  2D11               	goto	u9995
  7372  0D15  3541               	lslf	(??_updateSwitchTap+5)^(0+128),w
  7373  0D16  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7374  0D17  0086               	movwf	6
  7375  0D18  3002               	movlw	2	; select bank4/5
  7376  0D19  0087               	movwf	7
  7377  0D1A  083D               	movf	(??_updateSwitchTap+1)^(0+128),w
  7378  0D1B  3FC0               	movwi [0]fsr1
  7379  0D1C  083E               	movf	(??_updateSwitchTap+2)^(0+128),w
  7380  0D1D  3FC1               	movwi [1]fsr1
  7381  0D1E  083F               	movf	(??_updateSwitchTap+3)^(0+128),w
  7382  0D1F  3FC2               	movwi [2]fsr1
  7383  0D20  0840               	movf	(??_updateSwitchTap+4)^(0+128),w
  7384  0D21  3FC3               	movwi [3]fsr1
  7385                           
  7386                           ;SwitchTap.c: 126: tap_total += tap_history[iCnt];
  7387  0D22  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7388  0D23  00BC               	movwf	??_updateSwitchTap^(0+128)
  7389  0D24  3001               	movlw	1
  7390  0D25                     u10005:	
  7391  0D25  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7392  0D26  3EFF               	addlw	-1
  7393  0D27  1D03               	skipz
  7394  0D28  2D25               	goto	u10005
  7395  0D29  353C               	lslf	??_updateSwitchTap^(0+128),w
  7396  0D2A  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7397  0D2B  0086               	movwf	6
  7398  0D2C  3002               	movlw	2	; select bank4/5
  7399  0D2D  0087               	movwf	7
  7400  0D2E  3F40               	moviw [0]fsr1
  7401  0D2F  0024               	movlb	4	; select bank4
  7402  0D30  07BD               	addwf	_tap_total^(0+512),f
  7403  0D31  3F41               	moviw [1]fsr1
  7404  0D32  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  7405  0D33  3F42               	moviw [2]fsr1
  7406  0D34  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  7407  0D35  3F43               	moviw [3]fsr1
  7408  0D36  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  7409  0D37  3001               	movlw	1
  7410  0D38  0021               	movlb	1	; select bank1
  7411  0D39  00BC               	movwf	??_updateSwitchTap^(0+128)
  7412  0D3A  083C               	movf	??_updateSwitchTap^(0+128),w
  7413  0D3B  07C4               	addwf	updateSwitchTap@iCnt^(0+128),f
  7414  0D3C  2CF3               	goto	l9054
  7415  0D3D                     l9056:	
  7416                           
  7417                           ;SwitchTap.c: 127: }
  7418                           ;SwitchTap.c: 128: tap_history[num_taps] = tap_timer;
  7419  0D3D  0020               	movlb	0	; select bank0
  7420  0D3E  0850               	movf	_num_taps,w
  7421  0D3F  0021               	movlb	1	; select bank1
  7422  0D40  00BC               	movwf	??_updateSwitchTap^(0+128)
  7423  0D41  3001               	movlw	1
  7424  0D42                     u10025:	
  7425  0D42  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7426  0D43  3EFF               	addlw	-1
  7427  0D44  1D03               	skipz
  7428  0D45  2D42               	goto	u10025
  7429  0D46  353C               	lslf	??_updateSwitchTap^(0+128),w
  7430  0D47  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7431  0D48  0086               	movwf	6
  7432  0D49  3002               	movlw	2	; select bank4/5
  7433  0D4A  0087               	movwf	7
  7434  0D4B  0020               	movlb	0	; select bank0
  7435  0D4C  0852               	movf	_tap_timer,w	;volatile
  7436  0D4D  3FC0               	movwi [0]fsr1
  7437  0D4E  0853               	movf	_tap_timer+1,w	;volatile
  7438  0D4F  3FC1               	movwi [1]fsr1
  7439  0D50  0854               	movf	_tap_timer+2,w	;volatile
  7440  0D51  3FC2               	movwi [2]fsr1
  7441  0D52  0855               	movf	_tap_timer+3,w	;volatile
  7442  0D53  3FC3               	movwi [3]fsr1
  7443                           
  7444                           ;SwitchTap.c: 129: tap_total += tap_timer;
  7445  0D54  0852               	movf	_tap_timer,w	;volatile
  7446  0D55  0024               	movlb	4	; select bank4
  7447  0D56  07BD               	addwf	_tap_total^(0+512),f
  7448  0D57  0020               	movlb	0	; select bank0
  7449  0D58  0853               	movf	_tap_timer+1,w	;volatile
  7450  0D59  0024               	movlb	4	; select bank4
  7451  0D5A  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  7452  0D5B  0020               	movlb	0	; select bank0
  7453  0D5C  0854               	movf	_tap_timer+2,w	;volatile
  7454  0D5D  0024               	movlb	4	; select bank4
  7455  0D5E  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  7456  0D5F  0020               	movlb	0	; select bank0
  7457  0D60  0855               	movf	_tap_timer+3,w	;volatile
  7458  0D61  0024               	movlb	4	; select bank4
  7459  0D62  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  7460  0D63                     l9060:	
  7461                           
  7462                           ;SwitchTap.c: 130: }
  7463                           ;SwitchTap.c: 132: baseline_mod_time = tap_total / tapCntDivisor;
  7464  0D63  0021               	movlb	1	; select bank1
  7465  0D64  0842               	movf	updateSwitchTap@tapCntDivisor^(0+128),w
  7466  0D65  00A0               	movwf	___aldiv@divisor^(0+128)
  7467  0D66  0843               	movf	(updateSwitchTap@tapCntDivisor+1)^(0+128),w
  7468  0D67  00A1               	movwf	(___aldiv@divisor+1)^(0+128)
  7469  0D68  0D89               	rlf	9,f
  7470  0D69  3B89               	subwfb	9,f
  7471  0D6A  0989               	comf	9,f
  7472  0D6B  00A2               	movwf	(___aldiv@divisor+2)^(0+128)
  7473  0D6C  00A3               	movwf	(___aldiv@divisor+3)^(0+128)
  7474  0D6D  0024               	movlb	4	; select bank4
  7475  0D6E  0840               	movf	(_tap_total+3)^(0+512),w
  7476  0D6F  0021               	movlb	1	; select bank1
  7477  0D70  00A7               	movwf	(___aldiv@dividend+3)^(0+128)
  7478  0D71  0024               	movlb	4	; select bank4
  7479  0D72  083F               	movf	(_tap_total+2)^(0+512),w
  7480  0D73  0021               	movlb	1	; select bank1
  7481  0D74  00A6               	movwf	(___aldiv@dividend+2)^(0+128)
  7482  0D75  0024               	movlb	4	; select bank4
  7483  0D76  083E               	movf	(_tap_total+1)^(0+512),w
  7484  0D77  0021               	movlb	1	; select bank1
  7485  0D78  00A5               	movwf	(___aldiv@dividend+1)^(0+128)
  7486  0D79  0024               	movlb	4	; select bank4
  7487  0D7A  083D               	movf	_tap_total^(0+512),w
  7488  0D7B  0021               	movlb	1	; select bank1
  7489  0D7C  00A4               	movwf	___aldiv@dividend^(0+128)
  7490  0D7D  3198  20A8         	fcall	___aldiv
  7491  0D7F  0021               	movlb	1	; select bank1
  7492  0D80  0823               	movf	(?___aldiv+3)^(0+128),w
  7493  0D81  0020               	movlb	0	; select bank0
  7494  0D82  00C3               	movwf	_baseline_mod_time+3	;volatile
  7495  0D83  0021               	movlb	1	; select bank1
  7496  0D84  0822               	movf	(?___aldiv+2)^(0+128),w
  7497  0D85  0020               	movlb	0	; select bank0
  7498  0D86  00C2               	movwf	_baseline_mod_time+2	;volatile
  7499  0D87  0021               	movlb	1	; select bank1
  7500  0D88  0821               	movf	(?___aldiv+1)^(0+128),w
  7501  0D89  0020               	movlb	0	; select bank0
  7502  0D8A  00C1               	movwf	_baseline_mod_time+1	;volatile
  7503  0D8B  0021               	movlb	1	; select bank1
  7504  0D8C  0820               	movf	?___aldiv^(0+128),w
  7505  0D8D  0020               	movlb	0	; select bank0
  7506  0D8E  00C0               	movwf	_baseline_mod_time	;volatile
  7507                           
  7508                           ;SwitchTap.c: 133: mod_time_changed = 1;
  7509  0D8F  0023               	movlb	3	; select bank3
  7510  0D90  01E4               	clrf	_mod_time_changed^(0+384)
  7511  0D91  0AE4               	incf	_mod_time_changed^(0+384),f
  7512                           
  7513                           ;SwitchTap.c: 134: tap_timer = 0;
  7514  0D92  3000               	movlw	0
  7515  0D93  0020               	movlb	0	; select bank0
  7516  0D94  00D5               	movwf	_tap_timer+3	;volatile
  7517  0D95  3000               	movlw	0
  7518  0D96  00D4               	movwf	_tap_timer+2	;volatile
  7519  0D97  3000               	movlw	0
  7520  0D98  00D3               	movwf	_tap_timer+1	;volatile
  7521  0D99  3000               	movlw	0
  7522  0D9A  00D2               	movwf	_tap_timer	;volatile
  7523                           
  7524                           ;SwitchTap.c: 136: tap_iteration++;
  7525  0D9B  3001               	movlw	1
  7526  0D9C  0023               	movlb	3	; select bank3
  7527  0D9D  07DD               	addwf	_tap_iteration^(0+384),f
  7528  0D9E  3000               	movlw	0
  7529  0D9F  3DDE               	addwfc	(_tap_iteration+1)^(0+384),f
  7530                           
  7531                           ;SwitchTap.c: 137: }
  7532                           ;SwitchTap.c: 139: } else if (switchTap_pressed >= 25) {
  7533  0DA0  0008               	return
  7534  0DA1                     l9068:	
  7535  0DA1  3019               	movlw	25
  7536  0DA2  0022               	movlb	2	; select bank2
  7537  0DA3  026B               	subwf	_switchTap_pressed^(0+256),w
  7538  0DA4  1C03               	skipc
  7539  0DA5  0008               	return
  7540                           
  7541                           ;SwitchTap.c: 140: switchTap_down = 0;
  7542  0DA6  0023               	movlb	3	; select bank3
  7543  0DA7  01CB               	clrf	_switchTap_down^(0+384)
  7544                           
  7545                           ;SwitchTap.c: 141: switchTap_state = 0;
  7546  0DA8  01E6               	clrf	_switchTap_state^(0+384)
  7547                           
  7548                           ;SwitchTap.c: 147: setLongTapState(0);
  7549  0DA9  3000               	movlw	0
  7550  0DAA  0021               	movlb	1	; select bank1
  7551  0DAB  00A0               	movwf	setLongTapState@f_state^(0+128)
  7552  0DAC  00A1               	movwf	(setLongTapState@f_state+1)^(0+128)
  7553  0DAD  31AD  2591         	fcall	_setLongTapState
  7554                           
  7555                           ;SwitchTap.c: 149: longTap_timer = 0;
  7556  0DAF  0023               	movlb	3	; select bank3
  7557  0DB0  01B8               	clrf	_longTap_timer^(0+384)	;volatile
  7558  0DB1  01B9               	clrf	(_longTap_timer+1)^(0+384)	;volatile
  7559                           
  7560                           ;SwitchTap.c: 150: longTap_start = 0;
  7561  0DB2  01C5               	clrf	_longTap_start^(0+384)
  7562                           
  7563                           ;SwitchTap.c: 152: switchTap_pressed = 25;
  7564  0DB3  3019               	movlw	25
  7565  0DB4  0021               	movlb	1	; select bank1
  7566  0DB5  00BC               	movwf	??_updateSwitchTap^(0+128)
  7567  0DB6  083C               	movf	??_updateSwitchTap^(0+128),w
  7568  0DB7  0022               	movlb	2	; select bank2
  7569  0DB8  00EB               	movwf	_switchTap_pressed^(0+256)
  7570  0DB9  0008               	return
  7571  0DBA                     __end_of_updateSwitchTap:	
  7572                           
  7573                           	psect	text4
  7574  2D91                     __ptext4:	
  7575 ;; *************** function _setLongTapState *****************
  7576 ;; Defined at:
  7577 ;;		line 167 in file "SwitchTap.c"
  7578 ;; Parameters:    Size  Location     Type
  7579 ;;  f_state         2    0[BANK1 ] int 
  7580 ;; Auto vars:     Size  Location     Type
  7581 ;;		None
  7582 ;; Return value:  Size  Location     Type
  7583 ;;                  1    wreg      void 
  7584 ;; Registers used:
  7585 ;;		wreg, status,0
  7586 ;; Tracked objects:
  7587 ;;		On entry : 0/0
  7588 ;;		On exit  : 0/0
  7589 ;;		Unchanged: 0/0
  7590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7591 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7592 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7593 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7594 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7595 ;;Total ram usage:        4 bytes
  7596 ;; Hardware stack levels used:    1
  7597 ;; Hardware stack levels required when called:    3
  7598 ;; This function calls:
  7599 ;;		Nothing
  7600 ;; This function is called by:
  7601 ;;		_updateSwitchTap
  7602 ;; This function uses a non-reentrant model
  7603 ;;
  7604                           
  7605                           
  7606                           ;psect for function _setLongTapState
  7607  2D91                     _setLongTapState:	
  7608                           
  7609                           ;SwitchTap.c: 168: if (longTap_state == f_state) {return;}
  7610                           
  7611                           ;incstack = 0
  7612                           ; Regs used in _setLongTapState: [wreg+status,0]
  7613  2D91  0020               	movlb	0	; select bank0
  7614  2D92  084F               	movf	_longTap_state,w	;volatile
  7615  2D93  0021               	movlb	1	; select bank1
  7616  2D94  00A2               	movwf	??_setLongTapState^(0+128)
  7617  2D95  01A3               	clrf	(??_setLongTapState^(0+128)+1)
  7618  2D96  0821               	movf	(setLongTapState@f_state+1)^(0+128),w
  7619  2D97  0623               	xorwf	(??_setLongTapState+1)^(0+128),w
  7620  2D98  1D03               	skipz
  7621  2D99  2D9C               	goto	u9065
  7622  2D9A  0820               	movf	setLongTapState@f_state^(0+128),w
  7623  2D9B  0622               	xorwf	??_setLongTapState^(0+128),w
  7624  2D9C                     u9065:	
  7625  2D9C  1903               	btfsc	3,2
  7626  2D9D  0008               	return
  7627                           
  7628                           ;SwitchTap.c: 169: longTap_state = f_state;
  7629  2D9E  0820               	movf	setLongTapState@f_state^(0+128),w
  7630  2D9F  00A2               	movwf	??_setLongTapState^(0+128)
  7631  2DA0  0822               	movf	??_setLongTapState^(0+128),w
  7632  2DA1  0020               	movlb	0	; select bank0
  7633  2DA2  00CF               	movwf	_longTap_state	;volatile
  7634                           
  7635                           ;SwitchTap.c: 170: LATBbits.LATB5 = f_state;
  7636  2DA3  0021               	movlb	1	; select bank1
  7637  2DA4  0C20               	rrf	setLongTapState@f_state^(0+128),w
  7638  2DA5  0022               	movlb	2	; select bank2
  7639  2DA6  1C03               	skipc
  7640  2DA7  128D               	bcf	13,5	;volatile
  7641  2DA8  1803               	skipnc
  7642  2DA9  168D               	bsf	13,5	;volatile
  7643  2DAA  0008               	return
  7644  2DAB                     __end_of_setLongTapState:	
  7645                           
  7646                           	psect	text5
  7647  18A8                     __ptext5:	
  7648 ;; *************** function ___aldiv *****************
  7649 ;; Defined at:
  7650 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
  7651 ;; Parameters:    Size  Location     Type
  7652 ;;  divisor         4    0[BANK1 ] long 
  7653 ;;  dividend        4    4[BANK1 ] long 
  7654 ;; Auto vars:     Size  Location     Type
  7655 ;;  quotient        4   11[BANK1 ] long 
  7656 ;;  sign            1   10[BANK1 ] unsigned char 
  7657 ;;  counter         1    9[BANK1 ] unsigned char 
  7658 ;; Return value:  Size  Location     Type
  7659 ;;                  4    0[BANK1 ] long 
  7660 ;; Registers used:
  7661 ;;		wreg, status,2, status,0
  7662 ;; Tracked objects:
  7663 ;;		On entry : 0/0
  7664 ;;		On exit  : 0/0
  7665 ;;		Unchanged: 0/0
  7666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7667 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7668 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7669 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7670 ;;      Totals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7671 ;;Total ram usage:       15 bytes
  7672 ;; Hardware stack levels used:    1
  7673 ;; Hardware stack levels required when called:    3
  7674 ;; This function calls:
  7675 ;;		Nothing
  7676 ;; This function is called by:
  7677 ;;		_updateSwitchTap
  7678 ;; This function uses a non-reentrant model
  7679 ;;
  7680                           
  7681                           
  7682                           ;psect for function ___aldiv
  7683  18A8                     ___aldiv:	
  7684                           
  7685                           ;incstack = 0
  7686                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  7687  18A8  0021               	movlb	1	; select bank1
  7688  18A9  01AA               	clrf	___aldiv@sign^(0+128)
  7689  18AA  1FA3               	btfss	(___aldiv@divisor+3)^(0+128),7
  7690  18AB  28B9               	goto	l2045
  7691  18AC  09A0               	comf	___aldiv@divisor^(0+128),f
  7692  18AD  09A1               	comf	(___aldiv@divisor+1)^(0+128),f
  7693  18AE  09A2               	comf	(___aldiv@divisor+2)^(0+128),f
  7694  18AF  09A3               	comf	(___aldiv@divisor+3)^(0+128),f
  7695  18B0  0AA0               	incf	___aldiv@divisor^(0+128),f
  7696  18B1  1903               	skipnz
  7697  18B2  0AA1               	incf	(___aldiv@divisor+1)^(0+128),f
  7698  18B3  1903               	skipnz
  7699  18B4  0AA2               	incf	(___aldiv@divisor+2)^(0+128),f
  7700  18B5  1903               	skipnz
  7701  18B6  0AA3               	incf	(___aldiv@divisor+3)^(0+128),f
  7702  18B7  01AA               	clrf	___aldiv@sign^(0+128)
  7703  18B8  0AAA               	incf	___aldiv@sign^(0+128),f
  7704  18B9                     l2045:	
  7705  18B9  1FA7               	btfss	(___aldiv@dividend+3)^(0+128),7
  7706  18BA  28CA               	goto	l8634
  7707  18BB  09A4               	comf	___aldiv@dividend^(0+128),f
  7708  18BC  09A5               	comf	(___aldiv@dividend+1)^(0+128),f
  7709  18BD  09A6               	comf	(___aldiv@dividend+2)^(0+128),f
  7710  18BE  09A7               	comf	(___aldiv@dividend+3)^(0+128),f
  7711  18BF  0AA4               	incf	___aldiv@dividend^(0+128),f
  7712  18C0  1903               	skipnz
  7713  18C1  0AA5               	incf	(___aldiv@dividend+1)^(0+128),f
  7714  18C2  1903               	skipnz
  7715  18C3  0AA6               	incf	(___aldiv@dividend+2)^(0+128),f
  7716  18C4  1903               	skipnz
  7717  18C5  0AA7               	incf	(___aldiv@dividend+3)^(0+128),f
  7718  18C6  3001               	movlw	1
  7719  18C7  00A8               	movwf	??___aldiv^(0+128)
  7720  18C8  0828               	movf	??___aldiv^(0+128),w
  7721  18C9  06AA               	xorwf	___aldiv@sign^(0+128),f
  7722  18CA                     l8634:	
  7723  18CA  3000               	movlw	0
  7724  18CB  00AE               	movwf	(___aldiv@quotient+3)^(0+128)
  7725  18CC  3000               	movlw	0
  7726  18CD  00AD               	movwf	(___aldiv@quotient+2)^(0+128)
  7727  18CE  3000               	movlw	0
  7728  18CF  00AC               	movwf	(___aldiv@quotient+1)^(0+128)
  7729  18D0  3000               	movlw	0
  7730  18D1  00AB               	movwf	___aldiv@quotient^(0+128)
  7731  18D2  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7732  18D3  0422               	iorwf	(___aldiv@divisor+2)^(0+128),w
  7733  18D4  0421               	iorwf	(___aldiv@divisor+1)^(0+128),w
  7734  18D5  0420               	iorwf	___aldiv@divisor^(0+128),w
  7735  18D6  1903               	skipnz
  7736  18D7  2913               	goto	l8656
  7737  18D8  01A9               	clrf	___aldiv@counter^(0+128)
  7738  18D9  0AA9               	incf	___aldiv@counter^(0+128),f
  7739  18DA                     l8642:	
  7740  18DA  1BA3               	btfsc	(___aldiv@divisor+3)^(0+128),7
  7741  18DB  28E8               	goto	l8644
  7742  18DC  3001               	movlw	1
  7743  18DD                     u9145:	
  7744  18DD  35A0               	lslf	___aldiv@divisor^(0+128),f
  7745  18DE  0DA1               	rlf	(___aldiv@divisor+1)^(0+128),f
  7746  18DF  0DA2               	rlf	(___aldiv@divisor+2)^(0+128),f
  7747  18E0  0DA3               	rlf	(___aldiv@divisor+3)^(0+128),f
  7748  18E1  0B89               	decfsz	9,f
  7749  18E2  28DD               	goto	u9145
  7750  18E3  3001               	movlw	1
  7751  18E4  00A8               	movwf	??___aldiv^(0+128)
  7752  18E5  0828               	movf	??___aldiv^(0+128),w
  7753  18E6  07A9               	addwf	___aldiv@counter^(0+128),f
  7754  18E7  28DA               	goto	l8642
  7755  18E8                     l8644:	
  7756  18E8  3001               	movlw	1
  7757  18E9                     u9165:	
  7758  18E9  35AB               	lslf	___aldiv@quotient^(0+128),f
  7759  18EA  0DAC               	rlf	(___aldiv@quotient+1)^(0+128),f
  7760  18EB  0DAD               	rlf	(___aldiv@quotient+2)^(0+128),f
  7761  18EC  0DAE               	rlf	(___aldiv@quotient+3)^(0+128),f
  7762  18ED  0B89               	decfsz	9,f
  7763  18EE  28E9               	goto	u9165
  7764  18EF  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7765  18F0  0227               	subwf	(___aldiv@dividend+3)^(0+128),w
  7766  18F1  1D03               	skipz
  7767  18F2  28FD               	goto	u9175
  7768  18F3  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7769  18F4  0226               	subwf	(___aldiv@dividend+2)^(0+128),w
  7770  18F5  1D03               	skipz
  7771  18F6  28FD               	goto	u9175
  7772  18F7  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  7773  18F8  0225               	subwf	(___aldiv@dividend+1)^(0+128),w
  7774  18F9  1D03               	skipz
  7775  18FA  28FD               	goto	u9175
  7776  18FB  0820               	movf	___aldiv@divisor^(0+128),w
  7777  18FC  0224               	subwf	___aldiv@dividend^(0+128),w
  7778  18FD                     u9175:	
  7779  18FD  1C03               	skipc
  7780  18FE  2908               	goto	l8652
  7781  18FF  0820               	movf	___aldiv@divisor^(0+128),w
  7782  1900  02A4               	subwf	___aldiv@dividend^(0+128),f
  7783  1901  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  7784  1902  3BA5               	subwfb	(___aldiv@dividend+1)^(0+128),f
  7785  1903  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7786  1904  3BA6               	subwfb	(___aldiv@dividend+2)^(0+128),f
  7787  1905  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7788  1906  3BA7               	subwfb	(___aldiv@dividend+3)^(0+128),f
  7789  1907  142B               	bsf	___aldiv@quotient^(0+128),0
  7790  1908                     l8652:	
  7791  1908  3001               	movlw	1
  7792  1909                     u9185:	
  7793  1909  36A3               	lsrf	(___aldiv@divisor+3)^(0+128),f
  7794  190A  0CA2               	rrf	(___aldiv@divisor+2)^(0+128),f
  7795  190B  0CA1               	rrf	(___aldiv@divisor+1)^(0+128),f
  7796  190C  0CA0               	rrf	___aldiv@divisor^(0+128),f
  7797  190D  0B89               	decfsz	9,f
  7798  190E  2909               	goto	u9185
  7799  190F  3001               	movlw	1
  7800  1910  02A9               	subwf	___aldiv@counter^(0+128),f
  7801  1911  1D03               	btfss	3,2
  7802  1912  28E8               	goto	l8644
  7803  1913                     l8656:	
  7804  1913  082A               	movf	___aldiv@sign^(0+128),w
  7805  1914  1903               	btfsc	3,2
  7806  1915  2921               	goto	l8660
  7807  1916  09AB               	comf	___aldiv@quotient^(0+128),f
  7808  1917  09AC               	comf	(___aldiv@quotient+1)^(0+128),f
  7809  1918  09AD               	comf	(___aldiv@quotient+2)^(0+128),f
  7810  1919  09AE               	comf	(___aldiv@quotient+3)^(0+128),f
  7811  191A  0AAB               	incf	___aldiv@quotient^(0+128),f
  7812  191B  1903               	skipnz
  7813  191C  0AAC               	incf	(___aldiv@quotient+1)^(0+128),f
  7814  191D  1903               	skipnz
  7815  191E  0AAD               	incf	(___aldiv@quotient+2)^(0+128),f
  7816  191F  1903               	skipnz
  7817  1920  0AAE               	incf	(___aldiv@quotient+3)^(0+128),f
  7818  1921                     l8660:	
  7819  1921  082E               	movf	(___aldiv@quotient+3)^(0+128),w
  7820  1922  00A3               	movwf	(?___aldiv+3)^(0+128)
  7821  1923  082D               	movf	(___aldiv@quotient+2)^(0+128),w
  7822  1924  00A2               	movwf	(?___aldiv+2)^(0+128)
  7823  1925  082C               	movf	(___aldiv@quotient+1)^(0+128),w
  7824  1926  00A1               	movwf	(?___aldiv+1)^(0+128)
  7825  1927  082B               	movf	___aldiv@quotient^(0+128),w
  7826  1928  00A0               	movwf	?___aldiv^(0+128)
  7827  1929  0008               	return
  7828  192A                     __end_of___aldiv:	
  7829                           
  7830                           	psect	text6
  7831  1241                     __ptext6:	
  7832 ;; *************** function _updateSwitchBypass *****************
  7833 ;; Defined at:
  7834 ;;		line 34 in file "SwitchBypass.c"
  7835 ;; Parameters:    Size  Location     Type
  7836 ;;		None
  7837 ;; Auto vars:     Size  Location     Type
  7838 ;;		None
  7839 ;; Return value:  Size  Location     Type
  7840 ;;                  1    wreg      void 
  7841 ;; Registers used:
  7842 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7843 ;; Tracked objects:
  7844 ;;		On entry : 0/0
  7845 ;;		On exit  : 0/0
  7846 ;;		Unchanged: 0/0
  7847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7850 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7851 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7852 ;;Total ram usage:        2 bytes
  7853 ;; Hardware stack levels used:    1
  7854 ;; Hardware stack levels required when called:    8
  7855 ;; This function calls:
  7856 ;;		_setDoublePressState
  7857 ;;		_setLongBypassState
  7858 ;;		_setSwitchBypassRelays
  7859 ;;		_setSwitchBypassState
  7860 ;; This function is called by:
  7861 ;;		_main
  7862 ;; This function uses a non-reentrant model
  7863 ;;
  7864                           
  7865                           
  7866                           ;psect for function _updateSwitchBypass
  7867  1241                     _updateSwitchBypass:	
  7868                           
  7869                           ;SwitchBypass.c: 41: if (PORTEbits.RE1 == 0) {
  7870                           
  7871                           ;incstack = 0
  7872                           ; Regs used in _updateSwitchBypass: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7873  1241  0020               	movlb	0	; select bank0
  7874  1242  1890               	btfsc	16,1	;volatile
  7875  1243  2A57               	goto	l8870
  7876                           
  7877                           ;SwitchBypass.c: 42: if (switchBypass_pressed > 0) {
  7878  1244  0023               	movlb	3	; select bank3
  7879  1245  083B               	movf	(_switchBypass_pressed+1)^(0+384),w
  7880  1246  3A80               	xorlw	128
  7881  1247  0021               	movlb	1	; select bank1
  7882  1248  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7883  1249  3080               	movlw	128
  7884  124A  023C               	subwf	??_updateSwitchBypass^(0+128),w
  7885  124B  1D03               	skipz
  7886  124C  2A50               	goto	u9565
  7887  124D  3001               	movlw	1
  7888  124E  0023               	movlb	3	; select bank3
  7889  124F  023A               	subwf	_switchBypass_pressed^(0+384),w
  7890  1250                     u9565:	
  7891  1250  1C03               	skipc
  7892  1251  2A6A               	goto	l8874
  7893                           
  7894                           ;SwitchBypass.c: 43: switchBypass_pressed--;
  7895  1252  30FF               	movlw	255
  7896  1253  0023               	movlb	3	; select bank3
  7897  1254  07BA               	addwf	_switchBypass_pressed^(0+384),f
  7898  1255  30FF               	movlw	255
  7899  1256  2A69               	goto	L1
  7900  1257                     l8870:	
  7901                           ;SwitchBypass.c: 44: }
  7902                           ;SwitchBypass.c: 45: } else if (switchBypass_pressed < 25) {
  7903                           
  7904  1257  0023               	movlb	3	; select bank3
  7905  1258  083B               	movf	(_switchBypass_pressed+1)^(0+384),w
  7906  1259  3A80               	xorlw	128
  7907  125A  0021               	movlb	1	; select bank1
  7908  125B  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7909  125C  3080               	movlw	128
  7910  125D  023C               	subwf	??_updateSwitchBypass^(0+128),w
  7911  125E  1D03               	skipz
  7912  125F  2A63               	goto	u9575
  7913  1260  3019               	movlw	25
  7914  1261  0023               	movlb	3	; select bank3
  7915  1262  023A               	subwf	_switchBypass_pressed^(0+384),w
  7916  1263                     u9575:	
  7917  1263  1803               	skipnc
  7918  1264  2A6A               	goto	l8874
  7919                           
  7920                           ;SwitchBypass.c: 46: switchBypass_pressed++;
  7921  1265  3001               	movlw	1
  7922  1266  0023               	movlb	3	; select bank3
  7923  1267  07BA               	addwf	_switchBypass_pressed^(0+384),f
  7924  1268  3000               	movlw	0
  7925  1269                     L1:	
  7926  1269  3DBB               	addwfc	(_switchBypass_pressed+1)^(0+384),f
  7927  126A                     l8874:	
  7928                           
  7929                           ;SwitchBypass.c: 47: }
  7930                           ;SwitchBypass.c: 53: if (switchBypass_pressed == 0) {
  7931  126A  0023               	movlb	3	; select bank3
  7932  126B  083A               	movf	_switchBypass_pressed^(0+384),w
  7933  126C  043B               	iorwf	(_switchBypass_pressed+1)^(0+384),w
  7934  126D  1D03               	btfss	3,2
  7935  126E  2AF2               	goto	l8934
  7936                           
  7937                           ;SwitchBypass.c: 56: if (longBypass_start == 0) {
  7938  126F  0844               	movf	_longBypass_start^(0+384),w
  7939  1270  1D03               	btfss	3,2
  7940  1271  2A76               	goto	l8882
  7941                           
  7942                           ;SwitchBypass.c: 57: longBypass_start = 1;
  7943  1272  01C4               	clrf	_longBypass_start^(0+384)
  7944  1273  0AC4               	incf	_longBypass_start^(0+384),f
  7945                           
  7946                           ;SwitchBypass.c: 58: longBypass_timer = 0;
  7947  1274  01B6               	clrf	_longBypass_timer^(0+384)	;volatile
  7948  1275  01B7               	clrf	(_longBypass_timer+1)^(0+384)	;volatile
  7949  1276                     l8882:	
  7950                           
  7951                           ;SwitchBypass.c: 59: }
  7952                           ;SwitchBypass.c: 61: if (longBypass_timer >= long_press_limit && longBypass_down == 0 &&
      +                           doubleTap_state == 0) {
  7953  1276  0020               	movlb	0	; select bank0
  7954  1277  084B               	movf	_long_press_limit+1,w
  7955  1278  0023               	movlb	3	; select bank3
  7956  1279  0237               	subwf	(_longBypass_timer+1)^(0+384),w	;volatile
  7957  127A  1D03               	skipz
  7958  127B  2A80               	goto	u9605
  7959  127C  0020               	movlb	0	; select bank0
  7960  127D  084A               	movf	_long_press_limit,w
  7961  127E  0023               	movlb	3	; select bank3
  7962  127F  0236               	subwf	_longBypass_timer^(0+384),w	;volatile
  7963  1280                     u9605:	
  7964  1280  1C03               	skipc
  7965  1281  2ABF               	goto	l8908
  7966  1282  0842               	movf	_longBypass_down^(0+384),w
  7967  1283  1D03               	btfss	3,2
  7968  1284  2ABF               	goto	l8908
  7969  1285  0020               	movlb	0	; select bank0
  7970  1286  085C               	movf	_doubleTap_state,w	;volatile
  7971  1287  1D03               	btfss	3,2
  7972  1288  2ABF               	goto	l8908
  7973                           
  7974                           ;SwitchBypass.c: 64: LATBbits.LATB2 = 0;
  7975  1289  0022               	movlb	2	; select bank2
  7976  128A  110D               	bcf	13,2	;volatile
  7977                           
  7978                           ;SwitchBypass.c: 65: if (longTap_start != 1 ) {
  7979  128B  0023               	movlb	3	; select bank3
  7980  128C  0345               	decf	_longTap_start^(0+384),w
  7981  128D  1903               	btfsc	3,2
  7982  128E  2AB7               	goto	l8906
  7983                           
  7984                           ;SwitchBypass.c: 66: if (switchBypass_state == 1) {
  7985  128F  0020               	movlb	0	; select bank0
  7986  1290  0351               	decf	_switchBypass_state,w
  7987  1291  1D03               	btfss	3,2
  7988  1292  2ABF               	goto	l8908
  7989                           
  7990                           ;SwitchBypass.c: 67: longBypass_down = 1;
  7991  1293  0023               	movlb	3	; select bank3
  7992  1294  01C2               	clrf	_longBypass_down^(0+384)
  7993  1295  0AC2               	incf	_longBypass_down^(0+384),f
  7994                           
  7995                           ;SwitchBypass.c: 68: if (longBypass_state == 0) {
  7996  1296  0020               	movlb	0	; select bank0
  7997  1297  085D               	movf	_longBypass_state,w	;volatile
  7998  1298  1D03               	btfss	3,2
  7999  1299  2AA5               	goto	l8902
  8000                           
  8001                           ;SwitchBypass.c: 69: LATBbits.LATB2 = 0;
  8002  129A  0022               	movlb	2	; select bank2
  8003  129B  110D               	bcf	13,2	;volatile
  8004                           
  8005                           ;SwitchBypass.c: 70: setLongBypassState(1);
  8006  129C  3001               	movlw	1
  8007  129D  0021               	movlb	1	; select bank1
  8008  129E  00A0               	movwf	setLongBypassState@f_state^(0+128)
  8009  129F  3000               	movlw	0
  8010  12A0  00A1               	movwf	(setLongBypassState@f_state^(0+128)+1)
  8011  12A1  31AE  2619  3192   	fcall	_setLongBypassState
  8012                           
  8013                           ;SwitchBypass.c: 71: } else {
  8014  12A4  2ABF               	goto	l8908
  8015  12A5                     l8902:	
  8016                           
  8017                           ;SwitchBypass.c: 72: setSwitchBypassState(1);
  8018  12A5  3001               	movlw	1
  8019  12A6  0021               	movlb	1	; select bank1
  8020  12A7  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  8021  12A8  3000               	movlw	0
  8022  12A9  00B7               	movwf	(setSwitchBypassState@f_state^(0+128)+1)
  8023  12AA  31AD  25E1  3192   	fcall	_setSwitchBypassState
  8024                           
  8025                           ;SwitchBypass.c: 73: setLongBypassState(0);
  8026  12AD  3000               	movlw	0
  8027  12AE  0021               	movlb	1	; select bank1
  8028  12AF  00A0               	movwf	setLongBypassState@f_state^(0+128)
  8029  12B0  00A1               	movwf	(setLongBypassState@f_state+1)^(0+128)
  8030  12B1  31AE  2619  3192   	fcall	_setLongBypassState
  8031                           
  8032                           ;SwitchBypass.c: 74: LATBbits.LATB2 = 1;
  8033  12B4  0022               	movlb	2	; select bank2
  8034  12B5  150D               	bsf	13,2	;volatile
  8035                           
  8036                           ;SwitchBypass.c: 75: }
  8037                           ;SwitchBypass.c: 76: }
  8038                           ;SwitchBypass.c: 77: } else {
  8039  12B6  2ABF               	goto	l8908
  8040  12B7                     l8906:	
  8041                           
  8042                           ;SwitchBypass.c: 78: setDoublePressState(1);
  8043  12B7  3001               	movlw	1
  8044  12B8  0021               	movlb	1	; select bank1
  8045  12B9  00B8               	movwf	setDoublePressState@f_state^(0+128)
  8046  12BA  3000               	movlw	0
  8047  12BB  00B9               	movwf	(setDoublePressState@f_state^(0+128)+1)
  8048  12BC  31A1  2160  3192   	fcall	_setDoublePressState
  8049  12BF                     l8908:	
  8050                           
  8051                           ;SwitchBypass.c: 79: }
  8052                           ;SwitchBypass.c: 80: }
  8053                           ;SwitchBypass.c: 83: if (doubleTap_state == 0 && longBypass_down == 0) {
  8054  12BF  0020               	movlb	0	; select bank0
  8055  12C0  085C               	movf	_doubleTap_state,w	;volatile
  8056  12C1  1D03               	btfss	3,2
  8057  12C2  2AEE               	goto	l8932
  8058  12C3  0023               	movlb	3	; select bank3
  8059  12C4  0842               	movf	_longBypass_down^(0+384),w
  8060  12C5  1D03               	btfss	3,2
  8061  12C6  2AEE               	goto	l8932
  8062                           
  8063                           ;SwitchBypass.c: 84: if (switchBypass_state == 1) {
  8064  12C7  0020               	movlb	0	; select bank0
  8065  12C8  0351               	decf	_switchBypass_state,w
  8066  12C9  1D03               	btfss	3,2
  8067  12CA  2AD9               	goto	l8920
  8068                           
  8069                           ;SwitchBypass.c: 86: if (switchBypass_up == 1) {
  8070  12CB  0024               	movlb	4	; select bank4
  8071  12CC  0368               	decf	_switchBypass_up^(0+512),w
  8072  12CD  0469               	iorwf	(_switchBypass_up+1)^(0+512),w
  8073  12CE  1D03               	btfss	3,2
  8074  12CF  2AEE               	goto	l8932
  8075                           
  8076                           ;SwitchBypass.c: 87: currentBypassState = 1;
  8077  12D0  0023               	movlb	3	; select bank3
  8078  12D1  01E0               	clrf	_currentBypassState^(0+384)
  8079  12D2  0AE0               	incf	_currentBypassState^(0+384),f
  8080                           
  8081                           ;SwitchBypass.c: 88: switchBypass_toggle = 1;
  8082  12D3  3001               	movlw	1
  8083  12D4  0024               	movlb	4	; select bank4
  8084  12D5  00D9               	movwf	_switchBypass_toggle^(0+512)
  8085  12D6  3000               	movlw	0
  8086  12D7  00DA               	movwf	(_switchBypass_toggle^(0+512)+1)
  8087                           
  8088                           ;SwitchBypass.c: 89: }
  8089                           ;SwitchBypass.c: 90: } else {
  8090  12D8  2AEE               	goto	l8932
  8091  12D9                     l8920:	
  8092                           
  8093                           ;SwitchBypass.c: 91: if (bypass_turning_on != 1) {
  8094  12D9  0023               	movlb	3	; select bank3
  8095  12DA  0340               	decf	_bypass_turning_on^(0+384),w
  8096  12DB  1903               	btfsc	3,2
  8097  12DC  2AEE               	goto	l8932
  8098                           
  8099                           ;SwitchBypass.c: 93: currentBypassState = 0;
  8100  12DD  01E0               	clrf	_currentBypassState^(0+384)
  8101                           
  8102                           ;SwitchBypass.c: 95: bypass_turning_on = 1;
  8103  12DE  01C0               	clrf	_bypass_turning_on^(0+384)
  8104  12DF  0AC0               	incf	_bypass_turning_on^(0+384),f
  8105                           
  8106                           ;SwitchBypass.c: 96: switchBypass_toggle = 0;
  8107  12E0  0024               	movlb	4	; select bank4
  8108  12E1  01D9               	clrf	_switchBypass_toggle^(0+512)
  8109  12E2  01DA               	clrf	(_switchBypass_toggle+1)^(0+512)
  8110                           
  8111                           ;SwitchBypass.c: 98: longBypass_save = longBypass_state;
  8112  12E3  0020               	movlb	0	; select bank0
  8113  12E4  085D               	movf	_longBypass_state,w	;volatile
  8114  12E5  0021               	movlb	1	; select bank1
  8115  12E6  00BC               	movwf	??_updateSwitchBypass^(0+128)
  8116  12E7  083C               	movf	??_updateSwitchBypass^(0+128),w
  8117  12E8  0023               	movlb	3	; select bank3
  8118  12E9  00C3               	movwf	_longBypass_save^(0+384)
  8119                           
  8120                           ;SwitchBypass.c: 99: longBypass_state = 0;
  8121  12EA  0020               	movlb	0	; select bank0
  8122  12EB  01DD               	clrf	_longBypass_state	;volatile
  8123                           
  8124                           ;SwitchBypass.c: 100: longBypass_start = 0;
  8125  12EC  0023               	movlb	3	; select bank3
  8126  12ED  01C4               	clrf	_longBypass_start^(0+384)
  8127  12EE                     l8932:	
  8128                           
  8129                           ;SwitchBypass.c: 101: }
  8130                           ;SwitchBypass.c: 102: }
  8131                           ;SwitchBypass.c: 104: }
  8132                           ;SwitchBypass.c: 105: switchBypass_up = 0;
  8133  12EE  0024               	movlb	4	; select bank4
  8134  12EF  01E8               	clrf	_switchBypass_up^(0+512)
  8135  12F0  01E9               	clrf	(_switchBypass_up+1)^(0+512)
  8136                           
  8137                           ;SwitchBypass.c: 106: } else if (switchBypass_pressed >= 25) {
  8138  12F1  0008               	return
  8139  12F2                     l8934:	
  8140  12F2  0023               	movlb	3	; select bank3
  8141  12F3  083B               	movf	(_switchBypass_pressed+1)^(0+384),w
  8142  12F4  3A80               	xorlw	128
  8143  12F5  0021               	movlb	1	; select bank1
  8144  12F6  00BC               	movwf	??_updateSwitchBypass^(0+128)
  8145  12F7  3080               	movlw	128
  8146  12F8  023C               	subwf	??_updateSwitchBypass^(0+128),w
  8147  12F9  1D03               	skipz
  8148  12FA  2AFE               	goto	u9715
  8149  12FB  3019               	movlw	25
  8150  12FC  0023               	movlb	3	; select bank3
  8151  12FD  023A               	subwf	_switchBypass_pressed^(0+384),w
  8152  12FE                     u9715:	
  8153  12FE  1C03               	skipc
  8154  12FF  0008               	return
  8155                           
  8156                           ;SwitchBypass.c: 107: if (doubleTap_state == 1) {
  8157  1300  0020               	movlb	0	; select bank0
  8158  1301  035C               	decf	_doubleTap_state,w	;volatile
  8159  1302  1D03               	btfss	3,2
  8160  1303  2B0D               	goto	l8940
  8161                           
  8162                           ;SwitchBypass.c: 108: setSwitchBypassState(currentBypassState);
  8163  1304  0023               	movlb	3	; select bank3
  8164  1305  0860               	movf	_currentBypassState^(0+384),w
  8165  1306  0021               	movlb	1	; select bank1
  8166  1307  00BC               	movwf	??_updateSwitchBypass^(0+128)
  8167  1308  01BD               	clrf	(??_updateSwitchBypass^(0+128)+1)
  8168  1309  083C               	movf	??_updateSwitchBypass^(0+128),w
  8169  130A  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  8170  130B  083D               	movf	(??_updateSwitchBypass+1)^(0+128),w
  8171  130C  2B3D               	goto	L2
  8172  130D                     l8940:	
  8173                           ;SwitchBypass.c: 109: } else if (bypass_turning_on == 1) {
  8174                           
  8175  130D  0023               	movlb	3	; select bank3
  8176  130E  0340               	decf	_bypass_turning_on^(0+384),w
  8177  130F  1D03               	btfss	3,2
  8178  1310  2B2D               	goto	l8950
  8179                           
  8180                           ;SwitchBypass.c: 111: if (longBypass_save == 1) {
  8181  1311  0343               	decf	_longBypass_save^(0+384),w
  8182  1312  1D03               	btfss	3,2
  8183  1313  2B27               	goto	l8948
  8184                           
  8185                           ;SwitchBypass.c: 112: LATBbits.LATB2 = 0;
  8186  1314  0022               	movlb	2	; select bank2
  8187  1315  110D               	bcf	13,2	;volatile
  8188                           
  8189                           ;SwitchBypass.c: 113: setLongBypassState(1);
  8190  1316  3001               	movlw	1
  8191  1317  0021               	movlb	1	; select bank1
  8192  1318  00A0               	movwf	setLongBypassState@f_state^(0+128)
  8193  1319  3000               	movlw	0
  8194  131A  00A1               	movwf	(setLongBypassState@f_state^(0+128)+1)
  8195  131B  31AE  2619  3192   	fcall	_setLongBypassState
  8196                           
  8197                           ;SwitchBypass.c: 114: setSwitchBypassRelays(1);
  8198  131E  3001               	movlw	1
  8199  131F  0021               	movlb	1	; select bank1
  8200  1320  00B2               	movwf	setSwitchBypassRelays@f_state^(0+128)
  8201  1321  3000               	movlw	0
  8202  1322  00B3               	movwf	(setSwitchBypassRelays@f_state^(0+128)+1)
  8203  1323  31AF  2792  3192   	fcall	_setSwitchBypassRelays
  8204                           
  8205                           ;SwitchBypass.c: 115: } else {
  8206  1326  2B41               	goto	l8958
  8207  1327                     l8948:	
  8208                           
  8209                           ;SwitchBypass.c: 116: setSwitchBypassState(1);
  8210  1327  3001               	movlw	1
  8211  1328  0021               	movlb	1	; select bank1
  8212  1329  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  8213  132A  3000               	movlw	0
  8214  132B  00B7               	movwf	(setSwitchBypassState@f_state^(0+128)+1)
  8215  132C  2B3E               	goto	L3
  8216  132D                     l8950:	
  8217                           ;SwitchBypass.c: 117: }
  8218                           ;SwitchBypass.c: 119: } else if (switchBypass_toggle == 1 && longBypass_down == 0 && dou
      +                          bleTap_state == 0) {
  8219                           
  8220  132D  0024               	movlb	4	; select bank4
  8221  132E  0359               	decf	_switchBypass_toggle^(0+512),w
  8222  132F  045A               	iorwf	(_switchBypass_toggle+1)^(0+512),w
  8223  1330  1D03               	btfss	3,2
  8224  1331  2B41               	goto	l8958
  8225  1332  0023               	movlb	3	; select bank3
  8226  1333  0842               	movf	_longBypass_down^(0+384),w
  8227  1334  1D03               	btfss	3,2
  8228  1335  2B41               	goto	l8958
  8229  1336  0020               	movlb	0	; select bank0
  8230  1337  085C               	movf	_doubleTap_state,w	;volatile
  8231  1338  1D03               	btfss	3,2
  8232  1339  2B41               	goto	l8958
  8233                           
  8234                           ;SwitchBypass.c: 120: setSwitchBypassState(0);
  8235  133A  3000               	movlw	0
  8236  133B  0021               	movlb	1	; select bank1
  8237  133C  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  8238  133D                     L2:	
  8239  133D  00B7               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
  8240  133E                     L3:	
  8241  133E  31AD  25E1  3192   	fcall	_setSwitchBypassState
  8242  1341                     l8958:	
  8243                           
  8244                           ;SwitchBypass.c: 121: }
  8245                           ;SwitchBypass.c: 123: longBypass_down = 0;
  8246  1341  0023               	movlb	3	; select bank3
  8247  1342  01C2               	clrf	_longBypass_down^(0+384)
  8248                           
  8249                           ;SwitchBypass.c: 124: if (longBypass_state == 0) {
  8250  1343  0020               	movlb	0	; select bank0
  8251  1344  085D               	movf	_longBypass_state,w	;volatile
  8252  1345  1D03               	btfss	3,2
  8253  1346  2B4D               	goto	l8964
  8254                           
  8255                           ;SwitchBypass.c: 125: LATBbits.LATB2 = switchBypass_state;
  8256  1347  0C51               	rrf	_switchBypass_state,w
  8257  1348  0022               	movlb	2	; select bank2
  8258  1349  1C03               	skipc
  8259  134A  110D               	bcf	13,2	;volatile
  8260  134B  1803               	skipnc
  8261  134C  150D               	bsf	13,2	;volatile
  8262  134D                     l8964:	
  8263                           
  8264                           ;SwitchBypass.c: 126: }
  8265                           ;SwitchBypass.c: 128: setDoublePressState(0);
  8266  134D  3000               	movlw	0
  8267  134E  0021               	movlb	1	; select bank1
  8268  134F  00B8               	movwf	setDoublePressState@f_state^(0+128)
  8269  1350  00B9               	movwf	(setDoublePressState@f_state+1)^(0+128)
  8270  1351  31A1  2160         	fcall	_setDoublePressState
  8271                           
  8272                           ;SwitchBypass.c: 129: longBypass_start = 0;
  8273  1353  0023               	movlb	3	; select bank3
  8274  1354  01C4               	clrf	_longBypass_start^(0+384)
  8275                           
  8276                           ;SwitchBypass.c: 130: bypass_turning_on = 0;
  8277  1355  01C0               	clrf	_bypass_turning_on^(0+384)
  8278                           
  8279                           ;SwitchBypass.c: 131: switchBypass_toggle = 0;
  8280  1356  0024               	movlb	4	; select bank4
  8281  1357  01D9               	clrf	_switchBypass_toggle^(0+512)
  8282  1358  01DA               	clrf	(_switchBypass_toggle+1)^(0+512)
  8283                           
  8284                           ;SwitchBypass.c: 132: switchBypass_up = 1;
  8285  1359  3001               	movlw	1
  8286  135A  00E8               	movwf	_switchBypass_up^(0+512)
  8287  135B  3000               	movlw	0
  8288  135C  00E9               	movwf	(_switchBypass_up^(0+512)+1)
  8289                           
  8290                           ;SwitchBypass.c: 134: switchBypass_pressed = 25;
  8291  135D  3019               	movlw	25
  8292  135E  0023               	movlb	3	; select bank3
  8293  135F  00BA               	movwf	_switchBypass_pressed^(0+384)
  8294  1360  3000               	movlw	0
  8295  1361  00BB               	movwf	(_switchBypass_pressed^(0+384)+1)
  8296  1362  0008               	return
  8297  1363                     __end_of_updateSwitchBypass:	
  8298                           
  8299                           	psect	text7
  8300  2E19                     __ptext7:	
  8301 ;; *************** function _setLongBypassState *****************
  8302 ;; Defined at:
  8303 ;;		line 164 in file "SwitchBypass.c"
  8304 ;; Parameters:    Size  Location     Type
  8305 ;;  f_state         2    0[BANK1 ] int 
  8306 ;; Auto vars:     Size  Location     Type
  8307 ;;		None
  8308 ;; Return value:  Size  Location     Type
  8309 ;;                  1    wreg      void 
  8310 ;; Registers used:
  8311 ;;		wreg, status,0
  8312 ;; Tracked objects:
  8313 ;;		On entry : 0/0
  8314 ;;		On exit  : 0/0
  8315 ;;		Unchanged: 0/0
  8316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8317 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8319 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8320 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8321 ;;Total ram usage:        4 bytes
  8322 ;; Hardware stack levels used:    1
  8323 ;; Hardware stack levels required when called:    3
  8324 ;; This function calls:
  8325 ;;		Nothing
  8326 ;; This function is called by:
  8327 ;;		_updateSwitchBypass
  8328 ;; This function uses a non-reentrant model
  8329 ;;
  8330                           
  8331                           
  8332                           ;psect for function _setLongBypassState
  8333  2E19                     _setLongBypassState:	
  8334                           
  8335                           ;SwitchBypass.c: 165: if (longBypass_state == f_state) {return;}
  8336                           
  8337                           ;incstack = 0
  8338                           ; Regs used in _setLongBypassState: [wreg+status,0]
  8339  2E19  0020               	movlb	0	; select bank0
  8340  2E1A  085D               	movf	_longBypass_state,w	;volatile
  8341  2E1B  0021               	movlb	1	; select bank1
  8342  2E1C  00A2               	movwf	??_setLongBypassState^(0+128)
  8343  2E1D  01A3               	clrf	(??_setLongBypassState^(0+128)+1)
  8344  2E1E  0821               	movf	(setLongBypassState@f_state+1)^(0+128),w
  8345  2E1F  0623               	xorwf	(??_setLongBypassState+1)^(0+128),w
  8346  2E20  1D03               	skipz
  8347  2E21  2E24               	goto	u9015
  8348  2E22  0820               	movf	setLongBypassState@f_state^(0+128),w
  8349  2E23  0622               	xorwf	??_setLongBypassState^(0+128),w
  8350  2E24                     u9015:	
  8351  2E24  1903               	btfsc	3,2
  8352  2E25  0008               	return
  8353                           
  8354                           ;SwitchBypass.c: 166: longBypass_state = f_state;
  8355  2E26  0820               	movf	setLongBypassState@f_state^(0+128),w
  8356  2E27  00A2               	movwf	??_setLongBypassState^(0+128)
  8357  2E28  0822               	movf	??_setLongBypassState^(0+128),w
  8358  2E29  0020               	movlb	0	; select bank0
  8359  2E2A  00DD               	movwf	_longBypass_state	;volatile
  8360                           
  8361                           ;SwitchBypass.c: 167: LATBbits.LATB3 = f_state;
  8362  2E2B  0021               	movlb	1	; select bank1
  8363  2E2C  0C20               	rrf	setLongBypassState@f_state^(0+128),w
  8364  2E2D  0022               	movlb	2	; select bank2
  8365  2E2E  1C03               	skipc
  8366  2E2F  118D               	bcf	13,3	;volatile
  8367  2E30  1803               	skipnc
  8368  2E31  158D               	bsf	13,3	;volatile
  8369                           
  8370                           ;SwitchBypass.c: 168: PORTCbits.RC4 = f_state;
  8371  2E32  0021               	movlb	1	; select bank1
  8372  2E33  0C20               	rrf	setLongBypassState@f_state^(0+128),w
  8373  2E34  0020               	movlb	0	; select bank0
  8374  2E35  1C03               	skipc
  8375  2E36  120E               	bcf	14,4	;volatile
  8376  2E37  1803               	skipnc
  8377  2E38  160E               	bsf	14,4	;volatile
  8378  2E39  0008               	return
  8379  2E3A                     __end_of_setLongBypassState:	
  8380                           
  8381                           	psect	text8
  8382  2160                     __ptext8:	
  8383 ;; *************** function _setDoublePressState *****************
  8384 ;; Defined at:
  8385 ;;		line 21 in file "preset_programming.c"
  8386 ;; Parameters:    Size  Location     Type
  8387 ;;  f_state         2   24[BANK1 ] int 
  8388 ;; Auto vars:     Size  Location     Type
  8389 ;;		None
  8390 ;; Return value:  Size  Location     Type
  8391 ;;                  1    wreg      void 
  8392 ;; Registers used:
  8393 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8394 ;; Tracked objects:
  8395 ;;		On entry : 0/0
  8396 ;;		On exit  : 0/0
  8397 ;;		Unchanged: 0/0
  8398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8399 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8401 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8402 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8403 ;;Total ram usage:        4 bytes
  8404 ;; Hardware stack levels used:    1
  8405 ;; Hardware stack levels required when called:    7
  8406 ;; This function calls:
  8407 ;;		_resetRingLEDs
  8408 ;;		_setPedalMode
  8409 ;;		_setPresetDisplay
  8410 ;;		_showSave
  8411 ;;		_wait_ms
  8412 ;; This function is called by:
  8413 ;;		_updateSwitchBypass
  8414 ;;		_updateSwitchTap
  8415 ;; This function uses a non-reentrant model
  8416 ;;
  8417                           
  8418                           
  8419                           ;psect for function _setDoublePressState
  8420  2160                     _setDoublePressState:	
  8421                           
  8422                           ;preset_programming.c: 22: if (doubleTap_state == f_state) {return;}
  8423                           
  8424                           ;incstack = 0
  8425                           ; Regs used in _setDoublePressState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8426  2160  0020               	movlb	0	; select bank0
  8427  2161  085C               	movf	_doubleTap_state,w	;volatile
  8428  2162  0021               	movlb	1	; select bank1
  8429  2163  00BA               	movwf	??_setDoublePressState^(0+128)
  8430  2164  01BB               	clrf	(??_setDoublePressState^(0+128)+1)
  8431  2165  0839               	movf	(setDoublePressState@f_state+1)^(0+128),w
  8432  2166  063B               	xorwf	(??_setDoublePressState+1)^(0+128),w
  8433  2167  1D03               	skipz
  8434  2168  296B               	goto	u9025
  8435  2169  0838               	movf	setDoublePressState@f_state^(0+128),w
  8436  216A  063A               	xorwf	??_setDoublePressState^(0+128),w
  8437  216B                     u9025:	
  8438  216B  1903               	btfsc	3,2
  8439  216C  0008               	return
  8440                           
  8441                           ;preset_programming.c: 23: doubleTap_state = f_state;
  8442  216D  0838               	movf	setDoublePressState@f_state^(0+128),w
  8443  216E  00BA               	movwf	??_setDoublePressState^(0+128)
  8444  216F  083A               	movf	??_setDoublePressState^(0+128),w
  8445  2170  0020               	movlb	0	; select bank0
  8446  2171  00DC               	movwf	_doubleTap_state	;volatile
  8447                           
  8448                           ;preset_programming.c: 24: if (f_state == 1) {
  8449  2172  0021               	movlb	1	; select bank1
  8450  2173  0338               	decf	setDoublePressState@f_state^(0+128),w
  8451  2174  0439               	iorwf	(setDoublePressState@f_state+1)^(0+128),w
  8452  2175  1D03               	btfss	3,2
  8453  2176  297A               	goto	l8556
  8454                           
  8455                           ;preset_programming.c: 25: LATBbits.LATB4 = 0;
  8456  2177  0022               	movlb	2	; select bank2
  8457  2178  120D               	bcf	13,4	;volatile
  8458                           
  8459                           ;preset_programming.c: 27: LATBbits.LATB5 = 0;
  8460  2179  128D               	bcf	13,5	;volatile
  8461  217A                     l8556:	
  8462                           
  8463                           ;preset_programming.c: 30: }
  8464                           ;preset_programming.c: 32: if (doubleTap_state == 1) {
  8465  217A  0020               	movlb	0	; select bank0
  8466  217B  035C               	decf	_doubleTap_state,w	;volatile
  8467  217C  1D03               	btfss	3,2
  8468  217D  2995               	goto	l8572
  8469                           
  8470                           ;preset_programming.c: 33: if (presetSaveMode == 0) {
  8471  217E  085F               	movf	_presetSaveMode,w
  8472  217F  1D03               	btfss	3,2
  8473  2180  298A               	goto	l8564
  8474                           
  8475                           ;preset_programming.c: 34: presetSaveMode = 1;
  8476  2181  01DF               	clrf	_presetSaveMode
  8477  2182  0ADF               	incf	_presetSaveMode,f
  8478                           
  8479                           ;preset_programming.c: 35: LATBbits.LATB1 = 0;
  8480  2183  0022               	movlb	2	; select bank2
  8481  2184  108D               	bcf	13,1	;volatile
  8482                           
  8483                           ;preset_programming.c: 36: setPresetDisplay(presetChannel);
  8484  2185  086C               	movf	_presetChannel^(0+256),w
  8485  2186  31A0  2035  31A1   	fcall	_setPresetDisplay
  8486                           
  8487                           ;preset_programming.c: 37: } else {
  8488  2189  2995               	goto	l8572
  8489  218A                     l8564:	
  8490                           
  8491                           ;preset_programming.c: 39: presetSaveMode = 0;
  8492  218A  0020               	movlb	0	; select bank0
  8493  218B  01DF               	clrf	_presetSaveMode
  8494                           
  8495                           ;preset_programming.c: 40: setPedalMode();
  8496  218C  31AE  265C  31A1   	fcall	_setPedalMode
  8497                           
  8498                           ;preset_programming.c: 41: resetRingLEDs();
  8499  218F  31AD  2577  31A1   	fcall	_resetRingLEDs
  8500                           
  8501                           ;preset_programming.c: 42: showSave();
  8502  2192  31AD  254B  31A1   	fcall	_showSave
  8503  2195                     l8572:	
  8504                           
  8505                           ;preset_programming.c: 44: }
  8506                           ;preset_programming.c: 45: }
  8507                           ;preset_programming.c: 47: wait_ms(20);
  8508  2195  3014               	movlw	20
  8509  2196  0021               	movlb	1	; select bank1
  8510  2197  00AC               	movwf	wait_ms@timeSec^(0+128)
  8511  2198  3000               	movlw	0
  8512  2199  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8513  219A  3190  2003         	fcall	_wait_ms
  8514  219C  0008               	return
  8515  219D                     __end_of_setDoublePressState:	
  8516                           
  8517                           	psect	text9
  8518  2D4B                     __ptext9:	
  8519 ;; *************** function _showSave *****************
  8520 ;; Defined at:
  8521 ;;		line 112 in file "LEDs.c"
  8522 ;; Parameters:    Size  Location     Type
  8523 ;;		None
  8524 ;; Auto vars:     Size  Location     Type
  8525 ;;		None
  8526 ;; Return value:  Size  Location     Type
  8527 ;;                  1    wreg      void 
  8528 ;; Registers used:
  8529 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8530 ;; Tracked objects:
  8531 ;;		On entry : 0/0
  8532 ;;		On exit  : 0/0
  8533 ;;		Unchanged: 0/0
  8534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8536 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8537 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8538 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8539 ;;Total ram usage:        1 bytes
  8540 ;; Hardware stack levels used:    1
  8541 ;; Hardware stack levels required when called:    6
  8542 ;; This function calls:
  8543 ;;		_ring_tactiles
  8544 ;;		_solidring_tactiles
  8545 ;; This function is called by:
  8546 ;;		_setDoublePressState
  8547 ;; This function uses a non-reentrant model
  8548 ;;
  8549                           
  8550                           
  8551                           ;psect for function _showSave
  8552  2D4B                     _showSave:	
  8553                           
  8554                           ;LEDs.c: 113: suspend_blink = 1;
  8555                           
  8556                           ;incstack = 0
  8557                           ; Regs used in _showSave: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8558  2D4B  3001               	movlw	1
  8559  2D4C  0021               	movlb	1	; select bank1
  8560  2D4D  00B7               	movwf	??_showSave^(0+128)
  8561  2D4E  0837               	movf	??_showSave^(0+128),w
  8562  2D4F  0022               	movlb	2	; select bank2
  8563  2D50  00EA               	movwf	_suspend_blink^(0+256)	;volatile
  8564                           
  8565                           ;LEDs.c: 114: ring_tactiles();
  8566  2D51  31A3  23C3  31AD   	fcall	_ring_tactiles
  8567                           
  8568                           ;LEDs.c: 115: ring_tactiles();
  8569  2D54  31A3  23C3  31AD   	fcall	_ring_tactiles
  8570                           
  8571                           ;LEDs.c: 116: solidring_tactiles();
  8572  2D57  31A1  21DD  31AD   	fcall	_solidring_tactiles
  8573                           
  8574                           ;LEDs.c: 117: solidring_tactiles();
  8575  2D5A  31A1  21DD         	fcall	_solidring_tactiles
  8576                           
  8577                           ;LEDs.c: 118: suspend_blink = 0;
  8578  2D5C  0022               	movlb	2	; select bank2
  8579  2D5D  01EA               	clrf	_suspend_blink^(0+256)	;volatile
  8580  2D5E  0008               	return
  8581  2D5F                     __end_of_showSave:	
  8582                           
  8583                           	psect	text10
  8584  21DD                     __ptext10:	
  8585 ;; *************** function _solidring_tactiles *****************
  8586 ;; Defined at:
  8587 ;;		line 208 in file "LEDs.c"
  8588 ;; Parameters:    Size  Location     Type
  8589 ;;		None
  8590 ;; Auto vars:     Size  Location     Type
  8591 ;;  ring_delay      1   20[BANK1 ] unsigned char 
  8592 ;; Return value:  Size  Location     Type
  8593 ;;                  1    wreg      void 
  8594 ;; Registers used:
  8595 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8596 ;; Tracked objects:
  8597 ;;		On entry : 0/0
  8598 ;;		On exit  : 0/0
  8599 ;;		Unchanged: 0/0
  8600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8602 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8603 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8604 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8605 ;;Total ram usage:        3 bytes
  8606 ;; Hardware stack levels used:    1
  8607 ;; Hardware stack levels required when called:    5
  8608 ;; This function calls:
  8609 ;;		_set_leds_bottom
  8610 ;;		_set_leds_top
  8611 ;;		_wait_ms
  8612 ;; This function is called by:
  8613 ;;		_showSave
  8614 ;;		_showBootSequence
  8615 ;; This function uses a non-reentrant model
  8616 ;;
  8617                           
  8618                           
  8619                           ;psect for function _solidring_tactiles
  8620  21DD                     _solidring_tactiles:	
  8621                           
  8622                           ;LEDs.c: 209: uint8_t ring_delay = 30;
  8623                           
  8624                           ;incstack = 0
  8625                           ; Regs used in _solidring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8626  21DD  301E               	movlw	30
  8627  21DE  0021               	movlb	1	; select bank1
  8628  21DF  00B2               	movwf	??_solidring_tactiles^(0+128)
  8629  21E0  0832               	movf	??_solidring_tactiles^(0+128),w
  8630  21E1  00B4               	movwf	solidring_tactiles@ring_delay^(0+128)
  8631                           
  8632                           ;LEDs.c: 210: set_leds_top(100, 1);
  8633  21E2  3064               	movlw	100
  8634  21E3  00A0               	movwf	set_leds_top@x^(0+128)
  8635  21E4  3000               	movlw	0
  8636  21E5  00A1               	movwf	(set_leds_top@x^(0+128)+1)
  8637  21E6  3001               	movlw	1
  8638  21E7  00A2               	movwf	set_leds_top@ledState^(0+128)
  8639  21E8  3000               	movlw	0
  8640  21E9  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8641  21EA  31A5  2509  31A1   	fcall	_set_leds_top
  8642                           
  8643                           ;LEDs.c: 211: set_leds_bottom(100);
  8644  21ED  3064               	movlw	100
  8645  21EE  0021               	movlb	1	; select bank1
  8646  21EF  00A0               	movwf	set_leds_bottom@x^(0+128)
  8647  21F0  3000               	movlw	0
  8648  21F1  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8649  21F2  31A0  206F  31A1   	fcall	_set_leds_bottom
  8650                           
  8651                           ;LEDs.c: 212: wait_ms(ring_delay);
  8652  21F5  0021               	movlb	1	; select bank1
  8653  21F6  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8654  21F7  00B2               	movwf	??_solidring_tactiles^(0+128)
  8655  21F8  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8656  21F9  0832               	movf	??_solidring_tactiles^(0+128),w
  8657  21FA  00AC               	movwf	wait_ms@timeSec^(0+128)
  8658  21FB  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8659  21FC  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8660  21FD  3190  2003  31A1   	fcall	_wait_ms
  8661                           
  8662                           ;LEDs.c: 214: set_leds_top(0, 1);
  8663  2200  3000               	movlw	0
  8664  2201  0021               	movlb	1	; select bank1
  8665  2202  00A0               	movwf	set_leds_top@x^(0+128)
  8666  2203  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8667  2204  3001               	movlw	1
  8668  2205  00A2               	movwf	set_leds_top@ledState^(0+128)
  8669  2206  3000               	movlw	0
  8670  2207  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8671  2208  31A5  2509  31A1   	fcall	_set_leds_top
  8672                           
  8673                           ;LEDs.c: 215: set_leds_bottom(0);
  8674  220B  3000               	movlw	0
  8675  220C  0021               	movlb	1	; select bank1
  8676  220D  00A0               	movwf	set_leds_bottom@x^(0+128)
  8677  220E  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8678  220F  31A0  206F  31A1   	fcall	_set_leds_bottom
  8679                           
  8680                           ;LEDs.c: 216: wait_ms(ring_delay);
  8681  2212  0021               	movlb	1	; select bank1
  8682  2213  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8683  2214  00B2               	movwf	??_solidring_tactiles^(0+128)
  8684  2215  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8685  2216  0832               	movf	??_solidring_tactiles^(0+128),w
  8686  2217  00AC               	movwf	wait_ms@timeSec^(0+128)
  8687  2218  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8688  2219  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8689  221A  3190  2003         	fcall	_wait_ms
  8690  221C  0008               	return
  8691  221D                     __end_of_solidring_tactiles:	
  8692                           
  8693                           	psect	text11
  8694  23C3                     __ptext11:	
  8695 ;; *************** function _ring_tactiles *****************
  8696 ;; Defined at:
  8697 ;;		line 196 in file "LEDs.c"
  8698 ;; Parameters:    Size  Location     Type
  8699 ;;		None
  8700 ;; Auto vars:     Size  Location     Type
  8701 ;;  iLed            2   21[BANK1 ] int 
  8702 ;;  iLed            2   19[BANK1 ] int 
  8703 ;; Return value:  Size  Location     Type
  8704 ;;                  1    wreg      void 
  8705 ;; Registers used:
  8706 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8707 ;; Tracked objects:
  8708 ;;		On entry : 0/0
  8709 ;;		On exit  : 0/0
  8710 ;;		Unchanged: 0/0
  8711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8713 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8714 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8715 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8716 ;;Total ram usage:        5 bytes
  8717 ;; Hardware stack levels used:    1
  8718 ;; Hardware stack levels required when called:    5
  8719 ;; This function calls:
  8720 ;;		_set_leds_bottom
  8721 ;;		_set_leds_top
  8722 ;;		_wait_ms
  8723 ;; This function is called by:
  8724 ;;		_showSave
  8725 ;; This function uses a non-reentrant model
  8726 ;;
  8727                           
  8728                           
  8729                           ;psect for function _ring_tactiles
  8730  23C3                     _ring_tactiles:	
  8731                           
  8732                           ;LEDs.c: 197: for (int iLed = 1; iLed < 7; iLed++) {
  8733                           
  8734                           ;incstack = 0
  8735                           ; Regs used in _ring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8736  23C3  3001               	movlw	1
  8737  23C4  0021               	movlb	1	; select bank1
  8738  23C5  00B3               	movwf	ring_tactiles@iLed^(0+128)
  8739  23C6  3000               	movlw	0
  8740  23C7  00B4               	movwf	(ring_tactiles@iLed^(0+128)+1)
  8741  23C8  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8742  23C9  3A80               	xorlw	128
  8743  23CA  00B2               	movwf	??_ring_tactiles^(0+128)
  8744  23CB  3080               	movlw	128
  8745  23CC  0232               	subwf	??_ring_tactiles^(0+128),w
  8746  23CD  1D03               	skipz
  8747  23CE  2BD1               	goto	u8465
  8748  23CF  3007               	movlw	7
  8749  23D0  0233               	subwf	ring_tactiles@iLed^(0+128),w
  8750  23D1                     u8465:	
  8751  23D1  1803               	btfsc	3,0
  8752  23D2  2BF7               	goto	l8048
  8753  23D3                     l8040:	
  8754                           
  8755                           ;LEDs.c: 198: set_leds_top(iLed, 1);
  8756  23D3  0021               	movlb	1	; select bank1
  8757  23D4  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8758  23D5  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8759  23D6  0833               	movf	ring_tactiles@iLed^(0+128),w
  8760  23D7  00A0               	movwf	set_leds_top@x^(0+128)
  8761  23D8  3001               	movlw	1
  8762  23D9  00A2               	movwf	set_leds_top@ledState^(0+128)
  8763  23DA  3000               	movlw	0
  8764  23DB  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8765  23DC  31A5  2509  31A3   	fcall	_set_leds_top
  8766                           
  8767                           ;LEDs.c: 199: wait_ms(5);
  8768  23DF  3005               	movlw	5
  8769  23E0  0021               	movlb	1	; select bank1
  8770  23E1  00AC               	movwf	wait_ms@timeSec^(0+128)
  8771  23E2  3000               	movlw	0
  8772  23E3  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8773  23E4  3190  2003  31A3   	fcall	_wait_ms
  8774  23E7  3001               	movlw	1
  8775  23E8  0021               	movlb	1	; select bank1
  8776  23E9  07B3               	addwf	ring_tactiles@iLed^(0+128),f
  8777  23EA  3000               	movlw	0
  8778  23EB  3DB4               	addwfc	(ring_tactiles@iLed+1)^(0+128),f
  8779  23EC  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8780  23ED  3A80               	xorlw	128
  8781  23EE  00B2               	movwf	??_ring_tactiles^(0+128)
  8782  23EF  3080               	movlw	128
  8783  23F0  0232               	subwf	??_ring_tactiles^(0+128),w
  8784  23F1  1D03               	skipz
  8785  23F2  2BF5               	goto	u8475
  8786  23F3  3007               	movlw	7
  8787  23F4  0233               	subwf	ring_tactiles@iLed^(0+128),w
  8788  23F5                     u8475:	
  8789  23F5  1C03               	skipc
  8790  23F6  2BD3               	goto	l8040
  8791  23F7                     l8048:	
  8792                           
  8793                           ;LEDs.c: 200: }
  8794                           ;LEDs.c: 201: for (int iLed = 5; iLed > -1; iLed--) {
  8795  23F7  3005               	movlw	5
  8796  23F8  0021               	movlb	1	; select bank1
  8797  23F9  00B5               	movwf	ring_tactiles@iLed_1538^(0+128)
  8798  23FA  3000               	movlw	0
  8799  23FB  00B6               	movwf	(ring_tactiles@iLed_1538^(0+128)+1)
  8800  23FC                     L4:	
  8801  23FC  1BB6               	btfsc	(ring_tactiles@iLed_1538+1)^(0+128),7
  8802  23FD  0008               	return
  8803                           
  8804                           ;LEDs.c: 202: set_leds_bottom(iLed);
  8805  23FE  0836               	movf	(ring_tactiles@iLed_1538+1)^(0+128),w
  8806  23FF  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8807  2400  0835               	movf	ring_tactiles@iLed_1538^(0+128),w
  8808  2401  00A0               	movwf	set_leds_bottom@x^(0+128)
  8809  2402  31A0  206F  31A3   	fcall	_set_leds_bottom
  8810                           
  8811                           ;LEDs.c: 203: wait_ms(5);
  8812  2405  3005               	movlw	5
  8813  2406  0021               	movlb	1	; select bank1
  8814  2407  00AC               	movwf	wait_ms@timeSec^(0+128)
  8815  2408  3000               	movlw	0
  8816  2409  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8817  240A  3190  2003  31A3   	fcall	_wait_ms
  8818  240D  30FF               	movlw	255
  8819  240E  0021               	movlb	1	; select bank1
  8820  240F  07B5               	addwf	ring_tactiles@iLed_1538^(0+128),f
  8821  2410  30FF               	movlw	255
  8822  2411  3DB6               	addwfc	(ring_tactiles@iLed_1538+1)^(0+128),f
  8823  2412  2BFC               	goto	L4
  8824  2413                     __end_of_ring_tactiles:	
  8825                           
  8826                           	psect	text12
  8827  2E5C                     __ptext12:	
  8828 ;; *************** function _setPedalMode *****************
  8829 ;; Defined at:
  8830 ;;		line 119 in file "tactiles.c"
  8831 ;; Parameters:    Size  Location     Type
  8832 ;;		None
  8833 ;; Auto vars:     Size  Location     Type
  8834 ;;		None
  8835 ;; Return value:  Size  Location     Type
  8836 ;;                  1    wreg      void 
  8837 ;; Registers used:
  8838 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8839 ;; Tracked objects:
  8840 ;;		On entry : 0/0
  8841 ;;		On exit  : 0/0
  8842 ;;		Unchanged: 0/0
  8843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8845 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8847 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8848 ;;Total ram usage:        0 bytes
  8849 ;; Hardware stack levels used:    1
  8850 ;; Hardware stack levels required when called:    5
  8851 ;; This function calls:
  8852 ;;		_resetRingLEDs
  8853 ;;		_setExpressionDisplay
  8854 ;;		_setPresetDisplay
  8855 ;; This function is called by:
  8856 ;;		_update_mode
  8857 ;;		_setDoublePressState
  8858 ;; This function uses a non-reentrant model
  8859 ;;
  8860                           
  8861                           
  8862                           ;psect for function _setPedalMode
  8863  2E5C                     _setPedalMode:	
  8864                           
  8865                           ;tactiles.c: 120: switch (mode2_state) {
  8866                           
  8867                           ;incstack = 0
  8868                           ; Regs used in _setPedalMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8869  2E5C  2E72               	goto	l8248
  8870  2E5D                     l1017:	
  8871                           ;tactiles.c: 121: case 0:
  8872                           
  8873                           
  8874                           ;tactiles.c: 122: LATBbits.LATB1 = 0;
  8875  2E5D  0022               	movlb	2	; select bank2
  8876  2E5E  108D               	bcf	13,1	;volatile
  8877                           
  8878                           ;tactiles.c: 123: LATBbits.LATB0 = 0;
  8879  2E5F  100D               	bcf	13,0	;volatile
  8880                           
  8881                           ;tactiles.c: 124: resetRingLEDs();
  8882  2E60  31AD  2577         	fcall	_resetRingLEDs
  8883                           
  8884                           ;tactiles.c: 125: break;
  8885  2E62  0008               	return
  8886  2E63                     l1019:	
  8887                           ;tactiles.c: 126: case 1:
  8888                           
  8889                           
  8890                           ;tactiles.c: 127: LATBbits.LATB1 = 0;
  8891  2E63  0022               	movlb	2	; select bank2
  8892  2E64  108D               	bcf	13,1	;volatile
  8893                           
  8894                           ;tactiles.c: 128: LATBbits.LATB0 = 1;
  8895  2E65  140D               	bsf	13,0	;volatile
  8896                           
  8897                           ;tactiles.c: 129: setPresetDisplay(presetChannel);
  8898  2E66  086C               	movf	_presetChannel^(0+256),w
  8899  2E67  31A0  2035         	fcall	_setPresetDisplay
  8900                           
  8901                           ;tactiles.c: 130: break;
  8902  2E69  0008               	return
  8903  2E6A                     l1020:	
  8904                           ;tactiles.c: 131: case 2:
  8905                           
  8906                           
  8907                           ;tactiles.c: 132: LATBbits.LATB1 = 1;
  8908  2E6A  0022               	movlb	2	; select bank2
  8909  2E6B  148D               	bsf	13,1	;volatile
  8910                           
  8911                           ;tactiles.c: 133: LATBbits.LATB0 = 0;
  8912  2E6C  100D               	bcf	13,0	;volatile
  8913                           
  8914                           ;tactiles.c: 134: setExpressionDisplay(expressionChannel);
  8915  2E6D  0023               	movlb	3	; select bank3
  8916  2E6E  0863               	movf	_expressionChannel^(0+384),w
  8917  2E6F  31AD  255F         	fcall	_setExpressionDisplay
  8918                           
  8919                           ;tactiles.c: 136: }
  8920                           
  8921                           ;tactiles.c: 135: break;
  8922  2E71  0008               	return
  8923  2E72                     l8248:	
  8924  2E72  0020               	movlb	0	; select bank0
  8925  2E73  085E               	movf	_mode2_state,w
  8926                           
  8927                           ; Switch size 1, requested type "space"
  8928                           ; Number of cases is 3, Range of values is 0 to 2
  8929                           ; switch strategies available:
  8930                           ; Name         Instructions Cycles
  8931                           ; simple_byte           10     6 (average)
  8932                           ; direct_byte           12     6 (fixed)
  8933                           ; jumptable            260     6 (fixed)
  8934                           ;	Chosen strategy is simple_byte
  8935  2E74  3A00               	xorlw	0	; case 0
  8936  2E75  1903               	skipnz
  8937  2E76  2E5D               	goto	l1017
  8938  2E77  3A01               	xorlw	1	; case 1
  8939  2E78  1903               	skipnz
  8940  2E79  2E63               	goto	l1019
  8941  2E7A  3A03               	xorlw	3	; case 2
  8942  2E7B  1903               	skipnz
  8943  2E7C  2E6A               	goto	l1020
  8944  2E7D  2E7E               	goto	l1021
  8945  2E7E                     l1021:	
  8946  2E7E  0008               	return
  8947  2E7F                     __end_of_setPedalMode:	
  8948                           
  8949                           	psect	text13
  8950  2035                     __ptext13:	
  8951 ;; *************** function _setPresetDisplay *****************
  8952 ;; Defined at:
  8953 ;;		line 51 in file "preset_programming.c"
  8954 ;; Parameters:    Size  Location     Type
  8955 ;;  ledChannel      1    wreg     unsigned char 
  8956 ;; Auto vars:     Size  Location     Type
  8957 ;;  ledChannel      1    6[BANK1 ] unsigned char 
  8958 ;; Return value:  Size  Location     Type
  8959 ;;                  1    wreg      void 
  8960 ;; Registers used:
  8961 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8962 ;; Tracked objects:
  8963 ;;		On entry : 0/0
  8964 ;;		On exit  : 0/0
  8965 ;;		Unchanged: 0/0
  8966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8968 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8969 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8970 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8971 ;;Total ram usage:        3 bytes
  8972 ;; Hardware stack levels used:    1
  8973 ;; Hardware stack levels required when called:    4
  8974 ;; This function calls:
  8975 ;;		_set_leds_bottom
  8976 ;;		_set_leds_top
  8977 ;; This function is called by:
  8978 ;;		_setPedalMode
  8979 ;;		_update_selectMode
  8980 ;;		_setDoublePressState
  8981 ;; This function uses a non-reentrant model
  8982 ;;
  8983                           
  8984                           
  8985                           ;psect for function _setPresetDisplay
  8986  2035                     _setPresetDisplay:	
  8987                           
  8988                           ;incstack = 0
  8989                           ; Regs used in _setPresetDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8990                           ;setPresetDisplay@ledChannel stored from wreg
  8991  2035  0021               	movlb	1	; select bank1
  8992  2036  00A6               	movwf	setPresetDisplay@ledChannel^(0+128)
  8993                           
  8994                           ;preset_programming.c: 52: if (ledChannel < 6) {
  8995  2037  3006               	movlw	6
  8996  2038  0226               	subwf	setPresetDisplay@ledChannel^(0+128),w
  8997  2039  1803               	skipnc
  8998  203A  2851               	goto	l8068
  8999                           
  9000                           ;preset_programming.c: 53: set_leds_top(ledChannel, 1);
  9001  203B  0826               	movf	setPresetDisplay@ledChannel^(0+128),w
  9002  203C  00A4               	movwf	??_setPresetDisplay^(0+128)
  9003  203D  01A5               	clrf	(??_setPresetDisplay^(0+128)+1)
  9004  203E  0824               	movf	??_setPresetDisplay^(0+128),w
  9005  203F  00A0               	movwf	set_leds_top@x^(0+128)
  9006  2040  0825               	movf	(??_setPresetDisplay+1)^(0+128),w
  9007  2041  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  9008  2042  3001               	movlw	1
  9009  2043  00A2               	movwf	set_leds_top@ledState^(0+128)
  9010  2044  3000               	movlw	0
  9011  2045  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  9012  2046  31A5  2509  31A0   	fcall	_set_leds_top
  9013                           
  9014                           ;preset_programming.c: 54: set_leds_bottom(6);
  9015  2049  3006               	movlw	6
  9016  204A  0021               	movlb	1	; select bank1
  9017  204B  00A0               	movwf	set_leds_bottom@x^(0+128)
  9018  204C  3000               	movlw	0
  9019  204D  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  9020  204E  31A0  206F         	fcall	_set_leds_bottom
  9021                           
  9022                           ;preset_programming.c: 55: } else {
  9023  2050  0008               	return
  9024  2051                     l8068:	
  9025                           
  9026                           ;preset_programming.c: 56: set_leds_top(6, 1);
  9027  2051  3006               	movlw	6
  9028  2052  0021               	movlb	1	; select bank1
  9029  2053  00A0               	movwf	set_leds_top@x^(0+128)
  9030  2054  3000               	movlw	0
  9031  2055  00A1               	movwf	(set_leds_top@x^(0+128)+1)
  9032  2056  3001               	movlw	1
  9033  2057  00A2               	movwf	set_leds_top@ledState^(0+128)
  9034  2058  3000               	movlw	0
  9035  2059  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  9036  205A  31A5  2509  31A0   	fcall	_set_leds_top
  9037                           
  9038                           ;preset_programming.c: 57: set_leds_bottom(10 - ledChannel + 1);
  9039  205D  0021               	movlb	1	; select bank1
  9040  205E  0826               	movf	setPresetDisplay@ledChannel^(0+128),w
  9041  205F  00A4               	movwf	??_setPresetDisplay^(0+128)
  9042  2060  01A5               	clrf	(??_setPresetDisplay^(0+128)+1)
  9043  2061  09A4               	comf	??_setPresetDisplay^(0+128),f
  9044  2062  09A5               	comf	(??_setPresetDisplay^(0+128)+1),f
  9045  2063  0AA4               	incf	??_setPresetDisplay^(0+128),f
  9046  2064  1903               	skipnz
  9047  2065  0AA5               	incf	(??_setPresetDisplay^(0+128)+1),f
  9048  2066  0824               	movf	??_setPresetDisplay^(0+128),w
  9049  2067  3E0B               	addlw	11
  9050  2068  00A0               	movwf	set_leds_bottom@x^(0+128)
  9051  2069  3000               	movlw	0
  9052  206A  3D25               	addwfc	(??_setPresetDisplay+1)^(0+128),w
  9053  206B  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  9054  206C  31A0  206F         	fcall	_set_leds_bottom
  9055  206E  0008               	return
  9056  206F                     __end_of_setPresetDisplay:	
  9057                           
  9058                           	psect	text14
  9059  2D5F                     __ptext14:	
  9060 ;; *************** function _setExpressionDisplay *****************
  9061 ;; Defined at:
  9062 ;;		line 66 in file "preset_programming.c"
  9063 ;; Parameters:    Size  Location     Type
  9064 ;;  ledChannel      1    wreg     unsigned char 
  9065 ;; Auto vars:     Size  Location     Type
  9066 ;;  ledChannel      1    6[BANK1 ] unsigned char 
  9067 ;; Return value:  Size  Location     Type
  9068 ;;                  1    wreg      void 
  9069 ;; Registers used:
  9070 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9071 ;; Tracked objects:
  9072 ;;		On entry : 0/0
  9073 ;;		On exit  : 0/0
  9074 ;;		Unchanged: 0/0
  9075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9077 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9078 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9079 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9080 ;;Total ram usage:        3 bytes
  9081 ;; Hardware stack levels used:    1
  9082 ;; Hardware stack levels required when called:    4
  9083 ;; This function calls:
  9084 ;;		_set_leds_bottom
  9085 ;;		_set_leds_top
  9086 ;; This function is called by:
  9087 ;;		_setPedalMode
  9088 ;;		_update_selectMode
  9089 ;; This function uses a non-reentrant model
  9090 ;;
  9091                           
  9092                           
  9093                           ;psect for function _setExpressionDisplay
  9094  2D5F                     _setExpressionDisplay:	
  9095                           
  9096                           ;incstack = 0
  9097                           ; Regs used in _setExpressionDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9098                           ;setExpressionDisplay@ledChannel stored from wreg
  9099  2D5F  0021               	movlb	1	; select bank1
  9100  2D60  00A6               	movwf	setExpressionDisplay@ledChannel^(0+128)
  9101                           
  9102                           ;preset_programming.c: 67: set_leds_top(ledChannel, 1);
  9103  2D61  0826               	movf	setExpressionDisplay@ledChannel^(0+128),w
  9104  2D62  00A4               	movwf	??_setExpressionDisplay^(0+128)
  9105  2D63  01A5               	clrf	(??_setExpressionDisplay^(0+128)+1)
  9106  2D64  0824               	movf	??_setExpressionDisplay^(0+128),w
  9107  2D65  00A0               	movwf	set_leds_top@x^(0+128)
  9108  2D66  0825               	movf	(??_setExpressionDisplay+1)^(0+128),w
  9109  2D67  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  9110  2D68  3001               	movlw	1
  9111  2D69  00A2               	movwf	set_leds_top@ledState^(0+128)
  9112  2D6A  3000               	movlw	0
  9113  2D6B  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  9114  2D6C  31A5  2509  31AD   	fcall	_set_leds_top
  9115                           
  9116                           ;preset_programming.c: 68: set_leds_bottom(6);
  9117  2D6F  3006               	movlw	6
  9118  2D70  0021               	movlb	1	; select bank1
  9119  2D71  00A0               	movwf	set_leds_bottom@x^(0+128)
  9120  2D72  3000               	movlw	0
  9121  2D73  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  9122  2D74  31A0  206F         	fcall	_set_leds_bottom
  9123  2D76  0008               	return
  9124  2D77                     __end_of_setExpressionDisplay:	
  9125                           
  9126                           	psect	text15
  9127  2D77                     __ptext15:	
  9128 ;; *************** function _resetRingLEDs *****************
  9129 ;; Defined at:
  9130 ;;		line 61 in file "preset_programming.c"
  9131 ;; Parameters:    Size  Location     Type
  9132 ;;		None
  9133 ;; Auto vars:     Size  Location     Type
  9134 ;;		None
  9135 ;; Return value:  Size  Location     Type
  9136 ;;                  1    wreg      void 
  9137 ;; Registers used:
  9138 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9139 ;; Tracked objects:
  9140 ;;		On entry : 0/0
  9141 ;;		On exit  : 0/0
  9142 ;;		Unchanged: 0/0
  9143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9147 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9148 ;;Total ram usage:        0 bytes
  9149 ;; Hardware stack levels used:    1
  9150 ;; Hardware stack levels required when called:    4
  9151 ;; This function calls:
  9152 ;;		_set_leds_bottom
  9153 ;;		_set_leds_top
  9154 ;; This function is called by:
  9155 ;;		_update_mode
  9156 ;;		_setPedalMode
  9157 ;;		_setDoublePressState
  9158 ;; This function uses a non-reentrant model
  9159 ;;
  9160                           
  9161                           
  9162                           ;psect for function _resetRingLEDs
  9163  2D77                     _resetRingLEDs:	
  9164                           
  9165                           ;preset_programming.c: 62: set_leds_top(top_push_state, 1);
  9166                           
  9167                           ;incstack = 0
  9168                           ; Regs used in _resetRingLEDs: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9169  2D77  0020               	movlb	0	; select bank0
  9170  2D78  084D               	movf	_top_push_state+1,w
  9171  2D79  0021               	movlb	1	; select bank1
  9172  2D7A  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  9173  2D7B  0020               	movlb	0	; select bank0
  9174  2D7C  084C               	movf	_top_push_state,w
  9175  2D7D  0021               	movlb	1	; select bank1
  9176  2D7E  00A0               	movwf	set_leds_top@x^(0+128)
  9177  2D7F  3001               	movlw	1
  9178  2D80  00A2               	movwf	set_leds_top@ledState^(0+128)
  9179  2D81  3000               	movlw	0
  9180  2D82  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  9181  2D83  31A5  2509  31AD   	fcall	_set_leds_top
  9182                           
  9183                           ;preset_programming.c: 63: set_leds_bottom(bottom_push_state);
  9184  2D86  0020               	movlb	0	; select bank0
  9185  2D87  0849               	movf	_bottom_push_state+1,w
  9186  2D88  0021               	movlb	1	; select bank1
  9187  2D89  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  9188  2D8A  0020               	movlb	0	; select bank0
  9189  2D8B  0848               	movf	_bottom_push_state,w
  9190  2D8C  0021               	movlb	1	; select bank1
  9191  2D8D  00A0               	movwf	set_leds_bottom@x^(0+128)
  9192  2D8E  31A0  206F         	fcall	_set_leds_bottom
  9193  2D90  0008               	return
  9194  2D91                     __end_of_resetRingLEDs:	
  9195                           
  9196                           	psect	text16
  9197  0DBA                     __ptext16:	
  9198 ;; *************** function _updateModulationArray *****************
  9199 ;; Defined at:
  9200 ;;		line 44 in file "modulation.c"
  9201 ;; Parameters:    Size  Location     Type
  9202 ;;		None
  9203 ;; Auto vars:     Size  Location     Type
  9204 ;;  thisAngle       2   57[BANK2 ] int 
  9205 ;;  iAngle          1   54[BANK2 ] unsigned char 
  9206 ;;  iAngle          1   59[BANK2 ] unsigned char 
  9207 ;;  subDiv          2   55[BANK2 ] int 
  9208 ;;  angleFactor     2   52[BANK2 ] int 
  9209 ;; Return value:  Size  Location     Type
  9210 ;;                  1    wreg      void 
  9211 ;; Registers used:
  9212 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9213 ;; Tracked objects:
  9214 ;;		On entry : 0/0
  9215 ;;		On exit  : 0/0
  9216 ;;		Unchanged: 0/0
  9217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9219 ;;      Locals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9220 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9221 ;;      Totals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9222 ;;Total ram usage:       12 bytes
  9223 ;; Hardware stack levels used:    1
  9224 ;; Hardware stack levels required when called:    7
  9225 ;; This function calls:
  9226 ;;		___awdiv
  9227 ;;		___awtoft
  9228 ;;		___wmul
  9229 ;;		_getModulationSubdivision
  9230 ;;		_modCos
  9231 ;;		_modSaw
  9232 ;;		_modSawRev
  9233 ;;		_modSquare
  9234 ;;		_modTri
  9235 ;; This function is called by:
  9236 ;;		_main
  9237 ;; This function uses a non-reentrant model
  9238 ;;
  9239                           
  9240                           
  9241                           ;psect for function _updateModulationArray
  9242  0DBA                     _updateModulationArray:	
  9243                           
  9244                           ;modulation.c: 45: int subDiv = getModulationSubdivision();
  9245                           
  9246                           ;incstack = 0
  9247                           ; Regs used in _updateModulationArray: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9248  0DBA  31AF  2762  318D   	fcall	_getModulationSubdivision
  9249  0DBD  0021               	movlb	1	; select bank1
  9250  0DBE  0821               	movf	(?_getModulationSubdivision+1)^(0+128),w
  9251  0DBF  0022               	movlb	2	; select bank2
  9252  0DC0  00D8               	movwf	(updateModulationArray@subDiv+1)^(0+256)
  9253  0DC1  0021               	movlb	1	; select bank1
  9254  0DC2  0820               	movf	?_getModulationSubdivision^(0+128),w
  9255  0DC3  0022               	movlb	2	; select bank2
  9256  0DC4  00D7               	movwf	updateModulationArray@subDiv^(0+256)
  9257                           
  9258                           ;modulation.c: 46: if (modArray[120] == bottom_push_state && modArray[121] == symmetry &
      +                          & modArray[122] == subDiv) {
  9259  0DC5  307A               	movlw	122
  9260  0DC6  0086               	movwf	6
  9261  0DC7  3024               	movlw	36
  9262  0DC8  0087               	movwf	7
  9263  0DC9  3F40               	moviw [0]fsr1
  9264  0DCA  00D0               	movwf	??_updateModulationArray^(0+256)
  9265  0DCB  3F41               	moviw [1]fsr1
  9266  0DCC  00D1               	movwf	(??_updateModulationArray^(0+256)+1)
  9267  0DCD  0020               	movlb	0	; select bank0
  9268  0DCE  0849               	movf	_bottom_push_state+1,w
  9269  0DCF  0022               	movlb	2	; select bank2
  9270  0DD0  0651               	xorwf	(??_updateModulationArray+1)^(0+256),w
  9271  0DD1  1D03               	skipz
  9272  0DD2  2DD7               	goto	u10235
  9273  0DD3  0020               	movlb	0	; select bank0
  9274  0DD4  0848               	movf	_bottom_push_state,w
  9275  0DD5  0022               	movlb	2	; select bank2
  9276  0DD6  0650               	xorwf	??_updateModulationArray^(0+256),w
  9277  0DD7                     u10235:	
  9278  0DD7  1D03               	skipz
  9279  0DD8  2DFD               	goto	l9246
  9280  0DD9  307C               	movlw	124
  9281  0DDA  0086               	movwf	6
  9282  0DDB  3024               	movlw	36
  9283  0DDC  0087               	movwf	7
  9284  0DDD  3F40               	moviw [0]fsr1
  9285  0DDE  00D0               	movwf	??_updateModulationArray^(0+256)
  9286  0DDF  3F41               	moviw [1]fsr1
  9287  0DE0  00D1               	movwf	(??_updateModulationArray^(0+256)+1)
  9288  0DE1  0023               	movlb	3	; select bank3
  9289  0DE2  085C               	movf	(_symmetry+1)^(0+384),w
  9290  0DE3  0022               	movlb	2	; select bank2
  9291  0DE4  0651               	xorwf	(??_updateModulationArray+1)^(0+256),w
  9292  0DE5  1D03               	skipz
  9293  0DE6  2DEB               	goto	u10245
  9294  0DE7  0023               	movlb	3	; select bank3
  9295  0DE8  085B               	movf	_symmetry^(0+384),w
  9296  0DE9  0022               	movlb	2	; select bank2
  9297  0DEA  0650               	xorwf	??_updateModulationArray^(0+256),w
  9298  0DEB                     u10245:	
  9299  0DEB  1D03               	skipz
  9300  0DEC  2DFD               	goto	l9246
  9301  0DED  307E               	movlw	126
  9302  0DEE  0086               	movwf	6
  9303  0DEF  3024               	movlw	36
  9304  0DF0  0087               	movwf	7
  9305  0DF1  3F40               	moviw [0]fsr1
  9306  0DF2  00D0               	movwf	??_updateModulationArray^(0+256)
  9307  0DF3  3F41               	moviw [1]fsr1
  9308  0DF4  00D1               	movwf	(??_updateModulationArray^(0+256)+1)
  9309  0DF5  0858               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9310  0DF6  0651               	xorwf	(??_updateModulationArray+1)^(0+256),w
  9311  0DF7  1D03               	skipz
  9312  0DF8  2DFB               	goto	u10255
  9313  0DF9  0857               	movf	updateModulationArray@subDiv^(0+256),w
  9314  0DFA  0650               	xorwf	??_updateModulationArray^(0+256),w
  9315  0DFB                     u10255:	
  9316  0DFB  1903               	btfsc	3,2
  9317  0DFC  0008               	return
  9318  0DFD                     l9246:	
  9319                           ;modulation.c: 48: return;
  9320                           
  9321                           
  9322                           ;modulation.c: 49: }
  9323                           ;modulation.c: 51: int angleFactor = 360/subDiv;
  9324  0DFD  0858               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9325  0DFE  0021               	movlb	1	; select bank1
  9326  0DFF  00A1               	movwf	(___awdiv@divisor+1)^(0+128)
  9327  0E00  0022               	movlb	2	; select bank2
  9328  0E01  0857               	movf	updateModulationArray@subDiv^(0+256),w
  9329  0E02  0021               	movlb	1	; select bank1
  9330  0E03  00A0               	movwf	___awdiv@divisor^(0+128)
  9331  0E04  3068               	movlw	104
  9332  0E05  00A2               	movwf	___awdiv@dividend^(0+128)
  9333  0E06  3001               	movlw	1
  9334  0E07  00A3               	movwf	(___awdiv@dividend^(0+128)+1)
  9335  0E08  31A4  2464  318D   	fcall	___awdiv
  9336  0E0B  0021               	movlb	1	; select bank1
  9337  0E0C  0821               	movf	(?___awdiv+1)^(0+128),w
  9338  0E0D  0022               	movlb	2	; select bank2
  9339  0E0E  00D5               	movwf	(updateModulationArray@angleFactor+1)^(0+256)
  9340  0E0F  0021               	movlb	1	; select bank1
  9341  0E10  0820               	movf	?___awdiv^(0+128),w
  9342  0E11  0022               	movlb	2	; select bank2
  9343  0E12  00D4               	movwf	updateModulationArray@angleFactor^(0+256)
  9344                           
  9345                           ;modulation.c: 52: for (char iAngle = 0; iAngle < subDiv; iAngle++) {
  9346  0E13  01DB               	clrf	updateModulationArray@iAngle^(0+256)
  9347  0E14                     l9270:	
  9348  0E14  0858               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9349  0E15  3A80               	xorlw	128
  9350  0E16  3C80               	sublw	128
  9351  0E17  1D03               	skipz
  9352  0E18  2E1B               	goto	u10265
  9353  0E19  0857               	movf	updateModulationArray@subDiv^(0+256),w
  9354  0E1A  025B               	subwf	updateModulationArray@iAngle^(0+256),w
  9355  0E1B                     u10265:	
  9356  0E1B  1803               	btfsc	3,0
  9357  0E1C  2FC1               	goto	l9272
  9358                           
  9359                           ;modulation.c: 53: int thisAngle = angleFactor * iAngle;
  9360  0E1D  0022               	movlb	2	; select bank2
  9361  0E1E  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9362  0E1F  00D0               	movwf	??_updateModulationArray^(0+256)
  9363  0E20  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9364  0E21  0850               	movf	??_updateModulationArray^(0+256),w
  9365  0E22  00AE               	movwf	___wmul@multiplier^(0+256)
  9366  0E23  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9367  0E24  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
  9368  0E25  0855               	movf	(updateModulationArray@angleFactor+1)^(0+256),w
  9369  0E26  00B1               	movwf	(___wmul@multiplicand+1)^(0+256)
  9370  0E27  0854               	movf	updateModulationArray@angleFactor^(0+256),w
  9371  0E28  00B0               	movwf	___wmul@multiplicand^(0+256)
  9372  0E29  31AD  25C5  318D   	fcall	___wmul
  9373  0E2C  0022               	movlb	2	; select bank2
  9374  0E2D  082F               	movf	(?___wmul+1)^(0+256),w
  9375  0E2E  00DA               	movwf	(updateModulationArray@thisAngle+1)^(0+256)
  9376  0E2F  082E               	movf	?___wmul^(0+256),w
  9377  0E30  00D9               	movwf	updateModulationArray@thisAngle^(0+256)
  9378                           
  9379                           ;modulation.c: 54: switch (bottom_push_state) {
  9380  0E31  2FA4               	goto	l9266
  9381  0E32                     l9252:	
  9382                           ;modulation.c: 55: case 1:
  9383                           
  9384                           
  9385                           ;modulation.c: 56: modArray[iAngle] = modCos(thisAngle, symmetry);
  9386  0E32  0022               	movlb	2	; select bank2
  9387  0E33  085A               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9388  0E34  0021               	movlb	1	; select bank1
  9389  0E35  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9390  0E36  0022               	movlb	2	; select bank2
  9391  0E37  0859               	movf	updateModulationArray@thisAngle^(0+256),w
  9392  0E38  0021               	movlb	1	; select bank1
  9393  0E39  00A8               	movwf	___awtoft@c^(0+128)
  9394  0E3A  31AE  263A  318D   	fcall	___awtoft
  9395  0E3D  0021               	movlb	1	; select bank1
  9396  0E3E  0828               	movf	?___awtoft^(0+128),w
  9397  0E3F  0022               	movlb	2	; select bank2
  9398  0E40  00B4               	movwf	modCos@angle^(0+256)
  9399  0E41  0021               	movlb	1	; select bank1
  9400  0E42  0829               	movf	(?___awtoft+1)^(0+128),w
  9401  0E43  0022               	movlb	2	; select bank2
  9402  0E44  00B5               	movwf	(modCos@angle+1)^(0+256)
  9403  0E45  0021               	movlb	1	; select bank1
  9404  0E46  082A               	movf	(?___awtoft+2)^(0+128),w
  9405  0E47  0022               	movlb	2	; select bank2
  9406  0E48  00B6               	movwf	(modCos@angle+2)^(0+256)
  9407  0E49  0023               	movlb	3	; select bank3
  9408  0E4A  085C               	movf	(_symmetry+1)^(0+384),w
  9409  0E4B  0021               	movlb	1	; select bank1
  9410  0E4C  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9411  0E4D  0023               	movlb	3	; select bank3
  9412  0E4E  085B               	movf	_symmetry^(0+384),w
  9413  0E4F  0021               	movlb	1	; select bank1
  9414  0E50  00A8               	movwf	___awtoft@c^(0+128)
  9415  0E51  31AE  263A  318D   	fcall	___awtoft
  9416  0E54  0021               	movlb	1	; select bank1
  9417  0E55  0828               	movf	?___awtoft^(0+128),w
  9418  0E56  0022               	movlb	2	; select bank2
  9419  0E57  00B7               	movwf	modCos@inflection^(0+256)
  9420  0E58  0021               	movlb	1	; select bank1
  9421  0E59  0829               	movf	(?___awtoft+1)^(0+128),w
  9422  0E5A  0022               	movlb	2	; select bank2
  9423  0E5B  00B8               	movwf	(modCos@inflection+1)^(0+256)
  9424  0E5C  0021               	movlb	1	; select bank1
  9425  0E5D  082A               	movf	(?___awtoft+2)^(0+128),w
  9426  0E5E  0022               	movlb	2	; select bank2
  9427  0E5F  00B9               	movwf	(modCos@inflection+2)^(0+256)
  9428  0E60  3196  2654  318D   	fcall	_modCos
  9429  0E63  0022               	movlb	2	; select bank2
  9430  0E64  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9431  0E65  00D0               	movwf	??_updateModulationArray^(0+256)
  9432  0E66  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9433  0E67  35D0               	lslf	??_updateModulationArray^(0+256),f
  9434  0E68  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9435  0E69  308A               	movlw	138
  9436  0E6A  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9437  0E6B  3023               	movlw	35
  9438  0E6C  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9439  0E6D  0850               	movf	??_updateModulationArray^(0+256),w
  9440  0E6E  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9441  0E6F  0086               	movwf	6
  9442  0E70  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9443  0E71  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9444  0E72  0087               	movwf	7
  9445  0E73  0834               	movf	?_modCos^(0+256),w
  9446  0E74  3FC0               	movwi [0]fsr1
  9447  0E75  0835               	movf	(?_modCos+1)^(0+256),w
  9448  0E76  3FC1               	movwi [1]fsr1
  9449                           
  9450                           ;modulation.c: 57: break;
  9451  0E77  2FBB               	goto	l9268
  9452  0E78                     l9254:	
  9453                           ;modulation.c: 58: case 2:
  9454                           
  9455                           
  9456                           ;modulation.c: 59: modArray[iAngle] = modTri(thisAngle, symmetry);
  9457  0E78  0022               	movlb	2	; select bank2
  9458  0E79  085A               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9459  0E7A  0021               	movlb	1	; select bank1
  9460  0E7B  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9461  0E7C  0022               	movlb	2	; select bank2
  9462  0E7D  0859               	movf	updateModulationArray@thisAngle^(0+256),w
  9463  0E7E  0021               	movlb	1	; select bank1
  9464  0E7F  00A8               	movwf	___awtoft@c^(0+128)
  9465  0E80  31AE  263A  318D   	fcall	___awtoft
  9466  0E83  0021               	movlb	1	; select bank1
  9467  0E84  0828               	movf	?___awtoft^(0+128),w
  9468  0E85  0022               	movlb	2	; select bank2
  9469  0E86  00AE               	movwf	modTri@angle^(0+256)
  9470  0E87  0021               	movlb	1	; select bank1
  9471  0E88  0829               	movf	(?___awtoft+1)^(0+128),w
  9472  0E89  0022               	movlb	2	; select bank2
  9473  0E8A  00AF               	movwf	(modTri@angle+1)^(0+256)
  9474  0E8B  0021               	movlb	1	; select bank1
  9475  0E8C  082A               	movf	(?___awtoft+2)^(0+128),w
  9476  0E8D  0022               	movlb	2	; select bank2
  9477  0E8E  00B0               	movwf	(modTri@angle+2)^(0+256)
  9478  0E8F  0023               	movlb	3	; select bank3
  9479  0E90  085C               	movf	(_symmetry+1)^(0+384),w
  9480  0E91  0021               	movlb	1	; select bank1
  9481  0E92  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9482  0E93  0023               	movlb	3	; select bank3
  9483  0E94  085B               	movf	_symmetry^(0+384),w
  9484  0E95  0021               	movlb	1	; select bank1
  9485  0E96  00A8               	movwf	___awtoft@c^(0+128)
  9486  0E97  31AE  263A  318D   	fcall	___awtoft
  9487  0E9A  0021               	movlb	1	; select bank1
  9488  0E9B  0828               	movf	?___awtoft^(0+128),w
  9489  0E9C  0022               	movlb	2	; select bank2
  9490  0E9D  00B1               	movwf	modTri@inflection^(0+256)
  9491  0E9E  0021               	movlb	1	; select bank1
  9492  0E9F  0829               	movf	(?___awtoft+1)^(0+128),w
  9493  0EA0  0022               	movlb	2	; select bank2
  9494  0EA1  00B2               	movwf	(modTri@inflection+1)^(0+256)
  9495  0EA2  0021               	movlb	1	; select bank1
  9496  0EA3  082A               	movf	(?___awtoft+2)^(0+128),w
  9497  0EA4  0022               	movlb	2	; select bank2
  9498  0EA5  00B3               	movwf	(modTri@inflection+2)^(0+256)
  9499  0EA6  3189  21EF  318D   	fcall	_modTri
  9500  0EA9  0022               	movlb	2	; select bank2
  9501  0EAA  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9502  0EAB  00D0               	movwf	??_updateModulationArray^(0+256)
  9503  0EAC  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9504  0EAD  35D0               	lslf	??_updateModulationArray^(0+256),f
  9505  0EAE  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9506  0EAF  308A               	movlw	138
  9507  0EB0  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9508  0EB1  3023               	movlw	35
  9509  0EB2  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9510  0EB3  0850               	movf	??_updateModulationArray^(0+256),w
  9511  0EB4  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9512  0EB5  0086               	movwf	6
  9513  0EB6  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9514  0EB7  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9515  0EB8  0087               	movwf	7
  9516  0EB9  082E               	movf	?_modTri^(0+256),w
  9517  0EBA  3FC0               	movwi [0]fsr1
  9518  0EBB  082F               	movf	(?_modTri+1)^(0+256),w
  9519  0EBC  3FC1               	movwi [1]fsr1
  9520                           
  9521                           ;modulation.c: 60: break;
  9522  0EBD  2FBB               	goto	l9268
  9523  0EBE                     l9256:	
  9524                           ;modulation.c: 61: case 3:
  9525                           
  9526                           
  9527                           ;modulation.c: 62: modArray[iAngle] = modSquare(thisAngle, symmetry);
  9528  0EBE  0022               	movlb	2	; select bank2
  9529  0EBF  085A               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9530  0EC0  0021               	movlb	1	; select bank1
  9531  0EC1  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9532  0EC2  0022               	movlb	2	; select bank2
  9533  0EC3  0859               	movf	updateModulationArray@thisAngle^(0+256),w
  9534  0EC4  0021               	movlb	1	; select bank1
  9535  0EC5  00A8               	movwf	___awtoft@c^(0+128)
  9536  0EC6  31AE  263A  318D   	fcall	___awtoft
  9537  0EC9  0021               	movlb	1	; select bank1
  9538  0ECA  0828               	movf	?___awtoft^(0+128),w
  9539  0ECB  0022               	movlb	2	; select bank2
  9540  0ECC  00C8               	movwf	modSquare@angle^(0+256)
  9541  0ECD  0021               	movlb	1	; select bank1
  9542  0ECE  0829               	movf	(?___awtoft+1)^(0+128),w
  9543  0ECF  0022               	movlb	2	; select bank2
  9544  0ED0  00C9               	movwf	(modSquare@angle+1)^(0+256)
  9545  0ED1  0021               	movlb	1	; select bank1
  9546  0ED2  082A               	movf	(?___awtoft+2)^(0+128),w
  9547  0ED3  0022               	movlb	2	; select bank2
  9548  0ED4  00CA               	movwf	(modSquare@angle+2)^(0+256)
  9549  0ED5  0023               	movlb	3	; select bank3
  9550  0ED6  085C               	movf	(_symmetry+1)^(0+384),w
  9551  0ED7  0021               	movlb	1	; select bank1
  9552  0ED8  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9553  0ED9  0023               	movlb	3	; select bank3
  9554  0EDA  085B               	movf	_symmetry^(0+384),w
  9555  0EDB  0021               	movlb	1	; select bank1
  9556  0EDC  00A8               	movwf	___awtoft@c^(0+128)
  9557  0EDD  31AE  263A  318D   	fcall	___awtoft
  9558  0EE0  0021               	movlb	1	; select bank1
  9559  0EE1  0828               	movf	?___awtoft^(0+128),w
  9560  0EE2  0022               	movlb	2	; select bank2
  9561  0EE3  00CB               	movwf	modSquare@inflection^(0+256)
  9562  0EE4  0021               	movlb	1	; select bank1
  9563  0EE5  0829               	movf	(?___awtoft+1)^(0+128),w
  9564  0EE6  0022               	movlb	2	; select bank2
  9565  0EE7  00CC               	movwf	(modSquare@inflection+1)^(0+256)
  9566  0EE8  0021               	movlb	1	; select bank1
  9567  0EE9  082A               	movf	(?___awtoft+2)^(0+128),w
  9568  0EEA  0022               	movlb	2	; select bank2
  9569  0EEB  00CD               	movwf	(modSquare@inflection+2)^(0+256)
  9570  0EEC  31A1  2123  318D   	fcall	_modSquare
  9571  0EEF  0022               	movlb	2	; select bank2
  9572  0EF0  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9573  0EF1  00D0               	movwf	??_updateModulationArray^(0+256)
  9574  0EF2  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9575  0EF3  35D0               	lslf	??_updateModulationArray^(0+256),f
  9576  0EF4  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9577  0EF5  308A               	movlw	138
  9578  0EF6  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9579  0EF7  3023               	movlw	35
  9580  0EF8  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9581  0EF9  0850               	movf	??_updateModulationArray^(0+256),w
  9582  0EFA  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9583  0EFB  0086               	movwf	6
  9584  0EFC  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9585  0EFD  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9586  0EFE  0087               	movwf	7
  9587  0EFF  0848               	movf	?_modSquare^(0+256),w
  9588  0F00  3FC0               	movwi [0]fsr1
  9589  0F01  0849               	movf	(?_modSquare+1)^(0+256),w
  9590  0F02  3FC1               	movwi [1]fsr1
  9591                           
  9592                           ;modulation.c: 63: break;
  9593  0F03  2FBB               	goto	l9268
  9594  0F04                     l9258:	
  9595                           ;modulation.c: 64: case 4:
  9596                           
  9597                           
  9598                           ;modulation.c: 65: modArray[iAngle] = modSawRev(thisAngle, symmetry);
  9599  0F04  0022               	movlb	2	; select bank2
  9600  0F05  085A               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9601  0F06  0021               	movlb	1	; select bank1
  9602  0F07  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9603  0F08  0022               	movlb	2	; select bank2
  9604  0F09  0859               	movf	updateModulationArray@thisAngle^(0+256),w
  9605  0F0A  0021               	movlb	1	; select bank1
  9606  0F0B  00A8               	movwf	___awtoft@c^(0+128)
  9607  0F0C  31AE  263A  318D   	fcall	___awtoft
  9608  0F0F  0021               	movlb	1	; select bank1
  9609  0F10  0828               	movf	?___awtoft^(0+128),w
  9610  0F11  0022               	movlb	2	; select bank2
  9611  0F12  00C2               	movwf	modSawRev@angle^(0+256)
  9612  0F13  0021               	movlb	1	; select bank1
  9613  0F14  0829               	movf	(?___awtoft+1)^(0+128),w
  9614  0F15  0022               	movlb	2	; select bank2
  9615  0F16  00C3               	movwf	(modSawRev@angle+1)^(0+256)
  9616  0F17  0021               	movlb	1	; select bank1
  9617  0F18  082A               	movf	(?___awtoft+2)^(0+128),w
  9618  0F19  0022               	movlb	2	; select bank2
  9619  0F1A  00C4               	movwf	(modSawRev@angle+2)^(0+256)
  9620  0F1B  0023               	movlb	3	; select bank3
  9621  0F1C  085C               	movf	(_symmetry+1)^(0+384),w
  9622  0F1D  0021               	movlb	1	; select bank1
  9623  0F1E  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9624  0F1F  0023               	movlb	3	; select bank3
  9625  0F20  085B               	movf	_symmetry^(0+384),w
  9626  0F21  0021               	movlb	1	; select bank1
  9627  0F22  00A8               	movwf	___awtoft@c^(0+128)
  9628  0F23  31AE  263A  318D   	fcall	___awtoft
  9629  0F26  0021               	movlb	1	; select bank1
  9630  0F27  0828               	movf	?___awtoft^(0+128),w
  9631  0F28  0022               	movlb	2	; select bank2
  9632  0F29  00C5               	movwf	modSawRev@inflection^(0+256)
  9633  0F2A  0021               	movlb	1	; select bank1
  9634  0F2B  0829               	movf	(?___awtoft+1)^(0+128),w
  9635  0F2C  0022               	movlb	2	; select bank2
  9636  0F2D  00C6               	movwf	(modSawRev@inflection+1)^(0+256)
  9637  0F2E  0021               	movlb	1	; select bank1
  9638  0F2F  082A               	movf	(?___awtoft+2)^(0+128),w
  9639  0F30  0022               	movlb	2	; select bank2
  9640  0F31  00C7               	movwf	(modSawRev@inflection+2)^(0+256)
  9641  0F32  31AD  25FD  318D   	fcall	_modSawRev
  9642  0F35  0022               	movlb	2	; select bank2
  9643  0F36  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9644  0F37  00D0               	movwf	??_updateModulationArray^(0+256)
  9645  0F38  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9646  0F39  35D0               	lslf	??_updateModulationArray^(0+256),f
  9647  0F3A  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9648  0F3B  308A               	movlw	138
  9649  0F3C  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9650  0F3D  3023               	movlw	35
  9651  0F3E  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9652  0F3F  0850               	movf	??_updateModulationArray^(0+256),w
  9653  0F40  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9654  0F41  0086               	movwf	6
  9655  0F42  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9656  0F43  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9657  0F44  0087               	movwf	7
  9658  0F45  0842               	movf	?_modSawRev^(0+256),w
  9659  0F46  3FC0               	movwi [0]fsr1
  9660  0F47  0843               	movf	(?_modSawRev+1)^(0+256),w
  9661  0F48  3FC1               	movwi [1]fsr1
  9662                           
  9663                           ;modulation.c: 66: break;
  9664  0F49  2FBB               	goto	l9268
  9665  0F4A                     l9260:	
  9666                           ;modulation.c: 67: case 5:
  9667                           
  9668                           
  9669                           ;modulation.c: 68: modArray[iAngle] = modSaw(thisAngle, symmetry);
  9670  0F4A  0022               	movlb	2	; select bank2
  9671  0F4B  085A               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9672  0F4C  0021               	movlb	1	; select bank1
  9673  0F4D  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9674  0F4E  0022               	movlb	2	; select bank2
  9675  0F4F  0859               	movf	updateModulationArray@thisAngle^(0+256),w
  9676  0F50  0021               	movlb	1	; select bank1
  9677  0F51  00A8               	movwf	___awtoft@c^(0+128)
  9678  0F52  31AE  263A  318D   	fcall	___awtoft
  9679  0F55  0021               	movlb	1	; select bank1
  9680  0F56  0828               	movf	?___awtoft^(0+128),w
  9681  0F57  0022               	movlb	2	; select bank2
  9682  0F58  00AE               	movwf	modSaw@angle^(0+256)
  9683  0F59  0021               	movlb	1	; select bank1
  9684  0F5A  0829               	movf	(?___awtoft+1)^(0+128),w
  9685  0F5B  0022               	movlb	2	; select bank2
  9686  0F5C  00AF               	movwf	(modSaw@angle+1)^(0+256)
  9687  0F5D  0021               	movlb	1	; select bank1
  9688  0F5E  082A               	movf	(?___awtoft+2)^(0+128),w
  9689  0F5F  0022               	movlb	2	; select bank2
  9690  0F60  00B0               	movwf	(modSaw@angle+2)^(0+256)
  9691  0F61  0023               	movlb	3	; select bank3
  9692  0F62  085C               	movf	(_symmetry+1)^(0+384),w
  9693  0F63  0021               	movlb	1	; select bank1
  9694  0F64  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9695  0F65  0023               	movlb	3	; select bank3
  9696  0F66  085B               	movf	_symmetry^(0+384),w
  9697  0F67  0021               	movlb	1	; select bank1
  9698  0F68  00A8               	movwf	___awtoft@c^(0+128)
  9699  0F69  31AE  263A  318D   	fcall	___awtoft
  9700  0F6C  0021               	movlb	1	; select bank1
  9701  0F6D  0828               	movf	?___awtoft^(0+128),w
  9702  0F6E  0022               	movlb	2	; select bank2
  9703  0F6F  00B1               	movwf	modSaw@inflection^(0+256)
  9704  0F70  0021               	movlb	1	; select bank1
  9705  0F71  0829               	movf	(?___awtoft+1)^(0+128),w
  9706  0F72  0022               	movlb	2	; select bank2
  9707  0F73  00B2               	movwf	(modSaw@inflection+1)^(0+256)
  9708  0F74  0021               	movlb	1	; select bank1
  9709  0F75  082A               	movf	(?___awtoft+2)^(0+128),w
  9710  0F76  0022               	movlb	2	; select bank2
  9711  0F77  00B3               	movwf	(modSaw@inflection+2)^(0+256)
  9712  0F78  3194  24BC  318D   	fcall	_modSaw
  9713  0F7B  0022               	movlb	2	; select bank2
  9714  0F7C  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9715  0F7D  00D0               	movwf	??_updateModulationArray^(0+256)
  9716  0F7E  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9717  0F7F  35D0               	lslf	??_updateModulationArray^(0+256),f
  9718  0F80  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9719  0F81  308A               	movlw	138
  9720  0F82  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9721  0F83  3023               	movlw	35
  9722  0F84  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9723  0F85  0850               	movf	??_updateModulationArray^(0+256),w
  9724  0F86  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9725  0F87  0086               	movwf	6
  9726  0F88  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9727  0F89  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9728  0F8A  0087               	movwf	7
  9729  0F8B  082E               	movf	?_modSaw^(0+256),w
  9730  0F8C  3FC0               	movwi [0]fsr1
  9731  0F8D  082F               	movf	(?_modSaw+1)^(0+256),w
  9732  0F8E  3FC1               	movwi [1]fsr1
  9733                           
  9734                           ;modulation.c: 69: break;
  9735  0F8F  2FBB               	goto	l9268
  9736  0F90                     l9262:	
  9737                           ;modulation.c: 70: default:
  9738                           
  9739                           
  9740                           ;modulation.c: 71: modArray[iAngle] = 0;
  9741  0F90  0022               	movlb	2	; select bank2
  9742  0F91  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9743  0F92  00D0               	movwf	??_updateModulationArray^(0+256)
  9744  0F93  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9745  0F94  35D0               	lslf	??_updateModulationArray^(0+256),f
  9746  0F95  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9747  0F96  308A               	movlw	138
  9748  0F97  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9749  0F98  3023               	movlw	35
  9750  0F99  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9751  0F9A  0850               	movf	??_updateModulationArray^(0+256),w
  9752  0F9B  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9753  0F9C  0086               	movwf	6
  9754  0F9D  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9755  0F9E  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9756  0F9F  0087               	movwf	7
  9757  0FA0  3000               	movlw	0
  9758  0FA1  3FC0               	movwi [0]fsr1
  9759  0FA2  3FC1               	movwi [1]fsr1
  9760                           
  9761                           ;modulation.c: 73: }
  9762                           
  9763                           ;modulation.c: 72: break;
  9764  0FA3  2FBB               	goto	l9268
  9765  0FA4                     l9266:	
  9766                           
  9767                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9768                           ; Switch size 1, requested type "space"
  9769                           ; Number of cases is 1, Range of values is 0 to 0
  9770                           ; switch strategies available:
  9771                           ; Name         Instructions Cycles
  9772                           ; simple_byte            4     3 (average)
  9773                           ; direct_byte            8     6 (fixed)
  9774                           ; jumptable            260     6 (fixed)
  9775                           ;	Chosen strategy is simple_byte
  9776  0FA4  0020               	movlb	0	; select bank0
  9777  0FA5  0849               	movf	_bottom_push_state+1,w
  9778  0FA6  3A00               	xorlw	0	; case 0
  9779  0FA7  1903               	skipnz
  9780  0FA8  2FAA               	goto	l9852
  9781  0FA9  2F90               	goto	l9262
  9782  0FAA                     l9852:	
  9783                           
  9784                           ; Switch size 1, requested type "space"
  9785                           ; Number of cases is 5, Range of values is 1 to 5
  9786                           ; switch strategies available:
  9787                           ; Name         Instructions Cycles
  9788                           ; simple_byte           16     9 (average)
  9789                           ; direct_byte           19     9 (fixed)
  9790                           ; jumptable            263     9 (fixed)
  9791                           ;	Chosen strategy is simple_byte
  9792  0FAA  0848               	movf	_bottom_push_state,w
  9793  0FAB  3A01               	xorlw	1	; case 1
  9794  0FAC  1903               	skipnz
  9795  0FAD  2E32               	goto	l9252
  9796  0FAE  3A03               	xorlw	3	; case 2
  9797  0FAF  1903               	skipnz
  9798  0FB0  2E78               	goto	l9254
  9799  0FB1  3A01               	xorlw	1	; case 3
  9800  0FB2  1903               	skipnz
  9801  0FB3  2EBE               	goto	l9256
  9802  0FB4  3A07               	xorlw	7	; case 4
  9803  0FB5  1903               	skipnz
  9804  0FB6  2F04               	goto	l9258
  9805  0FB7  3A01               	xorlw	1	; case 5
  9806  0FB8  1903               	skipnz
  9807  0FB9  2F4A               	goto	l9260
  9808  0FBA  2F90               	goto	l9262
  9809  0FBB                     l9268:	
  9810  0FBB  3001               	movlw	1
  9811  0FBC  0022               	movlb	2	; select bank2
  9812  0FBD  00D0               	movwf	??_updateModulationArray^(0+256)
  9813  0FBE  0850               	movf	??_updateModulationArray^(0+256),w
  9814  0FBF  07DB               	addwf	updateModulationArray@iAngle^(0+256),f
  9815  0FC0  2E14               	goto	l9270
  9816  0FC1                     l9272:	
  9817                           
  9818                           ;modulation.c: 74: }
  9819                           ;modulation.c: 75: for (char iAngle = subDiv; iAngle < 120; iAngle++) {
  9820  0FC1  0022               	movlb	2	; select bank2
  9821  0FC2  0857               	movf	updateModulationArray@subDiv^(0+256),w
  9822  0FC3  00D0               	movwf	??_updateModulationArray^(0+256)
  9823  0FC4  0850               	movf	??_updateModulationArray^(0+256),w
  9824  0FC5  00D6               	movwf	updateModulationArray@iAngle_2347^(0+256)
  9825  0FC6  3078               	movlw	120
  9826  0FC7  0256               	subwf	updateModulationArray@iAngle_2347^(0+256),w
  9827  0FC8  1803               	btfsc	3,0
  9828  0FC9  2FE4               	goto	l9282
  9829  0FCA                     l9276:	
  9830                           
  9831                           ;modulation.c: 76: modArray[iAngle] = 0 ;
  9832  0FCA  0856               	movf	updateModulationArray@iAngle_2347^(0+256),w
  9833  0FCB  00D0               	movwf	??_updateModulationArray^(0+256)
  9834  0FCC  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9835  0FCD  35D0               	lslf	??_updateModulationArray^(0+256),f
  9836  0FCE  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9837  0FCF  308A               	movlw	138
  9838  0FD0  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9839  0FD1  3023               	movlw	35
  9840  0FD2  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9841  0FD3  0850               	movf	??_updateModulationArray^(0+256),w
  9842  0FD4  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9843  0FD5  0086               	movwf	6
  9844  0FD6  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9845  0FD7  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9846  0FD8  0087               	movwf	7
  9847  0FD9  3000               	movlw	0
  9848  0FDA  3FC0               	movwi [0]fsr1
  9849  0FDB  3FC1               	movwi [1]fsr1
  9850  0FDC  3001               	movlw	1
  9851  0FDD  00D0               	movwf	??_updateModulationArray^(0+256)
  9852  0FDE  0850               	movf	??_updateModulationArray^(0+256),w
  9853  0FDF  07D6               	addwf	updateModulationArray@iAngle_2347^(0+256),f
  9854  0FE0  3078               	movlw	120
  9855  0FE1  0256               	subwf	updateModulationArray@iAngle_2347^(0+256),w
  9856  0FE2  1C03               	skipc
  9857  0FE3  2FCA               	goto	l9276
  9858  0FE4                     l9282:	
  9859                           
  9860                           ;modulation.c: 77: }
  9861                           ;modulation.c: 78: modArray[120] = bottom_push_state;
  9862  0FE4  307A               	movlw	122
  9863  0FE5  0086               	movwf	6
  9864  0FE6  3024               	movlw	36
  9865  0FE7  0087               	movwf	7
  9866  0FE8  0020               	movlb	0	; select bank0
  9867  0FE9  0848               	movf	_bottom_push_state,w
  9868  0FEA  3FC0               	movwi [0]fsr1
  9869  0FEB  0849               	movf	_bottom_push_state+1,w
  9870  0FEC  3FC1               	movwi [1]fsr1
  9871                           
  9872                           ;modulation.c: 79: modArray[121] = symmetry;
  9873  0FED  307C               	movlw	124
  9874  0FEE  0086               	movwf	6
  9875  0FEF  3024               	movlw	36
  9876  0FF0  0087               	movwf	7
  9877  0FF1  0023               	movlb	3	; select bank3
  9878  0FF2  085B               	movf	_symmetry^(0+384),w
  9879  0FF3  3FC0               	movwi [0]fsr1
  9880  0FF4  085C               	movf	(_symmetry+1)^(0+384),w
  9881  0FF5  3FC1               	movwi [1]fsr1
  9882                           
  9883                           ;modulation.c: 80: modArray[122] = subDiv;
  9884  0FF6  307E               	movlw	126
  9885  0FF7  0086               	movwf	6
  9886  0FF8  3024               	movlw	36
  9887  0FF9  0087               	movwf	7
  9888  0FFA  0022               	movlb	2	; select bank2
  9889  0FFB  0857               	movf	updateModulationArray@subDiv^(0+256),w
  9890  0FFC  3FC0               	movwi [0]fsr1
  9891  0FFD  0858               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9892  0FFE  3FC1               	movwi [1]fsr1
  9893  0FFF  0008               	return
  9894  1000                     __end_of_updateModulationArray:	
  9895                           
  9896                           	psect	text17
  9897  09EF                     __ptext17:	
  9898 ;; *************** function _modTri *****************
  9899 ;; Defined at:
  9900 ;;		line 100 in file "modulation.c"
  9901 ;; Parameters:    Size  Location     Type
  9902 ;;  angle           3   14[BANK2 ] void 
  9903 ;;  inflection      3   17[BANK2 ] void 
  9904 ;; Auto vars:     Size  Location     Type
  9905 ;;  tmpVal          3   29[BANK2 ] void 
  9906 ;;  period          3   26[BANK2 ] void 
  9907 ;;  shift           3   23[BANK2 ] void 
  9908 ;; Return value:  Size  Location     Type
  9909 ;;                  2   14[BANK2 ] int 
  9910 ;; Registers used:
  9911 ;;		wreg, status,2, status,0, pclath, cstack
  9912 ;; Tracked objects:
  9913 ;;		On entry : 0/0
  9914 ;;		On exit  : 0/0
  9915 ;;		Unchanged: 0/0
  9916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9917 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9918 ;;      Locals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9920 ;;      Totals:         0       0       0      18       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9921 ;;Total ram usage:       18 bytes
  9922 ;; Hardware stack levels used:    1
  9923 ;; Hardware stack levels required when called:    5
  9924 ;; This function calls:
  9925 ;;		___ftadd
  9926 ;;		___ftdiv
  9927 ;;		___ftge
  9928 ;;		___ftmul
  9929 ;;		___ftneg
  9930 ;;		___fttol
  9931 ;; This function is called by:
  9932 ;;		_updateModulationArray
  9933 ;; This function uses a non-reentrant model
  9934 ;;
  9935                           
  9936                           
  9937                           ;psect for function _modTri
  9938  09EF                     _modTri:	
  9939                           
  9940                           ;modulation.c: 101: double period = 1.0;
  9941                           
  9942                           ;incstack = 0
  9943                           ; Regs used in _modTri: [wreg+status,2+status,0+pclath+cstack]
  9944  09EF  3000               	movlw	0
  9945  09F0  0022               	movlb	2	; select bank2
  9946  09F1  00BA               	movwf	modTri@period^(0+256)
  9947  09F2  3080               	movlw	128
  9948  09F3  00BB               	movwf	(modTri@period+1)^(0+256)
  9949  09F4  303F               	movlw	63
  9950  09F5  00BC               	movwf	(modTri@period+2)^(0+256)
  9951                           
  9952                           ;modulation.c: 102: double shift = 0;
  9953  09F6  3000               	movlw	0
  9954  09F7  00B7               	movwf	modTri@shift^(0+256)
  9955  09F8  3000               	movlw	0
  9956  09F9  00B8               	movwf	(modTri@shift+1)^(0+256)
  9957  09FA  3000               	movlw	0
  9958  09FB  00B9               	movwf	(modTri@shift+2)^(0+256)
  9959                           
  9960                           ;modulation.c: 104: if(angle<=inflection) {
  9961  09FC  0831               	movf	modTri@inflection^(0+256),w
  9962  09FD  0021               	movlb	1	; select bank1
  9963  09FE  00A0               	movwf	___ftge@ff1^(0+128)
  9964  09FF  0022               	movlb	2	; select bank2
  9965  0A00  0832               	movf	(modTri@inflection+1)^(0+256),w
  9966  0A01  0021               	movlb	1	; select bank1
  9967  0A02  00A1               	movwf	(___ftge@ff1+1)^(0+128)
  9968  0A03  0022               	movlb	2	; select bank2
  9969  0A04  0833               	movf	(modTri@inflection+2)^(0+256),w
  9970  0A05  0021               	movlb	1	; select bank1
  9971  0A06  00A2               	movwf	(___ftge@ff1+2)^(0+128)
  9972  0A07  0022               	movlb	2	; select bank2
  9973  0A08  082E               	movf	modTri@angle^(0+256),w
  9974  0A09  0021               	movlb	1	; select bank1
  9975  0A0A  00A3               	movwf	___ftge@ff2^(0+128)
  9976  0A0B  0022               	movlb	2	; select bank2
  9977  0A0C  082F               	movf	(modTri@angle+1)^(0+256),w
  9978  0A0D  0021               	movlb	1	; select bank1
  9979  0A0E  00A4               	movwf	(___ftge@ff2+1)^(0+128)
  9980  0A0F  0022               	movlb	2	; select bank2
  9981  0A10  0830               	movf	(modTri@angle+2)^(0+256),w
  9982  0A11  0021               	movlb	1	; select bank1
  9983  0A12  00A5               	movwf	(___ftge@ff2+2)^(0+128)
  9984  0A13  31A0  20AA  3189   	fcall	___ftge
  9985  0A16  1C03               	btfss	3,0
  9986  0A17  2A24               	goto	l8602
  9987                           
  9988                           ;modulation.c: 105: period = 180.0/inflection;
  9989  0A18  0022               	movlb	2	; select bank2
  9990  0A19  0831               	movf	modTri@inflection^(0+256),w
  9991  0A1A  0021               	movlb	1	; select bank1
  9992  0A1B  00CE               	movwf	___ftdiv@f2^(0+128)
  9993  0A1C  0022               	movlb	2	; select bank2
  9994  0A1D  0832               	movf	(modTri@inflection+1)^(0+256),w
  9995  0A1E  0021               	movlb	1	; select bank1
  9996  0A1F  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
  9997  0A20  0022               	movlb	2	; select bank2
  9998  0A21  0833               	movf	(modTri@inflection+2)^(0+256),w
  9999  0A22  0021               	movlb	1	; select bank1
 10000  0A23  2ADF               	goto	L5
 10001  0A24                     l8602:	
 10002                           ;modulation.c: 106: } else {
 10003                           
 10004                           
 10005                           ;modulation.c: 107: shift = -(360-inflection*2)*(180/(360-inflection));
 10006  0A24  0022               	movlb	2	; select bank2
 10007  0A25  0831               	movf	modTri@inflection^(0+256),w
 10008  0A26  0021               	movlb	1	; select bank1
 10009  0A27  00B1               	movwf	___ftmul@f2^(0+128)
 10010  0A28  0022               	movlb	2	; select bank2
 10011  0A29  0832               	movf	(modTri@inflection+1)^(0+256),w
 10012  0A2A  0021               	movlb	1	; select bank1
 10013  0A2B  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10014  0A2C  0022               	movlb	2	; select bank2
 10015  0A2D  0833               	movf	(modTri@inflection+2)^(0+256),w
 10016  0A2E  0021               	movlb	1	; select bank1
 10017  0A2F  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10018  0A30  3000               	movlw	0
 10019  0A31  00AE               	movwf	___ftmul@f1^(0+128)
 10020  0A32  3000               	movlw	0
 10021  0A33  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10022  0A34  3040               	movlw	64
 10023  0A35  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10024  0A36  319E  267B  3189   	fcall	___ftmul
 10025  0A39  0021               	movlb	1	; select bank1
 10026  0A3A  082E               	movf	?___ftmul^(0+128),w
 10027  0A3B  00BE               	movwf	___ftneg@f1^(0+128)
 10028  0A3C  082F               	movf	(?___ftmul+1)^(0+128),w
 10029  0A3D  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10030  0A3E  0830               	movf	(?___ftmul+2)^(0+128),w
 10031  0A3F  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10032  0A40  31AC  24EC  3189   	fcall	___ftneg
 10033  0A43  0021               	movlb	1	; select bank1
 10034  0A44  083E               	movf	?___ftneg^(0+128),w
 10035  0A45  00C4               	movwf	___ftadd@f2^(0+128)
 10036  0A46  083F               	movf	(?___ftneg+1)^(0+128),w
 10037  0A47  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10038  0A48  0840               	movf	(?___ftneg+2)^(0+128),w
 10039  0A49  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10040  0A4A  3000               	movlw	0
 10041  0A4B  00C1               	movwf	___ftadd@f1^(0+128)
 10042  0A4C  30B4               	movlw	180
 10043  0A4D  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10044  0A4E  3043               	movlw	67
 10045  0A4F  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10046  0A50  3190  2035  3189   	fcall	___ftadd
 10047  0A53  0021               	movlb	1	; select bank1
 10048  0A54  0841               	movf	?___ftadd^(0+128),w
 10049  0A55  0022               	movlb	2	; select bank2
 10050  0A56  00B4               	movwf	_modTri$2853^(0+256)
 10051  0A57  0021               	movlb	1	; select bank1
 10052  0A58  0842               	movf	(?___ftadd+1)^(0+128),w
 10053  0A59  0022               	movlb	2	; select bank2
 10054  0A5A  00B5               	movwf	(_modTri$2853+1)^(0+256)
 10055  0A5B  0021               	movlb	1	; select bank1
 10056  0A5C  0843               	movf	(?___ftadd+2)^(0+128),w
 10057  0A5D  0022               	movlb	2	; select bank2
 10058  0A5E  00B6               	movwf	(_modTri$2853+2)^(0+256)
 10059                           
 10060                           ;modulation.c: 107: shift = -(360-inflection*2)*(180/(360-inflection));
 10061  0A5F  0834               	movf	_modTri$2853^(0+256),w
 10062  0A60  0021               	movlb	1	; select bank1
 10063  0A61  00BE               	movwf	___ftneg@f1^(0+128)
 10064  0A62  0022               	movlb	2	; select bank2
 10065  0A63  0835               	movf	(_modTri$2853+1)^(0+256),w
 10066  0A64  0021               	movlb	1	; select bank1
 10067  0A65  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10068  0A66  0022               	movlb	2	; select bank2
 10069  0A67  0836               	movf	(_modTri$2853+2)^(0+256),w
 10070  0A68  0021               	movlb	1	; select bank1
 10071  0A69  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10072  0A6A  31AC  24EC  3189   	fcall	___ftneg
 10073  0A6D  0021               	movlb	1	; select bank1
 10074  0A6E  083E               	movf	?___ftneg^(0+128),w
 10075  0A6F  00AE               	movwf	___ftmul@f1^(0+128)
 10076  0A70  083F               	movf	(?___ftneg+1)^(0+128),w
 10077  0A71  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10078  0A72  0840               	movf	(?___ftneg+2)^(0+128),w
 10079  0A73  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10080  0A74  3000               	movlw	0
 10081  0A75  00C1               	movwf	___ftadd@f1^(0+128)
 10082  0A76  30B4               	movlw	180
 10083  0A77  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10084  0A78  3043               	movlw	67
 10085  0A79  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10086  0A7A  0022               	movlb	2	; select bank2
 10087  0A7B  0831               	movf	modTri@inflection^(0+256),w
 10088  0A7C  0021               	movlb	1	; select bank1
 10089  0A7D  00BE               	movwf	___ftneg@f1^(0+128)
 10090  0A7E  0022               	movlb	2	; select bank2
 10091  0A7F  0832               	movf	(modTri@inflection+1)^(0+256),w
 10092  0A80  0021               	movlb	1	; select bank1
 10093  0A81  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10094  0A82  0022               	movlb	2	; select bank2
 10095  0A83  0833               	movf	(modTri@inflection+2)^(0+256),w
 10096  0A84  0021               	movlb	1	; select bank1
 10097  0A85  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10098  0A86  31AC  24EC  3189   	fcall	___ftneg
 10099  0A89  0021               	movlb	1	; select bank1
 10100  0A8A  083E               	movf	?___ftneg^(0+128),w
 10101  0A8B  00C4               	movwf	___ftadd@f2^(0+128)
 10102  0A8C  083F               	movf	(?___ftneg+1)^(0+128),w
 10103  0A8D  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10104  0A8E  0840               	movf	(?___ftneg+2)^(0+128),w
 10105  0A8F  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10106  0A90  3190  2035  3189   	fcall	___ftadd
 10107  0A93  0021               	movlb	1	; select bank1
 10108  0A94  0841               	movf	?___ftadd^(0+128),w
 10109  0A95  00CE               	movwf	___ftdiv@f2^(0+128)
 10110  0A96  0842               	movf	(?___ftadd+1)^(0+128),w
 10111  0A97  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10112  0A98  0843               	movf	(?___ftadd+2)^(0+128),w
 10113  0A99  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10114  0A9A  3000               	movlw	0
 10115  0A9B  00D1               	movwf	___ftdiv@f1^(0+128)
 10116  0A9C  3034               	movlw	52
 10117  0A9D  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10118  0A9E  3043               	movlw	67
 10119  0A9F  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10120  0AA0  319C  2474  3189   	fcall	___ftdiv
 10121  0AA3  0021               	movlb	1	; select bank1
 10122  0AA4  084E               	movf	?___ftdiv^(0+128),w
 10123  0AA5  00B1               	movwf	___ftmul@f2^(0+128)
 10124  0AA6  084F               	movf	(?___ftdiv+1)^(0+128),w
 10125  0AA7  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10126  0AA8  0850               	movf	(?___ftdiv+2)^(0+128),w
 10127  0AA9  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10128  0AAA  319E  267B  3189   	fcall	___ftmul
 10129  0AAD  0021               	movlb	1	; select bank1
 10130  0AAE  082E               	movf	?___ftmul^(0+128),w
 10131  0AAF  0022               	movlb	2	; select bank2
 10132  0AB0  00B7               	movwf	modTri@shift^(0+256)
 10133  0AB1  0021               	movlb	1	; select bank1
 10134  0AB2  082F               	movf	(?___ftmul+1)^(0+128),w
 10135  0AB3  0022               	movlb	2	; select bank2
 10136  0AB4  00B8               	movwf	(modTri@shift+1)^(0+256)
 10137  0AB5  0021               	movlb	1	; select bank1
 10138  0AB6  0830               	movf	(?___ftmul+2)^(0+128),w
 10139  0AB7  0022               	movlb	2	; select bank2
 10140  0AB8  00B9               	movwf	(modTri@shift+2)^(0+256)
 10141                           
 10142                           ;modulation.c: 108: period = 180/(360-inflection);
 10143  0AB9  3000               	movlw	0
 10144  0ABA  0021               	movlb	1	; select bank1
 10145  0ABB  00C1               	movwf	___ftadd@f1^(0+128)
 10146  0ABC  30B4               	movlw	180
 10147  0ABD  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10148  0ABE  3043               	movlw	67
 10149  0ABF  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10150  0AC0  0022               	movlb	2	; select bank2
 10151  0AC1  0831               	movf	modTri@inflection^(0+256),w
 10152  0AC2  0021               	movlb	1	; select bank1
 10153  0AC3  00BE               	movwf	___ftneg@f1^(0+128)
 10154  0AC4  0022               	movlb	2	; select bank2
 10155  0AC5  0832               	movf	(modTri@inflection+1)^(0+256),w
 10156  0AC6  0021               	movlb	1	; select bank1
 10157  0AC7  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10158  0AC8  0022               	movlb	2	; select bank2
 10159  0AC9  0833               	movf	(modTri@inflection+2)^(0+256),w
 10160  0ACA  0021               	movlb	1	; select bank1
 10161  0ACB  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10162  0ACC  31AC  24EC  3189   	fcall	___ftneg
 10163  0ACF  0021               	movlb	1	; select bank1
 10164  0AD0  083E               	movf	?___ftneg^(0+128),w
 10165  0AD1  00C4               	movwf	___ftadd@f2^(0+128)
 10166  0AD2  083F               	movf	(?___ftneg+1)^(0+128),w
 10167  0AD3  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10168  0AD4  0840               	movf	(?___ftneg+2)^(0+128),w
 10169  0AD5  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10170  0AD6  3190  2035  3189   	fcall	___ftadd
 10171  0AD9  0021               	movlb	1	; select bank1
 10172  0ADA  0841               	movf	?___ftadd^(0+128),w
 10173  0ADB  00CE               	movwf	___ftdiv@f2^(0+128)
 10174  0ADC  0842               	movf	(?___ftadd+1)^(0+128),w
 10175  0ADD  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10176  0ADE  0843               	movf	(?___ftadd+2)^(0+128),w
 10177  0ADF                     L5:	
 10178  0ADF  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10179  0AE0  3000               	movlw	0
 10180  0AE1  00D1               	movwf	___ftdiv@f1^(0+128)
 10181  0AE2  3034               	movlw	52
 10182  0AE3  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10183  0AE4  3043               	movlw	67
 10184  0AE5  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10185  0AE6  319C  2474  3189   	fcall	___ftdiv
 10186  0AE9  0021               	movlb	1	; select bank1
 10187  0AEA  084E               	movf	?___ftdiv^(0+128),w
 10188  0AEB  0022               	movlb	2	; select bank2
 10189  0AEC  00BA               	movwf	modTri@period^(0+256)
 10190  0AED  0021               	movlb	1	; select bank1
 10191  0AEE  084F               	movf	(?___ftdiv+1)^(0+128),w
 10192  0AEF  0022               	movlb	2	; select bank2
 10193  0AF0  00BB               	movwf	(modTri@period+1)^(0+256)
 10194  0AF1  0021               	movlb	1	; select bank1
 10195  0AF2  0850               	movf	(?___ftdiv+2)^(0+128),w
 10196  0AF3  0022               	movlb	2	; select bank2
 10197  0AF4  00BC               	movwf	(modTri@period+2)^(0+256)
 10198                           
 10199                           ;modulation.c: 110: }
 10200                           ;modulation.c: 111: double tmpVal = (period*angle-shift) ;
 10201  0AF5  0837               	movf	modTri@shift^(0+256),w
 10202  0AF6  0021               	movlb	1	; select bank1
 10203  0AF7  00BE               	movwf	___ftneg@f1^(0+128)
 10204  0AF8  0022               	movlb	2	; select bank2
 10205  0AF9  0838               	movf	(modTri@shift+1)^(0+256),w
 10206  0AFA  0021               	movlb	1	; select bank1
 10207  0AFB  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10208  0AFC  0022               	movlb	2	; select bank2
 10209  0AFD  0839               	movf	(modTri@shift+2)^(0+256),w
 10210  0AFE  0021               	movlb	1	; select bank1
 10211  0AFF  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10212  0B00  31AC  24EC  3189   	fcall	___ftneg
 10213  0B03  0021               	movlb	1	; select bank1
 10214  0B04  083E               	movf	?___ftneg^(0+128),w
 10215  0B05  00C1               	movwf	___ftadd@f1^(0+128)
 10216  0B06  083F               	movf	(?___ftneg+1)^(0+128),w
 10217  0B07  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10218  0B08  0840               	movf	(?___ftneg+2)^(0+128),w
 10219  0B09  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10220  0B0A  0022               	movlb	2	; select bank2
 10221  0B0B  082E               	movf	modTri@angle^(0+256),w
 10222  0B0C  0021               	movlb	1	; select bank1
 10223  0B0D  00AE               	movwf	___ftmul@f1^(0+128)
 10224  0B0E  0022               	movlb	2	; select bank2
 10225  0B0F  082F               	movf	(modTri@angle+1)^(0+256),w
 10226  0B10  0021               	movlb	1	; select bank1
 10227  0B11  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10228  0B12  0022               	movlb	2	; select bank2
 10229  0B13  0830               	movf	(modTri@angle+2)^(0+256),w
 10230  0B14  0021               	movlb	1	; select bank1
 10231  0B15  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10232  0B16  0022               	movlb	2	; select bank2
 10233  0B17  083A               	movf	modTri@period^(0+256),w
 10234  0B18  0021               	movlb	1	; select bank1
 10235  0B19  00B1               	movwf	___ftmul@f2^(0+128)
 10236  0B1A  0022               	movlb	2	; select bank2
 10237  0B1B  083B               	movf	(modTri@period+1)^(0+256),w
 10238  0B1C  0021               	movlb	1	; select bank1
 10239  0B1D  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10240  0B1E  0022               	movlb	2	; select bank2
 10241  0B1F  083C               	movf	(modTri@period+2)^(0+256),w
 10242  0B20  0021               	movlb	1	; select bank1
 10243  0B21  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10244  0B22  319E  267B  3189   	fcall	___ftmul
 10245  0B25  0021               	movlb	1	; select bank1
 10246  0B26  082E               	movf	?___ftmul^(0+128),w
 10247  0B27  00C4               	movwf	___ftadd@f2^(0+128)
 10248  0B28  082F               	movf	(?___ftmul+1)^(0+128),w
 10249  0B29  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10250  0B2A  0830               	movf	(?___ftmul+2)^(0+128),w
 10251  0B2B  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10252  0B2C  3190  2035  3189   	fcall	___ftadd
 10253  0B2F  0021               	movlb	1	; select bank1
 10254  0B30  0841               	movf	?___ftadd^(0+128),w
 10255  0B31  0022               	movlb	2	; select bank2
 10256  0B32  00BD               	movwf	modTri@tmpVal^(0+256)
 10257  0B33  0021               	movlb	1	; select bank1
 10258  0B34  0842               	movf	(?___ftadd+1)^(0+128),w
 10259  0B35  0022               	movlb	2	; select bank2
 10260  0B36  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
 10261  0B37  0021               	movlb	1	; select bank1
 10262  0B38  0843               	movf	(?___ftadd+2)^(0+128),w
 10263  0B39  0022               	movlb	2	; select bank2
 10264  0B3A  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
 10265                           
 10266                           ;modulation.c: 112: if (tmpVal > 180) {
 10267  0B3B  3000               	movlw	0
 10268  0B3C  0021               	movlb	1	; select bank1
 10269  0B3D  00A0               	movwf	___ftge@ff1^(0+128)
 10270  0B3E  3034               	movlw	52
 10271  0B3F  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10272  0B40  3043               	movlw	67
 10273  0B41  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10274  0B42  0022               	movlb	2	; select bank2
 10275  0B43  083D               	movf	modTri@tmpVal^(0+256),w
 10276  0B44  0021               	movlb	1	; select bank1
 10277  0B45  00A3               	movwf	___ftge@ff2^(0+128)
 10278  0B46  0022               	movlb	2	; select bank2
 10279  0B47  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10280  0B48  0021               	movlb	1	; select bank1
 10281  0B49  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10282  0B4A  0022               	movlb	2	; select bank2
 10283  0B4B  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10284  0B4C  0021               	movlb	1	; select bank1
 10285  0B4D  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10286  0B4E  31A0  20AA  3189   	fcall	___ftge
 10287  0B51  1803               	btfsc	3,0
 10288  0B52  2B66               	goto	l8606
 10289                           
 10290                           ;modulation.c: 113: tmpVal = tmpVal - 270.0;
 10291  0B53  3000               	movlw	0
 10292  0B54  0021               	movlb	1	; select bank1
 10293  0B55  00C1               	movwf	___ftadd@f1^(0+128)
 10294  0B56  3087               	movlw	135
 10295  0B57  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10296  0B58  30C3               	movlw	195
 10297  0B59  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10298  0B5A  0022               	movlb	2	; select bank2
 10299  0B5B  083D               	movf	modTri@tmpVal^(0+256),w
 10300  0B5C  0021               	movlb	1	; select bank1
 10301  0B5D  00C4               	movwf	___ftadd@f2^(0+128)
 10302  0B5E  0022               	movlb	2	; select bank2
 10303  0B5F  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10304  0B60  0021               	movlb	1	; select bank1
 10305  0B61  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10306  0B62  0022               	movlb	2	; select bank2
 10307  0B63  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10308  0B64  0021               	movlb	1	; select bank1
 10309  0B65  2B82               	goto	L6
 10310  0B66                     l8606:	
 10311                           ;modulation.c: 114: } else {
 10312                           
 10313                           
 10314                           ;modulation.c: 115: tmpVal = 90 - tmpVal;
 10315  0B66  3000               	movlw	0
 10316  0B67  0021               	movlb	1	; select bank1
 10317  0B68  00C1               	movwf	___ftadd@f1^(0+128)
 10318  0B69  30B4               	movlw	180
 10319  0B6A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10320  0B6B  3042               	movlw	66
 10321  0B6C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10322  0B6D  0022               	movlb	2	; select bank2
 10323  0B6E  083D               	movf	modTri@tmpVal^(0+256),w
 10324  0B6F  0021               	movlb	1	; select bank1
 10325  0B70  00BE               	movwf	___ftneg@f1^(0+128)
 10326  0B71  0022               	movlb	2	; select bank2
 10327  0B72  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10328  0B73  0021               	movlb	1	; select bank1
 10329  0B74  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10330  0B75  0022               	movlb	2	; select bank2
 10331  0B76  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10332  0B77  0021               	movlb	1	; select bank1
 10333  0B78  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10334  0B79  31AC  24EC  3189   	fcall	___ftneg
 10335  0B7C  0021               	movlb	1	; select bank1
 10336  0B7D  083E               	movf	?___ftneg^(0+128),w
 10337  0B7E  00C4               	movwf	___ftadd@f2^(0+128)
 10338  0B7F  083F               	movf	(?___ftneg+1)^(0+128),w
 10339  0B80  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10340  0B81  0840               	movf	(?___ftneg+2)^(0+128),w
 10341  0B82                     L6:	
 10342  0B82  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10343  0B83  3190  2035  3189   	fcall	___ftadd
 10344  0B86  0021               	movlb	1	; select bank1
 10345  0B87  0841               	movf	?___ftadd^(0+128),w
 10346  0B88  0022               	movlb	2	; select bank2
 10347  0B89  00BD               	movwf	modTri@tmpVal^(0+256)
 10348  0B8A  0021               	movlb	1	; select bank1
 10349  0B8B  0842               	movf	(?___ftadd+1)^(0+128),w
 10350  0B8C  0022               	movlb	2	; select bank2
 10351  0B8D  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
 10352  0B8E  0021               	movlb	1	; select bank1
 10353  0B8F  0843               	movf	(?___ftadd+2)^(0+128),w
 10354  0B90  0022               	movlb	2	; select bank2
 10355  0B91  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
 10356                           
 10357                           ;modulation.c: 116: }
 10358                           ;modulation.c: 117: tmpVal = tmpVal * -10/9;
 10359  0B92  3000               	movlw	0
 10360  0B93  0021               	movlb	1	; select bank1
 10361  0B94  00CE               	movwf	___ftdiv@f2^(0+128)
 10362  0B95  3010               	movlw	16
 10363  0B96  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10364  0B97  3041               	movlw	65
 10365  0B98  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10366  0B99  3000               	movlw	0
 10367  0B9A  00AE               	movwf	___ftmul@f1^(0+128)
 10368  0B9B  3020               	movlw	32
 10369  0B9C  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10370  0B9D  30C1               	movlw	193
 10371  0B9E  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10372  0B9F  0022               	movlb	2	; select bank2
 10373  0BA0  083D               	movf	modTri@tmpVal^(0+256),w
 10374  0BA1  0021               	movlb	1	; select bank1
 10375  0BA2  00B1               	movwf	___ftmul@f2^(0+128)
 10376  0BA3  0022               	movlb	2	; select bank2
 10377  0BA4  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10378  0BA5  0021               	movlb	1	; select bank1
 10379  0BA6  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10380  0BA7  0022               	movlb	2	; select bank2
 10381  0BA8  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10382  0BA9  0021               	movlb	1	; select bank1
 10383  0BAA  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10384  0BAB  319E  267B  3189   	fcall	___ftmul
 10385  0BAE  0021               	movlb	1	; select bank1
 10386  0BAF  082E               	movf	?___ftmul^(0+128),w
 10387  0BB0  00D1               	movwf	___ftdiv@f1^(0+128)
 10388  0BB1  082F               	movf	(?___ftmul+1)^(0+128),w
 10389  0BB2  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10390  0BB3  0830               	movf	(?___ftmul+2)^(0+128),w
 10391  0BB4  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10392  0BB5  319C  2474  3189   	fcall	___ftdiv
 10393  0BB8  0021               	movlb	1	; select bank1
 10394  0BB9  084E               	movf	?___ftdiv^(0+128),w
 10395  0BBA  0022               	movlb	2	; select bank2
 10396  0BBB  00BD               	movwf	modTri@tmpVal^(0+256)
 10397  0BBC  0021               	movlb	1	; select bank1
 10398  0BBD  084F               	movf	(?___ftdiv+1)^(0+128),w
 10399  0BBE  0022               	movlb	2	; select bank2
 10400  0BBF  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
 10401  0BC0  0021               	movlb	1	; select bank1
 10402  0BC1  0850               	movf	(?___ftdiv+2)^(0+128),w
 10403  0BC2  0022               	movlb	2	; select bank2
 10404  0BC3  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
 10405                           
 10406                           ;modulation.c: 119: return (int)(tmpVal);
 10407  0BC4  083D               	movf	modTri@tmpVal^(0+256),w
 10408  0BC5  00A0               	movwf	___fttol@f1^(0+256)
 10409  0BC6  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10410  0BC7  00A1               	movwf	(___fttol@f1+1)^(0+256)
 10411  0BC8  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10412  0BC9  00A2               	movwf	(___fttol@f1+2)^(0+256)
 10413  0BCA  3199  21AF         	fcall	___fttol
 10414  0BCC  0022               	movlb	2	; select bank2
 10415  0BCD  0821               	movf	(?___fttol^(0+256)+1),w
 10416  0BCE  00AF               	movwf	(?_modTri+1)^(0+256)
 10417  0BCF  0820               	movf	?___fttol^(0+256),w
 10418  0BD0  00AE               	movwf	?_modTri^(0+256)
 10419  0BD1  0008               	return
 10420  0BD2                     __end_of_modTri:	
 10421                           
 10422                           	psect	text18
 10423  2123                     __ptext18:	
 10424 ;; *************** function _modSquare *****************
 10425 ;; Defined at:
 10426 ;;		line 143 in file "modulation.c"
 10427 ;; Parameters:    Size  Location     Type
 10428 ;;  angle           3   40[BANK2 ] int 
 10429 ;;  inflection      3   43[BANK2 ] int 
 10430 ;; Auto vars:     Size  Location     Type
 10431 ;;  tmpVal          2   46[BANK2 ] int 
 10432 ;; Return value:  Size  Location     Type
 10433 ;;                  2   40[BANK2 ] int 
 10434 ;; Registers used:
 10435 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10436 ;; Tracked objects:
 10437 ;;		On entry : 0/0
 10438 ;;		On exit  : 0/0
 10439 ;;		Unchanged: 0/0
 10440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10441 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10442 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10444 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10445 ;;Total ram usage:        8 bytes
 10446 ;; Hardware stack levels used:    1
 10447 ;; Hardware stack levels required when called:    6
 10448 ;; This function calls:
 10449 ;;		___ftge
 10450 ;;		_modCos
 10451 ;; This function is called by:
 10452 ;;		_updateModulationArray
 10453 ;; This function uses a non-reentrant model
 10454 ;;
 10455                           
 10456                           
 10457                           ;psect for function _modSquare
 10458  2123                     _modSquare:	
 10459                           
 10460                           ;modulation.c: 144: int tmpVal = modCos(angle, inflection);
 10461                           
 10462                           ;incstack = 0
 10463                           ; Regs used in _modSquare: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10464  2123  0022               	movlb	2	; select bank2
 10465  2124  0848               	movf	modSquare@angle^(0+256),w
 10466  2125  00B4               	movwf	modCos@angle^(0+256)
 10467  2126  0849               	movf	(modSquare@angle+1)^(0+256),w
 10468  2127  00B5               	movwf	(modCos@angle+1)^(0+256)
 10469  2128  084A               	movf	(modSquare@angle+2)^(0+256),w
 10470  2129  00B6               	movwf	(modCos@angle+2)^(0+256)
 10471  212A  084B               	movf	modSquare@inflection^(0+256),w
 10472  212B  00B7               	movwf	modCos@inflection^(0+256)
 10473  212C  084C               	movf	(modSquare@inflection+1)^(0+256),w
 10474  212D  00B8               	movwf	(modCos@inflection+1)^(0+256)
 10475  212E  084D               	movf	(modSquare@inflection+2)^(0+256),w
 10476  212F  00B9               	movwf	(modCos@inflection+2)^(0+256)
 10477  2130  3196  2654  31A1   	fcall	_modCos
 10478  2133  0022               	movlb	2	; select bank2
 10479  2134  0835               	movf	(?_modCos+1)^(0+256),w
 10480  2135  00CF               	movwf	(modSquare@tmpVal+1)^(0+256)
 10481  2136  0834               	movf	?_modCos^(0+256),w
 10482  2137  00CE               	movwf	modSquare@tmpVal^(0+256)
 10483                           
 10484                           ;modulation.c: 145: return (angle <= inflection) ? -100 : 100;
 10485  2138  084B               	movf	modSquare@inflection^(0+256),w
 10486  2139  0021               	movlb	1	; select bank1
 10487  213A  00A0               	movwf	___ftge@ff1^(0+128)
 10488  213B  0022               	movlb	2	; select bank2
 10489  213C  084C               	movf	(modSquare@inflection+1)^(0+256),w
 10490  213D  0021               	movlb	1	; select bank1
 10491  213E  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10492  213F  0022               	movlb	2	; select bank2
 10493  2140  084D               	movf	(modSquare@inflection+2)^(0+256),w
 10494  2141  0021               	movlb	1	; select bank1
 10495  2142  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10496  2143  0022               	movlb	2	; select bank2
 10497  2144  0848               	movf	modSquare@angle^(0+256),w
 10498  2145  0021               	movlb	1	; select bank1
 10499  2146  00A3               	movwf	___ftge@ff2^(0+128)
 10500  2147  0022               	movlb	2	; select bank2
 10501  2148  0849               	movf	(modSquare@angle+1)^(0+256),w
 10502  2149  0021               	movlb	1	; select bank1
 10503  214A  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10504  214B  0022               	movlb	2	; select bank2
 10505  214C  084A               	movf	(modSquare@angle+2)^(0+256),w
 10506  214D  0021               	movlb	1	; select bank1
 10507  214E  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10508  214F  31A0  20AA  31A1   	fcall	___ftge
 10509  2152  1803               	btfsc	3,0
 10510  2153  295A               	goto	l8616
 10511  2154  3064               	movlw	100
 10512  2155  0022               	movlb	2	; select bank2
 10513  2156  00C8               	movwf	?_modSquare^(0+256)
 10514  2157  3000               	movlw	0
 10515  2158  00C9               	movwf	(?_modSquare^(0+256)+1)
 10516  2159  0008               	return
 10517  215A                     l8616:	
 10518  215A  309C               	movlw	156
 10519  215B  0022               	movlb	2	; select bank2
 10520  215C  00C8               	movwf	?_modSquare^(0+256)
 10521  215D  30FF               	movlw	255
 10522  215E  00C9               	movwf	(?_modSquare^(0+256)+1)
 10523  215F  0008               	return
 10524  2160                     __end_of_modSquare:	
 10525                           
 10526                           	psect	text19
 10527  1654                     __ptext19:	
 10528 ;; *************** function _modCos *****************
 10529 ;; Defined at:
 10530 ;;		line 84 in file "modulation.c"
 10531 ;; Parameters:    Size  Location     Type
 10532 ;;  angle           3   20[BANK2 ] int 
 10533 ;;  inflection      3   23[BANK2 ] int 
 10534 ;; Auto vars:     Size  Location     Type
 10535 ;;  tmpVal          3   37[BANK2 ] int 
 10536 ;;  period          3   34[BANK2 ] int 
 10537 ;;  shift           3   31[BANK2 ] int 
 10538 ;; Return value:  Size  Location     Type
 10539 ;;                  2   20[BANK2 ] int 
 10540 ;; Registers used:
 10541 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10542 ;; Tracked objects:
 10543 ;;		On entry : 0/0
 10544 ;;		On exit  : 0/0
 10545 ;;		Unchanged: 0/0
 10546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10547 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10548 ;;      Locals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10549 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10550 ;;      Totals:         0       0       0      20       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10551 ;;Total ram usage:       20 bytes
 10552 ;; Hardware stack levels used:    1
 10553 ;; Hardware stack levels required when called:    5
 10554 ;; This function calls:
 10555 ;;		___ftadd
 10556 ;;		___ftdiv
 10557 ;;		___ftge
 10558 ;;		___ftmul
 10559 ;;		___ftneg
 10560 ;;		___fttol
 10561 ;;		___wmul
 10562 ;; This function is called by:
 10563 ;;		_updateModulationArray
 10564 ;;		_modSquare
 10565 ;; This function uses a non-reentrant model
 10566 ;;
 10567                           
 10568                           
 10569                           ;psect for function _modCos
 10570  1654                     _modCos:	
 10571                           
 10572                           ;modulation.c: 85: double period = 1.0;
 10573                           
 10574                           ;incstack = 0
 10575                           ; Regs used in _modCos: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10576  1654  3000               	movlw	0
 10577  1655  0022               	movlb	2	; select bank2
 10578  1656  00C2               	movwf	modCos@period^(0+256)
 10579  1657  3080               	movlw	128
 10580  1658  00C3               	movwf	(modCos@period+1)^(0+256)
 10581  1659  303F               	movlw	63
 10582  165A  00C4               	movwf	(modCos@period+2)^(0+256)
 10583                           
 10584                           ;modulation.c: 86: double shift = 0.0;
 10585  165B  3000               	movlw	0
 10586  165C  00BF               	movwf	modCos@shift^(0+256)
 10587  165D  3000               	movlw	0
 10588  165E  00C0               	movwf	(modCos@shift+1)^(0+256)
 10589  165F  3000               	movlw	0
 10590  1660  00C1               	movwf	(modCos@shift+2)^(0+256)
 10591                           
 10592                           ;modulation.c: 88: if(angle<=inflection) {
 10593  1661  0837               	movf	modCos@inflection^(0+256),w
 10594  1662  0021               	movlb	1	; select bank1
 10595  1663  00A0               	movwf	___ftge@ff1^(0+128)
 10596  1664  0022               	movlb	2	; select bank2
 10597  1665  0838               	movf	(modCos@inflection+1)^(0+256),w
 10598  1666  0021               	movlb	1	; select bank1
 10599  1667  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10600  1668  0022               	movlb	2	; select bank2
 10601  1669  0839               	movf	(modCos@inflection+2)^(0+256),w
 10602  166A  0021               	movlb	1	; select bank1
 10603  166B  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10604  166C  0022               	movlb	2	; select bank2
 10605  166D  0834               	movf	modCos@angle^(0+256),w
 10606  166E  0021               	movlb	1	; select bank1
 10607  166F  00A3               	movwf	___ftge@ff2^(0+128)
 10608  1670  0022               	movlb	2	; select bank2
 10609  1671  0835               	movf	(modCos@angle+1)^(0+256),w
 10610  1672  0021               	movlb	1	; select bank1
 10611  1673  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10612  1674  0022               	movlb	2	; select bank2
 10613  1675  0836               	movf	(modCos@angle+2)^(0+256),w
 10614  1676  0021               	movlb	1	; select bank1
 10615  1677  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10616  1678  31A0  20AA  3196   	fcall	___ftge
 10617  167B  1C03               	btfss	3,0
 10618  167C  2E89               	goto	l8272
 10619                           
 10620                           ;modulation.c: 89: period = 180.0/inflection;
 10621  167D  0022               	movlb	2	; select bank2
 10622  167E  0837               	movf	modCos@inflection^(0+256),w
 10623  167F  0021               	movlb	1	; select bank1
 10624  1680  00CE               	movwf	___ftdiv@f2^(0+128)
 10625  1681  0022               	movlb	2	; select bank2
 10626  1682  0838               	movf	(modCos@inflection+1)^(0+256),w
 10627  1683  0021               	movlb	1	; select bank1
 10628  1684  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10629  1685  0022               	movlb	2	; select bank2
 10630  1686  0839               	movf	(modCos@inflection+2)^(0+256),w
 10631  1687  0021               	movlb	1	; select bank1
 10632  1688  2F44               	goto	L7
 10633  1689                     l8272:	
 10634                           ;modulation.c: 90: } else {
 10635                           
 10636                           
 10637                           ;modulation.c: 91: shift = -(360-inflection*2)*(180/(360-inflection));
 10638  1689  0022               	movlb	2	; select bank2
 10639  168A  0837               	movf	modCos@inflection^(0+256),w
 10640  168B  0021               	movlb	1	; select bank1
 10641  168C  00B1               	movwf	___ftmul@f2^(0+128)
 10642  168D  0022               	movlb	2	; select bank2
 10643  168E  0838               	movf	(modCos@inflection+1)^(0+256),w
 10644  168F  0021               	movlb	1	; select bank1
 10645  1690  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10646  1691  0022               	movlb	2	; select bank2
 10647  1692  0839               	movf	(modCos@inflection+2)^(0+256),w
 10648  1693  0021               	movlb	1	; select bank1
 10649  1694  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10650  1695  3000               	movlw	0
 10651  1696  00AE               	movwf	___ftmul@f1^(0+128)
 10652  1697  3000               	movlw	0
 10653  1698  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10654  1699  3040               	movlw	64
 10655  169A  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10656  169B  319E  267B  3196   	fcall	___ftmul
 10657  169E  0021               	movlb	1	; select bank1
 10658  169F  082E               	movf	?___ftmul^(0+128),w
 10659  16A0  00BE               	movwf	___ftneg@f1^(0+128)
 10660  16A1  082F               	movf	(?___ftmul+1)^(0+128),w
 10661  16A2  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10662  16A3  0830               	movf	(?___ftmul+2)^(0+128),w
 10663  16A4  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10664  16A5  31AC  24EC  3196   	fcall	___ftneg
 10665  16A8  0021               	movlb	1	; select bank1
 10666  16A9  083E               	movf	?___ftneg^(0+128),w
 10667  16AA  00C4               	movwf	___ftadd@f2^(0+128)
 10668  16AB  083F               	movf	(?___ftneg+1)^(0+128),w
 10669  16AC  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10670  16AD  0840               	movf	(?___ftneg+2)^(0+128),w
 10671  16AE  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10672  16AF  3000               	movlw	0
 10673  16B0  00C1               	movwf	___ftadd@f1^(0+128)
 10674  16B1  30B4               	movlw	180
 10675  16B2  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10676  16B3  3043               	movlw	67
 10677  16B4  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10678  16B5  3190  2035  3196   	fcall	___ftadd
 10679  16B8  0021               	movlb	1	; select bank1
 10680  16B9  0841               	movf	?___ftadd^(0+128),w
 10681  16BA  0022               	movlb	2	; select bank2
 10682  16BB  00BC               	movwf	_modCos$2852^(0+256)
 10683  16BC  0021               	movlb	1	; select bank1
 10684  16BD  0842               	movf	(?___ftadd+1)^(0+128),w
 10685  16BE  0022               	movlb	2	; select bank2
 10686  16BF  00BD               	movwf	(_modCos$2852+1)^(0+256)
 10687  16C0  0021               	movlb	1	; select bank1
 10688  16C1  0843               	movf	(?___ftadd+2)^(0+128),w
 10689  16C2  0022               	movlb	2	; select bank2
 10690  16C3  00BE               	movwf	(_modCos$2852+2)^(0+256)
 10691                           
 10692                           ;modulation.c: 91: shift = -(360-inflection*2)*(180/(360-inflection));
 10693  16C4  083C               	movf	_modCos$2852^(0+256),w
 10694  16C5  0021               	movlb	1	; select bank1
 10695  16C6  00BE               	movwf	___ftneg@f1^(0+128)
 10696  16C7  0022               	movlb	2	; select bank2
 10697  16C8  083D               	movf	(_modCos$2852+1)^(0+256),w
 10698  16C9  0021               	movlb	1	; select bank1
 10699  16CA  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10700  16CB  0022               	movlb	2	; select bank2
 10701  16CC  083E               	movf	(_modCos$2852+2)^(0+256),w
 10702  16CD  0021               	movlb	1	; select bank1
 10703  16CE  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10704  16CF  31AC  24EC  3196   	fcall	___ftneg
 10705  16D2  0021               	movlb	1	; select bank1
 10706  16D3  083E               	movf	?___ftneg^(0+128),w
 10707  16D4  00AE               	movwf	___ftmul@f1^(0+128)
 10708  16D5  083F               	movf	(?___ftneg+1)^(0+128),w
 10709  16D6  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10710  16D7  0840               	movf	(?___ftneg+2)^(0+128),w
 10711  16D8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10712  16D9  3000               	movlw	0
 10713  16DA  00C1               	movwf	___ftadd@f1^(0+128)
 10714  16DB  30B4               	movlw	180
 10715  16DC  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10716  16DD  3043               	movlw	67
 10717  16DE  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10718  16DF  0022               	movlb	2	; select bank2
 10719  16E0  0837               	movf	modCos@inflection^(0+256),w
 10720  16E1  0021               	movlb	1	; select bank1
 10721  16E2  00BE               	movwf	___ftneg@f1^(0+128)
 10722  16E3  0022               	movlb	2	; select bank2
 10723  16E4  0838               	movf	(modCos@inflection+1)^(0+256),w
 10724  16E5  0021               	movlb	1	; select bank1
 10725  16E6  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10726  16E7  0022               	movlb	2	; select bank2
 10727  16E8  0839               	movf	(modCos@inflection+2)^(0+256),w
 10728  16E9  0021               	movlb	1	; select bank1
 10729  16EA  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10730  16EB  31AC  24EC  3196   	fcall	___ftneg
 10731  16EE  0021               	movlb	1	; select bank1
 10732  16EF  083E               	movf	?___ftneg^(0+128),w
 10733  16F0  00C4               	movwf	___ftadd@f2^(0+128)
 10734  16F1  083F               	movf	(?___ftneg+1)^(0+128),w
 10735  16F2  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10736  16F3  0840               	movf	(?___ftneg+2)^(0+128),w
 10737  16F4  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10738  16F5  3190  2035  3196   	fcall	___ftadd
 10739  16F8  0021               	movlb	1	; select bank1
 10740  16F9  0841               	movf	?___ftadd^(0+128),w
 10741  16FA  00CE               	movwf	___ftdiv@f2^(0+128)
 10742  16FB  0842               	movf	(?___ftadd+1)^(0+128),w
 10743  16FC  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10744  16FD  0843               	movf	(?___ftadd+2)^(0+128),w
 10745  16FE  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10746  16FF  3000               	movlw	0
 10747  1700  00D1               	movwf	___ftdiv@f1^(0+128)
 10748  1701  3034               	movlw	52
 10749  1702  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10750  1703  3043               	movlw	67
 10751  1704  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10752  1705  319C  2474  3196   	fcall	___ftdiv
 10753  1708  0021               	movlb	1	; select bank1
 10754  1709  084E               	movf	?___ftdiv^(0+128),w
 10755  170A  00B1               	movwf	___ftmul@f2^(0+128)
 10756  170B  084F               	movf	(?___ftdiv+1)^(0+128),w
 10757  170C  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10758  170D  0850               	movf	(?___ftdiv+2)^(0+128),w
 10759  170E  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10760  170F  319E  267B  3196   	fcall	___ftmul
 10761  1712  0021               	movlb	1	; select bank1
 10762  1713  082E               	movf	?___ftmul^(0+128),w
 10763  1714  0022               	movlb	2	; select bank2
 10764  1715  00BF               	movwf	modCos@shift^(0+256)
 10765  1716  0021               	movlb	1	; select bank1
 10766  1717  082F               	movf	(?___ftmul+1)^(0+128),w
 10767  1718  0022               	movlb	2	; select bank2
 10768  1719  00C0               	movwf	(modCos@shift+1)^(0+256)
 10769  171A  0021               	movlb	1	; select bank1
 10770  171B  0830               	movf	(?___ftmul+2)^(0+128),w
 10771  171C  0022               	movlb	2	; select bank2
 10772  171D  00C1               	movwf	(modCos@shift+2)^(0+256)
 10773                           
 10774                           ;modulation.c: 92: period = 180/(360-inflection);
 10775  171E  3000               	movlw	0
 10776  171F  0021               	movlb	1	; select bank1
 10777  1720  00C1               	movwf	___ftadd@f1^(0+128)
 10778  1721  30B4               	movlw	180
 10779  1722  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10780  1723  3043               	movlw	67
 10781  1724  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10782  1725  0022               	movlb	2	; select bank2
 10783  1726  0837               	movf	modCos@inflection^(0+256),w
 10784  1727  0021               	movlb	1	; select bank1
 10785  1728  00BE               	movwf	___ftneg@f1^(0+128)
 10786  1729  0022               	movlb	2	; select bank2
 10787  172A  0838               	movf	(modCos@inflection+1)^(0+256),w
 10788  172B  0021               	movlb	1	; select bank1
 10789  172C  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10790  172D  0022               	movlb	2	; select bank2
 10791  172E  0839               	movf	(modCos@inflection+2)^(0+256),w
 10792  172F  0021               	movlb	1	; select bank1
 10793  1730  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10794  1731  31AC  24EC  3196   	fcall	___ftneg
 10795  1734  0021               	movlb	1	; select bank1
 10796  1735  083E               	movf	?___ftneg^(0+128),w
 10797  1736  00C4               	movwf	___ftadd@f2^(0+128)
 10798  1737  083F               	movf	(?___ftneg+1)^(0+128),w
 10799  1738  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10800  1739  0840               	movf	(?___ftneg+2)^(0+128),w
 10801  173A  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10802  173B  3190  2035  3196   	fcall	___ftadd
 10803  173E  0021               	movlb	1	; select bank1
 10804  173F  0841               	movf	?___ftadd^(0+128),w
 10805  1740  00CE               	movwf	___ftdiv@f2^(0+128)
 10806  1741  0842               	movf	(?___ftadd+1)^(0+128),w
 10807  1742  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10808  1743  0843               	movf	(?___ftadd+2)^(0+128),w
 10809  1744                     L7:	
 10810  1744  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10811  1745  3000               	movlw	0
 10812  1746  00D1               	movwf	___ftdiv@f1^(0+128)
 10813  1747  3034               	movlw	52
 10814  1748  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10815  1749  3043               	movlw	67
 10816  174A  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10817  174B  319C  2474  3196   	fcall	___ftdiv
 10818  174E  0021               	movlb	1	; select bank1
 10819  174F  084E               	movf	?___ftdiv^(0+128),w
 10820  1750  0022               	movlb	2	; select bank2
 10821  1751  00C2               	movwf	modCos@period^(0+256)
 10822  1752  0021               	movlb	1	; select bank1
 10823  1753  084F               	movf	(?___ftdiv+1)^(0+128),w
 10824  1754  0022               	movlb	2	; select bank2
 10825  1755  00C3               	movwf	(modCos@period+1)^(0+256)
 10826  1756  0021               	movlb	1	; select bank1
 10827  1757  0850               	movf	(?___ftdiv+2)^(0+128),w
 10828  1758  0022               	movlb	2	; select bank2
 10829  1759  00C4               	movwf	(modCos@period+2)^(0+256)
 10830                           
 10831                           ;modulation.c: 94: }
 10832                           ;modulation.c: 95: double tmpVal = (period*angle-shift) /3;
 10833  175A  3000               	movlw	0
 10834  175B  0021               	movlb	1	; select bank1
 10835  175C  00CE               	movwf	___ftdiv@f2^(0+128)
 10836  175D  3040               	movlw	64
 10837  175E  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10838  175F  3040               	movlw	64
 10839  1760  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10840  1761  0022               	movlb	2	; select bank2
 10841  1762  083F               	movf	modCos@shift^(0+256),w
 10842  1763  0021               	movlb	1	; select bank1
 10843  1764  00BE               	movwf	___ftneg@f1^(0+128)
 10844  1765  0022               	movlb	2	; select bank2
 10845  1766  0840               	movf	(modCos@shift+1)^(0+256),w
 10846  1767  0021               	movlb	1	; select bank1
 10847  1768  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10848  1769  0022               	movlb	2	; select bank2
 10849  176A  0841               	movf	(modCos@shift+2)^(0+256),w
 10850  176B  0021               	movlb	1	; select bank1
 10851  176C  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10852  176D  31AC  24EC  3196   	fcall	___ftneg
 10853  1770  0021               	movlb	1	; select bank1
 10854  1771  083E               	movf	?___ftneg^(0+128),w
 10855  1772  00C1               	movwf	___ftadd@f1^(0+128)
 10856  1773  083F               	movf	(?___ftneg+1)^(0+128),w
 10857  1774  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10858  1775  0840               	movf	(?___ftneg+2)^(0+128),w
 10859  1776  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10860  1777  0022               	movlb	2	; select bank2
 10861  1778  0834               	movf	modCos@angle^(0+256),w
 10862  1779  0021               	movlb	1	; select bank1
 10863  177A  00AE               	movwf	___ftmul@f1^(0+128)
 10864  177B  0022               	movlb	2	; select bank2
 10865  177C  0835               	movf	(modCos@angle+1)^(0+256),w
 10866  177D  0021               	movlb	1	; select bank1
 10867  177E  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10868  177F  0022               	movlb	2	; select bank2
 10869  1780  0836               	movf	(modCos@angle+2)^(0+256),w
 10870  1781  0021               	movlb	1	; select bank1
 10871  1782  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10872  1783  0022               	movlb	2	; select bank2
 10873  1784  0842               	movf	modCos@period^(0+256),w
 10874  1785  0021               	movlb	1	; select bank1
 10875  1786  00B1               	movwf	___ftmul@f2^(0+128)
 10876  1787  0022               	movlb	2	; select bank2
 10877  1788  0843               	movf	(modCos@period+1)^(0+256),w
 10878  1789  0021               	movlb	1	; select bank1
 10879  178A  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10880  178B  0022               	movlb	2	; select bank2
 10881  178C  0844               	movf	(modCos@period+2)^(0+256),w
 10882  178D  0021               	movlb	1	; select bank1
 10883  178E  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10884  178F  319E  267B  3196   	fcall	___ftmul
 10885  1792  0021               	movlb	1	; select bank1
 10886  1793  082E               	movf	?___ftmul^(0+128),w
 10887  1794  00C4               	movwf	___ftadd@f2^(0+128)
 10888  1795  082F               	movf	(?___ftmul+1)^(0+128),w
 10889  1796  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10890  1797  0830               	movf	(?___ftmul+2)^(0+128),w
 10891  1798  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10892  1799  3190  2035  3196   	fcall	___ftadd
 10893  179C  0021               	movlb	1	; select bank1
 10894  179D  0841               	movf	?___ftadd^(0+128),w
 10895  179E  00D1               	movwf	___ftdiv@f1^(0+128)
 10896  179F  0842               	movf	(?___ftadd+1)^(0+128),w
 10897  17A0  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10898  17A1  0843               	movf	(?___ftadd+2)^(0+128),w
 10899  17A2  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10900  17A3  319C  2474  3196   	fcall	___ftdiv
 10901  17A6  0021               	movlb	1	; select bank1
 10902  17A7  084E               	movf	?___ftdiv^(0+128),w
 10903  17A8  0022               	movlb	2	; select bank2
 10904  17A9  00C5               	movwf	modCos@tmpVal^(0+256)
 10905  17AA  0021               	movlb	1	; select bank1
 10906  17AB  084F               	movf	(?___ftdiv+1)^(0+128),w
 10907  17AC  0022               	movlb	2	; select bank2
 10908  17AD  00C6               	movwf	(modCos@tmpVal+1)^(0+256)
 10909  17AE  0021               	movlb	1	; select bank1
 10910  17AF  0850               	movf	(?___ftdiv+2)^(0+128),w
 10911  17B0  0022               	movlb	2	; select bank2
 10912  17B1  00C7               	movwf	(modCos@tmpVal+2)^(0+256)
 10913                           
 10914                           ;modulation.c: 96: tmpVal = cosArray[(int)(tmpVal)];
 10915  17B2  0845               	movf	modCos@tmpVal^(0+256),w
 10916  17B3  00A0               	movwf	___fttol@f1^(0+256)
 10917  17B4  0846               	movf	(modCos@tmpVal+1)^(0+256),w
 10918  17B5  00A1               	movwf	(___fttol@f1+1)^(0+256)
 10919  17B6  0847               	movf	(modCos@tmpVal+2)^(0+256),w
 10920  17B7  00A2               	movwf	(___fttol@f1+2)^(0+256)
 10921  17B8  3199  21AF  3196   	fcall	___fttol
 10922  17BB  0022               	movlb	2	; select bank2
 10923  17BC  0821               	movf	(?___fttol^(0+256)+1),w
 10924  17BD  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 10925  17BE  0820               	movf	?___fttol^(0+256),w
 10926  17BF  00AE               	movwf	___wmul@multiplier^(0+256)
 10927  17C0  3003               	movlw	3
 10928  17C1  00B0               	movwf	___wmul@multiplicand^(0+256)
 10929  17C2  3000               	movlw	0
 10930  17C3  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 10931  17C4  31AD  25C5  3196   	fcall	___wmul
 10932  17C7  3082               	movlw	130
 10933  17C8  0022               	movlb	2	; select bank2
 10934  17C9  00BA               	movwf	??_modCos^(0+256)
 10935  17CA  3024               	movlw	36
 10936  17CB  00BB               	movwf	(??_modCos^(0+256)+1)
 10937  17CC  082E               	movf	?___wmul^(0+256),w
 10938  17CD  073A               	addwf	??_modCos^(0+256),w
 10939  17CE  0086               	movwf	6
 10940  17CF  082F               	movf	(?___wmul+1)^(0+256),w
 10941  17D0  3D3B               	addwfc	(??_modCos+1)^(0+256),w
 10942  17D1  0087               	movwf	7
 10943  17D2  3F40               	moviw [0]fsr1
 10944  17D3  00C5               	movwf	modCos@tmpVal^(0+256)
 10945  17D4  3F41               	moviw [1]fsr1
 10946  17D5  00C6               	movwf	(modCos@tmpVal+1)^(0+256)
 10947  17D6  3F42               	moviw [2]fsr1
 10948  17D7  00C7               	movwf	(modCos@tmpVal+2)^(0+256)
 10949                           
 10950                           ;modulation.c: 97: return (int)(-100.0 * tmpVal);
 10951  17D8  0845               	movf	modCos@tmpVal^(0+256),w
 10952  17D9  0021               	movlb	1	; select bank1
 10953  17DA  00B1               	movwf	___ftmul@f2^(0+128)
 10954  17DB  0022               	movlb	2	; select bank2
 10955  17DC  0846               	movf	(modCos@tmpVal+1)^(0+256),w
 10956  17DD  0021               	movlb	1	; select bank1
 10957  17DE  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10958  17DF  0022               	movlb	2	; select bank2
 10959  17E0  0847               	movf	(modCos@tmpVal+2)^(0+256),w
 10960  17E1  0021               	movlb	1	; select bank1
 10961  17E2  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10962  17E3  3000               	movlw	0
 10963  17E4  00AE               	movwf	___ftmul@f1^(0+128)
 10964  17E5  30C8               	movlw	200
 10965  17E6  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10966  17E7  30C2               	movlw	194
 10967  17E8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10968  17E9  319E  267B  3196   	fcall	___ftmul
 10969  17EC  0021               	movlb	1	; select bank1
 10970  17ED  082E               	movf	?___ftmul^(0+128),w
 10971  17EE  0022               	movlb	2	; select bank2
 10972  17EF  00A0               	movwf	___fttol@f1^(0+256)
 10973  17F0  0021               	movlb	1	; select bank1
 10974  17F1  082F               	movf	(?___ftmul+1)^(0+128),w
 10975  17F2  0022               	movlb	2	; select bank2
 10976  17F3  00A1               	movwf	(___fttol@f1+1)^(0+256)
 10977  17F4  0021               	movlb	1	; select bank1
 10978  17F5  0830               	movf	(?___ftmul+2)^(0+128),w
 10979  17F6  0022               	movlb	2	; select bank2
 10980  17F7  00A2               	movwf	(___fttol@f1+2)^(0+256)
 10981  17F8  3199  21AF         	fcall	___fttol
 10982  17FA  0022               	movlb	2	; select bank2
 10983  17FB  0821               	movf	(?___fttol^(0+256)+1),w
 10984  17FC  00B5               	movwf	(?_modCos+1)^(0+256)
 10985  17FD  0820               	movf	?___fttol^(0+256),w
 10986  17FE  00B4               	movwf	?_modCos^(0+256)
 10987  17FF  0008               	return
 10988  1800                     __end_of_modCos:	
 10989                           
 10990                           	psect	text20
 10991  2DFD                     __ptext20:	
 10992 ;; *************** function _modSawRev *****************
 10993 ;; Defined at:
 10994 ;;		line 138 in file "modulation.c"
 10995 ;; Parameters:    Size  Location     Type
 10996 ;;  angle           3   34[BANK2 ] int 
 10997 ;;  inflection      3   37[BANK2 ] int 
 10998 ;; Auto vars:     Size  Location     Type
 10999 ;;		None
 11000 ;; Return value:  Size  Location     Type
 11001 ;;                  2   34[BANK2 ] int 
 11002 ;; Registers used:
 11003 ;;		wreg, status,2, status,0, pclath, cstack
 11004 ;; Tracked objects:
 11005 ;;		On entry : 0/0
 11006 ;;		On exit  : 0/0
 11007 ;;		Unchanged: 0/0
 11008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11009 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11010 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11011 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11012 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11013 ;;Total ram usage:        8 bytes
 11014 ;; Hardware stack levels used:    1
 11015 ;; Hardware stack levels required when called:    6
 11016 ;; This function calls:
 11017 ;;		_modSaw
 11018 ;; This function is called by:
 11019 ;;		_updateModulationArray
 11020 ;; This function uses a non-reentrant model
 11021 ;;
 11022                           
 11023                           
 11024                           ;psect for function _modSawRev
 11025  2DFD                     _modSawRev:	
 11026                           
 11027                           ;modulation.c: 139: return -1 * modSaw(angle, inflection);
 11028                           
 11029                           ;incstack = 0
 11030                           ; Regs used in _modSawRev: [wreg+status,2+status,0+pclath+cstack]
 11031  2DFD  0022               	movlb	2	; select bank2
 11032  2DFE  0842               	movf	modSawRev@angle^(0+256),w
 11033  2DFF  00AE               	movwf	modSaw@angle^(0+256)
 11034  2E00  0843               	movf	(modSawRev@angle+1)^(0+256),w
 11035  2E01  00AF               	movwf	(modSaw@angle+1)^(0+256)
 11036  2E02  0844               	movf	(modSawRev@angle+2)^(0+256),w
 11037  2E03  00B0               	movwf	(modSaw@angle+2)^(0+256)
 11038  2E04  0845               	movf	modSawRev@inflection^(0+256),w
 11039  2E05  00B1               	movwf	modSaw@inflection^(0+256)
 11040  2E06  0846               	movf	(modSawRev@inflection+1)^(0+256),w
 11041  2E07  00B2               	movwf	(modSaw@inflection+1)^(0+256)
 11042  2E08  0847               	movf	(modSawRev@inflection+2)^(0+256),w
 11043  2E09  00B3               	movwf	(modSaw@inflection+2)^(0+256)
 11044  2E0A  3194  24BC         	fcall	_modSaw
 11045  2E0C  0022               	movlb	2	; select bank2
 11046  2E0D  092E               	comf	?_modSaw^(0+256),w
 11047  2E0E  00C8               	movwf	??_modSawRev^(0+256)
 11048  2E0F  092F               	comf	(?_modSaw+1)^(0+256),w
 11049  2E10  00C9               	movwf	(??_modSawRev^(0+256)+1)
 11050  2E11  0AC8               	incf	??_modSawRev^(0+256),f
 11051  2E12  1903               	skipnz
 11052  2E13  0AC9               	incf	(??_modSawRev^(0+256)+1),f
 11053  2E14  0848               	movf	??_modSawRev^(0+256),w
 11054  2E15  00C2               	movwf	?_modSawRev^(0+256)
 11055  2E16  0849               	movf	(??_modSawRev+1)^(0+256),w
 11056  2E17  00C3               	movwf	(?_modSawRev+1)^(0+256)
 11057  2E18  0008               	return
 11058  2E19                     __end_of_modSawRev:	
 11059                           
 11060                           	psect	text21
 11061  14BC                     __ptext21:	
 11062 ;; *************** function _modSaw *****************
 11063 ;; Defined at:
 11064 ;;		line 123 in file "modulation.c"
 11065 ;; Parameters:    Size  Location     Type
 11066 ;;  angle           3   14[BANK2 ] int 
 11067 ;;  inflection      3   17[BANK2 ] int 
 11068 ;; Auto vars:     Size  Location     Type
 11069 ;;  period          3   31[BANK2 ] int 
 11070 ;;  shift           3   28[BANK2 ] int 
 11071 ;;  mod             2   26[BANK2 ] int 
 11072 ;; Return value:  Size  Location     Type
 11073 ;;                  2   14[BANK2 ] int 
 11074 ;; Registers used:
 11075 ;;		wreg, status,2, status,0, pclath, cstack
 11076 ;; Tracked objects:
 11077 ;;		On entry : 0/0
 11078 ;;		On exit  : 0/0
 11079 ;;		Unchanged: 0/0
 11080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11081 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11082 ;;      Locals:         0       0       0      14       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11084 ;;      Totals:         0       0       0      20       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11085 ;;Total ram usage:       20 bytes
 11086 ;; Hardware stack levels used:    1
 11087 ;; Hardware stack levels required when called:    5
 11088 ;; This function calls:
 11089 ;;		___ftadd
 11090 ;;		___ftdiv
 11091 ;;		___ftge
 11092 ;;		___ftmul
 11093 ;;		___ftneg
 11094 ;;		___fttol
 11095 ;; This function is called by:
 11096 ;;		_updateModulationArray
 11097 ;;		_modSawRev
 11098 ;; This function uses a non-reentrant model
 11099 ;;
 11100                           
 11101                           
 11102                           ;psect for function _modSaw
 11103  14BC                     _modSaw:	
 11104                           
 11105                           ;modulation.c: 124: double period = 1.0;
 11106                           
 11107                           ;incstack = 0
 11108                           ; Regs used in _modSaw: [wreg+status,2+status,0+pclath+cstack]
 11109  14BC  3000               	movlw	0
 11110  14BD  0022               	movlb	2	; select bank2
 11111  14BE  00BF               	movwf	modSaw@period^(0+256)
 11112  14BF  3080               	movlw	128
 11113  14C0  00C0               	movwf	(modSaw@period+1)^(0+256)
 11114  14C1  303F               	movlw	63
 11115  14C2  00C1               	movwf	(modSaw@period+2)^(0+256)
 11116                           
 11117                           ;modulation.c: 125: double shift = 0;
 11118  14C3  3000               	movlw	0
 11119  14C4  00BC               	movwf	modSaw@shift^(0+256)
 11120  14C5  3000               	movlw	0
 11121  14C6  00BD               	movwf	(modSaw@shift+1)^(0+256)
 11122  14C7  3000               	movlw	0
 11123  14C8  00BE               	movwf	(modSaw@shift+2)^(0+256)
 11124                           
 11125                           ;modulation.c: 127: if(angle<=inflection) {
 11126  14C9  0831               	movf	modSaw@inflection^(0+256),w
 11127  14CA  0021               	movlb	1	; select bank1
 11128  14CB  00A0               	movwf	___ftge@ff1^(0+128)
 11129  14CC  0022               	movlb	2	; select bank2
 11130  14CD  0832               	movf	(modSaw@inflection+1)^(0+256),w
 11131  14CE  0021               	movlb	1	; select bank1
 11132  14CF  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 11133  14D0  0022               	movlb	2	; select bank2
 11134  14D1  0833               	movf	(modSaw@inflection+2)^(0+256),w
 11135  14D2  0021               	movlb	1	; select bank1
 11136  14D3  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 11137  14D4  0022               	movlb	2	; select bank2
 11138  14D5  082E               	movf	modSaw@angle^(0+256),w
 11139  14D6  0021               	movlb	1	; select bank1
 11140  14D7  00A3               	movwf	___ftge@ff2^(0+128)
 11141  14D8  0022               	movlb	2	; select bank2
 11142  14D9  082F               	movf	(modSaw@angle+1)^(0+256),w
 11143  14DA  0021               	movlb	1	; select bank1
 11144  14DB  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 11145  14DC  0022               	movlb	2	; select bank2
 11146  14DD  0830               	movf	(modSaw@angle+2)^(0+256),w
 11147  14DE  0021               	movlb	1	; select bank1
 11148  14DF  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 11149  14E0  31A0  20AA  3194   	fcall	___ftge
 11150  14E3  1C03               	btfss	3,0
 11151  14E4  2CF1               	goto	l8286
 11152                           
 11153                           ;modulation.c: 128: period = 180.0/inflection;
 11154  14E5  0022               	movlb	2	; select bank2
 11155  14E6  0831               	movf	modSaw@inflection^(0+256),w
 11156  14E7  0021               	movlb	1	; select bank1
 11157  14E8  00CE               	movwf	___ftdiv@f2^(0+128)
 11158  14E9  0022               	movlb	2	; select bank2
 11159  14EA  0832               	movf	(modSaw@inflection+1)^(0+256),w
 11160  14EB  0021               	movlb	1	; select bank1
 11161  14EC  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11162  14ED  0022               	movlb	2	; select bank2
 11163  14EE  0833               	movf	(modSaw@inflection+2)^(0+256),w
 11164  14EF  0021               	movlb	1	; select bank1
 11165  14F0  2DAC               	goto	L8
 11166  14F1                     l8286:	
 11167                           ;modulation.c: 129: } else {
 11168                           
 11169                           
 11170                           ;modulation.c: 130: shift = -(360-inflection*2)*(180/(360-inflection));
 11171  14F1  0022               	movlb	2	; select bank2
 11172  14F2  0831               	movf	modSaw@inflection^(0+256),w
 11173  14F3  0021               	movlb	1	; select bank1
 11174  14F4  00B1               	movwf	___ftmul@f2^(0+128)
 11175  14F5  0022               	movlb	2	; select bank2
 11176  14F6  0832               	movf	(modSaw@inflection+1)^(0+256),w
 11177  14F7  0021               	movlb	1	; select bank1
 11178  14F8  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11179  14F9  0022               	movlb	2	; select bank2
 11180  14FA  0833               	movf	(modSaw@inflection+2)^(0+256),w
 11181  14FB  0021               	movlb	1	; select bank1
 11182  14FC  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11183  14FD  3000               	movlw	0
 11184  14FE  00AE               	movwf	___ftmul@f1^(0+128)
 11185  14FF  3000               	movlw	0
 11186  1500  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11187  1501  3040               	movlw	64
 11188  1502  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11189  1503  319E  267B  3194   	fcall	___ftmul
 11190  1506  0021               	movlb	1	; select bank1
 11191  1507  082E               	movf	?___ftmul^(0+128),w
 11192  1508  00BE               	movwf	___ftneg@f1^(0+128)
 11193  1509  082F               	movf	(?___ftmul+1)^(0+128),w
 11194  150A  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11195  150B  0830               	movf	(?___ftmul+2)^(0+128),w
 11196  150C  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11197  150D  31AC  24EC  3194   	fcall	___ftneg
 11198  1510  0021               	movlb	1	; select bank1
 11199  1511  083E               	movf	?___ftneg^(0+128),w
 11200  1512  00C4               	movwf	___ftadd@f2^(0+128)
 11201  1513  083F               	movf	(?___ftneg+1)^(0+128),w
 11202  1514  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11203  1515  0840               	movf	(?___ftneg+2)^(0+128),w
 11204  1516  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11205  1517  3000               	movlw	0
 11206  1518  00C1               	movwf	___ftadd@f1^(0+128)
 11207  1519  30B4               	movlw	180
 11208  151A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11209  151B  3043               	movlw	67
 11210  151C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11211  151D  3190  2035  3194   	fcall	___ftadd
 11212  1520  0021               	movlb	1	; select bank1
 11213  1521  0841               	movf	?___ftadd^(0+128),w
 11214  1522  0022               	movlb	2	; select bank2
 11215  1523  00B4               	movwf	_modSaw$2854^(0+256)
 11216  1524  0021               	movlb	1	; select bank1
 11217  1525  0842               	movf	(?___ftadd+1)^(0+128),w
 11218  1526  0022               	movlb	2	; select bank2
 11219  1527  00B5               	movwf	(_modSaw$2854+1)^(0+256)
 11220  1528  0021               	movlb	1	; select bank1
 11221  1529  0843               	movf	(?___ftadd+2)^(0+128),w
 11222  152A  0022               	movlb	2	; select bank2
 11223  152B  00B6               	movwf	(_modSaw$2854+2)^(0+256)
 11224                           
 11225                           ;modulation.c: 130: shift = -(360-inflection*2)*(180/(360-inflection));
 11226  152C  0834               	movf	_modSaw$2854^(0+256),w
 11227  152D  0021               	movlb	1	; select bank1
 11228  152E  00BE               	movwf	___ftneg@f1^(0+128)
 11229  152F  0022               	movlb	2	; select bank2
 11230  1530  0835               	movf	(_modSaw$2854+1)^(0+256),w
 11231  1531  0021               	movlb	1	; select bank1
 11232  1532  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11233  1533  0022               	movlb	2	; select bank2
 11234  1534  0836               	movf	(_modSaw$2854+2)^(0+256),w
 11235  1535  0021               	movlb	1	; select bank1
 11236  1536  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11237  1537  31AC  24EC  3194   	fcall	___ftneg
 11238  153A  0021               	movlb	1	; select bank1
 11239  153B  083E               	movf	?___ftneg^(0+128),w
 11240  153C  00AE               	movwf	___ftmul@f1^(0+128)
 11241  153D  083F               	movf	(?___ftneg+1)^(0+128),w
 11242  153E  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11243  153F  0840               	movf	(?___ftneg+2)^(0+128),w
 11244  1540  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11245  1541  3000               	movlw	0
 11246  1542  00C1               	movwf	___ftadd@f1^(0+128)
 11247  1543  30B4               	movlw	180
 11248  1544  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11249  1545  3043               	movlw	67
 11250  1546  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11251  1547  0022               	movlb	2	; select bank2
 11252  1548  0831               	movf	modSaw@inflection^(0+256),w
 11253  1549  0021               	movlb	1	; select bank1
 11254  154A  00BE               	movwf	___ftneg@f1^(0+128)
 11255  154B  0022               	movlb	2	; select bank2
 11256  154C  0832               	movf	(modSaw@inflection+1)^(0+256),w
 11257  154D  0021               	movlb	1	; select bank1
 11258  154E  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11259  154F  0022               	movlb	2	; select bank2
 11260  1550  0833               	movf	(modSaw@inflection+2)^(0+256),w
 11261  1551  0021               	movlb	1	; select bank1
 11262  1552  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11263  1553  31AC  24EC  3194   	fcall	___ftneg
 11264  1556  0021               	movlb	1	; select bank1
 11265  1557  083E               	movf	?___ftneg^(0+128),w
 11266  1558  00C4               	movwf	___ftadd@f2^(0+128)
 11267  1559  083F               	movf	(?___ftneg+1)^(0+128),w
 11268  155A  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11269  155B  0840               	movf	(?___ftneg+2)^(0+128),w
 11270  155C  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11271  155D  3190  2035  3194   	fcall	___ftadd
 11272  1560  0021               	movlb	1	; select bank1
 11273  1561  0841               	movf	?___ftadd^(0+128),w
 11274  1562  00CE               	movwf	___ftdiv@f2^(0+128)
 11275  1563  0842               	movf	(?___ftadd+1)^(0+128),w
 11276  1564  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11277  1565  0843               	movf	(?___ftadd+2)^(0+128),w
 11278  1566  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11279  1567  3000               	movlw	0
 11280  1568  00D1               	movwf	___ftdiv@f1^(0+128)
 11281  1569  3034               	movlw	52
 11282  156A  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11283  156B  3043               	movlw	67
 11284  156C  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11285  156D  319C  2474  3194   	fcall	___ftdiv
 11286  1570  0021               	movlb	1	; select bank1
 11287  1571  084E               	movf	?___ftdiv^(0+128),w
 11288  1572  00B1               	movwf	___ftmul@f2^(0+128)
 11289  1573  084F               	movf	(?___ftdiv+1)^(0+128),w
 11290  1574  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11291  1575  0850               	movf	(?___ftdiv+2)^(0+128),w
 11292  1576  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11293  1577  319E  267B  3194   	fcall	___ftmul
 11294  157A  0021               	movlb	1	; select bank1
 11295  157B  082E               	movf	?___ftmul^(0+128),w
 11296  157C  0022               	movlb	2	; select bank2
 11297  157D  00BC               	movwf	modSaw@shift^(0+256)
 11298  157E  0021               	movlb	1	; select bank1
 11299  157F  082F               	movf	(?___ftmul+1)^(0+128),w
 11300  1580  0022               	movlb	2	; select bank2
 11301  1581  00BD               	movwf	(modSaw@shift+1)^(0+256)
 11302  1582  0021               	movlb	1	; select bank1
 11303  1583  0830               	movf	(?___ftmul+2)^(0+128),w
 11304  1584  0022               	movlb	2	; select bank2
 11305  1585  00BE               	movwf	(modSaw@shift+2)^(0+256)
 11306                           
 11307                           ;modulation.c: 131: period = 180/(360-inflection);
 11308  1586  3000               	movlw	0
 11309  1587  0021               	movlb	1	; select bank1
 11310  1588  00C1               	movwf	___ftadd@f1^(0+128)
 11311  1589  30B4               	movlw	180
 11312  158A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11313  158B  3043               	movlw	67
 11314  158C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11315  158D  0022               	movlb	2	; select bank2
 11316  158E  0831               	movf	modSaw@inflection^(0+256),w
 11317  158F  0021               	movlb	1	; select bank1
 11318  1590  00BE               	movwf	___ftneg@f1^(0+128)
 11319  1591  0022               	movlb	2	; select bank2
 11320  1592  0832               	movf	(modSaw@inflection+1)^(0+256),w
 11321  1593  0021               	movlb	1	; select bank1
 11322  1594  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11323  1595  0022               	movlb	2	; select bank2
 11324  1596  0833               	movf	(modSaw@inflection+2)^(0+256),w
 11325  1597  0021               	movlb	1	; select bank1
 11326  1598  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11327  1599  31AC  24EC  3194   	fcall	___ftneg
 11328  159C  0021               	movlb	1	; select bank1
 11329  159D  083E               	movf	?___ftneg^(0+128),w
 11330  159E  00C4               	movwf	___ftadd@f2^(0+128)
 11331  159F  083F               	movf	(?___ftneg+1)^(0+128),w
 11332  15A0  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11333  15A1  0840               	movf	(?___ftneg+2)^(0+128),w
 11334  15A2  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11335  15A3  3190  2035  3194   	fcall	___ftadd
 11336  15A6  0021               	movlb	1	; select bank1
 11337  15A7  0841               	movf	?___ftadd^(0+128),w
 11338  15A8  00CE               	movwf	___ftdiv@f2^(0+128)
 11339  15A9  0842               	movf	(?___ftadd+1)^(0+128),w
 11340  15AA  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11341  15AB  0843               	movf	(?___ftadd+2)^(0+128),w
 11342  15AC                     L8:	
 11343  15AC  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11344  15AD  3000               	movlw	0
 11345  15AE  00D1               	movwf	___ftdiv@f1^(0+128)
 11346  15AF  3034               	movlw	52
 11347  15B0  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11348  15B1  3043               	movlw	67
 11349  15B2  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11350  15B3  319C  2474  3194   	fcall	___ftdiv
 11351  15B6  0021               	movlb	1	; select bank1
 11352  15B7  084E               	movf	?___ftdiv^(0+128),w
 11353  15B8  0022               	movlb	2	; select bank2
 11354  15B9  00BF               	movwf	modSaw@period^(0+256)
 11355  15BA  0021               	movlb	1	; select bank1
 11356  15BB  084F               	movf	(?___ftdiv+1)^(0+128),w
 11357  15BC  0022               	movlb	2	; select bank2
 11358  15BD  00C0               	movwf	(modSaw@period+1)^(0+256)
 11359  15BE  0021               	movlb	1	; select bank1
 11360  15BF  0850               	movf	(?___ftdiv+2)^(0+128),w
 11361  15C0  0022               	movlb	2	; select bank2
 11362  15C1  00C1               	movwf	(modSaw@period+2)^(0+256)
 11363                           
 11364                           ;modulation.c: 132: }
 11365                           ;modulation.c: 134: int mod = (int)((period*angle-shift-180)*5/9);
 11366  15C2  083F               	movf	modSaw@period^(0+256),w
 11367  15C3  0021               	movlb	1	; select bank1
 11368  15C4  00B1               	movwf	___ftmul@f2^(0+128)
 11369  15C5  0022               	movlb	2	; select bank2
 11370  15C6  0840               	movf	(modSaw@period+1)^(0+256),w
 11371  15C7  0021               	movlb	1	; select bank1
 11372  15C8  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11373  15C9  0022               	movlb	2	; select bank2
 11374  15CA  0841               	movf	(modSaw@period+2)^(0+256),w
 11375  15CB  0021               	movlb	1	; select bank1
 11376  15CC  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11377  15CD  0022               	movlb	2	; select bank2
 11378  15CE  082E               	movf	modSaw@angle^(0+256),w
 11379  15CF  0021               	movlb	1	; select bank1
 11380  15D0  00AE               	movwf	___ftmul@f1^(0+128)
 11381  15D1  0022               	movlb	2	; select bank2
 11382  15D2  082F               	movf	(modSaw@angle+1)^(0+256),w
 11383  15D3  0021               	movlb	1	; select bank1
 11384  15D4  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11385  15D5  0022               	movlb	2	; select bank2
 11386  15D6  0830               	movf	(modSaw@angle+2)^(0+256),w
 11387  15D7  0021               	movlb	1	; select bank1
 11388  15D8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11389  15D9  319E  267B  3194   	fcall	___ftmul
 11390  15DC  0021               	movlb	1	; select bank1
 11391  15DD  082E               	movf	?___ftmul^(0+128),w
 11392  15DE  00C4               	movwf	___ftadd@f2^(0+128)
 11393  15DF  082F               	movf	(?___ftmul+1)^(0+128),w
 11394  15E0  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11395  15E1  0830               	movf	(?___ftmul+2)^(0+128),w
 11396  15E2  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11397  15E3  0022               	movlb	2	; select bank2
 11398  15E4  083C               	movf	modSaw@shift^(0+256),w
 11399  15E5  0021               	movlb	1	; select bank1
 11400  15E6  00BE               	movwf	___ftneg@f1^(0+128)
 11401  15E7  0022               	movlb	2	; select bank2
 11402  15E8  083D               	movf	(modSaw@shift+1)^(0+256),w
 11403  15E9  0021               	movlb	1	; select bank1
 11404  15EA  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11405  15EB  0022               	movlb	2	; select bank2
 11406  15EC  083E               	movf	(modSaw@shift+2)^(0+256),w
 11407  15ED  0021               	movlb	1	; select bank1
 11408  15EE  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11409  15EF  31AC  24EC  3194   	fcall	___ftneg
 11410  15F2  0021               	movlb	1	; select bank1
 11411  15F3  083E               	movf	?___ftneg^(0+128),w
 11412  15F4  00C1               	movwf	___ftadd@f1^(0+128)
 11413  15F5  083F               	movf	(?___ftneg+1)^(0+128),w
 11414  15F6  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11415  15F7  0840               	movf	(?___ftneg+2)^(0+128),w
 11416  15F8  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11417  15F9  3190  2035  3194   	fcall	___ftadd
 11418  15FC  0021               	movlb	1	; select bank1
 11419  15FD  0841               	movf	?___ftadd^(0+128),w
 11420  15FE  0022               	movlb	2	; select bank2
 11421  15FF  00B7               	movwf	_modSaw$2855^(0+256)
 11422  1600  0021               	movlb	1	; select bank1
 11423  1601  0842               	movf	(?___ftadd+1)^(0+128),w
 11424  1602  0022               	movlb	2	; select bank2
 11425  1603  00B8               	movwf	(_modSaw$2855+1)^(0+256)
 11426  1604  0021               	movlb	1	; select bank1
 11427  1605  0843               	movf	(?___ftadd+2)^(0+128),w
 11428  1606  0022               	movlb	2	; select bank2
 11429  1607  00B9               	movwf	(_modSaw$2855+2)^(0+256)
 11430                           
 11431                           ;modulation.c: 132: }
 11432                           ;modulation.c: 134: int mod = (int)((period*angle-shift-180)*5/9);
 11433  1608  0837               	movf	_modSaw$2855^(0+256),w
 11434  1609  0021               	movlb	1	; select bank1
 11435  160A  00C4               	movwf	___ftadd@f2^(0+128)
 11436  160B  0022               	movlb	2	; select bank2
 11437  160C  0838               	movf	(_modSaw$2855+1)^(0+256),w
 11438  160D  0021               	movlb	1	; select bank1
 11439  160E  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11440  160F  0022               	movlb	2	; select bank2
 11441  1610  0839               	movf	(_modSaw$2855+2)^(0+256),w
 11442  1611  0021               	movlb	1	; select bank1
 11443  1612  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11444  1613  3000               	movlw	0
 11445  1614  00C1               	movwf	___ftadd@f1^(0+128)
 11446  1615  3034               	movlw	52
 11447  1616  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11448  1617  30C3               	movlw	195
 11449  1618  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11450  1619  3190  2035  3194   	fcall	___ftadd
 11451  161C  0021               	movlb	1	; select bank1
 11452  161D  0841               	movf	?___ftadd^(0+128),w
 11453  161E  00B1               	movwf	___ftmul@f2^(0+128)
 11454  161F  0842               	movf	(?___ftadd+1)^(0+128),w
 11455  1620  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11456  1621  0843               	movf	(?___ftadd+2)^(0+128),w
 11457  1622  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11458  1623  3000               	movlw	0
 11459  1624  00AE               	movwf	___ftmul@f1^(0+128)
 11460  1625  30A0               	movlw	160
 11461  1626  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11462  1627  3040               	movlw	64
 11463  1628  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11464  1629  319E  267B  3194   	fcall	___ftmul
 11465  162C  0021               	movlb	1	; select bank1
 11466  162D  082E               	movf	?___ftmul^(0+128),w
 11467  162E  00D1               	movwf	___ftdiv@f1^(0+128)
 11468  162F  082F               	movf	(?___ftmul+1)^(0+128),w
 11469  1630  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11470  1631  0830               	movf	(?___ftmul+2)^(0+128),w
 11471  1632  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11472  1633  3000               	movlw	0
 11473  1634  00CE               	movwf	___ftdiv@f2^(0+128)
 11474  1635  3010               	movlw	16
 11475  1636  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11476  1637  3041               	movlw	65
 11477  1638  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11478  1639  319C  2474  3194   	fcall	___ftdiv
 11479  163C  0021               	movlb	1	; select bank1
 11480  163D  084E               	movf	?___ftdiv^(0+128),w
 11481  163E  0022               	movlb	2	; select bank2
 11482  163F  00A0               	movwf	___fttol@f1^(0+256)
 11483  1640  0021               	movlb	1	; select bank1
 11484  1641  084F               	movf	(?___ftdiv+1)^(0+128),w
 11485  1642  0022               	movlb	2	; select bank2
 11486  1643  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11487  1644  0021               	movlb	1	; select bank1
 11488  1645  0850               	movf	(?___ftdiv+2)^(0+128),w
 11489  1646  0022               	movlb	2	; select bank2
 11490  1647  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11491  1648  3199  21AF         	fcall	___fttol
 11492  164A  0022               	movlb	2	; select bank2
 11493  164B  0821               	movf	(?___fttol^(0+256)+1),w
 11494  164C  00BB               	movwf	(modSaw@mod+1)^(0+256)
 11495  164D  0820               	movf	?___fttol^(0+256),w
 11496  164E  00BA               	movwf	modSaw@mod^(0+256)
 11497                           
 11498                           ;modulation.c: 135: return mod;
 11499  164F  083B               	movf	(modSaw@mod+1)^(0+256),w
 11500  1650  00AF               	movwf	(?_modSaw+1)^(0+256)
 11501  1651  083A               	movf	modSaw@mod^(0+256),w
 11502  1652  00AE               	movwf	?_modSaw^(0+256)
 11503  1653  0008               	return
 11504  1654                     __end_of_modSaw:	
 11505                           
 11506                           	psect	text22
 11507  2464                     __ptext22:	
 11508 ;; *************** function ___awdiv *****************
 11509 ;; Defined at:
 11510 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 11511 ;; Parameters:    Size  Location     Type
 11512 ;;  divisor         2    0[BANK1 ] int 
 11513 ;;  dividend        2    2[BANK1 ] int 
 11514 ;; Auto vars:     Size  Location     Type
 11515 ;;  quotient        2    7[BANK1 ] int 
 11516 ;;  sign            1    6[BANK1 ] unsigned char 
 11517 ;;  counter         1    5[BANK1 ] unsigned char 
 11518 ;; Return value:  Size  Location     Type
 11519 ;;                  2    0[BANK1 ] int 
 11520 ;; Registers used:
 11521 ;;		wreg, status,2, status,0
 11522 ;; Tracked objects:
 11523 ;;		On entry : 0/0
 11524 ;;		On exit  : 0/0
 11525 ;;		Unchanged: 0/0
 11526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11527 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11528 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11529 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11530 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11531 ;;Total ram usage:        9 bytes
 11532 ;; Hardware stack levels used:    1
 11533 ;; Hardware stack levels required when called:    3
 11534 ;; This function calls:
 11535 ;;		Nothing
 11536 ;; This function is called by:
 11537 ;;		_updateModulationArray
 11538 ;;		_USARTWriteInt
 11539 ;; This function uses a non-reentrant model
 11540 ;;
 11541                           
 11542                           
 11543                           ;psect for function ___awdiv
 11544  2464                     ___awdiv:	
 11545                           
 11546                           ;incstack = 0
 11547                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 11548  2464  0021               	movlb	1	; select bank1
 11549  2465  01A6               	clrf	___awdiv@sign^(0+128)
 11550  2466  1FA1               	btfss	(___awdiv@divisor+1)^(0+128),7
 11551  2467  2C6F               	goto	l8672
 11552  2468  09A0               	comf	___awdiv@divisor^(0+128),f
 11553  2469  09A1               	comf	(___awdiv@divisor+1)^(0+128),f
 11554  246A  0AA0               	incf	___awdiv@divisor^(0+128),f
 11555  246B  1903               	skipnz
 11556  246C  0AA1               	incf	(___awdiv@divisor+1)^(0+128),f
 11557  246D  01A6               	clrf	___awdiv@sign^(0+128)
 11558  246E  0AA6               	incf	___awdiv@sign^(0+128),f
 11559  246F                     l8672:	
 11560  246F  1FA3               	btfss	(___awdiv@dividend+1)^(0+128),7
 11561  2470  2C7A               	goto	l8678
 11562  2471  09A2               	comf	___awdiv@dividend^(0+128),f
 11563  2472  09A3               	comf	(___awdiv@dividend+1)^(0+128),f
 11564  2473  0AA2               	incf	___awdiv@dividend^(0+128),f
 11565  2474  1903               	skipnz
 11566  2475  0AA3               	incf	(___awdiv@dividend+1)^(0+128),f
 11567  2476  3001               	movlw	1
 11568  2477  00A4               	movwf	??___awdiv^(0+128)
 11569  2478  0824               	movf	??___awdiv^(0+128),w
 11570  2479  06A6               	xorwf	___awdiv@sign^(0+128),f
 11571  247A                     l8678:	
 11572  247A  01A7               	clrf	___awdiv@quotient^(0+128)
 11573  247B  01A8               	clrf	(___awdiv@quotient+1)^(0+128)
 11574  247C  0820               	movf	___awdiv@divisor^(0+128),w
 11575  247D  0421               	iorwf	(___awdiv@divisor+1)^(0+128),w
 11576  247E  1903               	btfsc	3,2
 11577  247F  2CA9               	goto	l8700
 11578  2480  01A5               	clrf	___awdiv@counter^(0+128)
 11579  2481  0AA5               	incf	___awdiv@counter^(0+128),f
 11580  2482                     l8688:	
 11581  2482  1BA1               	btfsc	(___awdiv@divisor+1)^(0+128),7
 11582  2483  2C8E               	goto	l8690
 11583  2484  3001               	movlw	1
 11584  2485                     u9245:	
 11585  2485  35A0               	lslf	___awdiv@divisor^(0+128),f
 11586  2486  0DA1               	rlf	(___awdiv@divisor+1)^(0+128),f
 11587  2487  0B89               	decfsz	9,f
 11588  2488  2C85               	goto	u9245
 11589  2489  3001               	movlw	1
 11590  248A  00A4               	movwf	??___awdiv^(0+128)
 11591  248B  0824               	movf	??___awdiv^(0+128),w
 11592  248C  07A5               	addwf	___awdiv@counter^(0+128),f
 11593  248D  2C82               	goto	l8688
 11594  248E                     l8690:	
 11595  248E  3001               	movlw	1
 11596  248F                     u9265:	
 11597  248F  35A7               	lslf	___awdiv@quotient^(0+128),f
 11598  2490  0DA8               	rlf	(___awdiv@quotient+1)^(0+128),f
 11599  2491  0B89               	decfsz	9,f
 11600  2492  2C8F               	goto	u9265
 11601  2493  0821               	movf	(___awdiv@divisor+1)^(0+128),w
 11602  2494  0223               	subwf	(___awdiv@dividend+1)^(0+128),w
 11603  2495  1D03               	skipz
 11604  2496  2C99               	goto	u9275
 11605  2497  0820               	movf	___awdiv@divisor^(0+128),w
 11606  2498  0222               	subwf	___awdiv@dividend^(0+128),w
 11607  2499                     u9275:	
 11608  2499  1C03               	skipc
 11609  249A  2CA0               	goto	l8696
 11610  249B  0820               	movf	___awdiv@divisor^(0+128),w
 11611  249C  02A2               	subwf	___awdiv@dividend^(0+128),f
 11612  249D  0821               	movf	(___awdiv@divisor+1)^(0+128),w
 11613  249E  3BA3               	subwfb	(___awdiv@dividend+1)^(0+128),f
 11614  249F  1427               	bsf	___awdiv@quotient^(0+128),0
 11615  24A0                     l8696:	
 11616  24A0  3001               	movlw	1
 11617  24A1                     u9285:	
 11618  24A1  36A1               	lsrf	(___awdiv@divisor+1)^(0+128),f
 11619  24A2  0CA0               	rrf	___awdiv@divisor^(0+128),f
 11620  24A3  0B89               	decfsz	9,f
 11621  24A4  2CA1               	goto	u9285
 11622  24A5  3001               	movlw	1
 11623  24A6  02A5               	subwf	___awdiv@counter^(0+128),f
 11624  24A7  1D03               	btfss	3,2
 11625  24A8  2C8E               	goto	l8690
 11626  24A9                     l8700:	
 11627  24A9  0826               	movf	___awdiv@sign^(0+128),w
 11628  24AA  1903               	btfsc	3,2
 11629  24AB  2CB1               	goto	l8704
 11630  24AC  09A7               	comf	___awdiv@quotient^(0+128),f
 11631  24AD  09A8               	comf	(___awdiv@quotient+1)^(0+128),f
 11632  24AE  0AA7               	incf	___awdiv@quotient^(0+128),f
 11633  24AF  1903               	skipnz
 11634  24B0  0AA8               	incf	(___awdiv@quotient+1)^(0+128),f
 11635  24B1                     l8704:	
 11636  24B1  0828               	movf	(___awdiv@quotient+1)^(0+128),w
 11637  24B2  00A1               	movwf	(?___awdiv+1)^(0+128)
 11638  24B3  0827               	movf	___awdiv@quotient^(0+128),w
 11639  24B4  00A0               	movwf	?___awdiv^(0+128)
 11640  24B5  0008               	return
 11641  24B6                     __end_of___awdiv:	
 11642                           
 11643                           	psect	text23
 11644  1AC1                     __ptext23:	
 11645 ;; *************** function _set_subdivision *****************
 11646 ;; Defined at:
 11647 ;;		line 77 in file "user.c"
 11648 ;; Parameters:    Size  Location     Type
 11649 ;;  x               2   14[BANK2 ] int 
 11650 ;;  y               2   16[BANK2 ] int 
 11651 ;; Auto vars:     Size  Location     Type
 11652 ;;  scalar          3   18[BANK2 ] float 
 11653 ;;  tmpX            2   21[BANK2 ] int 
 11654 ;; Return value:  Size  Location     Type
 11655 ;;                  2   14[BANK2 ] int 
 11656 ;; Registers used:
 11657 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11658 ;; Tracked objects:
 11659 ;;		On entry : 0/0
 11660 ;;		On exit  : 0/0
 11661 ;;		Unchanged: 0/0
 11662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11663 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11664 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11666 ;;      Totals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11667 ;;Total ram usage:        9 bytes
 11668 ;; Hardware stack levels used:    1
 11669 ;; Hardware stack levels required when called:    5
 11670 ;; This function calls:
 11671 ;;		___awtoft
 11672 ;;		___ftmul
 11673 ;;		___fttol
 11674 ;; This function is called by:
 11675 ;;		_main
 11676 ;; This function uses a non-reentrant model
 11677 ;;
 11678                           
 11679                           
 11680                           ;psect for function _set_subdivision
 11681  1AC1                     _set_subdivision:	
 11682                           
 11683                           ;user.c: 81: adjust_mod_delay = 0;
 11684                           
 11685                           ;incstack = 0
 11686                           ; Regs used in _set_subdivision: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11687  1AC1  0023               	movlb	3	; select bank3
 11688  1AC2  01BE               	clrf	_adjust_mod_delay^(0+384)
 11689                           
 11690                           ;user.c: 82: int tmpX = x;
 11691  1AC3  0022               	movlb	2	; select bank2
 11692  1AC4  082F               	movf	(set_subdivision@x+1)^(0+256),w
 11693  1AC5  00B6               	movwf	(set_subdivision@tmpX+1)^(0+256)
 11694  1AC6  082E               	movf	set_subdivision@x^(0+256),w
 11695  1AC7  00B5               	movwf	set_subdivision@tmpX^(0+256)
 11696                           
 11697                           ;user.c: 83: float scalar = 1.0;
 11698  1AC8  3000               	movlw	0
 11699  1AC9  00B2               	movwf	set_subdivision@scalar^(0+256)
 11700  1ACA  3080               	movlw	128
 11701  1ACB  00B3               	movwf	(set_subdivision@scalar+1)^(0+256)
 11702  1ACC  303F               	movlw	63
 11703  1ACD  00B4               	movwf	(set_subdivision@scalar+2)^(0+256)
 11704                           
 11705                           ;user.c: 85: switch (y) {
 11706  1ACE  2AEE               	goto	l9214
 11707  1ACF                     l9200:	
 11708                           ;user.c: 86: case 1:
 11709                           
 11710                           
 11711                           ;user.c: 87: scalar = 2.0;
 11712  1ACF  3000               	movlw	0
 11713  1AD0  00B2               	movwf	set_subdivision@scalar^(0+256)
 11714  1AD1  3000               	movlw	0
 11715  1AD2  00B3               	movwf	(set_subdivision@scalar+1)^(0+256)
 11716  1AD3  3040               	movlw	64
 11717  1AD4  2AEC               	goto	L13
 11718  1AD5                     l9202:	
 11719                           ;user.c: 89: case 2:
 11720                           
 11721                           ;user.c: 88: break;
 11722                           
 11723                           
 11724                           ;user.c: 90: scalar = 0.6666;
 11725  1AD5  30A6               	movlw	166
 11726  1AD6  00B2               	movwf	set_subdivision@scalar^(0+256)
 11727  1AD7  302A               	movlw	42
 11728  1AD8  2AEA               	goto	L14
 11729  1AD9                     l9204:	
 11730                           ;user.c: 92: case 3:
 11731                           
 11732                           ;user.c: 91: break;
 11733                           
 11734                           
 11735                           ;user.c: 93: scalar = .5;
 11736  1AD9  3000               	movlw	0
 11737  1ADA  00B2               	movwf	set_subdivision@scalar^(0+256)
 11738  1ADB  3000               	movlw	0
 11739  1ADC  2AEA               	goto	L14
 11740  1ADD                     l9206:	
 11741                           ;user.c: 95: case 4:
 11742                           
 11743                           ;user.c: 94: break;
 11744                           
 11745                           
 11746                           ;user.c: 96: scalar = 0.3333;
 11747  1ADD  30A6               	movlw	166
 11748  1ADE  00B2               	movwf	set_subdivision@scalar^(0+256)
 11749  1ADF  30AA               	movlw	170
 11750  1AE0  2AE4               	goto	L15
 11751  1AE1                     l9208:	
 11752                           ;user.c: 98: case 5:
 11753                           
 11754                           ;user.c: 97: break;
 11755                           
 11756                           
 11757                           ;user.c: 99: scalar = 0.25;
 11758  1AE1  3000               	movlw	0
 11759  1AE2  00B2               	movwf	set_subdivision@scalar^(0+256)
 11760  1AE3  3080               	movlw	128
 11761  1AE4                     L15:	
 11762  1AE4  00B3               	movwf	(set_subdivision@scalar+1)^(0+256)
 11763  1AE5  303E               	movlw	62
 11764  1AE6  2AEC               	goto	L13
 11765  1AE7                     l9210:	
 11766                           ;user.c: 101: case 6:
 11767                           
 11768                           ;user.c: 100: break;
 11769                           
 11770                           
 11771                           ;user.c: 102: scalar = 1.0;
 11772  1AE7  3000               	movlw	0
 11773  1AE8  00B2               	movwf	set_subdivision@scalar^(0+256)
 11774  1AE9  3080               	movlw	128
 11775  1AEA                     L14:	
 11776  1AEA  00B3               	movwf	(set_subdivision@scalar+1)^(0+256)
 11777  1AEB  303F               	movlw	63
 11778  1AEC                     L13:	
 11779  1AEC  00B4               	movwf	(set_subdivision@scalar+2)^(0+256)
 11780                           
 11781                           ;user.c: 104: }
 11782                           
 11783                           ;user.c: 103: break;
 11784  1AED  2B07               	goto	l9216
 11785  1AEE                     l9214:	
 11786                           
 11787                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11788                           ; Switch size 1, requested type "space"
 11789                           ; Number of cases is 1, Range of values is 0 to 0
 11790                           ; switch strategies available:
 11791                           ; Name         Instructions Cycles
 11792                           ; simple_byte            4     3 (average)
 11793                           ; direct_byte            8     6 (fixed)
 11794                           ; jumptable            260     6 (fixed)
 11795                           ;	Chosen strategy is simple_byte
 11796  1AEE  0831               	movf	(set_subdivision@y+1)^(0+256),w
 11797  1AEF  3A00               	xorlw	0	; case 0
 11798  1AF0  1903               	skipnz
 11799  1AF1  2AF3               	goto	l9854
 11800  1AF2  2B07               	goto	l9216
 11801  1AF3                     l9854:	
 11802                           
 11803                           ; Switch size 1, requested type "space"
 11804                           ; Number of cases is 6, Range of values is 1 to 6
 11805                           ; switch strategies available:
 11806                           ; Name         Instructions Cycles
 11807                           ; simple_byte           19    10 (average)
 11808                           ; direct_byte           21     9 (fixed)
 11809                           ; jumptable            263     9 (fixed)
 11810                           ;	Chosen strategy is simple_byte
 11811  1AF3  0830               	movf	set_subdivision@y^(0+256),w
 11812  1AF4  3A01               	xorlw	1	; case 1
 11813  1AF5  1903               	skipnz
 11814  1AF6  2ACF               	goto	l9200
 11815  1AF7  3A03               	xorlw	3	; case 2
 11816  1AF8  1903               	skipnz
 11817  1AF9  2AD5               	goto	l9202
 11818  1AFA  3A01               	xorlw	1	; case 3
 11819  1AFB  1903               	skipnz
 11820  1AFC  2AD9               	goto	l9204
 11821  1AFD  3A07               	xorlw	7	; case 4
 11822  1AFE  1903               	skipnz
 11823  1AFF  2ADD               	goto	l9206
 11824  1B00  3A01               	xorlw	1	; case 5
 11825  1B01  1903               	skipnz
 11826  1B02  2AE1               	goto	l9208
 11827  1B03  3A03               	xorlw	3	; case 6
 11828  1B04  1903               	skipnz
 11829  1B05  2AE7               	goto	l9210
 11830  1B06  2B07               	goto	l9216
 11831  1B07                     l9216:	
 11832                           
 11833                           ;user.c: 106: tmpX = (int)((float)tmpX * scalar);
 11834  1B07  0836               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11835  1B08  0021               	movlb	1	; select bank1
 11836  1B09  00A9               	movwf	(___awtoft@c+1)^(0+128)
 11837  1B0A  0022               	movlb	2	; select bank2
 11838  1B0B  0835               	movf	set_subdivision@tmpX^(0+256),w
 11839  1B0C  0021               	movlb	1	; select bank1
 11840  1B0D  00A8               	movwf	___awtoft@c^(0+128)
 11841  1B0E  31AE  263A  319A   	fcall	___awtoft
 11842  1B11  0021               	movlb	1	; select bank1
 11843  1B12  0828               	movf	?___awtoft^(0+128),w
 11844  1B13  00B1               	movwf	___ftmul@f2^(0+128)
 11845  1B14  0829               	movf	(?___awtoft+1)^(0+128),w
 11846  1B15  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11847  1B16  082A               	movf	(?___awtoft+2)^(0+128),w
 11848  1B17  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11849  1B18  0022               	movlb	2	; select bank2
 11850  1B19  0832               	movf	set_subdivision@scalar^(0+256),w
 11851  1B1A  0021               	movlb	1	; select bank1
 11852  1B1B  00AE               	movwf	___ftmul@f1^(0+128)
 11853  1B1C  0022               	movlb	2	; select bank2
 11854  1B1D  0833               	movf	(set_subdivision@scalar+1)^(0+256),w
 11855  1B1E  0021               	movlb	1	; select bank1
 11856  1B1F  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11857  1B20  0022               	movlb	2	; select bank2
 11858  1B21  0834               	movf	(set_subdivision@scalar+2)^(0+256),w
 11859  1B22  0021               	movlb	1	; select bank1
 11860  1B23  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11861  1B24  319E  267B  319A   	fcall	___ftmul
 11862  1B27  0021               	movlb	1	; select bank1
 11863  1B28  082E               	movf	?___ftmul^(0+128),w
 11864  1B29  0022               	movlb	2	; select bank2
 11865  1B2A  00A0               	movwf	___fttol@f1^(0+256)
 11866  1B2B  0021               	movlb	1	; select bank1
 11867  1B2C  082F               	movf	(?___ftmul+1)^(0+128),w
 11868  1B2D  0022               	movlb	2	; select bank2
 11869  1B2E  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11870  1B2F  0021               	movlb	1	; select bank1
 11871  1B30  0830               	movf	(?___ftmul+2)^(0+128),w
 11872  1B31  0022               	movlb	2	; select bank2
 11873  1B32  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11874  1B33  3199  21AF  319A   	fcall	___fttol
 11875  1B36  0022               	movlb	2	; select bank2
 11876  1B37  0821               	movf	(?___fttol^(0+256)+1),w
 11877  1B38  00B6               	movwf	(set_subdivision@tmpX+1)^(0+256)
 11878  1B39  0820               	movf	?___fttol^(0+256),w
 11879  1B3A  00B5               	movwf	set_subdivision@tmpX^(0+256)
 11880                           
 11881                           ;user.c: 108: if ((int)(tmpX) != tmpX) {
 11882  1B3B  0836               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11883  1B3C  0636               	xorwf	(set_subdivision@tmpX+1)^(0+256),w
 11884  1B3D  1D03               	skipz
 11885  1B3E  2B41               	goto	u10225
 11886  1B3F  0835               	movf	set_subdivision@tmpX^(0+256),w
 11887  1B40  0635               	xorwf	set_subdivision@tmpX^(0+256),w
 11888  1B41                     u10225:	
 11889  1B41  1903               	skipnz
 11890  1B42  2B46               	goto	l9222
 11891                           
 11892                           ;user.c: 109: adjust_mod_delay = 1;
 11893  1B43  0023               	movlb	3	; select bank3
 11894  1B44  01BE               	clrf	_adjust_mod_delay^(0+384)
 11895  1B45  0ABE               	incf	_adjust_mod_delay^(0+384),f
 11896  1B46                     l9222:	
 11897                           
 11898                           ;user.c: 110: }
 11899                           ;user.c: 112: return tmpX;
 11900  1B46  0022               	movlb	2	; select bank2
 11901  1B47  0836               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11902  1B48  00AF               	movwf	(?_set_subdivision+1)^(0+256)
 11903  1B49  0835               	movf	set_subdivision@tmpX^(0+256),w
 11904  1B4A  00AE               	movwf	?_set_subdivision^(0+256)
 11905  1B4B  0008               	return
 11906  1B4C                     __end_of_set_subdivision:	
 11907                           
 11908                           	psect	text24
 11909  1D1D                     __ptext24:	
 11910 ;; *************** function _scaleiA10kPot *****************
 11911 ;; Defined at:
 11912 ;;		line 211 in file "user.c"
 11913 ;; Parameters:    Size  Location     Type
 11914 ;;  input           3   71[BANK2 ] int 
 11915 ;; Auto vars:     Size  Location     Type
 11916 ;;  pwm             3    0[BANK3 ] float 
 11917 ;; Return value:  Size  Location     Type
 11918 ;;                  2   71[BANK2 ] int 
 11919 ;; Registers used:
 11920 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11921 ;; Tracked objects:
 11922 ;;		On entry : 0/0
 11923 ;;		On exit  : 0/0
 11924 ;;		Unchanged: 0/0
 11925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11926 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11927 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11929 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11930 ;;Total ram usage:       12 bytes
 11931 ;; Hardware stack levels used:    1
 11932 ;; Hardware stack levels required when called:    8
 11933 ;; This function calls:
 11934 ;;		___ftadd
 11935 ;;		___ftdiv
 11936 ;;		___ftmul
 11937 ;;		___ftneg
 11938 ;;		___fttol
 11939 ;;		_pow
 11940 ;; This function is called by:
 11941 ;;		_main
 11942 ;; This function uses a non-reentrant model
 11943 ;;
 11944                           
 11945                           
 11946                           ;psect for function _scaleiA10kPot
 11947  1D1D                     _scaleiA10kPot:	
 11948                           
 11949                           ;user.c: 214: if (input == 0.0) {return 0;}
 11950                           
 11951                           ;incstack = 0
 11952                           ; Regs used in _scaleiA10kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11953  1D1D  0022               	movlb	2	; select bank2
 11954  1D1E  0869               	movf	(scaleiA10kPot@input+2)^(0+256),w
 11955  1D1F  0468               	iorwf	(scaleiA10kPot@input+1)^(0+256),w
 11956  1D20  0467               	iorwf	scaleiA10kPot@input^(0+256),w
 11957  1D21  1D03               	skipz
 11958  1D22  2D26               	goto	l9160
 11959  1D23  01E7               	clrf	?_scaleiA10kPot^(0+256)
 11960  1D24  01E8               	clrf	(?_scaleiA10kPot+1)^(0+256)
 11961  1D25  0008               	return
 11962  1D26                     l9160:	
 11963                           
 11964                           ;user.c: 216: if (input == 1023.0) {return 255;}
 11965  1D26  30C0               	movlw	192
 11966  1D27  0667               	xorwf	scaleiA10kPot@input^(0+256),w
 11967  1D28  307F               	movlw	127
 11968  1D29  1903               	skipnz
 11969  1D2A  0668               	xorwf	(scaleiA10kPot@input+1)^(0+256),w
 11970  1D2B  3044               	movlw	68
 11971  1D2C  1903               	skipnz
 11972  1D2D  0669               	xorwf	(scaleiA10kPot@input+2)^(0+256),w
 11973  1D2E  1D03               	btfss	3,2
 11974  1D2F  2D35               	goto	l9166
 11975  1D30  30FF               	movlw	255
 11976  1D31  00E7               	movwf	?_scaleiA10kPot^(0+256)
 11977  1D32  3000               	movlw	0
 11978  1D33  00E8               	movwf	(?_scaleiA10kPot^(0+256)+1)
 11979  1D34  0008               	return
 11980  1D35                     l9166:	
 11981                           
 11982                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 11983  1D35  3000               	movlw	0
 11984  1D36  0021               	movlb	1	; select bank1
 11985  1D37  00C1               	movwf	___ftadd@f1^(0+128)
 11986  1D38  3080               	movlw	128
 11987  1D39  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11988  1D3A  303F               	movlw	63
 11989  1D3B  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11990  1D3C  0022               	movlb	2	; select bank2
 11991  1D3D  0867               	movf	scaleiA10kPot@input^(0+256),w
 11992  1D3E  0021               	movlb	1	; select bank1
 11993  1D3F  00D1               	movwf	___ftdiv@f1^(0+128)
 11994  1D40  0022               	movlb	2	; select bank2
 11995  1D41  0868               	movf	(scaleiA10kPot@input+1)^(0+256),w
 11996  1D42  0021               	movlb	1	; select bank1
 11997  1D43  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11998  1D44  0022               	movlb	2	; select bank2
 11999  1D45  0869               	movf	(scaleiA10kPot@input+2)^(0+256),w
 12000  1D46  0021               	movlb	1	; select bank1
 12001  1D47  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 12002  1D48  30C0               	movlw	192
 12003  1D49  00CE               	movwf	___ftdiv@f2^(0+128)
 12004  1D4A  307F               	movlw	127
 12005  1D4B  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 12006  1D4C  3044               	movlw	68
 12007  1D4D  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 12008  1D4E  319C  2474  319D   	fcall	___ftdiv
 12009  1D51  0021               	movlb	1	; select bank1
 12010  1D52  084E               	movf	?___ftdiv^(0+128),w
 12011  1D53  00BE               	movwf	___ftneg@f1^(0+128)
 12012  1D54  084F               	movf	(?___ftdiv+1)^(0+128),w
 12013  1D55  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12014  1D56  0850               	movf	(?___ftdiv+2)^(0+128),w
 12015  1D57  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12016  1D58  31AC  24EC  319D   	fcall	___ftneg
 12017  1D5B  0021               	movlb	1	; select bank1
 12018  1D5C  083E               	movf	?___ftneg^(0+128),w
 12019  1D5D  00C4               	movwf	___ftadd@f2^(0+128)
 12020  1D5E  083F               	movf	(?___ftneg+1)^(0+128),w
 12021  1D5F  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 12022  1D60  0840               	movf	(?___ftneg+2)^(0+128),w
 12023  1D61  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 12024  1D62  3190  2035  319D   	fcall	___ftadd
 12025  1D65  0021               	movlb	1	; select bank1
 12026  1D66  0841               	movf	?___ftadd^(0+128),w
 12027  1D67  0023               	movlb	3	; select bank3
 12028  1D68  00EA               	movwf	_scaleiA10kPot$2850^(0+384)
 12029  1D69  0021               	movlb	1	; select bank1
 12030  1D6A  0842               	movf	(?___ftadd+1)^(0+128),w
 12031  1D6B  0023               	movlb	3	; select bank3
 12032  1D6C  00EB               	movwf	(_scaleiA10kPot$2850+1)^(0+384)
 12033  1D6D  0021               	movlb	1	; select bank1
 12034  1D6E  0843               	movf	(?___ftadd+2)^(0+128),w
 12035  1D6F  0023               	movlb	3	; select bank3
 12036  1D70  00EC               	movwf	(_scaleiA10kPot$2850+2)^(0+384)
 12037                           
 12038                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 12039  1D71  306A               	movlw	106
 12040  1D72  0022               	movlb	2	; select bank2
 12041  1D73  00D8               	movwf	pow@y^(0+256)
 12042  1D74  309C               	movlw	156
 12043  1D75  00D9               	movwf	(pow@y+1)^(0+256)
 12044  1D76  30BF               	movlw	191
 12045  1D77  00DA               	movwf	(pow@y+2)^(0+256)
 12046  1D78  0023               	movlb	3	; select bank3
 12047  1D79  086A               	movf	_scaleiA10kPot$2850^(0+384),w
 12048  1D7A  0022               	movlb	2	; select bank2
 12049  1D7B  00D5               	movwf	pow@x^(0+256)
 12050  1D7C  0023               	movlb	3	; select bank3
 12051  1D7D  086B               	movf	(_scaleiA10kPot$2850+1)^(0+384),w
 12052  1D7E  0022               	movlb	2	; select bank2
 12053  1D7F  00D6               	movwf	(pow@x+1)^(0+256)
 12054  1D80  0023               	movlb	3	; select bank3
 12055  1D81  086C               	movf	(_scaleiA10kPot$2850+2)^(0+384),w
 12056  1D82  0022               	movlb	2	; select bank2
 12057  1D83  00D7               	movwf	(pow@x+2)^(0+256)
 12058  1D84  3191  212B  319D   	fcall	_pow
 12059  1D87  0022               	movlb	2	; select bank2
 12060  1D88  0855               	movf	?_pow^(0+256),w
 12061  1D89  0023               	movlb	3	; select bank3
 12062  1D8A  00ED               	movwf	_scaleiA10kPot$2851^(0+384)
 12063  1D8B  0022               	movlb	2	; select bank2
 12064  1D8C  0856               	movf	(?_pow+1)^(0+256),w
 12065  1D8D  0023               	movlb	3	; select bank3
 12066  1D8E  00EE               	movwf	(_scaleiA10kPot$2851+1)^(0+384)
 12067  1D8F  0022               	movlb	2	; select bank2
 12068  1D90  0857               	movf	(?_pow+2)^(0+256),w
 12069  1D91  0023               	movlb	3	; select bank3
 12070  1D92  00EF               	movwf	(_scaleiA10kPot$2851+2)^(0+384)
 12071                           
 12072                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 12073  1D93  30E3               	movlw	227
 12074  1D94  0021               	movlb	1	; select bank1
 12075  1D95  00AE               	movwf	___ftmul@f1^(0+128)
 12076  1D96  300B               	movlw	11
 12077  1D97  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12078  1D98  3041               	movlw	65
 12079  1D99  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12080  1D9A  0023               	movlb	3	; select bank3
 12081  1D9B  086D               	movf	_scaleiA10kPot$2851^(0+384),w
 12082  1D9C  0021               	movlb	1	; select bank1
 12083  1D9D  00B1               	movwf	___ftmul@f2^(0+128)
 12084  1D9E  0023               	movlb	3	; select bank3
 12085  1D9F  086E               	movf	(_scaleiA10kPot$2851+1)^(0+384),w
 12086  1DA0  0021               	movlb	1	; select bank1
 12087  1DA1  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12088  1DA2  0023               	movlb	3	; select bank3
 12089  1DA3  086F               	movf	(_scaleiA10kPot$2851+2)^(0+384),w
 12090  1DA4  0021               	movlb	1	; select bank1
 12091  1DA5  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12092  1DA6  319E  267B  319D   	fcall	___ftmul
 12093  1DA9  0021               	movlb	1	; select bank1
 12094  1DAA  082E               	movf	?___ftmul^(0+128),w
 12095  1DAB  0023               	movlb	3	; select bank3
 12096  1DAC  00E7               	movwf	scaleiA10kPot@pwm^(0+384)
 12097  1DAD  0021               	movlb	1	; select bank1
 12098  1DAE  082F               	movf	(?___ftmul+1)^(0+128),w
 12099  1DAF  0023               	movlb	3	; select bank3
 12100  1DB0  00E8               	movwf	(scaleiA10kPot@pwm+1)^(0+384)
 12101  1DB1  0021               	movlb	1	; select bank1
 12102  1DB2  0830               	movf	(?___ftmul+2)^(0+128),w
 12103  1DB3  0023               	movlb	3	; select bank3
 12104  1DB4  00E9               	movwf	(scaleiA10kPot@pwm+2)^(0+384)
 12105                           
 12106                           ;user.c: 219: return (int)(pwm);
 12107  1DB5  0867               	movf	scaleiA10kPot@pwm^(0+384),w
 12108  1DB6  0022               	movlb	2	; select bank2
 12109  1DB7  00A0               	movwf	___fttol@f1^(0+256)
 12110  1DB8  0023               	movlb	3	; select bank3
 12111  1DB9  0868               	movf	(scaleiA10kPot@pwm+1)^(0+384),w
 12112  1DBA  0022               	movlb	2	; select bank2
 12113  1DBB  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12114  1DBC  0023               	movlb	3	; select bank3
 12115  1DBD  0869               	movf	(scaleiA10kPot@pwm+2)^(0+384),w
 12116  1DBE  0022               	movlb	2	; select bank2
 12117  1DBF  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12118  1DC0  3199  21AF         	fcall	___fttol
 12119  1DC2  0022               	movlb	2	; select bank2
 12120  1DC3  0821               	movf	(?___fttol^(0+256)+1),w
 12121  1DC4  00E8               	movwf	(?_scaleiA10kPot+1)^(0+256)
 12122  1DC5  0820               	movf	?___fttol^(0+256),w
 12123  1DC6  00E7               	movwf	?_scaleiA10kPot^(0+256)
 12124  1DC7  0008               	return
 12125  1DC8                     __end_of_scaleiA10kPot:	
 12126                           
 12127                           	psect	text25
 12128  1B4C                     __ptext25:	
 12129 ;; *************** function _scaleA10kPot *****************
 12130 ;; Defined at:
 12131 ;;		line 202 in file "user.c"
 12132 ;; Parameters:    Size  Location     Type
 12133 ;;  input           3   71[BANK2 ] int 
 12134 ;; Auto vars:     Size  Location     Type
 12135 ;;  pwm             3    0[BANK3 ] float 
 12136 ;; Return value:  Size  Location     Type
 12137 ;;                  2   71[BANK2 ] int 
 12138 ;; Registers used:
 12139 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12140 ;; Tracked objects:
 12141 ;;		On entry : 0/0
 12142 ;;		On exit  : 0/0
 12143 ;;		Unchanged: 0/0
 12144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12145 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12146 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12148 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12149 ;;Total ram usage:       12 bytes
 12150 ;; Hardware stack levels used:    1
 12151 ;; Hardware stack levels required when called:    8
 12152 ;; This function calls:
 12153 ;;		___ftdiv
 12154 ;;		___ftmul
 12155 ;;		___fttol
 12156 ;;		_pow
 12157 ;; This function is called by:
 12158 ;;		_main
 12159 ;; This function uses a non-reentrant model
 12160 ;;
 12161                           
 12162                           
 12163                           ;psect for function _scaleA10kPot
 12164  1B4C                     _scaleA10kPot:	
 12165                           
 12166                           ;user.c: 204: if (input == 0.0) {return 255;}
 12167                           
 12168                           ;incstack = 0
 12169                           ; Regs used in _scaleA10kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12170  1B4C  0022               	movlb	2	; select bank2
 12171  1B4D  0869               	movf	(scaleA10kPot@input+2)^(0+256),w
 12172  1B4E  0468               	iorwf	(scaleA10kPot@input+1)^(0+256),w
 12173  1B4F  0467               	iorwf	scaleA10kPot@input^(0+256),w
 12174  1B50  1D03               	skipz
 12175  1B51  2B57               	goto	l9138
 12176  1B52  30FF               	movlw	255
 12177  1B53  00E7               	movwf	?_scaleA10kPot^(0+256)
 12178  1B54  3000               	movlw	0
 12179  1B55  00E8               	movwf	(?_scaleA10kPot^(0+256)+1)
 12180  1B56  0008               	return
 12181  1B57                     l9138:	
 12182                           
 12183                           ;user.c: 205: if (input == 1023.0) {return 0;}
 12184  1B57  30C0               	movlw	192
 12185  1B58  0667               	xorwf	scaleA10kPot@input^(0+256),w
 12186  1B59  307F               	movlw	127
 12187  1B5A  1903               	skipnz
 12188  1B5B  0668               	xorwf	(scaleA10kPot@input+1)^(0+256),w
 12189  1B5C  3044               	movlw	68
 12190  1B5D  1903               	skipnz
 12191  1B5E  0669               	xorwf	(scaleA10kPot@input+2)^(0+256),w
 12192  1B5F  1D03               	btfss	3,2
 12193  1B60  2B64               	goto	l9144
 12194  1B61  01E7               	clrf	?_scaleA10kPot^(0+256)
 12195  1B62  01E8               	clrf	(?_scaleA10kPot+1)^(0+256)
 12196  1B63  0008               	return
 12197  1B64                     l9144:	
 12198                           
 12199                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 12200  1B64  30C0               	movlw	192
 12201  1B65  0021               	movlb	1	; select bank1
 12202  1B66  00CE               	movwf	___ftdiv@f2^(0+128)
 12203  1B67  307F               	movlw	127
 12204  1B68  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 12205  1B69  3044               	movlw	68
 12206  1B6A  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 12207  1B6B  0022               	movlb	2	; select bank2
 12208  1B6C  0867               	movf	scaleA10kPot@input^(0+256),w
 12209  1B6D  0021               	movlb	1	; select bank1
 12210  1B6E  00D1               	movwf	___ftdiv@f1^(0+128)
 12211  1B6F  0022               	movlb	2	; select bank2
 12212  1B70  0868               	movf	(scaleA10kPot@input+1)^(0+256),w
 12213  1B71  0021               	movlb	1	; select bank1
 12214  1B72  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 12215  1B73  0022               	movlb	2	; select bank2
 12216  1B74  0869               	movf	(scaleA10kPot@input+2)^(0+256),w
 12217  1B75  0021               	movlb	1	; select bank1
 12218  1B76  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 12219  1B77  319C  2474  319B   	fcall	___ftdiv
 12220  1B7A  0021               	movlb	1	; select bank1
 12221  1B7B  084E               	movf	?___ftdiv^(0+128),w
 12222  1B7C  0023               	movlb	3	; select bank3
 12223  1B7D  00EA               	movwf	_scaleA10kPot$2848^(0+384)
 12224  1B7E  0021               	movlb	1	; select bank1
 12225  1B7F  084F               	movf	(?___ftdiv+1)^(0+128),w
 12226  1B80  0023               	movlb	3	; select bank3
 12227  1B81  00EB               	movwf	(_scaleA10kPot$2848+1)^(0+384)
 12228  1B82  0021               	movlb	1	; select bank1
 12229  1B83  0850               	movf	(?___ftdiv+2)^(0+128),w
 12230  1B84  0023               	movlb	3	; select bank3
 12231  1B85  00EC               	movwf	(_scaleA10kPot$2848+2)^(0+384)
 12232                           
 12233                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 12234  1B86  306A               	movlw	106
 12235  1B87  0022               	movlb	2	; select bank2
 12236  1B88  00D8               	movwf	pow@y^(0+256)
 12237  1B89  309C               	movlw	156
 12238  1B8A  00D9               	movwf	(pow@y+1)^(0+256)
 12239  1B8B  30BF               	movlw	191
 12240  1B8C  00DA               	movwf	(pow@y+2)^(0+256)
 12241  1B8D  0023               	movlb	3	; select bank3
 12242  1B8E  086A               	movf	_scaleA10kPot$2848^(0+384),w
 12243  1B8F  0022               	movlb	2	; select bank2
 12244  1B90  00D5               	movwf	pow@x^(0+256)
 12245  1B91  0023               	movlb	3	; select bank3
 12246  1B92  086B               	movf	(_scaleA10kPot$2848+1)^(0+384),w
 12247  1B93  0022               	movlb	2	; select bank2
 12248  1B94  00D6               	movwf	(pow@x+1)^(0+256)
 12249  1B95  0023               	movlb	3	; select bank3
 12250  1B96  086C               	movf	(_scaleA10kPot$2848+2)^(0+384),w
 12251  1B97  0022               	movlb	2	; select bank2
 12252  1B98  00D7               	movwf	(pow@x+2)^(0+256)
 12253  1B99  3191  212B  319B   	fcall	_pow
 12254  1B9C  0022               	movlb	2	; select bank2
 12255  1B9D  0855               	movf	?_pow^(0+256),w
 12256  1B9E  0023               	movlb	3	; select bank3
 12257  1B9F  00ED               	movwf	_scaleA10kPot$2849^(0+384)
 12258  1BA0  0022               	movlb	2	; select bank2
 12259  1BA1  0856               	movf	(?_pow+1)^(0+256),w
 12260  1BA2  0023               	movlb	3	; select bank3
 12261  1BA3  00EE               	movwf	(_scaleA10kPot$2849+1)^(0+384)
 12262  1BA4  0022               	movlb	2	; select bank2
 12263  1BA5  0857               	movf	(?_pow+2)^(0+256),w
 12264  1BA6  0023               	movlb	3	; select bank3
 12265  1BA7  00EF               	movwf	(_scaleA10kPot$2849+2)^(0+384)
 12266                           
 12267                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 12268  1BA8  30E3               	movlw	227
 12269  1BA9  0021               	movlb	1	; select bank1
 12270  1BAA  00AE               	movwf	___ftmul@f1^(0+128)
 12271  1BAB  300B               	movlw	11
 12272  1BAC  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12273  1BAD  3041               	movlw	65
 12274  1BAE  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12275  1BAF  0023               	movlb	3	; select bank3
 12276  1BB0  086D               	movf	_scaleA10kPot$2849^(0+384),w
 12277  1BB1  0021               	movlb	1	; select bank1
 12278  1BB2  00B1               	movwf	___ftmul@f2^(0+128)
 12279  1BB3  0023               	movlb	3	; select bank3
 12280  1BB4  086E               	movf	(_scaleA10kPot$2849+1)^(0+384),w
 12281  1BB5  0021               	movlb	1	; select bank1
 12282  1BB6  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12283  1BB7  0023               	movlb	3	; select bank3
 12284  1BB8  086F               	movf	(_scaleA10kPot$2849+2)^(0+384),w
 12285  1BB9  0021               	movlb	1	; select bank1
 12286  1BBA  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12287  1BBB  319E  267B  319B   	fcall	___ftmul
 12288  1BBE  0021               	movlb	1	; select bank1
 12289  1BBF  082E               	movf	?___ftmul^(0+128),w
 12290  1BC0  0023               	movlb	3	; select bank3
 12291  1BC1  00E7               	movwf	scaleA10kPot@pwm^(0+384)
 12292  1BC2  0021               	movlb	1	; select bank1
 12293  1BC3  082F               	movf	(?___ftmul+1)^(0+128),w
 12294  1BC4  0023               	movlb	3	; select bank3
 12295  1BC5  00E8               	movwf	(scaleA10kPot@pwm+1)^(0+384)
 12296  1BC6  0021               	movlb	1	; select bank1
 12297  1BC7  0830               	movf	(?___ftmul+2)^(0+128),w
 12298  1BC8  0023               	movlb	3	; select bank3
 12299  1BC9  00E9               	movwf	(scaleA10kPot@pwm+2)^(0+384)
 12300                           
 12301                           ;user.c: 207: return (int)(pwm);
 12302  1BCA  0867               	movf	scaleA10kPot@pwm^(0+384),w
 12303  1BCB  0022               	movlb	2	; select bank2
 12304  1BCC  00A0               	movwf	___fttol@f1^(0+256)
 12305  1BCD  0023               	movlb	3	; select bank3
 12306  1BCE  0868               	movf	(scaleA10kPot@pwm+1)^(0+384),w
 12307  1BCF  0022               	movlb	2	; select bank2
 12308  1BD0  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12309  1BD1  0023               	movlb	3	; select bank3
 12310  1BD2  0869               	movf	(scaleA10kPot@pwm+2)^(0+384),w
 12311  1BD3  0022               	movlb	2	; select bank2
 12312  1BD4  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12313  1BD5  3199  21AF         	fcall	___fttol
 12314  1BD7  0022               	movlb	2	; select bank2
 12315  1BD8  0821               	movf	(?___fttol^(0+256)+1),w
 12316  1BD9  00E8               	movwf	(?_scaleA10kPot+1)^(0+256)
 12317  1BDA  0820               	movf	?___fttol^(0+256),w
 12318  1BDB  00E7               	movwf	?_scaleA10kPot^(0+256)
 12319  1BDC  0008               	return
 12320  1BDD                     __end_of_scaleA10kPot:	
 12321                           
 12322                           	psect	text26
 12323  192A                     __ptext26:	
 12324 ;; *************** function _scaleA100kPot *****************
 12325 ;; Defined at:
 12326 ;;		line 188 in file "user.c"
 12327 ;; Parameters:    Size  Location     Type
 12328 ;;  input           3   71[BANK2 ] int 
 12329 ;; Auto vars:     Size  Location     Type
 12330 ;;  pwm             3    0[BANK3 ] float 
 12331 ;; Return value:  Size  Location     Type
 12332 ;;                  2   71[BANK2 ] int 
 12333 ;; Registers used:
 12334 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12335 ;; Tracked objects:
 12336 ;;		On entry : 0/0
 12337 ;;		On exit  : 0/0
 12338 ;;		Unchanged: 0/0
 12339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12340 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12341 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12343 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12344 ;;Total ram usage:       12 bytes
 12345 ;; Hardware stack levels used:    1
 12346 ;; Hardware stack levels required when called:    8
 12347 ;; This function calls:
 12348 ;;		___ftdiv
 12349 ;;		___ftmul
 12350 ;;		___fttol
 12351 ;;		_pow
 12352 ;; This function is called by:
 12353 ;;		_main
 12354 ;; This function uses a non-reentrant model
 12355 ;;
 12356                           
 12357                           
 12358                           ;psect for function _scaleA100kPot
 12359  192A                     _scaleA100kPot:	
 12360                           
 12361                           ;user.c: 190: if (input == 0.0) {input = 1.0;}
 12362                           
 12363                           ;incstack = 0
 12364                           ; Regs used in _scaleA100kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12365  192A  0022               	movlb	2	; select bank2
 12366  192B  0869               	movf	(scaleA100kPot@input+2)^(0+256),w
 12367  192C  0468               	iorwf	(scaleA100kPot@input+1)^(0+256),w
 12368  192D  0467               	iorwf	scaleA100kPot@input^(0+256),w
 12369  192E  1D03               	skipz
 12370  192F  2936               	goto	l9180
 12371  1930  3000               	movlw	0
 12372  1931  00E7               	movwf	scaleA100kPot@input^(0+256)
 12373  1932  3080               	movlw	128
 12374  1933  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
 12375  1934  303F               	movlw	63
 12376  1935  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
 12377  1936                     l9180:	
 12378                           
 12379                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 12380  1936  30C0               	movlw	192
 12381  1937  0021               	movlb	1	; select bank1
 12382  1938  00CE               	movwf	___ftdiv@f2^(0+128)
 12383  1939  307F               	movlw	127
 12384  193A  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 12385  193B  3044               	movlw	68
 12386  193C  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 12387  193D  0022               	movlb	2	; select bank2
 12388  193E  0867               	movf	scaleA100kPot@input^(0+256),w
 12389  193F  0021               	movlb	1	; select bank1
 12390  1940  00D1               	movwf	___ftdiv@f1^(0+128)
 12391  1941  0022               	movlb	2	; select bank2
 12392  1942  0868               	movf	(scaleA100kPot@input+1)^(0+256),w
 12393  1943  0021               	movlb	1	; select bank1
 12394  1944  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 12395  1945  0022               	movlb	2	; select bank2
 12396  1946  0869               	movf	(scaleA100kPot@input+2)^(0+256),w
 12397  1947  0021               	movlb	1	; select bank1
 12398  1948  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 12399  1949  319C  2474  3199   	fcall	___ftdiv
 12400  194C  0021               	movlb	1	; select bank1
 12401  194D  084E               	movf	?___ftdiv^(0+128),w
 12402  194E  0023               	movlb	3	; select bank3
 12403  194F  00EA               	movwf	_scaleA100kPot$2844^(0+384)
 12404  1950  0021               	movlb	1	; select bank1
 12405  1951  084F               	movf	(?___ftdiv+1)^(0+128),w
 12406  1952  0023               	movlb	3	; select bank3
 12407  1953  00EB               	movwf	(_scaleA100kPot$2844+1)^(0+384)
 12408  1954  0021               	movlb	1	; select bank1
 12409  1955  0850               	movf	(?___ftdiv+2)^(0+128),w
 12410  1956  0023               	movlb	3	; select bank3
 12411  1957  00EC               	movwf	(_scaleA100kPot$2844+2)^(0+384)
 12412                           
 12413                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 12414  1958  3056               	movlw	86
 12415  1959  0022               	movlb	2	; select bank2
 12416  195A  00D8               	movwf	pow@y^(0+256)
 12417  195B  308E               	movlw	142
 12418  195C  00D9               	movwf	(pow@y+1)^(0+256)
 12419  195D  30BF               	movlw	191
 12420  195E  00DA               	movwf	(pow@y+2)^(0+256)
 12421  195F  0023               	movlb	3	; select bank3
 12422  1960  086A               	movf	_scaleA100kPot$2844^(0+384),w
 12423  1961  0022               	movlb	2	; select bank2
 12424  1962  00D5               	movwf	pow@x^(0+256)
 12425  1963  0023               	movlb	3	; select bank3
 12426  1964  086B               	movf	(_scaleA100kPot$2844+1)^(0+384),w
 12427  1965  0022               	movlb	2	; select bank2
 12428  1966  00D6               	movwf	(pow@x+1)^(0+256)
 12429  1967  0023               	movlb	3	; select bank3
 12430  1968  086C               	movf	(_scaleA100kPot$2844+2)^(0+384),w
 12431  1969  0022               	movlb	2	; select bank2
 12432  196A  00D7               	movwf	(pow@x+2)^(0+256)
 12433  196B  3191  212B  3199   	fcall	_pow
 12434  196E  0022               	movlb	2	; select bank2
 12435  196F  0855               	movf	?_pow^(0+256),w
 12436  1970  0023               	movlb	3	; select bank3
 12437  1971  00ED               	movwf	_scaleA100kPot$2845^(0+384)
 12438  1972  0022               	movlb	2	; select bank2
 12439  1973  0856               	movf	(?_pow+1)^(0+256),w
 12440  1974  0023               	movlb	3	; select bank3
 12441  1975  00EE               	movwf	(_scaleA100kPot$2845+1)^(0+384)
 12442  1976  0022               	movlb	2	; select bank2
 12443  1977  0857               	movf	(?_pow+2)^(0+256),w
 12444  1978  0023               	movlb	3	; select bank3
 12445  1979  00EF               	movwf	(_scaleA100kPot$2845+2)^(0+384)
 12446                           
 12447                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 12448  197A  309F               	movlw	159
 12449  197B  0021               	movlb	1	; select bank1
 12450  197C  00AE               	movwf	___ftmul@f1^(0+128)
 12451  197D  3068               	movlw	104
 12452  197E  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12453  197F  3040               	movlw	64
 12454  1980  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12455  1981  0023               	movlb	3	; select bank3
 12456  1982  086D               	movf	_scaleA100kPot$2845^(0+384),w
 12457  1983  0021               	movlb	1	; select bank1
 12458  1984  00B1               	movwf	___ftmul@f2^(0+128)
 12459  1985  0023               	movlb	3	; select bank3
 12460  1986  086E               	movf	(_scaleA100kPot$2845+1)^(0+384),w
 12461  1987  0021               	movlb	1	; select bank1
 12462  1988  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12463  1989  0023               	movlb	3	; select bank3
 12464  198A  086F               	movf	(_scaleA100kPot$2845+2)^(0+384),w
 12465  198B  0021               	movlb	1	; select bank1
 12466  198C  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12467  198D  319E  267B  3199   	fcall	___ftmul
 12468  1990  0021               	movlb	1	; select bank1
 12469  1991  082E               	movf	?___ftmul^(0+128),w
 12470  1992  0023               	movlb	3	; select bank3
 12471  1993  00E7               	movwf	scaleA100kPot@pwm^(0+384)
 12472  1994  0021               	movlb	1	; select bank1
 12473  1995  082F               	movf	(?___ftmul+1)^(0+128),w
 12474  1996  0023               	movlb	3	; select bank3
 12475  1997  00E8               	movwf	(scaleA100kPot@pwm+1)^(0+384)
 12476  1998  0021               	movlb	1	; select bank1
 12477  1999  0830               	movf	(?___ftmul+2)^(0+128),w
 12478  199A  0023               	movlb	3	; select bank3
 12479  199B  00E9               	movwf	(scaleA100kPot@pwm+2)^(0+384)
 12480                           
 12481                           ;user.c: 192: return (int)(pwm);
 12482  199C  0867               	movf	scaleA100kPot@pwm^(0+384),w
 12483  199D  0022               	movlb	2	; select bank2
 12484  199E  00A0               	movwf	___fttol@f1^(0+256)
 12485  199F  0023               	movlb	3	; select bank3
 12486  19A0  0868               	movf	(scaleA100kPot@pwm+1)^(0+384),w
 12487  19A1  0022               	movlb	2	; select bank2
 12488  19A2  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12489  19A3  0023               	movlb	3	; select bank3
 12490  19A4  0869               	movf	(scaleA100kPot@pwm+2)^(0+384),w
 12491  19A5  0022               	movlb	2	; select bank2
 12492  19A6  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12493  19A7  3199  21AF         	fcall	___fttol
 12494  19A9  0022               	movlb	2	; select bank2
 12495  19AA  0821               	movf	(?___fttol^(0+256)+1),w
 12496  19AB  00E8               	movwf	(?_scaleA100kPot+1)^(0+256)
 12497  19AC  0820               	movf	?___fttol^(0+256),w
 12498  19AD  00E7               	movwf	?_scaleA100kPot^(0+256)
 12499  19AE  0008               	return
 12500  19AF                     __end_of_scaleA100kPot:	
 12501                           
 12502                           	psect	text27
 12503  112B                     __ptext27:	
 12504 ;; *************** function _pow *****************
 12505 ;; Defined at:
 12506 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\pow.c"
 12507 ;; Parameters:    Size  Location     Type
 12508 ;;  x               3   53[BANK2 ] int 
 12509 ;;  y               3   56[BANK2 ] int 
 12510 ;; Auto vars:     Size  Location     Type
 12511 ;;  yi              4   67[BANK2 ] unsigned long 
 12512 ;;  sign            1   66[BANK2 ] unsigned char 
 12513 ;; Return value:  Size  Location     Type
 12514 ;;                  3   53[BANK2 ] unsigned char 
 12515 ;; Registers used:
 12516 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12517 ;; Tracked objects:
 12518 ;;		On entry : 0/0
 12519 ;;		On exit  : 0/0
 12520 ;;		Unchanged: 0/0
 12521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12522 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12523 ;;      Locals:         0       0       0      11       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12524 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12525 ;;      Totals:         0       0       0      18       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12526 ;;Total ram usage:       18 bytes
 12527 ;; Hardware stack levels used:    1
 12528 ;; Hardware stack levels required when called:    7
 12529 ;; This function calls:
 12530 ;;		___ftge
 12531 ;;		___ftmul
 12532 ;;		___ftneg
 12533 ;;		___fttol
 12534 ;;		___lltoft
 12535 ;;		_exp
 12536 ;;		_log
 12537 ;; This function is called by:
 12538 ;;		_scaleA100kPot
 12539 ;;		_scaleA10kPot
 12540 ;;		_scaleiA10kPot
 12541 ;;		_scaleiA100kPot
 12542 ;; This function uses a non-reentrant model
 12543 ;;
 12544                           
 12545                           
 12546                           ;psect for function _pow
 12547  112B                     _pow:	
 12548                           
 12549                           ;incstack = 0
 12550                           ; Regs used in _pow: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12551  112B  0022               	movlb	2	; select bank2
 12552  112C  01E2               	clrf	pow@sign^(0+256)
 12553  112D  0857               	movf	(pow@x+2)^(0+256),w
 12554  112E  0456               	iorwf	(pow@x+1)^(0+256),w
 12555  112F  0455               	iorwf	pow@x^(0+256),w
 12556  1130  1D03               	skipz
 12557  1131  2957               	goto	l8470
 12558  1132  3000               	movlw	0
 12559  1133  0021               	movlb	1	; select bank1
 12560  1134  00A0               	movwf	___ftge@ff1^(0+128)
 12561  1135  3000               	movlw	0
 12562  1136  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12563  1137  3000               	movlw	0
 12564  1138  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12565  1139  0022               	movlb	2	; select bank2
 12566  113A  0858               	movf	pow@y^(0+256),w
 12567  113B  0021               	movlb	1	; select bank1
 12568  113C  00A3               	movwf	___ftge@ff2^(0+128)
 12569  113D  0022               	movlb	2	; select bank2
 12570  113E  0859               	movf	(pow@y+1)^(0+256),w
 12571  113F  0021               	movlb	1	; select bank1
 12572  1140  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12573  1141  0022               	movlb	2	; select bank2
 12574  1142  085A               	movf	(pow@y+2)^(0+256),w
 12575  1143  0021               	movlb	1	; select bank1
 12576  1144  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12577  1145  31A0  20AA  3191   	fcall	___ftge
 12578  1148  1C03               	btfss	3,0
 12579  1149  294F               	goto	l2360
 12580  114A  3021               	movlw	33
 12581  114B  0024               	movlb	4	; select bank4
 12582  114C  00D1               	movwf	_errno^(0+512)
 12583  114D  3000               	movlw	0
 12584  114E  00D2               	movwf	(_errno^(0+512)+1)
 12585  114F                     l2360:	
 12586  114F  3000               	movlw	0
 12587  1150  0022               	movlb	2	; select bank2
 12588  1151  00D5               	movwf	?_pow^(0+256)
 12589  1152  3000               	movlw	0
 12590  1153  00D6               	movwf	(?_pow+1)^(0+256)
 12591  1154  3000               	movlw	0
 12592  1155  00D7               	movwf	(?_pow+2)^(0+256)
 12593  1156  0008               	return
 12594  1157                     l8470:	
 12595  1157  085A               	movf	(pow@y+2)^(0+256),w
 12596  1158  0459               	iorwf	(pow@y+1)^(0+256),w
 12597  1159  0458               	iorwf	pow@y^(0+256),w
 12598  115A  1D03               	skipz
 12599  115B  2963               	goto	l8476
 12600  115C  3000               	movlw	0
 12601  115D  00D5               	movwf	?_pow^(0+256)
 12602  115E  3080               	movlw	128
 12603  115F  00D6               	movwf	(?_pow+1)^(0+256)
 12604  1160  303F               	movlw	63
 12605  1161  00D7               	movwf	(?_pow+2)^(0+256)
 12606  1162  0008               	return
 12607  1163                     l8476:	
 12608  1163  0855               	movf	pow@x^(0+256),w
 12609  1164  0021               	movlb	1	; select bank1
 12610  1165  00A0               	movwf	___ftge@ff1^(0+128)
 12611  1166  0022               	movlb	2	; select bank2
 12612  1167  0856               	movf	(pow@x+1)^(0+256),w
 12613  1168  0021               	movlb	1	; select bank1
 12614  1169  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12615  116A  0022               	movlb	2	; select bank2
 12616  116B  0857               	movf	(pow@x+2)^(0+256),w
 12617  116C  0021               	movlb	1	; select bank1
 12618  116D  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12619  116E  3000               	movlw	0
 12620  116F  00A3               	movwf	___ftge@ff2^(0+128)
 12621  1170  3000               	movlw	0
 12622  1171  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12623  1172  3000               	movlw	0
 12624  1173  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12625  1174  31A0  20AA  3191   	fcall	___ftge
 12626  1177  1803               	btfsc	3,0
 12627  1178  29DD               	goto	l8488
 12628  1179  0022               	movlb	2	; select bank2
 12629  117A  0858               	movf	pow@y^(0+256),w
 12630  117B  00A0               	movwf	___fttol@f1^(0+256)
 12631  117C  0859               	movf	(pow@y+1)^(0+256),w
 12632  117D  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12633  117E  085A               	movf	(pow@y+2)^(0+256),w
 12634  117F  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12635  1180  3199  21AF  3191   	fcall	___fttol
 12636  1183  0022               	movlb	2	; select bank2
 12637  1184  0823               	movf	(?___fttol+3)^(0+256),w
 12638  1185  00E6               	movwf	(pow@yi+3)^(0+256)
 12639  1186  0822               	movf	(?___fttol+2)^(0+256),w
 12640  1187  00E5               	movwf	(pow@yi+2)^(0+256)
 12641  1188  0821               	movf	(?___fttol+1)^(0+256),w
 12642  1189  00E4               	movwf	(pow@yi+1)^(0+256)
 12643  118A  0820               	movf	?___fttol^(0+256),w
 12644  118B  00E3               	movwf	pow@yi^(0+256)
 12645  118C  0866               	movf	(pow@yi+3)^(0+256),w
 12646  118D  0021               	movlb	1	; select bank1
 12647  118E  00AB               	movwf	(___lltoft@c+3)^(0+128)
 12648  118F  0022               	movlb	2	; select bank2
 12649  1190  0865               	movf	(pow@yi+2)^(0+256),w
 12650  1191  0021               	movlb	1	; select bank1
 12651  1192  00AA               	movwf	(___lltoft@c+2)^(0+128)
 12652  1193  0022               	movlb	2	; select bank2
 12653  1194  0864               	movf	(pow@yi+1)^(0+256),w
 12654  1195  0021               	movlb	1	; select bank1
 12655  1196  00A9               	movwf	(___lltoft@c+1)^(0+128)
 12656  1197  0022               	movlb	2	; select bank2
 12657  1198  0863               	movf	pow@yi^(0+256),w
 12658  1199  0021               	movlb	1	; select bank1
 12659  119A  00A8               	movwf	___lltoft@c^(0+128)
 12660  119B  31AE  267F  3191   	fcall	___lltoft
 12661  119E  0022               	movlb	2	; select bank2
 12662  119F  085A               	movf	(pow@y+2)^(0+256),w
 12663  11A0  0021               	movlb	1	; select bank1
 12664  11A1  062A               	xorwf	(?___lltoft+2)^(0+128),w
 12665  11A2  1D03               	skipz
 12666  11A3  29AE               	goto	u8985
 12667  11A4  0022               	movlb	2	; select bank2
 12668  11A5  0859               	movf	(pow@y+1)^(0+256),w
 12669  11A6  0021               	movlb	1	; select bank1
 12670  11A7  0629               	xorwf	(?___lltoft+1)^(0+128),w
 12671  11A8  1D03               	skipz
 12672  11A9  29AE               	goto	u8985
 12673  11AA  0022               	movlb	2	; select bank2
 12674  11AB  0858               	movf	pow@y^(0+256),w
 12675  11AC  0021               	movlb	1	; select bank1
 12676  11AD  0628               	xorwf	?___lltoft^(0+128),w
 12677  11AE                     u8985:	
 12678  11AE  1903               	skipnz
 12679  11AF  29BD               	goto	l8484
 12680  11B0  3021               	movlw	33
 12681  11B1  0024               	movlb	4	; select bank4
 12682  11B2  00D1               	movwf	_errno^(0+512)
 12683  11B3  3000               	movlw	0
 12684  11B4  00D2               	movwf	(_errno^(0+512)+1)
 12685  11B5  3000               	movlw	0
 12686  11B6  0022               	movlb	2	; select bank2
 12687  11B7  00D5               	movwf	?_pow^(0+256)
 12688  11B8  3000               	movlw	0
 12689  11B9  00D6               	movwf	(?_pow+1)^(0+256)
 12690  11BA  3000               	movlw	0
 12691  11BB  00D7               	movwf	(?_pow+2)^(0+256)
 12692  11BC  0008               	return
 12693  11BD                     l8484:	
 12694  11BD  0022               	movlb	2	; select bank2
 12695  11BE  0863               	movf	pow@yi^(0+256),w
 12696  11BF  3901               	andlw	1
 12697  11C0  00DB               	movwf	??_pow^(0+256)
 12698  11C1  085B               	movf	??_pow^(0+256),w
 12699  11C2  00E2               	movwf	pow@sign^(0+256)
 12700  11C3  0855               	movf	pow@x^(0+256),w
 12701  11C4  0021               	movlb	1	; select bank1
 12702  11C5  00BE               	movwf	___ftneg@f1^(0+128)
 12703  11C6  0022               	movlb	2	; select bank2
 12704  11C7  0856               	movf	(pow@x+1)^(0+256),w
 12705  11C8  0021               	movlb	1	; select bank1
 12706  11C9  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12707  11CA  0022               	movlb	2	; select bank2
 12708  11CB  0857               	movf	(pow@x+2)^(0+256),w
 12709  11CC  0021               	movlb	1	; select bank1
 12710  11CD  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12711  11CE  31AC  24EC  3191   	fcall	___ftneg
 12712  11D1  0021               	movlb	1	; select bank1
 12713  11D2  083E               	movf	?___ftneg^(0+128),w
 12714  11D3  0022               	movlb	2	; select bank2
 12715  11D4  00D5               	movwf	pow@x^(0+256)
 12716  11D5  0021               	movlb	1	; select bank1
 12717  11D6  083F               	movf	(?___ftneg+1)^(0+128),w
 12718  11D7  0022               	movlb	2	; select bank2
 12719  11D8  00D6               	movwf	(pow@x+1)^(0+256)
 12720  11D9  0021               	movlb	1	; select bank1
 12721  11DA  0840               	movf	(?___ftneg+2)^(0+128),w
 12722  11DB  0022               	movlb	2	; select bank2
 12723  11DC  00D7               	movwf	(pow@x+2)^(0+256)
 12724  11DD                     l8488:	
 12725  11DD  0022               	movlb	2	; select bank2
 12726  11DE  0855               	movf	pow@x^(0+256),w
 12727  11DF  00BE               	movwf	log@x^(0+256)
 12728  11E0  0856               	movf	(pow@x+1)^(0+256),w
 12729  11E1  00BF               	movwf	(log@x+1)^(0+256)
 12730  11E2  0857               	movf	(pow@x+2)^(0+256),w
 12731  11E3  00C0               	movwf	(log@x+2)^(0+256)
 12732  11E4  319F  272F  3191   	fcall	_log
 12733  11E7  0022               	movlb	2	; select bank2
 12734  11E8  083E               	movf	?_log^(0+256),w
 12735  11E9  00DC               	movwf	_pow$2857^(0+256)
 12736  11EA  083F               	movf	(?_log+1)^(0+256),w
 12737  11EB  00DD               	movwf	(_pow$2857+1)^(0+256)
 12738  11EC  0840               	movf	(?_log+2)^(0+256),w
 12739  11ED  00DE               	movwf	(_pow$2857+2)^(0+256)
 12740  11EE  0858               	movf	pow@y^(0+256),w
 12741  11EF  0021               	movlb	1	; select bank1
 12742  11F0  00AE               	movwf	___ftmul@f1^(0+128)
 12743  11F1  0022               	movlb	2	; select bank2
 12744  11F2  0859               	movf	(pow@y+1)^(0+256),w
 12745  11F3  0021               	movlb	1	; select bank1
 12746  11F4  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12747  11F5  0022               	movlb	2	; select bank2
 12748  11F6  085A               	movf	(pow@y+2)^(0+256),w
 12749  11F7  0021               	movlb	1	; select bank1
 12750  11F8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12751  11F9  0022               	movlb	2	; select bank2
 12752  11FA  085C               	movf	_pow$2857^(0+256),w
 12753  11FB  0021               	movlb	1	; select bank1
 12754  11FC  00B1               	movwf	___ftmul@f2^(0+128)
 12755  11FD  0022               	movlb	2	; select bank2
 12756  11FE  085D               	movf	(_pow$2857+1)^(0+256),w
 12757  11FF  0021               	movlb	1	; select bank1
 12758  1200  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12759  1201  0022               	movlb	2	; select bank2
 12760  1202  085E               	movf	(_pow$2857+2)^(0+256),w
 12761  1203  0021               	movlb	1	; select bank1
 12762  1204  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12763  1205  319E  267B  3191   	fcall	___ftmul
 12764  1208  0021               	movlb	1	; select bank1
 12765  1209  082E               	movf	?___ftmul^(0+128),w
 12766  120A  0022               	movlb	2	; select bank2
 12767  120B  00DF               	movwf	_pow$2858^(0+256)
 12768  120C  0021               	movlb	1	; select bank1
 12769  120D  082F               	movf	(?___ftmul+1)^(0+128),w
 12770  120E  0022               	movlb	2	; select bank2
 12771  120F  00E0               	movwf	(_pow$2858+1)^(0+256)
 12772  1210  0021               	movlb	1	; select bank1
 12773  1211  0830               	movf	(?___ftmul+2)^(0+128),w
 12774  1212  0022               	movlb	2	; select bank2
 12775  1213  00E1               	movwf	(_pow$2858+2)^(0+256)
 12776  1214  085F               	movf	_pow$2858^(0+256),w
 12777  1215  00C8               	movwf	exp@x^(0+256)
 12778  1216  0860               	movf	(_pow$2858+1)^(0+256),w
 12779  1217  00C9               	movwf	(exp@x+1)^(0+256)
 12780  1218  0861               	movf	(_pow$2858+2)^(0+256),w
 12781  1219  00CA               	movwf	(exp@x+2)^(0+256)
 12782  121A  3193  2363  3191   	fcall	_exp
 12783  121D  0022               	movlb	2	; select bank2
 12784  121E  0848               	movf	?_exp^(0+256),w
 12785  121F  00D5               	movwf	pow@x^(0+256)
 12786  1220  0849               	movf	(?_exp+1)^(0+256),w
 12787  1221  00D6               	movwf	(pow@x+1)^(0+256)
 12788  1222  084A               	movf	(?_exp+2)^(0+256),w
 12789  1223  00D7               	movwf	(pow@x+2)^(0+256)
 12790  1224  0862               	movf	pow@sign^(0+256),w
 12791  1225  1903               	btfsc	3,2
 12792  1226  0008               	return
 12793  1227  0855               	movf	pow@x^(0+256),w
 12794  1228  0021               	movlb	1	; select bank1
 12795  1229  00BE               	movwf	___ftneg@f1^(0+128)
 12796  122A  0022               	movlb	2	; select bank2
 12797  122B  0856               	movf	(pow@x+1)^(0+256),w
 12798  122C  0021               	movlb	1	; select bank1
 12799  122D  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12800  122E  0022               	movlb	2	; select bank2
 12801  122F  0857               	movf	(pow@x+2)^(0+256),w
 12802  1230  0021               	movlb	1	; select bank1
 12803  1231  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12804  1232  31AC  24EC         	fcall	___ftneg
 12805  1234  0021               	movlb	1	; select bank1
 12806  1235  083E               	movf	?___ftneg^(0+128),w
 12807  1236  0022               	movlb	2	; select bank2
 12808  1237  00D5               	movwf	?_pow^(0+256)
 12809  1238  0021               	movlb	1	; select bank1
 12810  1239  083F               	movf	(?___ftneg+1)^(0+128),w
 12811  123A  0022               	movlb	2	; select bank2
 12812  123B  00D6               	movwf	(?_pow+1)^(0+256)
 12813  123C  0021               	movlb	1	; select bank1
 12814  123D  0840               	movf	(?___ftneg+2)^(0+128),w
 12815  123E  0022               	movlb	2	; select bank2
 12816  123F  00D7               	movwf	(?_pow+2)^(0+256)
 12817  1240  0008               	return
 12818  1241                     __end_of_pow:	
 12819                           
 12820                           	psect	text28
 12821  1F2F                     __ptext28:	
 12822 ;; *************** function _log *****************
 12823 ;; Defined at:
 12824 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\log.c"
 12825 ;; Parameters:    Size  Location     Type
 12826 ;;  x               3   30[BANK2 ] unsigned char 
 12827 ;; Auto vars:     Size  Location     Type
 12828 ;;  exponent        2   34[BANK2 ] int 
 12829 ;; Return value:  Size  Location     Type
 12830 ;;                  3   30[BANK2 ] int 
 12831 ;; Registers used:
 12832 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12833 ;; Tracked objects:
 12834 ;;		On entry : 0/0
 12835 ;;		On exit  : 0/0
 12836 ;;		Unchanged: 0/0
 12837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12838 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12839 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12840 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12841 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12842 ;;Total ram usage:        6 bytes
 12843 ;; Hardware stack levels used:    1
 12844 ;; Hardware stack levels required when called:    6
 12845 ;; This function calls:
 12846 ;;		___awtoft
 12847 ;;		___ftadd
 12848 ;;		___ftge
 12849 ;;		___ftmul
 12850 ;;		_eval_poly
 12851 ;;		_frexp
 12852 ;; This function is called by:
 12853 ;;		_pow
 12854 ;; This function uses a non-reentrant model
 12855 ;;
 12856                           
 12857                           
 12858                           ;psect for function _log
 12859  1F2F                     _log:	
 12860                           
 12861                           ;incstack = 0
 12862                           ; Regs used in _log: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12863  1F2F  0022               	movlb	2	; select bank2
 12864  1F30  083E               	movf	log@x^(0+256),w
 12865  1F31  0021               	movlb	1	; select bank1
 12866  1F32  00A0               	movwf	___ftge@ff1^(0+128)
 12867  1F33  0022               	movlb	2	; select bank2
 12868  1F34  083F               	movf	(log@x+1)^(0+256),w
 12869  1F35  0021               	movlb	1	; select bank1
 12870  1F36  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12871  1F37  0022               	movlb	2	; select bank2
 12872  1F38  0840               	movf	(log@x+2)^(0+256),w
 12873  1F39  0021               	movlb	1	; select bank1
 12874  1F3A  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12875  1F3B  3000               	movlw	0
 12876  1F3C  00A3               	movwf	___ftge@ff2^(0+128)
 12877  1F3D  3000               	movlw	0
 12878  1F3E  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12879  1F3F  3000               	movlw	0
 12880  1F40  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12881  1F41  31A0  20AA  319F   	fcall	___ftge
 12882  1F44  1803               	btfsc	3,0
 12883  1F45  2F53               	goto	l8342
 12884  1F46  3021               	movlw	33
 12885  1F47  0024               	movlb	4	; select bank4
 12886  1F48  00D1               	movwf	_errno^(0+512)
 12887  1F49  3000               	movlw	0
 12888  1F4A  00D2               	movwf	(_errno^(0+512)+1)
 12889  1F4B  3000               	movlw	0
 12890  1F4C  0022               	movlb	2	; select bank2
 12891  1F4D  00BE               	movwf	?_log^(0+256)
 12892  1F4E  3000               	movlw	0
 12893  1F4F  00BF               	movwf	(?_log+1)^(0+256)
 12894  1F50  3000               	movlw	0
 12895  1F51  00C0               	movwf	(?_log+2)^(0+256)
 12896  1F52  0008               	return
 12897  1F53                     l8342:	
 12898  1F53  0022               	movlb	2	; select bank2
 12899  1F54  0840               	movf	(log@x+2)^(0+256),w
 12900  1F55  043F               	iorwf	(log@x+1)^(0+256),w
 12901  1F56  043E               	iorwf	log@x^(0+256),w
 12902  1F57  1D03               	skipz
 12903  1F58  2F66               	goto	l8348
 12904  1F59  3022               	movlw	34
 12905  1F5A  0024               	movlb	4	; select bank4
 12906  1F5B  00D1               	movwf	_errno^(0+512)
 12907  1F5C  3000               	movlw	0
 12908  1F5D  00D2               	movwf	(_errno^(0+512)+1)
 12909  1F5E  3000               	movlw	0
 12910  1F5F  0022               	movlb	2	; select bank2
 12911  1F60  00BE               	movwf	?_log^(0+256)
 12912  1F61  3000               	movlw	0
 12913  1F62  00BF               	movwf	(?_log+1)^(0+256)
 12914  1F63  3000               	movlw	0
 12915  1F64  00C0               	movwf	(?_log+2)^(0+256)
 12916  1F65  0008               	return
 12917  1F66                     l8348:	
 12918  1F66  3000               	movlw	0
 12919  1F67  0021               	movlb	1	; select bank1
 12920  1F68  00C1               	movwf	___ftadd@f1^(0+128)
 12921  1F69  3080               	movlw	128
 12922  1F6A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 12923  1F6B  30BF               	movlw	191
 12924  1F6C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 12925  1F6D  3000               	movlw	0
 12926  1F6E  00AE               	movwf	___ftmul@f1^(0+128)
 12927  1F6F  3000               	movlw	0
 12928  1F70  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12929  1F71  3040               	movlw	64
 12930  1F72  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12931  1F73  3042               	movlw	(low (log@exponent| (0+256)))& (0+255)
 12932  1F74  0022               	movlb	2	; select bank2
 12933  1F75  00C1               	movwf	??_log^(0+256)
 12934  1F76  0841               	movf	??_log^(0+256),w
 12935  1F77  0021               	movlb	1	; select bank1
 12936  1F78  00A3               	movwf	frexp@eptr^(0+128)
 12937  1F79  0022               	movlb	2	; select bank2
 12938  1F7A  083E               	movf	log@x^(0+256),w
 12939  1F7B  0021               	movlb	1	; select bank1
 12940  1F7C  00A0               	movwf	frexp@value^(0+128)
 12941  1F7D  0022               	movlb	2	; select bank2
 12942  1F7E  083F               	movf	(log@x+1)^(0+256),w
 12943  1F7F  0021               	movlb	1	; select bank1
 12944  1F80  00A1               	movwf	(frexp@value+1)^(0+128)
 12945  1F81  0022               	movlb	2	; select bank2
 12946  1F82  0840               	movf	(log@x+2)^(0+256),w
 12947  1F83  0021               	movlb	1	; select bank1
 12948  1F84  00A2               	movwf	(frexp@value+2)^(0+128)
 12949  1F85  31A1  219D  319F   	fcall	_frexp
 12950  1F88  0021               	movlb	1	; select bank1
 12951  1F89  0820               	movf	?_frexp^(0+128),w
 12952  1F8A  00B1               	movwf	___ftmul@f2^(0+128)
 12953  1F8B  0821               	movf	(?_frexp+1)^(0+128),w
 12954  1F8C  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12955  1F8D  0822               	movf	(?_frexp+2)^(0+128),w
 12956  1F8E  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12957  1F8F  319E  267B  319F   	fcall	___ftmul
 12958  1F92  0021               	movlb	1	; select bank1
 12959  1F93  082E               	movf	?___ftmul^(0+128),w
 12960  1F94  00C4               	movwf	___ftadd@f2^(0+128)
 12961  1F95  082F               	movf	(?___ftmul+1)^(0+128),w
 12962  1F96  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 12963  1F97  0830               	movf	(?___ftmul+2)^(0+128),w
 12964  1F98  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 12965  1F99  3190  2035  319F   	fcall	___ftadd
 12966  1F9C  0021               	movlb	1	; select bank1
 12967  1F9D  0841               	movf	?___ftadd^(0+128),w
 12968  1F9E  0022               	movlb	2	; select bank2
 12969  1F9F  00BE               	movwf	log@x^(0+256)
 12970  1FA0  0021               	movlb	1	; select bank1
 12971  1FA1  0842               	movf	(?___ftadd+1)^(0+128),w
 12972  1FA2  0022               	movlb	2	; select bank2
 12973  1FA3  00BF               	movwf	(log@x+1)^(0+256)
 12974  1FA4  0021               	movlb	1	; select bank1
 12975  1FA5  0843               	movf	(?___ftadd+2)^(0+128),w
 12976  1FA6  0022               	movlb	2	; select bank2
 12977  1FA7  00C0               	movwf	(log@x+2)^(0+256)
 12978  1FA8  30FF               	movlw	255
 12979  1FA9  07C2               	addwf	log@exponent^(0+256),f
 12980  1FAA  30FF               	movlw	255
 12981  1FAB  3DC3               	addwfc	(log@exponent+1)^(0+256),f
 12982  1FAC  083E               	movf	log@x^(0+256),w
 12983  1FAD  00B4               	movwf	eval_poly@x^(0+256)
 12984  1FAE  083F               	movf	(log@x+1)^(0+256),w
 12985  1FAF  00B5               	movwf	(eval_poly@x+1)^(0+256)
 12986  1FB0  0840               	movf	(log@x+2)^(0+256),w
 12987  1FB1  00B6               	movwf	(eval_poly@x+2)^(0+256)
 12988  1FB2  301E               	movlw	low (log@coeff| (0+32768))
 12989  1FB3  00B7               	movwf	eval_poly@d^(0+256)
 12990  1FB4  30A8               	movlw	high (log@coeff| (0+32768))
 12991  1FB5  00B8               	movwf	(eval_poly@d^(0+256)+1)
 12992  1FB6  3008               	movlw	8
 12993  1FB7  00B9               	movwf	eval_poly@n^(0+256)
 12994  1FB8  3000               	movlw	0
 12995  1FB9  00BA               	movwf	(eval_poly@n^(0+256)+1)
 12996  1FBA  31A6  261B  319F   	fcall	_eval_poly
 12997  1FBD  0022               	movlb	2	; select bank2
 12998  1FBE  0834               	movf	?_eval_poly^(0+256),w
 12999  1FBF  00BE               	movwf	log@x^(0+256)
 13000  1FC0  0835               	movf	(?_eval_poly+1)^(0+256),w
 13001  1FC1  00BF               	movwf	(log@x+1)^(0+256)
 13002  1FC2  0836               	movf	(?_eval_poly+2)^(0+256),w
 13003  1FC3  00C0               	movwf	(log@x+2)^(0+256)
 13004  1FC4  083E               	movf	log@x^(0+256),w
 13005  1FC5  0021               	movlb	1	; select bank1
 13006  1FC6  00C1               	movwf	___ftadd@f1^(0+128)
 13007  1FC7  0022               	movlb	2	; select bank2
 13008  1FC8  083F               	movf	(log@x+1)^(0+256),w
 13009  1FC9  0021               	movlb	1	; select bank1
 13010  1FCA  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 13011  1FCB  0022               	movlb	2	; select bank2
 13012  1FCC  0840               	movf	(log@x+2)^(0+256),w
 13013  1FCD  0021               	movlb	1	; select bank1
 13014  1FCE  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 13015  1FCF  3072               	movlw	114
 13016  1FD0  00AE               	movwf	___ftmul@f1^(0+128)
 13017  1FD1  3031               	movlw	49
 13018  1FD2  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 13019  1FD3  303F               	movlw	63
 13020  1FD4  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 13021  1FD5  0022               	movlb	2	; select bank2
 13022  1FD6  0843               	movf	(log@exponent+1)^(0+256),w
 13023  1FD7  0021               	movlb	1	; select bank1
 13024  1FD8  00A9               	movwf	(___awtoft@c+1)^(0+128)
 13025  1FD9  0022               	movlb	2	; select bank2
 13026  1FDA  0842               	movf	log@exponent^(0+256),w
 13027  1FDB  0021               	movlb	1	; select bank1
 13028  1FDC  00A8               	movwf	___awtoft@c^(0+128)
 13029  1FDD  31AE  263A  319F   	fcall	___awtoft
 13030  1FE0  0021               	movlb	1	; select bank1
 13031  1FE1  0828               	movf	?___awtoft^(0+128),w
 13032  1FE2  00B1               	movwf	___ftmul@f2^(0+128)
 13033  1FE3  0829               	movf	(?___awtoft+1)^(0+128),w
 13034  1FE4  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 13035  1FE5  082A               	movf	(?___awtoft+2)^(0+128),w
 13036  1FE6  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 13037  1FE7  319E  267B  319F   	fcall	___ftmul
 13038  1FEA  0021               	movlb	1	; select bank1
 13039  1FEB  082E               	movf	?___ftmul^(0+128),w
 13040  1FEC  00C4               	movwf	___ftadd@f2^(0+128)
 13041  1FED  082F               	movf	(?___ftmul+1)^(0+128),w
 13042  1FEE  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 13043  1FEF  0830               	movf	(?___ftmul+2)^(0+128),w
 13044  1FF0  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 13045  1FF1  3190  2035         	fcall	___ftadd
 13046  1FF3  0021               	movlb	1	; select bank1
 13047  1FF4  0841               	movf	?___ftadd^(0+128),w
 13048  1FF5  0022               	movlb	2	; select bank2
 13049  1FF6  00BE               	movwf	?_log^(0+256)
 13050  1FF7  0021               	movlb	1	; select bank1
 13051  1FF8  0842               	movf	(?___ftadd+1)^(0+128),w
 13052  1FF9  0022               	movlb	2	; select bank2
 13053  1FFA  00BF               	movwf	(?_log+1)^(0+256)
 13054  1FFB  0021               	movlb	1	; select bank1
 13055  1FFC  0843               	movf	(?___ftadd+2)^(0+128),w
 13056  1FFD  0022               	movlb	2	; select bank2
 13057  1FFE  00C0               	movwf	(?_log+2)^(0+256)
 13058  1FFF  0008               	return
 13059  2000                     __end_of_log:	
 13060                           
 13061                           	psect	text29
 13062  1363                     __ptext29:	
 13063 ;; *************** function _exp *****************
 13064 ;; Defined at:
 13065 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\exp.c"
 13066 ;; Parameters:    Size  Location     Type
 13067 ;;  x               3   40[BANK2 ] int 
 13068 ;; Auto vars:     Size  Location     Type
 13069 ;;  exponent        2   50[BANK2 ] int 
 13070 ;;  sign            1   52[BANK2 ] unsigned char 
 13071 ;; Return value:  Size  Location     Type
 13072 ;;                  3   40[BANK2 ] unsigned char 
 13073 ;; Registers used:
 13074 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13075 ;; Tracked objects:
 13076 ;;		On entry : 0/0
 13077 ;;		On exit  : 0/0
 13078 ;;		Unchanged: 0/0
 13079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13080 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13081 ;;      Locals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13082 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13083 ;;      Totals:         0       0       0      13       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13084 ;;Total ram usage:       13 bytes
 13085 ;; Hardware stack levels used:    1
 13086 ;; Hardware stack levels required when called:    6
 13087 ;; This function calls:
 13088 ;;		___awtoft
 13089 ;;		___ftdiv
 13090 ;;		___ftge
 13091 ;;		___ftmul
 13092 ;;		___ftneg
 13093 ;;		___ftsub
 13094 ;;		___fttol
 13095 ;;		_eval_poly
 13096 ;;		_floor
 13097 ;;		_ldexp
 13098 ;; This function is called by:
 13099 ;;		_pow
 13100 ;; This function uses a non-reentrant model
 13101 ;;
 13102                           
 13103                           
 13104                           ;psect for function _exp
 13105  1363                     _exp:	
 13106                           
 13107                           ;incstack = 0
 13108                           ; Regs used in _exp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13109  1363  0022               	movlb	2	; select bank2
 13110  1364  084A               	movf	(exp@x+2)^(0+256),w
 13111  1365  0449               	iorwf	(exp@x+1)^(0+256),w
 13112  1366  0448               	iorwf	exp@x^(0+256),w
 13113  1367  1D03               	skipz
 13114  1368  2B70               	goto	l8364
 13115  1369  3000               	movlw	0
 13116  136A  00C8               	movwf	?_exp^(0+256)
 13117  136B  3080               	movlw	128
 13118  136C  00C9               	movwf	(?_exp+1)^(0+256)
 13119  136D  303F               	movlw	63
 13120  136E  00CA               	movwf	(?_exp+2)^(0+256)
 13121  136F  0008               	return
 13122  1370                     l8364:	
 13123  1370  3072               	movlw	114
 13124  1371  0021               	movlb	1	; select bank1
 13125  1372  00A0               	movwf	___ftge@ff1^(0+128)
 13126  1373  3031               	movlw	49
 13127  1374  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13128  1375  3044               	movlw	68
 13129  1376  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13130  1377  0022               	movlb	2	; select bank2
 13131  1378  0848               	movf	exp@x^(0+256),w
 13132  1379  0021               	movlb	1	; select bank1
 13133  137A  00A3               	movwf	___ftge@ff2^(0+128)
 13134  137B  0022               	movlb	2	; select bank2
 13135  137C  0849               	movf	(exp@x+1)^(0+256),w
 13136  137D  0021               	movlb	1	; select bank1
 13137  137E  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13138  137F  0022               	movlb	2	; select bank2
 13139  1380  084A               	movf	(exp@x+2)^(0+256),w
 13140  1381  0021               	movlb	1	; select bank1
 13141  1382  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13142  1383  31A0  20AA  3193   	fcall	___ftge
 13143  1386  1803               	btfsc	3,0
 13144  1387  2B95               	goto	l8374
 13145  1388  3022               	movlw	34
 13146  1389  0024               	movlb	4	; select bank4
 13147  138A  00D1               	movwf	_errno^(0+512)
 13148  138B  3000               	movlw	0
 13149  138C  00D2               	movwf	(_errno^(0+512)+1)
 13150  138D  30FF               	movlw	255
 13151  138E  0022               	movlb	2	; select bank2
 13152  138F  00C8               	movwf	?_exp^(0+256)
 13153  1390  307F               	movlw	127
 13154  1391  00C9               	movwf	(?_exp+1)^(0+256)
 13155  1392  307F               	movlw	127
 13156  1393  00CA               	movwf	(?_exp+2)^(0+256)
 13157  1394  0008               	return
 13158  1395                     l8374:	
 13159  1395  0022               	movlb	2	; select bank2
 13160  1396  0848               	movf	exp@x^(0+256),w
 13161  1397  0021               	movlb	1	; select bank1
 13162  1398  00A0               	movwf	___ftge@ff1^(0+128)
 13163  1399  0022               	movlb	2	; select bank2
 13164  139A  0849               	movf	(exp@x+1)^(0+256),w
 13165  139B  0021               	movlb	1	; select bank1
 13166  139C  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13167  139D  0022               	movlb	2	; select bank2
 13168  139E  084A               	movf	(exp@x+2)^(0+256),w
 13169  139F  0021               	movlb	1	; select bank1
 13170  13A0  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13171  13A1  3049               	movlw	73
 13172  13A2  00A3               	movwf	___ftge@ff2^(0+128)
 13173  13A3  303A               	movlw	58
 13174  13A4  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13175  13A5  30C4               	movlw	196
 13176  13A6  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13177  13A7  31A0  20AA  3193   	fcall	___ftge
 13178  13AA  1803               	btfsc	3,0
 13179  13AB  2BB9               	goto	l8380
 13180  13AC  3022               	movlw	34
 13181  13AD  0024               	movlb	4	; select bank4
 13182  13AE  00D1               	movwf	_errno^(0+512)
 13183  13AF  3000               	movlw	0
 13184  13B0  00D2               	movwf	(_errno^(0+512)+1)
 13185  13B1  3000               	movlw	0
 13186  13B2  0022               	movlb	2	; select bank2
 13187  13B3  00C8               	movwf	?_exp^(0+256)
 13188  13B4  3000               	movlw	0
 13189  13B5  00C9               	movwf	(?_exp+1)^(0+256)
 13190  13B6  3000               	movlw	0
 13191  13B7  00CA               	movwf	(?_exp+2)^(0+256)
 13192  13B8  0008               	return
 13193  13B9                     l8380:	
 13194  13B9  0022               	movlb	2	; select bank2
 13195  13BA  0848               	movf	exp@x^(0+256),w
 13196  13BB  0021               	movlb	1	; select bank1
 13197  13BC  00A0               	movwf	___ftge@ff1^(0+128)
 13198  13BD  0022               	movlb	2	; select bank2
 13199  13BE  0849               	movf	(exp@x+1)^(0+256),w
 13200  13BF  0021               	movlb	1	; select bank1
 13201  13C0  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13202  13C1  0022               	movlb	2	; select bank2
 13203  13C2  084A               	movf	(exp@x+2)^(0+256),w
 13204  13C3  0021               	movlb	1	; select bank1
 13205  13C4  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13206  13C5  3000               	movlw	0
 13207  13C6  00A3               	movwf	___ftge@ff2^(0+128)
 13208  13C7  3000               	movlw	0
 13209  13C8  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13210  13C9  3000               	movlw	0
 13211  13CA  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13212  13CB  31A0  20AA  3193   	fcall	___ftge
 13213  13CE  1803               	btfsc	3,0
 13214  13CF  2BD2               	goto	u8870
 13215  13D0  3001               	movlw	1
 13216  13D1  2BD3               	goto	u8880
 13217  13D2                     u8870:	
 13218  13D2  3000               	movlw	0
 13219  13D3                     u8880:	
 13220  13D3  0022               	movlb	2	; select bank2
 13221  13D4  00CB               	movwf	??_exp^(0+256)
 13222  13D5  084B               	movf	??_exp^(0+256),w
 13223  13D6  00D4               	movwf	exp@sign^(0+256)
 13224  13D7  0854               	movf	exp@sign^(0+256),w
 13225  13D8  1903               	btfsc	3,2
 13226  13D9  2BF4               	goto	l8386
 13227  13DA  0848               	movf	exp@x^(0+256),w
 13228  13DB  0021               	movlb	1	; select bank1
 13229  13DC  00BE               	movwf	___ftneg@f1^(0+128)
 13230  13DD  0022               	movlb	2	; select bank2
 13231  13DE  0849               	movf	(exp@x+1)^(0+256),w
 13232  13DF  0021               	movlb	1	; select bank1
 13233  13E0  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13234  13E1  0022               	movlb	2	; select bank2
 13235  13E2  084A               	movf	(exp@x+2)^(0+256),w
 13236  13E3  0021               	movlb	1	; select bank1
 13237  13E4  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13238  13E5  31AC  24EC  3193   	fcall	___ftneg
 13239  13E8  0021               	movlb	1	; select bank1
 13240  13E9  083E               	movf	?___ftneg^(0+128),w
 13241  13EA  0022               	movlb	2	; select bank2
 13242  13EB  00C8               	movwf	exp@x^(0+256)
 13243  13EC  0021               	movlb	1	; select bank1
 13244  13ED  083F               	movf	(?___ftneg+1)^(0+128),w
 13245  13EE  0022               	movlb	2	; select bank2
 13246  13EF  00C9               	movwf	(exp@x+1)^(0+256)
 13247  13F0  0021               	movlb	1	; select bank1
 13248  13F1  0840               	movf	(?___ftneg+2)^(0+128),w
 13249  13F2  0022               	movlb	2	; select bank2
 13250  13F3  00CA               	movwf	(exp@x+2)^(0+256)
 13251  13F4                     l8386:	
 13252  13F4  30AA               	movlw	170
 13253  13F5  0021               	movlb	1	; select bank1
 13254  13F6  00AE               	movwf	___ftmul@f1^(0+128)
 13255  13F7  30B8               	movlw	184
 13256  13F8  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 13257  13F9  303F               	movlw	63
 13258  13FA  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 13259  13FB  0022               	movlb	2	; select bank2
 13260  13FC  0848               	movf	exp@x^(0+256),w
 13261  13FD  0021               	movlb	1	; select bank1
 13262  13FE  00B1               	movwf	___ftmul@f2^(0+128)
 13263  13FF  0022               	movlb	2	; select bank2
 13264  1400  0849               	movf	(exp@x+1)^(0+256),w
 13265  1401  0021               	movlb	1	; select bank1
 13266  1402  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 13267  1403  0022               	movlb	2	; select bank2
 13268  1404  084A               	movf	(exp@x+2)^(0+256),w
 13269  1405  0021               	movlb	1	; select bank1
 13270  1406  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 13271  1407  319E  267B  3193   	fcall	___ftmul
 13272  140A  0021               	movlb	1	; select bank1
 13273  140B  082E               	movf	?___ftmul^(0+128),w
 13274  140C  0022               	movlb	2	; select bank2
 13275  140D  00C8               	movwf	exp@x^(0+256)
 13276  140E  0021               	movlb	1	; select bank1
 13277  140F  082F               	movf	(?___ftmul+1)^(0+128),w
 13278  1410  0022               	movlb	2	; select bank2
 13279  1411  00C9               	movwf	(exp@x+1)^(0+256)
 13280  1412  0021               	movlb	1	; select bank1
 13281  1413  0830               	movf	(?___ftmul+2)^(0+128),w
 13282  1414  0022               	movlb	2	; select bank2
 13283  1415  00CA               	movwf	(exp@x+2)^(0+256)
 13284  1416  0848               	movf	exp@x^(0+256),w
 13285  1417  00AE               	movwf	floor@x^(0+256)
 13286  1418  0849               	movf	(exp@x+1)^(0+256),w
 13287  1419  00AF               	movwf	(floor@x+1)^(0+256)
 13288  141A  084A               	movf	(exp@x+2)^(0+256),w
 13289  141B  00B0               	movwf	(floor@x+2)^(0+256)
 13290  141C  319D  25C8  3193   	fcall	_floor
 13291  141F  0022               	movlb	2	; select bank2
 13292  1420  082E               	movf	?_floor^(0+256),w
 13293  1421  00CC               	movwf	_exp$2860^(0+256)
 13294  1422  082F               	movf	(?_floor+1)^(0+256),w
 13295  1423  00CD               	movwf	(_exp$2860+1)^(0+256)
 13296  1424  0830               	movf	(?_floor+2)^(0+256),w
 13297  1425  00CE               	movwf	(_exp$2860+2)^(0+256)
 13298  1426  084C               	movf	_exp$2860^(0+256),w
 13299  1427  00A0               	movwf	___fttol@f1^(0+256)
 13300  1428  084D               	movf	(_exp$2860+1)^(0+256),w
 13301  1429  00A1               	movwf	(___fttol@f1+1)^(0+256)
 13302  142A  084E               	movf	(_exp$2860+2)^(0+256),w
 13303  142B  00A2               	movwf	(___fttol@f1+2)^(0+256)
 13304  142C  3199  21AF  3193   	fcall	___fttol
 13305  142F  0022               	movlb	2	; select bank2
 13306  1430  0821               	movf	(?___fttol^(0+256)+1),w
 13307  1431  00D3               	movwf	(exp@exponent+1)^(0+256)
 13308  1432  0820               	movf	?___fttol^(0+256),w
 13309  1433  00D2               	movwf	exp@exponent^(0+256)
 13310  1434  0853               	movf	(exp@exponent+1)^(0+256),w
 13311  1435  0021               	movlb	1	; select bank1
 13312  1436  00A9               	movwf	(___awtoft@c+1)^(0+128)
 13313  1437  0022               	movlb	2	; select bank2
 13314  1438  0852               	movf	exp@exponent^(0+256),w
 13315  1439  0021               	movlb	1	; select bank1
 13316  143A  00A8               	movwf	___awtoft@c^(0+128)
 13317  143B  31AE  263A  3193   	fcall	___awtoft
 13318  143E  0021               	movlb	1	; select bank1
 13319  143F  0828               	movf	?___awtoft^(0+128),w
 13320  1440  0022               	movlb	2	; select bank2
 13321  1441  00B7               	movwf	___ftsub@f2^(0+256)
 13322  1442  0021               	movlb	1	; select bank1
 13323  1443  0829               	movf	(?___awtoft+1)^(0+128),w
 13324  1444  0022               	movlb	2	; select bank2
 13325  1445  00B8               	movwf	(___ftsub@f2+1)^(0+256)
 13326  1446  0021               	movlb	1	; select bank1
 13327  1447  082A               	movf	(?___awtoft+2)^(0+128),w
 13328  1448  0022               	movlb	2	; select bank2
 13329  1449  00B9               	movwf	(___ftsub@f2+2)^(0+256)
 13330  144A  0848               	movf	exp@x^(0+256),w
 13331  144B  00BA               	movwf	___ftsub@f1^(0+256)
 13332  144C  0849               	movf	(exp@x+1)^(0+256),w
 13333  144D  00BB               	movwf	(___ftsub@f1+1)^(0+256)
 13334  144E  084A               	movf	(exp@x+2)^(0+256),w
 13335  144F  00BC               	movwf	(___ftsub@f1+2)^(0+256)
 13336  1450  31AE  26D5  3193   	fcall	___ftsub
 13337  1453  0022               	movlb	2	; select bank2
 13338  1454  0837               	movf	?___ftsub^(0+256),w
 13339  1455  00C8               	movwf	exp@x^(0+256)
 13340  1456  0838               	movf	(?___ftsub+1)^(0+256),w
 13341  1457  00C9               	movwf	(exp@x+1)^(0+256)
 13342  1458  0839               	movf	(?___ftsub+2)^(0+256),w
 13343  1459  00CA               	movwf	(exp@x+2)^(0+256)
 13344  145A  0848               	movf	exp@x^(0+256),w
 13345  145B  00B4               	movwf	eval_poly@x^(0+256)
 13346  145C  0849               	movf	(exp@x+1)^(0+256),w
 13347  145D  00B5               	movwf	(eval_poly@x+1)^(0+256)
 13348  145E  084A               	movf	(exp@x+2)^(0+256),w
 13349  145F  00B6               	movwf	(eval_poly@x+2)^(0+256)
 13350  1460  3000               	movlw	low (exp@coeff| (0+32768))
 13351  1461  00B7               	movwf	eval_poly@d^(0+256)
 13352  1462  30A8               	movlw	high (exp@coeff| (0+32768))
 13353  1463  00B8               	movwf	(eval_poly@d^(0+256)+1)
 13354  1464  3009               	movlw	9
 13355  1465  00B9               	movwf	eval_poly@n^(0+256)
 13356  1466  3000               	movlw	0
 13357  1467  00BA               	movwf	(eval_poly@n^(0+256)+1)
 13358  1468  31A6  261B  3193   	fcall	_eval_poly
 13359  146B  0022               	movlb	2	; select bank2
 13360  146C  0834               	movf	?_eval_poly^(0+256),w
 13361  146D  00BE               	movwf	ldexp@value^(0+256)
 13362  146E  0835               	movf	(?_eval_poly+1)^(0+256),w
 13363  146F  00BF               	movwf	(ldexp@value+1)^(0+256)
 13364  1470  0836               	movf	(?_eval_poly+2)^(0+256),w
 13365  1471  00C0               	movwf	(ldexp@value+2)^(0+256)
 13366  1472  0853               	movf	(exp@exponent+1)^(0+256),w
 13367  1473  00C2               	movwf	(ldexp@newexp+1)^(0+256)
 13368  1474  0852               	movf	exp@exponent^(0+256),w
 13369  1475  00C1               	movwf	ldexp@newexp^(0+256)
 13370  1476  319B  23DD  3193   	fcall	_ldexp
 13371  1479  0022               	movlb	2	; select bank2
 13372  147A  083E               	movf	?_ldexp^(0+256),w
 13373  147B  00C8               	movwf	exp@x^(0+256)
 13374  147C  083F               	movf	(?_ldexp+1)^(0+256),w
 13375  147D  00C9               	movwf	(exp@x+1)^(0+256)
 13376  147E  0840               	movf	(?_ldexp+2)^(0+256),w
 13377  147F  00CA               	movwf	(exp@x+2)^(0+256)
 13378  1480  0854               	movf	exp@sign^(0+256),w
 13379  1481  1903               	btfsc	3,2
 13380  1482  0008               	return
 13381  1483  30FF               	movlw	255
 13382  1484  00CF               	movwf	_exp$2611^(0+256)
 13383  1485  307F               	movlw	127
 13384  1486  00D0               	movwf	(_exp$2611+1)^(0+256)
 13385  1487  307F               	movlw	127
 13386  1488  00D1               	movwf	(_exp$2611+2)^(0+256)
 13387  1489  084A               	movf	(exp@x+2)^(0+256),w
 13388  148A  0651               	xorwf	(_exp$2611+2)^(0+256),w
 13389  148B  1D03               	skipz
 13390  148C  2C93               	goto	u8915
 13391  148D  0849               	movf	(exp@x+1)^(0+256),w
 13392  148E  0650               	xorwf	(_exp$2611+1)^(0+256),w
 13393  148F  1D03               	skipz
 13394  1490  2C93               	goto	u8915
 13395  1491  0848               	movf	exp@x^(0+256),w
 13396  1492  064F               	xorwf	_exp$2611^(0+256),w
 13397  1493                     u8915:	
 13398  1493  1D03               	skipz
 13399  1494  2C9C               	goto	l8408
 13400  1495  3000               	movlw	0
 13401  1496  00C8               	movwf	?_exp^(0+256)
 13402  1497  3000               	movlw	0
 13403  1498  00C9               	movwf	(?_exp+1)^(0+256)
 13404  1499  3000               	movlw	0
 13405  149A  00CA               	movwf	(?_exp+2)^(0+256)
 13406  149B  0008               	return
 13407  149C                     l8408:	
 13408  149C  0848               	movf	exp@x^(0+256),w
 13409  149D  0021               	movlb	1	; select bank1
 13410  149E  00CE               	movwf	___ftdiv@f2^(0+128)
 13411  149F  0022               	movlb	2	; select bank2
 13412  14A0  0849               	movf	(exp@x+1)^(0+256),w
 13413  14A1  0021               	movlb	1	; select bank1
 13414  14A2  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 13415  14A3  0022               	movlb	2	; select bank2
 13416  14A4  084A               	movf	(exp@x+2)^(0+256),w
 13417  14A5  0021               	movlb	1	; select bank1
 13418  14A6  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 13419  14A7  3000               	movlw	0
 13420  14A8  00D1               	movwf	___ftdiv@f1^(0+128)
 13421  14A9  3080               	movlw	128
 13422  14AA  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 13423  14AB  303F               	movlw	63
 13424  14AC  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 13425  14AD  319C  2474         	fcall	___ftdiv
 13426  14AF  0021               	movlb	1	; select bank1
 13427  14B0  084E               	movf	?___ftdiv^(0+128),w
 13428  14B1  0022               	movlb	2	; select bank2
 13429  14B2  00C8               	movwf	?_exp^(0+256)
 13430  14B3  0021               	movlb	1	; select bank1
 13431  14B4  084F               	movf	(?___ftdiv+1)^(0+128),w
 13432  14B5  0022               	movlb	2	; select bank2
 13433  14B6  00C9               	movwf	(?_exp+1)^(0+256)
 13434  14B7  0021               	movlb	1	; select bank1
 13435  14B8  0850               	movf	(?___ftdiv+2)^(0+128),w
 13436  14B9  0022               	movlb	2	; select bank2
 13437  14BA  00CA               	movwf	(?_exp+2)^(0+256)
 13438  14BB  0008               	return
 13439  14BC                     __end_of_exp:	
 13440                           
 13441                           	psect	text30
 13442  1BDD                     __ptext30:	
 13443 ;; *************** function _ldexp *****************
 13444 ;; Defined at:
 13445 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
 13446 ;; Parameters:    Size  Location     Type
 13447 ;;  value           3   30[BANK2 ] unsigned char 
 13448 ;;  newexp          2   33[BANK2 ] int 
 13449 ;; Auto vars:     Size  Location     Type
 13450 ;;		None
 13451 ;; Return value:  Size  Location     Type
 13452 ;;                  3   30[BANK2 ] int 
 13453 ;; Registers used:
 13454 ;;		wreg, status,2, status,0, pclath, cstack
 13455 ;; Tracked objects:
 13456 ;;		On entry : 0/0
 13457 ;;		On exit  : 0/0
 13458 ;;		Unchanged: 0/0
 13459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13460 ;;      Params:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13461 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13462 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13463 ;;      Totals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13464 ;;Total ram usage:       10 bytes
 13465 ;; Hardware stack levels used:    1
 13466 ;; Hardware stack levels required when called:    4
 13467 ;; This function calls:
 13468 ;;		___ftge
 13469 ;;		___ftneg
 13470 ;; This function is called by:
 13471 ;;		_exp
 13472 ;; This function uses a non-reentrant model
 13473 ;;
 13474                           
 13475                           
 13476                           ;psect for function _ldexp
 13477  1BDD                     _ldexp:	
 13478                           
 13479                           ;incstack = 0
 13480                           ; Regs used in _ldexp: [wreg+status,2+status,0+pclath+cstack]
 13481  1BDD  0022               	movlb	2	; select bank2
 13482  1BDE  0840               	movf	(ldexp@value+2)^(0+256),w
 13483  1BDF  043F               	iorwf	(ldexp@value+1)^(0+256),w
 13484  1BE0  043E               	iorwf	ldexp@value^(0+256),w
 13485  1BE1  1D03               	skipz
 13486  1BE2  2BEA               	goto	l8178
 13487  1BE3  3000               	movlw	0
 13488  1BE4  00BE               	movwf	?_ldexp^(0+256)
 13489  1BE5  3000               	movlw	0
 13490  1BE6  00BF               	movwf	(?_ldexp+1)^(0+256)
 13491  1BE7  3000               	movlw	0
 13492  1BE8  00C0               	movwf	(?_ldexp+2)^(0+256)
 13493  1BE9  0008               	return
 13494  1BEA                     l8178:	
 13495  1BEA  0840               	movf	(ldexp@value^(0+256)+2),w
 13496  1BEB  397F               	andlw	127
 13497  1BEC  00C3               	movwf	??_ldexp^(0+256)
 13498  1BED  01C4               	clrf	(??_ldexp^(0+256)+1)
 13499  1BEE  35C3               	lslf	??_ldexp^(0+256),f
 13500  1BEF  0DC4               	rlf	(??_ldexp^(0+256)+1),f
 13501  1BF0  0843               	movf	??_ldexp^(0+256),w
 13502  1BF1  07C1               	addwf	ldexp@newexp^(0+256),f
 13503  1BF2  0844               	movf	(??_ldexp+1)^(0+256),w
 13504  1BF3  3DC2               	addwfc	(ldexp@newexp+1)^(0+256),f
 13505  1BF4  0D3F               	rlf	(ldexp@value^(0+256)+1),w
 13506  1BF5  0D3F               	rlf	(ldexp@value^(0+256)+1),w
 13507  1BF6  3901               	andlw	1
 13508  1BF7  00C3               	movwf	??_ldexp^(0+256)
 13509  1BF8  01C4               	clrf	(??_ldexp^(0+256)+1)
 13510  1BF9  0843               	movf	??_ldexp^(0+256),w
 13511  1BFA  07C1               	addwf	ldexp@newexp^(0+256),f
 13512  1BFB  0844               	movf	(??_ldexp+1)^(0+256),w
 13513  1BFC  3DC2               	addwfc	(ldexp@newexp+1)^(0+256),f
 13514  1BFD  1FC2               	btfss	(ldexp@newexp+1)^(0+256),7
 13515  1BFE  2C0C               	goto	l8188
 13516  1BFF  3022               	movlw	34
 13517  1C00  0024               	movlb	4	; select bank4
 13518  1C01  00D1               	movwf	_errno^(0+512)
 13519  1C02  3000               	movlw	0
 13520  1C03  00D2               	movwf	(_errno^(0+512)+1)
 13521  1C04  3000               	movlw	0
 13522  1C05  0022               	movlb	2	; select bank2
 13523  1C06  00BE               	movwf	?_ldexp^(0+256)
 13524  1C07  3000               	movlw	0
 13525  1C08  00BF               	movwf	(?_ldexp+1)^(0+256)
 13526  1C09  3000               	movlw	0
 13527  1C0A  00C0               	movwf	(?_ldexp+2)^(0+256)
 13528  1C0B  0008               	return
 13529  1C0C                     l8188:	
 13530  1C0C  0842               	movf	(ldexp@newexp+1)^(0+256),w
 13531  1C0D  3A80               	xorlw	128
 13532  1C0E  00C3               	movwf	??_ldexp^(0+256)
 13533  1C0F  3081               	movlw	129
 13534  1C10  0243               	subwf	??_ldexp^(0+256),w
 13535  1C11  1D03               	skipz
 13536  1C12  2C15               	goto	u8685
 13537  1C13  3000               	movlw	0
 13538  1C14  0241               	subwf	ldexp@newexp^(0+256),w
 13539  1C15                     u8685:	
 13540  1C15  1C03               	skipc
 13541  1C16  2C5C               	goto	l8212
 13542  1C17  3022               	movlw	34
 13543  1C18  0024               	movlb	4	; select bank4
 13544  1C19  00D1               	movwf	_errno^(0+512)
 13545  1C1A  3000               	movlw	0
 13546  1C1B  00D2               	movwf	(_errno^(0+512)+1)
 13547  1C1C  0022               	movlb	2	; select bank2
 13548  1C1D  083E               	movf	ldexp@value^(0+256),w
 13549  1C1E  0021               	movlb	1	; select bank1
 13550  1C1F  00A0               	movwf	___ftge@ff1^(0+128)
 13551  1C20  0022               	movlb	2	; select bank2
 13552  1C21  083F               	movf	(ldexp@value+1)^(0+256),w
 13553  1C22  0021               	movlb	1	; select bank1
 13554  1C23  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13555  1C24  0022               	movlb	2	; select bank2
 13556  1C25  0840               	movf	(ldexp@value+2)^(0+256),w
 13557  1C26  0021               	movlb	1	; select bank1
 13558  1C27  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13559  1C28  3000               	movlw	0
 13560  1C29  00A3               	movwf	___ftge@ff2^(0+128)
 13561  1C2A  3000               	movlw	0
 13562  1C2B  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13563  1C2C  3000               	movlw	0
 13564  1C2D  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13565  1C2E  31A0  20AA  319B   	fcall	___ftge
 13566  1C31  1803               	btfsc	3,0
 13567  1C32  2C54               	goto	l8208
 13568  1C33  30FF               	movlw	255
 13569  1C34  0022               	movlb	2	; select bank2
 13570  1C35  00C5               	movwf	_ldexp$2648^(0+256)
 13571  1C36  307F               	movlw	127
 13572  1C37  00C6               	movwf	(_ldexp$2648+1)^(0+256)
 13573  1C38  307F               	movlw	127
 13574  1C39  00C7               	movwf	(_ldexp$2648+2)^(0+256)
 13575  1C3A  0845               	movf	_ldexp$2648^(0+256),w
 13576  1C3B  0021               	movlb	1	; select bank1
 13577  1C3C  00BE               	movwf	___ftneg@f1^(0+128)
 13578  1C3D  0022               	movlb	2	; select bank2
 13579  1C3E  0846               	movf	(_ldexp$2648+1)^(0+256),w
 13580  1C3F  0021               	movlb	1	; select bank1
 13581  1C40  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13582  1C41  0022               	movlb	2	; select bank2
 13583  1C42  0847               	movf	(_ldexp$2648+2)^(0+256),w
 13584  1C43  0021               	movlb	1	; select bank1
 13585  1C44  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13586  1C45  31AC  24EC         	fcall	___ftneg
 13587  1C47  0021               	movlb	1	; select bank1
 13588  1C48  083E               	movf	?___ftneg^(0+128),w
 13589  1C49  0022               	movlb	2	; select bank2
 13590  1C4A  00BE               	movwf	?_ldexp^(0+256)
 13591  1C4B  0021               	movlb	1	; select bank1
 13592  1C4C  083F               	movf	(?___ftneg+1)^(0+128),w
 13593  1C4D  0022               	movlb	2	; select bank2
 13594  1C4E  00BF               	movwf	(?_ldexp+1)^(0+256)
 13595  1C4F  0021               	movlb	1	; select bank1
 13596  1C50  0840               	movf	(?___ftneg+2)^(0+128),w
 13597  1C51  0022               	movlb	2	; select bank2
 13598  1C52  00C0               	movwf	(?_ldexp+2)^(0+256)
 13599  1C53  0008               	return
 13600  1C54                     l8208:	
 13601  1C54  30FF               	movlw	255
 13602  1C55  0022               	movlb	2	; select bank2
 13603  1C56  00BE               	movwf	?_ldexp^(0+256)
 13604  1C57  307F               	movlw	127
 13605  1C58  00BF               	movwf	(?_ldexp+1)^(0+256)
 13606  1C59  307F               	movlw	127
 13607  1C5A  00C0               	movwf	(?_ldexp+2)^(0+256)
 13608  1C5B  0008               	return
 13609  1C5C                     l8212:	
 13610  1C5C  0022               	movlb	2	; select bank2
 13611  1C5D  0842               	movf	(ldexp@newexp+1)^(0+256),w
 13612  1C5E  00C4               	movwf	(??_ldexp^(0+256)+1)
 13613  1C5F  0841               	movf	ldexp@newexp^(0+256),w
 13614  1C60  00C3               	movwf	??_ldexp^(0+256)
 13615  1C61  0D44               	rlf	(??_ldexp^(0+256)+1),w
 13616  1C62  0CC4               	rrf	(??_ldexp^(0+256)+1),f
 13617  1C63  0CC3               	rrf	??_ldexp^(0+256),f
 13618  1C64  0840               	movf	(ldexp@value^(0+256)+2),w
 13619  1C65  0643               	xorwf	??_ldexp^(0+256),w
 13620  1C66  3980               	andlw	-128
 13621  1C67  0643               	xorwf	??_ldexp^(0+256),w
 13622  1C68  00C0               	movwf	(ldexp@value^(0+256)+2)
 13623  1C69  0841               	movf	ldexp@newexp^(0+256),w
 13624  1C6A  3901               	andlw	1
 13625  1C6B  00C3               	movwf	??_ldexp^(0+256)
 13626  1C6C  0CC3               	rrf	??_ldexp^(0+256),f
 13627  1C6D  0CC3               	rrf	??_ldexp^(0+256),f
 13628  1C6E  083F               	movf	(ldexp@value^(0+256)+1),w
 13629  1C6F  0643               	xorwf	??_ldexp^(0+256),w
 13630  1C70  397F               	andlw	-129
 13631  1C71  0643               	xorwf	??_ldexp^(0+256),w
 13632  1C72  00BF               	movwf	(ldexp@value^(0+256)+1)
 13633  1C73  0008               	return
 13634  1C74                     __end_of_ldexp:	
 13635                           
 13636                           	psect	text31
 13637  2E7F                     __ptext31:	
 13638 ;; *************** function ___lltoft *****************
 13639 ;; Defined at:
 13640 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lltoft.c"
 13641 ;; Parameters:    Size  Location     Type
 13642 ;;  c               4    8[BANK1 ] unsigned long 
 13643 ;; Auto vars:     Size  Location     Type
 13644 ;;  exp             1   13[BANK1 ] unsigned char 
 13645 ;; Return value:  Size  Location     Type
 13646 ;;                  3    8[BANK1 ] float 
 13647 ;; Registers used:
 13648 ;;		wreg, status,2, status,0, pclath, cstack
 13649 ;; Tracked objects:
 13650 ;;		On entry : 0/0
 13651 ;;		On exit  : 0/0
 13652 ;;		Unchanged: 0/0
 13653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13654 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13655 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13656 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13657 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13658 ;;Total ram usage:        6 bytes
 13659 ;; Hardware stack levels used:    1
 13660 ;; Hardware stack levels required when called:    4
 13661 ;; This function calls:
 13662 ;;		___ftpack
 13663 ;; This function is called by:
 13664 ;;		_pow
 13665 ;; This function uses a non-reentrant model
 13666 ;;
 13667                           
 13668                           
 13669                           ;psect for function ___lltoft
 13670  2E7F                     ___lltoft:	
 13671                           
 13672                           ;incstack = 0
 13673                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
 13674  2E7F  308E               	movlw	142
 13675  2E80  0021               	movlb	1	; select bank1
 13676  2E81  00AC               	movwf	??___lltoft^(0+128)
 13677  2E82  082C               	movf	??___lltoft^(0+128),w
 13678  2E83  00AD               	movwf	___lltoft@exp^(0+128)
 13679  2E84                     l8330:	
 13680  2E84  30FF               	movlw	255
 13681  2E85  052B               	andwf	(___lltoft@c+3)^(0+128),w
 13682  2E86  1903               	btfsc	3,2
 13683  2E87  2E94               	goto	l8332
 13684  2E88  3001               	movlw	1
 13685  2E89                     u8805:	
 13686  2E89  36AB               	lsrf	(___lltoft@c+3)^(0+128),f
 13687  2E8A  0CAA               	rrf	(___lltoft@c+2)^(0+128),f
 13688  2E8B  0CA9               	rrf	(___lltoft@c+1)^(0+128),f
 13689  2E8C  0CA8               	rrf	___lltoft@c^(0+128),f
 13690  2E8D  0B89               	decfsz	9,f
 13691  2E8E  2E89               	goto	u8805
 13692  2E8F  3001               	movlw	1
 13693  2E90  00AC               	movwf	??___lltoft^(0+128)
 13694  2E91  082C               	movf	??___lltoft^(0+128),w
 13695  2E92  07AD               	addwf	___lltoft@exp^(0+128),f
 13696  2E93  2E84               	goto	l8330
 13697  2E94                     l8332:	
 13698  2E94  0828               	movf	___lltoft@c^(0+128),w
 13699  2E95  00A0               	movwf	___ftpack@arg^(0+128)
 13700  2E96  0829               	movf	(___lltoft@c+1)^(0+128),w
 13701  2E97  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 13702  2E98  082A               	movf	(___lltoft@c+2)^(0+128),w
 13703  2E99  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 13704  2E9A  082D               	movf	___lltoft@exp^(0+128),w
 13705  2E9B  00AC               	movwf	??___lltoft^(0+128)
 13706  2E9C  082C               	movf	??___lltoft^(0+128),w
 13707  2E9D  00A3               	movwf	___ftpack@exp^(0+128)
 13708  2E9E  01A4               	clrf	___ftpack@sign^(0+128)
 13709  2E9F  31A5  25B6         	fcall	___ftpack
 13710  2EA1  0021               	movlb	1	; select bank1
 13711  2EA2  0820               	movf	?___ftpack^(0+128),w
 13712  2EA3  00A8               	movwf	?___lltoft^(0+128)
 13713  2EA4  0821               	movf	(?___ftpack+1)^(0+128),w
 13714  2EA5  00A9               	movwf	(?___lltoft+1)^(0+128)
 13715  2EA6  0822               	movf	(?___ftpack+2)^(0+128),w
 13716  2EA7  00AA               	movwf	(?___lltoft+2)^(0+128)
 13717  2EA8  0008               	return
 13718  2EA9                     __end_of___lltoft:	
 13719                           
 13720                           	psect	text32
 13721  2375                     __ptext32:	
 13722 ;; *************** function _read_top_tactile *****************
 13723 ;; Defined at:
 13724 ;;		line 50 in file "tactiles.c"
 13725 ;; Parameters:    Size  Location     Type
 13726 ;;		None
 13727 ;; Auto vars:     Size  Location     Type
 13728 ;;		None
 13729 ;; Return value:  Size  Location     Type
 13730 ;;                  1    wreg      void 
 13731 ;; Registers used:
 13732 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13733 ;; Tracked objects:
 13734 ;;		On entry : 0/0
 13735 ;;		On exit  : 0/0
 13736 ;;		Unchanged: 0/0
 13737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13739 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13740 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13741 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13742 ;;Total ram usage:        1 bytes
 13743 ;; Hardware stack levels used:    1
 13744 ;; Hardware stack levels required when called:    5
 13745 ;; This function calls:
 13746 ;;		_set_leds_top
 13747 ;;		_wait_ms
 13748 ;; This function is called by:
 13749 ;;		_main
 13750 ;; This function uses a non-reentrant model
 13751 ;;
 13752                           
 13753                           
 13754                           ;psect for function _read_top_tactile
 13755  2375                     _read_top_tactile:	
 13756                           
 13757                           ;tactiles.c: 60: if (PORTDbits.RD5 == 0) {
 13758                           
 13759                           ;incstack = 0
 13760                           ; Regs used in _read_top_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13761  2375  0020               	movlb	0	; select bank0
 13762  2376  1A8F               	btfsc	15,5	;volatile
 13763  2377  2B7F               	goto	l9108
 13764                           
 13765                           ;tactiles.c: 61: if (topTactile_pressed > 0) {
 13766  2378  0023               	movlb	3	; select bank3
 13767  2379  084C               	movf	_topTactile_pressed^(0+384),w
 13768  237A  1903               	btfsc	3,2
 13769  237B  2B8A               	goto	l994
 13770                           
 13771                           ;tactiles.c: 62: topTactile_pressed--;
 13772  237C  3001               	movlw	1
 13773  237D  02CC               	subwf	_topTactile_pressed^(0+384),f
 13774                           
 13775                           ;tactiles.c: 63: }
 13776                           ;tactiles.c: 64: } else if (topTactile_pressed < 25*5) {
 13777  237E  2B8A               	goto	l994
 13778  237F                     l9108:	
 13779  237F  307D               	movlw	125
 13780  2380  0023               	movlb	3	; select bank3
 13781  2381  024C               	subwf	_topTactile_pressed^(0+384),w
 13782  2382  1803               	skipnc
 13783  2383  2B8A               	goto	l994
 13784                           
 13785                           ;tactiles.c: 65: topTactile_pressed++;
 13786  2384  3001               	movlw	1
 13787  2385  0021               	movlb	1	; select bank1
 13788  2386  00B2               	movwf	??_read_top_tactile^(0+128)
 13789  2387  0832               	movf	??_read_top_tactile^(0+128),w
 13790  2388  0023               	movlb	3	; select bank3
 13791  2389  07CC               	addwf	_topTactile_pressed^(0+384),f
 13792  238A                     l994:	
 13793                           
 13794                           ;tactiles.c: 66: }
 13795                           ;tactiles.c: 71: if (topTactile_pressed == 0) {
 13796  238A  084C               	movf	_topTactile_pressed^(0+384),w
 13797  238B  1D03               	btfss	3,2
 13798  238C  0008               	return
 13799                           
 13800                           ;tactiles.c: 73: top_push_state = top_push_state + 1;
 13801  238D  0020               	movlb	0	; select bank0
 13802  238E  084C               	movf	_top_push_state,w
 13803  238F  3E01               	addlw	1
 13804  2390  00CC               	movwf	_top_push_state
 13805  2391  3000               	movlw	0
 13806  2392  3D4D               	addwfc	_top_push_state+1,w
 13807  2393  00CD               	movwf	_top_push_state+1
 13808                           
 13809                           ;tactiles.c: 74: if (top_push_state >= 7) {
 13810  2394  084D               	movf	_top_push_state+1,w
 13811  2395  3A80               	xorlw	128
 13812  2396  0021               	movlb	1	; select bank1
 13813  2397  00B2               	movwf	??_read_top_tactile^(0+128)
 13814  2398  3080               	movlw	128
 13815  2399  0232               	subwf	??_read_top_tactile^(0+128),w
 13816  239A  1D03               	skipz
 13817  239B  2B9F               	goto	u10145
 13818  239C  3007               	movlw	7
 13819  239D  0020               	movlb	0	; select bank0
 13820  239E  024C               	subwf	_top_push_state,w
 13821  239F                     u10145:	
 13822  239F  1C03               	skipc
 13823  23A0  2BA6               	goto	l9118
 13824                           
 13825                           ;tactiles.c: 75: top_push_state = 1;
 13826  23A1  3001               	movlw	1
 13827  23A2  0020               	movlb	0	; select bank0
 13828  23A3  00CC               	movwf	_top_push_state
 13829  23A4  3000               	movlw	0
 13830  23A5  00CD               	movwf	_top_push_state+1
 13831  23A6                     l9118:	
 13832                           
 13833                           ;tactiles.c: 76: }
 13834                           ;tactiles.c: 77: set_leds_top(top_push_state, 1);
 13835  23A6  0020               	movlb	0	; select bank0
 13836  23A7  084D               	movf	_top_push_state+1,w
 13837  23A8  0021               	movlb	1	; select bank1
 13838  23A9  00A1               	movwf	(set_leds_top@x+1)^(0+128)
 13839  23AA  0020               	movlb	0	; select bank0
 13840  23AB  084C               	movf	_top_push_state,w
 13841  23AC  0021               	movlb	1	; select bank1
 13842  23AD  00A0               	movwf	set_leds_top@x^(0+128)
 13843  23AE  3001               	movlw	1
 13844  23AF  00A2               	movwf	set_leds_top@ledState^(0+128)
 13845  23B0  3000               	movlw	0
 13846  23B1  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
 13847  23B2  31A5  2509  31A3   	fcall	_set_leds_top
 13848                           
 13849                           ;tactiles.c: 78: mod_time_changed = 1;
 13850  23B5  0023               	movlb	3	; select bank3
 13851  23B6  01E4               	clrf	_mod_time_changed^(0+384)
 13852  23B7  0AE4               	incf	_mod_time_changed^(0+384),f
 13853  23B8                     l998:	
 13854                           ;tactiles.c: 81: while (PORTDbits.RD5 == 0) {
 13855                           
 13856  23B8  0020               	movlb	0	; select bank0
 13857  23B9  1E8F               	btfss	15,5	;volatile
 13858  23BA  2BB8               	goto	l998
 13859                           
 13860                           ;tactiles.c: 82: }
 13861                           ;tactiles.c: 83: wait_ms(20);
 13862  23BB  3014               	movlw	20
 13863  23BC  0021               	movlb	1	; select bank1
 13864  23BD  00AC               	movwf	wait_ms@timeSec^(0+128)
 13865  23BE  3000               	movlw	0
 13866  23BF  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 13867  23C0  3190  2003         	fcall	_wait_ms
 13868  23C2  0008               	return
 13869  23C3                     __end_of_read_top_tactile:	
 13870                           
 13871                           	psect	text33
 13872  232B                     __ptext33:	
 13873 ;; *************** function _read_bottom_tactile *****************
 13874 ;; Defined at:
 13875 ;;		line 18 in file "tactiles.c"
 13876 ;; Parameters:    Size  Location     Type
 13877 ;;		None
 13878 ;; Auto vars:     Size  Location     Type
 13879 ;;		None
 13880 ;; Return value:  Size  Location     Type
 13881 ;;                  1    wreg      void 
 13882 ;; Registers used:
 13883 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13884 ;; Tracked objects:
 13885 ;;		On entry : 0/0
 13886 ;;		On exit  : 0/0
 13887 ;;		Unchanged: 0/0
 13888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13891 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13892 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13893 ;;Total ram usage:        1 bytes
 13894 ;; Hardware stack levels used:    1
 13895 ;; Hardware stack levels required when called:    5
 13896 ;; This function calls:
 13897 ;;		_set_leds_bottom
 13898 ;;		_wait_ms
 13899 ;; This function is called by:
 13900 ;;		_main
 13901 ;; This function uses a non-reentrant model
 13902 ;;
 13903                           
 13904                           
 13905                           ;psect for function _read_bottom_tactile
 13906  232B                     _read_bottom_tactile:	
 13907                           
 13908                           ;tactiles.c: 27: if (PORTDbits.RD6 == 0) {
 13909                           
 13910                           ;incstack = 0
 13911                           ; Regs used in _read_bottom_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13912  232B  0020               	movlb	0	; select bank0
 13913  232C  1B0F               	btfsc	15,6	;volatile
 13914  232D  2B35               	goto	l9086
 13915                           
 13916                           ;tactiles.c: 28: if (bottomTactile_pressed > 0) {
 13917  232E  0023               	movlb	3	; select bank3
 13918  232F  083F               	movf	_bottomTactile_pressed^(0+384),w
 13919  2330  1903               	btfsc	3,2
 13920  2331  2B40               	goto	l982
 13921                           
 13922                           ;tactiles.c: 29: bottomTactile_pressed--;
 13923  2332  3001               	movlw	1
 13924  2333  02BF               	subwf	_bottomTactile_pressed^(0+384),f
 13925                           
 13926                           ;tactiles.c: 30: }
 13927                           ;tactiles.c: 31: } else if (bottomTactile_pressed < 25*5) {
 13928  2334  2B40               	goto	l982
 13929  2335                     l9086:	
 13930  2335  307D               	movlw	125
 13931  2336  0023               	movlb	3	; select bank3
 13932  2337  023F               	subwf	_bottomTactile_pressed^(0+384),w
 13933  2338  1803               	skipnc
 13934  2339  2B40               	goto	l982
 13935                           
 13936                           ;tactiles.c: 32: bottomTactile_pressed++;
 13937  233A  3001               	movlw	1
 13938  233B  0021               	movlb	1	; select bank1
 13939  233C  00B2               	movwf	??_read_bottom_tactile^(0+128)
 13940  233D  0832               	movf	??_read_bottom_tactile^(0+128),w
 13941  233E  0023               	movlb	3	; select bank3
 13942  233F  07BF               	addwf	_bottomTactile_pressed^(0+384),f
 13943  2340                     l982:	
 13944                           
 13945                           ;tactiles.c: 33: }
 13946                           ;tactiles.c: 36: if (bottomTactile_pressed == 0) {
 13947  2340  083F               	movf	_bottomTactile_pressed^(0+384),w
 13948  2341  1D03               	btfss	3,2
 13949  2342  0008               	return
 13950                           
 13951                           ;tactiles.c: 37: bottom_push_state = bottom_push_state + 1;
 13952  2343  0020               	movlb	0	; select bank0
 13953  2344  0848               	movf	_bottom_push_state,w
 13954  2345  3E01               	addlw	1
 13955  2346  00C8               	movwf	_bottom_push_state
 13956  2347  3000               	movlw	0
 13957  2348  3D49               	addwfc	_bottom_push_state+1,w
 13958  2349  00C9               	movwf	_bottom_push_state+1
 13959                           
 13960                           ;tactiles.c: 38: if (bottom_push_state > 5) {
 13961  234A  0849               	movf	_bottom_push_state+1,w
 13962  234B  3A80               	xorlw	128
 13963  234C  0021               	movlb	1	; select bank1
 13964  234D  00B2               	movwf	??_read_bottom_tactile^(0+128)
 13965  234E  3080               	movlw	128
 13966  234F  0232               	subwf	??_read_bottom_tactile^(0+128),w
 13967  2350  1D03               	skipz
 13968  2351  2B55               	goto	u10085
 13969  2352  3006               	movlw	6
 13970  2353  0020               	movlb	0	; select bank0
 13971  2354  0248               	subwf	_bottom_push_state,w
 13972  2355                     u10085:	
 13973  2355  1C03               	skipc
 13974  2356  2B5C               	goto	l9096
 13975                           
 13976                           ;tactiles.c: 39: bottom_push_state = 1;
 13977  2357  3001               	movlw	1
 13978  2358  0020               	movlb	0	; select bank0
 13979  2359  00C8               	movwf	_bottom_push_state
 13980  235A  3000               	movlw	0
 13981  235B  00C9               	movwf	_bottom_push_state+1
 13982  235C                     l9096:	
 13983                           
 13984                           ;tactiles.c: 40: }
 13985                           ;tactiles.c: 41: modulation_changed = 1;
 13986  235C  0023               	movlb	3	; select bank3
 13987  235D  01C7               	clrf	_modulation_changed^(0+384)
 13988  235E  0AC7               	incf	_modulation_changed^(0+384),f
 13989                           
 13990                           ;tactiles.c: 42: set_leds_bottom(bottom_push_state);
 13991  235F  0020               	movlb	0	; select bank0
 13992  2360  0849               	movf	_bottom_push_state+1,w
 13993  2361  0021               	movlb	1	; select bank1
 13994  2362  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
 13995  2363  0020               	movlb	0	; select bank0
 13996  2364  0848               	movf	_bottom_push_state,w
 13997  2365  0021               	movlb	1	; select bank1
 13998  2366  00A0               	movwf	set_leds_bottom@x^(0+128)
 13999  2367  31A0  206F  31A3   	fcall	_set_leds_bottom
 14000  236A                     l986:	
 14001                           ;tactiles.c: 44: while (PORTDbits.RD6 == 0) {
 14002                           
 14003  236A  0020               	movlb	0	; select bank0
 14004  236B  1F0F               	btfss	15,6	;volatile
 14005  236C  2B6A               	goto	l986
 14006                           
 14007                           ;tactiles.c: 45: }
 14008                           ;tactiles.c: 46: wait_ms(20);
 14009  236D  3014               	movlw	20
 14010  236E  0021               	movlb	1	; select bank1
 14011  236F  00AC               	movwf	wait_ms@timeSec^(0+128)
 14012  2370  3000               	movlw	0
 14013  2371  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 14014  2372  3190  2003         	fcall	_wait_ms
 14015  2374  0008               	return
 14016  2375                     __end_of_read_bottom_tactile:	
 14017                           
 14018                           	psect	text34
 14019  1A36                     __ptext34:	
 14020 ;; *************** function _map *****************
 14021 ;; Defined at:
 14022 ;;		line 177 in file "user.c"
 14023 ;; Parameters:    Size  Location     Type
 14024 ;;  x               3   62[BANK1 ] float 
 14025 ;;  in_min          3   65[BANK1 ] float 
 14026 ;;  in_max          3   68[BANK1 ] float 
 14027 ;;  out_min         3   71[BANK1 ] float 
 14028 ;;  out_max         3   74[BANK1 ] float 
 14029 ;; Auto vars:     Size  Location     Type
 14030 ;;		None
 14031 ;; Return value:  Size  Location     Type
 14032 ;;                  3   62[BANK1 ] float 
 14033 ;; Registers used:
 14034 ;;		wreg, status,2, status,0, pclath, cstack
 14035 ;; Tracked objects:
 14036 ;;		On entry : 0/0
 14037 ;;		On exit  : 0/0
 14038 ;;		Unchanged: 0/0
 14039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14040 ;;      Params:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14041 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14043 ;;      Totals:         0       0      18       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14044 ;;Total ram usage:       18 bytes
 14045 ;; Hardware stack levels used:    1
 14046 ;; Hardware stack levels required when called:    5
 14047 ;; This function calls:
 14048 ;;		___ftadd
 14049 ;;		___ftdiv
 14050 ;;		___ftmul
 14051 ;;		___ftneg
 14052 ;; This function is called by:
 14053 ;;		_main
 14054 ;; This function uses a non-reentrant model
 14055 ;;
 14056                           
 14057                           
 14058                           ;psect for function _map
 14059  1A36                     _map:	
 14060                           
 14061                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 14062                           
 14063                           ;incstack = 0
 14064                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
 14065  1A36  0021               	movlb	1	; select bank1
 14066  1A37  0864               	movf	map@in_max^(0+128),w
 14067  1A38  00C1               	movwf	___ftadd@f1^(0+128)
 14068  1A39  0865               	movf	(map@in_max+1)^(0+128),w
 14069  1A3A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 14070  1A3B  0866               	movf	(map@in_max+2)^(0+128),w
 14071  1A3C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 14072  1A3D  0861               	movf	map@in_min^(0+128),w
 14073  1A3E  00BE               	movwf	___ftneg@f1^(0+128)
 14074  1A3F  0862               	movf	(map@in_min+1)^(0+128),w
 14075  1A40  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 14076  1A41  0863               	movf	(map@in_min+2)^(0+128),w
 14077  1A42  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 14078  1A43  31AC  24EC  319A   	fcall	___ftneg
 14079  1A46  0021               	movlb	1	; select bank1
 14080  1A47  083E               	movf	?___ftneg^(0+128),w
 14081  1A48  00C4               	movwf	___ftadd@f2^(0+128)
 14082  1A49  083F               	movf	(?___ftneg+1)^(0+128),w
 14083  1A4A  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 14084  1A4B  0840               	movf	(?___ftneg+2)^(0+128),w
 14085  1A4C  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 14086  1A4D  3190  2035  319A   	fcall	___ftadd
 14087  1A50  0021               	movlb	1	; select bank1
 14088  1A51  0841               	movf	?___ftadd^(0+128),w
 14089  1A52  00CE               	movwf	___ftdiv@f2^(0+128)
 14090  1A53  0842               	movf	(?___ftadd+1)^(0+128),w
 14091  1A54  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 14092  1A55  0843               	movf	(?___ftadd+2)^(0+128),w
 14093  1A56  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 14094  1A57  086A               	movf	map@out_max^(0+128),w
 14095  1A58  00C1               	movwf	___ftadd@f1^(0+128)
 14096  1A59  086B               	movf	(map@out_max+1)^(0+128),w
 14097  1A5A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 14098  1A5B  086C               	movf	(map@out_max+2)^(0+128),w
 14099  1A5C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 14100  1A5D  0867               	movf	map@out_min^(0+128),w
 14101  1A5E  00BE               	movwf	___ftneg@f1^(0+128)
 14102  1A5F  0868               	movf	(map@out_min+1)^(0+128),w
 14103  1A60  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 14104  1A61  0869               	movf	(map@out_min+2)^(0+128),w
 14105  1A62  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 14106  1A63  31AC  24EC  319A   	fcall	___ftneg
 14107  1A66  0021               	movlb	1	; select bank1
 14108  1A67  083E               	movf	?___ftneg^(0+128),w
 14109  1A68  00C4               	movwf	___ftadd@f2^(0+128)
 14110  1A69  083F               	movf	(?___ftneg+1)^(0+128),w
 14111  1A6A  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 14112  1A6B  0840               	movf	(?___ftneg+2)^(0+128),w
 14113  1A6C  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 14114  1A6D  3190  2035  319A   	fcall	___ftadd
 14115  1A70  0021               	movlb	1	; select bank1
 14116  1A71  0841               	movf	?___ftadd^(0+128),w
 14117  1A72  00AE               	movwf	___ftmul@f1^(0+128)
 14118  1A73  0842               	movf	(?___ftadd+1)^(0+128),w
 14119  1A74  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 14120  1A75  0843               	movf	(?___ftadd+2)^(0+128),w
 14121  1A76  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 14122  1A77  085E               	movf	map@x^(0+128),w
 14123  1A78  00C1               	movwf	___ftadd@f1^(0+128)
 14124  1A79  085F               	movf	(map@x+1)^(0+128),w
 14125  1A7A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 14126  1A7B  0860               	movf	(map@x+2)^(0+128),w
 14127  1A7C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 14128  1A7D  0861               	movf	map@in_min^(0+128),w
 14129  1A7E  00BE               	movwf	___ftneg@f1^(0+128)
 14130  1A7F  0862               	movf	(map@in_min+1)^(0+128),w
 14131  1A80  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 14132  1A81  0863               	movf	(map@in_min+2)^(0+128),w
 14133  1A82  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 14134  1A83  31AC  24EC  319A   	fcall	___ftneg
 14135  1A86  0021               	movlb	1	; select bank1
 14136  1A87  083E               	movf	?___ftneg^(0+128),w
 14137  1A88  00C4               	movwf	___ftadd@f2^(0+128)
 14138  1A89  083F               	movf	(?___ftneg+1)^(0+128),w
 14139  1A8A  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 14140  1A8B  0840               	movf	(?___ftneg+2)^(0+128),w
 14141  1A8C  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 14142  1A8D  3190  2035  319A   	fcall	___ftadd
 14143  1A90  0021               	movlb	1	; select bank1
 14144  1A91  0841               	movf	?___ftadd^(0+128),w
 14145  1A92  00B1               	movwf	___ftmul@f2^(0+128)
 14146  1A93  0842               	movf	(?___ftadd+1)^(0+128),w
 14147  1A94  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 14148  1A95  0843               	movf	(?___ftadd+2)^(0+128),w
 14149  1A96  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 14150  1A97  319E  267B  319A   	fcall	___ftmul
 14151  1A9A  0021               	movlb	1	; select bank1
 14152  1A9B  082E               	movf	?___ftmul^(0+128),w
 14153  1A9C  00D1               	movwf	___ftdiv@f1^(0+128)
 14154  1A9D  082F               	movf	(?___ftmul+1)^(0+128),w
 14155  1A9E  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 14156  1A9F  0830               	movf	(?___ftmul+2)^(0+128),w
 14157  1AA0  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 14158  1AA1  319C  2474  319A   	fcall	___ftdiv
 14159  1AA4  0021               	movlb	1	; select bank1
 14160  1AA5  084E               	movf	?___ftdiv^(0+128),w
 14161  1AA6  00ED               	movwf	_map$2842^(0+128)
 14162  1AA7  084F               	movf	(?___ftdiv+1)^(0+128),w
 14163  1AA8  00EE               	movwf	(_map$2842+1)^(0+128)
 14164  1AA9  0850               	movf	(?___ftdiv+2)^(0+128),w
 14165  1AAA  00EF               	movwf	(_map$2842+2)^(0+128)
 14166                           
 14167                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 14168  1AAB  0867               	movf	map@out_min^(0+128),w
 14169  1AAC  00C1               	movwf	___ftadd@f1^(0+128)
 14170  1AAD  0868               	movf	(map@out_min+1)^(0+128),w
 14171  1AAE  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 14172  1AAF  0869               	movf	(map@out_min+2)^(0+128),w
 14173  1AB0  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 14174  1AB1  086D               	movf	_map$2842^(0+128),w
 14175  1AB2  00C4               	movwf	___ftadd@f2^(0+128)
 14176  1AB3  086E               	movf	(_map$2842+1)^(0+128),w
 14177  1AB4  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 14178  1AB5  086F               	movf	(_map$2842+2)^(0+128),w
 14179  1AB6  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 14180  1AB7  3190  2035         	fcall	___ftadd
 14181  1AB9  0021               	movlb	1	; select bank1
 14182  1ABA  0841               	movf	?___ftadd^(0+128),w
 14183  1ABB  00DE               	movwf	?_map^(0+128)
 14184  1ABC  0842               	movf	(?___ftadd+1)^(0+128),w
 14185  1ABD  00DF               	movwf	(?_map+1)^(0+128)
 14186  1ABE  0843               	movf	(?___ftadd+2)^(0+128),w
 14187  1ABF  00E0               	movwf	(?_map+2)^(0+128)
 14188  1AC0  0008               	return
 14189  1AC1                     __end_of_map:	
 14190                           
 14191                           	psect	text35
 14192  2D17                     __ptext35:	
 14193 ;; *************** function _initSwitchBypass *****************
 14194 ;; Defined at:
 14195 ;;		line 29 in file "SwitchBypass.c"
 14196 ;; Parameters:    Size  Location     Type
 14197 ;;		None
 14198 ;; Auto vars:     Size  Location     Type
 14199 ;;  initState       2   26[BANK1 ] int 
 14200 ;; Return value:  Size  Location     Type
 14201 ;;                  1    wreg      void 
 14202 ;; Registers used:
 14203 ;;		wreg, status,2, status,0, pclath, cstack
 14204 ;; Tracked objects:
 14205 ;;		On entry : 0/0
 14206 ;;		On exit  : 0/0
 14207 ;;		Unchanged: 0/0
 14208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14210 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14212 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14213 ;;Total ram usage:        2 bytes
 14214 ;; Hardware stack levels used:    1
 14215 ;; Hardware stack levels required when called:    7
 14216 ;; This function calls:
 14217 ;;		_getSwitchBypassState
 14218 ;;		_setSwitchBypassState
 14219 ;; This function is called by:
 14220 ;;		_main
 14221 ;; This function uses a non-reentrant model
 14222 ;;
 14223                           
 14224                           
 14225                           ;psect for function _initSwitchBypass
 14226  2D17                     _initSwitchBypass:	
 14227                           
 14228                           ;SwitchBypass.c: 30: int initState = getSwitchBypassState();
 14229                           
 14230                           ;incstack = 0
 14231                           ; Regs used in _initSwitchBypass: [wreg+status,2+status,0+pclath+cstack]
 14232  2D17  31AC  24DF  31AD   	fcall	_getSwitchBypassState
 14233  2D1A  0021               	movlb	1	; select bank1
 14234  2D1B  0821               	movf	(?_getSwitchBypassState+1)^(0+128),w
 14235  2D1C  00BB               	movwf	(initSwitchBypass@initState+1)^(0+128)
 14236  2D1D  0820               	movf	?_getSwitchBypassState^(0+128),w
 14237  2D1E  00BA               	movwf	initSwitchBypass@initState^(0+128)
 14238                           
 14239                           ;SwitchBypass.c: 31: setSwitchBypassState(initState);
 14240  2D1F  083B               	movf	(initSwitchBypass@initState+1)^(0+128),w
 14241  2D20  00B7               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
 14242  2D21  083A               	movf	initSwitchBypass@initState^(0+128),w
 14243  2D22  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
 14244  2D23  31AD  25E1         	fcall	_setSwitchBypassState
 14245  2D25  0008               	return
 14246  2D26                     __end_of_initSwitchBypass:	
 14247                           
 14248                           	psect	text36
 14249  2DE1                     __ptext36:	
 14250 ;; *************** function _setSwitchBypassState *****************
 14251 ;; Defined at:
 14252 ;;		line 141 in file "SwitchBypass.c"
 14253 ;; Parameters:    Size  Location     Type
 14254 ;;  f_state         2   22[BANK1 ] int 
 14255 ;; Auto vars:     Size  Location     Type
 14256 ;;		None
 14257 ;; Return value:  Size  Location     Type
 14258 ;;                  1    wreg      void 
 14259 ;; Registers used:
 14260 ;;		wreg, status,2, status,0, pclath, cstack
 14261 ;; Tracked objects:
 14262 ;;		On entry : 0/0
 14263 ;;		On exit  : 0/0
 14264 ;;		Unchanged: 0/0
 14265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14266 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14267 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14268 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14269 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14270 ;;Total ram usage:        4 bytes
 14271 ;; Hardware stack levels used:    1
 14272 ;; Hardware stack levels required when called:    6
 14273 ;; This function calls:
 14274 ;;		_setSwitchBypassRelays
 14275 ;; This function is called by:
 14276 ;;		_initSwitchBypass
 14277 ;;		_updateSwitchBypass
 14278 ;; This function uses a non-reentrant model
 14279 ;;
 14280                           
 14281                           
 14282                           ;psect for function _setSwitchBypassState
 14283  2DE1                     _setSwitchBypassState:	
 14284                           
 14285                           ;SwitchBypass.c: 142: if (switchBypass_state == f_state) {return;}
 14286                           
 14287                           ;incstack = 0
 14288                           ; Regs used in _setSwitchBypassState: [wreg+status,2+status,0+pclath+cstack]
 14289  2DE1  0020               	movlb	0	; select bank0
 14290  2DE2  0851               	movf	_switchBypass_state,w
 14291  2DE3  0021               	movlb	1	; select bank1
 14292  2DE4  00B8               	movwf	??_setSwitchBypassState^(0+128)
 14293  2DE5  01B9               	clrf	(??_setSwitchBypassState^(0+128)+1)
 14294  2DE6  0837               	movf	(setSwitchBypassState@f_state+1)^(0+128),w
 14295  2DE7  0639               	xorwf	(??_setSwitchBypassState+1)^(0+128),w
 14296  2DE8  1D03               	skipz
 14297  2DE9  2DEC               	goto	u9005
 14298  2DEA  0836               	movf	setSwitchBypassState@f_state^(0+128),w
 14299  2DEB  0638               	xorwf	??_setSwitchBypassState^(0+128),w
 14300  2DEC                     u9005:	
 14301  2DEC  1903               	btfsc	3,2
 14302  2DED  0008               	return
 14303                           
 14304                           ;SwitchBypass.c: 144: LATBbits.LATB2 = f_state;
 14305  2DEE  0C36               	rrf	setSwitchBypassState@f_state^(0+128),w
 14306  2DEF  0022               	movlb	2	; select bank2
 14307  2DF0  1C03               	skipc
 14308  2DF1  110D               	bcf	13,2	;volatile
 14309  2DF2  1803               	skipnc
 14310  2DF3  150D               	bsf	13,2	;volatile
 14311                           
 14312                           ;SwitchBypass.c: 145: LATBbits.LATB3 = 0;
 14313  2DF4  118D               	bcf	13,3	;volatile
 14314                           
 14315                           ;SwitchBypass.c: 146: setSwitchBypassRelays(f_state);
 14316  2DF5  0021               	movlb	1	; select bank1
 14317  2DF6  0837               	movf	(setSwitchBypassState@f_state+1)^(0+128),w
 14318  2DF7  00B3               	movwf	(setSwitchBypassRelays@f_state+1)^(0+128)
 14319  2DF8  0836               	movf	setSwitchBypassState@f_state^(0+128),w
 14320  2DF9  00B2               	movwf	setSwitchBypassRelays@f_state^(0+128)
 14321  2DFA  31AF  2792         	fcall	_setSwitchBypassRelays
 14322  2DFC  0008               	return
 14323  2DFD                     __end_of_setSwitchBypassState:	
 14324                           
 14325                           	psect	text37
 14326  2F92                     __ptext37:	
 14327 ;; *************** function _setSwitchBypassRelays *****************
 14328 ;; Defined at:
 14329 ;;		line 149 in file "SwitchBypass.c"
 14330 ;; Parameters:    Size  Location     Type
 14331 ;;  f_state         2   18[BANK1 ] int 
 14332 ;; Auto vars:     Size  Location     Type
 14333 ;;		None
 14334 ;; Return value:  Size  Location     Type
 14335 ;;                  1    wreg      void 
 14336 ;; Registers used:
 14337 ;;		wreg, status,2, status,0, pclath, cstack
 14338 ;; Tracked objects:
 14339 ;;		On entry : 0/0
 14340 ;;		On exit  : 0/0
 14341 ;;		Unchanged: 0/0
 14342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14343 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14344 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14345 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14346 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14347 ;;Total ram usage:        4 bytes
 14348 ;; Hardware stack levels used:    1
 14349 ;; Hardware stack levels required when called:    5
 14350 ;; This function calls:
 14351 ;;		_updateSwitchBypassState
 14352 ;;		_wait_ms
 14353 ;; This function is called by:
 14354 ;;		_updateSwitchBypass
 14355 ;;		_setSwitchBypassState
 14356 ;; This function uses a non-reentrant model
 14357 ;;
 14358                           
 14359                           
 14360                           ;psect for function _setSwitchBypassRelays
 14361  2F92                     _setSwitchBypassRelays:	
 14362                           
 14363                           ;SwitchBypass.c: 150: switchBypass_state = f_state;
 14364                           
 14365                           ;incstack = 0
 14366                           ; Regs used in _setSwitchBypassRelays: [wreg+status,2+status,0+pclath+cstack]
 14367  2F92  0021               	movlb	1	; select bank1
 14368  2F93  0832               	movf	setSwitchBypassRelays@f_state^(0+128),w
 14369  2F94  00B4               	movwf	??_setSwitchBypassRelays^(0+128)
 14370  2F95  0834               	movf	??_setSwitchBypassRelays^(0+128),w
 14371  2F96  0020               	movlb	0	; select bank0
 14372  2F97  00D1               	movwf	_switchBypass_state
 14373                           
 14374                           ;SwitchBypass.c: 151: LATGbits.LATG2 = f_state;
 14375  2F98  0021               	movlb	1	; select bank1
 14376  2F99  0C32               	rrf	setSwitchBypassRelays@f_state^(0+128),w
 14377  2F9A  0027               	movlb	7	; select bank7
 14378  2F9B  1C03               	skipc
 14379  2F9C  110D               	bcf	13,2	;volatile
 14380  2F9D  1803               	skipnc
 14381  2F9E  150D               	bsf	13,2	;volatile
 14382                           
 14383                           ;SwitchBypass.c: 152: LATGbits.LATG1 = !f_state;
 14384  2F9F  0021               	movlb	1	; select bank1
 14385  2FA0  0832               	movf	setSwitchBypassRelays@f_state^(0+128),w
 14386  2FA1  0433               	iorwf	(setSwitchBypassRelays@f_state+1)^(0+128),w
 14387  2FA2  1D03               	btfss	3,2
 14388  2FA3  2FA7               	goto	u8700
 14389  2FA4  0027               	movlb	7	; select bank7
 14390  2FA5  148D               	bsf	13,1	;volatile
 14391  2FA6  2FA9               	goto	l8256
 14392  2FA7                     u8700:	
 14393  2FA7  0027               	movlb	7	; select bank7
 14394  2FA8  108D               	bcf	13,1	;volatile
 14395  2FA9                     l8256:	
 14396                           
 14397                           ;SwitchBypass.c: 154: wait_ms(20);
 14398  2FA9  3014               	movlw	20
 14399  2FAA  0021               	movlb	1	; select bank1
 14400  2FAB  00AC               	movwf	wait_ms@timeSec^(0+128)
 14401  2FAC  3000               	movlw	0
 14402  2FAD  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 14403  2FAE  3190  2003  31AF   	fcall	_wait_ms
 14404                           
 14405                           ;SwitchBypass.c: 156: LATGbits.LATG2 = 0;
 14406  2FB1  0027               	movlb	7	; select bank7
 14407  2FB2  110D               	bcf	13,2	;volatile
 14408                           
 14409                           ;SwitchBypass.c: 157: LATGbits.LATG1 = 0;
 14410  2FB3  108D               	bcf	13,1	;volatile
 14411                           
 14412                           ;SwitchBypass.c: 159: updateSwitchBypassState(switchBypass_state);
 14413  2FB4  0020               	movlb	0	; select bank0
 14414  2FB5  0851               	movf	_switchBypass_state,w
 14415  2FB6  0021               	movlb	1	; select bank1
 14416  2FB7  00B4               	movwf	??_setSwitchBypassRelays^(0+128)
 14417  2FB8  01B5               	clrf	(??_setSwitchBypassRelays^(0+128)+1)
 14418  2FB9  0834               	movf	??_setSwitchBypassRelays^(0+128),w
 14419  2FBA  00A0               	movwf	updateSwitchBypassState@state^(0+128)
 14420  2FBB  0835               	movf	(??_setSwitchBypassRelays+1)^(0+128),w
 14421  2FBC  00A1               	movwf	(updateSwitchBypassState@state+1)^(0+128)
 14422  2FBD  3180  2003  31AF   	fcall	_updateSwitchBypassState
 14423                           
 14424                           ;SwitchBypass.c: 160: wait_ms(20);
 14425  2FC0  3014               	movlw	20
 14426  2FC1  0021               	movlb	1	; select bank1
 14427  2FC2  00AC               	movwf	wait_ms@timeSec^(0+128)
 14428  2FC3  3000               	movlw	0
 14429  2FC4  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 14430  2FC5  3190  2003         	fcall	_wait_ms
 14431  2FC7  0008               	return
 14432  2FC8                     __end_of_setSwitchBypassRelays:	
 14433                           
 14434                           	psect	text38
 14435  1003                     __ptext38:	
 14436 ;; *************** function _wait_ms *****************
 14437 ;; Defined at:
 14438 ;;		line 23 in file "system.c"
 14439 ;; Parameters:    Size  Location     Type
 14440 ;;  timeSec         2   12[BANK1 ] unsigned int 
 14441 ;; Auto vars:     Size  Location     Type
 14442 ;;  timemsl         4   14[BANK1 ] long 
 14443 ;; Return value:  Size  Location     Type
 14444 ;;                  1    wreg      void 
 14445 ;; Registers used:
 14446 ;;		wreg, status,2, status,0, pclath, cstack
 14447 ;; Tracked objects:
 14448 ;;		On entry : 0/0
 14449 ;;		On exit  : 0/0
 14450 ;;		Unchanged: 0/0
 14451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14452 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14453 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14455 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14456 ;;Total ram usage:        6 bytes
 14457 ;; Hardware stack levels used:    1
 14458 ;; Hardware stack levels required when called:    4
 14459 ;; This function calls:
 14460 ;;		___lmul
 14461 ;; This function is called by:
 14462 ;;		_ring_tactiles
 14463 ;;		_solidring_tactiles
 14464 ;;		_read_bottom_tactile
 14465 ;;		_read_top_tactile
 14466 ;;		_setSwitchBypassRelays
 14467 ;;		_setDoublePressState
 14468 ;;		_showError_Alternating
 14469 ;;		_show_error
 14470 ;;		_show_cancel
 14471 ;;		_star_tactiles
 14472 ;;		_initExpModeState
 14473 ;; This function uses a non-reentrant model
 14474 ;;
 14475                           
 14476                           
 14477                           ;psect for function _wait_ms
 14478  1003                     _wait_ms:	
 14479                           
 14480                           ;system.c: 25: long timemsl = 0;
 14481                           
 14482                           ;incstack = 0
 14483                           ; Regs used in _wait_ms: [wreg+status,2+status,0+pclath+cstack]
 14484  1003  3000               	movlw	0
 14485  1004  0021               	movlb	1	; select bank1
 14486  1005  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 14487  1006  3000               	movlw	0
 14488  1007  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 14489  1008  3000               	movlw	0
 14490  1009  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 14491  100A  3000               	movlw	0
 14492  100B  00AE               	movwf	wait_ms@timemsl^(0+128)
 14493                           
 14494                           ;system.c: 26: timemsl = timeSec * 1000l;
 14495  100C  082C               	movf	wait_ms@timeSec^(0+128),w
 14496  100D  00A0               	movwf	___lmul@multiplier^(0+128)
 14497  100E  082D               	movf	(wait_ms@timeSec+1)^(0+128),w
 14498  100F  00A1               	movwf	(___lmul@multiplier^(0+128)+1)
 14499  1010  01A2               	clrf	(___lmul@multiplier^(0+128)+2)
 14500  1011  01A3               	clrf	(___lmul@multiplier^(0+128)+3)
 14501  1012  3000               	movlw	0
 14502  1013  00A7               	movwf	(___lmul@multiplicand+3)^(0+128)
 14503  1014  3000               	movlw	0
 14504  1015  00A6               	movwf	(___lmul@multiplicand+2)^(0+128)
 14505  1016  3003               	movlw	3
 14506  1017  00A5               	movwf	(___lmul@multiplicand+1)^(0+128)
 14507  1018  30E8               	movlw	232
 14508  1019  00A4               	movwf	___lmul@multiplicand^(0+128)
 14509  101A  31A0  2005  3190   	fcall	___lmul
 14510  101D  0021               	movlb	1	; select bank1
 14511  101E  0823               	movf	(?___lmul+3)^(0+128),w
 14512  101F  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 14513  1020  0822               	movf	(?___lmul+2)^(0+128),w
 14514  1021  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 14515  1022  0821               	movf	(?___lmul+1)^(0+128),w
 14516  1023  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 14517  1024  0820               	movf	?___lmul^(0+128),w
 14518  1025  00AE               	movwf	wait_ms@timemsl^(0+128)
 14519  1026                     l398:	
 14520                           ;system.c: 27: for( ; timemsl; timemsl--);
 14521                           
 14522  1026  0831               	movf	(wait_ms@timemsl+3)^(0+128),w
 14523  1027  0430               	iorwf	(wait_ms@timemsl+2)^(0+128),w
 14524  1028  042F               	iorwf	(wait_ms@timemsl+1)^(0+128),w
 14525  1029  042E               	iorwf	wait_ms@timemsl^(0+128),w
 14526  102A  1903               	btfsc	3,2
 14527  102B  0008               	return
 14528  102C  30FF               	movlw	255
 14529  102D  07AE               	addwf	wait_ms@timemsl^(0+128),f
 14530  102E  30FF               	movlw	255
 14531  102F  3DAF               	addwfc	(wait_ms@timemsl+1)^(0+128),f
 14532  1030  30FF               	movlw	255
 14533  1031  3DB0               	addwfc	(wait_ms@timemsl+2)^(0+128),f
 14534  1032  30FF               	movlw	255
 14535  1033  3DB1               	addwfc	(wait_ms@timemsl+3)^(0+128),f
 14536  1034  2826               	goto	l398
 14537  1035                     __end_of_wait_ms:	
 14538                           
 14539                           	psect	text39
 14540  2005                     __ptext39:	
 14541 ;; *************** function ___lmul *****************
 14542 ;; Defined at:
 14543 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 14544 ;; Parameters:    Size  Location     Type
 14545 ;;  multiplier      4    0[BANK1 ] unsigned long 
 14546 ;;  multiplicand    4    4[BANK1 ] unsigned long 
 14547 ;; Auto vars:     Size  Location     Type
 14548 ;;  product         4    8[BANK1 ] unsigned long 
 14549 ;; Return value:  Size  Location     Type
 14550 ;;                  4    0[BANK1 ] unsigned long 
 14551 ;; Registers used:
 14552 ;;		wreg, status,2, status,0
 14553 ;; Tracked objects:
 14554 ;;		On entry : 0/0
 14555 ;;		On exit  : 0/0
 14556 ;;		Unchanged: 0/0
 14557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14558 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14559 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14561 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14562 ;;Total ram usage:       12 bytes
 14563 ;; Hardware stack levels used:    1
 14564 ;; Hardware stack levels required when called:    3
 14565 ;; This function calls:
 14566 ;;		Nothing
 14567 ;; This function is called by:
 14568 ;;		_wait_ms
 14569 ;; This function uses a non-reentrant model
 14570 ;;
 14571                           
 14572                           
 14573                           ;psect for function ___lmul
 14574  2005                     ___lmul:	
 14575                           
 14576                           ;incstack = 0
 14577                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 14578  2005  3000               	movlw	0
 14579  2006  0021               	movlb	1	; select bank1
 14580  2007  00AB               	movwf	(___lmul@product+3)^(0+128)
 14581  2008  3000               	movlw	0
 14582  2009  00AA               	movwf	(___lmul@product+2)^(0+128)
 14583  200A  3000               	movlw	0
 14584  200B  00A9               	movwf	(___lmul@product+1)^(0+128)
 14585  200C  3000               	movlw	0
 14586  200D  00A8               	movwf	___lmul@product^(0+128)
 14587  200E                     l7702:	
 14588  200E  1C20               	btfss	___lmul@multiplier^(0+128),0
 14589  200F  2818               	goto	l7706
 14590  2010  0824               	movf	___lmul@multiplicand^(0+128),w
 14591  2011  07A8               	addwf	___lmul@product^(0+128),f
 14592  2012  0825               	movf	(___lmul@multiplicand+1)^(0+128),w
 14593  2013  3DA9               	addwfc	(___lmul@product+1)^(0+128),f
 14594  2014  0826               	movf	(___lmul@multiplicand+2)^(0+128),w
 14595  2015  3DAA               	addwfc	(___lmul@product+2)^(0+128),f
 14596  2016  0827               	movf	(___lmul@multiplicand+3)^(0+128),w
 14597  2017  3DAB               	addwfc	(___lmul@product+3)^(0+128),f
 14598  2018                     l7706:	
 14599  2018  3001               	movlw	1
 14600  2019                     u7735:	
 14601  2019  35A4               	lslf	___lmul@multiplicand^(0+128),f
 14602  201A  0DA5               	rlf	(___lmul@multiplicand+1)^(0+128),f
 14603  201B  0DA6               	rlf	(___lmul@multiplicand+2)^(0+128),f
 14604  201C  0DA7               	rlf	(___lmul@multiplicand+3)^(0+128),f
 14605  201D  0B89               	decfsz	9,f
 14606  201E  2819               	goto	u7735
 14607  201F  3001               	movlw	1
 14608  2020                     u7745:	
 14609  2020  36A3               	lsrf	(___lmul@multiplier+3)^(0+128),f
 14610  2021  0CA2               	rrf	(___lmul@multiplier+2)^(0+128),f
 14611  2022  0CA1               	rrf	(___lmul@multiplier+1)^(0+128),f
 14612  2023  0CA0               	rrf	___lmul@multiplier^(0+128),f
 14613  2024  0B89               	decfsz	9,f
 14614  2025  2820               	goto	u7745
 14615  2026  0823               	movf	(___lmul@multiplier+3)^(0+128),w
 14616  2027  0422               	iorwf	(___lmul@multiplier+2)^(0+128),w
 14617  2028  0421               	iorwf	(___lmul@multiplier+1)^(0+128),w
 14618  2029  0420               	iorwf	___lmul@multiplier^(0+128),w
 14619  202A  1D03               	skipz
 14620  202B  280E               	goto	l7702
 14621  202C  082B               	movf	(___lmul@product+3)^(0+128),w
 14622  202D  00A3               	movwf	(?___lmul+3)^(0+128)
 14623  202E  082A               	movf	(___lmul@product+2)^(0+128),w
 14624  202F  00A2               	movwf	(?___lmul+2)^(0+128)
 14625  2030  0829               	movf	(___lmul@product+1)^(0+128),w
 14626  2031  00A1               	movwf	(?___lmul+1)^(0+128)
 14627  2032  0828               	movf	___lmul@product^(0+128),w
 14628  2033  00A0               	movwf	?___lmul^(0+128)
 14629  2034  0008               	return
 14630  2035                     __end_of___lmul:	
 14631                           
 14632                           	psect	text40
 14633  0003                     __ptext40:	
 14634 ;; *************** function _updateSwitchBypassState *****************
 14635 ;; Defined at:
 14636 ;;		line 96 in file "state_manager.c"
 14637 ;; Parameters:    Size  Location     Type
 14638 ;;  state           2    0[BANK1 ] int 
 14639 ;; Auto vars:     Size  Location     Type
 14640 ;;		None
 14641 ;; Return value:  Size  Location     Type
 14642 ;;                  1    wreg      void 
 14643 ;; Registers used:
 14644 ;;		None
 14645 ;; Tracked objects:
 14646 ;;		On entry : 0/0
 14647 ;;		On exit  : 0/0
 14648 ;;		Unchanged: 0/0
 14649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14650 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14653 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14654 ;;Total ram usage:        2 bytes
 14655 ;; Hardware stack levels used:    1
 14656 ;; Hardware stack levels required when called:    3
 14657 ;; This function calls:
 14658 ;;		Nothing
 14659 ;; This function is called by:
 14660 ;;		_setSwitchBypassRelays
 14661 ;; This function uses a non-reentrant model
 14662 ;;
 14663                           
 14664                           
 14665                           ;psect for function _updateSwitchBypassState
 14666  0003                     _updateSwitchBypassState:	
 14667                           
 14668                           ;incstack = 0
 14669                           ; Regs used in _updateSwitchBypassState: []
 14670  0003  0008               	return
 14671  0004                     __end_of_updateSwitchBypassState:	
 14672                           
 14673                           	psect	text41
 14674  2CDF                     __ptext41:	
 14675 ;; *************** function _getSwitchBypassState *****************
 14676 ;; Defined at:
 14677 ;;		line 103 in file "state_manager.c"
 14678 ;; Parameters:    Size  Location     Type
 14679 ;;		None
 14680 ;; Auto vars:     Size  Location     Type
 14681 ;;		None
 14682 ;; Return value:  Size  Location     Type
 14683 ;;                  2    0[BANK1 ] int 
 14684 ;; Registers used:
 14685 ;;		status,2
 14686 ;; Tracked objects:
 14687 ;;		On entry : 0/0
 14688 ;;		On exit  : 0/0
 14689 ;;		Unchanged: 0/0
 14690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14691 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14692 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14694 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14695 ;;Total ram usage:        2 bytes
 14696 ;; Hardware stack levels used:    1
 14697 ;; Hardware stack levels required when called:    3
 14698 ;; This function calls:
 14699 ;;		Nothing
 14700 ;; This function is called by:
 14701 ;;		_initSwitchBypass
 14702 ;; This function uses a non-reentrant model
 14703 ;;
 14704                           
 14705                           
 14706                           ;psect for function _getSwitchBypassState
 14707  2CDF                     _getSwitchBypassState:	
 14708                           
 14709                           ;state_manager.c: 108: return 0;
 14710                           
 14711                           ;incstack = 0
 14712                           ; Regs used in _getSwitchBypassState: [status,2]
 14713  2CDF  0021               	movlb	1	; select bank1
 14714  2CE0  01A0               	clrf	?_getSwitchBypassState^(0+128)
 14715  2CE1  01A1               	clrf	(?_getSwitchBypassState+1)^(0+128)
 14716  2CE2  0008               	return
 14717  2CE3                     __end_of_getSwitchBypassState:	
 14718                           
 14719                           	psect	text42
 14720  24B6                     __ptext42:	
 14721 ;; *************** function _getModulationDelayTime *****************
 14722 ;; Defined at:
 14723 ;;		line 35 in file "modulation.c"
 14724 ;; Parameters:    Size  Location     Type
 14725 ;;		None
 14726 ;; Auto vars:     Size  Location     Type
 14727 ;;  subDiv          2   14[BANK2 ] int 
 14728 ;; Return value:  Size  Location     Type
 14729 ;;                  1    wreg      void 
 14730 ;; Registers used:
 14731 ;;		wreg, status,2, status,0, pclath, cstack
 14732 ;; Tracked objects:
 14733 ;;		On entry : 0/0
 14734 ;;		On exit  : 0/0
 14735 ;;		Unchanged: 0/0
 14736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14738 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14740 ;;      Totals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14741 ;;Total ram usage:        2 bytes
 14742 ;; Hardware stack levels used:    1
 14743 ;; Hardware stack levels required when called:    5
 14744 ;; This function calls:
 14745 ;;		___altoft
 14746 ;;		___awtoft
 14747 ;;		___ftdiv
 14748 ;;		___fttol
 14749 ;;		_getModulationSubdivision
 14750 ;; This function is called by:
 14751 ;;		_main
 14752 ;; This function uses a non-reentrant model
 14753 ;;
 14754                           
 14755                           
 14756                           ;psect for function _getModulationDelayTime
 14757  24B6                     _getModulationDelayTime:	
 14758                           
 14759                           ;modulation.c: 36: adjust_mod_delay = 0;
 14760                           
 14761                           ;incstack = 0
 14762                           ; Regs used in _getModulationDelayTime: [wreg+status,2+status,0+pclath+cstack]
 14763  24B6  0023               	movlb	3	; select bank3
 14764  24B7  01BE               	clrf	_adjust_mod_delay^(0+384)
 14765                           
 14766                           ;modulation.c: 37: int subDiv = getModulationSubdivision();
 14767  24B8  31AF  2762  31A4   	fcall	_getModulationSubdivision
 14768  24BB  0021               	movlb	1	; select bank1
 14769  24BC  0821               	movf	(?_getModulationSubdivision+1)^(0+128),w
 14770  24BD  0022               	movlb	2	; select bank2
 14771  24BE  00AF               	movwf	(getModulationDelayTime@subDiv+1)^(0+256)
 14772  24BF  0021               	movlb	1	; select bank1
 14773  24C0  0820               	movf	?_getModulationSubdivision^(0+128),w
 14774  24C1  0022               	movlb	2	; select bank2
 14775  24C2  00AE               	movwf	getModulationDelayTime@subDiv^(0+256)
 14776                           
 14777                           ;modulation.c: 38: mod_delay_time = (int)((float)delay_time/(float)subDiv);
 14778  24C3  0020               	movlb	0	; select bank0
 14779  24C4  0847               	movf	_delay_time+3,w	;volatile
 14780  24C5  0021               	movlb	1	; select bank1
 14781  24C6  00AB               	movwf	(___altoft@c+3)^(0+128)
 14782  24C7  0020               	movlb	0	; select bank0
 14783  24C8  0846               	movf	_delay_time+2,w	;volatile
 14784  24C9  0021               	movlb	1	; select bank1
 14785  24CA  00AA               	movwf	(___altoft@c+2)^(0+128)
 14786  24CB  0020               	movlb	0	; select bank0
 14787  24CC  0845               	movf	_delay_time+1,w	;volatile
 14788  24CD  0021               	movlb	1	; select bank1
 14789  24CE  00A9               	movwf	(___altoft@c+1)^(0+128)
 14790  24CF  0020               	movlb	0	; select bank0
 14791  24D0  0844               	movf	_delay_time,w	;volatile
 14792  24D1  0021               	movlb	1	; select bank1
 14793  24D2  00A8               	movwf	___altoft@c^(0+128)
 14794  24D3  31A0  20E6  31A4   	fcall	___altoft
 14795  24D6  0021               	movlb	1	; select bank1
 14796  24D7  0828               	movf	?___altoft^(0+128),w
 14797  24D8  00D1               	movwf	___ftdiv@f1^(0+128)
 14798  24D9  0829               	movf	(?___altoft+1)^(0+128),w
 14799  24DA  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 14800  24DB  082A               	movf	(?___altoft+2)^(0+128),w
 14801  24DC  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 14802  24DD  0022               	movlb	2	; select bank2
 14803  24DE  082F               	movf	(getModulationDelayTime@subDiv+1)^(0+256),w
 14804  24DF  0021               	movlb	1	; select bank1
 14805  24E0  00A9               	movwf	(___awtoft@c+1)^(0+128)
 14806  24E1  0022               	movlb	2	; select bank2
 14807  24E2  082E               	movf	getModulationDelayTime@subDiv^(0+256),w
 14808  24E3  0021               	movlb	1	; select bank1
 14809  24E4  00A8               	movwf	___awtoft@c^(0+128)
 14810  24E5  31AE  263A  31A4   	fcall	___awtoft
 14811  24E8  0021               	movlb	1	; select bank1
 14812  24E9  0828               	movf	?___awtoft^(0+128),w
 14813  24EA  00CE               	movwf	___ftdiv@f2^(0+128)
 14814  24EB  0829               	movf	(?___awtoft+1)^(0+128),w
 14815  24EC  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 14816  24ED  082A               	movf	(?___awtoft+2)^(0+128),w
 14817  24EE  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 14818  24EF  319C  2474  31A4   	fcall	___ftdiv
 14819  24F2  0021               	movlb	1	; select bank1
 14820  24F3  084E               	movf	?___ftdiv^(0+128),w
 14821  24F4  0022               	movlb	2	; select bank2
 14822  24F5  00A0               	movwf	___fttol@f1^(0+256)
 14823  24F6  0021               	movlb	1	; select bank1
 14824  24F7  084F               	movf	(?___ftdiv+1)^(0+128),w
 14825  24F8  0022               	movlb	2	; select bank2
 14826  24F9  00A1               	movwf	(___fttol@f1+1)^(0+256)
 14827  24FA  0021               	movlb	1	; select bank1
 14828  24FB  0850               	movf	(?___ftdiv+2)^(0+128),w
 14829  24FC  0022               	movlb	2	; select bank2
 14830  24FD  00A2               	movwf	(___fttol@f1+2)^(0+256)
 14831  24FE  3199  21AF         	fcall	___fttol
 14832  2500  0022               	movlb	2	; select bank2
 14833  2501  0821               	movf	(?___fttol^(0+256)+1),w
 14834  2502  0023               	movlb	3	; select bank3
 14835  2503  00DA               	movwf	(_mod_delay_time+1)^(0+384)
 14836  2504  0022               	movlb	2	; select bank2
 14837  2505  0820               	movf	?___fttol^(0+256),w
 14838  2506  0023               	movlb	3	; select bank3
 14839  2507  00D9               	movwf	_mod_delay_time^(0+384)
 14840  2508  0008               	return
 14841  2509                     __end_of_getModulationDelayTime:	
 14842                           
 14843                           	psect	text43
 14844  2F62                     __ptext43:	
 14845 ;; *************** function _getModulationSubdivision *****************
 14846 ;; Defined at:
 14847 ;;		line 26 in file "modulation.c"
 14848 ;; Parameters:    Size  Location     Type
 14849 ;;		None
 14850 ;; Auto vars:     Size  Location     Type
 14851 ;;		None
 14852 ;; Return value:  Size  Location     Type
 14853 ;;                  2    0[BANK1 ] int 
 14854 ;; Registers used:
 14855 ;;		wreg, status,2, status,0
 14856 ;; Tracked objects:
 14857 ;;		On entry : 0/0
 14858 ;;		On exit  : 0/0
 14859 ;;		Unchanged: 0/0
 14860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14861 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14864 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14865 ;;Total ram usage:        2 bytes
 14866 ;; Hardware stack levels used:    1
 14867 ;; Hardware stack levels required when called:    3
 14868 ;; This function calls:
 14869 ;;		Nothing
 14870 ;; This function is called by:
 14871 ;;		_getModulationDelayTime
 14872 ;;		_updateModulationArray
 14873 ;; This function uses a non-reentrant model
 14874 ;;
 14875                           
 14876                           
 14877                           ;psect for function _getModulationSubdivision
 14878  2F62                     _getModulationSubdivision:	
 14879                           
 14880                           ;modulation.c: 27: if (delay_time >= 2400) {
 14881                           
 14882                           ;incstack = 0
 14883                           ; Regs used in _getModulationSubdivision: [wreg+status,2+status,0]
 14884  2F62  0020               	movlb	0	; select bank0
 14885  2F63  1BC7               	btfsc	_delay_time+3,7	;volatile
 14886  2F64  2F77               	goto	l8420
 14887  2F65  0847               	movf	_delay_time+3,w	;volatile
 14888  2F66  1D03               	btfss	3,2
 14889  2F67  2F71               	goto	l8414
 14890  2F68  0846               	movf	_delay_time+2,w	;volatile
 14891  2F69  1D03               	btfss	3,2
 14892  2F6A  2F71               	goto	l8414
 14893  2F6B  3060               	movlw	96
 14894  2F6C  0244               	subwf	_delay_time,w	;volatile
 14895  2F6D  3009               	movlw	9
 14896  2F6E  3B45               	subwfb	_delay_time+1,w	;volatile
 14897  2F6F  1C03               	btfss	3,0
 14898  2F70  2F77               	goto	l8420
 14899  2F71                     l8414:	
 14900                           
 14901                           ;modulation.c: 28: return 120;
 14902  2F71  3078               	movlw	120
 14903  2F72  0021               	movlb	1	; select bank1
 14904  2F73  00A0               	movwf	?_getModulationSubdivision^(0+128)
 14905  2F74  3000               	movlw	0
 14906  2F75  00A1               	movwf	(?_getModulationSubdivision^(0+128)+1)
 14907                           
 14908                           ;modulation.c: 29: } else if (delay_time >= 600) {
 14909  2F76  0008               	return
 14910  2F77                     l8420:	
 14911  2F77  0020               	movlb	0	; select bank0
 14912  2F78  1BC7               	btfsc	_delay_time+3,7	;volatile
 14913  2F79  2F8C               	goto	l8428
 14914  2F7A  0847               	movf	_delay_time+3,w	;volatile
 14915  2F7B  1D03               	btfss	3,2
 14916  2F7C  2F86               	goto	l8422
 14917  2F7D  0846               	movf	_delay_time+2,w	;volatile
 14918  2F7E  1D03               	btfss	3,2
 14919  2F7F  2F86               	goto	l8422
 14920  2F80  3058               	movlw	88
 14921  2F81  0244               	subwf	_delay_time,w	;volatile
 14922  2F82  3002               	movlw	2
 14923  2F83  3B45               	subwfb	_delay_time+1,w	;volatile
 14924  2F84  1C03               	btfss	3,0
 14925  2F85  2F8C               	goto	l8428
 14926  2F86                     l8422:	
 14927                           
 14928                           ;modulation.c: 30: return 60;
 14929  2F86  303C               	movlw	60
 14930  2F87  0021               	movlb	1	; select bank1
 14931  2F88  00A0               	movwf	?_getModulationSubdivision^(0+128)
 14932  2F89  3000               	movlw	0
 14933  2F8A  00A1               	movwf	(?_getModulationSubdivision^(0+128)+1)
 14934                           
 14935                           ;modulation.c: 31: } else {
 14936  2F8B  0008               	return
 14937  2F8C                     l8428:	
 14938                           
 14939                           ;modulation.c: 32: return 30;
 14940  2F8C  301E               	movlw	30
 14941  2F8D  0021               	movlb	1	; select bank1
 14942  2F8E  00A0               	movwf	?_getModulationSubdivision^(0+128)
 14943  2F8F  3000               	movlw	0
 14944  2F90  00A1               	movwf	(?_getModulationSubdivision^(0+128)+1)
 14945  2F91  0008               	return
 14946  2F92                     __end_of_getModulationSubdivision:	
 14947                           
 14948                           	psect	text44
 14949  277F                     __ptext44:	
 14950 ;; *************** function _calcCosArray *****************
 14951 ;; Defined at:
 14952 ;;		line 18 in file "modulation.c"
 14953 ;; Parameters:    Size  Location     Type
 14954 ;;		None
 14955 ;; Auto vars:     Size  Location     Type
 14956 ;;  tmpVal          3   54[BANK2 ] int 
 14957 ;;  iAngle          1   57[BANK2 ] unsigned char 
 14958 ;; Return value:  Size  Location     Type
 14959 ;;                  1    wreg      void 
 14960 ;; Registers used:
 14961 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14962 ;; Tracked objects:
 14963 ;;		On entry : 0/0
 14964 ;;		On exit  : 0/0
 14965 ;;		Unchanged: 0/0
 14966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14968 ;;      Locals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14969 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14970 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14971 ;;Total ram usage:        8 bytes
 14972 ;; Hardware stack levels used:    1
 14973 ;; Hardware stack levels required when called:    8
 14974 ;; This function calls:
 14975 ;;		___awtoft
 14976 ;;		___ftdiv
 14977 ;;		___ftmul
 14978 ;;		___wmul
 14979 ;;		_cos
 14980 ;; This function is called by:
 14981 ;;		_main
 14982 ;; This function uses a non-reentrant model
 14983 ;;
 14984                           
 14985                           
 14986                           ;psect for function _calcCosArray
 14987  277F                     _calcCosArray:	
 14988                           
 14989                           ;modulation.c: 19: for (char iAngle = 0; iAngle < 120; iAngle++) {
 14990                           
 14991                           ;incstack = 0
 14992                           ; Regs used in _calcCosArray: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14993  277F  0022               	movlb	2	; select bank2
 14994  2780  01D9               	clrf	calcCosArray@iAngle^(0+256)
 14995  2781                     L17:	
 14996  2781  3078               	movlw	120
 14997  2782  0259               	subwf	calcCosArray@iAngle^(0+256),w
 14998  2783  1803               	btfsc	3,0
 14999  2784  0008               	return
 15000                           
 15001                           ;modulation.c: 20: double tmpVal = 3 * iAngle * 3.14159265358979323846/180.0;
 15002  2785  3000               	movlw	0
 15003  2786  0021               	movlb	1	; select bank1
 15004  2787  00CE               	movwf	___ftdiv@f2^(0+128)
 15005  2788  3034               	movlw	52
 15006  2789  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 15007  278A  3043               	movlw	67
 15008  278B  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 15009  278C  3010               	movlw	16
 15010  278D  00AE               	movwf	___ftmul@f1^(0+128)
 15011  278E  3049               	movlw	73
 15012  278F  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15013  2790  3040               	movlw	64
 15014  2791  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15015  2792  0022               	movlb	2	; select bank2
 15016  2793  0859               	movf	calcCosArray@iAngle^(0+256),w
 15017  2794  00D2               	movwf	??_calcCosArray^(0+256)
 15018  2795  01D3               	clrf	(??_calcCosArray^(0+256)+1)
 15019  2796  0852               	movf	??_calcCosArray^(0+256),w
 15020  2797  00AE               	movwf	___wmul@multiplier^(0+256)
 15021  2798  0853               	movf	(??_calcCosArray+1)^(0+256),w
 15022  2799  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 15023  279A  3003               	movlw	3
 15024  279B  00B0               	movwf	___wmul@multiplicand^(0+256)
 15025  279C  3000               	movlw	0
 15026  279D  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 15027  279E  31AD  25C5  31A7   	fcall	___wmul
 15028  27A1  0022               	movlb	2	; select bank2
 15029  27A2  082F               	movf	(?___wmul+1)^(0+256),w
 15030  27A3  0021               	movlb	1	; select bank1
 15031  27A4  00A9               	movwf	(___awtoft@c+1)^(0+128)
 15032  27A5  0022               	movlb	2	; select bank2
 15033  27A6  082E               	movf	?___wmul^(0+256),w
 15034  27A7  0021               	movlb	1	; select bank1
 15035  27A8  00A8               	movwf	___awtoft@c^(0+128)
 15036  27A9  31AE  263A  31A7   	fcall	___awtoft
 15037  27AC  0021               	movlb	1	; select bank1
 15038  27AD  0828               	movf	?___awtoft^(0+128),w
 15039  27AE  00B1               	movwf	___ftmul@f2^(0+128)
 15040  27AF  0829               	movf	(?___awtoft+1)^(0+128),w
 15041  27B0  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15042  27B1  082A               	movf	(?___awtoft+2)^(0+128),w
 15043  27B2  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15044  27B3  319E  267B  31A7   	fcall	___ftmul
 15045  27B6  0021               	movlb	1	; select bank1
 15046  27B7  082E               	movf	?___ftmul^(0+128),w
 15047  27B8  00D1               	movwf	___ftdiv@f1^(0+128)
 15048  27B9  082F               	movf	(?___ftmul+1)^(0+128),w
 15049  27BA  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 15050  27BB  0830               	movf	(?___ftmul+2)^(0+128),w
 15051  27BC  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 15052  27BD  319C  2474  31A7   	fcall	___ftdiv
 15053  27C0  0021               	movlb	1	; select bank1
 15054  27C1  084E               	movf	?___ftdiv^(0+128),w
 15055  27C2  0022               	movlb	2	; select bank2
 15056  27C3  00D6               	movwf	calcCosArray@tmpVal^(0+256)
 15057  27C4  0021               	movlb	1	; select bank1
 15058  27C5  084F               	movf	(?___ftdiv+1)^(0+128),w
 15059  27C6  0022               	movlb	2	; select bank2
 15060  27C7  00D7               	movwf	(calcCosArray@tmpVal+1)^(0+256)
 15061  27C8  0021               	movlb	1	; select bank1
 15062  27C9  0850               	movf	(?___ftdiv+2)^(0+128),w
 15063  27CA  0022               	movlb	2	; select bank2
 15064  27CB  00D8               	movwf	(calcCosArray@tmpVal+2)^(0+256)
 15065                           
 15066                           ;modulation.c: 21: tmpVal = cos(tmpVal);
 15067  27CC  0856               	movf	calcCosArray@tmpVal^(0+256),w
 15068  27CD  00CC               	movwf	cos@f^(0+256)
 15069  27CE  0857               	movf	(calcCosArray@tmpVal+1)^(0+256),w
 15070  27CF  00CD               	movwf	(cos@f+1)^(0+256)
 15071  27D0  0858               	movf	(calcCosArray@tmpVal+2)^(0+256),w
 15072  27D1  00CE               	movwf	(cos@f+2)^(0+256)
 15073  27D2  31A7  2703  31A7   	fcall	_cos
 15074  27D5  0022               	movlb	2	; select bank2
 15075  27D6  084C               	movf	?_cos^(0+256),w
 15076  27D7  00D6               	movwf	calcCosArray@tmpVal^(0+256)
 15077  27D8  084D               	movf	(?_cos+1)^(0+256),w
 15078  27D9  00D7               	movwf	(calcCosArray@tmpVal+1)^(0+256)
 15079  27DA  084E               	movf	(?_cos+2)^(0+256),w
 15080  27DB  00D8               	movwf	(calcCosArray@tmpVal+2)^(0+256)
 15081                           
 15082                           ;modulation.c: 22: cosArray[iAngle] = tmpVal;
 15083  27DC  0859               	movf	calcCosArray@iAngle^(0+256),w
 15084  27DD  00D2               	movwf	??_calcCosArray^(0+256)
 15085  27DE  01D3               	clrf	(??_calcCosArray^(0+256)+1)
 15086  27DF  0852               	movf	??_calcCosArray^(0+256),w
 15087  27E0  00AE               	movwf	___wmul@multiplier^(0+256)
 15088  27E1  0853               	movf	(??_calcCosArray+1)^(0+256),w
 15089  27E2  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 15090  27E3  3003               	movlw	3
 15091  27E4  00B0               	movwf	___wmul@multiplicand^(0+256)
 15092  27E5  3000               	movlw	0
 15093  27E6  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 15094  27E7  31AD  25C5  31A7   	fcall	___wmul
 15095  27EA  3082               	movlw	130
 15096  27EB  0022               	movlb	2	; select bank2
 15097  27EC  00D4               	movwf	(??_calcCosArray+2)^(0+256)
 15098  27ED  3024               	movlw	36
 15099  27EE  00D5               	movwf	((??_calcCosArray+2)^(0+256)+1)
 15100  27EF  082E               	movf	?___wmul^(0+256),w
 15101  27F0  0754               	addwf	(??_calcCosArray+2)^(0+256),w
 15102  27F1  0086               	movwf	6
 15103  27F2  082F               	movf	(?___wmul+1)^(0+256),w
 15104  27F3  3D55               	addwfc	(??_calcCosArray+3)^(0+256),w
 15105  27F4  0087               	movwf	7
 15106  27F5  0856               	movf	calcCosArray@tmpVal^(0+256),w
 15107  27F6  3FC0               	movwi [0]fsr1
 15108  27F7  0857               	movf	(calcCosArray@tmpVal+1)^(0+256),w
 15109  27F8  3FC1               	movwi [1]fsr1
 15110  27F9  0858               	movf	(calcCosArray@tmpVal+2)^(0+256),w
 15111  27FA  3FC2               	movwi [2]fsr1
 15112  27FB  3001               	movlw	1
 15113  27FC  00D2               	movwf	??_calcCosArray^(0+256)
 15114  27FD  0852               	movf	??_calcCosArray^(0+256),w
 15115  27FE  07D9               	addwf	calcCosArray@iAngle^(0+256),f
 15116  27FF  2F81               	goto	L17
 15117  2800                     __end_of_calcCosArray:	
 15118                           
 15119                           	psect	text45
 15120  2703                     __ptext45:	
 15121 ;; *************** function _cos *****************
 15122 ;; Defined at:
 15123 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\cos.c"
 15124 ;; Parameters:    Size  Location     Type
 15125 ;;  f               3   44[BANK2 ] void 
 15126 ;; Auto vars:     Size  Location     Type
 15127 ;;		None
 15128 ;; Return value:  Size  Location     Type
 15129 ;;                  3   44[BANK2 ] void 
 15130 ;; Registers used:
 15131 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15132 ;; Tracked objects:
 15133 ;;		On entry : 0/0
 15134 ;;		On exit  : 0/0
 15135 ;;		Unchanged: 0/0
 15136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15137 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15138 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15140 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15141 ;;Total ram usage:        6 bytes
 15142 ;; Hardware stack levels used:    1
 15143 ;; Hardware stack levels required when called:    7
 15144 ;; This function calls:
 15145 ;;		___ftadd
 15146 ;;		___ftge
 15147 ;;		_sin
 15148 ;; This function is called by:
 15149 ;;		_calcCosArray
 15150 ;; This function uses a non-reentrant model
 15151 ;;
 15152                           
 15153                           
 15154                           ;psect for function _cos
 15155  2703                     _cos:	
 15156                           
 15157                           ;incstack = 0
 15158                           ; Regs used in _cos: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15159  2703  3010               	movlw	16
 15160  2704  0021               	movlb	1	; select bank1
 15161  2705  00A0               	movwf	___ftge@ff1^(0+128)
 15162  2706  3049               	movlw	73
 15163  2707  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15164  2708  3040               	movlw	64
 15165  2709  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15166  270A  0022               	movlb	2	; select bank2
 15167  270B  084C               	movf	cos@f^(0+256),w
 15168  270C  0021               	movlb	1	; select bank1
 15169  270D  00A3               	movwf	___ftge@ff2^(0+128)
 15170  270E  0022               	movlb	2	; select bank2
 15171  270F  084D               	movf	(cos@f+1)^(0+256),w
 15172  2710  0021               	movlb	1	; select bank1
 15173  2711  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15174  2712  0022               	movlb	2	; select bank2
 15175  2713  084E               	movf	(cos@f+2)^(0+256),w
 15176  2714  0021               	movlb	1	; select bank1
 15177  2715  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15178  2716  31A0  20AA  31A7   	fcall	___ftge
 15179  2719  1803               	btfsc	3,0
 15180  271A  2F4D               	goto	l8590
 15181  271B  30CC               	movlw	204
 15182  271C  0021               	movlb	1	; select bank1
 15183  271D  00C1               	movwf	___ftadd@f1^(0+128)
 15184  271E  3096               	movlw	150
 15185  271F  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 15186  2720  30C0               	movlw	192
 15187  2721  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 15188  2722  0022               	movlb	2	; select bank2
 15189  2723  084C               	movf	cos@f^(0+256),w
 15190  2724  0021               	movlb	1	; select bank1
 15191  2725  00C4               	movwf	___ftadd@f2^(0+128)
 15192  2726  0022               	movlb	2	; select bank2
 15193  2727  084D               	movf	(cos@f+1)^(0+256),w
 15194  2728  0021               	movlb	1	; select bank1
 15195  2729  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 15196  272A  0022               	movlb	2	; select bank2
 15197  272B  084E               	movf	(cos@f+2)^(0+256),w
 15198  272C  0021               	movlb	1	; select bank1
 15199  272D  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 15200  272E  3190  2035  31A7   	fcall	___ftadd
 15201  2731  0021               	movlb	1	; select bank1
 15202  2732  0841               	movf	?___ftadd^(0+128),w
 15203  2733  0022               	movlb	2	; select bank2
 15204  2734  00CF               	movwf	_cos$2856^(0+256)
 15205  2735  0021               	movlb	1	; select bank1
 15206  2736  0842               	movf	(?___ftadd+1)^(0+128),w
 15207  2737  0022               	movlb	2	; select bank2
 15208  2738  00D0               	movwf	(_cos$2856+1)^(0+256)
 15209  2739  0021               	movlb	1	; select bank1
 15210  273A  0843               	movf	(?___ftadd+2)^(0+128),w
 15211  273B  0022               	movlb	2	; select bank2
 15212  273C  00D1               	movwf	(_cos$2856+2)^(0+256)
 15213  273D  084F               	movf	_cos$2856^(0+256),w
 15214  273E  00BE               	movwf	sin@f^(0+256)
 15215  273F  0850               	movf	(_cos$2856+1)^(0+256),w
 15216  2740  00BF               	movwf	(sin@f+1)^(0+256)
 15217  2741  0851               	movf	(_cos$2856+2)^(0+256),w
 15218  2742  00C0               	movwf	(sin@f+2)^(0+256)
 15219  2743  3188  2020         	fcall	_sin
 15220  2745  0022               	movlb	2	; select bank2
 15221  2746  083E               	movf	?_sin^(0+256),w
 15222  2747  00CC               	movwf	?_cos^(0+256)
 15223  2748  083F               	movf	(?_sin+1)^(0+256),w
 15224  2749  00CD               	movwf	(?_cos+1)^(0+256)
 15225  274A  0840               	movf	(?_sin+2)^(0+256),w
 15226  274B  00CE               	movwf	(?_cos+2)^(0+256)
 15227  274C  0008               	return
 15228  274D                     l8590:	
 15229  274D  3010               	movlw	16
 15230  274E  0021               	movlb	1	; select bank1
 15231  274F  00C1               	movwf	___ftadd@f1^(0+128)
 15232  2750  30C9               	movlw	201
 15233  2751  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 15234  2752  303F               	movlw	63
 15235  2753  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 15236  2754  0022               	movlb	2	; select bank2
 15237  2755  084C               	movf	cos@f^(0+256),w
 15238  2756  0021               	movlb	1	; select bank1
 15239  2757  00C4               	movwf	___ftadd@f2^(0+128)
 15240  2758  0022               	movlb	2	; select bank2
 15241  2759  084D               	movf	(cos@f+1)^(0+256),w
 15242  275A  0021               	movlb	1	; select bank1
 15243  275B  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 15244  275C  0022               	movlb	2	; select bank2
 15245  275D  084E               	movf	(cos@f+2)^(0+256),w
 15246  275E  0021               	movlb	1	; select bank1
 15247  275F  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 15248  2760  3190  2035  31A7   	fcall	___ftadd
 15249  2763  0021               	movlb	1	; select bank1
 15250  2764  0841               	movf	?___ftadd^(0+128),w
 15251  2765  0022               	movlb	2	; select bank2
 15252  2766  00CF               	movwf	_cos$2856^(0+256)
 15253  2767  0021               	movlb	1	; select bank1
 15254  2768  0842               	movf	(?___ftadd+1)^(0+128),w
 15255  2769  0022               	movlb	2	; select bank2
 15256  276A  00D0               	movwf	(_cos$2856+1)^(0+256)
 15257  276B  0021               	movlb	1	; select bank1
 15258  276C  0843               	movf	(?___ftadd+2)^(0+128),w
 15259  276D  0022               	movlb	2	; select bank2
 15260  276E  00D1               	movwf	(_cos$2856+2)^(0+256)
 15261  276F  084F               	movf	_cos$2856^(0+256),w
 15262  2770  00BE               	movwf	sin@f^(0+256)
 15263  2771  0850               	movf	(_cos$2856+1)^(0+256),w
 15264  2772  00BF               	movwf	(sin@f+1)^(0+256)
 15265  2773  0851               	movf	(_cos$2856+2)^(0+256),w
 15266  2774  00C0               	movwf	(sin@f+2)^(0+256)
 15267  2775  3188  2020         	fcall	_sin
 15268  2777  0022               	movlb	2	; select bank2
 15269  2778  083E               	movf	?_sin^(0+256),w
 15270  2779  00CC               	movwf	?_cos^(0+256)
 15271  277A  083F               	movf	(?_sin+1)^(0+256),w
 15272  277B  00CD               	movwf	(?_cos+1)^(0+256)
 15273  277C  0840               	movf	(?_sin+2)^(0+256),w
 15274  277D  00CE               	movwf	(?_cos+2)^(0+256)
 15275  277E  0008               	return
 15276  277F                     __end_of_cos:	
 15277                           
 15278                           	psect	text46
 15279  0820                     __ptext46:	
 15280 ;; *************** function _sin *****************
 15281 ;; Defined at:
 15282 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\sin.c"
 15283 ;; Parameters:    Size  Location     Type
 15284 ;;  f               3   30[BANK2 ] void 
 15285 ;; Auto vars:     Size  Location     Type
 15286 ;;  x2              3   40[BANK2 ] void 
 15287 ;;  y               3   34[BANK2 ] void 
 15288 ;;  sgn             1   43[BANK2 ] unsigned char 
 15289 ;; Return value:  Size  Location     Type
 15290 ;;                  3   30[BANK2 ] unsigned char 
 15291 ;; Registers used:
 15292 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15293 ;; Tracked objects:
 15294 ;;		On entry : 0/0
 15295 ;;		On exit  : 0/0
 15296 ;;		Unchanged: 0/0
 15297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15298 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15299 ;;      Locals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15300 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15301 ;;      Totals:         0       0       0      14       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15302 ;;Total ram usage:       14 bytes
 15303 ;; Hardware stack levels used:    1
 15304 ;; Hardware stack levels required when called:    6
 15305 ;; This function calls:
 15306 ;;		___ftadd
 15307 ;;		___ftdiv
 15308 ;;		___ftge
 15309 ;;		___ftmul
 15310 ;;		___ftneg
 15311 ;;		___ftsub
 15312 ;;		_eval_poly
 15313 ;;		_floor
 15314 ;; This function is called by:
 15315 ;;		_cos
 15316 ;; This function uses a non-reentrant model
 15317 ;;
 15318                           
 15319                           
 15320                           ;psect for function _sin
 15321  0820                     _sin:	
 15322                           
 15323                           ;incstack = 0
 15324                           ; Regs used in _sin: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15325  0820  0022               	movlb	2	; select bank2
 15326  0821  01CB               	clrf	sin@sgn^(0+256)
 15327  0822  083E               	movf	sin@f^(0+256),w
 15328  0823  0021               	movlb	1	; select bank1
 15329  0824  00A0               	movwf	___ftge@ff1^(0+128)
 15330  0825  0022               	movlb	2	; select bank2
 15331  0826  083F               	movf	(sin@f+1)^(0+256),w
 15332  0827  0021               	movlb	1	; select bank1
 15333  0828  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15334  0829  0022               	movlb	2	; select bank2
 15335  082A  0840               	movf	(sin@f+2)^(0+256),w
 15336  082B  0021               	movlb	1	; select bank1
 15337  082C  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15338  082D  3000               	movlw	0
 15339  082E  00A3               	movwf	___ftge@ff2^(0+128)
 15340  082F  3000               	movlw	0
 15341  0830  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15342  0831  3000               	movlw	0
 15343  0832  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15344  0833  31A0  20AA  3188   	fcall	___ftge
 15345  0836  1803               	btfsc	3,0
 15346  0837  2855               	goto	l8300
 15347  0838  0022               	movlb	2	; select bank2
 15348  0839  083E               	movf	sin@f^(0+256),w
 15349  083A  0021               	movlb	1	; select bank1
 15350  083B  00BE               	movwf	___ftneg@f1^(0+128)
 15351  083C  0022               	movlb	2	; select bank2
 15352  083D  083F               	movf	(sin@f+1)^(0+256),w
 15353  083E  0021               	movlb	1	; select bank1
 15354  083F  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 15355  0840  0022               	movlb	2	; select bank2
 15356  0841  0840               	movf	(sin@f+2)^(0+256),w
 15357  0842  0021               	movlb	1	; select bank1
 15358  0843  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 15359  0844  31AC  24EC  3188   	fcall	___ftneg
 15360  0847  0021               	movlb	1	; select bank1
 15361  0848  083E               	movf	?___ftneg^(0+128),w
 15362  0849  0022               	movlb	2	; select bank2
 15363  084A  00BE               	movwf	sin@f^(0+256)
 15364  084B  0021               	movlb	1	; select bank1
 15365  084C  083F               	movf	(?___ftneg+1)^(0+128),w
 15366  084D  0022               	movlb	2	; select bank2
 15367  084E  00BF               	movwf	(sin@f+1)^(0+256)
 15368  084F  0021               	movlb	1	; select bank1
 15369  0850  0840               	movf	(?___ftneg+2)^(0+128),w
 15370  0851  0022               	movlb	2	; select bank2
 15371  0852  00C0               	movwf	(sin@f+2)^(0+256)
 15372  0853  01CB               	clrf	sin@sgn^(0+256)
 15373  0854  0ACB               	incf	sin@sgn^(0+256),f
 15374  0855                     l8300:	
 15375  0855  30FA               	movlw	250
 15376  0856  0021               	movlb	1	; select bank1
 15377  0857  00AE               	movwf	___ftmul@f1^(0+128)
 15378  0858  3022               	movlw	34
 15379  0859  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15380  085A  303E               	movlw	62
 15381  085B  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15382  085C  0022               	movlb	2	; select bank2
 15383  085D  083E               	movf	sin@f^(0+256),w
 15384  085E  0021               	movlb	1	; select bank1
 15385  085F  00B1               	movwf	___ftmul@f2^(0+128)
 15386  0860  0022               	movlb	2	; select bank2
 15387  0861  083F               	movf	(sin@f+1)^(0+256),w
 15388  0862  0021               	movlb	1	; select bank1
 15389  0863  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15390  0864  0022               	movlb	2	; select bank2
 15391  0865  0840               	movf	(sin@f+2)^(0+256),w
 15392  0866  0021               	movlb	1	; select bank1
 15393  0867  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15394  0868  319E  267B  3188   	fcall	___ftmul
 15395  086B  0021               	movlb	1	; select bank1
 15396  086C  082E               	movf	?___ftmul^(0+128),w
 15397  086D  0022               	movlb	2	; select bank2
 15398  086E  00BE               	movwf	sin@f^(0+256)
 15399  086F  0021               	movlb	1	; select bank1
 15400  0870  082F               	movf	(?___ftmul+1)^(0+128),w
 15401  0871  0022               	movlb	2	; select bank2
 15402  0872  00BF               	movwf	(sin@f+1)^(0+256)
 15403  0873  0021               	movlb	1	; select bank1
 15404  0874  0830               	movf	(?___ftmul+2)^(0+128),w
 15405  0875  0022               	movlb	2	; select bank2
 15406  0876  00C0               	movwf	(sin@f+2)^(0+256)
 15407  0877  083E               	movf	sin@f^(0+256),w
 15408  0878  00AE               	movwf	floor@x^(0+256)
 15409  0879  083F               	movf	(sin@f+1)^(0+256),w
 15410  087A  00AF               	movwf	(floor@x+1)^(0+256)
 15411  087B  0840               	movf	(sin@f+2)^(0+256),w
 15412  087C  00B0               	movwf	(floor@x+2)^(0+256)
 15413  087D  319D  25C8  3188   	fcall	_floor
 15414  0880  0022               	movlb	2	; select bank2
 15415  0881  082E               	movf	?_floor^(0+256),w
 15416  0882  00B7               	movwf	___ftsub@f2^(0+256)
 15417  0883  082F               	movf	(?_floor+1)^(0+256),w
 15418  0884  00B8               	movwf	(___ftsub@f2+1)^(0+256)
 15419  0885  0830               	movf	(?_floor+2)^(0+256),w
 15420  0886  00B9               	movwf	(___ftsub@f2+2)^(0+256)
 15421  0887  083E               	movf	sin@f^(0+256),w
 15422  0888  00BA               	movwf	___ftsub@f1^(0+256)
 15423  0889  083F               	movf	(sin@f+1)^(0+256),w
 15424  088A  00BB               	movwf	(___ftsub@f1+1)^(0+256)
 15425  088B  0840               	movf	(sin@f+2)^(0+256),w
 15426  088C  00BC               	movwf	(___ftsub@f1+2)^(0+256)
 15427  088D  31AE  26D5  3188   	fcall	___ftsub
 15428  0890  0022               	movlb	2	; select bank2
 15429  0891  0837               	movf	?___ftsub^(0+256),w
 15430  0892  00BE               	movwf	sin@f^(0+256)
 15431  0893  0838               	movf	(?___ftsub+1)^(0+256),w
 15432  0894  00BF               	movwf	(sin@f+1)^(0+256)
 15433  0895  0839               	movf	(?___ftsub+2)^(0+256),w
 15434  0896  00C0               	movwf	(sin@f+2)^(0+256)
 15435  0897  3000               	movlw	0
 15436  0898  0021               	movlb	1	; select bank1
 15437  0899  00AE               	movwf	___ftmul@f1^(0+128)
 15438  089A  3080               	movlw	128
 15439  089B  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15440  089C  3040               	movlw	64
 15441  089D  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15442  089E  0022               	movlb	2	; select bank2
 15443  089F  083E               	movf	sin@f^(0+256),w
 15444  08A0  0021               	movlb	1	; select bank1
 15445  08A1  00B1               	movwf	___ftmul@f2^(0+128)
 15446  08A2  0022               	movlb	2	; select bank2
 15447  08A3  083F               	movf	(sin@f+1)^(0+256),w
 15448  08A4  0021               	movlb	1	; select bank1
 15449  08A5  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15450  08A6  0022               	movlb	2	; select bank2
 15451  08A7  0840               	movf	(sin@f+2)^(0+256),w
 15452  08A8  0021               	movlb	1	; select bank1
 15453  08A9  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15454  08AA  319E  267B  3188   	fcall	___ftmul
 15455  08AD  0021               	movlb	1	; select bank1
 15456  08AE  082E               	movf	?___ftmul^(0+128),w
 15457  08AF  0022               	movlb	2	; select bank2
 15458  08B0  00BE               	movwf	sin@f^(0+256)
 15459  08B1  0021               	movlb	1	; select bank1
 15460  08B2  082F               	movf	(?___ftmul+1)^(0+128),w
 15461  08B3  0022               	movlb	2	; select bank2
 15462  08B4  00BF               	movwf	(sin@f+1)^(0+256)
 15463  08B5  0021               	movlb	1	; select bank1
 15464  08B6  0830               	movf	(?___ftmul+2)^(0+128),w
 15465  08B7  0022               	movlb	2	; select bank2
 15466  08B8  00C0               	movwf	(sin@f+2)^(0+256)
 15467  08B9  3000               	movlw	0
 15468  08BA  0021               	movlb	1	; select bank1
 15469  08BB  00A0               	movwf	___ftge@ff1^(0+128)
 15470  08BC  3000               	movlw	0
 15471  08BD  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15472  08BE  3040               	movlw	64
 15473  08BF  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15474  08C0  0022               	movlb	2	; select bank2
 15475  08C1  083E               	movf	sin@f^(0+256),w
 15476  08C2  0021               	movlb	1	; select bank1
 15477  08C3  00A3               	movwf	___ftge@ff2^(0+128)
 15478  08C4  0022               	movlb	2	; select bank2
 15479  08C5  083F               	movf	(sin@f+1)^(0+256),w
 15480  08C6  0021               	movlb	1	; select bank1
 15481  08C7  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15482  08C8  0022               	movlb	2	; select bank2
 15483  08C9  0840               	movf	(sin@f+2)^(0+256),w
 15484  08CA  0021               	movlb	1	; select bank1
 15485  08CB  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15486  08CC  31A0  20AA  3188   	fcall	___ftge
 15487  08CF  1803               	btfsc	3,0
 15488  08D0  28F1               	goto	l8312
 15489  08D1  3000               	movlw	0
 15490  08D2  0022               	movlb	2	; select bank2
 15491  08D3  00B7               	movwf	___ftsub@f2^(0+256)
 15492  08D4  3000               	movlw	0
 15493  08D5  00B8               	movwf	(___ftsub@f2+1)^(0+256)
 15494  08D6  3040               	movlw	64
 15495  08D7  00B9               	movwf	(___ftsub@f2+2)^(0+256)
 15496  08D8  083E               	movf	sin@f^(0+256),w
 15497  08D9  00BA               	movwf	___ftsub@f1^(0+256)
 15498  08DA  083F               	movf	(sin@f+1)^(0+256),w
 15499  08DB  00BB               	movwf	(___ftsub@f1+1)^(0+256)
 15500  08DC  0840               	movf	(sin@f+2)^(0+256),w
 15501  08DD  00BC               	movwf	(___ftsub@f1+2)^(0+256)
 15502  08DE  31AE  26D5  3188   	fcall	___ftsub
 15503  08E1  0022               	movlb	2	; select bank2
 15504  08E2  0837               	movf	?___ftsub^(0+256),w
 15505  08E3  00BE               	movwf	sin@f^(0+256)
 15506  08E4  0838               	movf	(?___ftsub+1)^(0+256),w
 15507  08E5  00BF               	movwf	(sin@f+1)^(0+256)
 15508  08E6  0839               	movf	(?___ftsub+2)^(0+256),w
 15509  08E7  00C0               	movwf	(sin@f+2)^(0+256)
 15510  08E8  084B               	movf	sin@sgn^(0+256),w
 15511  08E9  1D03               	btfss	3,2
 15512  08EA  28ED               	goto	u8760
 15513  08EB  3001               	movlw	1
 15514  08EC  28EE               	goto	u8770
 15515  08ED                     u8760:	
 15516  08ED  3000               	movlw	0
 15517  08EE                     u8770:	
 15518  08EE  00C1               	movwf	??_sin^(0+256)
 15519  08EF  0841               	movf	??_sin^(0+256),w
 15520  08F0  00CB               	movwf	sin@sgn^(0+256)
 15521  08F1                     l8312:	
 15522  08F1  3000               	movlw	0
 15523  08F2  0021               	movlb	1	; select bank1
 15524  08F3  00A0               	movwf	___ftge@ff1^(0+128)
 15525  08F4  3080               	movlw	128
 15526  08F5  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15527  08F6  303F               	movlw	63
 15528  08F7  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15529  08F8  0022               	movlb	2	; select bank2
 15530  08F9  083E               	movf	sin@f^(0+256),w
 15531  08FA  0021               	movlb	1	; select bank1
 15532  08FB  00A3               	movwf	___ftge@ff2^(0+128)
 15533  08FC  0022               	movlb	2	; select bank2
 15534  08FD  083F               	movf	(sin@f+1)^(0+256),w
 15535  08FE  0021               	movlb	1	; select bank1
 15536  08FF  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15537  0900  0022               	movlb	2	; select bank2
 15538  0901  0840               	movf	(sin@f+2)^(0+256),w
 15539  0902  0021               	movlb	1	; select bank1
 15540  0903  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15541  0904  31A0  20AA  3188   	fcall	___ftge
 15542  0907  1803               	btfsc	3,0
 15543  0908  2935               	goto	l2378
 15544  0909  3000               	movlw	0
 15545  090A  0021               	movlb	1	; select bank1
 15546  090B  00C1               	movwf	___ftadd@f1^(0+128)
 15547  090C  3000               	movlw	0
 15548  090D  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 15549  090E  3040               	movlw	64
 15550  090F  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 15551  0910  0022               	movlb	2	; select bank2
 15552  0911  083E               	movf	sin@f^(0+256),w
 15553  0912  0021               	movlb	1	; select bank1
 15554  0913  00BE               	movwf	___ftneg@f1^(0+128)
 15555  0914  0022               	movlb	2	; select bank2
 15556  0915  083F               	movf	(sin@f+1)^(0+256),w
 15557  0916  0021               	movlb	1	; select bank1
 15558  0917  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 15559  0918  0022               	movlb	2	; select bank2
 15560  0919  0840               	movf	(sin@f+2)^(0+256),w
 15561  091A  0021               	movlb	1	; select bank1
 15562  091B  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 15563  091C  31AC  24EC  3188   	fcall	___ftneg
 15564  091F  0021               	movlb	1	; select bank1
 15565  0920  083E               	movf	?___ftneg^(0+128),w
 15566  0921  00C4               	movwf	___ftadd@f2^(0+128)
 15567  0922  083F               	movf	(?___ftneg+1)^(0+128),w
 15568  0923  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 15569  0924  0840               	movf	(?___ftneg+2)^(0+128),w
 15570  0925  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 15571  0926  3190  2035  3188   	fcall	___ftadd
 15572  0929  0021               	movlb	1	; select bank1
 15573  092A  0841               	movf	?___ftadd^(0+128),w
 15574  092B  0022               	movlb	2	; select bank2
 15575  092C  00BE               	movwf	sin@f^(0+256)
 15576  092D  0021               	movlb	1	; select bank1
 15577  092E  0842               	movf	(?___ftadd+1)^(0+128),w
 15578  092F  0022               	movlb	2	; select bank2
 15579  0930  00BF               	movwf	(sin@f+1)^(0+256)
 15580  0931  0021               	movlb	1	; select bank1
 15581  0932  0843               	movf	(?___ftadd+2)^(0+128),w
 15582  0933  0022               	movlb	2	; select bank2
 15583  0934  00C0               	movwf	(sin@f+2)^(0+256)
 15584  0935                     l2378:	
 15585  0935  0022               	movlb	2	; select bank2
 15586  0936  083E               	movf	sin@f^(0+256),w
 15587  0937  0021               	movlb	1	; select bank1
 15588  0938  00AE               	movwf	___ftmul@f1^(0+128)
 15589  0939  0022               	movlb	2	; select bank2
 15590  093A  083F               	movf	(sin@f+1)^(0+256),w
 15591  093B  0021               	movlb	1	; select bank1
 15592  093C  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15593  093D  0022               	movlb	2	; select bank2
 15594  093E  0840               	movf	(sin@f+2)^(0+256),w
 15595  093F  0021               	movlb	1	; select bank1
 15596  0940  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15597  0941  0022               	movlb	2	; select bank2
 15598  0942  083E               	movf	sin@f^(0+256),w
 15599  0943  0021               	movlb	1	; select bank1
 15600  0944  00B1               	movwf	___ftmul@f2^(0+128)
 15601  0945  0022               	movlb	2	; select bank2
 15602  0946  083F               	movf	(sin@f+1)^(0+256),w
 15603  0947  0021               	movlb	1	; select bank1
 15604  0948  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15605  0949  0022               	movlb	2	; select bank2
 15606  094A  0840               	movf	(sin@f+2)^(0+256),w
 15607  094B  0021               	movlb	1	; select bank1
 15608  094C  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15609  094D  319E  267B  3188   	fcall	___ftmul
 15610  0950  0021               	movlb	1	; select bank1
 15611  0951  082E               	movf	?___ftmul^(0+128),w
 15612  0952  0022               	movlb	2	; select bank2
 15613  0953  00C8               	movwf	sin@x2^(0+256)
 15614  0954  0021               	movlb	1	; select bank1
 15615  0955  082F               	movf	(?___ftmul+1)^(0+128),w
 15616  0956  0022               	movlb	2	; select bank2
 15617  0957  00C9               	movwf	(sin@x2+1)^(0+256)
 15618  0958  0021               	movlb	1	; select bank1
 15619  0959  0830               	movf	(?___ftmul+2)^(0+128),w
 15620  095A  0022               	movlb	2	; select bank2
 15621  095B  00CA               	movwf	(sin@x2+2)^(0+256)
 15622  095C  0848               	movf	sin@x2^(0+256),w
 15623  095D  00B4               	movwf	eval_poly@x^(0+256)
 15624  095E  0849               	movf	(sin@x2+1)^(0+256),w
 15625  095F  00B5               	movwf	(eval_poly@x+1)^(0+256)
 15626  0960  084A               	movf	(sin@x2+2)^(0+256),w
 15627  0961  00B6               	movwf	(eval_poly@x+2)^(0+256)
 15628  0962  3048               	movlw	low (sin@coeff_b| (0+32768))
 15629  0963  00B7               	movwf	eval_poly@d^(0+256)
 15630  0964  30A8               	movlw	high (sin@coeff_b| (0+32768))
 15631  0965  00B8               	movwf	(eval_poly@d^(0+256)+1)
 15632  0966  3003               	movlw	3
 15633  0967  00B9               	movwf	eval_poly@n^(0+256)
 15634  0968  3000               	movlw	0
 15635  0969  00BA               	movwf	(eval_poly@n^(0+256)+1)
 15636  096A  31A6  261B  3188   	fcall	_eval_poly
 15637  096D  0022               	movlb	2	; select bank2
 15638  096E  0834               	movf	?_eval_poly^(0+256),w
 15639  096F  00C2               	movwf	sin@y^(0+256)
 15640  0970  0835               	movf	(?_eval_poly+1)^(0+256),w
 15641  0971  00C3               	movwf	(sin@y+1)^(0+256)
 15642  0972  0836               	movf	(?_eval_poly+2)^(0+256),w
 15643  0973  00C4               	movwf	(sin@y+2)^(0+256)
 15644  0974  3004               	movlw	4
 15645  0975  00B9               	movwf	eval_poly@n^(0+256)
 15646  0976  3000               	movlw	0
 15647  0977  00BA               	movwf	(eval_poly@n^(0+256)+1)
 15648  0978  3039               	movlw	low (sin@coeff_a| (0+32768))
 15649  0979  00B7               	movwf	eval_poly@d^(0+256)
 15650  097A  30A8               	movlw	high (sin@coeff_a| (0+32768))
 15651  097B  00B8               	movwf	(eval_poly@d^(0+256)+1)
 15652  097C  0848               	movf	sin@x2^(0+256),w
 15653  097D  00B4               	movwf	eval_poly@x^(0+256)
 15654  097E  0849               	movf	(sin@x2+1)^(0+256),w
 15655  097F  00B5               	movwf	(eval_poly@x+1)^(0+256)
 15656  0980  084A               	movf	(sin@x2+2)^(0+256),w
 15657  0981  00B6               	movwf	(eval_poly@x+2)^(0+256)
 15658  0982  31A6  261B  3188   	fcall	_eval_poly
 15659  0985  0022               	movlb	2	; select bank2
 15660  0986  0834               	movf	?_eval_poly^(0+256),w
 15661  0987  0021               	movlb	1	; select bank1
 15662  0988  00D1               	movwf	___ftdiv@f1^(0+128)
 15663  0989  0022               	movlb	2	; select bank2
 15664  098A  0835               	movf	(?_eval_poly+1)^(0+256),w
 15665  098B  0021               	movlb	1	; select bank1
 15666  098C  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 15667  098D  0022               	movlb	2	; select bank2
 15668  098E  0836               	movf	(?_eval_poly+2)^(0+256),w
 15669  098F  0021               	movlb	1	; select bank1
 15670  0990  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 15671  0991  0022               	movlb	2	; select bank2
 15672  0992  0842               	movf	sin@y^(0+256),w
 15673  0993  0021               	movlb	1	; select bank1
 15674  0994  00CE               	movwf	___ftdiv@f2^(0+128)
 15675  0995  0022               	movlb	2	; select bank2
 15676  0996  0843               	movf	(sin@y+1)^(0+256),w
 15677  0997  0021               	movlb	1	; select bank1
 15678  0998  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 15679  0999  0022               	movlb	2	; select bank2
 15680  099A  0844               	movf	(sin@y+2)^(0+256),w
 15681  099B  0021               	movlb	1	; select bank1
 15682  099C  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 15683  099D  319C  2474  3188   	fcall	___ftdiv
 15684  09A0  0021               	movlb	1	; select bank1
 15685  09A1  084E               	movf	?___ftdiv^(0+128),w
 15686  09A2  0022               	movlb	2	; select bank2
 15687  09A3  00C5               	movwf	_sin$2859^(0+256)
 15688  09A4  0021               	movlb	1	; select bank1
 15689  09A5  084F               	movf	(?___ftdiv+1)^(0+128),w
 15690  09A6  0022               	movlb	2	; select bank2
 15691  09A7  00C6               	movwf	(_sin$2859+1)^(0+256)
 15692  09A8  0021               	movlb	1	; select bank1
 15693  09A9  0850               	movf	(?___ftdiv+2)^(0+128),w
 15694  09AA  0022               	movlb	2	; select bank2
 15695  09AB  00C7               	movwf	(_sin$2859+2)^(0+256)
 15696  09AC  0845               	movf	_sin$2859^(0+256),w
 15697  09AD  0021               	movlb	1	; select bank1
 15698  09AE  00AE               	movwf	___ftmul@f1^(0+128)
 15699  09AF  0022               	movlb	2	; select bank2
 15700  09B0  0846               	movf	(_sin$2859+1)^(0+256),w
 15701  09B1  0021               	movlb	1	; select bank1
 15702  09B2  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15703  09B3  0022               	movlb	2	; select bank2
 15704  09B4  0847               	movf	(_sin$2859+2)^(0+256),w
 15705  09B5  0021               	movlb	1	; select bank1
 15706  09B6  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15707  09B7  0022               	movlb	2	; select bank2
 15708  09B8  083E               	movf	sin@f^(0+256),w
 15709  09B9  0021               	movlb	1	; select bank1
 15710  09BA  00B1               	movwf	___ftmul@f2^(0+128)
 15711  09BB  0022               	movlb	2	; select bank2
 15712  09BC  083F               	movf	(sin@f+1)^(0+256),w
 15713  09BD  0021               	movlb	1	; select bank1
 15714  09BE  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15715  09BF  0022               	movlb	2	; select bank2
 15716  09C0  0840               	movf	(sin@f+2)^(0+256),w
 15717  09C1  0021               	movlb	1	; select bank1
 15718  09C2  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15719  09C3  319E  267B  3188   	fcall	___ftmul
 15720  09C6  0021               	movlb	1	; select bank1
 15721  09C7  082E               	movf	?___ftmul^(0+128),w
 15722  09C8  0022               	movlb	2	; select bank2
 15723  09C9  00BE               	movwf	sin@f^(0+256)
 15724  09CA  0021               	movlb	1	; select bank1
 15725  09CB  082F               	movf	(?___ftmul+1)^(0+128),w
 15726  09CC  0022               	movlb	2	; select bank2
 15727  09CD  00BF               	movwf	(sin@f+1)^(0+256)
 15728  09CE  0021               	movlb	1	; select bank1
 15729  09CF  0830               	movf	(?___ftmul+2)^(0+128),w
 15730  09D0  0022               	movlb	2	; select bank2
 15731  09D1  00C0               	movwf	(sin@f+2)^(0+256)
 15732  09D2  084B               	movf	sin@sgn^(0+256),w
 15733  09D3  1903               	btfsc	3,2
 15734  09D4  0008               	return
 15735  09D5  083E               	movf	sin@f^(0+256),w
 15736  09D6  0021               	movlb	1	; select bank1
 15737  09D7  00BE               	movwf	___ftneg@f1^(0+128)
 15738  09D8  0022               	movlb	2	; select bank2
 15739  09D9  083F               	movf	(sin@f+1)^(0+256),w
 15740  09DA  0021               	movlb	1	; select bank1
 15741  09DB  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 15742  09DC  0022               	movlb	2	; select bank2
 15743  09DD  0840               	movf	(sin@f+2)^(0+256),w
 15744  09DE  0021               	movlb	1	; select bank1
 15745  09DF  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 15746  09E0  31AC  24EC         	fcall	___ftneg
 15747  09E2  0021               	movlb	1	; select bank1
 15748  09E3  083E               	movf	?___ftneg^(0+128),w
 15749  09E4  0022               	movlb	2	; select bank2
 15750  09E5  00BE               	movwf	?_sin^(0+256)
 15751  09E6  0021               	movlb	1	; select bank1
 15752  09E7  083F               	movf	(?___ftneg+1)^(0+128),w
 15753  09E8  0022               	movlb	2	; select bank2
 15754  09E9  00BF               	movwf	(?_sin+1)^(0+256)
 15755  09EA  0021               	movlb	1	; select bank1
 15756  09EB  0840               	movf	(?___ftneg+2)^(0+128),w
 15757  09EC  0022               	movlb	2	; select bank2
 15758  09ED  00C0               	movwf	(?_sin+2)^(0+256)
 15759  09EE  0008               	return
 15760  09EF                     __end_of_sin:	
 15761                           
 15762                           	psect	text47
 15763  1DC8                     __ptext47:	
 15764 ;; *************** function _floor *****************
 15765 ;; Defined at:
 15766 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\floor.c"
 15767 ;; Parameters:    Size  Location     Type
 15768 ;;  x               3   14[BANK2 ] unsigned char 
 15769 ;; Auto vars:     Size  Location     Type
 15770 ;;  i               3   18[BANK2 ] unsigned char 
 15771 ;;  expon           2   21[BANK2 ] int 
 15772 ;; Return value:  Size  Location     Type
 15773 ;;                  3   14[BANK2 ] int 
 15774 ;; Registers used:
 15775 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15776 ;; Tracked objects:
 15777 ;;		On entry : 0/0
 15778 ;;		On exit  : 0/0
 15779 ;;		Unchanged: 0/0
 15780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15781 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15782 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15783 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15784 ;;      Totals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15785 ;;Total ram usage:        9 bytes
 15786 ;; Hardware stack levels used:    1
 15787 ;; Hardware stack levels required when called:    5
 15788 ;; This function calls:
 15789 ;;		___altoft
 15790 ;;		___ftadd
 15791 ;;		___ftge
 15792 ;;		___fttol
 15793 ;;		_frexp
 15794 ;; This function is called by:
 15795 ;;		_sin
 15796 ;;		_exp
 15797 ;; This function uses a non-reentrant model
 15798 ;;
 15799                           
 15800                           
 15801                           ;psect for function _floor
 15802  1DC8                     _floor:	
 15803                           
 15804                           ;incstack = 0
 15805                           ; Regs used in _floor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15806  1DC8  0022               	movlb	2	; select bank2
 15807  1DC9  082E               	movf	floor@x^(0+256),w
 15808  1DCA  0021               	movlb	1	; select bank1
 15809  1DCB  00A0               	movwf	frexp@value^(0+128)
 15810  1DCC  0022               	movlb	2	; select bank2
 15811  1DCD  082F               	movf	(floor@x+1)^(0+256),w
 15812  1DCE  0021               	movlb	1	; select bank1
 15813  1DCF  00A1               	movwf	(frexp@value+1)^(0+128)
 15814  1DD0  0022               	movlb	2	; select bank2
 15815  1DD1  0830               	movf	(floor@x+2)^(0+256),w
 15816  1DD2  0021               	movlb	1	; select bank1
 15817  1DD3  00A2               	movwf	(frexp@value+2)^(0+128)
 15818  1DD4  3035               	movlw	(low (floor@expon| (0+256)))& (0+255)
 15819  1DD5  0022               	movlb	2	; select bank2
 15820  1DD6  00B1               	movwf	??_floor^(0+256)
 15821  1DD7  0831               	movf	??_floor^(0+256),w
 15822  1DD8  0021               	movlb	1	; select bank1
 15823  1DD9  00A3               	movwf	frexp@eptr^(0+128)
 15824  1DDA  31A1  219D  319D   	fcall	_frexp
 15825  1DDD  0022               	movlb	2	; select bank2
 15826  1DDE  1FB6               	btfss	(floor@expon+1)^(0+256),7
 15827  1DDF  2E06               	goto	l8148
 15828  1DE0  082E               	movf	floor@x^(0+256),w
 15829  1DE1  0021               	movlb	1	; select bank1
 15830  1DE2  00A0               	movwf	___ftge@ff1^(0+128)
 15831  1DE3  0022               	movlb	2	; select bank2
 15832  1DE4  082F               	movf	(floor@x+1)^(0+256),w
 15833  1DE5  0021               	movlb	1	; select bank1
 15834  1DE6  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15835  1DE7  0022               	movlb	2	; select bank2
 15836  1DE8  0830               	movf	(floor@x+2)^(0+256),w
 15837  1DE9  0021               	movlb	1	; select bank1
 15838  1DEA  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15839  1DEB  3000               	movlw	0
 15840  1DEC  00A3               	movwf	___ftge@ff2^(0+128)
 15841  1DED  3000               	movlw	0
 15842  1DEE  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15843  1DEF  3000               	movlw	0
 15844  1DF0  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15845  1DF1  31A0  20AA  319D   	fcall	___ftge
 15846  1DF4  1803               	btfsc	3,0
 15847  1DF5  2DFE               	goto	l8144
 15848  1DF6  3000               	movlw	0
 15849  1DF7  0022               	movlb	2	; select bank2
 15850  1DF8  00AE               	movwf	?_floor^(0+256)
 15851  1DF9  3080               	movlw	128
 15852  1DFA  00AF               	movwf	(?_floor+1)^(0+256)
 15853  1DFB  30BF               	movlw	191
 15854  1DFC  00B0               	movwf	(?_floor+2)^(0+256)
 15855  1DFD  0008               	return
 15856  1DFE                     l8144:	
 15857  1DFE  3000               	movlw	0
 15858  1DFF  0022               	movlb	2	; select bank2
 15859  1E00  00AE               	movwf	?_floor^(0+256)
 15860  1E01  3000               	movlw	0
 15861  1E02  00AF               	movwf	(?_floor+1)^(0+256)
 15862  1E03  3000               	movlw	0
 15863  1E04  00B0               	movwf	(?_floor+2)^(0+256)
 15864  1E05  0008               	return
 15865  1E06                     l8148:	
 15866  1E06  3000               	movlw	0
 15867  1E07  0236               	subwf	(floor@expon+1)^(0+256),w
 15868  1E08  3015               	movlw	21
 15869  1E09  1903               	skipnz
 15870  1E0A  0235               	subwf	floor@expon^(0+256),w
 15871  1E0B  1803               	btfsc	3,0
 15872  1E0C  0008               	return
 15873  1E0D  082E               	movf	floor@x^(0+256),w
 15874  1E0E  00A0               	movwf	___fttol@f1^(0+256)
 15875  1E0F  082F               	movf	(floor@x+1)^(0+256),w
 15876  1E10  00A1               	movwf	(___fttol@f1+1)^(0+256)
 15877  1E11  0830               	movf	(floor@x+2)^(0+256),w
 15878  1E12  00A2               	movwf	(___fttol@f1+2)^(0+256)
 15879  1E13  3199  21AF  319D   	fcall	___fttol
 15880  1E16  0022               	movlb	2	; select bank2
 15881  1E17  0823               	movf	(?___fttol+3)^(0+256),w
 15882  1E18  0021               	movlb	1	; select bank1
 15883  1E19  00AB               	movwf	(___altoft@c+3)^(0+128)
 15884  1E1A  0022               	movlb	2	; select bank2
 15885  1E1B  0822               	movf	(?___fttol+2)^(0+256),w
 15886  1E1C  0021               	movlb	1	; select bank1
 15887  1E1D  00AA               	movwf	(___altoft@c+2)^(0+128)
 15888  1E1E  0022               	movlb	2	; select bank2
 15889  1E1F  0821               	movf	(?___fttol+1)^(0+256),w
 15890  1E20  0021               	movlb	1	; select bank1
 15891  1E21  00A9               	movwf	(___altoft@c+1)^(0+128)
 15892  1E22  0022               	movlb	2	; select bank2
 15893  1E23  0820               	movf	?___fttol^(0+256),w
 15894  1E24  0021               	movlb	1	; select bank1
 15895  1E25  00A8               	movwf	___altoft@c^(0+128)
 15896  1E26  31A0  20E6  319D   	fcall	___altoft
 15897  1E29  0021               	movlb	1	; select bank1
 15898  1E2A  0828               	movf	?___altoft^(0+128),w
 15899  1E2B  0022               	movlb	2	; select bank2
 15900  1E2C  00B2               	movwf	floor@i^(0+256)
 15901  1E2D  0021               	movlb	1	; select bank1
 15902  1E2E  0829               	movf	(?___altoft+1)^(0+128),w
 15903  1E2F  0022               	movlb	2	; select bank2
 15904  1E30  00B3               	movwf	(floor@i+1)^(0+256)
 15905  1E31  0021               	movlb	1	; select bank1
 15906  1E32  082A               	movf	(?___altoft+2)^(0+128),w
 15907  1E33  0022               	movlb	2	; select bank2
 15908  1E34  00B4               	movwf	(floor@i+2)^(0+256)
 15909  1E35  082E               	movf	floor@x^(0+256),w
 15910  1E36  0021               	movlb	1	; select bank1
 15911  1E37  00A0               	movwf	___ftge@ff1^(0+128)
 15912  1E38  0022               	movlb	2	; select bank2
 15913  1E39  082F               	movf	(floor@x+1)^(0+256),w
 15914  1E3A  0021               	movlb	1	; select bank1
 15915  1E3B  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15916  1E3C  0022               	movlb	2	; select bank2
 15917  1E3D  0830               	movf	(floor@x+2)^(0+256),w
 15918  1E3E  0021               	movlb	1	; select bank1
 15919  1E3F  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15920  1E40  0022               	movlb	2	; select bank2
 15921  1E41  0832               	movf	floor@i^(0+256),w
 15922  1E42  0021               	movlb	1	; select bank1
 15923  1E43  00A3               	movwf	___ftge@ff2^(0+128)
 15924  1E44  0022               	movlb	2	; select bank2
 15925  1E45  0833               	movf	(floor@i+1)^(0+256),w
 15926  1E46  0021               	movlb	1	; select bank1
 15927  1E47  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15928  1E48  0022               	movlb	2	; select bank2
 15929  1E49  0834               	movf	(floor@i+2)^(0+256),w
 15930  1E4A  0021               	movlb	1	; select bank1
 15931  1E4B  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15932  1E4C  31A0  20AA  319D   	fcall	___ftge
 15933  1E4F  1803               	btfsc	3,0
 15934  1E50  2E73               	goto	l8158
 15935  1E51  3000               	movlw	0
 15936  1E52  0021               	movlb	1	; select bank1
 15937  1E53  00C1               	movwf	___ftadd@f1^(0+128)
 15938  1E54  3080               	movlw	128
 15939  1E55  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 15940  1E56  30BF               	movlw	191
 15941  1E57  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 15942  1E58  0022               	movlb	2	; select bank2
 15943  1E59  0832               	movf	floor@i^(0+256),w
 15944  1E5A  0021               	movlb	1	; select bank1
 15945  1E5B  00C4               	movwf	___ftadd@f2^(0+128)
 15946  1E5C  0022               	movlb	2	; select bank2
 15947  1E5D  0833               	movf	(floor@i+1)^(0+256),w
 15948  1E5E  0021               	movlb	1	; select bank1
 15949  1E5F  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 15950  1E60  0022               	movlb	2	; select bank2
 15951  1E61  0834               	movf	(floor@i+2)^(0+256),w
 15952  1E62  0021               	movlb	1	; select bank1
 15953  1E63  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 15954  1E64  3190  2035         	fcall	___ftadd
 15955  1E66  0021               	movlb	1	; select bank1
 15956  1E67  0841               	movf	?___ftadd^(0+128),w
 15957  1E68  0022               	movlb	2	; select bank2
 15958  1E69  00AE               	movwf	?_floor^(0+256)
 15959  1E6A  0021               	movlb	1	; select bank1
 15960  1E6B  0842               	movf	(?___ftadd+1)^(0+128),w
 15961  1E6C  0022               	movlb	2	; select bank2
 15962  1E6D  00AF               	movwf	(?_floor+1)^(0+256)
 15963  1E6E  0021               	movlb	1	; select bank1
 15964  1E6F  0843               	movf	(?___ftadd+2)^(0+128),w
 15965  1E70  0022               	movlb	2	; select bank2
 15966  1E71  00B0               	movwf	(?_floor+2)^(0+256)
 15967  1E72  0008               	return
 15968  1E73                     l8158:	
 15969  1E73  0022               	movlb	2	; select bank2
 15970  1E74  0832               	movf	floor@i^(0+256),w
 15971  1E75  00AE               	movwf	?_floor^(0+256)
 15972  1E76  0833               	movf	(floor@i+1)^(0+256),w
 15973  1E77  00AF               	movwf	(?_floor+1)^(0+256)
 15974  1E78  0834               	movf	(floor@i+2)^(0+256),w
 15975  1E79  00B0               	movwf	(?_floor+2)^(0+256)
 15976  1E7A  0008               	return
 15977  1E7B                     __end_of_floor:	
 15978                           
 15979                           	psect	text48
 15980  219D                     __ptext48:	
 15981 ;; *************** function _frexp *****************
 15982 ;; Defined at:
 15983 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
 15984 ;; Parameters:    Size  Location     Type
 15985 ;;  value           3    0[BANK1 ] int 
 15986 ;;  eptr            1    3[BANK1 ] PTR int 
 15987 ;;		 -> log@exponent(2), floor@expon(2), 
 15988 ;; Auto vars:     Size  Location     Type
 15989 ;;		None
 15990 ;; Return value:  Size  Location     Type
 15991 ;;                  3    0[BANK1 ] PTR int 
 15992 ;; Registers used:
 15993 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15994 ;; Tracked objects:
 15995 ;;		On entry : 0/0
 15996 ;;		On exit  : 0/0
 15997 ;;		Unchanged: 0/0
 15998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15999 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16000 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16001 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16002 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16003 ;;Total ram usage:        6 bytes
 16004 ;; Hardware stack levels used:    1
 16005 ;; Hardware stack levels required when called:    3
 16006 ;; This function calls:
 16007 ;;		Nothing
 16008 ;; This function is called by:
 16009 ;;		_floor
 16010 ;;		_log
 16011 ;; This function uses a non-reentrant model
 16012 ;;
 16013                           
 16014                           
 16015                           ;psect for function _frexp
 16016  219D                     _frexp:	
 16017                           
 16018                           ;incstack = 0
 16019                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
 16020  219D  0021               	movlb	1	; select bank1
 16021  219E  0822               	movf	(frexp@value+2)^(0+128),w
 16022  219F  0421               	iorwf	(frexp@value+1)^(0+128),w
 16023  21A0  0420               	iorwf	frexp@value^(0+128),w
 16024  21A1  1D03               	skipz
 16025  21A2  29B1               	goto	l8010
 16026  21A3  0823               	movf	frexp@eptr^(0+128),w
 16027  21A4  0086               	movwf	6
 16028  21A5  3001               	movlw	1	; select bank2/3
 16029  21A6  0087               	movwf	7
 16030  21A7  3000               	movlw	0
 16031  21A8  3FC0               	movwi [0]fsr1
 16032  21A9  3FC1               	movwi [1]fsr1
 16033  21AA  3000               	movlw	0
 16034  21AB  00A0               	movwf	?_frexp^(0+128)
 16035  21AC  3000               	movlw	0
 16036  21AD  00A1               	movwf	(?_frexp+1)^(0+128)
 16037  21AE  3000               	movlw	0
 16038  21AF  00A2               	movwf	(?_frexp+2)^(0+128)
 16039  21B0  0008               	return
 16040  21B1                     l8010:	
 16041  21B1  0822               	movf	(frexp@value^(0+128)+2),w
 16042  21B2  397F               	andlw	127
 16043  21B3  00A4               	movwf	??_frexp^(0+128)
 16044  21B4  01A5               	clrf	(??_frexp^(0+128)+1)
 16045  21B5  35A4               	lslf	??_frexp^(0+128),f
 16046  21B6  0DA5               	rlf	(??_frexp^(0+128)+1),f
 16047  21B7  0823               	movf	frexp@eptr^(0+128),w
 16048  21B8  0086               	movwf	6
 16049  21B9  3001               	movlw	1	; select bank2/3
 16050  21BA  0087               	movwf	7
 16051  21BB  0824               	movf	??_frexp^(0+128),w
 16052  21BC  3FC0               	movwi [0]fsr1
 16053  21BD  0825               	movf	(??_frexp+1)^(0+128),w
 16054  21BE  3FC1               	movwi [1]fsr1
 16055  21BF  0D21               	rlf	(frexp@value^(0+128)+1),w
 16056  21C0  0D21               	rlf	(frexp@value^(0+128)+1),w
 16057  21C1  3901               	andlw	1
 16058  21C2  00A4               	movwf	??_frexp^(0+128)
 16059  21C3  01A5               	clrf	(??_frexp^(0+128)+1)
 16060  21C4  0823               	movf	frexp@eptr^(0+128),w
 16061  21C5  0086               	movwf	6
 16062  21C6  3001               	movlw	1	; select bank2/3
 16063  21C7  0087               	movwf	7
 16064  21C8  0824               	movf	??_frexp^(0+128),w
 16065  21C9  0481               	iorwf	1,f
 16066  21CA  3141               	addfsr 1,1
 16067  21CB  0825               	movf	(??_frexp+1)^(0+128),w
 16068  21CC  0481               	iorwf	1,f
 16069  21CD  0823               	movf	frexp@eptr^(0+128),w
 16070  21CE  0086               	movwf	6
 16071  21CF  3001               	movlw	1	; select bank2/3
 16072  21D0  0087               	movwf	7
 16073  21D1  3082               	movlw	130
 16074  21D2  0781               	addwf	1,f
 16075  21D3  3141               	addfsr 1,1
 16076  21D4  30FF               	movlw	255
 16077  21D5  3D81               	addwfc	1,f
 16078  21D6  317F               	addfsr 1,-1
 16079  21D7  0822               	movf	(frexp@value^(0+128)+2),w
 16080  21D8  3980               	andlw	-128
 16081  21D9  383F               	iorlw	63
 16082  21DA  00A2               	movwf	(frexp@value^(0+128)+2)
 16083  21DB  13A1               	bcf	(frexp@value^(0+128)+1),7
 16084  21DC  0008               	return
 16085  21DD                     __end_of_frexp:	
 16086                           
 16087                           	psect	text49
 16088  19AF                     __ptext49:	
 16089 ;; *************** function ___fttol *****************
 16090 ;; Defined at:
 16091 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
 16092 ;; Parameters:    Size  Location     Type
 16093 ;;  f1              3    0[BANK2 ] float 
 16094 ;; Auto vars:     Size  Location     Type
 16095 ;;  lval            4    9[BANK2 ] unsigned long 
 16096 ;;  exp1            1   13[BANK2 ] unsigned char 
 16097 ;;  sign1           1    8[BANK2 ] unsigned char 
 16098 ;; Return value:  Size  Location     Type
 16099 ;;                  4    0[BANK2 ] long 
 16100 ;; Registers used:
 16101 ;;		wreg, status,2, status,0
 16102 ;; Tracked objects:
 16103 ;;		On entry : 0/0
 16104 ;;		On exit  : 0/0
 16105 ;;		Unchanged: 0/0
 16106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16107 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16108 ;;      Locals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16109 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16110 ;;      Totals:         0       0       0      14       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16111 ;;Total ram usage:       14 bytes
 16112 ;; Hardware stack levels used:    1
 16113 ;; Hardware stack levels required when called:    3
 16114 ;; This function calls:
 16115 ;;		Nothing
 16116 ;; This function is called by:
 16117 ;;		_main
 16118 ;;		_set_subdivision
 16119 ;;		_scaleA100kPot
 16120 ;;		_scaleA10kPot
 16121 ;;		_scaleiA10kPot
 16122 ;;		_getModulationDelayTime
 16123 ;;		_modCos
 16124 ;;		_modTri
 16125 ;;		_modSaw
 16126 ;;		_pow
 16127 ;;		_exp
 16128 ;;		_floor
 16129 ;;		_scaleiA100kPot
 16130 ;; This function uses a non-reentrant model
 16131 ;;
 16132                           
 16133                           
 16134                           ;psect for function ___fttol
 16135  19AF                     ___fttol:	
 16136                           
 16137                           ;incstack = 0
 16138                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 16139  19AF  0022               	movlb	2	; select bank2
 16140  19B0  0820               	movf	___fttol@f1^(0+256),w
 16141  19B1  00A4               	movwf	??___fttol^(0+256)
 16142  19B2  0821               	movf	(___fttol@f1+1)^(0+256),w
 16143  19B3  00A5               	movwf	(??___fttol^(0+256)+1)
 16144  19B4  0822               	movf	(___fttol@f1+2)^(0+256),w
 16145  19B5  00A6               	movwf	(??___fttol^(0+256)+2)
 16146  19B6  1003               	clrc
 16147  19B7  0D25               	rlf	(??___fttol^(0+256)+1),w
 16148  19B8  0D26               	rlf	(??___fttol^(0+256)+2),w
 16149  19B9  00A7               	movwf	(??___fttol+3)^(0+256)
 16150  19BA  0827               	movf	(??___fttol+3)^(0+256),w
 16151  19BB  00AD               	movwf	___fttol@exp1^(0+256)
 16152  19BC  082D               	movf	___fttol@exp1^(0+256),w
 16153  19BD  1D03               	btfss	3,2
 16154  19BE  29C8               	goto	l7966
 16155  19BF  3000               	movlw	0
 16156  19C0  00A3               	movwf	(?___fttol+3)^(0+256)
 16157  19C1  3000               	movlw	0
 16158  19C2  00A2               	movwf	(?___fttol+2)^(0+256)
 16159  19C3  3000               	movlw	0
 16160  19C4  00A1               	movwf	(?___fttol+1)^(0+256)
 16161  19C5  3000               	movlw	0
 16162  19C6  00A0               	movwf	?___fttol^(0+256)
 16163  19C7  0008               	return
 16164  19C8                     l7966:	
 16165  19C8  0820               	movf	___fttol@f1^(0+256),w
 16166  19C9  00A4               	movwf	??___fttol^(0+256)
 16167  19CA  0821               	movf	(___fttol@f1+1)^(0+256),w
 16168  19CB  00A5               	movwf	(??___fttol^(0+256)+1)
 16169  19CC  0822               	movf	(___fttol@f1+2)^(0+256),w
 16170  19CD  00A6               	movwf	(??___fttol^(0+256)+2)
 16171  19CE  3017               	movlw	23
 16172  19CF                     u8365:	
 16173  19CF  36A6               	lsrf	(??___fttol^(0+256)+2),f
 16174  19D0  0CA5               	rrf	(??___fttol^(0+256)+1),f
 16175  19D1  0CA4               	rrf	??___fttol^(0+256),f
 16176  19D2  0B89               	decfsz	9,f
 16177  19D3  29CF               	goto	u8365
 16178  19D4  0824               	movf	??___fttol^(0+256),w
 16179  19D5  00A7               	movwf	(??___fttol+3)^(0+256)
 16180  19D6  0827               	movf	(??___fttol+3)^(0+256),w
 16181  19D7  00A8               	movwf	___fttol@sign1^(0+256)
 16182  19D8  17A1               	bsf	(___fttol@f1^(0+256)+1),7
 16183  19D9  30FF               	movlw	255
 16184  19DA  05A0               	andwf	___fttol@f1^(0+256),f
 16185  19DB  30FF               	movlw	255
 16186  19DC  05A1               	andwf	(___fttol@f1+1)^(0+256),f
 16187  19DD  3000               	movlw	0
 16188  19DE  05A2               	andwf	(___fttol@f1+2)^(0+256),f
 16189  19DF  0820               	movf	___fttol@f1^(0+256),w
 16190  19E0  00A9               	movwf	___fttol@lval^(0+256)
 16191  19E1  0821               	movf	(___fttol@f1+1)^(0+256),w
 16192  19E2  00AA               	movwf	(___fttol@lval^(0+256)+1)
 16193  19E3  0822               	movf	(___fttol@f1+2)^(0+256),w
 16194  19E4  00AB               	movwf	(___fttol@lval^(0+256)+2)
 16195  19E5  01AC               	clrf	(___fttol@lval^(0+256)+3)
 16196  19E6  308E               	movlw	142
 16197  19E7  02AD               	subwf	___fttol@exp1^(0+256),f
 16198  19E8  1FAD               	btfss	___fttol@exp1^(0+256),7
 16199  19E9  2A06               	goto	l7986
 16200  19EA  082D               	movf	___fttol@exp1^(0+256),w
 16201  19EB  3A80               	xorlw	128
 16202  19EC  3E8F               	addlw	143
 16203  19ED  1803               	skipnc
 16204  19EE  29F8               	goto	l7984
 16205  19EF  3000               	movlw	0
 16206  19F0  00A3               	movwf	(?___fttol+3)^(0+256)
 16207  19F1  3000               	movlw	0
 16208  19F2  00A2               	movwf	(?___fttol+2)^(0+256)
 16209  19F3  3000               	movlw	0
 16210  19F4  00A1               	movwf	(?___fttol+1)^(0+256)
 16211  19F5  3000               	movlw	0
 16212  19F6  00A0               	movwf	?___fttol^(0+256)
 16213  19F7  0008               	return
 16214  19F8                     l7984:	
 16215  19F8  3001               	movlw	1
 16216  19F9                     u8395:	
 16217  19F9  36AC               	lsrf	(___fttol@lval+3)^(0+256),f
 16218  19FA  0CAB               	rrf	(___fttol@lval+2)^(0+256),f
 16219  19FB  0CAA               	rrf	(___fttol@lval+1)^(0+256),f
 16220  19FC  0CA9               	rrf	___fttol@lval^(0+256),f
 16221  19FD  0B89               	decfsz	9,f
 16222  19FE  29F9               	goto	u8395
 16223  19FF  3001               	movlw	1
 16224  1A00  00A4               	movwf	??___fttol^(0+256)
 16225  1A01  0824               	movf	??___fttol^(0+256),w
 16226  1A02  07AD               	addwf	___fttol@exp1^(0+256),f
 16227  1A03  1903               	btfsc	3,2
 16228  1A04  2A1F               	goto	l7994
 16229  1A05  29F8               	goto	l7984
 16230  1A06                     l7986:	
 16231  1A06  3018               	movlw	24
 16232  1A07  022D               	subwf	___fttol@exp1^(0+256),w
 16233  1A08  1C03               	skipc
 16234  1A09  2A1C               	goto	l2248
 16235  1A0A  3000               	movlw	0
 16236  1A0B  00A3               	movwf	(?___fttol+3)^(0+256)
 16237  1A0C  3000               	movlw	0
 16238  1A0D  00A2               	movwf	(?___fttol+2)^(0+256)
 16239  1A0E  3000               	movlw	0
 16240  1A0F  00A1               	movwf	(?___fttol+1)^(0+256)
 16241  1A10  3000               	movlw	0
 16242  1A11  00A0               	movwf	?___fttol^(0+256)
 16243  1A12  0008               	return
 16244  1A13                     l7992:	
 16245  1A13  3001               	movlw	1
 16246  1A14                     u8425:	
 16247  1A14  35A9               	lslf	___fttol@lval^(0+256),f
 16248  1A15  0DAA               	rlf	(___fttol@lval+1)^(0+256),f
 16249  1A16  0DAB               	rlf	(___fttol@lval+2)^(0+256),f
 16250  1A17  0DAC               	rlf	(___fttol@lval+3)^(0+256),f
 16251  1A18  0B89               	decfsz	9,f
 16252  1A19  2A14               	goto	u8425
 16253  1A1A  3001               	movlw	1
 16254  1A1B  02AD               	subwf	___fttol@exp1^(0+256),f
 16255  1A1C                     l2248:	
 16256  1A1C  082D               	movf	___fttol@exp1^(0+256),w
 16257  1A1D  1D03               	btfss	3,2
 16258  1A1E  2A13               	goto	l7992
 16259  1A1F                     l7994:	
 16260  1A1F  0828               	movf	___fttol@sign1^(0+256),w
 16261  1A20  1903               	btfsc	3,2
 16262  1A21  2A2D               	goto	l7998
 16263  1A22  09A9               	comf	___fttol@lval^(0+256),f
 16264  1A23  09AA               	comf	(___fttol@lval+1)^(0+256),f
 16265  1A24  09AB               	comf	(___fttol@lval+2)^(0+256),f
 16266  1A25  09AC               	comf	(___fttol@lval+3)^(0+256),f
 16267  1A26  0AA9               	incf	___fttol@lval^(0+256),f
 16268  1A27  1903               	skipnz
 16269  1A28  0AAA               	incf	(___fttol@lval+1)^(0+256),f
 16270  1A29  1903               	skipnz
 16271  1A2A  0AAB               	incf	(___fttol@lval+2)^(0+256),f
 16272  1A2B  1903               	skipnz
 16273  1A2C  0AAC               	incf	(___fttol@lval+3)^(0+256),f
 16274  1A2D                     l7998:	
 16275  1A2D  082C               	movf	(___fttol@lval+3)^(0+256),w
 16276  1A2E  00A3               	movwf	(?___fttol+3)^(0+256)
 16277  1A2F  082B               	movf	(___fttol@lval+2)^(0+256),w
 16278  1A30  00A2               	movwf	(?___fttol+2)^(0+256)
 16279  1A31  082A               	movf	(___fttol@lval+1)^(0+256),w
 16280  1A32  00A1               	movwf	(?___fttol+1)^(0+256)
 16281  1A33  0829               	movf	___fttol@lval^(0+256),w
 16282  1A34  00A0               	movwf	?___fttol^(0+256)
 16283  1A35  0008               	return
 16284  1A36                     __end_of___fttol:	
 16285                           
 16286                           	psect	text50
 16287  20AA                     __ptext50:	
 16288 ;; *************** function ___ftge *****************
 16289 ;; Defined at:
 16290 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftge.c"
 16291 ;; Parameters:    Size  Location     Type
 16292 ;;  ff1             3    0[BANK1 ] float 
 16293 ;;  ff2             3    3[BANK1 ] float 
 16294 ;; Auto vars:     Size  Location     Type
 16295 ;;		None
 16296 ;; Return value:  Size  Location     Type
 16297 ;;		None               void
 16298 ;; Registers used:
 16299 ;;		wreg, status,2, status,0
 16300 ;; Tracked objects:
 16301 ;;		On entry : 0/0
 16302 ;;		On exit  : 0/0
 16303 ;;		Unchanged: 0/0
 16304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16305 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16307 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16308 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16309 ;;Total ram usage:        9 bytes
 16310 ;; Hardware stack levels used:    1
 16311 ;; Hardware stack levels required when called:    3
 16312 ;; This function calls:
 16313 ;;		Nothing
 16314 ;; This function is called by:
 16315 ;;		_modCos
 16316 ;;		_modTri
 16317 ;;		_modSaw
 16318 ;;		_modSquare
 16319 ;;		_cos
 16320 ;;		_pow
 16321 ;;		_sin
 16322 ;;		_exp
 16323 ;;		_floor
 16324 ;;		_ldexp
 16325 ;;		_log
 16326 ;; This function uses a non-reentrant model
 16327 ;;
 16328                           
 16329                           
 16330                           ;psect for function ___ftge
 16331  20AA                     ___ftge:	
 16332                           
 16333                           ;incstack = 0
 16334                           ; Regs used in ___ftge: [wreg+status,2+status,0]
 16335  20AA  0021               	movlb	1	; select bank1
 16336  20AB  1FA2               	btfss	(___ftge@ff1+2)^(0+128),7
 16337  20AC  28C1               	goto	l7886
 16338  20AD  0920               	comf	___ftge@ff1^(0+128),w
 16339  20AE  00A6               	movwf	??___ftge^(0+128)
 16340  20AF  0921               	comf	(___ftge@ff1+1)^(0+128),w
 16341  20B0  00A7               	movwf	(??___ftge^(0+128)+1)
 16342  20B1  0922               	comf	(___ftge@ff1+2)^(0+128),w
 16343  20B2  00A8               	movwf	(??___ftge^(0+128)+2)
 16344  20B3  0AA6               	incf	??___ftge^(0+128),f
 16345  20B4  1903               	skipnz
 16346  20B5  0AA7               	incf	(??___ftge^(0+128)+1),f
 16347  20B6  1903               	skipnz
 16348  20B7  0AA8               	incf	(??___ftge^(0+128)+2),f
 16349  20B8  3000               	movlw	0
 16350  20B9  0726               	addwf	??___ftge^(0+128),w
 16351  20BA  00A0               	movwf	___ftge@ff1^(0+128)
 16352  20BB  3000               	movlw	0
 16353  20BC  3D27               	addwfc	(??___ftge+1)^(0+128),w
 16354  20BD  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 16355  20BE  3080               	movlw	128
 16356  20BF  3D28               	addwfc	(??___ftge+2)^(0+128),w
 16357  20C0  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 16358  20C1                     l7886:	
 16359  20C1  1FA5               	btfss	(___ftge@ff2+2)^(0+128),7
 16360  20C2  28D7               	goto	l7890
 16361  20C3  0923               	comf	___ftge@ff2^(0+128),w
 16362  20C4  00A6               	movwf	??___ftge^(0+128)
 16363  20C5  0924               	comf	(___ftge@ff2+1)^(0+128),w
 16364  20C6  00A7               	movwf	(??___ftge^(0+128)+1)
 16365  20C7  0925               	comf	(___ftge@ff2+2)^(0+128),w
 16366  20C8  00A8               	movwf	(??___ftge^(0+128)+2)
 16367  20C9  0AA6               	incf	??___ftge^(0+128),f
 16368  20CA  1903               	skipnz
 16369  20CB  0AA7               	incf	(??___ftge^(0+128)+1),f
 16370  20CC  1903               	skipnz
 16371  20CD  0AA8               	incf	(??___ftge^(0+128)+2),f
 16372  20CE  3000               	movlw	0
 16373  20CF  0726               	addwf	??___ftge^(0+128),w
 16374  20D0  00A3               	movwf	___ftge@ff2^(0+128)
 16375  20D1  3000               	movlw	0
 16376  20D2  3D27               	addwfc	(??___ftge+1)^(0+128),w
 16377  20D3  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 16378  20D4  3080               	movlw	128
 16379  20D5  3D28               	addwfc	(??___ftge+2)^(0+128),w
 16380  20D6  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 16381  20D7                     l7890:	
 16382  20D7  3080               	movlw	128
 16383  20D8  06A2               	xorwf	(___ftge@ff1+2)^(0+128),f
 16384  20D9  3080               	movlw	128
 16385  20DA  06A5               	xorwf	(___ftge@ff2+2)^(0+128),f
 16386  20DB  0825               	movf	(___ftge@ff2+2)^(0+128),w
 16387  20DC  0222               	subwf	(___ftge@ff1+2)^(0+128),w
 16388  20DD  1D03               	skipz
 16389  20DE  0008               	return
 16390  20DF  0824               	movf	(___ftge@ff2+1)^(0+128),w
 16391  20E0  0221               	subwf	(___ftge@ff1+1)^(0+128),w
 16392  20E1  1D03               	skipz
 16393  20E2  0008               	return
 16394  20E3  0823               	movf	___ftge@ff2^(0+128),w
 16395  20E4  0220               	subwf	___ftge@ff1^(0+128),w
 16396  20E5  0008               	return
 16397  20E6                     __end_of___ftge:	
 16398                           
 16399                           	psect	text51
 16400  20E6                     __ptext51:	
 16401 ;; *************** function ___altoft *****************
 16402 ;; Defined at:
 16403 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\altoft.c"
 16404 ;; Parameters:    Size  Location     Type
 16405 ;;  c               4    8[BANK1 ] long 
 16406 ;; Auto vars:     Size  Location     Type
 16407 ;;  sign            1   15[BANK1 ] unsigned char 
 16408 ;;  exp             1   14[BANK1 ] unsigned char 
 16409 ;; Return value:  Size  Location     Type
 16410 ;;                  3    8[BANK1 ] float 
 16411 ;; Registers used:
 16412 ;;		wreg, status,2, status,0, pclath, cstack
 16413 ;; Tracked objects:
 16414 ;;		On entry : 0/0
 16415 ;;		On exit  : 0/0
 16416 ;;		Unchanged: 0/0
 16417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16418 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16419 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16420 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16421 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16422 ;;Total ram usage:        8 bytes
 16423 ;; Hardware stack levels used:    1
 16424 ;; Hardware stack levels required when called:    4
 16425 ;; This function calls:
 16426 ;;		___ftpack
 16427 ;; This function is called by:
 16428 ;;		_getModulationDelayTime
 16429 ;;		_floor
 16430 ;; This function uses a non-reentrant model
 16431 ;;
 16432                           
 16433                           
 16434                           ;psect for function ___altoft
 16435  20E6                     ___altoft:	
 16436                           
 16437                           ;incstack = 0
 16438                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
 16439  20E6  0021               	movlb	1	; select bank1
 16440  20E7  01AF               	clrf	___altoft@sign^(0+128)
 16441  20E8  308E               	movlw	142
 16442  20E9  00AC               	movwf	??___altoft^(0+128)
 16443  20EA  082C               	movf	??___altoft^(0+128),w
 16444  20EB  00AE               	movwf	___altoft@exp^(0+128)
 16445  20EC  1FAB               	btfss	(___altoft@c+3)^(0+128),7
 16446  20ED  28FB               	goto	l7806
 16447  20EE  09A8               	comf	___altoft@c^(0+128),f
 16448  20EF  09A9               	comf	(___altoft@c+1)^(0+128),f
 16449  20F0  09AA               	comf	(___altoft@c+2)^(0+128),f
 16450  20F1  09AB               	comf	(___altoft@c+3)^(0+128),f
 16451  20F2  0AA8               	incf	___altoft@c^(0+128),f
 16452  20F3  1903               	skipnz
 16453  20F4  0AA9               	incf	(___altoft@c+1)^(0+128),f
 16454  20F5  1903               	skipnz
 16455  20F6  0AAA               	incf	(___altoft@c+2)^(0+128),f
 16456  20F7  1903               	skipnz
 16457  20F8  0AAB               	incf	(___altoft@c+3)^(0+128),f
 16458  20F9  01AF               	clrf	___altoft@sign^(0+128)
 16459  20FA  0AAF               	incf	___altoft@sign^(0+128),f
 16460  20FB                     l7806:	
 16461  20FB  30FF               	movlw	255
 16462  20FC  052B               	andwf	(___altoft@c+3)^(0+128),w
 16463  20FD  1903               	btfsc	3,2
 16464  20FE  290B               	goto	l7808
 16465  20FF  3001               	movlw	1
 16466  2100                     u7945:	
 16467  2100  36AB               	lsrf	(___altoft@c+3)^(0+128),f
 16468  2101  0CAA               	rrf	(___altoft@c+2)^(0+128),f
 16469  2102  0CA9               	rrf	(___altoft@c+1)^(0+128),f
 16470  2103  0CA8               	rrf	___altoft@c^(0+128),f
 16471  2104  0B89               	decfsz	9,f
 16472  2105  2900               	goto	u7945
 16473  2106  3001               	movlw	1
 16474  2107  00AC               	movwf	??___altoft^(0+128)
 16475  2108  082C               	movf	??___altoft^(0+128),w
 16476  2109  07AE               	addwf	___altoft@exp^(0+128),f
 16477  210A  28FB               	goto	l7806
 16478  210B                     l7808:	
 16479  210B  0828               	movf	___altoft@c^(0+128),w
 16480  210C  00A0               	movwf	___ftpack@arg^(0+128)
 16481  210D  0829               	movf	(___altoft@c+1)^(0+128),w
 16482  210E  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 16483  210F  082A               	movf	(___altoft@c+2)^(0+128),w
 16484  2110  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 16485  2111  082E               	movf	___altoft@exp^(0+128),w
 16486  2112  00AC               	movwf	??___altoft^(0+128)
 16487  2113  082C               	movf	??___altoft^(0+128),w
 16488  2114  00A3               	movwf	___ftpack@exp^(0+128)
 16489  2115  082F               	movf	___altoft@sign^(0+128),w
 16490  2116  00AD               	movwf	(??___altoft+1)^(0+128)
 16491  2117  082D               	movf	(??___altoft+1)^(0+128),w
 16492  2118  00A4               	movwf	___ftpack@sign^(0+128)
 16493  2119  31A5  25B6         	fcall	___ftpack
 16494  211B  0021               	movlb	1	; select bank1
 16495  211C  0820               	movf	?___ftpack^(0+128),w
 16496  211D  00A8               	movwf	?___altoft^(0+128)
 16497  211E  0821               	movf	(?___ftpack+1)^(0+128),w
 16498  211F  00A9               	movwf	(?___altoft+1)^(0+128)
 16499  2120  0822               	movf	(?___ftpack+2)^(0+128),w
 16500  2121  00AA               	movwf	(?___altoft+2)^(0+128)
 16501  2122  0008               	return
 16502  2123                     __end_of___altoft:	
 16503                           
 16504                           	psect	text52
 16505  261B                     __ptext52:	
 16506 ;; *************** function _eval_poly *****************
 16507 ;; Defined at:
 16508 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\evalpoly.c"
 16509 ;; Parameters:    Size  Location     Type
 16510 ;;  x               3   20[BANK2 ] float 
 16511 ;;  d               2   23[BANK2 ] PTR const 
 16512 ;;		 -> log@coeff(27), exp@coeff(30), sin@coeff_a(15), sin@coeff_b(12), 
 16513 ;;  n               2   25[BANK2 ] int 
 16514 ;; Auto vars:     Size  Location     Type
 16515 ;;  res             3   27[BANK2 ] int 
 16516 ;; Return value:  Size  Location     Type
 16517 ;;                  3   20[BANK2 ] int 
 16518 ;; Registers used:
 16519 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 16520 ;; Tracked objects:
 16521 ;;		On entry : 0/0
 16522 ;;		On exit  : 0/0
 16523 ;;		Unchanged: 0/0
 16524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16525 ;;      Params:         0       0       0       7       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16526 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16528 ;;      Totals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16529 ;;Total ram usage:       10 bytes
 16530 ;; Hardware stack levels used:    1
 16531 ;; Hardware stack levels required when called:    5
 16532 ;; This function calls:
 16533 ;;		___ftadd
 16534 ;;		___ftmul
 16535 ;;		___wmul
 16536 ;; This function is called by:
 16537 ;;		_sin
 16538 ;;		_exp
 16539 ;;		_log
 16540 ;; This function uses a non-reentrant model
 16541 ;;
 16542                           
 16543                           
 16544                           ;psect for function _eval_poly
 16545  261B                     _eval_poly:	
 16546                           
 16547                           ;incstack = 0
 16548                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 16549  261B  0022               	movlb	2	; select bank2
 16550  261C  083A               	movf	(eval_poly@n+1)^(0+256),w
 16551  261D  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 16552  261E  0839               	movf	eval_poly@n^(0+256),w
 16553  261F  00AE               	movwf	___wmul@multiplier^(0+256)
 16554  2620  3003               	movlw	3
 16555  2621  00B0               	movwf	___wmul@multiplicand^(0+256)
 16556  2622  3000               	movlw	0
 16557  2623  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 16558  2624  31AD  25C5  31A6   	fcall	___wmul
 16559  2627  0022               	movlb	2	; select bank2
 16560  2628  0837               	movf	eval_poly@d^(0+256),w
 16561  2629  072E               	addwf	?___wmul^(0+256),w
 16562  262A  0084               	movwf	4
 16563  262B  0838               	movf	(eval_poly@d+1)^(0+256),w
 16564  262C  3D2F               	addwfc	(?___wmul+1)^(0+256),w
 16565  262D  0085               	movwf	5
 16566  262E  3F00               	moviw [0]fsr0
 16567  262F  00BB               	movwf	eval_poly@res^(0+256)
 16568  2630  3F01               	moviw [1]fsr0
 16569  2631  00BC               	movwf	(eval_poly@res+1)^(0+256)
 16570  2632  3F02               	moviw [2]fsr0
 16571  2633                     L19:	
 16572  2633  00BD               	movwf	(eval_poly@res+2)^(0+256)
 16573  2634  0839               	movf	eval_poly@n^(0+256),w
 16574  2635  043A               	iorwf	(eval_poly@n+1)^(0+256),w
 16575  2636  1903               	btfsc	3,2
 16576  2637  2E86               	goto	l8168
 16577  2638  30FF               	movlw	255
 16578  2639  07B9               	addwf	eval_poly@n^(0+256),f
 16579  263A  30FF               	movlw	255
 16580  263B  3DBA               	addwfc	(eval_poly@n+1)^(0+256),f
 16581  263C  083A               	movf	(eval_poly@n+1)^(0+256),w
 16582  263D  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 16583  263E  0839               	movf	eval_poly@n^(0+256),w
 16584  263F  00AE               	movwf	___wmul@multiplier^(0+256)
 16585  2640  3003               	movlw	3
 16586  2641  00B0               	movwf	___wmul@multiplicand^(0+256)
 16587  2642  3000               	movlw	0
 16588  2643  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 16589  2644  31AD  25C5  31A6   	fcall	___wmul
 16590  2647  0022               	movlb	2	; select bank2
 16591  2648  0837               	movf	eval_poly@d^(0+256),w
 16592  2649  072E               	addwf	?___wmul^(0+256),w
 16593  264A  0084               	movwf	4
 16594  264B  0838               	movf	(eval_poly@d+1)^(0+256),w
 16595  264C  3D2F               	addwfc	(?___wmul+1)^(0+256),w
 16596  264D  0085               	movwf	5
 16597  264E  3F00               	moviw [0]fsr0
 16598  264F  0021               	movlb	1	; select bank1
 16599  2650  00C1               	movwf	___ftadd@f1^(0+128)
 16600  2651  3F01               	moviw [1]fsr0
 16601  2652  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 16602  2653  3F02               	moviw [2]fsr0
 16603  2654  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 16604  2655  0022               	movlb	2	; select bank2
 16605  2656  083B               	movf	eval_poly@res^(0+256),w
 16606  2657  0021               	movlb	1	; select bank1
 16607  2658  00AE               	movwf	___ftmul@f1^(0+128)
 16608  2659  0022               	movlb	2	; select bank2
 16609  265A  083C               	movf	(eval_poly@res+1)^(0+256),w
 16610  265B  0021               	movlb	1	; select bank1
 16611  265C  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 16612  265D  0022               	movlb	2	; select bank2
 16613  265E  083D               	movf	(eval_poly@res+2)^(0+256),w
 16614  265F  0021               	movlb	1	; select bank1
 16615  2660  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 16616  2661  0022               	movlb	2	; select bank2
 16617  2662  0834               	movf	eval_poly@x^(0+256),w
 16618  2663  0021               	movlb	1	; select bank1
 16619  2664  00B1               	movwf	___ftmul@f2^(0+128)
 16620  2665  0022               	movlb	2	; select bank2
 16621  2666  0835               	movf	(eval_poly@x+1)^(0+256),w
 16622  2667  0021               	movlb	1	; select bank1
 16623  2668  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 16624  2669  0022               	movlb	2	; select bank2
 16625  266A  0836               	movf	(eval_poly@x+2)^(0+256),w
 16626  266B  0021               	movlb	1	; select bank1
 16627  266C  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 16628  266D  319E  267B  31A6   	fcall	___ftmul
 16629  2670  0021               	movlb	1	; select bank1
 16630  2671  082E               	movf	?___ftmul^(0+128),w
 16631  2672  00C4               	movwf	___ftadd@f2^(0+128)
 16632  2673  082F               	movf	(?___ftmul+1)^(0+128),w
 16633  2674  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 16634  2675  0830               	movf	(?___ftmul+2)^(0+128),w
 16635  2676  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 16636  2677  3190  2035  31A6   	fcall	___ftadd
 16637  267A  0021               	movlb	1	; select bank1
 16638  267B  0841               	movf	?___ftadd^(0+128),w
 16639  267C  0022               	movlb	2	; select bank2
 16640  267D  00BB               	movwf	eval_poly@res^(0+256)
 16641  267E  0021               	movlb	1	; select bank1
 16642  267F  0842               	movf	(?___ftadd+1)^(0+128),w
 16643  2680  0022               	movlb	2	; select bank2
 16644  2681  00BC               	movwf	(eval_poly@res+1)^(0+256)
 16645  2682  0021               	movlb	1	; select bank1
 16646  2683  0843               	movf	(?___ftadd+2)^(0+128),w
 16647  2684  0022               	movlb	2	; select bank2
 16648  2685  2E33               	goto	L19
 16649  2686                     l8168:	
 16650  2686  083B               	movf	eval_poly@res^(0+256),w
 16651  2687  00B4               	movwf	?_eval_poly^(0+256)
 16652  2688  083C               	movf	(eval_poly@res+1)^(0+256),w
 16653  2689  00B5               	movwf	(?_eval_poly+1)^(0+256)
 16654  268A  083D               	movf	(eval_poly@res+2)^(0+256),w
 16655  268B  00B6               	movwf	(?_eval_poly+2)^(0+256)
 16656  268C  0008               	return
 16657  268D                     __end_of_eval_poly:	
 16658                           
 16659                           	psect	text53
 16660  2DC5                     __ptext53:	
 16661 ;; *************** function ___wmul *****************
 16662 ;; Defined at:
 16663 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
 16664 ;; Parameters:    Size  Location     Type
 16665 ;;  multiplier      2   14[BANK2 ] unsigned int 
 16666 ;;  multiplicand    2   16[BANK2 ] unsigned int 
 16667 ;; Auto vars:     Size  Location     Type
 16668 ;;  product         2   18[BANK2 ] unsigned int 
 16669 ;; Return value:  Size  Location     Type
 16670 ;;                  2   14[BANK2 ] unsigned int 
 16671 ;; Registers used:
 16672 ;;		wreg, status,2, status,0
 16673 ;; Tracked objects:
 16674 ;;		On entry : 0/0
 16675 ;;		On exit  : 0/0
 16676 ;;		Unchanged: 0/0
 16677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16678 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16679 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16681 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16682 ;;Total ram usage:        6 bytes
 16683 ;; Hardware stack levels used:    1
 16684 ;; Hardware stack levels required when called:    3
 16685 ;; This function calls:
 16686 ;;		Nothing
 16687 ;; This function is called by:
 16688 ;;		_calcCosArray
 16689 ;;		_updateModulationArray
 16690 ;;		_modCos
 16691 ;;		_eval_poly
 16692 ;; This function uses a non-reentrant model
 16693 ;;
 16694                           
 16695                           
 16696                           ;psect for function ___wmul
 16697  2DC5                     ___wmul:	
 16698                           
 16699                           ;incstack = 0
 16700                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 16701  2DC5  0022               	movlb	2	; select bank2
 16702  2DC6  01B2               	clrf	___wmul@product^(0+256)
 16703  2DC7  01B3               	clrf	(___wmul@product+1)^(0+256)
 16704  2DC8                     l7784:	
 16705  2DC8  1C2E               	btfss	___wmul@multiplier^(0+256),0
 16706  2DC9  2DCE               	goto	l1990
 16707  2DCA  0830               	movf	___wmul@multiplicand^(0+256),w
 16708  2DCB  07B2               	addwf	___wmul@product^(0+256),f
 16709  2DCC  0831               	movf	(___wmul@multiplicand+1)^(0+256),w
 16710  2DCD  3DB3               	addwfc	(___wmul@product+1)^(0+256),f
 16711  2DCE                     l1990:	
 16712  2DCE  3001               	movlw	1
 16713  2DCF                     u7905:	
 16714  2DCF  35B0               	lslf	___wmul@multiplicand^(0+256),f
 16715  2DD0  0DB1               	rlf	(___wmul@multiplicand+1)^(0+256),f
 16716  2DD1  0B89               	decfsz	9,f
 16717  2DD2  2DCF               	goto	u7905
 16718  2DD3  3001               	movlw	1
 16719  2DD4                     u7915:	
 16720  2DD4  36AF               	lsrf	(___wmul@multiplier+1)^(0+256),f
 16721  2DD5  0CAE               	rrf	___wmul@multiplier^(0+256),f
 16722  2DD6  0B89               	decfsz	9,f
 16723  2DD7  2DD4               	goto	u7915
 16724  2DD8  082E               	movf	___wmul@multiplier^(0+256),w
 16725  2DD9  042F               	iorwf	(___wmul@multiplier+1)^(0+256),w
 16726  2DDA  1D03               	btfss	3,2
 16727  2DDB  2DC8               	goto	l7784
 16728  2DDC  0833               	movf	(___wmul@product+1)^(0+256),w
 16729  2DDD  00AF               	movwf	(?___wmul+1)^(0+256)
 16730  2DDE  0832               	movf	___wmul@product^(0+256),w
 16731  2DDF  00AE               	movwf	?___wmul^(0+256)
 16732  2DE0  0008               	return
 16733  2DE1                     __end_of___wmul:	
 16734                           
 16735                           	psect	text54
 16736  1E7B                     __ptext54:	
 16737 ;; *************** function ___ftmul *****************
 16738 ;; Defined at:
 16739 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
 16740 ;; Parameters:    Size  Location     Type
 16741 ;;  f1              3   14[BANK1 ] float 
 16742 ;;  f2              3   17[BANK1 ] float 
 16743 ;; Auto vars:     Size  Location     Type
 16744 ;;  f3_as_produc    3   25[BANK1 ] unsigned um
 16745 ;;  sign            1   29[BANK1 ] unsigned char 
 16746 ;;  cntr            1   28[BANK1 ] unsigned char 
 16747 ;;  exp             1   24[BANK1 ] unsigned char 
 16748 ;; Return value:  Size  Location     Type
 16749 ;;                  3   14[BANK1 ] float 
 16750 ;; Registers used:
 16751 ;;		wreg, status,2, status,0, pclath, cstack
 16752 ;; Tracked objects:
 16753 ;;		On entry : 0/0
 16754 ;;		On exit  : 0/0
 16755 ;;		Unchanged: 0/0
 16756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16757 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16758 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16759 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16760 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16761 ;;Total ram usage:       16 bytes
 16762 ;; Hardware stack levels used:    1
 16763 ;; Hardware stack levels required when called:    4
 16764 ;; This function calls:
 16765 ;;		___ftpack
 16766 ;; This function is called by:
 16767 ;;		_set_subdivision
 16768 ;;		_map
 16769 ;;		_scaleA100kPot
 16770 ;;		_scaleA10kPot
 16771 ;;		_scaleiA10kPot
 16772 ;;		_calcCosArray
 16773 ;;		_modCos
 16774 ;;		_modTri
 16775 ;;		_modSaw
 16776 ;;		_pow
 16777 ;;		_sin
 16778 ;;		_eval_poly
 16779 ;;		_exp
 16780 ;;		_log
 16781 ;;		_scalePotValue
 16782 ;;		_scaleiA100kPot
 16783 ;; This function uses a non-reentrant model
 16784 ;;
 16785                           
 16786                           
 16787                           ;psect for function ___ftmul
 16788  1E7B                     ___ftmul:	
 16789                           
 16790                           ;incstack = 0
 16791                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 16792  1E7B  0021               	movlb	1	; select bank1
 16793  1E7C  082E               	movf	___ftmul@f1^(0+128),w
 16794  1E7D  00B4               	movwf	??___ftmul^(0+128)
 16795  1E7E  082F               	movf	(___ftmul@f1+1)^(0+128),w
 16796  1E7F  00B5               	movwf	(??___ftmul^(0+128)+1)
 16797  1E80  0830               	movf	(___ftmul@f1+2)^(0+128),w
 16798  1E81  00B6               	movwf	(??___ftmul^(0+128)+2)
 16799  1E82  1003               	clrc
 16800  1E83  0D35               	rlf	(??___ftmul^(0+128)+1),w
 16801  1E84  0D36               	rlf	(??___ftmul^(0+128)+2),w
 16802  1E85  00B7               	movwf	(??___ftmul+3)^(0+128)
 16803  1E86  0837               	movf	(??___ftmul+3)^(0+128),w
 16804  1E87  00B8               	movwf	___ftmul@exp^(0+128)
 16805  1E88  0838               	movf	___ftmul@exp^(0+128),w
 16806  1E89  1D03               	btfss	3,2
 16807  1E8A  2E92               	goto	l7908
 16808  1E8B  3000               	movlw	0
 16809  1E8C  00AE               	movwf	?___ftmul^(0+128)
 16810  1E8D  3000               	movlw	0
 16811  1E8E  00AF               	movwf	(?___ftmul+1)^(0+128)
 16812  1E8F  3000               	movlw	0
 16813  1E90  00B0               	movwf	(?___ftmul+2)^(0+128)
 16814  1E91  0008               	return
 16815  1E92                     l7908:	
 16816  1E92  0831               	movf	___ftmul@f2^(0+128),w
 16817  1E93  00B4               	movwf	??___ftmul^(0+128)
 16818  1E94  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16819  1E95  00B5               	movwf	(??___ftmul^(0+128)+1)
 16820  1E96  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16821  1E97  00B6               	movwf	(??___ftmul^(0+128)+2)
 16822  1E98  1003               	clrc
 16823  1E99  0D35               	rlf	(??___ftmul^(0+128)+1),w
 16824  1E9A  0D36               	rlf	(??___ftmul^(0+128)+2),w
 16825  1E9B  00B7               	movwf	(??___ftmul+3)^(0+128)
 16826  1E9C  0837               	movf	(??___ftmul+3)^(0+128),w
 16827  1E9D  00BD               	movwf	___ftmul@sign^(0+128)
 16828  1E9E  083D               	movf	___ftmul@sign^(0+128),w
 16829  1E9F  1D03               	btfss	3,2
 16830  1EA0  2EA8               	goto	l7914
 16831  1EA1  3000               	movlw	0
 16832  1EA2  00AE               	movwf	?___ftmul^(0+128)
 16833  1EA3  3000               	movlw	0
 16834  1EA4  00AF               	movwf	(?___ftmul+1)^(0+128)
 16835  1EA5  3000               	movlw	0
 16836  1EA6  00B0               	movwf	(?___ftmul+2)^(0+128)
 16837  1EA7  0008               	return
 16838  1EA8                     l7914:	
 16839  1EA8  083D               	movf	___ftmul@sign^(0+128),w
 16840  1EA9  3E7B               	addlw	123
 16841  1EAA  00B4               	movwf	??___ftmul^(0+128)
 16842  1EAB  0834               	movf	??___ftmul^(0+128),w
 16843  1EAC  07B8               	addwf	___ftmul@exp^(0+128),f
 16844  1EAD  082E               	movf	___ftmul@f1^(0+128),w
 16845  1EAE  00B4               	movwf	??___ftmul^(0+128)
 16846  1EAF  082F               	movf	(___ftmul@f1+1)^(0+128),w
 16847  1EB0  00B5               	movwf	(??___ftmul^(0+128)+1)
 16848  1EB1  0830               	movf	(___ftmul@f1+2)^(0+128),w
 16849  1EB2  00B6               	movwf	(??___ftmul^(0+128)+2)
 16850  1EB3  3010               	movlw	16
 16851  1EB4                     u8245:	
 16852  1EB4  36B6               	lsrf	(??___ftmul^(0+128)+2),f
 16853  1EB5  0CB5               	rrf	(??___ftmul^(0+128)+1),f
 16854  1EB6  0CB4               	rrf	??___ftmul^(0+128),f
 16855  1EB7  0B89               	decfsz	9,f
 16856  1EB8  2EB4               	goto	u8245
 16857  1EB9  0834               	movf	??___ftmul^(0+128),w
 16858  1EBA  00B7               	movwf	(??___ftmul+3)^(0+128)
 16859  1EBB  0837               	movf	(??___ftmul+3)^(0+128),w
 16860  1EBC  00BD               	movwf	___ftmul@sign^(0+128)
 16861  1EBD  0831               	movf	___ftmul@f2^(0+128),w
 16862  1EBE  00B4               	movwf	??___ftmul^(0+128)
 16863  1EBF  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16864  1EC0  00B5               	movwf	(??___ftmul^(0+128)+1)
 16865  1EC1  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16866  1EC2  00B6               	movwf	(??___ftmul^(0+128)+2)
 16867  1EC3  3010               	movlw	16
 16868  1EC4                     u8255:	
 16869  1EC4  36B6               	lsrf	(??___ftmul^(0+128)+2),f
 16870  1EC5  0CB5               	rrf	(??___ftmul^(0+128)+1),f
 16871  1EC6  0CB4               	rrf	??___ftmul^(0+128),f
 16872  1EC7  0B89               	decfsz	9,f
 16873  1EC8  2EC4               	goto	u8255
 16874  1EC9  0834               	movf	??___ftmul^(0+128),w
 16875  1ECA  00B7               	movwf	(??___ftmul+3)^(0+128)
 16876  1ECB  0837               	movf	(??___ftmul+3)^(0+128),w
 16877  1ECC  06BD               	xorwf	___ftmul@sign^(0+128),f
 16878  1ECD  3080               	movlw	128
 16879  1ECE  00B4               	movwf	??___ftmul^(0+128)
 16880  1ECF  0834               	movf	??___ftmul^(0+128),w
 16881  1ED0  05BD               	andwf	___ftmul@sign^(0+128),f
 16882  1ED1  17AF               	bsf	(___ftmul@f1^(0+128)+1),7
 16883  1ED2  17B2               	bsf	(___ftmul@f2^(0+128)+1),7
 16884  1ED3  30FF               	movlw	255
 16885  1ED4  05B1               	andwf	___ftmul@f2^(0+128),f
 16886  1ED5  30FF               	movlw	255
 16887  1ED6  05B2               	andwf	(___ftmul@f2+1)^(0+128),f
 16888  1ED7  3000               	movlw	0
 16889  1ED8  05B3               	andwf	(___ftmul@f2+2)^(0+128),f
 16890  1ED9  3000               	movlw	0
 16891  1EDA  00B9               	movwf	___ftmul@f3_as_product^(0+128)
 16892  1EDB  3000               	movlw	0
 16893  1EDC  00BA               	movwf	(___ftmul@f3_as_product+1)^(0+128)
 16894  1EDD  3000               	movlw	0
 16895  1EDE  00BB               	movwf	(___ftmul@f3_as_product+2)^(0+128)
 16896  1EDF  3007               	movlw	7
 16897  1EE0  00B4               	movwf	??___ftmul^(0+128)
 16898  1EE1  0834               	movf	??___ftmul^(0+128),w
 16899  1EE2  00BC               	movwf	___ftmul@cntr^(0+128)
 16900  1EE3                     l7926:	
 16901  1EE3  1C2E               	btfss	___ftmul@f1^(0+128),0
 16902  1EE4  2EEB               	goto	l7930
 16903  1EE5  0831               	movf	___ftmul@f2^(0+128),w
 16904  1EE6  07B9               	addwf	___ftmul@f3_as_product^(0+128),f
 16905  1EE7  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16906  1EE8  3DBA               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
 16907  1EE9  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16908  1EEA  3DBB               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
 16909  1EEB                     l7930:	
 16910  1EEB  3001               	movlw	1
 16911  1EEC                     u8275:	
 16912  1EEC  36B0               	lsrf	(___ftmul@f1+2)^(0+128),f
 16913  1EED  0CAF               	rrf	(___ftmul@f1+1)^(0+128),f
 16914  1EEE  0CAE               	rrf	___ftmul@f1^(0+128),f
 16915  1EEF  0B89               	decfsz	9,f
 16916  1EF0  2EEC               	goto	u8275
 16917  1EF1  3001               	movlw	1
 16918  1EF2                     u8285:	
 16919  1EF2  35B1               	lslf	___ftmul@f2^(0+128),f
 16920  1EF3  0DB2               	rlf	(___ftmul@f2+1)^(0+128),f
 16921  1EF4  0DB3               	rlf	(___ftmul@f2+2)^(0+128),f
 16922  1EF5  0B89               	decfsz	9,f
 16923  1EF6  2EF2               	goto	u8285
 16924  1EF7  3001               	movlw	1
 16925  1EF8  02BC               	subwf	___ftmul@cntr^(0+128),f
 16926  1EF9  1D03               	btfss	3,2
 16927  1EFA  2EE3               	goto	l7926
 16928  1EFB  3009               	movlw	9
 16929  1EFC  00B4               	movwf	??___ftmul^(0+128)
 16930  1EFD  0834               	movf	??___ftmul^(0+128),w
 16931  1EFE  00BC               	movwf	___ftmul@cntr^(0+128)
 16932  1EFF                     l7938:	
 16933  1EFF  1C2E               	btfss	___ftmul@f1^(0+128),0
 16934  1F00  2F07               	goto	l7942
 16935  1F01  0831               	movf	___ftmul@f2^(0+128),w
 16936  1F02  07B9               	addwf	___ftmul@f3_as_product^(0+128),f
 16937  1F03  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16938  1F04  3DBA               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
 16939  1F05  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16940  1F06  3DBB               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
 16941  1F07                     l7942:	
 16942  1F07  3001               	movlw	1
 16943  1F08                     u8315:	
 16944  1F08  36B0               	lsrf	(___ftmul@f1+2)^(0+128),f
 16945  1F09  0CAF               	rrf	(___ftmul@f1+1)^(0+128),f
 16946  1F0A  0CAE               	rrf	___ftmul@f1^(0+128),f
 16947  1F0B  0B89               	decfsz	9,f
 16948  1F0C  2F08               	goto	u8315
 16949  1F0D  3001               	movlw	1
 16950  1F0E                     u8325:	
 16951  1F0E  36BB               	lsrf	(___ftmul@f3_as_product+2)^(0+128),f
 16952  1F0F  0CBA               	rrf	(___ftmul@f3_as_product+1)^(0+128),f
 16953  1F10  0CB9               	rrf	___ftmul@f3_as_product^(0+128),f
 16954  1F11  0B89               	decfsz	9,f
 16955  1F12  2F0E               	goto	u8325
 16956  1F13  3001               	movlw	1
 16957  1F14  02BC               	subwf	___ftmul@cntr^(0+128),f
 16958  1F15  1D03               	btfss	3,2
 16959  1F16  2EFF               	goto	l7938
 16960  1F17  0839               	movf	___ftmul@f3_as_product^(0+128),w
 16961  1F18  00A0               	movwf	___ftpack@arg^(0+128)
 16962  1F19  083A               	movf	(___ftmul@f3_as_product+1)^(0+128),w
 16963  1F1A  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 16964  1F1B  083B               	movf	(___ftmul@f3_as_product+2)^(0+128),w
 16965  1F1C  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 16966  1F1D  0838               	movf	___ftmul@exp^(0+128),w
 16967  1F1E  00B4               	movwf	??___ftmul^(0+128)
 16968  1F1F  0834               	movf	??___ftmul^(0+128),w
 16969  1F20  00A3               	movwf	___ftpack@exp^(0+128)
 16970  1F21  083D               	movf	___ftmul@sign^(0+128),w
 16971  1F22  00B5               	movwf	(??___ftmul+1)^(0+128)
 16972  1F23  0835               	movf	(??___ftmul+1)^(0+128),w
 16973  1F24  00A4               	movwf	___ftpack@sign^(0+128)
 16974  1F25  31A5  25B6         	fcall	___ftpack
 16975  1F27  0021               	movlb	1	; select bank1
 16976  1F28  0820               	movf	?___ftpack^(0+128),w
 16977  1F29  00AE               	movwf	?___ftmul^(0+128)
 16978  1F2A  0821               	movf	(?___ftpack+1)^(0+128),w
 16979  1F2B  00AF               	movwf	(?___ftmul+1)^(0+128)
 16980  1F2C  0822               	movf	(?___ftpack+2)^(0+128),w
 16981  1F2D  00B0               	movwf	(?___ftmul+2)^(0+128)
 16982  1F2E  0008               	return
 16983  1F2F                     __end_of___ftmul:	
 16984                           
 16985                           	psect	text55
 16986  2ED5                     __ptext55:	
 16987 ;; *************** function ___ftsub *****************
 16988 ;; Defined at:
 16989 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftsub.c"
 16990 ;; Parameters:    Size  Location     Type
 16991 ;;  f2              3   23[BANK2 ] float 
 16992 ;;  f1              3   26[BANK2 ] float 
 16993 ;; Auto vars:     Size  Location     Type
 16994 ;;		None
 16995 ;; Return value:  Size  Location     Type
 16996 ;;                  3   23[BANK2 ] float 
 16997 ;; Registers used:
 16998 ;;		wreg, status,2, status,0, pclath, cstack
 16999 ;; Tracked objects:
 17000 ;;		On entry : 0/0
 17001 ;;		On exit  : 0/0
 17002 ;;		Unchanged: 0/0
 17003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17004 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17005 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17007 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17008 ;;Total ram usage:        6 bytes
 17009 ;; Hardware stack levels used:    1
 17010 ;; Hardware stack levels required when called:    5
 17011 ;; This function calls:
 17012 ;;		___ftadd
 17013 ;; This function is called by:
 17014 ;;		_sin
 17015 ;;		_exp
 17016 ;; This function uses a non-reentrant model
 17017 ;;
 17018                           
 17019                           
 17020                           ;psect for function ___ftsub
 17021  2ED5                     ___ftsub:	
 17022                           
 17023                           ;incstack = 0
 17024                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
 17025  2ED5  0022               	movlb	2	; select bank2
 17026  2ED6  0839               	movf	(___ftsub@f2+2)^(0+256),w
 17027  2ED7  0438               	iorwf	(___ftsub@f2+1)^(0+256),w
 17028  2ED8  0437               	iorwf	___ftsub@f2^(0+256),w
 17029  2ED9  1903               	skipnz
 17030  2EDA  2EDD               	goto	l8130
 17031  2EDB  3080               	movlw	128
 17032  2EDC  06B9               	xorwf	(___ftsub@f2+2)^(0+256),f
 17033  2EDD                     l8130:	
 17034  2EDD  083A               	movf	___ftsub@f1^(0+256),w
 17035  2EDE  0021               	movlb	1	; select bank1
 17036  2EDF  00C1               	movwf	___ftadd@f1^(0+128)
 17037  2EE0  0022               	movlb	2	; select bank2
 17038  2EE1  083B               	movf	(___ftsub@f1+1)^(0+256),w
 17039  2EE2  0021               	movlb	1	; select bank1
 17040  2EE3  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 17041  2EE4  0022               	movlb	2	; select bank2
 17042  2EE5  083C               	movf	(___ftsub@f1+2)^(0+256),w
 17043  2EE6  0021               	movlb	1	; select bank1
 17044  2EE7  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 17045  2EE8  0022               	movlb	2	; select bank2
 17046  2EE9  0837               	movf	___ftsub@f2^(0+256),w
 17047  2EEA  0021               	movlb	1	; select bank1
 17048  2EEB  00C4               	movwf	___ftadd@f2^(0+128)
 17049  2EEC  0022               	movlb	2	; select bank2
 17050  2EED  0838               	movf	(___ftsub@f2+1)^(0+256),w
 17051  2EEE  0021               	movlb	1	; select bank1
 17052  2EEF  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 17053  2EF0  0022               	movlb	2	; select bank2
 17054  2EF1  0839               	movf	(___ftsub@f2+2)^(0+256),w
 17055  2EF2  0021               	movlb	1	; select bank1
 17056  2EF3  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 17057  2EF4  3190  2035         	fcall	___ftadd
 17058  2EF6  0021               	movlb	1	; select bank1
 17059  2EF7  0841               	movf	?___ftadd^(0+128),w
 17060  2EF8  0022               	movlb	2	; select bank2
 17061  2EF9  00B7               	movwf	?___ftsub^(0+256)
 17062  2EFA  0021               	movlb	1	; select bank1
 17063  2EFB  0842               	movf	(?___ftadd+1)^(0+128),w
 17064  2EFC  0022               	movlb	2	; select bank2
 17065  2EFD  00B8               	movwf	(?___ftsub+1)^(0+256)
 17066  2EFE  0021               	movlb	1	; select bank1
 17067  2EFF  0843               	movf	(?___ftadd+2)^(0+128),w
 17068  2F00  0022               	movlb	2	; select bank2
 17069  2F01  00B9               	movwf	(?___ftsub+2)^(0+256)
 17070  2F02  0008               	return
 17071  2F03                     __end_of___ftsub:	
 17072                           
 17073                           	psect	text56
 17074  1035                     __ptext56:	
 17075 ;; *************** function ___ftadd *****************
 17076 ;; Defined at:
 17077 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
 17078 ;; Parameters:    Size  Location     Type
 17079 ;;  f1              3   33[BANK1 ] float 
 17080 ;;  f2              3   36[BANK1 ] float 
 17081 ;; Auto vars:     Size  Location     Type
 17082 ;;  exp1            1   45[BANK1 ] unsigned char 
 17083 ;;  exp2            1   44[BANK1 ] unsigned char 
 17084 ;;  sign            1   43[BANK1 ] unsigned char 
 17085 ;; Return value:  Size  Location     Type
 17086 ;;                  3   33[BANK1 ] float 
 17087 ;; Registers used:
 17088 ;;		wreg, status,2, status,0, pclath, cstack
 17089 ;; Tracked objects:
 17090 ;;		On entry : 0/0
 17091 ;;		On exit  : 0/0
 17092 ;;		Unchanged: 0/0
 17093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17094 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17095 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17096 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17097 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17098 ;;Total ram usage:       13 bytes
 17099 ;; Hardware stack levels used:    1
 17100 ;; Hardware stack levels required when called:    4
 17101 ;; This function calls:
 17102 ;;		___ftpack
 17103 ;; This function is called by:
 17104 ;;		_map
 17105 ;;		_scaleiA10kPot
 17106 ;;		_modCos
 17107 ;;		_modTri
 17108 ;;		_modSaw
 17109 ;;		_cos
 17110 ;;		___ftsub
 17111 ;;		_sin
 17112 ;;		_eval_poly
 17113 ;;		_floor
 17114 ;;		_log
 17115 ;;		_scalePotValue
 17116 ;; This function uses a non-reentrant model
 17117 ;;
 17118                           
 17119                           
 17120                           ;psect for function ___ftadd
 17121  1035                     ___ftadd:	
 17122                           
 17123                           ;incstack = 0
 17124                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 17125  1035  0021               	movlb	1	; select bank1
 17126  1036  0841               	movf	___ftadd@f1^(0+128),w
 17127  1037  00C7               	movwf	??___ftadd^(0+128)
 17128  1038  0842               	movf	(___ftadd@f1+1)^(0+128),w
 17129  1039  00C8               	movwf	(??___ftadd^(0+128)+1)
 17130  103A  0843               	movf	(___ftadd@f1+2)^(0+128),w
 17131  103B  00C9               	movwf	(??___ftadd^(0+128)+2)
 17132  103C  1003               	clrc
 17133  103D  0D48               	rlf	(??___ftadd^(0+128)+1),w
 17134  103E  0D49               	rlf	(??___ftadd^(0+128)+2),w
 17135  103F  00CA               	movwf	(??___ftadd+3)^(0+128)
 17136  1040  084A               	movf	(??___ftadd+3)^(0+128),w
 17137  1041  00CD               	movwf	___ftadd@exp1^(0+128)
 17138  1042  0844               	movf	___ftadd@f2^(0+128),w
 17139  1043  00C7               	movwf	??___ftadd^(0+128)
 17140  1044  0845               	movf	(___ftadd@f2+1)^(0+128),w
 17141  1045  00C8               	movwf	(??___ftadd^(0+128)+1)
 17142  1046  0846               	movf	(___ftadd@f2+2)^(0+128),w
 17143  1047  00C9               	movwf	(??___ftadd^(0+128)+2)
 17144  1048  1003               	clrc
 17145  1049  0D48               	rlf	(??___ftadd^(0+128)+1),w
 17146  104A  0D49               	rlf	(??___ftadd^(0+128)+2),w
 17147  104B  00CA               	movwf	(??___ftadd+3)^(0+128)
 17148  104C  084A               	movf	(??___ftadd+3)^(0+128),w
 17149  104D  00CC               	movwf	___ftadd@exp2^(0+128)
 17150  104E  084D               	movf	___ftadd@exp1^(0+128),w
 17151  104F  1903               	btfsc	3,2
 17152  1050  285D               	goto	l7818
 17153  1051  084C               	movf	___ftadd@exp2^(0+128),w
 17154  1052  024D               	subwf	___ftadd@exp1^(0+128),w
 17155  1053  1803               	skipnc
 17156  1054  2864               	goto	l7822
 17157  1055  034D               	decf	___ftadd@exp1^(0+128),w
 17158  1056  3AFF               	xorlw	255
 17159  1057  074C               	addwf	___ftadd@exp2^(0+128),w
 17160  1058  00C7               	movwf	??___ftadd^(0+128)
 17161  1059  3019               	movlw	25
 17162  105A  0247               	subwf	??___ftadd^(0+128),w
 17163  105B  1C03               	skipc
 17164  105C  2864               	goto	l7822
 17165  105D                     l7818:	
 17166  105D  0844               	movf	___ftadd@f2^(0+128),w
 17167  105E  00C1               	movwf	?___ftadd^(0+128)
 17168  105F  0845               	movf	(___ftadd@f2+1)^(0+128),w
 17169  1060  00C2               	movwf	(?___ftadd+1)^(0+128)
 17170  1061  0846               	movf	(___ftadd@f2+2)^(0+128),w
 17171  1062  00C3               	movwf	(?___ftadd+2)^(0+128)
 17172  1063  0008               	return
 17173  1064                     l7822:	
 17174  1064  084C               	movf	___ftadd@exp2^(0+128),w
 17175  1065  1903               	btfsc	3,2
 17176  1066  0008               	return
 17177  1067  084D               	movf	___ftadd@exp1^(0+128),w
 17178  1068  024C               	subwf	___ftadd@exp2^(0+128),w
 17179  1069  1803               	skipnc
 17180  106A  2873               	goto	l7828
 17181  106B  034C               	decf	___ftadd@exp2^(0+128),w
 17182  106C  3AFF               	xorlw	255
 17183  106D  074D               	addwf	___ftadd@exp1^(0+128),w
 17184  106E  00C7               	movwf	??___ftadd^(0+128)
 17185  106F  3019               	movlw	25
 17186  1070  0247               	subwf	??___ftadd^(0+128),w
 17187  1071  1803               	btfsc	3,0
 17188  1072  0008               	return
 17189  1073                     l7828:	
 17190  1073  3006               	movlw	6
 17191  1074  00C7               	movwf	??___ftadd^(0+128)
 17192  1075  0847               	movf	??___ftadd^(0+128),w
 17193  1076  00CB               	movwf	___ftadd@sign^(0+128)
 17194  1077  1BC3               	btfsc	(___ftadd@f1+2)^(0+128),7
 17195  1078  17CB               	bsf	___ftadd@sign^(0+128),7
 17196  1079  1BC6               	btfsc	(___ftadd@f2+2)^(0+128),7
 17197  107A  174B               	bsf	___ftadd@sign^(0+128),6
 17198  107B  17C2               	bsf	(___ftadd@f1^(0+128)+1),7
 17199  107C  30FF               	movlw	255
 17200  107D  05C1               	andwf	___ftadd@f1^(0+128),f
 17201  107E  30FF               	movlw	255
 17202  107F  05C2               	andwf	(___ftadd@f1+1)^(0+128),f
 17203  1080  3000               	movlw	0
 17204  1081  05C3               	andwf	(___ftadd@f1+2)^(0+128),f
 17205  1082  17C5               	bsf	(___ftadd@f2^(0+128)+1),7
 17206  1083  30FF               	movlw	255
 17207  1084  05C4               	andwf	___ftadd@f2^(0+128),f
 17208  1085  30FF               	movlw	255
 17209  1086  05C5               	andwf	(___ftadd@f2+1)^(0+128),f
 17210  1087  3000               	movlw	0
 17211  1088  05C6               	andwf	(___ftadd@f2+2)^(0+128),f
 17212  1089  084C               	movf	___ftadd@exp2^(0+128),w
 17213  108A  024D               	subwf	___ftadd@exp1^(0+128),w
 17214  108B  1803               	skipnc
 17215  108C  28AF               	goto	l7850
 17216  108D                     l7840:	
 17217  108D  3001               	movlw	1
 17218  108E                     u8055:	
 17219  108E  35C4               	lslf	___ftadd@f2^(0+128),f
 17220  108F  0DC5               	rlf	(___ftadd@f2+1)^(0+128),f
 17221  1090  0DC6               	rlf	(___ftadd@f2+2)^(0+128),f
 17222  1091  0B89               	decfsz	9,f
 17223  1092  288E               	goto	u8055
 17224  1093  3001               	movlw	1
 17225  1094  02CC               	subwf	___ftadd@exp2^(0+128),f
 17226  1095  084C               	movf	___ftadd@exp2^(0+128),w
 17227  1096  064D               	xorwf	___ftadd@exp1^(0+128),w
 17228  1097  1903               	skipnz
 17229  1098  28AA               	goto	l7848
 17230  1099  3001               	movlw	1
 17231  109A  02CB               	subwf	___ftadd@sign^(0+128),f
 17232  109B  084B               	movf	___ftadd@sign^(0+128),w
 17233  109C  3907               	andlw	7
 17234  109D  1903               	btfsc	3,2
 17235  109E  28AA               	goto	l7848
 17236  109F  288D               	goto	l7840
 17237  10A0                     l7846:	
 17238  10A0  3001               	movlw	1
 17239  10A1                     u8085:	
 17240  10A1  36C3               	lsrf	(___ftadd@f1+2)^(0+128),f
 17241  10A2  0CC2               	rrf	(___ftadd@f1+1)^(0+128),f
 17242  10A3  0CC1               	rrf	___ftadd@f1^(0+128),f
 17243  10A4  0B89               	decfsz	9,f
 17244  10A5  28A1               	goto	u8085
 17245  10A6  3001               	movlw	1
 17246  10A7  00C7               	movwf	??___ftadd^(0+128)
 17247  10A8  0847               	movf	??___ftadd^(0+128),w
 17248  10A9  07CD               	addwf	___ftadd@exp1^(0+128),f
 17249  10AA                     l7848:	
 17250  10AA  084D               	movf	___ftadd@exp1^(0+128),w
 17251  10AB  064C               	xorwf	___ftadd@exp2^(0+128),w
 17252  10AC  1903               	btfsc	3,2
 17253  10AD  28D4               	goto	l2188
 17254  10AE  28A0               	goto	l7846
 17255  10AF                     l7850:	
 17256  10AF  084D               	movf	___ftadd@exp1^(0+128),w
 17257  10B0  024C               	subwf	___ftadd@exp2^(0+128),w
 17258  10B1  1803               	skipnc
 17259  10B2  28D4               	goto	l2188
 17260  10B3                     l7852:	
 17261  10B3  3001               	movlw	1
 17262  10B4                     u8115:	
 17263  10B4  35C1               	lslf	___ftadd@f1^(0+128),f
 17264  10B5  0DC2               	rlf	(___ftadd@f1+1)^(0+128),f
 17265  10B6  0DC3               	rlf	(___ftadd@f1+2)^(0+128),f
 17266  10B7  0B89               	decfsz	9,f
 17267  10B8  28B4               	goto	u8115
 17268  10B9  3001               	movlw	1
 17269  10BA  02CD               	subwf	___ftadd@exp1^(0+128),f
 17270  10BB  084C               	movf	___ftadd@exp2^(0+128),w
 17271  10BC  064D               	xorwf	___ftadd@exp1^(0+128),w
 17272  10BD  1903               	skipnz
 17273  10BE  28D0               	goto	l7860
 17274  10BF  3001               	movlw	1
 17275  10C0  02CB               	subwf	___ftadd@sign^(0+128),f
 17276  10C1  084B               	movf	___ftadd@sign^(0+128),w
 17277  10C2  3907               	andlw	7
 17278  10C3  1903               	btfsc	3,2
 17279  10C4  28D0               	goto	l7860
 17280  10C5  28B3               	goto	l7852
 17281  10C6                     l7858:	
 17282  10C6  3001               	movlw	1
 17283  10C7                     u8145:	
 17284  10C7  36C6               	lsrf	(___ftadd@f2+2)^(0+128),f
 17285  10C8  0CC5               	rrf	(___ftadd@f2+1)^(0+128),f
 17286  10C9  0CC4               	rrf	___ftadd@f2^(0+128),f
 17287  10CA  0B89               	decfsz	9,f
 17288  10CB  28C7               	goto	u8145
 17289  10CC  3001               	movlw	1
 17290  10CD  00C7               	movwf	??___ftadd^(0+128)
 17291  10CE  0847               	movf	??___ftadd^(0+128),w
 17292  10CF  07CC               	addwf	___ftadd@exp2^(0+128),f
 17293  10D0                     l7860:	
 17294  10D0  084D               	movf	___ftadd@exp1^(0+128),w
 17295  10D1  064C               	xorwf	___ftadd@exp2^(0+128),w
 17296  10D2  1D03               	skipz
 17297  10D3  28C6               	goto	l7858
 17298  10D4                     l2188:	
 17299  10D4  1FCB               	btfss	___ftadd@sign^(0+128),7
 17300  10D5  28E6               	goto	l7864
 17301  10D6  30FF               	movlw	255
 17302  10D7  06C1               	xorwf	___ftadd@f1^(0+128),f
 17303  10D8  30FF               	movlw	255
 17304  10D9  06C2               	xorwf	(___ftadd@f1+1)^(0+128),f
 17305  10DA  30FF               	movlw	255
 17306  10DB  06C3               	xorwf	(___ftadd@f1+2)^(0+128),f
 17307  10DC  3001               	movlw	1
 17308  10DD  07C1               	addwf	___ftadd@f1^(0+128),f
 17309  10DE  3000               	movlw	0
 17310  10DF  1803               	skipnc
 17311  10E0  3001               	movlw	1
 17312  10E1  07C2               	addwf	(___ftadd@f1+1)^(0+128),f
 17313  10E2  3000               	movlw	0
 17314  10E3  1803               	skipnc
 17315  10E4  3001               	movlw	1
 17316  10E5  07C3               	addwf	(___ftadd@f1+2)^(0+128),f
 17317  10E6                     l7864:	
 17318  10E6  1F4B               	btfss	___ftadd@sign^(0+128),6
 17319  10E7  28F8               	goto	l7868
 17320  10E8  30FF               	movlw	255
 17321  10E9  06C4               	xorwf	___ftadd@f2^(0+128),f
 17322  10EA  30FF               	movlw	255
 17323  10EB  06C5               	xorwf	(___ftadd@f2+1)^(0+128),f
 17324  10EC  30FF               	movlw	255
 17325  10ED  06C6               	xorwf	(___ftadd@f2+2)^(0+128),f
 17326  10EE  3001               	movlw	1
 17327  10EF  07C4               	addwf	___ftadd@f2^(0+128),f
 17328  10F0  3000               	movlw	0
 17329  10F1  1803               	skipnc
 17330  10F2  3001               	movlw	1
 17331  10F3  07C5               	addwf	(___ftadd@f2+1)^(0+128),f
 17332  10F4  3000               	movlw	0
 17333  10F5  1803               	skipnc
 17334  10F6  3001               	movlw	1
 17335  10F7  07C6               	addwf	(___ftadd@f2+2)^(0+128),f
 17336  10F8                     l7868:	
 17337  10F8  01CB               	clrf	___ftadd@sign^(0+128)
 17338  10F9  0841               	movf	___ftadd@f1^(0+128),w
 17339  10FA  07C4               	addwf	___ftadd@f2^(0+128),f
 17340  10FB  0842               	movf	(___ftadd@f1+1)^(0+128),w
 17341  10FC  3DC5               	addwfc	(___ftadd@f2+1)^(0+128),f
 17342  10FD  0843               	movf	(___ftadd@f1+2)^(0+128),w
 17343  10FE  3DC6               	addwfc	(___ftadd@f2+2)^(0+128),f
 17344  10FF  1FC6               	btfss	(___ftadd@f2+2)^(0+128),7
 17345  1100  2913               	goto	l7878
 17346  1101  30FF               	movlw	255
 17347  1102  06C4               	xorwf	___ftadd@f2^(0+128),f
 17348  1103  30FF               	movlw	255
 17349  1104  06C5               	xorwf	(___ftadd@f2+1)^(0+128),f
 17350  1105  30FF               	movlw	255
 17351  1106  06C6               	xorwf	(___ftadd@f2+2)^(0+128),f
 17352  1107  3001               	movlw	1
 17353  1108  07C4               	addwf	___ftadd@f2^(0+128),f
 17354  1109  3000               	movlw	0
 17355  110A  1803               	skipnc
 17356  110B  3001               	movlw	1
 17357  110C  07C5               	addwf	(___ftadd@f2+1)^(0+128),f
 17358  110D  3000               	movlw	0
 17359  110E  1803               	skipnc
 17360  110F  3001               	movlw	1
 17361  1110  07C6               	addwf	(___ftadd@f2+2)^(0+128),f
 17362  1111  01CB               	clrf	___ftadd@sign^(0+128)
 17363  1112  0ACB               	incf	___ftadd@sign^(0+128),f
 17364  1113                     l7878:	
 17365  1113  0844               	movf	___ftadd@f2^(0+128),w
 17366  1114  00A0               	movwf	___ftpack@arg^(0+128)
 17367  1115  0845               	movf	(___ftadd@f2+1)^(0+128),w
 17368  1116  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 17369  1117  0846               	movf	(___ftadd@f2+2)^(0+128),w
 17370  1118  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 17371  1119  084D               	movf	___ftadd@exp1^(0+128),w
 17372  111A  00C7               	movwf	??___ftadd^(0+128)
 17373  111B  0847               	movf	??___ftadd^(0+128),w
 17374  111C  00A3               	movwf	___ftpack@exp^(0+128)
 17375  111D  084B               	movf	___ftadd@sign^(0+128),w
 17376  111E  00C8               	movwf	(??___ftadd+1)^(0+128)
 17377  111F  0848               	movf	(??___ftadd+1)^(0+128),w
 17378  1120  00A4               	movwf	___ftpack@sign^(0+128)
 17379  1121  31A5  25B6         	fcall	___ftpack
 17380  1123  0021               	movlb	1	; select bank1
 17381  1124  0820               	movf	?___ftpack^(0+128),w
 17382  1125  00C1               	movwf	?___ftadd^(0+128)
 17383  1126  0821               	movf	(?___ftpack+1)^(0+128),w
 17384  1127  00C2               	movwf	(?___ftadd+1)^(0+128)
 17385  1128  0822               	movf	(?___ftpack+2)^(0+128),w
 17386  1129  00C3               	movwf	(?___ftadd+2)^(0+128)
 17387  112A  0008               	return
 17388  112B                     __end_of___ftadd:	
 17389                           
 17390                           	psect	text57
 17391  2CEC                     __ptext57:	
 17392 ;; *************** function ___ftneg *****************
 17393 ;; Defined at:
 17394 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
 17395 ;; Parameters:    Size  Location     Type
 17396 ;;  f1              3   30[BANK1 ] float 
 17397 ;; Auto vars:     Size  Location     Type
 17398 ;;		None
 17399 ;; Return value:  Size  Location     Type
 17400 ;;                  3   30[BANK1 ] float 
 17401 ;; Registers used:
 17402 ;;		wreg
 17403 ;; Tracked objects:
 17404 ;;		On entry : 0/0
 17405 ;;		On exit  : 0/0
 17406 ;;		Unchanged: 0/0
 17407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17408 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17409 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17411 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17412 ;;Total ram usage:        3 bytes
 17413 ;; Hardware stack levels used:    1
 17414 ;; Hardware stack levels required when called:    3
 17415 ;; This function calls:
 17416 ;;		Nothing
 17417 ;; This function is called by:
 17418 ;;		_map
 17419 ;;		_scaleiA10kPot
 17420 ;;		_modCos
 17421 ;;		_modTri
 17422 ;;		_modSaw
 17423 ;;		_pow
 17424 ;;		_sin
 17425 ;;		_exp
 17426 ;;		_ldexp
 17427 ;;		_scalePotValue
 17428 ;; This function uses a non-reentrant model
 17429 ;;
 17430                           
 17431                           
 17432                           ;psect for function ___ftneg
 17433  2CEC                     ___ftneg:	
 17434                           
 17435                           ;incstack = 0
 17436                           ; Regs used in ___ftneg: [wreg]
 17437  2CEC  0021               	movlb	1	; select bank1
 17438  2CED  0840               	movf	(___ftneg@f1+2)^(0+128),w
 17439  2CEE  043F               	iorwf	(___ftneg@f1+1)^(0+128),w
 17440  2CEF  043E               	iorwf	___ftneg@f1^(0+128),w
 17441  2CF0  1903               	skipnz
 17442  2CF1  0008               	return
 17443  2CF2  3080               	movlw	128
 17444  2CF3  06C0               	xorwf	(___ftneg@f1+2)^(0+128),f
 17445  2CF4  0008               	return
 17446  2CF5                     __end_of___ftneg:	
 17447                           
 17448                           	psect	text58
 17449  1C74                     __ptext58:	
 17450 ;; *************** function ___ftdiv *****************
 17451 ;; Defined at:
 17452 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
 17453 ;; Parameters:    Size  Location     Type
 17454 ;;  f2              3   46[BANK1 ] float 
 17455 ;;  f1              3   49[BANK1 ] float 
 17456 ;; Auto vars:     Size  Location     Type
 17457 ;;  f3              3   57[BANK1 ] float 
 17458 ;;  sign            1   61[BANK1 ] unsigned char 
 17459 ;;  exp             1   60[BANK1 ] unsigned char 
 17460 ;;  cntr            1   56[BANK1 ] unsigned char 
 17461 ;; Return value:  Size  Location     Type
 17462 ;;                  3   46[BANK1 ] float 
 17463 ;; Registers used:
 17464 ;;		wreg, status,2, status,0, pclath, cstack
 17465 ;; Tracked objects:
 17466 ;;		On entry : 0/0
 17467 ;;		On exit  : 0/0
 17468 ;;		Unchanged: 0/0
 17469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17470 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17471 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17472 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17473 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17474 ;;Total ram usage:       16 bytes
 17475 ;; Hardware stack levels used:    1
 17476 ;; Hardware stack levels required when called:    4
 17477 ;; This function calls:
 17478 ;;		___ftpack
 17479 ;; This function is called by:
 17480 ;;		_map
 17481 ;;		_scaleA100kPot
 17482 ;;		_scaleA10kPot
 17483 ;;		_scaleiA10kPot
 17484 ;;		_calcCosArray
 17485 ;;		_getModulationDelayTime
 17486 ;;		_modCos
 17487 ;;		_modTri
 17488 ;;		_modSaw
 17489 ;;		_sin
 17490 ;;		_exp
 17491 ;;		_scalePotValue
 17492 ;;		_scaleiA100kPot
 17493 ;; This function uses a non-reentrant model
 17494 ;;
 17495                           
 17496                           
 17497                           ;psect for function ___ftdiv
 17498  1C74                     ___ftdiv:	
 17499                           
 17500                           ;incstack = 0
 17501                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 17502  1C74  0021               	movlb	1	; select bank1
 17503  1C75  0851               	movf	___ftdiv@f1^(0+128),w
 17504  1C76  00D4               	movwf	??___ftdiv^(0+128)
 17505  1C77  0852               	movf	(___ftdiv@f1+1)^(0+128),w
 17506  1C78  00D5               	movwf	(??___ftdiv^(0+128)+1)
 17507  1C79  0853               	movf	(___ftdiv@f1+2)^(0+128),w
 17508  1C7A  00D6               	movwf	(??___ftdiv^(0+128)+2)
 17509  1C7B  1003               	clrc
 17510  1C7C  0D55               	rlf	(??___ftdiv^(0+128)+1),w
 17511  1C7D  0D56               	rlf	(??___ftdiv^(0+128)+2),w
 17512  1C7E  00D7               	movwf	(??___ftdiv+3)^(0+128)
 17513  1C7F  0857               	movf	(??___ftdiv+3)^(0+128),w
 17514  1C80  00DC               	movwf	___ftdiv@exp^(0+128)
 17515  1C81  085C               	movf	___ftdiv@exp^(0+128),w
 17516  1C82  1D03               	btfss	3,2
 17517  1C83  2C8B               	goto	l8090
 17518  1C84  3000               	movlw	0
 17519  1C85  00CE               	movwf	?___ftdiv^(0+128)
 17520  1C86  3000               	movlw	0
 17521  1C87  00CF               	movwf	(?___ftdiv+1)^(0+128)
 17522  1C88  3000               	movlw	0
 17523  1C89  00D0               	movwf	(?___ftdiv+2)^(0+128)
 17524  1C8A  0008               	return
 17525  1C8B                     l8090:	
 17526  1C8B  084E               	movf	___ftdiv@f2^(0+128),w
 17527  1C8C  00D4               	movwf	??___ftdiv^(0+128)
 17528  1C8D  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 17529  1C8E  00D5               	movwf	(??___ftdiv^(0+128)+1)
 17530  1C8F  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 17531  1C90  00D6               	movwf	(??___ftdiv^(0+128)+2)
 17532  1C91  1003               	clrc
 17533  1C92  0D55               	rlf	(??___ftdiv^(0+128)+1),w
 17534  1C93  0D56               	rlf	(??___ftdiv^(0+128)+2),w
 17535  1C94  00D7               	movwf	(??___ftdiv+3)^(0+128)
 17536  1C95  0857               	movf	(??___ftdiv+3)^(0+128),w
 17537  1C96  00DD               	movwf	___ftdiv@sign^(0+128)
 17538  1C97  085D               	movf	___ftdiv@sign^(0+128),w
 17539  1C98  1D03               	btfss	3,2
 17540  1C99  2CA1               	goto	l8096
 17541  1C9A  3000               	movlw	0
 17542  1C9B  00CE               	movwf	?___ftdiv^(0+128)
 17543  1C9C  3000               	movlw	0
 17544  1C9D  00CF               	movwf	(?___ftdiv+1)^(0+128)
 17545  1C9E  3000               	movlw	0
 17546  1C9F  00D0               	movwf	(?___ftdiv+2)^(0+128)
 17547  1CA0  0008               	return
 17548  1CA1                     l8096:	
 17549  1CA1  3000               	movlw	0
 17550  1CA2  00D9               	movwf	___ftdiv@f3^(0+128)
 17551  1CA3  3000               	movlw	0
 17552  1CA4  00DA               	movwf	(___ftdiv@f3+1)^(0+128)
 17553  1CA5  3000               	movlw	0
 17554  1CA6  00DB               	movwf	(___ftdiv@f3+2)^(0+128)
 17555  1CA7  3089               	movlw	137
 17556  1CA8  075D               	addwf	___ftdiv@sign^(0+128),w
 17557  1CA9  00D4               	movwf	??___ftdiv^(0+128)
 17558  1CAA  0854               	movf	??___ftdiv^(0+128),w
 17559  1CAB  02DC               	subwf	___ftdiv@exp^(0+128),f
 17560  1CAC  0851               	movf	___ftdiv@f1^(0+128),w
 17561  1CAD  00D4               	movwf	??___ftdiv^(0+128)
 17562  1CAE  0852               	movf	(___ftdiv@f1+1)^(0+128),w
 17563  1CAF  00D5               	movwf	(??___ftdiv^(0+128)+1)
 17564  1CB0  0853               	movf	(___ftdiv@f1+2)^(0+128),w
 17565  1CB1  00D6               	movwf	(??___ftdiv^(0+128)+2)
 17566  1CB2  3010               	movlw	16
 17567  1CB3                     u8545:	
 17568  1CB3  36D6               	lsrf	(??___ftdiv^(0+128)+2),f
 17569  1CB4  0CD5               	rrf	(??___ftdiv^(0+128)+1),f
 17570  1CB5  0CD4               	rrf	??___ftdiv^(0+128),f
 17571  1CB6  0B89               	decfsz	9,f
 17572  1CB7  2CB3               	goto	u8545
 17573  1CB8  0854               	movf	??___ftdiv^(0+128),w
 17574  1CB9  00D7               	movwf	(??___ftdiv+3)^(0+128)
 17575  1CBA  0857               	movf	(??___ftdiv+3)^(0+128),w
 17576  1CBB  00DD               	movwf	___ftdiv@sign^(0+128)
 17577  1CBC  084E               	movf	___ftdiv@f2^(0+128),w
 17578  1CBD  00D4               	movwf	??___ftdiv^(0+128)
 17579  1CBE  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 17580  1CBF  00D5               	movwf	(??___ftdiv^(0+128)+1)
 17581  1CC0  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 17582  1CC1  00D6               	movwf	(??___ftdiv^(0+128)+2)
 17583  1CC2  3010               	movlw	16
 17584  1CC3                     u8555:	
 17585  1CC3  36D6               	lsrf	(??___ftdiv^(0+128)+2),f
 17586  1CC4  0CD5               	rrf	(??___ftdiv^(0+128)+1),f
 17587  1CC5  0CD4               	rrf	??___ftdiv^(0+128),f
 17588  1CC6  0B89               	decfsz	9,f
 17589  1CC7  2CC3               	goto	u8555
 17590  1CC8  0854               	movf	??___ftdiv^(0+128),w
 17591  1CC9  00D7               	movwf	(??___ftdiv+3)^(0+128)
 17592  1CCA  0857               	movf	(??___ftdiv+3)^(0+128),w
 17593  1CCB  06DD               	xorwf	___ftdiv@sign^(0+128),f
 17594  1CCC  3080               	movlw	128
 17595  1CCD  00D4               	movwf	??___ftdiv^(0+128)
 17596  1CCE  0854               	movf	??___ftdiv^(0+128),w
 17597  1CCF  05DD               	andwf	___ftdiv@sign^(0+128),f
 17598  1CD0  17D2               	bsf	(___ftdiv@f1^(0+128)+1),7
 17599  1CD1  30FF               	movlw	255
 17600  1CD2  05D1               	andwf	___ftdiv@f1^(0+128),f
 17601  1CD3  30FF               	movlw	255
 17602  1CD4  05D2               	andwf	(___ftdiv@f1+1)^(0+128),f
 17603  1CD5  3000               	movlw	0
 17604  1CD6  05D3               	andwf	(___ftdiv@f1+2)^(0+128),f
 17605  1CD7  17CF               	bsf	(___ftdiv@f2^(0+128)+1),7
 17606  1CD8  30FF               	movlw	255
 17607  1CD9  05CE               	andwf	___ftdiv@f2^(0+128),f
 17608  1CDA  30FF               	movlw	255
 17609  1CDB  05CF               	andwf	(___ftdiv@f2+1)^(0+128),f
 17610  1CDC  3000               	movlw	0
 17611  1CDD  05D0               	andwf	(___ftdiv@f2+2)^(0+128),f
 17612  1CDE  3018               	movlw	24
 17613  1CDF  00D4               	movwf	??___ftdiv^(0+128)
 17614  1CE0  0854               	movf	??___ftdiv^(0+128),w
 17615  1CE1  00D8               	movwf	___ftdiv@cntr^(0+128)
 17616  1CE2                     l8110:	
 17617  1CE2  3001               	movlw	1
 17618  1CE3                     u8565:	
 17619  1CE3  35D9               	lslf	___ftdiv@f3^(0+128),f
 17620  1CE4  0DDA               	rlf	(___ftdiv@f3+1)^(0+128),f
 17621  1CE5  0DDB               	rlf	(___ftdiv@f3+2)^(0+128),f
 17622  1CE6  0B89               	decfsz	9,f
 17623  1CE7  2CE3               	goto	u8565
 17624  1CE8  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 17625  1CE9  0253               	subwf	(___ftdiv@f1+2)^(0+128),w
 17626  1CEA  1D03               	skipz
 17627  1CEB  2CF2               	goto	u8575
 17628  1CEC  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 17629  1CED  0252               	subwf	(___ftdiv@f1+1)^(0+128),w
 17630  1CEE  1D03               	skipz
 17631  1CEF  2CF2               	goto	u8575
 17632  1CF0  084E               	movf	___ftdiv@f2^(0+128),w
 17633  1CF1  0251               	subwf	___ftdiv@f1^(0+128),w
 17634  1CF2                     u8575:	
 17635  1CF2  1C03               	skipc
 17636  1CF3  2CFB               	goto	l8118
 17637  1CF4  084E               	movf	___ftdiv@f2^(0+128),w
 17638  1CF5  02D1               	subwf	___ftdiv@f1^(0+128),f
 17639  1CF6  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 17640  1CF7  3BD2               	subwfb	(___ftdiv@f1+1)^(0+128),f
 17641  1CF8  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 17642  1CF9  3BD3               	subwfb	(___ftdiv@f1+2)^(0+128),f
 17643  1CFA  1459               	bsf	___ftdiv@f3^(0+128),0
 17644  1CFB                     l8118:	
 17645  1CFB  3001               	movlw	1
 17646  1CFC                     u8585:	
 17647  1CFC  35D1               	lslf	___ftdiv@f1^(0+128),f
 17648  1CFD  0DD2               	rlf	(___ftdiv@f1+1)^(0+128),f
 17649  1CFE  0DD3               	rlf	(___ftdiv@f1+2)^(0+128),f
 17650  1CFF  0B89               	decfsz	9,f
 17651  1D00  2CFC               	goto	u8585
 17652  1D01  3001               	movlw	1
 17653  1D02  02D8               	subwf	___ftdiv@cntr^(0+128),f
 17654  1D03  1D03               	btfss	3,2
 17655  1D04  2CE2               	goto	l8110
 17656  1D05  0859               	movf	___ftdiv@f3^(0+128),w
 17657  1D06  00A0               	movwf	___ftpack@arg^(0+128)
 17658  1D07  085A               	movf	(___ftdiv@f3+1)^(0+128),w
 17659  1D08  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 17660  1D09  085B               	movf	(___ftdiv@f3+2)^(0+128),w
 17661  1D0A  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 17662  1D0B  085C               	movf	___ftdiv@exp^(0+128),w
 17663  1D0C  00D4               	movwf	??___ftdiv^(0+128)
 17664  1D0D  0854               	movf	??___ftdiv^(0+128),w
 17665  1D0E  00A3               	movwf	___ftpack@exp^(0+128)
 17666  1D0F  085D               	movf	___ftdiv@sign^(0+128),w
 17667  1D10  00D5               	movwf	(??___ftdiv+1)^(0+128)
 17668  1D11  0855               	movf	(??___ftdiv+1)^(0+128),w
 17669  1D12  00A4               	movwf	___ftpack@sign^(0+128)
 17670  1D13  31A5  25B6         	fcall	___ftpack
 17671  1D15  0021               	movlb	1	; select bank1
 17672  1D16  0820               	movf	?___ftpack^(0+128),w
 17673  1D17  00CE               	movwf	?___ftdiv^(0+128)
 17674  1D18  0821               	movf	(?___ftpack+1)^(0+128),w
 17675  1D19  00CF               	movwf	(?___ftdiv+1)^(0+128)
 17676  1D1A  0822               	movf	(?___ftpack+2)^(0+128),w
 17677  1D1B  00D0               	movwf	(?___ftdiv+2)^(0+128)
 17678  1D1C  0008               	return
 17679  1D1D                     __end_of___ftdiv:	
 17680                           
 17681                           	psect	text59
 17682  2E3A                     __ptext59:	
 17683 ;; *************** function ___awtoft *****************
 17684 ;; Defined at:
 17685 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awtoft.c"
 17686 ;; Parameters:    Size  Location     Type
 17687 ;;  c               2    8[BANK1 ] int 
 17688 ;; Auto vars:     Size  Location     Type
 17689 ;;  sign            1   13[BANK1 ] unsigned char 
 17690 ;; Return value:  Size  Location     Type
 17691 ;;                  3    8[BANK1 ] float 
 17692 ;; Registers used:
 17693 ;;		wreg, status,2, status,0, pclath, cstack
 17694 ;; Tracked objects:
 17695 ;;		On entry : 0/0
 17696 ;;		On exit  : 0/0
 17697 ;;		Unchanged: 0/0
 17698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17699 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17700 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17701 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17702 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17703 ;;Total ram usage:        6 bytes
 17704 ;; Hardware stack levels used:    1
 17705 ;; Hardware stack levels required when called:    4
 17706 ;; This function calls:
 17707 ;;		___ftpack
 17708 ;; This function is called by:
 17709 ;;		_main
 17710 ;;		_set_subdivision
 17711 ;;		_calcCosArray
 17712 ;;		_getModulationDelayTime
 17713 ;;		_updateModulationArray
 17714 ;;		_exp
 17715 ;;		_log
 17716 ;; This function uses a non-reentrant model
 17717 ;;
 17718                           
 17719                           
 17720                           ;psect for function ___awtoft
 17721  2E3A                     ___awtoft:	
 17722                           
 17723                           ;incstack = 0
 17724                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 17725  2E3A  0021               	movlb	1	; select bank1
 17726  2E3B  01AD               	clrf	___awtoft@sign^(0+128)
 17727  2E3C  1FA9               	btfss	(___awtoft@c+1)^(0+128),7
 17728  2E3D  2E45               	goto	l8080
 17729  2E3E  09A8               	comf	___awtoft@c^(0+128),f
 17730  2E3F  09A9               	comf	(___awtoft@c+1)^(0+128),f
 17731  2E40  0AA8               	incf	___awtoft@c^(0+128),f
 17732  2E41  1903               	skipnz
 17733  2E42  0AA9               	incf	(___awtoft@c+1)^(0+128),f
 17734  2E43  01AD               	clrf	___awtoft@sign^(0+128)
 17735  2E44  0AAD               	incf	___awtoft@sign^(0+128),f
 17736  2E45                     l8080:	
 17737  2E45  0828               	movf	___awtoft@c^(0+128),w
 17738  2E46  00A0               	movwf	___ftpack@arg^(0+128)
 17739  2E47  0829               	movf	(___awtoft@c+1)^(0+128),w
 17740  2E48  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 17741  2E49  01A2               	clrf	(___ftpack@arg+2)^(0+128)
 17742  2E4A  308E               	movlw	142
 17743  2E4B  00AB               	movwf	??___awtoft^(0+128)
 17744  2E4C  082B               	movf	??___awtoft^(0+128),w
 17745  2E4D  00A3               	movwf	___ftpack@exp^(0+128)
 17746  2E4E  082D               	movf	___awtoft@sign^(0+128),w
 17747  2E4F  00AC               	movwf	(??___awtoft+1)^(0+128)
 17748  2E50  082C               	movf	(??___awtoft+1)^(0+128),w
 17749  2E51  00A4               	movwf	___ftpack@sign^(0+128)
 17750  2E52  31A5  25B6         	fcall	___ftpack
 17751  2E54  0021               	movlb	1	; select bank1
 17752  2E55  0820               	movf	?___ftpack^(0+128),w
 17753  2E56  00A8               	movwf	?___awtoft^(0+128)
 17754  2E57  0821               	movf	(?___ftpack+1)^(0+128),w
 17755  2E58  00A9               	movwf	(?___awtoft+1)^(0+128)
 17756  2E59  0822               	movf	(?___ftpack+2)^(0+128),w
 17757  2E5A  00AA               	movwf	(?___awtoft+2)^(0+128)
 17758  2E5B  0008               	return
 17759  2E5C                     __end_of___awtoft:	
 17760                           
 17761                           	psect	text60
 17762  25B6                     __ptext60:	
 17763 ;; *************** function ___ftpack *****************
 17764 ;; Defined at:
 17765 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
 17766 ;; Parameters:    Size  Location     Type
 17767 ;;  arg             3    0[BANK1 ] unsigned um
 17768 ;;  exp             1    3[BANK1 ] unsigned char 
 17769 ;;  sign            1    4[BANK1 ] unsigned char 
 17770 ;; Auto vars:     Size  Location     Type
 17771 ;;		None
 17772 ;; Return value:  Size  Location     Type
 17773 ;;                  3    0[BANK1 ] float 
 17774 ;; Registers used:
 17775 ;;		wreg, status,2, status,0
 17776 ;; Tracked objects:
 17777 ;;		On entry : 0/0
 17778 ;;		On exit  : 0/0
 17779 ;;		Unchanged: 0/0
 17780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17781 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17782 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17783 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17784 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17785 ;;Total ram usage:        8 bytes
 17786 ;; Hardware stack levels used:    1
 17787 ;; Hardware stack levels required when called:    3
 17788 ;; This function calls:
 17789 ;;		Nothing
 17790 ;; This function is called by:
 17791 ;;		___altoft
 17792 ;;		___awtoft
 17793 ;;		___ftadd
 17794 ;;		___ftdiv
 17795 ;;		___ftmul
 17796 ;;		___lltoft
 17797 ;; This function uses a non-reentrant model
 17798 ;;
 17799                           
 17800                           
 17801                           ;psect for function ___ftpack
 17802  25B6                     ___ftpack:	
 17803                           
 17804                           ;incstack = 0
 17805                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 17806  25B6  0021               	movlb	1	; select bank1
 17807  25B7  0823               	movf	___ftpack@exp^(0+128),w
 17808  25B8  1903               	btfsc	3,2
 17809  25B9  2DBF               	goto	l7718
 17810  25BA  0822               	movf	(___ftpack@arg+2)^(0+128),w
 17811  25BB  0421               	iorwf	(___ftpack@arg+1)^(0+128),w
 17812  25BC  0420               	iorwf	___ftpack@arg^(0+128),w
 17813  25BD  1D03               	skipz
 17814  25BE  2DD0               	goto	l7724
 17815  25BF                     l7718:	
 17816  25BF  3000               	movlw	0
 17817  25C0  00A0               	movwf	?___ftpack^(0+128)
 17818  25C1  3000               	movlw	0
 17819  25C2  00A1               	movwf	(?___ftpack+1)^(0+128)
 17820  25C3  3000               	movlw	0
 17821  25C4  00A2               	movwf	(?___ftpack+2)^(0+128)
 17822  25C5  0008               	return
 17823  25C6                     l7722:	
 17824  25C6  3001               	movlw	1
 17825  25C7  00A5               	movwf	??___ftpack^(0+128)
 17826  25C8  0825               	movf	??___ftpack^(0+128),w
 17827  25C9  07A3               	addwf	___ftpack@exp^(0+128),f
 17828  25CA  3001               	movlw	1
 17829  25CB                     u7785:	
 17830  25CB  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 17831  25CC  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 17832  25CD  0CA0               	rrf	___ftpack@arg^(0+128),f
 17833  25CE  0B89               	decfsz	9,f
 17834  25CF  2DCB               	goto	u7785
 17835  25D0                     l7724:	
 17836  25D0  30FE               	movlw	254
 17837  25D1  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 17838  25D2  1903               	btfsc	3,2
 17839  25D3  2DE9               	goto	l2157
 17840  25D4  2DC6               	goto	l7722
 17841  25D5                     l7726:	
 17842  25D5  3001               	movlw	1
 17843  25D6  00A5               	movwf	??___ftpack^(0+128)
 17844  25D7  0825               	movf	??___ftpack^(0+128),w
 17845  25D8  07A3               	addwf	___ftpack@exp^(0+128),f
 17846  25D9  3001               	movlw	1
 17847  25DA  07A0               	addwf	___ftpack@arg^(0+128),f
 17848  25DB  3000               	movlw	0
 17849  25DC  1803               	skipnc
 17850  25DD  3001               	movlw	1
 17851  25DE  07A1               	addwf	(___ftpack@arg+1)^(0+128),f
 17852  25DF  3000               	movlw	0
 17853  25E0  1803               	skipnc
 17854  25E1  3001               	movlw	1
 17855  25E2  07A2               	addwf	(___ftpack@arg+2)^(0+128),f
 17856  25E3  3001               	movlw	1
 17857  25E4                     u7805:	
 17858  25E4  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 17859  25E5  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 17860  25E6  0CA0               	rrf	___ftpack@arg^(0+128),f
 17861  25E7  0B89               	decfsz	9,f
 17862  25E8  2DE4               	goto	u7805
 17863  25E9                     l2157:	
 17864  25E9  30FF               	movlw	255
 17865  25EA  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 17866  25EB  1903               	btfsc	3,2
 17867  25EC  2DF6               	goto	l7734
 17868  25ED  2DD5               	goto	l7726
 17869  25EE                     l7732:	
 17870  25EE  3001               	movlw	1
 17871  25EF  02A3               	subwf	___ftpack@exp^(0+128),f
 17872  25F0  3001               	movlw	1
 17873  25F1                     u7825:	
 17874  25F1  35A0               	lslf	___ftpack@arg^(0+128),f
 17875  25F2  0DA1               	rlf	(___ftpack@arg+1)^(0+128),f
 17876  25F3  0DA2               	rlf	(___ftpack@arg+2)^(0+128),f
 17877  25F4  0B89               	decfsz	9,f
 17878  25F5  2DF1               	goto	u7825
 17879  25F6                     l7734:	
 17880  25F6  1BA1               	btfsc	(___ftpack@arg+1)^(0+128),7
 17881  25F7  2DFC               	goto	l2164
 17882  25F8  3002               	movlw	2
 17883  25F9  0223               	subwf	___ftpack@exp^(0+128),w
 17884  25FA  1803               	skipnc
 17885  25FB  2DEE               	goto	l7732
 17886  25FC                     l2164:	
 17887  25FC  1823               	btfsc	___ftpack@exp^(0+128),0
 17888  25FD  2E04               	goto	l2165
 17889  25FE  30FF               	movlw	255
 17890  25FF  05A0               	andwf	___ftpack@arg^(0+128),f
 17891  2600  307F               	movlw	127
 17892  2601  05A1               	andwf	(___ftpack@arg+1)^(0+128),f
 17893  2602  30FF               	movlw	255
 17894  2603  05A2               	andwf	(___ftpack@arg+2)^(0+128),f
 17895  2604                     l2165:	
 17896  2604  1003               	clrc
 17897  2605  0CA3               	rrf	___ftpack@exp^(0+128),f
 17898  2606  0823               	movf	___ftpack@exp^(0+128),w
 17899  2607  00A5               	movwf	??___ftpack^(0+128)
 17900  2608  01A6               	clrf	(??___ftpack^(0+128)+1)
 17901  2609  01A7               	clrf	(??___ftpack^(0+128)+2)
 17902  260A  3010               	movlw	16
 17903  260B                     u7865:	
 17904  260B  35A5               	lslf	??___ftpack^(0+128),f
 17905  260C  0DA6               	rlf	(??___ftpack^(0+128)+1),f
 17906  260D  0DA7               	rlf	(??___ftpack^(0+128)+2),f
 17907  260E  0B89               	decfsz	9,f
 17908  260F  2E0B               	goto	u7865
 17909  2610  0825               	movf	??___ftpack^(0+128),w
 17910  2611  04A0               	iorwf	___ftpack@arg^(0+128),f
 17911  2612  0826               	movf	(??___ftpack+1)^(0+128),w
 17912  2613  04A1               	iorwf	(___ftpack@arg+1)^(0+128),f
 17913  2614  0827               	movf	(??___ftpack+2)^(0+128),w
 17914  2615  04A2               	iorwf	(___ftpack@arg+2)^(0+128),f
 17915  2616  0824               	movf	___ftpack@sign^(0+128),w
 17916  2617  1903               	btfsc	3,2
 17917  2618  0008               	return
 17918  2619  17A2               	bsf	(___ftpack@arg^(0+128)+2),7
 17919  261A  0008               	return
 17920  261B                     __end_of___ftpack:	
 17921                           
 17922                           	psect	text61
 17923  2D38                     __ptext61:	
 17924 ;; *************** function _adc_convert *****************
 17925 ;; Defined at:
 17926 ;;		line 122 in file "user.c"
 17927 ;; Parameters:    Size  Location     Type
 17928 ;;  channel         1    wreg     unsigned char 
 17929 ;; Auto vars:     Size  Location     Type
 17930 ;;  channel         1    3[BANK1 ] unsigned char 
 17931 ;; Return value:  Size  Location     Type
 17932 ;;                  2    0[BANK1 ] unsigned int 
 17933 ;; Registers used:
 17934 ;;		wreg, status,2, status,0
 17935 ;; Tracked objects:
 17936 ;;		On entry : 0/0
 17937 ;;		On exit  : 0/0
 17938 ;;		Unchanged: 0/0
 17939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17940 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17941 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17942 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17943 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17944 ;;Total ram usage:        4 bytes
 17945 ;; Hardware stack levels used:    1
 17946 ;; Hardware stack levels required when called:    3
 17947 ;; This function calls:
 17948 ;;		Nothing
 17949 ;; This function is called by:
 17950 ;;		_main
 17951 ;; This function uses a non-reentrant model
 17952 ;;
 17953                           
 17954                           
 17955                           ;psect for function _adc_convert
 17956  2D38                     _adc_convert:	
 17957                           
 17958                           ;incstack = 0
 17959                           ; Regs used in _adc_convert: [wreg+status,2+status,0]
 17960                           ;adc_convert@channel stored from wreg
 17961  2D38  0021               	movlb	1	; select bank1
 17962  2D39  00A3               	movwf	adc_convert@channel^(0+128)
 17963                           
 17964                           ;user.c: 123: ADCON0bits.CHS = channel;
 17965  2D3A  0823               	movf	adc_convert@channel^(0+128),w
 17966  2D3B  00A2               	movwf	??_adc_convert^(0+128)
 17967  2D3C  0DA2               	rlf	??_adc_convert^(0+128),f
 17968  2D3D  0DA2               	rlf	??_adc_convert^(0+128),f
 17969  2D3E  081D               	movf	29,w	;volatile
 17970  2D3F  0622               	xorwf	??_adc_convert^(0+128),w
 17971  2D40  3983               	andlw	-125
 17972  2D41  0622               	xorwf	??_adc_convert^(0+128),w
 17973  2D42  009D               	movwf	29	;volatile
 17974                           
 17975                           ;user.c: 124: ADCON0bits.GO = 0b1;
 17976  2D43  149D               	bsf	29,1	;volatile
 17977  2D44                     l602:	
 17978                           ;user.c: 125: while (ADCON0bits.GO_nDONE);
 17979                           
 17980  2D44  189D               	btfsc	29,1	;volatile
 17981  2D45  2D44               	goto	l602
 17982                           
 17983                           ;user.c: 126: return (ADRESH << 8) | ADRESL;
 17984  2D46  081C               	movf	28,w	;volatile
 17985  2D47  00A1               	movwf	(?_adc_convert+1)^(0+128)
 17986  2D48  081B               	movf	27,w	;volatile
 17987  2D49  00A0               	movwf	?_adc_convert^(0+128)
 17988  2D4A  0008               	return
 17989  2D4B                     __end_of_adc_convert:	
 17990                           
 17991                           	psect	text62
 17992  229F                     __ptext62:	
 17993 ;; *************** function _USARTInit *****************
 17994 ;; Defined at:
 17995 ;;		line 31 in file "usart_pic16.c"
 17996 ;; Parameters:    Size  Location     Type
 17997 ;;  baud_rate       2    0[BANK1 ] unsigned int 
 17998 ;; Auto vars:     Size  Location     Type
 17999 ;;		None
 18000 ;; Return value:  Size  Location     Type
 18001 ;;                  1    wreg      void 
 18002 ;; Registers used:
 18003 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 18004 ;; Tracked objects:
 18005 ;;		On entry : 0/0
 18006 ;;		On exit  : 0/0
 18007 ;;		Unchanged: 0/0
 18008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18009 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18010 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18011 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18012 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18013 ;;Total ram usage:        3 bytes
 18014 ;; Hardware stack levels used:    1
 18015 ;; Hardware stack levels required when called:    3
 18016 ;; This function calls:
 18017 ;;		Nothing
 18018 ;; This function is called by:
 18019 ;;		_main
 18020 ;; This function uses a non-reentrant model
 18021 ;;
 18022                           
 18023                           
 18024                           ;psect for function _USARTInit
 18025  229F                     _USARTInit:	
 18026                           
 18027                           ;usart_pic16.c: 34: UQFront=UQEnd=-1;
 18028                           
 18029                           ;incstack = 0
 18030                           ; Regs used in _USARTInit: [wreg-fsr0h+status,2+status,0]
 18031  229F  30FF               	movlw	255
 18032  22A0  0020               	movlb	0	; select bank0
 18033  22A1  00DA               	movwf	_UQEnd	;volatile
 18034  22A2  0021               	movlb	1	; select bank1
 18035  22A3  00A2               	movwf	??_USARTInit^(0+128)
 18036  22A4  0822               	movf	??_USARTInit^(0+128),w
 18037  22A5  0020               	movlb	0	; select bank0
 18038  22A6  00DB               	movwf	_UQFront	;volatile
 18039                           
 18040                           ;usart_pic16.c: 37: switch(baud_rate)
 18041  22A7  2AB2               	goto	l8736
 18042  22A8                     l8726:	
 18043                           ;usart_pic16.c: 38: {
 18044                           ;usart_pic16.c: 39: case 9600:
 18045                           
 18046                           
 18047                           ;usart_pic16.c: 40: SPBRG=103;
 18048  22A8  3067               	movlw	103
 18049  22A9  2AAF               	goto	L22
 18050  22AA                     l8728:	
 18051                           ;usart_pic16.c: 42: case 19200:
 18052                           
 18053                           ;usart_pic16.c: 41: break;
 18054                           
 18055                           
 18056                           ;usart_pic16.c: 43: SPBRG=51;
 18057  22AA  3033               	movlw	51
 18058  22AB  2AAF               	goto	L22
 18059  22AC                     l8730:	
 18060                           ;usart_pic16.c: 45: case 31250:
 18061                           
 18062                           ;usart_pic16.c: 44: break;
 18063                           
 18064                           
 18065                           ;usart_pic16.c: 46: SPBRG = 31;
 18066  22AC  301F               	movlw	31
 18067  22AD  2AAF               	goto	L22
 18068  22AE                     l8732:	
 18069                           ;usart_pic16.c: 48: case 38400:
 18070                           
 18071                           ;usart_pic16.c: 47: break;
 18072                           
 18073                           
 18074                           ;usart_pic16.c: 49: SPBRG=25;
 18075  22AE  3019               	movlw	25
 18076  22AF                     L22:	
 18077  22AF  0023               	movlb	3	; select bank3
 18078  22B0  009B               	movwf	27	;volatile
 18079                           
 18080                           ;usart_pic16.c: 51: }
 18081                           
 18082                           ;usart_pic16.c: 50: break;
 18083  22B1  2AD5               	goto	l1740
 18084  22B2                     l8736:	
 18085                           
 18086                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 18087                           ; Switch size 1, requested type "space"
 18088                           ; Number of cases is 4, Range of values is 37 to 150
 18089                           ; switch strategies available:
 18090                           ; Name         Instructions Cycles
 18091                           ; simple_byte           13     7 (average)
 18092                           ; direct_byte          237     9 (fixed)
 18093                           ; jumptable            263     9 (fixed)
 18094                           ;	Chosen strategy is simple_byte
 18095  22B2  0021               	movlb	1	; select bank1
 18096  22B3  0821               	movf	(USARTInit@baud_rate+1)^(0+128),w
 18097  22B4  3A25               	xorlw	37	; case 37
 18098  22B5  1903               	skipnz
 18099  22B6  2AC1               	goto	l9856
 18100  22B7  3A6E               	xorlw	110	; case 75
 18101  22B8  1903               	skipnz
 18102  22B9  2AC6               	goto	l9858
 18103  22BA  3A31               	xorlw	49	; case 122
 18104  22BB  1903               	skipnz
 18105  22BC  2ACB               	goto	l9860
 18106  22BD  3AEC               	xorlw	236	; case 150
 18107  22BE  1903               	skipnz
 18108  22BF  2AD0               	goto	l9862
 18109  22C0  2AD5               	goto	l1740
 18110  22C1                     l9856:	
 18111                           
 18112                           ; Switch size 1, requested type "space"
 18113                           ; Number of cases is 1, Range of values is 128 to 128
 18114                           ; switch strategies available:
 18115                           ; Name         Instructions Cycles
 18116                           ; simple_byte            4     3 (average)
 18117                           ; direct_byte           11     9 (fixed)
 18118                           ; jumptable            263     9 (fixed)
 18119                           ;	Chosen strategy is simple_byte
 18120  22C1  0820               	movf	USARTInit@baud_rate^(0+128),w
 18121  22C2  3A80               	xorlw	128	; case 128
 18122  22C3  1903               	skipnz
 18123  22C4  2AA8               	goto	l8726
 18124  22C5  2AD5               	goto	l1740
 18125  22C6                     l9858:	
 18126                           
 18127                           ; Switch size 1, requested type "space"
 18128                           ; Number of cases is 1, Range of values is 0 to 0
 18129                           ; switch strategies available:
 18130                           ; Name         Instructions Cycles
 18131                           ; simple_byte            4     3 (average)
 18132                           ; direct_byte            8     6 (fixed)
 18133                           ; jumptable            260     6 (fixed)
 18134                           ;	Chosen strategy is simple_byte
 18135  22C6  0820               	movf	USARTInit@baud_rate^(0+128),w
 18136  22C7  3A00               	xorlw	0	; case 0
 18137  22C8  1903               	skipnz
 18138  22C9  2AAA               	goto	l8728
 18139  22CA  2AD5               	goto	l1740
 18140  22CB                     l9860:	
 18141                           
 18142                           ; Switch size 1, requested type "space"
 18143                           ; Number of cases is 1, Range of values is 18 to 18
 18144                           ; switch strategies available:
 18145                           ; Name         Instructions Cycles
 18146                           ; simple_byte            4     3 (average)
 18147                           ; direct_byte           11     9 (fixed)
 18148                           ; jumptable            263     9 (fixed)
 18149                           ;	Chosen strategy is simple_byte
 18150  22CB  0820               	movf	USARTInit@baud_rate^(0+128),w
 18151  22CC  3A12               	xorlw	18	; case 18
 18152  22CD  1903               	skipnz
 18153  22CE  2AAC               	goto	l8730
 18154  22CF  2AD5               	goto	l1740
 18155  22D0                     l9862:	
 18156                           
 18157                           ; Switch size 1, requested type "space"
 18158                           ; Number of cases is 1, Range of values is 0 to 0
 18159                           ; switch strategies available:
 18160                           ; Name         Instructions Cycles
 18161                           ; simple_byte            4     3 (average)
 18162                           ; direct_byte            8     6 (fixed)
 18163                           ; jumptable            260     6 (fixed)
 18164                           ;	Chosen strategy is simple_byte
 18165  22D0  0820               	movf	USARTInit@baud_rate^(0+128),w
 18166  22D1  3A00               	xorlw	0	; case 0
 18167  22D2  1903               	skipnz
 18168  22D3  2AAE               	goto	l8732
 18169  22D4  2AD5               	goto	l1740
 18170  22D5                     l1740:	
 18171                           
 18172                           ;usart_pic16.c: 53: TXSTAbits.TX9=0;
 18173  22D5  0023               	movlb	3	; select bank3
 18174  22D6  131E               	bcf	30,6	;volatile
 18175                           
 18176                           ;usart_pic16.c: 54: TXSTAbits.TXEN=1;
 18177  22D7  169E               	bsf	30,5	;volatile
 18178                           
 18179                           ;usart_pic16.c: 55: TXSTAbits.SYNC=0;
 18180  22D8  121E               	bcf	30,4	;volatile
 18181                           
 18182                           ;usart_pic16.c: 56: TXSTAbits.BRGH=1;
 18183  22D9  151E               	bsf	30,2	;volatile
 18184                           
 18185                           ;usart_pic16.c: 59: RCSTAbits.SPEN=1;
 18186  22DA  179D               	bsf	29,7	;volatile
 18187                           
 18188                           ;usart_pic16.c: 60: RCSTAbits.RX9=0;
 18189  22DB  131D               	bcf	29,6	;volatile
 18190                           
 18191                           ;usart_pic16.c: 61: RCSTAbits.CREN=1;
 18192  22DC  161D               	bsf	29,4	;volatile
 18193                           
 18194                           ;usart_pic16.c: 62: RCSTAbits.ADDEN=0;
 18195  22DD  119D               	bcf	29,3	;volatile
 18196                           
 18197                           ;usart_pic16.c: 65: RCIE=1;
 18198  22DE  0021               	movlb	1	; select bank1
 18199  22DF  1691               	bsf	17,5	;volatile
 18200                           
 18201                           ;usart_pic16.c: 66: PEIE=1;
 18202  22E0  170B               	bsf	11,6	;volatile
 18203                           
 18204                           ;usart_pic16.c: 68: (GIE = 1);
 18205  22E1  178B               	bsf	11,7	;volatile
 18206  22E2  0008               	return
 18207  22E3                     __end_of_USARTInit:	
 18208                           
 18209                           	psect	text63
 18210  268D                     __ptext63:	
 18211 ;; *************** function _ReadSavedSettings *****************
 18212 ;; Defined at:
 18213 ;;		line 234 in file "user.c"
 18214 ;; Parameters:    Size  Location     Type
 18215 ;;		None
 18216 ;; Auto vars:     Size  Location     Type
 18217 ;;		None
 18218 ;; Return value:  Size  Location     Type
 18219 ;;                  1    wreg      void 
 18220 ;; Registers used:
 18221 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 18222 ;; Tracked objects:
 18223 ;;		On entry : 0/0
 18224 ;;		On exit  : 0/0
 18225 ;;		Unchanged: 0/0
 18226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18229 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18230 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18231 ;;Total ram usage:        1 bytes
 18232 ;; Hardware stack levels used:    1
 18233 ;; Hardware stack levels required when called:    4
 18234 ;; This function calls:
 18235 ;;		_FLASH_ReadWord
 18236 ;;		_set_leds_bottom
 18237 ;;		_set_leds_top
 18238 ;; This function is called by:
 18239 ;;		_main
 18240 ;; This function uses a non-reentrant model
 18241 ;;
 18242                           
 18243                           
 18244                           ;psect for function _ReadSavedSettings
 18245  268D                     _ReadSavedSettings:	
 18246                           
 18247                           ;user.c: 236: top_push_state = FLASH_ReadWord(0x1F81);
 18248                           
 18249                           ;incstack = 0
 18250                           ; Regs used in _ReadSavedSettings: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 18251  268D  3081               	movlw	129
 18252  268E  0021               	movlb	1	; select bank1
 18253  268F  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 18254  2690  301F               	movlw	31
 18255  2691  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
 18256  2692  3188  2000  31A6   	fcall	_FLASH_ReadWord
 18257  2695  0021               	movlb	1	; select bank1
 18258  2696  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
 18259  2697  0020               	movlb	0	; select bank0
 18260  2698  00CD               	movwf	_top_push_state+1
 18261  2699  0021               	movlb	1	; select bank1
 18262  269A  0820               	movf	?_FLASH_ReadWord^(0+128),w
 18263  269B  0020               	movlb	0	; select bank0
 18264  269C  00CC               	movwf	_top_push_state
 18265                           
 18266                           ;user.c: 237: bottom_push_state = FLASH_ReadWord(0x1F82);
 18267  269D  3082               	movlw	130
 18268  269E  0021               	movlb	1	; select bank1
 18269  269F  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 18270  26A0  301F               	movlw	31
 18271  26A1  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
 18272  26A2  3188  2000  31A6   	fcall	_FLASH_ReadWord
 18273  26A5  0021               	movlb	1	; select bank1
 18274  26A6  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
 18275  26A7  0020               	movlb	0	; select bank0
 18276  26A8  00C9               	movwf	_bottom_push_state+1
 18277  26A9  0021               	movlb	1	; select bank1
 18278  26AA  0820               	movf	?_FLASH_ReadWord^(0+128),w
 18279  26AB  0020               	movlb	0	; select bank0
 18280  26AC  00C8               	movwf	_bottom_push_state
 18281                           
 18282                           ;user.c: 239: if (top_push_state > 6) {
 18283  26AD  084D               	movf	_top_push_state+1,w
 18284  26AE  3A80               	xorlw	128
 18285  26AF  0021               	movlb	1	; select bank1
 18286  26B0  00A4               	movwf	??_ReadSavedSettings^(0+128)
 18287  26B1  3080               	movlw	128
 18288  26B2  0224               	subwf	??_ReadSavedSettings^(0+128),w
 18289  26B3  1D03               	skipz
 18290  26B4  2EB8               	goto	u9365
 18291  26B5  3007               	movlw	7
 18292  26B6  0020               	movlb	0	; select bank0
 18293  26B7  024C               	subwf	_top_push_state,w
 18294  26B8                     u9365:	
 18295  26B8  1C03               	skipc
 18296  26B9  2EBF               	goto	l649
 18297                           
 18298                           ;user.c: 241: top_push_state = 6;
 18299  26BA  3006               	movlw	6
 18300  26BB  0020               	movlb	0	; select bank0
 18301  26BC  00CC               	movwf	_top_push_state
 18302  26BD  3000               	movlw	0
 18303  26BE  00CD               	movwf	_top_push_state+1
 18304  26BF                     l649:	
 18305                           
 18306                           ;user.c: 242: }
 18307                           ;user.c: 243: if (bottom_push_state > 5) {
 18308  26BF  0020               	movlb	0	; select bank0
 18309  26C0  0849               	movf	_bottom_push_state+1,w
 18310  26C1  3A80               	xorlw	128
 18311  26C2  0021               	movlb	1	; select bank1
 18312  26C3  00A4               	movwf	??_ReadSavedSettings^(0+128)
 18313  26C4  3080               	movlw	128
 18314  26C5  0224               	subwf	??_ReadSavedSettings^(0+128),w
 18315  26C6  1D03               	skipz
 18316  26C7  2ECB               	goto	u9375
 18317  26C8  3006               	movlw	6
 18318  26C9  0020               	movlb	0	; select bank0
 18319  26CA  0248               	subwf	_bottom_push_state,w
 18320  26CB                     u9375:	
 18321  26CB  1C03               	skipc
 18322  26CC  2ED2               	goto	l8790
 18323                           
 18324                           ;user.c: 245: bottom_push_state = 1;
 18325  26CD  3001               	movlw	1
 18326  26CE  0020               	movlb	0	; select bank0
 18327  26CF  00C8               	movwf	_bottom_push_state
 18328  26D0  3000               	movlw	0
 18329  26D1  00C9               	movwf	_bottom_push_state+1
 18330  26D2                     l8790:	
 18331                           
 18332                           ;user.c: 246: }
 18333                           ;user.c: 249: LATGbits.LATG1 = !switchBypass_state;
 18334  26D2  0020               	movlb	0	; select bank0
 18335  26D3  0851               	movf	_switchBypass_state,w
 18336  26D4  1D03               	btfss	3,2
 18337  26D5  2ED9               	goto	u9380
 18338  26D6  0027               	movlb	7	; select bank7
 18339  26D7  148D               	bsf	13,1	;volatile
 18340  26D8  2EDB               	goto	l8792
 18341  26D9                     u9380:	
 18342  26D9  0027               	movlb	7	; select bank7
 18343  26DA  108D               	bcf	13,1	;volatile
 18344  26DB                     l8792:	
 18345                           
 18346                           ;user.c: 250: LATGbits.LATG2 = switchBypass_state;
 18347  26DB  0020               	movlb	0	; select bank0
 18348  26DC  0C51               	rrf	_switchBypass_state,w
 18349  26DD  0027               	movlb	7	; select bank7
 18350  26DE  1C03               	skipc
 18351  26DF  110D               	bcf	13,2	;volatile
 18352  26E0  1803               	skipnc
 18353  26E1  150D               	bsf	13,2	;volatile
 18354                           
 18355                           ;user.c: 251: LATBbits.LATB2 = 0;
 18356  26E2  0022               	movlb	2	; select bank2
 18357  26E3  110D               	bcf	13,2	;volatile
 18358                           
 18359                           ;user.c: 252: LATBbits.LATB3 = 0;
 18360  26E4  118D               	bcf	13,3	;volatile
 18361                           
 18362                           ;user.c: 254: LATBbits.LATB4 = 0;
 18363  26E5  120D               	bcf	13,4	;volatile
 18364                           
 18365                           ;user.c: 255: LATBbits.LATB5 = 0;
 18366  26E6  128D               	bcf	13,5	;volatile
 18367                           
 18368                           ;user.c: 257: LATBbits.LATB1 = 0;
 18369  26E7  108D               	bcf	13,1	;volatile
 18370                           
 18371                           ;user.c: 258: LATBbits.LATB0 = 0;
 18372  26E8  100D               	bcf	13,0	;volatile
 18373                           
 18374                           ;user.c: 261: set_leds_top(top_push_state, 1);
 18375  26E9  0020               	movlb	0	; select bank0
 18376  26EA  084D               	movf	_top_push_state+1,w
 18377  26EB  0021               	movlb	1	; select bank1
 18378  26EC  00A1               	movwf	(set_leds_top@x+1)^(0+128)
 18379  26ED  0020               	movlb	0	; select bank0
 18380  26EE  084C               	movf	_top_push_state,w
 18381  26EF  0021               	movlb	1	; select bank1
 18382  26F0  00A0               	movwf	set_leds_top@x^(0+128)
 18383  26F1  3001               	movlw	1
 18384  26F2  00A2               	movwf	set_leds_top@ledState^(0+128)
 18385  26F3  3000               	movlw	0
 18386  26F4  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
 18387  26F5  31A5  2509  31A6   	fcall	_set_leds_top
 18388                           
 18389                           ;user.c: 262: set_leds_bottom(bottom_push_state);
 18390  26F8  0020               	movlb	0	; select bank0
 18391  26F9  0849               	movf	_bottom_push_state+1,w
 18392  26FA  0021               	movlb	1	; select bank1
 18393  26FB  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
 18394  26FC  0020               	movlb	0	; select bank0
 18395  26FD  0848               	movf	_bottom_push_state,w
 18396  26FE  0021               	movlb	1	; select bank1
 18397  26FF  00A0               	movwf	set_leds_bottom@x^(0+128)
 18398  2700  31A0  206F         	fcall	_set_leds_bottom
 18399  2702  0008               	return
 18400  2703                     __end_of_ReadSavedSettings:	
 18401                           
 18402                           	psect	text64
 18403  2509                     __ptext64:	
 18404 ;; *************** function _set_leds_top *****************
 18405 ;; Defined at:
 18406 ;;		line 16 in file "LEDs.c"
 18407 ;; Parameters:    Size  Location     Type
 18408 ;;  x               2    0[BANK1 ] int 
 18409 ;;  ledState        2    2[BANK1 ] int 
 18410 ;; Auto vars:     Size  Location     Type
 18411 ;;		None
 18412 ;; Return value:  Size  Location     Type
 18413 ;;                  1    wreg      void 
 18414 ;; Registers used:
 18415 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 18416 ;; Tracked objects:
 18417 ;;		On entry : 0/0
 18418 ;;		On exit  : 0/0
 18419 ;;		Unchanged: 0/0
 18420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18421 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18424 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18425 ;;Total ram usage:        4 bytes
 18426 ;; Hardware stack levels used:    1
 18427 ;; Hardware stack levels required when called:    3
 18428 ;; This function calls:
 18429 ;;		Nothing
 18430 ;; This function is called by:
 18431 ;;		_ReadSavedSettings
 18432 ;;		_ring_tactiles
 18433 ;;		_solidring_tactiles
 18434 ;;		_read_top_tactile
 18435 ;;		_setPresetDisplay
 18436 ;;		_resetRingLEDs
 18437 ;;		_setExpressionDisplay
 18438 ;;		_star_tactiles
 18439 ;; This function uses a non-reentrant model
 18440 ;;
 18441                           
 18442                           
 18443                           ;psect for function _set_leds_top
 18444  2509                     _set_leds_top:	
 18445                           
 18446                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 18447                           
 18448                           ;incstack = 0
 18449                           ; Regs used in _set_leds_top: [wreg-fsr0h+status,2+status,0]
 18450  2509  0027               	movlb	7	; select bank7
 18451  250A  100C               	bcf	12,0	;volatile
 18452                           
 18453                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 18454  250B  108C               	bcf	12,1	;volatile
 18455                           
 18456                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 18457  250C  110C               	bcf	12,2	;volatile
 18458                           
 18459                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 18460  250D  118C               	bcf	12,3	;volatile
 18461                           
 18462                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 18463  250E  120C               	bcf	12,4	;volatile
 18464                           
 18465                           ;LEDs.c: 22: switch (x) {
 18466  250F  2D3F               	goto	l7760
 18467  2510                     l7748:	
 18468                           ;LEDs.c: 23: case 1:
 18469                           
 18470                           
 18471                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 18472  2510  0021               	movlb	1	; select bank1
 18473  2511  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18474  2512  0027               	movlb	7	; select bank7
 18475  2513  1C03               	skipc
 18476  2514  100C               	bcf	12,0	;volatile
 18477  2515  1803               	skipnc
 18478  2516  140C               	bsf	12,0	;volatile
 18479                           
 18480                           ;LEDs.c: 25: break;
 18481  2517  0008               	return
 18482  2518                     l7750:	
 18483                           ;LEDs.c: 26: case 2:
 18484                           
 18485                           
 18486                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 18487  2518  0021               	movlb	1	; select bank1
 18488  2519  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18489  251A  0027               	movlb	7	; select bank7
 18490  251B  1C03               	skipc
 18491  251C  108C               	bcf	12,1	;volatile
 18492  251D  1803               	skipnc
 18493  251E  148C               	bsf	12,1	;volatile
 18494                           
 18495                           ;LEDs.c: 28: break;
 18496  251F  0008               	return
 18497  2520                     l7752:	
 18498                           ;LEDs.c: 29: case 3:
 18499                           
 18500                           
 18501                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 18502  2520  0021               	movlb	1	; select bank1
 18503  2521  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18504  2522  0027               	movlb	7	; select bank7
 18505  2523  1C03               	skipc
 18506  2524  110C               	bcf	12,2	;volatile
 18507  2525  1803               	skipnc
 18508  2526  150C               	bsf	12,2	;volatile
 18509                           
 18510                           ;LEDs.c: 31: break;
 18511  2527  0008               	return
 18512  2528                     l7754:	
 18513                           ;LEDs.c: 32: case 4:
 18514                           
 18515                           
 18516                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 18517  2528  0021               	movlb	1	; select bank1
 18518  2529  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18519  252A  0027               	movlb	7	; select bank7
 18520  252B  1C03               	skipc
 18521  252C  118C               	bcf	12,3	;volatile
 18522  252D  1803               	skipnc
 18523  252E  158C               	bsf	12,3	;volatile
 18524                           
 18525                           ;LEDs.c: 34: break;
 18526  252F  0008               	return
 18527  2530                     l7756:	
 18528                           ;LEDs.c: 35: case 5:
 18529                           
 18530                           
 18531                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 18532  2530  0021               	movlb	1	; select bank1
 18533  2531  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18534  2532  0027               	movlb	7	; select bank7
 18535  2533  1C03               	skipc
 18536  2534  120C               	bcf	12,4	;volatile
 18537  2535  1803               	skipnc
 18538  2536  160C               	bsf	12,4	;volatile
 18539                           
 18540                           ;LEDs.c: 39: break;
 18541                           
 18542                           ;LEDs.c: 38: case 6:
 18543                           
 18544                           ;LEDs.c: 37: break;
 18545  2537  0008               	return
 18546  2538                     l810:	
 18547                           ;LEDs.c: 40: case 100:
 18548                           
 18549                           
 18550                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 18551  2538  0027               	movlb	7	; select bank7
 18552  2539  140C               	bsf	12,0	;volatile
 18553                           
 18554                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 18555  253A  148C               	bsf	12,1	;volatile
 18556                           
 18557                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 18558  253B  150C               	bsf	12,2	;volatile
 18559                           
 18560                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 18561  253C  158C               	bsf	12,3	;volatile
 18562                           
 18563                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 18564  253D  160C               	bsf	12,4	;volatile
 18565                           
 18566                           ;LEDs.c: 47: }
 18567                           
 18568                           ;LEDs.c: 46: break;
 18569  253E  0008               	return
 18570  253F                     l7760:	
 18571                           
 18572                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18573                           ; Switch size 1, requested type "space"
 18574                           ; Number of cases is 1, Range of values is 0 to 0
 18575                           ; switch strategies available:
 18576                           ; Name         Instructions Cycles
 18577                           ; simple_byte            4     3 (average)
 18578                           ; direct_byte            8     6 (fixed)
 18579                           ; jumptable            260     6 (fixed)
 18580                           ;	Chosen strategy is simple_byte
 18581  253F  0021               	movlb	1	; select bank1
 18582  2540  0821               	movf	(set_leds_top@x+1)^(0+128),w
 18583  2541  3A00               	xorlw	0	; case 0
 18584  2542  1903               	skipnz
 18585  2543  2D45               	goto	l9864
 18586  2544  2D5C               	goto	l811
 18587  2545                     l9864:	
 18588                           
 18589                           ; Switch size 1, requested type "space"
 18590                           ; Number of cases is 7, Range of values is 1 to 100
 18591                           ; switch strategies available:
 18592                           ; Name         Instructions Cycles
 18593                           ; simple_byte           22    12 (average)
 18594                           ; direct_byte          209     9 (fixed)
 18595                           ; jumptable            263     9 (fixed)
 18596                           ;	Chosen strategy is simple_byte
 18597  2545  0820               	movf	set_leds_top@x^(0+128),w
 18598  2546  3A01               	xorlw	1	; case 1
 18599  2547  1903               	skipnz
 18600  2548  2D10               	goto	l7748
 18601  2549  3A03               	xorlw	3	; case 2
 18602  254A  1903               	skipnz
 18603  254B  2D18               	goto	l7750
 18604  254C  3A01               	xorlw	1	; case 3
 18605  254D  1903               	skipnz
 18606  254E  2D20               	goto	l7752
 18607  254F  3A07               	xorlw	7	; case 4
 18608  2550  1903               	skipnz
 18609  2551  2D28               	goto	l7754
 18610  2552  3A01               	xorlw	1	; case 5
 18611  2553  1903               	skipnz
 18612  2554  2D30               	goto	l7756
 18613  2555  3A03               	xorlw	3	; case 6
 18614  2556  1903               	skipnz
 18615  2557  2D5C               	goto	l811
 18616  2558  3A62               	xorlw	98	; case 100
 18617  2559  1903               	skipnz
 18618  255A  2D38               	goto	l810
 18619  255B  2D5C               	goto	l811
 18620  255C                     l811:	
 18621  255C  0008               	return
 18622  255D                     __end_of_set_leds_top:	
 18623                           
 18624                           	psect	text65
 18625  206F                     __ptext65:	
 18626 ;; *************** function _set_leds_bottom *****************
 18627 ;; Defined at:
 18628 ;;		line 51 in file "LEDs.c"
 18629 ;; Parameters:    Size  Location     Type
 18630 ;;  x               2    0[BANK1 ] int 
 18631 ;; Auto vars:     Size  Location     Type
 18632 ;;		None
 18633 ;; Return value:  Size  Location     Type
 18634 ;;                  1    wreg      void 
 18635 ;; Registers used:
 18636 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 18637 ;; Tracked objects:
 18638 ;;		On entry : 0/0
 18639 ;;		On exit  : 0/0
 18640 ;;		Unchanged: 0/0
 18641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18642 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18645 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18646 ;;Total ram usage:        2 bytes
 18647 ;; Hardware stack levels used:    1
 18648 ;; Hardware stack levels required when called:    3
 18649 ;; This function calls:
 18650 ;;		Nothing
 18651 ;; This function is called by:
 18652 ;;		_ReadSavedSettings
 18653 ;;		_ring_tactiles
 18654 ;;		_solidring_tactiles
 18655 ;;		_read_bottom_tactile
 18656 ;;		_setPresetDisplay
 18657 ;;		_resetRingLEDs
 18658 ;;		_setExpressionDisplay
 18659 ;;		_star_tactiles
 18660 ;; This function uses a non-reentrant model
 18661 ;;
 18662                           
 18663                           
 18664                           ;psect for function _set_leds_bottom
 18665  206F                     _set_leds_bottom:	
 18666                           
 18667                           ;LEDs.c: 52: LATDbits.LATD0 = 0;
 18668                           
 18669                           ;incstack = 0
 18670                           ; Regs used in _set_leds_bottom: [wreg-fsr0h+status,2+status,0]
 18671  206F  0022               	movlb	2	; select bank2
 18672  2070  100F               	bcf	15,0	;volatile
 18673                           
 18674                           ;LEDs.c: 53: LATDbits.LATD1 = 0;
 18675  2071  108F               	bcf	15,1	;volatile
 18676                           
 18677                           ;LEDs.c: 54: LATDbits.LATD2 = 0;
 18678  2072  110F               	bcf	15,2	;volatile
 18679                           
 18680                           ;LEDs.c: 55: LATDbits.LATD3 = 0;
 18681  2073  118F               	bcf	15,3	;volatile
 18682                           
 18683                           ;LEDs.c: 56: LATDbits.LATD4 = 0;
 18684  2074  120F               	bcf	15,4	;volatile
 18685                           
 18686                           ;LEDs.c: 57: switch (x) {
 18687  2075  288C               	goto	l7776
 18688  2076                     l815:	
 18689                           ;LEDs.c: 58: case 1:
 18690                           
 18691                           
 18692                           ;LEDs.c: 59: LATDbits.LATD0 = 1;
 18693  2076  0022               	movlb	2	; select bank2
 18694  2077  140F               	bsf	15,0	;volatile
 18695                           
 18696                           ;LEDs.c: 60: break;
 18697  2078  0008               	return
 18698  2079                     l817:	
 18699                           ;LEDs.c: 61: case 2:
 18700                           
 18701                           
 18702                           ;LEDs.c: 62: LATDbits.LATD1 = 1;
 18703  2079  0022               	movlb	2	; select bank2
 18704  207A  148F               	bsf	15,1	;volatile
 18705                           
 18706                           ;LEDs.c: 63: break;
 18707  207B  0008               	return
 18708  207C                     l818:	
 18709                           ;LEDs.c: 64: case 3:
 18710                           
 18711                           
 18712                           ;LEDs.c: 65: LATDbits.LATD2 = 1;
 18713  207C  0022               	movlb	2	; select bank2
 18714  207D  150F               	bsf	15,2	;volatile
 18715                           
 18716                           ;LEDs.c: 66: break;
 18717  207E  0008               	return
 18718  207F                     l819:	
 18719                           ;LEDs.c: 67: case 4:
 18720                           
 18721                           
 18722                           ;LEDs.c: 68: LATDbits.LATD3 = 1;
 18723  207F  0022               	movlb	2	; select bank2
 18724  2080  158F               	bsf	15,3	;volatile
 18725                           
 18726                           ;LEDs.c: 69: break;
 18727  2081  0008               	return
 18728  2082                     l820:	
 18729                           ;LEDs.c: 70: case 5:
 18730                           
 18731                           
 18732                           ;LEDs.c: 71: LATDbits.LATD4 = 1;
 18733  2082  0022               	movlb	2	; select bank2
 18734  2083  160F               	bsf	15,4	;volatile
 18735                           
 18736                           ;LEDs.c: 74: break;
 18737                           
 18738                           ;LEDs.c: 73: case 6:
 18739                           
 18740                           ;LEDs.c: 72: break;
 18741  2084  0008               	return
 18742  2085                     l822:	
 18743                           ;LEDs.c: 75: case 100:
 18744                           
 18745                           
 18746                           ;LEDs.c: 76: LATDbits.LATD0 = 1;
 18747  2085  0022               	movlb	2	; select bank2
 18748  2086  140F               	bsf	15,0	;volatile
 18749                           
 18750                           ;LEDs.c: 77: LATDbits.LATD1 = 1;
 18751  2087  148F               	bsf	15,1	;volatile
 18752                           
 18753                           ;LEDs.c: 78: LATDbits.LATD2 = 1;
 18754  2088  150F               	bsf	15,2	;volatile
 18755                           
 18756                           ;LEDs.c: 79: LATDbits.LATD3 = 1;
 18757  2089  158F               	bsf	15,3	;volatile
 18758                           
 18759                           ;LEDs.c: 80: LATDbits.LATD4 = 1;
 18760  208A  160F               	bsf	15,4	;volatile
 18761                           
 18762                           ;LEDs.c: 82: }
 18763                           
 18764                           ;LEDs.c: 81: break;
 18765  208B  0008               	return
 18766  208C                     l7776:	
 18767                           
 18768                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18769                           ; Switch size 1, requested type "space"
 18770                           ; Number of cases is 1, Range of values is 0 to 0
 18771                           ; switch strategies available:
 18772                           ; Name         Instructions Cycles
 18773                           ; simple_byte            4     3 (average)
 18774                           ; direct_byte            8     6 (fixed)
 18775                           ; jumptable            260     6 (fixed)
 18776                           ;	Chosen strategy is simple_byte
 18777  208C  0021               	movlb	1	; select bank1
 18778  208D  0821               	movf	(set_leds_bottom@x+1)^(0+128),w
 18779  208E  3A00               	xorlw	0	; case 0
 18780  208F  1903               	skipnz
 18781  2090  2892               	goto	l9866
 18782  2091  28A9               	goto	l823
 18783  2092                     l9866:	
 18784                           
 18785                           ; Switch size 1, requested type "space"
 18786                           ; Number of cases is 7, Range of values is 1 to 100
 18787                           ; switch strategies available:
 18788                           ; Name         Instructions Cycles
 18789                           ; simple_byte           22    12 (average)
 18790                           ; direct_byte          209     9 (fixed)
 18791                           ; jumptable            263     9 (fixed)
 18792                           ;	Chosen strategy is simple_byte
 18793  2092  0820               	movf	set_leds_bottom@x^(0+128),w
 18794  2093  3A01               	xorlw	1	; case 1
 18795  2094  1903               	skipnz
 18796  2095  2876               	goto	l815
 18797  2096  3A03               	xorlw	3	; case 2
 18798  2097  1903               	skipnz
 18799  2098  2879               	goto	l817
 18800  2099  3A01               	xorlw	1	; case 3
 18801  209A  1903               	skipnz
 18802  209B  287C               	goto	l818
 18803  209C  3A07               	xorlw	7	; case 4
 18804  209D  1903               	skipnz
 18805  209E  287F               	goto	l819
 18806  209F  3A01               	xorlw	1	; case 5
 18807  20A0  1903               	skipnz
 18808  20A1  2882               	goto	l820
 18809  20A2  3A03               	xorlw	3	; case 6
 18810  20A3  1903               	skipnz
 18811  20A4  28A9               	goto	l823
 18812  20A5  3A62               	xorlw	98	; case 100
 18813  20A6  1903               	skipnz
 18814  20A7  2885               	goto	l822
 18815  20A8  28A9               	goto	l823
 18816  20A9                     l823:	
 18817  20A9  0008               	return
 18818  20AA                     __end_of_set_leds_bottom:	
 18819                           
 18820                           	psect	text66
 18821  0800                     __ptext66:	
 18822 ;; *************** function _FLASH_ReadWord *****************
 18823 ;; Defined at:
 18824 ;;		line 58 in file "memory.c"
 18825 ;; Parameters:    Size  Location     Type
 18826 ;;  flashAddr       2    0[BANK1 ] unsigned int 
 18827 ;; Auto vars:     Size  Location     Type
 18828 ;;  GIEBitValue     1    2[BANK1 ] unsigned char 
 18829 ;; Return value:  Size  Location     Type
 18830 ;;                  2    0[BANK1 ] unsigned int 
 18831 ;; Registers used:
 18832 ;;		wreg, status,2, status,0
 18833 ;; Tracked objects:
 18834 ;;		On entry : 0/0
 18835 ;;		On exit  : 0/0
 18836 ;;		Unchanged: 0/0
 18837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18838 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18839 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18841 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18842 ;;Total ram usage:        3 bytes
 18843 ;; Hardware stack levels used:    1
 18844 ;; Hardware stack levels required when called:    3
 18845 ;; This function calls:
 18846 ;;		Nothing
 18847 ;; This function is called by:
 18848 ;;		_ReadSavedSettings
 18849 ;;		_FLASH_WriteWord
 18850 ;; This function uses a non-reentrant model
 18851 ;;
 18852                           
 18853                           
 18854                           ;psect for function _FLASH_ReadWord
 18855  0800                     _FLASH_ReadWord:	
 18856                           
 18857                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
 18858                           
 18859                           ;incstack = 0
 18860                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
 18861  0800  3000               	movlw	0
 18862  0801  1B8B               	btfsc	11,7	;volatile
 18863  0802  3001               	movlw	1
 18864  0803  0021               	movlb	1	; select bank1
 18865  0804  00A2               	movwf	FLASH_ReadWord@GIEBitValue^(0+128)
 18866                           
 18867                           ;memory.c: 61: INTCONbits.GIE = 0;
 18868  0805  138B               	bcf	11,7	;volatile
 18869                           
 18870                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
 18871  0806  0820               	movf	FLASH_ReadWord@flashAddr^(0+128),w
 18872  0807  0023               	movlb	3	; select bank3
 18873  0808  0091               	movwf	17	;volatile
 18874                           
 18875                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
 18876  0809  0021               	movlb	1	; select bank1
 18877  080A  0821               	movf	(FLASH_ReadWord@flashAddr+1)^(0+128),w
 18878  080B  0023               	movlb	3	; select bank3
 18879  080C  0092               	movwf	18	;volatile
 18880                           
 18881                           ;memory.c: 65: PMCON1bits.CFGS = 0;
 18882  080D  1315               	bcf	21,6	;volatile
 18883                           
 18884                           ;memory.c: 66: PMCON1bits.RD = 1;
 18885  080E  1415               	bsf	21,0	;volatile
 18886                           
 18887                           ;memory.c: 67: __nop();
 18888  080F  0000               	nop
 18889                           
 18890                           ;memory.c: 68: __nop();
 18891  0810  0000               	nop
 18892                           
 18893                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
 18894  0811  0021               	movlb	1	; select bank1
 18895  0812  0C22               	rrf	FLASH_ReadWord@GIEBitValue^(0+128),w
 18896  0813  1C03               	skipc
 18897  0814  138B               	bcf	11,7	;volatile
 18898  0815  1803               	skipnc
 18899  0816  178B               	bsf	11,7	;volatile
 18900                           
 18901                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
 18902  0817  0023               	movlb	3	; select bank3
 18903  0818  0814               	movf	20,w	;volatile
 18904  0819  0021               	movlb	1	; select bank1
 18905  081A  00A1               	movwf	(?_FLASH_ReadWord+1)^(0+128)
 18906  081B  0023               	movlb	3	; select bank3
 18907  081C  0813               	movf	19,w	;volatile
 18908  081D  0021               	movlb	1	; select bank1
 18909  081E  00A0               	movwf	?_FLASH_ReadWord^(0+128)
 18910  081F  0008               	return
 18911  0820                     __end_of_FLASH_ReadWord:	
 18912                           
 18913                           	psect	text67
 18914  1800                     __ptext67:	
 18915 ;; *************** function _InitializeTaps *****************
 18916 ;; Defined at:
 18917 ;;		line 228 in file "user.c"
 18918 ;; Parameters:    Size  Location     Type
 18919 ;;		None
 18920 ;; Auto vars:     Size  Location     Type
 18921 ;;  itap            2    1[BANK1 ] int 
 18922 ;; Return value:  Size  Location     Type
 18923 ;;                  1    wreg      void 
 18924 ;; Registers used:
 18925 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18926 ;; Tracked objects:
 18927 ;;		On entry : 0/0
 18928 ;;		On exit  : 0/0
 18929 ;;		Unchanged: 0/0
 18930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18932 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18933 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18934 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18935 ;;Total ram usage:        3 bytes
 18936 ;; Hardware stack levels used:    1
 18937 ;; Hardware stack levels required when called:    3
 18938 ;; This function calls:
 18939 ;;		Nothing
 18940 ;; This function is called by:
 18941 ;;		_main
 18942 ;; This function uses a non-reentrant model
 18943 ;;
 18944                           
 18945                           
 18946                           ;psect for function _InitializeTaps
 18947  1800                     _InitializeTaps:	
 18948                           
 18949                           ;user.c: 229: for (int itap = 0; itap < 12; itap++) {
 18950                           
 18951                           ;incstack = 0
 18952                           ; Regs used in _InitializeTaps: [wreg+fsr1l+fsr1h+status,2+status,0]
 18953  1800  0021               	movlb	1	; select bank1
 18954  1801  01A1               	clrf	InitializeTaps@itap^(0+128)
 18955  1802  01A2               	clrf	(InitializeTaps@itap+1)^(0+128)
 18956  1803                     L23:	
 18957  1803  0822               	movf	(InitializeTaps@itap+1)^(0+128),w
 18958  1804  3A80               	xorlw	128
 18959  1805  00A0               	movwf	??_InitializeTaps^(0+128)
 18960  1806  3080               	movlw	128
 18961  1807  0220               	subwf	??_InitializeTaps^(0+128),w
 18962  1808  1D03               	skipz
 18963  1809  280C               	goto	u9335
 18964  180A  300C               	movlw	12
 18965  180B  0221               	subwf	InitializeTaps@itap^(0+128),w
 18966  180C                     u9335:	
 18967  180C  1803               	btfsc	3,0
 18968  180D  0008               	return
 18969                           
 18970                           ;user.c: 230: tap[itap] = 0;
 18971  180E  0021               	movlb	1	; select bank1
 18972  180F  0821               	movf	InitializeTaps@itap^(0+128),w
 18973  1810  00A0               	movwf	??_InitializeTaps^(0+128)
 18974  1811  3001               	movlw	1
 18975  1812                     u9345:	
 18976  1812  35A0               	lslf	??_InitializeTaps^(0+128),f
 18977  1813  3EFF               	addlw	-1
 18978  1814  1D03               	skipz
 18979  1815  2812               	goto	u9345
 18980  1816  3520               	lslf	??_InitializeTaps^(0+128),w
 18981  1817  3EA0               	addlw	(low (_tap| (0+512)))& (0+255)
 18982  1818  0086               	movwf	6
 18983  1819  3002               	movlw	2	; select bank5/6
 18984  181A  0087               	movwf	7
 18985  181B  3000               	movlw	0
 18986  181C  3FC0               	movwi [0]fsr1
 18987  181D  3000               	movlw	0
 18988  181E  3FC1               	movwi [1]fsr1
 18989  181F  3FC2               	movwi [2]fsr1
 18990  1820  3FC3               	movwi [3]fsr1
 18991  1821  3001               	movlw	1
 18992  1822  07A1               	addwf	InitializeTaps@itap^(0+128),f
 18993  1823  3000               	movlw	0
 18994  1824  3DA2               	addwfc	(InitializeTaps@itap+1)^(0+128),f
 18995  1825  2803               	goto	L23
 18996  1826                     __end_of_InitializeTaps:	
 18997                           
 18998                           	psect	text68
 18999  2F32                     __ptext68:	
 19000 ;; *************** function _InitApp *****************
 19001 ;; Defined at:
 19002 ;;		line 23 in file "user.c"
 19003 ;; Parameters:    Size  Location     Type
 19004 ;;		None
 19005 ;; Auto vars:     Size  Location     Type
 19006 ;;		None
 19007 ;; Return value:  Size  Location     Type
 19008 ;;                  1    wreg      void 
 19009 ;; Registers used:
 19010 ;;		wreg, status,2, status,0, pclath, cstack
 19011 ;; Tracked objects:
 19012 ;;		On entry : 0/0
 19013 ;;		On exit  : 0/0
 19014 ;;		Unchanged: 0/0
 19015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19017 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19019 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19020 ;;Total ram usage:        0 bytes
 19021 ;; Hardware stack levels used:    1
 19022 ;; Hardware stack levels required when called:    5
 19023 ;; This function calls:
 19024 ;;		_init_adc
 19025 ;;		_init_pwm
 19026 ;; This function is called by:
 19027 ;;		_main
 19028 ;; This function uses a non-reentrant model
 19029 ;;
 19030                           
 19031                           
 19032                           ;psect for function _InitApp
 19033  2F32                     _InitApp:	
 19034                           
 19035                           ;user.c: 24: TRISBbits.TRISB0 = 0;
 19036                           
 19037                           ;incstack = 0
 19038                           ; Regs used in _InitApp: [wreg+status,2+status,0+pclath+cstack]
 19039  2F32  0021               	movlb	1	; select bank1
 19040  2F33  100D               	bcf	13,0	;volatile
 19041                           
 19042                           ;user.c: 25: TRISBbits.TRISB1 = 0;
 19043  2F34  108D               	bcf	13,1	;volatile
 19044                           
 19045                           ;user.c: 26: TRISBbits.TRISB2 = 0;
 19046  2F35  110D               	bcf	13,2	;volatile
 19047                           
 19048                           ;user.c: 27: TRISBbits.TRISB3 = 0;
 19049  2F36  118D               	bcf	13,3	;volatile
 19050                           
 19051                           ;user.c: 28: TRISBbits.TRISB4 = 0;
 19052  2F37  120D               	bcf	13,4	;volatile
 19053                           
 19054                           ;user.c: 29: TRISBbits.TRISB5 = 0;
 19055  2F38  128D               	bcf	13,5	;volatile
 19056                           
 19057                           ;user.c: 31: TRISCbits.TRISC0 = 1;
 19058  2F39  140E               	bsf	14,0	;volatile
 19059                           
 19060                           ;user.c: 32: TRISCbits.TRISC4 = 0;
 19061  2F3A  120E               	bcf	14,4	;volatile
 19062                           
 19063                           ;user.c: 33: TRISCbits.TRISC5 = 0;
 19064  2F3B  128E               	bcf	14,5	;volatile
 19065                           
 19066                           ;user.c: 36: TRISDbits.TRISD0 = 0;
 19067  2F3C  100F               	bcf	15,0	;volatile
 19068                           
 19069                           ;user.c: 37: TRISDbits.TRISD1 = 0;
 19070  2F3D  108F               	bcf	15,1	;volatile
 19071                           
 19072                           ;user.c: 38: TRISDbits.TRISD2 = 0;
 19073  2F3E  110F               	bcf	15,2	;volatile
 19074                           
 19075                           ;user.c: 39: TRISDbits.TRISD3 = 0;
 19076  2F3F  118F               	bcf	15,3	;volatile
 19077                           
 19078                           ;user.c: 40: TRISDbits.TRISD4 = 0;
 19079  2F40  120F               	bcf	15,4	;volatile
 19080                           
 19081                           ;user.c: 41: TRISDbits.TRISD5 = 1;
 19082  2F41  168F               	bsf	15,5	;volatile
 19083                           
 19084                           ;user.c: 42: TRISDbits.TRISD6 = 1;
 19085  2F42  170F               	bsf	15,6	;volatile
 19086                           
 19087                           ;user.c: 43: TRISDbits.TRISD7 = 1;
 19088  2F43  178F               	bsf	15,7	;volatile
 19089                           
 19090                           ;user.c: 49: TRISEbits.TRISE0 = 1;
 19091  2F44  1410               	bsf	16,0	;volatile
 19092                           
 19093                           ;user.c: 50: TRISEbits.TRISE1 = 1;
 19094  2F45  1490               	bsf	16,1	;volatile
 19095                           
 19096                           ;user.c: 51: ANSELEbits.ANSE0 = 0;
 19097  2F46  0023               	movlb	3	; select bank3
 19098  2F47  1010               	bcf	16,0	;volatile
 19099                           
 19100                           ;user.c: 52: ANSELEbits.ANSE1 = 0;
 19101  2F48  1090               	bcf	16,1	;volatile
 19102                           
 19103                           ;user.c: 53: PORTEbits.RE0 = 0;
 19104  2F49  0020               	movlb	0	; select bank0
 19105  2F4A  1010               	bcf	16,0	;volatile
 19106                           
 19107                           ;user.c: 54: PORTEbits.RE1 = 0;
 19108  2F4B  1090               	bcf	16,1	;volatile
 19109                           
 19110                           ;user.c: 56: TRISFbits.TRISF0 = 0;
 19111  2F4C  0026               	movlb	6	; select bank6
 19112  2F4D  100C               	bcf	12,0	;volatile
 19113                           
 19114                           ;user.c: 57: TRISFbits.TRISF1 = 0;
 19115  2F4E  108C               	bcf	12,1	;volatile
 19116                           
 19117                           ;user.c: 58: TRISFbits.TRISF2 = 0;
 19118  2F4F  110C               	bcf	12,2	;volatile
 19119                           
 19120                           ;user.c: 59: TRISFbits.TRISF3 = 0;
 19121  2F50  118C               	bcf	12,3	;volatile
 19122                           
 19123                           ;user.c: 60: TRISFbits.TRISF4 = 0;
 19124  2F51  120C               	bcf	12,4	;volatile
 19125                           
 19126                           ;user.c: 61: TRISFbits.TRISF5 = 0;
 19127  2F52  128C               	bcf	12,5	;volatile
 19128                           
 19129                           ;user.c: 62: TRISFbits.TRISF6 = 1;
 19130  2F53  170C               	bsf	12,6	;volatile
 19131                           
 19132                           ;user.c: 63: ANSELFbits.ANSF6 = 0;
 19133  2F54  0028               	movlb	8	; select bank8
 19134  2F55  130C               	bcf	12,6	;volatile
 19135                           
 19136                           ;user.c: 65: TRISGbits.TRISG1 = 0;
 19137  2F56  0026               	movlb	6	; select bank6
 19138  2F57  108D               	bcf	13,1	;volatile
 19139                           
 19140                           ;user.c: 66: TRISGbits.TRISG2 = 0;
 19141  2F58  110D               	bcf	13,2	;volatile
 19142                           
 19143                           ;user.c: 68: init_adc();
 19144  2F59  31AC  24F5  31AF   	fcall	_init_adc
 19145                           
 19146                           ;user.c: 69: init_pwm();
 19147  2F5C  31A2  225E         	fcall	_init_pwm
 19148                           
 19149                           ;user.c: 71: INTCONbits.GIE = 0b1;
 19150  2F5E  178B               	bsf	11,7	;volatile
 19151                           
 19152                           ;user.c: 72: INTCONbits.TMR0IE = 0b1;
 19153  2F5F  168B               	bsf	11,5	;volatile
 19154                           
 19155                           ;user.c: 73: INTCONbits.TMR0IF = 0b0;
 19156  2F60  110B               	bcf	11,2	;volatile
 19157  2F61  0008               	return
 19158  2F62                     __end_of_InitApp:	
 19159                           
 19160                           	psect	text69
 19161  225E                     __ptext69:	
 19162 ;; *************** function _init_pwm *****************
 19163 ;; Defined at:
 19164 ;;		line 129 in file "user.c"
 19165 ;; Parameters:    Size  Location     Type
 19166 ;;		None
 19167 ;; Auto vars:     Size  Location     Type
 19168 ;;		None
 19169 ;; Return value:  Size  Location     Type
 19170 ;;                  1    wreg      void 
 19171 ;; Registers used:
 19172 ;;		wreg, status,2, status,0, pclath, cstack
 19173 ;; Tracked objects:
 19174 ;;		On entry : 0/0
 19175 ;;		On exit  : 0/0
 19176 ;;		Unchanged: 0/0
 19177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19181 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19182 ;;Total ram usage:        0 bytes
 19183 ;; Hardware stack levels used:    1
 19184 ;; Hardware stack levels required when called:    4
 19185 ;; This function calls:
 19186 ;;		_init_timer0
 19187 ;;		_init_timer2
 19188 ;; This function is called by:
 19189 ;;		_InitApp
 19190 ;; This function uses a non-reentrant model
 19191 ;;
 19192                           
 19193                           
 19194                           ;psect for function _init_pwm
 19195  225E                     _init_pwm:	
 19196                           
 19197                           ;user.c: 130: APFCONbits.CCP2SEL = 0;
 19198                           
 19199                           ;incstack = 0
 19200                           ; Regs used in _init_pwm: [wreg+status,2+status,0+pclath+cstack]
 19201  225E  0022               	movlb	2	; select bank2
 19202  225F  101D               	bcf	29,0	;volatile
 19203                           
 19204                           ;user.c: 131: TRISCbits.TRISC2 = 0;
 19205  2260  0021               	movlb	1	; select bank1
 19206  2261  110E               	bcf	14,2	;volatile
 19207                           
 19208                           ;user.c: 132: TRISCbits.TRISC1 = 0;
 19209  2262  108E               	bcf	14,1	;volatile
 19210                           
 19211                           ;user.c: 133: TRISGbits.TRISG0 = 0;
 19212  2263  0026               	movlb	6	; select bank6
 19213  2264  100D               	bcf	13,0	;volatile
 19214                           
 19215                           ;user.c: 134: TRISGbits.TRISG3 = 0;
 19216  2265  118D               	bcf	13,3	;volatile
 19217                           
 19218                           ;user.c: 135: TRISGbits.TRISG4 = 0;
 19219  2266  120D               	bcf	13,4	;volatile
 19220                           
 19221                           ;user.c: 136: TRISEbits.TRISE6 = 0;
 19222  2267  0021               	movlb	1	; select bank1
 19223  2268  1310               	bcf	16,6	;volatile
 19224                           
 19225                           ;user.c: 137: TRISEbits.TRISE5 = 0;
 19226  2269  1290               	bcf	16,5	;volatile
 19227                           
 19228                           ;user.c: 138: TRISEbits.TRISE4 = 0;
 19229  226A  1210               	bcf	16,4	;volatile
 19230                           
 19231                           ;user.c: 139: TRISEbits.TRISE3 = 0;
 19232  226B  1190               	bcf	16,3	;volatile
 19233                           
 19234                           ;user.c: 140: TRISEbits.TRISE2 = 0;
 19235  226C  1110               	bcf	16,2	;volatile
 19236                           
 19237                           ;user.c: 141: CCP1CONbits.CCP1M = 0b1111;
 19238  226D  300F               	movlw	15
 19239  226E  0025               	movlb	5	; select bank5
 19240  226F  0493               	iorwf	19,f	;volatile
 19241                           
 19242                           ;user.c: 142: CCP2CONbits.CCP2M = 0b1111;
 19243  2270  300F               	movlw	15
 19244  2271  049A               	iorwf	26,f	;volatile
 19245                           
 19246                           ;user.c: 143: CCP3CONbits.CCP3M = 0b1111;
 19247  2272  300F               	movlw	15
 19248  2273  0026               	movlb	6	; select bank6
 19249  2274  0493               	iorwf	19,f	;volatile
 19250                           
 19251                           ;user.c: 144: CCP4CONbits.CCP4M = 0b1111;
 19252  2275  300F               	movlw	15
 19253  2276  049A               	iorwf	26,f	;volatile
 19254                           
 19255                           ;user.c: 145: CCP5CONbits.CCP5M = 0b1111;
 19256  2277  300F               	movlw	15
 19257  2278  049E               	iorwf	30,f	;volatile
 19258                           
 19259                           ;user.c: 146: CCP6CONbits.CCP6M = 0b1111;
 19260  2279  300F               	movlw	15
 19261  227A  002C               	movlb	12	; select bank12
 19262  227B  0493               	iorwf	19,f	;volatile
 19263                           
 19264                           ;user.c: 147: CCP7CONbits.CCP7M = 0b1111;
 19265  227C  300F               	movlw	15
 19266  227D  0496               	iorwf	22,f	;volatile
 19267                           
 19268                           ;user.c: 148: CCP8CONbits.CCP8M = 0b1111;
 19269  227E  300F               	movlw	15
 19270  227F  0499               	iorwf	25,f	;volatile
 19271                           
 19272                           ;user.c: 149: CCP9CONbits.CCP9M = 0b1111;
 19273  2280  300F               	movlw	15
 19274  2281  049C               	iorwf	28,f	;volatile
 19275                           
 19276                           ;user.c: 150: CCP10CONbits.CCP10M = 0b1111;
 19277  2282  300F               	movlw	15
 19278  2283  049F               	iorwf	31,f	;volatile
 19279                           
 19280                           ;user.c: 151: CCPTMRS0 = 0b00000000;
 19281  2284  0025               	movlb	5	; select bank5
 19282  2285  019D               	clrf	29	;volatile
 19283                           
 19284                           ;user.c: 152: CCPTMRS1 = 0b00000000;
 19285  2286  019E               	clrf	30	;volatile
 19286                           
 19287                           ;user.c: 153: CCPTMRS2 = 0b00000000;
 19288  2287  019F               	clrf	31	;volatile
 19289                           
 19290                           ;user.c: 154: CCPR1 = 50;
 19291  2288  3000               	movlw	0
 19292  2289  0092               	movwf	18	;volatile
 19293  228A  3032               	movlw	50
 19294  228B  0091               	movwf	17	;volatile
 19295                           
 19296                           ;user.c: 155: CCPR2 = 100;
 19297  228C  3000               	movlw	0
 19298  228D  0099               	movwf	25	;volatile
 19299  228E  3064               	movlw	100
 19300  228F  0098               	movwf	24	;volatile
 19301                           
 19302                           ;user.c: 156: CCPR3 = 150;
 19303  2290  3000               	movlw	0
 19304  2291  0026               	movlb	6	; select bank6
 19305  2292  0092               	movwf	18	;volatile
 19306  2293  3096               	movlw	150
 19307  2294  0091               	movwf	17	;volatile
 19308                           
 19309                           ;user.c: 157: CCPR4 = 200;
 19310  2295  3000               	movlw	0
 19311  2296  0099               	movwf	25	;volatile
 19312  2297  30C8               	movlw	200
 19313  2298  0098               	movwf	24	;volatile
 19314                           
 19315                           ;user.c: 158: init_timer2();
 19316  2299  31AC  24E3  31A2   	fcall	_init_timer2
 19317                           
 19318                           ;user.c: 159: init_timer0();
 19319  229C  3187  27F8         	fcall	_init_timer0
 19320  229E  0008               	return
 19321  229F                     __end_of_init_pwm:	
 19322                           
 19323                           	psect	text70
 19324  2CE3                     __ptext70:	
 19325 ;; *************** function _init_timer2 *****************
 19326 ;; Defined at:
 19327 ;;		line 162 in file "user.c"
 19328 ;; Parameters:    Size  Location     Type
 19329 ;;		None
 19330 ;; Auto vars:     Size  Location     Type
 19331 ;;		None
 19332 ;; Return value:  Size  Location     Type
 19333 ;;                  1    wreg      void 
 19334 ;; Registers used:
 19335 ;;		wreg, status,2, status,0
 19336 ;; Tracked objects:
 19337 ;;		On entry : 0/0
 19338 ;;		On exit  : 0/0
 19339 ;;		Unchanged: 0/0
 19340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19342 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19344 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19345 ;;Total ram usage:        0 bytes
 19346 ;; Hardware stack levels used:    1
 19347 ;; Hardware stack levels required when called:    3
 19348 ;; This function calls:
 19349 ;;		Nothing
 19350 ;; This function is called by:
 19351 ;;		_init_pwm
 19352 ;; This function uses a non-reentrant model
 19353 ;;
 19354                           
 19355                           
 19356                           ;psect for function _init_timer2
 19357  2CE3                     _init_timer2:	
 19358                           
 19359                           ;user.c: 163: T2CONbits.T2OUTPS = 0b0000;
 19360                           
 19361                           ;incstack = 0
 19362                           ; Regs used in _init_timer2: [wreg+status,2+status,0]
 19363  2CE3  3087               	movlw	-121
 19364  2CE4  0020               	movlb	0	; select bank0
 19365  2CE5  059C               	andwf	28,f	;volatile
 19366                           
 19367                           ;user.c: 164: T2CONbits.T2CKPS = 0b00;
 19368  2CE6  30FC               	movlw	-4
 19369  2CE7  059C               	andwf	28,f	;volatile
 19370                           
 19371                           ;user.c: 165: PR2 = 0xFF;
 19372  2CE8  30FF               	movlw	255
 19373  2CE9  009B               	movwf	27	;volatile
 19374                           
 19375                           ;user.c: 166: T2CONbits.TMR2ON = 1;
 19376  2CEA  151C               	bsf	28,2	;volatile
 19377  2CEB  0008               	return
 19378  2CEC                     __end_of_init_timer2:	
 19379                           
 19380                           	psect	text71
 19381  07F8                     __ptext71:	
 19382 ;; *************** function _init_timer0 *****************
 19383 ;; Defined at:
 19384 ;;		line 169 in file "user.c"
 19385 ;; Parameters:    Size  Location     Type
 19386 ;;		None
 19387 ;; Auto vars:     Size  Location     Type
 19388 ;;		None
 19389 ;; Return value:  Size  Location     Type
 19390 ;;                  1    wreg      void 
 19391 ;; Registers used:
 19392 ;;		None
 19393 ;; Tracked objects:
 19394 ;;		On entry : 0/0
 19395 ;;		On exit  : 0/0
 19396 ;;		Unchanged: 0/0
 19397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19401 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19402 ;;Total ram usage:        0 bytes
 19403 ;; Hardware stack levels used:    1
 19404 ;; Hardware stack levels required when called:    3
 19405 ;; This function calls:
 19406 ;;		Nothing
 19407 ;; This function is called by:
 19408 ;;		_init_pwm
 19409 ;; This function uses a non-reentrant model
 19410 ;;
 19411                           
 19412                           
 19413                           ;psect for function _init_timer0
 19414  07F8                     _init_timer0:	
 19415                           
 19416                           ;user.c: 170: OPTION_REGbits.TMR0CS = 0b0;
 19417                           
 19418                           ;incstack = 0
 19419                           ; Regs used in _init_timer0: []
 19420  07F8  0021               	movlb	1	; select bank1
 19421  07F9  1295               	bcf	21,5	;volatile
 19422                           
 19423                           ;user.c: 171: OPTION_REGbits.PSA = 0b0;
 19424  07FA  1195               	bcf	21,3	;volatile
 19425                           
 19426                           ;user.c: 172: OPTION_REGbits.PS0 = 0b0;
 19427  07FB  1015               	bcf	21,0	;volatile
 19428                           
 19429                           ;user.c: 173: OPTION_REGbits.PS1 = 0b1;
 19430  07FC  1495               	bsf	21,1	;volatile
 19431                           
 19432                           ;user.c: 174: OPTION_REGbits.PS2 = 0b0;
 19433  07FD  1115               	bcf	21,2	;volatile
 19434  07FE  0008               	return
 19435  07FF                     __end_of_init_timer0:	
 19436                           
 19437                           	psect	text72
 19438  2CF5                     __ptext72:	
 19439 ;; *************** function _init_adc *****************
 19440 ;; Defined at:
 19441 ;;		line 115 in file "user.c"
 19442 ;; Parameters:    Size  Location     Type
 19443 ;;		None
 19444 ;; Auto vars:     Size  Location     Type
 19445 ;;		None
 19446 ;; Return value:  Size  Location     Type
 19447 ;;                  1    wreg      void 
 19448 ;; Registers used:
 19449 ;;		wreg, status,2, status,0
 19450 ;; Tracked objects:
 19451 ;;		On entry : 0/0
 19452 ;;		On exit  : 0/0
 19453 ;;		Unchanged: 0/0
 19454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19458 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19459 ;;Total ram usage:        0 bytes
 19460 ;; Hardware stack levels used:    1
 19461 ;; Hardware stack levels required when called:    3
 19462 ;; This function calls:
 19463 ;;		Nothing
 19464 ;; This function is called by:
 19465 ;;		_InitApp
 19466 ;; This function uses a non-reentrant model
 19467 ;;
 19468                           
 19469                           
 19470                           ;psect for function _init_adc
 19471  2CF5                     _init_adc:	
 19472                           
 19473                           ;user.c: 116: ADCON1bits.ADFM = 0b1;
 19474                           
 19475                           ;incstack = 0
 19476                           ; Regs used in _init_adc: [wreg+status,2+status,0]
 19477  2CF5  0021               	movlb	1	; select bank1
 19478  2CF6  179E               	bsf	30,7	;volatile
 19479                           
 19480                           ;user.c: 117: ADCON1bits.ADCS = 0b110;
 19481  2CF7  081E               	movf	30,w	;volatile
 19482  2CF8  398F               	andlw	-113
 19483  2CF9  3860               	iorlw	96
 19484  2CFA  009E               	movwf	30	;volatile
 19485                           
 19486                           ;user.c: 118: ADCON1bits.ADPREF = 0b00;
 19487  2CFB  30FC               	movlw	-4
 19488  2CFC  059E               	andwf	30,f	;volatile
 19489                           
 19490                           ;user.c: 119: ADCON0bits.ADON = 0b1;
 19491  2CFD  141D               	bsf	29,0	;volatile
 19492  2CFE  0008               	return
 19493  2CFF                     __end_of_init_adc:	
 19494                           
 19495                           	psect	text73
 19496  2CDB                     __ptext73:	
 19497 ;; *************** function _ConfigureOscillator *****************
 19498 ;; Defined at:
 19499 ;;		line 18 in file "system.c"
 19500 ;; Parameters:    Size  Location     Type
 19501 ;;		None
 19502 ;; Auto vars:     Size  Location     Type
 19503 ;;		None
 19504 ;; Return value:  Size  Location     Type
 19505 ;;                  1    wreg      void 
 19506 ;; Registers used:
 19507 ;;		wreg, status,2, status,0
 19508 ;; Tracked objects:
 19509 ;;		On entry : 0/0
 19510 ;;		On exit  : 0/0
 19511 ;;		Unchanged: 0/0
 19512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19516 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19517 ;;Total ram usage:        0 bytes
 19518 ;; Hardware stack levels used:    1
 19519 ;; Hardware stack levels required when called:    3
 19520 ;; This function calls:
 19521 ;;		Nothing
 19522 ;; This function is called by:
 19523 ;;		_main
 19524 ;; This function uses a non-reentrant model
 19525 ;;
 19526                           
 19527                           
 19528                           ;psect for function _ConfigureOscillator
 19529  2CDB                     _ConfigureOscillator:	
 19530                           
 19531                           ;system.c: 20: OSCCONbits.SCS = 0b00;
 19532                           
 19533                           ;incstack = 0
 19534                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
 19535  2CDB  30FC               	movlw	-4
 19536  2CDC  0021               	movlb	1	; select bank1
 19537  2CDD  0599               	andwf	25,f	;volatile
 19538  2CDE  0008               	return
 19539  2CDF                     __end_of_ConfigureOscillator:	
 19540                           
 19541                           	psect	intentry
 19542  0004                     __pintentry:	
 19543 ;; *************** function _isr *****************
 19544 ;; Defined at:
 19545 ;;		line 28 in file "interrupts.c"
 19546 ;; Parameters:    Size  Location     Type
 19547 ;;		None
 19548 ;; Auto vars:     Size  Location     Type
 19549 ;;  subDiv          1   13[COMMON] unsigned char 
 19550 ;; Return value:  Size  Location     Type
 19551 ;;                  1    wreg      void 
 19552 ;; Registers used:
 19553 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19554 ;; Tracked objects:
 19555 ;;		On entry : 0/0
 19556 ;;		On exit  : 0/0
 19557 ;;		Unchanged: 0/0
 19558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19560 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19561 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19562 ;;      Totals:         1       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19563 ;;Total ram usage:        7 bytes
 19564 ;; Hardware stack levels used:    1
 19565 ;; Hardware stack levels required when called:    2
 19566 ;; This function calls:
 19567 ;;		_modulation
 19568 ;;		i1___awdiv
 19569 ;;		i1_getModulationSubdivision
 19570 ;;		i1_set_leds_top
 19571 ;; This function is called by:
 19572 ;;		Interrupt level 1
 19573 ;; This function uses a non-reentrant model
 19574 ;;
 19575                           
 19576  0004                     _isr:	
 19577                           
 19578                           ;incstack = 0
 19579                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19580  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 19581  0005  3180               	pagesel	$
 19582  0006  0020               	movlb	0	; select bank0
 19583  0007  087F               	movf	127,w
 19584  0008  00BF               	movwf	??_isr+5
 19585                           
 19586                           ;interrupts.c: 31: extern char isInitialized;
 19587                           ;interrupts.c: 32: extern volatile long timer;
 19588                           ;interrupts.c: 33: extern volatile long sub_timer;
 19589                           ;interrupts.c: 34: extern volatile long tap_timer;
 19590                           ;interrupts.c: 35: extern signed int adjusted_pot_value;
 19591                           ;interrupts.c: 36: extern int mod_delay_time;
 19592                           ;interrupts.c: 40: extern int top_push_state;
 19593                           ;interrupts.c: 41: extern uint8_t longBypass_start;
 19594                           ;interrupts.c: 42: extern volatile long mod_timer;
 19595                           ;interrupts.c: 43: extern volatile long delay_time;
 19596                           ;interrupts.c: 46: if (INTCONbits.TMR0IF == 1) {
 19597  0009  1D0B               	btfss	11,2	;volatile
 19598  000A  2AEE               	goto	i1l137
 19599                           
 19600                           ;interrupts.c: 47: if (isInitialized == 0) {
 19601  000B  0023               	movlb	3	; select bank3
 19602  000C  0841               	movf	_isInitialized^(0+384),w
 19603  000D  1903               	btfsc	3,2
 19604  000E  2AED               	goto	i1l7030
 19605                           
 19606                           ;interrupts.c: 52: }
 19607                           ;interrupts.c: 63: if (timer == 0) {
 19608                           
 19609                           ;interrupts.c: 51: return;
 19610                           
 19611                           ;interrupts.c: 50: INTCONbits.TMR0IF = 0;
 19612  000F  0020               	movlb	0	; select bank0
 19613  0010  0859               	movf	_timer+3,w	;volatile
 19614  0011  0458               	iorwf	_timer+2,w	;volatile
 19615  0012  0457               	iorwf	_timer+1,w	;volatile
 19616  0013  0456               	iorwf	_timer,w	;volatile
 19617  0014  1D03               	skipz
 19618  0015  281B               	goto	i1l138
 19619                           
 19620                           ;interrupts.c: 64: tmpModDelay = mod_delay_time;
 19621  0016  0023               	movlb	3	; select bank3
 19622  0017  085A               	movf	(_mod_delay_time+1)^(0+384),w
 19623  0018  00BD               	movwf	(_tmpModDelay+1)^(0+384)
 19624  0019  0859               	movf	_mod_delay_time^(0+384),w
 19625  001A  00BC               	movwf	_tmpModDelay^(0+384)
 19626  001B                     i1l138:	
 19627                           
 19628                           ;interrupts.c: 65: }
 19629                           ;interrupts.c: 70: timer = timer + 1;
 19630  001B  3001               	movlw	1
 19631  001C  0020               	movlb	0	; select bank0
 19632  001D  00BA               	movwf	??_isr
 19633  001E  3000               	movlw	0
 19634  001F  00BB               	movwf	??_isr+1
 19635  0020  3000               	movlw	0
 19636  0021  00BC               	movwf	??_isr+2
 19637  0022  3000               	movlw	0
 19638  0023  00BD               	movwf	??_isr+3
 19639  0024  0856               	movf	_timer,w	;volatile
 19640  0025  07BA               	addwf	??_isr,f
 19641  0026  0857               	movf	_timer+1,w	;volatile
 19642  0027  3DBB               	addwfc	??_isr+1,f
 19643  0028  0858               	movf	_timer+2,w	;volatile
 19644  0029  3DBC               	addwfc	??_isr+2,f
 19645  002A  0859               	movf	_timer+3,w	;volatile
 19646  002B  3DBD               	addwfc	??_isr+3,f
 19647  002C  083D               	movf	??_isr+3,w
 19648  002D  00D9               	movwf	_timer+3	;volatile
 19649  002E  083C               	movf	??_isr+2,w
 19650  002F  00D8               	movwf	_timer+2	;volatile
 19651  0030  083B               	movf	??_isr+1,w
 19652  0031  00D7               	movwf	_timer+1	;volatile
 19653  0032  083A               	movf	??_isr,w
 19654  0033  00D6               	movwf	_timer	;volatile
 19655                           
 19656                           ;interrupts.c: 71: sub_timer = sub_timer + 1;
 19657  0034  3001               	movlw	1
 19658  0035  00BA               	movwf	??_isr
 19659  0036  3000               	movlw	0
 19660  0037  00BB               	movwf	??_isr+1
 19661  0038  3000               	movlw	0
 19662  0039  00BC               	movwf	??_isr+2
 19663  003A  3000               	movlw	0
 19664  003B  00BD               	movwf	??_isr+3
 19665  003C  0023               	movlb	3	; select bank3
 19666  003D  0828               	movf	_sub_timer^(0+384),w	;volatile
 19667  003E  0020               	movlb	0	; select bank0
 19668  003F  07BA               	addwf	??_isr,f
 19669  0040  0023               	movlb	3	; select bank3
 19670  0041  0829               	movf	(_sub_timer+1)^(0+384),w	;volatile
 19671  0042  0020               	movlb	0	; select bank0
 19672  0043  3DBB               	addwfc	??_isr+1,f
 19673  0044  0023               	movlb	3	; select bank3
 19674  0045  082A               	movf	(_sub_timer+2)^(0+384),w	;volatile
 19675  0046  0020               	movlb	0	; select bank0
 19676  0047  3DBC               	addwfc	??_isr+2,f
 19677  0048  0023               	movlb	3	; select bank3
 19678  0049  082B               	movf	(_sub_timer+3)^(0+384),w	;volatile
 19679  004A  0020               	movlb	0	; select bank0
 19680  004B  3DBD               	addwfc	??_isr+3,f
 19681  004C  083D               	movf	??_isr+3,w
 19682  004D  0023               	movlb	3	; select bank3
 19683  004E  00AB               	movwf	(_sub_timer+3)^(0+384)	;volatile
 19684  004F  0020               	movlb	0	; select bank0
 19685  0050  083C               	movf	??_isr+2,w
 19686  0051  0023               	movlb	3	; select bank3
 19687  0052  00AA               	movwf	(_sub_timer+2)^(0+384)	;volatile
 19688  0053  0020               	movlb	0	; select bank0
 19689  0054  083B               	movf	??_isr+1,w
 19690  0055  0023               	movlb	3	; select bank3
 19691  0056  00A9               	movwf	(_sub_timer+1)^(0+384)	;volatile
 19692  0057  0020               	movlb	0	; select bank0
 19693  0058  083A               	movf	??_isr,w
 19694  0059  0023               	movlb	3	; select bank3
 19695  005A  00A8               	movwf	_sub_timer^(0+384)	;volatile
 19696                           
 19697                           ;interrupts.c: 72: tap_timer = tap_timer + 1;
 19698  005B  3001               	movlw	1
 19699  005C  0020               	movlb	0	; select bank0
 19700  005D  00BA               	movwf	??_isr
 19701  005E  3000               	movlw	0
 19702  005F  00BB               	movwf	??_isr+1
 19703  0060  3000               	movlw	0
 19704  0061  00BC               	movwf	??_isr+2
 19705  0062  3000               	movlw	0
 19706  0063  00BD               	movwf	??_isr+3
 19707  0064  0852               	movf	_tap_timer,w	;volatile
 19708  0065  07BA               	addwf	??_isr,f
 19709  0066  0853               	movf	_tap_timer+1,w	;volatile
 19710  0067  3DBB               	addwfc	??_isr+1,f
 19711  0068  0854               	movf	_tap_timer+2,w	;volatile
 19712  0069  3DBC               	addwfc	??_isr+2,f
 19713  006A  0855               	movf	_tap_timer+3,w	;volatile
 19714  006B  3DBD               	addwfc	??_isr+3,f
 19715  006C  083D               	movf	??_isr+3,w
 19716  006D  00D5               	movwf	_tap_timer+3	;volatile
 19717  006E  083C               	movf	??_isr+2,w
 19718  006F  00D4               	movwf	_tap_timer+2	;volatile
 19719  0070  083B               	movf	??_isr+1,w
 19720  0071  00D3               	movwf	_tap_timer+1	;volatile
 19721  0072  083A               	movf	??_isr,w
 19722  0073  00D2               	movwf	_tap_timer	;volatile
 19723                           
 19724                           ;interrupts.c: 73: mod_timer = mod_timer + 1;
 19725  0074  3001               	movlw	1
 19726  0075  00BA               	movwf	??_isr
 19727  0076  3000               	movlw	0
 19728  0077  00BB               	movwf	??_isr+1
 19729  0078  3000               	movlw	0
 19730  0079  00BC               	movwf	??_isr+2
 19731  007A  3000               	movlw	0
 19732  007B  00BD               	movwf	??_isr+3
 19733  007C  0023               	movlb	3	; select bank3
 19734  007D  0824               	movf	_mod_timer^(0+384),w	;volatile
 19735  007E  0020               	movlb	0	; select bank0
 19736  007F  07BA               	addwf	??_isr,f
 19737  0080  0023               	movlb	3	; select bank3
 19738  0081  0825               	movf	(_mod_timer+1)^(0+384),w	;volatile
 19739  0082  0020               	movlb	0	; select bank0
 19740  0083  3DBB               	addwfc	??_isr+1,f
 19741  0084  0023               	movlb	3	; select bank3
 19742  0085  0826               	movf	(_mod_timer+2)^(0+384),w	;volatile
 19743  0086  0020               	movlb	0	; select bank0
 19744  0087  3DBC               	addwfc	??_isr+2,f
 19745  0088  0023               	movlb	3	; select bank3
 19746  0089  0827               	movf	(_mod_timer+3)^(0+384),w	;volatile
 19747  008A  0020               	movlb	0	; select bank0
 19748  008B  3DBD               	addwfc	??_isr+3,f
 19749  008C  083D               	movf	??_isr+3,w
 19750  008D  0023               	movlb	3	; select bank3
 19751  008E  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 19752  008F  0020               	movlb	0	; select bank0
 19753  0090  083C               	movf	??_isr+2,w
 19754  0091  0023               	movlb	3	; select bank3
 19755  0092  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 19756  0093  0020               	movlb	0	; select bank0
 19757  0094  083B               	movf	??_isr+1,w
 19758  0095  0023               	movlb	3	; select bank3
 19759  0096  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 19760  0097  0020               	movlb	0	; select bank0
 19761  0098  083A               	movf	??_isr,w
 19762  0099  0023               	movlb	3	; select bank3
 19763  009A  00A4               	movwf	_mod_timer^(0+384)	;volatile
 19764                           
 19765                           ;interrupts.c: 74: double_timer++;
 19766  009B  3001               	movlw	1
 19767  009C  07A0               	addwf	_double_timer^(0+384),f	;volatile
 19768  009D  3000               	movlw	0
 19769  009E  3DA1               	addwfc	(_double_timer+1)^(0+384),f	;volatile
 19770  009F  3000               	movlw	0
 19771  00A0  3DA2               	addwfc	(_double_timer+2)^(0+384),f	;volatile
 19772  00A1  3000               	movlw	0
 19773  00A2  3DA3               	addwfc	(_double_timer+3)^(0+384),f	;volatile
 19774                           
 19775                           ;interrupts.c: 77: char subDiv = getModulationSubdivision();
 19776  00A3  31AE  26A9  3180   	fcall	i1_getModulationSubdivision
 19777  00A6  0870               	movf	?i1_getModulationSubdivision,w
 19778  00A7  0020               	movlb	0	; select bank0
 19779  00A8  00BA               	movwf	??_isr
 19780  00A9  083A               	movf	??_isr,w
 19781  00AA  00FD               	movwf	isr@subDiv
 19782                           
 19783                           ;interrupts.c: 82: if ((mod_timer >= tmpModDelay) && (mod_counter == subDiv) && (tmpModD
      +                          elay == mod_delay_time)) {
 19784  00AB  0023               	movlb	3	; select bank3
 19785  00AC  083C               	movf	_tmpModDelay^(0+384),w
 19786  00AD  0020               	movlb	0	; select bank0
 19787  00AE  00BA               	movwf	??_isr
 19788  00AF  0023               	movlb	3	; select bank3
 19789  00B0  083D               	movf	(_tmpModDelay+1)^(0+384),w
 19790  00B1  0020               	movlb	0	; select bank0
 19791  00B2  00BB               	movwf	??_isr+1
 19792  00B3  3000               	movlw	0
 19793  00B4  1BBB               	btfsc	??_isr+1,7
 19794  00B5  30FF               	movlw	255
 19795  00B6  00BC               	movwf	??_isr+2
 19796  00B7  00BD               	movwf	??_isr+3
 19797  00B8  0023               	movlb	3	; select bank3
 19798  00B9  0827               	movf	(_mod_timer+3)^(0+384),w	;volatile
 19799  00BA  3A80               	xorlw	128
 19800  00BB  0020               	movlb	0	; select bank0
 19801  00BC  00BE               	movwf	??_isr+4
 19802  00BD  083D               	movf	??_isr+3,w
 19803  00BE  3A80               	xorlw	128
 19804  00BF  023E               	subwf	??_isr+4,w
 19805  00C0  0023               	movlb	3	; select bank3
 19806  00C1  1D03               	skipz
 19807  00C2  28D3               	goto	u678_23
 19808  00C3  0020               	movlb	0	; select bank0
 19809  00C4  083C               	movf	??_isr+2,w
 19810  00C5  0023               	movlb	3	; select bank3
 19811  00C6  0226               	subwf	(_mod_timer+2)^(0+384),w	;volatile
 19812  00C7  1D03               	skipz
 19813  00C8  28D3               	goto	u678_23
 19814  00C9  0020               	movlb	0	; select bank0
 19815  00CA  083B               	movf	??_isr+1,w
 19816  00CB  0023               	movlb	3	; select bank3
 19817  00CC  0225               	subwf	(_mod_timer+1)^(0+384),w	;volatile
 19818  00CD  1D03               	skipz
 19819  00CE  28D3               	goto	u678_23
 19820  00CF  0020               	movlb	0	; select bank0
 19821  00D0  083A               	movf	??_isr,w
 19822  00D1  0023               	movlb	3	; select bank3
 19823  00D2  0224               	subwf	_mod_timer^(0+384),w	;volatile
 19824  00D3                     u678_23:	
 19825  00D3  1C03               	skipc
 19826  00D4  2901               	goto	i1l139
 19827  00D5  087D               	movf	isr@subDiv,w
 19828  00D6  0020               	movlb	0	; select bank0
 19829  00D7  00BA               	movwf	??_isr
 19830  00D8  01BB               	clrf	??_isr+1
 19831  00D9  0023               	movlb	3	; select bank3
 19832  00DA  0858               	movf	(_mod_counter+1)^(0+384),w
 19833  00DB  0020               	movlb	0	; select bank0
 19834  00DC  063B               	xorwf	??_isr+1,w
 19835  00DD  1D03               	skipz
 19836  00DE  28E3               	goto	u679_25
 19837  00DF  0023               	movlb	3	; select bank3
 19838  00E0  0857               	movf	_mod_counter^(0+384),w
 19839  00E1  0020               	movlb	0	; select bank0
 19840  00E2  063A               	xorwf	??_isr,w
 19841  00E3                     u679_25:	
 19842  00E3  1D03               	skipz
 19843  00E4  2901               	goto	i1l139
 19844  00E5  0023               	movlb	3	; select bank3
 19845  00E6  085A               	movf	(_mod_delay_time+1)^(0+384),w
 19846  00E7  063D               	xorwf	(_tmpModDelay+1)^(0+384),w
 19847  00E8  1D03               	skipz
 19848  00E9  28EC               	goto	u680_25
 19849  00EA  0859               	movf	_mod_delay_time^(0+384),w
 19850  00EB  063C               	xorwf	_tmpModDelay^(0+384),w
 19851  00EC                     u680_25:	
 19852  00EC  1D03               	skipz
 19853  00ED  2901               	goto	i1l139
 19854                           
 19855                           ;interrupts.c: 83: tmpModDelay = (delay_time - sub_timer);
 19856  00EE  0928               	comf	_sub_timer^(0+384),w	;volatile
 19857  00EF  0020               	movlb	0	; select bank0
 19858  00F0  00BA               	movwf	??_isr
 19859  00F1  0023               	movlb	3	; select bank3
 19860  00F2  0929               	comf	(_sub_timer+1)^(0+384),w	;volatile
 19861  00F3  0020               	movlb	0	; select bank0
 19862  00F4  00BB               	movwf	??_isr+1
 19863  00F5  0ABA               	incf	??_isr,f
 19864  00F6  1903               	skipnz
 19865  00F7  0ABB               	incf	??_isr+1,f
 19866  00F8  0844               	movf	_delay_time,w	;volatile
 19867  00F9  073A               	addwf	??_isr,w
 19868  00FA  0023               	movlb	3	; select bank3
 19869  00FB  00BC               	movwf	_tmpModDelay^(0+384)
 19870  00FC  0020               	movlb	0	; select bank0
 19871  00FD  0845               	movf	_delay_time+1,w	;volatile
 19872  00FE  3D3B               	addwfc	??_isr+1,w
 19873  00FF  0023               	movlb	3	; select bank3
 19874  0100  00BD               	movwf	(_tmpModDelay+1)^(0+384)
 19875  0101                     i1l139:	
 19876                           
 19877                           ;interrupts.c: 84: }
 19878                           ;interrupts.c: 86: if (longBypass_start == 1) {
 19879  0101  0023               	movlb	3	; select bank3
 19880  0102  0344               	decf	_longBypass_start^(0+384),w
 19881  0103  1D03               	btfss	3,2
 19882  0104  291B               	goto	i1l6934
 19883                           
 19884                           ;interrupts.c: 87: longBypass_timer++;
 19885  0105  3001               	movlw	1
 19886  0106  07B6               	addwf	_longBypass_timer^(0+384),f	;volatile
 19887  0107  3000               	movlw	0
 19888  0108  3DB7               	addwfc	(_longBypass_timer+1)^(0+384),f	;volatile
 19889                           
 19890                           ;interrupts.c: 88: if (longBypass_timer > long_press_limit) {longBypass_timer = long_pre
      +                          ss_limit;}
 19891  0109  0837               	movf	(_longBypass_timer+1)^(0+384),w	;volatile
 19892  010A  0020               	movlb	0	; select bank0
 19893  010B  024B               	subwf	_long_press_limit+1,w
 19894  010C  1D03               	skipz
 19895  010D  2912               	goto	u682_25
 19896  010E  0023               	movlb	3	; select bank3
 19897  010F  0836               	movf	_longBypass_timer^(0+384),w	;volatile
 19898  0110  0020               	movlb	0	; select bank0
 19899  0111  024A               	subwf	_long_press_limit,w
 19900  0112                     u682_25:	
 19901  0112  1803               	skipnc
 19902  0113  291B               	goto	i1l6934
 19903  0114  084B               	movf	_long_press_limit+1,w
 19904  0115  0023               	movlb	3	; select bank3
 19905  0116  00B7               	movwf	(_longBypass_timer+1)^(0+384)	;volatile
 19906  0117  0020               	movlb	0	; select bank0
 19907  0118  084A               	movf	_long_press_limit,w
 19908  0119  0023               	movlb	3	; select bank3
 19909  011A  00B6               	movwf	_longBypass_timer^(0+384)	;volatile
 19910  011B                     i1l6934:	
 19911                           
 19912                           ;interrupts.c: 89: }
 19913                           ;interrupts.c: 90: if (longTap_start == 1) {
 19914  011B  0023               	movlb	3	; select bank3
 19915  011C  0345               	decf	_longTap_start^(0+384),w
 19916  011D  1D03               	btfss	3,2
 19917  011E  2935               	goto	i1l6940
 19918                           
 19919                           ;interrupts.c: 91: longTap_timer++;
 19920  011F  3001               	movlw	1
 19921  0120  07B8               	addwf	_longTap_timer^(0+384),f	;volatile
 19922  0121  3000               	movlw	0
 19923  0122  3DB9               	addwfc	(_longTap_timer+1)^(0+384),f	;volatile
 19924                           
 19925                           ;interrupts.c: 92: if (longTap_timer > long_press_limit) {
 19926  0123  0839               	movf	(_longTap_timer+1)^(0+384),w	;volatile
 19927  0124  0020               	movlb	0	; select bank0
 19928  0125  024B               	subwf	_long_press_limit+1,w
 19929  0126  1D03               	skipz
 19930  0127  292C               	goto	u684_25
 19931  0128  0023               	movlb	3	; select bank3
 19932  0129  0838               	movf	_longTap_timer^(0+384),w	;volatile
 19933  012A  0020               	movlb	0	; select bank0
 19934  012B  024A               	subwf	_long_press_limit,w
 19935  012C                     u684_25:	
 19936  012C  1803               	skipnc
 19937  012D  2935               	goto	i1l6940
 19938                           
 19939                           ;interrupts.c: 93: longTap_timer = long_press_limit;
 19940  012E  084B               	movf	_long_press_limit+1,w
 19941  012F  0023               	movlb	3	; select bank3
 19942  0130  00B9               	movwf	(_longTap_timer+1)^(0+384)	;volatile
 19943  0131  0020               	movlb	0	; select bank0
 19944  0132  084A               	movf	_long_press_limit,w
 19945  0133  0023               	movlb	3	; select bank3
 19946  0134  00B8               	movwf	_longTap_timer^(0+384)	;volatile
 19947  0135                     i1l6940:	
 19948                           
 19949                           ;interrupts.c: 94: }
 19950                           ;interrupts.c: 95: }
 19951                           ;interrupts.c: 97: if (longTap_state < 1 && doubleTap_state < 1 && presetSaveMode < 1) {
 19952  0135  0020               	movlb	0	; select bank0
 19953  0136  084F               	movf	_longTap_state,w	;volatile
 19954  0137  1D03               	btfss	3,2
 19955  0138  2993               	goto	i1l6966
 19956  0139  085C               	movf	_doubleTap_state,w	;volatile
 19957  013A  1D03               	btfss	3,2
 19958  013B  2993               	goto	i1l6966
 19959  013C  085F               	movf	_presetSaveMode,w
 19960  013D  1D03               	btfss	3,2
 19961  013E  2993               	goto	i1l6966
 19962                           
 19963                           ;interrupts.c: 99: if (timer >= baseline_mod_time) {
 19964  013F  0859               	movf	_timer+3,w	;volatile
 19965  0140  3A80               	xorlw	128
 19966  0141  00BA               	movwf	??_isr
 19967  0142  0843               	movf	_baseline_mod_time+3,w	;volatile
 19968  0143  3A80               	xorlw	128
 19969  0144  023A               	subwf	??_isr,w
 19970  0145  1D03               	skipz
 19971  0146  2951               	goto	u688_23
 19972  0147  0842               	movf	_baseline_mod_time+2,w	;volatile
 19973  0148  0258               	subwf	_timer+2,w	;volatile
 19974  0149  1D03               	skipz
 19975  014A  2951               	goto	u688_23
 19976  014B  0841               	movf	_baseline_mod_time+1,w	;volatile
 19977  014C  0257               	subwf	_timer+1,w	;volatile
 19978  014D  1D03               	skipz
 19979  014E  2951               	goto	u688_23
 19980  014F  0840               	movf	_baseline_mod_time,w	;volatile
 19981  0150  0256               	subwf	_timer,w	;volatile
 19982  0151                     u688_23:	
 19983  0151  1C03               	skipc
 19984  0152  2981               	goto	i1l6962
 19985                           
 19986                           ;interrupts.c: 102: LATBbits.LATB4 = 1;
 19987  0153  0022               	movlb	2	; select bank2
 19988  0154  160D               	bsf	13,4	;volatile
 19989                           
 19990                           ;interrupts.c: 104: timer = 0;
 19991  0155  3000               	movlw	0
 19992  0156  0020               	movlb	0	; select bank0
 19993  0157  00D9               	movwf	_timer+3	;volatile
 19994  0158  3000               	movlw	0
 19995  0159  00D8               	movwf	_timer+2	;volatile
 19996  015A  3000               	movlw	0
 19997  015B  00D7               	movwf	_timer+1	;volatile
 19998  015C  3000               	movlw	0
 19999  015D  00D6               	movwf	_timer	;volatile
 20000                           
 20001                           ;interrupts.c: 106: if (modulation_changed == 1) {
 20002  015E  0023               	movlb	3	; select bank3
 20003  015F  0347               	decf	_modulation_changed^(0+384),w
 20004  0160  1D03               	btfss	3,2
 20005  0161  2981               	goto	i1l6962
 20006                           
 20007                           ;interrupts.c: 109: modulation_changed = 0;
 20008  0162  01C7               	clrf	_modulation_changed^(0+384)
 20009                           
 20010                           ;interrupts.c: 110: mod_time_changed = 0;
 20011  0163  01E4               	clrf	_mod_time_changed^(0+384)
 20012                           
 20013                           ;interrupts.c: 111: sub_timer = delay_time;
 20014  0164  0020               	movlb	0	; select bank0
 20015  0165  0847               	movf	_delay_time+3,w	;volatile
 20016  0166  0023               	movlb	3	; select bank3
 20017  0167  00AB               	movwf	(_sub_timer+3)^(0+384)	;volatile
 20018  0168  0020               	movlb	0	; select bank0
 20019  0169  0846               	movf	_delay_time+2,w	;volatile
 20020  016A  0023               	movlb	3	; select bank3
 20021  016B  00AA               	movwf	(_sub_timer+2)^(0+384)	;volatile
 20022  016C  0020               	movlb	0	; select bank0
 20023  016D  0845               	movf	_delay_time+1,w	;volatile
 20024  016E  0023               	movlb	3	; select bank3
 20025  016F  00A9               	movwf	(_sub_timer+1)^(0+384)	;volatile
 20026  0170  0020               	movlb	0	; select bank0
 20027  0171  0844               	movf	_delay_time,w	;volatile
 20028  0172  0023               	movlb	3	; select bank3
 20029  0173  00A8               	movwf	_sub_timer^(0+384)	;volatile
 20030                           
 20031                           ;interrupts.c: 112: tmpModDelay = mod_delay_time;
 20032  0174  085A               	movf	(_mod_delay_time+1)^(0+384),w
 20033  0175  00BD               	movwf	(_tmpModDelay+1)^(0+384)
 20034  0176  0859               	movf	_mod_delay_time^(0+384),w
 20035  0177  00BC               	movwf	_tmpModDelay^(0+384)
 20036                           
 20037                           ;interrupts.c: 113: mod_timer = tmpModDelay;
 20038  0178  083C               	movf	_tmpModDelay^(0+384),w
 20039  0179  00A4               	movwf	_mod_timer^(0+384)	;volatile
 20040  017A  083D               	movf	(_tmpModDelay+1)^(0+384),w
 20041  017B  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 20042  017C  0D89               	rlf	9,f
 20043  017D  3B89               	subwfb	9,f
 20044  017E  0989               	comf	9,f
 20045  017F  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 20046  0180  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 20047  0181                     i1l6962:	
 20048                           
 20049                           ;interrupts.c: 121: }
 20050                           ;interrupts.c: 122: }
 20051                           ;interrupts.c: 124: if (timer >= 30) {
 20052  0181  0020               	movlb	0	; select bank0
 20053  0182  1BD9               	btfsc	_timer+3,7	;volatile
 20054  0183  2993               	goto	i1l6966
 20055  0184  0859               	movf	_timer+3,w	;volatile
 20056  0185  1D03               	btfss	3,2
 20057  0186  2991               	goto	i1l6964
 20058  0187  0858               	movf	_timer+2,w	;volatile
 20059  0188  1D03               	btfss	3,2
 20060  0189  2991               	goto	i1l6964
 20061  018A  0857               	movf	_timer+1,w	;volatile
 20062  018B  1D03               	btfss	3,2
 20063  018C  2991               	goto	i1l6964
 20064  018D  301E               	movlw	30
 20065  018E  0256               	subwf	_timer,w	;volatile
 20066  018F  1C03               	btfss	3,0
 20067  0190  2993               	goto	i1l6966
 20068  0191                     i1l6964:	
 20069                           
 20070                           ;interrupts.c: 126: LATBbits.LATB4 = 0;
 20071  0191  0022               	movlb	2	; select bank2
 20072  0192  120D               	bcf	13,4	;volatile
 20073  0193                     i1l6966:	
 20074                           
 20075                           ;interrupts.c: 128: }
 20076                           ;interrupts.c: 129: }
 20077                           ;interrupts.c: 138: if (presetSaveMode < 1 && mode2_state == 0) {
 20078  0193  0020               	movlb	0	; select bank0
 20079  0194  085F               	movf	_presetSaveMode,w
 20080  0195  1D03               	btfss	3,2
 20081  0196  29EE               	goto	i1l6984
 20082  0197  085E               	movf	_mode2_state,w
 20083  0198  1D03               	btfss	3,2
 20084  0199  29EE               	goto	i1l6984
 20085                           
 20086                           ;interrupts.c: 139: if (sub_timer >= delay_time ) {
 20087  019A  0023               	movlb	3	; select bank3
 20088  019B  082B               	movf	(_sub_timer+3)^(0+384),w	;volatile
 20089  019C  3A80               	xorlw	128
 20090  019D  0020               	movlb	0	; select bank0
 20091  019E  00BA               	movwf	??_isr
 20092  019F  0847               	movf	_delay_time+3,w	;volatile
 20093  01A0  3A80               	xorlw	128
 20094  01A1  023A               	subwf	??_isr,w
 20095  01A2  0023               	movlb	3	; select bank3
 20096  01A3  1D03               	skipz
 20097  01A4  29B5               	goto	u693_23
 20098  01A5  0020               	movlb	0	; select bank0
 20099  01A6  0846               	movf	_delay_time+2,w	;volatile
 20100  01A7  0023               	movlb	3	; select bank3
 20101  01A8  022A               	subwf	(_sub_timer+2)^(0+384),w	;volatile
 20102  01A9  1D03               	skipz
 20103  01AA  29B5               	goto	u693_23
 20104  01AB  0020               	movlb	0	; select bank0
 20105  01AC  0845               	movf	_delay_time+1,w	;volatile
 20106  01AD  0023               	movlb	3	; select bank3
 20107  01AE  0229               	subwf	(_sub_timer+1)^(0+384),w	;volatile
 20108  01AF  1D03               	skipz
 20109  01B0  29B5               	goto	u693_23
 20110  01B1  0020               	movlb	0	; select bank0
 20111  01B2  0844               	movf	_delay_time,w	;volatile
 20112  01B3  0023               	movlb	3	; select bank3
 20113  01B4  0228               	subwf	_sub_timer^(0+384),w	;volatile
 20114  01B5                     u693_23:	
 20115  01B5  1C03               	skipc
 20116  01B6  29D0               	goto	i1l6978
 20117                           
 20118                           ;interrupts.c: 140: if (suspend_blink == 0) {
 20119  01B7  0022               	movlb	2	; select bank2
 20120  01B8  086A               	movf	_suspend_blink^(0+256),w	;volatile
 20121  01B9  1D03               	btfss	3,2
 20122  01BA  29C7               	goto	i1l6976
 20123                           
 20124                           ;interrupts.c: 141: set_leds_top(top_push_state, 1);
 20125  01BB  0020               	movlb	0	; select bank0
 20126  01BC  084D               	movf	_top_push_state+1,w
 20127  01BD  00F1               	movwf	i1set_leds_top@x+1
 20128  01BE  084C               	movf	_top_push_state,w
 20129  01BF  00F0               	movwf	i1set_leds_top@x
 20130  01C0  3001               	movlw	1
 20131  01C1  00F2               	movwf	i1set_leds_top@ledState
 20132  01C2  3000               	movlw	0
 20133  01C3  00F3               	movwf	i1set_leds_top@ledState+1
 20134  01C4  31A2  22E3  3180   	fcall	i1_set_leds_top
 20135  01C7                     i1l6976:	
 20136                           
 20137                           ;interrupts.c: 142: }
 20138                           ;interrupts.c: 144: sub_timer = 0;
 20139  01C7  3000               	movlw	0
 20140  01C8  0023               	movlb	3	; select bank3
 20141  01C9  00AB               	movwf	(_sub_timer+3)^(0+384)	;volatile
 20142  01CA  3000               	movlw	0
 20143  01CB  00AA               	movwf	(_sub_timer+2)^(0+384)	;volatile
 20144  01CC  3000               	movlw	0
 20145  01CD  00A9               	movwf	(_sub_timer+1)^(0+384)	;volatile
 20146  01CE  3000               	movlw	0
 20147  01CF  00A8               	movwf	_sub_timer^(0+384)	;volatile
 20148  01D0                     i1l6978:	
 20149                           
 20150                           ;interrupts.c: 145: }
 20151                           ;interrupts.c: 147: if (sub_timer >= 20) {
 20152  01D0  1BAB               	btfsc	(_sub_timer+3)^(0+384),7	;volatile
 20153  01D1  29EE               	goto	i1l6984
 20154  01D2  082B               	movf	(_sub_timer+3)^(0+384),w	;volatile
 20155  01D3  1D03               	btfss	3,2
 20156  01D4  29DF               	goto	i1l6980
 20157  01D5  082A               	movf	(_sub_timer+2)^(0+384),w	;volatile
 20158  01D6  1D03               	btfss	3,2
 20159  01D7  29DF               	goto	i1l6980
 20160  01D8  0829               	movf	(_sub_timer+1)^(0+384),w	;volatile
 20161  01D9  1D03               	btfss	3,2
 20162  01DA  29DF               	goto	i1l6980
 20163  01DB  3014               	movlw	20
 20164  01DC  0228               	subwf	_sub_timer^(0+384),w	;volatile
 20165  01DD  1C03               	btfss	3,0
 20166  01DE  29EE               	goto	i1l6984
 20167  01DF                     i1l6980:	
 20168                           
 20169                           ;interrupts.c: 148: if (suspend_blink == 0) {
 20170  01DF  0022               	movlb	2	; select bank2
 20171  01E0  086A               	movf	_suspend_blink^(0+256),w	;volatile
 20172  01E1  1D03               	btfss	3,2
 20173  01E2  29EE               	goto	i1l6984
 20174                           
 20175                           ;interrupts.c: 149: set_leds_top(top_push_state, 0);
 20176  01E3  0020               	movlb	0	; select bank0
 20177  01E4  084D               	movf	_top_push_state+1,w
 20178  01E5  00F1               	movwf	i1set_leds_top@x+1
 20179  01E6  084C               	movf	_top_push_state,w
 20180  01E7  00F0               	movwf	i1set_leds_top@x
 20181  01E8  3000               	movlw	0
 20182  01E9  00F2               	movwf	i1set_leds_top@ledState
 20183  01EA  00F3               	movwf	i1set_leds_top@ledState+1
 20184  01EB  31A2  22E3  3180   	fcall	i1_set_leds_top
 20185  01EE                     i1l6984:	
 20186                           
 20187                           ;interrupts.c: 150: }
 20188                           ;interrupts.c: 151: }
 20189                           ;interrupts.c: 152: }
 20190                           ;interrupts.c: 157: if (presetSaveMode == 1) {
 20191  01EE  0020               	movlb	0	; select bank0
 20192  01EF  035F               	decf	_presetSaveMode,w
 20193  01F0  1D03               	btfss	3,2
 20194  01F1  2A1E               	goto	i1l6996
 20195                           
 20196                           ;interrupts.c: 158: if (double_timer >= 250) {
 20197  01F2  0023               	movlb	3	; select bank3
 20198  01F3  1BA3               	btfsc	(_double_timer+3)^(0+384),7	;volatile
 20199  01F4  2A0D               	goto	i1l6992
 20200  01F5  0823               	movf	(_double_timer+3)^(0+384),w	;volatile
 20201  01F6  1D03               	btfss	3,2
 20202  01F7  2A02               	goto	i1l6988
 20203  01F8  0822               	movf	(_double_timer+2)^(0+384),w	;volatile
 20204  01F9  1D03               	btfss	3,2
 20205  01FA  2A02               	goto	i1l6988
 20206  01FB  0821               	movf	(_double_timer+1)^(0+384),w	;volatile
 20207  01FC  1D03               	btfss	3,2
 20208  01FD  2A02               	goto	i1l6988
 20209  01FE  30FA               	movlw	250
 20210  01FF  0220               	subwf	_double_timer^(0+384),w	;volatile
 20211  0200  1C03               	btfss	3,0
 20212  0201  2A0D               	goto	i1l6992
 20213  0202                     i1l6988:	
 20214                           
 20215                           ;interrupts.c: 159: LATBbits.LATB0 = 1;
 20216  0202  0022               	movlb	2	; select bank2
 20217  0203  140D               	bsf	13,0	;volatile
 20218                           
 20219                           ;interrupts.c: 160: double_timer = 0;
 20220  0204  3000               	movlw	0
 20221  0205  0023               	movlb	3	; select bank3
 20222  0206  00A3               	movwf	(_double_timer+3)^(0+384)	;volatile
 20223  0207  3000               	movlw	0
 20224  0208  00A2               	movwf	(_double_timer+2)^(0+384)	;volatile
 20225  0209  3000               	movlw	0
 20226  020A  00A1               	movwf	(_double_timer+1)^(0+384)	;volatile
 20227  020B  3000               	movlw	0
 20228  020C  00A0               	movwf	_double_timer^(0+384)	;volatile
 20229  020D                     i1l6992:	
 20230                           
 20231                           ;interrupts.c: 161: }
 20232                           ;interrupts.c: 162: if (double_timer >= 30) {
 20233  020D  1BA3               	btfsc	(_double_timer+3)^(0+384),7	;volatile
 20234  020E  2A1E               	goto	i1l6996
 20235  020F  0823               	movf	(_double_timer+3)^(0+384),w	;volatile
 20236  0210  1D03               	btfss	3,2
 20237  0211  2A1C               	goto	i1l6994
 20238  0212  0822               	movf	(_double_timer+2)^(0+384),w	;volatile
 20239  0213  1D03               	btfss	3,2
 20240  0214  2A1C               	goto	i1l6994
 20241  0215  0821               	movf	(_double_timer+1)^(0+384),w	;volatile
 20242  0216  1D03               	btfss	3,2
 20243  0217  2A1C               	goto	i1l6994
 20244  0218  301E               	movlw	30
 20245  0219  0220               	subwf	_double_timer^(0+384),w	;volatile
 20246  021A  1C03               	btfss	3,0
 20247  021B  2A1E               	goto	i1l6996
 20248  021C                     i1l6994:	
 20249                           
 20250                           ;interrupts.c: 163: LATBbits.LATB0 = 0;
 20251  021C  0022               	movlb	2	; select bank2
 20252  021D  100D               	bcf	13,0	;volatile
 20253  021E                     i1l6996:	
 20254                           
 20255                           ;interrupts.c: 164: }
 20256                           ;interrupts.c: 165: }
 20257                           ;interrupts.c: 184: if (mod_timer >= tmpModDelay) {
 20258  021E  0023               	movlb	3	; select bank3
 20259  021F  083C               	movf	_tmpModDelay^(0+384),w
 20260  0220  0020               	movlb	0	; select bank0
 20261  0221  00BA               	movwf	??_isr
 20262  0222  0023               	movlb	3	; select bank3
 20263  0223  083D               	movf	(_tmpModDelay+1)^(0+384),w
 20264  0224  0020               	movlb	0	; select bank0
 20265  0225  00BB               	movwf	??_isr+1
 20266  0226  3000               	movlw	0
 20267  0227  1BBB               	btfsc	??_isr+1,7
 20268  0228  30FF               	movlw	255
 20269  0229  00BC               	movwf	??_isr+2
 20270  022A  00BD               	movwf	??_isr+3
 20271  022B  0023               	movlb	3	; select bank3
 20272  022C  0827               	movf	(_mod_timer+3)^(0+384),w	;volatile
 20273  022D  3A80               	xorlw	128
 20274  022E  0020               	movlb	0	; select bank0
 20275  022F  00BE               	movwf	??_isr+4
 20276  0230  083D               	movf	??_isr+3,w
 20277  0231  3A80               	xorlw	128
 20278  0232  023E               	subwf	??_isr+4,w
 20279  0233  0023               	movlb	3	; select bank3
 20280  0234  1D03               	skipz
 20281  0235  2A46               	goto	u700_23
 20282  0236  0020               	movlb	0	; select bank0
 20283  0237  083C               	movf	??_isr+2,w
 20284  0238  0023               	movlb	3	; select bank3
 20285  0239  0226               	subwf	(_mod_timer+2)^(0+384),w	;volatile
 20286  023A  1D03               	skipz
 20287  023B  2A46               	goto	u700_23
 20288  023C  0020               	movlb	0	; select bank0
 20289  023D  083B               	movf	??_isr+1,w
 20290  023E  0023               	movlb	3	; select bank3
 20291  023F  0225               	subwf	(_mod_timer+1)^(0+384),w	;volatile
 20292  0240  1D03               	skipz
 20293  0241  2A46               	goto	u700_23
 20294  0242  0020               	movlb	0	; select bank0
 20295  0243  083A               	movf	??_isr,w
 20296  0244  0023               	movlb	3	; select bank3
 20297  0245  0224               	subwf	_mod_timer^(0+384),w	;volatile
 20298  0246                     u700_23:	
 20299  0246  1C03               	skipc
 20300  0247  2AB6               	goto	i1l7012
 20301                           
 20302                           ;interrupts.c: 185: mod_timer = 0;
 20303  0248  3000               	movlw	0
 20304  0249  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 20305  024A  3000               	movlw	0
 20306  024B  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 20307  024C  3000               	movlw	0
 20308  024D  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 20309  024E  3000               	movlw	0
 20310  024F  00A4               	movwf	_mod_timer^(0+384)	;volatile
 20311                           
 20312                           ;interrupts.c: 187: if (mod_counter >= subDiv) {
 20313  0250  0858               	movf	(_mod_counter+1)^(0+384),w
 20314  0251  3A80               	xorlw	128
 20315  0252  0020               	movlb	0	; select bank0
 20316  0253  00BA               	movwf	??_isr
 20317  0254  3080               	movlw	128
 20318  0255  023A               	subwf	??_isr,w
 20319  0256  1D03               	skipz
 20320  0257  2A5B               	goto	u701_25
 20321  0258  087D               	movf	isr@subDiv,w
 20322  0259  0023               	movlb	3	; select bank3
 20323  025A  0257               	subwf	_mod_counter^(0+384),w
 20324  025B                     u701_25:	
 20325  025B  1C03               	skipc
 20326  025C  2A64               	goto	i1l7004
 20327                           
 20328                           ;interrupts.c: 188: mod_counter = 0;
 20329  025D  0023               	movlb	3	; select bank3
 20330  025E  01D7               	clrf	_mod_counter^(0+384)
 20331  025F  01D8               	clrf	(_mod_counter+1)^(0+384)
 20332                           
 20333                           ;interrupts.c: 189: tmpModDelay = mod_delay_time;
 20334  0260  085A               	movf	(_mod_delay_time+1)^(0+384),w
 20335  0261  00BD               	movwf	(_tmpModDelay+1)^(0+384)
 20336  0262  0859               	movf	_mod_delay_time^(0+384),w
 20337  0263  00BC               	movwf	_tmpModDelay^(0+384)
 20338  0264                     i1l7004:	
 20339                           
 20340                           ;interrupts.c: 193: }
 20341                           ;interrupts.c: 197: mod_value = modArray[mod_counter];
 20342  0264  0023               	movlb	3	; select bank3
 20343  0265  0858               	movf	(_mod_counter+1)^(0+384),w
 20344  0266  0020               	movlb	0	; select bank0
 20345  0267  00BB               	movwf	??_isr+1
 20346  0268  0023               	movlb	3	; select bank3
 20347  0269  0857               	movf	_mod_counter^(0+384),w
 20348  026A  0020               	movlb	0	; select bank0
 20349  026B  00BA               	movwf	??_isr
 20350  026C  35BA               	lslf	??_isr,f
 20351  026D  0DBB               	rlf	??_isr+1,f
 20352  026E  308A               	movlw	138
 20353  026F  00BC               	movwf	??_isr+2
 20354  0270  3023               	movlw	35
 20355  0271  00BD               	movwf	??_isr+3
 20356  0272  083A               	movf	??_isr,w
 20357  0273  073C               	addwf	??_isr+2,w
 20358  0274  0086               	movwf	6
 20359  0275  083B               	movf	??_isr+1,w
 20360  0276  3D3D               	addwfc	??_isr+3,w
 20361  0277  0087               	movwf	7
 20362  0278  3F40               	moviw [0]fsr1
 20363  0279  0024               	movlb	4	; select bank4
 20364  027A  00D3               	movwf	_mod_value^(0+512)
 20365  027B  3F41               	moviw [1]fsr1
 20366  027C  00D4               	movwf	(_mod_value+1)^(0+512)
 20367                           
 20368                           ;interrupts.c: 204: mod_value = modulation(mod_value, adjusted_pot_value);
 20369  027D  0853               	movf	_mod_value^(0+512),w
 20370  027E  0020               	movlb	0	; select bank0
 20371  027F  00AE               	movwf	modulation@x
 20372  0280  0024               	movlb	4	; select bank4
 20373  0281  0854               	movf	(_mod_value+1)^(0+512),w
 20374  0282  0020               	movlb	0	; select bank0
 20375  0283  00AF               	movwf	modulation@x+1
 20376  0284  0D89               	rlf	9,f
 20377  0285  3B89               	subwfb	9,f
 20378  0286  0989               	comf	9,f
 20379  0287  00B0               	movwf	modulation@x+2
 20380  0288  00B1               	movwf	modulation@x+3
 20381  0289  0024               	movlb	4	; select bank4
 20382  028A  0845               	movf	_adjusted_pot_value^(0+512),w
 20383  028B  0020               	movlb	0	; select bank0
 20384  028C  00B2               	movwf	modulation@y
 20385  028D  0024               	movlb	4	; select bank4
 20386  028E  0846               	movf	(_adjusted_pot_value+1)^(0+512),w
 20387  028F  0020               	movlb	0	; select bank0
 20388  0290  00B3               	movwf	modulation@y+1
 20389  0291  0D89               	rlf	9,f
 20390  0292  3B89               	subwfb	9,f
 20391  0293  0989               	comf	9,f
 20392  0294  00B4               	movwf	modulation@y+2
 20393  0295  00B5               	movwf	modulation@y+3
 20394  0296  31A2  221D  3180   	fcall	_modulation
 20395  0299  0020               	movlb	0	; select bank0
 20396  029A  082F               	movf	?_modulation+1,w
 20397  029B  0024               	movlb	4	; select bank4
 20398  029C  00D4               	movwf	(_mod_value+1)^(0+512)
 20399  029D  0020               	movlb	0	; select bank0
 20400  029E  082E               	movf	?_modulation,w
 20401  029F  0024               	movlb	4	; select bank4
 20402  02A0  00D3               	movwf	_mod_value^(0+512)
 20403                           
 20404                           ;interrupts.c: 205: CCPR3 = mod_value / 2;
 20405  02A1  3002               	movlw	2
 20406  02A2  00F0               	movwf	i1___awdiv@divisor
 20407  02A3  3000               	movlw	0
 20408  02A4  00F1               	movwf	i1___awdiv@divisor+1
 20409  02A5  0854               	movf	(_mod_value+1)^(0+512),w
 20410  02A6  00F3               	movwf	i1___awdiv@dividend+1
 20411  02A7  0853               	movf	_mod_value^(0+512),w
 20412  02A8  00F2               	movwf	i1___awdiv@dividend
 20413  02A9  31A4  2413  3180   	fcall	i1___awdiv
 20414  02AC  0871               	movf	?i1___awdiv+1,w
 20415  02AD  0026               	movlb	6	; select bank6
 20416  02AE  0092               	movwf	18	;volatile
 20417  02AF  0870               	movf	?i1___awdiv,w
 20418  02B0  0091               	movwf	17	;volatile
 20419                           
 20420                           ;interrupts.c: 206: mod_counter++;
 20421  02B1  3001               	movlw	1
 20422  02B2  0023               	movlb	3	; select bank3
 20423  02B3  07D7               	addwf	_mod_counter^(0+384),f
 20424  02B4  3000               	movlw	0
 20425  02B5  3DD8               	addwfc	(_mod_counter+1)^(0+384),f
 20426  02B6                     i1l7012:	
 20427                           
 20428                           ;interrupts.c: 208: }
 20429                           ;interrupts.c: 210: if (preset_programmning_on == 1) {
 20430  02B6  0349               	decf	_preset_programmning_on^(0+384),w
 20431  02B7  1D03               	btfss	3,2
 20432  02B8  2AE6               	goto	i1l7024
 20433                           
 20434                           ;interrupts.c: 211: preset_blink++;
 20435  02B9  3001               	movlw	1
 20436  02BA  0020               	movlb	0	; select bank0
 20437  02BB  00BA               	movwf	??_isr
 20438  02BC  083A               	movf	??_isr,w
 20439  02BD  0023               	movlb	3	; select bank3
 20440  02BE  07C8               	addwf	_preset_blink^(0+384),f
 20441                           
 20442                           ;interrupts.c: 213: if (preset_blink >= blink_delay) {
 20443  02BF  0024               	movlb	4	; select bank4
 20444  02C0  0867               	movf	(_blink_delay+1)^(0+512),w
 20445  02C1  3A80               	xorlw	128
 20446  02C2  3C80               	sublw	128
 20447  02C3  1D03               	skipz
 20448  02C4  2AC8               	goto	u703_25
 20449  02C5  0866               	movf	_blink_delay^(0+512),w
 20450  02C6  0023               	movlb	3	; select bank3
 20451  02C7  0248               	subwf	_preset_blink^(0+384),w
 20452  02C8                     u703_25:	
 20453  02C8  1C03               	skipc
 20454  02C9  2AEB               	goto	i1l7028
 20455                           
 20456                           ;interrupts.c: 214: LATBbits.LATB1 = 1;
 20457  02CA  0022               	movlb	2	; select bank2
 20458  02CB  148D               	bsf	13,1	;volatile
 20459                           
 20460                           ;interrupts.c: 215: if (preset_blink > blink_delay*2) {
 20461  02CC  0024               	movlb	4	; select bank4
 20462  02CD  0867               	movf	(_blink_delay+1)^(0+512),w
 20463  02CE  0020               	movlb	0	; select bank0
 20464  02CF  00BB               	movwf	??_isr+1
 20465  02D0  0024               	movlb	4	; select bank4
 20466  02D1  0866               	movf	_blink_delay^(0+512),w
 20467  02D2  0020               	movlb	0	; select bank0
 20468  02D3  00BA               	movwf	??_isr
 20469  02D4  35BA               	lslf	??_isr,f
 20470  02D5  0DBB               	rlf	??_isr+1,f
 20471  02D6  083B               	movf	??_isr+1,w
 20472  02D7  3A80               	xorlw	128
 20473  02D8  00BC               	movwf	??_isr+2
 20474  02D9  3080               	movlw	128
 20475  02DA  023C               	subwf	??_isr+2,w
 20476  02DB  1D03               	skipz
 20477  02DC  2AE1               	goto	u704_25
 20478  02DD  0023               	movlb	3	; select bank3
 20479  02DE  0848               	movf	_preset_blink^(0+384),w
 20480  02DF  0020               	movlb	0	; select bank0
 20481  02E0  023A               	subwf	??_isr,w
 20482  02E1                     u704_25:	
 20483  02E1  1803               	skipnc
 20484  02E2  2AED               	goto	i1l7030
 20485                           
 20486                           ;interrupts.c: 216: preset_blink = 0;
 20487  02E3  0023               	movlb	3	; select bank3
 20488  02E4  01C8               	clrf	_preset_blink^(0+384)
 20489                           
 20490                           ;interrupts.c: 217: }
 20491                           ;interrupts.c: 219: } else {
 20492  02E5  2AED               	goto	i1l7030
 20493  02E6                     i1l7024:	
 20494                           ;interrupts.c: 221: }
 20495                           ;interrupts.c: 223: } else {
 20496                           
 20497                           ;interrupts.c: 220: LATBbits.LATB1 = 0;
 20498                           
 20499                           
 20500                           ;interrupts.c: 224: if (preset_blink > 0) {
 20501  02E6  0023               	movlb	3	; select bank3
 20502  02E7  0848               	movf	_preset_blink^(0+384),w
 20503  02E8  1903               	btfsc	3,2
 20504  02E9  2AED               	goto	i1l7030
 20505                           
 20506                           ;interrupts.c: 225: preset_blink = 0;
 20507  02EA  01C8               	clrf	_preset_blink^(0+384)
 20508  02EB                     i1l7028:	
 20509                           
 20510                           ;interrupts.c: 226: LATBbits.LATB1 = 0;
 20511  02EB  0022               	movlb	2	; select bank2
 20512  02EC  108D               	bcf	13,1	;volatile
 20513  02ED                     i1l7030:	
 20514                           
 20515                           ;interrupts.c: 227: }
 20516                           ;interrupts.c: 228: }
 20517                           ;interrupts.c: 232: INTCONbits.TMR0IF = 0;
 20518  02ED  110B               	bcf	11,2	;volatile
 20519  02EE                     i1l137:	
 20520  02EE  0020               	movlb	0	; select bank0
 20521  02EF  083F               	movf	??_isr+5,w
 20522  02F0  00FF               	movwf	127
 20523  02F1  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 20524  02F2  0009               	retfie
 20525  02F3                     __end_of_isr:	
 20526                           
 20527                           	psect	text75
 20528  22E3                     __ptext75:	
 20529 ;; *************** function i1_set_leds_top *****************
 20530 ;; Defined at:
 20531 ;;		line 16 in file "LEDs.c"
 20532 ;; Parameters:    Size  Location     Type
 20533 ;;  x               2    0[COMMON] int 
 20534 ;;  ledState        2    2[COMMON] int 
 20535 ;; Auto vars:     Size  Location     Type
 20536 ;;		None
 20537 ;; Return value:  Size  Location     Type
 20538 ;;                  1    wreg      void 
 20539 ;; Registers used:
 20540 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 20541 ;; Tracked objects:
 20542 ;;		On entry : 0/0
 20543 ;;		On exit  : 0/0
 20544 ;;		Unchanged: 0/0
 20545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20546 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20547 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20549 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20550 ;;Total ram usage:        4 bytes
 20551 ;; Hardware stack levels used:    1
 20552 ;; This function calls:
 20553 ;;		Nothing
 20554 ;; This function is called by:
 20555 ;;		_isr
 20556 ;; This function uses a non-reentrant model
 20557 ;;
 20558                           
 20559                           
 20560                           ;psect for function i1_set_leds_top
 20561  22E3                     i1_set_leds_top:	
 20562                           
 20563                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 20564                           
 20565                           ;incstack = 0
 20566                           ; Regs used in i1_set_leds_top: [wreg-fsr0h+status,2+status,0]
 20567  22E3  0027               	movlb	7	; select bank7
 20568  22E4  100C               	bcf	12,0	;volatile
 20569                           
 20570                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 20571  22E5  108C               	bcf	12,1	;volatile
 20572                           
 20573                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 20574  22E6  110C               	bcf	12,2	;volatile
 20575                           
 20576                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 20577  22E7  118C               	bcf	12,3	;volatile
 20578                           
 20579                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 20580  22E8  120C               	bcf	12,4	;volatile
 20581                           
 20582                           ;LEDs.c: 22: switch (x) {
 20583  22E9  2B0E               	goto	i1l6840
 20584  22EA                     i1l6828:	
 20585                           ;LEDs.c: 23: case 1:
 20586                           
 20587                           
 20588                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 20589  22EA  0C72               	rrf	i1set_leds_top@ledState,w
 20590  22EB  1C03               	skipc
 20591  22EC  100C               	bcf	12,0	;volatile
 20592  22ED  1803               	skipnc
 20593  22EE  140C               	bsf	12,0	;volatile
 20594                           
 20595                           ;LEDs.c: 25: break;
 20596  22EF  0008               	return
 20597  22F0                     i1l6830:	
 20598                           ;LEDs.c: 26: case 2:
 20599                           
 20600                           
 20601                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 20602  22F0  0C72               	rrf	i1set_leds_top@ledState,w
 20603  22F1  1C03               	skipc
 20604  22F2  108C               	bcf	12,1	;volatile
 20605  22F3  1803               	skipnc
 20606  22F4  148C               	bsf	12,1	;volatile
 20607                           
 20608                           ;LEDs.c: 28: break;
 20609  22F5  0008               	return
 20610  22F6                     i1l6832:	
 20611                           ;LEDs.c: 29: case 3:
 20612                           
 20613                           
 20614                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 20615  22F6  0C72               	rrf	i1set_leds_top@ledState,w
 20616  22F7  1C03               	skipc
 20617  22F8  110C               	bcf	12,2	;volatile
 20618  22F9  1803               	skipnc
 20619  22FA  150C               	bsf	12,2	;volatile
 20620                           
 20621                           ;LEDs.c: 31: break;
 20622  22FB  0008               	return
 20623  22FC                     i1l6834:	
 20624                           ;LEDs.c: 32: case 4:
 20625                           
 20626                           
 20627                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 20628  22FC  0C72               	rrf	i1set_leds_top@ledState,w
 20629  22FD  1C03               	skipc
 20630  22FE  118C               	bcf	12,3	;volatile
 20631  22FF  1803               	skipnc
 20632  2300  158C               	bsf	12,3	;volatile
 20633                           
 20634                           ;LEDs.c: 34: break;
 20635  2301  0008               	return
 20636  2302                     i1l6836:	
 20637                           ;LEDs.c: 35: case 5:
 20638                           
 20639                           
 20640                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 20641  2302  0C72               	rrf	i1set_leds_top@ledState,w
 20642  2303  1C03               	skipc
 20643  2304  120C               	bcf	12,4	;volatile
 20644  2305  1803               	skipnc
 20645  2306  160C               	bsf	12,4	;volatile
 20646                           
 20647                           ;LEDs.c: 39: break;
 20648                           
 20649                           ;LEDs.c: 38: case 6:
 20650                           
 20651                           ;LEDs.c: 37: break;
 20652  2307  0008               	return
 20653  2308                     i1l810:	
 20654                           ;LEDs.c: 40: case 100:
 20655                           
 20656                           
 20657                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 20658  2308  140C               	bsf	12,0	;volatile
 20659                           
 20660                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 20661  2309  148C               	bsf	12,1	;volatile
 20662                           
 20663                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 20664  230A  150C               	bsf	12,2	;volatile
 20665                           
 20666                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 20667  230B  158C               	bsf	12,3	;volatile
 20668                           
 20669                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 20670  230C  160C               	bsf	12,4	;volatile
 20671                           
 20672                           ;LEDs.c: 47: }
 20673                           
 20674                           ;LEDs.c: 46: break;
 20675  230D  0008               	return
 20676  230E                     i1l6840:	
 20677                           
 20678                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20679                           ; Switch size 1, requested type "space"
 20680                           ; Number of cases is 1, Range of values is 0 to 0
 20681                           ; switch strategies available:
 20682                           ; Name         Instructions Cycles
 20683                           ; simple_byte            4     3 (average)
 20684                           ; direct_byte            8     6 (fixed)
 20685                           ; jumptable            260     6 (fixed)
 20686                           ;	Chosen strategy is simple_byte
 20687  230E  0871               	movf	i1set_leds_top@x+1,w
 20688  230F  3A00               	xorlw	0	; case 0
 20689  2310  1903               	skipnz
 20690  2311  2B13               	goto	i1l9868
 20691  2312  2B2A               	goto	i1l811
 20692  2313                     i1l9868:	
 20693                           
 20694                           ; Switch size 1, requested type "space"
 20695                           ; Number of cases is 7, Range of values is 1 to 100
 20696                           ; switch strategies available:
 20697                           ; Name         Instructions Cycles
 20698                           ; simple_byte           22    12 (average)
 20699                           ; direct_byte          209     9 (fixed)
 20700                           ; jumptable            263     9 (fixed)
 20701                           ;	Chosen strategy is simple_byte
 20702  2313  0870               	movf	i1set_leds_top@x,w
 20703  2314  3A01               	xorlw	1	; case 1
 20704  2315  1903               	skipnz
 20705  2316  2AEA               	goto	i1l6828
 20706  2317  3A03               	xorlw	3	; case 2
 20707  2318  1903               	skipnz
 20708  2319  2AF0               	goto	i1l6830
 20709  231A  3A01               	xorlw	1	; case 3
 20710  231B  1903               	skipnz
 20711  231C  2AF6               	goto	i1l6832
 20712  231D  3A07               	xorlw	7	; case 4
 20713  231E  1903               	skipnz
 20714  231F  2AFC               	goto	i1l6834
 20715  2320  3A01               	xorlw	1	; case 5
 20716  2321  1903               	skipnz
 20717  2322  2B02               	goto	i1l6836
 20718  2323  3A03               	xorlw	3	; case 6
 20719  2324  1903               	skipnz
 20720  2325  2B2A               	goto	i1l811
 20721  2326  3A62               	xorlw	98	; case 100
 20722  2327  1903               	skipnz
 20723  2328  2B08               	goto	i1l810
 20724  2329  2B2A               	goto	i1l811
 20725  232A                     i1l811:	
 20726  232A  0008               	return
 20727  232B                     __end_ofi1_set_leds_top:	
 20728                           
 20729                           	psect	text76
 20730  2EA9                     __ptext76:	
 20731 ;; *************** function i1_getModulationSubdivision *****************
 20732 ;; Defined at:
 20733 ;;		line 26 in file "modulation.c"
 20734 ;; Parameters:    Size  Location     Type
 20735 ;;		None
 20736 ;; Auto vars:     Size  Location     Type
 20737 ;;		None
 20738 ;; Return value:  Size  Location     Type
 20739 ;;                  2    0[COMMON] int 
 20740 ;; Registers used:
 20741 ;;		wreg, status,2, status,0
 20742 ;; Tracked objects:
 20743 ;;		On entry : 0/0
 20744 ;;		On exit  : 0/0
 20745 ;;		Unchanged: 0/0
 20746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20747 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20748 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20750 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20751 ;;Total ram usage:        2 bytes
 20752 ;; Hardware stack levels used:    1
 20753 ;; This function calls:
 20754 ;;		Nothing
 20755 ;; This function is called by:
 20756 ;;		_isr
 20757 ;; This function uses a non-reentrant model
 20758 ;;
 20759                           
 20760                           
 20761                           ;psect for function i1_getModulationSubdivision
 20762  2EA9                     i1_getModulationSubdivision:	
 20763                           
 20764                           ;modulation.c: 27: if (delay_time >= 2400) {
 20765                           
 20766                           ;incstack = 0
 20767                           ; Regs used in i1_getModulationSubdivision: [wreg+status,2+status,0]
 20768  2EA9  0020               	movlb	0	; select bank0
 20769  2EAA  1BC7               	btfsc	_delay_time+3,7	;volatile
 20770  2EAB  2EBD               	goto	i1l6854
 20771  2EAC  0847               	movf	_delay_time+3,w	;volatile
 20772  2EAD  1D03               	btfss	3,2
 20773  2EAE  2EB8               	goto	i1l6848
 20774  2EAF  0846               	movf	_delay_time+2,w	;volatile
 20775  2EB0  1D03               	btfss	3,2
 20776  2EB1  2EB8               	goto	i1l6848
 20777  2EB2  3060               	movlw	96
 20778  2EB3  0244               	subwf	_delay_time,w	;volatile
 20779  2EB4  3009               	movlw	9
 20780  2EB5  3B45               	subwfb	_delay_time+1,w	;volatile
 20781  2EB6  1C03               	btfss	3,0
 20782  2EB7  2EBD               	goto	i1l6854
 20783  2EB8                     i1l6848:	
 20784                           
 20785                           ;modulation.c: 28: return 120;
 20786  2EB8  3078               	movlw	120
 20787  2EB9  00F0               	movwf	?i1_getModulationSubdivision
 20788  2EBA  3000               	movlw	0
 20789  2EBB  00F1               	movwf	?i1_getModulationSubdivision+1
 20790                           
 20791                           ;modulation.c: 29: } else if (delay_time >= 600) {
 20792  2EBC  0008               	return
 20793  2EBD                     i1l6854:	
 20794  2EBD  1BC7               	btfsc	_delay_time+3,7	;volatile
 20795  2EBE  2ED0               	goto	i1l6862
 20796  2EBF  0847               	movf	_delay_time+3,w	;volatile
 20797  2EC0  1D03               	btfss	3,2
 20798  2EC1  2ECB               	goto	i1l6856
 20799  2EC2  0846               	movf	_delay_time+2,w	;volatile
 20800  2EC3  1D03               	btfss	3,2
 20801  2EC4  2ECB               	goto	i1l6856
 20802  2EC5  3058               	movlw	88
 20803  2EC6  0244               	subwf	_delay_time,w	;volatile
 20804  2EC7  3002               	movlw	2
 20805  2EC8  3B45               	subwfb	_delay_time+1,w	;volatile
 20806  2EC9  1C03               	btfss	3,0
 20807  2ECA  2ED0               	goto	i1l6862
 20808  2ECB                     i1l6856:	
 20809                           
 20810                           ;modulation.c: 30: return 60;
 20811  2ECB  303C               	movlw	60
 20812  2ECC  00F0               	movwf	?i1_getModulationSubdivision
 20813  2ECD  3000               	movlw	0
 20814  2ECE  00F1               	movwf	?i1_getModulationSubdivision+1
 20815                           
 20816                           ;modulation.c: 31: } else {
 20817  2ECF  0008               	return
 20818  2ED0                     i1l6862:	
 20819                           
 20820                           ;modulation.c: 32: return 30;
 20821  2ED0  301E               	movlw	30
 20822  2ED1  00F0               	movwf	?i1_getModulationSubdivision
 20823  2ED2  3000               	movlw	0
 20824  2ED3  00F1               	movwf	?i1_getModulationSubdivision+1
 20825  2ED4  0008               	return
 20826  2ED5                     __end_ofi1_getModulationSubdivision:	
 20827                           
 20828                           	psect	text77
 20829  2413                     __ptext77:	
 20830 ;; *************** function i1___awdiv *****************
 20831 ;; Defined at:
 20832 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 20833 ;; Parameters:    Size  Location     Type
 20834 ;;  divisor         2    0[COMMON] int 
 20835 ;;  dividend        2    2[COMMON] int 
 20836 ;; Auto vars:     Size  Location     Type
 20837 ;;  __awdiv         2    7[COMMON] int 
 20838 ;;  __awdiv         1    6[COMMON] unsigned char 
 20839 ;;  __awdiv         1    5[COMMON] unsigned char 
 20840 ;; Return value:  Size  Location     Type
 20841 ;;                  2    0[COMMON] int 
 20842 ;; Registers used:
 20843 ;;		wreg, status,2, status,0
 20844 ;; Tracked objects:
 20845 ;;		On entry : 0/0
 20846 ;;		On exit  : 0/0
 20847 ;;		Unchanged: 0/0
 20848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20849 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20850 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20851 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20852 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20853 ;;Total ram usage:        9 bytes
 20854 ;; Hardware stack levels used:    1
 20855 ;; This function calls:
 20856 ;;		Nothing
 20857 ;; This function is called by:
 20858 ;;		_isr
 20859 ;; This function uses a non-reentrant model
 20860 ;;
 20861                           
 20862                           
 20863                           ;psect for function i1___awdiv
 20864  2413                     i1___awdiv:	
 20865                           
 20866                           ;incstack = 0
 20867                           ; Regs used in i1___awdiv: [wreg+status,2+status,0]
 20868  2413  01F6               	clrf	i1___awdiv@sign
 20869  2414  1FF1               	btfss	i1___awdiv@divisor+1,7
 20870  2415  2C1D               	goto	i1l6874
 20871  2416  09F0               	comf	i1___awdiv@divisor,f
 20872  2417  09F1               	comf	i1___awdiv@divisor+1,f
 20873  2418  0AF0               	incf	i1___awdiv@divisor,f
 20874  2419  1903               	skipnz
 20875  241A  0AF1               	incf	i1___awdiv@divisor+1,f
 20876  241B  01F6               	clrf	i1___awdiv@sign
 20877  241C  0AF6               	incf	i1___awdiv@sign,f
 20878  241D                     i1l6874:	
 20879  241D  1FF3               	btfss	i1___awdiv@dividend+1,7
 20880  241E  2C28               	goto	i1l6880
 20881  241F  09F2               	comf	i1___awdiv@dividend,f
 20882  2420  09F3               	comf	i1___awdiv@dividend+1,f
 20883  2421  0AF2               	incf	i1___awdiv@dividend,f
 20884  2422  1903               	skipnz
 20885  2423  0AF3               	incf	i1___awdiv@dividend+1,f
 20886  2424  3001               	movlw	1
 20887  2425  00F4               	movwf	??i1___awdiv
 20888  2426  0874               	movf	??i1___awdiv,w
 20889  2427  06F6               	xorwf	i1___awdiv@sign,f
 20890  2428                     i1l6880:	
 20891  2428  01F7               	clrf	i1___awdiv@quotient
 20892  2429  01F8               	clrf	i1___awdiv@quotient+1
 20893  242A  0870               	movf	i1___awdiv@divisor,w
 20894  242B  0471               	iorwf	i1___awdiv@divisor+1,w
 20895  242C  1903               	btfsc	3,2
 20896  242D  2C57               	goto	i1l6902
 20897  242E  01F5               	clrf	i1___awdiv@counter
 20898  242F  0AF5               	incf	i1___awdiv@counter,f
 20899  2430                     i1l6890:	
 20900  2430  1BF1               	btfsc	i1___awdiv@divisor+1,7
 20901  2431  2C3C               	goto	i1l6892
 20902  2432  3001               	movlw	1
 20903  2433                     u668_25:	
 20904  2433  35F0               	lslf	i1___awdiv@divisor,f
 20905  2434  0DF1               	rlf	i1___awdiv@divisor+1,f
 20906  2435  0B89               	decfsz	9,f
 20907  2436  2C33               	goto	u668_25
 20908  2437  3001               	movlw	1
 20909  2438  00F4               	movwf	??i1___awdiv
 20910  2439  0874               	movf	??i1___awdiv,w
 20911  243A  07F5               	addwf	i1___awdiv@counter,f
 20912  243B  2C30               	goto	i1l6890
 20913  243C                     i1l6892:	
 20914  243C  3001               	movlw	1
 20915  243D                     u670_25:	
 20916  243D  35F7               	lslf	i1___awdiv@quotient,f
 20917  243E  0DF8               	rlf	i1___awdiv@quotient+1,f
 20918  243F  0B89               	decfsz	9,f
 20919  2440  2C3D               	goto	u670_25
 20920  2441  0871               	movf	i1___awdiv@divisor+1,w
 20921  2442  0273               	subwf	i1___awdiv@dividend+1,w
 20922  2443  1D03               	skipz
 20923  2444  2C47               	goto	u671_25
 20924  2445  0870               	movf	i1___awdiv@divisor,w
 20925  2446  0272               	subwf	i1___awdiv@dividend,w
 20926  2447                     u671_25:	
 20927  2447  1C03               	skipc
 20928  2448  2C4E               	goto	i1l6898
 20929  2449  0870               	movf	i1___awdiv@divisor,w
 20930  244A  02F2               	subwf	i1___awdiv@dividend,f
 20931  244B  0871               	movf	i1___awdiv@divisor+1,w
 20932  244C  3BF3               	subwfb	i1___awdiv@dividend+1,f
 20933  244D  1477               	bsf	i1___awdiv@quotient,0
 20934  244E                     i1l6898:	
 20935  244E  3001               	movlw	1
 20936  244F                     u672_25:	
 20937  244F  36F1               	lsrf	i1___awdiv@divisor+1,f
 20938  2450  0CF0               	rrf	i1___awdiv@divisor,f
 20939  2451  0B89               	decfsz	9,f
 20940  2452  2C4F               	goto	u672_25
 20941  2453  3001               	movlw	1
 20942  2454  02F5               	subwf	i1___awdiv@counter,f
 20943  2455  1D03               	btfss	3,2
 20944  2456  2C3C               	goto	i1l6892
 20945  2457                     i1l6902:	
 20946  2457  0876               	movf	i1___awdiv@sign,w
 20947  2458  1903               	btfsc	3,2
 20948  2459  2C5F               	goto	i1l6906
 20949  245A  09F7               	comf	i1___awdiv@quotient,f
 20950  245B  09F8               	comf	i1___awdiv@quotient+1,f
 20951  245C  0AF7               	incf	i1___awdiv@quotient,f
 20952  245D  1903               	skipnz
 20953  245E  0AF8               	incf	i1___awdiv@quotient+1,f
 20954  245F                     i1l6906:	
 20955  245F  0878               	movf	i1___awdiv@quotient+1,w
 20956  2460  00F1               	movwf	?i1___awdiv+1
 20957  2461  0877               	movf	i1___awdiv@quotient,w
 20958  2462  00F0               	movwf	?i1___awdiv
 20959  2463  0008               	return
 20960  2464                     __end_ofi1___awdiv:	
 20961                           
 20962                           	psect	text78
 20963  221D                     __ptext78:	
 20964 ;; *************** function _modulation *****************
 20965 ;; Defined at:
 20966 ;;		line 222 in file "user.c"
 20967 ;; Parameters:    Size  Location     Type
 20968 ;;  x               4   14[BANK0 ] long 
 20969 ;;  y               4   18[BANK0 ] long 
 20970 ;; Auto vars:     Size  Location     Type
 20971 ;;		None
 20972 ;; Return value:  Size  Location     Type
 20973 ;;                  4   14[BANK0 ] long 
 20974 ;; Registers used:
 20975 ;;		wreg, status,2, status,0, pclath, cstack
 20976 ;; Tracked objects:
 20977 ;;		On entry : 0/0
 20978 ;;		On exit  : 0/0
 20979 ;;		Unchanged: 0/0
 20980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20981 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20982 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20983 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20984 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20985 ;;Total ram usage:       12 bytes
 20986 ;; Hardware stack levels used:    1
 20987 ;; Hardware stack levels required when called:    1
 20988 ;; This function calls:
 20989 ;;		i1___aldiv
 20990 ;;		i1___lmul
 20991 ;; This function is called by:
 20992 ;;		_isr
 20993 ;; This function uses a non-reentrant model
 20994 ;;
 20995                           
 20996                           
 20997                           ;psect for function _modulation
 20998  221D                     _modulation:	
 20999                           
 21000                           ;user.c: 225: return (127500 + (y * x)) / 1000;
 21001                           
 21002                           ;incstack = 0
 21003                           ; Regs used in _modulation: [wreg+status,2+status,0+pclath+cstack]
 21004  221D  3000               	movlw	0
 21005  221E  0020               	movlb	0	; select bank0
 21006  221F  00A3               	movwf	i1___aldiv@divisor+3
 21007  2220  3000               	movlw	0
 21008  2221  00A2               	movwf	i1___aldiv@divisor+2
 21009  2222  3003               	movlw	3
 21010  2223  00A1               	movwf	i1___aldiv@divisor+1
 21011  2224  30E8               	movlw	232
 21012  2225  00A0               	movwf	i1___aldiv@divisor
 21013  2226  300C               	movlw	12
 21014  2227  00B6               	movwf	??_modulation
 21015  2228  30F2               	movlw	242
 21016  2229  00B7               	movwf	??_modulation+1
 21017  222A  3001               	movlw	1
 21018  222B  00B8               	movwf	??_modulation+2
 21019  222C  3000               	movlw	0
 21020  222D  00B9               	movwf	??_modulation+3
 21021  222E  0835               	movf	modulation@y+3,w
 21022  222F  00F3               	movwf	i1___lmul@multiplier+3
 21023  2230  0834               	movf	modulation@y+2,w
 21024  2231  00F2               	movwf	i1___lmul@multiplier+2
 21025  2232  0833               	movf	modulation@y+1,w
 21026  2233  00F1               	movwf	i1___lmul@multiplier+1
 21027  2234  0832               	movf	modulation@y,w
 21028  2235  00F0               	movwf	i1___lmul@multiplier
 21029  2236  0831               	movf	modulation@x+3,w
 21030  2237  00F7               	movwf	i1___lmul@multiplicand+3
 21031  2238  0830               	movf	modulation@x+2,w
 21032  2239  00F6               	movwf	i1___lmul@multiplicand+2
 21033  223A  082F               	movf	modulation@x+1,w
 21034  223B  00F5               	movwf	i1___lmul@multiplicand+1
 21035  223C  082E               	movf	modulation@x,w
 21036  223D  00F4               	movwf	i1___lmul@multiplicand
 21037  223E  31AF  2703  31A2   	fcall	i1___lmul
 21038  2241  0870               	movf	?i1___lmul,w
 21039  2242  0020               	movlb	0	; select bank0
 21040  2243  07B6               	addwf	??_modulation,f
 21041  2244  0871               	movf	?i1___lmul+1,w
 21042  2245  3DB7               	addwfc	??_modulation+1,f
 21043  2246  0872               	movf	?i1___lmul+2,w
 21044  2247  3DB8               	addwfc	??_modulation+2,f
 21045  2248  0873               	movf	?i1___lmul+3,w
 21046  2249  3DB9               	addwfc	??_modulation+3,f
 21047  224A  0839               	movf	??_modulation+3,w
 21048  224B  00A7               	movwf	i1___aldiv@dividend+3
 21049  224C  0838               	movf	??_modulation+2,w
 21050  224D  00A6               	movwf	i1___aldiv@dividend+2
 21051  224E  0837               	movf	??_modulation+1,w
 21052  224F  00A5               	movwf	i1___aldiv@dividend+1
 21053  2250  0836               	movf	??_modulation,w
 21054  2251  00A4               	movwf	i1___aldiv@dividend
 21055  2252  3198  2026         	fcall	i1___aldiv
 21056  2254  0020               	movlb	0	; select bank0
 21057  2255  0823               	movf	?i1___aldiv+3,w
 21058  2256  00B1               	movwf	?_modulation+3
 21059  2257  0822               	movf	?i1___aldiv+2,w
 21060  2258  00B0               	movwf	?_modulation+2
 21061  2259  0821               	movf	?i1___aldiv+1,w
 21062  225A  00AF               	movwf	?_modulation+1
 21063  225B  0820               	movf	?i1___aldiv,w
 21064  225C  00AE               	movwf	?_modulation
 21065  225D  0008               	return
 21066  225E                     __end_of_modulation:	
 21067                           
 21068                           	psect	text79
 21069  2F03                     __ptext79:	
 21070 ;; *************** function i1___lmul *****************
 21071 ;; Defined at:
 21072 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 21073 ;; Parameters:    Size  Location     Type
 21074 ;;  multiplier      4    0[COMMON] unsigned long 
 21075 ;;  multiplicand    4    4[COMMON] unsigned long 
 21076 ;; Auto vars:     Size  Location     Type
 21077 ;;  __lmul          4    8[COMMON] unsigned long 
 21078 ;; Return value:  Size  Location     Type
 21079 ;;                  4    0[COMMON] unsigned long 
 21080 ;; Registers used:
 21081 ;;		wreg, status,2, status,0
 21082 ;; Tracked objects:
 21083 ;;		On entry : 0/0
 21084 ;;		On exit  : 0/0
 21085 ;;		Unchanged: 0/0
 21086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 21087 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21088 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21090 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21091 ;;Total ram usage:       12 bytes
 21092 ;; Hardware stack levels used:    1
 21093 ;; This function calls:
 21094 ;;		Nothing
 21095 ;; This function is called by:
 21096 ;;		_modulation
 21097 ;; This function uses a non-reentrant model
 21098 ;;
 21099                           
 21100                           
 21101                           ;psect for function i1___lmul
 21102  2F03                     i1___lmul:	
 21103                           
 21104                           ;incstack = 0
 21105                           ; Regs used in i1___lmul: [wreg+status,2+status,0]
 21106  2F03  3000               	movlw	0
 21107  2F04  00FB               	movwf	i1___lmul@product+3
 21108  2F05  3000               	movlw	0
 21109  2F06  00FA               	movwf	i1___lmul@product+2
 21110  2F07  3000               	movlw	0
 21111  2F08  00F9               	movwf	i1___lmul@product+1
 21112  2F09  3000               	movlw	0
 21113  2F0A  00F8               	movwf	i1___lmul@product
 21114  2F0B                     i1l6132:	
 21115  2F0B  1C70               	btfss	i1___lmul@multiplier,0
 21116  2F0C  2F15               	goto	i1l6136
 21117  2F0D  0874               	movf	i1___lmul@multiplicand,w
 21118  2F0E  07F8               	addwf	i1___lmul@product,f
 21119  2F0F  0875               	movf	i1___lmul@multiplicand+1,w
 21120  2F10  3DF9               	addwfc	i1___lmul@product+1,f
 21121  2F11  0876               	movf	i1___lmul@multiplicand+2,w
 21122  2F12  3DFA               	addwfc	i1___lmul@product+2,f
 21123  2F13  0877               	movf	i1___lmul@multiplicand+3,w
 21124  2F14  3DFB               	addwfc	i1___lmul@product+3,f
 21125  2F15                     i1l6136:	
 21126  2F15  3001               	movlw	1
 21127  2F16                     u544_25:	
 21128  2F16  35F4               	lslf	i1___lmul@multiplicand,f
 21129  2F17  0DF5               	rlf	i1___lmul@multiplicand+1,f
 21130  2F18  0DF6               	rlf	i1___lmul@multiplicand+2,f
 21131  2F19  0DF7               	rlf	i1___lmul@multiplicand+3,f
 21132  2F1A  0B89               	decfsz	9,f
 21133  2F1B  2F16               	goto	u544_25
 21134  2F1C  3001               	movlw	1
 21135  2F1D                     u545_25:	
 21136  2F1D  36F3               	lsrf	i1___lmul@multiplier+3,f
 21137  2F1E  0CF2               	rrf	i1___lmul@multiplier+2,f
 21138  2F1F  0CF1               	rrf	i1___lmul@multiplier+1,f
 21139  2F20  0CF0               	rrf	i1___lmul@multiplier,f
 21140  2F21  0B89               	decfsz	9,f
 21141  2F22  2F1D               	goto	u545_25
 21142  2F23  0873               	movf	i1___lmul@multiplier+3,w
 21143  2F24  0472               	iorwf	i1___lmul@multiplier+2,w
 21144  2F25  0471               	iorwf	i1___lmul@multiplier+1,w
 21145  2F26  0470               	iorwf	i1___lmul@multiplier,w
 21146  2F27  1D03               	skipz
 21147  2F28  2F0B               	goto	i1l6132
 21148  2F29  087B               	movf	i1___lmul@product+3,w
 21149  2F2A  00F3               	movwf	?i1___lmul+3
 21150  2F2B  087A               	movf	i1___lmul@product+2,w
 21151  2F2C  00F2               	movwf	?i1___lmul+2
 21152  2F2D  0879               	movf	i1___lmul@product+1,w
 21153  2F2E  00F1               	movwf	?i1___lmul+1
 21154  2F2F  0878               	movf	i1___lmul@product,w
 21155  2F30  00F0               	movwf	?i1___lmul
 21156  2F31  0008               	return
 21157  2F32                     __end_ofi1___lmul:	
 21158                           
 21159                           	psect	text80
 21160  1826                     __ptext80:	
 21161 ;; *************** function i1___aldiv *****************
 21162 ;; Defined at:
 21163 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
 21164 ;; Parameters:    Size  Location     Type
 21165 ;;  divisor         4    0[BANK0 ] long 
 21166 ;;  dividend        4    4[BANK0 ] long 
 21167 ;; Auto vars:     Size  Location     Type
 21168 ;;  __aldiv         4   10[BANK0 ] long 
 21169 ;;  __aldiv         1    9[BANK0 ] unsigned char 
 21170 ;;  __aldiv         1    8[BANK0 ] unsigned char 
 21171 ;; Return value:  Size  Location     Type
 21172 ;;                  4    0[BANK0 ] long 
 21173 ;; Registers used:
 21174 ;;		wreg, status,2, status,0
 21175 ;; Tracked objects:
 21176 ;;		On entry : 0/0
 21177 ;;		On exit  : 0/0
 21178 ;;		Unchanged: 0/0
 21179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 21180 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21181 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21182 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21183 ;;      Totals:         1      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21184 ;;Total ram usage:       15 bytes
 21185 ;; Hardware stack levels used:    1
 21186 ;; This function calls:
 21187 ;;		Nothing
 21188 ;; This function is called by:
 21189 ;;		_modulation
 21190 ;; This function uses a non-reentrant model
 21191 ;;
 21192                           
 21193                           
 21194                           ;psect for function i1___aldiv
 21195  1826                     i1___aldiv:	
 21196                           
 21197                           ;incstack = 0
 21198                           ; Regs used in i1___aldiv: [wreg+status,2+status,0]
 21199  1826  0020               	movlb	0	; select bank0
 21200  1827  01A9               	clrf	i1___aldiv@sign
 21201  1828  1FA3               	btfss	i1___aldiv@divisor+3,7
 21202  1829  2837               	goto	i1l2045
 21203  182A  09A0               	comf	i1___aldiv@divisor,f
 21204  182B  09A1               	comf	i1___aldiv@divisor+1,f
 21205  182C  09A2               	comf	i1___aldiv@divisor+2,f
 21206  182D  09A3               	comf	i1___aldiv@divisor+3,f
 21207  182E  0AA0               	incf	i1___aldiv@divisor,f
 21208  182F  1903               	skipnz
 21209  1830  0AA1               	incf	i1___aldiv@divisor+1,f
 21210  1831  1903               	skipnz
 21211  1832  0AA2               	incf	i1___aldiv@divisor+2,f
 21212  1833  1903               	skipnz
 21213  1834  0AA3               	incf	i1___aldiv@divisor+3,f
 21214  1835  01A9               	clrf	i1___aldiv@sign
 21215  1836  0AA9               	incf	i1___aldiv@sign,f
 21216  1837                     i1l2045:	
 21217  1837  1FA7               	btfss	i1___aldiv@dividend+3,7
 21218  1838  2848               	goto	i1l6154
 21219  1839  09A4               	comf	i1___aldiv@dividend,f
 21220  183A  09A5               	comf	i1___aldiv@dividend+1,f
 21221  183B  09A6               	comf	i1___aldiv@dividend+2,f
 21222  183C  09A7               	comf	i1___aldiv@dividend+3,f
 21223  183D  0AA4               	incf	i1___aldiv@dividend,f
 21224  183E  1903               	skipnz
 21225  183F  0AA5               	incf	i1___aldiv@dividend+1,f
 21226  1840  1903               	skipnz
 21227  1841  0AA6               	incf	i1___aldiv@dividend+2,f
 21228  1842  1903               	skipnz
 21229  1843  0AA7               	incf	i1___aldiv@dividend+3,f
 21230  1844  3001               	movlw	1
 21231  1845  00FC               	movwf	??i1___aldiv
 21232  1846  087C               	movf	??i1___aldiv,w
 21233  1847  06A9               	xorwf	i1___aldiv@sign,f
 21234  1848                     i1l6154:	
 21235  1848  3000               	movlw	0
 21236  1849  00AD               	movwf	i1___aldiv@quotient+3
 21237  184A  3000               	movlw	0
 21238  184B  00AC               	movwf	i1___aldiv@quotient+2
 21239  184C  3000               	movlw	0
 21240  184D  00AB               	movwf	i1___aldiv@quotient+1
 21241  184E  3000               	movlw	0
 21242  184F  00AA               	movwf	i1___aldiv@quotient
 21243  1850  0823               	movf	i1___aldiv@divisor+3,w
 21244  1851  0422               	iorwf	i1___aldiv@divisor+2,w
 21245  1852  0421               	iorwf	i1___aldiv@divisor+1,w
 21246  1853  0420               	iorwf	i1___aldiv@divisor,w
 21247  1854  1903               	skipnz
 21248  1855  2891               	goto	i1l6176
 21249  1856  01A8               	clrf	i1___aldiv@counter
 21250  1857  0AA8               	incf	i1___aldiv@counter,f
 21251  1858                     i1l6162:	
 21252  1858  1BA3               	btfsc	i1___aldiv@divisor+3,7
 21253  1859  2866               	goto	i1l6164
 21254  185A  3001               	movlw	1
 21255  185B                     u550_25:	
 21256  185B  35A0               	lslf	i1___aldiv@divisor,f
 21257  185C  0DA1               	rlf	i1___aldiv@divisor+1,f
 21258  185D  0DA2               	rlf	i1___aldiv@divisor+2,f
 21259  185E  0DA3               	rlf	i1___aldiv@divisor+3,f
 21260  185F  0B89               	decfsz	9,f
 21261  1860  285B               	goto	u550_25
 21262  1861  3001               	movlw	1
 21263  1862  00FC               	movwf	??i1___aldiv
 21264  1863  087C               	movf	??i1___aldiv,w
 21265  1864  07A8               	addwf	i1___aldiv@counter,f
 21266  1865  2858               	goto	i1l6162
 21267  1866                     i1l6164:	
 21268  1866  3001               	movlw	1
 21269  1867                     u552_25:	
 21270  1867  35AA               	lslf	i1___aldiv@quotient,f
 21271  1868  0DAB               	rlf	i1___aldiv@quotient+1,f
 21272  1869  0DAC               	rlf	i1___aldiv@quotient+2,f
 21273  186A  0DAD               	rlf	i1___aldiv@quotient+3,f
 21274  186B  0B89               	decfsz	9,f
 21275  186C  2867               	goto	u552_25
 21276  186D  0823               	movf	i1___aldiv@divisor+3,w
 21277  186E  0227               	subwf	i1___aldiv@dividend+3,w
 21278  186F  1D03               	skipz
 21279  1870  287B               	goto	u553_25
 21280  1871  0822               	movf	i1___aldiv@divisor+2,w
 21281  1872  0226               	subwf	i1___aldiv@dividend+2,w
 21282  1873  1D03               	skipz
 21283  1874  287B               	goto	u553_25
 21284  1875  0821               	movf	i1___aldiv@divisor+1,w
 21285  1876  0225               	subwf	i1___aldiv@dividend+1,w
 21286  1877  1D03               	skipz
 21287  1878  287B               	goto	u553_25
 21288  1879  0820               	movf	i1___aldiv@divisor,w
 21289  187A  0224               	subwf	i1___aldiv@dividend,w
 21290  187B                     u553_25:	
 21291  187B  1C03               	skipc
 21292  187C  2886               	goto	i1l6172
 21293  187D  0820               	movf	i1___aldiv@divisor,w
 21294  187E  02A4               	subwf	i1___aldiv@dividend,f
 21295  187F  0821               	movf	i1___aldiv@divisor+1,w
 21296  1880  3BA5               	subwfb	i1___aldiv@dividend+1,f
 21297  1881  0822               	movf	i1___aldiv@divisor+2,w
 21298  1882  3BA6               	subwfb	i1___aldiv@dividend+2,f
 21299  1883  0823               	movf	i1___aldiv@divisor+3,w
 21300  1884  3BA7               	subwfb	i1___aldiv@dividend+3,f
 21301  1885  142A               	bsf	i1___aldiv@quotient,0
 21302  1886                     i1l6172:	
 21303  1886  3001               	movlw	1
 21304  1887                     u554_25:	
 21305  1887  36A3               	lsrf	i1___aldiv@divisor+3,f
 21306  1888  0CA2               	rrf	i1___aldiv@divisor+2,f
 21307  1889  0CA1               	rrf	i1___aldiv@divisor+1,f
 21308  188A  0CA0               	rrf	i1___aldiv@divisor,f
 21309  188B  0B89               	decfsz	9,f
 21310  188C  2887               	goto	u554_25
 21311  188D  3001               	movlw	1
 21312  188E  02A8               	subwf	i1___aldiv@counter,f
 21313  188F  1D03               	btfss	3,2
 21314  1890  2866               	goto	i1l6164
 21315  1891                     i1l6176:	
 21316  1891  0829               	movf	i1___aldiv@sign,w
 21317  1892  1903               	btfsc	3,2
 21318  1893  289F               	goto	i1l6180
 21319  1894  09AA               	comf	i1___aldiv@quotient,f
 21320  1895  09AB               	comf	i1___aldiv@quotient+1,f
 21321  1896  09AC               	comf	i1___aldiv@quotient+2,f
 21322  1897  09AD               	comf	i1___aldiv@quotient+3,f
 21323  1898  0AAA               	incf	i1___aldiv@quotient,f
 21324  1899  1903               	skipnz
 21325  189A  0AAB               	incf	i1___aldiv@quotient+1,f
 21326  189B  1903               	skipnz
 21327  189C  0AAC               	incf	i1___aldiv@quotient+2,f
 21328  189D  1903               	skipnz
 21329  189E  0AAD               	incf	i1___aldiv@quotient+3,f
 21330  189F                     i1l6180:	
 21331  189F  082D               	movf	i1___aldiv@quotient+3,w
 21332  18A0  00A3               	movwf	?i1___aldiv+3
 21333  18A1  082C               	movf	i1___aldiv@quotient+2,w
 21334  18A2  00A2               	movwf	?i1___aldiv+2
 21335  18A3  082B               	movf	i1___aldiv@quotient+1,w
 21336  18A4  00A1               	movwf	?i1___aldiv+1
 21337  18A5  082A               	movf	i1___aldiv@quotient,w
 21338  18A6  00A0               	movwf	?i1___aldiv
 21339  18A7  0008               	return
 21340  18A8                     __end_ofi1___aldiv:	
 21341  007E                     btemp	set	126	;btemp
 21342  007E                     int$flags	set	126
 21343  007E                     wtemp	set	126
 21344  007E                     wtemp0	set	126
 21345  0080                     wtemp1	set	128
 21346  0082                     wtemp2	set	130
 21347  0084                     wtemp3	set	132
 21348  0086                     wtemp4	set	134
 21349  0088                     wtemp5	set	136
 21350  007F                     wtemp6	set	127
 21351  007E                     ttemp	set	126
 21352  007E                     ttemp0	set	126
 21353  0081                     ttemp1	set	129
 21354  0084                     ttemp2	set	132
 21355  0087                     ttemp3	set	135
 21356  007F                     ttemp4	set	127
 21357  007E                     ltemp	set	126
 21358  007E                     ltemp0	set	126
 21359  0082                     ltemp1	set	130
 21360  0086                     ltemp2	set	134
 21361  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    84
    Data        49
    BSS         295
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     32      64
    BANK1            80     80      80
    BANK2            80     74      77
    BANK3            80      9      80
    BANK4            80      8      74
    BANK5            80      9      53
    BANK6            80      0      64
    BANK7            80      0      64
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           26      0       0
    BANK12            0      0       0
    BANK13            0      0       0
    BANK14            0      0       0
    BANK15            0      0       0
    BANK16            0      0       0
    BANK17            0      0       0
    BANK18            0      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK2[2]), floor@expon(BANK2[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), sin@coeff_a(CODE[15]), sin@coeff_b(CODE[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _modulation->i1___aldiv
    i1___aldiv->i1___lmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _isr->_modulation
    _modulation->i1___aldiv

Critical Paths under _main in BANK1

    _main->_map
    _update_selectMode->_setExpressionDisplay
    _update_selectMode->_setPresetDisplay
    _updateSwitchTap->_setDoublePressState
    _updateSwitchBypass->_setDoublePressState
    _setDoublePressState->_showSave
    _showSave->_ring_tactiles
    _solidring_tactiles->_wait_ms
    _ring_tactiles->_wait_ms
    _setPedalMode->_setExpressionDisplay
    _setPedalMode->_setPresetDisplay
    _setPresetDisplay->_set_leds_top
    _setExpressionDisplay->_set_leds_top
    _resetRingLEDs->_set_leds_top
    ___lltoft->___ftpack
    _read_top_tactile->_wait_ms
    _read_bottom_tactile->_wait_ms
    _map->___ftdiv
    _initSwitchBypass->_setSwitchBypassState
    _setSwitchBypassState->_setSwitchBypassRelays
    _setSwitchBypassRelays->_wait_ms
    _wait_ms->___lmul
    ___fttol->_map
    ___altoft->___ftpack
    ___ftmul->___awtoft
    ___ftadd->___ftneg
    ___ftneg->___ftmul
    ___ftdiv->___ftadd
    ___awtoft->___ftpack
    _ReadSavedSettings->_set_leds_top

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_scaleA100kPot
    _main->_scaleA10kPot
    _main->_scaleiA10kPot
    _updateModulationArray->_modSquare
    _modTri->___fttol
    _modSquare->_modCos
    _modCos->___wmul
    _modSawRev->_modSaw
    _modSaw->___fttol
    _set_subdivision->___fttol
    _scaleiA10kPot->_pow
    _scaleA10kPot->_pow
    _scaleA100kPot->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _getModulationDelayTime->___fttol
    _calcCosArray->_cos
    _cos->_sin
    _sin->_eval_poly
    _floor->___fttol
    _eval_poly->___wmul
    ___wmul->___fttol
    ___ftsub->_floor

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_scaleA100kPot
    _main->_scaleA10kPot
    _main->_scaleiA10kPot

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _isr in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _isr in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _isr in BANK18

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                20    20      0  888938
                                              0 BANK4      8     8      0
                                              0 BANK5      9     9      0
                _ConfigureOscillator
                            _InitApp
                     _InitializeTaps
                  _ReadSavedSettings
                          _USARTInit
                           ___awtoft
                            ___fttol
                        _adc_convert
                       _calcCosArray
             _getModulationDelayTime
                   _initSwitchBypass
                                _map
                _read_bottom_tactile
                   _read_top_tactile
                      _scaleA100kPot
                       _scaleA10kPot
                      _scaleiA10kPot
                    _set_subdivision
              _updateModulationArray
                 _updateSwitchBypass
                    _updateSwitchTap
                        _update_mode
                  _update_selectMode
 ---------------------------------------------------------------------------------
 (1) _update_selectMode                                    1     1      0    5976
                                              7 BANK1      1     1      0
               _setExpressionDisplay
                   _setPresetDisplay
 ---------------------------------------------------------------------------------
 (1) _update_mode                                          1     1      0   11828
                                              7 BANK1      1     1      0
                      _resetRingLEDs
                       _setPedalMode
 ---------------------------------------------------------------------------------
 (1) _updateSwitchTap                                      9     9      0   27947
                                             28 BANK1      9     9      0
                            ___aldiv
                _setDoublePressState
                    _setLongTapState
 ---------------------------------------------------------------------------------
 (2) _setLongTapState                                      4     2      2     247
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     683
                                              0 BANK1     15     7      8
 ---------------------------------------------------------------------------------
 (1) _updateSwitchBypass                                   2     2      0   31922
                                             28 BANK1      2     2      0
                _setDoublePressState
                 _setLongBypassState
              _setSwitchBypassRelays
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setLongBypassState                                   4     2      2     355
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) _setDoublePressState                                  4     2      2   26779
                                             24 BANK1      4     2      2
                      _resetRingLEDs
                       _setPedalMode
                   _setPresetDisplay
                           _showSave
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _showSave                                             1     1      0    9777
                                             23 BANK1      1     1      0
                      _ring_tactiles
                 _solidring_tactiles
 ---------------------------------------------------------------------------------
 (4) _solidring_tactiles                                   3     3      0    4822
                                             18 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (4) _ring_tactiles                                        5     5      0    4955
                                             18 BANK1      5     5      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _setPedalMode                                         0     0      0    8902
                      _resetRingLEDs
               _setExpressionDisplay
                   _setPresetDisplay
 ---------------------------------------------------------------------------------
 (2) _setPresetDisplay                                     3     3      0    3019
                                              4 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (2) _setExpressionDisplay                                 3     3      0    2957
                                              4 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _resetRingLEDs                                        0     0      0    2926
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (1) _updateModulationArray                               12    12      0  162398
                                             48 BANK2     12    12      0
                            ___awdiv
                           ___awtoft
                             ___wmul
           _getModulationSubdivision
                             _modCos
                             _modSaw
                          _modSawRev
                          _modSquare
                             _modTri
 ---------------------------------------------------------------------------------
 (2) _modTri                                              18    12      6   29916
                                             14 BANK2     18    12      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) _modSquare                                            8     2      6   34282
                                             40 BANK2      8     2      6
                           ___awtoft (ARG)
                             ___ftge
                             _modCos
 ---------------------------------------------------------------------------------
 (3) _modCos                                              20    14      6   31031
                                             20 BANK2     20    14      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _modSawRev                                            8     2      6   30187
                                             34 BANK2      8     2      6
                           ___awtoft (ARG)
                             _modSaw
 ---------------------------------------------------------------------------------
 (3) _modSaw                                              20    14      6   29971
                                             14 BANK2     20    14      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     837
                                              0 BANK1      9     5      4
 ---------------------------------------------------------------------------------
 (1) _set_subdivision                                      9     5      4   14064
                                             14 BANK2      9     5      4
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _scaleiA10kPot                                       12     9      3  163760
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (1) _scaleA10kPot                                        12     9      3  153110
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (1) _scaleA100kPot                                       12     9      3  153159
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (2) _pow                                                 18    12      6  137191
                                             53 BANK2     18    12      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  6     3      3   42795
                                             30 BANK2      6     3      3
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                 13    10      3   76054
                                             40 BANK2     13    10      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                               10     5      5    5741
                                             30 BANK2     10     5      5
                             ___ftge
                            ___ftneg
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    2763
                                              8 BANK1      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _read_top_tactile                                     1     1      0    3879
                                             18 BANK1      1     1      0
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _read_bottom_tactile                                  1     1      0    2709
                                             18 BANK1      1     1      0
                    _set_leds_bottom
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _map                                                 18     3     15   26100
                                             62 BANK1     18     3     15
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (1) _initSwitchBypass                                     2     2      0    2667
                                             26 BANK1      2     2      0
               _getSwitchBypassState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setSwitchBypassState                                 4     2      2    2633
                                             22 BANK1      4     2      2
              _setSwitchBypassRelays
 ---------------------------------------------------------------------------------
 (3) _setSwitchBypassRelays                                4     2      2    2155
                                             18 BANK1      4     2      2
            _updateSwitchBypassState
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _wait_ms                                              6     4      2    1831
                                             12 BANK1      6     4      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     374
                                              0 BANK1     12     4      8
 ---------------------------------------------------------------------------------
 (4) _updateSwitchBypassState                              2     0      2      77
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _getSwitchBypassState                                 2     0      2       0
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _getModulationDelayTime                               2     2      0   15382
                                             14 BANK2      2     2      0
                           ___altoft
                           ___awtoft
                            ___ftdiv
                            ___fttol
           _getModulationSubdivision
 ---------------------------------------------------------------------------------
 (2) _getModulationSubdivision                             2     0      2       0
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _calcCosArray                                         8     8      0  104328
                                             50 BANK2      8     8      0
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                             ___wmul
                                _cos
 ---------------------------------------------------------------------------------
 (2) _cos                                                  9     6      3   84615
                                             44 BANK2      6     3      3
                            ___ftadd
                             ___ftge
                                _sin
 ---------------------------------------------------------------------------------
 (3) _sin                                                 14    11      3   72910
                                             30 BANK2     14    11      3
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                          _eval_poly
                              _floor
 ---------------------------------------------------------------------------------
 (4) _floor                                                9     6      3   17096
                                             14 BANK2      9     6      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                6     2      4     630
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4    1603
                                              0 BANK2     14    10      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                                _map (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    2970
                                              0 BANK1      9     3      6
 ---------------------------------------------------------------------------------
 (5) ___altoft                                             8     4      4    2942
                                              8 BANK1      8     4      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           10     3      7   18319
                                             20 BANK2     10     3      7
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1060
                                             14 BANK2      6     2      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    7652
                                             14 BANK1     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    8987
                                             23 BANK2      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
                              _floor (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    8429
                                             33 BANK1     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3    2221
                                             30 BANK1      3     0      3
                            ___ftmul (ARG)
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    6392
                                             46 BANK1     16    10      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    4411
                                              8 BANK1      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2584
                                              0 BANK1      8     3      5
 ---------------------------------------------------------------------------------
 (1) _adc_convert                                          4     2      2      31
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (1) _USARTInit                                            3     1      2     108
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (1) _ReadSavedSettings                                    1     1      0    3253
                                              4 BANK1      1     1      0
                     _FLASH_ReadWord
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _set_leds_top                                         4     0      4    2048
                                              0 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 (3) _set_leds_bottom                                      2     0      2     878
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadWord                                       3     1      2     327
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (1) _InitializeTaps                                       3     3      0      99
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
                           _init_adc
                           _init_pwm
 ---------------------------------------------------------------------------------
 (2) _init_pwm                                             0     0      0       0
                        _init_timer0
                        _init_timer2
 ---------------------------------------------------------------------------------
 (3) _init_timer2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                  7     7      0    1301
                                             13 COMMON     1     1      0
                                             26 BANK0      6     6      0
                         _modulation
                          i1___awdiv
         i1_getModulationSubdivision
                     i1_set_leds_top
 ---------------------------------------------------------------------------------
 (8) i1_set_leds_top                                       4     0      4     236
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (8) i1_getModulationSubdivision                           2     0      2       0
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (8) i1___awdiv                                            9     5      4     352
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (8) _modulation                                          12     4      8     668
                                             14 BANK0     12     4      8
                          i1___aldiv
                           i1___lmul
 ---------------------------------------------------------------------------------
 (9) i1___lmul                                            12     4      8     144
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (9) i1___aldiv                                           15     7      8     352
                                             12 COMMON     1     1      0
                                              0 BANK0     14     6      8
                           i1___lmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _init_adc
     _init_pwm
       _init_timer0
       _init_timer2
   _InitializeTaps
   _ReadSavedSettings
     _FLASH_ReadWord
     _set_leds_bottom
     _set_leds_top
   _USARTInit
   ___awtoft
     ___ftpack
   ___fttol
     ___altoft (ARG)
       ___ftpack
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     _map (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
   _adc_convert
   _calcCosArray
     ___awtoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___wmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _cos
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftge
       _sin
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
   _getModulationDelayTime
     ___altoft
       ___ftpack
     ___awtoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _getModulationSubdivision
   _initSwitchBypass
     _getSwitchBypassState
     _setSwitchBypassState
       _setSwitchBypassRelays
         _updateSwitchBypassState
         _wait_ms
           ___lmul
   _map
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
   _read_bottom_tactile
     _set_leds_bottom
     _wait_ms
       ___lmul
   _read_top_tactile
     _set_leds_top
     _wait_ms
       ___lmul
   _scaleA100kPot
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _frexp
   _scaleA10kPot
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _frexp
   _scaleiA10kPot
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _frexp
   _set_subdivision
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
   _updateModulationArray
     ___awdiv
     ___awtoft
       ___ftpack
     ___wmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _getModulationSubdivision
     _modCos
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___wmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
     _modSaw
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _modSawRev
       ___awtoft (ARG)
         ___ftpack
       _modSaw (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
     _modSquare
       ___awtoft (ARG)
         ___ftpack
       ___ftge (ARG)
       _modCos (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
     _modTri
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
   _updateSwitchBypass
     _setDoublePressState
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setPedalMode
         _resetRingLEDs
           _set_leds_bottom
           _set_leds_top
         _setExpressionDisplay
           _set_leds_bottom
           _set_leds_top
         _setPresetDisplay
           _set_leds_bottom
           _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
       _showSave
         _ring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
         _solidring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
       _wait_ms
         ___lmul
     _setLongBypassState
     _setSwitchBypassRelays
       _updateSwitchBypassState
       _wait_ms
         ___lmul
     _setSwitchBypassState
       _setSwitchBypassRelays
         _updateSwitchBypassState
         _wait_ms
           ___lmul
   _updateSwitchTap
     ___aldiv
     _setDoublePressState
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setPedalMode
         _resetRingLEDs
           _set_leds_bottom
           _set_leds_top
         _setExpressionDisplay
           _set_leds_bottom
           _set_leds_top
         _setPresetDisplay
           _set_leds_bottom
           _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
       _showSave
         _ring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
         _solidring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
       _wait_ms
         ___lmul
     _setLongTapState
   _update_mode
     _resetRingLEDs
       _set_leds_bottom
       _set_leds_top
     _setPedalMode
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setExpressionDisplay
         _set_leds_bottom
         _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
   _update_selectMode
     _setExpressionDisplay
       _set_leds_bottom
       _set_leds_top
     _setPresetDisplay
       _set_leds_bottom
       _set_leds_top

 _isr (ROOT)
   _modulation
     i1___aldiv
       i1___lmul (ARG)
     i1___lmul
   i1___awdiv
   i1_getModulationSubdivision
   i1_set_leds_top

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     20      40       5       80.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     50      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     4A      4D       9       96.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      9      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      8      4A      13       92.5%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      9      35      15       66.3%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
ABS                  0      0     23A      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      40      18       80.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0      40      20       80.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
DATA                 0      0     23A      28        0.0%
BANK11              1A      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITBANK12           50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BANK12               0      0       0      31        0.0%
BITBANK13           50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BANK13               0      0       0      33        0.0%
BITBANK14           50      0       0      34        0.0%
BANK14               0      0       0      35        0.0%
BITBANK15           50      0       0      36        0.0%
BANK15               0      0       0      37        0.0%
BITBANK16           50      0       0      38        0.0%
BANK16               0      0       0      39        0.0%
BITBANK17           50      0       0      40        0.0%
BANK17               0      0       0      41        0.0%
BITBANK18           50      0       0      42        0.0%
BANK18               0      0       0      43        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sun Jan 15 20:16:49 2017

                        _update_mode 2FC8                         ___altoft@exp 00AE  
                        __CFG_CP$OFF 0000                        ___altoft@sign 00AF  
                   modSaw@inflection 0131                     scaleA100kPot@pwm 01E7  
                       ___awdiv@sign 00A6                   _topTactile_pressed 01CC  
         setDoublePressState@f_state 00B8                  ___wmul@multiplicand 0130  
                 USARTInit@baud_rate 00A0                      _updateSwitchTap 0BD2  
                       ___ftadd@exp1 00CD                         ___ftadd@exp2 00CC  
                       ___ftadd@sign 00CB                                  l602 2D44  
                                l372 05F9                                  l382 072E  
                                l366 0549                                  l376 0633  
                                l810 2538                                  l811 255C  
               __size_of_adc_convert 0013                                  l820 2082  
                                l822 2085                                  l398 1026  
                                l823 20A9                                  l815 2076  
                                l817 2079                                  l649 26BF  
                                l818 207C                                  l819 207F  
                                l982 2340                                  l986 236A  
                                l994 238A                                  _GIE 005F  
                                l998 23B8                                  _RB1 0069  
                                _PR2 001B         solidring_tactiles@ring_delay 00B4  
                                _cos 2703                                  _map 1A36  
                                _exp 1363                                  _log 1F2F  
                                _isr 0004                                  _tap 02A0  
                                _sin 0820                                  _pow 112B  
                       __CFG_BORV$LO 0000                                  wreg 0009  
                       __CFG_IESO$ON 0000                         __CFG_FOSC$HS 0000  
                set_subdivision@tmpX 0135              __end_of_set_leds_bottom 20AA  
                       __CFG_LVP$OFF 0000                       i1___aldiv@sign 0029  
                       ___ftdiv@cntr 00D8                         ___ftdiv@sign 00DD  
                               l1020 2E6A                                 l1021 2E7E  
                               l1024 2564                                 l1017 2E5D  
                               l1009 2FF8                                 l1019 2E63  
                               l1035 25AE                                 l2045 18B9  
                               l1442 0BE9                                 l2164 25FC  
                               l2165 2604                                 l2157 25E9  
                               l2248 1A1C                                 l2360 114F  
                               l1456 0CA4                                 l1740 22D5  
                               l2188 10D4                                 l2378 0935  
                               ?_cos 014C                                 l1990 2DCE  
                               ?_map 00DE                                 l8010 21B1  
                               l8110 1CE2                                 l8040 23D3  
                               l8130 2EDD                                 l8300 0855  
                               l8212 1C5C                                 l9012 0C45  
                               l9004 0C1D                                 ?_exp 0148  
                               ?_log 013E                                 l8118 1CFB  
                               l9030 0C84                                 l9006 0C3A  
                               l8080 2E45                                 l8144 1DFE  
                               l8312 08F1                                 l8208 1C54  
                               l9200 1ACF                                 l8048 23F7  
                               l8090 1C8B                                 l8330 2E84  
                               l9210 1AE7                                 l9202 1AD5  
                               l9026 0C6D                                 l8148 1E06  
                               l8420 2F77                                 l9108 237F  
                               l8332 2E94                                 l9204 1AD9  
                               l8068 2051                                 l9060 0D63  
                               l9028 0C75                                 ?_isr 0070  
                               l8158 1E73                                 l8422 2F86  
                               l8414 2F71                                 l7702 200E  
                               l9118 23A6                                 l8342 1F53  
                               l9222 1B46                                 l9206 1ADD  
                               l9214 1AEE                                 l9054 0CF3  
                               l9046 0CE7                                 l9038 0C9C  
                               l8096 1CA1                                 l8168 2686  
                               l8256 2FA9                                 l8408 149C  
                               l9144 1B64                                 l9160 1D26  
                               l9208 1AE1                                 l9216 1B07  
                               l8272 1689                                 l8248 2E72  
                               l9056 0D3D                                 l9400 0704  
                               l7722 25C6                                 l7706 2018  
                               l8178 1BEA                                 l9138 1B57  
                               l8602 0A24                                 l9410 07BB  
                               l9402 0731                                 l7732 25EE  
                               l7724 25D0                                 l8428 2F8C  
                               l8188 1C0C                                 l8380 13B9  
                               l8364 1370                                 l8348 1F66  
                               l9180 1936                                 l8700 24A9  
                               l9260 0F4A                                 l9252 0E32  
                               l9068 0DA1                                 l9332 03BA  
                               l9316 039B                                 l7750 2518  
                               l7734 25F6                                 l7726 25D5  
                               l7718 25BF                                 l7822 1064  
                               l7806 20FB                                 l9086 2335  
                               l8374 1395                                 l8470 1157  
                               l9166 1D35                                 l8286 14F1  
                               l8606 0B66                                 l9262 0F90  
                               l9254 0E78                                 l9270 0E14  
                               l9246 0DFD                                 l9422 07EE  
                               l9406 0771                                 l9326 03AB  
                               l7752 2520                                 l7760 253F  
                               l7840 108D                                 l7808 210B  
                               l9096 235C                                 l8704 24B1  
                               l8616 215A                                 l9272 0FC1  
                               l9256 0EBE                                 l9360 04D3  
                               l7754 2528                                 l8730 22AC  
                               l7850 10AF                                 l7818 105D  
                               l7930 1EEB                                 l7914 1EA8  
                               l8386 13F4                                 l9282 0FE4  
                               l9258 0F04                                 l9266 0FA4  
                               l8642 18DA                                 l8634 18CA  
                               l9346 0435                                 l7756 2530  
                               l7748 2510                                 l8732 22AE  
                               l7860 10D0                                 l7852 10B3  
                               l7828 1073                                 l7908 1E92  
                               l8484 11BD                                 l8476 1163  
                               l9276 0FCA                                 l9268 0FBB  
                               l8564 218A                                 l8572 2195  
                               l8556 217A                                 l8660 1921  
                               l8652 1908                                 l8644 18E8  
                               l9356 0493                                 ?_sin 013E  
                               l8726 22A8                                 l7846 10A0  
                               l7942 1F07                                 l7926 1EE3  
                               l8590 274D                                 l8902 12A5  
                               l8822 2FEB                                 l8830 2FFC  
                               l9374 0591                                 l7776 208C  
                               l8728 22AA                                 l8736 22B2  
                               l7864 10E6                                 l7848 10AA  
                               l7784 2DC8                                 l8488 11DD  
                               l8672 246F                                 l8920 12D9  
                               l8656 1913                                 l9384 05FB  
                               l7858 10C6                                 l7938 1EFF  
                               l7890 20D7                                 l8690 248E  
                               l8906 12B7                                 l8850 2593  
                               l9394 067E                                 l7868 10F8  
                               l8940 130D                                 l8932 12EE  
                               l8908 12BF                                 l8828 2FF5  
                               l8860 25AA                                 l8852 2598  
                               l8844 2587                                 l9388 0636  
                               ?_pow 0155                                 l8790 26D2  
                               l7878 1113                                 l7886 20C1  
                               l7966 19C8                                 l8678 247A  
                               l8950 132D                                 l8934 12F2  
                               l8870 1257                                 l8862 25B2  
                               l9398 06CD                                 l8792 26DB  
                               l7992 1A13                                 l7984 19F8  
                               l8696 24A0                                 l8688 2482  
                               l7994 1A1F                                 l7986 1A06  
                               l8882 1276                                 l8874 126A  
                               l9860 22CB                                 l9852 0FAA  
                               l8964 134D                                 l8948 1327  
                               l9862 22D0                                 l7998 1A2D  
                               l9854 1AF3                                 l8958 1341  
                               l8990 0BFB                                 l9864 2545  
                               l9856 22C1                                 l8984 0BDE  
                               l9866 2092                                 l9858 22C6  
                               _PEIE 005E                                 _RCIE 048D  
                               u8115 10B4                                 u9005 2DEC  
                               u8055 108E                                 u9015 2E24  
                               u8145 10C7                                 u9025 216B  
                               u8315 1F08                                 u8085 10A1  
                               u8325 1F0E                                 u8245 1EB4  
                               u8255 1EC4                                 u8425 1A14  
                               u9145 18DD                                 u9065 2D9C  
                               u8275 1EEC                                 u8700 2FA7  
                               u7805 25E4                                 u8285 1EF2  
                               u8365 19CF                                 u9245 2485  
                               u9165 18E9                                 u9335 180C  
                               u7735 2019                                 u9175 18FD  
                               u9415 2FDB                                 u9345 1812  
                               u7825 25F1                                 u8545 1CB3  
                               u7905 2DCF                                 u7745 2020  
                               u9265 248F                                 u8465 23D1  
                               u9185 1909                                 u8555 1CC3  
                               u7915 2DD4                                 u8395 19F9  
                               u9275 2499                                 u8475 23F5  
                               u9380 26D9                                 u9365 26B8  
                               u8565 1CE3                                 u8805 2E89  
                               u9285 24A1                                 u9605 1280  
                               u9375 26CB                                 u8575 1CF2  
                               u8760 08ED                                 u7865 260B  
                               u7785 25CB                                 u8585 1CFC  
                               u7945 2100                                 u8770 08EE  
                               u8915 1493                                 u9715 12FE  
                               u8685 1C15                                 u9565 1250  
                               u9485 2576                                 u8870 13D2  
                               u9575 1263                                 u8880 13D3  
                               u9855 0C26                                 u8985 11AE  
                               u9965 0CB5                                 u9885 0C4F  
                               u9975 0CCC                                 u9985 0CFC  
                               u9995 0D11                   scaleA100kPot@input 0167  
                       __CFG_WRT$OFF 0000                        __CFG_FCMEN$ON 0000  
                  _scaleA10kPot$2848 01EA                    _scaleA10kPot$2849 01ED  
                               _iCnt 025D                                 _main 0376  
                       ___ftpack@arg 00A0                                 cos@f 014C  
                       ___ftpack@exp 00A3                                 fsr0h 0005  
                               fsr1h 0007                                 fsr0l 0004  
                               indf0 0000                                 indf1 0001  
                               fsr1l 0006                                 map@x 00DE  
                               btemp 007E                                 exp@x 0148  
                               log@x 013E                        __CFG_BOREN$ON 0000  
                               sin@f 013E                                 sin@y 0142  
                               ltemp 007E                                 pow@x 0155  
                               pow@y 0158                                 start 02F3  
                               ttemp 007E                                 wtemp 007E  
       __end_of_getSwitchBypassState 2CE3                      _expressModeCnst 01E2  
       updateSwitchTap@tapCntDivisor 00C2         __end_of_setSwitchBypassState 2DFD  
                    ?i1_set_leds_top 0070                        __CFG_MCLRE$ON 0000  
                       ___ftmul@cntr 00BC                         ___ftmul@sign 00BD  
                    __end_of_InitApp 2F62                         ___fttol@exp1 012D  
                              ??_cos 00F0                                ??_map 00ED  
              __size_of_calcCosArray 0081                                ??_exp 014B  
                              ??_log 0141                         ___fttol@lval 0129  
                              ??_isr 003A                                ??_sin 0141  
                              ??_pow 015B                      _switchBypass_up 0268  
          __size_of_initSwitchBypass 000F                      __end_of___aldiv 192A  
                              ?_main 0070                       i1___awdiv@sign 0076  
       getModulationDelayTime@subDiv 012E                      __end_of___awdiv 24B6  
                    __end_of___ftadd 112B                                _CCPR1 0291  
                              _CCPR2 0298                                _CCPR3 0311  
                              _CCPR4 0318                                _CCPR5 031C  
                      __CFG_WDTE$OFF 0000                      __end_of___ftdiv 1D1D  
                    __end_of___ftneg 2CF5                                u10005 0D25  
                              u10025 0D42                                u10145 239F  
                              u10225 1B41                                u10235 0DD7  
                    __end_of___ftmul 1F2F                                u10085 2355  
                              u10245 0DEB                                u10405 0615  
                              u10325 0413                                u10255 0DFB  
                              u10415 0631                                u10335 0433  
                              u10265 0E1B                                u10425 065C  
                              u10345 04B1                                u10435 067C  
                              u10355 04D1                      ___awdiv@divisor 00A0  
                              u10365 056F                                u10375 058F  
                              u10465 074F                                u10385 05E6  
                    __end_of___ftsub 2F03                                u10475 076F  
                              u10395 05F4                      __end_of___fttol 1A36  
                              i1l137 02EE                                i1l138 001B  
                              i1l139 0101                                i1l810 2308  
                              i1l811 232A                      ___awdiv@counter 00A5  
                              _RCREG 0199                                _SPBRG 019B  
                 __end_ofsin@coeff_a 2848                   __end_ofsin@coeff_b 2854  
                              _TXREG 019A                                _UQEnd 005A  
                _ConfigureOscillator 2CDB          __size_of_setLongBypassState 0021  
                   _setPresetDisplay 2035                         ?_init_timer0 0070  
                       ?_init_timer2 0070                  ___lmul@multiplicand 00A4  
                       ___lltoft@exp 00AD                      _switchTap_state 01E6  
                  ??_setLongTapState 00A2                        ___awtoft@sign 00AD  
                              _floor 1DC8                                _ldexp 1BDD  
                              _frexp 219D                                _myBuf 03A0  
                              _errno 0251             _getModulationSubdivision 2F62  
                      ___ftpack@sign 00A4                                _timer 0056  
                   __end_ofi1___lmul 2F32                                sin@x2 0148  
                              ltemp0 007E                                ltemp1 0082  
                              ltemp2 0086                                ltemp3 0080  
                    __end_of_wait_ms 1035                                pow@yi 0163  
                    scaleA10kPot@pwm 01E7                   __size_of_USARTInit 0044  
                              ttemp0 007E                                ttemp1 0081  
                              ttemp2 0084                                ttemp3 0087  
                              ttemp4 007F                                status 0003  
        __end_of_read_bottom_tactile 2375                   __size_ofi1___aldiv 0082  
                              wtemp0 007E                                wtemp1 0080  
                              wtemp2 0082                                wtemp3 0084  
                              wtemp4 0086                                wtemp5 0088  
                              wtemp6 007F                   __size_ofi1___awdiv 0051  
              set_subdivision@scalar 0132       __size_of_setSwitchBypassRelays 0036  
      __end_of_setSwitchBypassRelays 2FC8                         _calcCosArray 277F  
                        exp@exponent 0152                 ?_ConfigureOscillator 0070  
                 _updateSwitchBypass 1241                          ldexp@newexp 0141  
            __end_of_updateSwitchTap 0DBA                      __initialization 02F5  
                        log@exponent 0142          updateModulationArray@iAngle 015B  
            _updateSwitchBypassState 0003                         __end_of_main 07F8  
            __size_of_InitializeTaps 0026                  i1___lmul@multiplier 0070  
             __size_of_scaleA100kPot 0085                          modCos@angle 0134  
                ?_updateSwitchBypass 0070                       __CFG_LPBOR$OFF 0000  
             ring_tactiles@iLed_1538 00B5                          modCos@shift 013F  
                    _set_subdivision 1AC1          updateModulationArray@subDiv 0157  
                             ??_main 025E                        ___fttol@sign1 0128  
 __end_ofi1_getModulationSubdivision 2ED5           i1_getModulationSubdivision 2EA9  
                      ?_scaleA10kPot 0167              __size_of_FLASH_ReadWord 0020  
          setLongBypassState@f_state 00A0           __end_of_solidring_tactiles 221D  
                   ?_set_leds_bottom 00A0                               ?_floor 012E  
                             ?_ldexp 013E                               ?_frexp 00A0  
                   __end_of___altoft 2123                               _ADRESH 009C  
                             _ADRESL 009B                     ___awdiv@dividend 00A2  
                   __end_of___awtoft 2E5C                     __end_of___ftpack 261B  
               ??_updateSwitchBypass 00BC                     __end_of___lltoft 2EA9  
                             i1l2045 1837                               i1l6132 2F0B  
                             i1l7004 0264                               i1l7012 02B6  
                             i1l7030 02ED                               i1l6136 2F15  
                             i1l7024 02E6                               i1l6162 1858  
                             i1l6154 1848                               i1l6180 189F  
                             i1l6172 1886                               i1l6164 1866  
                             i1l7028 02EB                               i1l6176 1891  
                             i1l6902 2457                               i1l6830 22F0  
                             i1l6832 22F6                               i1l6840 230E  
                             i1l6906 245F                               i1l6834 22FC  
                             i1l6836 2302                               i1l6828 22EA  
                             i1l6940 0135                               i1l6862 2ED0  
                             i1l6854 2EBD                               i1l6934 011B  
                             i1l6880 2428                               i1l6856 2ECB  
                             i1l6848 2EB8                               i1l6890 2430  
                             i1l6874 241D                               i1l6962 0181  
                             i1l6892 243C                               i1l6980 01DF  
                             i1l6964 0191                               i1l6966 0193  
                             i1l6992 020D                               i1l6976 01C7  
                             i1l6984 01EE                               i1l6898 244E  
                             i1l6994 021C                               i1l6978 01D0  
                             i1l6988 0202                               i1l6996 021E  
                             i1l9868 2313                               _PMADRH 0192  
                             _PMADRL 0191                               _PMDATH 0194  
                             _PMDATL 0193                               _PMCON2 0196  
                             u700_23 0246                               u701_25 025B  
                             u550_25 185B                               u703_25 02C8  
                             u552_25 1867                               u544_25 2F16  
                             u704_25 02E1                               u553_25 187B  
                             u545_25 2F1D                               u554_25 1887  
                             u670_25 243D                               u671_25 2447  
                             u672_25 244F                               u680_25 00EC  
                             u682_25 0112                               u668_25 2433  
                             u684_25 012C                               u693_23 01B5  
                             u678_23 00D3                               u679_25 00E3  
                             u688_23 0151                       _debounce_count 0249  
                        modSaw@angle 012E                       _debounce_mode1 024B  
                     _debounce_mode2 024D                          modSaw@shift 013C  
                             _URBuff 0320                            ??_InitApp 00A0  
              ??_ConfigureOscillator 00A0             __end_of_read_top_tactile 23C3  
            ?_getModulationDelayTime 0070                       __CFG_PWRTE$OFF 0000  
                             ___ftge 20AA                               ___lmul 2005  
                          ??___aldiv 00A8                               ___wmul 2DC5  
                  _update_selectMode 255D                            ??___awdiv 00A4  
                          ??___ftadd 00C7                       __CFG_STVREN$ON 0000  
                          ??___ftdiv 00D4                            ??___ftneg 00C1  
                          ??___ftmul 00B4                            ??___ftsub 00F0  
                          ??___fttol 0124                          modTri@angle 012E  
                             _modCos 1654                     __end_of_init_adc 2CFF  
                             _modSaw 14BC                               _modTri 09EF  
                   __end_of_init_pwm 229F                   ?_update_selectMode 0070  
                        modTri@shift 0137                     ___awdiv@quotient 00A7  
              __end_of_resetRingLEDs 2D91                               _tmpVal 025B  
                  __end_of_USARTInit 22E3                       ??_scaleA10kPot 00F0  
                  __end_ofi1___aldiv 18A8                               floor@i 0132  
                             floor@x 012E                ___ftmul@f3_as_product 00B9  
                  __end_ofi1___awdiv 2464              FLASH_ReadWord@flashAddr 00A0  
                             sin@sgn 014B                     __end_of_showSave 2D5F  
                ??_update_selectMode 00A7                 _getSwitchBypassState 2CDF  
                          ??_wait_ms 00AE                 _setSwitchBypassState 2DE1  
                      _scaleA100kPot 192A         __end_of_setExpressionDisplay 2D77  
             __size_of_scaleiA10kPot 00AB               setLongTapState@f_state 00A0  
                   __end_ofexp@coeff 281E                     __end_oflog@coeff 2839  
            __end_of__initialization 0372                           ___altoft@c 00A8  
     __end_of_getModulationDelayTime 2509                           ___ftadd@f1 00C1  
                         ___ftadd@f2 00C4                           ___ftge@ff1 00A0  
                         ___ftge@ff2 00A3                    _bypass_turning_on 01C0  
                       eval_poly@res 013B                           ___ftdiv@f1 00D1  
                         ___ftdiv@f2 00CE                           ___ftdiv@f3 00D9  
                     _top_push_state 004C            ??_updateSwitchBypassState 00A2  
                         ___ftneg@f1 00BE                  _switchBypass_toggle 0259  
                         ___awtoft@c 00A8                __end_of_ring_tactiles 2413  
          __end_of_update_selectMode 25B6              __end_of_set_subdivision 1B4C  
                         ___ftmul@f1 00AE                           ___ftmul@f2 00B1  
                         ___ftsub@f1 013A                           ___ftsub@f2 0137  
                         ___fttol@f1 0120                     ?_updateSwitchTap 0070  
                       ?_update_mode 0070                       __pcstackCOMMON 0070  
                       __pidataBANK0 2D26                         __pidataBANK2 07FF  
                       __pidataBANK3 2DAB                         __pidataBANK4 2001  
                         ___lltoft@c 00A8                        __end_of_floor 1E7B  
                      __end_of_ldexp 1C74                        __end_of_frexp 21DD  
                   _initSwitchBypass 2D17                            ?i1___lmul 0070  
              _updateModulationArray 0DBA                      _doubleTap_state 005C  
                     _OPTION_REGbits 0095                         modCos@period 0142  
                       modCos@tmpVal 0145                ?_getSwitchBypassState 00A0  
              ?_setSwitchBypassState 00B6                       ?_scaleA100kPot 0167  
                            ??_floor 0131                              ??_ldexp 0143  
                            ??_frexp 00A4                 __size_of_init_timer0 0007  
               __size_of_init_timer2 0009                    i1___aldiv@divisor 0020  
                  i1___aldiv@counter 0028                        ?_setPedalMode 0070  
                         __pbssBANK0 0052                           __pbssBANK2 016A  
                         __pbssBANK3 01A0                           __pbssBANK4 0220  
                         __pbssBANK5 02A0                           __pbssBANK6 0320  
                         __pbssBANK7 03A0                   __size_of_eval_poly 0072  
                   ??i1_set_leds_top 0074                      __CFG_VCAPEN$OFF 0000  
                 __size_of_modSawRev 001C                   __size_of_modSquare 003D  
           __end_of_setPresetDisplay 206F                           _delay_time 0044  
                   _long_press_limit 004A         __size_of_setDoublePressState 003D  
                         _delayfound 024F                           __pmaintext 0376  
                     _InitializeTaps 1800                              ?___ftge 00A0  
                            ?___lmul 00A0                              ?___wmul 012E  
     updateModulationArray@thisAngle 0159                           __pintentry 0004  
                      _scaleiA10kPot 1D1D                           _blink_rate 004E  
                      ??_adc_convert 00A2                              ?_modCos 0134  
                          ?___altoft 00A8                              ?_modSaw 012E  
                            ?_modTri 012E                       ___lmul@product 00A8  
                    _setLongTapState 2D91                            ?___awtoft 00A8  
                          ?___ftpack 00A0                  modSquare@inflection 014B  
                          ?___lltoft 00A8                           ??i1___lmul 0078  
         ??_getModulationSubdivision 00A2                       _FLASH_ReadWord 0800  
                 i1___awdiv@dividend 0072      __end_of_updateSwitchBypassState 0004  
                        modulation@x 002E                          modulation@y 0032  
                         _ldexp$2648 0145                      _debounce_bypass 0247  
                     ??_setPedalMode 00A7                   USARTWriteInt@F3536 0234  
                      _suspend_blink 016A         setSwitchBypassRelays@f_state 00B2  
                       modSaw@period 013F                              _UQFront 005B  
                          ?_init_adc 0070                            ?_init_pwm 0070  
                   _adjust_mod_delay 01BE                              _InitApp 2F32  
               __end_of_scaleA10kPot 1BDD               __end_of_InitializeTaps 1826  
                      ?_set_leds_top 00A0                           _knob1_prev 01CD  
         __size_of_update_selectMode 0059                   i1___awdiv@quotient 0077  
                         _knob2_prev 01CF                           _knob3_prev 01D1  
                         _knob4_prev 01D3                           _knob5_prev 01D5  
                   ?_set_subdivision 012E                            ?_showSave 0070  
                            ___aldiv 18A8                       ?_scaleiA10kPot 0167  
                    __size_of___ftge 003C                              ___awdiv 2464  
                    __size_of___lmul 0030                              ___ftadd 1035  
                            ___ftdiv 1C74                              ___ftneg 2CEC  
                         _knob_1_pos 01AC                           _knob_2_pos 01AE  
                    __size_of___wmul 001C                              ___ftmul 1E7B  
                         _knob_3_pos 01B0                              ___ftsub 2ED5  
                            ___fttol 19AF                           _knob_4_pos 01B2  
                         _knob_5_pos 01B4                    _switchTap_pressed 016B  
                         ??___altoft 00AC                 _setExpressionDisplay 2D5F  
             ?_updateModulationArray 0070                      __size_of_modCos 01AC  
             __end_of_FLASH_ReadWord 0820                      __size_of_modSaw 0198  
                         ??___awtoft 00AB                           ??___ftpack 00A5  
                    __size_of_modTri 01E3                    __end_of_eval_poly 268D  
                 InitializeTaps@itap 00A1                           ??___lltoft 00AC  
                            __ptext1 255D                              __ptext2 2FC8  
                            __ptext3 0BD2                              __ptext4 2D91  
                            __ptext5 18A8                              __ptext6 1241  
                            __ptext7 2E19                              __ptext8 2160  
                            __ptext9 2D4B           __end_of_setLongBypassState 2E3A  
        ?i1_getModulationSubdivision 0070               ??_getSwitchBypassState 00A2  
                  __end_of_modSawRev 2E19                            _T2CONbits 001C  
                       __size_of_cos 007C                         __size_of_map 008B  
                       __size_of_exp 0159                         __size_of_log 00D1  
                       __size_of_isr 02EF               ??_setSwitchBypassState 00B8  
                       __size_of_sin 01CF                         __size_of_pow 0116  
                __end_of_adc_convert 2D4B                         modTri@period 013A  
                  __end_of_modSquare 2160                      ??_scaleA100kPot 00F0  
                   ___aldiv@dividend 00A4                         modTri@tmpVal 013D  
                            _wait_ms 1003                              clrloop0 2D0C  
               end_of_initialization 0372                              exp@sign 0154  
                         _modulation 221D                              init_ram 2CFF  
                         ??_init_adc 00A0                              initloop 2D00  
                         ??_init_pwm 00A0         updateSwitchBypassState@state 00A0  
                 _solidring_tactiles 21DD                        _longTap_timer 01B8  
                      _longTap_state 004F                        _longTap_start 01C5  
                     ??_set_leds_top 00A4                    ?_read_top_tactile 0070  
                    ?_InitializeTaps 0070                              pow@sign 0162  
                  scaleA10kPot@input 0167              __end_of_setLongTapState 2DAB  
              _setSwitchBypassRelays 2F92               i1set_leds_top@ledState 0072  
                 ??_read_top_tactile 00B2                            _RCSTAbits 019D  
                         ??_showSave 00B7                     _mod_time_changed 01E4  
                   _longBypass_timer 01B6                     ___aldiv@quotient 00AB  
                   _longBypass_state 005D                     _longBypass_start 01C4  
       __size_of_read_bottom_tactile 004A                  ?_solidring_tactiles 0070  
                       __pstringtext 2800            FLASH_ReadWord@GIEBitValue 00A2  
              ?_setExpressionDisplay 0070                 __size_of_update_mode 0038  
                    ?_FLASH_ReadWord 00A0                    _expressionChannel 01E3  
                          _PORTAbits 000C                            _PORTCbits 000E  
                          _PORTDbits 000F                            _PORTEbits 0010  
                         _test_timer 0241                            _USARTInit 229F  
                          _TRISBbits 008D                            _TRISCbits 008E  
                          _TRISDbits 008F                            _TRISEbits 0090  
                          _TRISFbits 030C                            _TRISGbits 030D  
                          i1___aldiv 1826                            i1___awdiv 2413  
               ??_solidring_tactiles 00B2          __end_of_ConfigureOscillator 2CDF  
                         map@out_max 00EA                           map@out_min 00E7  
        __size_of_updateSwitchBypass 0122             __end_of_initSwitchBypass 2D26  
                        _CCP1CONbits 0293                          ___ftdiv@exp 00DC  
           __size_of_set_leds_bottom 003B                          _CCP2CONbits 029A  
                          _TXSTAbits 019E                 _switchBypass_pressed 01BA  
                        _CCP3CONbits 0313                          _CCP4CONbits 031A  
                        _CCP5CONbits 031E                          _CCP6CONbits 0613  
                    ??_scaleiA10kPot 00F0                          _CCP7CONbits 0616  
                        ___ftmul@exp 00B8                   adc_convert@channel 00A3  
                        _CCP8CONbits 0619                          _CCP9CONbits 061C  
               set_leds_top@ledState 00A2                       __end_of___ftge 20E6  
               __end_of_setPedalMode 2E7F                       __end_of___lmul 2035  
                     __end_of___wmul 2DE1                         _double_timer 01A0  
                        _adc_convert 2D38     __end_of_getModulationSubdivision 2F92  
                     _switchTap_down 01CB                       __end_of_modCos 1800  
                     __end_of_modSaw 1654                       __end_of_modTri 0BD2  
                     modSawRev@angle 0142                           floor@expon 0135  
              i1___lmul@multiplicand 0074                    __size_ofi1___lmul 002F  
                start_initialization 02F5                           ?_USARTInit 00A0  
                         eval_poly@d 0137                           eval_poly@n 0139  
                         eval_poly@x 0134                _bottomTactile_pressed 01BF  
                _setDoublePressState 2160                           ldexp@value 013E  
                         ?i1___aldiv 0020                          __end_of_cos 277F  
                        __end_of_map 1AC1                          __end_of_exp 14BC  
                        __end_of_log 2000                          __end_of_isr 02F3  
                         ?i1___awdiv 0070                          __end_of_sin 09EF  
                        __end_of_pow 1241                __size_of_scaleA10kPot 0091  
                 _adjusted_pot_value 0245                          ?_modulation 002E  
                 scaleiA10kPot@input 0167                           frexp@value 00A0  
             __size_of_resetRingLEDs 001A               ?_setSwitchBypassRelays 00B2  
               ?_setDoublePressState 00B8  __size_ofi1_getModulationSubdivision 002C  
                   ?_setLongTapState 00A0                    ?_setPresetDisplay 0070  
                           ??___ftge 00A6                             ??___lmul 00A8  
             ??_setExpressionDisplay 00A4                             ??___wmul 00F0  
                 ??_setPresetDisplay 00A4                          __pdataBANK0 0040  
                        __pdataBANK2 016C                          __pdataBANK3 01CD  
                        __pdataBANK4 0266                             ??_modCos 013A  
                           ??_modSaw 00F0                   i1___aldiv@dividend 0024  
                           ??_modTri 00F0                        _tap_iteration 01DD  
           __size_of_updateSwitchTap 01E8                    __size_of___altoft 003D  
                  __size_of___awtoft 0022                    __size_of___ftpack 0065  
                        __pbssBIGRAM 238A                         _scaleA10kPot 1B4C  
                  __size_of___lltoft 002A                        ??_init_timer0 00A0  
                      ??_init_timer2 00A0                 __end_of_set_leds_top 255D  
                          ___latbits 0003       setExpressionDisplay@ledChannel 00A6  
                 _switchBypass_state 0051                        __pcstackBANK0 0020  
                      __pcstackBANK1 00A0                        __pcstackBANK2 0120  
                      __pcstackBANK3 01E7                        __pcstackBANK4 025E  
                      __pcstackBANK5 02CC               __size_of_ring_tactiles 0050  
                     _expSwitchState 01E1     updateModulationArray@iAngle_2347 0156  
                   i1___lmul@product 0078                     scaleiA10kPot@pwm 01E7  
           ?_updateSwitchBypassState 00A0                           sin@coeff_a 2839  
                         sin@coeff_b 2848                   i1___aldiv@quotient 002A  
                   modCos@inflection 0137                        ?_calcCosArray 0070  
                           ?_InitApp 0070                ??_setDoublePressState 00BA  
                  __size_of_init_adc 000A                    __size_of_init_pwm 0041  
                          _main$2840 02CF                            _main$2841 02D2  
                          _main$2839 02CC              ??_updateModulationArray 0150  
                           ?___aldiv 00A0                    ??_set_leds_bottom 00A2  
                 _currentBypassState 01E0                             ?___awdiv 00A0  
                           ?___ftadd 00C1                             ?___ftdiv 00CE  
                           ?___ftneg 00BE                             ?___ftmul 00AE  
                           ?___ftsub 0137                             ?___fttol 0120  
                  __size_of_showSave 0014                   _modulation_changed 01C7  
                  i1___awdiv@divisor 0070                   _scaleA100kPot$2844 01EA  
                 _scaleA100kPot$2845 01ED                    i1___awdiv@counter 0075  
                        _blink_delay 0266                  __size_of_modulation 0041  
                      _resetRingLEDs 2D77                          _blink_state 01DF  
                          _eval_poly 261B                          ??_USARTInit 00A2  
                           _CCPTMRS0 029D                             _CCPTMRS1 029E  
                           _CCPTMRS2 029F                          ??i1___aldiv 007C  
                           ?_wait_ms 00AC                          ??i1___awdiv 0074  
                          _modSawRev 2DFD             ??_getModulationDelayTime 00F0  
                _read_bottom_tactile 232B                       __size_of_floor 00B3  
                     __size_of_ldexp 0097                       __size_of_frexp 0040  
                          _modSquare 2123                   calcCosArray@iAngle 0159  
                     _presetModeCnst 01E5                   _setLongBypassState 2E19  
                __end_of_init_timer0 07FF                  __end_of_init_timer2 2CEC  
                          _mod_value 0253                            _mod_timer 01A4  
                   ??_InitializeTaps 00A0                      ___aldiv@divisor 00A0  
  __size_of_getModulationSubdivision 0030                      ___aldiv@counter 00A9  
          ?_getModulationSubdivision 00A0                       _presetSaveMode 005F  
                     ___wmul@product 0132                       ??_calcCosArray 0152  
                           _LATBbits 010D                             _LATDbits 010F  
                           _LATFbits 038C                             _LATGbits 038D  
                     _mod_delay_time 01D9                            clear_ram0 2D0B  
                 calcCosArray@tmpVal 0156                            _tap_timer 0052  
                ?_setLongBypassState 00A0                            _tap_total 023D  
              __size_of_setPedalMode 0023                        set_leds_top@x 00A0  
                           _PIR1bits 0011                        _ring_tactiles 23C3  
                    _longBypass_down 01C2                     ??_FLASH_ReadWord 00A2  
                    _longBypass_save 01C3                 ?_read_bottom_tactile 0070  
            __size_ofi1_set_leds_top 0048            initSwitchBypass@initState 00BA  
                          map@in_max 00E4                            map@in_min 00E1  
                     ?_resetRingLEDs 0070                            _sub_timer 01A8  
                         _ADCON0bits 009D                             i1___lmul 2F03  
                         _ADCON1bits 009E             __size_of_set_subdivision 008B  
                  ___wmul@multiplier 012E                     set_subdivision@x 012E  
                   set_subdivision@y 0130            __size_of_read_top_tactile 004E  
               ??_setLongBypassState 00A2                           ?_eval_poly 0134  
      __size_of_getSwitchBypassState 0004                          _modCos$2852 013C  
      __size_of_setSwitchBypassState 001C                           ?_modSawRev 0142  
              __end_of_scaleA100kPot 19AF                    ??_updateSwitchTap 00BC  
                  ___lmul@multiplier 00A0                           ?_modSquare 0148  
                    modSquare@tmpVal 014E                         _setPedalMode 2E5C  
                  _ReadSavedSettings 268D                    ?_initSwitchBypass 0070  
                  ring_tactiles@iLed 00B3                          _oldBaseTime 0255  
                     wait_ms@timeSec 00AC                   ?_ReadSavedSettings 0070  
                        _modSaw$2854 0134                          _modSaw$2855 0137  
                     wait_ms@timemsl 00AE                            frexp@eptr 00A3  
        setSwitchBypassState@f_state 00B6                   ??_initSwitchBypass 00BA  
                   __size_of_InitApp 0030                       ?_ring_tactiles 0070  
                          modSaw@mod 013A                          _mode1_state 01C6  
                      ??_update_mode 00A7                          _mode2_state 005E  
                          isr@subDiv 007D                ??_read_bottom_tactile 00B2  
                        _modTri$2853 0134                  updateSwitchTap@iCnt 00C4  
                ??_ReadSavedSettings 00A4                           _APFCONbits 011D  
                   __size_of___aldiv 0082                     __size_of___awdiv 0052  
                   __size_of___ftadd 00F6                     __size_of___ftdiv 00A9  
                       ?_adc_convert 00A0                     __size_of___ftneg 0009  
                           ___altoft 20E6                     __size_of___ftmul 00B4  
                   __size_of___ftsub 002E                     __size_of___fttol 0087  
                           _cos$2856 014F                             ___awtoft 2E3A  
              __size_of_set_leds_top 0054                             ___ftpack 25B6  
                  _baseline_mod_time 0040                             _map$2842 00ED  
                           ___lltoft 2E7F               _preset_programmning_on 01C9  
                         _ANSELEbits 0190                           _ANSELFbits 040C  
                   modTri@inflection 0131                     set_leds_bottom@x 00A0  
                           _exp$2611 014F                             _exp$2860 014C  
                        _init_timer0 07F8                          _init_timer2 2CE3  
                           _cosArray 2482           __end_of_updateSwitchBypass 1363  
                           __ptext10 21DD                             __ptext11 23C3  
                           __ptext20 2DFD                             __ptext12 2E5C  
                           __ptext21 14BC                             __ptext13 2035  
                           __ptext30 1BDD                             __ptext22 2464  
                           __ptext14 2D5F                             __ptext31 2E7F  
                           __ptext23 1AC1                             __ptext15 2D77  
                           __ptext40 0003                             __ptext32 2375  
                           __ptext24 1D1D                             __ptext16 0DBA  
                           __ptext41 2CDF                             __ptext33 232B  
                           __ptext25 1B4C                             __ptext17 09EF  
                           __ptext50 20AA                             __ptext42 24B6  
                           __ptext34 1A36                             __ptext26 192A  
                           __ptext18 2123                             __ptext51 20E6  
                           __ptext43 2F62                             __ptext35 2D17  
                           __ptext27 112B                             __ptext19 1654  
                           __ptext60 25B6                             __ptext52 261B  
                           __ptext44 277F                             __ptext36 2DE1  
                           __ptext28 1F2F                             __ptext61 2D38  
                           __ptext53 2DC5                             __ptext45 2703  
                           __ptext37 2F92                             __ptext29 1363  
                           __ptext70 2CE3                             __ptext62 229F  
                           __ptext54 1E7B                             __ptext46 0820  
                           __ptext38 1003                             __ptext71 07F8  
                           __ptext63 268D                             __ptext55 2ED5  
                           __ptext47 1DC8                             __ptext39 2005  
                           __ptext80 1826                             __ptext72 2CF5  
                           __ptext64 2509                             __ptext56 1035  
                           __ptext48 219D                             __ptext73 2CDB  
                           __ptext65 206F                             __ptext57 2CEC  
                           __ptext49 19AF                             __ptext66 0800  
                           __ptext58 1C74                             __ptext75 22E3  
                           __ptext67 1800                             __ptext59 2E3A  
                           __ptext76 2EA9                             __ptext68 2F32  
                           __ptext77 2413                             __ptext69 225E  
                           __ptext78 221D                             __ptext79 2F03  
                           _sin$2859 0145            __end_of_ReadSavedSettings 2703  
                   __size_of_wait_ms 0032          __size_of_solidring_tactiles 0040  
    __size_of_getModulationDelayTime 0053                             _ledState 0239  
                           _pow$2857 015C                             _pow$2858 015F  
                      _presetChannel 016C                         ??_modulation 0036  
                        _mod_counter 01D7                             _modArray 238A  
                        _oldSymmetry 0257              ??_setSwitchBypassRelays 00B4  
                           _init_adc 2CF5                        __size_of_main 0482  
                           _init_pwm 225E     updateModulationArray@angleFactor 0154  
       __size_of_ConfigureOscillator 0004                         _set_leds_top 2509  
                           _showSave 2D4B                             _num_taps 0050  
              __end_of_scaleiA10kPot 1DC8                             int$flags 007E  
                    ??_resetRingLEDs 00A4                      i1set_leds_top@x 0070  
                     modSquare@angle 0148                  __end_of_update_mode 3000  
                           exp@coeff 2800                             _symmetry 01DB  
                modSawRev@inflection 0145                             log@coeff 281E  
                 __end_of_modulation 225E                 __end_of_calcCosArray 2800  
                         _INTCONbits 000B                          ??_eval_poly 00F0  
          __size_of_setPresetDisplay 003A                          _tap_history 0220  
                        ??_modSawRev 0148                    ??_set_subdivision 00F0  
                        ??_modSquare 00F0                             intlevel1 0000  
                    _set_leds_bottom 206F                           _PMCON1bits 0195  
                    ??_ring_tactiles 00B2                    __CFG_CLKOUTEN$OFF 0000  
                    _reset_sub_delay 01CA                           _OSCCONbits 0099  
                       _preset_blink 01C8               _getModulationDelayTime 24B6  
                     i1_set_leds_top 22E3       __size_of_updateModulationArray 0246  
   __size_of_updateSwitchBypassState 0001        __end_of_updateModulationArray 1000  
                      _isInitialized 01C1        __size_of_setExpressionDisplay 0018  
                 _scaleiA10kPot$2850 01EA                   _scaleiA10kPot$2851 01ED  
           __size_of_setLongTapState 001A                          _tmpModDelay 01BC  
                   _read_top_tactile 2375         ??i1_getModulationSubdivision 0072  
                       ___aldiv@sign 00AA           __size_of_ReadSavedSettings 0076  
        __end_of_setDoublePressState 219D                         _CCP10CONbits 061F  
                  _bottom_push_state 0048           setPresetDisplay@ledChannel 00A6  
             __end_ofi1_set_leds_top 232B  
