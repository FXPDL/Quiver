

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Mon Jan 16 17:05:56 2017

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1527
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	idataBANK4,global,class=CODE,delta=2
     7                           	psect	stringtext,global,class=STRCODE,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    17                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    18                           	psect	bssBANK7,global,class=BANK7,space=1,delta=1
    19                           	psect	clrtext,global,class=CODE,delta=2
    20                           	psect	inittext,global,class=CODE,delta=2
    21                           	psect	cstackBANK5,global,class=BANK5,space=1,delta=1
    22                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    23                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    24                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    25                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    26                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    27                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    28                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    29                           	psect	text1,local,class=CODE,merge=1,delta=2
    30                           	psect	text2,local,class=CODE,merge=1,delta=2
    31                           	psect	text3,local,class=CODE,merge=1,delta=2
    32                           	psect	text4,local,class=CODE,merge=1,delta=2
    33                           	psect	text5,local,class=CODE,merge=1,delta=2
    34                           	psect	text6,local,class=CODE,merge=1,delta=2
    35                           	psect	text7,local,class=CODE,merge=1,delta=2
    36                           	psect	text8,local,class=CODE,merge=1,delta=2
    37                           	psect	text9,local,class=CODE,merge=1,delta=2
    38                           	psect	text10,local,class=CODE,merge=1,delta=2
    39                           	psect	text11,local,class=CODE,merge=1,delta=2
    40                           	psect	text12,local,class=CODE,merge=1,delta=2
    41                           	psect	text13,local,class=CODE,merge=1,delta=2
    42                           	psect	text14,local,class=CODE,merge=1,delta=2
    43                           	psect	text15,local,class=CODE,merge=1,delta=2
    44                           	psect	text16,local,class=CODE,merge=1,delta=2
    45                           	psect	text17,local,class=CODE,merge=1,delta=2
    46                           	psect	text18,local,class=CODE,merge=1,delta=2
    47                           	psect	text19,local,class=CODE,merge=1,delta=2
    48                           	psect	text20,local,class=CODE,merge=1,delta=2
    49                           	psect	text21,local,class=CODE,merge=1,delta=2
    50                           	psect	text22,local,class=CODE,merge=1,delta=2
    51                           	psect	text23,local,class=CODE,merge=1,delta=2
    52                           	psect	text24,local,class=CODE,merge=1,delta=2
    53                           	psect	text25,local,class=CODE,merge=1,delta=2
    54                           	psect	text26,local,class=CODE,merge=1,delta=2
    55                           	psect	text27,local,class=CODE,merge=1,delta=2
    56                           	psect	text28,local,class=CODE,merge=1,delta=2
    57                           	psect	text29,local,class=CODE,merge=1,delta=2
    58                           	psect	text30,local,class=CODE,merge=1,delta=2
    59                           	psect	text31,local,class=CODE,merge=1,delta=2
    60                           	psect	text32,local,class=CODE,merge=1,delta=2
    61                           	psect	text33,local,class=CODE,merge=1,delta=2
    62                           	psect	text34,local,class=CODE,merge=1,delta=2
    63                           	psect	text35,local,class=CODE,merge=1,delta=2
    64                           	psect	text36,local,class=CODE,merge=1,delta=2
    65                           	psect	text37,local,class=CODE,merge=1,delta=2
    66                           	psect	text38,local,class=CODE,merge=1,delta=2
    67                           	psect	text39,local,class=CODE,merge=1,delta=2
    68                           	psect	text40,local,class=CODE,merge=1,delta=2
    69                           	psect	text41,local,class=CODE,merge=1,delta=2
    70                           	psect	text42,local,class=CODE,merge=1,delta=2
    71                           	psect	text43,local,class=CODE,merge=1,delta=2
    72                           	psect	text44,local,class=CODE,merge=1,delta=2
    73                           	psect	text45,local,class=CODE,merge=1,delta=2
    74                           	psect	text46,local,class=CODE,merge=1,delta=2
    75                           	psect	text47,local,class=CODE,merge=1,delta=2
    76                           	psect	text48,local,class=CODE,merge=1,delta=2
    77                           	psect	text49,local,class=CODE,merge=1,delta=2
    78                           	psect	text50,local,class=CODE,merge=1,delta=2
    79                           	psect	text51,local,class=CODE,merge=1,delta=2
    80                           	psect	text52,local,class=CODE,merge=1,delta=2
    81                           	psect	text53,local,class=CODE,merge=1,delta=2
    82                           	psect	text54,local,class=CODE,merge=1,delta=2
    83                           	psect	text55,local,class=CODE,merge=1,delta=2
    84                           	psect	text56,local,class=CODE,merge=1,delta=2
    85                           	psect	text57,local,class=CODE,merge=1,delta=2
    86                           	psect	text58,local,class=CODE,merge=1,delta=2
    87                           	psect	text59,local,class=CODE,merge=1,delta=2
    88                           	psect	text60,local,class=CODE,merge=1,delta=2
    89                           	psect	text61,local,class=CODE,merge=1,delta=2
    90                           	psect	text62,local,class=CODE,merge=1,delta=2
    91                           	psect	text63,local,class=CODE,merge=1,delta=2
    92                           	psect	text64,local,class=CODE,merge=1,delta=2
    93                           	psect	text65,local,class=CODE,merge=1,delta=2
    94                           	psect	text66,local,class=CODE,merge=1,delta=2
    95                           	psect	text67,local,class=CODE,merge=1,delta=2
    96                           	psect	text68,local,class=CODE,merge=1,delta=2
    97                           	psect	text69,local,class=CODE,merge=1,delta=2
    98                           	psect	text70,local,class=CODE,merge=1,delta=2
    99                           	psect	text71,local,class=CODE,merge=1,delta=2
   100                           	psect	text72,local,class=CODE,merge=1,delta=2
   101                           	psect	text73,local,class=CODE,merge=1,delta=2
   102                           	psect	intentry,global,class=CODE,delta=2
   103                           	psect	text75,local,class=CODE,merge=1,delta=2
   104                           	psect	text76,local,class=CODE,merge=1,delta=2
   105                           	psect	text77,local,class=CODE,merge=1,delta=2
   106                           	psect	text78,local,class=CODE,merge=1,delta=2
   107                           	psect	text79,local,class=CODE,merge=1,delta=2
   108                           	psect	text80,local,class=CODE,merge=1,delta=2
   109                           	dabs	1,0x920,80
   110                           	dabs	1,0x8A0,80
   111                           	dabs	1,0x820,80
   112                           	dabs	1,0x7A0,80
   113                           	dabs	1,0x742,46
   114                           	dabs	1,0x720,34
   115                           	dabs	1,0x6A0,80
   116                           	dabs	1,0x620,80
   117                           	dabs	1,0x5BA,54
   118                           	dabs	1,0x2482,0,_cosArray
   119                           	dabs	1,0x238A,0,_modArray
   120                           	dabs	1,0x7E,2
   121  0000                     	;# 
   122  0001                     	;# 
   123  0002                     	;# 
   124  0003                     	;# 
   125  0004                     	;# 
   126  0005                     	;# 
   127  0006                     	;# 
   128  0007                     	;# 
   129  0008                     	;# 
   130  0009                     	;# 
   131  000A                     	;# 
   132  000B                     	;# 
   133  000C                     	;# 
   134  000D                     	;# 
   135  000E                     	;# 
   136  000F                     	;# 
   137  0010                     	;# 
   138  0011                     	;# 
   139  0012                     	;# 
   140  0013                     	;# 
   141  0014                     	;# 
   142  0015                     	;# 
   143  0016                     	;# 
   144  0016                     	;# 
   145  0017                     	;# 
   146  0018                     	;# 
   147  0019                     	;# 
   148  001A                     	;# 
   149  001B                     	;# 
   150  001C                     	;# 
   151  008C                     	;# 
   152  008D                     	;# 
   153  008E                     	;# 
   154  008F                     	;# 
   155  0090                     	;# 
   156  0091                     	;# 
   157  0092                     	;# 
   158  0093                     	;# 
   159  0094                     	;# 
   160  0095                     	;# 
   161  0096                     	;# 
   162  0097                     	;# 
   163  0099                     	;# 
   164  009A                     	;# 
   165  009B                     	;# 
   166  009B                     	;# 
   167  009C                     	;# 
   168  009D                     	;# 
   169  009E                     	;# 
   170  010C                     	;# 
   171  010D                     	;# 
   172  010E                     	;# 
   173  010F                     	;# 
   174  0110                     	;# 
   175  0116                     	;# 
   176  0117                     	;# 
   177  011D                     	;# 
   178  018C                     	;# 
   179  018D                     	;# 
   180  018F                     	;# 
   181  0190                     	;# 
   182  0191                     	;# 
   183  0191                     	;# 
   184  0192                     	;# 
   185  0193                     	;# 
   186  0193                     	;# 
   187  0194                     	;# 
   188  0195                     	;# 
   189  0196                     	;# 
   190  0197                     	;# 
   191  0199                     	;# 
   192  0199                     	;# 
   193  0199                     	;# 
   194  019A                     	;# 
   195  019A                     	;# 
   196  019A                     	;# 
   197  019B                     	;# 
   198  019B                     	;# 
   199  019B                     	;# 
   200  019B                     	;# 
   201  019B                     	;# 
   202  019C                     	;# 
   203  019C                     	;# 
   204  019C                     	;# 
   205  019D                     	;# 
   206  019D                     	;# 
   207  019D                     	;# 
   208  019E                     	;# 
   209  019E                     	;# 
   210  019E                     	;# 
   211  019F                     	;# 
   212  019F                     	;# 
   213  019F                     	;# 
   214  020D                     	;# 
   215  020F                     	;# 
   216  0210                     	;# 
   217  0211                     	;# 
   218  0211                     	;# 
   219  0212                     	;# 
   220  0212                     	;# 
   221  0213                     	;# 
   222  0213                     	;# 
   223  0214                     	;# 
   224  0214                     	;# 
   225  0215                     	;# 
   226  0215                     	;# 
   227  0215                     	;# 
   228  0216                     	;# 
   229  0216                     	;# 
   230  0217                     	;# 
   231  0217                     	;# 
   232  0219                     	;# 
   233  021A                     	;# 
   234  021B                     	;# 
   235  021C                     	;# 
   236  021D                     	;# 
   237  021E                     	;# 
   238  021F                     	;# 
   239  028C                     	;# 
   240  028D                     	;# 
   241  0291                     	;# 
   242  0291                     	;# 
   243  0292                     	;# 
   244  0293                     	;# 
   245  0298                     	;# 
   246  0298                     	;# 
   247  0299                     	;# 
   248  029A                     	;# 
   249  029D                     	;# 
   250  029E                     	;# 
   251  029F                     	;# 
   252  030C                     	;# 
   253  030D                     	;# 
   254  0311                     	;# 
   255  0311                     	;# 
   256  0312                     	;# 
   257  0313                     	;# 
   258  0318                     	;# 
   259  0318                     	;# 
   260  0319                     	;# 
   261  031A                     	;# 
   262  031C                     	;# 
   263  031C                     	;# 
   264  031D                     	;# 
   265  031E                     	;# 
   266  038C                     	;# 
   267  038D                     	;# 
   268  0394                     	;# 
   269  0395                     	;# 
   270  0396                     	;# 
   271  040C                     	;# 
   272  040D                     	;# 
   273  0411                     	;# 
   274  0411                     	;# 
   275  0412                     	;# 
   276  0413                     	;# 
   277  0414                     	;# 
   278  0415                     	;# 
   279  0416                     	;# 
   280  0417                     	;# 
   281  0418                     	;# 
   282  0418                     	;# 
   283  0419                     	;# 
   284  041A                     	;# 
   285  041B                     	;# 
   286  041C                     	;# 
   287  041D                     	;# 
   288  041E                     	;# 
   289  048D                     	;# 
   290  0491                     	;# 
   291  0491                     	;# 
   292  0492                     	;# 
   293  0492                     	;# 
   294  0493                     	;# 
   295  0493                     	;# 
   296  0493                     	;# 
   297  0494                     	;# 
   298  0494                     	;# 
   299  0495                     	;# 
   300  0495                     	;# 
   301  0496                     	;# 
   302  0496                     	;# 
   303  0497                     	;# 
   304  0497                     	;# 
   305  0595                     	;# 
   306  0596                     	;# 
   307  0597                     	;# 
   308  059C                     	;# 
   309  059D                     	;# 
   310  059E                     	;# 
   311  0611                     	;# 
   312  0611                     	;# 
   313  0612                     	;# 
   314  0613                     	;# 
   315  0614                     	;# 
   316  0614                     	;# 
   317  0615                     	;# 
   318  0616                     	;# 
   319  0617                     	;# 
   320  0617                     	;# 
   321  0618                     	;# 
   322  0619                     	;# 
   323  061A                     	;# 
   324  061A                     	;# 
   325  061B                     	;# 
   326  061C                     	;# 
   327  061D                     	;# 
   328  061D                     	;# 
   329  061E                     	;# 
   330  061F                     	;# 
   331  0FE4                     	;# 
   332  0FE5                     	;# 
   333  0FE6                     	;# 
   334  0FE7                     	;# 
   335  0FE8                     	;# 
   336  0FE9                     	;# 
   337  0FEA                     	;# 
   338  0FEB                     	;# 
   339  0FED                     	;# 
   340  0FEE                     	;# 
   341  0FEF                     	;# 
   342  0000                     	;# 
   343  0001                     	;# 
   344  0002                     	;# 
   345  0003                     	;# 
   346  0004                     	;# 
   347  0005                     	;# 
   348  0006                     	;# 
   349  0007                     	;# 
   350  0008                     	;# 
   351  0009                     	;# 
   352  000A                     	;# 
   353  000B                     	;# 
   354  000C                     	;# 
   355  000D                     	;# 
   356  000E                     	;# 
   357  000F                     	;# 
   358  0010                     	;# 
   359  0011                     	;# 
   360  0012                     	;# 
   361  0013                     	;# 
   362  0014                     	;# 
   363  0015                     	;# 
   364  0016                     	;# 
   365  0016                     	;# 
   366  0017                     	;# 
   367  0018                     	;# 
   368  0019                     	;# 
   369  001A                     	;# 
   370  001B                     	;# 
   371  001C                     	;# 
   372  008C                     	;# 
   373  008D                     	;# 
   374  008E                     	;# 
   375  008F                     	;# 
   376  0090                     	;# 
   377  0091                     	;# 
   378  0092                     	;# 
   379  0093                     	;# 
   380  0094                     	;# 
   381  0095                     	;# 
   382  0096                     	;# 
   383  0097                     	;# 
   384  0099                     	;# 
   385  009A                     	;# 
   386  009B                     	;# 
   387  009B                     	;# 
   388  009C                     	;# 
   389  009D                     	;# 
   390  009E                     	;# 
   391  010C                     	;# 
   392  010D                     	;# 
   393  010E                     	;# 
   394  010F                     	;# 
   395  0110                     	;# 
   396  0116                     	;# 
   397  0117                     	;# 
   398  011D                     	;# 
   399  018C                     	;# 
   400  018D                     	;# 
   401  018F                     	;# 
   402  0190                     	;# 
   403  0191                     	;# 
   404  0191                     	;# 
   405  0192                     	;# 
   406  0193                     	;# 
   407  0193                     	;# 
   408  0194                     	;# 
   409  0195                     	;# 
   410  0196                     	;# 
   411  0197                     	;# 
   412  0199                     	;# 
   413  0199                     	;# 
   414  0199                     	;# 
   415  019A                     	;# 
   416  019A                     	;# 
   417  019A                     	;# 
   418  019B                     	;# 
   419  019B                     	;# 
   420  019B                     	;# 
   421  019B                     	;# 
   422  019B                     	;# 
   423  019C                     	;# 
   424  019C                     	;# 
   425  019C                     	;# 
   426  019D                     	;# 
   427  019D                     	;# 
   428  019D                     	;# 
   429  019E                     	;# 
   430  019E                     	;# 
   431  019E                     	;# 
   432  019F                     	;# 
   433  019F                     	;# 
   434  019F                     	;# 
   435  020D                     	;# 
   436  020F                     	;# 
   437  0210                     	;# 
   438  0211                     	;# 
   439  0211                     	;# 
   440  0212                     	;# 
   441  0212                     	;# 
   442  0213                     	;# 
   443  0213                     	;# 
   444  0214                     	;# 
   445  0214                     	;# 
   446  0215                     	;# 
   447  0215                     	;# 
   448  0215                     	;# 
   449  0216                     	;# 
   450  0216                     	;# 
   451  0217                     	;# 
   452  0217                     	;# 
   453  0219                     	;# 
   454  021A                     	;# 
   455  021B                     	;# 
   456  021C                     	;# 
   457  021D                     	;# 
   458  021E                     	;# 
   459  021F                     	;# 
   460  028C                     	;# 
   461  028D                     	;# 
   462  0291                     	;# 
   463  0291                     	;# 
   464  0292                     	;# 
   465  0293                     	;# 
   466  0298                     	;# 
   467  0298                     	;# 
   468  0299                     	;# 
   469  029A                     	;# 
   470  029D                     	;# 
   471  029E                     	;# 
   472  029F                     	;# 
   473  030C                     	;# 
   474  030D                     	;# 
   475  0311                     	;# 
   476  0311                     	;# 
   477  0312                     	;# 
   478  0313                     	;# 
   479  0318                     	;# 
   480  0318                     	;# 
   481  0319                     	;# 
   482  031A                     	;# 
   483  031C                     	;# 
   484  031C                     	;# 
   485  031D                     	;# 
   486  031E                     	;# 
   487  038C                     	;# 
   488  038D                     	;# 
   489  0394                     	;# 
   490  0395                     	;# 
   491  0396                     	;# 
   492  040C                     	;# 
   493  040D                     	;# 
   494  0411                     	;# 
   495  0411                     	;# 
   496  0412                     	;# 
   497  0413                     	;# 
   498  0414                     	;# 
   499  0415                     	;# 
   500  0416                     	;# 
   501  0417                     	;# 
   502  0418                     	;# 
   503  0418                     	;# 
   504  0419                     	;# 
   505  041A                     	;# 
   506  041B                     	;# 
   507  041C                     	;# 
   508  041D                     	;# 
   509  041E                     	;# 
   510  048D                     	;# 
   511  0491                     	;# 
   512  0491                     	;# 
   513  0492                     	;# 
   514  0492                     	;# 
   515  0493                     	;# 
   516  0493                     	;# 
   517  0493                     	;# 
   518  0494                     	;# 
   519  0494                     	;# 
   520  0495                     	;# 
   521  0495                     	;# 
   522  0496                     	;# 
   523  0496                     	;# 
   524  0497                     	;# 
   525  0497                     	;# 
   526  0595                     	;# 
   527  0596                     	;# 
   528  0597                     	;# 
   529  059C                     	;# 
   530  059D                     	;# 
   531  059E                     	;# 
   532  0611                     	;# 
   533  0611                     	;# 
   534  0612                     	;# 
   535  0613                     	;# 
   536  0614                     	;# 
   537  0614                     	;# 
   538  0615                     	;# 
   539  0616                     	;# 
   540  0617                     	;# 
   541  0617                     	;# 
   542  0618                     	;# 
   543  0619                     	;# 
   544  061A                     	;# 
   545  061A                     	;# 
   546  061B                     	;# 
   547  061C                     	;# 
   548  061D                     	;# 
   549  061D                     	;# 
   550  061E                     	;# 
   551  061F                     	;# 
   552  0FE4                     	;# 
   553  0FE5                     	;# 
   554  0FE6                     	;# 
   555  0FE7                     	;# 
   556  0FE8                     	;# 
   557  0FE9                     	;# 
   558  0FEA                     	;# 
   559  0FEB                     	;# 
   560  0FED                     	;# 
   561  0FEE                     	;# 
   562  0FEF                     	;# 
   563  0000                     	;# 
   564  0001                     	;# 
   565  0002                     	;# 
   566  0003                     	;# 
   567  0004                     	;# 
   568  0005                     	;# 
   569  0006                     	;# 
   570  0007                     	;# 
   571  0008                     	;# 
   572  0009                     	;# 
   573  000A                     	;# 
   574  000B                     	;# 
   575  000C                     	;# 
   576  000D                     	;# 
   577  000E                     	;# 
   578  000F                     	;# 
   579  0010                     	;# 
   580  0011                     	;# 
   581  0012                     	;# 
   582  0013                     	;# 
   583  0014                     	;# 
   584  0015                     	;# 
   585  0016                     	;# 
   586  0016                     	;# 
   587  0017                     	;# 
   588  0018                     	;# 
   589  0019                     	;# 
   590  001A                     	;# 
   591  001B                     	;# 
   592  001C                     	;# 
   593  008C                     	;# 
   594  008D                     	;# 
   595  008E                     	;# 
   596  008F                     	;# 
   597  0090                     	;# 
   598  0091                     	;# 
   599  0092                     	;# 
   600  0093                     	;# 
   601  0094                     	;# 
   602  0095                     	;# 
   603  0096                     	;# 
   604  0097                     	;# 
   605  0099                     	;# 
   606  009A                     	;# 
   607  009B                     	;# 
   608  009B                     	;# 
   609  009C                     	;# 
   610  009D                     	;# 
   611  009E                     	;# 
   612  010C                     	;# 
   613  010D                     	;# 
   614  010E                     	;# 
   615  010F                     	;# 
   616  0110                     	;# 
   617  0116                     	;# 
   618  0117                     	;# 
   619  011D                     	;# 
   620  018C                     	;# 
   621  018D                     	;# 
   622  018F                     	;# 
   623  0190                     	;# 
   624  0191                     	;# 
   625  0191                     	;# 
   626  0192                     	;# 
   627  0193                     	;# 
   628  0193                     	;# 
   629  0194                     	;# 
   630  0195                     	;# 
   631  0196                     	;# 
   632  0197                     	;# 
   633  0199                     	;# 
   634  0199                     	;# 
   635  0199                     	;# 
   636  019A                     	;# 
   637  019A                     	;# 
   638  019A                     	;# 
   639  019B                     	;# 
   640  019B                     	;# 
   641  019B                     	;# 
   642  019B                     	;# 
   643  019B                     	;# 
   644  019C                     	;# 
   645  019C                     	;# 
   646  019C                     	;# 
   647  019D                     	;# 
   648  019D                     	;# 
   649  019D                     	;# 
   650  019E                     	;# 
   651  019E                     	;# 
   652  019E                     	;# 
   653  019F                     	;# 
   654  019F                     	;# 
   655  019F                     	;# 
   656  020D                     	;# 
   657  020F                     	;# 
   658  0210                     	;# 
   659  0211                     	;# 
   660  0211                     	;# 
   661  0212                     	;# 
   662  0212                     	;# 
   663  0213                     	;# 
   664  0213                     	;# 
   665  0214                     	;# 
   666  0214                     	;# 
   667  0215                     	;# 
   668  0215                     	;# 
   669  0215                     	;# 
   670  0216                     	;# 
   671  0216                     	;# 
   672  0217                     	;# 
   673  0217                     	;# 
   674  0219                     	;# 
   675  021A                     	;# 
   676  021B                     	;# 
   677  021C                     	;# 
   678  021D                     	;# 
   679  021E                     	;# 
   680  021F                     	;# 
   681  028C                     	;# 
   682  028D                     	;# 
   683  0291                     	;# 
   684  0291                     	;# 
   685  0292                     	;# 
   686  0293                     	;# 
   687  0298                     	;# 
   688  0298                     	;# 
   689  0299                     	;# 
   690  029A                     	;# 
   691  029D                     	;# 
   692  029E                     	;# 
   693  029F                     	;# 
   694  030C                     	;# 
   695  030D                     	;# 
   696  0311                     	;# 
   697  0311                     	;# 
   698  0312                     	;# 
   699  0313                     	;# 
   700  0318                     	;# 
   701  0318                     	;# 
   702  0319                     	;# 
   703  031A                     	;# 
   704  031C                     	;# 
   705  031C                     	;# 
   706  031D                     	;# 
   707  031E                     	;# 
   708  038C                     	;# 
   709  038D                     	;# 
   710  0394                     	;# 
   711  0395                     	;# 
   712  0396                     	;# 
   713  040C                     	;# 
   714  040D                     	;# 
   715  0411                     	;# 
   716  0411                     	;# 
   717  0412                     	;# 
   718  0413                     	;# 
   719  0414                     	;# 
   720  0415                     	;# 
   721  0416                     	;# 
   722  0417                     	;# 
   723  0418                     	;# 
   724  0418                     	;# 
   725  0419                     	;# 
   726  041A                     	;# 
   727  041B                     	;# 
   728  041C                     	;# 
   729  041D                     	;# 
   730  041E                     	;# 
   731  048D                     	;# 
   732  0491                     	;# 
   733  0491                     	;# 
   734  0492                     	;# 
   735  0492                     	;# 
   736  0493                     	;# 
   737  0493                     	;# 
   738  0493                     	;# 
   739  0494                     	;# 
   740  0494                     	;# 
   741  0495                     	;# 
   742  0495                     	;# 
   743  0496                     	;# 
   744  0496                     	;# 
   745  0497                     	;# 
   746  0497                     	;# 
   747  0595                     	;# 
   748  0596                     	;# 
   749  0597                     	;# 
   750  059C                     	;# 
   751  059D                     	;# 
   752  059E                     	;# 
   753  0611                     	;# 
   754  0611                     	;# 
   755  0612                     	;# 
   756  0613                     	;# 
   757  0614                     	;# 
   758  0614                     	;# 
   759  0615                     	;# 
   760  0616                     	;# 
   761  0617                     	;# 
   762  0617                     	;# 
   763  0618                     	;# 
   764  0619                     	;# 
   765  061A                     	;# 
   766  061A                     	;# 
   767  061B                     	;# 
   768  061C                     	;# 
   769  061D                     	;# 
   770  061D                     	;# 
   771  061E                     	;# 
   772  061F                     	;# 
   773  0FE4                     	;# 
   774  0FE5                     	;# 
   775  0FE6                     	;# 
   776  0FE7                     	;# 
   777  0FE8                     	;# 
   778  0FE9                     	;# 
   779  0FEA                     	;# 
   780  0FEB                     	;# 
   781  0FED                     	;# 
   782  0FEE                     	;# 
   783  0FEF                     	;# 
   784  0000                     	;# 
   785  0001                     	;# 
   786  0002                     	;# 
   787  0003                     	;# 
   788  0004                     	;# 
   789  0005                     	;# 
   790  0006                     	;# 
   791  0007                     	;# 
   792  0008                     	;# 
   793  0009                     	;# 
   794  000A                     	;# 
   795  000B                     	;# 
   796  000C                     	;# 
   797  000D                     	;# 
   798  000E                     	;# 
   799  000F                     	;# 
   800  0010                     	;# 
   801  0011                     	;# 
   802  0012                     	;# 
   803  0013                     	;# 
   804  0014                     	;# 
   805  0015                     	;# 
   806  0016                     	;# 
   807  0016                     	;# 
   808  0017                     	;# 
   809  0018                     	;# 
   810  0019                     	;# 
   811  001A                     	;# 
   812  001B                     	;# 
   813  001C                     	;# 
   814  008C                     	;# 
   815  008D                     	;# 
   816  008E                     	;# 
   817  008F                     	;# 
   818  0090                     	;# 
   819  0091                     	;# 
   820  0092                     	;# 
   821  0093                     	;# 
   822  0094                     	;# 
   823  0095                     	;# 
   824  0096                     	;# 
   825  0097                     	;# 
   826  0099                     	;# 
   827  009A                     	;# 
   828  009B                     	;# 
   829  009B                     	;# 
   830  009C                     	;# 
   831  009D                     	;# 
   832  009E                     	;# 
   833  010C                     	;# 
   834  010D                     	;# 
   835  010E                     	;# 
   836  010F                     	;# 
   837  0110                     	;# 
   838  0116                     	;# 
   839  0117                     	;# 
   840  011D                     	;# 
   841  018C                     	;# 
   842  018D                     	;# 
   843  018F                     	;# 
   844  0190                     	;# 
   845  0191                     	;# 
   846  0191                     	;# 
   847  0192                     	;# 
   848  0193                     	;# 
   849  0193                     	;# 
   850  0194                     	;# 
   851  0195                     	;# 
   852  0196                     	;# 
   853  0197                     	;# 
   854  0199                     	;# 
   855  0199                     	;# 
   856  0199                     	;# 
   857  019A                     	;# 
   858  019A                     	;# 
   859  019A                     	;# 
   860  019B                     	;# 
   861  019B                     	;# 
   862  019B                     	;# 
   863  019B                     	;# 
   864  019B                     	;# 
   865  019C                     	;# 
   866  019C                     	;# 
   867  019C                     	;# 
   868  019D                     	;# 
   869  019D                     	;# 
   870  019D                     	;# 
   871  019E                     	;# 
   872  019E                     	;# 
   873  019E                     	;# 
   874  019F                     	;# 
   875  019F                     	;# 
   876  019F                     	;# 
   877  020D                     	;# 
   878  020F                     	;# 
   879  0210                     	;# 
   880  0211                     	;# 
   881  0211                     	;# 
   882  0212                     	;# 
   883  0212                     	;# 
   884  0213                     	;# 
   885  0213                     	;# 
   886  0214                     	;# 
   887  0214                     	;# 
   888  0215                     	;# 
   889  0215                     	;# 
   890  0215                     	;# 
   891  0216                     	;# 
   892  0216                     	;# 
   893  0217                     	;# 
   894  0217                     	;# 
   895  0219                     	;# 
   896  021A                     	;# 
   897  021B                     	;# 
   898  021C                     	;# 
   899  021D                     	;# 
   900  021E                     	;# 
   901  021F                     	;# 
   902  028C                     	;# 
   903  028D                     	;# 
   904  0291                     	;# 
   905  0291                     	;# 
   906  0292                     	;# 
   907  0293                     	;# 
   908  0298                     	;# 
   909  0298                     	;# 
   910  0299                     	;# 
   911  029A                     	;# 
   912  029D                     	;# 
   913  029E                     	;# 
   914  029F                     	;# 
   915  030C                     	;# 
   916  030D                     	;# 
   917  0311                     	;# 
   918  0311                     	;# 
   919  0312                     	;# 
   920  0313                     	;# 
   921  0318                     	;# 
   922  0318                     	;# 
   923  0319                     	;# 
   924  031A                     	;# 
   925  031C                     	;# 
   926  031C                     	;# 
   927  031D                     	;# 
   928  031E                     	;# 
   929  038C                     	;# 
   930  038D                     	;# 
   931  0394                     	;# 
   932  0395                     	;# 
   933  0396                     	;# 
   934  040C                     	;# 
   935  040D                     	;# 
   936  0411                     	;# 
   937  0411                     	;# 
   938  0412                     	;# 
   939  0413                     	;# 
   940  0414                     	;# 
   941  0415                     	;# 
   942  0416                     	;# 
   943  0417                     	;# 
   944  0418                     	;# 
   945  0418                     	;# 
   946  0419                     	;# 
   947  041A                     	;# 
   948  041B                     	;# 
   949  041C                     	;# 
   950  041D                     	;# 
   951  041E                     	;# 
   952  048D                     	;# 
   953  0491                     	;# 
   954  0491                     	;# 
   955  0492                     	;# 
   956  0492                     	;# 
   957  0493                     	;# 
   958  0493                     	;# 
   959  0493                     	;# 
   960  0494                     	;# 
   961  0494                     	;# 
   962  0495                     	;# 
   963  0495                     	;# 
   964  0496                     	;# 
   965  0496                     	;# 
   966  0497                     	;# 
   967  0497                     	;# 
   968  0595                     	;# 
   969  0596                     	;# 
   970  0597                     	;# 
   971  059C                     	;# 
   972  059D                     	;# 
   973  059E                     	;# 
   974  0611                     	;# 
   975  0611                     	;# 
   976  0612                     	;# 
   977  0613                     	;# 
   978  0614                     	;# 
   979  0614                     	;# 
   980  0615                     	;# 
   981  0616                     	;# 
   982  0617                     	;# 
   983  0617                     	;# 
   984  0618                     	;# 
   985  0619                     	;# 
   986  061A                     	;# 
   987  061A                     	;# 
   988  061B                     	;# 
   989  061C                     	;# 
   990  061D                     	;# 
   991  061D                     	;# 
   992  061E                     	;# 
   993  061F                     	;# 
   994  0FE4                     	;# 
   995  0FE5                     	;# 
   996  0FE6                     	;# 
   997  0FE7                     	;# 
   998  0FE8                     	;# 
   999  0FE9                     	;# 
  1000  0FEA                     	;# 
  1001  0FEB                     	;# 
  1002  0FED                     	;# 
  1003  0FEE                     	;# 
  1004  0FEF                     	;# 
  1005  0000                     	;# 
  1006  0001                     	;# 
  1007  0002                     	;# 
  1008  0003                     	;# 
  1009  0004                     	;# 
  1010  0005                     	;# 
  1011  0006                     	;# 
  1012  0007                     	;# 
  1013  0008                     	;# 
  1014  0009                     	;# 
  1015  000A                     	;# 
  1016  000B                     	;# 
  1017  000C                     	;# 
  1018  000D                     	;# 
  1019  000E                     	;# 
  1020  000F                     	;# 
  1021  0010                     	;# 
  1022  0011                     	;# 
  1023  0012                     	;# 
  1024  0013                     	;# 
  1025  0014                     	;# 
  1026  0015                     	;# 
  1027  0016                     	;# 
  1028  0016                     	;# 
  1029  0017                     	;# 
  1030  0018                     	;# 
  1031  0019                     	;# 
  1032  001A                     	;# 
  1033  001B                     	;# 
  1034  001C                     	;# 
  1035  008C                     	;# 
  1036  008D                     	;# 
  1037  008E                     	;# 
  1038  008F                     	;# 
  1039  0090                     	;# 
  1040  0091                     	;# 
  1041  0092                     	;# 
  1042  0093                     	;# 
  1043  0094                     	;# 
  1044  0095                     	;# 
  1045  0096                     	;# 
  1046  0097                     	;# 
  1047  0099                     	;# 
  1048  009A                     	;# 
  1049  009B                     	;# 
  1050  009B                     	;# 
  1051  009C                     	;# 
  1052  009D                     	;# 
  1053  009E                     	;# 
  1054  010C                     	;# 
  1055  010D                     	;# 
  1056  010E                     	;# 
  1057  010F                     	;# 
  1058  0110                     	;# 
  1059  0116                     	;# 
  1060  0117                     	;# 
  1061  011D                     	;# 
  1062  018C                     	;# 
  1063  018D                     	;# 
  1064  018F                     	;# 
  1065  0190                     	;# 
  1066  0191                     	;# 
  1067  0191                     	;# 
  1068  0192                     	;# 
  1069  0193                     	;# 
  1070  0193                     	;# 
  1071  0194                     	;# 
  1072  0195                     	;# 
  1073  0196                     	;# 
  1074  0197                     	;# 
  1075  0199                     	;# 
  1076  0199                     	;# 
  1077  0199                     	;# 
  1078  019A                     	;# 
  1079  019A                     	;# 
  1080  019A                     	;# 
  1081  019B                     	;# 
  1082  019B                     	;# 
  1083  019B                     	;# 
  1084  019B                     	;# 
  1085  019B                     	;# 
  1086  019C                     	;# 
  1087  019C                     	;# 
  1088  019C                     	;# 
  1089  019D                     	;# 
  1090  019D                     	;# 
  1091  019D                     	;# 
  1092  019E                     	;# 
  1093  019E                     	;# 
  1094  019E                     	;# 
  1095  019F                     	;# 
  1096  019F                     	;# 
  1097  019F                     	;# 
  1098  020D                     	;# 
  1099  020F                     	;# 
  1100  0210                     	;# 
  1101  0211                     	;# 
  1102  0211                     	;# 
  1103  0212                     	;# 
  1104  0212                     	;# 
  1105  0213                     	;# 
  1106  0213                     	;# 
  1107  0214                     	;# 
  1108  0214                     	;# 
  1109  0215                     	;# 
  1110  0215                     	;# 
  1111  0215                     	;# 
  1112  0216                     	;# 
  1113  0216                     	;# 
  1114  0217                     	;# 
  1115  0217                     	;# 
  1116  0219                     	;# 
  1117  021A                     	;# 
  1118  021B                     	;# 
  1119  021C                     	;# 
  1120  021D                     	;# 
  1121  021E                     	;# 
  1122  021F                     	;# 
  1123  028C                     	;# 
  1124  028D                     	;# 
  1125  0291                     	;# 
  1126  0291                     	;# 
  1127  0292                     	;# 
  1128  0293                     	;# 
  1129  0298                     	;# 
  1130  0298                     	;# 
  1131  0299                     	;# 
  1132  029A                     	;# 
  1133  029D                     	;# 
  1134  029E                     	;# 
  1135  029F                     	;# 
  1136  030C                     	;# 
  1137  030D                     	;# 
  1138  0311                     	;# 
  1139  0311                     	;# 
  1140  0312                     	;# 
  1141  0313                     	;# 
  1142  0318                     	;# 
  1143  0318                     	;# 
  1144  0319                     	;# 
  1145  031A                     	;# 
  1146  031C                     	;# 
  1147  031C                     	;# 
  1148  031D                     	;# 
  1149  031E                     	;# 
  1150  038C                     	;# 
  1151  038D                     	;# 
  1152  0394                     	;# 
  1153  0395                     	;# 
  1154  0396                     	;# 
  1155  040C                     	;# 
  1156  040D                     	;# 
  1157  0411                     	;# 
  1158  0411                     	;# 
  1159  0412                     	;# 
  1160  0413                     	;# 
  1161  0414                     	;# 
  1162  0415                     	;# 
  1163  0416                     	;# 
  1164  0417                     	;# 
  1165  0418                     	;# 
  1166  0418                     	;# 
  1167  0419                     	;# 
  1168  041A                     	;# 
  1169  041B                     	;# 
  1170  041C                     	;# 
  1171  041D                     	;# 
  1172  041E                     	;# 
  1173  048D                     	;# 
  1174  0491                     	;# 
  1175  0491                     	;# 
  1176  0492                     	;# 
  1177  0492                     	;# 
  1178  0493                     	;# 
  1179  0493                     	;# 
  1180  0493                     	;# 
  1181  0494                     	;# 
  1182  0494                     	;# 
  1183  0495                     	;# 
  1184  0495                     	;# 
  1185  0496                     	;# 
  1186  0496                     	;# 
  1187  0497                     	;# 
  1188  0497                     	;# 
  1189  0595                     	;# 
  1190  0596                     	;# 
  1191  0597                     	;# 
  1192  059C                     	;# 
  1193  059D                     	;# 
  1194  059E                     	;# 
  1195  0611                     	;# 
  1196  0611                     	;# 
  1197  0612                     	;# 
  1198  0613                     	;# 
  1199  0614                     	;# 
  1200  0614                     	;# 
  1201  0615                     	;# 
  1202  0616                     	;# 
  1203  0617                     	;# 
  1204  0617                     	;# 
  1205  0618                     	;# 
  1206  0619                     	;# 
  1207  061A                     	;# 
  1208  061A                     	;# 
  1209  061B                     	;# 
  1210  061C                     	;# 
  1211  061D                     	;# 
  1212  061D                     	;# 
  1213  061E                     	;# 
  1214  061F                     	;# 
  1215  0FE4                     	;# 
  1216  0FE5                     	;# 
  1217  0FE6                     	;# 
  1218  0FE7                     	;# 
  1219  0FE8                     	;# 
  1220  0FE9                     	;# 
  1221  0FEA                     	;# 
  1222  0FEB                     	;# 
  1223  0FED                     	;# 
  1224  0FEE                     	;# 
  1225  0FEF                     	;# 
  1226  0000                     	;# 
  1227  0001                     	;# 
  1228  0002                     	;# 
  1229  0003                     	;# 
  1230  0004                     	;# 
  1231  0005                     	;# 
  1232  0006                     	;# 
  1233  0007                     	;# 
  1234  0008                     	;# 
  1235  0009                     	;# 
  1236  000A                     	;# 
  1237  000B                     	;# 
  1238  000C                     	;# 
  1239  000D                     	;# 
  1240  000E                     	;# 
  1241  000F                     	;# 
  1242  0010                     	;# 
  1243  0011                     	;# 
  1244  0012                     	;# 
  1245  0013                     	;# 
  1246  0014                     	;# 
  1247  0015                     	;# 
  1248  0016                     	;# 
  1249  0016                     	;# 
  1250  0017                     	;# 
  1251  0018                     	;# 
  1252  0019                     	;# 
  1253  001A                     	;# 
  1254  001B                     	;# 
  1255  001C                     	;# 
  1256  008C                     	;# 
  1257  008D                     	;# 
  1258  008E                     	;# 
  1259  008F                     	;# 
  1260  0090                     	;# 
  1261  0091                     	;# 
  1262  0092                     	;# 
  1263  0093                     	;# 
  1264  0094                     	;# 
  1265  0095                     	;# 
  1266  0096                     	;# 
  1267  0097                     	;# 
  1268  0099                     	;# 
  1269  009A                     	;# 
  1270  009B                     	;# 
  1271  009B                     	;# 
  1272  009C                     	;# 
  1273  009D                     	;# 
  1274  009E                     	;# 
  1275  010C                     	;# 
  1276  010D                     	;# 
  1277  010E                     	;# 
  1278  010F                     	;# 
  1279  0110                     	;# 
  1280  0116                     	;# 
  1281  0117                     	;# 
  1282  011D                     	;# 
  1283  018C                     	;# 
  1284  018D                     	;# 
  1285  018F                     	;# 
  1286  0190                     	;# 
  1287  0191                     	;# 
  1288  0191                     	;# 
  1289  0192                     	;# 
  1290  0193                     	;# 
  1291  0193                     	;# 
  1292  0194                     	;# 
  1293  0195                     	;# 
  1294  0196                     	;# 
  1295  0197                     	;# 
  1296  0199                     	;# 
  1297  0199                     	;# 
  1298  0199                     	;# 
  1299  019A                     	;# 
  1300  019A                     	;# 
  1301  019A                     	;# 
  1302  019B                     	;# 
  1303  019B                     	;# 
  1304  019B                     	;# 
  1305  019B                     	;# 
  1306  019B                     	;# 
  1307  019C                     	;# 
  1308  019C                     	;# 
  1309  019C                     	;# 
  1310  019D                     	;# 
  1311  019D                     	;# 
  1312  019D                     	;# 
  1313  019E                     	;# 
  1314  019E                     	;# 
  1315  019E                     	;# 
  1316  019F                     	;# 
  1317  019F                     	;# 
  1318  019F                     	;# 
  1319  020D                     	;# 
  1320  020F                     	;# 
  1321  0210                     	;# 
  1322  0211                     	;# 
  1323  0211                     	;# 
  1324  0212                     	;# 
  1325  0212                     	;# 
  1326  0213                     	;# 
  1327  0213                     	;# 
  1328  0214                     	;# 
  1329  0214                     	;# 
  1330  0215                     	;# 
  1331  0215                     	;# 
  1332  0215                     	;# 
  1333  0216                     	;# 
  1334  0216                     	;# 
  1335  0217                     	;# 
  1336  0217                     	;# 
  1337  0219                     	;# 
  1338  021A                     	;# 
  1339  021B                     	;# 
  1340  021C                     	;# 
  1341  021D                     	;# 
  1342  021E                     	;# 
  1343  021F                     	;# 
  1344  028C                     	;# 
  1345  028D                     	;# 
  1346  0291                     	;# 
  1347  0291                     	;# 
  1348  0292                     	;# 
  1349  0293                     	;# 
  1350  0298                     	;# 
  1351  0298                     	;# 
  1352  0299                     	;# 
  1353  029A                     	;# 
  1354  029D                     	;# 
  1355  029E                     	;# 
  1356  029F                     	;# 
  1357  030C                     	;# 
  1358  030D                     	;# 
  1359  0311                     	;# 
  1360  0311                     	;# 
  1361  0312                     	;# 
  1362  0313                     	;# 
  1363  0318                     	;# 
  1364  0318                     	;# 
  1365  0319                     	;# 
  1366  031A                     	;# 
  1367  031C                     	;# 
  1368  031C                     	;# 
  1369  031D                     	;# 
  1370  031E                     	;# 
  1371  038C                     	;# 
  1372  038D                     	;# 
  1373  0394                     	;# 
  1374  0395                     	;# 
  1375  0396                     	;# 
  1376  040C                     	;# 
  1377  040D                     	;# 
  1378  0411                     	;# 
  1379  0411                     	;# 
  1380  0412                     	;# 
  1381  0413                     	;# 
  1382  0414                     	;# 
  1383  0415                     	;# 
  1384  0416                     	;# 
  1385  0417                     	;# 
  1386  0418                     	;# 
  1387  0418                     	;# 
  1388  0419                     	;# 
  1389  041A                     	;# 
  1390  041B                     	;# 
  1391  041C                     	;# 
  1392  041D                     	;# 
  1393  041E                     	;# 
  1394  048D                     	;# 
  1395  0491                     	;# 
  1396  0491                     	;# 
  1397  0492                     	;# 
  1398  0492                     	;# 
  1399  0493                     	;# 
  1400  0493                     	;# 
  1401  0493                     	;# 
  1402  0494                     	;# 
  1403  0494                     	;# 
  1404  0495                     	;# 
  1405  0495                     	;# 
  1406  0496                     	;# 
  1407  0496                     	;# 
  1408  0497                     	;# 
  1409  0497                     	;# 
  1410  0595                     	;# 
  1411  0596                     	;# 
  1412  0597                     	;# 
  1413  059C                     	;# 
  1414  059D                     	;# 
  1415  059E                     	;# 
  1416  0611                     	;# 
  1417  0611                     	;# 
  1418  0612                     	;# 
  1419  0613                     	;# 
  1420  0614                     	;# 
  1421  0614                     	;# 
  1422  0615                     	;# 
  1423  0616                     	;# 
  1424  0617                     	;# 
  1425  0617                     	;# 
  1426  0618                     	;# 
  1427  0619                     	;# 
  1428  061A                     	;# 
  1429  061A                     	;# 
  1430  061B                     	;# 
  1431  061C                     	;# 
  1432  061D                     	;# 
  1433  061D                     	;# 
  1434  061E                     	;# 
  1435  061F                     	;# 
  1436  0FE4                     	;# 
  1437  0FE5                     	;# 
  1438  0FE6                     	;# 
  1439  0FE7                     	;# 
  1440  0FE8                     	;# 
  1441  0FE9                     	;# 
  1442  0FEA                     	;# 
  1443  0FEB                     	;# 
  1444  0FED                     	;# 
  1445  0FEE                     	;# 
  1446  0FEF                     	;# 
  1447  0000                     	;# 
  1448  0001                     	;# 
  1449  0002                     	;# 
  1450  0003                     	;# 
  1451  0004                     	;# 
  1452  0005                     	;# 
  1453  0006                     	;# 
  1454  0007                     	;# 
  1455  0008                     	;# 
  1456  0009                     	;# 
  1457  000A                     	;# 
  1458  000B                     	;# 
  1459  000C                     	;# 
  1460  000D                     	;# 
  1461  000E                     	;# 
  1462  000F                     	;# 
  1463  0010                     	;# 
  1464  0011                     	;# 
  1465  0012                     	;# 
  1466  0013                     	;# 
  1467  0014                     	;# 
  1468  0015                     	;# 
  1469  0016                     	;# 
  1470  0016                     	;# 
  1471  0017                     	;# 
  1472  0018                     	;# 
  1473  0019                     	;# 
  1474  001A                     	;# 
  1475  001B                     	;# 
  1476  001C                     	;# 
  1477  008C                     	;# 
  1478  008D                     	;# 
  1479  008E                     	;# 
  1480  008F                     	;# 
  1481  0090                     	;# 
  1482  0091                     	;# 
  1483  0092                     	;# 
  1484  0093                     	;# 
  1485  0094                     	;# 
  1486  0095                     	;# 
  1487  0096                     	;# 
  1488  0097                     	;# 
  1489  0099                     	;# 
  1490  009A                     	;# 
  1491  009B                     	;# 
  1492  009B                     	;# 
  1493  009C                     	;# 
  1494  009D                     	;# 
  1495  009E                     	;# 
  1496  010C                     	;# 
  1497  010D                     	;# 
  1498  010E                     	;# 
  1499  010F                     	;# 
  1500  0110                     	;# 
  1501  0116                     	;# 
  1502  0117                     	;# 
  1503  011D                     	;# 
  1504  018C                     	;# 
  1505  018D                     	;# 
  1506  018F                     	;# 
  1507  0190                     	;# 
  1508  0191                     	;# 
  1509  0191                     	;# 
  1510  0192                     	;# 
  1511  0193                     	;# 
  1512  0193                     	;# 
  1513  0194                     	;# 
  1514  0195                     	;# 
  1515  0196                     	;# 
  1516  0197                     	;# 
  1517  0199                     	;# 
  1518  0199                     	;# 
  1519  0199                     	;# 
  1520  019A                     	;# 
  1521  019A                     	;# 
  1522  019A                     	;# 
  1523  019B                     	;# 
  1524  019B                     	;# 
  1525  019B                     	;# 
  1526  019B                     	;# 
  1527  019B                     	;# 
  1528  019C                     	;# 
  1529  019C                     	;# 
  1530  019C                     	;# 
  1531  019D                     	;# 
  1532  019D                     	;# 
  1533  019D                     	;# 
  1534  019E                     	;# 
  1535  019E                     	;# 
  1536  019E                     	;# 
  1537  019F                     	;# 
  1538  019F                     	;# 
  1539  019F                     	;# 
  1540  020D                     	;# 
  1541  020F                     	;# 
  1542  0210                     	;# 
  1543  0211                     	;# 
  1544  0211                     	;# 
  1545  0212                     	;# 
  1546  0212                     	;# 
  1547  0213                     	;# 
  1548  0213                     	;# 
  1549  0214                     	;# 
  1550  0214                     	;# 
  1551  0215                     	;# 
  1552  0215                     	;# 
  1553  0215                     	;# 
  1554  0216                     	;# 
  1555  0216                     	;# 
  1556  0217                     	;# 
  1557  0217                     	;# 
  1558  0219                     	;# 
  1559  021A                     	;# 
  1560  021B                     	;# 
  1561  021C                     	;# 
  1562  021D                     	;# 
  1563  021E                     	;# 
  1564  021F                     	;# 
  1565  028C                     	;# 
  1566  028D                     	;# 
  1567  0291                     	;# 
  1568  0291                     	;# 
  1569  0292                     	;# 
  1570  0293                     	;# 
  1571  0298                     	;# 
  1572  0298                     	;# 
  1573  0299                     	;# 
  1574  029A                     	;# 
  1575  029D                     	;# 
  1576  029E                     	;# 
  1577  029F                     	;# 
  1578  030C                     	;# 
  1579  030D                     	;# 
  1580  0311                     	;# 
  1581  0311                     	;# 
  1582  0312                     	;# 
  1583  0313                     	;# 
  1584  0318                     	;# 
  1585  0318                     	;# 
  1586  0319                     	;# 
  1587  031A                     	;# 
  1588  031C                     	;# 
  1589  031C                     	;# 
  1590  031D                     	;# 
  1591  031E                     	;# 
  1592  038C                     	;# 
  1593  038D                     	;# 
  1594  0394                     	;# 
  1595  0395                     	;# 
  1596  0396                     	;# 
  1597  040C                     	;# 
  1598  040D                     	;# 
  1599  0411                     	;# 
  1600  0411                     	;# 
  1601  0412                     	;# 
  1602  0413                     	;# 
  1603  0414                     	;# 
  1604  0415                     	;# 
  1605  0416                     	;# 
  1606  0417                     	;# 
  1607  0418                     	;# 
  1608  0418                     	;# 
  1609  0419                     	;# 
  1610  041A                     	;# 
  1611  041B                     	;# 
  1612  041C                     	;# 
  1613  041D                     	;# 
  1614  041E                     	;# 
  1615  048D                     	;# 
  1616  0491                     	;# 
  1617  0491                     	;# 
  1618  0492                     	;# 
  1619  0492                     	;# 
  1620  0493                     	;# 
  1621  0493                     	;# 
  1622  0493                     	;# 
  1623  0494                     	;# 
  1624  0494                     	;# 
  1625  0495                     	;# 
  1626  0495                     	;# 
  1627  0496                     	;# 
  1628  0496                     	;# 
  1629  0497                     	;# 
  1630  0497                     	;# 
  1631  0595                     	;# 
  1632  0596                     	;# 
  1633  0597                     	;# 
  1634  059C                     	;# 
  1635  059D                     	;# 
  1636  059E                     	;# 
  1637  0611                     	;# 
  1638  0611                     	;# 
  1639  0612                     	;# 
  1640  0613                     	;# 
  1641  0614                     	;# 
  1642  0614                     	;# 
  1643  0615                     	;# 
  1644  0616                     	;# 
  1645  0617                     	;# 
  1646  0617                     	;# 
  1647  0618                     	;# 
  1648  0619                     	;# 
  1649  061A                     	;# 
  1650  061A                     	;# 
  1651  061B                     	;# 
  1652  061C                     	;# 
  1653  061D                     	;# 
  1654  061D                     	;# 
  1655  061E                     	;# 
  1656  061F                     	;# 
  1657  0FE4                     	;# 
  1658  0FE5                     	;# 
  1659  0FE6                     	;# 
  1660  0FE7                     	;# 
  1661  0FE8                     	;# 
  1662  0FE9                     	;# 
  1663  0FEA                     	;# 
  1664  0FEB                     	;# 
  1665  0FED                     	;# 
  1666  0FEE                     	;# 
  1667  0FEF                     	;# 
  1668  0000                     	;# 
  1669  0001                     	;# 
  1670  0002                     	;# 
  1671  0003                     	;# 
  1672  0004                     	;# 
  1673  0005                     	;# 
  1674  0006                     	;# 
  1675  0007                     	;# 
  1676  0008                     	;# 
  1677  0009                     	;# 
  1678  000A                     	;# 
  1679  000B                     	;# 
  1680  000C                     	;# 
  1681  000D                     	;# 
  1682  000E                     	;# 
  1683  000F                     	;# 
  1684  0010                     	;# 
  1685  0011                     	;# 
  1686  0012                     	;# 
  1687  0013                     	;# 
  1688  0014                     	;# 
  1689  0015                     	;# 
  1690  0016                     	;# 
  1691  0016                     	;# 
  1692  0017                     	;# 
  1693  0018                     	;# 
  1694  0019                     	;# 
  1695  001A                     	;# 
  1696  001B                     	;# 
  1697  001C                     	;# 
  1698  008C                     	;# 
  1699  008D                     	;# 
  1700  008E                     	;# 
  1701  008F                     	;# 
  1702  0090                     	;# 
  1703  0091                     	;# 
  1704  0092                     	;# 
  1705  0093                     	;# 
  1706  0094                     	;# 
  1707  0095                     	;# 
  1708  0096                     	;# 
  1709  0097                     	;# 
  1710  0099                     	;# 
  1711  009A                     	;# 
  1712  009B                     	;# 
  1713  009B                     	;# 
  1714  009C                     	;# 
  1715  009D                     	;# 
  1716  009E                     	;# 
  1717  010C                     	;# 
  1718  010D                     	;# 
  1719  010E                     	;# 
  1720  010F                     	;# 
  1721  0110                     	;# 
  1722  0116                     	;# 
  1723  0117                     	;# 
  1724  011D                     	;# 
  1725  018C                     	;# 
  1726  018D                     	;# 
  1727  018F                     	;# 
  1728  0190                     	;# 
  1729  0191                     	;# 
  1730  0191                     	;# 
  1731  0192                     	;# 
  1732  0193                     	;# 
  1733  0193                     	;# 
  1734  0194                     	;# 
  1735  0195                     	;# 
  1736  0196                     	;# 
  1737  0197                     	;# 
  1738  0199                     	;# 
  1739  0199                     	;# 
  1740  0199                     	;# 
  1741  019A                     	;# 
  1742  019A                     	;# 
  1743  019A                     	;# 
  1744  019B                     	;# 
  1745  019B                     	;# 
  1746  019B                     	;# 
  1747  019B                     	;# 
  1748  019B                     	;# 
  1749  019C                     	;# 
  1750  019C                     	;# 
  1751  019C                     	;# 
  1752  019D                     	;# 
  1753  019D                     	;# 
  1754  019D                     	;# 
  1755  019E                     	;# 
  1756  019E                     	;# 
  1757  019E                     	;# 
  1758  019F                     	;# 
  1759  019F                     	;# 
  1760  019F                     	;# 
  1761  020D                     	;# 
  1762  020F                     	;# 
  1763  0210                     	;# 
  1764  0211                     	;# 
  1765  0211                     	;# 
  1766  0212                     	;# 
  1767  0212                     	;# 
  1768  0213                     	;# 
  1769  0213                     	;# 
  1770  0214                     	;# 
  1771  0214                     	;# 
  1772  0215                     	;# 
  1773  0215                     	;# 
  1774  0215                     	;# 
  1775  0216                     	;# 
  1776  0216                     	;# 
  1777  0217                     	;# 
  1778  0217                     	;# 
  1779  0219                     	;# 
  1780  021A                     	;# 
  1781  021B                     	;# 
  1782  021C                     	;# 
  1783  021D                     	;# 
  1784  021E                     	;# 
  1785  021F                     	;# 
  1786  028C                     	;# 
  1787  028D                     	;# 
  1788  0291                     	;# 
  1789  0291                     	;# 
  1790  0292                     	;# 
  1791  0293                     	;# 
  1792  0298                     	;# 
  1793  0298                     	;# 
  1794  0299                     	;# 
  1795  029A                     	;# 
  1796  029D                     	;# 
  1797  029E                     	;# 
  1798  029F                     	;# 
  1799  030C                     	;# 
  1800  030D                     	;# 
  1801  0311                     	;# 
  1802  0311                     	;# 
  1803  0312                     	;# 
  1804  0313                     	;# 
  1805  0318                     	;# 
  1806  0318                     	;# 
  1807  0319                     	;# 
  1808  031A                     	;# 
  1809  031C                     	;# 
  1810  031C                     	;# 
  1811  031D                     	;# 
  1812  031E                     	;# 
  1813  038C                     	;# 
  1814  038D                     	;# 
  1815  0394                     	;# 
  1816  0395                     	;# 
  1817  0396                     	;# 
  1818  040C                     	;# 
  1819  040D                     	;# 
  1820  0411                     	;# 
  1821  0411                     	;# 
  1822  0412                     	;# 
  1823  0413                     	;# 
  1824  0414                     	;# 
  1825  0415                     	;# 
  1826  0416                     	;# 
  1827  0417                     	;# 
  1828  0418                     	;# 
  1829  0418                     	;# 
  1830  0419                     	;# 
  1831  041A                     	;# 
  1832  041B                     	;# 
  1833  041C                     	;# 
  1834  041D                     	;# 
  1835  041E                     	;# 
  1836  048D                     	;# 
  1837  0491                     	;# 
  1838  0491                     	;# 
  1839  0492                     	;# 
  1840  0492                     	;# 
  1841  0493                     	;# 
  1842  0493                     	;# 
  1843  0493                     	;# 
  1844  0494                     	;# 
  1845  0494                     	;# 
  1846  0495                     	;# 
  1847  0495                     	;# 
  1848  0496                     	;# 
  1849  0496                     	;# 
  1850  0497                     	;# 
  1851  0497                     	;# 
  1852  0595                     	;# 
  1853  0596                     	;# 
  1854  0597                     	;# 
  1855  059C                     	;# 
  1856  059D                     	;# 
  1857  059E                     	;# 
  1858  0611                     	;# 
  1859  0611                     	;# 
  1860  0612                     	;# 
  1861  0613                     	;# 
  1862  0614                     	;# 
  1863  0614                     	;# 
  1864  0615                     	;# 
  1865  0616                     	;# 
  1866  0617                     	;# 
  1867  0617                     	;# 
  1868  0618                     	;# 
  1869  0619                     	;# 
  1870  061A                     	;# 
  1871  061A                     	;# 
  1872  061B                     	;# 
  1873  061C                     	;# 
  1874  061D                     	;# 
  1875  061D                     	;# 
  1876  061E                     	;# 
  1877  061F                     	;# 
  1878  0FE4                     	;# 
  1879  0FE5                     	;# 
  1880  0FE6                     	;# 
  1881  0FE7                     	;# 
  1882  0FE8                     	;# 
  1883  0FE9                     	;# 
  1884  0FEA                     	;# 
  1885  0FEB                     	;# 
  1886  0FED                     	;# 
  1887  0FEE                     	;# 
  1888  0FEF                     	;# 
  1889  0000                     	;# 
  1890  0001                     	;# 
  1891  0002                     	;# 
  1892  0003                     	;# 
  1893  0004                     	;# 
  1894  0005                     	;# 
  1895  0006                     	;# 
  1896  0007                     	;# 
  1897  0008                     	;# 
  1898  0009                     	;# 
  1899  000A                     	;# 
  1900  000B                     	;# 
  1901  000C                     	;# 
  1902  000D                     	;# 
  1903  000E                     	;# 
  1904  000F                     	;# 
  1905  0010                     	;# 
  1906  0011                     	;# 
  1907  0012                     	;# 
  1908  0013                     	;# 
  1909  0014                     	;# 
  1910  0015                     	;# 
  1911  0016                     	;# 
  1912  0016                     	;# 
  1913  0017                     	;# 
  1914  0018                     	;# 
  1915  0019                     	;# 
  1916  001A                     	;# 
  1917  001B                     	;# 
  1918  001C                     	;# 
  1919  008C                     	;# 
  1920  008D                     	;# 
  1921  008E                     	;# 
  1922  008F                     	;# 
  1923  0090                     	;# 
  1924  0091                     	;# 
  1925  0092                     	;# 
  1926  0093                     	;# 
  1927  0094                     	;# 
  1928  0095                     	;# 
  1929  0096                     	;# 
  1930  0097                     	;# 
  1931  0099                     	;# 
  1932  009A                     	;# 
  1933  009B                     	;# 
  1934  009B                     	;# 
  1935  009C                     	;# 
  1936  009D                     	;# 
  1937  009E                     	;# 
  1938  010C                     	;# 
  1939  010D                     	;# 
  1940  010E                     	;# 
  1941  010F                     	;# 
  1942  0110                     	;# 
  1943  0116                     	;# 
  1944  0117                     	;# 
  1945  011D                     	;# 
  1946  018C                     	;# 
  1947  018D                     	;# 
  1948  018F                     	;# 
  1949  0190                     	;# 
  1950  0191                     	;# 
  1951  0191                     	;# 
  1952  0192                     	;# 
  1953  0193                     	;# 
  1954  0193                     	;# 
  1955  0194                     	;# 
  1956  0195                     	;# 
  1957  0196                     	;# 
  1958  0197                     	;# 
  1959  0199                     	;# 
  1960  0199                     	;# 
  1961  0199                     	;# 
  1962  019A                     	;# 
  1963  019A                     	;# 
  1964  019A                     	;# 
  1965  019B                     	;# 
  1966  019B                     	;# 
  1967  019B                     	;# 
  1968  019B                     	;# 
  1969  019B                     	;# 
  1970  019C                     	;# 
  1971  019C                     	;# 
  1972  019C                     	;# 
  1973  019D                     	;# 
  1974  019D                     	;# 
  1975  019D                     	;# 
  1976  019E                     	;# 
  1977  019E                     	;# 
  1978  019E                     	;# 
  1979  019F                     	;# 
  1980  019F                     	;# 
  1981  019F                     	;# 
  1982  020D                     	;# 
  1983  020F                     	;# 
  1984  0210                     	;# 
  1985  0211                     	;# 
  1986  0211                     	;# 
  1987  0212                     	;# 
  1988  0212                     	;# 
  1989  0213                     	;# 
  1990  0213                     	;# 
  1991  0214                     	;# 
  1992  0214                     	;# 
  1993  0215                     	;# 
  1994  0215                     	;# 
  1995  0215                     	;# 
  1996  0216                     	;# 
  1997  0216                     	;# 
  1998  0217                     	;# 
  1999  0217                     	;# 
  2000  0219                     	;# 
  2001  021A                     	;# 
  2002  021B                     	;# 
  2003  021C                     	;# 
  2004  021D                     	;# 
  2005  021E                     	;# 
  2006  021F                     	;# 
  2007  028C                     	;# 
  2008  028D                     	;# 
  2009  0291                     	;# 
  2010  0291                     	;# 
  2011  0292                     	;# 
  2012  0293                     	;# 
  2013  0298                     	;# 
  2014  0298                     	;# 
  2015  0299                     	;# 
  2016  029A                     	;# 
  2017  029D                     	;# 
  2018  029E                     	;# 
  2019  029F                     	;# 
  2020  030C                     	;# 
  2021  030D                     	;# 
  2022  0311                     	;# 
  2023  0311                     	;# 
  2024  0312                     	;# 
  2025  0313                     	;# 
  2026  0318                     	;# 
  2027  0318                     	;# 
  2028  0319                     	;# 
  2029  031A                     	;# 
  2030  031C                     	;# 
  2031  031C                     	;# 
  2032  031D                     	;# 
  2033  031E                     	;# 
  2034  038C                     	;# 
  2035  038D                     	;# 
  2036  0394                     	;# 
  2037  0395                     	;# 
  2038  0396                     	;# 
  2039  040C                     	;# 
  2040  040D                     	;# 
  2041  0411                     	;# 
  2042  0411                     	;# 
  2043  0412                     	;# 
  2044  0413                     	;# 
  2045  0414                     	;# 
  2046  0415                     	;# 
  2047  0416                     	;# 
  2048  0417                     	;# 
  2049  0418                     	;# 
  2050  0418                     	;# 
  2051  0419                     	;# 
  2052  041A                     	;# 
  2053  041B                     	;# 
  2054  041C                     	;# 
  2055  041D                     	;# 
  2056  041E                     	;# 
  2057  048D                     	;# 
  2058  0491                     	;# 
  2059  0491                     	;# 
  2060  0492                     	;# 
  2061  0492                     	;# 
  2062  0493                     	;# 
  2063  0493                     	;# 
  2064  0493                     	;# 
  2065  0494                     	;# 
  2066  0494                     	;# 
  2067  0495                     	;# 
  2068  0495                     	;# 
  2069  0496                     	;# 
  2070  0496                     	;# 
  2071  0497                     	;# 
  2072  0497                     	;# 
  2073  0595                     	;# 
  2074  0596                     	;# 
  2075  0597                     	;# 
  2076  059C                     	;# 
  2077  059D                     	;# 
  2078  059E                     	;# 
  2079  0611                     	;# 
  2080  0611                     	;# 
  2081  0612                     	;# 
  2082  0613                     	;# 
  2083  0614                     	;# 
  2084  0614                     	;# 
  2085  0615                     	;# 
  2086  0616                     	;# 
  2087  0617                     	;# 
  2088  0617                     	;# 
  2089  0618                     	;# 
  2090  0619                     	;# 
  2091  061A                     	;# 
  2092  061A                     	;# 
  2093  061B                     	;# 
  2094  061C                     	;# 
  2095  061D                     	;# 
  2096  061D                     	;# 
  2097  061E                     	;# 
  2098  061F                     	;# 
  2099  0FE4                     	;# 
  2100  0FE5                     	;# 
  2101  0FE6                     	;# 
  2102  0FE7                     	;# 
  2103  0FE8                     	;# 
  2104  0FE9                     	;# 
  2105  0FEA                     	;# 
  2106  0FEB                     	;# 
  2107  0FED                     	;# 
  2108  0FEE                     	;# 
  2109  0FEF                     	;# 
  2110  0000                     	;# 
  2111  0001                     	;# 
  2112  0002                     	;# 
  2113  0003                     	;# 
  2114  0004                     	;# 
  2115  0005                     	;# 
  2116  0006                     	;# 
  2117  0007                     	;# 
  2118  0008                     	;# 
  2119  0009                     	;# 
  2120  000A                     	;# 
  2121  000B                     	;# 
  2122  000C                     	;# 
  2123  000D                     	;# 
  2124  000E                     	;# 
  2125  000F                     	;# 
  2126  0010                     	;# 
  2127  0011                     	;# 
  2128  0012                     	;# 
  2129  0013                     	;# 
  2130  0014                     	;# 
  2131  0015                     	;# 
  2132  0016                     	;# 
  2133  0016                     	;# 
  2134  0017                     	;# 
  2135  0018                     	;# 
  2136  0019                     	;# 
  2137  001A                     	;# 
  2138  001B                     	;# 
  2139  001C                     	;# 
  2140  008C                     	;# 
  2141  008D                     	;# 
  2142  008E                     	;# 
  2143  008F                     	;# 
  2144  0090                     	;# 
  2145  0091                     	;# 
  2146  0092                     	;# 
  2147  0093                     	;# 
  2148  0094                     	;# 
  2149  0095                     	;# 
  2150  0096                     	;# 
  2151  0097                     	;# 
  2152  0099                     	;# 
  2153  009A                     	;# 
  2154  009B                     	;# 
  2155  009B                     	;# 
  2156  009C                     	;# 
  2157  009D                     	;# 
  2158  009E                     	;# 
  2159  010C                     	;# 
  2160  010D                     	;# 
  2161  010E                     	;# 
  2162  010F                     	;# 
  2163  0110                     	;# 
  2164  0116                     	;# 
  2165  0117                     	;# 
  2166  011D                     	;# 
  2167  018C                     	;# 
  2168  018D                     	;# 
  2169  018F                     	;# 
  2170  0190                     	;# 
  2171  0191                     	;# 
  2172  0191                     	;# 
  2173  0192                     	;# 
  2174  0193                     	;# 
  2175  0193                     	;# 
  2176  0194                     	;# 
  2177  0195                     	;# 
  2178  0196                     	;# 
  2179  0197                     	;# 
  2180  0199                     	;# 
  2181  0199                     	;# 
  2182  0199                     	;# 
  2183  019A                     	;# 
  2184  019A                     	;# 
  2185  019A                     	;# 
  2186  019B                     	;# 
  2187  019B                     	;# 
  2188  019B                     	;# 
  2189  019B                     	;# 
  2190  019B                     	;# 
  2191  019C                     	;# 
  2192  019C                     	;# 
  2193  019C                     	;# 
  2194  019D                     	;# 
  2195  019D                     	;# 
  2196  019D                     	;# 
  2197  019E                     	;# 
  2198  019E                     	;# 
  2199  019E                     	;# 
  2200  019F                     	;# 
  2201  019F                     	;# 
  2202  019F                     	;# 
  2203  020D                     	;# 
  2204  020F                     	;# 
  2205  0210                     	;# 
  2206  0211                     	;# 
  2207  0211                     	;# 
  2208  0212                     	;# 
  2209  0212                     	;# 
  2210  0213                     	;# 
  2211  0213                     	;# 
  2212  0214                     	;# 
  2213  0214                     	;# 
  2214  0215                     	;# 
  2215  0215                     	;# 
  2216  0215                     	;# 
  2217  0216                     	;# 
  2218  0216                     	;# 
  2219  0217                     	;# 
  2220  0217                     	;# 
  2221  0219                     	;# 
  2222  021A                     	;# 
  2223  021B                     	;# 
  2224  021C                     	;# 
  2225  021D                     	;# 
  2226  021E                     	;# 
  2227  021F                     	;# 
  2228  028C                     	;# 
  2229  028D                     	;# 
  2230  0291                     	;# 
  2231  0291                     	;# 
  2232  0292                     	;# 
  2233  0293                     	;# 
  2234  0298                     	;# 
  2235  0298                     	;# 
  2236  0299                     	;# 
  2237  029A                     	;# 
  2238  029D                     	;# 
  2239  029E                     	;# 
  2240  029F                     	;# 
  2241  030C                     	;# 
  2242  030D                     	;# 
  2243  0311                     	;# 
  2244  0311                     	;# 
  2245  0312                     	;# 
  2246  0313                     	;# 
  2247  0318                     	;# 
  2248  0318                     	;# 
  2249  0319                     	;# 
  2250  031A                     	;# 
  2251  031C                     	;# 
  2252  031C                     	;# 
  2253  031D                     	;# 
  2254  031E                     	;# 
  2255  038C                     	;# 
  2256  038D                     	;# 
  2257  0394                     	;# 
  2258  0395                     	;# 
  2259  0396                     	;# 
  2260  040C                     	;# 
  2261  040D                     	;# 
  2262  0411                     	;# 
  2263  0411                     	;# 
  2264  0412                     	;# 
  2265  0413                     	;# 
  2266  0414                     	;# 
  2267  0415                     	;# 
  2268  0416                     	;# 
  2269  0417                     	;# 
  2270  0418                     	;# 
  2271  0418                     	;# 
  2272  0419                     	;# 
  2273  041A                     	;# 
  2274  041B                     	;# 
  2275  041C                     	;# 
  2276  041D                     	;# 
  2277  041E                     	;# 
  2278  048D                     	;# 
  2279  0491                     	;# 
  2280  0491                     	;# 
  2281  0492                     	;# 
  2282  0492                     	;# 
  2283  0493                     	;# 
  2284  0493                     	;# 
  2285  0493                     	;# 
  2286  0494                     	;# 
  2287  0494                     	;# 
  2288  0495                     	;# 
  2289  0495                     	;# 
  2290  0496                     	;# 
  2291  0496                     	;# 
  2292  0497                     	;# 
  2293  0497                     	;# 
  2294  0595                     	;# 
  2295  0596                     	;# 
  2296  0597                     	;# 
  2297  059C                     	;# 
  2298  059D                     	;# 
  2299  059E                     	;# 
  2300  0611                     	;# 
  2301  0611                     	;# 
  2302  0612                     	;# 
  2303  0613                     	;# 
  2304  0614                     	;# 
  2305  0614                     	;# 
  2306  0615                     	;# 
  2307  0616                     	;# 
  2308  0617                     	;# 
  2309  0617                     	;# 
  2310  0618                     	;# 
  2311  0619                     	;# 
  2312  061A                     	;# 
  2313  061A                     	;# 
  2314  061B                     	;# 
  2315  061C                     	;# 
  2316  061D                     	;# 
  2317  061D                     	;# 
  2318  061E                     	;# 
  2319  061F                     	;# 
  2320  0FE4                     	;# 
  2321  0FE5                     	;# 
  2322  0FE6                     	;# 
  2323  0FE7                     	;# 
  2324  0FE8                     	;# 
  2325  0FE9                     	;# 
  2326  0FEA                     	;# 
  2327  0FEB                     	;# 
  2328  0FED                     	;# 
  2329  0FEE                     	;# 
  2330  0FEF                     	;# 
  2331  0000                     	;# 
  2332  0001                     	;# 
  2333  0002                     	;# 
  2334  0003                     	;# 
  2335  0004                     	;# 
  2336  0005                     	;# 
  2337  0006                     	;# 
  2338  0007                     	;# 
  2339  0008                     	;# 
  2340  0009                     	;# 
  2341  000A                     	;# 
  2342  000B                     	;# 
  2343  000C                     	;# 
  2344  000D                     	;# 
  2345  000E                     	;# 
  2346  000F                     	;# 
  2347  0010                     	;# 
  2348  0011                     	;# 
  2349  0012                     	;# 
  2350  0013                     	;# 
  2351  0014                     	;# 
  2352  0015                     	;# 
  2353  0016                     	;# 
  2354  0016                     	;# 
  2355  0017                     	;# 
  2356  0018                     	;# 
  2357  0019                     	;# 
  2358  001A                     	;# 
  2359  001B                     	;# 
  2360  001C                     	;# 
  2361  008C                     	;# 
  2362  008D                     	;# 
  2363  008E                     	;# 
  2364  008F                     	;# 
  2365  0090                     	;# 
  2366  0091                     	;# 
  2367  0092                     	;# 
  2368  0093                     	;# 
  2369  0094                     	;# 
  2370  0095                     	;# 
  2371  0096                     	;# 
  2372  0097                     	;# 
  2373  0099                     	;# 
  2374  009A                     	;# 
  2375  009B                     	;# 
  2376  009B                     	;# 
  2377  009C                     	;# 
  2378  009D                     	;# 
  2379  009E                     	;# 
  2380  010C                     	;# 
  2381  010D                     	;# 
  2382  010E                     	;# 
  2383  010F                     	;# 
  2384  0110                     	;# 
  2385  0116                     	;# 
  2386  0117                     	;# 
  2387  011D                     	;# 
  2388  018C                     	;# 
  2389  018D                     	;# 
  2390  018F                     	;# 
  2391  0190                     	;# 
  2392  0191                     	;# 
  2393  0191                     	;# 
  2394  0192                     	;# 
  2395  0193                     	;# 
  2396  0193                     	;# 
  2397  0194                     	;# 
  2398  0195                     	;# 
  2399  0196                     	;# 
  2400  0197                     	;# 
  2401  0199                     	;# 
  2402  0199                     	;# 
  2403  0199                     	;# 
  2404  019A                     	;# 
  2405  019A                     	;# 
  2406  019A                     	;# 
  2407  019B                     	;# 
  2408  019B                     	;# 
  2409  019B                     	;# 
  2410  019B                     	;# 
  2411  019B                     	;# 
  2412  019C                     	;# 
  2413  019C                     	;# 
  2414  019C                     	;# 
  2415  019D                     	;# 
  2416  019D                     	;# 
  2417  019D                     	;# 
  2418  019E                     	;# 
  2419  019E                     	;# 
  2420  019E                     	;# 
  2421  019F                     	;# 
  2422  019F                     	;# 
  2423  019F                     	;# 
  2424  020D                     	;# 
  2425  020F                     	;# 
  2426  0210                     	;# 
  2427  0211                     	;# 
  2428  0211                     	;# 
  2429  0212                     	;# 
  2430  0212                     	;# 
  2431  0213                     	;# 
  2432  0213                     	;# 
  2433  0214                     	;# 
  2434  0214                     	;# 
  2435  0215                     	;# 
  2436  0215                     	;# 
  2437  0215                     	;# 
  2438  0216                     	;# 
  2439  0216                     	;# 
  2440  0217                     	;# 
  2441  0217                     	;# 
  2442  0219                     	;# 
  2443  021A                     	;# 
  2444  021B                     	;# 
  2445  021C                     	;# 
  2446  021D                     	;# 
  2447  021E                     	;# 
  2448  021F                     	;# 
  2449  028C                     	;# 
  2450  028D                     	;# 
  2451  0291                     	;# 
  2452  0291                     	;# 
  2453  0292                     	;# 
  2454  0293                     	;# 
  2455  0298                     	;# 
  2456  0298                     	;# 
  2457  0299                     	;# 
  2458  029A                     	;# 
  2459  029D                     	;# 
  2460  029E                     	;# 
  2461  029F                     	;# 
  2462  030C                     	;# 
  2463  030D                     	;# 
  2464  0311                     	;# 
  2465  0311                     	;# 
  2466  0312                     	;# 
  2467  0313                     	;# 
  2468  0318                     	;# 
  2469  0318                     	;# 
  2470  0319                     	;# 
  2471  031A                     	;# 
  2472  031C                     	;# 
  2473  031C                     	;# 
  2474  031D                     	;# 
  2475  031E                     	;# 
  2476  038C                     	;# 
  2477  038D                     	;# 
  2478  0394                     	;# 
  2479  0395                     	;# 
  2480  0396                     	;# 
  2481  040C                     	;# 
  2482  040D                     	;# 
  2483  0411                     	;# 
  2484  0411                     	;# 
  2485  0412                     	;# 
  2486  0413                     	;# 
  2487  0414                     	;# 
  2488  0415                     	;# 
  2489  0416                     	;# 
  2490  0417                     	;# 
  2491  0418                     	;# 
  2492  0418                     	;# 
  2493  0419                     	;# 
  2494  041A                     	;# 
  2495  041B                     	;# 
  2496  041C                     	;# 
  2497  041D                     	;# 
  2498  041E                     	;# 
  2499  048D                     	;# 
  2500  0491                     	;# 
  2501  0491                     	;# 
  2502  0492                     	;# 
  2503  0492                     	;# 
  2504  0493                     	;# 
  2505  0493                     	;# 
  2506  0493                     	;# 
  2507  0494                     	;# 
  2508  0494                     	;# 
  2509  0495                     	;# 
  2510  0495                     	;# 
  2511  0496                     	;# 
  2512  0496                     	;# 
  2513  0497                     	;# 
  2514  0497                     	;# 
  2515  0595                     	;# 
  2516  0596                     	;# 
  2517  0597                     	;# 
  2518  059C                     	;# 
  2519  059D                     	;# 
  2520  059E                     	;# 
  2521  0611                     	;# 
  2522  0611                     	;# 
  2523  0612                     	;# 
  2524  0613                     	;# 
  2525  0614                     	;# 
  2526  0614                     	;# 
  2527  0615                     	;# 
  2528  0616                     	;# 
  2529  0617                     	;# 
  2530  0617                     	;# 
  2531  0618                     	;# 
  2532  0619                     	;# 
  2533  061A                     	;# 
  2534  061A                     	;# 
  2535  061B                     	;# 
  2536  061C                     	;# 
  2537  061D                     	;# 
  2538  061D                     	;# 
  2539  061E                     	;# 
  2540  061F                     	;# 
  2541  0FE4                     	;# 
  2542  0FE5                     	;# 
  2543  0FE6                     	;# 
  2544  0FE7                     	;# 
  2545  0FE8                     	;# 
  2546  0FE9                     	;# 
  2547  0FEA                     	;# 
  2548  0FEB                     	;# 
  2549  0FED                     	;# 
  2550  0FEE                     	;# 
  2551  0FEF                     	;# 
  2552  0000                     	;# 
  2553  0001                     	;# 
  2554  0002                     	;# 
  2555  0003                     	;# 
  2556  0004                     	;# 
  2557  0005                     	;# 
  2558  0006                     	;# 
  2559  0007                     	;# 
  2560  0008                     	;# 
  2561  0009                     	;# 
  2562  000A                     	;# 
  2563  000B                     	;# 
  2564  000C                     	;# 
  2565  000D                     	;# 
  2566  000E                     	;# 
  2567  000F                     	;# 
  2568  0010                     	;# 
  2569  0011                     	;# 
  2570  0012                     	;# 
  2571  0013                     	;# 
  2572  0014                     	;# 
  2573  0015                     	;# 
  2574  0016                     	;# 
  2575  0016                     	;# 
  2576  0017                     	;# 
  2577  0018                     	;# 
  2578  0019                     	;# 
  2579  001A                     	;# 
  2580  001B                     	;# 
  2581  001C                     	;# 
  2582  008C                     	;# 
  2583  008D                     	;# 
  2584  008E                     	;# 
  2585  008F                     	;# 
  2586  0090                     	;# 
  2587  0091                     	;# 
  2588  0092                     	;# 
  2589  0093                     	;# 
  2590  0094                     	;# 
  2591  0095                     	;# 
  2592  0096                     	;# 
  2593  0097                     	;# 
  2594  0099                     	;# 
  2595  009A                     	;# 
  2596  009B                     	;# 
  2597  009B                     	;# 
  2598  009C                     	;# 
  2599  009D                     	;# 
  2600  009E                     	;# 
  2601  010C                     	;# 
  2602  010D                     	;# 
  2603  010E                     	;# 
  2604  010F                     	;# 
  2605  0110                     	;# 
  2606  0116                     	;# 
  2607  0117                     	;# 
  2608  011D                     	;# 
  2609  018C                     	;# 
  2610  018D                     	;# 
  2611  018F                     	;# 
  2612  0190                     	;# 
  2613  0191                     	;# 
  2614  0191                     	;# 
  2615  0192                     	;# 
  2616  0193                     	;# 
  2617  0193                     	;# 
  2618  0194                     	;# 
  2619  0195                     	;# 
  2620  0196                     	;# 
  2621  0197                     	;# 
  2622  0199                     	;# 
  2623  0199                     	;# 
  2624  0199                     	;# 
  2625  019A                     	;# 
  2626  019A                     	;# 
  2627  019A                     	;# 
  2628  019B                     	;# 
  2629  019B                     	;# 
  2630  019B                     	;# 
  2631  019B                     	;# 
  2632  019B                     	;# 
  2633  019C                     	;# 
  2634  019C                     	;# 
  2635  019C                     	;# 
  2636  019D                     	;# 
  2637  019D                     	;# 
  2638  019D                     	;# 
  2639  019E                     	;# 
  2640  019E                     	;# 
  2641  019E                     	;# 
  2642  019F                     	;# 
  2643  019F                     	;# 
  2644  019F                     	;# 
  2645  020D                     	;# 
  2646  020F                     	;# 
  2647  0210                     	;# 
  2648  0211                     	;# 
  2649  0211                     	;# 
  2650  0212                     	;# 
  2651  0212                     	;# 
  2652  0213                     	;# 
  2653  0213                     	;# 
  2654  0214                     	;# 
  2655  0214                     	;# 
  2656  0215                     	;# 
  2657  0215                     	;# 
  2658  0215                     	;# 
  2659  0216                     	;# 
  2660  0216                     	;# 
  2661  0217                     	;# 
  2662  0217                     	;# 
  2663  0219                     	;# 
  2664  021A                     	;# 
  2665  021B                     	;# 
  2666  021C                     	;# 
  2667  021D                     	;# 
  2668  021E                     	;# 
  2669  021F                     	;# 
  2670  028C                     	;# 
  2671  028D                     	;# 
  2672  0291                     	;# 
  2673  0291                     	;# 
  2674  0292                     	;# 
  2675  0293                     	;# 
  2676  0298                     	;# 
  2677  0298                     	;# 
  2678  0299                     	;# 
  2679  029A                     	;# 
  2680  029D                     	;# 
  2681  029E                     	;# 
  2682  029F                     	;# 
  2683  030C                     	;# 
  2684  030D                     	;# 
  2685  0311                     	;# 
  2686  0311                     	;# 
  2687  0312                     	;# 
  2688  0313                     	;# 
  2689  0318                     	;# 
  2690  0318                     	;# 
  2691  0319                     	;# 
  2692  031A                     	;# 
  2693  031C                     	;# 
  2694  031C                     	;# 
  2695  031D                     	;# 
  2696  031E                     	;# 
  2697  038C                     	;# 
  2698  038D                     	;# 
  2699  0394                     	;# 
  2700  0395                     	;# 
  2701  0396                     	;# 
  2702  040C                     	;# 
  2703  040D                     	;# 
  2704  0411                     	;# 
  2705  0411                     	;# 
  2706  0412                     	;# 
  2707  0413                     	;# 
  2708  0414                     	;# 
  2709  0415                     	;# 
  2710  0416                     	;# 
  2711  0417                     	;# 
  2712  0418                     	;# 
  2713  0418                     	;# 
  2714  0419                     	;# 
  2715  041A                     	;# 
  2716  041B                     	;# 
  2717  041C                     	;# 
  2718  041D                     	;# 
  2719  041E                     	;# 
  2720  048D                     	;# 
  2721  0491                     	;# 
  2722  0491                     	;# 
  2723  0492                     	;# 
  2724  0492                     	;# 
  2725  0493                     	;# 
  2726  0493                     	;# 
  2727  0493                     	;# 
  2728  0494                     	;# 
  2729  0494                     	;# 
  2730  0495                     	;# 
  2731  0495                     	;# 
  2732  0496                     	;# 
  2733  0496                     	;# 
  2734  0497                     	;# 
  2735  0497                     	;# 
  2736  0595                     	;# 
  2737  0596                     	;# 
  2738  0597                     	;# 
  2739  059C                     	;# 
  2740  059D                     	;# 
  2741  059E                     	;# 
  2742  0611                     	;# 
  2743  0611                     	;# 
  2744  0612                     	;# 
  2745  0613                     	;# 
  2746  0614                     	;# 
  2747  0614                     	;# 
  2748  0615                     	;# 
  2749  0616                     	;# 
  2750  0617                     	;# 
  2751  0617                     	;# 
  2752  0618                     	;# 
  2753  0619                     	;# 
  2754  061A                     	;# 
  2755  061A                     	;# 
  2756  061B                     	;# 
  2757  061C                     	;# 
  2758  061D                     	;# 
  2759  061D                     	;# 
  2760  061E                     	;# 
  2761  061F                     	;# 
  2762  0FE4                     	;# 
  2763  0FE5                     	;# 
  2764  0FE6                     	;# 
  2765  0FE7                     	;# 
  2766  0FE8                     	;# 
  2767  0FE9                     	;# 
  2768  0FEA                     	;# 
  2769  0FEB                     	;# 
  2770  0FED                     	;# 
  2771  0FEE                     	;# 
  2772  0FEF                     	;# 
  2773  0000                     	;# 
  2774  0001                     	;# 
  2775  0002                     	;# 
  2776  0003                     	;# 
  2777  0004                     	;# 
  2778  0005                     	;# 
  2779  0006                     	;# 
  2780  0007                     	;# 
  2781  0008                     	;# 
  2782  0009                     	;# 
  2783  000A                     	;# 
  2784  000B                     	;# 
  2785  000C                     	;# 
  2786  000D                     	;# 
  2787  000E                     	;# 
  2788  000F                     	;# 
  2789  0010                     	;# 
  2790  0011                     	;# 
  2791  0012                     	;# 
  2792  0013                     	;# 
  2793  0014                     	;# 
  2794  0015                     	;# 
  2795  0016                     	;# 
  2796  0016                     	;# 
  2797  0017                     	;# 
  2798  0018                     	;# 
  2799  0019                     	;# 
  2800  001A                     	;# 
  2801  001B                     	;# 
  2802  001C                     	;# 
  2803  008C                     	;# 
  2804  008D                     	;# 
  2805  008E                     	;# 
  2806  008F                     	;# 
  2807  0090                     	;# 
  2808  0091                     	;# 
  2809  0092                     	;# 
  2810  0093                     	;# 
  2811  0094                     	;# 
  2812  0095                     	;# 
  2813  0096                     	;# 
  2814  0097                     	;# 
  2815  0099                     	;# 
  2816  009A                     	;# 
  2817  009B                     	;# 
  2818  009B                     	;# 
  2819  009C                     	;# 
  2820  009D                     	;# 
  2821  009E                     	;# 
  2822  010C                     	;# 
  2823  010D                     	;# 
  2824  010E                     	;# 
  2825  010F                     	;# 
  2826  0110                     	;# 
  2827  0116                     	;# 
  2828  0117                     	;# 
  2829  011D                     	;# 
  2830  018C                     	;# 
  2831  018D                     	;# 
  2832  018F                     	;# 
  2833  0190                     	;# 
  2834  0191                     	;# 
  2835  0191                     	;# 
  2836  0192                     	;# 
  2837  0193                     	;# 
  2838  0193                     	;# 
  2839  0194                     	;# 
  2840  0195                     	;# 
  2841  0196                     	;# 
  2842  0197                     	;# 
  2843  0199                     	;# 
  2844  0199                     	;# 
  2845  0199                     	;# 
  2846  019A                     	;# 
  2847  019A                     	;# 
  2848  019A                     	;# 
  2849  019B                     	;# 
  2850  019B                     	;# 
  2851  019B                     	;# 
  2852  019B                     	;# 
  2853  019B                     	;# 
  2854  019C                     	;# 
  2855  019C                     	;# 
  2856  019C                     	;# 
  2857  019D                     	;# 
  2858  019D                     	;# 
  2859  019D                     	;# 
  2860  019E                     	;# 
  2861  019E                     	;# 
  2862  019E                     	;# 
  2863  019F                     	;# 
  2864  019F                     	;# 
  2865  019F                     	;# 
  2866  020D                     	;# 
  2867  020F                     	;# 
  2868  0210                     	;# 
  2869  0211                     	;# 
  2870  0211                     	;# 
  2871  0212                     	;# 
  2872  0212                     	;# 
  2873  0213                     	;# 
  2874  0213                     	;# 
  2875  0214                     	;# 
  2876  0214                     	;# 
  2877  0215                     	;# 
  2878  0215                     	;# 
  2879  0215                     	;# 
  2880  0216                     	;# 
  2881  0216                     	;# 
  2882  0217                     	;# 
  2883  0217                     	;# 
  2884  0219                     	;# 
  2885  021A                     	;# 
  2886  021B                     	;# 
  2887  021C                     	;# 
  2888  021D                     	;# 
  2889  021E                     	;# 
  2890  021F                     	;# 
  2891  028C                     	;# 
  2892  028D                     	;# 
  2893  0291                     	;# 
  2894  0291                     	;# 
  2895  0292                     	;# 
  2896  0293                     	;# 
  2897  0298                     	;# 
  2898  0298                     	;# 
  2899  0299                     	;# 
  2900  029A                     	;# 
  2901  029D                     	;# 
  2902  029E                     	;# 
  2903  029F                     	;# 
  2904  030C                     	;# 
  2905  030D                     	;# 
  2906  0311                     	;# 
  2907  0311                     	;# 
  2908  0312                     	;# 
  2909  0313                     	;# 
  2910  0318                     	;# 
  2911  0318                     	;# 
  2912  0319                     	;# 
  2913  031A                     	;# 
  2914  031C                     	;# 
  2915  031C                     	;# 
  2916  031D                     	;# 
  2917  031E                     	;# 
  2918  038C                     	;# 
  2919  038D                     	;# 
  2920  0394                     	;# 
  2921  0395                     	;# 
  2922  0396                     	;# 
  2923  040C                     	;# 
  2924  040D                     	;# 
  2925  0411                     	;# 
  2926  0411                     	;# 
  2927  0412                     	;# 
  2928  0413                     	;# 
  2929  0414                     	;# 
  2930  0415                     	;# 
  2931  0416                     	;# 
  2932  0417                     	;# 
  2933  0418                     	;# 
  2934  0418                     	;# 
  2935  0419                     	;# 
  2936  041A                     	;# 
  2937  041B                     	;# 
  2938  041C                     	;# 
  2939  041D                     	;# 
  2940  041E                     	;# 
  2941  048D                     	;# 
  2942  0491                     	;# 
  2943  0491                     	;# 
  2944  0492                     	;# 
  2945  0492                     	;# 
  2946  0493                     	;# 
  2947  0493                     	;# 
  2948  0493                     	;# 
  2949  0494                     	;# 
  2950  0494                     	;# 
  2951  0495                     	;# 
  2952  0495                     	;# 
  2953  0496                     	;# 
  2954  0496                     	;# 
  2955  0497                     	;# 
  2956  0497                     	;# 
  2957  0595                     	;# 
  2958  0596                     	;# 
  2959  0597                     	;# 
  2960  059C                     	;# 
  2961  059D                     	;# 
  2962  059E                     	;# 
  2963  0611                     	;# 
  2964  0611                     	;# 
  2965  0612                     	;# 
  2966  0613                     	;# 
  2967  0614                     	;# 
  2968  0614                     	;# 
  2969  0615                     	;# 
  2970  0616                     	;# 
  2971  0617                     	;# 
  2972  0617                     	;# 
  2973  0618                     	;# 
  2974  0619                     	;# 
  2975  061A                     	;# 
  2976  061A                     	;# 
  2977  061B                     	;# 
  2978  061C                     	;# 
  2979  061D                     	;# 
  2980  061D                     	;# 
  2981  061E                     	;# 
  2982  061F                     	;# 
  2983  0FE4                     	;# 
  2984  0FE5                     	;# 
  2985  0FE6                     	;# 
  2986  0FE7                     	;# 
  2987  0FE8                     	;# 
  2988  0FE9                     	;# 
  2989  0FEA                     	;# 
  2990  0FEB                     	;# 
  2991  0FED                     	;# 
  2992  0FEE                     	;# 
  2993  0FEF                     	;# 
  2994  0000                     	;# 
  2995  0001                     	;# 
  2996  0002                     	;# 
  2997  0003                     	;# 
  2998  0004                     	;# 
  2999  0005                     	;# 
  3000  0006                     	;# 
  3001  0007                     	;# 
  3002  0008                     	;# 
  3003  0009                     	;# 
  3004  000A                     	;# 
  3005  000B                     	;# 
  3006  000C                     	;# 
  3007  000D                     	;# 
  3008  000E                     	;# 
  3009  000F                     	;# 
  3010  0010                     	;# 
  3011  0011                     	;# 
  3012  0012                     	;# 
  3013  0013                     	;# 
  3014  0014                     	;# 
  3015  0015                     	;# 
  3016  0016                     	;# 
  3017  0016                     	;# 
  3018  0017                     	;# 
  3019  0018                     	;# 
  3020  0019                     	;# 
  3021  001A                     	;# 
  3022  001B                     	;# 
  3023  001C                     	;# 
  3024  008C                     	;# 
  3025  008D                     	;# 
  3026  008E                     	;# 
  3027  008F                     	;# 
  3028  0090                     	;# 
  3029  0091                     	;# 
  3030  0092                     	;# 
  3031  0093                     	;# 
  3032  0094                     	;# 
  3033  0095                     	;# 
  3034  0096                     	;# 
  3035  0097                     	;# 
  3036  0099                     	;# 
  3037  009A                     	;# 
  3038  009B                     	;# 
  3039  009B                     	;# 
  3040  009C                     	;# 
  3041  009D                     	;# 
  3042  009E                     	;# 
  3043  010C                     	;# 
  3044  010D                     	;# 
  3045  010E                     	;# 
  3046  010F                     	;# 
  3047  0110                     	;# 
  3048  0116                     	;# 
  3049  0117                     	;# 
  3050  011D                     	;# 
  3051  018C                     	;# 
  3052  018D                     	;# 
  3053  018F                     	;# 
  3054  0190                     	;# 
  3055  0191                     	;# 
  3056  0191                     	;# 
  3057  0192                     	;# 
  3058  0193                     	;# 
  3059  0193                     	;# 
  3060  0194                     	;# 
  3061  0195                     	;# 
  3062  0196                     	;# 
  3063  0197                     	;# 
  3064  0199                     	;# 
  3065  0199                     	;# 
  3066  0199                     	;# 
  3067  019A                     	;# 
  3068  019A                     	;# 
  3069  019A                     	;# 
  3070  019B                     	;# 
  3071  019B                     	;# 
  3072  019B                     	;# 
  3073  019B                     	;# 
  3074  019B                     	;# 
  3075  019C                     	;# 
  3076  019C                     	;# 
  3077  019C                     	;# 
  3078  019D                     	;# 
  3079  019D                     	;# 
  3080  019D                     	;# 
  3081  019E                     	;# 
  3082  019E                     	;# 
  3083  019E                     	;# 
  3084  019F                     	;# 
  3085  019F                     	;# 
  3086  019F                     	;# 
  3087  020D                     	;# 
  3088  020F                     	;# 
  3089  0210                     	;# 
  3090  0211                     	;# 
  3091  0211                     	;# 
  3092  0212                     	;# 
  3093  0212                     	;# 
  3094  0213                     	;# 
  3095  0213                     	;# 
  3096  0214                     	;# 
  3097  0214                     	;# 
  3098  0215                     	;# 
  3099  0215                     	;# 
  3100  0215                     	;# 
  3101  0216                     	;# 
  3102  0216                     	;# 
  3103  0217                     	;# 
  3104  0217                     	;# 
  3105  0219                     	;# 
  3106  021A                     	;# 
  3107  021B                     	;# 
  3108  021C                     	;# 
  3109  021D                     	;# 
  3110  021E                     	;# 
  3111  021F                     	;# 
  3112  028C                     	;# 
  3113  028D                     	;# 
  3114  0291                     	;# 
  3115  0291                     	;# 
  3116  0292                     	;# 
  3117  0293                     	;# 
  3118  0298                     	;# 
  3119  0298                     	;# 
  3120  0299                     	;# 
  3121  029A                     	;# 
  3122  029D                     	;# 
  3123  029E                     	;# 
  3124  029F                     	;# 
  3125  030C                     	;# 
  3126  030D                     	;# 
  3127  0311                     	;# 
  3128  0311                     	;# 
  3129  0312                     	;# 
  3130  0313                     	;# 
  3131  0318                     	;# 
  3132  0318                     	;# 
  3133  0319                     	;# 
  3134  031A                     	;# 
  3135  031C                     	;# 
  3136  031C                     	;# 
  3137  031D                     	;# 
  3138  031E                     	;# 
  3139  038C                     	;# 
  3140  038D                     	;# 
  3141  0394                     	;# 
  3142  0395                     	;# 
  3143  0396                     	;# 
  3144  040C                     	;# 
  3145  040D                     	;# 
  3146  0411                     	;# 
  3147  0411                     	;# 
  3148  0412                     	;# 
  3149  0413                     	;# 
  3150  0414                     	;# 
  3151  0415                     	;# 
  3152  0416                     	;# 
  3153  0417                     	;# 
  3154  0418                     	;# 
  3155  0418                     	;# 
  3156  0419                     	;# 
  3157  041A                     	;# 
  3158  041B                     	;# 
  3159  041C                     	;# 
  3160  041D                     	;# 
  3161  041E                     	;# 
  3162  048D                     	;# 
  3163  0491                     	;# 
  3164  0491                     	;# 
  3165  0492                     	;# 
  3166  0492                     	;# 
  3167  0493                     	;# 
  3168  0493                     	;# 
  3169  0493                     	;# 
  3170  0494                     	;# 
  3171  0494                     	;# 
  3172  0495                     	;# 
  3173  0495                     	;# 
  3174  0496                     	;# 
  3175  0496                     	;# 
  3176  0497                     	;# 
  3177  0497                     	;# 
  3178  0595                     	;# 
  3179  0596                     	;# 
  3180  0597                     	;# 
  3181  059C                     	;# 
  3182  059D                     	;# 
  3183  059E                     	;# 
  3184  0611                     	;# 
  3185  0611                     	;# 
  3186  0612                     	;# 
  3187  0613                     	;# 
  3188  0614                     	;# 
  3189  0614                     	;# 
  3190  0615                     	;# 
  3191  0616                     	;# 
  3192  0617                     	;# 
  3193  0617                     	;# 
  3194  0618                     	;# 
  3195  0619                     	;# 
  3196  061A                     	;# 
  3197  061A                     	;# 
  3198  061B                     	;# 
  3199  061C                     	;# 
  3200  061D                     	;# 
  3201  061D                     	;# 
  3202  061E                     	;# 
  3203  061F                     	;# 
  3204  0FE4                     	;# 
  3205  0FE5                     	;# 
  3206  0FE6                     	;# 
  3207  0FE7                     	;# 
  3208  0FE8                     	;# 
  3209  0FE9                     	;# 
  3210  0FEA                     	;# 
  3211  0FEB                     	;# 
  3212  0FED                     	;# 
  3213  0FEE                     	;# 
  3214  0FEF                     	;# 
  3215  0000                     	;# 
  3216  0001                     	;# 
  3217  0002                     	;# 
  3218  0003                     	;# 
  3219  0004                     	;# 
  3220  0005                     	;# 
  3221  0006                     	;# 
  3222  0007                     	;# 
  3223  0008                     	;# 
  3224  0009                     	;# 
  3225  000A                     	;# 
  3226  000B                     	;# 
  3227  000C                     	;# 
  3228  000D                     	;# 
  3229  000E                     	;# 
  3230  000F                     	;# 
  3231  0010                     	;# 
  3232  0011                     	;# 
  3233  0012                     	;# 
  3234  0013                     	;# 
  3235  0014                     	;# 
  3236  0015                     	;# 
  3237  0016                     	;# 
  3238  0016                     	;# 
  3239  0017                     	;# 
  3240  0018                     	;# 
  3241  0019                     	;# 
  3242  001A                     	;# 
  3243  001B                     	;# 
  3244  001C                     	;# 
  3245  008C                     	;# 
  3246  008D                     	;# 
  3247  008E                     	;# 
  3248  008F                     	;# 
  3249  0090                     	;# 
  3250  0091                     	;# 
  3251  0092                     	;# 
  3252  0093                     	;# 
  3253  0094                     	;# 
  3254  0095                     	;# 
  3255  0096                     	;# 
  3256  0097                     	;# 
  3257  0099                     	;# 
  3258  009A                     	;# 
  3259  009B                     	;# 
  3260  009B                     	;# 
  3261  009C                     	;# 
  3262  009D                     	;# 
  3263  009E                     	;# 
  3264  010C                     	;# 
  3265  010D                     	;# 
  3266  010E                     	;# 
  3267  010F                     	;# 
  3268  0110                     	;# 
  3269  0116                     	;# 
  3270  0117                     	;# 
  3271  011D                     	;# 
  3272  018C                     	;# 
  3273  018D                     	;# 
  3274  018F                     	;# 
  3275  0190                     	;# 
  3276  0191                     	;# 
  3277  0191                     	;# 
  3278  0192                     	;# 
  3279  0193                     	;# 
  3280  0193                     	;# 
  3281  0194                     	;# 
  3282  0195                     	;# 
  3283  0196                     	;# 
  3284  0197                     	;# 
  3285  0199                     	;# 
  3286  0199                     	;# 
  3287  0199                     	;# 
  3288  019A                     	;# 
  3289  019A                     	;# 
  3290  019A                     	;# 
  3291  019B                     	;# 
  3292  019B                     	;# 
  3293  019B                     	;# 
  3294  019B                     	;# 
  3295  019B                     	;# 
  3296  019C                     	;# 
  3297  019C                     	;# 
  3298  019C                     	;# 
  3299  019D                     	;# 
  3300  019D                     	;# 
  3301  019D                     	;# 
  3302  019E                     	;# 
  3303  019E                     	;# 
  3304  019E                     	;# 
  3305  019F                     	;# 
  3306  019F                     	;# 
  3307  019F                     	;# 
  3308  020D                     	;# 
  3309  020F                     	;# 
  3310  0210                     	;# 
  3311  0211                     	;# 
  3312  0211                     	;# 
  3313  0212                     	;# 
  3314  0212                     	;# 
  3315  0213                     	;# 
  3316  0213                     	;# 
  3317  0214                     	;# 
  3318  0214                     	;# 
  3319  0215                     	;# 
  3320  0215                     	;# 
  3321  0215                     	;# 
  3322  0216                     	;# 
  3323  0216                     	;# 
  3324  0217                     	;# 
  3325  0217                     	;# 
  3326  0219                     	;# 
  3327  021A                     	;# 
  3328  021B                     	;# 
  3329  021C                     	;# 
  3330  021D                     	;# 
  3331  021E                     	;# 
  3332  021F                     	;# 
  3333  028C                     	;# 
  3334  028D                     	;# 
  3335  0291                     	;# 
  3336  0291                     	;# 
  3337  0292                     	;# 
  3338  0293                     	;# 
  3339  0298                     	;# 
  3340  0298                     	;# 
  3341  0299                     	;# 
  3342  029A                     	;# 
  3343  029D                     	;# 
  3344  029E                     	;# 
  3345  029F                     	;# 
  3346  030C                     	;# 
  3347  030D                     	;# 
  3348  0311                     	;# 
  3349  0311                     	;# 
  3350  0312                     	;# 
  3351  0313                     	;# 
  3352  0318                     	;# 
  3353  0318                     	;# 
  3354  0319                     	;# 
  3355  031A                     	;# 
  3356  031C                     	;# 
  3357  031C                     	;# 
  3358  031D                     	;# 
  3359  031E                     	;# 
  3360  038C                     	;# 
  3361  038D                     	;# 
  3362  0394                     	;# 
  3363  0395                     	;# 
  3364  0396                     	;# 
  3365  040C                     	;# 
  3366  040D                     	;# 
  3367  0411                     	;# 
  3368  0411                     	;# 
  3369  0412                     	;# 
  3370  0413                     	;# 
  3371  0414                     	;# 
  3372  0415                     	;# 
  3373  0416                     	;# 
  3374  0417                     	;# 
  3375  0418                     	;# 
  3376  0418                     	;# 
  3377  0419                     	;# 
  3378  041A                     	;# 
  3379  041B                     	;# 
  3380  041C                     	;# 
  3381  041D                     	;# 
  3382  041E                     	;# 
  3383  048D                     	;# 
  3384  0491                     	;# 
  3385  0491                     	;# 
  3386  0492                     	;# 
  3387  0492                     	;# 
  3388  0493                     	;# 
  3389  0493                     	;# 
  3390  0493                     	;# 
  3391  0494                     	;# 
  3392  0494                     	;# 
  3393  0495                     	;# 
  3394  0495                     	;# 
  3395  0496                     	;# 
  3396  0496                     	;# 
  3397  0497                     	;# 
  3398  0497                     	;# 
  3399  0595                     	;# 
  3400  0596                     	;# 
  3401  0597                     	;# 
  3402  059C                     	;# 
  3403  059D                     	;# 
  3404  059E                     	;# 
  3405  0611                     	;# 
  3406  0611                     	;# 
  3407  0612                     	;# 
  3408  0613                     	;# 
  3409  0614                     	;# 
  3410  0614                     	;# 
  3411  0615                     	;# 
  3412  0616                     	;# 
  3413  0617                     	;# 
  3414  0617                     	;# 
  3415  0618                     	;# 
  3416  0619                     	;# 
  3417  061A                     	;# 
  3418  061A                     	;# 
  3419  061B                     	;# 
  3420  061C                     	;# 
  3421  061D                     	;# 
  3422  061D                     	;# 
  3423  061E                     	;# 
  3424  061F                     	;# 
  3425  0FE4                     	;# 
  3426  0FE5                     	;# 
  3427  0FE6                     	;# 
  3428  0FE7                     	;# 
  3429  0FE8                     	;# 
  3430  0FE9                     	;# 
  3431  0FEA                     	;# 
  3432  0FEB                     	;# 
  3433  0FED                     	;# 
  3434  0FEE                     	;# 
  3435  0FEF                     	;_modArray
  3436                           
  3437                           	psect	idataBANK0
  3438  2CEF                     __pidataBANK0:	
  3439                           
  3440                           ;initializer for _baseline_mod_time
  3441  2CEF  34D0               	retlw	208
  3442  2CF0  3407               	retlw	7
  3443  2CF1  3400               	retlw	0
  3444  2CF2  3400               	retlw	0
  3445                           
  3446                           ;initializer for _delay_time
  3447  2CF3  34D0               	retlw	208
  3448  2CF4  3407               	retlw	7
  3449  2CF5  3400               	retlw	0
  3450  2CF6  3400               	retlw	0
  3451                           
  3452                           ;initializer for _long_press_limit
  3453  2CF7  34E8               	retlw	232
  3454  2CF8  3403               	retlw	3
  3455                           
  3456                           ;initializer for _top_push_state
  3457  2CF9  3406               	retlw	6
  3458  2CFA  3400               	retlw	0
  3459                           
  3460                           ;initializer for _blink_rate
  3461  2CFB  3414               	retlw	20
  3462                           
  3463                           ;initializer for _longTap_state
  3464  2CFC  34FF               	retlw	255
  3465                           
  3466                           ;initializer for _num_taps
  3467  2CFD  3404               	retlw	4
  3468                           
  3469                           ;initializer for _presetChannel
  3470  2CFE  3401               	retlw	1
  3471                           
  3472                           ;initializer for _switchBypass_state
  3473  2CFF  34FF               	retlw	255
  3474                           
  3475                           	psect	idataBANK3
  3476  2DB3                     __pidataBANK3:	
  3477                           
  3478                           ;initializer for _bottom_push_state
  3479  2DB3  3401               	retlw	1
  3480  2DB4  3400               	retlw	0
  3481                           
  3482                           ;initializer for _knob1_prev
  3483  2DB5  34D0               	retlw	208
  3484  2DB6  3407               	retlw	7
  3485                           
  3486                           ;initializer for _knob2_prev
  3487  2DB7  34D0               	retlw	208
  3488  2DB8  3407               	retlw	7
  3489                           
  3490                           ;initializer for _knob3_prev
  3491  2DB9  34D0               	retlw	208
  3492  2DBA  3407               	retlw	7
  3493                           
  3494                           ;initializer for _knob4_prev
  3495  2DBB  34D0               	retlw	208
  3496  2DBC  3407               	retlw	7
  3497                           
  3498                           ;initializer for _knob5_prev
  3499  2DBD  34D0               	retlw	208
  3500  2DBE  3407               	retlw	7
  3501                           
  3502                           ;initializer for _mod_counter
  3503  2DBF  3401               	retlw	1
  3504  2DC0  3400               	retlw	0
  3505                           
  3506                           ;initializer for _mod_delay_time
  3507  2DC1  34D0               	retlw	208
  3508  2DC2  3407               	retlw	7
  3509                           
  3510                           ;initializer for _symmetry
  3511  2DC3  34B4               	retlw	180
  3512  2DC4  3400               	retlw	0
  3513                           
  3514                           ;initializer for _tap_iteration
  3515  2DC5  3401               	retlw	1
  3516  2DC6  3400               	retlw	0
  3517                           
  3518                           ;initializer for _blink_state
  3519  2DC7  3401               	retlw	1
  3520                           
  3521                           ;initializer for _currentBypassState
  3522  2DC8  34FF               	retlw	255
  3523                           
  3524                           ;initializer for _expSwitchState
  3525  2DC9  34FF               	retlw	255
  3526                           
  3527                           ;initializer for _expressModeCnst
  3528  2DCA  3402               	retlw	2
  3529                           
  3530                           ;initializer for _expressionChannel
  3531  2DCB  3401               	retlw	1
  3532                           
  3533                           ;initializer for _mod_time_changed
  3534  2DCC  3401               	retlw	1
  3535                           
  3536                           ;initializer for _presetModeCnst
  3537  2DCD  3401               	retlw	1
  3538                           
  3539                           ;initializer for _switchTap_state
  3540  2DCE  34FF               	retlw	255
  3541                           
  3542                           	psect	idataBANK4
  3543  2CA8                     __pidataBANK4:	
  3544                           
  3545                           ;initializer for _blink_delay
  3546  2CA8  3464               	retlw	100
  3547  2CA9  3400               	retlw	0
  3548                           
  3549                           ;initializer for _switchBypass_up
  3550  2CAA  3401               	retlw	1
  3551  2CAB  3400               	retlw	0
  3552                           
  3553                           	psect	stringtext
  3554  2800                     __pstringtext:	
  3555  2800                     exp@coeff:	
  3556  2800  3400               	retlw	0
  3557  2801  3480               	retlw	128
  3558  2802  343F               	retlw	63
  3559  2803  3472               	retlw	114
  3560  2804  3431               	retlw	49
  3561  2805  343F               	retlw	63
  3562  2806  34FE               	retlw	254
  3563  2807  3475               	retlw	117
  3564  2808  343E               	retlw	62
  3565  2809  3458               	retlw	88
  3566  280A  3463               	retlw	99
  3567  280B  343D               	retlw	61
  3568  280C  3495               	retlw	149
  3569  280D  341D               	retlw	29
  3570  280E  343C               	retlw	60
  3571  280F  34C5               	retlw	197
  3572  2810  34AE               	retlw	174
  3573  2811  343A               	retlw	58
  3574  2812  3479               	retlw	121
  3575  2813  3421               	retlw	33
  3576  2814  3439               	retlw	57
  3577  2815  3494               	retlw	148
  3578  2816  3480               	retlw	128
  3579  2817  3437               	retlw	55
  3580  2818  3493               	retlw	147
  3581  2819  34A7               	retlw	167
  3582  281A  3435               	retlw	53
  3583  281B  3456               	retlw	86
  3584  281C  3415               	retlw	21
  3585  281D  3434               	retlw	52
  3586  281E                     __end_ofexp@coeff:	
  3587  281E                     log@coeff:	
  3588  281E  3400               	retlw	0
  3589  281F  3400               	retlw	0
  3590  2820  3400               	retlw	0
  3591  2821  3400               	retlw	0
  3592  2822  3480               	retlw	128
  3593  2823  343F               	retlw	63
  3594  2824  34F0               	retlw	240
  3595  2825  34FF               	retlw	255
  3596  2826  34BE               	retlw	190
  3597  2827  34E2               	retlw	226
  3598  2828  34A9               	retlw	169
  3599  2829  343E               	retlw	62
  3600  282A  3483               	retlw	131
  3601  282B  3476               	retlw	118
  3602  282C  34BE               	retlw	190
  3603  282D  34AE               	retlw	174
  3604  282E  342B               	retlw	43
  3605  282F  343E               	retlw	62
  3606  2830  343C               	retlw	60
  3607  2831  34C3               	retlw	195
  3608  2832  34BD               	retlw	189
  3609  2833  34D2               	retlw	210
  3610  2834  3413               	retlw	19
  3611  2835  343D               	retlw	61
  3612  2836  3478               	retlw	120
  3613  2837  34D3               	retlw	211
  3614  2838  34BB               	retlw	187
  3615  2839                     __end_oflog@coeff:	
  3616  2839                     sin@coeff_a:	
  3617  2839  34F4               	retlw	244
  3618  283A  344A               	retlw	74
  3619  283B  3448               	retlw	72
  3620  283C  3495               	retlw	149
  3621  283D  3495               	retlw	149
  3622  283E  34C7               	retlw	199
  3623  283F  34C1               	retlw	193
  3624  2840  34DC               	retlw	220
  3625  2841  3445               	retlw	69
  3626  2842  34DC               	retlw	220
  3627  2843  346D               	retlw	109
  3628  2844  34C3               	retlw	195
  3629  2845  34B3               	retlw	179
  3630  2846  3433               	retlw	51
  3631  2847  3440               	retlw	64
  3632  2848                     __end_ofsin@coeff_a:	
  3633  2848                     sin@coeff_b:	
  3634  2848  3434               	retlw	52
  3635  2849  3401               	retlw	1
  3636  284A  3448               	retlw	72
  3637  284B  349D               	retlw	157
  3638  284C  34B0               	retlw	176
  3639  284D  3445               	retlw	69
  3640  284E  3400               	retlw	0
  3641  284F  34DA               	retlw	218
  3642  2850  3442               	retlw	66
  3643  2851  3400               	retlw	0
  3644  2852  3480               	retlw	128
  3645  2853  343F               	retlw	63
  3646  2854                     __end_ofsin@coeff_b:	
  3647  000B                     _INTCONbits	set	11
  3648  0011                     _PIR1bits	set	17
  3649  000C                     _PORTAbits	set	12
  3650  000E                     _PORTCbits	set	14
  3651  000F                     _PORTDbits	set	15
  3652  0010                     _PORTEbits	set	16
  3653  001B                     _PR2	set	27
  3654  001C                     _T2CONbits	set	28
  3655  005F                     _GIE	set	95
  3656  005E                     _PEIE	set	94
  3657  0069                     _RB1	set	105
  3658  009D                     _ADCON0bits	set	157
  3659  009E                     _ADCON1bits	set	158
  3660  009C                     _ADRESH	set	156
  3661  009B                     _ADRESL	set	155
  3662  0095                     _OPTION_REGbits	set	149
  3663  0099                     _OSCCONbits	set	153
  3664  008D                     _TRISBbits	set	141
  3665  008E                     _TRISCbits	set	142
  3666  008F                     _TRISDbits	set	143
  3667  0090                     _TRISEbits	set	144
  3668  048D                     _RCIE	set	1165
  3669  011D                     _APFCONbits	set	285
  3670  010D                     _LATBbits	set	269
  3671  010F                     _LATDbits	set	271
  3672  0190                     _ANSELEbits	set	400
  3673  0192                     _PMADRH	set	402
  3674  0191                     _PMADRL	set	401
  3675  0195                     _PMCON1bits	set	405
  3676  0196                     _PMCON2	set	406
  3677  0194                     _PMDATH	set	404
  3678  0193                     _PMDATL	set	403
  3679  0199                     _RCREG	set	409
  3680  019D                     _RCSTAbits	set	413
  3681  019B                     _SPBRG	set	411
  3682  019A                     _TXREG	set	410
  3683  019E                     _TXSTAbits	set	414
  3684  0291                     _CCPR1	set	657
  3685  0298                     _CCPR2	set	664
  3686  0293                     _CCP1CONbits	set	659
  3687  029A                     _CCP2CONbits	set	666
  3688  029D                     _CCPTMRS0	set	669
  3689  029E                     _CCPTMRS1	set	670
  3690  029F                     _CCPTMRS2	set	671
  3691  0311                     _CCPR3	set	785
  3692  0318                     _CCPR4	set	792
  3693  031C                     _CCPR5	set	796
  3694  0313                     _CCP3CONbits	set	787
  3695  031A                     _CCP4CONbits	set	794
  3696  031E                     _CCP5CONbits	set	798
  3697  030C                     _TRISFbits	set	780
  3698  030D                     _TRISGbits	set	781
  3699  038C                     _LATFbits	set	908
  3700  038D                     _LATGbits	set	909
  3701  040C                     _ANSELFbits	set	1036
  3702  061F                     _CCP10CONbits	set	1567
  3703  0613                     _CCP6CONbits	set	1555
  3704  0616                     _CCP7CONbits	set	1558
  3705  0619                     _CCP8CONbits	set	1561
  3706  061C                     _CCP9CONbits	set	1564
  3707                           
  3708                           ; #config settings
  3709  0000                     
  3710                           	psect	cinit
  3711  02F5                     start_initialization:	
  3712  02F5                     __initialization:		;BIGRAM
  3713                           
  3714                           ; Clear objects allocated to BIGRAM
  3715  02F5  308A               	movlw	low (0+9098)
  3716  02F6  0084               	movwf	4
  3717  02F7  3023               	movlw	high (0+9098)
  3718  02F8  0085               	movwf	5
  3719  02F9  3066               	movlw	102
  3720  02FA  00FE               	movwf	btemp
  3721  02FB  3002               	movlw	2
  3722  02FC  00FF               	movwf	btemp+1
  3723  02FD  31AC  24D4  3182   	fcall	clear_ram0
  3724                           
  3725                           ; Clear objects allocated to BANK0
  3726  0300  3051               	movlw	low __pbssBANK0
  3727  0301  0084               	movwf	4
  3728  0302  3000               	movlw	high __pbssBANK0
  3729  0303  0085               	movwf	5
  3730  0304  300F               	movlw	15
  3731  0305  00FE               	movwf	btemp
  3732  0306  3000               	movlw	0
  3733  0307  00FF               	movwf	btemp+1
  3734  0308  31AC  24D4  3182   	fcall	clear_ram0
  3735                           
  3736                           ; Clear objects allocated to BANK2
  3737  030B  0022               	movlb	2	; select bank2
  3738  030C  01EA               	clrf	__pbssBANK2& (0+127)
  3739  030D  01EB               	clrf	(__pbssBANK2+1)& (0+127)
  3740  030E  01EC               	clrf	(__pbssBANK2+2)& (0+127)
  3741                           
  3742                           ; Clear objects allocated to BANK3
  3743  030F  30A0               	movlw	low __pbssBANK3
  3744  0310  0084               	movwf	4
  3745  0311  3001               	movlw	high __pbssBANK3
  3746  0312  0085               	movwf	5
  3747  0313  302B               	movlw	43
  3748  0314  00FE               	movwf	btemp
  3749  0315  3000               	movlw	0
  3750  0316  00FF               	movwf	btemp+1
  3751  0317  31AC  24D4  3182   	fcall	clear_ram0
  3752                           
  3753                           ; Clear objects allocated to BANK4
  3754  031A  3020               	movlw	low __pbssBANK4
  3755  031B  0084               	movwf	4
  3756  031C  3002               	movlw	high __pbssBANK4
  3757  031D  0085               	movwf	5
  3758  031E  3040               	movlw	64
  3759  031F  00FE               	movwf	btemp
  3760  0320  3000               	movlw	0
  3761  0321  00FF               	movwf	btemp+1
  3762  0322  31AC  24D4  3182   	fcall	clear_ram0
  3763                           
  3764                           ; Clear objects allocated to BANK5
  3765  0325  30A0               	movlw	low __pbssBANK5
  3766  0326  0084               	movwf	4
  3767  0327  3002               	movlw	high __pbssBANK5
  3768  0328  0085               	movwf	5
  3769  0329  302C               	movlw	44
  3770  032A  00FE               	movwf	btemp
  3771  032B  3000               	movlw	0
  3772  032C  00FF               	movwf	btemp+1
  3773  032D  31AC  24D4  3182   	fcall	clear_ram0
  3774                           
  3775                           ; Clear objects allocated to BANK6
  3776  0330  3020               	movlw	low __pbssBANK6
  3777  0331  0084               	movwf	4
  3778  0332  3003               	movlw	high __pbssBANK6
  3779  0333  0085               	movwf	5
  3780  0334  3040               	movlw	64
  3781  0335  00FE               	movwf	btemp
  3782  0336  3000               	movlw	0
  3783  0337  00FF               	movwf	btemp+1
  3784  0338  31AC  24D4  3182   	fcall	clear_ram0
  3785                           
  3786                           ; Clear objects allocated to BANK7
  3787  033B  30A0               	movlw	low __pbssBANK7
  3788  033C  0084               	movwf	4
  3789  033D  3003               	movlw	high __pbssBANK7
  3790  033E  0085               	movwf	5
  3791  033F  3040               	movlw	64
  3792  0340  00FE               	movwf	btemp
  3793  0341  3000               	movlw	0
  3794  0342  00FF               	movwf	btemp+1
  3795  0343  31AC  24D4  3182   	fcall	clear_ram0
  3796                           
  3797                           ; Initialize objects allocated to BANK0
  3798  0346  30EF               	movlw	low __pidataBANK0
  3799  0347  0084               	movwf	4
  3800  0348  30AC               	movlw	(high __pidataBANK0)| (0+128)
  3801  0349  0085               	movwf	5
  3802  034A  3040               	movlw	low __pdataBANK0
  3803  034B  0086               	movwf	6
  3804  034C  3000               	movlw	high __pdataBANK0
  3805  034D  0087               	movwf	7
  3806  034E  3000               	movlw	0
  3807  034F  00FF               	movwf	btemp+1
  3808  0350  3011               	movlw	17
  3809  0351  31AC  24C8  3182   	fcall	init_ram
  3810                           
  3811                           ; Initialize objects allocated to BANK3
  3812  0354  30B3               	movlw	low __pidataBANK3
  3813  0355  0084               	movwf	4
  3814  0356  30AD               	movlw	(high __pidataBANK3)| (0+128)
  3815  0357  0085               	movwf	5
  3816  0358  30CB               	movlw	low __pdataBANK3
  3817  0359  0086               	movwf	6
  3818  035A  3001               	movlw	high __pdataBANK3
  3819  035B  0087               	movwf	7
  3820  035C  3000               	movlw	0
  3821  035D  00FF               	movwf	btemp+1
  3822  035E  301C               	movlw	28
  3823  035F  31AC  24C8  3182   	fcall	init_ram
  3824                           
  3825                           ; Initialize objects allocated to BANK4
  3826  0362  30A8               	movlw	low __pidataBANK4
  3827  0363  0084               	movwf	4
  3828  0364  30AC               	movlw	(high __pidataBANK4)| (0+128)
  3829  0365  0085               	movwf	5
  3830  0366  3068               	movlw	low __pdataBANK4
  3831  0367  0086               	movwf	6
  3832  0368  3002               	movlw	high __pdataBANK4
  3833  0369  0087               	movwf	7
  3834  036A  3000               	movlw	0
  3835  036B  00FF               	movwf	btemp+1
  3836  036C  3004               	movlw	4
  3837  036D  31AC  24C8         	fcall	init_ram
  3838  036F                     end_of_initialization:	
  3839                           ;End of C runtime variable initialization code
  3840                           
  3841  036F                     __end_of__initialization:	
  3842  036F  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3843  0370  0020               	movlb	0
  3844  0371  318B  2B64         	ljmp	_main	;jump to C main() function
  3845                           
  3846                           	psect	bssBANK0
  3847  0051                     __pbssBANK0:	
  3848  0051                     _tap_timer:	
  3849  0051                     	ds	4
  3850  0055                     _timer:	
  3851  0055                     	ds	4
  3852  0059                     _UQEnd:	
  3853  0059                     	ds	1
  3854  005A                     _UQFront:	
  3855  005A                     	ds	1
  3856  005B                     _doubleTap_state:	
  3857  005B                     	ds	1
  3858  005C                     _longBypass_state:	
  3859  005C                     	ds	1
  3860  005D                     _mode2_state:	
  3861  005D                     	ds	1
  3862  005E                     _presetSaveMode:	
  3863  005E                     	ds	1
  3864  005F                     _suspend_blink:	
  3865  005F                     	ds	1
  3866                           
  3867                           	psect	dataBANK0
  3868  0040                     __pdataBANK0:	
  3869  0040                     _baseline_mod_time:	
  3870  0040                     	ds	4
  3871  0044                     _delay_time:	
  3872  0044                     	ds	4
  3873  0048                     _long_press_limit:	
  3874  0048                     	ds	2
  3875  004A                     _top_push_state:	
  3876  004A                     	ds	2
  3877  004C                     _blink_rate:	
  3878  004C                     	ds	1
  3879  004D                     _longTap_state:	
  3880  004D                     	ds	1
  3881  004E                     _num_taps:	
  3882  004E                     	ds	1
  3883  004F                     _presetChannel:	
  3884  004F                     	ds	1
  3885  0050                     _switchBypass_state:	
  3886  0050                     	ds	1
  3887                           
  3888                           	psect	bssBANK2
  3889  016A                     __pbssBANK2:	
  3890  016A                     _longBypass_start:	
  3891  016A                     	ds	1
  3892  016B                     _longTap_start:	
  3893  016B                     	ds	1
  3894  016C                     _switchTap_pressed:	
  3895  016C                     	ds	1
  3896                           
  3897                           	psect	bssBANK3
  3898  01A0                     __pbssBANK3:	
  3899  01A0                     _double_timer:	
  3900  01A0                     	ds	4
  3901  01A4                     _mod_timer:	
  3902  01A4                     	ds	4
  3903  01A8                     _sub_timer:	
  3904  01A8                     	ds	4
  3905  01AC                     _knob_1_pos:	
  3906  01AC                     	ds	2
  3907  01AE                     _knob_2_pos:	
  3908  01AE                     	ds	2
  3909  01B0                     _knob_3_pos:	
  3910  01B0                     	ds	2
  3911  01B2                     _knob_4_pos:	
  3912  01B2                     	ds	2
  3913  01B4                     _knob_5_pos:	
  3914  01B4                     	ds	2
  3915  01B6                     _longBypass_timer:	
  3916  01B6                     	ds	2
  3917  01B8                     _longTap_timer:	
  3918  01B8                     	ds	2
  3919  01BA                     _modulationSubdivision:	
  3920  01BA                     	ds	2
  3921  01BC                     _switchBypass_pressed:	
  3922  01BC                     	ds	2
  3923  01BE                     _tmpModDelay:	
  3924  01BE                     	ds	2
  3925  01C0                     _bottomTactile_pressed:	
  3926  01C0                     	ds	1
  3927  01C1                     _bypass_turning_on:	
  3928  01C1                     	ds	1
  3929  01C2                     _isInitialized:	
  3930  01C2                     	ds	1
  3931  01C3                     _longBypass_down:	
  3932  01C3                     	ds	1
  3933  01C4                     _longBypass_save:	
  3934  01C4                     	ds	1
  3935  01C5                     _mode1_state:	
  3936  01C5                     	ds	1
  3937  01C6                     _modulation_changed:	
  3938  01C6                     	ds	1
  3939  01C7                     _preset_blink:	
  3940  01C7                     	ds	1
  3941  01C8                     _preset_programmning_on:	
  3942  01C8                     	ds	1
  3943  01C9                     _switchTap_down:	
  3944  01C9                     	ds	1
  3945  01CA                     _topTactile_pressed:	
  3946  01CA                     	ds	1
  3947                           
  3948                           	psect	dataBANK3
  3949  01CB                     __pdataBANK3:	
  3950  01CB                     _bottom_push_state:	
  3951  01CB                     	ds	2
  3952  01CD                     _knob1_prev:	
  3953  01CD                     	ds	2
  3954  01CF                     _knob2_prev:	
  3955  01CF                     	ds	2
  3956  01D1                     _knob3_prev:	
  3957  01D1                     	ds	2
  3958  01D3                     _knob4_prev:	
  3959  01D3                     	ds	2
  3960  01D5                     _knob5_prev:	
  3961  01D5                     	ds	2
  3962  01D7                     _mod_counter:	
  3963  01D7                     	ds	2
  3964  01D9                     _mod_delay_time:	
  3965  01D9                     	ds	2
  3966  01DB                     _symmetry:	
  3967  01DB                     	ds	2
  3968  01DD                     _tap_iteration:	
  3969  01DD                     	ds	2
  3970  01DF                     _blink_state:	
  3971  01DF                     	ds	1
  3972  01E0                     _currentBypassState:	
  3973  01E0                     	ds	1
  3974  01E1                     _expSwitchState:	
  3975  01E1                     	ds	1
  3976  01E2                     _expressModeCnst:	
  3977  01E2                     	ds	1
  3978  01E3                     _expressionChannel:	
  3979  01E3                     	ds	1
  3980  01E4                     _mod_time_changed:	
  3981  01E4                     	ds	1
  3982  01E5                     _presetModeCnst:	
  3983  01E5                     	ds	1
  3984  01E6                     _switchTap_state:	
  3985  01E6                     	ds	1
  3986                           
  3987                           	psect	bssBANK4
  3988  0220                     __pbssBANK4:	
  3989  0220                     _tap_history:	
  3990  0220                     	ds	20
  3991  0234                     USARTWriteInt@F3536:	
  3992  0234                     	ds	5
  3993  0239                     _ledState:	
  3994  0239                     	ds	4
  3995  023D                     _tap_total:	
  3996  023D                     	ds	4
  3997  0241                     _test_timer:	
  3998  0241                     	ds	4
  3999  0245                     _adjusted_pot_value:	
  4000  0245                     	ds	2
  4001  0247                     _debounce_bypass:	
  4002  0247                     	ds	2
  4003  0249                     _debounce_count:	
  4004  0249                     	ds	2
  4005  024B                     _debounce_mode1:	
  4006  024B                     	ds	2
  4007  024D                     _debounce_mode2:	
  4008  024D                     	ds	2
  4009  024F                     _delayfound:	
  4010  024F                     	ds	2
  4011  0251                     _errno:	
  4012  0251                     	ds	2
  4013  0253                     _mod_value:	
  4014  0253                     	ds	2
  4015  0255                     _oldBaseTime:	
  4016  0255                     	ds	2
  4017  0257                     _oldSymmetry:	
  4018  0257                     	ds	2
  4019  0259                     _switchBypass_toggle:	
  4020  0259                     	ds	2
  4021  025B                     _tmpVal:	
  4022  025B                     	ds	2
  4023  025D                     _adjust_mod_delay:	
  4024  025D                     	ds	1
  4025  025E                     _iCnt:	
  4026  025E                     	ds	1
  4027  025F                     _reset_sub_delay:	
  4028  025F                     	ds	1
  4029                           
  4030                           	psect	dataBANK4
  4031  0268                     __pdataBANK4:	
  4032  0268                     _blink_delay:	
  4033  0268                     	ds	2
  4034  026A                     _switchBypass_up:	
  4035  026A                     	ds	2
  4036                           
  4037                           	psect	bssBANK5
  4038  02A0                     __pbssBANK5:	
  4039  02A0                     _tap:	
  4040  02A0                     	ds	44
  4041                           
  4042                           	psect	bssBANK6
  4043  0320                     __pbssBANK6:	
  4044  0320                     _URBuff:	
  4045  0320                     	ds	64
  4046                           
  4047                           	psect	bssBANK7
  4048  03A0                     __pbssBANK7:	
  4049  03A0                     _myBuf:	
  4050  03A0                     	ds	64
  4051                           
  4052                           	psect	clrtext
  4053  2CD4                     clear_ram0:	
  4054                           ;	Called with FSR0 containing the base address, and
  4055                           ;	btemp/btemp+1 has the size to clear
  4056                           
  4057  2CD4  0064               	clrwdt	;clear the watchdog before getting into this loop
  4058  2CD5                     clrloop0:	
  4059  2CD5  0180               	clrf	0	;clear RAM location pointed to by FSR
  4060  2CD6  3101               	addfsr 0,1
  4061  2CD7  3001               	movlw	1
  4062  2CD8  02FE               	subwf	126,f
  4063  2CD9  3000               	movlw	0
  4064  2CDA  3BFF               	subwfb	127,f
  4065  2CDB  087F               	movf	127,w
  4066  2CDC  047E               	iorwf	126,w
  4067  2CDD  1903               	btfsc	3,2
  4068  2CDE  3400               	retlw	0	;all done for this memory range, return
  4069  2CDF  2CD5               	goto	clrloop0	;have we reached the end yet?
  4070                           
  4071                           	psect	inittext
  4072  2CC8                     init_ram:	
  4073  2CC8  00FE               	movwf	126
  4074  2CC9                     initloop:	
  4075  2CC9  0012               	moviw fsr0++
  4076  2CCA  001E               	movwi fsr1++
  4077  2CCB  3001               	movlw	1
  4078  2CCC  02FE               	subwf	126,f
  4079  2CCD  3000               	movlw	0
  4080  2CCE  3BFF               	subwfb	127,f
  4081  2CCF  087F               	movf	127,w
  4082  2CD0  047E               	iorwf	126,w
  4083  2CD1  1903               	btfsc	3,2
  4084  2CD2  3400               	retlw	0
  4085  2CD3  2CC9               	goto	initloop
  4086                           
  4087                           	psect	cstackBANK5
  4088  02CC                     __pcstackBANK5:	
  4089  02CC                     _main$2861:	
  4090                           
  4091                           ; 3 bytes @ 0x0
  4092  02CC                     	ds	3
  4093  02CF                     _main$2862:	
  4094                           
  4095                           ; 3 bytes @ 0x3
  4096  02CF                     	ds	3
  4097  02D2                     _main$2863:	
  4098                           
  4099                           ; 3 bytes @ 0x6
  4100  02D2                     	ds	3
  4101                           
  4102                           	psect	cstackBANK4
  4103  0260                     __pcstackBANK4:	
  4104  0260                     ??_main:	
  4105                           
  4106                           ; 1 bytes @ 0x0
  4107  0260                     	ds	8
  4108                           
  4109                           	psect	cstackBANK3
  4110  01E7                     __pcstackBANK3:	
  4111  01E7                     scaleA100kPot@pwm:	
  4112  01E7                     scaleA10kPot@pwm:	
  4113                           ; 3 bytes @ 0x0
  4114                           
  4115  01E7                     scaleiA10kPot@pwm:	
  4116                           ; 3 bytes @ 0x0
  4117                           
  4118                           
  4119                           ; 3 bytes @ 0x0
  4120  01E7                     	ds	3
  4121  01EA                     _scaleA100kPot$2866:	
  4122  01EA                     _scaleA10kPot$2870:	
  4123                           ; 3 bytes @ 0x3
  4124                           
  4125  01EA                     _scaleiA10kPot$2872:	
  4126                           ; 3 bytes @ 0x3
  4127                           
  4128                           
  4129                           ; 3 bytes @ 0x3
  4130  01EA                     	ds	3
  4131  01ED                     _scaleA100kPot$2867:	
  4132  01ED                     _scaleA10kPot$2871:	
  4133                           ; 3 bytes @ 0x6
  4134                           
  4135  01ED                     _scaleiA10kPot$2873:	
  4136                           ; 3 bytes @ 0x6
  4137                           
  4138                           
  4139                           ; 3 bytes @ 0x6
  4140  01ED                     	ds	3
  4141                           
  4142                           	psect	cstackBANK2
  4143  0120                     __pcstackBANK2:	
  4144  0120                     ?___fttol:	
  4145  0120                     ___fttol@f1:	
  4146                           ; 4 bytes @ 0x0
  4147                           
  4148                           
  4149                           ; 3 bytes @ 0x0
  4150  0120                     	ds	4
  4151  0124                     ??___fttol:	
  4152                           
  4153                           ; 1 bytes @ 0x4
  4154  0124                     	ds	4
  4155  0128                     ___fttol@sign1:	
  4156                           
  4157                           ; 1 bytes @ 0x8
  4158  0128                     	ds	1
  4159  0129                     ___fttol@lval:	
  4160                           
  4161                           ; 4 bytes @ 0x9
  4162  0129                     	ds	4
  4163  012D                     ___fttol@exp1:	
  4164                           
  4165                           ; 1 bytes @ 0xD
  4166  012D                     	ds	1
  4167  012E                     ?_set_subdivision:	
  4168  012E                     ?_modTri:	
  4169                           ; 2 bytes @ 0xE
  4170                           
  4171  012E                     ?_modSaw:	
  4172                           ; 2 bytes @ 0xE
  4173                           
  4174  012E                     ?___wmul:	
  4175                           ; 2 bytes @ 0xE
  4176                           
  4177  012E                     ?_floor:	
  4178                           ; 2 bytes @ 0xE
  4179                           
  4180  012E                     set_subdivision@x:	
  4181                           ; 3 bytes @ 0xE
  4182                           
  4183  012E                     ___wmul@multiplier:	
  4184                           ; 2 bytes @ 0xE
  4185                           
  4186  012E                     modTri@angle:	
  4187                           ; 2 bytes @ 0xE
  4188                           
  4189  012E                     modSaw@angle:	
  4190                           ; 3 bytes @ 0xE
  4191                           
  4192  012E                     floor@x:	
  4193                           ; 3 bytes @ 0xE
  4194                           
  4195                           
  4196                           ; 3 bytes @ 0xE
  4197  012E                     	ds	2
  4198  0130                     set_subdivision@y:	
  4199  0130                     ___wmul@multiplicand:	
  4200                           ; 2 bytes @ 0x10
  4201                           
  4202                           
  4203                           ; 2 bytes @ 0x10
  4204  0130                     	ds	1
  4205  0131                     ??_floor:	
  4206  0131                     modTri@inflection:	
  4207                           ; 1 bytes @ 0x11
  4208                           
  4209  0131                     modSaw@inflection:	
  4210                           ; 3 bytes @ 0x11
  4211                           
  4212                           
  4213                           ; 3 bytes @ 0x11
  4214  0131                     	ds	1
  4215  0132                     ___wmul@product:	
  4216  0132                     set_subdivision@scalar:	
  4217                           ; 2 bytes @ 0x12
  4218                           
  4219  0132                     floor@i:	
  4220                           ; 3 bytes @ 0x12
  4221                           
  4222                           
  4223                           ; 3 bytes @ 0x12
  4224  0132                     	ds	2
  4225  0134                     ?_modCos:	
  4226  0134                     ?_eval_poly:	
  4227                           ; 2 bytes @ 0x14
  4228                           
  4229  0134                     modCos@angle:	
  4230                           ; 3 bytes @ 0x14
  4231                           
  4232  0134                     eval_poly@x:	
  4233                           ; 3 bytes @ 0x14
  4234                           
  4235  0134                     _modTri$2879:	
  4236                           ; 3 bytes @ 0x14
  4237                           
  4238  0134                     _modSaw$2880:	
  4239                           ; 3 bytes @ 0x14
  4240                           
  4241                           
  4242                           ; 3 bytes @ 0x14
  4243  0134                     	ds	1
  4244  0135                     set_subdivision@tmpX:	
  4245  0135                     floor@expon:	
  4246                           ; 2 bytes @ 0x15
  4247                           
  4248                           
  4249                           ; 2 bytes @ 0x15
  4250  0135                     	ds	2
  4251  0137                     ?___ftsub:	
  4252  0137                     eval_poly@d:	
  4253                           ; 3 bytes @ 0x17
  4254                           
  4255  0137                     modCos@inflection:	
  4256                           ; 2 bytes @ 0x17
  4257                           
  4258  0137                     modTri@shift:	
  4259                           ; 3 bytes @ 0x17
  4260                           
  4261  0137                     ___ftsub@f2:	
  4262                           ; 3 bytes @ 0x17
  4263                           
  4264  0137                     _modSaw$2881:	
  4265                           ; 3 bytes @ 0x17
  4266                           
  4267                           
  4268                           ; 3 bytes @ 0x17
  4269  0137                     	ds	2
  4270  0139                     eval_poly@n:	
  4271                           
  4272                           ; 2 bytes @ 0x19
  4273  0139                     	ds	1
  4274  013A                     ??_modCos:	
  4275  013A                     modSaw@mod:	
  4276                           ; 1 bytes @ 0x1A
  4277                           
  4278  013A                     modTri@period:	
  4279                           ; 2 bytes @ 0x1A
  4280                           
  4281  013A                     ___ftsub@f1:	
  4282                           ; 3 bytes @ 0x1A
  4283                           
  4284                           
  4285                           ; 3 bytes @ 0x1A
  4286  013A                     	ds	1
  4287  013B                     eval_poly@res:	
  4288                           
  4289                           ; 3 bytes @ 0x1B
  4290  013B                     	ds	1
  4291  013C                     modSaw@shift:	
  4292  013C                     _modCos$2878:	
  4293                           ; 3 bytes @ 0x1C
  4294                           
  4295                           
  4296                           ; 3 bytes @ 0x1C
  4297  013C                     	ds	1
  4298  013D                     modTri@tmpVal:	
  4299                           
  4300                           ; 3 bytes @ 0x1D
  4301  013D                     	ds	1
  4302  013E                     ?_sin:	
  4303  013E                     ?_log:	
  4304                           ; 3 bytes @ 0x1E
  4305                           
  4306  013E                     ?_ldexp:	
  4307                           ; 3 bytes @ 0x1E
  4308                           
  4309  013E                     sin@f:	
  4310                           ; 3 bytes @ 0x1E
  4311                           
  4312  013E                     ldexp@value:	
  4313                           ; 3 bytes @ 0x1E
  4314                           
  4315  013E                     log@x:	
  4316                           ; 3 bytes @ 0x1E
  4317                           
  4318                           
  4319                           ; 3 bytes @ 0x1E
  4320  013E                     	ds	1
  4321  013F                     modCos@shift:	
  4322  013F                     modSaw@period:	
  4323                           ; 3 bytes @ 0x1F
  4324                           
  4325                           
  4326                           ; 3 bytes @ 0x1F
  4327  013F                     	ds	2
  4328  0141                     ??_sin:	
  4329  0141                     ??_log:	
  4330                           ; 1 bytes @ 0x21
  4331                           
  4332  0141                     ldexp@newexp:	
  4333                           ; 1 bytes @ 0x21
  4334                           
  4335                           
  4336                           ; 2 bytes @ 0x21
  4337  0141                     	ds	1
  4338  0142                     ?_modSawRev:	
  4339  0142                     log@exponent:	
  4340                           ; 2 bytes @ 0x22
  4341                           
  4342  0142                     modCos@period:	
  4343                           ; 2 bytes @ 0x22
  4344                           
  4345  0142                     modSawRev@angle:	
  4346                           ; 3 bytes @ 0x22
  4347                           
  4348  0142                     sin@y:	
  4349                           ; 3 bytes @ 0x22
  4350                           
  4351                           
  4352                           ; 3 bytes @ 0x22
  4353  0142                     	ds	1
  4354  0143                     ??_ldexp:	
  4355                           
  4356                           ; 1 bytes @ 0x23
  4357  0143                     	ds	2
  4358  0145                     modCos@tmpVal:	
  4359  0145                     modSawRev@inflection:	
  4360                           ; 3 bytes @ 0x25
  4361                           
  4362  0145                     _ldexp$2664:	
  4363                           ; 3 bytes @ 0x25
  4364                           
  4365  0145                     _sin$2885:	
  4366                           ; 3 bytes @ 0x25
  4367                           
  4368                           
  4369                           ; 3 bytes @ 0x25
  4370  0145                     	ds	3
  4371  0148                     ??_modSawRev:	
  4372  0148                     ?_modSquare:	
  4373                           ; 1 bytes @ 0x28
  4374                           
  4375  0148                     ?_exp:	
  4376                           ; 2 bytes @ 0x28
  4377                           
  4378  0148                     modSquare@angle:	
  4379                           ; 3 bytes @ 0x28
  4380                           
  4381  0148                     sin@x2:	
  4382                           ; 3 bytes @ 0x28
  4383                           
  4384  0148                     exp@x:	
  4385                           ; 3 bytes @ 0x28
  4386                           
  4387                           
  4388                           ; 3 bytes @ 0x28
  4389  0148                     	ds	3
  4390  014B                     ??_exp:	
  4391  014B                     sin@sgn:	
  4392                           ; 1 bytes @ 0x2B
  4393                           
  4394  014B                     modSquare@inflection:	
  4395                           ; 1 bytes @ 0x2B
  4396                           
  4397                           
  4398                           ; 3 bytes @ 0x2B
  4399  014B                     	ds	1
  4400  014C                     ?_cos:	
  4401  014C                     cos@f:	
  4402                           ; 3 bytes @ 0x2C
  4403                           
  4404  014C                     _exp$2886:	
  4405                           ; 3 bytes @ 0x2C
  4406                           
  4407                           
  4408                           ; 3 bytes @ 0x2C
  4409  014C                     	ds	2
  4410  014E                     modSquare@tmpVal:	
  4411                           
  4412                           ; 2 bytes @ 0x2E
  4413  014E                     	ds	1
  4414  014F                     _exp$2627:	
  4415  014F                     _cos$2882:	
  4416                           ; 3 bytes @ 0x2F
  4417                           
  4418                           
  4419                           ; 3 bytes @ 0x2F
  4420  014F                     	ds	1
  4421  0150                     ??_updateModulationArray:	
  4422                           
  4423                           ; 1 bytes @ 0x30
  4424  0150                     	ds	2
  4425  0152                     ??_calcCosArray:	
  4426  0152                     exp@exponent:	
  4427                           ; 1 bytes @ 0x32
  4428                           
  4429                           
  4430                           ; 2 bytes @ 0x32
  4431  0152                     	ds	2
  4432  0154                     exp@sign:	
  4433  0154                     updateModulationArray@angleFactor:	
  4434                           ; 1 bytes @ 0x34
  4435                           
  4436                           
  4437                           ; 2 bytes @ 0x34
  4438  0154                     	ds	1
  4439  0155                     ?_pow:	
  4440  0155                     pow@x:	
  4441                           ; 3 bytes @ 0x35
  4442                           
  4443                           
  4444                           ; 3 bytes @ 0x35
  4445  0155                     	ds	1
  4446  0156                     updateModulationArray@iAngle_2363:	
  4447  0156                     calcCosArray@tmpVal:	
  4448                           ; 1 bytes @ 0x36
  4449                           
  4450                           
  4451                           ; 3 bytes @ 0x36
  4452  0156                     	ds	1
  4453  0157                     updateModulationArray@subDiv:	
  4454                           
  4455                           ; 2 bytes @ 0x37
  4456  0157                     	ds	1
  4457  0158                     pow@y:	
  4458                           
  4459                           ; 3 bytes @ 0x38
  4460  0158                     	ds	1
  4461  0159                     calcCosArray@iAngle:	
  4462  0159                     updateModulationArray@thisAngle:	
  4463                           ; 1 bytes @ 0x39
  4464                           
  4465                           
  4466                           ; 2 bytes @ 0x39
  4467  0159                     	ds	2
  4468  015B                     ??_pow:	
  4469  015B                     updateModulationArray@iAngle:	
  4470                           ; 1 bytes @ 0x3B
  4471                           
  4472                           
  4473                           ; 1 bytes @ 0x3B
  4474  015B                     	ds	1
  4475  015C                     _pow$2883:	
  4476                           
  4477                           ; 3 bytes @ 0x3C
  4478  015C                     	ds	3
  4479  015F                     _pow$2884:	
  4480                           
  4481                           ; 3 bytes @ 0x3F
  4482  015F                     	ds	3
  4483  0162                     pow@sign:	
  4484                           
  4485                           ; 1 bytes @ 0x42
  4486  0162                     	ds	1
  4487  0163                     pow@yi:	
  4488                           
  4489                           ; 4 bytes @ 0x43
  4490  0163                     	ds	4
  4491  0167                     ?_scaleA10kPot:	
  4492  0167                     ?_scaleiA10kPot:	
  4493                           ; 2 bytes @ 0x47
  4494                           
  4495  0167                     ?_scaleA100kPot:	
  4496                           ; 2 bytes @ 0x47
  4497                           
  4498  0167                     scaleA100kPot@input:	
  4499                           ; 2 bytes @ 0x47
  4500                           
  4501  0167                     scaleA10kPot@input:	
  4502                           ; 3 bytes @ 0x47
  4503                           
  4504  0167                     scaleiA10kPot@input:	
  4505                           ; 3 bytes @ 0x47
  4506                           
  4507                           
  4508                           ; 3 bytes @ 0x47
  4509  0167                     	ds	3
  4510                           
  4511                           	psect	cstackBANK1
  4512  00A0                     __pcstackBANK1:	
  4513  00A0                     ?___ftge:	
  4514  00A0                     ?_set_leds_top:	
  4515                           ; 1 bit 
  4516                           
  4517  00A0                     ?_USARTInit:	
  4518                           ; 1 bytes @ 0x0
  4519                           
  4520  00A0                     ??_ConfigureOscillator:	
  4521                           ; 1 bytes @ 0x0
  4522                           
  4523  00A0                     ??_InitApp:	
  4524                           ; 1 bytes @ 0x0
  4525                           
  4526  00A0                     ??_InitializeTaps:	
  4527                           ; 1 bytes @ 0x0
  4528                           
  4529  00A0                     ??_init_adc:	
  4530                           ; 1 bytes @ 0x0
  4531                           
  4532  00A0                     ??_init_pwm:	
  4533                           ; 1 bytes @ 0x0
  4534                           
  4535  00A0                     ??_init_timer2:	
  4536                           ; 1 bytes @ 0x0
  4537                           
  4538  00A0                     ??_init_timer0:	
  4539                           ; 1 bytes @ 0x0
  4540                           
  4541  00A0                     ?_set_leds_bottom:	
  4542                           ; 1 bytes @ 0x0
  4543                           
  4544  00A0                     ?_setLongBypassState:	
  4545                           ; 1 bytes @ 0x0
  4546                           
  4547  00A0                     ?_setLongTapState:	
  4548                           ; 1 bytes @ 0x0
  4549                           
  4550  00A0                     ?_updateSwitchBypassState:	
  4551                           ; 1 bytes @ 0x0
  4552                           
  4553  00A0                     ?_getModulationSubdivision:	
  4554                           ; 1 bytes @ 0x0
  4555                           
  4556  00A0                     ?_adc_convert:	
  4557                           ; 2 bytes @ 0x0
  4558                           
  4559  00A0                     ?_FLASH_ReadWord:	
  4560                           ; 2 bytes @ 0x0
  4561                           
  4562  00A0                     ?_getSwitchBypassState:	
  4563                           ; 2 bytes @ 0x0
  4564                           
  4565  00A0                     ?___awdiv:	
  4566                           ; 2 bytes @ 0x0
  4567                           
  4568  00A0                     ?___ftpack:	
  4569                           ; 2 bytes @ 0x0
  4570                           
  4571  00A0                     ?_frexp:	
  4572                           ; 3 bytes @ 0x0
  4573                           
  4574  00A0                     ?___lmul:	
  4575                           ; 3 bytes @ 0x0
  4576                           
  4577  00A0                     ?___aldiv:	
  4578                           ; 4 bytes @ 0x0
  4579                           
  4580  00A0                     FLASH_ReadWord@flashAddr:	
  4581                           ; 4 bytes @ 0x0
  4582                           
  4583  00A0                     set_leds_top@x:	
  4584                           ; 2 bytes @ 0x0
  4585                           
  4586  00A0                     set_leds_bottom@x:	
  4587                           ; 2 bytes @ 0x0
  4588                           
  4589  00A0                     updateSwitchBypassState@state:	
  4590                           ; 2 bytes @ 0x0
  4591                           
  4592  00A0                     setLongBypassState@f_state:	
  4593                           ; 2 bytes @ 0x0
  4594                           
  4595  00A0                     setLongTapState@f_state:	
  4596                           ; 2 bytes @ 0x0
  4597                           
  4598  00A0                     USARTInit@baud_rate:	
  4599                           ; 2 bytes @ 0x0
  4600                           
  4601  00A0                     ___awdiv@divisor:	
  4602                           ; 2 bytes @ 0x0
  4603                           
  4604  00A0                     ___ftpack@arg:	
  4605                           ; 2 bytes @ 0x0
  4606                           
  4607  00A0                     ___ftge@ff1:	
  4608                           ; 3 bytes @ 0x0
  4609                           
  4610  00A0                     frexp@value:	
  4611                           ; 3 bytes @ 0x0
  4612                           
  4613  00A0                     ___lmul@multiplier:	
  4614                           ; 3 bytes @ 0x0
  4615                           
  4616  00A0                     ___aldiv@divisor:	
  4617                           ; 4 bytes @ 0x0
  4618                           
  4619                           
  4620                           ; 4 bytes @ 0x0
  4621  00A0                     	ds	1
  4622  00A1                     InitializeTaps@itap:	
  4623                           
  4624                           ; 2 bytes @ 0x1
  4625  00A1                     	ds	1
  4626  00A2                     ??_getModulationSubdivision:	
  4627  00A2                     ??_USARTInit:	
  4628                           ; 1 bytes @ 0x2
  4629                           
  4630  00A2                     ??_adc_convert:	
  4631                           ; 1 bytes @ 0x2
  4632                           
  4633  00A2                     ??_FLASH_ReadWord:	
  4634                           ; 1 bytes @ 0x2
  4635                           
  4636  00A2                     ??_set_leds_bottom:	
  4637                           ; 1 bytes @ 0x2
  4638                           
  4639  00A2                     ??_setLongBypassState:	
  4640                           ; 1 bytes @ 0x2
  4641                           
  4642  00A2                     ??_setLongTapState:	
  4643                           ; 1 bytes @ 0x2
  4644                           
  4645  00A2                     ??_updateSwitchBypassState:	
  4646                           ; 1 bytes @ 0x2
  4647                           
  4648  00A2                     ??_getSwitchBypassState:	
  4649                           ; 1 bytes @ 0x2
  4650                           
  4651  00A2                     FLASH_ReadWord@GIEBitValue:	
  4652                           ; 1 bytes @ 0x2
  4653                           
  4654  00A2                     set_leds_top@ledState:	
  4655                           ; 1 bytes @ 0x2
  4656                           
  4657  00A2                     ___awdiv@dividend:	
  4658                           ; 2 bytes @ 0x2
  4659                           
  4660                           
  4661                           ; 2 bytes @ 0x2
  4662  00A2                     	ds	1
  4663  00A3                     adc_convert@channel:	
  4664  00A3                     ___ftpack@exp:	
  4665                           ; 1 bytes @ 0x3
  4666                           
  4667  00A3                     frexp@eptr:	
  4668                           ; 1 bytes @ 0x3
  4669                           
  4670  00A3                     ___ftge@ff2:	
  4671                           ; 1 bytes @ 0x3
  4672                           
  4673                           
  4674                           ; 3 bytes @ 0x3
  4675  00A3                     	ds	1
  4676  00A4                     ??_set_leds_top:	
  4677  00A4                     ??_ReadSavedSettings:	
  4678                           ; 1 bytes @ 0x4
  4679                           
  4680  00A4                     ??_resetRingLEDs:	
  4681                           ; 1 bytes @ 0x4
  4682                           
  4683  00A4                     ??_setPresetDisplay:	
  4684                           ; 1 bytes @ 0x4
  4685                           
  4686  00A4                     ??_setExpressionDisplay:	
  4687                           ; 1 bytes @ 0x4
  4688                           
  4689  00A4                     ??_frexp:	
  4690                           ; 1 bytes @ 0x4
  4691                           
  4692  00A4                     ??___awdiv:	
  4693                           ; 1 bytes @ 0x4
  4694                           
  4695  00A4                     ___ftpack@sign:	
  4696                           ; 1 bytes @ 0x4
  4697                           
  4698  00A4                     ___lmul@multiplicand:	
  4699                           ; 1 bytes @ 0x4
  4700                           
  4701  00A4                     ___aldiv@dividend:	
  4702                           ; 4 bytes @ 0x4
  4703                           
  4704                           
  4705                           ; 4 bytes @ 0x4
  4706  00A4                     	ds	1
  4707  00A5                     ??___ftpack:	
  4708  00A5                     ___awdiv@counter:	
  4709                           ; 1 bytes @ 0x5
  4710                           
  4711                           
  4712                           ; 1 bytes @ 0x5
  4713  00A5                     	ds	1
  4714  00A6                     ??___ftge:	
  4715  00A6                     setPresetDisplay@ledChannel:	
  4716                           ; 1 bytes @ 0x6
  4717                           
  4718  00A6                     setExpressionDisplay@ledChannel:	
  4719                           ; 1 bytes @ 0x6
  4720                           
  4721  00A6                     ___awdiv@sign:	
  4722                           ; 1 bytes @ 0x6
  4723                           
  4724                           
  4725                           ; 1 bytes @ 0x6
  4726  00A6                     	ds	1
  4727  00A7                     ??_update_mode:	
  4728  00A7                     ??_update_selectMode:	
  4729                           ; 1 bytes @ 0x7
  4730                           
  4731  00A7                     ??_setPedalMode:	
  4732                           ; 1 bytes @ 0x7
  4733                           
  4734  00A7                     ___awdiv@quotient:	
  4735                           ; 1 bytes @ 0x7
  4736                           
  4737                           
  4738                           ; 2 bytes @ 0x7
  4739  00A7                     	ds	1
  4740  00A8                     ??___lmul:	
  4741  00A8                     ??___aldiv:	
  4742                           ; 1 bytes @ 0x8
  4743                           
  4744  00A8                     ?___altoft:	
  4745                           ; 1 bytes @ 0x8
  4746                           
  4747  00A8                     ?___awtoft:	
  4748                           ; 3 bytes @ 0x8
  4749                           
  4750  00A8                     ?___lltoft:	
  4751                           ; 3 bytes @ 0x8
  4752                           
  4753  00A8                     ___awtoft@c:	
  4754                           ; 3 bytes @ 0x8
  4755                           
  4756  00A8                     ___lmul@product:	
  4757                           ; 2 bytes @ 0x8
  4758                           
  4759  00A8                     ___altoft@c:	
  4760                           ; 4 bytes @ 0x8
  4761                           
  4762  00A8                     ___lltoft@c:	
  4763                           ; 4 bytes @ 0x8
  4764                           
  4765                           
  4766                           ; 4 bytes @ 0x8
  4767  00A8                     	ds	1
  4768  00A9                     ___aldiv@counter:	
  4769                           
  4770                           ; 1 bytes @ 0x9
  4771  00A9                     	ds	1
  4772  00AA                     ___aldiv@sign:	
  4773                           
  4774                           ; 1 bytes @ 0xA
  4775  00AA                     	ds	1
  4776  00AB                     ??___awtoft:	
  4777  00AB                     ___aldiv@quotient:	
  4778                           ; 1 bytes @ 0xB
  4779                           
  4780                           
  4781                           ; 4 bytes @ 0xB
  4782  00AB                     	ds	1
  4783  00AC                     ?_wait_ms:	
  4784  00AC                     ??___altoft:	
  4785                           ; 1 bytes @ 0xC
  4786                           
  4787  00AC                     ??___lltoft:	
  4788                           ; 1 bytes @ 0xC
  4789                           
  4790  00AC                     wait_ms@timeSec:	
  4791                           ; 1 bytes @ 0xC
  4792                           
  4793                           
  4794                           ; 2 bytes @ 0xC
  4795  00AC                     	ds	1
  4796  00AD                     ___awtoft@sign:	
  4797  00AD                     ___lltoft@exp:	
  4798                           ; 1 bytes @ 0xD
  4799                           
  4800                           
  4801                           ; 1 bytes @ 0xD
  4802  00AD                     	ds	1
  4803  00AE                     ??_wait_ms:	
  4804  00AE                     ?___ftmul:	
  4805                           ; 1 bytes @ 0xE
  4806                           
  4807  00AE                     ___altoft@exp:	
  4808                           ; 3 bytes @ 0xE
  4809                           
  4810  00AE                     ___ftmul@f1:	
  4811                           ; 1 bytes @ 0xE
  4812                           
  4813  00AE                     wait_ms@timemsl:	
  4814                           ; 3 bytes @ 0xE
  4815                           
  4816                           
  4817                           ; 4 bytes @ 0xE
  4818  00AE                     	ds	1
  4819  00AF                     ___altoft@sign:	
  4820                           
  4821                           ; 1 bytes @ 0xF
  4822  00AF                     	ds	2
  4823  00B1                     ___ftmul@f2:	
  4824                           
  4825                           ; 3 bytes @ 0x11
  4826  00B1                     	ds	1
  4827  00B2                     ??_read_bottom_tactile:	
  4828  00B2                     ??_read_top_tactile:	
  4829                           ; 1 bytes @ 0x12
  4830                           
  4831  00B2                     ??_solidring_tactiles:	
  4832                           ; 1 bytes @ 0x12
  4833                           
  4834  00B2                     ??_ring_tactiles:	
  4835                           ; 1 bytes @ 0x12
  4836                           
  4837  00B2                     ?_setSwitchBypassRelays:	
  4838                           ; 1 bytes @ 0x12
  4839                           
  4840  00B2                     setSwitchBypassRelays@f_state:	
  4841                           ; 1 bytes @ 0x12
  4842                           
  4843                           
  4844                           ; 2 bytes @ 0x12
  4845  00B2                     	ds	1
  4846  00B3                     ring_tactiles@iLed:	
  4847                           
  4848                           ; 2 bytes @ 0x13
  4849  00B3                     	ds	1
  4850  00B4                     ??_setSwitchBypassRelays:	
  4851  00B4                     ??___ftmul:	
  4852                           ; 1 bytes @ 0x14
  4853                           
  4854  00B4                     solidring_tactiles@ring_delay:	
  4855                           ; 1 bytes @ 0x14
  4856                           
  4857                           
  4858                           ; 1 bytes @ 0x14
  4859  00B4                     	ds	1
  4860  00B5                     ring_tactiles@iLed_1548:	
  4861                           
  4862                           ; 2 bytes @ 0x15
  4863  00B5                     	ds	1
  4864  00B6                     ?_setSwitchBypassState:	
  4865  00B6                     setSwitchBypassState@f_state:	
  4866                           ; 1 bytes @ 0x16
  4867                           
  4868                           
  4869                           ; 2 bytes @ 0x16
  4870  00B6                     	ds	1
  4871  00B7                     ??_showSave:	
  4872                           
  4873                           ; 1 bytes @ 0x17
  4874  00B7                     	ds	1
  4875  00B8                     ??_setSwitchBypassState:	
  4876  00B8                     ?_setDoublePressState:	
  4877                           ; 1 bytes @ 0x18
  4878                           
  4879  00B8                     ___ftmul@exp:	
  4880                           ; 1 bytes @ 0x18
  4881                           
  4882  00B8                     setDoublePressState@f_state:	
  4883                           ; 1 bytes @ 0x18
  4884                           
  4885                           
  4886                           ; 2 bytes @ 0x18
  4887  00B8                     	ds	1
  4888  00B9                     ___ftmul@f3_as_product:	
  4889                           
  4890                           ; 3 bytes @ 0x19
  4891  00B9                     	ds	1
  4892  00BA                     ??_initSwitchBypass:	
  4893  00BA                     ??_setDoublePressState:	
  4894                           ; 1 bytes @ 0x1A
  4895                           
  4896  00BA                     initSwitchBypass@initState:	
  4897                           ; 1 bytes @ 0x1A
  4898                           
  4899                           
  4900                           ; 2 bytes @ 0x1A
  4901  00BA                     	ds	2
  4902  00BC                     ??_updateSwitchBypass:	
  4903  00BC                     ??_updateSwitchTap:	
  4904                           ; 1 bytes @ 0x1C
  4905                           
  4906  00BC                     ___ftmul@cntr:	
  4907                           ; 1 bytes @ 0x1C
  4908                           
  4909                           
  4910                           ; 1 bytes @ 0x1C
  4911  00BC                     	ds	1
  4912  00BD                     ___ftmul@sign:	
  4913                           
  4914                           ; 1 bytes @ 0x1D
  4915  00BD                     	ds	1
  4916  00BE                     ?___ftneg:	
  4917  00BE                     ___ftneg@f1:	
  4918                           ; 3 bytes @ 0x1E
  4919                           
  4920                           
  4921                           ; 3 bytes @ 0x1E
  4922  00BE                     	ds	3
  4923  00C1                     ??___ftneg:	
  4924  00C1                     ?___ftadd:	
  4925                           ; 1 bytes @ 0x21
  4926                           
  4927  00C1                     ___ftadd@f1:	
  4928                           ; 3 bytes @ 0x21
  4929                           
  4930                           
  4931                           ; 3 bytes @ 0x21
  4932  00C1                     	ds	1
  4933  00C2                     updateSwitchTap@tapCntDivisor:	
  4934                           
  4935                           ; 2 bytes @ 0x22
  4936  00C2                     	ds	2
  4937  00C4                     updateSwitchTap@iCnt:	
  4938  00C4                     ___ftadd@f2:	
  4939                           ; 1 bytes @ 0x24
  4940                           
  4941                           
  4942                           ; 3 bytes @ 0x24
  4943  00C4                     	ds	3
  4944  00C7                     ??___ftadd:	
  4945                           
  4946                           ; 1 bytes @ 0x27
  4947  00C7                     	ds	4
  4948  00CB                     ___ftadd@sign:	
  4949                           
  4950                           ; 1 bytes @ 0x2B
  4951  00CB                     	ds	1
  4952  00CC                     ___ftadd@exp2:	
  4953                           
  4954                           ; 1 bytes @ 0x2C
  4955  00CC                     	ds	1
  4956  00CD                     ___ftadd@exp1:	
  4957                           
  4958                           ; 1 bytes @ 0x2D
  4959  00CD                     	ds	1
  4960  00CE                     ?___ftdiv:	
  4961  00CE                     ___ftdiv@f2:	
  4962                           ; 3 bytes @ 0x2E
  4963                           
  4964                           
  4965                           ; 3 bytes @ 0x2E
  4966  00CE                     	ds	3
  4967  00D1                     ___ftdiv@f1:	
  4968                           
  4969                           ; 3 bytes @ 0x31
  4970  00D1                     	ds	3
  4971  00D4                     ??___ftdiv:	
  4972                           
  4973                           ; 1 bytes @ 0x34
  4974  00D4                     	ds	4
  4975  00D8                     ___ftdiv@cntr:	
  4976                           
  4977                           ; 1 bytes @ 0x38
  4978  00D8                     	ds	1
  4979  00D9                     ___ftdiv@f3:	
  4980                           
  4981                           ; 3 bytes @ 0x39
  4982  00D9                     	ds	3
  4983  00DC                     ___ftdiv@exp:	
  4984                           
  4985                           ; 1 bytes @ 0x3C
  4986  00DC                     	ds	1
  4987  00DD                     ___ftdiv@sign:	
  4988                           
  4989                           ; 1 bytes @ 0x3D
  4990  00DD                     	ds	1
  4991  00DE                     ?_map:	
  4992  00DE                     map@x:	
  4993                           ; 3 bytes @ 0x3E
  4994                           
  4995                           
  4996                           ; 3 bytes @ 0x3E
  4997  00DE                     	ds	3
  4998  00E1                     map@in_min:	
  4999                           
  5000                           ; 3 bytes @ 0x41
  5001  00E1                     	ds	3
  5002  00E4                     map@in_max:	
  5003                           
  5004                           ; 3 bytes @ 0x44
  5005  00E4                     	ds	3
  5006  00E7                     map@out_min:	
  5007                           
  5008                           ; 3 bytes @ 0x47
  5009  00E7                     	ds	3
  5010  00EA                     map@out_max:	
  5011                           
  5012                           ; 3 bytes @ 0x4A
  5013  00EA                     	ds	3
  5014  00ED                     ??_map:	
  5015  00ED                     _map$2864:	
  5016                           ; 1 bytes @ 0x4D
  5017                           
  5018                           
  5019                           ; 3 bytes @ 0x4D
  5020  00ED                     	ds	3
  5021  00F0                     ??_scaleA10kPot:	
  5022  00F0                     ??_scaleiA10kPot:	
  5023                           ; 1 bytes @ 0x50
  5024                           
  5025  00F0                     ??_scaleA100kPot:	
  5026                           ; 1 bytes @ 0x50
  5027                           
  5028  00F0                     ??_set_subdivision:	
  5029                           ; 1 bytes @ 0x50
  5030                           
  5031  00F0                     ??_getModulationDelayTime:	
  5032                           ; 1 bytes @ 0x50
  5033                           
  5034  00F0                     ??_cos:	
  5035                           ; 1 bytes @ 0x50
  5036                           
  5037  00F0                     ??_modTri:	
  5038                           ; 1 bytes @ 0x50
  5039                           
  5040  00F0                     ??_modSquare:	
  5041                           ; 1 bytes @ 0x50
  5042                           
  5043  00F0                     ??_modSaw:	
  5044                           ; 1 bytes @ 0x50
  5045                           
  5046  00F0                     ??_eval_poly:	
  5047                           ; 1 bytes @ 0x50
  5048                           
  5049  00F0                     ??___wmul:	
  5050                           ; 1 bytes @ 0x50
  5051                           
  5052  00F0                     ??___ftsub:	
  5053                           ; 1 bytes @ 0x50
  5054                           
  5055                           
  5056                           	psect	cstackCOMMON
  5057  0070                     __pcstackCOMMON:	
  5058                           ; 1 bytes @ 0x50
  5059                           
  5060  0070                     ?_calcCosArray:	
  5061  0070                     ?_ConfigureOscillator:	
  5062                           ; 1 bytes @ 0x0
  5063                           
  5064  0070                     ?_InitApp:	
  5065                           ; 1 bytes @ 0x0
  5066                           
  5067  0070                     ?_InitializeTaps:	
  5068                           ; 1 bytes @ 0x0
  5069                           
  5070  0070                     ?_initSwitchBypass:	
  5071                           ; 1 bytes @ 0x0
  5072                           
  5073  0070                     ?_ReadSavedSettings:	
  5074                           ; 1 bytes @ 0x0
  5075                           
  5076  0070                     ?_update_mode:	
  5077                           ; 1 bytes @ 0x0
  5078                           
  5079  0070                     ?_update_selectMode:	
  5080                           ; 1 bytes @ 0x0
  5081                           
  5082  0070                     ?_updateSwitchBypass:	
  5083                           ; 1 bytes @ 0x0
  5084                           
  5085  0070                     ?_updateSwitchTap:	
  5086                           ; 1 bytes @ 0x0
  5087                           
  5088  0070                     ?_read_bottom_tactile:	
  5089                           ; 1 bytes @ 0x0
  5090                           
  5091  0070                     ?_read_top_tactile:	
  5092                           ; 1 bytes @ 0x0
  5093                           
  5094  0070                     ?_getModulationDelayTime:	
  5095                           ; 1 bytes @ 0x0
  5096                           
  5097  0070                     ?_updateModulationArray:	
  5098                           ; 1 bytes @ 0x0
  5099                           
  5100  0070                     ?_init_adc:	
  5101                           ; 1 bytes @ 0x0
  5102                           
  5103  0070                     ?_init_pwm:	
  5104                           ; 1 bytes @ 0x0
  5105                           
  5106  0070                     ?_init_timer2:	
  5107                           ; 1 bytes @ 0x0
  5108                           
  5109  0070                     ?_init_timer0:	
  5110                           ; 1 bytes @ 0x0
  5111                           
  5112  0070                     ?_solidring_tactiles:	
  5113                           ; 1 bytes @ 0x0
  5114                           
  5115  0070                     ?_ring_tactiles:	
  5116                           ; 1 bytes @ 0x0
  5117                           
  5118  0070                     ?_resetRingLEDs:	
  5119                           ; 1 bytes @ 0x0
  5120                           
  5121  0070                     ?_setPedalMode:	
  5122                           ; 1 bytes @ 0x0
  5123                           
  5124  0070                     ?_setPresetDisplay:	
  5125                           ; 1 bytes @ 0x0
  5126                           
  5127  0070                     ?_setExpressionDisplay:	
  5128                           ; 1 bytes @ 0x0
  5129                           
  5130  0070                     ?_isr:	
  5131                           ; 1 bytes @ 0x0
  5132                           
  5133  0070                     ?_main:	
  5134                           ; 1 bytes @ 0x0
  5135                           
  5136  0070                     ?_showSave:	
  5137                           ; 1 bytes @ 0x0
  5138                           
  5139  0070                     ?i1_set_leds_top:	
  5140                           ; 1 bytes @ 0x0
  5141                           
  5142  0070                     ?i1_getModulationSubdivision:	
  5143                           ; 1 bytes @ 0x0
  5144                           
  5145  0070                     ?i1___awdiv:	
  5146                           ; 2 bytes @ 0x0
  5147                           
  5148  0070                     ?i1___lmul:	
  5149                           ; 2 bytes @ 0x0
  5150                           
  5151  0070                     i1set_leds_top@x:	
  5152                           ; 4 bytes @ 0x0
  5153                           
  5154  0070                     i1___awdiv@divisor:	
  5155                           ; 2 bytes @ 0x0
  5156                           
  5157  0070                     i1___lmul@multiplier:	
  5158                           ; 2 bytes @ 0x0
  5159                           
  5160                           
  5161                           ; 4 bytes @ 0x0
  5162  0070                     	ds	2
  5163  0072                     ??i1_getModulationSubdivision:	
  5164  0072                     i1set_leds_top@ledState:	
  5165                           ; 1 bytes @ 0x2
  5166                           
  5167  0072                     i1___awdiv@dividend:	
  5168                           ; 2 bytes @ 0x2
  5169                           
  5170                           
  5171                           ; 2 bytes @ 0x2
  5172  0072                     	ds	2
  5173  0074                     ??i1_set_leds_top:	
  5174  0074                     ??i1___awdiv:	
  5175                           ; 1 bytes @ 0x4
  5176                           
  5177  0074                     i1___lmul@multiplicand:	
  5178                           ; 1 bytes @ 0x4
  5179                           
  5180                           
  5181                           ; 4 bytes @ 0x4
  5182  0074                     	ds	1
  5183  0075                     i1___awdiv@counter:	
  5184                           
  5185                           ; 1 bytes @ 0x5
  5186  0075                     	ds	1
  5187  0076                     i1___awdiv@sign:	
  5188                           
  5189                           ; 1 bytes @ 0x6
  5190  0076                     	ds	1
  5191  0077                     i1___awdiv@quotient:	
  5192                           
  5193                           ; 2 bytes @ 0x7
  5194  0077                     	ds	1
  5195  0078                     ??i1___lmul:	
  5196  0078                     i1___lmul@product:	
  5197                           ; 1 bytes @ 0x8
  5198                           
  5199                           
  5200                           ; 4 bytes @ 0x8
  5201  0078                     	ds	4
  5202  007C                     ??i1___aldiv:	
  5203                           
  5204                           ; 1 bytes @ 0xC
  5205  007C                     	ds	1
  5206  007D                     isr@subDiv:	
  5207                           
  5208                           ; 1 bytes @ 0xD
  5209  007D                     	ds	1
  5210                           
  5211                           	psect	cstackBANK0
  5212  0020                     __pcstackBANK0:	
  5213  0020                     ?i1___aldiv:	
  5214  0020                     i1___aldiv@divisor:	
  5215                           ; 4 bytes @ 0x0
  5216                           
  5217                           
  5218                           ; 4 bytes @ 0x0
  5219  0020                     	ds	4
  5220  0024                     i1___aldiv@dividend:	
  5221                           
  5222                           ; 4 bytes @ 0x4
  5223  0024                     	ds	4
  5224  0028                     i1___aldiv@counter:	
  5225                           
  5226                           ; 1 bytes @ 0x8
  5227  0028                     	ds	1
  5228  0029                     i1___aldiv@sign:	
  5229                           
  5230                           ; 1 bytes @ 0x9
  5231  0029                     	ds	1
  5232  002A                     i1___aldiv@quotient:	
  5233                           
  5234                           ; 4 bytes @ 0xA
  5235  002A                     	ds	4
  5236  002E                     ?_modulation:	
  5237  002E                     modulation@x:	
  5238                           ; 4 bytes @ 0xE
  5239                           
  5240                           
  5241                           ; 4 bytes @ 0xE
  5242  002E                     	ds	4
  5243  0032                     modulation@y:	
  5244                           
  5245                           ; 4 bytes @ 0x12
  5246  0032                     	ds	4
  5247  0036                     ??_modulation:	
  5248                           
  5249                           ; 1 bytes @ 0x16
  5250  0036                     	ds	4
  5251  003A                     ??_isr:	
  5252                           
  5253                           ; 1 bytes @ 0x1A
  5254  003A                     	ds	6
  5255                           
  5256                           	psect	maintext
  5257  0B64                     __pmaintext:	
  5258 ;;
  5259 ;;Main: autosize = 0, tempsize = 8, incstack = 0, save=0
  5260 ;;
  5261 ;; *************** function _main *****************
  5262 ;; Defined at:
  5263 ;;		line 69 in file "main.c"
  5264 ;; Parameters:    Size  Location     Type
  5265 ;;		None
  5266 ;; Auto vars:     Size  Location     Type
  5267 ;;		None
  5268 ;; Return value:  Size  Location     Type
  5269 ;;                  1    wreg      void 
  5270 ;; Registers used:
  5271 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5272 ;; Tracked objects:
  5273 ;;		On entry : B1F/0
  5274 ;;		On exit  : 0/0
  5275 ;;		Unchanged: 0/0
  5276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  5277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5278 ;;      Locals:         0       0       0       0       0       0       9       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5279 ;;      Temps:          0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5280 ;;      Totals:         0       0       0       0       0       8       9       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5281 ;;Total ram usage:       17 bytes
  5282 ;; Hardware stack levels required when called:    9
  5283 ;; This function calls:
  5284 ;;		_ConfigureOscillator
  5285 ;;		_InitApp
  5286 ;;		_InitializeTaps
  5287 ;;		_ReadSavedSettings
  5288 ;;		_USARTInit
  5289 ;;		___awtoft
  5290 ;;		___fttol
  5291 ;;		_adc_convert
  5292 ;;		_calcCosArray
  5293 ;;		_getModulationDelayTime
  5294 ;;		_initSwitchBypass
  5295 ;;		_map
  5296 ;;		_read_bottom_tactile
  5297 ;;		_read_top_tactile
  5298 ;;		_scaleA100kPot
  5299 ;;		_scaleA10kPot
  5300 ;;		_scaleiA10kPot
  5301 ;;		_set_subdivision
  5302 ;;		_updateModulationArray
  5303 ;;		_updateSwitchBypass
  5304 ;;		_updateSwitchTap
  5305 ;;		_update_mode
  5306 ;;		_update_selectMode
  5307 ;; This function is called by:
  5308 ;;		Startup code after reset
  5309 ;; This function uses a non-reentrant model
  5310 ;;
  5311                           
  5312                           
  5313                           ;psect for function _main
  5314  0B64                     _main:	
  5315                           
  5316                           ;main.c: 70: LATBbits.LATB5 = 0;
  5317                           
  5318                           ;incstack = 0
  5319                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5320  0B64  0022               	movlb	2	; select bank2
  5321  0B65  128D               	bcf	13,5	;volatile
  5322                           
  5323                           ;main.c: 71: calcCosArray();
  5324  0B66  31A6  26FD  318B   	fcall	_calcCosArray
  5325                           
  5326                           ;main.c: 79: USARTInit(31250);
  5327  0B69  3012               	movlw	18
  5328  0B6A  0021               	movlb	1	; select bank1
  5329  0B6B  00A0               	movwf	USARTInit@baud_rate^(0+128)
  5330  0B6C  307A               	movlw	122
  5331  0B6D  00A1               	movwf	(USARTInit@baud_rate^(0+128)+1)
  5332  0B6E  31A2  227F  318B   	fcall	_USARTInit
  5333                           
  5334                           ;main.c: 80: ConfigureOscillator();
  5335  0B71  31AC  24A0  318B   	fcall	_ConfigureOscillator
  5336                           
  5337                           ;main.c: 81: InitApp();
  5338  0B74  31AF  2738  318B   	fcall	_InitApp
  5339                           
  5340                           ;main.c: 83: PORTEbits.RE0 = 1;
  5341  0B77  0020               	movlb	0	; select bank0
  5342  0B78  1410               	bsf	16,0	;volatile
  5343                           
  5344                           ;main.c: 84: PORTEbits.RE1 = 1;
  5345  0B79  1490               	bsf	16,1	;volatile
  5346                           
  5347                           ;main.c: 85: PORTDbits.RD6 = 1;
  5348  0B7A  170F               	bsf	15,6	;volatile
  5349                           
  5350                           ;main.c: 86: PORTDbits.RD5 = 1;
  5351  0B7B  168F               	bsf	15,5	;volatile
  5352                           
  5353                           ;main.c: 87: PORTCbits.RC0 = 1;
  5354  0B7C  140E               	bsf	14,0	;volatile
  5355                           
  5356                           ;main.c: 88: PORTDbits.RD7 = 1;
  5357  0B7D  178F               	bsf	15,7	;volatile
  5358                           
  5359                           ;main.c: 92: InitializeTaps();
  5360  0B7E  3188  2002  318B   	fcall	_InitializeTaps
  5361                           
  5362                           ;main.c: 93: initSwitchBypass();
  5363  0B81  31AC  24E0  318B   	fcall	_initSwitchBypass
  5364                           
  5365                           ;main.c: 96: ReadSavedSettings();
  5366  0B84  31A6  260A  318B   	fcall	_ReadSavedSettings
  5367                           
  5368                           ;main.c: 97: LATBbits.LATB5 = 0;
  5369  0B87  0022               	movlb	2	; select bank2
  5370  0B88  128D               	bcf	13,5	;volatile
  5371  0B89                     l9376:	
  5372                           ;main.c: 98: while (1) {
  5373                           
  5374                           
  5375                           ;main.c: 101: update_mode();
  5376  0B89  3198  2000  318B   	fcall	_update_mode
  5377                           
  5378                           ;main.c: 102: update_selectMode();
  5379  0B8C  3187  27A0  318B   	fcall	_update_selectMode
  5380                           
  5381                           ;main.c: 105: updateSwitchBypass();
  5382  0B8F  3191  21C9  318B   	fcall	_updateSwitchBypass
  5383                           
  5384                           ;main.c: 106: if (presetSaveMode != 1) {
  5385  0B92  0020               	movlb	0	; select bank0
  5386  0B93  035E               	decf	_presetSaveMode,w
  5387  0B94  1903               	btfsc	3,2
  5388  0B95  2B99               	goto	l9386
  5389                           
  5390                           ;main.c: 107: updateSwitchTap();
  5391  0B96  3185  25B8  318B   	fcall	_updateSwitchTap
  5392  0B99                     l9386:	
  5393                           
  5394                           ;main.c: 108: }
  5395                           ;main.c: 110: if (presetSaveMode != 1 && mode2_state != presetModeCnst) {
  5396  0B99  0020               	movlb	0	; select bank0
  5397  0B9A  035E               	decf	_presetSaveMode,w
  5398  0B9B  1903               	btfsc	3,2
  5399  0B9C  2BA8               	goto	l9392
  5400  0B9D  085D               	movf	_mode2_state,w
  5401  0B9E  0023               	movlb	3	; select bank3
  5402  0B9F  0665               	xorwf	_presetModeCnst^(0+384),w
  5403  0BA0  1903               	skipnz
  5404  0BA1  2BA8               	goto	l9392
  5405                           
  5406                           ;main.c: 111: read_bottom_tactile();
  5407  0BA2  31A3  230B  318B   	fcall	_read_bottom_tactile
  5408                           
  5409                           ;main.c: 112: read_top_tactile();
  5410  0BA5  31A3  239E  318B   	fcall	_read_top_tactile
  5411  0BA8                     l9392:	
  5412                           
  5413                           ;main.c: 113: }
  5414                           ;main.c: 116: knob_1_pos = adc_convert(0);
  5415  0BA8  3000               	movlw	0
  5416  0BA9  31AD  2500  318B   	fcall	_adc_convert
  5417  0BAC  0021               	movlb	1	; select bank1
  5418  0BAD  0821               	movf	(?_adc_convert+1)^(0+128),w
  5419  0BAE  0023               	movlb	3	; select bank3
  5420  0BAF  00AD               	movwf	(_knob_1_pos+1)^(0+384)
  5421  0BB0  0021               	movlb	1	; select bank1
  5422  0BB1  0820               	movf	?_adc_convert^(0+128),w
  5423  0BB2  0023               	movlb	3	; select bank3
  5424  0BB3  00AC               	movwf	_knob_1_pos^(0+384)
  5425                           
  5426                           ;main.c: 117: knob_2_pos = adc_convert(1);
  5427  0BB4  3001               	movlw	1
  5428  0BB5  31AD  2500  318B   	fcall	_adc_convert
  5429  0BB8  0021               	movlb	1	; select bank1
  5430  0BB9  0821               	movf	(?_adc_convert+1)^(0+128),w
  5431  0BBA  0023               	movlb	3	; select bank3
  5432  0BBB  00AF               	movwf	(_knob_2_pos+1)^(0+384)
  5433  0BBC  0021               	movlb	1	; select bank1
  5434  0BBD  0820               	movf	?_adc_convert^(0+128),w
  5435  0BBE  0023               	movlb	3	; select bank3
  5436  0BBF  00AE               	movwf	_knob_2_pos^(0+384)
  5437                           
  5438                           ;main.c: 118: knob_3_pos = adc_convert(2);
  5439  0BC0  3002               	movlw	2
  5440  0BC1  31AD  2500  318B   	fcall	_adc_convert
  5441  0BC4  0021               	movlb	1	; select bank1
  5442  0BC5  0821               	movf	(?_adc_convert+1)^(0+128),w
  5443  0BC6  0023               	movlb	3	; select bank3
  5444  0BC7  00B1               	movwf	(_knob_3_pos+1)^(0+384)
  5445  0BC8  0021               	movlb	1	; select bank1
  5446  0BC9  0820               	movf	?_adc_convert^(0+128),w
  5447  0BCA  0023               	movlb	3	; select bank3
  5448  0BCB  00B0               	movwf	_knob_3_pos^(0+384)
  5449                           
  5450                           ;main.c: 119: knob_4_pos = adc_convert(3);
  5451  0BCC  3003               	movlw	3
  5452  0BCD  31AD  2500  318B   	fcall	_adc_convert
  5453  0BD0  0021               	movlb	1	; select bank1
  5454  0BD1  0821               	movf	(?_adc_convert+1)^(0+128),w
  5455  0BD2  0023               	movlb	3	; select bank3
  5456  0BD3  00B3               	movwf	(_knob_4_pos+1)^(0+384)
  5457  0BD4  0021               	movlb	1	; select bank1
  5458  0BD5  0820               	movf	?_adc_convert^(0+128),w
  5459  0BD6  0023               	movlb	3	; select bank3
  5460  0BD7  00B2               	movwf	_knob_4_pos^(0+384)
  5461                           
  5462                           ;main.c: 120: knob_5_pos = adc_convert(4);
  5463  0BD8  3004               	movlw	4
  5464  0BD9  31AD  2500  318B   	fcall	_adc_convert
  5465  0BDC  0021               	movlb	1	; select bank1
  5466  0BDD  0821               	movf	(?_adc_convert+1)^(0+128),w
  5467  0BDE  0023               	movlb	3	; select bank3
  5468  0BDF  00B5               	movwf	(_knob_5_pos+1)^(0+384)
  5469  0BE0  0021               	movlb	1	; select bank1
  5470  0BE1  0820               	movf	?_adc_convert^(0+128),w
  5471  0BE2  0023               	movlb	3	; select bank3
  5472  0BE3  00B4               	movwf	_knob_5_pos^(0+384)
  5473                           
  5474                           ;main.c: 124: if ((knob_1_pos - knob1_prev) >= 4 || (knob_1_pos - knob1_prev) <= -4) {
  5475  0BE4  094D               	comf	_knob1_prev^(0+384),w	;volatile
  5476  0BE5  0024               	movlb	4	; select bank4
  5477  0BE6  00E0               	movwf	??_main^(0+512)
  5478  0BE7  0023               	movlb	3	; select bank3
  5479  0BE8  094E               	comf	(_knob1_prev+1)^(0+384),w	;volatile
  5480  0BE9  0024               	movlb	4	; select bank4
  5481  0BEA  00E1               	movwf	(??_main^(0+512)+1)
  5482  0BEB  0AE0               	incf	??_main^(0+512),f
  5483  0BEC  1903               	skipnz
  5484  0BED  0AE1               	incf	(??_main^(0+512)+1),f
  5485  0BEE  0023               	movlb	3	; select bank3
  5486  0BEF  082C               	movf	_knob_1_pos^(0+384),w
  5487  0BF0  0024               	movlb	4	; select bank4
  5488  0BF1  0760               	addwf	??_main^(0+512),w
  5489  0BF2  00E2               	movwf	(??_main+2)^(0+512)
  5490  0BF3  0023               	movlb	3	; select bank3
  5491  0BF4  082D               	movf	(_knob_1_pos+1)^(0+384),w
  5492  0BF5  0024               	movlb	4	; select bank4
  5493  0BF6  3D61               	addwfc	(??_main+1)^(0+512),w
  5494  0BF7  00E3               	movwf	(??_main+3)^(0+512)
  5495  0BF8  0863               	movf	(??_main+3)^(0+512),w
  5496  0BF9  3A80               	xorlw	128
  5497  0BFA  00E4               	movwf	(??_main+4)^(0+512)
  5498  0BFB  3080               	movlw	128
  5499  0BFC  0264               	subwf	(??_main+4)^(0+512),w
  5500  0BFD  1D03               	skipz
  5501  0BFE  2C01               	goto	u10405
  5502  0BFF  3004               	movlw	4
  5503  0C00  0262               	subwf	(??_main+2)^(0+512),w
  5504  0C01                     u10405:	
  5505  0C01  1803               	skipnc
  5506  0C02  2C23               	goto	l9406
  5507  0C03  0023               	movlb	3	; select bank3
  5508  0C04  094D               	comf	_knob1_prev^(0+384),w	;volatile
  5509  0C05  0024               	movlb	4	; select bank4
  5510  0C06  00E0               	movwf	??_main^(0+512)
  5511  0C07  0023               	movlb	3	; select bank3
  5512  0C08  094E               	comf	(_knob1_prev+1)^(0+384),w	;volatile
  5513  0C09  0024               	movlb	4	; select bank4
  5514  0C0A  00E1               	movwf	(??_main^(0+512)+1)
  5515  0C0B  0AE0               	incf	??_main^(0+512),f
  5516  0C0C  1903               	skipnz
  5517  0C0D  0AE1               	incf	(??_main^(0+512)+1),f
  5518  0C0E  0023               	movlb	3	; select bank3
  5519  0C0F  082C               	movf	_knob_1_pos^(0+384),w
  5520  0C10  0024               	movlb	4	; select bank4
  5521  0C11  0760               	addwf	??_main^(0+512),w
  5522  0C12  00E2               	movwf	(??_main+2)^(0+512)
  5523  0C13  0023               	movlb	3	; select bank3
  5524  0C14  082D               	movf	(_knob_1_pos+1)^(0+384),w
  5525  0C15  0024               	movlb	4	; select bank4
  5526  0C16  3D61               	addwfc	(??_main+1)^(0+512),w
  5527  0C17  00E3               	movwf	(??_main+3)^(0+512)
  5528  0C18  0863               	movf	(??_main+3)^(0+512),w
  5529  0C19  3A80               	xorlw	128
  5530  0C1A  00E4               	movwf	(??_main+4)^(0+512)
  5531  0C1B  307F               	movlw	127
  5532  0C1C  0264               	subwf	(??_main+4)^(0+512),w
  5533  0C1D  1D03               	skipz
  5534  0C1E  2C21               	goto	u10415
  5535  0C1F  30FD               	movlw	253
  5536  0C20  0262               	subwf	(??_main+2)^(0+512),w
  5537  0C21                     u10415:	
  5538  0C21  1803               	skipnc
  5539  0C22  2C81               	goto	l9416
  5540  0C23                     l9406:	
  5541                           
  5542                           ;main.c: 125: knob1_prev = knob_1_pos;
  5543  0C23  0023               	movlb	3	; select bank3
  5544  0C24  082D               	movf	(_knob_1_pos+1)^(0+384),w
  5545  0C25  00CE               	movwf	(_knob1_prev+1)^(0+384)	;volatile
  5546  0C26  082C               	movf	_knob_1_pos^(0+384),w
  5547  0C27  00CD               	movwf	_knob1_prev^(0+384)	;volatile
  5548                           
  5549                           ;main.c: 126: CCPR4 = scaleA10kPot(knob1_prev);
  5550  0C28  084E               	movf	(_knob1_prev+1)^(0+384),w	;volatile
  5551  0C29  0021               	movlb	1	; select bank1
  5552  0C2A  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5553  0C2B  0023               	movlb	3	; select bank3
  5554  0C2C  084D               	movf	_knob1_prev^(0+384),w	;volatile
  5555  0C2D  0021               	movlb	1	; select bank1
  5556  0C2E  00A8               	movwf	___awtoft@c^(0+128)
  5557  0C2F  31AE  2610  318B   	fcall	___awtoft
  5558  0C32  0021               	movlb	1	; select bank1
  5559  0C33  0828               	movf	?___awtoft^(0+128),w
  5560  0C34  0025               	movlb	5	; select bank5
  5561  0C35  00CC               	movwf	_main$2861^(0+640)
  5562  0C36  0021               	movlb	1	; select bank1
  5563  0C37  0829               	movf	(?___awtoft+1)^(0+128),w
  5564  0C38  0025               	movlb	5	; select bank5
  5565  0C39  00CD               	movwf	(_main$2861+1)^(0+640)
  5566  0C3A  0021               	movlb	1	; select bank1
  5567  0C3B  082A               	movf	(?___awtoft+2)^(0+128),w
  5568  0C3C  0025               	movlb	5	; select bank5
  5569  0C3D  00CE               	movwf	(_main$2861+2)^(0+640)
  5570                           
  5571                           ;main.c: 126: CCPR4 = scaleA10kPot(knob1_prev);
  5572  0C3E  084C               	movf	_main$2861^(0+640),w
  5573  0C3F  0022               	movlb	2	; select bank2
  5574  0C40  00E7               	movwf	scaleA10kPot@input^(0+256)
  5575  0C41  0025               	movlb	5	; select bank5
  5576  0C42  084D               	movf	(_main$2861+1)^(0+640),w
  5577  0C43  0022               	movlb	2	; select bank2
  5578  0C44  00E8               	movwf	(scaleA10kPot@input+1)^(0+256)
  5579  0C45  0025               	movlb	5	; select bank5
  5580  0C46  084E               	movf	(_main$2861+2)^(0+640),w
  5581  0C47  0022               	movlb	2	; select bank2
  5582  0C48  00E9               	movwf	(scaleA10kPot@input+2)^(0+256)
  5583  0C49  319B  2373  318B   	fcall	_scaleA10kPot
  5584  0C4C  0022               	movlb	2	; select bank2
  5585  0C4D  0868               	movf	(?_scaleA10kPot+1)^(0+256),w
  5586  0C4E  0026               	movlb	6	; select bank6
  5587  0C4F  0099               	movwf	25	;volatile
  5588  0C50  0022               	movlb	2	; select bank2
  5589  0C51  0867               	movf	?_scaleA10kPot^(0+256),w
  5590  0C52  0026               	movlb	6	; select bank6
  5591  0C53  0098               	movwf	24	;volatile
  5592                           
  5593                           ;main.c: 127: CCPR5 = scaleiA10kPot(knob1_prev);
  5594  0C54  0023               	movlb	3	; select bank3
  5595  0C55  084E               	movf	(_knob1_prev+1)^(0+384),w	;volatile
  5596  0C56  0021               	movlb	1	; select bank1
  5597  0C57  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5598  0C58  0023               	movlb	3	; select bank3
  5599  0C59  084D               	movf	_knob1_prev^(0+384),w	;volatile
  5600  0C5A  0021               	movlb	1	; select bank1
  5601  0C5B  00A8               	movwf	___awtoft@c^(0+128)
  5602  0C5C  31AE  2610  318B   	fcall	___awtoft
  5603  0C5F  0021               	movlb	1	; select bank1
  5604  0C60  0828               	movf	?___awtoft^(0+128),w
  5605  0C61  0025               	movlb	5	; select bank5
  5606  0C62  00CF               	movwf	_main$2862^(0+640)
  5607  0C63  0021               	movlb	1	; select bank1
  5608  0C64  0829               	movf	(?___awtoft+1)^(0+128),w
  5609  0C65  0025               	movlb	5	; select bank5
  5610  0C66  00D0               	movwf	(_main$2862+1)^(0+640)
  5611  0C67  0021               	movlb	1	; select bank1
  5612  0C68  082A               	movf	(?___awtoft+2)^(0+128),w
  5613  0C69  0025               	movlb	5	; select bank5
  5614  0C6A  00D1               	movwf	(_main$2862+2)^(0+640)
  5615                           
  5616                           ;main.c: 127: CCPR5 = scaleiA10kPot(knob1_prev);
  5617  0C6B  084F               	movf	_main$2862^(0+640),w
  5618  0C6C  0022               	movlb	2	; select bank2
  5619  0C6D  00E7               	movwf	scaleiA10kPot@input^(0+256)
  5620  0C6E  0025               	movlb	5	; select bank5
  5621  0C6F  0850               	movf	(_main$2862+1)^(0+640),w
  5622  0C70  0022               	movlb	2	; select bank2
  5623  0C71  00E8               	movwf	(scaleiA10kPot@input+1)^(0+256)
  5624  0C72  0025               	movlb	5	; select bank5
  5625  0C73  0851               	movf	(_main$2862+2)^(0+640),w
  5626  0C74  0022               	movlb	2	; select bank2
  5627  0C75  00E9               	movwf	(scaleiA10kPot@input+2)^(0+256)
  5628  0C76  319D  256E  318B   	fcall	_scaleiA10kPot
  5629  0C79  0022               	movlb	2	; select bank2
  5630  0C7A  0868               	movf	(?_scaleiA10kPot+1)^(0+256),w
  5631  0C7B  0026               	movlb	6	; select bank6
  5632  0C7C  009D               	movwf	29	;volatile
  5633  0C7D  0022               	movlb	2	; select bank2
  5634  0C7E  0867               	movf	?_scaleiA10kPot^(0+256),w
  5635  0C7F  0026               	movlb	6	; select bank6
  5636  0C80  009C               	movwf	28	;volatile
  5637  0C81                     l9416:	
  5638                           
  5639                           ;main.c: 129: }
  5640                           ;main.c: 133: if (knob_2_pos - knob2_prev >= 4 || knob_2_pos - knob2_prev <= -4) {
  5641  0C81  0023               	movlb	3	; select bank3
  5642  0C82  094F               	comf	_knob2_prev^(0+384),w	;volatile
  5643  0C83  0024               	movlb	4	; select bank4
  5644  0C84  00E0               	movwf	??_main^(0+512)
  5645  0C85  0023               	movlb	3	; select bank3
  5646  0C86  0950               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5647  0C87  0024               	movlb	4	; select bank4
  5648  0C88  00E1               	movwf	(??_main^(0+512)+1)
  5649  0C89  0AE0               	incf	??_main^(0+512),f
  5650  0C8A  1903               	skipnz
  5651  0C8B  0AE1               	incf	(??_main^(0+512)+1),f
  5652  0C8C  0023               	movlb	3	; select bank3
  5653  0C8D  082E               	movf	_knob_2_pos^(0+384),w
  5654  0C8E  0024               	movlb	4	; select bank4
  5655  0C8F  0760               	addwf	??_main^(0+512),w
  5656  0C90  00E2               	movwf	(??_main+2)^(0+512)
  5657  0C91  0023               	movlb	3	; select bank3
  5658  0C92  082F               	movf	(_knob_2_pos+1)^(0+384),w
  5659  0C93  0024               	movlb	4	; select bank4
  5660  0C94  3D61               	addwfc	(??_main+1)^(0+512),w
  5661  0C95  00E3               	movwf	(??_main+3)^(0+512)
  5662  0C96  0863               	movf	(??_main+3)^(0+512),w
  5663  0C97  3A80               	xorlw	128
  5664  0C98  00E4               	movwf	(??_main+4)^(0+512)
  5665  0C99  3080               	movlw	128
  5666  0C9A  0264               	subwf	(??_main+4)^(0+512),w
  5667  0C9B  1D03               	skipz
  5668  0C9C  2C9F               	goto	u10425
  5669  0C9D  3004               	movlw	4
  5670  0C9E  0262               	subwf	(??_main+2)^(0+512),w
  5671  0C9F                     u10425:	
  5672  0C9F  1803               	skipnc
  5673  0CA0  2CC1               	goto	l9420
  5674  0CA1  0023               	movlb	3	; select bank3
  5675  0CA2  094F               	comf	_knob2_prev^(0+384),w	;volatile
  5676  0CA3  0024               	movlb	4	; select bank4
  5677  0CA4  00E0               	movwf	??_main^(0+512)
  5678  0CA5  0023               	movlb	3	; select bank3
  5679  0CA6  0950               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5680  0CA7  0024               	movlb	4	; select bank4
  5681  0CA8  00E1               	movwf	(??_main^(0+512)+1)
  5682  0CA9  0AE0               	incf	??_main^(0+512),f
  5683  0CAA  1903               	skipnz
  5684  0CAB  0AE1               	incf	(??_main^(0+512)+1),f
  5685  0CAC  0023               	movlb	3	; select bank3
  5686  0CAD  082E               	movf	_knob_2_pos^(0+384),w
  5687  0CAE  0024               	movlb	4	; select bank4
  5688  0CAF  0760               	addwf	??_main^(0+512),w
  5689  0CB0  00E2               	movwf	(??_main+2)^(0+512)
  5690  0CB1  0023               	movlb	3	; select bank3
  5691  0CB2  082F               	movf	(_knob_2_pos+1)^(0+384),w
  5692  0CB3  0024               	movlb	4	; select bank4
  5693  0CB4  3D61               	addwfc	(??_main+1)^(0+512),w
  5694  0CB5  00E3               	movwf	(??_main+3)^(0+512)
  5695  0CB6  0863               	movf	(??_main+3)^(0+512),w
  5696  0CB7  3A80               	xorlw	128
  5697  0CB8  00E4               	movwf	(??_main+4)^(0+512)
  5698  0CB9  307F               	movlw	127
  5699  0CBA  0264               	subwf	(??_main+4)^(0+512),w
  5700  0CBB  1D03               	skipz
  5701  0CBC  2CBF               	goto	u10435
  5702  0CBD  30FD               	movlw	253
  5703  0CBE  0262               	subwf	(??_main+2)^(0+512),w
  5704  0CBF                     u10435:	
  5705  0CBF  1803               	skipnc
  5706  0CC0  2D37               	goto	l370
  5707  0CC1                     l9420:	
  5708                           
  5709                           ;main.c: 134: knob2_prev = knob_2_pos;
  5710  0CC1  0023               	movlb	3	; select bank3
  5711  0CC2  082F               	movf	(_knob_2_pos+1)^(0+384),w
  5712  0CC3  00D0               	movwf	(_knob2_prev+1)^(0+384)	;volatile
  5713  0CC4  082E               	movf	_knob_2_pos^(0+384),w
  5714  0CC5  00CF               	movwf	_knob2_prev^(0+384)	;volatile
  5715                           
  5716                           ;main.c: 135: CCPR1 = scaleA100kPot(1023-knob2_prev);
  5717  0CC6  094F               	comf	_knob2_prev^(0+384),w	;volatile
  5718  0CC7  0024               	movlb	4	; select bank4
  5719  0CC8  00E0               	movwf	??_main^(0+512)
  5720  0CC9  0023               	movlb	3	; select bank3
  5721  0CCA  0950               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5722  0CCB  0024               	movlb	4	; select bank4
  5723  0CCC  00E1               	movwf	(??_main^(0+512)+1)
  5724  0CCD  0AE0               	incf	??_main^(0+512),f
  5725  0CCE  1903               	skipnz
  5726  0CCF  0AE1               	incf	(??_main^(0+512)+1),f
  5727  0CD0  0860               	movf	??_main^(0+512),w
  5728  0CD1  3EFF               	addlw	255
  5729  0CD2  0021               	movlb	1	; select bank1
  5730  0CD3  00A8               	movwf	___awtoft@c^(0+128)
  5731  0CD4  3003               	movlw	3
  5732  0CD5  0024               	movlb	4	; select bank4
  5733  0CD6  3D61               	addwfc	(??_main+1)^(0+512),w
  5734  0CD7  0021               	movlb	1	; select bank1
  5735  0CD8  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5736  0CD9  31AE  2610  318B   	fcall	___awtoft
  5737  0CDC  0021               	movlb	1	; select bank1
  5738  0CDD  0828               	movf	?___awtoft^(0+128),w
  5739  0CDE  0025               	movlb	5	; select bank5
  5740  0CDF  00D2               	movwf	_main$2863^(0+640)
  5741  0CE0  0021               	movlb	1	; select bank1
  5742  0CE1  0829               	movf	(?___awtoft+1)^(0+128),w
  5743  0CE2  0025               	movlb	5	; select bank5
  5744  0CE3  00D3               	movwf	(_main$2863+1)^(0+640)
  5745  0CE4  0021               	movlb	1	; select bank1
  5746  0CE5  082A               	movf	(?___awtoft+2)^(0+128),w
  5747  0CE6  0025               	movlb	5	; select bank5
  5748  0CE7  00D4               	movwf	(_main$2863+2)^(0+640)
  5749                           
  5750                           ;main.c: 135: CCPR1 = scaleA100kPot(1023-knob2_prev);
  5751  0CE8  0852               	movf	_main$2863^(0+640),w
  5752  0CE9  0022               	movlb	2	; select bank2
  5753  0CEA  00E7               	movwf	scaleA100kPot@input^(0+256)
  5754  0CEB  0025               	movlb	5	; select bank5
  5755  0CEC  0853               	movf	(_main$2863+1)^(0+640),w
  5756  0CED  0022               	movlb	2	; select bank2
  5757  0CEE  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
  5758  0CEF  0025               	movlb	5	; select bank5
  5759  0CF0  0854               	movf	(_main$2863+2)^(0+640),w
  5760  0CF1  0022               	movlb	2	; select bank2
  5761  0CF2  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
  5762  0CF3  3198  20BA  318B   	fcall	_scaleA100kPot
  5763  0CF6  0022               	movlb	2	; select bank2
  5764  0CF7  0868               	movf	(?_scaleA100kPot+1)^(0+256),w
  5765  0CF8  0025               	movlb	5	; select bank5
  5766  0CF9  0092               	movwf	18	;volatile
  5767  0CFA  0022               	movlb	2	; select bank2
  5768  0CFB  0867               	movf	?_scaleA100kPot^(0+256),w
  5769  0CFC  0025               	movlb	5	; select bank5
  5770  0CFD  0091               	movwf	17	;volatile
  5771                           
  5772                           ;main.c: 136: CCPR2 = scaleA100kPot(1023-knob2_prev);
  5773  0CFE  0023               	movlb	3	; select bank3
  5774  0CFF  094F               	comf	_knob2_prev^(0+384),w	;volatile
  5775  0D00  0024               	movlb	4	; select bank4
  5776  0D01  00E0               	movwf	??_main^(0+512)
  5777  0D02  0023               	movlb	3	; select bank3
  5778  0D03  0950               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5779  0D04  0024               	movlb	4	; select bank4
  5780  0D05  00E1               	movwf	(??_main^(0+512)+1)
  5781  0D06  0AE0               	incf	??_main^(0+512),f
  5782  0D07  1903               	skipnz
  5783  0D08  0AE1               	incf	(??_main^(0+512)+1),f
  5784  0D09  0860               	movf	??_main^(0+512),w
  5785  0D0A  3EFF               	addlw	255
  5786  0D0B  0021               	movlb	1	; select bank1
  5787  0D0C  00A8               	movwf	___awtoft@c^(0+128)
  5788  0D0D  3003               	movlw	3
  5789  0D0E  0024               	movlb	4	; select bank4
  5790  0D0F  3D61               	addwfc	(??_main+1)^(0+512),w
  5791  0D10  0021               	movlb	1	; select bank1
  5792  0D11  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5793  0D12  31AE  2610  318B   	fcall	___awtoft
  5794  0D15  0021               	movlb	1	; select bank1
  5795  0D16  0828               	movf	?___awtoft^(0+128),w
  5796  0D17  0025               	movlb	5	; select bank5
  5797  0D18  00D2               	movwf	_main$2863^(0+640)
  5798  0D19  0021               	movlb	1	; select bank1
  5799  0D1A  0829               	movf	(?___awtoft+1)^(0+128),w
  5800  0D1B  0025               	movlb	5	; select bank5
  5801  0D1C  00D3               	movwf	(_main$2863+1)^(0+640)
  5802  0D1D  0021               	movlb	1	; select bank1
  5803  0D1E  082A               	movf	(?___awtoft+2)^(0+128),w
  5804  0D1F  0025               	movlb	5	; select bank5
  5805  0D20  00D4               	movwf	(_main$2863+2)^(0+640)
  5806                           
  5807                           ;main.c: 136: CCPR2 = scaleA100kPot(1023-knob2_prev);
  5808  0D21  0852               	movf	_main$2863^(0+640),w
  5809  0D22  0022               	movlb	2	; select bank2
  5810  0D23  00E7               	movwf	scaleA100kPot@input^(0+256)
  5811  0D24  0025               	movlb	5	; select bank5
  5812  0D25  0853               	movf	(_main$2863+1)^(0+640),w
  5813  0D26  0022               	movlb	2	; select bank2
  5814  0D27  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
  5815  0D28  0025               	movlb	5	; select bank5
  5816  0D29  0854               	movf	(_main$2863+2)^(0+640),w
  5817  0D2A  0022               	movlb	2	; select bank2
  5818  0D2B  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
  5819  0D2C  3198  20BA  318B   	fcall	_scaleA100kPot
  5820  0D2F  0022               	movlb	2	; select bank2
  5821  0D30  0868               	movf	(?_scaleA100kPot+1)^(0+256),w
  5822  0D31  0025               	movlb	5	; select bank5
  5823  0D32  0099               	movwf	25	;volatile
  5824  0D33  0022               	movlb	2	; select bank2
  5825  0D34  0867               	movf	?_scaleA100kPot^(0+256),w
  5826  0D35  0025               	movlb	5	; select bank5
  5827  0D36  0098               	movwf	24	;volatile
  5828  0D37                     l370:	
  5829                           
  5830                           ;main.c: 137: }
  5831                           ;main.c: 147: oldSymmetry = symmetry;
  5832  0D37  0023               	movlb	3	; select bank3
  5833  0D38  085C               	movf	(_symmetry+1)^(0+384),w
  5834  0D39  0024               	movlb	4	; select bank4
  5835  0D3A  00D8               	movwf	(_oldSymmetry+1)^(0+512)
  5836  0D3B  0023               	movlb	3	; select bank3
  5837  0D3C  085B               	movf	_symmetry^(0+384),w
  5838  0D3D  0024               	movlb	4	; select bank4
  5839  0D3E  00D7               	movwf	_oldSymmetry^(0+512)
  5840                           
  5841                           ;main.c: 148: if (knob_3_pos - knob3_prev >= 4 || knob_3_pos - knob3_prev <= -4) {
  5842  0D3F  0023               	movlb	3	; select bank3
  5843  0D40  0951               	comf	_knob3_prev^(0+384),w	;volatile
  5844  0D41  0024               	movlb	4	; select bank4
  5845  0D42  00E0               	movwf	??_main^(0+512)
  5846  0D43  0023               	movlb	3	; select bank3
  5847  0D44  0952               	comf	(_knob3_prev+1)^(0+384),w	;volatile
  5848  0D45  0024               	movlb	4	; select bank4
  5849  0D46  00E1               	movwf	(??_main^(0+512)+1)
  5850  0D47  0AE0               	incf	??_main^(0+512),f
  5851  0D48  1903               	skipnz
  5852  0D49  0AE1               	incf	(??_main^(0+512)+1),f
  5853  0D4A  0023               	movlb	3	; select bank3
  5854  0D4B  0830               	movf	_knob_3_pos^(0+384),w
  5855  0D4C  0024               	movlb	4	; select bank4
  5856  0D4D  0760               	addwf	??_main^(0+512),w
  5857  0D4E  00E2               	movwf	(??_main+2)^(0+512)
  5858  0D4F  0023               	movlb	3	; select bank3
  5859  0D50  0831               	movf	(_knob_3_pos+1)^(0+384),w
  5860  0D51  0024               	movlb	4	; select bank4
  5861  0D52  3D61               	addwfc	(??_main+1)^(0+512),w
  5862  0D53  00E3               	movwf	(??_main+3)^(0+512)
  5863  0D54  0863               	movf	(??_main+3)^(0+512),w
  5864  0D55  3A80               	xorlw	128
  5865  0D56  00E4               	movwf	(??_main+4)^(0+512)
  5866  0D57  3080               	movlw	128
  5867  0D58  0264               	subwf	(??_main+4)^(0+512),w
  5868  0D59  1D03               	skipz
  5869  0D5A  2D5D               	goto	u10445
  5870  0D5B  3004               	movlw	4
  5871  0D5C  0262               	subwf	(??_main+2)^(0+512),w
  5872  0D5D                     u10445:	
  5873  0D5D  1803               	skipnc
  5874  0D5E  2D7F               	goto	l9434
  5875  0D5F  0023               	movlb	3	; select bank3
  5876  0D60  0951               	comf	_knob3_prev^(0+384),w	;volatile
  5877  0D61  0024               	movlb	4	; select bank4
  5878  0D62  00E0               	movwf	??_main^(0+512)
  5879  0D63  0023               	movlb	3	; select bank3
  5880  0D64  0952               	comf	(_knob3_prev+1)^(0+384),w	;volatile
  5881  0D65  0024               	movlb	4	; select bank4
  5882  0D66  00E1               	movwf	(??_main^(0+512)+1)
  5883  0D67  0AE0               	incf	??_main^(0+512),f
  5884  0D68  1903               	skipnz
  5885  0D69  0AE1               	incf	(??_main^(0+512)+1),f
  5886  0D6A  0023               	movlb	3	; select bank3
  5887  0D6B  0830               	movf	_knob_3_pos^(0+384),w
  5888  0D6C  0024               	movlb	4	; select bank4
  5889  0D6D  0760               	addwf	??_main^(0+512),w
  5890  0D6E  00E2               	movwf	(??_main+2)^(0+512)
  5891  0D6F  0023               	movlb	3	; select bank3
  5892  0D70  0831               	movf	(_knob_3_pos+1)^(0+384),w
  5893  0D71  0024               	movlb	4	; select bank4
  5894  0D72  3D61               	addwfc	(??_main+1)^(0+512),w
  5895  0D73  00E3               	movwf	(??_main+3)^(0+512)
  5896  0D74  0863               	movf	(??_main+3)^(0+512),w
  5897  0D75  3A80               	xorlw	128
  5898  0D76  00E4               	movwf	(??_main+4)^(0+512)
  5899  0D77  307F               	movlw	127
  5900  0D78  0264               	subwf	(??_main+4)^(0+512),w
  5901  0D79  1D03               	skipz
  5902  0D7A  2D7D               	goto	u10455
  5903  0D7B  30FD               	movlw	253
  5904  0D7C  0262               	subwf	(??_main+2)^(0+512),w
  5905  0D7D                     u10455:	
  5906  0D7D  1803               	skipnc
  5907  0D7E  2DC9               	goto	l9438
  5908  0D7F                     l9434:	
  5909                           
  5910                           ;main.c: 149: knob3_prev = knob_3_pos;
  5911  0D7F  0023               	movlb	3	; select bank3
  5912  0D80  0831               	movf	(_knob_3_pos+1)^(0+384),w
  5913  0D81  00D2               	movwf	(_knob3_prev+1)^(0+384)	;volatile
  5914  0D82  0830               	movf	_knob_3_pos^(0+384),w
  5915  0D83  00D1               	movwf	_knob3_prev^(0+384)	;volatile
  5916                           
  5917                           ;main.c: 150: symmetry = (int) map(knob3_prev, 0, 1023, 45, 315);
  5918  0D84  3080               	movlw	128
  5919  0D85  0021               	movlb	1	; select bank1
  5920  0D86  00EA               	movwf	map@out_max^(0+128)
  5921  0D87  309D               	movlw	157
  5922  0D88  00EB               	movwf	(map@out_max+1)^(0+128)
  5923  0D89  3043               	movlw	67
  5924  0D8A  00EC               	movwf	(map@out_max+2)^(0+128)
  5925  0D8B  3000               	movlw	0
  5926  0D8C  00E7               	movwf	map@out_min^(0+128)
  5927  0D8D  3034               	movlw	52
  5928  0D8E  00E8               	movwf	(map@out_min+1)^(0+128)
  5929  0D8F  3042               	movlw	66
  5930  0D90  00E9               	movwf	(map@out_min+2)^(0+128)
  5931  0D91  30C0               	movlw	192
  5932  0D92  00E4               	movwf	map@in_max^(0+128)
  5933  0D93  307F               	movlw	127
  5934  0D94  00E5               	movwf	(map@in_max+1)^(0+128)
  5935  0D95  3044               	movlw	68
  5936  0D96  00E6               	movwf	(map@in_max+2)^(0+128)
  5937  0D97  3000               	movlw	0
  5938  0D98  00E1               	movwf	map@in_min^(0+128)
  5939  0D99  3000               	movlw	0
  5940  0D9A  00E2               	movwf	(map@in_min+1)^(0+128)
  5941  0D9B  3000               	movlw	0
  5942  0D9C  00E3               	movwf	(map@in_min+2)^(0+128)
  5943  0D9D  0023               	movlb	3	; select bank3
  5944  0D9E  0852               	movf	(_knob3_prev+1)^(0+384),w	;volatile
  5945  0D9F  0021               	movlb	1	; select bank1
  5946  0DA0  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5947  0DA1  0023               	movlb	3	; select bank3
  5948  0DA2  0851               	movf	_knob3_prev^(0+384),w	;volatile
  5949  0DA3  0021               	movlb	1	; select bank1
  5950  0DA4  00A8               	movwf	___awtoft@c^(0+128)
  5951  0DA5  31AE  2610  318B   	fcall	___awtoft
  5952  0DA8  0021               	movlb	1	; select bank1
  5953  0DA9  0828               	movf	?___awtoft^(0+128),w
  5954  0DAA  00DE               	movwf	map@x^(0+128)
  5955  0DAB  0829               	movf	(?___awtoft+1)^(0+128),w
  5956  0DAC  00DF               	movwf	(map@x+1)^(0+128)
  5957  0DAD  082A               	movf	(?___awtoft+2)^(0+128),w
  5958  0DAE  00E0               	movwf	(map@x+2)^(0+128)
  5959  0DAF  3199  21C6  318B   	fcall	_map
  5960  0DB2  0021               	movlb	1	; select bank1
  5961  0DB3  085E               	movf	?_map^(0+128),w
  5962  0DB4  0022               	movlb	2	; select bank2
  5963  0DB5  00A0               	movwf	___fttol@f1^(0+256)
  5964  0DB6  0021               	movlb	1	; select bank1
  5965  0DB7  085F               	movf	(?_map+1)^(0+128),w
  5966  0DB8  0022               	movlb	2	; select bank2
  5967  0DB9  00A1               	movwf	(___fttol@f1+1)^(0+256)
  5968  0DBA  0021               	movlb	1	; select bank1
  5969  0DBB  0860               	movf	(?_map+2)^(0+128),w
  5970  0DBC  0022               	movlb	2	; select bank2
  5971  0DBD  00A2               	movwf	(___fttol@f1+2)^(0+256)
  5972  0DBE  3199  213F  318B   	fcall	___fttol
  5973  0DC1  0022               	movlb	2	; select bank2
  5974  0DC2  0821               	movf	(?___fttol^(0+256)+1),w
  5975  0DC3  0023               	movlb	3	; select bank3
  5976  0DC4  00DC               	movwf	(_symmetry+1)^(0+384)
  5977  0DC5  0022               	movlb	2	; select bank2
  5978  0DC6  0820               	movf	?___fttol^(0+256),w
  5979  0DC7  0023               	movlb	3	; select bank3
  5980  0DC8  00DB               	movwf	_symmetry^(0+384)
  5981  0DC9                     l9438:	
  5982                           
  5983                           ;main.c: 157: }
  5984                           ;main.c: 159: if (oldSymmetry - symmetry >= 2 || oldSymmetry - symmetry <= -2) {
  5985  0DC9  0023               	movlb	3	; select bank3
  5986  0DCA  095B               	comf	_symmetry^(0+384),w
  5987  0DCB  0024               	movlb	4	; select bank4
  5988  0DCC  00E0               	movwf	??_main^(0+512)
  5989  0DCD  0023               	movlb	3	; select bank3
  5990  0DCE  095C               	comf	(_symmetry+1)^(0+384),w
  5991  0DCF  0024               	movlb	4	; select bank4
  5992  0DD0  00E1               	movwf	(??_main^(0+512)+1)
  5993  0DD1  0AE0               	incf	??_main^(0+512),f
  5994  0DD2  1903               	skipnz
  5995  0DD3  0AE1               	incf	(??_main^(0+512)+1),f
  5996  0DD4  0857               	movf	_oldSymmetry^(0+512),w
  5997  0DD5  0760               	addwf	??_main^(0+512),w
  5998  0DD6  00E2               	movwf	(??_main+2)^(0+512)
  5999  0DD7  0858               	movf	(_oldSymmetry+1)^(0+512),w
  6000  0DD8  3D61               	addwfc	(??_main+1)^(0+512),w
  6001  0DD9  00E3               	movwf	(??_main+3)^(0+512)
  6002  0DDA  0863               	movf	(??_main+3)^(0+512),w
  6003  0DDB  3A80               	xorlw	128
  6004  0DDC  00E4               	movwf	(??_main+4)^(0+512)
  6005  0DDD  3080               	movlw	128
  6006  0DDE  0264               	subwf	(??_main+4)^(0+512),w
  6007  0DDF  1D03               	skipz
  6008  0DE0  2DE3               	goto	u10465
  6009  0DE1  3002               	movlw	2
  6010  0DE2  0262               	subwf	(??_main+2)^(0+512),w
  6011  0DE3                     u10465:	
  6012  0DE3  1803               	skipnc
  6013  0DE4  2E01               	goto	l378
  6014  0DE5  0023               	movlb	3	; select bank3
  6015  0DE6  095B               	comf	_symmetry^(0+384),w
  6016  0DE7  0024               	movlb	4	; select bank4
  6017  0DE8  00E0               	movwf	??_main^(0+512)
  6018  0DE9  0023               	movlb	3	; select bank3
  6019  0DEA  095C               	comf	(_symmetry+1)^(0+384),w
  6020  0DEB  0024               	movlb	4	; select bank4
  6021  0DEC  00E1               	movwf	(??_main^(0+512)+1)
  6022  0DED  0AE0               	incf	??_main^(0+512),f
  6023  0DEE  1903               	skipnz
  6024  0DEF  0AE1               	incf	(??_main^(0+512)+1),f
  6025  0DF0  0857               	movf	_oldSymmetry^(0+512),w
  6026  0DF1  0760               	addwf	??_main^(0+512),w
  6027  0DF2  00E2               	movwf	(??_main+2)^(0+512)
  6028  0DF3  0858               	movf	(_oldSymmetry+1)^(0+512),w
  6029  0DF4  3D61               	addwfc	(??_main+1)^(0+512),w
  6030  0DF5  00E3               	movwf	(??_main+3)^(0+512)
  6031  0DF6  0863               	movf	(??_main+3)^(0+512),w
  6032  0DF7  3A80               	xorlw	128
  6033  0DF8  00E4               	movwf	(??_main+4)^(0+512)
  6034  0DF9  307F               	movlw	127
  6035  0DFA  0264               	subwf	(??_main+4)^(0+512),w
  6036  0DFB  1D03               	skipz
  6037  0DFC  2DFF               	goto	u10475
  6038  0DFD  30FF               	movlw	255
  6039  0DFE  0262               	subwf	(??_main+2)^(0+512),w
  6040  0DFF                     u10475:	
  6041  0DFF  1803               	skipnc
  6042  0E00  2E04               	goto	l9442
  6043  0E01                     l378:	
  6044                           
  6045                           ;main.c: 161: modulation_changed = 1;
  6046  0E01  0023               	movlb	3	; select bank3
  6047  0E02  01C6               	clrf	_modulation_changed^(0+384)
  6048  0E03  0AC6               	incf	_modulation_changed^(0+384),f
  6049  0E04                     l9442:	
  6050                           
  6051                           ;main.c: 162: }
  6052                           ;main.c: 171: oldBaseTime = baseline_mod_time;
  6053  0E04  0020               	movlb	0	; select bank0
  6054  0E05  0841               	movf	_baseline_mod_time+1,w	;volatile
  6055  0E06  0024               	movlb	4	; select bank4
  6056  0E07  00D6               	movwf	(_oldBaseTime+1)^(0+512)
  6057  0E08  0020               	movlb	0	; select bank0
  6058  0E09  0840               	movf	_baseline_mod_time,w	;volatile
  6059  0E0A  0024               	movlb	4	; select bank4
  6060  0E0B  00D5               	movwf	_oldBaseTime^(0+512)
  6061                           
  6062                           ;main.c: 172: if (knob_4_pos - knob4_prev >= 4 || knob_4_pos - knob4_prev <= -4) {
  6063  0E0C  0023               	movlb	3	; select bank3
  6064  0E0D  0953               	comf	_knob4_prev^(0+384),w	;volatile
  6065  0E0E  0024               	movlb	4	; select bank4
  6066  0E0F  00E0               	movwf	??_main^(0+512)
  6067  0E10  0023               	movlb	3	; select bank3
  6068  0E11  0954               	comf	(_knob4_prev+1)^(0+384),w	;volatile
  6069  0E12  0024               	movlb	4	; select bank4
  6070  0E13  00E1               	movwf	(??_main^(0+512)+1)
  6071  0E14  0AE0               	incf	??_main^(0+512),f
  6072  0E15  1903               	skipnz
  6073  0E16  0AE1               	incf	(??_main^(0+512)+1),f
  6074  0E17  0023               	movlb	3	; select bank3
  6075  0E18  0832               	movf	_knob_4_pos^(0+384),w
  6076  0E19  0024               	movlb	4	; select bank4
  6077  0E1A  0760               	addwf	??_main^(0+512),w
  6078  0E1B  00E2               	movwf	(??_main+2)^(0+512)
  6079  0E1C  0023               	movlb	3	; select bank3
  6080  0E1D  0833               	movf	(_knob_4_pos+1)^(0+384),w
  6081  0E1E  0024               	movlb	4	; select bank4
  6082  0E1F  3D61               	addwfc	(??_main+1)^(0+512),w
  6083  0E20  00E3               	movwf	(??_main+3)^(0+512)
  6084  0E21  0863               	movf	(??_main+3)^(0+512),w
  6085  0E22  3A80               	xorlw	128
  6086  0E23  00E4               	movwf	(??_main+4)^(0+512)
  6087  0E24  3080               	movlw	128
  6088  0E25  0264               	subwf	(??_main+4)^(0+512),w
  6089  0E26  1D03               	skipz
  6090  0E27  2E2A               	goto	u10485
  6091  0E28  3004               	movlw	4
  6092  0E29  0262               	subwf	(??_main+2)^(0+512),w
  6093  0E2A                     u10485:	
  6094  0E2A  1803               	skipnc
  6095  0E2B  2E4C               	goto	l9448
  6096  0E2C  0023               	movlb	3	; select bank3
  6097  0E2D  0953               	comf	_knob4_prev^(0+384),w	;volatile
  6098  0E2E  0024               	movlb	4	; select bank4
  6099  0E2F  00E0               	movwf	??_main^(0+512)
  6100  0E30  0023               	movlb	3	; select bank3
  6101  0E31  0954               	comf	(_knob4_prev+1)^(0+384),w	;volatile
  6102  0E32  0024               	movlb	4	; select bank4
  6103  0E33  00E1               	movwf	(??_main^(0+512)+1)
  6104  0E34  0AE0               	incf	??_main^(0+512),f
  6105  0E35  1903               	skipnz
  6106  0E36  0AE1               	incf	(??_main^(0+512)+1),f
  6107  0E37  0023               	movlb	3	; select bank3
  6108  0E38  0832               	movf	_knob_4_pos^(0+384),w
  6109  0E39  0024               	movlb	4	; select bank4
  6110  0E3A  0760               	addwf	??_main^(0+512),w
  6111  0E3B  00E2               	movwf	(??_main+2)^(0+512)
  6112  0E3C  0023               	movlb	3	; select bank3
  6113  0E3D  0833               	movf	(_knob_4_pos+1)^(0+384),w
  6114  0E3E  0024               	movlb	4	; select bank4
  6115  0E3F  3D61               	addwfc	(??_main+1)^(0+512),w
  6116  0E40  00E3               	movwf	(??_main+3)^(0+512)
  6117  0E41  0863               	movf	(??_main+3)^(0+512),w
  6118  0E42  3A80               	xorlw	128
  6119  0E43  00E4               	movwf	(??_main+4)^(0+512)
  6120  0E44  307F               	movlw	127
  6121  0E45  0264               	subwf	(??_main+4)^(0+512),w
  6122  0E46  1D03               	skipz
  6123  0E47  2E4A               	goto	u10495
  6124  0E48  30FD               	movlw	253
  6125  0E49  0262               	subwf	(??_main+2)^(0+512),w
  6126  0E4A                     u10495:	
  6127  0E4A  1803               	skipnc
  6128  0E4B  2E9B               	goto	l9452
  6129  0E4C                     l9448:	
  6130                           
  6131                           ;main.c: 173: knob4_prev = knob_4_pos;
  6132  0E4C  0023               	movlb	3	; select bank3
  6133  0E4D  0833               	movf	(_knob_4_pos+1)^(0+384),w
  6134  0E4E  00D4               	movwf	(_knob4_prev+1)^(0+384)	;volatile
  6135  0E4F  0832               	movf	_knob_4_pos^(0+384),w
  6136  0E50  00D3               	movwf	_knob4_prev^(0+384)	;volatile
  6137                           
  6138                           ;main.c: 174: baseline_mod_time = (int)map(knob4_prev, 0, 1023, 180, 2820);
  6139  0E51  3040               	movlw	64
  6140  0E52  0021               	movlb	1	; select bank1
  6141  0E53  00EA               	movwf	map@out_max^(0+128)
  6142  0E54  3030               	movlw	48
  6143  0E55  00EB               	movwf	(map@out_max+1)^(0+128)
  6144  0E56  3045               	movlw	69
  6145  0E57  00EC               	movwf	(map@out_max+2)^(0+128)
  6146  0E58  3000               	movlw	0
  6147  0E59  00E7               	movwf	map@out_min^(0+128)
  6148  0E5A  3034               	movlw	52
  6149  0E5B  00E8               	movwf	(map@out_min+1)^(0+128)
  6150  0E5C  3043               	movlw	67
  6151  0E5D  00E9               	movwf	(map@out_min+2)^(0+128)
  6152  0E5E  30C0               	movlw	192
  6153  0E5F  00E4               	movwf	map@in_max^(0+128)
  6154  0E60  307F               	movlw	127
  6155  0E61  00E5               	movwf	(map@in_max+1)^(0+128)
  6156  0E62  3044               	movlw	68
  6157  0E63  00E6               	movwf	(map@in_max+2)^(0+128)
  6158  0E64  3000               	movlw	0
  6159  0E65  00E1               	movwf	map@in_min^(0+128)
  6160  0E66  3000               	movlw	0
  6161  0E67  00E2               	movwf	(map@in_min+1)^(0+128)
  6162  0E68  3000               	movlw	0
  6163  0E69  00E3               	movwf	(map@in_min+2)^(0+128)
  6164  0E6A  0023               	movlb	3	; select bank3
  6165  0E6B  0854               	movf	(_knob4_prev+1)^(0+384),w	;volatile
  6166  0E6C  0021               	movlb	1	; select bank1
  6167  0E6D  00A9               	movwf	(___awtoft@c+1)^(0+128)
  6168  0E6E  0023               	movlb	3	; select bank3
  6169  0E6F  0853               	movf	_knob4_prev^(0+384),w	;volatile
  6170  0E70  0021               	movlb	1	; select bank1
  6171  0E71  00A8               	movwf	___awtoft@c^(0+128)
  6172  0E72  31AE  2610  318B   	fcall	___awtoft
  6173  0E75  0021               	movlb	1	; select bank1
  6174  0E76  0828               	movf	?___awtoft^(0+128),w
  6175  0E77  00DE               	movwf	map@x^(0+128)
  6176  0E78  0829               	movf	(?___awtoft+1)^(0+128),w
  6177  0E79  00DF               	movwf	(map@x+1)^(0+128)
  6178  0E7A  082A               	movf	(?___awtoft+2)^(0+128),w
  6179  0E7B  00E0               	movwf	(map@x+2)^(0+128)
  6180  0E7C  3199  21C6  318B   	fcall	_map
  6181  0E7F  0021               	movlb	1	; select bank1
  6182  0E80  085E               	movf	?_map^(0+128),w
  6183  0E81  0022               	movlb	2	; select bank2
  6184  0E82  00A0               	movwf	___fttol@f1^(0+256)
  6185  0E83  0021               	movlb	1	; select bank1
  6186  0E84  085F               	movf	(?_map+1)^(0+128),w
  6187  0E85  0022               	movlb	2	; select bank2
  6188  0E86  00A1               	movwf	(___fttol@f1+1)^(0+256)
  6189  0E87  0021               	movlb	1	; select bank1
  6190  0E88  0860               	movf	(?_map+2)^(0+128),w
  6191  0E89  0022               	movlb	2	; select bank2
  6192  0E8A  00A2               	movwf	(___fttol@f1+2)^(0+256)
  6193  0E8B  3199  213F  318B   	fcall	___fttol
  6194  0E8E  0022               	movlb	2	; select bank2
  6195  0E8F  0820               	movf	?___fttol^(0+256),w
  6196  0E90  0020               	movlb	0	; select bank0
  6197  0E91  00C0               	movwf	_baseline_mod_time	;volatile
  6198  0E92  0022               	movlb	2	; select bank2
  6199  0E93  0821               	movf	(?___fttol^(0+256)+1),w
  6200  0E94  0020               	movlb	0	; select bank0
  6201  0E95  00C1               	movwf	_baseline_mod_time+1	;volatile
  6202  0E96  0D89               	rlf	9,f
  6203  0E97  3B89               	subwfb	9,f
  6204  0E98  0989               	comf	9,f
  6205  0E99  00C2               	movwf	_baseline_mod_time+2	;volatile
  6206  0E9A  00C3               	movwf	_baseline_mod_time+3	;volatile
  6207  0E9B                     l9452:	
  6208                           
  6209                           ;main.c: 175: }
  6210                           ;main.c: 177: if (oldBaseTime - baseline_mod_time >= 1 || oldBaseTime - baseline_mod_tim
      +                          e <= -1) {
  6211  0E9B  0020               	movlb	0	; select bank0
  6212  0E9C  0940               	comf	_baseline_mod_time,w	;volatile
  6213  0E9D  0024               	movlb	4	; select bank4
  6214  0E9E  00E0               	movwf	??_main^(0+512)
  6215  0E9F  0020               	movlb	0	; select bank0
  6216  0EA0  0941               	comf	_baseline_mod_time+1,w	;volatile
  6217  0EA1  0024               	movlb	4	; select bank4
  6218  0EA2  00E1               	movwf	(??_main^(0+512)+1)
  6219  0EA3  0020               	movlb	0	; select bank0
  6220  0EA4  0942               	comf	_baseline_mod_time+2,w	;volatile
  6221  0EA5  0024               	movlb	4	; select bank4
  6222  0EA6  00E2               	movwf	(??_main^(0+512)+2)
  6223  0EA7  0020               	movlb	0	; select bank0
  6224  0EA8  0943               	comf	_baseline_mod_time+3,w	;volatile
  6225  0EA9  0024               	movlb	4	; select bank4
  6226  0EAA  00E3               	movwf	(??_main^(0+512)+3)
  6227  0EAB  0AE0               	incf	??_main^(0+512),f
  6228  0EAC  1903               	skipnz
  6229  0EAD  0AE1               	incf	(??_main^(0+512)+1),f
  6230  0EAE  1903               	skipnz
  6231  0EAF  0AE2               	incf	(??_main^(0+512)+2),f
  6232  0EB0  1903               	skipnz
  6233  0EB1  0AE3               	incf	(??_main^(0+512)+3),f
  6234  0EB2  0855               	movf	_oldBaseTime^(0+512),w
  6235  0EB3  00E4               	movwf	(??_main+4)^(0+512)
  6236  0EB4  0856               	movf	(_oldBaseTime+1)^(0+512),w
  6237  0EB5  00E5               	movwf	((??_main+4)^(0+512)+1)
  6238  0EB6  3000               	movlw	0
  6239  0EB7  1BE5               	btfsc	((??_main+4)^(0+512)+1),7
  6240  0EB8  30FF               	movlw	255
  6241  0EB9  00E6               	movwf	((??_main+4)^(0+512)+2)
  6242  0EBA  00E7               	movwf	((??_main+4)^(0+512)+3)
  6243  0EBB  0864               	movf	(??_main+4)^(0+512),w
  6244  0EBC  07E0               	addwf	??_main^(0+512),f
  6245  0EBD  0865               	movf	(??_main+5)^(0+512),w
  6246  0EBE  3DE1               	addwfc	(??_main^(0+512)+1),f
  6247  0EBF  0866               	movf	(??_main+6)^(0+512),w
  6248  0EC0  3DE2               	addwfc	(??_main^(0+512)+2),f
  6249  0EC1  0867               	movf	(??_main+7)^(0+512),w
  6250  0EC2  3DE3               	addwfc	(??_main^(0+512)+3),f
  6251  0EC3  1BE3               	btfsc	(??_main^(0+512)+3),7
  6252  0EC4  2ED2               	goto	l9454
  6253  0EC5  0863               	movf	(??_main^(0+512)+3),w
  6254  0EC6  1D03               	btfss	3,2
  6255  0EC7  2EFC               	goto	l384
  6256  0EC8  0862               	movf	(??_main^(0+512)+2),w
  6257  0EC9  1D03               	btfss	3,2
  6258  0ECA  2EFC               	goto	l384
  6259  0ECB  0861               	movf	(??_main^(0+512)+1),w
  6260  0ECC  1D03               	btfss	3,2
  6261  0ECD  2EFC               	goto	l384
  6262  0ECE  3001               	movlw	1
  6263  0ECF  0260               	subwf	??_main^(0+512),w
  6264  0ED0  1803               	btfsc	3,0
  6265  0ED1  2EFC               	goto	l384
  6266  0ED2                     l9454:	
  6267  0ED2  0020               	movlb	0	; select bank0
  6268  0ED3  0940               	comf	_baseline_mod_time,w	;volatile
  6269  0ED4  0024               	movlb	4	; select bank4
  6270  0ED5  00E0               	movwf	??_main^(0+512)
  6271  0ED6  0020               	movlb	0	; select bank0
  6272  0ED7  0941               	comf	_baseline_mod_time+1,w	;volatile
  6273  0ED8  0024               	movlb	4	; select bank4
  6274  0ED9  00E1               	movwf	(??_main^(0+512)+1)
  6275  0EDA  0020               	movlb	0	; select bank0
  6276  0EDB  0942               	comf	_baseline_mod_time+2,w	;volatile
  6277  0EDC  0024               	movlb	4	; select bank4
  6278  0EDD  00E2               	movwf	(??_main^(0+512)+2)
  6279  0EDE  0020               	movlb	0	; select bank0
  6280  0EDF  0943               	comf	_baseline_mod_time+3,w	;volatile
  6281  0EE0  0024               	movlb	4	; select bank4
  6282  0EE1  00E3               	movwf	(??_main^(0+512)+3)
  6283  0EE2  0AE0               	incf	??_main^(0+512),f
  6284  0EE3  1903               	skipnz
  6285  0EE4  0AE1               	incf	(??_main^(0+512)+1),f
  6286  0EE5  1903               	skipnz
  6287  0EE6  0AE2               	incf	(??_main^(0+512)+2),f
  6288  0EE7  1903               	skipnz
  6289  0EE8  0AE3               	incf	(??_main^(0+512)+3),f
  6290  0EE9  0855               	movf	_oldBaseTime^(0+512),w
  6291  0EEA  00E4               	movwf	(??_main+4)^(0+512)
  6292  0EEB  0856               	movf	(_oldBaseTime+1)^(0+512),w
  6293  0EEC  00E5               	movwf	((??_main+4)^(0+512)+1)
  6294  0EED  3000               	movlw	0
  6295  0EEE  1BE5               	btfsc	((??_main+4)^(0+512)+1),7
  6296  0EEF  30FF               	movlw	255
  6297  0EF0  00E6               	movwf	((??_main+4)^(0+512)+2)
  6298  0EF1  00E7               	movwf	((??_main+4)^(0+512)+3)
  6299  0EF2  0864               	movf	(??_main+4)^(0+512),w
  6300  0EF3  07E0               	addwf	??_main^(0+512),f
  6301  0EF4  0865               	movf	(??_main+5)^(0+512),w
  6302  0EF5  3DE1               	addwfc	(??_main^(0+512)+1),f
  6303  0EF6  0866               	movf	(??_main+6)^(0+512),w
  6304  0EF7  3DE2               	addwfc	(??_main^(0+512)+2),f
  6305  0EF8  0867               	movf	(??_main+7)^(0+512),w
  6306  0EF9  3DE3               	addwfc	(??_main^(0+512)+3),f
  6307  0EFA  1FE3               	btfss	(??_main+3)^(0+512),7
  6308  0EFB  2EFF               	goto	l9456
  6309  0EFC                     l384:	
  6310                           
  6311                           ;main.c: 179: mod_time_changed = 1;
  6312  0EFC  0023               	movlb	3	; select bank3
  6313  0EFD  01E4               	clrf	_mod_time_changed^(0+384)
  6314  0EFE  0AE4               	incf	_mod_time_changed^(0+384),f
  6315  0EFF                     l9456:	
  6316                           
  6317                           ;main.c: 181: }
  6318                           ;main.c: 184: if (knob_5_pos - knob5_prev >= 4 || knob_5_pos - knob5_prev <= -4) {
  6319  0EFF  0023               	movlb	3	; select bank3
  6320  0F00  0955               	comf	_knob5_prev^(0+384),w	;volatile
  6321  0F01  0024               	movlb	4	; select bank4
  6322  0F02  00E0               	movwf	??_main^(0+512)
  6323  0F03  0023               	movlb	3	; select bank3
  6324  0F04  0956               	comf	(_knob5_prev+1)^(0+384),w	;volatile
  6325  0F05  0024               	movlb	4	; select bank4
  6326  0F06  00E1               	movwf	(??_main^(0+512)+1)
  6327  0F07  0AE0               	incf	??_main^(0+512),f
  6328  0F08  1903               	skipnz
  6329  0F09  0AE1               	incf	(??_main^(0+512)+1),f
  6330  0F0A  0023               	movlb	3	; select bank3
  6331  0F0B  0834               	movf	_knob_5_pos^(0+384),w
  6332  0F0C  0024               	movlb	4	; select bank4
  6333  0F0D  0760               	addwf	??_main^(0+512),w
  6334  0F0E  00E2               	movwf	(??_main+2)^(0+512)
  6335  0F0F  0023               	movlb	3	; select bank3
  6336  0F10  0835               	movf	(_knob_5_pos+1)^(0+384),w
  6337  0F11  0024               	movlb	4	; select bank4
  6338  0F12  3D61               	addwfc	(??_main+1)^(0+512),w
  6339  0F13  00E3               	movwf	(??_main+3)^(0+512)
  6340  0F14  0863               	movf	(??_main+3)^(0+512),w
  6341  0F15  3A80               	xorlw	128
  6342  0F16  00E4               	movwf	(??_main+4)^(0+512)
  6343  0F17  3080               	movlw	128
  6344  0F18  0264               	subwf	(??_main+4)^(0+512),w
  6345  0F19  1D03               	skipz
  6346  0F1A  2F1D               	goto	u10525
  6347  0F1B  3004               	movlw	4
  6348  0F1C  0262               	subwf	(??_main+2)^(0+512),w
  6349  0F1D                     u10525:	
  6350  0F1D  1803               	skipnc
  6351  0F1E  2F3F               	goto	l9460
  6352  0F1F  0023               	movlb	3	; select bank3
  6353  0F20  0955               	comf	_knob5_prev^(0+384),w	;volatile
  6354  0F21  0024               	movlb	4	; select bank4
  6355  0F22  00E0               	movwf	??_main^(0+512)
  6356  0F23  0023               	movlb	3	; select bank3
  6357  0F24  0956               	comf	(_knob5_prev+1)^(0+384),w	;volatile
  6358  0F25  0024               	movlb	4	; select bank4
  6359  0F26  00E1               	movwf	(??_main^(0+512)+1)
  6360  0F27  0AE0               	incf	??_main^(0+512),f
  6361  0F28  1903               	skipnz
  6362  0F29  0AE1               	incf	(??_main^(0+512)+1),f
  6363  0F2A  0023               	movlb	3	; select bank3
  6364  0F2B  0834               	movf	_knob_5_pos^(0+384),w
  6365  0F2C  0024               	movlb	4	; select bank4
  6366  0F2D  0760               	addwf	??_main^(0+512),w
  6367  0F2E  00E2               	movwf	(??_main+2)^(0+512)
  6368  0F2F  0023               	movlb	3	; select bank3
  6369  0F30  0835               	movf	(_knob_5_pos+1)^(0+384),w
  6370  0F31  0024               	movlb	4	; select bank4
  6371  0F32  3D61               	addwfc	(??_main+1)^(0+512),w
  6372  0F33  00E3               	movwf	(??_main+3)^(0+512)
  6373  0F34  0863               	movf	(??_main+3)^(0+512),w
  6374  0F35  3A80               	xorlw	128
  6375  0F36  00E4               	movwf	(??_main+4)^(0+512)
  6376  0F37  307F               	movlw	127
  6377  0F38  0264               	subwf	(??_main+4)^(0+512),w
  6378  0F39  1D03               	skipz
  6379  0F3A  2F3D               	goto	u10535
  6380  0F3B  30FD               	movlw	253
  6381  0F3C  0262               	subwf	(??_main+2)^(0+512),w
  6382  0F3D                     u10535:	
  6383  0F3D  1803               	skipnc
  6384  0F3E  2F89               	goto	l9464
  6385  0F3F                     l9460:	
  6386                           
  6387                           ;main.c: 185: knob5_prev = knob_5_pos;
  6388  0F3F  0023               	movlb	3	; select bank3
  6389  0F40  0835               	movf	(_knob_5_pos+1)^(0+384),w
  6390  0F41  00D6               	movwf	(_knob5_prev+1)^(0+384)	;volatile
  6391  0F42  0834               	movf	_knob_5_pos^(0+384),w
  6392  0F43  00D5               	movwf	_knob5_prev^(0+384)	;volatile
  6393                           
  6394                           ;main.c: 186: adjusted_pot_value = (int)map(knob5_prev, 0, 1023, 1275, 0);
  6395  0F44  3000               	movlw	0
  6396  0F45  0021               	movlb	1	; select bank1
  6397  0F46  00EA               	movwf	map@out_max^(0+128)
  6398  0F47  3000               	movlw	0
  6399  0F48  00EB               	movwf	(map@out_max+1)^(0+128)
  6400  0F49  3000               	movlw	0
  6401  0F4A  00EC               	movwf	(map@out_max+2)^(0+128)
  6402  0F4B  3060               	movlw	96
  6403  0F4C  00E7               	movwf	map@out_min^(0+128)
  6404  0F4D  309F               	movlw	159
  6405  0F4E  00E8               	movwf	(map@out_min+1)^(0+128)
  6406  0F4F  3044               	movlw	68
  6407  0F50  00E9               	movwf	(map@out_min+2)^(0+128)
  6408  0F51  30C0               	movlw	192
  6409  0F52  00E4               	movwf	map@in_max^(0+128)
  6410  0F53  307F               	movlw	127
  6411  0F54  00E5               	movwf	(map@in_max+1)^(0+128)
  6412  0F55  3044               	movlw	68
  6413  0F56  00E6               	movwf	(map@in_max+2)^(0+128)
  6414  0F57  3000               	movlw	0
  6415  0F58  00E1               	movwf	map@in_min^(0+128)
  6416  0F59  3000               	movlw	0
  6417  0F5A  00E2               	movwf	(map@in_min+1)^(0+128)
  6418  0F5B  3000               	movlw	0
  6419  0F5C  00E3               	movwf	(map@in_min+2)^(0+128)
  6420  0F5D  0023               	movlb	3	; select bank3
  6421  0F5E  0856               	movf	(_knob5_prev+1)^(0+384),w	;volatile
  6422  0F5F  0021               	movlb	1	; select bank1
  6423  0F60  00A9               	movwf	(___awtoft@c+1)^(0+128)
  6424  0F61  0023               	movlb	3	; select bank3
  6425  0F62  0855               	movf	_knob5_prev^(0+384),w	;volatile
  6426  0F63  0021               	movlb	1	; select bank1
  6427  0F64  00A8               	movwf	___awtoft@c^(0+128)
  6428  0F65  31AE  2610  318B   	fcall	___awtoft
  6429  0F68  0021               	movlb	1	; select bank1
  6430  0F69  0828               	movf	?___awtoft^(0+128),w
  6431  0F6A  00DE               	movwf	map@x^(0+128)
  6432  0F6B  0829               	movf	(?___awtoft+1)^(0+128),w
  6433  0F6C  00DF               	movwf	(map@x+1)^(0+128)
  6434  0F6D  082A               	movf	(?___awtoft+2)^(0+128),w
  6435  0F6E  00E0               	movwf	(map@x+2)^(0+128)
  6436  0F6F  3199  21C6  318B   	fcall	_map
  6437  0F72  0021               	movlb	1	; select bank1
  6438  0F73  085E               	movf	?_map^(0+128),w
  6439  0F74  0022               	movlb	2	; select bank2
  6440  0F75  00A0               	movwf	___fttol@f1^(0+256)
  6441  0F76  0021               	movlb	1	; select bank1
  6442  0F77  085F               	movf	(?_map+1)^(0+128),w
  6443  0F78  0022               	movlb	2	; select bank2
  6444  0F79  00A1               	movwf	(___fttol@f1+1)^(0+256)
  6445  0F7A  0021               	movlb	1	; select bank1
  6446  0F7B  0860               	movf	(?_map+2)^(0+128),w
  6447  0F7C  0022               	movlb	2	; select bank2
  6448  0F7D  00A2               	movwf	(___fttol@f1+2)^(0+256)
  6449  0F7E  3199  213F  318B   	fcall	___fttol
  6450  0F81  0022               	movlb	2	; select bank2
  6451  0F82  0821               	movf	(?___fttol^(0+256)+1),w
  6452  0F83  0024               	movlb	4	; select bank4
  6453  0F84  00C6               	movwf	(_adjusted_pot_value+1)^(0+512)
  6454  0F85  0022               	movlb	2	; select bank2
  6455  0F86  0820               	movf	?___fttol^(0+256),w
  6456  0F87  0024               	movlb	4	; select bank4
  6457  0F88  00C5               	movwf	_adjusted_pot_value^(0+512)
  6458  0F89                     l9464:	
  6459                           
  6460                           ;main.c: 187: }
  6461                           ;main.c: 192: if (mod_time_changed == 1) {
  6462  0F89  0023               	movlb	3	; select bank3
  6463  0F8A  0364               	decf	_mod_time_changed^(0+384),w
  6464  0F8B  1D03               	btfss	3,2
  6465  0F8C  2FBC               	goto	l9476
  6466                           
  6467                           ;main.c: 194: delay_time = baseline_mod_time;
  6468  0F8D  0020               	movlb	0	; select bank0
  6469  0F8E  0843               	movf	_baseline_mod_time+3,w	;volatile
  6470  0F8F  00C7               	movwf	_delay_time+3	;volatile
  6471  0F90  0842               	movf	_baseline_mod_time+2,w	;volatile
  6472  0F91  00C6               	movwf	_delay_time+2	;volatile
  6473  0F92  0841               	movf	_baseline_mod_time+1,w	;volatile
  6474  0F93  00C5               	movwf	_delay_time+1	;volatile
  6475  0F94  0840               	movf	_baseline_mod_time,w	;volatile
  6476  0F95  00C4               	movwf	_delay_time	;volatile
  6477                           
  6478                           ;main.c: 195: delay_time = set_subdivision(baseline_mod_time, top_push_state);
  6479  0F96  0841               	movf	_baseline_mod_time+1,w	;volatile
  6480  0F97  0022               	movlb	2	; select bank2
  6481  0F98  00AF               	movwf	(set_subdivision@x+1)^(0+256)
  6482  0F99  0020               	movlb	0	; select bank0
  6483  0F9A  0840               	movf	_baseline_mod_time,w	;volatile
  6484  0F9B  0022               	movlb	2	; select bank2
  6485  0F9C  00AE               	movwf	set_subdivision@x^(0+256)
  6486  0F9D  0020               	movlb	0	; select bank0
  6487  0F9E  084B               	movf	_top_push_state+1,w
  6488  0F9F  0022               	movlb	2	; select bank2
  6489  0FA0  00B1               	movwf	(set_subdivision@y+1)^(0+256)
  6490  0FA1  0020               	movlb	0	; select bank0
  6491  0FA2  084A               	movf	_top_push_state,w
  6492  0FA3  0022               	movlb	2	; select bank2
  6493  0FA4  00B0               	movwf	set_subdivision@y^(0+256)
  6494  0FA5  319A  2251  318B   	fcall	_set_subdivision
  6495  0FA8  0022               	movlb	2	; select bank2
  6496  0FA9  082E               	movf	?_set_subdivision^(0+256),w
  6497  0FAA  0020               	movlb	0	; select bank0
  6498  0FAB  00C4               	movwf	_delay_time	;volatile
  6499  0FAC  0022               	movlb	2	; select bank2
  6500  0FAD  082F               	movf	(?_set_subdivision+1)^(0+256),w
  6501  0FAE  0020               	movlb	0	; select bank0
  6502  0FAF  00C5               	movwf	_delay_time+1	;volatile
  6503  0FB0  0D89               	rlf	9,f
  6504  0FB1  3B89               	subwfb	9,f
  6505  0FB2  0989               	comf	9,f
  6506  0FB3  00C6               	movwf	_delay_time+2	;volatile
  6507  0FB4  00C7               	movwf	_delay_time+3	;volatile
  6508                           
  6509                           ;main.c: 196: getModulationDelayTime();
  6510  0FB5  31A3  2353  318B   	fcall	_getModulationDelayTime
  6511                           
  6512                           ;main.c: 197: modulation_changed = 1;
  6513  0FB8  0023               	movlb	3	; select bank3
  6514  0FB9  01C6               	clrf	_modulation_changed^(0+384)
  6515  0FBA  0AC6               	incf	_modulation_changed^(0+384),f
  6516                           
  6517                           ;main.c: 198: mod_time_changed = 0;
  6518  0FBB  01E4               	clrf	_mod_time_changed^(0+384)
  6519  0FBC                     l9476:	
  6520                           
  6521                           ;main.c: 200: }
  6522                           ;main.c: 203: if ((modArray[120] != bottom_push_state || modArray[121] != symmetry || mo
      +                          dArray[122] != modulationSubdivision)) {
  6523  0FBC  307A               	movlw	122
  6524  0FBD  0086               	movwf	6
  6525  0FBE  3024               	movlw	36
  6526  0FBF  0087               	movwf	7
  6527  0FC0  3F40               	moviw [0]fsr1
  6528  0FC1  0024               	movlb	4	; select bank4
  6529  0FC2  00E0               	movwf	??_main^(0+512)
  6530  0FC3  3F41               	moviw [1]fsr1
  6531  0FC4  00E1               	movwf	(??_main^(0+512)+1)
  6532  0FC5  0023               	movlb	3	; select bank3
  6533  0FC6  084C               	movf	(_bottom_push_state+1)^(0+384),w
  6534  0FC7  0024               	movlb	4	; select bank4
  6535  0FC8  0661               	xorwf	(??_main+1)^(0+512),w
  6536  0FC9  1D03               	skipz
  6537  0FCA  2FCF               	goto	u10555
  6538  0FCB  0023               	movlb	3	; select bank3
  6539  0FCC  084B               	movf	_bottom_push_state^(0+384),w
  6540  0FCD  0024               	movlb	4	; select bank4
  6541  0FCE  0660               	xorwf	??_main^(0+512),w
  6542  0FCF                     u10555:	
  6543  0FCF  1D03               	skipz
  6544  0FD0  2FF9               	goto	l9482
  6545  0FD1  307C               	movlw	124
  6546  0FD2  0086               	movwf	6
  6547  0FD3  3024               	movlw	36
  6548  0FD4  0087               	movwf	7
  6549  0FD5  3F40               	moviw [0]fsr1
  6550  0FD6  00E0               	movwf	??_main^(0+512)
  6551  0FD7  3F41               	moviw [1]fsr1
  6552  0FD8  00E1               	movwf	(??_main^(0+512)+1)
  6553  0FD9  0023               	movlb	3	; select bank3
  6554  0FDA  085C               	movf	(_symmetry+1)^(0+384),w
  6555  0FDB  0024               	movlb	4	; select bank4
  6556  0FDC  0661               	xorwf	(??_main+1)^(0+512),w
  6557  0FDD  1D03               	skipz
  6558  0FDE  2FE3               	goto	u10565
  6559  0FDF  0023               	movlb	3	; select bank3
  6560  0FE0  085B               	movf	_symmetry^(0+384),w
  6561  0FE1  0024               	movlb	4	; select bank4
  6562  0FE2  0660               	xorwf	??_main^(0+512),w
  6563  0FE3                     u10565:	
  6564  0FE3  1D03               	skipz
  6565  0FE4  2FF9               	goto	l9482
  6566  0FE5  307E               	movlw	126
  6567  0FE6  0086               	movwf	6
  6568  0FE7  3024               	movlw	36
  6569  0FE8  0087               	movwf	7
  6570  0FE9  3F40               	moviw [0]fsr1
  6571  0FEA  00E0               	movwf	??_main^(0+512)
  6572  0FEB  3F41               	moviw [1]fsr1
  6573  0FEC  00E1               	movwf	(??_main^(0+512)+1)
  6574  0FED  0023               	movlb	3	; select bank3
  6575  0FEE  083B               	movf	(_modulationSubdivision+1)^(0+384),w
  6576  0FEF  0024               	movlb	4	; select bank4
  6577  0FF0  0661               	xorwf	(??_main+1)^(0+512),w
  6578  0FF1  1D03               	skipz
  6579  0FF2  2FF7               	goto	u10575
  6580  0FF3  0023               	movlb	3	; select bank3
  6581  0FF4  083A               	movf	_modulationSubdivision^(0+384),w
  6582  0FF5  0024               	movlb	4	; select bank4
  6583  0FF6  0660               	xorwf	??_main^(0+512),w
  6584  0FF7                     u10575:	
  6585  0FF7  1903               	skipnz
  6586  0FF8  2B89               	goto	l9376
  6587  0FF9                     l9482:	
  6588                           
  6589                           ;main.c: 204: updateModulationArray();
  6590  0FF9  3183  2373  318B   	fcall	_updateModulationArray
  6591                           
  6592                           ;main.c: 205: isInitialized = 1;
  6593  0FFC  0023               	movlb	3	; select bank3
  6594  0FFD  01C2               	clrf	_isInitialized^(0+384)
  6595  0FFE  0AC2               	incf	_isInitialized^(0+384),f
  6596  0FFF  2B89               	goto	l9376
  6597  1000                     __end_of_main:	
  6598                           
  6599                           	psect	text1
  6600  07A0                     __ptext1:	
  6601 ;; *************** function _update_selectMode *****************
  6602 ;; Defined at:
  6603 ;;		line 139 in file "tactiles.c"
  6604 ;; Parameters:    Size  Location     Type
  6605 ;;		None
  6606 ;; Auto vars:     Size  Location     Type
  6607 ;;		None
  6608 ;; Return value:  Size  Location     Type
  6609 ;;                  1    wreg      void 
  6610 ;; Registers used:
  6611 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6612 ;; Tracked objects:
  6613 ;;		On entry : 0/0
  6614 ;;		On exit  : 0/0
  6615 ;;		Unchanged: 0/0
  6616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6619 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6620 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6621 ;;Total ram usage:        1 bytes
  6622 ;; Hardware stack levels used:    1
  6623 ;; Hardware stack levels required when called:    5
  6624 ;; This function calls:
  6625 ;;		_setExpressionDisplay
  6626 ;;		_setPresetDisplay
  6627 ;; This function is called by:
  6628 ;;		_main
  6629 ;; This function uses a non-reentrant model
  6630 ;;
  6631                           
  6632                           
  6633                           ;psect for function _update_selectMode
  6634  07A0                     _update_selectMode:	
  6635                           
  6636                           ;tactiles.c: 140: if (mode2_state == 0 && presetSaveMode != 1) {
  6637                           
  6638                           ;incstack = 0
  6639                           ; Regs used in _update_selectMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6640  07A0  0020               	movlb	0	; select bank0
  6641  07A1  085D               	movf	_mode2_state,w
  6642  07A2  1D03               	btfss	3,2
  6643  07A3  2FA7               	goto	l1044
  6644  07A4  035E               	decf	_presetSaveMode,w
  6645  07A5  1D03               	btfss	3,2
  6646  07A6  0008               	return
  6647  07A7                     l1044:	
  6648                           ;tactiles.c: 142: return;
  6649                           
  6650                           
  6651                           ;tactiles.c: 143: }
  6652                           ;tactiles.c: 144: if (PORTDbits.RD7 == 0) {
  6653  07A7  1B8F               	btfsc	15,7	;volatile
  6654  07A8  2FF5               	goto	l8922
  6655                           
  6656                           ;tactiles.c: 145: debounce_mode1++;
  6657  07A9  3001               	movlw	1
  6658  07AA  0024               	movlb	4	; select bank4
  6659  07AB  07CB               	addwf	_debounce_mode1^(0+512),f
  6660  07AC  3000               	movlw	0
  6661  07AD  3DCC               	addwfc	(_debounce_mode1+1)^(0+512),f
  6662                           
  6663                           ;tactiles.c: 146: if (debounce_mode1 > 25) {
  6664  07AE  084C               	movf	(_debounce_mode1+1)^(0+512),w
  6665  07AF  3A80               	xorlw	128
  6666  07B0  0021               	movlb	1	; select bank1
  6667  07B1  00A7               	movwf	??_update_selectMode^(0+128)
  6668  07B2  3080               	movlw	128
  6669  07B3  0227               	subwf	??_update_selectMode^(0+128),w
  6670  07B4  1D03               	skipz
  6671  07B5  2FB9               	goto	u9565
  6672  07B6  301A               	movlw	26
  6673  07B7  0024               	movlb	4	; select bank4
  6674  07B8  024B               	subwf	_debounce_mode1^(0+512),w
  6675  07B9                     u9565:	
  6676  07B9  1C03               	skipc
  6677  07BA  0008               	return
  6678                           
  6679                           ;tactiles.c: 147: debounce_mode1 = 25;
  6680  07BB  3019               	movlw	25
  6681  07BC  0024               	movlb	4	; select bank4
  6682  07BD  00CB               	movwf	_debounce_mode1^(0+512)
  6683  07BE  3000               	movlw	0
  6684  07BF  00CC               	movwf	(_debounce_mode1^(0+512)+1)
  6685                           
  6686                           ;tactiles.c: 148: if (mode2_state == presetModeCnst || presetSaveMode == 1) {
  6687  07C0  0020               	movlb	0	; select bank0
  6688  07C1  085D               	movf	_mode2_state,w
  6689  07C2  0023               	movlb	3	; select bank3
  6690  07C3  0665               	xorwf	_presetModeCnst^(0+384),w
  6691  07C4  1903               	skipnz
  6692  07C5  2FCA               	goto	l8904
  6693  07C6  0020               	movlb	0	; select bank0
  6694  07C7  035E               	decf	_presetSaveMode,w
  6695  07C8  1D03               	btfss	3,2
  6696  07C9  2FDB               	goto	l8912
  6697  07CA                     l8904:	
  6698                           
  6699                           ;tactiles.c: 149: presetChannel++;
  6700  07CA  3001               	movlw	1
  6701  07CB  0021               	movlb	1	; select bank1
  6702  07CC  00A7               	movwf	??_update_selectMode^(0+128)
  6703  07CD  0827               	movf	??_update_selectMode^(0+128),w
  6704  07CE  0020               	movlb	0	; select bank0
  6705  07CF  07CF               	addwf	_presetChannel,f
  6706                           
  6707                           ;tactiles.c: 150: if (presetChannel > 10) {
  6708  07D0  300B               	movlw	11
  6709  07D1  024F               	subwf	_presetChannel,w
  6710  07D2  1C03               	skipc
  6711  07D3  2FD6               	goto	l8910
  6712                           
  6713                           ;tactiles.c: 151: presetChannel = 1;
  6714  07D4  01CF               	clrf	_presetChannel
  6715  07D5  0ACF               	incf	_presetChannel,f
  6716  07D6                     l8910:	
  6717                           
  6718                           ;tactiles.c: 152: }
  6719                           ;tactiles.c: 153: setPresetDisplay(presetChannel);
  6720  07D6  084F               	movf	_presetChannel,w
  6721  07D7  31A0  2014  3187   	fcall	_setPresetDisplay
  6722                           
  6723                           ;tactiles.c: 154: } else if (mode2_state == expressModeCnst) {
  6724  07DA  2FF1               	goto	l1055
  6725  07DB                     l8912:	
  6726  07DB  0020               	movlb	0	; select bank0
  6727  07DC  085D               	movf	_mode2_state,w
  6728  07DD  0023               	movlb	3	; select bank3
  6729  07DE  0662               	xorwf	_expressModeCnst^(0+384),w
  6730  07DF  1D03               	skipz
  6731  07E0  2FF1               	goto	l1055
  6732                           
  6733                           ;tactiles.c: 155: expressionChannel++;
  6734  07E1  3001               	movlw	1
  6735  07E2  0021               	movlb	1	; select bank1
  6736  07E3  00A7               	movwf	??_update_selectMode^(0+128)
  6737  07E4  0827               	movf	??_update_selectMode^(0+128),w
  6738  07E5  0023               	movlb	3	; select bank3
  6739  07E6  07E3               	addwf	_expressionChannel^(0+384),f
  6740                           
  6741                           ;tactiles.c: 156: if (expressionChannel > 5) {
  6742  07E7  3006               	movlw	6
  6743  07E8  0263               	subwf	_expressionChannel^(0+384),w
  6744  07E9  1C03               	skipc
  6745  07EA  2FED               	goto	l8920
  6746                           
  6747                           ;tactiles.c: 157: expressionChannel = 1;
  6748  07EB  01E3               	clrf	_expressionChannel^(0+384)
  6749  07EC  0AE3               	incf	_expressionChannel^(0+384),f
  6750  07ED                     l8920:	
  6751                           
  6752                           ;tactiles.c: 158: }
  6753                           ;tactiles.c: 159: setExpressionDisplay(expressionChannel);
  6754  07ED  0863               	movf	_expressionChannel^(0+384),w
  6755  07EE  31AD  2513  3187   	fcall	_setExpressionDisplay
  6756  07F1                     l1055:	
  6757                           ;tactiles.c: 160: }
  6758                           ;tactiles.c: 167: while (PORTDbits.RD7 == 0) {
  6759                           
  6760  07F1  0020               	movlb	0	; select bank0
  6761  07F2  1B8F               	btfsc	15,7	;volatile
  6762  07F3  0008               	return
  6763  07F4  2FF1               	goto	l1055
  6764  07F5                     l8922:	
  6765                           ;tactiles.c: 168: }
  6766                           ;tactiles.c: 169: }
  6767                           ;tactiles.c: 170: } else {
  6768                           
  6769                           
  6770                           ;tactiles.c: 171: debounce_mode1 = 0;
  6771  07F5  0024               	movlb	4	; select bank4
  6772  07F6  01CB               	clrf	_debounce_mode1^(0+512)
  6773  07F7  01CC               	clrf	(_debounce_mode1+1)^(0+512)
  6774  07F8  0008               	return
  6775  07F9                     __end_of_update_selectMode:	
  6776                           
  6777                           	psect	text2
  6778  1800                     __ptext2:	
  6779 ;; *************** function _update_mode *****************
  6780 ;; Defined at:
  6781 ;;		line 87 in file "tactiles.c"
  6782 ;; Parameters:    Size  Location     Type
  6783 ;;		None
  6784 ;; Auto vars:     Size  Location     Type
  6785 ;;		None
  6786 ;; Return value:  Size  Location     Type
  6787 ;;                  1    wreg      void 
  6788 ;; Registers used:
  6789 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6790 ;; Tracked objects:
  6791 ;;		On entry : 0/0
  6792 ;;		On exit  : 0/0
  6793 ;;		Unchanged: 0/0
  6794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6797 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6798 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6799 ;;Total ram usage:        1 bytes
  6800 ;; Hardware stack levels used:    1
  6801 ;; Hardware stack levels required when called:    6
  6802 ;; This function calls:
  6803 ;;		_resetRingLEDs
  6804 ;;		_setPedalMode
  6805 ;; This function is called by:
  6806 ;;		_main
  6807 ;; This function uses a non-reentrant model
  6808 ;;
  6809                           
  6810                           
  6811                           ;psect for function _update_mode
  6812  1800                     _update_mode:	
  6813                           
  6814                           ;tactiles.c: 92: if (PORTCbits.RC0 == 0) {
  6815                           
  6816                           ;incstack = 0
  6817                           ; Regs used in _update_mode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6818  1800  0020               	movlb	0	; select bank0
  6819  1801  180E               	btfsc	14,0	;volatile
  6820  1802  2834               	goto	l8890
  6821                           
  6822                           ;tactiles.c: 95: debounce_mode2++;
  6823  1803  3001               	movlw	1
  6824  1804  0024               	movlb	4	; select bank4
  6825  1805  07CD               	addwf	_debounce_mode2^(0+512),f
  6826  1806  3000               	movlw	0
  6827  1807  3DCE               	addwfc	(_debounce_mode2+1)^(0+512),f
  6828                           
  6829                           ;tactiles.c: 96: if (debounce_mode2 > 25) {
  6830  1808  084E               	movf	(_debounce_mode2+1)^(0+512),w
  6831  1809  3A80               	xorlw	128
  6832  180A  0021               	movlb	1	; select bank1
  6833  180B  00A7               	movwf	??_update_mode^(0+128)
  6834  180C  3080               	movlw	128
  6835  180D  0227               	subwf	??_update_mode^(0+128),w
  6836  180E  1D03               	skipz
  6837  180F  2813               	goto	u9495
  6838  1810  301A               	movlw	26
  6839  1811  0024               	movlb	4	; select bank4
  6840  1812  024D               	subwf	_debounce_mode2^(0+512),w
  6841  1813                     u9495:	
  6842  1813  1C03               	skipc
  6843  1814  0008               	return
  6844                           
  6845                           ;tactiles.c: 97: debounce_mode2 = 25;
  6846  1815  3019               	movlw	25
  6847  1816  0024               	movlb	4	; select bank4
  6848  1817  00CD               	movwf	_debounce_mode2^(0+512)
  6849  1818  3000               	movlw	0
  6850  1819  00CE               	movwf	(_debounce_mode2^(0+512)+1)
  6851                           
  6852                           ;tactiles.c: 99: if (presetSaveMode == 1) {
  6853  181A  0020               	movlb	0	; select bank0
  6854  181B  035E               	decf	_presetSaveMode,w
  6855  181C  1D03               	btfss	3,2
  6856  181D  2823               	goto	l8882
  6857                           
  6858                           ;tactiles.c: 100: presetSaveMode = 0;
  6859  181E  01DE               	clrf	_presetSaveMode
  6860                           
  6861                           ;tactiles.c: 101: resetRingLEDs();
  6862  181F  31AD  252B  3198   	fcall	_resetRingLEDs
  6863                           
  6864                           ;tactiles.c: 102: } else {
  6865  1822  282D               	goto	l8888
  6866  1823                     l8882:	
  6867                           
  6868                           ;tactiles.c: 103: mode2_state++;
  6869  1823  3001               	movlw	1
  6870  1824  0021               	movlb	1	; select bank1
  6871  1825  00A7               	movwf	??_update_mode^(0+128)
  6872  1826  0827               	movf	??_update_mode^(0+128),w
  6873  1827  0020               	movlb	0	; select bank0
  6874  1828  07DD               	addwf	_mode2_state,f
  6875                           
  6876                           ;tactiles.c: 104: if (mode2_state > 2) {
  6877  1829  3003               	movlw	3
  6878  182A  025D               	subwf	_mode2_state,w
  6879  182B  1803               	btfsc	3,0
  6880                           
  6881                           ;tactiles.c: 105: mode2_state = 0;
  6882  182C  01DD               	clrf	_mode2_state
  6883  182D                     l8888:	
  6884                           
  6885                           ;tactiles.c: 106: }
  6886                           ;tactiles.c: 107: }
  6887                           ;tactiles.c: 109: setPedalMode();
  6888  182D  31AE  2632  3198   	fcall	_setPedalMode
  6889  1830                     l1029:	
  6890                           ;tactiles.c: 110: while (PORTCbits.RC0 == 0) {
  6891                           
  6892  1830  0020               	movlb	0	; select bank0
  6893  1831  180E               	btfsc	14,0	;volatile
  6894  1832  0008               	return
  6895  1833  2830               	goto	l1029
  6896  1834                     l8890:	
  6897                           ;tactiles.c: 111: }
  6898                           ;tactiles.c: 112: }
  6899                           ;tactiles.c: 113: } else {
  6900                           
  6901                           
  6902                           ;tactiles.c: 114: debounce_mode2 = 0;
  6903  1834  0024               	movlb	4	; select bank4
  6904  1835  01CD               	clrf	_debounce_mode2^(0+512)
  6905  1836  01CE               	clrf	(_debounce_mode2+1)^(0+512)
  6906  1837  0008               	return
  6907  1838                     __end_of_update_mode:	
  6908                           
  6909                           	psect	text3
  6910  05B8                     __ptext3:	
  6911 ;; *************** function _updateSwitchTap *****************
  6912 ;; Defined at:
  6913 ;;		line 48 in file "SwitchTap.c"
  6914 ;; Parameters:    Size  Location     Type
  6915 ;;		None
  6916 ;; Auto vars:     Size  Location     Type
  6917 ;;  tapCntDiviso    2   34[BANK1 ] int 
  6918 ;;  iCnt            1   36[BANK1 ] unsigned char 
  6919 ;; Return value:  Size  Location     Type
  6920 ;;                  1    wreg      void 
  6921 ;; Registers used:
  6922 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6923 ;; Tracked objects:
  6924 ;;		On entry : 0/0
  6925 ;;		On exit  : 0/0
  6926 ;;		Unchanged: 0/0
  6927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6929 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6930 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6931 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6932 ;;Total ram usage:        9 bytes
  6933 ;; Hardware stack levels used:    1
  6934 ;; Hardware stack levels required when called:    8
  6935 ;; This function calls:
  6936 ;;		___aldiv
  6937 ;;		_setDoublePressState
  6938 ;;		_setLongTapState
  6939 ;; This function is called by:
  6940 ;;		_main
  6941 ;; This function uses a non-reentrant model
  6942 ;;
  6943                           
  6944                           
  6945                           ;psect for function _updateSwitchTap
  6946  05B8                     _updateSwitchTap:	
  6947                           
  6948                           ;SwitchTap.c: 49: uint8_t iCnt = 0;
  6949                           
  6950                           ;incstack = 0
  6951                           ; Regs used in _updateSwitchTap: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6952  05B8  0021               	movlb	1	; select bank1
  6953  05B9  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  6954                           
  6955                           ;SwitchTap.c: 57: if (PORTEbits.RE0 == 0) {
  6956  05BA  0020               	movlb	0	; select bank0
  6957  05BB  1810               	btfsc	16,0	;volatile
  6958  05BC  2DC4               	goto	l9044
  6959                           
  6960                           ;SwitchTap.c: 58: if (switchTap_pressed > 0) {
  6961  05BD  0022               	movlb	2	; select bank2
  6962  05BE  086C               	movf	_switchTap_pressed^(0+256),w
  6963  05BF  1903               	btfsc	3,2
  6964  05C0  2DCF               	goto	l1468
  6965                           
  6966                           ;SwitchTap.c: 59: switchTap_pressed--;
  6967  05C1  3001               	movlw	1
  6968  05C2  02EC               	subwf	_switchTap_pressed^(0+256),f
  6969                           
  6970                           ;SwitchTap.c: 60: }
  6971                           ;SwitchTap.c: 61: } else if (switchTap_pressed < 25) {
  6972  05C3  2DCF               	goto	l1468
  6973  05C4                     l9044:	
  6974  05C4  3019               	movlw	25
  6975  05C5  0022               	movlb	2	; select bank2
  6976  05C6  026C               	subwf	_switchTap_pressed^(0+256),w
  6977  05C7  1803               	skipnc
  6978  05C8  2DCF               	goto	l1468
  6979                           
  6980                           ;SwitchTap.c: 62: switchTap_pressed++;
  6981  05C9  3001               	movlw	1
  6982  05CA  0021               	movlb	1	; select bank1
  6983  05CB  00BC               	movwf	??_updateSwitchTap^(0+128)
  6984  05CC  083C               	movf	??_updateSwitchTap^(0+128),w
  6985  05CD  0022               	movlb	2	; select bank2
  6986  05CE  07EC               	addwf	_switchTap_pressed^(0+256),f
  6987  05CF                     l1468:	
  6988                           
  6989                           ;SwitchTap.c: 63: }
  6990                           ;SwitchTap.c: 69: if (switchTap_pressed == 0) {
  6991  05CF  086C               	movf	_switchTap_pressed^(0+256),w
  6992  05D0  1D03               	btfss	3,2
  6993  05D1  2F86               	goto	l9128
  6994                           
  6995                           ;SwitchTap.c: 73: if (tap_timer >= 1563) {
  6996  05D2  0020               	movlb	0	; select bank0
  6997  05D3  1BD4               	btfsc	_tap_timer+3,7	;volatile
  6998  05D4  2E5A               	goto	l9088
  6999  05D5  0854               	movf	_tap_timer+3,w	;volatile
  7000  05D6  1D03               	btfss	3,2
  7001  05D7  2DE1               	goto	l9050
  7002  05D8  0853               	movf	_tap_timer+2,w	;volatile
  7003  05D9  1D03               	btfss	3,2
  7004  05DA  2DE1               	goto	l9050
  7005  05DB  301B               	movlw	27
  7006  05DC  0251               	subwf	_tap_timer,w	;volatile
  7007  05DD  3006               	movlw	6
  7008  05DE  3B52               	subwfb	_tap_timer+1,w	;volatile
  7009  05DF  1C03               	btfss	3,0
  7010  05E0  2E5A               	goto	l9088
  7011  05E1                     l9050:	
  7012                           
  7013                           ;SwitchTap.c: 76: if (switchTap_down != 1) {
  7014  05E1  0023               	movlb	3	; select bank3
  7015  05E2  0349               	decf	_switchTap_down^(0+384),w
  7016  05E3  1903               	btfsc	3,2
  7017  05E4  2E20               	goto	l9066
  7018                           
  7019                           ;SwitchTap.c: 78: switchTap_down = 1;
  7020  05E5  01C9               	clrf	_switchTap_down^(0+384)
  7021  05E6  0AC9               	incf	_switchTap_down^(0+384),f
  7022                           
  7023                           ;SwitchTap.c: 79: tap_timer = 0;
  7024  05E7  3000               	movlw	0
  7025  05E8  0020               	movlb	0	; select bank0
  7026  05E9  00D4               	movwf	_tap_timer+3	;volatile
  7027  05EA  3000               	movlw	0
  7028  05EB  00D3               	movwf	_tap_timer+2	;volatile
  7029  05EC  3000               	movlw	0
  7030  05ED  00D2               	movwf	_tap_timer+1	;volatile
  7031  05EE  3000               	movlw	0
  7032  05EF  00D1               	movwf	_tap_timer	;volatile
  7033                           
  7034                           ;SwitchTap.c: 80: tap_iteration = 1;
  7035  05F0  3001               	movlw	1
  7036  05F1  0023               	movlb	3	; select bank3
  7037  05F2  00DD               	movwf	_tap_iteration^(0+384)
  7038  05F3  3000               	movlw	0
  7039  05F4  00DE               	movwf	(_tap_iteration^(0+384)+1)
  7040                           
  7041                           ;SwitchTap.c: 81: tap_total = 0;
  7042  05F5  3000               	movlw	0
  7043  05F6  0024               	movlb	4	; select bank4
  7044  05F7  00C0               	movwf	(_tap_total+3)^(0+512)
  7045  05F8  3000               	movlw	0
  7046  05F9  00BF               	movwf	(_tap_total+2)^(0+512)
  7047  05FA  3000               	movlw	0
  7048  05FB  00BE               	movwf	(_tap_total+1)^(0+512)
  7049  05FC  3000               	movlw	0
  7050  05FD  00BD               	movwf	_tap_total^(0+512)
  7051                           
  7052                           ;SwitchTap.c: 82: mod_time_changed = 0;
  7053  05FE  0023               	movlb	3	; select bank3
  7054  05FF  01E4               	clrf	_mod_time_changed^(0+384)
  7055                           
  7056                           ;SwitchTap.c: 84: for (iCnt = 1; iCnt <= num_taps; iCnt++) {
  7057  0600  0021               	movlb	1	; select bank1
  7058  0601  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  7059  0602  0AC4               	incf	updateSwitchTap@iCnt^(0+128),f
  7060  0603                     l9064:	
  7061  0603  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7062  0604  0020               	movlb	0	; select bank0
  7063  0605  024E               	subwf	_num_taps,w
  7064  0606  1C03               	btfss	3,0
  7065  0607  2E20               	goto	l9066
  7066                           
  7067                           ;SwitchTap.c: 85: tap_history[iCnt] = 0;
  7068  0608  0021               	movlb	1	; select bank1
  7069  0609  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7070  060A  00BC               	movwf	??_updateSwitchTap^(0+128)
  7071  060B  3001               	movlw	1
  7072  060C                     u9935:	
  7073  060C  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7074  060D  3EFF               	addlw	-1
  7075  060E  1D03               	skipz
  7076  060F  2E0C               	goto	u9935
  7077  0610  353C               	lslf	??_updateSwitchTap^(0+128),w
  7078  0611  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7079  0612  0086               	movwf	6
  7080  0613  3002               	movlw	2	; select bank4/5
  7081  0614  0087               	movwf	7
  7082  0615  3000               	movlw	0
  7083  0616  3FC0               	movwi [0]fsr1
  7084  0617  3000               	movlw	0
  7085  0618  3FC1               	movwi [1]fsr1
  7086  0619  3FC2               	movwi [2]fsr1
  7087  061A  3FC3               	movwi [3]fsr1
  7088  061B  3001               	movlw	1
  7089  061C  00BC               	movwf	??_updateSwitchTap^(0+128)
  7090  061D  083C               	movf	??_updateSwitchTap^(0+128),w
  7091  061E  07C4               	addwf	updateSwitchTap@iCnt^(0+128),f
  7092  061F  2E03               	goto	l9064
  7093  0620                     l9066:	
  7094                           
  7095                           ;SwitchTap.c: 86: }
  7096                           ;SwitchTap.c: 87: }
  7097                           ;SwitchTap.c: 90: if (longTap_start == 0) {
  7098  0620  0022               	movlb	2	; select bank2
  7099  0621  086B               	movf	_longTap_start^(0+256),w
  7100  0622  1D03               	btfss	3,2
  7101  0623  2E2B               	goto	l9072
  7102                           
  7103                           ;SwitchTap.c: 91: longTap_start = 1;
  7104  0624  01EB               	clrf	_longTap_start^(0+256)
  7105  0625  0AEB               	incf	_longTap_start^(0+256),f
  7106                           
  7107                           ;SwitchTap.c: 92: longTap_state = 0;
  7108  0626  0020               	movlb	0	; select bank0
  7109  0627  01CD               	clrf	_longTap_state	;volatile
  7110                           
  7111                           ;SwitchTap.c: 93: longTap_timer = 0;
  7112  0628  0023               	movlb	3	; select bank3
  7113  0629  01B8               	clrf	_longTap_timer^(0+384)	;volatile
  7114  062A  01B9               	clrf	(_longTap_timer+1)^(0+384)	;volatile
  7115  062B                     l9072:	
  7116                           
  7117                           ;SwitchTap.c: 94: }
  7118                           ;SwitchTap.c: 98: if (longTap_timer >= long_press_limit && longTap_state == 0 && doubleT
      +                          ap_state == 0) {
  7119  062B  0020               	movlb	0	; select bank0
  7120  062C  0849               	movf	_long_press_limit+1,w
  7121  062D  0023               	movlb	3	; select bank3
  7122  062E  0239               	subwf	(_longTap_timer+1)^(0+384),w	;volatile
  7123  062F  1D03               	skipz
  7124  0630  2E35               	goto	u9965
  7125  0631  0020               	movlb	0	; select bank0
  7126  0632  0848               	movf	_long_press_limit,w
  7127  0633  0023               	movlb	3	; select bank3
  7128  0634  0238               	subwf	_longTap_timer^(0+384),w	;volatile
  7129  0635                     u9965:	
  7130  0635  1C03               	skipc
  7131  0636  0008               	return
  7132  0637  0020               	movlb	0	; select bank0
  7133  0638  084D               	movf	_longTap_state,w	;volatile
  7134  0639  1D03               	btfss	3,2
  7135  063A  0008               	return
  7136  063B  085B               	movf	_doubleTap_state,w	;volatile
  7137  063C  1D03               	btfss	3,2
  7138  063D  0008               	return
  7139                           
  7140                           ;SwitchTap.c: 100: longTap_timer = long_press_limit;
  7141  063E  0849               	movf	_long_press_limit+1,w
  7142  063F  0023               	movlb	3	; select bank3
  7143  0640  00B9               	movwf	(_longTap_timer+1)^(0+384)	;volatile
  7144  0641  0020               	movlb	0	; select bank0
  7145  0642  0848               	movf	_long_press_limit,w
  7146  0643  0023               	movlb	3	; select bank3
  7147  0644  00B8               	movwf	_longTap_timer^(0+384)	;volatile
  7148                           
  7149                           ;SwitchTap.c: 102: LATBbits.LATB4 = 0;
  7150  0645  0022               	movlb	2	; select bank2
  7151  0646  120D               	bcf	13,4	;volatile
  7152                           
  7153                           ;SwitchTap.c: 103: if (longBypass_start != 1) {
  7154  0647  036A               	decf	_longBypass_start^(0+256),w
  7155  0648  1903               	btfsc	3,2
  7156  0649  2E52               	goto	l9086
  7157                           
  7158                           ;SwitchTap.c: 104: setLongTapState(1);
  7159  064A  3001               	movlw	1
  7160  064B  0021               	movlb	1	; select bank1
  7161  064C  00A0               	movwf	setLongTapState@f_state^(0+128)
  7162  064D  3000               	movlw	0
  7163  064E  00A1               	movwf	(setLongTapState@f_state^(0+128)+1)
  7164  064F  31AD  2545         	fcall	_setLongTapState
  7165                           
  7166                           ;SwitchTap.c: 105: } else {
  7167  0651  0008               	return
  7168  0652                     l9086:	
  7169                           
  7170                           ;SwitchTap.c: 106: setDoublePressState(1);
  7171  0652  3001               	movlw	1
  7172  0653  0021               	movlb	1	; select bank1
  7173  0654  00B8               	movwf	setDoublePressState@f_state^(0+128)
  7174  0655  3000               	movlw	0
  7175  0656  00B9               	movwf	(setDoublePressState@f_state^(0+128)+1)
  7176  0657  31A1  213F         	fcall	_setDoublePressState
  7177                           
  7178                           ;SwitchTap.c: 107: }
  7179                           ;SwitchTap.c: 108: }
  7180                           ;SwitchTap.c: 110: } else if (tap_timer < 1563 && longTap_state == 0 && switchTap_down !
      +                          = 1) {
  7181  0659  0008               	return
  7182  065A                     l9088:	
  7183  065A  0020               	movlb	0	; select bank0
  7184  065B  1BD4               	btfsc	_tap_timer+3,7	;volatile
  7185  065C  2E69               	goto	l9090
  7186  065D  0854               	movf	_tap_timer+3,w	;volatile
  7187  065E  1D03               	btfss	3,2
  7188  065F  0008               	return
  7189  0660  0853               	movf	_tap_timer+2,w	;volatile
  7190  0661  1D03               	btfss	3,2
  7191  0662  0008               	return
  7192  0663  301B               	movlw	27
  7193  0664  0251               	subwf	_tap_timer,w	;volatile
  7194  0665  3006               	movlw	6
  7195  0666  3B52               	subwfb	_tap_timer+1,w	;volatile
  7196  0667  1803               	btfsc	3,0
  7197  0668  0008               	return
  7198  0669                     l9090:	
  7199  0669  084D               	movf	_longTap_state,w	;volatile
  7200  066A  1D03               	btfss	3,2
  7201  066B  0008               	return
  7202  066C  0023               	movlb	3	; select bank3
  7203  066D  0349               	decf	_switchTap_down^(0+384),w
  7204  066E  1903               	btfsc	3,2
  7205  066F  0008               	return
  7206                           
  7207                           ;SwitchTap.c: 112: switchTap_down = 1;
  7208  0670  01C9               	clrf	_switchTap_down^(0+384)
  7209  0671  0AC9               	incf	_switchTap_down^(0+384),f
  7210                           
  7211                           ;SwitchTap.c: 113: if (tap_timer >= 1172) {
  7212  0672  0020               	movlb	0	; select bank0
  7213  0673  1BD4               	btfsc	_tap_timer+3,7	;volatile
  7214  0674  2E89               	goto	l1482
  7215  0675  0854               	movf	_tap_timer+3,w	;volatile
  7216  0676  1D03               	btfss	3,2
  7217  0677  2E81               	goto	l9098
  7218  0678  0853               	movf	_tap_timer+2,w	;volatile
  7219  0679  1D03               	btfss	3,2
  7220  067A  2E81               	goto	l9098
  7221  067B  3094               	movlw	148
  7222  067C  0251               	subwf	_tap_timer,w	;volatile
  7223  067D  3004               	movlw	4
  7224  067E  3B52               	subwfb	_tap_timer+1,w	;volatile
  7225  067F  1C03               	btfss	3,0
  7226  0680  2E89               	goto	l1482
  7227  0681                     l9098:	
  7228                           
  7229                           ;SwitchTap.c: 114: tap_timer = 1172;
  7230  0681  3000               	movlw	0
  7231  0682  00D4               	movwf	_tap_timer+3	;volatile
  7232  0683  3000               	movlw	0
  7233  0684  00D3               	movwf	_tap_timer+2	;volatile
  7234  0685  3004               	movlw	4
  7235  0686  00D2               	movwf	_tap_timer+1	;volatile
  7236  0687  3094               	movlw	148
  7237  0688  00D1               	movwf	_tap_timer	;volatile
  7238  0689                     l1482:	
  7239                           
  7240                           ;SwitchTap.c: 115: }
  7241                           ;SwitchTap.c: 117: int tapCntDivisor = num_taps;
  7242  0689  084E               	movf	_num_taps,w
  7243  068A  0021               	movlb	1	; select bank1
  7244  068B  00BC               	movwf	??_updateSwitchTap^(0+128)
  7245  068C  01BD               	clrf	(??_updateSwitchTap^(0+128)+1)
  7246  068D  083C               	movf	??_updateSwitchTap^(0+128),w
  7247  068E  00C2               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  7248  068F  083D               	movf	(??_updateSwitchTap+1)^(0+128),w
  7249  0690  00C3               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  7250                           
  7251                           ;SwitchTap.c: 118: if (tap_iteration <= num_taps) {
  7252  0691  0023               	movlb	3	; select bank3
  7253  0692  085E               	movf	(_tap_iteration+1)^(0+384),w
  7254  0693  3A80               	xorlw	128
  7255  0694  3C80               	sublw	128
  7256  0695  1D03               	skipz
  7257  0696  2E9A               	goto	u10045
  7258  0697  085D               	movf	_tap_iteration^(0+384),w
  7259  0698  0020               	movlb	0	; select bank0
  7260  0699  024E               	subwf	_num_taps,w
  7261  069A                     u10045:	
  7262  069A  1C03               	skipc
  7263  069B  2ECC               	goto	l9106
  7264                           
  7265                           ;SwitchTap.c: 119: tap_total += tap_timer;
  7266  069C  0020               	movlb	0	; select bank0
  7267  069D  0851               	movf	_tap_timer,w	;volatile
  7268  069E  0024               	movlb	4	; select bank4
  7269  069F  07BD               	addwf	_tap_total^(0+512),f
  7270  06A0  0020               	movlb	0	; select bank0
  7271  06A1  0852               	movf	_tap_timer+1,w	;volatile
  7272  06A2  0024               	movlb	4	; select bank4
  7273  06A3  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  7274  06A4  0020               	movlb	0	; select bank0
  7275  06A5  0853               	movf	_tap_timer+2,w	;volatile
  7276  06A6  0024               	movlb	4	; select bank4
  7277  06A7  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  7278  06A8  0020               	movlb	0	; select bank0
  7279  06A9  0854               	movf	_tap_timer+3,w	;volatile
  7280  06AA  0024               	movlb	4	; select bank4
  7281  06AB  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  7282                           
  7283                           ;SwitchTap.c: 120: tap_history[tap_iteration] = tap_timer;
  7284  06AC  0023               	movlb	3	; select bank3
  7285  06AD  085D               	movf	_tap_iteration^(0+384),w
  7286  06AE  0021               	movlb	1	; select bank1
  7287  06AF  00BC               	movwf	??_updateSwitchTap^(0+128)
  7288  06B0  3001               	movlw	1
  7289  06B1                     u10055:	
  7290  06B1  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7291  06B2  3EFF               	addlw	-1
  7292  06B3  1D03               	skipz
  7293  06B4  2EB1               	goto	u10055
  7294  06B5  353C               	lslf	??_updateSwitchTap^(0+128),w
  7295  06B6  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7296  06B7  0086               	movwf	6
  7297  06B8  3002               	movlw	2	; select bank4/5
  7298  06B9  0087               	movwf	7
  7299  06BA  0020               	movlb	0	; select bank0
  7300  06BB  0851               	movf	_tap_timer,w	;volatile
  7301  06BC  3FC0               	movwi [0]fsr1
  7302  06BD  0852               	movf	_tap_timer+1,w	;volatile
  7303  06BE  3FC1               	movwi [1]fsr1
  7304  06BF  0853               	movf	_tap_timer+2,w	;volatile
  7305  06C0  3FC2               	movwi [2]fsr1
  7306  06C1  0854               	movf	_tap_timer+3,w	;volatile
  7307  06C2  3FC3               	movwi [3]fsr1
  7308                           
  7309                           ;SwitchTap.c: 121: tapCntDivisor = tap_iteration;
  7310  06C3  0023               	movlb	3	; select bank3
  7311  06C4  085E               	movf	(_tap_iteration+1)^(0+384),w
  7312  06C5  0021               	movlb	1	; select bank1
  7313  06C6  00C3               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  7314  06C7  0023               	movlb	3	; select bank3
  7315  06C8  085D               	movf	_tap_iteration^(0+384),w
  7316  06C9  0021               	movlb	1	; select bank1
  7317  06CA  00C2               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  7318                           
  7319                           ;SwitchTap.c: 122: } else {
  7320  06CB  2F48               	goto	l9120
  7321  06CC                     l9106:	
  7322                           
  7323                           ;SwitchTap.c: 123: tap_total = 0;
  7324  06CC  3000               	movlw	0
  7325  06CD  0024               	movlb	4	; select bank4
  7326  06CE  00C0               	movwf	(_tap_total+3)^(0+512)
  7327  06CF  3000               	movlw	0
  7328  06D0  00BF               	movwf	(_tap_total+2)^(0+512)
  7329  06D1  3000               	movlw	0
  7330  06D2  00BE               	movwf	(_tap_total+1)^(0+512)
  7331  06D3  3000               	movlw	0
  7332  06D4  00BD               	movwf	_tap_total^(0+512)
  7333                           
  7334                           ;SwitchTap.c: 124: for (iCnt = 1; iCnt < num_taps; iCnt++) {
  7335  06D5  0021               	movlb	1	; select bank1
  7336  06D6  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  7337  06D7  0AC4               	incf	updateSwitchTap@iCnt^(0+128),f
  7338  06D8                     l9114:	
  7339  06D8  0020               	movlb	0	; select bank0
  7340  06D9  084E               	movf	_num_taps,w
  7341  06DA  0021               	movlb	1	; select bank1
  7342  06DB  0244               	subwf	updateSwitchTap@iCnt^(0+128),w
  7343  06DC  1803               	btfsc	3,0
  7344  06DD  2F22               	goto	l9116
  7345                           
  7346                           ;SwitchTap.c: 125: tap_history[iCnt] = tap_history[iCnt + 1];
  7347  06DE  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7348  06DF  00BC               	movwf	??_updateSwitchTap^(0+128)
  7349  06E0  3001               	movlw	1
  7350  06E1                     u10065:	
  7351  06E1  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7352  06E2  3EFF               	addlw	-1
  7353  06E3  1D03               	skipz
  7354  06E4  2EE1               	goto	u10065
  7355  06E5  353C               	lslf	??_updateSwitchTap^(0+128),w
  7356  06E6  3E04               	addlw	4
  7357  06E7  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7358  06E8  0086               	movwf	6
  7359  06E9  3002               	movlw	2	; select bank4/5
  7360  06EA  0087               	movwf	7
  7361  06EB  3F40               	moviw [0]fsr1
  7362  06EC  00BD               	movwf	(??_updateSwitchTap+1)^(0+128)
  7363  06ED  3F41               	moviw [1]fsr1
  7364  06EE  00BE               	movwf	((??_updateSwitchTap+1)^(0+128)+1)
  7365  06EF  3F42               	moviw [2]fsr1
  7366  06F0  00BF               	movwf	((??_updateSwitchTap+1)^(0+128)+2)
  7367  06F1  3F43               	moviw [3]fsr1
  7368  06F2  00C0               	movwf	((??_updateSwitchTap+1)^(0+128)+3)
  7369  06F3  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7370  06F4  00C1               	movwf	(??_updateSwitchTap+5)^(0+128)
  7371  06F5  3001               	movlw	1
  7372  06F6                     u10075:	
  7373  06F6  35C1               	lslf	(??_updateSwitchTap+5)^(0+128),f
  7374  06F7  3EFF               	addlw	-1
  7375  06F8  1D03               	skipz
  7376  06F9  2EF6               	goto	u10075
  7377  06FA  3541               	lslf	(??_updateSwitchTap+5)^(0+128),w
  7378  06FB  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7379  06FC  0086               	movwf	6
  7380  06FD  3002               	movlw	2	; select bank4/5
  7381  06FE  0087               	movwf	7
  7382  06FF  083D               	movf	(??_updateSwitchTap+1)^(0+128),w
  7383  0700  3FC0               	movwi [0]fsr1
  7384  0701  083E               	movf	(??_updateSwitchTap+2)^(0+128),w
  7385  0702  3FC1               	movwi [1]fsr1
  7386  0703  083F               	movf	(??_updateSwitchTap+3)^(0+128),w
  7387  0704  3FC2               	movwi [2]fsr1
  7388  0705  0840               	movf	(??_updateSwitchTap+4)^(0+128),w
  7389  0706  3FC3               	movwi [3]fsr1
  7390                           
  7391                           ;SwitchTap.c: 126: tap_total += tap_history[iCnt];
  7392  0707  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7393  0708  00BC               	movwf	??_updateSwitchTap^(0+128)
  7394  0709  3001               	movlw	1
  7395  070A                     u10085:	
  7396  070A  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7397  070B  3EFF               	addlw	-1
  7398  070C  1D03               	skipz
  7399  070D  2F0A               	goto	u10085
  7400  070E  353C               	lslf	??_updateSwitchTap^(0+128),w
  7401  070F  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7402  0710  0086               	movwf	6
  7403  0711  3002               	movlw	2	; select bank4/5
  7404  0712  0087               	movwf	7
  7405  0713  3F40               	moviw [0]fsr1
  7406  0714  0024               	movlb	4	; select bank4
  7407  0715  07BD               	addwf	_tap_total^(0+512),f
  7408  0716  3F41               	moviw [1]fsr1
  7409  0717  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  7410  0718  3F42               	moviw [2]fsr1
  7411  0719  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  7412  071A  3F43               	moviw [3]fsr1
  7413  071B  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  7414  071C  3001               	movlw	1
  7415  071D  0021               	movlb	1	; select bank1
  7416  071E  00BC               	movwf	??_updateSwitchTap^(0+128)
  7417  071F  083C               	movf	??_updateSwitchTap^(0+128),w
  7418  0720  07C4               	addwf	updateSwitchTap@iCnt^(0+128),f
  7419  0721  2ED8               	goto	l9114
  7420  0722                     l9116:	
  7421                           
  7422                           ;SwitchTap.c: 127: }
  7423                           ;SwitchTap.c: 128: tap_history[num_taps] = tap_timer;
  7424  0722  0020               	movlb	0	; select bank0
  7425  0723  084E               	movf	_num_taps,w
  7426  0724  0021               	movlb	1	; select bank1
  7427  0725  00BC               	movwf	??_updateSwitchTap^(0+128)
  7428  0726  3001               	movlw	1
  7429  0727                     u10105:	
  7430  0727  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7431  0728  3EFF               	addlw	-1
  7432  0729  1D03               	skipz
  7433  072A  2F27               	goto	u10105
  7434  072B  353C               	lslf	??_updateSwitchTap^(0+128),w
  7435  072C  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7436  072D  0086               	movwf	6
  7437  072E  3002               	movlw	2	; select bank4/5
  7438  072F  0087               	movwf	7
  7439  0730  0020               	movlb	0	; select bank0
  7440  0731  0851               	movf	_tap_timer,w	;volatile
  7441  0732  3FC0               	movwi [0]fsr1
  7442  0733  0852               	movf	_tap_timer+1,w	;volatile
  7443  0734  3FC1               	movwi [1]fsr1
  7444  0735  0853               	movf	_tap_timer+2,w	;volatile
  7445  0736  3FC2               	movwi [2]fsr1
  7446  0737  0854               	movf	_tap_timer+3,w	;volatile
  7447  0738  3FC3               	movwi [3]fsr1
  7448                           
  7449                           ;SwitchTap.c: 129: tap_total += tap_timer;
  7450  0739  0851               	movf	_tap_timer,w	;volatile
  7451  073A  0024               	movlb	4	; select bank4
  7452  073B  07BD               	addwf	_tap_total^(0+512),f
  7453  073C  0020               	movlb	0	; select bank0
  7454  073D  0852               	movf	_tap_timer+1,w	;volatile
  7455  073E  0024               	movlb	4	; select bank4
  7456  073F  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  7457  0740  0020               	movlb	0	; select bank0
  7458  0741  0853               	movf	_tap_timer+2,w	;volatile
  7459  0742  0024               	movlb	4	; select bank4
  7460  0743  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  7461  0744  0020               	movlb	0	; select bank0
  7462  0745  0854               	movf	_tap_timer+3,w	;volatile
  7463  0746  0024               	movlb	4	; select bank4
  7464  0747  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  7465  0748                     l9120:	
  7466                           
  7467                           ;SwitchTap.c: 130: }
  7468                           ;SwitchTap.c: 132: baseline_mod_time = tap_total / tapCntDivisor;
  7469  0748  0021               	movlb	1	; select bank1
  7470  0749  0842               	movf	updateSwitchTap@tapCntDivisor^(0+128),w
  7471  074A  00A0               	movwf	___aldiv@divisor^(0+128)
  7472  074B  0843               	movf	(updateSwitchTap@tapCntDivisor+1)^(0+128),w
  7473  074C  00A1               	movwf	(___aldiv@divisor+1)^(0+128)
  7474  074D  0D89               	rlf	9,f
  7475  074E  3B89               	subwfb	9,f
  7476  074F  0989               	comf	9,f
  7477  0750  00A2               	movwf	(___aldiv@divisor+2)^(0+128)
  7478  0751  00A3               	movwf	(___aldiv@divisor+3)^(0+128)
  7479  0752  0024               	movlb	4	; select bank4
  7480  0753  0840               	movf	(_tap_total+3)^(0+512),w
  7481  0754  0021               	movlb	1	; select bank1
  7482  0755  00A7               	movwf	(___aldiv@dividend+3)^(0+128)
  7483  0756  0024               	movlb	4	; select bank4
  7484  0757  083F               	movf	(_tap_total+2)^(0+512),w
  7485  0758  0021               	movlb	1	; select bank1
  7486  0759  00A6               	movwf	(___aldiv@dividend+2)^(0+128)
  7487  075A  0024               	movlb	4	; select bank4
  7488  075B  083E               	movf	(_tap_total+1)^(0+512),w
  7489  075C  0021               	movlb	1	; select bank1
  7490  075D  00A5               	movwf	(___aldiv@dividend+1)^(0+128)
  7491  075E  0024               	movlb	4	; select bank4
  7492  075F  083D               	movf	_tap_total^(0+512),w
  7493  0760  0021               	movlb	1	; select bank1
  7494  0761  00A4               	movwf	___aldiv@dividend^(0+128)
  7495  0762  3198  2038         	fcall	___aldiv
  7496  0764  0021               	movlb	1	; select bank1
  7497  0765  0823               	movf	(?___aldiv+3)^(0+128),w
  7498  0766  0020               	movlb	0	; select bank0
  7499  0767  00C3               	movwf	_baseline_mod_time+3	;volatile
  7500  0768  0021               	movlb	1	; select bank1
  7501  0769  0822               	movf	(?___aldiv+2)^(0+128),w
  7502  076A  0020               	movlb	0	; select bank0
  7503  076B  00C2               	movwf	_baseline_mod_time+2	;volatile
  7504  076C  0021               	movlb	1	; select bank1
  7505  076D  0821               	movf	(?___aldiv+1)^(0+128),w
  7506  076E  0020               	movlb	0	; select bank0
  7507  076F  00C1               	movwf	_baseline_mod_time+1	;volatile
  7508  0770  0021               	movlb	1	; select bank1
  7509  0771  0820               	movf	?___aldiv^(0+128),w
  7510  0772  0020               	movlb	0	; select bank0
  7511  0773  00C0               	movwf	_baseline_mod_time	;volatile
  7512                           
  7513                           ;SwitchTap.c: 133: mod_time_changed = 1;
  7514  0774  0023               	movlb	3	; select bank3
  7515  0775  01E4               	clrf	_mod_time_changed^(0+384)
  7516  0776  0AE4               	incf	_mod_time_changed^(0+384),f
  7517                           
  7518                           ;SwitchTap.c: 134: tap_timer = 0;
  7519  0777  3000               	movlw	0
  7520  0778  0020               	movlb	0	; select bank0
  7521  0779  00D4               	movwf	_tap_timer+3	;volatile
  7522  077A  3000               	movlw	0
  7523  077B  00D3               	movwf	_tap_timer+2	;volatile
  7524  077C  3000               	movlw	0
  7525  077D  00D2               	movwf	_tap_timer+1	;volatile
  7526  077E  3000               	movlw	0
  7527  077F  00D1               	movwf	_tap_timer	;volatile
  7528                           
  7529                           ;SwitchTap.c: 136: tap_iteration++;
  7530  0780  3001               	movlw	1
  7531  0781  0023               	movlb	3	; select bank3
  7532  0782  07DD               	addwf	_tap_iteration^(0+384),f
  7533  0783  3000               	movlw	0
  7534  0784  3DDE               	addwfc	(_tap_iteration+1)^(0+384),f
  7535                           
  7536                           ;SwitchTap.c: 137: }
  7537                           ;SwitchTap.c: 139: } else if (switchTap_pressed >= 25) {
  7538  0785  0008               	return
  7539  0786                     l9128:	
  7540  0786  3019               	movlw	25
  7541  0787  0022               	movlb	2	; select bank2
  7542  0788  026C               	subwf	_switchTap_pressed^(0+256),w
  7543  0789  1C03               	skipc
  7544  078A  0008               	return
  7545                           
  7546                           ;SwitchTap.c: 140: switchTap_down = 0;
  7547  078B  0023               	movlb	3	; select bank3
  7548  078C  01C9               	clrf	_switchTap_down^(0+384)
  7549                           
  7550                           ;SwitchTap.c: 141: switchTap_state = 0;
  7551  078D  01E6               	clrf	_switchTap_state^(0+384)
  7552                           
  7553                           ;SwitchTap.c: 147: setLongTapState(0);
  7554  078E  3000               	movlw	0
  7555  078F  0021               	movlb	1	; select bank1
  7556  0790  00A0               	movwf	setLongTapState@f_state^(0+128)
  7557  0791  00A1               	movwf	(setLongTapState@f_state+1)^(0+128)
  7558  0792  31AD  2545         	fcall	_setLongTapState
  7559                           
  7560                           ;SwitchTap.c: 149: longTap_timer = 0;
  7561  0794  0023               	movlb	3	; select bank3
  7562  0795  01B8               	clrf	_longTap_timer^(0+384)	;volatile
  7563  0796  01B9               	clrf	(_longTap_timer+1)^(0+384)	;volatile
  7564                           
  7565                           ;SwitchTap.c: 150: longTap_start = 0;
  7566  0797  0022               	movlb	2	; select bank2
  7567  0798  01EB               	clrf	_longTap_start^(0+256)
  7568                           
  7569                           ;SwitchTap.c: 152: switchTap_pressed = 25;
  7570  0799  3019               	movlw	25
  7571  079A  0021               	movlb	1	; select bank1
  7572  079B  00BC               	movwf	??_updateSwitchTap^(0+128)
  7573  079C  083C               	movf	??_updateSwitchTap^(0+128),w
  7574  079D  0022               	movlb	2	; select bank2
  7575  079E  00EC               	movwf	_switchTap_pressed^(0+256)
  7576  079F  0008               	return
  7577  07A0                     __end_of_updateSwitchTap:	
  7578                           
  7579                           	psect	text4
  7580  2D45                     __ptext4:	
  7581 ;; *************** function _setLongTapState *****************
  7582 ;; Defined at:
  7583 ;;		line 167 in file "SwitchTap.c"
  7584 ;; Parameters:    Size  Location     Type
  7585 ;;  f_state         2    0[BANK1 ] int 
  7586 ;; Auto vars:     Size  Location     Type
  7587 ;;		None
  7588 ;; Return value:  Size  Location     Type
  7589 ;;                  1    wreg      void 
  7590 ;; Registers used:
  7591 ;;		wreg, status,0
  7592 ;; Tracked objects:
  7593 ;;		On entry : 0/0
  7594 ;;		On exit  : 0/0
  7595 ;;		Unchanged: 0/0
  7596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7597 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7598 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7599 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7600 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7601 ;;Total ram usage:        4 bytes
  7602 ;; Hardware stack levels used:    1
  7603 ;; Hardware stack levels required when called:    3
  7604 ;; This function calls:
  7605 ;;		Nothing
  7606 ;; This function is called by:
  7607 ;;		_updateSwitchTap
  7608 ;; This function uses a non-reentrant model
  7609 ;;
  7610                           
  7611                           
  7612                           ;psect for function _setLongTapState
  7613  2D45                     _setLongTapState:	
  7614                           
  7615                           ;SwitchTap.c: 168: if (longTap_state == f_state) {return;}
  7616                           
  7617                           ;incstack = 0
  7618                           ; Regs used in _setLongTapState: [wreg+status,0]
  7619  2D45  0020               	movlb	0	; select bank0
  7620  2D46  084D               	movf	_longTap_state,w	;volatile
  7621  2D47  0021               	movlb	1	; select bank1
  7622  2D48  00A2               	movwf	??_setLongTapState^(0+128)
  7623  2D49  01A3               	clrf	(??_setLongTapState^(0+128)+1)
  7624  2D4A  0821               	movf	(setLongTapState@f_state+1)^(0+128),w
  7625  2D4B  0623               	xorwf	(??_setLongTapState+1)^(0+128),w
  7626  2D4C  1D03               	skipz
  7627  2D4D  2D50               	goto	u9145
  7628  2D4E  0820               	movf	setLongTapState@f_state^(0+128),w
  7629  2D4F  0622               	xorwf	??_setLongTapState^(0+128),w
  7630  2D50                     u9145:	
  7631  2D50  1903               	btfsc	3,2
  7632  2D51  0008               	return
  7633                           
  7634                           ;SwitchTap.c: 169: longTap_state = f_state;
  7635  2D52  0820               	movf	setLongTapState@f_state^(0+128),w
  7636  2D53  00A2               	movwf	??_setLongTapState^(0+128)
  7637  2D54  0822               	movf	??_setLongTapState^(0+128),w
  7638  2D55  0020               	movlb	0	; select bank0
  7639  2D56  00CD               	movwf	_longTap_state	;volatile
  7640                           
  7641                           ;SwitchTap.c: 170: LATBbits.LATB5 = f_state;
  7642  2D57  0021               	movlb	1	; select bank1
  7643  2D58  0C20               	rrf	setLongTapState@f_state^(0+128),w
  7644  2D59  0022               	movlb	2	; select bank2
  7645  2D5A  1C03               	skipc
  7646  2D5B  128D               	bcf	13,5	;volatile
  7647  2D5C  1803               	skipnc
  7648  2D5D  168D               	bsf	13,5	;volatile
  7649  2D5E  0008               	return
  7650  2D5F                     __end_of_setLongTapState:	
  7651                           
  7652                           	psect	text5
  7653  1838                     __ptext5:	
  7654 ;; *************** function ___aldiv *****************
  7655 ;; Defined at:
  7656 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
  7657 ;; Parameters:    Size  Location     Type
  7658 ;;  divisor         4    0[BANK1 ] long 
  7659 ;;  dividend        4    4[BANK1 ] long 
  7660 ;; Auto vars:     Size  Location     Type
  7661 ;;  quotient        4   11[BANK1 ] long 
  7662 ;;  sign            1   10[BANK1 ] unsigned char 
  7663 ;;  counter         1    9[BANK1 ] unsigned char 
  7664 ;; Return value:  Size  Location     Type
  7665 ;;                  4    0[BANK1 ] long 
  7666 ;; Registers used:
  7667 ;;		wreg, status,2, status,0
  7668 ;; Tracked objects:
  7669 ;;		On entry : 0/0
  7670 ;;		On exit  : 0/0
  7671 ;;		Unchanged: 0/0
  7672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7673 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7674 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7675 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7676 ;;      Totals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7677 ;;Total ram usage:       15 bytes
  7678 ;; Hardware stack levels used:    1
  7679 ;; Hardware stack levels required when called:    3
  7680 ;; This function calls:
  7681 ;;		Nothing
  7682 ;; This function is called by:
  7683 ;;		_updateSwitchTap
  7684 ;; This function uses a non-reentrant model
  7685 ;;
  7686                           
  7687                           
  7688                           ;psect for function ___aldiv
  7689  1838                     ___aldiv:	
  7690                           
  7691                           ;incstack = 0
  7692                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  7693  1838  0021               	movlb	1	; select bank1
  7694  1839  01AA               	clrf	___aldiv@sign^(0+128)
  7695  183A  1FA3               	btfss	(___aldiv@divisor+3)^(0+128),7
  7696  183B  2849               	goto	l2077
  7697  183C  09A0               	comf	___aldiv@divisor^(0+128),f
  7698  183D  09A1               	comf	(___aldiv@divisor+1)^(0+128),f
  7699  183E  09A2               	comf	(___aldiv@divisor+2)^(0+128),f
  7700  183F  09A3               	comf	(___aldiv@divisor+3)^(0+128),f
  7701  1840  0AA0               	incf	___aldiv@divisor^(0+128),f
  7702  1841  1903               	skipnz
  7703  1842  0AA1               	incf	(___aldiv@divisor+1)^(0+128),f
  7704  1843  1903               	skipnz
  7705  1844  0AA2               	incf	(___aldiv@divisor+2)^(0+128),f
  7706  1845  1903               	skipnz
  7707  1846  0AA3               	incf	(___aldiv@divisor+3)^(0+128),f
  7708  1847  01AA               	clrf	___aldiv@sign^(0+128)
  7709  1848  0AAA               	incf	___aldiv@sign^(0+128),f
  7710  1849                     l2077:	
  7711  1849  1FA7               	btfss	(___aldiv@dividend+3)^(0+128),7
  7712  184A  285A               	goto	l8694
  7713  184B  09A4               	comf	___aldiv@dividend^(0+128),f
  7714  184C  09A5               	comf	(___aldiv@dividend+1)^(0+128),f
  7715  184D  09A6               	comf	(___aldiv@dividend+2)^(0+128),f
  7716  184E  09A7               	comf	(___aldiv@dividend+3)^(0+128),f
  7717  184F  0AA4               	incf	___aldiv@dividend^(0+128),f
  7718  1850  1903               	skipnz
  7719  1851  0AA5               	incf	(___aldiv@dividend+1)^(0+128),f
  7720  1852  1903               	skipnz
  7721  1853  0AA6               	incf	(___aldiv@dividend+2)^(0+128),f
  7722  1854  1903               	skipnz
  7723  1855  0AA7               	incf	(___aldiv@dividend+3)^(0+128),f
  7724  1856  3001               	movlw	1
  7725  1857  00A8               	movwf	??___aldiv^(0+128)
  7726  1858  0828               	movf	??___aldiv^(0+128),w
  7727  1859  06AA               	xorwf	___aldiv@sign^(0+128),f
  7728  185A                     l8694:	
  7729  185A  3000               	movlw	0
  7730  185B  00AE               	movwf	(___aldiv@quotient+3)^(0+128)
  7731  185C  3000               	movlw	0
  7732  185D  00AD               	movwf	(___aldiv@quotient+2)^(0+128)
  7733  185E  3000               	movlw	0
  7734  185F  00AC               	movwf	(___aldiv@quotient+1)^(0+128)
  7735  1860  3000               	movlw	0
  7736  1861  00AB               	movwf	___aldiv@quotient^(0+128)
  7737  1862  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7738  1863  0422               	iorwf	(___aldiv@divisor+2)^(0+128),w
  7739  1864  0421               	iorwf	(___aldiv@divisor+1)^(0+128),w
  7740  1865  0420               	iorwf	___aldiv@divisor^(0+128),w
  7741  1866  1903               	skipnz
  7742  1867  28A3               	goto	l8716
  7743  1868  01A9               	clrf	___aldiv@counter^(0+128)
  7744  1869  0AA9               	incf	___aldiv@counter^(0+128),f
  7745  186A                     l8702:	
  7746  186A  1BA3               	btfsc	(___aldiv@divisor+3)^(0+128),7
  7747  186B  2878               	goto	l8704
  7748  186C  3001               	movlw	1
  7749  186D                     u9225:	
  7750  186D  35A0               	lslf	___aldiv@divisor^(0+128),f
  7751  186E  0DA1               	rlf	(___aldiv@divisor+1)^(0+128),f
  7752  186F  0DA2               	rlf	(___aldiv@divisor+2)^(0+128),f
  7753  1870  0DA3               	rlf	(___aldiv@divisor+3)^(0+128),f
  7754  1871  0B89               	decfsz	9,f
  7755  1872  286D               	goto	u9225
  7756  1873  3001               	movlw	1
  7757  1874  00A8               	movwf	??___aldiv^(0+128)
  7758  1875  0828               	movf	??___aldiv^(0+128),w
  7759  1876  07A9               	addwf	___aldiv@counter^(0+128),f
  7760  1877  286A               	goto	l8702
  7761  1878                     l8704:	
  7762  1878  3001               	movlw	1
  7763  1879                     u9245:	
  7764  1879  35AB               	lslf	___aldiv@quotient^(0+128),f
  7765  187A  0DAC               	rlf	(___aldiv@quotient+1)^(0+128),f
  7766  187B  0DAD               	rlf	(___aldiv@quotient+2)^(0+128),f
  7767  187C  0DAE               	rlf	(___aldiv@quotient+3)^(0+128),f
  7768  187D  0B89               	decfsz	9,f
  7769  187E  2879               	goto	u9245
  7770  187F  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7771  1880  0227               	subwf	(___aldiv@dividend+3)^(0+128),w
  7772  1881  1D03               	skipz
  7773  1882  288D               	goto	u9255
  7774  1883  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7775  1884  0226               	subwf	(___aldiv@dividend+2)^(0+128),w
  7776  1885  1D03               	skipz
  7777  1886  288D               	goto	u9255
  7778  1887  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  7779  1888  0225               	subwf	(___aldiv@dividend+1)^(0+128),w
  7780  1889  1D03               	skipz
  7781  188A  288D               	goto	u9255
  7782  188B  0820               	movf	___aldiv@divisor^(0+128),w
  7783  188C  0224               	subwf	___aldiv@dividend^(0+128),w
  7784  188D                     u9255:	
  7785  188D  1C03               	skipc
  7786  188E  2898               	goto	l8712
  7787  188F  0820               	movf	___aldiv@divisor^(0+128),w
  7788  1890  02A4               	subwf	___aldiv@dividend^(0+128),f
  7789  1891  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  7790  1892  3BA5               	subwfb	(___aldiv@dividend+1)^(0+128),f
  7791  1893  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7792  1894  3BA6               	subwfb	(___aldiv@dividend+2)^(0+128),f
  7793  1895  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7794  1896  3BA7               	subwfb	(___aldiv@dividend+3)^(0+128),f
  7795  1897  142B               	bsf	___aldiv@quotient^(0+128),0
  7796  1898                     l8712:	
  7797  1898  3001               	movlw	1
  7798  1899                     u9265:	
  7799  1899  36A3               	lsrf	(___aldiv@divisor+3)^(0+128),f
  7800  189A  0CA2               	rrf	(___aldiv@divisor+2)^(0+128),f
  7801  189B  0CA1               	rrf	(___aldiv@divisor+1)^(0+128),f
  7802  189C  0CA0               	rrf	___aldiv@divisor^(0+128),f
  7803  189D  0B89               	decfsz	9,f
  7804  189E  2899               	goto	u9265
  7805  189F  3001               	movlw	1
  7806  18A0  02A9               	subwf	___aldiv@counter^(0+128),f
  7807  18A1  1D03               	btfss	3,2
  7808  18A2  2878               	goto	l8704
  7809  18A3                     l8716:	
  7810  18A3  082A               	movf	___aldiv@sign^(0+128),w
  7811  18A4  1903               	btfsc	3,2
  7812  18A5  28B1               	goto	l8720
  7813  18A6  09AB               	comf	___aldiv@quotient^(0+128),f
  7814  18A7  09AC               	comf	(___aldiv@quotient+1)^(0+128),f
  7815  18A8  09AD               	comf	(___aldiv@quotient+2)^(0+128),f
  7816  18A9  09AE               	comf	(___aldiv@quotient+3)^(0+128),f
  7817  18AA  0AAB               	incf	___aldiv@quotient^(0+128),f
  7818  18AB  1903               	skipnz
  7819  18AC  0AAC               	incf	(___aldiv@quotient+1)^(0+128),f
  7820  18AD  1903               	skipnz
  7821  18AE  0AAD               	incf	(___aldiv@quotient+2)^(0+128),f
  7822  18AF  1903               	skipnz
  7823  18B0  0AAE               	incf	(___aldiv@quotient+3)^(0+128),f
  7824  18B1                     l8720:	
  7825  18B1  082E               	movf	(___aldiv@quotient+3)^(0+128),w
  7826  18B2  00A3               	movwf	(?___aldiv+3)^(0+128)
  7827  18B3  082D               	movf	(___aldiv@quotient+2)^(0+128),w
  7828  18B4  00A2               	movwf	(?___aldiv+2)^(0+128)
  7829  18B5  082C               	movf	(___aldiv@quotient+1)^(0+128),w
  7830  18B6  00A1               	movwf	(?___aldiv+1)^(0+128)
  7831  18B7  082B               	movf	___aldiv@quotient^(0+128),w
  7832  18B8  00A0               	movwf	?___aldiv^(0+128)
  7833  18B9  0008               	return
  7834  18BA                     __end_of___aldiv:	
  7835                           
  7836                           	psect	text6
  7837  11C9                     __ptext6:	
  7838 ;; *************** function _updateSwitchBypass *****************
  7839 ;; Defined at:
  7840 ;;		line 34 in file "SwitchBypass.c"
  7841 ;; Parameters:    Size  Location     Type
  7842 ;;		None
  7843 ;; Auto vars:     Size  Location     Type
  7844 ;;		None
  7845 ;; Return value:  Size  Location     Type
  7846 ;;                  1    wreg      void 
  7847 ;; Registers used:
  7848 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7849 ;; Tracked objects:
  7850 ;;		On entry : 0/0
  7851 ;;		On exit  : 0/0
  7852 ;;		Unchanged: 0/0
  7853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7855 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7856 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7857 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7858 ;;Total ram usage:        2 bytes
  7859 ;; Hardware stack levels used:    1
  7860 ;; Hardware stack levels required when called:    8
  7861 ;; This function calls:
  7862 ;;		_setDoublePressState
  7863 ;;		_setLongBypassState
  7864 ;;		_setSwitchBypassRelays
  7865 ;;		_setSwitchBypassState
  7866 ;; This function is called by:
  7867 ;;		_main
  7868 ;; This function uses a non-reentrant model
  7869 ;;
  7870                           
  7871                           
  7872                           ;psect for function _updateSwitchBypass
  7873  11C9                     _updateSwitchBypass:	
  7874                           
  7875                           ;SwitchBypass.c: 41: if (PORTEbits.RE1 == 0) {
  7876                           
  7877                           ;incstack = 0
  7878                           ; Regs used in _updateSwitchBypass: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7879  11C9  0020               	movlb	0	; select bank0
  7880  11CA  1890               	btfsc	16,1	;volatile
  7881  11CB  29DF               	goto	l8930
  7882                           
  7883                           ;SwitchBypass.c: 42: if (switchBypass_pressed > 0) {
  7884  11CC  0023               	movlb	3	; select bank3
  7885  11CD  083D               	movf	(_switchBypass_pressed+1)^(0+384),w
  7886  11CE  3A80               	xorlw	128
  7887  11CF  0021               	movlb	1	; select bank1
  7888  11D0  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7889  11D1  3080               	movlw	128
  7890  11D2  023C               	subwf	??_updateSwitchBypass^(0+128),w
  7891  11D3  1D03               	skipz
  7892  11D4  29D8               	goto	u9645
  7893  11D5  3001               	movlw	1
  7894  11D6  0023               	movlb	3	; select bank3
  7895  11D7  023C               	subwf	_switchBypass_pressed^(0+384),w
  7896  11D8                     u9645:	
  7897  11D8  1C03               	skipc
  7898  11D9  29F2               	goto	l8934
  7899                           
  7900                           ;SwitchBypass.c: 43: switchBypass_pressed--;
  7901  11DA  30FF               	movlw	255
  7902  11DB  0023               	movlb	3	; select bank3
  7903  11DC  07BC               	addwf	_switchBypass_pressed^(0+384),f
  7904  11DD  30FF               	movlw	255
  7905  11DE  29F1               	goto	L1
  7906  11DF                     l8930:	
  7907                           ;SwitchBypass.c: 44: }
  7908                           ;SwitchBypass.c: 45: } else if (switchBypass_pressed < 25) {
  7909                           
  7910  11DF  0023               	movlb	3	; select bank3
  7911  11E0  083D               	movf	(_switchBypass_pressed+1)^(0+384),w
  7912  11E1  3A80               	xorlw	128
  7913  11E2  0021               	movlb	1	; select bank1
  7914  11E3  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7915  11E4  3080               	movlw	128
  7916  11E5  023C               	subwf	??_updateSwitchBypass^(0+128),w
  7917  11E6  1D03               	skipz
  7918  11E7  29EB               	goto	u9655
  7919  11E8  3019               	movlw	25
  7920  11E9  0023               	movlb	3	; select bank3
  7921  11EA  023C               	subwf	_switchBypass_pressed^(0+384),w
  7922  11EB                     u9655:	
  7923  11EB  1803               	skipnc
  7924  11EC  29F2               	goto	l8934
  7925                           
  7926                           ;SwitchBypass.c: 46: switchBypass_pressed++;
  7927  11ED  3001               	movlw	1
  7928  11EE  0023               	movlb	3	; select bank3
  7929  11EF  07BC               	addwf	_switchBypass_pressed^(0+384),f
  7930  11F0  3000               	movlw	0
  7931  11F1                     L1:	
  7932  11F1  3DBD               	addwfc	(_switchBypass_pressed+1)^(0+384),f
  7933  11F2                     l8934:	
  7934                           
  7935                           ;SwitchBypass.c: 47: }
  7936                           ;SwitchBypass.c: 53: if (switchBypass_pressed == 0) {
  7937  11F2  0023               	movlb	3	; select bank3
  7938  11F3  083C               	movf	_switchBypass_pressed^(0+384),w
  7939  11F4  043D               	iorwf	(_switchBypass_pressed+1)^(0+384),w
  7940  11F5  1D03               	btfss	3,2
  7941  11F6  2A7B               	goto	l8994
  7942                           
  7943                           ;SwitchBypass.c: 56: if (longBypass_start == 0) {
  7944  11F7  0022               	movlb	2	; select bank2
  7945  11F8  086A               	movf	_longBypass_start^(0+256),w
  7946  11F9  1D03               	btfss	3,2
  7947  11FA  2A00               	goto	l8942
  7948                           
  7949                           ;SwitchBypass.c: 57: longBypass_start = 1;
  7950  11FB  01EA               	clrf	_longBypass_start^(0+256)
  7951  11FC  0AEA               	incf	_longBypass_start^(0+256),f
  7952                           
  7953                           ;SwitchBypass.c: 58: longBypass_timer = 0;
  7954  11FD  0023               	movlb	3	; select bank3
  7955  11FE  01B6               	clrf	_longBypass_timer^(0+384)	;volatile
  7956  11FF  01B7               	clrf	(_longBypass_timer+1)^(0+384)	;volatile
  7957  1200                     l8942:	
  7958                           
  7959                           ;SwitchBypass.c: 59: }
  7960                           ;SwitchBypass.c: 61: if (longBypass_timer >= long_press_limit && longBypass_down == 0 &&
      +                           doubleTap_state == 0) {
  7961  1200  0020               	movlb	0	; select bank0
  7962  1201  0849               	movf	_long_press_limit+1,w
  7963  1202  0023               	movlb	3	; select bank3
  7964  1203  0237               	subwf	(_longBypass_timer+1)^(0+384),w	;volatile
  7965  1204  1D03               	skipz
  7966  1205  2A0A               	goto	u9685
  7967  1206  0020               	movlb	0	; select bank0
  7968  1207  0848               	movf	_long_press_limit,w
  7969  1208  0023               	movlb	3	; select bank3
  7970  1209  0236               	subwf	_longBypass_timer^(0+384),w	;volatile
  7971  120A                     u9685:	
  7972  120A  1C03               	skipc
  7973  120B  2A48               	goto	l8968
  7974  120C  0843               	movf	_longBypass_down^(0+384),w
  7975  120D  1D03               	btfss	3,2
  7976  120E  2A48               	goto	l8968
  7977  120F  0020               	movlb	0	; select bank0
  7978  1210  085B               	movf	_doubleTap_state,w	;volatile
  7979  1211  1D03               	btfss	3,2
  7980  1212  2A48               	goto	l8968
  7981                           
  7982                           ;SwitchBypass.c: 64: LATBbits.LATB2 = 0;
  7983  1213  0022               	movlb	2	; select bank2
  7984  1214  110D               	bcf	13,2	;volatile
  7985                           
  7986                           ;SwitchBypass.c: 65: if (longTap_start != 1 ) {
  7987  1215  036B               	decf	_longTap_start^(0+256),w
  7988  1216  1903               	btfsc	3,2
  7989  1217  2A40               	goto	l8966
  7990                           
  7991                           ;SwitchBypass.c: 66: if (switchBypass_state == 1) {
  7992  1218  0020               	movlb	0	; select bank0
  7993  1219  0350               	decf	_switchBypass_state,w
  7994  121A  1D03               	btfss	3,2
  7995  121B  2A48               	goto	l8968
  7996                           
  7997                           ;SwitchBypass.c: 67: longBypass_down = 1;
  7998  121C  0023               	movlb	3	; select bank3
  7999  121D  01C3               	clrf	_longBypass_down^(0+384)
  8000  121E  0AC3               	incf	_longBypass_down^(0+384),f
  8001                           
  8002                           ;SwitchBypass.c: 68: if (longBypass_state == 0) {
  8003  121F  0020               	movlb	0	; select bank0
  8004  1220  085C               	movf	_longBypass_state,w	;volatile
  8005  1221  1D03               	btfss	3,2
  8006  1222  2A2E               	goto	l8962
  8007                           
  8008                           ;SwitchBypass.c: 69: LATBbits.LATB2 = 0;
  8009  1223  0022               	movlb	2	; select bank2
  8010  1224  110D               	bcf	13,2	;volatile
  8011                           
  8012                           ;SwitchBypass.c: 70: setLongBypassState(1);
  8013  1225  3001               	movlw	1
  8014  1226  0021               	movlb	1	; select bank1
  8015  1227  00A0               	movwf	setLongBypassState@f_state^(0+128)
  8016  1228  3000               	movlw	0
  8017  1229  00A1               	movwf	(setLongBypassState@f_state^(0+128)+1)
  8018  122A  31AD  25EF  3191   	fcall	_setLongBypassState
  8019                           
  8020                           ;SwitchBypass.c: 71: } else {
  8021  122D  2A48               	goto	l8968
  8022  122E                     l8962:	
  8023                           
  8024                           ;SwitchBypass.c: 72: setSwitchBypassState(1);
  8025  122E  3001               	movlw	1
  8026  122F  0021               	movlb	1	; select bank1
  8027  1230  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  8028  1231  3000               	movlw	0
  8029  1232  00B7               	movwf	(setSwitchBypassState@f_state^(0+128)+1)
  8030  1233  31AD  257B  3191   	fcall	_setSwitchBypassState
  8031                           
  8032                           ;SwitchBypass.c: 73: setLongBypassState(0);
  8033  1236  3000               	movlw	0
  8034  1237  0021               	movlb	1	; select bank1
  8035  1238  00A0               	movwf	setLongBypassState@f_state^(0+128)
  8036  1239  00A1               	movwf	(setLongBypassState@f_state+1)^(0+128)
  8037  123A  31AD  25EF  3191   	fcall	_setLongBypassState
  8038                           
  8039                           ;SwitchBypass.c: 74: LATBbits.LATB2 = 1;
  8040  123D  0022               	movlb	2	; select bank2
  8041  123E  150D               	bsf	13,2	;volatile
  8042                           
  8043                           ;SwitchBypass.c: 75: }
  8044                           ;SwitchBypass.c: 76: }
  8045                           ;SwitchBypass.c: 77: } else {
  8046  123F  2A48               	goto	l8968
  8047  1240                     l8966:	
  8048                           
  8049                           ;SwitchBypass.c: 78: setDoublePressState(1);
  8050  1240  3001               	movlw	1
  8051  1241  0021               	movlb	1	; select bank1
  8052  1242  00B8               	movwf	setDoublePressState@f_state^(0+128)
  8053  1243  3000               	movlw	0
  8054  1244  00B9               	movwf	(setDoublePressState@f_state^(0+128)+1)
  8055  1245  31A1  213F  3191   	fcall	_setDoublePressState
  8056  1248                     l8968:	
  8057                           
  8058                           ;SwitchBypass.c: 79: }
  8059                           ;SwitchBypass.c: 80: }
  8060                           ;SwitchBypass.c: 83: if (doubleTap_state == 0 && longBypass_down == 0) {
  8061  1248  0020               	movlb	0	; select bank0
  8062  1249  085B               	movf	_doubleTap_state,w	;volatile
  8063  124A  1D03               	btfss	3,2
  8064  124B  2A77               	goto	l8992
  8065  124C  0023               	movlb	3	; select bank3
  8066  124D  0843               	movf	_longBypass_down^(0+384),w
  8067  124E  1D03               	btfss	3,2
  8068  124F  2A77               	goto	l8992
  8069                           
  8070                           ;SwitchBypass.c: 84: if (switchBypass_state == 1) {
  8071  1250  0020               	movlb	0	; select bank0
  8072  1251  0350               	decf	_switchBypass_state,w
  8073  1252  1D03               	btfss	3,2
  8074  1253  2A62               	goto	l8980
  8075                           
  8076                           ;SwitchBypass.c: 86: if (switchBypass_up == 1) {
  8077  1254  0024               	movlb	4	; select bank4
  8078  1255  036A               	decf	_switchBypass_up^(0+512),w
  8079  1256  046B               	iorwf	(_switchBypass_up+1)^(0+512),w
  8080  1257  1D03               	btfss	3,2
  8081  1258  2A77               	goto	l8992
  8082                           
  8083                           ;SwitchBypass.c: 87: currentBypassState = 1;
  8084  1259  0023               	movlb	3	; select bank3
  8085  125A  01E0               	clrf	_currentBypassState^(0+384)
  8086  125B  0AE0               	incf	_currentBypassState^(0+384),f
  8087                           
  8088                           ;SwitchBypass.c: 88: switchBypass_toggle = 1;
  8089  125C  3001               	movlw	1
  8090  125D  0024               	movlb	4	; select bank4
  8091  125E  00D9               	movwf	_switchBypass_toggle^(0+512)
  8092  125F  3000               	movlw	0
  8093  1260  00DA               	movwf	(_switchBypass_toggle^(0+512)+1)
  8094                           
  8095                           ;SwitchBypass.c: 89: }
  8096                           ;SwitchBypass.c: 90: } else {
  8097  1261  2A77               	goto	l8992
  8098  1262                     l8980:	
  8099                           
  8100                           ;SwitchBypass.c: 91: if (bypass_turning_on != 1) {
  8101  1262  0023               	movlb	3	; select bank3
  8102  1263  0341               	decf	_bypass_turning_on^(0+384),w
  8103  1264  1903               	btfsc	3,2
  8104  1265  2A77               	goto	l8992
  8105                           
  8106                           ;SwitchBypass.c: 93: currentBypassState = 0;
  8107  1266  01E0               	clrf	_currentBypassState^(0+384)
  8108                           
  8109                           ;SwitchBypass.c: 95: bypass_turning_on = 1;
  8110  1267  01C1               	clrf	_bypass_turning_on^(0+384)
  8111  1268  0AC1               	incf	_bypass_turning_on^(0+384),f
  8112                           
  8113                           ;SwitchBypass.c: 96: switchBypass_toggle = 0;
  8114  1269  0024               	movlb	4	; select bank4
  8115  126A  01D9               	clrf	_switchBypass_toggle^(0+512)
  8116  126B  01DA               	clrf	(_switchBypass_toggle+1)^(0+512)
  8117                           
  8118                           ;SwitchBypass.c: 98: longBypass_save = longBypass_state;
  8119  126C  0020               	movlb	0	; select bank0
  8120  126D  085C               	movf	_longBypass_state,w	;volatile
  8121  126E  0021               	movlb	1	; select bank1
  8122  126F  00BC               	movwf	??_updateSwitchBypass^(0+128)
  8123  1270  083C               	movf	??_updateSwitchBypass^(0+128),w
  8124  1271  0023               	movlb	3	; select bank3
  8125  1272  00C4               	movwf	_longBypass_save^(0+384)
  8126                           
  8127                           ;SwitchBypass.c: 99: longBypass_state = 0;
  8128  1273  0020               	movlb	0	; select bank0
  8129  1274  01DC               	clrf	_longBypass_state	;volatile
  8130                           
  8131                           ;SwitchBypass.c: 100: longBypass_start = 0;
  8132  1275  0022               	movlb	2	; select bank2
  8133  1276  01EA               	clrf	_longBypass_start^(0+256)
  8134  1277                     l8992:	
  8135                           
  8136                           ;SwitchBypass.c: 101: }
  8137                           ;SwitchBypass.c: 102: }
  8138                           ;SwitchBypass.c: 104: }
  8139                           ;SwitchBypass.c: 105: switchBypass_up = 0;
  8140  1277  0024               	movlb	4	; select bank4
  8141  1278  01EA               	clrf	_switchBypass_up^(0+512)
  8142  1279  01EB               	clrf	(_switchBypass_up+1)^(0+512)
  8143                           
  8144                           ;SwitchBypass.c: 106: } else if (switchBypass_pressed >= 25) {
  8145  127A  0008               	return
  8146  127B                     l8994:	
  8147  127B  0023               	movlb	3	; select bank3
  8148  127C  083D               	movf	(_switchBypass_pressed+1)^(0+384),w
  8149  127D  3A80               	xorlw	128
  8150  127E  0021               	movlb	1	; select bank1
  8151  127F  00BC               	movwf	??_updateSwitchBypass^(0+128)
  8152  1280  3080               	movlw	128
  8153  1281  023C               	subwf	??_updateSwitchBypass^(0+128),w
  8154  1282  1D03               	skipz
  8155  1283  2A87               	goto	u9795
  8156  1284  3019               	movlw	25
  8157  1285  0023               	movlb	3	; select bank3
  8158  1286  023C               	subwf	_switchBypass_pressed^(0+384),w
  8159  1287                     u9795:	
  8160  1287  1C03               	skipc
  8161  1288  0008               	return
  8162                           
  8163                           ;SwitchBypass.c: 107: if (doubleTap_state == 1) {
  8164  1289  0020               	movlb	0	; select bank0
  8165  128A  035B               	decf	_doubleTap_state,w	;volatile
  8166  128B  1D03               	btfss	3,2
  8167  128C  2A96               	goto	l9000
  8168                           
  8169                           ;SwitchBypass.c: 108: setSwitchBypassState(currentBypassState);
  8170  128D  0023               	movlb	3	; select bank3
  8171  128E  0860               	movf	_currentBypassState^(0+384),w
  8172  128F  0021               	movlb	1	; select bank1
  8173  1290  00BC               	movwf	??_updateSwitchBypass^(0+128)
  8174  1291  01BD               	clrf	(??_updateSwitchBypass^(0+128)+1)
  8175  1292  083C               	movf	??_updateSwitchBypass^(0+128),w
  8176  1293  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  8177  1294  083D               	movf	(??_updateSwitchBypass+1)^(0+128),w
  8178  1295  2AC6               	goto	L2
  8179  1296                     l9000:	
  8180                           ;SwitchBypass.c: 109: } else if (bypass_turning_on == 1) {
  8181                           
  8182  1296  0023               	movlb	3	; select bank3
  8183  1297  0341               	decf	_bypass_turning_on^(0+384),w
  8184  1298  1D03               	btfss	3,2
  8185  1299  2AB6               	goto	l9010
  8186                           
  8187                           ;SwitchBypass.c: 111: if (longBypass_save == 1) {
  8188  129A  0344               	decf	_longBypass_save^(0+384),w
  8189  129B  1D03               	btfss	3,2
  8190  129C  2AB0               	goto	l9008
  8191                           
  8192                           ;SwitchBypass.c: 112: LATBbits.LATB2 = 0;
  8193  129D  0022               	movlb	2	; select bank2
  8194  129E  110D               	bcf	13,2	;volatile
  8195                           
  8196                           ;SwitchBypass.c: 113: setLongBypassState(1);
  8197  129F  3001               	movlw	1
  8198  12A0  0021               	movlb	1	; select bank1
  8199  12A1  00A0               	movwf	setLongBypassState@f_state^(0+128)
  8200  12A2  3000               	movlw	0
  8201  12A3  00A1               	movwf	(setLongBypassState@f_state^(0+128)+1)
  8202  12A4  31AD  25EF  3191   	fcall	_setLongBypassState
  8203                           
  8204                           ;SwitchBypass.c: 114: setSwitchBypassRelays(1);
  8205  12A7  3001               	movlw	1
  8206  12A8  0021               	movlb	1	; select bank1
  8207  12A9  00B2               	movwf	setSwitchBypassRelays@f_state^(0+128)
  8208  12AA  3000               	movlw	0
  8209  12AB  00B3               	movwf	(setSwitchBypassRelays@f_state^(0+128)+1)
  8210  12AC  31AF  27CA  3191   	fcall	_setSwitchBypassRelays
  8211                           
  8212                           ;SwitchBypass.c: 115: } else {
  8213  12AF  2ACA               	goto	l9018
  8214  12B0                     l9008:	
  8215                           
  8216                           ;SwitchBypass.c: 116: setSwitchBypassState(1);
  8217  12B0  3001               	movlw	1
  8218  12B1  0021               	movlb	1	; select bank1
  8219  12B2  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  8220  12B3  3000               	movlw	0
  8221  12B4  00B7               	movwf	(setSwitchBypassState@f_state^(0+128)+1)
  8222  12B5  2AC7               	goto	L3
  8223  12B6                     l9010:	
  8224                           ;SwitchBypass.c: 117: }
  8225                           ;SwitchBypass.c: 119: } else if (switchBypass_toggle == 1 && longBypass_down == 0 && dou
      +                          bleTap_state == 0) {
  8226                           
  8227  12B6  0024               	movlb	4	; select bank4
  8228  12B7  0359               	decf	_switchBypass_toggle^(0+512),w
  8229  12B8  045A               	iorwf	(_switchBypass_toggle+1)^(0+512),w
  8230  12B9  1D03               	btfss	3,2
  8231  12BA  2ACA               	goto	l9018
  8232  12BB  0023               	movlb	3	; select bank3
  8233  12BC  0843               	movf	_longBypass_down^(0+384),w
  8234  12BD  1D03               	btfss	3,2
  8235  12BE  2ACA               	goto	l9018
  8236  12BF  0020               	movlb	0	; select bank0
  8237  12C0  085B               	movf	_doubleTap_state,w	;volatile
  8238  12C1  1D03               	btfss	3,2
  8239  12C2  2ACA               	goto	l9018
  8240                           
  8241                           ;SwitchBypass.c: 120: setSwitchBypassState(0);
  8242  12C3  3000               	movlw	0
  8243  12C4  0021               	movlb	1	; select bank1
  8244  12C5  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  8245  12C6                     L2:	
  8246  12C6  00B7               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
  8247  12C7                     L3:	
  8248  12C7  31AD  257B  3191   	fcall	_setSwitchBypassState
  8249  12CA                     l9018:	
  8250                           
  8251                           ;SwitchBypass.c: 121: }
  8252                           ;SwitchBypass.c: 123: longBypass_down = 0;
  8253  12CA  0023               	movlb	3	; select bank3
  8254  12CB  01C3               	clrf	_longBypass_down^(0+384)
  8255                           
  8256                           ;SwitchBypass.c: 124: if (longBypass_state == 0) {
  8257  12CC  0020               	movlb	0	; select bank0
  8258  12CD  085C               	movf	_longBypass_state,w	;volatile
  8259  12CE  1D03               	btfss	3,2
  8260  12CF  2AD6               	goto	l9024
  8261                           
  8262                           ;SwitchBypass.c: 125: LATBbits.LATB2 = switchBypass_state;
  8263  12D0  0C50               	rrf	_switchBypass_state,w
  8264  12D1  0022               	movlb	2	; select bank2
  8265  12D2  1C03               	skipc
  8266  12D3  110D               	bcf	13,2	;volatile
  8267  12D4  1803               	skipnc
  8268  12D5  150D               	bsf	13,2	;volatile
  8269  12D6                     l9024:	
  8270                           
  8271                           ;SwitchBypass.c: 126: }
  8272                           ;SwitchBypass.c: 128: setDoublePressState(0);
  8273  12D6  3000               	movlw	0
  8274  12D7  0021               	movlb	1	; select bank1
  8275  12D8  00B8               	movwf	setDoublePressState@f_state^(0+128)
  8276  12D9  00B9               	movwf	(setDoublePressState@f_state+1)^(0+128)
  8277  12DA  31A1  213F         	fcall	_setDoublePressState
  8278                           
  8279                           ;SwitchBypass.c: 129: longBypass_start = 0;
  8280  12DC  0022               	movlb	2	; select bank2
  8281  12DD  01EA               	clrf	_longBypass_start^(0+256)
  8282                           
  8283                           ;SwitchBypass.c: 130: bypass_turning_on = 0;
  8284  12DE  0023               	movlb	3	; select bank3
  8285  12DF  01C1               	clrf	_bypass_turning_on^(0+384)
  8286                           
  8287                           ;SwitchBypass.c: 131: switchBypass_toggle = 0;
  8288  12E0  0024               	movlb	4	; select bank4
  8289  12E1  01D9               	clrf	_switchBypass_toggle^(0+512)
  8290  12E2  01DA               	clrf	(_switchBypass_toggle+1)^(0+512)
  8291                           
  8292                           ;SwitchBypass.c: 132: switchBypass_up = 1;
  8293  12E3  3001               	movlw	1
  8294  12E4  00EA               	movwf	_switchBypass_up^(0+512)
  8295  12E5  3000               	movlw	0
  8296  12E6  00EB               	movwf	(_switchBypass_up^(0+512)+1)
  8297                           
  8298                           ;SwitchBypass.c: 134: switchBypass_pressed = 25;
  8299  12E7  3019               	movlw	25
  8300  12E8  0023               	movlb	3	; select bank3
  8301  12E9  00BC               	movwf	_switchBypass_pressed^(0+384)
  8302  12EA  3000               	movlw	0
  8303  12EB  00BD               	movwf	(_switchBypass_pressed^(0+384)+1)
  8304  12EC  0008               	return
  8305  12ED                     __end_of_updateSwitchBypass:	
  8306                           
  8307                           	psect	text7
  8308  2DEF                     __ptext7:	
  8309 ;; *************** function _setLongBypassState *****************
  8310 ;; Defined at:
  8311 ;;		line 164 in file "SwitchBypass.c"
  8312 ;; Parameters:    Size  Location     Type
  8313 ;;  f_state         2    0[BANK1 ] int 
  8314 ;; Auto vars:     Size  Location     Type
  8315 ;;		None
  8316 ;; Return value:  Size  Location     Type
  8317 ;;                  1    wreg      void 
  8318 ;; Registers used:
  8319 ;;		wreg, status,0
  8320 ;; Tracked objects:
  8321 ;;		On entry : 0/0
  8322 ;;		On exit  : 0/0
  8323 ;;		Unchanged: 0/0
  8324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8325 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8327 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8328 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8329 ;;Total ram usage:        4 bytes
  8330 ;; Hardware stack levels used:    1
  8331 ;; Hardware stack levels required when called:    3
  8332 ;; This function calls:
  8333 ;;		Nothing
  8334 ;; This function is called by:
  8335 ;;		_updateSwitchBypass
  8336 ;; This function uses a non-reentrant model
  8337 ;;
  8338                           
  8339                           
  8340                           ;psect for function _setLongBypassState
  8341  2DEF                     _setLongBypassState:	
  8342                           
  8343                           ;SwitchBypass.c: 165: if (longBypass_state == f_state) {return;}
  8344                           
  8345                           ;incstack = 0
  8346                           ; Regs used in _setLongBypassState: [wreg+status,0]
  8347  2DEF  0020               	movlb	0	; select bank0
  8348  2DF0  085C               	movf	_longBypass_state,w	;volatile
  8349  2DF1  0021               	movlb	1	; select bank1
  8350  2DF2  00A2               	movwf	??_setLongBypassState^(0+128)
  8351  2DF3  01A3               	clrf	(??_setLongBypassState^(0+128)+1)
  8352  2DF4  0821               	movf	(setLongBypassState@f_state+1)^(0+128),w
  8353  2DF5  0623               	xorwf	(??_setLongBypassState+1)^(0+128),w
  8354  2DF6  1D03               	skipz
  8355  2DF7  2DFA               	goto	u9095
  8356  2DF8  0820               	movf	setLongBypassState@f_state^(0+128),w
  8357  2DF9  0622               	xorwf	??_setLongBypassState^(0+128),w
  8358  2DFA                     u9095:	
  8359  2DFA  1903               	btfsc	3,2
  8360  2DFB  0008               	return
  8361                           
  8362                           ;SwitchBypass.c: 166: longBypass_state = f_state;
  8363  2DFC  0820               	movf	setLongBypassState@f_state^(0+128),w
  8364  2DFD  00A2               	movwf	??_setLongBypassState^(0+128)
  8365  2DFE  0822               	movf	??_setLongBypassState^(0+128),w
  8366  2DFF  0020               	movlb	0	; select bank0
  8367  2E00  00DC               	movwf	_longBypass_state	;volatile
  8368                           
  8369                           ;SwitchBypass.c: 167: LATBbits.LATB3 = f_state;
  8370  2E01  0021               	movlb	1	; select bank1
  8371  2E02  0C20               	rrf	setLongBypassState@f_state^(0+128),w
  8372  2E03  0022               	movlb	2	; select bank2
  8373  2E04  1C03               	skipc
  8374  2E05  118D               	bcf	13,3	;volatile
  8375  2E06  1803               	skipnc
  8376  2E07  158D               	bsf	13,3	;volatile
  8377                           
  8378                           ;SwitchBypass.c: 168: PORTCbits.RC4 = f_state;
  8379  2E08  0021               	movlb	1	; select bank1
  8380  2E09  0C20               	rrf	setLongBypassState@f_state^(0+128),w
  8381  2E0A  0020               	movlb	0	; select bank0
  8382  2E0B  1C03               	skipc
  8383  2E0C  120E               	bcf	14,4	;volatile
  8384  2E0D  1803               	skipnc
  8385  2E0E  160E               	bsf	14,4	;volatile
  8386  2E0F  0008               	return
  8387  2E10                     __end_of_setLongBypassState:	
  8388                           
  8389                           	psect	text8
  8390  213F                     __ptext8:	
  8391 ;; *************** function _setDoublePressState *****************
  8392 ;; Defined at:
  8393 ;;		line 21 in file "preset_programming.c"
  8394 ;; Parameters:    Size  Location     Type
  8395 ;;  f_state         2   24[BANK1 ] int 
  8396 ;; Auto vars:     Size  Location     Type
  8397 ;;		None
  8398 ;; Return value:  Size  Location     Type
  8399 ;;                  1    wreg      void 
  8400 ;; Registers used:
  8401 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8402 ;; Tracked objects:
  8403 ;;		On entry : 0/0
  8404 ;;		On exit  : 0/0
  8405 ;;		Unchanged: 0/0
  8406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8407 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8408 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8409 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8410 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8411 ;;Total ram usage:        4 bytes
  8412 ;; Hardware stack levels used:    1
  8413 ;; Hardware stack levels required when called:    7
  8414 ;; This function calls:
  8415 ;;		_resetRingLEDs
  8416 ;;		_setPedalMode
  8417 ;;		_setPresetDisplay
  8418 ;;		_showSave
  8419 ;;		_wait_ms
  8420 ;; This function is called by:
  8421 ;;		_updateSwitchBypass
  8422 ;;		_updateSwitchTap
  8423 ;; This function uses a non-reentrant model
  8424 ;;
  8425                           
  8426                           
  8427                           ;psect for function _setDoublePressState
  8428  213F                     _setDoublePressState:	
  8429                           
  8430                           ;preset_programming.c: 22: if (doubleTap_state == f_state) {return;}
  8431                           
  8432                           ;incstack = 0
  8433                           ; Regs used in _setDoublePressState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8434  213F  0020               	movlb	0	; select bank0
  8435  2140  085B               	movf	_doubleTap_state,w	;volatile
  8436  2141  0021               	movlb	1	; select bank1
  8437  2142  00BA               	movwf	??_setDoublePressState^(0+128)
  8438  2143  01BB               	clrf	(??_setDoublePressState^(0+128)+1)
  8439  2144  0839               	movf	(setDoublePressState@f_state+1)^(0+128),w
  8440  2145  063B               	xorwf	(??_setDoublePressState+1)^(0+128),w
  8441  2146  1D03               	skipz
  8442  2147  294A               	goto	u9105
  8443  2148  0838               	movf	setDoublePressState@f_state^(0+128),w
  8444  2149  063A               	xorwf	??_setDoublePressState^(0+128),w
  8445  214A                     u9105:	
  8446  214A  1903               	btfsc	3,2
  8447  214B  0008               	return
  8448                           
  8449                           ;preset_programming.c: 23: doubleTap_state = f_state;
  8450  214C  0838               	movf	setDoublePressState@f_state^(0+128),w
  8451  214D  00BA               	movwf	??_setDoublePressState^(0+128)
  8452  214E  083A               	movf	??_setDoublePressState^(0+128),w
  8453  214F  0020               	movlb	0	; select bank0
  8454  2150  00DB               	movwf	_doubleTap_state	;volatile
  8455                           
  8456                           ;preset_programming.c: 24: if (f_state == 1) {
  8457  2151  0021               	movlb	1	; select bank1
  8458  2152  0338               	decf	setDoublePressState@f_state^(0+128),w
  8459  2153  0439               	iorwf	(setDoublePressState@f_state+1)^(0+128),w
  8460  2154  1D03               	btfss	3,2
  8461  2155  2959               	goto	l8616
  8462                           
  8463                           ;preset_programming.c: 25: LATBbits.LATB4 = 0;
  8464  2156  0022               	movlb	2	; select bank2
  8465  2157  120D               	bcf	13,4	;volatile
  8466                           
  8467                           ;preset_programming.c: 27: LATBbits.LATB5 = 0;
  8468  2158  128D               	bcf	13,5	;volatile
  8469  2159                     l8616:	
  8470                           
  8471                           ;preset_programming.c: 30: }
  8472                           ;preset_programming.c: 32: if (doubleTap_state == 1) {
  8473  2159  0020               	movlb	0	; select bank0
  8474  215A  035B               	decf	_doubleTap_state,w	;volatile
  8475  215B  1D03               	btfss	3,2
  8476  215C  2975               	goto	l8632
  8477                           
  8478                           ;preset_programming.c: 33: if (presetSaveMode == 0) {
  8479  215D  085E               	movf	_presetSaveMode,w
  8480  215E  1D03               	btfss	3,2
  8481  215F  296A               	goto	l8624
  8482                           
  8483                           ;preset_programming.c: 34: presetSaveMode = 1;
  8484  2160  01DE               	clrf	_presetSaveMode
  8485  2161  0ADE               	incf	_presetSaveMode,f
  8486                           
  8487                           ;preset_programming.c: 35: LATBbits.LATB1 = 0;
  8488  2162  0022               	movlb	2	; select bank2
  8489  2163  108D               	bcf	13,1	;volatile
  8490                           
  8491                           ;preset_programming.c: 36: setPresetDisplay(presetChannel);
  8492  2164  0020               	movlb	0	; select bank0
  8493  2165  084F               	movf	_presetChannel,w
  8494  2166  31A0  2014  31A1   	fcall	_setPresetDisplay
  8495                           
  8496                           ;preset_programming.c: 37: } else {
  8497  2169  2975               	goto	l8632
  8498  216A                     l8624:	
  8499                           
  8500                           ;preset_programming.c: 39: presetSaveMode = 0;
  8501  216A  0020               	movlb	0	; select bank0
  8502  216B  01DE               	clrf	_presetSaveMode
  8503                           
  8504                           ;preset_programming.c: 40: setPedalMode();
  8505  216C  31AE  2632  31A1   	fcall	_setPedalMode
  8506                           
  8507                           ;preset_programming.c: 41: resetRingLEDs();
  8508  216F  31AD  252B  31A1   	fcall	_resetRingLEDs
  8509                           
  8510                           ;preset_programming.c: 42: showSave();
  8511  2172  31A0  2000  31A1   	fcall	_showSave
  8512  2175                     l8632:	
  8513                           
  8514                           ;preset_programming.c: 44: }
  8515                           ;preset_programming.c: 45: }
  8516                           ;preset_programming.c: 47: wait_ms(20);
  8517  2175  3014               	movlw	20
  8518  2176  0021               	movlb	1	; select bank1
  8519  2177  00AC               	movwf	wait_ms@timeSec^(0+128)
  8520  2178  3000               	movlw	0
  8521  2179  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8522  217A  31AF  2798         	fcall	_wait_ms
  8523  217C  0008               	return
  8524  217D                     __end_of_setDoublePressState:	
  8525                           
  8526                           	psect	text9
  8527  2000                     __ptext9:	
  8528 ;; *************** function _showSave *****************
  8529 ;; Defined at:
  8530 ;;		line 112 in file "LEDs.c"
  8531 ;; Parameters:    Size  Location     Type
  8532 ;;		None
  8533 ;; Auto vars:     Size  Location     Type
  8534 ;;		None
  8535 ;; Return value:  Size  Location     Type
  8536 ;;                  1    wreg      void 
  8537 ;; Registers used:
  8538 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8539 ;; Tracked objects:
  8540 ;;		On entry : 0/0
  8541 ;;		On exit  : 0/0
  8542 ;;		Unchanged: 0/0
  8543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8546 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8547 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8548 ;;Total ram usage:        1 bytes
  8549 ;; Hardware stack levels used:    1
  8550 ;; Hardware stack levels required when called:    6
  8551 ;; This function calls:
  8552 ;;		_ring_tactiles
  8553 ;;		_solidring_tactiles
  8554 ;; This function is called by:
  8555 ;;		_setDoublePressState
  8556 ;; This function uses a non-reentrant model
  8557 ;;
  8558                           
  8559                           
  8560                           ;psect for function _showSave
  8561  2000                     _showSave:	
  8562                           
  8563                           ;LEDs.c: 113: suspend_blink = 1;
  8564                           
  8565                           ;incstack = 0
  8566                           ; Regs used in _showSave: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8567  2000  3001               	movlw	1
  8568  2001  0021               	movlb	1	; select bank1
  8569  2002  00B7               	movwf	??_showSave^(0+128)
  8570  2003  0837               	movf	??_showSave^(0+128),w
  8571  2004  0020               	movlb	0	; select bank0
  8572  2005  00DF               	movwf	_suspend_blink	;volatile
  8573                           
  8574                           ;LEDs.c: 114: ring_tactiles();
  8575  2006  31A3  23EC  31A0   	fcall	_ring_tactiles
  8576                           
  8577                           ;LEDs.c: 115: ring_tactiles();
  8578  2009  31A3  23EC  31A0   	fcall	_ring_tactiles
  8579                           
  8580                           ;LEDs.c: 116: solidring_tactiles();
  8581  200C  31A1  21BD  31A0   	fcall	_solidring_tactiles
  8582                           
  8583                           ;LEDs.c: 117: solidring_tactiles();
  8584  200F  31A1  21BD         	fcall	_solidring_tactiles
  8585                           
  8586                           ;LEDs.c: 118: suspend_blink = 0;
  8587  2011  0020               	movlb	0	; select bank0
  8588  2012  01DF               	clrf	_suspend_blink	;volatile
  8589  2013  0008               	return
  8590  2014                     __end_of_showSave:	
  8591                           
  8592                           	psect	text10
  8593  21BD                     __ptext10:	
  8594 ;; *************** function _solidring_tactiles *****************
  8595 ;; Defined at:
  8596 ;;		line 208 in file "LEDs.c"
  8597 ;; Parameters:    Size  Location     Type
  8598 ;;		None
  8599 ;; Auto vars:     Size  Location     Type
  8600 ;;  ring_delay      1   20[BANK1 ] unsigned char 
  8601 ;; Return value:  Size  Location     Type
  8602 ;;                  1    wreg      void 
  8603 ;; Registers used:
  8604 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8605 ;; Tracked objects:
  8606 ;;		On entry : 0/0
  8607 ;;		On exit  : 0/0
  8608 ;;		Unchanged: 0/0
  8609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8611 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8612 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8613 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8614 ;;Total ram usage:        3 bytes
  8615 ;; Hardware stack levels used:    1
  8616 ;; Hardware stack levels required when called:    5
  8617 ;; This function calls:
  8618 ;;		_set_leds_bottom
  8619 ;;		_set_leds_top
  8620 ;;		_wait_ms
  8621 ;; This function is called by:
  8622 ;;		_showSave
  8623 ;;		_showBootSequence
  8624 ;; This function uses a non-reentrant model
  8625 ;;
  8626                           
  8627                           
  8628                           ;psect for function _solidring_tactiles
  8629  21BD                     _solidring_tactiles:	
  8630                           
  8631                           ;LEDs.c: 209: uint8_t ring_delay = 30;
  8632                           
  8633                           ;incstack = 0
  8634                           ; Regs used in _solidring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8635  21BD  301E               	movlw	30
  8636  21BE  0021               	movlb	1	; select bank1
  8637  21BF  00B2               	movwf	??_solidring_tactiles^(0+128)
  8638  21C0  0832               	movf	??_solidring_tactiles^(0+128),w
  8639  21C1  00B4               	movwf	solidring_tactiles@ring_delay^(0+128)
  8640                           
  8641                           ;LEDs.c: 210: set_leds_top(100, 1);
  8642  21C2  3064               	movlw	100
  8643  21C3  00A0               	movwf	set_leds_top@x^(0+128)
  8644  21C4  3000               	movlw	0
  8645  21C5  00A1               	movwf	(set_leds_top@x^(0+128)+1)
  8646  21C6  3001               	movlw	1
  8647  21C7  00A2               	movwf	set_leds_top@ledState^(0+128)
  8648  21C8  3000               	movlw	0
  8649  21C9  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8650  21CA  31A4  24DF  31A1   	fcall	_set_leds_top
  8651                           
  8652                           ;LEDs.c: 211: set_leds_bottom(100);
  8653  21CD  3064               	movlw	100
  8654  21CE  0021               	movlb	1	; select bank1
  8655  21CF  00A0               	movwf	set_leds_bottom@x^(0+128)
  8656  21D0  3000               	movlw	0
  8657  21D1  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8658  21D2  31A0  204E  31A1   	fcall	_set_leds_bottom
  8659                           
  8660                           ;LEDs.c: 212: wait_ms(ring_delay);
  8661  21D5  0021               	movlb	1	; select bank1
  8662  21D6  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8663  21D7  00B2               	movwf	??_solidring_tactiles^(0+128)
  8664  21D8  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8665  21D9  0832               	movf	??_solidring_tactiles^(0+128),w
  8666  21DA  00AC               	movwf	wait_ms@timeSec^(0+128)
  8667  21DB  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8668  21DC  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8669  21DD  31AF  2798  31A1   	fcall	_wait_ms
  8670                           
  8671                           ;LEDs.c: 214: set_leds_top(0, 1);
  8672  21E0  3000               	movlw	0
  8673  21E1  0021               	movlb	1	; select bank1
  8674  21E2  00A0               	movwf	set_leds_top@x^(0+128)
  8675  21E3  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8676  21E4  3001               	movlw	1
  8677  21E5  00A2               	movwf	set_leds_top@ledState^(0+128)
  8678  21E6  3000               	movlw	0
  8679  21E7  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8680  21E8  31A4  24DF  31A1   	fcall	_set_leds_top
  8681                           
  8682                           ;LEDs.c: 215: set_leds_bottom(0);
  8683  21EB  3000               	movlw	0
  8684  21EC  0021               	movlb	1	; select bank1
  8685  21ED  00A0               	movwf	set_leds_bottom@x^(0+128)
  8686  21EE  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8687  21EF  31A0  204E  31A1   	fcall	_set_leds_bottom
  8688                           
  8689                           ;LEDs.c: 216: wait_ms(ring_delay);
  8690  21F2  0021               	movlb	1	; select bank1
  8691  21F3  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8692  21F4  00B2               	movwf	??_solidring_tactiles^(0+128)
  8693  21F5  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8694  21F6  0832               	movf	??_solidring_tactiles^(0+128),w
  8695  21F7  00AC               	movwf	wait_ms@timeSec^(0+128)
  8696  21F8  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8697  21F9  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8698  21FA  31AF  2798         	fcall	_wait_ms
  8699  21FC  0008               	return
  8700  21FD                     __end_of_solidring_tactiles:	
  8701                           
  8702                           	psect	text11
  8703  23EC                     __ptext11:	
  8704 ;; *************** function _ring_tactiles *****************
  8705 ;; Defined at:
  8706 ;;		line 196 in file "LEDs.c"
  8707 ;; Parameters:    Size  Location     Type
  8708 ;;		None
  8709 ;; Auto vars:     Size  Location     Type
  8710 ;;  iLed            2   21[BANK1 ] int 
  8711 ;;  iLed            2   19[BANK1 ] int 
  8712 ;; Return value:  Size  Location     Type
  8713 ;;                  1    wreg      void 
  8714 ;; Registers used:
  8715 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8716 ;; Tracked objects:
  8717 ;;		On entry : 0/0
  8718 ;;		On exit  : 0/0
  8719 ;;		Unchanged: 0/0
  8720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8722 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8723 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8724 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8725 ;;Total ram usage:        5 bytes
  8726 ;; Hardware stack levels used:    1
  8727 ;; Hardware stack levels required when called:    5
  8728 ;; This function calls:
  8729 ;;		_set_leds_bottom
  8730 ;;		_set_leds_top
  8731 ;;		_wait_ms
  8732 ;; This function is called by:
  8733 ;;		_showSave
  8734 ;; This function uses a non-reentrant model
  8735 ;;
  8736                           
  8737                           
  8738                           ;psect for function _ring_tactiles
  8739  23EC                     _ring_tactiles:	
  8740                           
  8741                           ;LEDs.c: 197: for (int iLed = 1; iLed < 7; iLed++) {
  8742                           
  8743                           ;incstack = 0
  8744                           ; Regs used in _ring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8745  23EC  3001               	movlw	1
  8746  23ED  0021               	movlb	1	; select bank1
  8747  23EE  00B3               	movwf	ring_tactiles@iLed^(0+128)
  8748  23EF  3000               	movlw	0
  8749  23F0  00B4               	movwf	(ring_tactiles@iLed^(0+128)+1)
  8750  23F1  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8751  23F2  3A80               	xorlw	128
  8752  23F3  00B2               	movwf	??_ring_tactiles^(0+128)
  8753  23F4  3080               	movlw	128
  8754  23F5  0232               	subwf	??_ring_tactiles^(0+128),w
  8755  23F6  1D03               	skipz
  8756  23F7  2BFA               	goto	u8545
  8757  23F8  3007               	movlw	7
  8758  23F9  0233               	subwf	ring_tactiles@iLed^(0+128),w
  8759  23FA                     u8545:	
  8760  23FA  1803               	btfsc	3,0
  8761  23FB  2C20               	goto	l8116
  8762  23FC                     l8108:	
  8763                           
  8764                           ;LEDs.c: 198: set_leds_top(iLed, 1);
  8765  23FC  0021               	movlb	1	; select bank1
  8766  23FD  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8767  23FE  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8768  23FF  0833               	movf	ring_tactiles@iLed^(0+128),w
  8769  2400  00A0               	movwf	set_leds_top@x^(0+128)
  8770  2401  3001               	movlw	1
  8771  2402  00A2               	movwf	set_leds_top@ledState^(0+128)
  8772  2403  3000               	movlw	0
  8773  2404  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8774  2405  31A4  24DF  31A3   	fcall	_set_leds_top
  8775                           
  8776                           ;LEDs.c: 199: wait_ms(5);
  8777  2408  3005               	movlw	5
  8778  2409  0021               	movlb	1	; select bank1
  8779  240A  00AC               	movwf	wait_ms@timeSec^(0+128)
  8780  240B  3000               	movlw	0
  8781  240C  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8782  240D  31AF  2798  31A3   	fcall	_wait_ms
  8783  2410  3001               	movlw	1
  8784  2411  0021               	movlb	1	; select bank1
  8785  2412  07B3               	addwf	ring_tactiles@iLed^(0+128),f
  8786  2413  3000               	movlw	0
  8787  2414  3DB4               	addwfc	(ring_tactiles@iLed+1)^(0+128),f
  8788  2415  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8789  2416  3A80               	xorlw	128
  8790  2417  00B2               	movwf	??_ring_tactiles^(0+128)
  8791  2418  3080               	movlw	128
  8792  2419  0232               	subwf	??_ring_tactiles^(0+128),w
  8793  241A  1D03               	skipz
  8794  241B  2C1E               	goto	u8555
  8795  241C  3007               	movlw	7
  8796  241D  0233               	subwf	ring_tactiles@iLed^(0+128),w
  8797  241E                     u8555:	
  8798  241E  1C03               	skipc
  8799  241F  2BFC               	goto	l8108
  8800  2420                     l8116:	
  8801                           
  8802                           ;LEDs.c: 200: }
  8803                           ;LEDs.c: 201: for (int iLed = 5; iLed > -1; iLed--) {
  8804  2420  3005               	movlw	5
  8805  2421  0021               	movlb	1	; select bank1
  8806  2422  00B5               	movwf	ring_tactiles@iLed_1548^(0+128)
  8807  2423  3000               	movlw	0
  8808  2424  00B6               	movwf	(ring_tactiles@iLed_1548^(0+128)+1)
  8809  2425                     L4:	
  8810  2425  1BB6               	btfsc	(ring_tactiles@iLed_1548+1)^(0+128),7
  8811  2426  0008               	return
  8812                           
  8813                           ;LEDs.c: 202: set_leds_bottom(iLed);
  8814  2427  0836               	movf	(ring_tactiles@iLed_1548+1)^(0+128),w
  8815  2428  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8816  2429  0835               	movf	ring_tactiles@iLed_1548^(0+128),w
  8817  242A  00A0               	movwf	set_leds_bottom@x^(0+128)
  8818  242B  31A0  204E  31A3   	fcall	_set_leds_bottom
  8819                           
  8820                           ;LEDs.c: 203: wait_ms(5);
  8821  242E  3005               	movlw	5
  8822  242F  0021               	movlb	1	; select bank1
  8823  2430  00AC               	movwf	wait_ms@timeSec^(0+128)
  8824  2431  3000               	movlw	0
  8825  2432  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8826  2433  31AF  2798  31A3   	fcall	_wait_ms
  8827  2436  30FF               	movlw	255
  8828  2437  0021               	movlb	1	; select bank1
  8829  2438  07B5               	addwf	ring_tactiles@iLed_1548^(0+128),f
  8830  2439  30FF               	movlw	255
  8831  243A  3DB6               	addwfc	(ring_tactiles@iLed_1548+1)^(0+128),f
  8832  243B  2C25               	goto	L4
  8833  243C                     __end_of_ring_tactiles:	
  8834                           
  8835                           	psect	text12
  8836  2E32                     __ptext12:	
  8837 ;; *************** function _setPedalMode *****************
  8838 ;; Defined at:
  8839 ;;		line 119 in file "tactiles.c"
  8840 ;; Parameters:    Size  Location     Type
  8841 ;;		None
  8842 ;; Auto vars:     Size  Location     Type
  8843 ;;		None
  8844 ;; Return value:  Size  Location     Type
  8845 ;;                  1    wreg      void 
  8846 ;; Registers used:
  8847 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8848 ;; Tracked objects:
  8849 ;;		On entry : 0/0
  8850 ;;		On exit  : 0/0
  8851 ;;		Unchanged: 0/0
  8852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8856 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8857 ;;Total ram usage:        0 bytes
  8858 ;; Hardware stack levels used:    1
  8859 ;; Hardware stack levels required when called:    5
  8860 ;; This function calls:
  8861 ;;		_resetRingLEDs
  8862 ;;		_setExpressionDisplay
  8863 ;;		_setPresetDisplay
  8864 ;; This function is called by:
  8865 ;;		_update_mode
  8866 ;;		_setDoublePressState
  8867 ;; This function uses a non-reentrant model
  8868 ;;
  8869                           
  8870                           
  8871                           ;psect for function _setPedalMode
  8872  2E32                     _setPedalMode:	
  8873                           
  8874                           ;tactiles.c: 120: switch (mode2_state) {
  8875                           
  8876                           ;incstack = 0
  8877                           ; Regs used in _setPedalMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8878  2E32  2E49               	goto	l8316
  8879  2E33                     l1037:	
  8880                           ;tactiles.c: 121: case 0:
  8881                           
  8882                           
  8883                           ;tactiles.c: 122: LATBbits.LATB1 = 0;
  8884  2E33  0022               	movlb	2	; select bank2
  8885  2E34  108D               	bcf	13,1	;volatile
  8886                           
  8887                           ;tactiles.c: 123: LATBbits.LATB0 = 0;
  8888  2E35  100D               	bcf	13,0	;volatile
  8889                           
  8890                           ;tactiles.c: 124: resetRingLEDs();
  8891  2E36  31AD  252B         	fcall	_resetRingLEDs
  8892                           
  8893                           ;tactiles.c: 125: break;
  8894  2E38  0008               	return
  8895  2E39                     l1039:	
  8896                           ;tactiles.c: 126: case 1:
  8897                           
  8898                           
  8899                           ;tactiles.c: 127: LATBbits.LATB1 = 0;
  8900  2E39  0022               	movlb	2	; select bank2
  8901  2E3A  108D               	bcf	13,1	;volatile
  8902                           
  8903                           ;tactiles.c: 128: LATBbits.LATB0 = 1;
  8904  2E3B  140D               	bsf	13,0	;volatile
  8905                           
  8906                           ;tactiles.c: 129: setPresetDisplay(presetChannel);
  8907  2E3C  0020               	movlb	0	; select bank0
  8908  2E3D  084F               	movf	_presetChannel,w
  8909  2E3E  31A0  2014         	fcall	_setPresetDisplay
  8910                           
  8911                           ;tactiles.c: 130: break;
  8912  2E40  0008               	return
  8913  2E41                     l1040:	
  8914                           ;tactiles.c: 131: case 2:
  8915                           
  8916                           
  8917                           ;tactiles.c: 132: LATBbits.LATB1 = 1;
  8918  2E41  0022               	movlb	2	; select bank2
  8919  2E42  148D               	bsf	13,1	;volatile
  8920                           
  8921                           ;tactiles.c: 133: LATBbits.LATB0 = 0;
  8922  2E43  100D               	bcf	13,0	;volatile
  8923                           
  8924                           ;tactiles.c: 134: setExpressionDisplay(expressionChannel);
  8925  2E44  0023               	movlb	3	; select bank3
  8926  2E45  0863               	movf	_expressionChannel^(0+384),w
  8927  2E46  31AD  2513         	fcall	_setExpressionDisplay
  8928                           
  8929                           ;tactiles.c: 136: }
  8930                           
  8931                           ;tactiles.c: 135: break;
  8932  2E48  0008               	return
  8933  2E49                     l8316:	
  8934  2E49  0020               	movlb	0	; select bank0
  8935  2E4A  085D               	movf	_mode2_state,w
  8936                           
  8937                           ; Switch size 1, requested type "space"
  8938                           ; Number of cases is 3, Range of values is 0 to 2
  8939                           ; switch strategies available:
  8940                           ; Name         Instructions Cycles
  8941                           ; simple_byte           10     6 (average)
  8942                           ; direct_byte           12     6 (fixed)
  8943                           ; jumptable            260     6 (fixed)
  8944                           ;	Chosen strategy is simple_byte
  8945  2E4B  3A00               	xorlw	0	; case 0
  8946  2E4C  1903               	skipnz
  8947  2E4D  2E33               	goto	l1037
  8948  2E4E  3A01               	xorlw	1	; case 1
  8949  2E4F  1903               	skipnz
  8950  2E50  2E39               	goto	l1039
  8951  2E51  3A03               	xorlw	3	; case 2
  8952  2E52  1903               	skipnz
  8953  2E53  2E41               	goto	l1040
  8954  2E54  2E55               	goto	l1041
  8955  2E55                     l1041:	
  8956  2E55  0008               	return
  8957  2E56                     __end_of_setPedalMode:	
  8958                           
  8959                           	psect	text13
  8960  2014                     __ptext13:	
  8961 ;; *************** function _setPresetDisplay *****************
  8962 ;; Defined at:
  8963 ;;		line 51 in file "preset_programming.c"
  8964 ;; Parameters:    Size  Location     Type
  8965 ;;  ledChannel      1    wreg     unsigned char 
  8966 ;; Auto vars:     Size  Location     Type
  8967 ;;  ledChannel      1    6[BANK1 ] unsigned char 
  8968 ;; Return value:  Size  Location     Type
  8969 ;;                  1    wreg      void 
  8970 ;; Registers used:
  8971 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8972 ;; Tracked objects:
  8973 ;;		On entry : 0/0
  8974 ;;		On exit  : 0/0
  8975 ;;		Unchanged: 0/0
  8976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8978 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8979 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8980 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8981 ;;Total ram usage:        3 bytes
  8982 ;; Hardware stack levels used:    1
  8983 ;; Hardware stack levels required when called:    4
  8984 ;; This function calls:
  8985 ;;		_set_leds_bottom
  8986 ;;		_set_leds_top
  8987 ;; This function is called by:
  8988 ;;		_setPedalMode
  8989 ;;		_update_selectMode
  8990 ;;		_setDoublePressState
  8991 ;; This function uses a non-reentrant model
  8992 ;;
  8993                           
  8994                           
  8995                           ;psect for function _setPresetDisplay
  8996  2014                     _setPresetDisplay:	
  8997                           
  8998                           ;incstack = 0
  8999                           ; Regs used in _setPresetDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9000                           ;setPresetDisplay@ledChannel stored from wreg
  9001  2014  0021               	movlb	1	; select bank1
  9002  2015  00A6               	movwf	setPresetDisplay@ledChannel^(0+128)
  9003                           
  9004                           ;preset_programming.c: 52: if (ledChannel < 6) {
  9005  2016  3006               	movlw	6
  9006  2017  0226               	subwf	setPresetDisplay@ledChannel^(0+128),w
  9007  2018  1803               	skipnc
  9008  2019  2830               	goto	l8136
  9009                           
  9010                           ;preset_programming.c: 53: set_leds_top(ledChannel, 1);
  9011  201A  0826               	movf	setPresetDisplay@ledChannel^(0+128),w
  9012  201B  00A4               	movwf	??_setPresetDisplay^(0+128)
  9013  201C  01A5               	clrf	(??_setPresetDisplay^(0+128)+1)
  9014  201D  0824               	movf	??_setPresetDisplay^(0+128),w
  9015  201E  00A0               	movwf	set_leds_top@x^(0+128)
  9016  201F  0825               	movf	(??_setPresetDisplay+1)^(0+128),w
  9017  2020  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  9018  2021  3001               	movlw	1
  9019  2022  00A2               	movwf	set_leds_top@ledState^(0+128)
  9020  2023  3000               	movlw	0
  9021  2024  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  9022  2025  31A4  24DF  31A0   	fcall	_set_leds_top
  9023                           
  9024                           ;preset_programming.c: 54: set_leds_bottom(6);
  9025  2028  3006               	movlw	6
  9026  2029  0021               	movlb	1	; select bank1
  9027  202A  00A0               	movwf	set_leds_bottom@x^(0+128)
  9028  202B  3000               	movlw	0
  9029  202C  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  9030  202D  31A0  204E         	fcall	_set_leds_bottom
  9031                           
  9032                           ;preset_programming.c: 55: } else {
  9033  202F  0008               	return
  9034  2030                     l8136:	
  9035                           
  9036                           ;preset_programming.c: 56: set_leds_top(6, 1);
  9037  2030  3006               	movlw	6
  9038  2031  0021               	movlb	1	; select bank1
  9039  2032  00A0               	movwf	set_leds_top@x^(0+128)
  9040  2033  3000               	movlw	0
  9041  2034  00A1               	movwf	(set_leds_top@x^(0+128)+1)
  9042  2035  3001               	movlw	1
  9043  2036  00A2               	movwf	set_leds_top@ledState^(0+128)
  9044  2037  3000               	movlw	0
  9045  2038  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  9046  2039  31A4  24DF  31A0   	fcall	_set_leds_top
  9047                           
  9048                           ;preset_programming.c: 57: set_leds_bottom(10 - ledChannel + 1);
  9049  203C  0021               	movlb	1	; select bank1
  9050  203D  0826               	movf	setPresetDisplay@ledChannel^(0+128),w
  9051  203E  00A4               	movwf	??_setPresetDisplay^(0+128)
  9052  203F  01A5               	clrf	(??_setPresetDisplay^(0+128)+1)
  9053  2040  09A4               	comf	??_setPresetDisplay^(0+128),f
  9054  2041  09A5               	comf	(??_setPresetDisplay^(0+128)+1),f
  9055  2042  0AA4               	incf	??_setPresetDisplay^(0+128),f
  9056  2043  1903               	skipnz
  9057  2044  0AA5               	incf	(??_setPresetDisplay^(0+128)+1),f
  9058  2045  0824               	movf	??_setPresetDisplay^(0+128),w
  9059  2046  3E0B               	addlw	11
  9060  2047  00A0               	movwf	set_leds_bottom@x^(0+128)
  9061  2048  3000               	movlw	0
  9062  2049  3D25               	addwfc	(??_setPresetDisplay+1)^(0+128),w
  9063  204A  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  9064  204B  31A0  204E         	fcall	_set_leds_bottom
  9065  204D  0008               	return
  9066  204E                     __end_of_setPresetDisplay:	
  9067                           
  9068                           	psect	text14
  9069  2D13                     __ptext14:	
  9070 ;; *************** function _setExpressionDisplay *****************
  9071 ;; Defined at:
  9072 ;;		line 66 in file "preset_programming.c"
  9073 ;; Parameters:    Size  Location     Type
  9074 ;;  ledChannel      1    wreg     unsigned char 
  9075 ;; Auto vars:     Size  Location     Type
  9076 ;;  ledChannel      1    6[BANK1 ] unsigned char 
  9077 ;; Return value:  Size  Location     Type
  9078 ;;                  1    wreg      void 
  9079 ;; Registers used:
  9080 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9081 ;; Tracked objects:
  9082 ;;		On entry : 0/0
  9083 ;;		On exit  : 0/0
  9084 ;;		Unchanged: 0/0
  9085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9087 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9088 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9089 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9090 ;;Total ram usage:        3 bytes
  9091 ;; Hardware stack levels used:    1
  9092 ;; Hardware stack levels required when called:    4
  9093 ;; This function calls:
  9094 ;;		_set_leds_bottom
  9095 ;;		_set_leds_top
  9096 ;; This function is called by:
  9097 ;;		_setPedalMode
  9098 ;;		_update_selectMode
  9099 ;; This function uses a non-reentrant model
  9100 ;;
  9101                           
  9102                           
  9103                           ;psect for function _setExpressionDisplay
  9104  2D13                     _setExpressionDisplay:	
  9105                           
  9106                           ;incstack = 0
  9107                           ; Regs used in _setExpressionDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9108                           ;setExpressionDisplay@ledChannel stored from wreg
  9109  2D13  0021               	movlb	1	; select bank1
  9110  2D14  00A6               	movwf	setExpressionDisplay@ledChannel^(0+128)
  9111                           
  9112                           ;preset_programming.c: 67: set_leds_top(ledChannel, 1);
  9113  2D15  0826               	movf	setExpressionDisplay@ledChannel^(0+128),w
  9114  2D16  00A4               	movwf	??_setExpressionDisplay^(0+128)
  9115  2D17  01A5               	clrf	(??_setExpressionDisplay^(0+128)+1)
  9116  2D18  0824               	movf	??_setExpressionDisplay^(0+128),w
  9117  2D19  00A0               	movwf	set_leds_top@x^(0+128)
  9118  2D1A  0825               	movf	(??_setExpressionDisplay+1)^(0+128),w
  9119  2D1B  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  9120  2D1C  3001               	movlw	1
  9121  2D1D  00A2               	movwf	set_leds_top@ledState^(0+128)
  9122  2D1E  3000               	movlw	0
  9123  2D1F  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  9124  2D20  31A4  24DF  31AD   	fcall	_set_leds_top
  9125                           
  9126                           ;preset_programming.c: 68: set_leds_bottom(6);
  9127  2D23  3006               	movlw	6
  9128  2D24  0021               	movlb	1	; select bank1
  9129  2D25  00A0               	movwf	set_leds_bottom@x^(0+128)
  9130  2D26  3000               	movlw	0
  9131  2D27  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  9132  2D28  31A0  204E         	fcall	_set_leds_bottom
  9133  2D2A  0008               	return
  9134  2D2B                     __end_of_setExpressionDisplay:	
  9135                           
  9136                           	psect	text15
  9137  2D2B                     __ptext15:	
  9138 ;; *************** function _resetRingLEDs *****************
  9139 ;; Defined at:
  9140 ;;		line 61 in file "preset_programming.c"
  9141 ;; Parameters:    Size  Location     Type
  9142 ;;		None
  9143 ;; Auto vars:     Size  Location     Type
  9144 ;;		None
  9145 ;; Return value:  Size  Location     Type
  9146 ;;                  1    wreg      void 
  9147 ;; Registers used:
  9148 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9149 ;; Tracked objects:
  9150 ;;		On entry : 0/0
  9151 ;;		On exit  : 0/0
  9152 ;;		Unchanged: 0/0
  9153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9155 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9157 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9158 ;;Total ram usage:        0 bytes
  9159 ;; Hardware stack levels used:    1
  9160 ;; Hardware stack levels required when called:    4
  9161 ;; This function calls:
  9162 ;;		_set_leds_bottom
  9163 ;;		_set_leds_top
  9164 ;; This function is called by:
  9165 ;;		_update_mode
  9166 ;;		_setPedalMode
  9167 ;;		_setDoublePressState
  9168 ;; This function uses a non-reentrant model
  9169 ;;
  9170                           
  9171                           
  9172                           ;psect for function _resetRingLEDs
  9173  2D2B                     _resetRingLEDs:	
  9174                           
  9175                           ;preset_programming.c: 62: set_leds_top(top_push_state, 1);
  9176                           
  9177                           ;incstack = 0
  9178                           ; Regs used in _resetRingLEDs: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9179  2D2B  0020               	movlb	0	; select bank0
  9180  2D2C  084B               	movf	_top_push_state+1,w
  9181  2D2D  0021               	movlb	1	; select bank1
  9182  2D2E  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  9183  2D2F  0020               	movlb	0	; select bank0
  9184  2D30  084A               	movf	_top_push_state,w
  9185  2D31  0021               	movlb	1	; select bank1
  9186  2D32  00A0               	movwf	set_leds_top@x^(0+128)
  9187  2D33  3001               	movlw	1
  9188  2D34  00A2               	movwf	set_leds_top@ledState^(0+128)
  9189  2D35  3000               	movlw	0
  9190  2D36  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  9191  2D37  31A4  24DF  31AD   	fcall	_set_leds_top
  9192                           
  9193                           ;preset_programming.c: 63: set_leds_bottom(bottom_push_state);
  9194  2D3A  0023               	movlb	3	; select bank3
  9195  2D3B  084C               	movf	(_bottom_push_state+1)^(0+384),w
  9196  2D3C  0021               	movlb	1	; select bank1
  9197  2D3D  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  9198  2D3E  0023               	movlb	3	; select bank3
  9199  2D3F  084B               	movf	_bottom_push_state^(0+384),w
  9200  2D40  0021               	movlb	1	; select bank1
  9201  2D41  00A0               	movwf	set_leds_bottom@x^(0+128)
  9202  2D42  31A0  204E         	fcall	_set_leds_bottom
  9203  2D44  0008               	return
  9204  2D45                     __end_of_resetRingLEDs:	
  9205                           
  9206                           	psect	text16
  9207  0373                     __ptext16:	
  9208 ;; *************** function _updateModulationArray *****************
  9209 ;; Defined at:
  9210 ;;		line 45 in file "modulation.c"
  9211 ;; Parameters:    Size  Location     Type
  9212 ;;		None
  9213 ;; Auto vars:     Size  Location     Type
  9214 ;;  thisAngle       2   57[BANK2 ] int 
  9215 ;;  iAngle          1   54[BANK2 ] unsigned char 
  9216 ;;  iAngle          1   59[BANK2 ] unsigned char 
  9217 ;;  subDiv          2   55[BANK2 ] int 
  9218 ;;  angleFactor     2   52[BANK2 ] int 
  9219 ;; Return value:  Size  Location     Type
  9220 ;;                  1    wreg      void 
  9221 ;; Registers used:
  9222 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9223 ;; Tracked objects:
  9224 ;;		On entry : 0/0
  9225 ;;		On exit  : 0/0
  9226 ;;		Unchanged: 0/0
  9227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9229 ;;      Locals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9230 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9231 ;;      Totals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9232 ;;Total ram usage:       12 bytes
  9233 ;; Hardware stack levels used:    1
  9234 ;; Hardware stack levels required when called:    7
  9235 ;; This function calls:
  9236 ;;		___awdiv
  9237 ;;		___awtoft
  9238 ;;		___wmul
  9239 ;;		_getModulationSubdivision
  9240 ;;		_modCos
  9241 ;;		_modSaw
  9242 ;;		_modSawRev
  9243 ;;		_modSquare
  9244 ;;		_modTri
  9245 ;; This function is called by:
  9246 ;;		_main
  9247 ;; This function uses a non-reentrant model
  9248 ;;
  9249                           
  9250                           
  9251                           ;psect for function _updateModulationArray
  9252  0373                     _updateModulationArray:	
  9253                           
  9254                           ;modulation.c: 46: int subDiv = getModulationSubdivision();
  9255                           
  9256                           ;incstack = 0
  9257                           ; Regs used in _updateModulationArray: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9258  0373  31AF  2709  3183   	fcall	_getModulationSubdivision
  9259  0376  0021               	movlb	1	; select bank1
  9260  0377  0821               	movf	(?_getModulationSubdivision+1)^(0+128),w
  9261  0378  0022               	movlb	2	; select bank2
  9262  0379  00D8               	movwf	(updateModulationArray@subDiv+1)^(0+256)
  9263  037A  0021               	movlb	1	; select bank1
  9264  037B  0820               	movf	?_getModulationSubdivision^(0+128),w
  9265  037C  0022               	movlb	2	; select bank2
  9266  037D  00D7               	movwf	updateModulationArray@subDiv^(0+256)
  9267                           
  9268                           ;modulation.c: 47: if (modArray[120] == bottom_push_state && modArray[121] == symmetry &
      +                          & modArray[122] == subDiv) {
  9269  037E  307A               	movlw	122
  9270  037F  0086               	movwf	6
  9271  0380  3024               	movlw	36
  9272  0381  0087               	movwf	7
  9273  0382  3F40               	moviw [0]fsr1
  9274  0383  00D0               	movwf	??_updateModulationArray^(0+256)
  9275  0384  3F41               	moviw [1]fsr1
  9276  0385  00D1               	movwf	(??_updateModulationArray^(0+256)+1)
  9277  0386  0023               	movlb	3	; select bank3
  9278  0387  084C               	movf	(_bottom_push_state+1)^(0+384),w
  9279  0388  0022               	movlb	2	; select bank2
  9280  0389  0651               	xorwf	(??_updateModulationArray+1)^(0+256),w
  9281  038A  1D03               	skipz
  9282  038B  2B90               	goto	u10315
  9283  038C  0023               	movlb	3	; select bank3
  9284  038D  084B               	movf	_bottom_push_state^(0+384),w
  9285  038E  0022               	movlb	2	; select bank2
  9286  038F  0650               	xorwf	??_updateModulationArray^(0+256),w
  9287  0390                     u10315:	
  9288  0390  1D03               	skipz
  9289  0391  2BB6               	goto	l9306
  9290  0392  307C               	movlw	124
  9291  0393  0086               	movwf	6
  9292  0394  3024               	movlw	36
  9293  0395  0087               	movwf	7
  9294  0396  3F40               	moviw [0]fsr1
  9295  0397  00D0               	movwf	??_updateModulationArray^(0+256)
  9296  0398  3F41               	moviw [1]fsr1
  9297  0399  00D1               	movwf	(??_updateModulationArray^(0+256)+1)
  9298  039A  0023               	movlb	3	; select bank3
  9299  039B  085C               	movf	(_symmetry+1)^(0+384),w
  9300  039C  0022               	movlb	2	; select bank2
  9301  039D  0651               	xorwf	(??_updateModulationArray+1)^(0+256),w
  9302  039E  1D03               	skipz
  9303  039F  2BA4               	goto	u10325
  9304  03A0  0023               	movlb	3	; select bank3
  9305  03A1  085B               	movf	_symmetry^(0+384),w
  9306  03A2  0022               	movlb	2	; select bank2
  9307  03A3  0650               	xorwf	??_updateModulationArray^(0+256),w
  9308  03A4                     u10325:	
  9309  03A4  1D03               	skipz
  9310  03A5  2BB6               	goto	l9306
  9311  03A6  307E               	movlw	126
  9312  03A7  0086               	movwf	6
  9313  03A8  3024               	movlw	36
  9314  03A9  0087               	movwf	7
  9315  03AA  3F40               	moviw [0]fsr1
  9316  03AB  00D0               	movwf	??_updateModulationArray^(0+256)
  9317  03AC  3F41               	moviw [1]fsr1
  9318  03AD  00D1               	movwf	(??_updateModulationArray^(0+256)+1)
  9319  03AE  0858               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9320  03AF  0651               	xorwf	(??_updateModulationArray+1)^(0+256),w
  9321  03B0  1D03               	skipz
  9322  03B1  2BB4               	goto	u10335
  9323  03B2  0857               	movf	updateModulationArray@subDiv^(0+256),w
  9324  03B3  0650               	xorwf	??_updateModulationArray^(0+256),w
  9325  03B4                     u10335:	
  9326  03B4  1903               	btfsc	3,2
  9327  03B5  0008               	return
  9328  03B6                     l9306:	
  9329                           ;modulation.c: 49: return;
  9330                           
  9331                           
  9332                           ;modulation.c: 50: }
  9333                           ;modulation.c: 52: int angleFactor = 360/subDiv;
  9334  03B6  0858               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9335  03B7  0021               	movlb	1	; select bank1
  9336  03B8  00A1               	movwf	(___awdiv@divisor+1)^(0+128)
  9337  03B9  0022               	movlb	2	; select bank2
  9338  03BA  0857               	movf	updateModulationArray@subDiv^(0+256),w
  9339  03BB  0021               	movlb	1	; select bank1
  9340  03BC  00A0               	movwf	___awdiv@divisor^(0+128)
  9341  03BD  3068               	movlw	104
  9342  03BE  00A2               	movwf	___awdiv@dividend^(0+128)
  9343  03BF  3001               	movlw	1
  9344  03C0  00A3               	movwf	(___awdiv@dividend^(0+128)+1)
  9345  03C1  31A4  248D  3183   	fcall	___awdiv
  9346  03C4  0021               	movlb	1	; select bank1
  9347  03C5  0821               	movf	(?___awdiv+1)^(0+128),w
  9348  03C6  0022               	movlb	2	; select bank2
  9349  03C7  00D5               	movwf	(updateModulationArray@angleFactor+1)^(0+256)
  9350  03C8  0021               	movlb	1	; select bank1
  9351  03C9  0820               	movf	?___awdiv^(0+128),w
  9352  03CA  0022               	movlb	2	; select bank2
  9353  03CB  00D4               	movwf	updateModulationArray@angleFactor^(0+256)
  9354                           
  9355                           ;modulation.c: 53: for (char iAngle = 0; iAngle < subDiv; iAngle++) {
  9356  03CC  01DB               	clrf	updateModulationArray@iAngle^(0+256)
  9357  03CD                     l9330:	
  9358  03CD  0858               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9359  03CE  3A80               	xorlw	128
  9360  03CF  3C80               	sublw	128
  9361  03D0  1D03               	skipz
  9362  03D1  2BD4               	goto	u10345
  9363  03D2  0857               	movf	updateModulationArray@subDiv^(0+256),w
  9364  03D3  025B               	subwf	updateModulationArray@iAngle^(0+256),w
  9365  03D4                     u10345:	
  9366  03D4  1803               	btfsc	3,0
  9367  03D5  2D7A               	goto	l9332
  9368                           
  9369                           ;modulation.c: 54: int thisAngle = angleFactor * iAngle;
  9370  03D6  0022               	movlb	2	; select bank2
  9371  03D7  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9372  03D8  00D0               	movwf	??_updateModulationArray^(0+256)
  9373  03D9  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9374  03DA  0850               	movf	??_updateModulationArray^(0+256),w
  9375  03DB  00AE               	movwf	___wmul@multiplier^(0+256)
  9376  03DC  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9377  03DD  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
  9378  03DE  0855               	movf	(updateModulationArray@angleFactor+1)^(0+256),w
  9379  03DF  00B1               	movwf	(___wmul@multiplicand+1)^(0+256)
  9380  03E0  0854               	movf	updateModulationArray@angleFactor^(0+256),w
  9381  03E1  00B0               	movwf	___wmul@multiplicand^(0+256)
  9382  03E2  31AD  255F  3183   	fcall	___wmul
  9383  03E5  0022               	movlb	2	; select bank2
  9384  03E6  082F               	movf	(?___wmul+1)^(0+256),w
  9385  03E7  00DA               	movwf	(updateModulationArray@thisAngle+1)^(0+256)
  9386  03E8  082E               	movf	?___wmul^(0+256),w
  9387  03E9  00D9               	movwf	updateModulationArray@thisAngle^(0+256)
  9388                           
  9389                           ;modulation.c: 55: switch (bottom_push_state) {
  9390  03EA  2D5D               	goto	l9326
  9391  03EB                     l9312:	
  9392                           ;modulation.c: 56: case 1:
  9393                           
  9394                           
  9395                           ;modulation.c: 57: modArray[iAngle] = modCos(thisAngle, symmetry);
  9396  03EB  0022               	movlb	2	; select bank2
  9397  03EC  085A               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9398  03ED  0021               	movlb	1	; select bank1
  9399  03EE  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9400  03EF  0022               	movlb	2	; select bank2
  9401  03F0  0859               	movf	updateModulationArray@thisAngle^(0+256),w
  9402  03F1  0021               	movlb	1	; select bank1
  9403  03F2  00A8               	movwf	___awtoft@c^(0+128)
  9404  03F3  31AE  2610  3183   	fcall	___awtoft
  9405  03F6  0021               	movlb	1	; select bank1
  9406  03F7  0828               	movf	?___awtoft^(0+128),w
  9407  03F8  0022               	movlb	2	; select bank2
  9408  03F9  00B4               	movwf	modCos@angle^(0+256)
  9409  03FA  0021               	movlb	1	; select bank1
  9410  03FB  0829               	movf	(?___awtoft+1)^(0+128),w
  9411  03FC  0022               	movlb	2	; select bank2
  9412  03FD  00B5               	movwf	(modCos@angle+1)^(0+256)
  9413  03FE  0021               	movlb	1	; select bank1
  9414  03FF  082A               	movf	(?___awtoft+2)^(0+128),w
  9415  0400  0022               	movlb	2	; select bank2
  9416  0401  00B6               	movwf	(modCos@angle+2)^(0+256)
  9417  0402  0023               	movlb	3	; select bank3
  9418  0403  085C               	movf	(_symmetry+1)^(0+384),w
  9419  0404  0021               	movlb	1	; select bank1
  9420  0405  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9421  0406  0023               	movlb	3	; select bank3
  9422  0407  085B               	movf	_symmetry^(0+384),w
  9423  0408  0021               	movlb	1	; select bank1
  9424  0409  00A8               	movwf	___awtoft@c^(0+128)
  9425  040A  31AE  2610  3183   	fcall	___awtoft
  9426  040D  0021               	movlb	1	; select bank1
  9427  040E  0828               	movf	?___awtoft^(0+128),w
  9428  040F  0022               	movlb	2	; select bank2
  9429  0410  00B7               	movwf	modCos@inflection^(0+256)
  9430  0411  0021               	movlb	1	; select bank1
  9431  0412  0829               	movf	(?___awtoft+1)^(0+128),w
  9432  0413  0022               	movlb	2	; select bank2
  9433  0414  00B8               	movwf	(modCos@inflection+1)^(0+256)
  9434  0415  0021               	movlb	1	; select bank1
  9435  0416  082A               	movf	(?___awtoft+2)^(0+128),w
  9436  0417  0022               	movlb	2	; select bank2
  9437  0418  00B9               	movwf	(modCos@inflection+2)^(0+256)
  9438  0419  3194  2485  3183   	fcall	_modCos
  9439  041C  0022               	movlb	2	; select bank2
  9440  041D  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9441  041E  00D0               	movwf	??_updateModulationArray^(0+256)
  9442  041F  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9443  0420  35D0               	lslf	??_updateModulationArray^(0+256),f
  9444  0421  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9445  0422  308A               	movlw	138
  9446  0423  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9447  0424  3023               	movlw	35
  9448  0425  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9449  0426  0850               	movf	??_updateModulationArray^(0+256),w
  9450  0427  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9451  0428  0086               	movwf	6
  9452  0429  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9453  042A  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9454  042B  0087               	movwf	7
  9455  042C  0834               	movf	?_modCos^(0+256),w
  9456  042D  3FC0               	movwi [0]fsr1
  9457  042E  0835               	movf	(?_modCos+1)^(0+256),w
  9458  042F  3FC1               	movwi [1]fsr1
  9459                           
  9460                           ;modulation.c: 58: break;
  9461  0430  2D74               	goto	l9328
  9462  0431                     l9314:	
  9463                           ;modulation.c: 59: case 2:
  9464                           
  9465                           
  9466                           ;modulation.c: 60: modArray[iAngle] = modTri(thisAngle, symmetry);
  9467  0431  0022               	movlb	2	; select bank2
  9468  0432  085A               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9469  0433  0021               	movlb	1	; select bank1
  9470  0434  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9471  0435  0022               	movlb	2	; select bank2
  9472  0436  0859               	movf	updateModulationArray@thisAngle^(0+256),w
  9473  0437  0021               	movlb	1	; select bank1
  9474  0438  00A8               	movwf	___awtoft@c^(0+128)
  9475  0439  31AE  2610  3183   	fcall	___awtoft
  9476  043C  0021               	movlb	1	; select bank1
  9477  043D  0828               	movf	?___awtoft^(0+128),w
  9478  043E  0022               	movlb	2	; select bank2
  9479  043F  00AE               	movwf	modTri@angle^(0+256)
  9480  0440  0021               	movlb	1	; select bank1
  9481  0441  0829               	movf	(?___awtoft+1)^(0+128),w
  9482  0442  0022               	movlb	2	; select bank2
  9483  0443  00AF               	movwf	(modTri@angle+1)^(0+256)
  9484  0444  0021               	movlb	1	; select bank1
  9485  0445  082A               	movf	(?___awtoft+2)^(0+128),w
  9486  0446  0022               	movlb	2	; select bank2
  9487  0447  00B0               	movwf	(modTri@angle+2)^(0+256)
  9488  0448  0023               	movlb	3	; select bank3
  9489  0449  085C               	movf	(_symmetry+1)^(0+384),w
  9490  044A  0021               	movlb	1	; select bank1
  9491  044B  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9492  044C  0023               	movlb	3	; select bank3
  9493  044D  085B               	movf	_symmetry^(0+384),w
  9494  044E  0021               	movlb	1	; select bank1
  9495  044F  00A8               	movwf	___awtoft@c^(0+128)
  9496  0450  31AE  2610  3183   	fcall	___awtoft
  9497  0453  0021               	movlb	1	; select bank1
  9498  0454  0828               	movf	?___awtoft^(0+128),w
  9499  0455  0022               	movlb	2	; select bank2
  9500  0456  00B1               	movwf	modTri@inflection^(0+256)
  9501  0457  0021               	movlb	1	; select bank1
  9502  0458  0829               	movf	(?___awtoft+1)^(0+128),w
  9503  0459  0022               	movlb	2	; select bank2
  9504  045A  00B2               	movwf	(modTri@inflection+1)^(0+256)
  9505  045B  0021               	movlb	1	; select bank1
  9506  045C  082A               	movf	(?___awtoft+2)^(0+128),w
  9507  045D  0022               	movlb	2	; select bank2
  9508  045E  00B3               	movwf	(modTri@inflection+2)^(0+256)
  9509  045F  3189  2181  3183   	fcall	_modTri
  9510  0462  0022               	movlb	2	; select bank2
  9511  0463  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9512  0464  00D0               	movwf	??_updateModulationArray^(0+256)
  9513  0465  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9514  0466  35D0               	lslf	??_updateModulationArray^(0+256),f
  9515  0467  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9516  0468  308A               	movlw	138
  9517  0469  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9518  046A  3023               	movlw	35
  9519  046B  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9520  046C  0850               	movf	??_updateModulationArray^(0+256),w
  9521  046D  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9522  046E  0086               	movwf	6
  9523  046F  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9524  0470  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9525  0471  0087               	movwf	7
  9526  0472  082E               	movf	?_modTri^(0+256),w
  9527  0473  3FC0               	movwi [0]fsr1
  9528  0474  082F               	movf	(?_modTri+1)^(0+256),w
  9529  0475  3FC1               	movwi [1]fsr1
  9530                           
  9531                           ;modulation.c: 61: break;
  9532  0476  2D74               	goto	l9328
  9533  0477                     l9316:	
  9534                           ;modulation.c: 62: case 3:
  9535                           
  9536                           
  9537                           ;modulation.c: 63: modArray[iAngle] = modSquare(thisAngle, symmetry);
  9538  0477  0022               	movlb	2	; select bank2
  9539  0478  085A               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9540  0479  0021               	movlb	1	; select bank1
  9541  047A  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9542  047B  0022               	movlb	2	; select bank2
  9543  047C  0859               	movf	updateModulationArray@thisAngle^(0+256),w
  9544  047D  0021               	movlb	1	; select bank1
  9545  047E  00A8               	movwf	___awtoft@c^(0+128)
  9546  047F  31AE  2610  3183   	fcall	___awtoft
  9547  0482  0021               	movlb	1	; select bank1
  9548  0483  0828               	movf	?___awtoft^(0+128),w
  9549  0484  0022               	movlb	2	; select bank2
  9550  0485  00C8               	movwf	modSquare@angle^(0+256)
  9551  0486  0021               	movlb	1	; select bank1
  9552  0487  0829               	movf	(?___awtoft+1)^(0+128),w
  9553  0488  0022               	movlb	2	; select bank2
  9554  0489  00C9               	movwf	(modSquare@angle+1)^(0+256)
  9555  048A  0021               	movlb	1	; select bank1
  9556  048B  082A               	movf	(?___awtoft+2)^(0+128),w
  9557  048C  0022               	movlb	2	; select bank2
  9558  048D  00CA               	movwf	(modSquare@angle+2)^(0+256)
  9559  048E  0023               	movlb	3	; select bank3
  9560  048F  085C               	movf	(_symmetry+1)^(0+384),w
  9561  0490  0021               	movlb	1	; select bank1
  9562  0491  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9563  0492  0023               	movlb	3	; select bank3
  9564  0493  085B               	movf	_symmetry^(0+384),w
  9565  0494  0021               	movlb	1	; select bank1
  9566  0495  00A8               	movwf	___awtoft@c^(0+128)
  9567  0496  31AE  2610  3183   	fcall	___awtoft
  9568  0499  0021               	movlb	1	; select bank1
  9569  049A  0828               	movf	?___awtoft^(0+128),w
  9570  049B  0022               	movlb	2	; select bank2
  9571  049C  00CB               	movwf	modSquare@inflection^(0+256)
  9572  049D  0021               	movlb	1	; select bank1
  9573  049E  0829               	movf	(?___awtoft+1)^(0+128),w
  9574  049F  0022               	movlb	2	; select bank2
  9575  04A0  00CC               	movwf	(modSquare@inflection+1)^(0+256)
  9576  04A1  0021               	movlb	1	; select bank1
  9577  04A2  082A               	movf	(?___awtoft+2)^(0+128),w
  9578  04A3  0022               	movlb	2	; select bank2
  9579  04A4  00CD               	movwf	(modSquare@inflection+2)^(0+256)
  9580  04A5  31A1  2102  3183   	fcall	_modSquare
  9581  04A8  0022               	movlb	2	; select bank2
  9582  04A9  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9583  04AA  00D0               	movwf	??_updateModulationArray^(0+256)
  9584  04AB  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9585  04AC  35D0               	lslf	??_updateModulationArray^(0+256),f
  9586  04AD  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9587  04AE  308A               	movlw	138
  9588  04AF  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9589  04B0  3023               	movlw	35
  9590  04B1  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9591  04B2  0850               	movf	??_updateModulationArray^(0+256),w
  9592  04B3  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9593  04B4  0086               	movwf	6
  9594  04B5  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9595  04B6  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9596  04B7  0087               	movwf	7
  9597  04B8  0848               	movf	?_modSquare^(0+256),w
  9598  04B9  3FC0               	movwi [0]fsr1
  9599  04BA  0849               	movf	(?_modSquare+1)^(0+256),w
  9600  04BB  3FC1               	movwi [1]fsr1
  9601                           
  9602                           ;modulation.c: 64: break;
  9603  04BC  2D74               	goto	l9328
  9604  04BD                     l9318:	
  9605                           ;modulation.c: 65: case 4:
  9606                           
  9607                           
  9608                           ;modulation.c: 66: modArray[iAngle] = modSawRev(thisAngle, symmetry);
  9609  04BD  0022               	movlb	2	; select bank2
  9610  04BE  085A               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9611  04BF  0021               	movlb	1	; select bank1
  9612  04C0  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9613  04C1  0022               	movlb	2	; select bank2
  9614  04C2  0859               	movf	updateModulationArray@thisAngle^(0+256),w
  9615  04C3  0021               	movlb	1	; select bank1
  9616  04C4  00A8               	movwf	___awtoft@c^(0+128)
  9617  04C5  31AE  2610  3183   	fcall	___awtoft
  9618  04C8  0021               	movlb	1	; select bank1
  9619  04C9  0828               	movf	?___awtoft^(0+128),w
  9620  04CA  0022               	movlb	2	; select bank2
  9621  04CB  00C2               	movwf	modSawRev@angle^(0+256)
  9622  04CC  0021               	movlb	1	; select bank1
  9623  04CD  0829               	movf	(?___awtoft+1)^(0+128),w
  9624  04CE  0022               	movlb	2	; select bank2
  9625  04CF  00C3               	movwf	(modSawRev@angle+1)^(0+256)
  9626  04D0  0021               	movlb	1	; select bank1
  9627  04D1  082A               	movf	(?___awtoft+2)^(0+128),w
  9628  04D2  0022               	movlb	2	; select bank2
  9629  04D3  00C4               	movwf	(modSawRev@angle+2)^(0+256)
  9630  04D4  0023               	movlb	3	; select bank3
  9631  04D5  085C               	movf	(_symmetry+1)^(0+384),w
  9632  04D6  0021               	movlb	1	; select bank1
  9633  04D7  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9634  04D8  0023               	movlb	3	; select bank3
  9635  04D9  085B               	movf	_symmetry^(0+384),w
  9636  04DA  0021               	movlb	1	; select bank1
  9637  04DB  00A8               	movwf	___awtoft@c^(0+128)
  9638  04DC  31AE  2610  3183   	fcall	___awtoft
  9639  04DF  0021               	movlb	1	; select bank1
  9640  04E0  0828               	movf	?___awtoft^(0+128),w
  9641  04E1  0022               	movlb	2	; select bank2
  9642  04E2  00C5               	movwf	modSawRev@inflection^(0+256)
  9643  04E3  0021               	movlb	1	; select bank1
  9644  04E4  0829               	movf	(?___awtoft+1)^(0+128),w
  9645  04E5  0022               	movlb	2	; select bank2
  9646  04E6  00C6               	movwf	(modSawRev@inflection+1)^(0+256)
  9647  04E7  0021               	movlb	1	; select bank1
  9648  04E8  082A               	movf	(?___awtoft+2)^(0+128),w
  9649  04E9  0022               	movlb	2	; select bank2
  9650  04EA  00C7               	movwf	(modSawRev@inflection+2)^(0+256)
  9651  04EB  31AD  2597  3183   	fcall	_modSawRev
  9652  04EE  0022               	movlb	2	; select bank2
  9653  04EF  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9654  04F0  00D0               	movwf	??_updateModulationArray^(0+256)
  9655  04F1  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9656  04F2  35D0               	lslf	??_updateModulationArray^(0+256),f
  9657  04F3  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9658  04F4  308A               	movlw	138
  9659  04F5  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9660  04F6  3023               	movlw	35
  9661  04F7  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9662  04F8  0850               	movf	??_updateModulationArray^(0+256),w
  9663  04F9  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9664  04FA  0086               	movwf	6
  9665  04FB  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9666  04FC  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9667  04FD  0087               	movwf	7
  9668  04FE  0842               	movf	?_modSawRev^(0+256),w
  9669  04FF  3FC0               	movwi [0]fsr1
  9670  0500  0843               	movf	(?_modSawRev+1)^(0+256),w
  9671  0501  3FC1               	movwi [1]fsr1
  9672                           
  9673                           ;modulation.c: 67: break;
  9674  0502  2D74               	goto	l9328
  9675  0503                     l9320:	
  9676                           ;modulation.c: 68: case 5:
  9677                           
  9678                           
  9679                           ;modulation.c: 69: modArray[iAngle] = modSaw(thisAngle, symmetry);
  9680  0503  0022               	movlb	2	; select bank2
  9681  0504  085A               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9682  0505  0021               	movlb	1	; select bank1
  9683  0506  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9684  0507  0022               	movlb	2	; select bank2
  9685  0508  0859               	movf	updateModulationArray@thisAngle^(0+256),w
  9686  0509  0021               	movlb	1	; select bank1
  9687  050A  00A8               	movwf	___awtoft@c^(0+128)
  9688  050B  31AE  2610  3183   	fcall	___awtoft
  9689  050E  0021               	movlb	1	; select bank1
  9690  050F  0828               	movf	?___awtoft^(0+128),w
  9691  0510  0022               	movlb	2	; select bank2
  9692  0511  00AE               	movwf	modSaw@angle^(0+256)
  9693  0512  0021               	movlb	1	; select bank1
  9694  0513  0829               	movf	(?___awtoft+1)^(0+128),w
  9695  0514  0022               	movlb	2	; select bank2
  9696  0515  00AF               	movwf	(modSaw@angle+1)^(0+256)
  9697  0516  0021               	movlb	1	; select bank1
  9698  0517  082A               	movf	(?___awtoft+2)^(0+128),w
  9699  0518  0022               	movlb	2	; select bank2
  9700  0519  00B0               	movwf	(modSaw@angle+2)^(0+256)
  9701  051A  0023               	movlb	3	; select bank3
  9702  051B  085C               	movf	(_symmetry+1)^(0+384),w
  9703  051C  0021               	movlb	1	; select bank1
  9704  051D  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9705  051E  0023               	movlb	3	; select bank3
  9706  051F  085B               	movf	_symmetry^(0+384),w
  9707  0520  0021               	movlb	1	; select bank1
  9708  0521  00A8               	movwf	___awtoft@c^(0+128)
  9709  0522  31AE  2610  3183   	fcall	___awtoft
  9710  0525  0021               	movlb	1	; select bank1
  9711  0526  0828               	movf	?___awtoft^(0+128),w
  9712  0527  0022               	movlb	2	; select bank2
  9713  0528  00B1               	movwf	modSaw@inflection^(0+256)
  9714  0529  0021               	movlb	1	; select bank1
  9715  052A  0829               	movf	(?___awtoft+1)^(0+128),w
  9716  052B  0022               	movlb	2	; select bank2
  9717  052C  00B2               	movwf	(modSaw@inflection+1)^(0+256)
  9718  052D  0021               	movlb	1	; select bank1
  9719  052E  082A               	movf	(?___awtoft+2)^(0+128),w
  9720  052F  0022               	movlb	2	; select bank2
  9721  0530  00B3               	movwf	(modSaw@inflection+2)^(0+256)
  9722  0531  3192  22ED  3183   	fcall	_modSaw
  9723  0534  0022               	movlb	2	; select bank2
  9724  0535  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9725  0536  00D0               	movwf	??_updateModulationArray^(0+256)
  9726  0537  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9727  0538  35D0               	lslf	??_updateModulationArray^(0+256),f
  9728  0539  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9729  053A  308A               	movlw	138
  9730  053B  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9731  053C  3023               	movlw	35
  9732  053D  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9733  053E  0850               	movf	??_updateModulationArray^(0+256),w
  9734  053F  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9735  0540  0086               	movwf	6
  9736  0541  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9737  0542  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9738  0543  0087               	movwf	7
  9739  0544  082E               	movf	?_modSaw^(0+256),w
  9740  0545  3FC0               	movwi [0]fsr1
  9741  0546  082F               	movf	(?_modSaw+1)^(0+256),w
  9742  0547  3FC1               	movwi [1]fsr1
  9743                           
  9744                           ;modulation.c: 70: break;
  9745  0548  2D74               	goto	l9328
  9746  0549                     l9322:	
  9747                           ;modulation.c: 71: default:
  9748                           
  9749                           
  9750                           ;modulation.c: 72: modArray[iAngle] = 0;
  9751  0549  0022               	movlb	2	; select bank2
  9752  054A  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9753  054B  00D0               	movwf	??_updateModulationArray^(0+256)
  9754  054C  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9755  054D  35D0               	lslf	??_updateModulationArray^(0+256),f
  9756  054E  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9757  054F  308A               	movlw	138
  9758  0550  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9759  0551  3023               	movlw	35
  9760  0552  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9761  0553  0850               	movf	??_updateModulationArray^(0+256),w
  9762  0554  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9763  0555  0086               	movwf	6
  9764  0556  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9765  0557  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9766  0558  0087               	movwf	7
  9767  0559  3000               	movlw	0
  9768  055A  3FC0               	movwi [0]fsr1
  9769  055B  3FC1               	movwi [1]fsr1
  9770                           
  9771                           ;modulation.c: 74: }
  9772                           
  9773                           ;modulation.c: 73: break;
  9774  055C  2D74               	goto	l9328
  9775  055D                     l9326:	
  9776                           
  9777                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9778                           ; Switch size 1, requested type "space"
  9779                           ; Number of cases is 1, Range of values is 0 to 0
  9780                           ; switch strategies available:
  9781                           ; Name         Instructions Cycles
  9782                           ; simple_byte            4     3 (average)
  9783                           ; direct_byte            8     6 (fixed)
  9784                           ; jumptable            260     6 (fixed)
  9785                           ;	Chosen strategy is simple_byte
  9786  055D  0023               	movlb	3	; select bank3
  9787  055E  084C               	movf	(_bottom_push_state+1)^(0+384),w
  9788  055F  3A00               	xorlw	0	; case 0
  9789  0560  1903               	skipnz
  9790  0561  2D63               	goto	l9946
  9791  0562  2D49               	goto	l9322
  9792  0563                     l9946:	
  9793                           
  9794                           ; Switch size 1, requested type "space"
  9795                           ; Number of cases is 5, Range of values is 1 to 5
  9796                           ; switch strategies available:
  9797                           ; Name         Instructions Cycles
  9798                           ; simple_byte           16     9 (average)
  9799                           ; direct_byte           19     9 (fixed)
  9800                           ; jumptable            263     9 (fixed)
  9801                           ;	Chosen strategy is simple_byte
  9802  0563  084B               	movf	_bottom_push_state^(0+384),w
  9803  0564  3A01               	xorlw	1	; case 1
  9804  0565  1903               	skipnz
  9805  0566  2BEB               	goto	l9312
  9806  0567  3A03               	xorlw	3	; case 2
  9807  0568  1903               	skipnz
  9808  0569  2C31               	goto	l9314
  9809  056A  3A01               	xorlw	1	; case 3
  9810  056B  1903               	skipnz
  9811  056C  2C77               	goto	l9316
  9812  056D  3A07               	xorlw	7	; case 4
  9813  056E  1903               	skipnz
  9814  056F  2CBD               	goto	l9318
  9815  0570  3A01               	xorlw	1	; case 5
  9816  0571  1903               	skipnz
  9817  0572  2D03               	goto	l9320
  9818  0573  2D49               	goto	l9322
  9819  0574                     l9328:	
  9820  0574  3001               	movlw	1
  9821  0575  0022               	movlb	2	; select bank2
  9822  0576  00D0               	movwf	??_updateModulationArray^(0+256)
  9823  0577  0850               	movf	??_updateModulationArray^(0+256),w
  9824  0578  07DB               	addwf	updateModulationArray@iAngle^(0+256),f
  9825  0579  2BCD               	goto	l9330
  9826  057A                     l9332:	
  9827                           
  9828                           ;modulation.c: 75: }
  9829                           ;modulation.c: 76: for (char iAngle = subDiv; iAngle < 120; iAngle++) {
  9830  057A  0022               	movlb	2	; select bank2
  9831  057B  0857               	movf	updateModulationArray@subDiv^(0+256),w
  9832  057C  00D0               	movwf	??_updateModulationArray^(0+256)
  9833  057D  0850               	movf	??_updateModulationArray^(0+256),w
  9834  057E  00D6               	movwf	updateModulationArray@iAngle_2363^(0+256)
  9835  057F  3078               	movlw	120
  9836  0580  0256               	subwf	updateModulationArray@iAngle_2363^(0+256),w
  9837  0581  1803               	btfsc	3,0
  9838  0582  2D9D               	goto	l9342
  9839  0583                     l9336:	
  9840                           
  9841                           ;modulation.c: 77: modArray[iAngle] = 0 ;
  9842  0583  0856               	movf	updateModulationArray@iAngle_2363^(0+256),w
  9843  0584  00D0               	movwf	??_updateModulationArray^(0+256)
  9844  0585  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9845  0586  35D0               	lslf	??_updateModulationArray^(0+256),f
  9846  0587  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9847  0588  308A               	movlw	138
  9848  0589  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9849  058A  3023               	movlw	35
  9850  058B  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9851  058C  0850               	movf	??_updateModulationArray^(0+256),w
  9852  058D  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9853  058E  0086               	movwf	6
  9854  058F  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9855  0590  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9856  0591  0087               	movwf	7
  9857  0592  3000               	movlw	0
  9858  0593  3FC0               	movwi [0]fsr1
  9859  0594  3FC1               	movwi [1]fsr1
  9860  0595  3001               	movlw	1
  9861  0596  00D0               	movwf	??_updateModulationArray^(0+256)
  9862  0597  0850               	movf	??_updateModulationArray^(0+256),w
  9863  0598  07D6               	addwf	updateModulationArray@iAngle_2363^(0+256),f
  9864  0599  3078               	movlw	120
  9865  059A  0256               	subwf	updateModulationArray@iAngle_2363^(0+256),w
  9866  059B  1C03               	skipc
  9867  059C  2D83               	goto	l9336
  9868  059D                     l9342:	
  9869                           
  9870                           ;modulation.c: 78: }
  9871                           ;modulation.c: 79: modArray[120] = bottom_push_state;
  9872  059D  307A               	movlw	122
  9873  059E  0086               	movwf	6
  9874  059F  3024               	movlw	36
  9875  05A0  0087               	movwf	7
  9876  05A1  0023               	movlb	3	; select bank3
  9877  05A2  084B               	movf	_bottom_push_state^(0+384),w
  9878  05A3  3FC0               	movwi [0]fsr1
  9879  05A4  084C               	movf	(_bottom_push_state+1)^(0+384),w
  9880  05A5  3FC1               	movwi [1]fsr1
  9881                           
  9882                           ;modulation.c: 80: modArray[121] = symmetry;
  9883  05A6  307C               	movlw	124
  9884  05A7  0086               	movwf	6
  9885  05A8  3024               	movlw	36
  9886  05A9  0087               	movwf	7
  9887  05AA  085B               	movf	_symmetry^(0+384),w
  9888  05AB  3FC0               	movwi [0]fsr1
  9889  05AC  085C               	movf	(_symmetry+1)^(0+384),w
  9890  05AD  3FC1               	movwi [1]fsr1
  9891                           
  9892                           ;modulation.c: 81: modArray[122] = subDiv;
  9893  05AE  307E               	movlw	126
  9894  05AF  0086               	movwf	6
  9895  05B0  3024               	movlw	36
  9896  05B1  0087               	movwf	7
  9897  05B2  0022               	movlb	2	; select bank2
  9898  05B3  0857               	movf	updateModulationArray@subDiv^(0+256),w
  9899  05B4  3FC0               	movwi [0]fsr1
  9900  05B5  0858               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9901  05B6  3FC1               	movwi [1]fsr1
  9902  05B7  0008               	return
  9903  05B8                     __end_of_updateModulationArray:	
  9904                           
  9905                           	psect	text17
  9906  0981                     __ptext17:	
  9907 ;; *************** function _modTri *****************
  9908 ;; Defined at:
  9909 ;;		line 101 in file "modulation.c"
  9910 ;; Parameters:    Size  Location     Type
  9911 ;;  angle           3   14[BANK2 ] void 
  9912 ;;  inflection      3   17[BANK2 ] void 
  9913 ;; Auto vars:     Size  Location     Type
  9914 ;;  tmpVal          3   29[BANK2 ] void 
  9915 ;;  period          3   26[BANK2 ] void 
  9916 ;;  shift           3   23[BANK2 ] void 
  9917 ;; Return value:  Size  Location     Type
  9918 ;;                  2   14[BANK2 ] int 
  9919 ;; Registers used:
  9920 ;;		wreg, status,2, status,0, pclath, cstack
  9921 ;; Tracked objects:
  9922 ;;		On entry : 0/0
  9923 ;;		On exit  : 0/0
  9924 ;;		Unchanged: 0/0
  9925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9926 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9927 ;;      Locals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9929 ;;      Totals:         0       0       0      18       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9930 ;;Total ram usage:       18 bytes
  9931 ;; Hardware stack levels used:    1
  9932 ;; Hardware stack levels required when called:    5
  9933 ;; This function calls:
  9934 ;;		___ftadd
  9935 ;;		___ftdiv
  9936 ;;		___ftge
  9937 ;;		___ftmul
  9938 ;;		___ftneg
  9939 ;;		___fttol
  9940 ;; This function is called by:
  9941 ;;		_updateModulationArray
  9942 ;; This function uses a non-reentrant model
  9943 ;;
  9944                           
  9945                           
  9946                           ;psect for function _modTri
  9947  0981                     _modTri:	
  9948                           
  9949                           ;modulation.c: 102: double period = 1.0;
  9950                           
  9951                           ;incstack = 0
  9952                           ; Regs used in _modTri: [wreg+status,2+status,0+pclath+cstack]
  9953  0981  3000               	movlw	0
  9954  0982  0022               	movlb	2	; select bank2
  9955  0983  00BA               	movwf	modTri@period^(0+256)
  9956  0984  3080               	movlw	128
  9957  0985  00BB               	movwf	(modTri@period+1)^(0+256)
  9958  0986  303F               	movlw	63
  9959  0987  00BC               	movwf	(modTri@period+2)^(0+256)
  9960                           
  9961                           ;modulation.c: 103: double shift = 0;
  9962  0988  3000               	movlw	0
  9963  0989  00B7               	movwf	modTri@shift^(0+256)
  9964  098A  3000               	movlw	0
  9965  098B  00B8               	movwf	(modTri@shift+1)^(0+256)
  9966  098C  3000               	movlw	0
  9967  098D  00B9               	movwf	(modTri@shift+2)^(0+256)
  9968                           
  9969                           ;modulation.c: 105: if(angle<=inflection) {
  9970  098E  0831               	movf	modTri@inflection^(0+256),w
  9971  098F  0021               	movlb	1	; select bank1
  9972  0990  00A0               	movwf	___ftge@ff1^(0+128)
  9973  0991  0022               	movlb	2	; select bank2
  9974  0992  0832               	movf	(modTri@inflection+1)^(0+256),w
  9975  0993  0021               	movlb	1	; select bank1
  9976  0994  00A1               	movwf	(___ftge@ff1+1)^(0+128)
  9977  0995  0022               	movlb	2	; select bank2
  9978  0996  0833               	movf	(modTri@inflection+2)^(0+256),w
  9979  0997  0021               	movlb	1	; select bank1
  9980  0998  00A2               	movwf	(___ftge@ff1+2)^(0+128)
  9981  0999  0022               	movlb	2	; select bank2
  9982  099A  082E               	movf	modTri@angle^(0+256),w
  9983  099B  0021               	movlb	1	; select bank1
  9984  099C  00A3               	movwf	___ftge@ff2^(0+128)
  9985  099D  0022               	movlb	2	; select bank2
  9986  099E  082F               	movf	(modTri@angle+1)^(0+256),w
  9987  099F  0021               	movlb	1	; select bank1
  9988  09A0  00A4               	movwf	(___ftge@ff2+1)^(0+128)
  9989  09A1  0022               	movlb	2	; select bank2
  9990  09A2  0830               	movf	(modTri@angle+2)^(0+256),w
  9991  09A3  0021               	movlb	1	; select bank1
  9992  09A4  00A5               	movwf	(___ftge@ff2+2)^(0+128)
  9993  09A5  31A0  2089  3189   	fcall	___ftge
  9994  09A8  1C03               	btfss	3,0
  9995  09A9  29B6               	goto	l8662
  9996                           
  9997                           ;modulation.c: 106: period = 180.0/inflection;
  9998  09AA  0022               	movlb	2	; select bank2
  9999  09AB  0831               	movf	modTri@inflection^(0+256),w
 10000  09AC  0021               	movlb	1	; select bank1
 10001  09AD  00CE               	movwf	___ftdiv@f2^(0+128)
 10002  09AE  0022               	movlb	2	; select bank2
 10003  09AF  0832               	movf	(modTri@inflection+1)^(0+256),w
 10004  09B0  0021               	movlb	1	; select bank1
 10005  09B1  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10006  09B2  0022               	movlb	2	; select bank2
 10007  09B3  0833               	movf	(modTri@inflection+2)^(0+256),w
 10008  09B4  0021               	movlb	1	; select bank1
 10009  09B5  2A71               	goto	L5
 10010  09B6                     l8662:	
 10011                           ;modulation.c: 107: } else {
 10012                           
 10013                           
 10014                           ;modulation.c: 108: shift = -(360-inflection*2)*(180/(360-inflection));
 10015  09B6  0022               	movlb	2	; select bank2
 10016  09B7  0831               	movf	modTri@inflection^(0+256),w
 10017  09B8  0021               	movlb	1	; select bank1
 10018  09B9  00B1               	movwf	___ftmul@f2^(0+128)
 10019  09BA  0022               	movlb	2	; select bank2
 10020  09BB  0832               	movf	(modTri@inflection+1)^(0+256),w
 10021  09BC  0021               	movlb	1	; select bank1
 10022  09BD  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10023  09BE  0022               	movlb	2	; select bank2
 10024  09BF  0833               	movf	(modTri@inflection+2)^(0+256),w
 10025  09C0  0021               	movlb	1	; select bank1
 10026  09C1  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10027  09C2  3000               	movlw	0
 10028  09C3  00AE               	movwf	___ftmul@f1^(0+128)
 10029  09C4  3000               	movlw	0
 10030  09C5  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10031  09C6  3040               	movlw	64
 10032  09C7  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10033  09C8  319C  24BA  3189   	fcall	___ftmul
 10034  09CB  0021               	movlb	1	; select bank1
 10035  09CC  082E               	movf	?___ftmul^(0+128),w
 10036  09CD  00BE               	movwf	___ftneg@f1^(0+128)
 10037  09CE  082F               	movf	(?___ftmul+1)^(0+128),w
 10038  09CF  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10039  09D0  0830               	movf	(?___ftmul+2)^(0+128),w
 10040  09D1  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10041  09D2  31AC  24B5  3189   	fcall	___ftneg
 10042  09D5  0021               	movlb	1	; select bank1
 10043  09D6  083E               	movf	?___ftneg^(0+128),w
 10044  09D7  00C4               	movwf	___ftadd@f2^(0+128)
 10045  09D8  083F               	movf	(?___ftneg+1)^(0+128),w
 10046  09D9  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10047  09DA  0840               	movf	(?___ftneg+2)^(0+128),w
 10048  09DB  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10049  09DC  3000               	movlw	0
 10050  09DD  00C1               	movwf	___ftadd@f1^(0+128)
 10051  09DE  30B4               	movlw	180
 10052  09DF  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10053  09E0  3043               	movlw	67
 10054  09E1  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10055  09E2  319F  270A  3189   	fcall	___ftadd
 10056  09E5  0021               	movlb	1	; select bank1
 10057  09E6  0841               	movf	?___ftadd^(0+128),w
 10058  09E7  0022               	movlb	2	; select bank2
 10059  09E8  00B4               	movwf	_modTri$2879^(0+256)
 10060  09E9  0021               	movlb	1	; select bank1
 10061  09EA  0842               	movf	(?___ftadd+1)^(0+128),w
 10062  09EB  0022               	movlb	2	; select bank2
 10063  09EC  00B5               	movwf	(_modTri$2879+1)^(0+256)
 10064  09ED  0021               	movlb	1	; select bank1
 10065  09EE  0843               	movf	(?___ftadd+2)^(0+128),w
 10066  09EF  0022               	movlb	2	; select bank2
 10067  09F0  00B6               	movwf	(_modTri$2879+2)^(0+256)
 10068                           
 10069                           ;modulation.c: 108: shift = -(360-inflection*2)*(180/(360-inflection));
 10070  09F1  0834               	movf	_modTri$2879^(0+256),w
 10071  09F2  0021               	movlb	1	; select bank1
 10072  09F3  00BE               	movwf	___ftneg@f1^(0+128)
 10073  09F4  0022               	movlb	2	; select bank2
 10074  09F5  0835               	movf	(_modTri$2879+1)^(0+256),w
 10075  09F6  0021               	movlb	1	; select bank1
 10076  09F7  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10077  09F8  0022               	movlb	2	; select bank2
 10078  09F9  0836               	movf	(_modTri$2879+2)^(0+256),w
 10079  09FA  0021               	movlb	1	; select bank1
 10080  09FB  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10081  09FC  31AC  24B5  3189   	fcall	___ftneg
 10082  09FF  0021               	movlb	1	; select bank1
 10083  0A00  083E               	movf	?___ftneg^(0+128),w
 10084  0A01  00AE               	movwf	___ftmul@f1^(0+128)
 10085  0A02  083F               	movf	(?___ftneg+1)^(0+128),w
 10086  0A03  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10087  0A04  0840               	movf	(?___ftneg+2)^(0+128),w
 10088  0A05  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10089  0A06  3000               	movlw	0
 10090  0A07  00C1               	movwf	___ftadd@f1^(0+128)
 10091  0A08  30B4               	movlw	180
 10092  0A09  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10093  0A0A  3043               	movlw	67
 10094  0A0B  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10095  0A0C  0022               	movlb	2	; select bank2
 10096  0A0D  0831               	movf	modTri@inflection^(0+256),w
 10097  0A0E  0021               	movlb	1	; select bank1
 10098  0A0F  00BE               	movwf	___ftneg@f1^(0+128)
 10099  0A10  0022               	movlb	2	; select bank2
 10100  0A11  0832               	movf	(modTri@inflection+1)^(0+256),w
 10101  0A12  0021               	movlb	1	; select bank1
 10102  0A13  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10103  0A14  0022               	movlb	2	; select bank2
 10104  0A15  0833               	movf	(modTri@inflection+2)^(0+256),w
 10105  0A16  0021               	movlb	1	; select bank1
 10106  0A17  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10107  0A18  31AC  24B5  3189   	fcall	___ftneg
 10108  0A1B  0021               	movlb	1	; select bank1
 10109  0A1C  083E               	movf	?___ftneg^(0+128),w
 10110  0A1D  00C4               	movwf	___ftadd@f2^(0+128)
 10111  0A1E  083F               	movf	(?___ftneg+1)^(0+128),w
 10112  0A1F  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10113  0A20  0840               	movf	(?___ftneg+2)^(0+128),w
 10114  0A21  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10115  0A22  319F  270A  3189   	fcall	___ftadd
 10116  0A25  0021               	movlb	1	; select bank1
 10117  0A26  0841               	movf	?___ftadd^(0+128),w
 10118  0A27  00CE               	movwf	___ftdiv@f2^(0+128)
 10119  0A28  0842               	movf	(?___ftadd+1)^(0+128),w
 10120  0A29  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10121  0A2A  0843               	movf	(?___ftadd+2)^(0+128),w
 10122  0A2B  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10123  0A2C  3000               	movlw	0
 10124  0A2D  00D1               	movwf	___ftdiv@f1^(0+128)
 10125  0A2E  3034               	movlw	52
 10126  0A2F  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10127  0A30  3043               	movlw	67
 10128  0A31  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10129  0A32  319C  2411  3189   	fcall	___ftdiv
 10130  0A35  0021               	movlb	1	; select bank1
 10131  0A36  084E               	movf	?___ftdiv^(0+128),w
 10132  0A37  00B1               	movwf	___ftmul@f2^(0+128)
 10133  0A38  084F               	movf	(?___ftdiv+1)^(0+128),w
 10134  0A39  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10135  0A3A  0850               	movf	(?___ftdiv+2)^(0+128),w
 10136  0A3B  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10137  0A3C  319C  24BA  3189   	fcall	___ftmul
 10138  0A3F  0021               	movlb	1	; select bank1
 10139  0A40  082E               	movf	?___ftmul^(0+128),w
 10140  0A41  0022               	movlb	2	; select bank2
 10141  0A42  00B7               	movwf	modTri@shift^(0+256)
 10142  0A43  0021               	movlb	1	; select bank1
 10143  0A44  082F               	movf	(?___ftmul+1)^(0+128),w
 10144  0A45  0022               	movlb	2	; select bank2
 10145  0A46  00B8               	movwf	(modTri@shift+1)^(0+256)
 10146  0A47  0021               	movlb	1	; select bank1
 10147  0A48  0830               	movf	(?___ftmul+2)^(0+128),w
 10148  0A49  0022               	movlb	2	; select bank2
 10149  0A4A  00B9               	movwf	(modTri@shift+2)^(0+256)
 10150                           
 10151                           ;modulation.c: 109: period = 180/(360-inflection);
 10152  0A4B  3000               	movlw	0
 10153  0A4C  0021               	movlb	1	; select bank1
 10154  0A4D  00C1               	movwf	___ftadd@f1^(0+128)
 10155  0A4E  30B4               	movlw	180
 10156  0A4F  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10157  0A50  3043               	movlw	67
 10158  0A51  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10159  0A52  0022               	movlb	2	; select bank2
 10160  0A53  0831               	movf	modTri@inflection^(0+256),w
 10161  0A54  0021               	movlb	1	; select bank1
 10162  0A55  00BE               	movwf	___ftneg@f1^(0+128)
 10163  0A56  0022               	movlb	2	; select bank2
 10164  0A57  0832               	movf	(modTri@inflection+1)^(0+256),w
 10165  0A58  0021               	movlb	1	; select bank1
 10166  0A59  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10167  0A5A  0022               	movlb	2	; select bank2
 10168  0A5B  0833               	movf	(modTri@inflection+2)^(0+256),w
 10169  0A5C  0021               	movlb	1	; select bank1
 10170  0A5D  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10171  0A5E  31AC  24B5  3189   	fcall	___ftneg
 10172  0A61  0021               	movlb	1	; select bank1
 10173  0A62  083E               	movf	?___ftneg^(0+128),w
 10174  0A63  00C4               	movwf	___ftadd@f2^(0+128)
 10175  0A64  083F               	movf	(?___ftneg+1)^(0+128),w
 10176  0A65  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10177  0A66  0840               	movf	(?___ftneg+2)^(0+128),w
 10178  0A67  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10179  0A68  319F  270A  3189   	fcall	___ftadd
 10180  0A6B  0021               	movlb	1	; select bank1
 10181  0A6C  0841               	movf	?___ftadd^(0+128),w
 10182  0A6D  00CE               	movwf	___ftdiv@f2^(0+128)
 10183  0A6E  0842               	movf	(?___ftadd+1)^(0+128),w
 10184  0A6F  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10185  0A70  0843               	movf	(?___ftadd+2)^(0+128),w
 10186  0A71                     L5:	
 10187  0A71  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10188  0A72  3000               	movlw	0
 10189  0A73  00D1               	movwf	___ftdiv@f1^(0+128)
 10190  0A74  3034               	movlw	52
 10191  0A75  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10192  0A76  3043               	movlw	67
 10193  0A77  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10194  0A78  319C  2411  3189   	fcall	___ftdiv
 10195  0A7B  0021               	movlb	1	; select bank1
 10196  0A7C  084E               	movf	?___ftdiv^(0+128),w
 10197  0A7D  0022               	movlb	2	; select bank2
 10198  0A7E  00BA               	movwf	modTri@period^(0+256)
 10199  0A7F  0021               	movlb	1	; select bank1
 10200  0A80  084F               	movf	(?___ftdiv+1)^(0+128),w
 10201  0A81  0022               	movlb	2	; select bank2
 10202  0A82  00BB               	movwf	(modTri@period+1)^(0+256)
 10203  0A83  0021               	movlb	1	; select bank1
 10204  0A84  0850               	movf	(?___ftdiv+2)^(0+128),w
 10205  0A85  0022               	movlb	2	; select bank2
 10206  0A86  00BC               	movwf	(modTri@period+2)^(0+256)
 10207                           
 10208                           ;modulation.c: 111: }
 10209                           ;modulation.c: 112: double tmpVal = (period*angle-shift) ;
 10210  0A87  0837               	movf	modTri@shift^(0+256),w
 10211  0A88  0021               	movlb	1	; select bank1
 10212  0A89  00BE               	movwf	___ftneg@f1^(0+128)
 10213  0A8A  0022               	movlb	2	; select bank2
 10214  0A8B  0838               	movf	(modTri@shift+1)^(0+256),w
 10215  0A8C  0021               	movlb	1	; select bank1
 10216  0A8D  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10217  0A8E  0022               	movlb	2	; select bank2
 10218  0A8F  0839               	movf	(modTri@shift+2)^(0+256),w
 10219  0A90  0021               	movlb	1	; select bank1
 10220  0A91  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10221  0A92  31AC  24B5  3189   	fcall	___ftneg
 10222  0A95  0021               	movlb	1	; select bank1
 10223  0A96  083E               	movf	?___ftneg^(0+128),w
 10224  0A97  00C1               	movwf	___ftadd@f1^(0+128)
 10225  0A98  083F               	movf	(?___ftneg+1)^(0+128),w
 10226  0A99  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10227  0A9A  0840               	movf	(?___ftneg+2)^(0+128),w
 10228  0A9B  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10229  0A9C  0022               	movlb	2	; select bank2
 10230  0A9D  082E               	movf	modTri@angle^(0+256),w
 10231  0A9E  0021               	movlb	1	; select bank1
 10232  0A9F  00AE               	movwf	___ftmul@f1^(0+128)
 10233  0AA0  0022               	movlb	2	; select bank2
 10234  0AA1  082F               	movf	(modTri@angle+1)^(0+256),w
 10235  0AA2  0021               	movlb	1	; select bank1
 10236  0AA3  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10237  0AA4  0022               	movlb	2	; select bank2
 10238  0AA5  0830               	movf	(modTri@angle+2)^(0+256),w
 10239  0AA6  0021               	movlb	1	; select bank1
 10240  0AA7  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10241  0AA8  0022               	movlb	2	; select bank2
 10242  0AA9  083A               	movf	modTri@period^(0+256),w
 10243  0AAA  0021               	movlb	1	; select bank1
 10244  0AAB  00B1               	movwf	___ftmul@f2^(0+128)
 10245  0AAC  0022               	movlb	2	; select bank2
 10246  0AAD  083B               	movf	(modTri@period+1)^(0+256),w
 10247  0AAE  0021               	movlb	1	; select bank1
 10248  0AAF  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10249  0AB0  0022               	movlb	2	; select bank2
 10250  0AB1  083C               	movf	(modTri@period+2)^(0+256),w
 10251  0AB2  0021               	movlb	1	; select bank1
 10252  0AB3  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10253  0AB4  319C  24BA  3189   	fcall	___ftmul
 10254  0AB7  0021               	movlb	1	; select bank1
 10255  0AB8  082E               	movf	?___ftmul^(0+128),w
 10256  0AB9  00C4               	movwf	___ftadd@f2^(0+128)
 10257  0ABA  082F               	movf	(?___ftmul+1)^(0+128),w
 10258  0ABB  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10259  0ABC  0830               	movf	(?___ftmul+2)^(0+128),w
 10260  0ABD  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10261  0ABE  319F  270A  3189   	fcall	___ftadd
 10262  0AC1  0021               	movlb	1	; select bank1
 10263  0AC2  0841               	movf	?___ftadd^(0+128),w
 10264  0AC3  0022               	movlb	2	; select bank2
 10265  0AC4  00BD               	movwf	modTri@tmpVal^(0+256)
 10266  0AC5  0021               	movlb	1	; select bank1
 10267  0AC6  0842               	movf	(?___ftadd+1)^(0+128),w
 10268  0AC7  0022               	movlb	2	; select bank2
 10269  0AC8  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
 10270  0AC9  0021               	movlb	1	; select bank1
 10271  0ACA  0843               	movf	(?___ftadd+2)^(0+128),w
 10272  0ACB  0022               	movlb	2	; select bank2
 10273  0ACC  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
 10274                           
 10275                           ;modulation.c: 113: if (tmpVal > 180) {
 10276  0ACD  3000               	movlw	0
 10277  0ACE  0021               	movlb	1	; select bank1
 10278  0ACF  00A0               	movwf	___ftge@ff1^(0+128)
 10279  0AD0  3034               	movlw	52
 10280  0AD1  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10281  0AD2  3043               	movlw	67
 10282  0AD3  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10283  0AD4  0022               	movlb	2	; select bank2
 10284  0AD5  083D               	movf	modTri@tmpVal^(0+256),w
 10285  0AD6  0021               	movlb	1	; select bank1
 10286  0AD7  00A3               	movwf	___ftge@ff2^(0+128)
 10287  0AD8  0022               	movlb	2	; select bank2
 10288  0AD9  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10289  0ADA  0021               	movlb	1	; select bank1
 10290  0ADB  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10291  0ADC  0022               	movlb	2	; select bank2
 10292  0ADD  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10293  0ADE  0021               	movlb	1	; select bank1
 10294  0ADF  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10295  0AE0  31A0  2089  3189   	fcall	___ftge
 10296  0AE3  1803               	btfsc	3,0
 10297  0AE4  2AF8               	goto	l8666
 10298                           
 10299                           ;modulation.c: 114: tmpVal = tmpVal - 270.0;
 10300  0AE5  3000               	movlw	0
 10301  0AE6  0021               	movlb	1	; select bank1
 10302  0AE7  00C1               	movwf	___ftadd@f1^(0+128)
 10303  0AE8  3087               	movlw	135
 10304  0AE9  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10305  0AEA  30C3               	movlw	195
 10306  0AEB  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10307  0AEC  0022               	movlb	2	; select bank2
 10308  0AED  083D               	movf	modTri@tmpVal^(0+256),w
 10309  0AEE  0021               	movlb	1	; select bank1
 10310  0AEF  00C4               	movwf	___ftadd@f2^(0+128)
 10311  0AF0  0022               	movlb	2	; select bank2
 10312  0AF1  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10313  0AF2  0021               	movlb	1	; select bank1
 10314  0AF3  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10315  0AF4  0022               	movlb	2	; select bank2
 10316  0AF5  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10317  0AF6  0021               	movlb	1	; select bank1
 10318  0AF7  2B14               	goto	L6
 10319  0AF8                     l8666:	
 10320                           ;modulation.c: 115: } else {
 10321                           
 10322                           
 10323                           ;modulation.c: 116: tmpVal = 90 - tmpVal;
 10324  0AF8  3000               	movlw	0
 10325  0AF9  0021               	movlb	1	; select bank1
 10326  0AFA  00C1               	movwf	___ftadd@f1^(0+128)
 10327  0AFB  30B4               	movlw	180
 10328  0AFC  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10329  0AFD  3042               	movlw	66
 10330  0AFE  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10331  0AFF  0022               	movlb	2	; select bank2
 10332  0B00  083D               	movf	modTri@tmpVal^(0+256),w
 10333  0B01  0021               	movlb	1	; select bank1
 10334  0B02  00BE               	movwf	___ftneg@f1^(0+128)
 10335  0B03  0022               	movlb	2	; select bank2
 10336  0B04  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10337  0B05  0021               	movlb	1	; select bank1
 10338  0B06  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10339  0B07  0022               	movlb	2	; select bank2
 10340  0B08  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10341  0B09  0021               	movlb	1	; select bank1
 10342  0B0A  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10343  0B0B  31AC  24B5  3189   	fcall	___ftneg
 10344  0B0E  0021               	movlb	1	; select bank1
 10345  0B0F  083E               	movf	?___ftneg^(0+128),w
 10346  0B10  00C4               	movwf	___ftadd@f2^(0+128)
 10347  0B11  083F               	movf	(?___ftneg+1)^(0+128),w
 10348  0B12  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10349  0B13  0840               	movf	(?___ftneg+2)^(0+128),w
 10350  0B14                     L6:	
 10351  0B14  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10352  0B15  319F  270A  3189   	fcall	___ftadd
 10353  0B18  0021               	movlb	1	; select bank1
 10354  0B19  0841               	movf	?___ftadd^(0+128),w
 10355  0B1A  0022               	movlb	2	; select bank2
 10356  0B1B  00BD               	movwf	modTri@tmpVal^(0+256)
 10357  0B1C  0021               	movlb	1	; select bank1
 10358  0B1D  0842               	movf	(?___ftadd+1)^(0+128),w
 10359  0B1E  0022               	movlb	2	; select bank2
 10360  0B1F  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
 10361  0B20  0021               	movlb	1	; select bank1
 10362  0B21  0843               	movf	(?___ftadd+2)^(0+128),w
 10363  0B22  0022               	movlb	2	; select bank2
 10364  0B23  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
 10365                           
 10366                           ;modulation.c: 117: }
 10367                           ;modulation.c: 118: tmpVal = tmpVal * -10/9;
 10368  0B24  3000               	movlw	0
 10369  0B25  0021               	movlb	1	; select bank1
 10370  0B26  00CE               	movwf	___ftdiv@f2^(0+128)
 10371  0B27  3010               	movlw	16
 10372  0B28  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10373  0B29  3041               	movlw	65
 10374  0B2A  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10375  0B2B  3000               	movlw	0
 10376  0B2C  00AE               	movwf	___ftmul@f1^(0+128)
 10377  0B2D  3020               	movlw	32
 10378  0B2E  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10379  0B2F  30C1               	movlw	193
 10380  0B30  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10381  0B31  0022               	movlb	2	; select bank2
 10382  0B32  083D               	movf	modTri@tmpVal^(0+256),w
 10383  0B33  0021               	movlb	1	; select bank1
 10384  0B34  00B1               	movwf	___ftmul@f2^(0+128)
 10385  0B35  0022               	movlb	2	; select bank2
 10386  0B36  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10387  0B37  0021               	movlb	1	; select bank1
 10388  0B38  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10389  0B39  0022               	movlb	2	; select bank2
 10390  0B3A  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10391  0B3B  0021               	movlb	1	; select bank1
 10392  0B3C  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10393  0B3D  319C  24BA  3189   	fcall	___ftmul
 10394  0B40  0021               	movlb	1	; select bank1
 10395  0B41  082E               	movf	?___ftmul^(0+128),w
 10396  0B42  00D1               	movwf	___ftdiv@f1^(0+128)
 10397  0B43  082F               	movf	(?___ftmul+1)^(0+128),w
 10398  0B44  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10399  0B45  0830               	movf	(?___ftmul+2)^(0+128),w
 10400  0B46  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10401  0B47  319C  2411  3189   	fcall	___ftdiv
 10402  0B4A  0021               	movlb	1	; select bank1
 10403  0B4B  084E               	movf	?___ftdiv^(0+128),w
 10404  0B4C  0022               	movlb	2	; select bank2
 10405  0B4D  00BD               	movwf	modTri@tmpVal^(0+256)
 10406  0B4E  0021               	movlb	1	; select bank1
 10407  0B4F  084F               	movf	(?___ftdiv+1)^(0+128),w
 10408  0B50  0022               	movlb	2	; select bank2
 10409  0B51  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
 10410  0B52  0021               	movlb	1	; select bank1
 10411  0B53  0850               	movf	(?___ftdiv+2)^(0+128),w
 10412  0B54  0022               	movlb	2	; select bank2
 10413  0B55  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
 10414                           
 10415                           ;modulation.c: 120: return (int)(tmpVal);
 10416  0B56  083D               	movf	modTri@tmpVal^(0+256),w
 10417  0B57  00A0               	movwf	___fttol@f1^(0+256)
 10418  0B58  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10419  0B59  00A1               	movwf	(___fttol@f1+1)^(0+256)
 10420  0B5A  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10421  0B5B  00A2               	movwf	(___fttol@f1+2)^(0+256)
 10422  0B5C  3199  213F         	fcall	___fttol
 10423  0B5E  0022               	movlb	2	; select bank2
 10424  0B5F  0821               	movf	(?___fttol^(0+256)+1),w
 10425  0B60  00AF               	movwf	(?_modTri+1)^(0+256)
 10426  0B61  0820               	movf	?___fttol^(0+256),w
 10427  0B62  00AE               	movwf	?_modTri^(0+256)
 10428  0B63  0008               	return
 10429  0B64                     __end_of_modTri:	
 10430                           
 10431                           	psect	text18
 10432  2102                     __ptext18:	
 10433 ;; *************** function _modSquare *****************
 10434 ;; Defined at:
 10435 ;;		line 144 in file "modulation.c"
 10436 ;; Parameters:    Size  Location     Type
 10437 ;;  angle           3   40[BANK2 ] int 
 10438 ;;  inflection      3   43[BANK2 ] int 
 10439 ;; Auto vars:     Size  Location     Type
 10440 ;;  tmpVal          2   46[BANK2 ] int 
 10441 ;; Return value:  Size  Location     Type
 10442 ;;                  2   40[BANK2 ] int 
 10443 ;; Registers used:
 10444 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10445 ;; Tracked objects:
 10446 ;;		On entry : 0/0
 10447 ;;		On exit  : 0/0
 10448 ;;		Unchanged: 0/0
 10449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10450 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10451 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10453 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10454 ;;Total ram usage:        8 bytes
 10455 ;; Hardware stack levels used:    1
 10456 ;; Hardware stack levels required when called:    6
 10457 ;; This function calls:
 10458 ;;		___ftge
 10459 ;;		_modCos
 10460 ;; This function is called by:
 10461 ;;		_updateModulationArray
 10462 ;; This function uses a non-reentrant model
 10463 ;;
 10464                           
 10465                           
 10466                           ;psect for function _modSquare
 10467  2102                     _modSquare:	
 10468                           
 10469                           ;modulation.c: 145: int tmpVal = modCos(angle, inflection);
 10470                           
 10471                           ;incstack = 0
 10472                           ; Regs used in _modSquare: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10473  2102  0022               	movlb	2	; select bank2
 10474  2103  0848               	movf	modSquare@angle^(0+256),w
 10475  2104  00B4               	movwf	modCos@angle^(0+256)
 10476  2105  0849               	movf	(modSquare@angle+1)^(0+256),w
 10477  2106  00B5               	movwf	(modCos@angle+1)^(0+256)
 10478  2107  084A               	movf	(modSquare@angle+2)^(0+256),w
 10479  2108  00B6               	movwf	(modCos@angle+2)^(0+256)
 10480  2109  084B               	movf	modSquare@inflection^(0+256),w
 10481  210A  00B7               	movwf	modCos@inflection^(0+256)
 10482  210B  084C               	movf	(modSquare@inflection+1)^(0+256),w
 10483  210C  00B8               	movwf	(modCos@inflection+1)^(0+256)
 10484  210D  084D               	movf	(modSquare@inflection+2)^(0+256),w
 10485  210E  00B9               	movwf	(modCos@inflection+2)^(0+256)
 10486  210F  3194  2485  31A1   	fcall	_modCos
 10487  2112  0022               	movlb	2	; select bank2
 10488  2113  0835               	movf	(?_modCos+1)^(0+256),w
 10489  2114  00CF               	movwf	(modSquare@tmpVal+1)^(0+256)
 10490  2115  0834               	movf	?_modCos^(0+256),w
 10491  2116  00CE               	movwf	modSquare@tmpVal^(0+256)
 10492                           
 10493                           ;modulation.c: 146: return (angle <= inflection) ? -100 : 100;
 10494  2117  084B               	movf	modSquare@inflection^(0+256),w
 10495  2118  0021               	movlb	1	; select bank1
 10496  2119  00A0               	movwf	___ftge@ff1^(0+128)
 10497  211A  0022               	movlb	2	; select bank2
 10498  211B  084C               	movf	(modSquare@inflection+1)^(0+256),w
 10499  211C  0021               	movlb	1	; select bank1
 10500  211D  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10501  211E  0022               	movlb	2	; select bank2
 10502  211F  084D               	movf	(modSquare@inflection+2)^(0+256),w
 10503  2120  0021               	movlb	1	; select bank1
 10504  2121  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10505  2122  0022               	movlb	2	; select bank2
 10506  2123  0848               	movf	modSquare@angle^(0+256),w
 10507  2124  0021               	movlb	1	; select bank1
 10508  2125  00A3               	movwf	___ftge@ff2^(0+128)
 10509  2126  0022               	movlb	2	; select bank2
 10510  2127  0849               	movf	(modSquare@angle+1)^(0+256),w
 10511  2128  0021               	movlb	1	; select bank1
 10512  2129  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10513  212A  0022               	movlb	2	; select bank2
 10514  212B  084A               	movf	(modSquare@angle+2)^(0+256),w
 10515  212C  0021               	movlb	1	; select bank1
 10516  212D  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10517  212E  31A0  2089  31A1   	fcall	___ftge
 10518  2131  1803               	btfsc	3,0
 10519  2132  2939               	goto	l8676
 10520  2133  3064               	movlw	100
 10521  2134  0022               	movlb	2	; select bank2
 10522  2135  00C8               	movwf	?_modSquare^(0+256)
 10523  2136  3000               	movlw	0
 10524  2137  00C9               	movwf	(?_modSquare^(0+256)+1)
 10525  2138  0008               	return
 10526  2139                     l8676:	
 10527  2139  309C               	movlw	156
 10528  213A  0022               	movlb	2	; select bank2
 10529  213B  00C8               	movwf	?_modSquare^(0+256)
 10530  213C  30FF               	movlw	255
 10531  213D  00C9               	movwf	(?_modSquare^(0+256)+1)
 10532  213E  0008               	return
 10533  213F                     __end_of_modSquare:	
 10534                           
 10535                           	psect	text19
 10536  1485                     __ptext19:	
 10537 ;; *************** function _modCos *****************
 10538 ;; Defined at:
 10539 ;;		line 85 in file "modulation.c"
 10540 ;; Parameters:    Size  Location     Type
 10541 ;;  angle           3   20[BANK2 ] int 
 10542 ;;  inflection      3   23[BANK2 ] int 
 10543 ;; Auto vars:     Size  Location     Type
 10544 ;;  tmpVal          3   37[BANK2 ] int 
 10545 ;;  period          3   34[BANK2 ] int 
 10546 ;;  shift           3   31[BANK2 ] int 
 10547 ;; Return value:  Size  Location     Type
 10548 ;;                  2   20[BANK2 ] int 
 10549 ;; Registers used:
 10550 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10551 ;; Tracked objects:
 10552 ;;		On entry : 0/0
 10553 ;;		On exit  : 0/0
 10554 ;;		Unchanged: 0/0
 10555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10556 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10557 ;;      Locals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10558 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10559 ;;      Totals:         0       0       0      20       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10560 ;;Total ram usage:       20 bytes
 10561 ;; Hardware stack levels used:    1
 10562 ;; Hardware stack levels required when called:    5
 10563 ;; This function calls:
 10564 ;;		___ftadd
 10565 ;;		___ftdiv
 10566 ;;		___ftge
 10567 ;;		___ftmul
 10568 ;;		___ftneg
 10569 ;;		___fttol
 10570 ;;		___wmul
 10571 ;; This function is called by:
 10572 ;;		_updateModulationArray
 10573 ;;		_modSquare
 10574 ;; This function uses a non-reentrant model
 10575 ;;
 10576                           
 10577                           
 10578                           ;psect for function _modCos
 10579  1485                     _modCos:	
 10580                           
 10581                           ;modulation.c: 86: double period = 1.0;
 10582                           
 10583                           ;incstack = 0
 10584                           ; Regs used in _modCos: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10585  1485  3000               	movlw	0
 10586  1486  0022               	movlb	2	; select bank2
 10587  1487  00C2               	movwf	modCos@period^(0+256)
 10588  1488  3080               	movlw	128
 10589  1489  00C3               	movwf	(modCos@period+1)^(0+256)
 10590  148A  303F               	movlw	63
 10591  148B  00C4               	movwf	(modCos@period+2)^(0+256)
 10592                           
 10593                           ;modulation.c: 87: double shift = 0.0;
 10594  148C  3000               	movlw	0
 10595  148D  00BF               	movwf	modCos@shift^(0+256)
 10596  148E  3000               	movlw	0
 10597  148F  00C0               	movwf	(modCos@shift+1)^(0+256)
 10598  1490  3000               	movlw	0
 10599  1491  00C1               	movwf	(modCos@shift+2)^(0+256)
 10600                           
 10601                           ;modulation.c: 89: if(angle<=inflection) {
 10602  1492  0837               	movf	modCos@inflection^(0+256),w
 10603  1493  0021               	movlb	1	; select bank1
 10604  1494  00A0               	movwf	___ftge@ff1^(0+128)
 10605  1495  0022               	movlb	2	; select bank2
 10606  1496  0838               	movf	(modCos@inflection+1)^(0+256),w
 10607  1497  0021               	movlb	1	; select bank1
 10608  1498  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10609  1499  0022               	movlb	2	; select bank2
 10610  149A  0839               	movf	(modCos@inflection+2)^(0+256),w
 10611  149B  0021               	movlb	1	; select bank1
 10612  149C  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10613  149D  0022               	movlb	2	; select bank2
 10614  149E  0834               	movf	modCos@angle^(0+256),w
 10615  149F  0021               	movlb	1	; select bank1
 10616  14A0  00A3               	movwf	___ftge@ff2^(0+128)
 10617  14A1  0022               	movlb	2	; select bank2
 10618  14A2  0835               	movf	(modCos@angle+1)^(0+256),w
 10619  14A3  0021               	movlb	1	; select bank1
 10620  14A4  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10621  14A5  0022               	movlb	2	; select bank2
 10622  14A6  0836               	movf	(modCos@angle+2)^(0+256),w
 10623  14A7  0021               	movlb	1	; select bank1
 10624  14A8  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10625  14A9  31A0  2089  3194   	fcall	___ftge
 10626  14AC  1C03               	btfss	3,0
 10627  14AD  2CBA               	goto	l8340
 10628                           
 10629                           ;modulation.c: 90: period = 180.0/inflection;
 10630  14AE  0022               	movlb	2	; select bank2
 10631  14AF  0837               	movf	modCos@inflection^(0+256),w
 10632  14B0  0021               	movlb	1	; select bank1
 10633  14B1  00CE               	movwf	___ftdiv@f2^(0+128)
 10634  14B2  0022               	movlb	2	; select bank2
 10635  14B3  0838               	movf	(modCos@inflection+1)^(0+256),w
 10636  14B4  0021               	movlb	1	; select bank1
 10637  14B5  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10638  14B6  0022               	movlb	2	; select bank2
 10639  14B7  0839               	movf	(modCos@inflection+2)^(0+256),w
 10640  14B8  0021               	movlb	1	; select bank1
 10641  14B9  2D75               	goto	L7
 10642  14BA                     l8340:	
 10643                           ;modulation.c: 91: } else {
 10644                           
 10645                           
 10646                           ;modulation.c: 92: shift = -(360-inflection*2)*(180/(360-inflection));
 10647  14BA  0022               	movlb	2	; select bank2
 10648  14BB  0837               	movf	modCos@inflection^(0+256),w
 10649  14BC  0021               	movlb	1	; select bank1
 10650  14BD  00B1               	movwf	___ftmul@f2^(0+128)
 10651  14BE  0022               	movlb	2	; select bank2
 10652  14BF  0838               	movf	(modCos@inflection+1)^(0+256),w
 10653  14C0  0021               	movlb	1	; select bank1
 10654  14C1  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10655  14C2  0022               	movlb	2	; select bank2
 10656  14C3  0839               	movf	(modCos@inflection+2)^(0+256),w
 10657  14C4  0021               	movlb	1	; select bank1
 10658  14C5  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10659  14C6  3000               	movlw	0
 10660  14C7  00AE               	movwf	___ftmul@f1^(0+128)
 10661  14C8  3000               	movlw	0
 10662  14C9  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10663  14CA  3040               	movlw	64
 10664  14CB  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10665  14CC  319C  24BA  3194   	fcall	___ftmul
 10666  14CF  0021               	movlb	1	; select bank1
 10667  14D0  082E               	movf	?___ftmul^(0+128),w
 10668  14D1  00BE               	movwf	___ftneg@f1^(0+128)
 10669  14D2  082F               	movf	(?___ftmul+1)^(0+128),w
 10670  14D3  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10671  14D4  0830               	movf	(?___ftmul+2)^(0+128),w
 10672  14D5  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10673  14D6  31AC  24B5  3194   	fcall	___ftneg
 10674  14D9  0021               	movlb	1	; select bank1
 10675  14DA  083E               	movf	?___ftneg^(0+128),w
 10676  14DB  00C4               	movwf	___ftadd@f2^(0+128)
 10677  14DC  083F               	movf	(?___ftneg+1)^(0+128),w
 10678  14DD  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10679  14DE  0840               	movf	(?___ftneg+2)^(0+128),w
 10680  14DF  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10681  14E0  3000               	movlw	0
 10682  14E1  00C1               	movwf	___ftadd@f1^(0+128)
 10683  14E2  30B4               	movlw	180
 10684  14E3  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10685  14E4  3043               	movlw	67
 10686  14E5  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10687  14E6  319F  270A  3194   	fcall	___ftadd
 10688  14E9  0021               	movlb	1	; select bank1
 10689  14EA  0841               	movf	?___ftadd^(0+128),w
 10690  14EB  0022               	movlb	2	; select bank2
 10691  14EC  00BC               	movwf	_modCos$2878^(0+256)
 10692  14ED  0021               	movlb	1	; select bank1
 10693  14EE  0842               	movf	(?___ftadd+1)^(0+128),w
 10694  14EF  0022               	movlb	2	; select bank2
 10695  14F0  00BD               	movwf	(_modCos$2878+1)^(0+256)
 10696  14F1  0021               	movlb	1	; select bank1
 10697  14F2  0843               	movf	(?___ftadd+2)^(0+128),w
 10698  14F3  0022               	movlb	2	; select bank2
 10699  14F4  00BE               	movwf	(_modCos$2878+2)^(0+256)
 10700                           
 10701                           ;modulation.c: 92: shift = -(360-inflection*2)*(180/(360-inflection));
 10702  14F5  083C               	movf	_modCos$2878^(0+256),w
 10703  14F6  0021               	movlb	1	; select bank1
 10704  14F7  00BE               	movwf	___ftneg@f1^(0+128)
 10705  14F8  0022               	movlb	2	; select bank2
 10706  14F9  083D               	movf	(_modCos$2878+1)^(0+256),w
 10707  14FA  0021               	movlb	1	; select bank1
 10708  14FB  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10709  14FC  0022               	movlb	2	; select bank2
 10710  14FD  083E               	movf	(_modCos$2878+2)^(0+256),w
 10711  14FE  0021               	movlb	1	; select bank1
 10712  14FF  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10713  1500  31AC  24B5  3194   	fcall	___ftneg
 10714  1503  0021               	movlb	1	; select bank1
 10715  1504  083E               	movf	?___ftneg^(0+128),w
 10716  1505  00AE               	movwf	___ftmul@f1^(0+128)
 10717  1506  083F               	movf	(?___ftneg+1)^(0+128),w
 10718  1507  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10719  1508  0840               	movf	(?___ftneg+2)^(0+128),w
 10720  1509  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10721  150A  3000               	movlw	0
 10722  150B  00C1               	movwf	___ftadd@f1^(0+128)
 10723  150C  30B4               	movlw	180
 10724  150D  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10725  150E  3043               	movlw	67
 10726  150F  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10727  1510  0022               	movlb	2	; select bank2
 10728  1511  0837               	movf	modCos@inflection^(0+256),w
 10729  1512  0021               	movlb	1	; select bank1
 10730  1513  00BE               	movwf	___ftneg@f1^(0+128)
 10731  1514  0022               	movlb	2	; select bank2
 10732  1515  0838               	movf	(modCos@inflection+1)^(0+256),w
 10733  1516  0021               	movlb	1	; select bank1
 10734  1517  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10735  1518  0022               	movlb	2	; select bank2
 10736  1519  0839               	movf	(modCos@inflection+2)^(0+256),w
 10737  151A  0021               	movlb	1	; select bank1
 10738  151B  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10739  151C  31AC  24B5  3194   	fcall	___ftneg
 10740  151F  0021               	movlb	1	; select bank1
 10741  1520  083E               	movf	?___ftneg^(0+128),w
 10742  1521  00C4               	movwf	___ftadd@f2^(0+128)
 10743  1522  083F               	movf	(?___ftneg+1)^(0+128),w
 10744  1523  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10745  1524  0840               	movf	(?___ftneg+2)^(0+128),w
 10746  1525  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10747  1526  319F  270A  3194   	fcall	___ftadd
 10748  1529  0021               	movlb	1	; select bank1
 10749  152A  0841               	movf	?___ftadd^(0+128),w
 10750  152B  00CE               	movwf	___ftdiv@f2^(0+128)
 10751  152C  0842               	movf	(?___ftadd+1)^(0+128),w
 10752  152D  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10753  152E  0843               	movf	(?___ftadd+2)^(0+128),w
 10754  152F  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10755  1530  3000               	movlw	0
 10756  1531  00D1               	movwf	___ftdiv@f1^(0+128)
 10757  1532  3034               	movlw	52
 10758  1533  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10759  1534  3043               	movlw	67
 10760  1535  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10761  1536  319C  2411  3194   	fcall	___ftdiv
 10762  1539  0021               	movlb	1	; select bank1
 10763  153A  084E               	movf	?___ftdiv^(0+128),w
 10764  153B  00B1               	movwf	___ftmul@f2^(0+128)
 10765  153C  084F               	movf	(?___ftdiv+1)^(0+128),w
 10766  153D  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10767  153E  0850               	movf	(?___ftdiv+2)^(0+128),w
 10768  153F  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10769  1540  319C  24BA  3194   	fcall	___ftmul
 10770  1543  0021               	movlb	1	; select bank1
 10771  1544  082E               	movf	?___ftmul^(0+128),w
 10772  1545  0022               	movlb	2	; select bank2
 10773  1546  00BF               	movwf	modCos@shift^(0+256)
 10774  1547  0021               	movlb	1	; select bank1
 10775  1548  082F               	movf	(?___ftmul+1)^(0+128),w
 10776  1549  0022               	movlb	2	; select bank2
 10777  154A  00C0               	movwf	(modCos@shift+1)^(0+256)
 10778  154B  0021               	movlb	1	; select bank1
 10779  154C  0830               	movf	(?___ftmul+2)^(0+128),w
 10780  154D  0022               	movlb	2	; select bank2
 10781  154E  00C1               	movwf	(modCos@shift+2)^(0+256)
 10782                           
 10783                           ;modulation.c: 93: period = 180/(360-inflection);
 10784  154F  3000               	movlw	0
 10785  1550  0021               	movlb	1	; select bank1
 10786  1551  00C1               	movwf	___ftadd@f1^(0+128)
 10787  1552  30B4               	movlw	180
 10788  1553  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10789  1554  3043               	movlw	67
 10790  1555  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10791  1556  0022               	movlb	2	; select bank2
 10792  1557  0837               	movf	modCos@inflection^(0+256),w
 10793  1558  0021               	movlb	1	; select bank1
 10794  1559  00BE               	movwf	___ftneg@f1^(0+128)
 10795  155A  0022               	movlb	2	; select bank2
 10796  155B  0838               	movf	(modCos@inflection+1)^(0+256),w
 10797  155C  0021               	movlb	1	; select bank1
 10798  155D  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10799  155E  0022               	movlb	2	; select bank2
 10800  155F  0839               	movf	(modCos@inflection+2)^(0+256),w
 10801  1560  0021               	movlb	1	; select bank1
 10802  1561  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10803  1562  31AC  24B5  3194   	fcall	___ftneg
 10804  1565  0021               	movlb	1	; select bank1
 10805  1566  083E               	movf	?___ftneg^(0+128),w
 10806  1567  00C4               	movwf	___ftadd@f2^(0+128)
 10807  1568  083F               	movf	(?___ftneg+1)^(0+128),w
 10808  1569  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10809  156A  0840               	movf	(?___ftneg+2)^(0+128),w
 10810  156B  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10811  156C  319F  270A  3194   	fcall	___ftadd
 10812  156F  0021               	movlb	1	; select bank1
 10813  1570  0841               	movf	?___ftadd^(0+128),w
 10814  1571  00CE               	movwf	___ftdiv@f2^(0+128)
 10815  1572  0842               	movf	(?___ftadd+1)^(0+128),w
 10816  1573  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10817  1574  0843               	movf	(?___ftadd+2)^(0+128),w
 10818  1575                     L7:	
 10819  1575  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10820  1576  3000               	movlw	0
 10821  1577  00D1               	movwf	___ftdiv@f1^(0+128)
 10822  1578  3034               	movlw	52
 10823  1579  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10824  157A  3043               	movlw	67
 10825  157B  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10826  157C  319C  2411  3194   	fcall	___ftdiv
 10827  157F  0021               	movlb	1	; select bank1
 10828  1580  084E               	movf	?___ftdiv^(0+128),w
 10829  1581  0022               	movlb	2	; select bank2
 10830  1582  00C2               	movwf	modCos@period^(0+256)
 10831  1583  0021               	movlb	1	; select bank1
 10832  1584  084F               	movf	(?___ftdiv+1)^(0+128),w
 10833  1585  0022               	movlb	2	; select bank2
 10834  1586  00C3               	movwf	(modCos@period+1)^(0+256)
 10835  1587  0021               	movlb	1	; select bank1
 10836  1588  0850               	movf	(?___ftdiv+2)^(0+128),w
 10837  1589  0022               	movlb	2	; select bank2
 10838  158A  00C4               	movwf	(modCos@period+2)^(0+256)
 10839                           
 10840                           ;modulation.c: 95: }
 10841                           ;modulation.c: 96: double tmpVal = (period*angle-shift) /3;
 10842  158B  3000               	movlw	0
 10843  158C  0021               	movlb	1	; select bank1
 10844  158D  00CE               	movwf	___ftdiv@f2^(0+128)
 10845  158E  3040               	movlw	64
 10846  158F  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10847  1590  3040               	movlw	64
 10848  1591  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10849  1592  0022               	movlb	2	; select bank2
 10850  1593  083F               	movf	modCos@shift^(0+256),w
 10851  1594  0021               	movlb	1	; select bank1
 10852  1595  00BE               	movwf	___ftneg@f1^(0+128)
 10853  1596  0022               	movlb	2	; select bank2
 10854  1597  0840               	movf	(modCos@shift+1)^(0+256),w
 10855  1598  0021               	movlb	1	; select bank1
 10856  1599  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10857  159A  0022               	movlb	2	; select bank2
 10858  159B  0841               	movf	(modCos@shift+2)^(0+256),w
 10859  159C  0021               	movlb	1	; select bank1
 10860  159D  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10861  159E  31AC  24B5  3194   	fcall	___ftneg
 10862  15A1  0021               	movlb	1	; select bank1
 10863  15A2  083E               	movf	?___ftneg^(0+128),w
 10864  15A3  00C1               	movwf	___ftadd@f1^(0+128)
 10865  15A4  083F               	movf	(?___ftneg+1)^(0+128),w
 10866  15A5  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10867  15A6  0840               	movf	(?___ftneg+2)^(0+128),w
 10868  15A7  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10869  15A8  0022               	movlb	2	; select bank2
 10870  15A9  0834               	movf	modCos@angle^(0+256),w
 10871  15AA  0021               	movlb	1	; select bank1
 10872  15AB  00AE               	movwf	___ftmul@f1^(0+128)
 10873  15AC  0022               	movlb	2	; select bank2
 10874  15AD  0835               	movf	(modCos@angle+1)^(0+256),w
 10875  15AE  0021               	movlb	1	; select bank1
 10876  15AF  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10877  15B0  0022               	movlb	2	; select bank2
 10878  15B1  0836               	movf	(modCos@angle+2)^(0+256),w
 10879  15B2  0021               	movlb	1	; select bank1
 10880  15B3  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10881  15B4  0022               	movlb	2	; select bank2
 10882  15B5  0842               	movf	modCos@period^(0+256),w
 10883  15B6  0021               	movlb	1	; select bank1
 10884  15B7  00B1               	movwf	___ftmul@f2^(0+128)
 10885  15B8  0022               	movlb	2	; select bank2
 10886  15B9  0843               	movf	(modCos@period+1)^(0+256),w
 10887  15BA  0021               	movlb	1	; select bank1
 10888  15BB  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10889  15BC  0022               	movlb	2	; select bank2
 10890  15BD  0844               	movf	(modCos@period+2)^(0+256),w
 10891  15BE  0021               	movlb	1	; select bank1
 10892  15BF  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10893  15C0  319C  24BA  3194   	fcall	___ftmul
 10894  15C3  0021               	movlb	1	; select bank1
 10895  15C4  082E               	movf	?___ftmul^(0+128),w
 10896  15C5  00C4               	movwf	___ftadd@f2^(0+128)
 10897  15C6  082F               	movf	(?___ftmul+1)^(0+128),w
 10898  15C7  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10899  15C8  0830               	movf	(?___ftmul+2)^(0+128),w
 10900  15C9  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10901  15CA  319F  270A  3194   	fcall	___ftadd
 10902  15CD  0021               	movlb	1	; select bank1
 10903  15CE  0841               	movf	?___ftadd^(0+128),w
 10904  15CF  00D1               	movwf	___ftdiv@f1^(0+128)
 10905  15D0  0842               	movf	(?___ftadd+1)^(0+128),w
 10906  15D1  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10907  15D2  0843               	movf	(?___ftadd+2)^(0+128),w
 10908  15D3  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10909  15D4  319C  2411  3194   	fcall	___ftdiv
 10910  15D7  0021               	movlb	1	; select bank1
 10911  15D8  084E               	movf	?___ftdiv^(0+128),w
 10912  15D9  0022               	movlb	2	; select bank2
 10913  15DA  00C5               	movwf	modCos@tmpVal^(0+256)
 10914  15DB  0021               	movlb	1	; select bank1
 10915  15DC  084F               	movf	(?___ftdiv+1)^(0+128),w
 10916  15DD  0022               	movlb	2	; select bank2
 10917  15DE  00C6               	movwf	(modCos@tmpVal+1)^(0+256)
 10918  15DF  0021               	movlb	1	; select bank1
 10919  15E0  0850               	movf	(?___ftdiv+2)^(0+128),w
 10920  15E1  0022               	movlb	2	; select bank2
 10921  15E2  00C7               	movwf	(modCos@tmpVal+2)^(0+256)
 10922                           
 10923                           ;modulation.c: 97: tmpVal = cosArray[(int)(tmpVal)];
 10924  15E3  0845               	movf	modCos@tmpVal^(0+256),w
 10925  15E4  00A0               	movwf	___fttol@f1^(0+256)
 10926  15E5  0846               	movf	(modCos@tmpVal+1)^(0+256),w
 10927  15E6  00A1               	movwf	(___fttol@f1+1)^(0+256)
 10928  15E7  0847               	movf	(modCos@tmpVal+2)^(0+256),w
 10929  15E8  00A2               	movwf	(___fttol@f1+2)^(0+256)
 10930  15E9  3199  213F  3194   	fcall	___fttol
 10931  15EC  0022               	movlb	2	; select bank2
 10932  15ED  0821               	movf	(?___fttol^(0+256)+1),w
 10933  15EE  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 10934  15EF  0820               	movf	?___fttol^(0+256),w
 10935  15F0  00AE               	movwf	___wmul@multiplier^(0+256)
 10936  15F1  3003               	movlw	3
 10937  15F2  00B0               	movwf	___wmul@multiplicand^(0+256)
 10938  15F3  3000               	movlw	0
 10939  15F4  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 10940  15F5  31AD  255F  3194   	fcall	___wmul
 10941  15F8  3082               	movlw	130
 10942  15F9  0022               	movlb	2	; select bank2
 10943  15FA  00BA               	movwf	??_modCos^(0+256)
 10944  15FB  3024               	movlw	36
 10945  15FC  00BB               	movwf	(??_modCos^(0+256)+1)
 10946  15FD  082E               	movf	?___wmul^(0+256),w
 10947  15FE  073A               	addwf	??_modCos^(0+256),w
 10948  15FF  0086               	movwf	6
 10949  1600  082F               	movf	(?___wmul+1)^(0+256),w
 10950  1601  3D3B               	addwfc	(??_modCos+1)^(0+256),w
 10951  1602  0087               	movwf	7
 10952  1603  3F40               	moviw [0]fsr1
 10953  1604  00C5               	movwf	modCos@tmpVal^(0+256)
 10954  1605  3F41               	moviw [1]fsr1
 10955  1606  00C6               	movwf	(modCos@tmpVal+1)^(0+256)
 10956  1607  3F42               	moviw [2]fsr1
 10957  1608  00C7               	movwf	(modCos@tmpVal+2)^(0+256)
 10958                           
 10959                           ;modulation.c: 98: return (int)(-100.0 * tmpVal);
 10960  1609  0845               	movf	modCos@tmpVal^(0+256),w
 10961  160A  0021               	movlb	1	; select bank1
 10962  160B  00B1               	movwf	___ftmul@f2^(0+128)
 10963  160C  0022               	movlb	2	; select bank2
 10964  160D  0846               	movf	(modCos@tmpVal+1)^(0+256),w
 10965  160E  0021               	movlb	1	; select bank1
 10966  160F  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10967  1610  0022               	movlb	2	; select bank2
 10968  1611  0847               	movf	(modCos@tmpVal+2)^(0+256),w
 10969  1612  0021               	movlb	1	; select bank1
 10970  1613  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10971  1614  3000               	movlw	0
 10972  1615  00AE               	movwf	___ftmul@f1^(0+128)
 10973  1616  30C8               	movlw	200
 10974  1617  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10975  1618  30C2               	movlw	194
 10976  1619  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10977  161A  319C  24BA  3194   	fcall	___ftmul
 10978  161D  0021               	movlb	1	; select bank1
 10979  161E  082E               	movf	?___ftmul^(0+128),w
 10980  161F  0022               	movlb	2	; select bank2
 10981  1620  00A0               	movwf	___fttol@f1^(0+256)
 10982  1621  0021               	movlb	1	; select bank1
 10983  1622  082F               	movf	(?___ftmul+1)^(0+128),w
 10984  1623  0022               	movlb	2	; select bank2
 10985  1624  00A1               	movwf	(___fttol@f1+1)^(0+256)
 10986  1625  0021               	movlb	1	; select bank1
 10987  1626  0830               	movf	(?___ftmul+2)^(0+128),w
 10988  1627  0022               	movlb	2	; select bank2
 10989  1628  00A2               	movwf	(___fttol@f1+2)^(0+256)
 10990  1629  3199  213F         	fcall	___fttol
 10991  162B  0022               	movlb	2	; select bank2
 10992  162C  0821               	movf	(?___fttol^(0+256)+1),w
 10993  162D  00B5               	movwf	(?_modCos+1)^(0+256)
 10994  162E  0820               	movf	?___fttol^(0+256),w
 10995  162F  00B4               	movwf	?_modCos^(0+256)
 10996  1630  0008               	return
 10997  1631                     __end_of_modCos:	
 10998                           
 10999                           	psect	text20
 11000  2D97                     __ptext20:	
 11001 ;; *************** function _modSawRev *****************
 11002 ;; Defined at:
 11003 ;;		line 139 in file "modulation.c"
 11004 ;; Parameters:    Size  Location     Type
 11005 ;;  angle           3   34[BANK2 ] int 
 11006 ;;  inflection      3   37[BANK2 ] int 
 11007 ;; Auto vars:     Size  Location     Type
 11008 ;;		None
 11009 ;; Return value:  Size  Location     Type
 11010 ;;                  2   34[BANK2 ] int 
 11011 ;; Registers used:
 11012 ;;		wreg, status,2, status,0, pclath, cstack
 11013 ;; Tracked objects:
 11014 ;;		On entry : 0/0
 11015 ;;		On exit  : 0/0
 11016 ;;		Unchanged: 0/0
 11017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11018 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11019 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11020 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11021 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11022 ;;Total ram usage:        8 bytes
 11023 ;; Hardware stack levels used:    1
 11024 ;; Hardware stack levels required when called:    6
 11025 ;; This function calls:
 11026 ;;		_modSaw
 11027 ;; This function is called by:
 11028 ;;		_updateModulationArray
 11029 ;; This function uses a non-reentrant model
 11030 ;;
 11031                           
 11032                           
 11033                           ;psect for function _modSawRev
 11034  2D97                     _modSawRev:	
 11035                           
 11036                           ;modulation.c: 140: return -1 * modSaw(angle, inflection);
 11037                           
 11038                           ;incstack = 0
 11039                           ; Regs used in _modSawRev: [wreg+status,2+status,0+pclath+cstack]
 11040  2D97  0022               	movlb	2	; select bank2
 11041  2D98  0842               	movf	modSawRev@angle^(0+256),w
 11042  2D99  00AE               	movwf	modSaw@angle^(0+256)
 11043  2D9A  0843               	movf	(modSawRev@angle+1)^(0+256),w
 11044  2D9B  00AF               	movwf	(modSaw@angle+1)^(0+256)
 11045  2D9C  0844               	movf	(modSawRev@angle+2)^(0+256),w
 11046  2D9D  00B0               	movwf	(modSaw@angle+2)^(0+256)
 11047  2D9E  0845               	movf	modSawRev@inflection^(0+256),w
 11048  2D9F  00B1               	movwf	modSaw@inflection^(0+256)
 11049  2DA0  0846               	movf	(modSawRev@inflection+1)^(0+256),w
 11050  2DA1  00B2               	movwf	(modSaw@inflection+1)^(0+256)
 11051  2DA2  0847               	movf	(modSawRev@inflection+2)^(0+256),w
 11052  2DA3  00B3               	movwf	(modSaw@inflection+2)^(0+256)
 11053  2DA4  3192  22ED         	fcall	_modSaw
 11054  2DA6  0022               	movlb	2	; select bank2
 11055  2DA7  092E               	comf	?_modSaw^(0+256),w
 11056  2DA8  00C8               	movwf	??_modSawRev^(0+256)
 11057  2DA9  092F               	comf	(?_modSaw+1)^(0+256),w
 11058  2DAA  00C9               	movwf	(??_modSawRev^(0+256)+1)
 11059  2DAB  0AC8               	incf	??_modSawRev^(0+256),f
 11060  2DAC  1903               	skipnz
 11061  2DAD  0AC9               	incf	(??_modSawRev^(0+256)+1),f
 11062  2DAE  0848               	movf	??_modSawRev^(0+256),w
 11063  2DAF  00C2               	movwf	?_modSawRev^(0+256)
 11064  2DB0  0849               	movf	(??_modSawRev+1)^(0+256),w
 11065  2DB1  00C3               	movwf	(?_modSawRev+1)^(0+256)
 11066  2DB2  0008               	return
 11067  2DB3                     __end_of_modSawRev:	
 11068                           
 11069                           	psect	text21
 11070  12ED                     __ptext21:	
 11071 ;; *************** function _modSaw *****************
 11072 ;; Defined at:
 11073 ;;		line 124 in file "modulation.c"
 11074 ;; Parameters:    Size  Location     Type
 11075 ;;  angle           3   14[BANK2 ] int 
 11076 ;;  inflection      3   17[BANK2 ] int 
 11077 ;; Auto vars:     Size  Location     Type
 11078 ;;  period          3   31[BANK2 ] int 
 11079 ;;  shift           3   28[BANK2 ] int 
 11080 ;;  mod             2   26[BANK2 ] int 
 11081 ;; Return value:  Size  Location     Type
 11082 ;;                  2   14[BANK2 ] int 
 11083 ;; Registers used:
 11084 ;;		wreg, status,2, status,0, pclath, cstack
 11085 ;; Tracked objects:
 11086 ;;		On entry : 0/0
 11087 ;;		On exit  : 0/0
 11088 ;;		Unchanged: 0/0
 11089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11090 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11091 ;;      Locals:         0       0       0      14       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11093 ;;      Totals:         0       0       0      20       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11094 ;;Total ram usage:       20 bytes
 11095 ;; Hardware stack levels used:    1
 11096 ;; Hardware stack levels required when called:    5
 11097 ;; This function calls:
 11098 ;;		___ftadd
 11099 ;;		___ftdiv
 11100 ;;		___ftge
 11101 ;;		___ftmul
 11102 ;;		___ftneg
 11103 ;;		___fttol
 11104 ;; This function is called by:
 11105 ;;		_updateModulationArray
 11106 ;;		_modSawRev
 11107 ;; This function uses a non-reentrant model
 11108 ;;
 11109                           
 11110                           
 11111                           ;psect for function _modSaw
 11112  12ED                     _modSaw:	
 11113                           
 11114                           ;modulation.c: 125: double period = 1.0;
 11115                           
 11116                           ;incstack = 0
 11117                           ; Regs used in _modSaw: [wreg+status,2+status,0+pclath+cstack]
 11118  12ED  3000               	movlw	0
 11119  12EE  0022               	movlb	2	; select bank2
 11120  12EF  00BF               	movwf	modSaw@period^(0+256)
 11121  12F0  3080               	movlw	128
 11122  12F1  00C0               	movwf	(modSaw@period+1)^(0+256)
 11123  12F2  303F               	movlw	63
 11124  12F3  00C1               	movwf	(modSaw@period+2)^(0+256)
 11125                           
 11126                           ;modulation.c: 126: double shift = 0;
 11127  12F4  3000               	movlw	0
 11128  12F5  00BC               	movwf	modSaw@shift^(0+256)
 11129  12F6  3000               	movlw	0
 11130  12F7  00BD               	movwf	(modSaw@shift+1)^(0+256)
 11131  12F8  3000               	movlw	0
 11132  12F9  00BE               	movwf	(modSaw@shift+2)^(0+256)
 11133                           
 11134                           ;modulation.c: 128: if(angle<=inflection) {
 11135  12FA  0831               	movf	modSaw@inflection^(0+256),w
 11136  12FB  0021               	movlb	1	; select bank1
 11137  12FC  00A0               	movwf	___ftge@ff1^(0+128)
 11138  12FD  0022               	movlb	2	; select bank2
 11139  12FE  0832               	movf	(modSaw@inflection+1)^(0+256),w
 11140  12FF  0021               	movlb	1	; select bank1
 11141  1300  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 11142  1301  0022               	movlb	2	; select bank2
 11143  1302  0833               	movf	(modSaw@inflection+2)^(0+256),w
 11144  1303  0021               	movlb	1	; select bank1
 11145  1304  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 11146  1305  0022               	movlb	2	; select bank2
 11147  1306  082E               	movf	modSaw@angle^(0+256),w
 11148  1307  0021               	movlb	1	; select bank1
 11149  1308  00A3               	movwf	___ftge@ff2^(0+128)
 11150  1309  0022               	movlb	2	; select bank2
 11151  130A  082F               	movf	(modSaw@angle+1)^(0+256),w
 11152  130B  0021               	movlb	1	; select bank1
 11153  130C  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 11154  130D  0022               	movlb	2	; select bank2
 11155  130E  0830               	movf	(modSaw@angle+2)^(0+256),w
 11156  130F  0021               	movlb	1	; select bank1
 11157  1310  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 11158  1311  31A0  2089  3192   	fcall	___ftge
 11159  1314  1C03               	btfss	3,0
 11160  1315  2B22               	goto	l8354
 11161                           
 11162                           ;modulation.c: 129: period = 180.0/inflection;
 11163  1316  0022               	movlb	2	; select bank2
 11164  1317  0831               	movf	modSaw@inflection^(0+256),w
 11165  1318  0021               	movlb	1	; select bank1
 11166  1319  00CE               	movwf	___ftdiv@f2^(0+128)
 11167  131A  0022               	movlb	2	; select bank2
 11168  131B  0832               	movf	(modSaw@inflection+1)^(0+256),w
 11169  131C  0021               	movlb	1	; select bank1
 11170  131D  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11171  131E  0022               	movlb	2	; select bank2
 11172  131F  0833               	movf	(modSaw@inflection+2)^(0+256),w
 11173  1320  0021               	movlb	1	; select bank1
 11174  1321  2BDD               	goto	L8
 11175  1322                     l8354:	
 11176                           ;modulation.c: 130: } else {
 11177                           
 11178                           
 11179                           ;modulation.c: 131: shift = -(360-inflection*2)*(180/(360-inflection));
 11180  1322  0022               	movlb	2	; select bank2
 11181  1323  0831               	movf	modSaw@inflection^(0+256),w
 11182  1324  0021               	movlb	1	; select bank1
 11183  1325  00B1               	movwf	___ftmul@f2^(0+128)
 11184  1326  0022               	movlb	2	; select bank2
 11185  1327  0832               	movf	(modSaw@inflection+1)^(0+256),w
 11186  1328  0021               	movlb	1	; select bank1
 11187  1329  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11188  132A  0022               	movlb	2	; select bank2
 11189  132B  0833               	movf	(modSaw@inflection+2)^(0+256),w
 11190  132C  0021               	movlb	1	; select bank1
 11191  132D  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11192  132E  3000               	movlw	0
 11193  132F  00AE               	movwf	___ftmul@f1^(0+128)
 11194  1330  3000               	movlw	0
 11195  1331  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11196  1332  3040               	movlw	64
 11197  1333  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11198  1334  319C  24BA  3192   	fcall	___ftmul
 11199  1337  0021               	movlb	1	; select bank1
 11200  1338  082E               	movf	?___ftmul^(0+128),w
 11201  1339  00BE               	movwf	___ftneg@f1^(0+128)
 11202  133A  082F               	movf	(?___ftmul+1)^(0+128),w
 11203  133B  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11204  133C  0830               	movf	(?___ftmul+2)^(0+128),w
 11205  133D  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11206  133E  31AC  24B5  3192   	fcall	___ftneg
 11207  1341  0021               	movlb	1	; select bank1
 11208  1342  083E               	movf	?___ftneg^(0+128),w
 11209  1343  00C4               	movwf	___ftadd@f2^(0+128)
 11210  1344  083F               	movf	(?___ftneg+1)^(0+128),w
 11211  1345  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11212  1346  0840               	movf	(?___ftneg+2)^(0+128),w
 11213  1347  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11214  1348  3000               	movlw	0
 11215  1349  00C1               	movwf	___ftadd@f1^(0+128)
 11216  134A  30B4               	movlw	180
 11217  134B  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11218  134C  3043               	movlw	67
 11219  134D  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11220  134E  319F  270A  3192   	fcall	___ftadd
 11221  1351  0021               	movlb	1	; select bank1
 11222  1352  0841               	movf	?___ftadd^(0+128),w
 11223  1353  0022               	movlb	2	; select bank2
 11224  1354  00B4               	movwf	_modSaw$2880^(0+256)
 11225  1355  0021               	movlb	1	; select bank1
 11226  1356  0842               	movf	(?___ftadd+1)^(0+128),w
 11227  1357  0022               	movlb	2	; select bank2
 11228  1358  00B5               	movwf	(_modSaw$2880+1)^(0+256)
 11229  1359  0021               	movlb	1	; select bank1
 11230  135A  0843               	movf	(?___ftadd+2)^(0+128),w
 11231  135B  0022               	movlb	2	; select bank2
 11232  135C  00B6               	movwf	(_modSaw$2880+2)^(0+256)
 11233                           
 11234                           ;modulation.c: 131: shift = -(360-inflection*2)*(180/(360-inflection));
 11235  135D  0834               	movf	_modSaw$2880^(0+256),w
 11236  135E  0021               	movlb	1	; select bank1
 11237  135F  00BE               	movwf	___ftneg@f1^(0+128)
 11238  1360  0022               	movlb	2	; select bank2
 11239  1361  0835               	movf	(_modSaw$2880+1)^(0+256),w
 11240  1362  0021               	movlb	1	; select bank1
 11241  1363  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11242  1364  0022               	movlb	2	; select bank2
 11243  1365  0836               	movf	(_modSaw$2880+2)^(0+256),w
 11244  1366  0021               	movlb	1	; select bank1
 11245  1367  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11246  1368  31AC  24B5  3192   	fcall	___ftneg
 11247  136B  0021               	movlb	1	; select bank1
 11248  136C  083E               	movf	?___ftneg^(0+128),w
 11249  136D  00AE               	movwf	___ftmul@f1^(0+128)
 11250  136E  083F               	movf	(?___ftneg+1)^(0+128),w
 11251  136F  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11252  1370  0840               	movf	(?___ftneg+2)^(0+128),w
 11253  1371  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11254  1372  3000               	movlw	0
 11255  1373  00C1               	movwf	___ftadd@f1^(0+128)
 11256  1374  30B4               	movlw	180
 11257  1375  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11258  1376  3043               	movlw	67
 11259  1377  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11260  1378  0022               	movlb	2	; select bank2
 11261  1379  0831               	movf	modSaw@inflection^(0+256),w
 11262  137A  0021               	movlb	1	; select bank1
 11263  137B  00BE               	movwf	___ftneg@f1^(0+128)
 11264  137C  0022               	movlb	2	; select bank2
 11265  137D  0832               	movf	(modSaw@inflection+1)^(0+256),w
 11266  137E  0021               	movlb	1	; select bank1
 11267  137F  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11268  1380  0022               	movlb	2	; select bank2
 11269  1381  0833               	movf	(modSaw@inflection+2)^(0+256),w
 11270  1382  0021               	movlb	1	; select bank1
 11271  1383  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11272  1384  31AC  24B5  3192   	fcall	___ftneg
 11273  1387  0021               	movlb	1	; select bank1
 11274  1388  083E               	movf	?___ftneg^(0+128),w
 11275  1389  00C4               	movwf	___ftadd@f2^(0+128)
 11276  138A  083F               	movf	(?___ftneg+1)^(0+128),w
 11277  138B  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11278  138C  0840               	movf	(?___ftneg+2)^(0+128),w
 11279  138D  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11280  138E  319F  270A  3192   	fcall	___ftadd
 11281  1391  0021               	movlb	1	; select bank1
 11282  1392  0841               	movf	?___ftadd^(0+128),w
 11283  1393  00CE               	movwf	___ftdiv@f2^(0+128)
 11284  1394  0842               	movf	(?___ftadd+1)^(0+128),w
 11285  1395  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11286  1396  0843               	movf	(?___ftadd+2)^(0+128),w
 11287  1397  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11288  1398  3000               	movlw	0
 11289  1399  00D1               	movwf	___ftdiv@f1^(0+128)
 11290  139A  3034               	movlw	52
 11291  139B  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11292  139C  3043               	movlw	67
 11293  139D  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11294  139E  319C  2411  3192   	fcall	___ftdiv
 11295  13A1  0021               	movlb	1	; select bank1
 11296  13A2  084E               	movf	?___ftdiv^(0+128),w
 11297  13A3  00B1               	movwf	___ftmul@f2^(0+128)
 11298  13A4  084F               	movf	(?___ftdiv+1)^(0+128),w
 11299  13A5  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11300  13A6  0850               	movf	(?___ftdiv+2)^(0+128),w
 11301  13A7  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11302  13A8  319C  24BA  3192   	fcall	___ftmul
 11303  13AB  0021               	movlb	1	; select bank1
 11304  13AC  082E               	movf	?___ftmul^(0+128),w
 11305  13AD  0022               	movlb	2	; select bank2
 11306  13AE  00BC               	movwf	modSaw@shift^(0+256)
 11307  13AF  0021               	movlb	1	; select bank1
 11308  13B0  082F               	movf	(?___ftmul+1)^(0+128),w
 11309  13B1  0022               	movlb	2	; select bank2
 11310  13B2  00BD               	movwf	(modSaw@shift+1)^(0+256)
 11311  13B3  0021               	movlb	1	; select bank1
 11312  13B4  0830               	movf	(?___ftmul+2)^(0+128),w
 11313  13B5  0022               	movlb	2	; select bank2
 11314  13B6  00BE               	movwf	(modSaw@shift+2)^(0+256)
 11315                           
 11316                           ;modulation.c: 132: period = 180/(360-inflection);
 11317  13B7  3000               	movlw	0
 11318  13B8  0021               	movlb	1	; select bank1
 11319  13B9  00C1               	movwf	___ftadd@f1^(0+128)
 11320  13BA  30B4               	movlw	180
 11321  13BB  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11322  13BC  3043               	movlw	67
 11323  13BD  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11324  13BE  0022               	movlb	2	; select bank2
 11325  13BF  0831               	movf	modSaw@inflection^(0+256),w
 11326  13C0  0021               	movlb	1	; select bank1
 11327  13C1  00BE               	movwf	___ftneg@f1^(0+128)
 11328  13C2  0022               	movlb	2	; select bank2
 11329  13C3  0832               	movf	(modSaw@inflection+1)^(0+256),w
 11330  13C4  0021               	movlb	1	; select bank1
 11331  13C5  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11332  13C6  0022               	movlb	2	; select bank2
 11333  13C7  0833               	movf	(modSaw@inflection+2)^(0+256),w
 11334  13C8  0021               	movlb	1	; select bank1
 11335  13C9  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11336  13CA  31AC  24B5  3192   	fcall	___ftneg
 11337  13CD  0021               	movlb	1	; select bank1
 11338  13CE  083E               	movf	?___ftneg^(0+128),w
 11339  13CF  00C4               	movwf	___ftadd@f2^(0+128)
 11340  13D0  083F               	movf	(?___ftneg+1)^(0+128),w
 11341  13D1  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11342  13D2  0840               	movf	(?___ftneg+2)^(0+128),w
 11343  13D3  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11344  13D4  319F  270A  3192   	fcall	___ftadd
 11345  13D7  0021               	movlb	1	; select bank1
 11346  13D8  0841               	movf	?___ftadd^(0+128),w
 11347  13D9  00CE               	movwf	___ftdiv@f2^(0+128)
 11348  13DA  0842               	movf	(?___ftadd+1)^(0+128),w
 11349  13DB  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11350  13DC  0843               	movf	(?___ftadd+2)^(0+128),w
 11351  13DD                     L8:	
 11352  13DD  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11353  13DE  3000               	movlw	0
 11354  13DF  00D1               	movwf	___ftdiv@f1^(0+128)
 11355  13E0  3034               	movlw	52
 11356  13E1  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11357  13E2  3043               	movlw	67
 11358  13E3  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11359  13E4  319C  2411  3192   	fcall	___ftdiv
 11360  13E7  0021               	movlb	1	; select bank1
 11361  13E8  084E               	movf	?___ftdiv^(0+128),w
 11362  13E9  0022               	movlb	2	; select bank2
 11363  13EA  00BF               	movwf	modSaw@period^(0+256)
 11364  13EB  0021               	movlb	1	; select bank1
 11365  13EC  084F               	movf	(?___ftdiv+1)^(0+128),w
 11366  13ED  0022               	movlb	2	; select bank2
 11367  13EE  00C0               	movwf	(modSaw@period+1)^(0+256)
 11368  13EF  0021               	movlb	1	; select bank1
 11369  13F0  0850               	movf	(?___ftdiv+2)^(0+128),w
 11370  13F1  0022               	movlb	2	; select bank2
 11371  13F2  00C1               	movwf	(modSaw@period+2)^(0+256)
 11372                           
 11373                           ;modulation.c: 133: }
 11374                           ;modulation.c: 135: int mod = (int)((period*angle-shift-180)*5/9);
 11375  13F3  083F               	movf	modSaw@period^(0+256),w
 11376  13F4  0021               	movlb	1	; select bank1
 11377  13F5  00B1               	movwf	___ftmul@f2^(0+128)
 11378  13F6  0022               	movlb	2	; select bank2
 11379  13F7  0840               	movf	(modSaw@period+1)^(0+256),w
 11380  13F8  0021               	movlb	1	; select bank1
 11381  13F9  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11382  13FA  0022               	movlb	2	; select bank2
 11383  13FB  0841               	movf	(modSaw@period+2)^(0+256),w
 11384  13FC  0021               	movlb	1	; select bank1
 11385  13FD  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11386  13FE  0022               	movlb	2	; select bank2
 11387  13FF  082E               	movf	modSaw@angle^(0+256),w
 11388  1400  0021               	movlb	1	; select bank1
 11389  1401  00AE               	movwf	___ftmul@f1^(0+128)
 11390  1402  0022               	movlb	2	; select bank2
 11391  1403  082F               	movf	(modSaw@angle+1)^(0+256),w
 11392  1404  0021               	movlb	1	; select bank1
 11393  1405  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11394  1406  0022               	movlb	2	; select bank2
 11395  1407  0830               	movf	(modSaw@angle+2)^(0+256),w
 11396  1408  0021               	movlb	1	; select bank1
 11397  1409  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11398  140A  319C  24BA  3192   	fcall	___ftmul
 11399  140D  0021               	movlb	1	; select bank1
 11400  140E  082E               	movf	?___ftmul^(0+128),w
 11401  140F  00C4               	movwf	___ftadd@f2^(0+128)
 11402  1410  082F               	movf	(?___ftmul+1)^(0+128),w
 11403  1411  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11404  1412  0830               	movf	(?___ftmul+2)^(0+128),w
 11405  1413  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11406  1414  0022               	movlb	2	; select bank2
 11407  1415  083C               	movf	modSaw@shift^(0+256),w
 11408  1416  0021               	movlb	1	; select bank1
 11409  1417  00BE               	movwf	___ftneg@f1^(0+128)
 11410  1418  0022               	movlb	2	; select bank2
 11411  1419  083D               	movf	(modSaw@shift+1)^(0+256),w
 11412  141A  0021               	movlb	1	; select bank1
 11413  141B  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11414  141C  0022               	movlb	2	; select bank2
 11415  141D  083E               	movf	(modSaw@shift+2)^(0+256),w
 11416  141E  0021               	movlb	1	; select bank1
 11417  141F  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11418  1420  31AC  24B5  3192   	fcall	___ftneg
 11419  1423  0021               	movlb	1	; select bank1
 11420  1424  083E               	movf	?___ftneg^(0+128),w
 11421  1425  00C1               	movwf	___ftadd@f1^(0+128)
 11422  1426  083F               	movf	(?___ftneg+1)^(0+128),w
 11423  1427  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11424  1428  0840               	movf	(?___ftneg+2)^(0+128),w
 11425  1429  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11426  142A  319F  270A  3192   	fcall	___ftadd
 11427  142D  0021               	movlb	1	; select bank1
 11428  142E  0841               	movf	?___ftadd^(0+128),w
 11429  142F  0022               	movlb	2	; select bank2
 11430  1430  00B7               	movwf	_modSaw$2881^(0+256)
 11431  1431  0021               	movlb	1	; select bank1
 11432  1432  0842               	movf	(?___ftadd+1)^(0+128),w
 11433  1433  0022               	movlb	2	; select bank2
 11434  1434  00B8               	movwf	(_modSaw$2881+1)^(0+256)
 11435  1435  0021               	movlb	1	; select bank1
 11436  1436  0843               	movf	(?___ftadd+2)^(0+128),w
 11437  1437  0022               	movlb	2	; select bank2
 11438  1438  00B9               	movwf	(_modSaw$2881+2)^(0+256)
 11439                           
 11440                           ;modulation.c: 133: }
 11441                           ;modulation.c: 135: int mod = (int)((period*angle-shift-180)*5/9);
 11442  1439  0837               	movf	_modSaw$2881^(0+256),w
 11443  143A  0021               	movlb	1	; select bank1
 11444  143B  00C4               	movwf	___ftadd@f2^(0+128)
 11445  143C  0022               	movlb	2	; select bank2
 11446  143D  0838               	movf	(_modSaw$2881+1)^(0+256),w
 11447  143E  0021               	movlb	1	; select bank1
 11448  143F  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11449  1440  0022               	movlb	2	; select bank2
 11450  1441  0839               	movf	(_modSaw$2881+2)^(0+256),w
 11451  1442  0021               	movlb	1	; select bank1
 11452  1443  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11453  1444  3000               	movlw	0
 11454  1445  00C1               	movwf	___ftadd@f1^(0+128)
 11455  1446  3034               	movlw	52
 11456  1447  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11457  1448  30C3               	movlw	195
 11458  1449  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11459  144A  319F  270A  3192   	fcall	___ftadd
 11460  144D  0021               	movlb	1	; select bank1
 11461  144E  0841               	movf	?___ftadd^(0+128),w
 11462  144F  00B1               	movwf	___ftmul@f2^(0+128)
 11463  1450  0842               	movf	(?___ftadd+1)^(0+128),w
 11464  1451  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11465  1452  0843               	movf	(?___ftadd+2)^(0+128),w
 11466  1453  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11467  1454  3000               	movlw	0
 11468  1455  00AE               	movwf	___ftmul@f1^(0+128)
 11469  1456  30A0               	movlw	160
 11470  1457  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11471  1458  3040               	movlw	64
 11472  1459  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11473  145A  319C  24BA  3192   	fcall	___ftmul
 11474  145D  0021               	movlb	1	; select bank1
 11475  145E  082E               	movf	?___ftmul^(0+128),w
 11476  145F  00D1               	movwf	___ftdiv@f1^(0+128)
 11477  1460  082F               	movf	(?___ftmul+1)^(0+128),w
 11478  1461  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11479  1462  0830               	movf	(?___ftmul+2)^(0+128),w
 11480  1463  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11481  1464  3000               	movlw	0
 11482  1465  00CE               	movwf	___ftdiv@f2^(0+128)
 11483  1466  3010               	movlw	16
 11484  1467  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11485  1468  3041               	movlw	65
 11486  1469  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11487  146A  319C  2411  3192   	fcall	___ftdiv
 11488  146D  0021               	movlb	1	; select bank1
 11489  146E  084E               	movf	?___ftdiv^(0+128),w
 11490  146F  0022               	movlb	2	; select bank2
 11491  1470  00A0               	movwf	___fttol@f1^(0+256)
 11492  1471  0021               	movlb	1	; select bank1
 11493  1472  084F               	movf	(?___ftdiv+1)^(0+128),w
 11494  1473  0022               	movlb	2	; select bank2
 11495  1474  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11496  1475  0021               	movlb	1	; select bank1
 11497  1476  0850               	movf	(?___ftdiv+2)^(0+128),w
 11498  1477  0022               	movlb	2	; select bank2
 11499  1478  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11500  1479  3199  213F         	fcall	___fttol
 11501  147B  0022               	movlb	2	; select bank2
 11502  147C  0821               	movf	(?___fttol^(0+256)+1),w
 11503  147D  00BB               	movwf	(modSaw@mod+1)^(0+256)
 11504  147E  0820               	movf	?___fttol^(0+256),w
 11505  147F  00BA               	movwf	modSaw@mod^(0+256)
 11506                           
 11507                           ;modulation.c: 136: return mod;
 11508  1480  083B               	movf	(modSaw@mod+1)^(0+256),w
 11509  1481  00AF               	movwf	(?_modSaw+1)^(0+256)
 11510  1482  083A               	movf	modSaw@mod^(0+256),w
 11511  1483  00AE               	movwf	?_modSaw^(0+256)
 11512  1484  0008               	return
 11513  1485                     __end_of_modSaw:	
 11514                           
 11515                           	psect	text22
 11516  248D                     __ptext22:	
 11517 ;; *************** function ___awdiv *****************
 11518 ;; Defined at:
 11519 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 11520 ;; Parameters:    Size  Location     Type
 11521 ;;  divisor         2    0[BANK1 ] int 
 11522 ;;  dividend        2    2[BANK1 ] int 
 11523 ;; Auto vars:     Size  Location     Type
 11524 ;;  quotient        2    7[BANK1 ] int 
 11525 ;;  sign            1    6[BANK1 ] unsigned char 
 11526 ;;  counter         1    5[BANK1 ] unsigned char 
 11527 ;; Return value:  Size  Location     Type
 11528 ;;                  2    0[BANK1 ] int 
 11529 ;; Registers used:
 11530 ;;		wreg, status,2, status,0
 11531 ;; Tracked objects:
 11532 ;;		On entry : 0/0
 11533 ;;		On exit  : 0/0
 11534 ;;		Unchanged: 0/0
 11535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11536 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11537 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11538 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11539 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11540 ;;Total ram usage:        9 bytes
 11541 ;; Hardware stack levels used:    1
 11542 ;; Hardware stack levels required when called:    3
 11543 ;; This function calls:
 11544 ;;		Nothing
 11545 ;; This function is called by:
 11546 ;;		_updateModulationArray
 11547 ;;		_USARTWriteInt
 11548 ;; This function uses a non-reentrant model
 11549 ;;
 11550                           
 11551                           
 11552                           ;psect for function ___awdiv
 11553  248D                     ___awdiv:	
 11554                           
 11555                           ;incstack = 0
 11556                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 11557  248D  0021               	movlb	1	; select bank1
 11558  248E  01A6               	clrf	___awdiv@sign^(0+128)
 11559  248F  1FA1               	btfss	(___awdiv@divisor+1)^(0+128),7
 11560  2490  2C98               	goto	l8732
 11561  2491  09A0               	comf	___awdiv@divisor^(0+128),f
 11562  2492  09A1               	comf	(___awdiv@divisor+1)^(0+128),f
 11563  2493  0AA0               	incf	___awdiv@divisor^(0+128),f
 11564  2494  1903               	skipnz
 11565  2495  0AA1               	incf	(___awdiv@divisor+1)^(0+128),f
 11566  2496  01A6               	clrf	___awdiv@sign^(0+128)
 11567  2497  0AA6               	incf	___awdiv@sign^(0+128),f
 11568  2498                     l8732:	
 11569  2498  1FA3               	btfss	(___awdiv@dividend+1)^(0+128),7
 11570  2499  2CA3               	goto	l8738
 11571  249A  09A2               	comf	___awdiv@dividend^(0+128),f
 11572  249B  09A3               	comf	(___awdiv@dividend+1)^(0+128),f
 11573  249C  0AA2               	incf	___awdiv@dividend^(0+128),f
 11574  249D  1903               	skipnz
 11575  249E  0AA3               	incf	(___awdiv@dividend+1)^(0+128),f
 11576  249F  3001               	movlw	1
 11577  24A0  00A4               	movwf	??___awdiv^(0+128)
 11578  24A1  0824               	movf	??___awdiv^(0+128),w
 11579  24A2  06A6               	xorwf	___awdiv@sign^(0+128),f
 11580  24A3                     l8738:	
 11581  24A3  01A7               	clrf	___awdiv@quotient^(0+128)
 11582  24A4  01A8               	clrf	(___awdiv@quotient+1)^(0+128)
 11583  24A5  0820               	movf	___awdiv@divisor^(0+128),w
 11584  24A6  0421               	iorwf	(___awdiv@divisor+1)^(0+128),w
 11585  24A7  1903               	btfsc	3,2
 11586  24A8  2CD2               	goto	l8760
 11587  24A9  01A5               	clrf	___awdiv@counter^(0+128)
 11588  24AA  0AA5               	incf	___awdiv@counter^(0+128),f
 11589  24AB                     l8748:	
 11590  24AB  1BA1               	btfsc	(___awdiv@divisor+1)^(0+128),7
 11591  24AC  2CB7               	goto	l8750
 11592  24AD  3001               	movlw	1
 11593  24AE                     u9325:	
 11594  24AE  35A0               	lslf	___awdiv@divisor^(0+128),f
 11595  24AF  0DA1               	rlf	(___awdiv@divisor+1)^(0+128),f
 11596  24B0  0B89               	decfsz	9,f
 11597  24B1  2CAE               	goto	u9325
 11598  24B2  3001               	movlw	1
 11599  24B3  00A4               	movwf	??___awdiv^(0+128)
 11600  24B4  0824               	movf	??___awdiv^(0+128),w
 11601  24B5  07A5               	addwf	___awdiv@counter^(0+128),f
 11602  24B6  2CAB               	goto	l8748
 11603  24B7                     l8750:	
 11604  24B7  3001               	movlw	1
 11605  24B8                     u9345:	
 11606  24B8  35A7               	lslf	___awdiv@quotient^(0+128),f
 11607  24B9  0DA8               	rlf	(___awdiv@quotient+1)^(0+128),f
 11608  24BA  0B89               	decfsz	9,f
 11609  24BB  2CB8               	goto	u9345
 11610  24BC  0821               	movf	(___awdiv@divisor+1)^(0+128),w
 11611  24BD  0223               	subwf	(___awdiv@dividend+1)^(0+128),w
 11612  24BE  1D03               	skipz
 11613  24BF  2CC2               	goto	u9355
 11614  24C0  0820               	movf	___awdiv@divisor^(0+128),w
 11615  24C1  0222               	subwf	___awdiv@dividend^(0+128),w
 11616  24C2                     u9355:	
 11617  24C2  1C03               	skipc
 11618  24C3  2CC9               	goto	l8756
 11619  24C4  0820               	movf	___awdiv@divisor^(0+128),w
 11620  24C5  02A2               	subwf	___awdiv@dividend^(0+128),f
 11621  24C6  0821               	movf	(___awdiv@divisor+1)^(0+128),w
 11622  24C7  3BA3               	subwfb	(___awdiv@dividend+1)^(0+128),f
 11623  24C8  1427               	bsf	___awdiv@quotient^(0+128),0
 11624  24C9                     l8756:	
 11625  24C9  3001               	movlw	1
 11626  24CA                     u9365:	
 11627  24CA  36A1               	lsrf	(___awdiv@divisor+1)^(0+128),f
 11628  24CB  0CA0               	rrf	___awdiv@divisor^(0+128),f
 11629  24CC  0B89               	decfsz	9,f
 11630  24CD  2CCA               	goto	u9365
 11631  24CE  3001               	movlw	1
 11632  24CF  02A5               	subwf	___awdiv@counter^(0+128),f
 11633  24D0  1D03               	btfss	3,2
 11634  24D1  2CB7               	goto	l8750
 11635  24D2                     l8760:	
 11636  24D2  0826               	movf	___awdiv@sign^(0+128),w
 11637  24D3  1903               	btfsc	3,2
 11638  24D4  2CDA               	goto	l8764
 11639  24D5  09A7               	comf	___awdiv@quotient^(0+128),f
 11640  24D6  09A8               	comf	(___awdiv@quotient+1)^(0+128),f
 11641  24D7  0AA7               	incf	___awdiv@quotient^(0+128),f
 11642  24D8  1903               	skipnz
 11643  24D9  0AA8               	incf	(___awdiv@quotient+1)^(0+128),f
 11644  24DA                     l8764:	
 11645  24DA  0828               	movf	(___awdiv@quotient+1)^(0+128),w
 11646  24DB  00A1               	movwf	(?___awdiv+1)^(0+128)
 11647  24DC  0827               	movf	___awdiv@quotient^(0+128),w
 11648  24DD  00A0               	movwf	?___awdiv^(0+128)
 11649  24DE  0008               	return
 11650  24DF                     __end_of___awdiv:	
 11651                           
 11652                           	psect	text23
 11653  1A51                     __ptext23:	
 11654 ;; *************** function _set_subdivision *****************
 11655 ;; Defined at:
 11656 ;;		line 77 in file "user.c"
 11657 ;; Parameters:    Size  Location     Type
 11658 ;;  x               2   14[BANK2 ] int 
 11659 ;;  y               2   16[BANK2 ] int 
 11660 ;; Auto vars:     Size  Location     Type
 11661 ;;  scalar          3   18[BANK2 ] float 
 11662 ;;  tmpX            2   21[BANK2 ] int 
 11663 ;; Return value:  Size  Location     Type
 11664 ;;                  2   14[BANK2 ] int 
 11665 ;; Registers used:
 11666 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11667 ;; Tracked objects:
 11668 ;;		On entry : 0/0
 11669 ;;		On exit  : 0/0
 11670 ;;		Unchanged: 0/0
 11671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11672 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11673 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11675 ;;      Totals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11676 ;;Total ram usage:        9 bytes
 11677 ;; Hardware stack levels used:    1
 11678 ;; Hardware stack levels required when called:    5
 11679 ;; This function calls:
 11680 ;;		___awtoft
 11681 ;;		___ftmul
 11682 ;;		___fttol
 11683 ;; This function is called by:
 11684 ;;		_main
 11685 ;; This function uses a non-reentrant model
 11686 ;;
 11687                           
 11688                           
 11689                           ;psect for function _set_subdivision
 11690  1A51                     _set_subdivision:	
 11691                           
 11692                           ;user.c: 81: adjust_mod_delay = 0;
 11693                           
 11694                           ;incstack = 0
 11695                           ; Regs used in _set_subdivision: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11696  1A51  0024               	movlb	4	; select bank4
 11697  1A52  01DD               	clrf	_adjust_mod_delay^(0+512)
 11698                           
 11699                           ;user.c: 82: int tmpX = x;
 11700  1A53  0022               	movlb	2	; select bank2
 11701  1A54  082F               	movf	(set_subdivision@x+1)^(0+256),w
 11702  1A55  00B6               	movwf	(set_subdivision@tmpX+1)^(0+256)
 11703  1A56  082E               	movf	set_subdivision@x^(0+256),w
 11704  1A57  00B5               	movwf	set_subdivision@tmpX^(0+256)
 11705                           
 11706                           ;user.c: 83: float scalar = 1.0;
 11707  1A58  3000               	movlw	0
 11708  1A59  00B2               	movwf	set_subdivision@scalar^(0+256)
 11709  1A5A  3080               	movlw	128
 11710  1A5B  00B3               	movwf	(set_subdivision@scalar+1)^(0+256)
 11711  1A5C  303F               	movlw	63
 11712  1A5D  00B4               	movwf	(set_subdivision@scalar+2)^(0+256)
 11713                           
 11714                           ;user.c: 85: switch (y) {
 11715  1A5E  2A7E               	goto	l9274
 11716  1A5F                     l9260:	
 11717                           ;user.c: 86: case 1:
 11718                           
 11719                           
 11720                           ;user.c: 87: scalar = 2.0;
 11721  1A5F  3000               	movlw	0
 11722  1A60  00B2               	movwf	set_subdivision@scalar^(0+256)
 11723  1A61  3000               	movlw	0
 11724  1A62  00B3               	movwf	(set_subdivision@scalar+1)^(0+256)
 11725  1A63  3040               	movlw	64
 11726  1A64  2A7C               	goto	L13
 11727  1A65                     l9262:	
 11728                           ;user.c: 89: case 2:
 11729                           
 11730                           ;user.c: 88: break;
 11731                           
 11732                           
 11733                           ;user.c: 90: scalar = 0.6666;
 11734  1A65  30A6               	movlw	166
 11735  1A66  00B2               	movwf	set_subdivision@scalar^(0+256)
 11736  1A67  302A               	movlw	42
 11737  1A68  2A7A               	goto	L14
 11738  1A69                     l9264:	
 11739                           ;user.c: 92: case 3:
 11740                           
 11741                           ;user.c: 91: break;
 11742                           
 11743                           
 11744                           ;user.c: 93: scalar = .5;
 11745  1A69  3000               	movlw	0
 11746  1A6A  00B2               	movwf	set_subdivision@scalar^(0+256)
 11747  1A6B  3000               	movlw	0
 11748  1A6C  2A7A               	goto	L14
 11749  1A6D                     l9266:	
 11750                           ;user.c: 95: case 4:
 11751                           
 11752                           ;user.c: 94: break;
 11753                           
 11754                           
 11755                           ;user.c: 96: scalar = 0.3333;
 11756  1A6D  30A6               	movlw	166
 11757  1A6E  00B2               	movwf	set_subdivision@scalar^(0+256)
 11758  1A6F  30AA               	movlw	170
 11759  1A70  2A74               	goto	L15
 11760  1A71                     l9268:	
 11761                           ;user.c: 98: case 5:
 11762                           
 11763                           ;user.c: 97: break;
 11764                           
 11765                           
 11766                           ;user.c: 99: scalar = 0.25;
 11767  1A71  3000               	movlw	0
 11768  1A72  00B2               	movwf	set_subdivision@scalar^(0+256)
 11769  1A73  3080               	movlw	128
 11770  1A74                     L15:	
 11771  1A74  00B3               	movwf	(set_subdivision@scalar+1)^(0+256)
 11772  1A75  303E               	movlw	62
 11773  1A76  2A7C               	goto	L13
 11774  1A77                     l9270:	
 11775                           ;user.c: 101: case 6:
 11776                           
 11777                           ;user.c: 100: break;
 11778                           
 11779                           
 11780                           ;user.c: 102: scalar = 1.0;
 11781  1A77  3000               	movlw	0
 11782  1A78  00B2               	movwf	set_subdivision@scalar^(0+256)
 11783  1A79  3080               	movlw	128
 11784  1A7A                     L14:	
 11785  1A7A  00B3               	movwf	(set_subdivision@scalar+1)^(0+256)
 11786  1A7B  303F               	movlw	63
 11787  1A7C                     L13:	
 11788  1A7C  00B4               	movwf	(set_subdivision@scalar+2)^(0+256)
 11789                           
 11790                           ;user.c: 104: }
 11791                           
 11792                           ;user.c: 103: break;
 11793  1A7D  2A97               	goto	l9276
 11794  1A7E                     l9274:	
 11795                           
 11796                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11797                           ; Switch size 1, requested type "space"
 11798                           ; Number of cases is 1, Range of values is 0 to 0
 11799                           ; switch strategies available:
 11800                           ; Name         Instructions Cycles
 11801                           ; simple_byte            4     3 (average)
 11802                           ; direct_byte            8     6 (fixed)
 11803                           ; jumptable            260     6 (fixed)
 11804                           ;	Chosen strategy is simple_byte
 11805  1A7E  0831               	movf	(set_subdivision@y+1)^(0+256),w
 11806  1A7F  3A00               	xorlw	0	; case 0
 11807  1A80  1903               	skipnz
 11808  1A81  2A83               	goto	l9948
 11809  1A82  2A97               	goto	l9276
 11810  1A83                     l9948:	
 11811                           
 11812                           ; Switch size 1, requested type "space"
 11813                           ; Number of cases is 6, Range of values is 1 to 6
 11814                           ; switch strategies available:
 11815                           ; Name         Instructions Cycles
 11816                           ; simple_byte           19    10 (average)
 11817                           ; direct_byte           21     9 (fixed)
 11818                           ; jumptable            263     9 (fixed)
 11819                           ;	Chosen strategy is simple_byte
 11820  1A83  0830               	movf	set_subdivision@y^(0+256),w
 11821  1A84  3A01               	xorlw	1	; case 1
 11822  1A85  1903               	skipnz
 11823  1A86  2A5F               	goto	l9260
 11824  1A87  3A03               	xorlw	3	; case 2
 11825  1A88  1903               	skipnz
 11826  1A89  2A65               	goto	l9262
 11827  1A8A  3A01               	xorlw	1	; case 3
 11828  1A8B  1903               	skipnz
 11829  1A8C  2A69               	goto	l9264
 11830  1A8D  3A07               	xorlw	7	; case 4
 11831  1A8E  1903               	skipnz
 11832  1A8F  2A6D               	goto	l9266
 11833  1A90  3A01               	xorlw	1	; case 5
 11834  1A91  1903               	skipnz
 11835  1A92  2A71               	goto	l9268
 11836  1A93  3A03               	xorlw	3	; case 6
 11837  1A94  1903               	skipnz
 11838  1A95  2A77               	goto	l9270
 11839  1A96  2A97               	goto	l9276
 11840  1A97                     l9276:	
 11841                           
 11842                           ;user.c: 106: tmpX = (int)((float)tmpX * scalar);
 11843  1A97  0836               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11844  1A98  0021               	movlb	1	; select bank1
 11845  1A99  00A9               	movwf	(___awtoft@c+1)^(0+128)
 11846  1A9A  0022               	movlb	2	; select bank2
 11847  1A9B  0835               	movf	set_subdivision@tmpX^(0+256),w
 11848  1A9C  0021               	movlb	1	; select bank1
 11849  1A9D  00A8               	movwf	___awtoft@c^(0+128)
 11850  1A9E  31AE  2610  319A   	fcall	___awtoft
 11851  1AA1  0021               	movlb	1	; select bank1
 11852  1AA2  0828               	movf	?___awtoft^(0+128),w
 11853  1AA3  00B1               	movwf	___ftmul@f2^(0+128)
 11854  1AA4  0829               	movf	(?___awtoft+1)^(0+128),w
 11855  1AA5  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11856  1AA6  082A               	movf	(?___awtoft+2)^(0+128),w
 11857  1AA7  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11858  1AA8  0022               	movlb	2	; select bank2
 11859  1AA9  0832               	movf	set_subdivision@scalar^(0+256),w
 11860  1AAA  0021               	movlb	1	; select bank1
 11861  1AAB  00AE               	movwf	___ftmul@f1^(0+128)
 11862  1AAC  0022               	movlb	2	; select bank2
 11863  1AAD  0833               	movf	(set_subdivision@scalar+1)^(0+256),w
 11864  1AAE  0021               	movlb	1	; select bank1
 11865  1AAF  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11866  1AB0  0022               	movlb	2	; select bank2
 11867  1AB1  0834               	movf	(set_subdivision@scalar+2)^(0+256),w
 11868  1AB2  0021               	movlb	1	; select bank1
 11869  1AB3  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11870  1AB4  319C  24BA  319A   	fcall	___ftmul
 11871  1AB7  0021               	movlb	1	; select bank1
 11872  1AB8  082E               	movf	?___ftmul^(0+128),w
 11873  1AB9  0022               	movlb	2	; select bank2
 11874  1ABA  00A0               	movwf	___fttol@f1^(0+256)
 11875  1ABB  0021               	movlb	1	; select bank1
 11876  1ABC  082F               	movf	(?___ftmul+1)^(0+128),w
 11877  1ABD  0022               	movlb	2	; select bank2
 11878  1ABE  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11879  1ABF  0021               	movlb	1	; select bank1
 11880  1AC0  0830               	movf	(?___ftmul+2)^(0+128),w
 11881  1AC1  0022               	movlb	2	; select bank2
 11882  1AC2  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11883  1AC3  3199  213F  319A   	fcall	___fttol
 11884  1AC6  0022               	movlb	2	; select bank2
 11885  1AC7  0821               	movf	(?___fttol^(0+256)+1),w
 11886  1AC8  00B6               	movwf	(set_subdivision@tmpX+1)^(0+256)
 11887  1AC9  0820               	movf	?___fttol^(0+256),w
 11888  1ACA  00B5               	movwf	set_subdivision@tmpX^(0+256)
 11889                           
 11890                           ;user.c: 108: if ((int)(tmpX) != tmpX) {
 11891  1ACB  0836               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11892  1ACC  0636               	xorwf	(set_subdivision@tmpX+1)^(0+256),w
 11893  1ACD  1D03               	skipz
 11894  1ACE  2AD1               	goto	u10305
 11895  1ACF  0835               	movf	set_subdivision@tmpX^(0+256),w
 11896  1AD0  0635               	xorwf	set_subdivision@tmpX^(0+256),w
 11897  1AD1                     u10305:	
 11898  1AD1  1903               	skipnz
 11899  1AD2  2AD6               	goto	l9282
 11900                           
 11901                           ;user.c: 109: adjust_mod_delay = 1;
 11902  1AD3  0024               	movlb	4	; select bank4
 11903  1AD4  01DD               	clrf	_adjust_mod_delay^(0+512)
 11904  1AD5  0ADD               	incf	_adjust_mod_delay^(0+512),f
 11905  1AD6                     l9282:	
 11906                           
 11907                           ;user.c: 110: }
 11908                           ;user.c: 112: return tmpX;
 11909  1AD6  0022               	movlb	2	; select bank2
 11910  1AD7  0836               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11911  1AD8  00AF               	movwf	(?_set_subdivision+1)^(0+256)
 11912  1AD9  0835               	movf	set_subdivision@tmpX^(0+256),w
 11913  1ADA  00AE               	movwf	?_set_subdivision^(0+256)
 11914  1ADB  0008               	return
 11915  1ADC                     __end_of_set_subdivision:	
 11916                           
 11917                           	psect	text24
 11918  1D6E                     __ptext24:	
 11919 ;; *************** function _scaleiA10kPot *****************
 11920 ;; Defined at:
 11921 ;;		line 211 in file "user.c"
 11922 ;; Parameters:    Size  Location     Type
 11923 ;;  input           3   71[BANK2 ] int 
 11924 ;; Auto vars:     Size  Location     Type
 11925 ;;  pwm             3    0[BANK3 ] float 
 11926 ;; Return value:  Size  Location     Type
 11927 ;;                  2   71[BANK2 ] int 
 11928 ;; Registers used:
 11929 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11930 ;; Tracked objects:
 11931 ;;		On entry : 0/0
 11932 ;;		On exit  : 0/0
 11933 ;;		Unchanged: 0/0
 11934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11935 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11936 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11938 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11939 ;;Total ram usage:       12 bytes
 11940 ;; Hardware stack levels used:    1
 11941 ;; Hardware stack levels required when called:    8
 11942 ;; This function calls:
 11943 ;;		___ftadd
 11944 ;;		___ftdiv
 11945 ;;		___ftge
 11946 ;;		___ftmul
 11947 ;;		___ftneg
 11948 ;;		___fttol
 11949 ;;		_pow
 11950 ;; This function is called by:
 11951 ;;		_main
 11952 ;; This function uses a non-reentrant model
 11953 ;;
 11954                           
 11955                           
 11956                           ;psect for function _scaleiA10kPot
 11957  1D6E                     _scaleiA10kPot:	
 11958                           
 11959                           ;user.c: 214: if (input < 1.0) {return 0;}
 11960                           
 11961                           ;incstack = 0
 11962                           ; Regs used in _scaleiA10kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11963  1D6E  0022               	movlb	2	; select bank2
 11964  1D6F  0867               	movf	scaleiA10kPot@input^(0+256),w
 11965  1D70  0021               	movlb	1	; select bank1
 11966  1D71  00A0               	movwf	___ftge@ff1^(0+128)
 11967  1D72  0022               	movlb	2	; select bank2
 11968  1D73  0868               	movf	(scaleiA10kPot@input+1)^(0+256),w
 11969  1D74  0021               	movlb	1	; select bank1
 11970  1D75  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 11971  1D76  0022               	movlb	2	; select bank2
 11972  1D77  0869               	movf	(scaleiA10kPot@input+2)^(0+256),w
 11973  1D78  0021               	movlb	1	; select bank1
 11974  1D79  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 11975  1D7A  3000               	movlw	0
 11976  1D7B  00A3               	movwf	___ftge@ff2^(0+128)
 11977  1D7C  3080               	movlw	128
 11978  1D7D  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 11979  1D7E  303F               	movlw	63
 11980  1D7F  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 11981  1D80  31A0  2089  319D   	fcall	___ftge
 11982  1D83  1803               	btfsc	3,0
 11983  1D84  2D89               	goto	l9220
 11984  1D85  0022               	movlb	2	; select bank2
 11985  1D86  01E7               	clrf	?_scaleiA10kPot^(0+256)
 11986  1D87  01E8               	clrf	(?_scaleiA10kPot+1)^(0+256)
 11987  1D88  0008               	return
 11988  1D89                     l9220:	
 11989                           
 11990                           ;user.c: 216: if (input >= 1022.0) {return 255;}
 11991  1D89  0022               	movlb	2	; select bank2
 11992  1D8A  0867               	movf	scaleiA10kPot@input^(0+256),w
 11993  1D8B  0021               	movlb	1	; select bank1
 11994  1D8C  00A0               	movwf	___ftge@ff1^(0+128)
 11995  1D8D  0022               	movlb	2	; select bank2
 11996  1D8E  0868               	movf	(scaleiA10kPot@input+1)^(0+256),w
 11997  1D8F  0021               	movlb	1	; select bank1
 11998  1D90  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 11999  1D91  0022               	movlb	2	; select bank2
 12000  1D92  0869               	movf	(scaleiA10kPot@input+2)^(0+256),w
 12001  1D93  0021               	movlb	1	; select bank1
 12002  1D94  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12003  1D95  3080               	movlw	128
 12004  1D96  00A3               	movwf	___ftge@ff2^(0+128)
 12005  1D97  307F               	movlw	127
 12006  1D98  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12007  1D99  3044               	movlw	68
 12008  1D9A  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12009  1D9B  31A0  2089  319D   	fcall	___ftge
 12010  1D9E  1C03               	btfss	3,0
 12011  1D9F  2DA6               	goto	l9226
 12012  1DA0  30FF               	movlw	255
 12013  1DA1  0022               	movlb	2	; select bank2
 12014  1DA2  00E7               	movwf	?_scaleiA10kPot^(0+256)
 12015  1DA3  3000               	movlw	0
 12016  1DA4  00E8               	movwf	(?_scaleiA10kPot^(0+256)+1)
 12017  1DA5  0008               	return
 12018  1DA6                     l9226:	
 12019                           
 12020                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 12021  1DA6  3000               	movlw	0
 12022  1DA7  0021               	movlb	1	; select bank1
 12023  1DA8  00C1               	movwf	___ftadd@f1^(0+128)
 12024  1DA9  3080               	movlw	128
 12025  1DAA  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 12026  1DAB  303F               	movlw	63
 12027  1DAC  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 12028  1DAD  0022               	movlb	2	; select bank2
 12029  1DAE  0867               	movf	scaleiA10kPot@input^(0+256),w
 12030  1DAF  0021               	movlb	1	; select bank1
 12031  1DB0  00D1               	movwf	___ftdiv@f1^(0+128)
 12032  1DB1  0022               	movlb	2	; select bank2
 12033  1DB2  0868               	movf	(scaleiA10kPot@input+1)^(0+256),w
 12034  1DB3  0021               	movlb	1	; select bank1
 12035  1DB4  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 12036  1DB5  0022               	movlb	2	; select bank2
 12037  1DB6  0869               	movf	(scaleiA10kPot@input+2)^(0+256),w
 12038  1DB7  0021               	movlb	1	; select bank1
 12039  1DB8  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 12040  1DB9  30C0               	movlw	192
 12041  1DBA  00CE               	movwf	___ftdiv@f2^(0+128)
 12042  1DBB  307F               	movlw	127
 12043  1DBC  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 12044  1DBD  3044               	movlw	68
 12045  1DBE  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 12046  1DBF  319C  2411  319D   	fcall	___ftdiv
 12047  1DC2  0021               	movlb	1	; select bank1
 12048  1DC3  084E               	movf	?___ftdiv^(0+128),w
 12049  1DC4  00BE               	movwf	___ftneg@f1^(0+128)
 12050  1DC5  084F               	movf	(?___ftdiv+1)^(0+128),w
 12051  1DC6  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12052  1DC7  0850               	movf	(?___ftdiv+2)^(0+128),w
 12053  1DC8  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12054  1DC9  31AC  24B5  319D   	fcall	___ftneg
 12055  1DCC  0021               	movlb	1	; select bank1
 12056  1DCD  083E               	movf	?___ftneg^(0+128),w
 12057  1DCE  00C4               	movwf	___ftadd@f2^(0+128)
 12058  1DCF  083F               	movf	(?___ftneg+1)^(0+128),w
 12059  1DD0  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 12060  1DD1  0840               	movf	(?___ftneg+2)^(0+128),w
 12061  1DD2  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 12062  1DD3  319F  270A  319D   	fcall	___ftadd
 12063  1DD6  0021               	movlb	1	; select bank1
 12064  1DD7  0841               	movf	?___ftadd^(0+128),w
 12065  1DD8  0023               	movlb	3	; select bank3
 12066  1DD9  00EA               	movwf	_scaleiA10kPot$2872^(0+384)
 12067  1DDA  0021               	movlb	1	; select bank1
 12068  1DDB  0842               	movf	(?___ftadd+1)^(0+128),w
 12069  1DDC  0023               	movlb	3	; select bank3
 12070  1DDD  00EB               	movwf	(_scaleiA10kPot$2872+1)^(0+384)
 12071  1DDE  0021               	movlb	1	; select bank1
 12072  1DDF  0843               	movf	(?___ftadd+2)^(0+128),w
 12073  1DE0  0023               	movlb	3	; select bank3
 12074  1DE1  00EC               	movwf	(_scaleiA10kPot$2872+2)^(0+384)
 12075                           
 12076                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 12077  1DE2  306A               	movlw	106
 12078  1DE3  0022               	movlb	2	; select bank2
 12079  1DE4  00D8               	movwf	pow@y^(0+256)
 12080  1DE5  309C               	movlw	156
 12081  1DE6  00D9               	movwf	(pow@y+1)^(0+256)
 12082  1DE7  30BF               	movlw	191
 12083  1DE8  00DA               	movwf	(pow@y+2)^(0+256)
 12084  1DE9  0023               	movlb	3	; select bank3
 12085  1DEA  086A               	movf	_scaleiA10kPot$2872^(0+384),w
 12086  1DEB  0022               	movlb	2	; select bank2
 12087  1DEC  00D5               	movwf	pow@x^(0+256)
 12088  1DED  0023               	movlb	3	; select bank3
 12089  1DEE  086B               	movf	(_scaleiA10kPot$2872+1)^(0+384),w
 12090  1DEF  0022               	movlb	2	; select bank2
 12091  1DF0  00D6               	movwf	(pow@x+1)^(0+256)
 12092  1DF1  0023               	movlb	3	; select bank3
 12093  1DF2  086C               	movf	(_scaleiA10kPot$2872+2)^(0+384),w
 12094  1DF3  0022               	movlb	2	; select bank2
 12095  1DF4  00D7               	movwf	(pow@x+2)^(0+256)
 12096  1DF5  3190  20B3  319D   	fcall	_pow
 12097  1DF8  0022               	movlb	2	; select bank2
 12098  1DF9  0855               	movf	?_pow^(0+256),w
 12099  1DFA  0023               	movlb	3	; select bank3
 12100  1DFB  00ED               	movwf	_scaleiA10kPot$2873^(0+384)
 12101  1DFC  0022               	movlb	2	; select bank2
 12102  1DFD  0856               	movf	(?_pow+1)^(0+256),w
 12103  1DFE  0023               	movlb	3	; select bank3
 12104  1DFF  00EE               	movwf	(_scaleiA10kPot$2873+1)^(0+384)
 12105  1E00  0022               	movlb	2	; select bank2
 12106  1E01  0857               	movf	(?_pow+2)^(0+256),w
 12107  1E02  0023               	movlb	3	; select bank3
 12108  1E03  00EF               	movwf	(_scaleiA10kPot$2873+2)^(0+384)
 12109                           
 12110                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 12111  1E04  30E3               	movlw	227
 12112  1E05  0021               	movlb	1	; select bank1
 12113  1E06  00AE               	movwf	___ftmul@f1^(0+128)
 12114  1E07  300B               	movlw	11
 12115  1E08  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12116  1E09  3041               	movlw	65
 12117  1E0A  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12118  1E0B  0023               	movlb	3	; select bank3
 12119  1E0C  086D               	movf	_scaleiA10kPot$2873^(0+384),w
 12120  1E0D  0021               	movlb	1	; select bank1
 12121  1E0E  00B1               	movwf	___ftmul@f2^(0+128)
 12122  1E0F  0023               	movlb	3	; select bank3
 12123  1E10  086E               	movf	(_scaleiA10kPot$2873+1)^(0+384),w
 12124  1E11  0021               	movlb	1	; select bank1
 12125  1E12  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12126  1E13  0023               	movlb	3	; select bank3
 12127  1E14  086F               	movf	(_scaleiA10kPot$2873+2)^(0+384),w
 12128  1E15  0021               	movlb	1	; select bank1
 12129  1E16  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12130  1E17  319C  24BA  319D   	fcall	___ftmul
 12131  1E1A  0021               	movlb	1	; select bank1
 12132  1E1B  082E               	movf	?___ftmul^(0+128),w
 12133  1E1C  0023               	movlb	3	; select bank3
 12134  1E1D  00E7               	movwf	scaleiA10kPot@pwm^(0+384)
 12135  1E1E  0021               	movlb	1	; select bank1
 12136  1E1F  082F               	movf	(?___ftmul+1)^(0+128),w
 12137  1E20  0023               	movlb	3	; select bank3
 12138  1E21  00E8               	movwf	(scaleiA10kPot@pwm+1)^(0+384)
 12139  1E22  0021               	movlb	1	; select bank1
 12140  1E23  0830               	movf	(?___ftmul+2)^(0+128),w
 12141  1E24  0023               	movlb	3	; select bank3
 12142  1E25  00E9               	movwf	(scaleiA10kPot@pwm+2)^(0+384)
 12143                           
 12144                           ;user.c: 219: return (int)(pwm);
 12145  1E26  0867               	movf	scaleiA10kPot@pwm^(0+384),w
 12146  1E27  0022               	movlb	2	; select bank2
 12147  1E28  00A0               	movwf	___fttol@f1^(0+256)
 12148  1E29  0023               	movlb	3	; select bank3
 12149  1E2A  0868               	movf	(scaleiA10kPot@pwm+1)^(0+384),w
 12150  1E2B  0022               	movlb	2	; select bank2
 12151  1E2C  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12152  1E2D  0023               	movlb	3	; select bank3
 12153  1E2E  0869               	movf	(scaleiA10kPot@pwm+2)^(0+384),w
 12154  1E2F  0022               	movlb	2	; select bank2
 12155  1E30  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12156  1E31  3199  213F         	fcall	___fttol
 12157  1E33  0022               	movlb	2	; select bank2
 12158  1E34  0821               	movf	(?___fttol^(0+256)+1),w
 12159  1E35  00E8               	movwf	(?_scaleiA10kPot+1)^(0+256)
 12160  1E36  0820               	movf	?___fttol^(0+256),w
 12161  1E37  00E7               	movwf	?_scaleiA10kPot^(0+256)
 12162  1E38  0008               	return
 12163  1E39                     __end_of_scaleiA10kPot:	
 12164                           
 12165                           	psect	text25
 12166  1B73                     __ptext25:	
 12167 ;; *************** function _scaleA10kPot *****************
 12168 ;; Defined at:
 12169 ;;		line 202 in file "user.c"
 12170 ;; Parameters:    Size  Location     Type
 12171 ;;  input           3   71[BANK2 ] int 
 12172 ;; Auto vars:     Size  Location     Type
 12173 ;;  pwm             3    0[BANK3 ] float 
 12174 ;; Return value:  Size  Location     Type
 12175 ;;                  2   71[BANK2 ] int 
 12176 ;; Registers used:
 12177 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12178 ;; Tracked objects:
 12179 ;;		On entry : 0/0
 12180 ;;		On exit  : 0/0
 12181 ;;		Unchanged: 0/0
 12182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12183 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12184 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12185 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12186 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12187 ;;Total ram usage:       12 bytes
 12188 ;; Hardware stack levels used:    1
 12189 ;; Hardware stack levels required when called:    8
 12190 ;; This function calls:
 12191 ;;		___ftdiv
 12192 ;;		___ftge
 12193 ;;		___ftmul
 12194 ;;		___fttol
 12195 ;;		_pow
 12196 ;; This function is called by:
 12197 ;;		_main
 12198 ;; This function uses a non-reentrant model
 12199 ;;
 12200                           
 12201                           
 12202                           ;psect for function _scaleA10kPot
 12203  1B73                     _scaleA10kPot:	
 12204                           
 12205                           ;user.c: 204: if (input == 0.0) {return 255;}
 12206                           
 12207                           ;incstack = 0
 12208                           ; Regs used in _scaleA10kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12209  1B73  0022               	movlb	2	; select bank2
 12210  1B74  0869               	movf	(scaleA10kPot@input+2)^(0+256),w
 12211  1B75  0468               	iorwf	(scaleA10kPot@input+1)^(0+256),w
 12212  1B76  0467               	iorwf	scaleA10kPot@input^(0+256),w
 12213  1B77  1D03               	skipz
 12214  1B78  2B7E               	goto	l9198
 12215  1B79  30FF               	movlw	255
 12216  1B7A  00E7               	movwf	?_scaleA10kPot^(0+256)
 12217  1B7B  3000               	movlw	0
 12218  1B7C  00E8               	movwf	(?_scaleA10kPot^(0+256)+1)
 12219  1B7D  0008               	return
 12220  1B7E                     l9198:	
 12221                           
 12222                           ;user.c: 205: if (input >= 1022.0) {return 0;}
 12223  1B7E  0867               	movf	scaleA10kPot@input^(0+256),w
 12224  1B7F  0021               	movlb	1	; select bank1
 12225  1B80  00A0               	movwf	___ftge@ff1^(0+128)
 12226  1B81  0022               	movlb	2	; select bank2
 12227  1B82  0868               	movf	(scaleA10kPot@input+1)^(0+256),w
 12228  1B83  0021               	movlb	1	; select bank1
 12229  1B84  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12230  1B85  0022               	movlb	2	; select bank2
 12231  1B86  0869               	movf	(scaleA10kPot@input+2)^(0+256),w
 12232  1B87  0021               	movlb	1	; select bank1
 12233  1B88  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12234  1B89  3080               	movlw	128
 12235  1B8A  00A3               	movwf	___ftge@ff2^(0+128)
 12236  1B8B  307F               	movlw	127
 12237  1B8C  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12238  1B8D  3044               	movlw	68
 12239  1B8E  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12240  1B8F  31A0  2089  319B   	fcall	___ftge
 12241  1B92  1C03               	btfss	3,0
 12242  1B93  2B98               	goto	l9204
 12243  1B94  0022               	movlb	2	; select bank2
 12244  1B95  01E7               	clrf	?_scaleA10kPot^(0+256)
 12245  1B96  01E8               	clrf	(?_scaleA10kPot+1)^(0+256)
 12246  1B97  0008               	return
 12247  1B98                     l9204:	
 12248                           
 12249                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 12250  1B98  30C0               	movlw	192
 12251  1B99  0021               	movlb	1	; select bank1
 12252  1B9A  00CE               	movwf	___ftdiv@f2^(0+128)
 12253  1B9B  307F               	movlw	127
 12254  1B9C  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 12255  1B9D  3044               	movlw	68
 12256  1B9E  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 12257  1B9F  0022               	movlb	2	; select bank2
 12258  1BA0  0867               	movf	scaleA10kPot@input^(0+256),w
 12259  1BA1  0021               	movlb	1	; select bank1
 12260  1BA2  00D1               	movwf	___ftdiv@f1^(0+128)
 12261  1BA3  0022               	movlb	2	; select bank2
 12262  1BA4  0868               	movf	(scaleA10kPot@input+1)^(0+256),w
 12263  1BA5  0021               	movlb	1	; select bank1
 12264  1BA6  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 12265  1BA7  0022               	movlb	2	; select bank2
 12266  1BA8  0869               	movf	(scaleA10kPot@input+2)^(0+256),w
 12267  1BA9  0021               	movlb	1	; select bank1
 12268  1BAA  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 12269  1BAB  319C  2411  319B   	fcall	___ftdiv
 12270  1BAE  0021               	movlb	1	; select bank1
 12271  1BAF  084E               	movf	?___ftdiv^(0+128),w
 12272  1BB0  0023               	movlb	3	; select bank3
 12273  1BB1  00EA               	movwf	_scaleA10kPot$2870^(0+384)
 12274  1BB2  0021               	movlb	1	; select bank1
 12275  1BB3  084F               	movf	(?___ftdiv+1)^(0+128),w
 12276  1BB4  0023               	movlb	3	; select bank3
 12277  1BB5  00EB               	movwf	(_scaleA10kPot$2870+1)^(0+384)
 12278  1BB6  0021               	movlb	1	; select bank1
 12279  1BB7  0850               	movf	(?___ftdiv+2)^(0+128),w
 12280  1BB8  0023               	movlb	3	; select bank3
 12281  1BB9  00EC               	movwf	(_scaleA10kPot$2870+2)^(0+384)
 12282                           
 12283                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 12284  1BBA  306A               	movlw	106
 12285  1BBB  0022               	movlb	2	; select bank2
 12286  1BBC  00D8               	movwf	pow@y^(0+256)
 12287  1BBD  309C               	movlw	156
 12288  1BBE  00D9               	movwf	(pow@y+1)^(0+256)
 12289  1BBF  30BF               	movlw	191
 12290  1BC0  00DA               	movwf	(pow@y+2)^(0+256)
 12291  1BC1  0023               	movlb	3	; select bank3
 12292  1BC2  086A               	movf	_scaleA10kPot$2870^(0+384),w
 12293  1BC3  0022               	movlb	2	; select bank2
 12294  1BC4  00D5               	movwf	pow@x^(0+256)
 12295  1BC5  0023               	movlb	3	; select bank3
 12296  1BC6  086B               	movf	(_scaleA10kPot$2870+1)^(0+384),w
 12297  1BC7  0022               	movlb	2	; select bank2
 12298  1BC8  00D6               	movwf	(pow@x+1)^(0+256)
 12299  1BC9  0023               	movlb	3	; select bank3
 12300  1BCA  086C               	movf	(_scaleA10kPot$2870+2)^(0+384),w
 12301  1BCB  0022               	movlb	2	; select bank2
 12302  1BCC  00D7               	movwf	(pow@x+2)^(0+256)
 12303  1BCD  3190  20B3  319B   	fcall	_pow
 12304  1BD0  0022               	movlb	2	; select bank2
 12305  1BD1  0855               	movf	?_pow^(0+256),w
 12306  1BD2  0023               	movlb	3	; select bank3
 12307  1BD3  00ED               	movwf	_scaleA10kPot$2871^(0+384)
 12308  1BD4  0022               	movlb	2	; select bank2
 12309  1BD5  0856               	movf	(?_pow+1)^(0+256),w
 12310  1BD6  0023               	movlb	3	; select bank3
 12311  1BD7  00EE               	movwf	(_scaleA10kPot$2871+1)^(0+384)
 12312  1BD8  0022               	movlb	2	; select bank2
 12313  1BD9  0857               	movf	(?_pow+2)^(0+256),w
 12314  1BDA  0023               	movlb	3	; select bank3
 12315  1BDB  00EF               	movwf	(_scaleA10kPot$2871+2)^(0+384)
 12316                           
 12317                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 12318  1BDC  30E3               	movlw	227
 12319  1BDD  0021               	movlb	1	; select bank1
 12320  1BDE  00AE               	movwf	___ftmul@f1^(0+128)
 12321  1BDF  300B               	movlw	11
 12322  1BE0  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12323  1BE1  3041               	movlw	65
 12324  1BE2  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12325  1BE3  0023               	movlb	3	; select bank3
 12326  1BE4  086D               	movf	_scaleA10kPot$2871^(0+384),w
 12327  1BE5  0021               	movlb	1	; select bank1
 12328  1BE6  00B1               	movwf	___ftmul@f2^(0+128)
 12329  1BE7  0023               	movlb	3	; select bank3
 12330  1BE8  086E               	movf	(_scaleA10kPot$2871+1)^(0+384),w
 12331  1BE9  0021               	movlb	1	; select bank1
 12332  1BEA  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12333  1BEB  0023               	movlb	3	; select bank3
 12334  1BEC  086F               	movf	(_scaleA10kPot$2871+2)^(0+384),w
 12335  1BED  0021               	movlb	1	; select bank1
 12336  1BEE  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12337  1BEF  319C  24BA  319B   	fcall	___ftmul
 12338  1BF2  0021               	movlb	1	; select bank1
 12339  1BF3  082E               	movf	?___ftmul^(0+128),w
 12340  1BF4  0023               	movlb	3	; select bank3
 12341  1BF5  00E7               	movwf	scaleA10kPot@pwm^(0+384)
 12342  1BF6  0021               	movlb	1	; select bank1
 12343  1BF7  082F               	movf	(?___ftmul+1)^(0+128),w
 12344  1BF8  0023               	movlb	3	; select bank3
 12345  1BF9  00E8               	movwf	(scaleA10kPot@pwm+1)^(0+384)
 12346  1BFA  0021               	movlb	1	; select bank1
 12347  1BFB  0830               	movf	(?___ftmul+2)^(0+128),w
 12348  1BFC  0023               	movlb	3	; select bank3
 12349  1BFD  00E9               	movwf	(scaleA10kPot@pwm+2)^(0+384)
 12350                           
 12351                           ;user.c: 207: return (int)(pwm);
 12352  1BFE  0867               	movf	scaleA10kPot@pwm^(0+384),w
 12353  1BFF  0022               	movlb	2	; select bank2
 12354  1C00  00A0               	movwf	___fttol@f1^(0+256)
 12355  1C01  0023               	movlb	3	; select bank3
 12356  1C02  0868               	movf	(scaleA10kPot@pwm+1)^(0+384),w
 12357  1C03  0022               	movlb	2	; select bank2
 12358  1C04  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12359  1C05  0023               	movlb	3	; select bank3
 12360  1C06  0869               	movf	(scaleA10kPot@pwm+2)^(0+384),w
 12361  1C07  0022               	movlb	2	; select bank2
 12362  1C08  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12363  1C09  3199  213F         	fcall	___fttol
 12364  1C0B  0022               	movlb	2	; select bank2
 12365  1C0C  0821               	movf	(?___fttol^(0+256)+1),w
 12366  1C0D  00E8               	movwf	(?_scaleA10kPot+1)^(0+256)
 12367  1C0E  0820               	movf	?___fttol^(0+256),w
 12368  1C0F  00E7               	movwf	?_scaleA10kPot^(0+256)
 12369  1C10  0008               	return
 12370  1C11                     __end_of_scaleA10kPot:	
 12371                           
 12372                           	psect	text26
 12373  18BA                     __ptext26:	
 12374 ;; *************** function _scaleA100kPot *****************
 12375 ;; Defined at:
 12376 ;;		line 188 in file "user.c"
 12377 ;; Parameters:    Size  Location     Type
 12378 ;;  input           3   71[BANK2 ] int 
 12379 ;; Auto vars:     Size  Location     Type
 12380 ;;  pwm             3    0[BANK3 ] float 
 12381 ;; Return value:  Size  Location     Type
 12382 ;;                  2   71[BANK2 ] int 
 12383 ;; Registers used:
 12384 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12385 ;; Tracked objects:
 12386 ;;		On entry : 0/0
 12387 ;;		On exit  : 0/0
 12388 ;;		Unchanged: 0/0
 12389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12390 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12391 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12393 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12394 ;;Total ram usage:       12 bytes
 12395 ;; Hardware stack levels used:    1
 12396 ;; Hardware stack levels required when called:    8
 12397 ;; This function calls:
 12398 ;;		___ftdiv
 12399 ;;		___ftmul
 12400 ;;		___fttol
 12401 ;;		_pow
 12402 ;; This function is called by:
 12403 ;;		_main
 12404 ;; This function uses a non-reentrant model
 12405 ;;
 12406                           
 12407                           
 12408                           ;psect for function _scaleA100kPot
 12409  18BA                     _scaleA100kPot:	
 12410                           
 12411                           ;user.c: 190: if (input == 0.0) {input = 1.0;}
 12412                           
 12413                           ;incstack = 0
 12414                           ; Regs used in _scaleA100kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12415  18BA  0022               	movlb	2	; select bank2
 12416  18BB  0869               	movf	(scaleA100kPot@input+2)^(0+256),w
 12417  18BC  0468               	iorwf	(scaleA100kPot@input+1)^(0+256),w
 12418  18BD  0467               	iorwf	scaleA100kPot@input^(0+256),w
 12419  18BE  1D03               	skipz
 12420  18BF  28C6               	goto	l9240
 12421  18C0  3000               	movlw	0
 12422  18C1  00E7               	movwf	scaleA100kPot@input^(0+256)
 12423  18C2  3080               	movlw	128
 12424  18C3  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
 12425  18C4  303F               	movlw	63
 12426  18C5  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
 12427  18C6                     l9240:	
 12428                           
 12429                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 12430  18C6  30C0               	movlw	192
 12431  18C7  0021               	movlb	1	; select bank1
 12432  18C8  00CE               	movwf	___ftdiv@f2^(0+128)
 12433  18C9  307F               	movlw	127
 12434  18CA  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 12435  18CB  3044               	movlw	68
 12436  18CC  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 12437  18CD  0022               	movlb	2	; select bank2
 12438  18CE  0867               	movf	scaleA100kPot@input^(0+256),w
 12439  18CF  0021               	movlb	1	; select bank1
 12440  18D0  00D1               	movwf	___ftdiv@f1^(0+128)
 12441  18D1  0022               	movlb	2	; select bank2
 12442  18D2  0868               	movf	(scaleA100kPot@input+1)^(0+256),w
 12443  18D3  0021               	movlb	1	; select bank1
 12444  18D4  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 12445  18D5  0022               	movlb	2	; select bank2
 12446  18D6  0869               	movf	(scaleA100kPot@input+2)^(0+256),w
 12447  18D7  0021               	movlb	1	; select bank1
 12448  18D8  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 12449  18D9  319C  2411  3198   	fcall	___ftdiv
 12450  18DC  0021               	movlb	1	; select bank1
 12451  18DD  084E               	movf	?___ftdiv^(0+128),w
 12452  18DE  0023               	movlb	3	; select bank3
 12453  18DF  00EA               	movwf	_scaleA100kPot$2866^(0+384)
 12454  18E0  0021               	movlb	1	; select bank1
 12455  18E1  084F               	movf	(?___ftdiv+1)^(0+128),w
 12456  18E2  0023               	movlb	3	; select bank3
 12457  18E3  00EB               	movwf	(_scaleA100kPot$2866+1)^(0+384)
 12458  18E4  0021               	movlb	1	; select bank1
 12459  18E5  0850               	movf	(?___ftdiv+2)^(0+128),w
 12460  18E6  0023               	movlb	3	; select bank3
 12461  18E7  00EC               	movwf	(_scaleA100kPot$2866+2)^(0+384)
 12462                           
 12463                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 12464  18E8  3056               	movlw	86
 12465  18E9  0022               	movlb	2	; select bank2
 12466  18EA  00D8               	movwf	pow@y^(0+256)
 12467  18EB  308E               	movlw	142
 12468  18EC  00D9               	movwf	(pow@y+1)^(0+256)
 12469  18ED  30BF               	movlw	191
 12470  18EE  00DA               	movwf	(pow@y+2)^(0+256)
 12471  18EF  0023               	movlb	3	; select bank3
 12472  18F0  086A               	movf	_scaleA100kPot$2866^(0+384),w
 12473  18F1  0022               	movlb	2	; select bank2
 12474  18F2  00D5               	movwf	pow@x^(0+256)
 12475  18F3  0023               	movlb	3	; select bank3
 12476  18F4  086B               	movf	(_scaleA100kPot$2866+1)^(0+384),w
 12477  18F5  0022               	movlb	2	; select bank2
 12478  18F6  00D6               	movwf	(pow@x+1)^(0+256)
 12479  18F7  0023               	movlb	3	; select bank3
 12480  18F8  086C               	movf	(_scaleA100kPot$2866+2)^(0+384),w
 12481  18F9  0022               	movlb	2	; select bank2
 12482  18FA  00D7               	movwf	(pow@x+2)^(0+256)
 12483  18FB  3190  20B3  3198   	fcall	_pow
 12484  18FE  0022               	movlb	2	; select bank2
 12485  18FF  0855               	movf	?_pow^(0+256),w
 12486  1900  0023               	movlb	3	; select bank3
 12487  1901  00ED               	movwf	_scaleA100kPot$2867^(0+384)
 12488  1902  0022               	movlb	2	; select bank2
 12489  1903  0856               	movf	(?_pow+1)^(0+256),w
 12490  1904  0023               	movlb	3	; select bank3
 12491  1905  00EE               	movwf	(_scaleA100kPot$2867+1)^(0+384)
 12492  1906  0022               	movlb	2	; select bank2
 12493  1907  0857               	movf	(?_pow+2)^(0+256),w
 12494  1908  0023               	movlb	3	; select bank3
 12495  1909  00EF               	movwf	(_scaleA100kPot$2867+2)^(0+384)
 12496                           
 12497                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 12498  190A  309F               	movlw	159
 12499  190B  0021               	movlb	1	; select bank1
 12500  190C  00AE               	movwf	___ftmul@f1^(0+128)
 12501  190D  3068               	movlw	104
 12502  190E  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12503  190F  3040               	movlw	64
 12504  1910  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12505  1911  0023               	movlb	3	; select bank3
 12506  1912  086D               	movf	_scaleA100kPot$2867^(0+384),w
 12507  1913  0021               	movlb	1	; select bank1
 12508  1914  00B1               	movwf	___ftmul@f2^(0+128)
 12509  1915  0023               	movlb	3	; select bank3
 12510  1916  086E               	movf	(_scaleA100kPot$2867+1)^(0+384),w
 12511  1917  0021               	movlb	1	; select bank1
 12512  1918  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12513  1919  0023               	movlb	3	; select bank3
 12514  191A  086F               	movf	(_scaleA100kPot$2867+2)^(0+384),w
 12515  191B  0021               	movlb	1	; select bank1
 12516  191C  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12517  191D  319C  24BA  3198   	fcall	___ftmul
 12518  1920  0021               	movlb	1	; select bank1
 12519  1921  082E               	movf	?___ftmul^(0+128),w
 12520  1922  0023               	movlb	3	; select bank3
 12521  1923  00E7               	movwf	scaleA100kPot@pwm^(0+384)
 12522  1924  0021               	movlb	1	; select bank1
 12523  1925  082F               	movf	(?___ftmul+1)^(0+128),w
 12524  1926  0023               	movlb	3	; select bank3
 12525  1927  00E8               	movwf	(scaleA100kPot@pwm+1)^(0+384)
 12526  1928  0021               	movlb	1	; select bank1
 12527  1929  0830               	movf	(?___ftmul+2)^(0+128),w
 12528  192A  0023               	movlb	3	; select bank3
 12529  192B  00E9               	movwf	(scaleA100kPot@pwm+2)^(0+384)
 12530                           
 12531                           ;user.c: 192: return (int)(pwm);
 12532  192C  0867               	movf	scaleA100kPot@pwm^(0+384),w
 12533  192D  0022               	movlb	2	; select bank2
 12534  192E  00A0               	movwf	___fttol@f1^(0+256)
 12535  192F  0023               	movlb	3	; select bank3
 12536  1930  0868               	movf	(scaleA100kPot@pwm+1)^(0+384),w
 12537  1931  0022               	movlb	2	; select bank2
 12538  1932  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12539  1933  0023               	movlb	3	; select bank3
 12540  1934  0869               	movf	(scaleA100kPot@pwm+2)^(0+384),w
 12541  1935  0022               	movlb	2	; select bank2
 12542  1936  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12543  1937  3199  213F         	fcall	___fttol
 12544  1939  0022               	movlb	2	; select bank2
 12545  193A  0821               	movf	(?___fttol^(0+256)+1),w
 12546  193B  00E8               	movwf	(?_scaleA100kPot+1)^(0+256)
 12547  193C  0820               	movf	?___fttol^(0+256),w
 12548  193D  00E7               	movwf	?_scaleA100kPot^(0+256)
 12549  193E  0008               	return
 12550  193F                     __end_of_scaleA100kPot:	
 12551                           
 12552                           	psect	text27
 12553  10B3                     __ptext27:	
 12554 ;; *************** function _pow *****************
 12555 ;; Defined at:
 12556 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\pow.c"
 12557 ;; Parameters:    Size  Location     Type
 12558 ;;  x               3   53[BANK2 ] int 
 12559 ;;  y               3   56[BANK2 ] int 
 12560 ;; Auto vars:     Size  Location     Type
 12561 ;;  yi              4   67[BANK2 ] unsigned long 
 12562 ;;  sign            1   66[BANK2 ] unsigned char 
 12563 ;; Return value:  Size  Location     Type
 12564 ;;                  3   53[BANK2 ] unsigned char 
 12565 ;; Registers used:
 12566 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12567 ;; Tracked objects:
 12568 ;;		On entry : 0/0
 12569 ;;		On exit  : 0/0
 12570 ;;		Unchanged: 0/0
 12571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12572 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12573 ;;      Locals:         0       0       0      11       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12574 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12575 ;;      Totals:         0       0       0      18       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12576 ;;Total ram usage:       18 bytes
 12577 ;; Hardware stack levels used:    1
 12578 ;; Hardware stack levels required when called:    7
 12579 ;; This function calls:
 12580 ;;		___ftge
 12581 ;;		___ftmul
 12582 ;;		___ftneg
 12583 ;;		___fttol
 12584 ;;		___lltoft
 12585 ;;		_exp
 12586 ;;		_log
 12587 ;; This function is called by:
 12588 ;;		_scaleA100kPot
 12589 ;;		_scaleA10kPot
 12590 ;;		_scaleiA10kPot
 12591 ;;		_scaleiA100kPot
 12592 ;;		_scaleA25kPot
 12593 ;;		_scaleiA25kPot
 12594 ;; This function uses a non-reentrant model
 12595 ;;
 12596                           
 12597                           
 12598                           ;psect for function _pow
 12599  10B3                     _pow:	
 12600                           
 12601                           ;incstack = 0
 12602                           ; Regs used in _pow: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12603  10B3  0022               	movlb	2	; select bank2
 12604  10B4  01E2               	clrf	pow@sign^(0+256)
 12605  10B5  0857               	movf	(pow@x+2)^(0+256),w
 12606  10B6  0456               	iorwf	(pow@x+1)^(0+256),w
 12607  10B7  0455               	iorwf	pow@x^(0+256),w
 12608  10B8  1D03               	skipz
 12609  10B9  28DF               	goto	l8530
 12610  10BA  3000               	movlw	0
 12611  10BB  0021               	movlb	1	; select bank1
 12612  10BC  00A0               	movwf	___ftge@ff1^(0+128)
 12613  10BD  3000               	movlw	0
 12614  10BE  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12615  10BF  3000               	movlw	0
 12616  10C0  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12617  10C1  0022               	movlb	2	; select bank2
 12618  10C2  0858               	movf	pow@y^(0+256),w
 12619  10C3  0021               	movlb	1	; select bank1
 12620  10C4  00A3               	movwf	___ftge@ff2^(0+128)
 12621  10C5  0022               	movlb	2	; select bank2
 12622  10C6  0859               	movf	(pow@y+1)^(0+256),w
 12623  10C7  0021               	movlb	1	; select bank1
 12624  10C8  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12625  10C9  0022               	movlb	2	; select bank2
 12626  10CA  085A               	movf	(pow@y+2)^(0+256),w
 12627  10CB  0021               	movlb	1	; select bank1
 12628  10CC  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12629  10CD  31A0  2089  3190   	fcall	___ftge
 12630  10D0  1C03               	btfss	3,0
 12631  10D1  28D7               	goto	l2392
 12632  10D2  3021               	movlw	33
 12633  10D3  0024               	movlb	4	; select bank4
 12634  10D4  00D1               	movwf	_errno^(0+512)
 12635  10D5  3000               	movlw	0
 12636  10D6  00D2               	movwf	(_errno^(0+512)+1)
 12637  10D7                     l2392:	
 12638  10D7  3000               	movlw	0
 12639  10D8  0022               	movlb	2	; select bank2
 12640  10D9  00D5               	movwf	?_pow^(0+256)
 12641  10DA  3000               	movlw	0
 12642  10DB  00D6               	movwf	(?_pow+1)^(0+256)
 12643  10DC  3000               	movlw	0
 12644  10DD  00D7               	movwf	(?_pow+2)^(0+256)
 12645  10DE  0008               	return
 12646  10DF                     l8530:	
 12647  10DF  085A               	movf	(pow@y+2)^(0+256),w
 12648  10E0  0459               	iorwf	(pow@y+1)^(0+256),w
 12649  10E1  0458               	iorwf	pow@y^(0+256),w
 12650  10E2  1D03               	skipz
 12651  10E3  28EB               	goto	l8536
 12652  10E4  3000               	movlw	0
 12653  10E5  00D5               	movwf	?_pow^(0+256)
 12654  10E6  3080               	movlw	128
 12655  10E7  00D6               	movwf	(?_pow+1)^(0+256)
 12656  10E8  303F               	movlw	63
 12657  10E9  00D7               	movwf	(?_pow+2)^(0+256)
 12658  10EA  0008               	return
 12659  10EB                     l8536:	
 12660  10EB  0855               	movf	pow@x^(0+256),w
 12661  10EC  0021               	movlb	1	; select bank1
 12662  10ED  00A0               	movwf	___ftge@ff1^(0+128)
 12663  10EE  0022               	movlb	2	; select bank2
 12664  10EF  0856               	movf	(pow@x+1)^(0+256),w
 12665  10F0  0021               	movlb	1	; select bank1
 12666  10F1  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12667  10F2  0022               	movlb	2	; select bank2
 12668  10F3  0857               	movf	(pow@x+2)^(0+256),w
 12669  10F4  0021               	movlb	1	; select bank1
 12670  10F5  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12671  10F6  3000               	movlw	0
 12672  10F7  00A3               	movwf	___ftge@ff2^(0+128)
 12673  10F8  3000               	movlw	0
 12674  10F9  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12675  10FA  3000               	movlw	0
 12676  10FB  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12677  10FC  31A0  2089  3190   	fcall	___ftge
 12678  10FF  1803               	btfsc	3,0
 12679  1100  2965               	goto	l8548
 12680  1101  0022               	movlb	2	; select bank2
 12681  1102  0858               	movf	pow@y^(0+256),w
 12682  1103  00A0               	movwf	___fttol@f1^(0+256)
 12683  1104  0859               	movf	(pow@y+1)^(0+256),w
 12684  1105  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12685  1106  085A               	movf	(pow@y+2)^(0+256),w
 12686  1107  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12687  1108  3199  213F  3190   	fcall	___fttol
 12688  110B  0022               	movlb	2	; select bank2
 12689  110C  0823               	movf	(?___fttol+3)^(0+256),w
 12690  110D  00E6               	movwf	(pow@yi+3)^(0+256)
 12691  110E  0822               	movf	(?___fttol+2)^(0+256),w
 12692  110F  00E5               	movwf	(pow@yi+2)^(0+256)
 12693  1110  0821               	movf	(?___fttol+1)^(0+256),w
 12694  1111  00E4               	movwf	(pow@yi+1)^(0+256)
 12695  1112  0820               	movf	?___fttol^(0+256),w
 12696  1113  00E3               	movwf	pow@yi^(0+256)
 12697  1114  0866               	movf	(pow@yi+3)^(0+256),w
 12698  1115  0021               	movlb	1	; select bank1
 12699  1116  00AB               	movwf	(___lltoft@c+3)^(0+128)
 12700  1117  0022               	movlb	2	; select bank2
 12701  1118  0865               	movf	(pow@yi+2)^(0+256),w
 12702  1119  0021               	movlb	1	; select bank1
 12703  111A  00AA               	movwf	(___lltoft@c+2)^(0+128)
 12704  111B  0022               	movlb	2	; select bank2
 12705  111C  0864               	movf	(pow@yi+1)^(0+256),w
 12706  111D  0021               	movlb	1	; select bank1
 12707  111E  00A9               	movwf	(___lltoft@c+1)^(0+128)
 12708  111F  0022               	movlb	2	; select bank2
 12709  1120  0863               	movf	pow@yi^(0+256),w
 12710  1121  0021               	movlb	1	; select bank1
 12711  1122  00A8               	movwf	___lltoft@c^(0+128)
 12712  1123  31AE  2656  3190   	fcall	___lltoft
 12713  1126  0022               	movlb	2	; select bank2
 12714  1127  085A               	movf	(pow@y+2)^(0+256),w
 12715  1128  0021               	movlb	1	; select bank1
 12716  1129  062A               	xorwf	(?___lltoft+2)^(0+128),w
 12717  112A  1D03               	skipz
 12718  112B  2936               	goto	u9065
 12719  112C  0022               	movlb	2	; select bank2
 12720  112D  0859               	movf	(pow@y+1)^(0+256),w
 12721  112E  0021               	movlb	1	; select bank1
 12722  112F  0629               	xorwf	(?___lltoft+1)^(0+128),w
 12723  1130  1D03               	skipz
 12724  1131  2936               	goto	u9065
 12725  1132  0022               	movlb	2	; select bank2
 12726  1133  0858               	movf	pow@y^(0+256),w
 12727  1134  0021               	movlb	1	; select bank1
 12728  1135  0628               	xorwf	?___lltoft^(0+128),w
 12729  1136                     u9065:	
 12730  1136  1903               	skipnz
 12731  1137  2945               	goto	l8544
 12732  1138  3021               	movlw	33
 12733  1139  0024               	movlb	4	; select bank4
 12734  113A  00D1               	movwf	_errno^(0+512)
 12735  113B  3000               	movlw	0
 12736  113C  00D2               	movwf	(_errno^(0+512)+1)
 12737  113D  3000               	movlw	0
 12738  113E  0022               	movlb	2	; select bank2
 12739  113F  00D5               	movwf	?_pow^(0+256)
 12740  1140  3000               	movlw	0
 12741  1141  00D6               	movwf	(?_pow+1)^(0+256)
 12742  1142  3000               	movlw	0
 12743  1143  00D7               	movwf	(?_pow+2)^(0+256)
 12744  1144  0008               	return
 12745  1145                     l8544:	
 12746  1145  0022               	movlb	2	; select bank2
 12747  1146  0863               	movf	pow@yi^(0+256),w
 12748  1147  3901               	andlw	1
 12749  1148  00DB               	movwf	??_pow^(0+256)
 12750  1149  085B               	movf	??_pow^(0+256),w
 12751  114A  00E2               	movwf	pow@sign^(0+256)
 12752  114B  0855               	movf	pow@x^(0+256),w
 12753  114C  0021               	movlb	1	; select bank1
 12754  114D  00BE               	movwf	___ftneg@f1^(0+128)
 12755  114E  0022               	movlb	2	; select bank2
 12756  114F  0856               	movf	(pow@x+1)^(0+256),w
 12757  1150  0021               	movlb	1	; select bank1
 12758  1151  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12759  1152  0022               	movlb	2	; select bank2
 12760  1153  0857               	movf	(pow@x+2)^(0+256),w
 12761  1154  0021               	movlb	1	; select bank1
 12762  1155  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12763  1156  31AC  24B5  3190   	fcall	___ftneg
 12764  1159  0021               	movlb	1	; select bank1
 12765  115A  083E               	movf	?___ftneg^(0+128),w
 12766  115B  0022               	movlb	2	; select bank2
 12767  115C  00D5               	movwf	pow@x^(0+256)
 12768  115D  0021               	movlb	1	; select bank1
 12769  115E  083F               	movf	(?___ftneg+1)^(0+128),w
 12770  115F  0022               	movlb	2	; select bank2
 12771  1160  00D6               	movwf	(pow@x+1)^(0+256)
 12772  1161  0021               	movlb	1	; select bank1
 12773  1162  0840               	movf	(?___ftneg+2)^(0+128),w
 12774  1163  0022               	movlb	2	; select bank2
 12775  1164  00D7               	movwf	(pow@x+2)^(0+256)
 12776  1165                     l8548:	
 12777  1165  0022               	movlb	2	; select bank2
 12778  1166  0855               	movf	pow@x^(0+256),w
 12779  1167  00BE               	movwf	log@x^(0+256)
 12780  1168  0856               	movf	(pow@x+1)^(0+256),w
 12781  1169  00BF               	movwf	(log@x+1)^(0+256)
 12782  116A  0857               	movf	(pow@x+2)^(0+256),w
 12783  116B  00C0               	movwf	(log@x+2)^(0+256)
 12784  116C  319E  2639  3190   	fcall	_log
 12785  116F  0022               	movlb	2	; select bank2
 12786  1170  083E               	movf	?_log^(0+256),w
 12787  1171  00DC               	movwf	_pow$2883^(0+256)
 12788  1172  083F               	movf	(?_log+1)^(0+256),w
 12789  1173  00DD               	movwf	(_pow$2883+1)^(0+256)
 12790  1174  0840               	movf	(?_log+2)^(0+256),w
 12791  1175  00DE               	movwf	(_pow$2883+2)^(0+256)
 12792  1176  0858               	movf	pow@y^(0+256),w
 12793  1177  0021               	movlb	1	; select bank1
 12794  1178  00AE               	movwf	___ftmul@f1^(0+128)
 12795  1179  0022               	movlb	2	; select bank2
 12796  117A  0859               	movf	(pow@y+1)^(0+256),w
 12797  117B  0021               	movlb	1	; select bank1
 12798  117C  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12799  117D  0022               	movlb	2	; select bank2
 12800  117E  085A               	movf	(pow@y+2)^(0+256),w
 12801  117F  0021               	movlb	1	; select bank1
 12802  1180  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12803  1181  0022               	movlb	2	; select bank2
 12804  1182  085C               	movf	_pow$2883^(0+256),w
 12805  1183  0021               	movlb	1	; select bank1
 12806  1184  00B1               	movwf	___ftmul@f2^(0+128)
 12807  1185  0022               	movlb	2	; select bank2
 12808  1186  085D               	movf	(_pow$2883+1)^(0+256),w
 12809  1187  0021               	movlb	1	; select bank1
 12810  1188  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12811  1189  0022               	movlb	2	; select bank2
 12812  118A  085E               	movf	(_pow$2883+2)^(0+256),w
 12813  118B  0021               	movlb	1	; select bank1
 12814  118C  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12815  118D  319C  24BA  3190   	fcall	___ftmul
 12816  1190  0021               	movlb	1	; select bank1
 12817  1191  082E               	movf	?___ftmul^(0+128),w
 12818  1192  0022               	movlb	2	; select bank2
 12819  1193  00DF               	movwf	_pow$2884^(0+256)
 12820  1194  0021               	movlb	1	; select bank1
 12821  1195  082F               	movf	(?___ftmul+1)^(0+128),w
 12822  1196  0022               	movlb	2	; select bank2
 12823  1197  00E0               	movwf	(_pow$2884+1)^(0+256)
 12824  1198  0021               	movlb	1	; select bank1
 12825  1199  0830               	movf	(?___ftmul+2)^(0+128),w
 12826  119A  0022               	movlb	2	; select bank2
 12827  119B  00E1               	movwf	(_pow$2884+2)^(0+256)
 12828  119C  085F               	movf	_pow$2884^(0+256),w
 12829  119D  00C8               	movwf	exp@x^(0+256)
 12830  119E  0860               	movf	(_pow$2884+1)^(0+256),w
 12831  119F  00C9               	movwf	(exp@x+1)^(0+256)
 12832  11A0  0861               	movf	(_pow$2884+2)^(0+256),w
 12833  11A1  00CA               	movwf	(exp@x+2)^(0+256)
 12834  11A2  3188  2028  3190   	fcall	_exp
 12835  11A5  0022               	movlb	2	; select bank2
 12836  11A6  0848               	movf	?_exp^(0+256),w
 12837  11A7  00D5               	movwf	pow@x^(0+256)
 12838  11A8  0849               	movf	(?_exp+1)^(0+256),w
 12839  11A9  00D6               	movwf	(pow@x+1)^(0+256)
 12840  11AA  084A               	movf	(?_exp+2)^(0+256),w
 12841  11AB  00D7               	movwf	(pow@x+2)^(0+256)
 12842  11AC  0862               	movf	pow@sign^(0+256),w
 12843  11AD  1903               	btfsc	3,2
 12844  11AE  0008               	return
 12845  11AF  0855               	movf	pow@x^(0+256),w
 12846  11B0  0021               	movlb	1	; select bank1
 12847  11B1  00BE               	movwf	___ftneg@f1^(0+128)
 12848  11B2  0022               	movlb	2	; select bank2
 12849  11B3  0856               	movf	(pow@x+1)^(0+256),w
 12850  11B4  0021               	movlb	1	; select bank1
 12851  11B5  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12852  11B6  0022               	movlb	2	; select bank2
 12853  11B7  0857               	movf	(pow@x+2)^(0+256),w
 12854  11B8  0021               	movlb	1	; select bank1
 12855  11B9  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12856  11BA  31AC  24B5         	fcall	___ftneg
 12857  11BC  0021               	movlb	1	; select bank1
 12858  11BD  083E               	movf	?___ftneg^(0+128),w
 12859  11BE  0022               	movlb	2	; select bank2
 12860  11BF  00D5               	movwf	?_pow^(0+256)
 12861  11C0  0021               	movlb	1	; select bank1
 12862  11C1  083F               	movf	(?___ftneg+1)^(0+128),w
 12863  11C2  0022               	movlb	2	; select bank2
 12864  11C3  00D6               	movwf	(?_pow+1)^(0+256)
 12865  11C4  0021               	movlb	1	; select bank1
 12866  11C5  0840               	movf	(?___ftneg+2)^(0+128),w
 12867  11C6  0022               	movlb	2	; select bank2
 12868  11C7  00D7               	movwf	(?_pow+2)^(0+256)
 12869  11C8  0008               	return
 12870  11C9                     __end_of_pow:	
 12871                           
 12872                           	psect	text28
 12873  1E39                     __ptext28:	
 12874 ;; *************** function _log *****************
 12875 ;; Defined at:
 12876 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\log.c"
 12877 ;; Parameters:    Size  Location     Type
 12878 ;;  x               3   30[BANK2 ] unsigned char 
 12879 ;; Auto vars:     Size  Location     Type
 12880 ;;  exponent        2   34[BANK2 ] int 
 12881 ;; Return value:  Size  Location     Type
 12882 ;;                  3   30[BANK2 ] int 
 12883 ;; Registers used:
 12884 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12885 ;; Tracked objects:
 12886 ;;		On entry : 0/0
 12887 ;;		On exit  : 0/0
 12888 ;;		Unchanged: 0/0
 12889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12890 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12891 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12892 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12893 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12894 ;;Total ram usage:        6 bytes
 12895 ;; Hardware stack levels used:    1
 12896 ;; Hardware stack levels required when called:    6
 12897 ;; This function calls:
 12898 ;;		___awtoft
 12899 ;;		___ftadd
 12900 ;;		___ftge
 12901 ;;		___ftmul
 12902 ;;		_eval_poly
 12903 ;;		_frexp
 12904 ;; This function is called by:
 12905 ;;		_pow
 12906 ;; This function uses a non-reentrant model
 12907 ;;
 12908                           
 12909                           
 12910                           ;psect for function _log
 12911  1E39                     _log:	
 12912                           
 12913                           ;incstack = 0
 12914                           ; Regs used in _log: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12915  1E39  0022               	movlb	2	; select bank2
 12916  1E3A  083E               	movf	log@x^(0+256),w
 12917  1E3B  0021               	movlb	1	; select bank1
 12918  1E3C  00A0               	movwf	___ftge@ff1^(0+128)
 12919  1E3D  0022               	movlb	2	; select bank2
 12920  1E3E  083F               	movf	(log@x+1)^(0+256),w
 12921  1E3F  0021               	movlb	1	; select bank1
 12922  1E40  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12923  1E41  0022               	movlb	2	; select bank2
 12924  1E42  0840               	movf	(log@x+2)^(0+256),w
 12925  1E43  0021               	movlb	1	; select bank1
 12926  1E44  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12927  1E45  3000               	movlw	0
 12928  1E46  00A3               	movwf	___ftge@ff2^(0+128)
 12929  1E47  3000               	movlw	0
 12930  1E48  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12931  1E49  3000               	movlw	0
 12932  1E4A  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12933  1E4B  31A0  2089  319E   	fcall	___ftge
 12934  1E4E  1803               	btfsc	3,0
 12935  1E4F  2E5D               	goto	l8410
 12936  1E50  3021               	movlw	33
 12937  1E51  0024               	movlb	4	; select bank4
 12938  1E52  00D1               	movwf	_errno^(0+512)
 12939  1E53  3000               	movlw	0
 12940  1E54  00D2               	movwf	(_errno^(0+512)+1)
 12941  1E55  3000               	movlw	0
 12942  1E56  0022               	movlb	2	; select bank2
 12943  1E57  00BE               	movwf	?_log^(0+256)
 12944  1E58  3000               	movlw	0
 12945  1E59  00BF               	movwf	(?_log+1)^(0+256)
 12946  1E5A  3000               	movlw	0
 12947  1E5B  00C0               	movwf	(?_log+2)^(0+256)
 12948  1E5C  0008               	return
 12949  1E5D                     l8410:	
 12950  1E5D  0022               	movlb	2	; select bank2
 12951  1E5E  0840               	movf	(log@x+2)^(0+256),w
 12952  1E5F  043F               	iorwf	(log@x+1)^(0+256),w
 12953  1E60  043E               	iorwf	log@x^(0+256),w
 12954  1E61  1D03               	skipz
 12955  1E62  2E70               	goto	l8416
 12956  1E63  3022               	movlw	34
 12957  1E64  0024               	movlb	4	; select bank4
 12958  1E65  00D1               	movwf	_errno^(0+512)
 12959  1E66  3000               	movlw	0
 12960  1E67  00D2               	movwf	(_errno^(0+512)+1)
 12961  1E68  3000               	movlw	0
 12962  1E69  0022               	movlb	2	; select bank2
 12963  1E6A  00BE               	movwf	?_log^(0+256)
 12964  1E6B  3000               	movlw	0
 12965  1E6C  00BF               	movwf	(?_log+1)^(0+256)
 12966  1E6D  3000               	movlw	0
 12967  1E6E  00C0               	movwf	(?_log+2)^(0+256)
 12968  1E6F  0008               	return
 12969  1E70                     l8416:	
 12970  1E70  3000               	movlw	0
 12971  1E71  0021               	movlb	1	; select bank1
 12972  1E72  00C1               	movwf	___ftadd@f1^(0+128)
 12973  1E73  3080               	movlw	128
 12974  1E74  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 12975  1E75  30BF               	movlw	191
 12976  1E76  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 12977  1E77  3000               	movlw	0
 12978  1E78  00AE               	movwf	___ftmul@f1^(0+128)
 12979  1E79  3000               	movlw	0
 12980  1E7A  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12981  1E7B  3040               	movlw	64
 12982  1E7C  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12983  1E7D  3042               	movlw	(low (log@exponent| (0+256)))& (0+255)
 12984  1E7E  0022               	movlb	2	; select bank2
 12985  1E7F  00C1               	movwf	??_log^(0+256)
 12986  1E80  0841               	movf	??_log^(0+256),w
 12987  1E81  0021               	movlb	1	; select bank1
 12988  1E82  00A3               	movwf	frexp@eptr^(0+128)
 12989  1E83  0022               	movlb	2	; select bank2
 12990  1E84  083E               	movf	log@x^(0+256),w
 12991  1E85  0021               	movlb	1	; select bank1
 12992  1E86  00A0               	movwf	frexp@value^(0+128)
 12993  1E87  0022               	movlb	2	; select bank2
 12994  1E88  083F               	movf	(log@x+1)^(0+256),w
 12995  1E89  0021               	movlb	1	; select bank1
 12996  1E8A  00A1               	movwf	(frexp@value+1)^(0+128)
 12997  1E8B  0022               	movlb	2	; select bank2
 12998  1E8C  0840               	movf	(log@x+2)^(0+256),w
 12999  1E8D  0021               	movlb	1	; select bank1
 13000  1E8E  00A2               	movwf	(frexp@value+2)^(0+128)
 13001  1E8F  31A1  217D  319E   	fcall	_frexp
 13002  1E92  0021               	movlb	1	; select bank1
 13003  1E93  0820               	movf	?_frexp^(0+128),w
 13004  1E94  00B1               	movwf	___ftmul@f2^(0+128)
 13005  1E95  0821               	movf	(?_frexp+1)^(0+128),w
 13006  1E96  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 13007  1E97  0822               	movf	(?_frexp+2)^(0+128),w
 13008  1E98  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 13009  1E99  319C  24BA  319E   	fcall	___ftmul
 13010  1E9C  0021               	movlb	1	; select bank1
 13011  1E9D  082E               	movf	?___ftmul^(0+128),w
 13012  1E9E  00C4               	movwf	___ftadd@f2^(0+128)
 13013  1E9F  082F               	movf	(?___ftmul+1)^(0+128),w
 13014  1EA0  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 13015  1EA1  0830               	movf	(?___ftmul+2)^(0+128),w
 13016  1EA2  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 13017  1EA3  319F  270A  319E   	fcall	___ftadd
 13018  1EA6  0021               	movlb	1	; select bank1
 13019  1EA7  0841               	movf	?___ftadd^(0+128),w
 13020  1EA8  0022               	movlb	2	; select bank2
 13021  1EA9  00BE               	movwf	log@x^(0+256)
 13022  1EAA  0021               	movlb	1	; select bank1
 13023  1EAB  0842               	movf	(?___ftadd+1)^(0+128),w
 13024  1EAC  0022               	movlb	2	; select bank2
 13025  1EAD  00BF               	movwf	(log@x+1)^(0+256)
 13026  1EAE  0021               	movlb	1	; select bank1
 13027  1EAF  0843               	movf	(?___ftadd+2)^(0+128),w
 13028  1EB0  0022               	movlb	2	; select bank2
 13029  1EB1  00C0               	movwf	(log@x+2)^(0+256)
 13030  1EB2  30FF               	movlw	255
 13031  1EB3  07C2               	addwf	log@exponent^(0+256),f
 13032  1EB4  30FF               	movlw	255
 13033  1EB5  3DC3               	addwfc	(log@exponent+1)^(0+256),f
 13034  1EB6  083E               	movf	log@x^(0+256),w
 13035  1EB7  00B4               	movwf	eval_poly@x^(0+256)
 13036  1EB8  083F               	movf	(log@x+1)^(0+256),w
 13037  1EB9  00B5               	movwf	(eval_poly@x+1)^(0+256)
 13038  1EBA  0840               	movf	(log@x+2)^(0+256),w
 13039  1EBB  00B6               	movwf	(eval_poly@x+2)^(0+256)
 13040  1EBC  301E               	movlw	low (log@coeff| (0+32768))
 13041  1EBD  00B7               	movwf	eval_poly@d^(0+256)
 13042  1EBE  30A8               	movlw	high (log@coeff| (0+32768))
 13043  1EBF  00B8               	movwf	(eval_poly@d^(0+256)+1)
 13044  1EC0  3008               	movlw	8
 13045  1EC1  00B9               	movwf	eval_poly@n^(0+256)
 13046  1EC2  3000               	movlw	0
 13047  1EC3  00BA               	movwf	(eval_poly@n^(0+256)+1)
 13048  1EC4  31A5  2598  319E   	fcall	_eval_poly
 13049  1EC7  0022               	movlb	2	; select bank2
 13050  1EC8  0834               	movf	?_eval_poly^(0+256),w
 13051  1EC9  00BE               	movwf	log@x^(0+256)
 13052  1ECA  0835               	movf	(?_eval_poly+1)^(0+256),w
 13053  1ECB  00BF               	movwf	(log@x+1)^(0+256)
 13054  1ECC  0836               	movf	(?_eval_poly+2)^(0+256),w
 13055  1ECD  00C0               	movwf	(log@x+2)^(0+256)
 13056  1ECE  083E               	movf	log@x^(0+256),w
 13057  1ECF  0021               	movlb	1	; select bank1
 13058  1ED0  00C1               	movwf	___ftadd@f1^(0+128)
 13059  1ED1  0022               	movlb	2	; select bank2
 13060  1ED2  083F               	movf	(log@x+1)^(0+256),w
 13061  1ED3  0021               	movlb	1	; select bank1
 13062  1ED4  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 13063  1ED5  0022               	movlb	2	; select bank2
 13064  1ED6  0840               	movf	(log@x+2)^(0+256),w
 13065  1ED7  0021               	movlb	1	; select bank1
 13066  1ED8  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 13067  1ED9  3072               	movlw	114
 13068  1EDA  00AE               	movwf	___ftmul@f1^(0+128)
 13069  1EDB  3031               	movlw	49
 13070  1EDC  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 13071  1EDD  303F               	movlw	63
 13072  1EDE  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 13073  1EDF  0022               	movlb	2	; select bank2
 13074  1EE0  0843               	movf	(log@exponent+1)^(0+256),w
 13075  1EE1  0021               	movlb	1	; select bank1
 13076  1EE2  00A9               	movwf	(___awtoft@c+1)^(0+128)
 13077  1EE3  0022               	movlb	2	; select bank2
 13078  1EE4  0842               	movf	log@exponent^(0+256),w
 13079  1EE5  0021               	movlb	1	; select bank1
 13080  1EE6  00A8               	movwf	___awtoft@c^(0+128)
 13081  1EE7  31AE  2610  319E   	fcall	___awtoft
 13082  1EEA  0021               	movlb	1	; select bank1
 13083  1EEB  0828               	movf	?___awtoft^(0+128),w
 13084  1EEC  00B1               	movwf	___ftmul@f2^(0+128)
 13085  1EED  0829               	movf	(?___awtoft+1)^(0+128),w
 13086  1EEE  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 13087  1EEF  082A               	movf	(?___awtoft+2)^(0+128),w
 13088  1EF0  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 13089  1EF1  319C  24BA  319E   	fcall	___ftmul
 13090  1EF4  0021               	movlb	1	; select bank1
 13091  1EF5  082E               	movf	?___ftmul^(0+128),w
 13092  1EF6  00C4               	movwf	___ftadd@f2^(0+128)
 13093  1EF7  082F               	movf	(?___ftmul+1)^(0+128),w
 13094  1EF8  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 13095  1EF9  0830               	movf	(?___ftmul+2)^(0+128),w
 13096  1EFA  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 13097  1EFB  319F  270A         	fcall	___ftadd
 13098  1EFD  0021               	movlb	1	; select bank1
 13099  1EFE  0841               	movf	?___ftadd^(0+128),w
 13100  1EFF  0022               	movlb	2	; select bank2
 13101  1F00  00BE               	movwf	?_log^(0+256)
 13102  1F01  0021               	movlb	1	; select bank1
 13103  1F02  0842               	movf	(?___ftadd+1)^(0+128),w
 13104  1F03  0022               	movlb	2	; select bank2
 13105  1F04  00BF               	movwf	(?_log+1)^(0+256)
 13106  1F05  0021               	movlb	1	; select bank1
 13107  1F06  0843               	movf	(?___ftadd+2)^(0+128),w
 13108  1F07  0022               	movlb	2	; select bank2
 13109  1F08  00C0               	movwf	(?_log+2)^(0+256)
 13110  1F09  0008               	return
 13111  1F0A                     __end_of_log:	
 13112                           
 13113                           	psect	text29
 13114  0828                     __ptext29:	
 13115 ;; *************** function _exp *****************
 13116 ;; Defined at:
 13117 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\exp.c"
 13118 ;; Parameters:    Size  Location     Type
 13119 ;;  x               3   40[BANK2 ] int 
 13120 ;; Auto vars:     Size  Location     Type
 13121 ;;  exponent        2   50[BANK2 ] int 
 13122 ;;  sign            1   52[BANK2 ] unsigned char 
 13123 ;; Return value:  Size  Location     Type
 13124 ;;                  3   40[BANK2 ] unsigned char 
 13125 ;; Registers used:
 13126 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13127 ;; Tracked objects:
 13128 ;;		On entry : 0/0
 13129 ;;		On exit  : 0/0
 13130 ;;		Unchanged: 0/0
 13131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13132 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13133 ;;      Locals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13134 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13135 ;;      Totals:         0       0       0      13       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13136 ;;Total ram usage:       13 bytes
 13137 ;; Hardware stack levels used:    1
 13138 ;; Hardware stack levels required when called:    6
 13139 ;; This function calls:
 13140 ;;		___awtoft
 13141 ;;		___ftdiv
 13142 ;;		___ftge
 13143 ;;		___ftmul
 13144 ;;		___ftneg
 13145 ;;		___ftsub
 13146 ;;		___fttol
 13147 ;;		_eval_poly
 13148 ;;		_floor
 13149 ;;		_ldexp
 13150 ;; This function is called by:
 13151 ;;		_pow
 13152 ;; This function uses a non-reentrant model
 13153 ;;
 13154                           
 13155                           
 13156                           ;psect for function _exp
 13157  0828                     _exp:	
 13158                           
 13159                           ;incstack = 0
 13160                           ; Regs used in _exp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13161  0828  0022               	movlb	2	; select bank2
 13162  0829  084A               	movf	(exp@x+2)^(0+256),w
 13163  082A  0449               	iorwf	(exp@x+1)^(0+256),w
 13164  082B  0448               	iorwf	exp@x^(0+256),w
 13165  082C  1D03               	skipz
 13166  082D  2835               	goto	l8432
 13167  082E  3000               	movlw	0
 13168  082F  00C8               	movwf	?_exp^(0+256)
 13169  0830  3080               	movlw	128
 13170  0831  00C9               	movwf	(?_exp+1)^(0+256)
 13171  0832  303F               	movlw	63
 13172  0833  00CA               	movwf	(?_exp+2)^(0+256)
 13173  0834  0008               	return
 13174  0835                     l8432:	
 13175  0835  3072               	movlw	114
 13176  0836  0021               	movlb	1	; select bank1
 13177  0837  00A0               	movwf	___ftge@ff1^(0+128)
 13178  0838  3031               	movlw	49
 13179  0839  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13180  083A  3044               	movlw	68
 13181  083B  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13182  083C  0022               	movlb	2	; select bank2
 13183  083D  0848               	movf	exp@x^(0+256),w
 13184  083E  0021               	movlb	1	; select bank1
 13185  083F  00A3               	movwf	___ftge@ff2^(0+128)
 13186  0840  0022               	movlb	2	; select bank2
 13187  0841  0849               	movf	(exp@x+1)^(0+256),w
 13188  0842  0021               	movlb	1	; select bank1
 13189  0843  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13190  0844  0022               	movlb	2	; select bank2
 13191  0845  084A               	movf	(exp@x+2)^(0+256),w
 13192  0846  0021               	movlb	1	; select bank1
 13193  0847  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13194  0848  31A0  2089  3188   	fcall	___ftge
 13195  084B  1803               	btfsc	3,0
 13196  084C  285A               	goto	l8442
 13197  084D  3022               	movlw	34
 13198  084E  0024               	movlb	4	; select bank4
 13199  084F  00D1               	movwf	_errno^(0+512)
 13200  0850  3000               	movlw	0
 13201  0851  00D2               	movwf	(_errno^(0+512)+1)
 13202  0852  30FF               	movlw	255
 13203  0853  0022               	movlb	2	; select bank2
 13204  0854  00C8               	movwf	?_exp^(0+256)
 13205  0855  307F               	movlw	127
 13206  0856  00C9               	movwf	(?_exp+1)^(0+256)
 13207  0857  307F               	movlw	127
 13208  0858  00CA               	movwf	(?_exp+2)^(0+256)
 13209  0859  0008               	return
 13210  085A                     l8442:	
 13211  085A  0022               	movlb	2	; select bank2
 13212  085B  0848               	movf	exp@x^(0+256),w
 13213  085C  0021               	movlb	1	; select bank1
 13214  085D  00A0               	movwf	___ftge@ff1^(0+128)
 13215  085E  0022               	movlb	2	; select bank2
 13216  085F  0849               	movf	(exp@x+1)^(0+256),w
 13217  0860  0021               	movlb	1	; select bank1
 13218  0861  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13219  0862  0022               	movlb	2	; select bank2
 13220  0863  084A               	movf	(exp@x+2)^(0+256),w
 13221  0864  0021               	movlb	1	; select bank1
 13222  0865  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13223  0866  3049               	movlw	73
 13224  0867  00A3               	movwf	___ftge@ff2^(0+128)
 13225  0868  303A               	movlw	58
 13226  0869  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13227  086A  30C4               	movlw	196
 13228  086B  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13229  086C  31A0  2089  3188   	fcall	___ftge
 13230  086F  1803               	btfsc	3,0
 13231  0870  287E               	goto	l8448
 13232  0871  3022               	movlw	34
 13233  0872  0024               	movlb	4	; select bank4
 13234  0873  00D1               	movwf	_errno^(0+512)
 13235  0874  3000               	movlw	0
 13236  0875  00D2               	movwf	(_errno^(0+512)+1)
 13237  0876  3000               	movlw	0
 13238  0877  0022               	movlb	2	; select bank2
 13239  0878  00C8               	movwf	?_exp^(0+256)
 13240  0879  3000               	movlw	0
 13241  087A  00C9               	movwf	(?_exp+1)^(0+256)
 13242  087B  3000               	movlw	0
 13243  087C  00CA               	movwf	(?_exp+2)^(0+256)
 13244  087D  0008               	return
 13245  087E                     l8448:	
 13246  087E  0022               	movlb	2	; select bank2
 13247  087F  0848               	movf	exp@x^(0+256),w
 13248  0880  0021               	movlb	1	; select bank1
 13249  0881  00A0               	movwf	___ftge@ff1^(0+128)
 13250  0882  0022               	movlb	2	; select bank2
 13251  0883  0849               	movf	(exp@x+1)^(0+256),w
 13252  0884  0021               	movlb	1	; select bank1
 13253  0885  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13254  0886  0022               	movlb	2	; select bank2
 13255  0887  084A               	movf	(exp@x+2)^(0+256),w
 13256  0888  0021               	movlb	1	; select bank1
 13257  0889  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13258  088A  3000               	movlw	0
 13259  088B  00A3               	movwf	___ftge@ff2^(0+128)
 13260  088C  3000               	movlw	0
 13261  088D  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13262  088E  3000               	movlw	0
 13263  088F  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13264  0890  31A0  2089  3188   	fcall	___ftge
 13265  0893  1803               	btfsc	3,0
 13266  0894  2897               	goto	u8950
 13267  0895  3001               	movlw	1
 13268  0896  2898               	goto	u8960
 13269  0897                     u8950:	
 13270  0897  3000               	movlw	0
 13271  0898                     u8960:	
 13272  0898  0022               	movlb	2	; select bank2
 13273  0899  00CB               	movwf	??_exp^(0+256)
 13274  089A  084B               	movf	??_exp^(0+256),w
 13275  089B  00D4               	movwf	exp@sign^(0+256)
 13276  089C  0854               	movf	exp@sign^(0+256),w
 13277  089D  1903               	btfsc	3,2
 13278  089E  28B9               	goto	l8454
 13279  089F  0848               	movf	exp@x^(0+256),w
 13280  08A0  0021               	movlb	1	; select bank1
 13281  08A1  00BE               	movwf	___ftneg@f1^(0+128)
 13282  08A2  0022               	movlb	2	; select bank2
 13283  08A3  0849               	movf	(exp@x+1)^(0+256),w
 13284  08A4  0021               	movlb	1	; select bank1
 13285  08A5  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13286  08A6  0022               	movlb	2	; select bank2
 13287  08A7  084A               	movf	(exp@x+2)^(0+256),w
 13288  08A8  0021               	movlb	1	; select bank1
 13289  08A9  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13290  08AA  31AC  24B5  3188   	fcall	___ftneg
 13291  08AD  0021               	movlb	1	; select bank1
 13292  08AE  083E               	movf	?___ftneg^(0+128),w
 13293  08AF  0022               	movlb	2	; select bank2
 13294  08B0  00C8               	movwf	exp@x^(0+256)
 13295  08B1  0021               	movlb	1	; select bank1
 13296  08B2  083F               	movf	(?___ftneg+1)^(0+128),w
 13297  08B3  0022               	movlb	2	; select bank2
 13298  08B4  00C9               	movwf	(exp@x+1)^(0+256)
 13299  08B5  0021               	movlb	1	; select bank1
 13300  08B6  0840               	movf	(?___ftneg+2)^(0+128),w
 13301  08B7  0022               	movlb	2	; select bank2
 13302  08B8  00CA               	movwf	(exp@x+2)^(0+256)
 13303  08B9                     l8454:	
 13304  08B9  30AA               	movlw	170
 13305  08BA  0021               	movlb	1	; select bank1
 13306  08BB  00AE               	movwf	___ftmul@f1^(0+128)
 13307  08BC  30B8               	movlw	184
 13308  08BD  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 13309  08BE  303F               	movlw	63
 13310  08BF  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 13311  08C0  0022               	movlb	2	; select bank2
 13312  08C1  0848               	movf	exp@x^(0+256),w
 13313  08C2  0021               	movlb	1	; select bank1
 13314  08C3  00B1               	movwf	___ftmul@f2^(0+128)
 13315  08C4  0022               	movlb	2	; select bank2
 13316  08C5  0849               	movf	(exp@x+1)^(0+256),w
 13317  08C6  0021               	movlb	1	; select bank1
 13318  08C7  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 13319  08C8  0022               	movlb	2	; select bank2
 13320  08C9  084A               	movf	(exp@x+2)^(0+256),w
 13321  08CA  0021               	movlb	1	; select bank1
 13322  08CB  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 13323  08CC  319C  24BA  3188   	fcall	___ftmul
 13324  08CF  0021               	movlb	1	; select bank1
 13325  08D0  082E               	movf	?___ftmul^(0+128),w
 13326  08D1  0022               	movlb	2	; select bank2
 13327  08D2  00C8               	movwf	exp@x^(0+256)
 13328  08D3  0021               	movlb	1	; select bank1
 13329  08D4  082F               	movf	(?___ftmul+1)^(0+128),w
 13330  08D5  0022               	movlb	2	; select bank2
 13331  08D6  00C9               	movwf	(exp@x+1)^(0+256)
 13332  08D7  0021               	movlb	1	; select bank1
 13333  08D8  0830               	movf	(?___ftmul+2)^(0+128),w
 13334  08D9  0022               	movlb	2	; select bank2
 13335  08DA  00CA               	movwf	(exp@x+2)^(0+256)
 13336  08DB  0848               	movf	exp@x^(0+256),w
 13337  08DC  00AE               	movwf	floor@x^(0+256)
 13338  08DD  0849               	movf	(exp@x+1)^(0+256),w
 13339  08DE  00AF               	movwf	(floor@x+1)^(0+256)
 13340  08DF  084A               	movf	(exp@x+2)^(0+256),w
 13341  08E0  00B0               	movwf	(floor@x+2)^(0+256)
 13342  08E1  3190  2000  3188   	fcall	_floor
 13343  08E4  0022               	movlb	2	; select bank2
 13344  08E5  082E               	movf	?_floor^(0+256),w
 13345  08E6  00CC               	movwf	_exp$2886^(0+256)
 13346  08E7  082F               	movf	(?_floor+1)^(0+256),w
 13347  08E8  00CD               	movwf	(_exp$2886+1)^(0+256)
 13348  08E9  0830               	movf	(?_floor+2)^(0+256),w
 13349  08EA  00CE               	movwf	(_exp$2886+2)^(0+256)
 13350  08EB  084C               	movf	_exp$2886^(0+256),w
 13351  08EC  00A0               	movwf	___fttol@f1^(0+256)
 13352  08ED  084D               	movf	(_exp$2886+1)^(0+256),w
 13353  08EE  00A1               	movwf	(___fttol@f1+1)^(0+256)
 13354  08EF  084E               	movf	(_exp$2886+2)^(0+256),w
 13355  08F0  00A2               	movwf	(___fttol@f1+2)^(0+256)
 13356  08F1  3199  213F  3188   	fcall	___fttol
 13357  08F4  0022               	movlb	2	; select bank2
 13358  08F5  0821               	movf	(?___fttol^(0+256)+1),w
 13359  08F6  00D3               	movwf	(exp@exponent+1)^(0+256)
 13360  08F7  0820               	movf	?___fttol^(0+256),w
 13361  08F8  00D2               	movwf	exp@exponent^(0+256)
 13362  08F9  0853               	movf	(exp@exponent+1)^(0+256),w
 13363  08FA  0021               	movlb	1	; select bank1
 13364  08FB  00A9               	movwf	(___awtoft@c+1)^(0+128)
 13365  08FC  0022               	movlb	2	; select bank2
 13366  08FD  0852               	movf	exp@exponent^(0+256),w
 13367  08FE  0021               	movlb	1	; select bank1
 13368  08FF  00A8               	movwf	___awtoft@c^(0+128)
 13369  0900  31AE  2610  3188   	fcall	___awtoft
 13370  0903  0021               	movlb	1	; select bank1
 13371  0904  0828               	movf	?___awtoft^(0+128),w
 13372  0905  0022               	movlb	2	; select bank2
 13373  0906  00B7               	movwf	___ftsub@f2^(0+256)
 13374  0907  0021               	movlb	1	; select bank1
 13375  0908  0829               	movf	(?___awtoft+1)^(0+128),w
 13376  0909  0022               	movlb	2	; select bank2
 13377  090A  00B8               	movwf	(___ftsub@f2+1)^(0+256)
 13378  090B  0021               	movlb	1	; select bank1
 13379  090C  082A               	movf	(?___awtoft+2)^(0+128),w
 13380  090D  0022               	movlb	2	; select bank2
 13381  090E  00B9               	movwf	(___ftsub@f2+2)^(0+256)
 13382  090F  0848               	movf	exp@x^(0+256),w
 13383  0910  00BA               	movwf	___ftsub@f1^(0+256)
 13384  0911  0849               	movf	(exp@x+1)^(0+256),w
 13385  0912  00BB               	movwf	(___ftsub@f1+1)^(0+256)
 13386  0913  084A               	movf	(exp@x+2)^(0+256),w
 13387  0914  00BC               	movwf	(___ftsub@f1+2)^(0+256)
 13388  0915  31AE  26AC  3188   	fcall	___ftsub
 13389  0918  0022               	movlb	2	; select bank2
 13390  0919  0837               	movf	?___ftsub^(0+256),w
 13391  091A  00C8               	movwf	exp@x^(0+256)
 13392  091B  0838               	movf	(?___ftsub+1)^(0+256),w
 13393  091C  00C9               	movwf	(exp@x+1)^(0+256)
 13394  091D  0839               	movf	(?___ftsub+2)^(0+256),w
 13395  091E  00CA               	movwf	(exp@x+2)^(0+256)
 13396  091F  0848               	movf	exp@x^(0+256),w
 13397  0920  00B4               	movwf	eval_poly@x^(0+256)
 13398  0921  0849               	movf	(exp@x+1)^(0+256),w
 13399  0922  00B5               	movwf	(eval_poly@x+1)^(0+256)
 13400  0923  084A               	movf	(exp@x+2)^(0+256),w
 13401  0924  00B6               	movwf	(eval_poly@x+2)^(0+256)
 13402  0925  3000               	movlw	low (exp@coeff| (0+32768))
 13403  0926  00B7               	movwf	eval_poly@d^(0+256)
 13404  0927  30A8               	movlw	high (exp@coeff| (0+32768))
 13405  0928  00B8               	movwf	(eval_poly@d^(0+256)+1)
 13406  0929  3009               	movlw	9
 13407  092A  00B9               	movwf	eval_poly@n^(0+256)
 13408  092B  3000               	movlw	0
 13409  092C  00BA               	movwf	(eval_poly@n^(0+256)+1)
 13410  092D  31A5  2598  3188   	fcall	_eval_poly
 13411  0930  0022               	movlb	2	; select bank2
 13412  0931  0834               	movf	?_eval_poly^(0+256),w
 13413  0932  00BE               	movwf	ldexp@value^(0+256)
 13414  0933  0835               	movf	(?_eval_poly+1)^(0+256),w
 13415  0934  00BF               	movwf	(ldexp@value+1)^(0+256)
 13416  0935  0836               	movf	(?_eval_poly+2)^(0+256),w
 13417  0936  00C0               	movwf	(ldexp@value+2)^(0+256)
 13418  0937  0853               	movf	(exp@exponent+1)^(0+256),w
 13419  0938  00C2               	movwf	(ldexp@newexp+1)^(0+256)
 13420  0939  0852               	movf	exp@exponent^(0+256),w
 13421  093A  00C1               	movwf	ldexp@newexp^(0+256)
 13422  093B  319A  22DC  3188   	fcall	_ldexp
 13423  093E  0022               	movlb	2	; select bank2
 13424  093F  083E               	movf	?_ldexp^(0+256),w
 13425  0940  00C8               	movwf	exp@x^(0+256)
 13426  0941  083F               	movf	(?_ldexp+1)^(0+256),w
 13427  0942  00C9               	movwf	(exp@x+1)^(0+256)
 13428  0943  0840               	movf	(?_ldexp+2)^(0+256),w
 13429  0944  00CA               	movwf	(exp@x+2)^(0+256)
 13430  0945  0854               	movf	exp@sign^(0+256),w
 13431  0946  1903               	btfsc	3,2
 13432  0947  0008               	return
 13433  0948  30FF               	movlw	255
 13434  0949  00CF               	movwf	_exp$2627^(0+256)
 13435  094A  307F               	movlw	127
 13436  094B  00D0               	movwf	(_exp$2627+1)^(0+256)
 13437  094C  307F               	movlw	127
 13438  094D  00D1               	movwf	(_exp$2627+2)^(0+256)
 13439  094E  084A               	movf	(exp@x+2)^(0+256),w
 13440  094F  0651               	xorwf	(_exp$2627+2)^(0+256),w
 13441  0950  1D03               	skipz
 13442  0951  2958               	goto	u8995
 13443  0952  0849               	movf	(exp@x+1)^(0+256),w
 13444  0953  0650               	xorwf	(_exp$2627+1)^(0+256),w
 13445  0954  1D03               	skipz
 13446  0955  2958               	goto	u8995
 13447  0956  0848               	movf	exp@x^(0+256),w
 13448  0957  064F               	xorwf	_exp$2627^(0+256),w
 13449  0958                     u8995:	
 13450  0958  1D03               	skipz
 13451  0959  2961               	goto	l8476
 13452  095A  3000               	movlw	0
 13453  095B  00C8               	movwf	?_exp^(0+256)
 13454  095C  3000               	movlw	0
 13455  095D  00C9               	movwf	(?_exp+1)^(0+256)
 13456  095E  3000               	movlw	0
 13457  095F  00CA               	movwf	(?_exp+2)^(0+256)
 13458  0960  0008               	return
 13459  0961                     l8476:	
 13460  0961  0848               	movf	exp@x^(0+256),w
 13461  0962  0021               	movlb	1	; select bank1
 13462  0963  00CE               	movwf	___ftdiv@f2^(0+128)
 13463  0964  0022               	movlb	2	; select bank2
 13464  0965  0849               	movf	(exp@x+1)^(0+256),w
 13465  0966  0021               	movlb	1	; select bank1
 13466  0967  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 13467  0968  0022               	movlb	2	; select bank2
 13468  0969  084A               	movf	(exp@x+2)^(0+256),w
 13469  096A  0021               	movlb	1	; select bank1
 13470  096B  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 13471  096C  3000               	movlw	0
 13472  096D  00D1               	movwf	___ftdiv@f1^(0+128)
 13473  096E  3080               	movlw	128
 13474  096F  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 13475  0970  303F               	movlw	63
 13476  0971  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 13477  0972  319C  2411         	fcall	___ftdiv
 13478  0974  0021               	movlb	1	; select bank1
 13479  0975  084E               	movf	?___ftdiv^(0+128),w
 13480  0976  0022               	movlb	2	; select bank2
 13481  0977  00C8               	movwf	?_exp^(0+256)
 13482  0978  0021               	movlb	1	; select bank1
 13483  0979  084F               	movf	(?___ftdiv+1)^(0+128),w
 13484  097A  0022               	movlb	2	; select bank2
 13485  097B  00C9               	movwf	(?_exp+1)^(0+256)
 13486  097C  0021               	movlb	1	; select bank1
 13487  097D  0850               	movf	(?___ftdiv+2)^(0+128),w
 13488  097E  0022               	movlb	2	; select bank2
 13489  097F  00CA               	movwf	(?_exp+2)^(0+256)
 13490  0980  0008               	return
 13491  0981                     __end_of_exp:	
 13492                           
 13493                           	psect	text30
 13494  1ADC                     __ptext30:	
 13495 ;; *************** function _ldexp *****************
 13496 ;; Defined at:
 13497 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
 13498 ;; Parameters:    Size  Location     Type
 13499 ;;  value           3   30[BANK2 ] unsigned char 
 13500 ;;  newexp          2   33[BANK2 ] int 
 13501 ;; Auto vars:     Size  Location     Type
 13502 ;;		None
 13503 ;; Return value:  Size  Location     Type
 13504 ;;                  3   30[BANK2 ] int 
 13505 ;; Registers used:
 13506 ;;		wreg, status,2, status,0, pclath, cstack
 13507 ;; Tracked objects:
 13508 ;;		On entry : 0/0
 13509 ;;		On exit  : 0/0
 13510 ;;		Unchanged: 0/0
 13511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13512 ;;      Params:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13513 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13514 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13515 ;;      Totals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13516 ;;Total ram usage:       10 bytes
 13517 ;; Hardware stack levels used:    1
 13518 ;; Hardware stack levels required when called:    4
 13519 ;; This function calls:
 13520 ;;		___ftge
 13521 ;;		___ftneg
 13522 ;; This function is called by:
 13523 ;;		_exp
 13524 ;; This function uses a non-reentrant model
 13525 ;;
 13526                           
 13527                           
 13528                           ;psect for function _ldexp
 13529  1ADC                     _ldexp:	
 13530                           
 13531                           ;incstack = 0
 13532                           ; Regs used in _ldexp: [wreg+status,2+status,0+pclath+cstack]
 13533  1ADC  0022               	movlb	2	; select bank2
 13534  1ADD  0840               	movf	(ldexp@value+2)^(0+256),w
 13535  1ADE  043F               	iorwf	(ldexp@value+1)^(0+256),w
 13536  1ADF  043E               	iorwf	ldexp@value^(0+256),w
 13537  1AE0  1D03               	skipz
 13538  1AE1  2AE9               	goto	l8246
 13539  1AE2  3000               	movlw	0
 13540  1AE3  00BE               	movwf	?_ldexp^(0+256)
 13541  1AE4  3000               	movlw	0
 13542  1AE5  00BF               	movwf	(?_ldexp+1)^(0+256)
 13543  1AE6  3000               	movlw	0
 13544  1AE7  00C0               	movwf	(?_ldexp+2)^(0+256)
 13545  1AE8  0008               	return
 13546  1AE9                     l8246:	
 13547  1AE9  0840               	movf	(ldexp@value^(0+256)+2),w
 13548  1AEA  397F               	andlw	127
 13549  1AEB  00C3               	movwf	??_ldexp^(0+256)
 13550  1AEC  01C4               	clrf	(??_ldexp^(0+256)+1)
 13551  1AED  35C3               	lslf	??_ldexp^(0+256),f
 13552  1AEE  0DC4               	rlf	(??_ldexp^(0+256)+1),f
 13553  1AEF  0843               	movf	??_ldexp^(0+256),w
 13554  1AF0  07C1               	addwf	ldexp@newexp^(0+256),f
 13555  1AF1  0844               	movf	(??_ldexp+1)^(0+256),w
 13556  1AF2  3DC2               	addwfc	(ldexp@newexp+1)^(0+256),f
 13557  1AF3  0D3F               	rlf	(ldexp@value^(0+256)+1),w
 13558  1AF4  0D3F               	rlf	(ldexp@value^(0+256)+1),w
 13559  1AF5  3901               	andlw	1
 13560  1AF6  00C3               	movwf	??_ldexp^(0+256)
 13561  1AF7  01C4               	clrf	(??_ldexp^(0+256)+1)
 13562  1AF8  0843               	movf	??_ldexp^(0+256),w
 13563  1AF9  07C1               	addwf	ldexp@newexp^(0+256),f
 13564  1AFA  0844               	movf	(??_ldexp+1)^(0+256),w
 13565  1AFB  3DC2               	addwfc	(ldexp@newexp+1)^(0+256),f
 13566  1AFC  1FC2               	btfss	(ldexp@newexp+1)^(0+256),7
 13567  1AFD  2B0B               	goto	l8256
 13568  1AFE  3022               	movlw	34
 13569  1AFF  0024               	movlb	4	; select bank4
 13570  1B00  00D1               	movwf	_errno^(0+512)
 13571  1B01  3000               	movlw	0
 13572  1B02  00D2               	movwf	(_errno^(0+512)+1)
 13573  1B03  3000               	movlw	0
 13574  1B04  0022               	movlb	2	; select bank2
 13575  1B05  00BE               	movwf	?_ldexp^(0+256)
 13576  1B06  3000               	movlw	0
 13577  1B07  00BF               	movwf	(?_ldexp+1)^(0+256)
 13578  1B08  3000               	movlw	0
 13579  1B09  00C0               	movwf	(?_ldexp+2)^(0+256)
 13580  1B0A  0008               	return
 13581  1B0B                     l8256:	
 13582  1B0B  0842               	movf	(ldexp@newexp+1)^(0+256),w
 13583  1B0C  3A80               	xorlw	128
 13584  1B0D  00C3               	movwf	??_ldexp^(0+256)
 13585  1B0E  3081               	movlw	129
 13586  1B0F  0243               	subwf	??_ldexp^(0+256),w
 13587  1B10  1D03               	skipz
 13588  1B11  2B14               	goto	u8765
 13589  1B12  3000               	movlw	0
 13590  1B13  0241               	subwf	ldexp@newexp^(0+256),w
 13591  1B14                     u8765:	
 13592  1B14  1C03               	skipc
 13593  1B15  2B5B               	goto	l8280
 13594  1B16  3022               	movlw	34
 13595  1B17  0024               	movlb	4	; select bank4
 13596  1B18  00D1               	movwf	_errno^(0+512)
 13597  1B19  3000               	movlw	0
 13598  1B1A  00D2               	movwf	(_errno^(0+512)+1)
 13599  1B1B  0022               	movlb	2	; select bank2
 13600  1B1C  083E               	movf	ldexp@value^(0+256),w
 13601  1B1D  0021               	movlb	1	; select bank1
 13602  1B1E  00A0               	movwf	___ftge@ff1^(0+128)
 13603  1B1F  0022               	movlb	2	; select bank2
 13604  1B20  083F               	movf	(ldexp@value+1)^(0+256),w
 13605  1B21  0021               	movlb	1	; select bank1
 13606  1B22  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13607  1B23  0022               	movlb	2	; select bank2
 13608  1B24  0840               	movf	(ldexp@value+2)^(0+256),w
 13609  1B25  0021               	movlb	1	; select bank1
 13610  1B26  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13611  1B27  3000               	movlw	0
 13612  1B28  00A3               	movwf	___ftge@ff2^(0+128)
 13613  1B29  3000               	movlw	0
 13614  1B2A  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13615  1B2B  3000               	movlw	0
 13616  1B2C  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13617  1B2D  31A0  2089  319A   	fcall	___ftge
 13618  1B30  1803               	btfsc	3,0
 13619  1B31  2B53               	goto	l8276
 13620  1B32  30FF               	movlw	255
 13621  1B33  0022               	movlb	2	; select bank2
 13622  1B34  00C5               	movwf	_ldexp$2664^(0+256)
 13623  1B35  307F               	movlw	127
 13624  1B36  00C6               	movwf	(_ldexp$2664+1)^(0+256)
 13625  1B37  307F               	movlw	127
 13626  1B38  00C7               	movwf	(_ldexp$2664+2)^(0+256)
 13627  1B39  0845               	movf	_ldexp$2664^(0+256),w
 13628  1B3A  0021               	movlb	1	; select bank1
 13629  1B3B  00BE               	movwf	___ftneg@f1^(0+128)
 13630  1B3C  0022               	movlb	2	; select bank2
 13631  1B3D  0846               	movf	(_ldexp$2664+1)^(0+256),w
 13632  1B3E  0021               	movlb	1	; select bank1
 13633  1B3F  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13634  1B40  0022               	movlb	2	; select bank2
 13635  1B41  0847               	movf	(_ldexp$2664+2)^(0+256),w
 13636  1B42  0021               	movlb	1	; select bank1
 13637  1B43  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13638  1B44  31AC  24B5         	fcall	___ftneg
 13639  1B46  0021               	movlb	1	; select bank1
 13640  1B47  083E               	movf	?___ftneg^(0+128),w
 13641  1B48  0022               	movlb	2	; select bank2
 13642  1B49  00BE               	movwf	?_ldexp^(0+256)
 13643  1B4A  0021               	movlb	1	; select bank1
 13644  1B4B  083F               	movf	(?___ftneg+1)^(0+128),w
 13645  1B4C  0022               	movlb	2	; select bank2
 13646  1B4D  00BF               	movwf	(?_ldexp+1)^(0+256)
 13647  1B4E  0021               	movlb	1	; select bank1
 13648  1B4F  0840               	movf	(?___ftneg+2)^(0+128),w
 13649  1B50  0022               	movlb	2	; select bank2
 13650  1B51  00C0               	movwf	(?_ldexp+2)^(0+256)
 13651  1B52  0008               	return
 13652  1B53                     l8276:	
 13653  1B53  30FF               	movlw	255
 13654  1B54  0022               	movlb	2	; select bank2
 13655  1B55  00BE               	movwf	?_ldexp^(0+256)
 13656  1B56  307F               	movlw	127
 13657  1B57  00BF               	movwf	(?_ldexp+1)^(0+256)
 13658  1B58  307F               	movlw	127
 13659  1B59  00C0               	movwf	(?_ldexp+2)^(0+256)
 13660  1B5A  0008               	return
 13661  1B5B                     l8280:	
 13662  1B5B  0022               	movlb	2	; select bank2
 13663  1B5C  0842               	movf	(ldexp@newexp+1)^(0+256),w
 13664  1B5D  00C4               	movwf	(??_ldexp^(0+256)+1)
 13665  1B5E  0841               	movf	ldexp@newexp^(0+256),w
 13666  1B5F  00C3               	movwf	??_ldexp^(0+256)
 13667  1B60  0D44               	rlf	(??_ldexp^(0+256)+1),w
 13668  1B61  0CC4               	rrf	(??_ldexp^(0+256)+1),f
 13669  1B62  0CC3               	rrf	??_ldexp^(0+256),f
 13670  1B63  0840               	movf	(ldexp@value^(0+256)+2),w
 13671  1B64  0643               	xorwf	??_ldexp^(0+256),w
 13672  1B65  3980               	andlw	-128
 13673  1B66  0643               	xorwf	??_ldexp^(0+256),w
 13674  1B67  00C0               	movwf	(ldexp@value^(0+256)+2)
 13675  1B68  0841               	movf	ldexp@newexp^(0+256),w
 13676  1B69  3901               	andlw	1
 13677  1B6A  00C3               	movwf	??_ldexp^(0+256)
 13678  1B6B  0CC3               	rrf	??_ldexp^(0+256),f
 13679  1B6C  0CC3               	rrf	??_ldexp^(0+256),f
 13680  1B6D  083F               	movf	(ldexp@value^(0+256)+1),w
 13681  1B6E  0643               	xorwf	??_ldexp^(0+256),w
 13682  1B6F  397F               	andlw	-129
 13683  1B70  0643               	xorwf	??_ldexp^(0+256),w
 13684  1B71  00BF               	movwf	(ldexp@value^(0+256)+1)
 13685  1B72  0008               	return
 13686  1B73                     __end_of_ldexp:	
 13687                           
 13688                           	psect	text31
 13689  2E56                     __ptext31:	
 13690 ;; *************** function ___lltoft *****************
 13691 ;; Defined at:
 13692 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lltoft.c"
 13693 ;; Parameters:    Size  Location     Type
 13694 ;;  c               4    8[BANK1 ] unsigned long 
 13695 ;; Auto vars:     Size  Location     Type
 13696 ;;  exp             1   13[BANK1 ] unsigned char 
 13697 ;; Return value:  Size  Location     Type
 13698 ;;                  3    8[BANK1 ] float 
 13699 ;; Registers used:
 13700 ;;		wreg, status,2, status,0, pclath, cstack
 13701 ;; Tracked objects:
 13702 ;;		On entry : 0/0
 13703 ;;		On exit  : 0/0
 13704 ;;		Unchanged: 0/0
 13705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13706 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13707 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13708 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13709 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13710 ;;Total ram usage:        6 bytes
 13711 ;; Hardware stack levels used:    1
 13712 ;; Hardware stack levels required when called:    4
 13713 ;; This function calls:
 13714 ;;		___ftpack
 13715 ;; This function is called by:
 13716 ;;		_pow
 13717 ;; This function uses a non-reentrant model
 13718 ;;
 13719                           
 13720                           
 13721                           ;psect for function ___lltoft
 13722  2E56                     ___lltoft:	
 13723                           
 13724                           ;incstack = 0
 13725                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
 13726  2E56  308E               	movlw	142
 13727  2E57  0021               	movlb	1	; select bank1
 13728  2E58  00AC               	movwf	??___lltoft^(0+128)
 13729  2E59  082C               	movf	??___lltoft^(0+128),w
 13730  2E5A  00AD               	movwf	___lltoft@exp^(0+128)
 13731  2E5B                     l8398:	
 13732  2E5B  30FF               	movlw	255
 13733  2E5C  052B               	andwf	(___lltoft@c+3)^(0+128),w
 13734  2E5D  1903               	btfsc	3,2
 13735  2E5E  2E6B               	goto	l8400
 13736  2E5F  3001               	movlw	1
 13737  2E60                     u8885:	
 13738  2E60  36AB               	lsrf	(___lltoft@c+3)^(0+128),f
 13739  2E61  0CAA               	rrf	(___lltoft@c+2)^(0+128),f
 13740  2E62  0CA9               	rrf	(___lltoft@c+1)^(0+128),f
 13741  2E63  0CA8               	rrf	___lltoft@c^(0+128),f
 13742  2E64  0B89               	decfsz	9,f
 13743  2E65  2E60               	goto	u8885
 13744  2E66  3001               	movlw	1
 13745  2E67  00AC               	movwf	??___lltoft^(0+128)
 13746  2E68  082C               	movf	??___lltoft^(0+128),w
 13747  2E69  07AD               	addwf	___lltoft@exp^(0+128),f
 13748  2E6A  2E5B               	goto	l8398
 13749  2E6B                     l8400:	
 13750  2E6B  0828               	movf	___lltoft@c^(0+128),w
 13751  2E6C  00A0               	movwf	___ftpack@arg^(0+128)
 13752  2E6D  0829               	movf	(___lltoft@c+1)^(0+128),w
 13753  2E6E  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 13754  2E6F  082A               	movf	(___lltoft@c+2)^(0+128),w
 13755  2E70  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 13756  2E71  082D               	movf	___lltoft@exp^(0+128),w
 13757  2E72  00AC               	movwf	??___lltoft^(0+128)
 13758  2E73  082C               	movf	??___lltoft^(0+128),w
 13759  2E74  00A3               	movwf	___ftpack@exp^(0+128)
 13760  2E75  01A4               	clrf	___ftpack@sign^(0+128)
 13761  2E76  31A5  2533         	fcall	___ftpack
 13762  2E78  0021               	movlb	1	; select bank1
 13763  2E79  0820               	movf	?___ftpack^(0+128),w
 13764  2E7A  00A8               	movwf	?___lltoft^(0+128)
 13765  2E7B  0821               	movf	(?___ftpack+1)^(0+128),w
 13766  2E7C  00A9               	movwf	(?___lltoft+1)^(0+128)
 13767  2E7D  0822               	movf	(?___ftpack+2)^(0+128),w
 13768  2E7E  00AA               	movwf	(?___lltoft+2)^(0+128)
 13769  2E7F  0008               	return
 13770  2E80                     __end_of___lltoft:	
 13771                           
 13772                           	psect	text32
 13773  239E                     __ptext32:	
 13774 ;; *************** function _read_top_tactile *****************
 13775 ;; Defined at:
 13776 ;;		line 50 in file "tactiles.c"
 13777 ;; Parameters:    Size  Location     Type
 13778 ;;		None
 13779 ;; Auto vars:     Size  Location     Type
 13780 ;;		None
 13781 ;; Return value:  Size  Location     Type
 13782 ;;                  1    wreg      void 
 13783 ;; Registers used:
 13784 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13785 ;; Tracked objects:
 13786 ;;		On entry : 0/0
 13787 ;;		On exit  : 0/0
 13788 ;;		Unchanged: 0/0
 13789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13792 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13793 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13794 ;;Total ram usage:        1 bytes
 13795 ;; Hardware stack levels used:    1
 13796 ;; Hardware stack levels required when called:    5
 13797 ;; This function calls:
 13798 ;;		_set_leds_top
 13799 ;;		_wait_ms
 13800 ;; This function is called by:
 13801 ;;		_main
 13802 ;; This function uses a non-reentrant model
 13803 ;;
 13804                           
 13805                           
 13806                           ;psect for function _read_top_tactile
 13807  239E                     _read_top_tactile:	
 13808                           
 13809                           ;tactiles.c: 60: if (PORTDbits.RD5 == 0) {
 13810                           
 13811                           ;incstack = 0
 13812                           ; Regs used in _read_top_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13813  239E  0020               	movlb	0	; select bank0
 13814  239F  1A8F               	btfsc	15,5	;volatile
 13815  23A0  2BA8               	goto	l9168
 13816                           
 13817                           ;tactiles.c: 61: if (topTactile_pressed > 0) {
 13818  23A1  0023               	movlb	3	; select bank3
 13819  23A2  084A               	movf	_topTactile_pressed^(0+384),w
 13820  23A3  1903               	btfsc	3,2
 13821  23A4  2BB3               	goto	l1014
 13822                           
 13823                           ;tactiles.c: 62: topTactile_pressed--;
 13824  23A5  3001               	movlw	1
 13825  23A6  02CA               	subwf	_topTactile_pressed^(0+384),f
 13826                           
 13827                           ;tactiles.c: 63: }
 13828                           ;tactiles.c: 64: } else if (topTactile_pressed < 25*3) {
 13829  23A7  2BB3               	goto	l1014
 13830  23A8                     l9168:	
 13831  23A8  304B               	movlw	75
 13832  23A9  0023               	movlb	3	; select bank3
 13833  23AA  024A               	subwf	_topTactile_pressed^(0+384),w
 13834  23AB  1803               	skipnc
 13835  23AC  2BB3               	goto	l1014
 13836                           
 13837                           ;tactiles.c: 65: topTactile_pressed++;
 13838  23AD  3001               	movlw	1
 13839  23AE  0021               	movlb	1	; select bank1
 13840  23AF  00B2               	movwf	??_read_top_tactile^(0+128)
 13841  23B0  0832               	movf	??_read_top_tactile^(0+128),w
 13842  23B1  0023               	movlb	3	; select bank3
 13843  23B2  07CA               	addwf	_topTactile_pressed^(0+384),f
 13844  23B3                     l1014:	
 13845                           
 13846                           ;tactiles.c: 66: }
 13847                           ;tactiles.c: 71: if (topTactile_pressed == 0) {
 13848  23B3  084A               	movf	_topTactile_pressed^(0+384),w
 13849  23B4  1D03               	btfss	3,2
 13850  23B5  0008               	return
 13851                           
 13852                           ;tactiles.c: 73: top_push_state = top_push_state + 1;
 13853  23B6  0020               	movlb	0	; select bank0
 13854  23B7  084A               	movf	_top_push_state,w
 13855  23B8  3E01               	addlw	1
 13856  23B9  00CA               	movwf	_top_push_state
 13857  23BA  3000               	movlw	0
 13858  23BB  3D4B               	addwfc	_top_push_state+1,w
 13859  23BC  00CB               	movwf	_top_push_state+1
 13860                           
 13861                           ;tactiles.c: 74: if (top_push_state >= 7) {
 13862  23BD  084B               	movf	_top_push_state+1,w
 13863  23BE  3A80               	xorlw	128
 13864  23BF  0021               	movlb	1	; select bank1
 13865  23C0  00B2               	movwf	??_read_top_tactile^(0+128)
 13866  23C1  3080               	movlw	128
 13867  23C2  0232               	subwf	??_read_top_tactile^(0+128),w
 13868  23C3  1D03               	skipz
 13869  23C4  2BC8               	goto	u10225
 13870  23C5  3007               	movlw	7
 13871  23C6  0020               	movlb	0	; select bank0
 13872  23C7  024A               	subwf	_top_push_state,w
 13873  23C8                     u10225:	
 13874  23C8  1C03               	skipc
 13875  23C9  2BCF               	goto	l9178
 13876                           
 13877                           ;tactiles.c: 75: top_push_state = 1;
 13878  23CA  3001               	movlw	1
 13879  23CB  0020               	movlb	0	; select bank0
 13880  23CC  00CA               	movwf	_top_push_state
 13881  23CD  3000               	movlw	0
 13882  23CE  00CB               	movwf	_top_push_state+1
 13883  23CF                     l9178:	
 13884                           
 13885                           ;tactiles.c: 76: }
 13886                           ;tactiles.c: 77: set_leds_top(top_push_state, 1);
 13887  23CF  0020               	movlb	0	; select bank0
 13888  23D0  084B               	movf	_top_push_state+1,w
 13889  23D1  0021               	movlb	1	; select bank1
 13890  23D2  00A1               	movwf	(set_leds_top@x+1)^(0+128)
 13891  23D3  0020               	movlb	0	; select bank0
 13892  23D4  084A               	movf	_top_push_state,w
 13893  23D5  0021               	movlb	1	; select bank1
 13894  23D6  00A0               	movwf	set_leds_top@x^(0+128)
 13895  23D7  3001               	movlw	1
 13896  23D8  00A2               	movwf	set_leds_top@ledState^(0+128)
 13897  23D9  3000               	movlw	0
 13898  23DA  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
 13899  23DB  31A4  24DF  31A3   	fcall	_set_leds_top
 13900                           
 13901                           ;tactiles.c: 78: mod_time_changed = 1;
 13902  23DE  0023               	movlb	3	; select bank3
 13903  23DF  01E4               	clrf	_mod_time_changed^(0+384)
 13904  23E0  0AE4               	incf	_mod_time_changed^(0+384),f
 13905  23E1                     l1018:	
 13906                           ;tactiles.c: 81: while (PORTDbits.RD5 == 0) {
 13907                           
 13908  23E1  0020               	movlb	0	; select bank0
 13909  23E2  1E8F               	btfss	15,5	;volatile
 13910  23E3  2BE1               	goto	l1018
 13911                           
 13912                           ;tactiles.c: 82: }
 13913                           ;tactiles.c: 83: wait_ms(20);
 13914  23E4  3014               	movlw	20
 13915  23E5  0021               	movlb	1	; select bank1
 13916  23E6  00AC               	movwf	wait_ms@timeSec^(0+128)
 13917  23E7  3000               	movlw	0
 13918  23E8  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 13919  23E9  31AF  2798         	fcall	_wait_ms
 13920  23EB  0008               	return
 13921  23EC                     __end_of_read_top_tactile:	
 13922                           
 13923                           	psect	text33
 13924  230B                     __ptext33:	
 13925 ;; *************** function _read_bottom_tactile *****************
 13926 ;; Defined at:
 13927 ;;		line 18 in file "tactiles.c"
 13928 ;; Parameters:    Size  Location     Type
 13929 ;;		None
 13930 ;; Auto vars:     Size  Location     Type
 13931 ;;		None
 13932 ;; Return value:  Size  Location     Type
 13933 ;;                  1    wreg      void 
 13934 ;; Registers used:
 13935 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13936 ;; Tracked objects:
 13937 ;;		On entry : 0/0
 13938 ;;		On exit  : 0/0
 13939 ;;		Unchanged: 0/0
 13940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13942 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13943 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13944 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13945 ;;Total ram usage:        1 bytes
 13946 ;; Hardware stack levels used:    1
 13947 ;; Hardware stack levels required when called:    5
 13948 ;; This function calls:
 13949 ;;		_set_leds_bottom
 13950 ;;		_wait_ms
 13951 ;; This function is called by:
 13952 ;;		_main
 13953 ;; This function uses a non-reentrant model
 13954 ;;
 13955                           
 13956                           
 13957                           ;psect for function _read_bottom_tactile
 13958  230B                     _read_bottom_tactile:	
 13959                           
 13960                           ;tactiles.c: 27: if (PORTDbits.RD6 == 0) {
 13961                           
 13962                           ;incstack = 0
 13963                           ; Regs used in _read_bottom_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13964  230B  0020               	movlb	0	; select bank0
 13965  230C  1B0F               	btfsc	15,6	;volatile
 13966  230D  2B15               	goto	l9146
 13967                           
 13968                           ;tactiles.c: 28: if (bottomTactile_pressed > 0) {
 13969  230E  0023               	movlb	3	; select bank3
 13970  230F  0840               	movf	_bottomTactile_pressed^(0+384),w
 13971  2310  1903               	btfsc	3,2
 13972  2311  2B20               	goto	l1002
 13973                           
 13974                           ;tactiles.c: 29: bottomTactile_pressed--;
 13975  2312  3001               	movlw	1
 13976  2313  02C0               	subwf	_bottomTactile_pressed^(0+384),f
 13977                           
 13978                           ;tactiles.c: 30: }
 13979                           ;tactiles.c: 31: } else if (bottomTactile_pressed < 25*3) {
 13980  2314  2B20               	goto	l1002
 13981  2315                     l9146:	
 13982  2315  304B               	movlw	75
 13983  2316  0023               	movlb	3	; select bank3
 13984  2317  0240               	subwf	_bottomTactile_pressed^(0+384),w
 13985  2318  1803               	skipnc
 13986  2319  2B20               	goto	l1002
 13987                           
 13988                           ;tactiles.c: 32: bottomTactile_pressed++;
 13989  231A  3001               	movlw	1
 13990  231B  0021               	movlb	1	; select bank1
 13991  231C  00B2               	movwf	??_read_bottom_tactile^(0+128)
 13992  231D  0832               	movf	??_read_bottom_tactile^(0+128),w
 13993  231E  0023               	movlb	3	; select bank3
 13994  231F  07C0               	addwf	_bottomTactile_pressed^(0+384),f
 13995  2320                     l1002:	
 13996                           
 13997                           ;tactiles.c: 33: }
 13998                           ;tactiles.c: 36: if (bottomTactile_pressed == 0) {
 13999  2320  0840               	movf	_bottomTactile_pressed^(0+384),w
 14000  2321  1D03               	btfss	3,2
 14001  2322  0008               	return
 14002                           
 14003                           ;tactiles.c: 37: bottom_push_state = bottom_push_state + 1;
 14004  2323  084B               	movf	_bottom_push_state^(0+384),w
 14005  2324  3E01               	addlw	1
 14006  2325  00CB               	movwf	_bottom_push_state^(0+384)
 14007  2326  3000               	movlw	0
 14008  2327  3D4C               	addwfc	(_bottom_push_state+1)^(0+384),w
 14009  2328  00CC               	movwf	(_bottom_push_state+1)^(0+384)
 14010                           
 14011                           ;tactiles.c: 38: if (bottom_push_state > 5) {
 14012  2329  084C               	movf	(_bottom_push_state+1)^(0+384),w
 14013  232A  3A80               	xorlw	128
 14014  232B  0021               	movlb	1	; select bank1
 14015  232C  00B2               	movwf	??_read_bottom_tactile^(0+128)
 14016  232D  3080               	movlw	128
 14017  232E  0232               	subwf	??_read_bottom_tactile^(0+128),w
 14018  232F  1D03               	skipz
 14019  2330  2B34               	goto	u10165
 14020  2331  3006               	movlw	6
 14021  2332  0023               	movlb	3	; select bank3
 14022  2333  024B               	subwf	_bottom_push_state^(0+384),w
 14023  2334                     u10165:	
 14024  2334  1C03               	skipc
 14025  2335  2B3B               	goto	l9156
 14026                           
 14027                           ;tactiles.c: 39: bottom_push_state = 1;
 14028  2336  3001               	movlw	1
 14029  2337  0023               	movlb	3	; select bank3
 14030  2338  00CB               	movwf	_bottom_push_state^(0+384)
 14031  2339  3000               	movlw	0
 14032  233A  00CC               	movwf	(_bottom_push_state^(0+384)+1)
 14033  233B                     l9156:	
 14034                           
 14035                           ;tactiles.c: 40: }
 14036                           ;tactiles.c: 41: modulation_changed = 1;
 14037  233B  0023               	movlb	3	; select bank3
 14038  233C  01C6               	clrf	_modulation_changed^(0+384)
 14039  233D  0AC6               	incf	_modulation_changed^(0+384),f
 14040                           
 14041                           ;tactiles.c: 42: set_leds_bottom(bottom_push_state);
 14042  233E  084C               	movf	(_bottom_push_state+1)^(0+384),w
 14043  233F  0021               	movlb	1	; select bank1
 14044  2340  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
 14045  2341  0023               	movlb	3	; select bank3
 14046  2342  084B               	movf	_bottom_push_state^(0+384),w
 14047  2343  0021               	movlb	1	; select bank1
 14048  2344  00A0               	movwf	set_leds_bottom@x^(0+128)
 14049  2345  31A0  204E  31A3   	fcall	_set_leds_bottom
 14050  2348                     l1006:	
 14051                           ;tactiles.c: 44: while (PORTDbits.RD6 == 0) {
 14052                           
 14053  2348  0020               	movlb	0	; select bank0
 14054  2349  1F0F               	btfss	15,6	;volatile
 14055  234A  2B48               	goto	l1006
 14056                           
 14057                           ;tactiles.c: 45: }
 14058                           ;tactiles.c: 46: wait_ms(20);
 14059  234B  3014               	movlw	20
 14060  234C  0021               	movlb	1	; select bank1
 14061  234D  00AC               	movwf	wait_ms@timeSec^(0+128)
 14062  234E  3000               	movlw	0
 14063  234F  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 14064  2350  31AF  2798         	fcall	_wait_ms
 14065  2352  0008               	return
 14066  2353                     __end_of_read_bottom_tactile:	
 14067                           
 14068                           	psect	text34
 14069  19C6                     __ptext34:	
 14070 ;; *************** function _map *****************
 14071 ;; Defined at:
 14072 ;;		line 177 in file "user.c"
 14073 ;; Parameters:    Size  Location     Type
 14074 ;;  x               3   62[BANK1 ] float 
 14075 ;;  in_min          3   65[BANK1 ] float 
 14076 ;;  in_max          3   68[BANK1 ] float 
 14077 ;;  out_min         3   71[BANK1 ] float 
 14078 ;;  out_max         3   74[BANK1 ] float 
 14079 ;; Auto vars:     Size  Location     Type
 14080 ;;		None
 14081 ;; Return value:  Size  Location     Type
 14082 ;;                  3   62[BANK1 ] float 
 14083 ;; Registers used:
 14084 ;;		wreg, status,2, status,0, pclath, cstack
 14085 ;; Tracked objects:
 14086 ;;		On entry : 0/0
 14087 ;;		On exit  : 0/0
 14088 ;;		Unchanged: 0/0
 14089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14090 ;;      Params:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14091 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14093 ;;      Totals:         0       0      18       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14094 ;;Total ram usage:       18 bytes
 14095 ;; Hardware stack levels used:    1
 14096 ;; Hardware stack levels required when called:    5
 14097 ;; This function calls:
 14098 ;;		___ftadd
 14099 ;;		___ftdiv
 14100 ;;		___ftmul
 14101 ;;		___ftneg
 14102 ;; This function is called by:
 14103 ;;		_main
 14104 ;; This function uses a non-reentrant model
 14105 ;;
 14106                           
 14107                           
 14108                           ;psect for function _map
 14109  19C6                     _map:	
 14110                           
 14111                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 14112                           
 14113                           ;incstack = 0
 14114                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
 14115  19C6  0021               	movlb	1	; select bank1
 14116  19C7  0864               	movf	map@in_max^(0+128),w
 14117  19C8  00C1               	movwf	___ftadd@f1^(0+128)
 14118  19C9  0865               	movf	(map@in_max+1)^(0+128),w
 14119  19CA  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 14120  19CB  0866               	movf	(map@in_max+2)^(0+128),w
 14121  19CC  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 14122  19CD  0861               	movf	map@in_min^(0+128),w
 14123  19CE  00BE               	movwf	___ftneg@f1^(0+128)
 14124  19CF  0862               	movf	(map@in_min+1)^(0+128),w
 14125  19D0  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 14126  19D1  0863               	movf	(map@in_min+2)^(0+128),w
 14127  19D2  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 14128  19D3  31AC  24B5  3199   	fcall	___ftneg
 14129  19D6  0021               	movlb	1	; select bank1
 14130  19D7  083E               	movf	?___ftneg^(0+128),w
 14131  19D8  00C4               	movwf	___ftadd@f2^(0+128)
 14132  19D9  083F               	movf	(?___ftneg+1)^(0+128),w
 14133  19DA  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 14134  19DB  0840               	movf	(?___ftneg+2)^(0+128),w
 14135  19DC  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 14136  19DD  319F  270A  3199   	fcall	___ftadd
 14137  19E0  0021               	movlb	1	; select bank1
 14138  19E1  0841               	movf	?___ftadd^(0+128),w
 14139  19E2  00CE               	movwf	___ftdiv@f2^(0+128)
 14140  19E3  0842               	movf	(?___ftadd+1)^(0+128),w
 14141  19E4  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 14142  19E5  0843               	movf	(?___ftadd+2)^(0+128),w
 14143  19E6  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 14144  19E7  086A               	movf	map@out_max^(0+128),w
 14145  19E8  00C1               	movwf	___ftadd@f1^(0+128)
 14146  19E9  086B               	movf	(map@out_max+1)^(0+128),w
 14147  19EA  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 14148  19EB  086C               	movf	(map@out_max+2)^(0+128),w
 14149  19EC  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 14150  19ED  0867               	movf	map@out_min^(0+128),w
 14151  19EE  00BE               	movwf	___ftneg@f1^(0+128)
 14152  19EF  0868               	movf	(map@out_min+1)^(0+128),w
 14153  19F0  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 14154  19F1  0869               	movf	(map@out_min+2)^(0+128),w
 14155  19F2  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 14156  19F3  31AC  24B5  3199   	fcall	___ftneg
 14157  19F6  0021               	movlb	1	; select bank1
 14158  19F7  083E               	movf	?___ftneg^(0+128),w
 14159  19F8  00C4               	movwf	___ftadd@f2^(0+128)
 14160  19F9  083F               	movf	(?___ftneg+1)^(0+128),w
 14161  19FA  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 14162  19FB  0840               	movf	(?___ftneg+2)^(0+128),w
 14163  19FC  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 14164  19FD  319F  270A  3199   	fcall	___ftadd
 14165  1A00  0021               	movlb	1	; select bank1
 14166  1A01  0841               	movf	?___ftadd^(0+128),w
 14167  1A02  00AE               	movwf	___ftmul@f1^(0+128)
 14168  1A03  0842               	movf	(?___ftadd+1)^(0+128),w
 14169  1A04  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 14170  1A05  0843               	movf	(?___ftadd+2)^(0+128),w
 14171  1A06  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 14172  1A07  085E               	movf	map@x^(0+128),w
 14173  1A08  00C1               	movwf	___ftadd@f1^(0+128)
 14174  1A09  085F               	movf	(map@x+1)^(0+128),w
 14175  1A0A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 14176  1A0B  0860               	movf	(map@x+2)^(0+128),w
 14177  1A0C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 14178  1A0D  0861               	movf	map@in_min^(0+128),w
 14179  1A0E  00BE               	movwf	___ftneg@f1^(0+128)
 14180  1A0F  0862               	movf	(map@in_min+1)^(0+128),w
 14181  1A10  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 14182  1A11  0863               	movf	(map@in_min+2)^(0+128),w
 14183  1A12  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 14184  1A13  31AC  24B5  3199   	fcall	___ftneg
 14185  1A16  0021               	movlb	1	; select bank1
 14186  1A17  083E               	movf	?___ftneg^(0+128),w
 14187  1A18  00C4               	movwf	___ftadd@f2^(0+128)
 14188  1A19  083F               	movf	(?___ftneg+1)^(0+128),w
 14189  1A1A  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 14190  1A1B  0840               	movf	(?___ftneg+2)^(0+128),w
 14191  1A1C  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 14192  1A1D  319F  270A  3199   	fcall	___ftadd
 14193  1A20  0021               	movlb	1	; select bank1
 14194  1A21  0841               	movf	?___ftadd^(0+128),w
 14195  1A22  00B1               	movwf	___ftmul@f2^(0+128)
 14196  1A23  0842               	movf	(?___ftadd+1)^(0+128),w
 14197  1A24  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 14198  1A25  0843               	movf	(?___ftadd+2)^(0+128),w
 14199  1A26  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 14200  1A27  319C  24BA  3199   	fcall	___ftmul
 14201  1A2A  0021               	movlb	1	; select bank1
 14202  1A2B  082E               	movf	?___ftmul^(0+128),w
 14203  1A2C  00D1               	movwf	___ftdiv@f1^(0+128)
 14204  1A2D  082F               	movf	(?___ftmul+1)^(0+128),w
 14205  1A2E  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 14206  1A2F  0830               	movf	(?___ftmul+2)^(0+128),w
 14207  1A30  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 14208  1A31  319C  2411  3199   	fcall	___ftdiv
 14209  1A34  0021               	movlb	1	; select bank1
 14210  1A35  084E               	movf	?___ftdiv^(0+128),w
 14211  1A36  00ED               	movwf	_map$2864^(0+128)
 14212  1A37  084F               	movf	(?___ftdiv+1)^(0+128),w
 14213  1A38  00EE               	movwf	(_map$2864+1)^(0+128)
 14214  1A39  0850               	movf	(?___ftdiv+2)^(0+128),w
 14215  1A3A  00EF               	movwf	(_map$2864+2)^(0+128)
 14216                           
 14217                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 14218  1A3B  0867               	movf	map@out_min^(0+128),w
 14219  1A3C  00C1               	movwf	___ftadd@f1^(0+128)
 14220  1A3D  0868               	movf	(map@out_min+1)^(0+128),w
 14221  1A3E  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 14222  1A3F  0869               	movf	(map@out_min+2)^(0+128),w
 14223  1A40  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 14224  1A41  086D               	movf	_map$2864^(0+128),w
 14225  1A42  00C4               	movwf	___ftadd@f2^(0+128)
 14226  1A43  086E               	movf	(_map$2864+1)^(0+128),w
 14227  1A44  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 14228  1A45  086F               	movf	(_map$2864+2)^(0+128),w
 14229  1A46  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 14230  1A47  319F  270A         	fcall	___ftadd
 14231  1A49  0021               	movlb	1	; select bank1
 14232  1A4A  0841               	movf	?___ftadd^(0+128),w
 14233  1A4B  00DE               	movwf	?_map^(0+128)
 14234  1A4C  0842               	movf	(?___ftadd+1)^(0+128),w
 14235  1A4D  00DF               	movwf	(?_map+1)^(0+128)
 14236  1A4E  0843               	movf	(?___ftadd+2)^(0+128),w
 14237  1A4F  00E0               	movwf	(?_map+2)^(0+128)
 14238  1A50  0008               	return
 14239  1A51                     __end_of_map:	
 14240                           
 14241                           	psect	text35
 14242  2CE0                     __ptext35:	
 14243 ;; *************** function _initSwitchBypass *****************
 14244 ;; Defined at:
 14245 ;;		line 29 in file "SwitchBypass.c"
 14246 ;; Parameters:    Size  Location     Type
 14247 ;;		None
 14248 ;; Auto vars:     Size  Location     Type
 14249 ;;  initState       2   26[BANK1 ] int 
 14250 ;; Return value:  Size  Location     Type
 14251 ;;                  1    wreg      void 
 14252 ;; Registers used:
 14253 ;;		wreg, status,2, status,0, pclath, cstack
 14254 ;; Tracked objects:
 14255 ;;		On entry : 0/0
 14256 ;;		On exit  : 0/0
 14257 ;;		Unchanged: 0/0
 14258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14260 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14262 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14263 ;;Total ram usage:        2 bytes
 14264 ;; Hardware stack levels used:    1
 14265 ;; Hardware stack levels required when called:    7
 14266 ;; This function calls:
 14267 ;;		_getSwitchBypassState
 14268 ;;		_setSwitchBypassState
 14269 ;; This function is called by:
 14270 ;;		_main
 14271 ;; This function uses a non-reentrant model
 14272 ;;
 14273                           
 14274                           
 14275                           ;psect for function _initSwitchBypass
 14276  2CE0                     _initSwitchBypass:	
 14277                           
 14278                           ;SwitchBypass.c: 30: int initState = getSwitchBypassState();
 14279                           
 14280                           ;incstack = 0
 14281                           ; Regs used in _initSwitchBypass: [wreg+status,2+status,0+pclath+cstack]
 14282  2CE0  31AC  24A4  31AC   	fcall	_getSwitchBypassState
 14283  2CE3  0021               	movlb	1	; select bank1
 14284  2CE4  0821               	movf	(?_getSwitchBypassState+1)^(0+128),w
 14285  2CE5  00BB               	movwf	(initSwitchBypass@initState+1)^(0+128)
 14286  2CE6  0820               	movf	?_getSwitchBypassState^(0+128),w
 14287  2CE7  00BA               	movwf	initSwitchBypass@initState^(0+128)
 14288                           
 14289                           ;SwitchBypass.c: 31: setSwitchBypassState(initState);
 14290  2CE8  083B               	movf	(initSwitchBypass@initState+1)^(0+128),w
 14291  2CE9  00B7               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
 14292  2CEA  083A               	movf	initSwitchBypass@initState^(0+128),w
 14293  2CEB  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
 14294  2CEC  31AD  257B         	fcall	_setSwitchBypassState
 14295  2CEE  0008               	return
 14296  2CEF                     __end_of_initSwitchBypass:	
 14297                           
 14298                           	psect	text36
 14299  2D7B                     __ptext36:	
 14300 ;; *************** function _setSwitchBypassState *****************
 14301 ;; Defined at:
 14302 ;;		line 141 in file "SwitchBypass.c"
 14303 ;; Parameters:    Size  Location     Type
 14304 ;;  f_state         2   22[BANK1 ] int 
 14305 ;; Auto vars:     Size  Location     Type
 14306 ;;		None
 14307 ;; Return value:  Size  Location     Type
 14308 ;;                  1    wreg      void 
 14309 ;; Registers used:
 14310 ;;		wreg, status,2, status,0, pclath, cstack
 14311 ;; Tracked objects:
 14312 ;;		On entry : 0/0
 14313 ;;		On exit  : 0/0
 14314 ;;		Unchanged: 0/0
 14315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14316 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14317 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14318 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14319 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14320 ;;Total ram usage:        4 bytes
 14321 ;; Hardware stack levels used:    1
 14322 ;; Hardware stack levels required when called:    6
 14323 ;; This function calls:
 14324 ;;		_setSwitchBypassRelays
 14325 ;; This function is called by:
 14326 ;;		_initSwitchBypass
 14327 ;;		_updateSwitchBypass
 14328 ;; This function uses a non-reentrant model
 14329 ;;
 14330                           
 14331                           
 14332                           ;psect for function _setSwitchBypassState
 14333  2D7B                     _setSwitchBypassState:	
 14334                           
 14335                           ;SwitchBypass.c: 142: if (switchBypass_state == f_state) {return;}
 14336                           
 14337                           ;incstack = 0
 14338                           ; Regs used in _setSwitchBypassState: [wreg+status,2+status,0+pclath+cstack]
 14339  2D7B  0020               	movlb	0	; select bank0
 14340  2D7C  0850               	movf	_switchBypass_state,w
 14341  2D7D  0021               	movlb	1	; select bank1
 14342  2D7E  00B8               	movwf	??_setSwitchBypassState^(0+128)
 14343  2D7F  01B9               	clrf	(??_setSwitchBypassState^(0+128)+1)
 14344  2D80  0837               	movf	(setSwitchBypassState@f_state+1)^(0+128),w
 14345  2D81  0639               	xorwf	(??_setSwitchBypassState+1)^(0+128),w
 14346  2D82  1D03               	skipz
 14347  2D83  2D86               	goto	u9085
 14348  2D84  0836               	movf	setSwitchBypassState@f_state^(0+128),w
 14349  2D85  0638               	xorwf	??_setSwitchBypassState^(0+128),w
 14350  2D86                     u9085:	
 14351  2D86  1903               	btfsc	3,2
 14352  2D87  0008               	return
 14353                           
 14354                           ;SwitchBypass.c: 144: LATBbits.LATB2 = f_state;
 14355  2D88  0C36               	rrf	setSwitchBypassState@f_state^(0+128),w
 14356  2D89  0022               	movlb	2	; select bank2
 14357  2D8A  1C03               	skipc
 14358  2D8B  110D               	bcf	13,2	;volatile
 14359  2D8C  1803               	skipnc
 14360  2D8D  150D               	bsf	13,2	;volatile
 14361                           
 14362                           ;SwitchBypass.c: 145: LATBbits.LATB3 = 0;
 14363  2D8E  118D               	bcf	13,3	;volatile
 14364                           
 14365                           ;SwitchBypass.c: 146: setSwitchBypassRelays(f_state);
 14366  2D8F  0021               	movlb	1	; select bank1
 14367  2D90  0837               	movf	(setSwitchBypassState@f_state+1)^(0+128),w
 14368  2D91  00B3               	movwf	(setSwitchBypassRelays@f_state+1)^(0+128)
 14369  2D92  0836               	movf	setSwitchBypassState@f_state^(0+128),w
 14370  2D93  00B2               	movwf	setSwitchBypassRelays@f_state^(0+128)
 14371  2D94  31AF  27CA         	fcall	_setSwitchBypassRelays
 14372  2D96  0008               	return
 14373  2D97                     __end_of_setSwitchBypassState:	
 14374                           
 14375                           	psect	text37
 14376  2FCA                     __ptext37:	
 14377 ;; *************** function _setSwitchBypassRelays *****************
 14378 ;; Defined at:
 14379 ;;		line 149 in file "SwitchBypass.c"
 14380 ;; Parameters:    Size  Location     Type
 14381 ;;  f_state         2   18[BANK1 ] int 
 14382 ;; Auto vars:     Size  Location     Type
 14383 ;;		None
 14384 ;; Return value:  Size  Location     Type
 14385 ;;                  1    wreg      void 
 14386 ;; Registers used:
 14387 ;;		wreg, status,2, status,0, pclath, cstack
 14388 ;; Tracked objects:
 14389 ;;		On entry : 0/0
 14390 ;;		On exit  : 0/0
 14391 ;;		Unchanged: 0/0
 14392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14393 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14395 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14396 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14397 ;;Total ram usage:        4 bytes
 14398 ;; Hardware stack levels used:    1
 14399 ;; Hardware stack levels required when called:    5
 14400 ;; This function calls:
 14401 ;;		_updateSwitchBypassState
 14402 ;;		_wait_ms
 14403 ;; This function is called by:
 14404 ;;		_updateSwitchBypass
 14405 ;;		_setSwitchBypassState
 14406 ;; This function uses a non-reentrant model
 14407 ;;
 14408                           
 14409                           
 14410                           ;psect for function _setSwitchBypassRelays
 14411  2FCA                     _setSwitchBypassRelays:	
 14412                           
 14413                           ;SwitchBypass.c: 150: switchBypass_state = f_state;
 14414                           
 14415                           ;incstack = 0
 14416                           ; Regs used in _setSwitchBypassRelays: [wreg+status,2+status,0+pclath+cstack]
 14417  2FCA  0021               	movlb	1	; select bank1
 14418  2FCB  0832               	movf	setSwitchBypassRelays@f_state^(0+128),w
 14419  2FCC  00B4               	movwf	??_setSwitchBypassRelays^(0+128)
 14420  2FCD  0834               	movf	??_setSwitchBypassRelays^(0+128),w
 14421  2FCE  0020               	movlb	0	; select bank0
 14422  2FCF  00D0               	movwf	_switchBypass_state
 14423                           
 14424                           ;SwitchBypass.c: 151: LATGbits.LATG2 = f_state;
 14425  2FD0  0021               	movlb	1	; select bank1
 14426  2FD1  0C32               	rrf	setSwitchBypassRelays@f_state^(0+128),w
 14427  2FD2  0027               	movlb	7	; select bank7
 14428  2FD3  1C03               	skipc
 14429  2FD4  110D               	bcf	13,2	;volatile
 14430  2FD5  1803               	skipnc
 14431  2FD6  150D               	bsf	13,2	;volatile
 14432                           
 14433                           ;SwitchBypass.c: 152: LATGbits.LATG1 = !f_state;
 14434  2FD7  0021               	movlb	1	; select bank1
 14435  2FD8  0832               	movf	setSwitchBypassRelays@f_state^(0+128),w
 14436  2FD9  0433               	iorwf	(setSwitchBypassRelays@f_state+1)^(0+128),w
 14437  2FDA  1D03               	btfss	3,2
 14438  2FDB  2FDF               	goto	u8780
 14439  2FDC  0027               	movlb	7	; select bank7
 14440  2FDD  148D               	bsf	13,1	;volatile
 14441  2FDE  2FE1               	goto	l8324
 14442  2FDF                     u8780:	
 14443  2FDF  0027               	movlb	7	; select bank7
 14444  2FE0  108D               	bcf	13,1	;volatile
 14445  2FE1                     l8324:	
 14446                           
 14447                           ;SwitchBypass.c: 154: wait_ms(20);
 14448  2FE1  3014               	movlw	20
 14449  2FE2  0021               	movlb	1	; select bank1
 14450  2FE3  00AC               	movwf	wait_ms@timeSec^(0+128)
 14451  2FE4  3000               	movlw	0
 14452  2FE5  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 14453  2FE6  31AF  2798  31AF   	fcall	_wait_ms
 14454                           
 14455                           ;SwitchBypass.c: 156: LATGbits.LATG2 = 0;
 14456  2FE9  0027               	movlb	7	; select bank7
 14457  2FEA  110D               	bcf	13,2	;volatile
 14458                           
 14459                           ;SwitchBypass.c: 157: LATGbits.LATG1 = 0;
 14460  2FEB  108D               	bcf	13,1	;volatile
 14461                           
 14462                           ;SwitchBypass.c: 159: updateSwitchBypassState(switchBypass_state);
 14463  2FEC  0020               	movlb	0	; select bank0
 14464  2FED  0850               	movf	_switchBypass_state,w
 14465  2FEE  0021               	movlb	1	; select bank1
 14466  2FEF  00B4               	movwf	??_setSwitchBypassRelays^(0+128)
 14467  2FF0  01B5               	clrf	(??_setSwitchBypassRelays^(0+128)+1)
 14468  2FF1  0834               	movf	??_setSwitchBypassRelays^(0+128),w
 14469  2FF2  00A0               	movwf	updateSwitchBypassState@state^(0+128)
 14470  2FF3  0835               	movf	(??_setSwitchBypassRelays+1)^(0+128),w
 14471  2FF4  00A1               	movwf	(updateSwitchBypassState@state+1)^(0+128)
 14472  2FF5  3180  2003  31AF   	fcall	_updateSwitchBypassState
 14473                           
 14474                           ;SwitchBypass.c: 160: wait_ms(20);
 14475  2FF8  3014               	movlw	20
 14476  2FF9  0021               	movlb	1	; select bank1
 14477  2FFA  00AC               	movwf	wait_ms@timeSec^(0+128)
 14478  2FFB  3000               	movlw	0
 14479  2FFC  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 14480  2FFD  31AF  2798         	fcall	_wait_ms
 14481  2FFF  0008               	return
 14482  3000                     __end_of_setSwitchBypassRelays:	
 14483                           
 14484                           	psect	text38
 14485  2F98                     __ptext38:	
 14486 ;; *************** function _wait_ms *****************
 14487 ;; Defined at:
 14488 ;;		line 23 in file "system.c"
 14489 ;; Parameters:    Size  Location     Type
 14490 ;;  timeSec         2   12[BANK1 ] unsigned int 
 14491 ;; Auto vars:     Size  Location     Type
 14492 ;;  timemsl         4   14[BANK1 ] long 
 14493 ;; Return value:  Size  Location     Type
 14494 ;;                  1    wreg      void 
 14495 ;; Registers used:
 14496 ;;		wreg, status,2, status,0, pclath, cstack
 14497 ;; Tracked objects:
 14498 ;;		On entry : 0/0
 14499 ;;		On exit  : 0/0
 14500 ;;		Unchanged: 0/0
 14501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14502 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14503 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14505 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14506 ;;Total ram usage:        6 bytes
 14507 ;; Hardware stack levels used:    1
 14508 ;; Hardware stack levels required when called:    4
 14509 ;; This function calls:
 14510 ;;		___lmul
 14511 ;; This function is called by:
 14512 ;;		_ring_tactiles
 14513 ;;		_solidring_tactiles
 14514 ;;		_read_bottom_tactile
 14515 ;;		_read_top_tactile
 14516 ;;		_setSwitchBypassRelays
 14517 ;;		_setDoublePressState
 14518 ;;		_showError_Alternating
 14519 ;;		_show_error
 14520 ;;		_show_cancel
 14521 ;;		_star_tactiles
 14522 ;;		_initExpModeState
 14523 ;; This function uses a non-reentrant model
 14524 ;;
 14525                           
 14526                           
 14527                           ;psect for function _wait_ms
 14528  2F98                     _wait_ms:	
 14529                           
 14530                           ;system.c: 25: long timemsl = 0;
 14531                           
 14532                           ;incstack = 0
 14533                           ; Regs used in _wait_ms: [wreg+status,2+status,0+pclath+cstack]
 14534  2F98  3000               	movlw	0
 14535  2F99  0021               	movlb	1	; select bank1
 14536  2F9A  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 14537  2F9B  3000               	movlw	0
 14538  2F9C  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 14539  2F9D  3000               	movlw	0
 14540  2F9E  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 14541  2F9F  3000               	movlw	0
 14542  2FA0  00AE               	movwf	wait_ms@timemsl^(0+128)
 14543                           
 14544                           ;system.c: 26: timemsl = timeSec * 1000l;
 14545  2FA1  082C               	movf	wait_ms@timeSec^(0+128),w
 14546  2FA2  00A0               	movwf	___lmul@multiplier^(0+128)
 14547  2FA3  082D               	movf	(wait_ms@timeSec+1)^(0+128),w
 14548  2FA4  00A1               	movwf	(___lmul@multiplier^(0+128)+1)
 14549  2FA5  01A2               	clrf	(___lmul@multiplier^(0+128)+2)
 14550  2FA6  01A3               	clrf	(___lmul@multiplier^(0+128)+3)
 14551  2FA7  3000               	movlw	0
 14552  2FA8  00A7               	movwf	(___lmul@multiplicand+3)^(0+128)
 14553  2FA9  3000               	movlw	0
 14554  2FAA  00A6               	movwf	(___lmul@multiplicand+2)^(0+128)
 14555  2FAB  3003               	movlw	3
 14556  2FAC  00A5               	movwf	(___lmul@multiplicand+1)^(0+128)
 14557  2FAD  30E8               	movlw	232
 14558  2FAE  00A4               	movwf	___lmul@multiplicand^(0+128)
 14559  2FAF  31AF  2768  31AF   	fcall	___lmul
 14560  2FB2  0021               	movlb	1	; select bank1
 14561  2FB3  0823               	movf	(?___lmul+3)^(0+128),w
 14562  2FB4  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 14563  2FB5  0822               	movf	(?___lmul+2)^(0+128),w
 14564  2FB6  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 14565  2FB7  0821               	movf	(?___lmul+1)^(0+128),w
 14566  2FB8  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 14567  2FB9  0820               	movf	?___lmul^(0+128),w
 14568  2FBA  00AE               	movwf	wait_ms@timemsl^(0+128)
 14569  2FBB                     l402:	
 14570                           ;system.c: 27: for( ; timemsl; timemsl--);
 14571                           
 14572  2FBB  0831               	movf	(wait_ms@timemsl+3)^(0+128),w
 14573  2FBC  0430               	iorwf	(wait_ms@timemsl+2)^(0+128),w
 14574  2FBD  042F               	iorwf	(wait_ms@timemsl+1)^(0+128),w
 14575  2FBE  042E               	iorwf	wait_ms@timemsl^(0+128),w
 14576  2FBF  1903               	btfsc	3,2
 14577  2FC0  0008               	return
 14578  2FC1  30FF               	movlw	255
 14579  2FC2  07AE               	addwf	wait_ms@timemsl^(0+128),f
 14580  2FC3  30FF               	movlw	255
 14581  2FC4  3DAF               	addwfc	(wait_ms@timemsl+1)^(0+128),f
 14582  2FC5  30FF               	movlw	255
 14583  2FC6  3DB0               	addwfc	(wait_ms@timemsl+2)^(0+128),f
 14584  2FC7  30FF               	movlw	255
 14585  2FC8  3DB1               	addwfc	(wait_ms@timemsl+3)^(0+128),f
 14586  2FC9  2FBB               	goto	l402
 14587  2FCA                     __end_of_wait_ms:	
 14588                           
 14589                           	psect	text39
 14590  2F68                     __ptext39:	
 14591 ;; *************** function ___lmul *****************
 14592 ;; Defined at:
 14593 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 14594 ;; Parameters:    Size  Location     Type
 14595 ;;  multiplier      4    0[BANK1 ] unsigned long 
 14596 ;;  multiplicand    4    4[BANK1 ] unsigned long 
 14597 ;; Auto vars:     Size  Location     Type
 14598 ;;  product         4    8[BANK1 ] unsigned long 
 14599 ;; Return value:  Size  Location     Type
 14600 ;;                  4    0[BANK1 ] unsigned long 
 14601 ;; Registers used:
 14602 ;;		wreg, status,2, status,0
 14603 ;; Tracked objects:
 14604 ;;		On entry : 0/0
 14605 ;;		On exit  : 0/0
 14606 ;;		Unchanged: 0/0
 14607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14608 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14609 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14611 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14612 ;;Total ram usage:       12 bytes
 14613 ;; Hardware stack levels used:    1
 14614 ;; Hardware stack levels required when called:    3
 14615 ;; This function calls:
 14616 ;;		Nothing
 14617 ;; This function is called by:
 14618 ;;		_wait_ms
 14619 ;; This function uses a non-reentrant model
 14620 ;;
 14621                           
 14622                           
 14623                           ;psect for function ___lmul
 14624  2F68                     ___lmul:	
 14625                           
 14626                           ;incstack = 0
 14627                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 14628  2F68  3000               	movlw	0
 14629  2F69  0021               	movlb	1	; select bank1
 14630  2F6A  00AB               	movwf	(___lmul@product+3)^(0+128)
 14631  2F6B  3000               	movlw	0
 14632  2F6C  00AA               	movwf	(___lmul@product+2)^(0+128)
 14633  2F6D  3000               	movlw	0
 14634  2F6E  00A9               	movwf	(___lmul@product+1)^(0+128)
 14635  2F6F  3000               	movlw	0
 14636  2F70  00A8               	movwf	___lmul@product^(0+128)
 14637  2F71                     l7770:	
 14638  2F71  1C20               	btfss	___lmul@multiplier^(0+128),0
 14639  2F72  2F7B               	goto	l7774
 14640  2F73  0824               	movf	___lmul@multiplicand^(0+128),w
 14641  2F74  07A8               	addwf	___lmul@product^(0+128),f
 14642  2F75  0825               	movf	(___lmul@multiplicand+1)^(0+128),w
 14643  2F76  3DA9               	addwfc	(___lmul@product+1)^(0+128),f
 14644  2F77  0826               	movf	(___lmul@multiplicand+2)^(0+128),w
 14645  2F78  3DAA               	addwfc	(___lmul@product+2)^(0+128),f
 14646  2F79  0827               	movf	(___lmul@multiplicand+3)^(0+128),w
 14647  2F7A  3DAB               	addwfc	(___lmul@product+3)^(0+128),f
 14648  2F7B                     l7774:	
 14649  2F7B  3001               	movlw	1
 14650  2F7C                     u7815:	
 14651  2F7C  35A4               	lslf	___lmul@multiplicand^(0+128),f
 14652  2F7D  0DA5               	rlf	(___lmul@multiplicand+1)^(0+128),f
 14653  2F7E  0DA6               	rlf	(___lmul@multiplicand+2)^(0+128),f
 14654  2F7F  0DA7               	rlf	(___lmul@multiplicand+3)^(0+128),f
 14655  2F80  0B89               	decfsz	9,f
 14656  2F81  2F7C               	goto	u7815
 14657  2F82  3001               	movlw	1
 14658  2F83                     u7825:	
 14659  2F83  36A3               	lsrf	(___lmul@multiplier+3)^(0+128),f
 14660  2F84  0CA2               	rrf	(___lmul@multiplier+2)^(0+128),f
 14661  2F85  0CA1               	rrf	(___lmul@multiplier+1)^(0+128),f
 14662  2F86  0CA0               	rrf	___lmul@multiplier^(0+128),f
 14663  2F87  0B89               	decfsz	9,f
 14664  2F88  2F83               	goto	u7825
 14665  2F89  0823               	movf	(___lmul@multiplier+3)^(0+128),w
 14666  2F8A  0422               	iorwf	(___lmul@multiplier+2)^(0+128),w
 14667  2F8B  0421               	iorwf	(___lmul@multiplier+1)^(0+128),w
 14668  2F8C  0420               	iorwf	___lmul@multiplier^(0+128),w
 14669  2F8D  1D03               	skipz
 14670  2F8E  2F71               	goto	l7770
 14671  2F8F  082B               	movf	(___lmul@product+3)^(0+128),w
 14672  2F90  00A3               	movwf	(?___lmul+3)^(0+128)
 14673  2F91  082A               	movf	(___lmul@product+2)^(0+128),w
 14674  2F92  00A2               	movwf	(?___lmul+2)^(0+128)
 14675  2F93  0829               	movf	(___lmul@product+1)^(0+128),w
 14676  2F94  00A1               	movwf	(?___lmul+1)^(0+128)
 14677  2F95  0828               	movf	___lmul@product^(0+128),w
 14678  2F96  00A0               	movwf	?___lmul^(0+128)
 14679  2F97  0008               	return
 14680  2F98                     __end_of___lmul:	
 14681                           
 14682                           	psect	text40
 14683  0003                     __ptext40:	
 14684 ;; *************** function _updateSwitchBypassState *****************
 14685 ;; Defined at:
 14686 ;;		line 96 in file "state_manager.c"
 14687 ;; Parameters:    Size  Location     Type
 14688 ;;  state           2    0[BANK1 ] int 
 14689 ;; Auto vars:     Size  Location     Type
 14690 ;;		None
 14691 ;; Return value:  Size  Location     Type
 14692 ;;                  1    wreg      void 
 14693 ;; Registers used:
 14694 ;;		None
 14695 ;; Tracked objects:
 14696 ;;		On entry : 0/0
 14697 ;;		On exit  : 0/0
 14698 ;;		Unchanged: 0/0
 14699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14700 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14703 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14704 ;;Total ram usage:        2 bytes
 14705 ;; Hardware stack levels used:    1
 14706 ;; Hardware stack levels required when called:    3
 14707 ;; This function calls:
 14708 ;;		Nothing
 14709 ;; This function is called by:
 14710 ;;		_setSwitchBypassRelays
 14711 ;; This function uses a non-reentrant model
 14712 ;;
 14713                           
 14714                           
 14715                           ;psect for function _updateSwitchBypassState
 14716  0003                     _updateSwitchBypassState:	
 14717                           
 14718                           ;incstack = 0
 14719                           ; Regs used in _updateSwitchBypassState: []
 14720  0003  0008               	return
 14721  0004                     __end_of_updateSwitchBypassState:	
 14722                           
 14723                           	psect	text41
 14724  2CA4                     __ptext41:	
 14725 ;; *************** function _getSwitchBypassState *****************
 14726 ;; Defined at:
 14727 ;;		line 103 in file "state_manager.c"
 14728 ;; Parameters:    Size  Location     Type
 14729 ;;		None
 14730 ;; Auto vars:     Size  Location     Type
 14731 ;;		None
 14732 ;; Return value:  Size  Location     Type
 14733 ;;                  2    0[BANK1 ] int 
 14734 ;; Registers used:
 14735 ;;		status,2
 14736 ;; Tracked objects:
 14737 ;;		On entry : 0/0
 14738 ;;		On exit  : 0/0
 14739 ;;		Unchanged: 0/0
 14740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14741 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14744 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14745 ;;Total ram usage:        2 bytes
 14746 ;; Hardware stack levels used:    1
 14747 ;; Hardware stack levels required when called:    3
 14748 ;; This function calls:
 14749 ;;		Nothing
 14750 ;; This function is called by:
 14751 ;;		_initSwitchBypass
 14752 ;; This function uses a non-reentrant model
 14753 ;;
 14754                           
 14755                           
 14756                           ;psect for function _getSwitchBypassState
 14757  2CA4                     _getSwitchBypassState:	
 14758                           
 14759                           ;state_manager.c: 108: return 0;
 14760                           
 14761                           ;incstack = 0
 14762                           ; Regs used in _getSwitchBypassState: [status,2]
 14763  2CA4  0021               	movlb	1	; select bank1
 14764  2CA5  01A0               	clrf	?_getSwitchBypassState^(0+128)
 14765  2CA6  01A1               	clrf	(?_getSwitchBypassState+1)^(0+128)
 14766  2CA7  0008               	return
 14767  2CA8                     __end_of_getSwitchBypassState:	
 14768                           
 14769                           	psect	text42
 14770  2353                     __ptext42:	
 14771 ;; *************** function _getModulationDelayTime *****************
 14772 ;; Defined at:
 14773 ;;		line 36 in file "modulation.c"
 14774 ;; Parameters:    Size  Location     Type
 14775 ;;		None
 14776 ;; Auto vars:     Size  Location     Type
 14777 ;;		None
 14778 ;; Return value:  Size  Location     Type
 14779 ;;                  1    wreg      void 
 14780 ;; Registers used:
 14781 ;;		wreg, status,2, status,0, pclath, cstack
 14782 ;; Tracked objects:
 14783 ;;		On entry : 0/0
 14784 ;;		On exit  : 0/0
 14785 ;;		Unchanged: 0/0
 14786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14790 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14791 ;;Total ram usage:        0 bytes
 14792 ;; Hardware stack levels used:    1
 14793 ;; Hardware stack levels required when called:    5
 14794 ;; This function calls:
 14795 ;;		___altoft
 14796 ;;		___awtoft
 14797 ;;		___ftdiv
 14798 ;;		___fttol
 14799 ;;		_getModulationSubdivision
 14800 ;; This function is called by:
 14801 ;;		_main
 14802 ;; This function uses a non-reentrant model
 14803 ;;
 14804                           
 14805                           
 14806                           ;psect for function _getModulationDelayTime
 14807  2353                     _getModulationDelayTime:	
 14808                           
 14809                           ;modulation.c: 37: adjust_mod_delay = 0;
 14810                           
 14811                           ;incstack = 0
 14812                           ; Regs used in _getModulationDelayTime: [wreg+status,2+status,0+pclath+cstack]
 14813  2353  0024               	movlb	4	; select bank4
 14814  2354  01DD               	clrf	_adjust_mod_delay^(0+512)
 14815                           
 14816                           ;modulation.c: 38: getModulationSubdivision();
 14817  2355  31AF  2709  31A3   	fcall	_getModulationSubdivision
 14818                           
 14819                           ;modulation.c: 39: mod_delay_time = (int)((float)delay_time/(float)modulationSubdivision
      +                          );
 14820  2358  0020               	movlb	0	; select bank0
 14821  2359  0847               	movf	_delay_time+3,w	;volatile
 14822  235A  0021               	movlb	1	; select bank1
 14823  235B  00AB               	movwf	(___altoft@c+3)^(0+128)
 14824  235C  0020               	movlb	0	; select bank0
 14825  235D  0846               	movf	_delay_time+2,w	;volatile
 14826  235E  0021               	movlb	1	; select bank1
 14827  235F  00AA               	movwf	(___altoft@c+2)^(0+128)
 14828  2360  0020               	movlb	0	; select bank0
 14829  2361  0845               	movf	_delay_time+1,w	;volatile
 14830  2362  0021               	movlb	1	; select bank1
 14831  2363  00A9               	movwf	(___altoft@c+1)^(0+128)
 14832  2364  0020               	movlb	0	; select bank0
 14833  2365  0844               	movf	_delay_time,w	;volatile
 14834  2366  0021               	movlb	1	; select bank1
 14835  2367  00A8               	movwf	___altoft@c^(0+128)
 14836  2368  31A0  20C5  31A3   	fcall	___altoft
 14837  236B  0021               	movlb	1	; select bank1
 14838  236C  0828               	movf	?___altoft^(0+128),w
 14839  236D  00D1               	movwf	___ftdiv@f1^(0+128)
 14840  236E  0829               	movf	(?___altoft+1)^(0+128),w
 14841  236F  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 14842  2370  082A               	movf	(?___altoft+2)^(0+128),w
 14843  2371  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 14844  2372  0023               	movlb	3	; select bank3
 14845  2373  083B               	movf	(_modulationSubdivision+1)^(0+384),w
 14846  2374  0021               	movlb	1	; select bank1
 14847  2375  00A9               	movwf	(___awtoft@c+1)^(0+128)
 14848  2376  0023               	movlb	3	; select bank3
 14849  2377  083A               	movf	_modulationSubdivision^(0+384),w
 14850  2378  0021               	movlb	1	; select bank1
 14851  2379  00A8               	movwf	___awtoft@c^(0+128)
 14852  237A  31AE  2610  31A3   	fcall	___awtoft
 14853  237D  0021               	movlb	1	; select bank1
 14854  237E  0828               	movf	?___awtoft^(0+128),w
 14855  237F  00CE               	movwf	___ftdiv@f2^(0+128)
 14856  2380  0829               	movf	(?___awtoft+1)^(0+128),w
 14857  2381  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 14858  2382  082A               	movf	(?___awtoft+2)^(0+128),w
 14859  2383  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 14860  2384  319C  2411  31A3   	fcall	___ftdiv
 14861  2387  0021               	movlb	1	; select bank1
 14862  2388  084E               	movf	?___ftdiv^(0+128),w
 14863  2389  0022               	movlb	2	; select bank2
 14864  238A  00A0               	movwf	___fttol@f1^(0+256)
 14865  238B  0021               	movlb	1	; select bank1
 14866  238C  084F               	movf	(?___ftdiv+1)^(0+128),w
 14867  238D  0022               	movlb	2	; select bank2
 14868  238E  00A1               	movwf	(___fttol@f1+1)^(0+256)
 14869  238F  0021               	movlb	1	; select bank1
 14870  2390  0850               	movf	(?___ftdiv+2)^(0+128),w
 14871  2391  0022               	movlb	2	; select bank2
 14872  2392  00A2               	movwf	(___fttol@f1+2)^(0+256)
 14873  2393  3199  213F         	fcall	___fttol
 14874  2395  0022               	movlb	2	; select bank2
 14875  2396  0821               	movf	(?___fttol^(0+256)+1),w
 14876  2397  0023               	movlb	3	; select bank3
 14877  2398  00DA               	movwf	(_mod_delay_time+1)^(0+384)
 14878  2399  0022               	movlb	2	; select bank2
 14879  239A  0820               	movf	?___fttol^(0+256),w
 14880  239B  0023               	movlb	3	; select bank3
 14881  239C  00D9               	movwf	_mod_delay_time^(0+384)
 14882  239D  0008               	return
 14883  239E                     __end_of_getModulationDelayTime:	
 14884                           
 14885                           	psect	text43
 14886  2F09                     __ptext43:	
 14887 ;; *************** function _getModulationSubdivision *****************
 14888 ;; Defined at:
 14889 ;;		line 26 in file "modulation.c"
 14890 ;; Parameters:    Size  Location     Type
 14891 ;;		None
 14892 ;; Auto vars:     Size  Location     Type
 14893 ;;		None
 14894 ;; Return value:  Size  Location     Type
 14895 ;;                  2    0[BANK1 ] int 
 14896 ;; Registers used:
 14897 ;;		wreg, status,2, status,0
 14898 ;; Tracked objects:
 14899 ;;		On entry : 0/0
 14900 ;;		On exit  : 0/0
 14901 ;;		Unchanged: 0/0
 14902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14903 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14904 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14906 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14907 ;;Total ram usage:        2 bytes
 14908 ;; Hardware stack levels used:    1
 14909 ;; Hardware stack levels required when called:    3
 14910 ;; This function calls:
 14911 ;;		Nothing
 14912 ;; This function is called by:
 14913 ;;		_getModulationDelayTime
 14914 ;;		_updateModulationArray
 14915 ;; This function uses a non-reentrant model
 14916 ;;
 14917                           
 14918                           
 14919                           ;psect for function _getModulationSubdivision
 14920  2F09                     _getModulationSubdivision:	
 14921                           
 14922                           ;modulation.c: 27: if (delay_time >= 2400) {
 14923                           
 14924                           ;incstack = 0
 14925                           ; Regs used in _getModulationSubdivision: [wreg+status,2+status,0]
 14926  2F09  0020               	movlb	0	; select bank0
 14927  2F0A  1BC7               	btfsc	_delay_time+3,7	;volatile
 14928  2F0B  2F1A               	goto	l8484
 14929  2F0C  0847               	movf	_delay_time+3,w	;volatile
 14930  2F0D  1D03               	btfss	3,2
 14931  2F0E  2F18               	goto	l8482
 14932  2F0F  0846               	movf	_delay_time+2,w	;volatile
 14933  2F10  1D03               	btfss	3,2
 14934  2F11  2F18               	goto	l8482
 14935  2F12  3060               	movlw	96
 14936  2F13  0244               	subwf	_delay_time,w	;volatile
 14937  2F14  3009               	movlw	9
 14938  2F15  3B45               	subwfb	_delay_time+1,w	;volatile
 14939  2F16  1C03               	btfss	3,0
 14940  2F17  2F1A               	goto	l8484
 14941  2F18                     l8482:	
 14942                           
 14943                           ;modulation.c: 28: modulationSubdivision = 120;
 14944  2F18  3078               	movlw	120
 14945  2F19  2F2C               	goto	L18
 14946  2F1A                     l8484:	
 14947                           ;modulation.c: 29: } else if (delay_time >= 600) {
 14948                           
 14949  2F1A  0020               	movlb	0	; select bank0
 14950  2F1B  1BC7               	btfsc	_delay_time+3,7	;volatile
 14951  2F1C  2F2B               	goto	l8488
 14952  2F1D  0847               	movf	_delay_time+3,w	;volatile
 14953  2F1E  1D03               	btfss	3,2
 14954  2F1F  2F29               	goto	l8486
 14955  2F20  0846               	movf	_delay_time+2,w	;volatile
 14956  2F21  1D03               	btfss	3,2
 14957  2F22  2F29               	goto	l8486
 14958  2F23  3058               	movlw	88
 14959  2F24  0244               	subwf	_delay_time,w	;volatile
 14960  2F25  3002               	movlw	2
 14961  2F26  3B45               	subwfb	_delay_time+1,w	;volatile
 14962  2F27  1C03               	btfss	3,0
 14963  2F28  2F2B               	goto	l8488
 14964  2F29                     l8486:	
 14965                           
 14966                           ;modulation.c: 30: modulationSubdivision = 60;
 14967  2F29  303C               	movlw	60
 14968  2F2A  2F2C               	goto	L18
 14969  2F2B                     l8488:	
 14970                           ;modulation.c: 31: } else {
 14971                           
 14972                           
 14973                           ;modulation.c: 32: modulationSubdivision = 30;
 14974  2F2B  301E               	movlw	30
 14975  2F2C                     L18:	
 14976  2F2C  0023               	movlb	3	; select bank3
 14977  2F2D  00BA               	movwf	_modulationSubdivision^(0+384)
 14978  2F2E  3000               	movlw	0
 14979  2F2F  00BB               	movwf	(_modulationSubdivision^(0+384)+1)
 14980                           
 14981                           ;modulation.c: 33: }
 14982                           ;modulation.c: 34: return modulationSubdivision;
 14983  2F30  083B               	movf	(_modulationSubdivision+1)^(0+384),w
 14984  2F31  0021               	movlb	1	; select bank1
 14985  2F32  00A1               	movwf	(?_getModulationSubdivision+1)^(0+128)
 14986  2F33  0023               	movlb	3	; select bank3
 14987  2F34  083A               	movf	_modulationSubdivision^(0+384),w
 14988  2F35  0021               	movlb	1	; select bank1
 14989  2F36  00A0               	movwf	?_getModulationSubdivision^(0+128)
 14990  2F37  0008               	return
 14991  2F38                     __end_of_getModulationSubdivision:	
 14992                           
 14993                           	psect	text44
 14994  26FD                     __ptext44:	
 14995 ;; *************** function _calcCosArray *****************
 14996 ;; Defined at:
 14997 ;;		line 18 in file "modulation.c"
 14998 ;; Parameters:    Size  Location     Type
 14999 ;;		None
 15000 ;; Auto vars:     Size  Location     Type
 15001 ;;  tmpVal          3   54[BANK2 ] int 
 15002 ;;  iAngle          1   57[BANK2 ] unsigned char 
 15003 ;; Return value:  Size  Location     Type
 15004 ;;                  1    wreg      void 
 15005 ;; Registers used:
 15006 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15007 ;; Tracked objects:
 15008 ;;		On entry : 0/0
 15009 ;;		On exit  : 0/0
 15010 ;;		Unchanged: 0/0
 15011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15013 ;;      Locals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15014 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15015 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15016 ;;Total ram usage:        8 bytes
 15017 ;; Hardware stack levels used:    1
 15018 ;; Hardware stack levels required when called:    8
 15019 ;; This function calls:
 15020 ;;		___awtoft
 15021 ;;		___ftdiv
 15022 ;;		___ftmul
 15023 ;;		___wmul
 15024 ;;		_cos
 15025 ;; This function is called by:
 15026 ;;		_main
 15027 ;; This function uses a non-reentrant model
 15028 ;;
 15029                           
 15030                           
 15031                           ;psect for function _calcCosArray
 15032  26FD                     _calcCosArray:	
 15033                           
 15034                           ;modulation.c: 19: for (char iAngle = 0; iAngle < 120; iAngle++) {
 15035                           
 15036                           ;incstack = 0
 15037                           ; Regs used in _calcCosArray: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15038  26FD  0022               	movlb	2	; select bank2
 15039  26FE  01D9               	clrf	calcCosArray@iAngle^(0+256)
 15040  26FF                     L19:	
 15041  26FF  3078               	movlw	120
 15042  2700  0259               	subwf	calcCosArray@iAngle^(0+256),w
 15043  2701  1803               	btfsc	3,0
 15044  2702  0008               	return
 15045                           
 15046                           ;modulation.c: 20: double tmpVal = 3 * iAngle * 3.14159265358979323846/180.0;
 15047  2703  3000               	movlw	0
 15048  2704  0021               	movlb	1	; select bank1
 15049  2705  00CE               	movwf	___ftdiv@f2^(0+128)
 15050  2706  3034               	movlw	52
 15051  2707  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 15052  2708  3043               	movlw	67
 15053  2709  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 15054  270A  3010               	movlw	16
 15055  270B  00AE               	movwf	___ftmul@f1^(0+128)
 15056  270C  3049               	movlw	73
 15057  270D  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15058  270E  3040               	movlw	64
 15059  270F  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15060  2710  0022               	movlb	2	; select bank2
 15061  2711  0859               	movf	calcCosArray@iAngle^(0+256),w
 15062  2712  00D2               	movwf	??_calcCosArray^(0+256)
 15063  2713  01D3               	clrf	(??_calcCosArray^(0+256)+1)
 15064  2714  0852               	movf	??_calcCosArray^(0+256),w
 15065  2715  00AE               	movwf	___wmul@multiplier^(0+256)
 15066  2716  0853               	movf	(??_calcCosArray+1)^(0+256),w
 15067  2717  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 15068  2718  3003               	movlw	3
 15069  2719  00B0               	movwf	___wmul@multiplicand^(0+256)
 15070  271A  3000               	movlw	0
 15071  271B  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 15072  271C  31AD  255F  31A6   	fcall	___wmul
 15073  271F  0022               	movlb	2	; select bank2
 15074  2720  082F               	movf	(?___wmul+1)^(0+256),w
 15075  2721  0021               	movlb	1	; select bank1
 15076  2722  00A9               	movwf	(___awtoft@c+1)^(0+128)
 15077  2723  0022               	movlb	2	; select bank2
 15078  2724  082E               	movf	?___wmul^(0+256),w
 15079  2725  0021               	movlb	1	; select bank1
 15080  2726  00A8               	movwf	___awtoft@c^(0+128)
 15081  2727  31AE  2610  31A6   	fcall	___awtoft
 15082  272A  0021               	movlb	1	; select bank1
 15083  272B  0828               	movf	?___awtoft^(0+128),w
 15084  272C  00B1               	movwf	___ftmul@f2^(0+128)
 15085  272D  0829               	movf	(?___awtoft+1)^(0+128),w
 15086  272E  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15087  272F  082A               	movf	(?___awtoft+2)^(0+128),w
 15088  2730  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15089  2731  319C  24BA  31A6   	fcall	___ftmul
 15090  2734  0021               	movlb	1	; select bank1
 15091  2735  082E               	movf	?___ftmul^(0+128),w
 15092  2736  00D1               	movwf	___ftdiv@f1^(0+128)
 15093  2737  082F               	movf	(?___ftmul+1)^(0+128),w
 15094  2738  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 15095  2739  0830               	movf	(?___ftmul+2)^(0+128),w
 15096  273A  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 15097  273B  319C  2411  31A6   	fcall	___ftdiv
 15098  273E  0021               	movlb	1	; select bank1
 15099  273F  084E               	movf	?___ftdiv^(0+128),w
 15100  2740  0022               	movlb	2	; select bank2
 15101  2741  00D6               	movwf	calcCosArray@tmpVal^(0+256)
 15102  2742  0021               	movlb	1	; select bank1
 15103  2743  084F               	movf	(?___ftdiv+1)^(0+128),w
 15104  2744  0022               	movlb	2	; select bank2
 15105  2745  00D7               	movwf	(calcCosArray@tmpVal+1)^(0+256)
 15106  2746  0021               	movlb	1	; select bank1
 15107  2747  0850               	movf	(?___ftdiv+2)^(0+128),w
 15108  2748  0022               	movlb	2	; select bank2
 15109  2749  00D8               	movwf	(calcCosArray@tmpVal+2)^(0+256)
 15110                           
 15111                           ;modulation.c: 21: tmpVal = cos(tmpVal);
 15112  274A  0856               	movf	calcCosArray@tmpVal^(0+256),w
 15113  274B  00CC               	movwf	cos@f^(0+256)
 15114  274C  0857               	movf	(calcCosArray@tmpVal+1)^(0+256),w
 15115  274D  00CD               	movwf	(cos@f+1)^(0+256)
 15116  274E  0858               	movf	(calcCosArray@tmpVal+2)^(0+256),w
 15117  274F  00CE               	movwf	(cos@f+2)^(0+256)
 15118  2750  31A6  2681  31A6   	fcall	_cos
 15119  2753  0022               	movlb	2	; select bank2
 15120  2754  084C               	movf	?_cos^(0+256),w
 15121  2755  00D6               	movwf	calcCosArray@tmpVal^(0+256)
 15122  2756  084D               	movf	(?_cos+1)^(0+256),w
 15123  2757  00D7               	movwf	(calcCosArray@tmpVal+1)^(0+256)
 15124  2758  084E               	movf	(?_cos+2)^(0+256),w
 15125  2759  00D8               	movwf	(calcCosArray@tmpVal+2)^(0+256)
 15126                           
 15127                           ;modulation.c: 22: cosArray[iAngle] = tmpVal;
 15128  275A  0859               	movf	calcCosArray@iAngle^(0+256),w
 15129  275B  00D2               	movwf	??_calcCosArray^(0+256)
 15130  275C  01D3               	clrf	(??_calcCosArray^(0+256)+1)
 15131  275D  0852               	movf	??_calcCosArray^(0+256),w
 15132  275E  00AE               	movwf	___wmul@multiplier^(0+256)
 15133  275F  0853               	movf	(??_calcCosArray+1)^(0+256),w
 15134  2760  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 15135  2761  3003               	movlw	3
 15136  2762  00B0               	movwf	___wmul@multiplicand^(0+256)
 15137  2763  3000               	movlw	0
 15138  2764  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 15139  2765  31AD  255F  31A6   	fcall	___wmul
 15140  2768  3082               	movlw	130
 15141  2769  0022               	movlb	2	; select bank2
 15142  276A  00D4               	movwf	(??_calcCosArray+2)^(0+256)
 15143  276B  3024               	movlw	36
 15144  276C  00D5               	movwf	((??_calcCosArray+2)^(0+256)+1)
 15145  276D  082E               	movf	?___wmul^(0+256),w
 15146  276E  0754               	addwf	(??_calcCosArray+2)^(0+256),w
 15147  276F  0086               	movwf	6
 15148  2770  082F               	movf	(?___wmul+1)^(0+256),w
 15149  2771  3D55               	addwfc	(??_calcCosArray+3)^(0+256),w
 15150  2772  0087               	movwf	7
 15151  2773  0856               	movf	calcCosArray@tmpVal^(0+256),w
 15152  2774  3FC0               	movwi [0]fsr1
 15153  2775  0857               	movf	(calcCosArray@tmpVal+1)^(0+256),w
 15154  2776  3FC1               	movwi [1]fsr1
 15155  2777  0858               	movf	(calcCosArray@tmpVal+2)^(0+256),w
 15156  2778  3FC2               	movwi [2]fsr1
 15157  2779  3001               	movlw	1
 15158  277A  00D2               	movwf	??_calcCosArray^(0+256)
 15159  277B  0852               	movf	??_calcCosArray^(0+256),w
 15160  277C  07D9               	addwf	calcCosArray@iAngle^(0+256),f
 15161  277D  2EFF               	goto	L19
 15162  277E                     __end_of_calcCosArray:	
 15163                           
 15164                           	psect	text45
 15165  2681                     __ptext45:	
 15166 ;; *************** function _cos *****************
 15167 ;; Defined at:
 15168 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\cos.c"
 15169 ;; Parameters:    Size  Location     Type
 15170 ;;  f               3   44[BANK2 ] void 
 15171 ;; Auto vars:     Size  Location     Type
 15172 ;;		None
 15173 ;; Return value:  Size  Location     Type
 15174 ;;                  3   44[BANK2 ] void 
 15175 ;; Registers used:
 15176 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15177 ;; Tracked objects:
 15178 ;;		On entry : 0/0
 15179 ;;		On exit  : 0/0
 15180 ;;		Unchanged: 0/0
 15181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15182 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15183 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15184 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15185 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15186 ;;Total ram usage:        6 bytes
 15187 ;; Hardware stack levels used:    1
 15188 ;; Hardware stack levels required when called:    7
 15189 ;; This function calls:
 15190 ;;		___ftadd
 15191 ;;		___ftge
 15192 ;;		_sin
 15193 ;; This function is called by:
 15194 ;;		_calcCosArray
 15195 ;; This function uses a non-reentrant model
 15196 ;;
 15197                           
 15198                           
 15199                           ;psect for function _cos
 15200  2681                     _cos:	
 15201                           
 15202                           ;incstack = 0
 15203                           ; Regs used in _cos: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15204  2681  3010               	movlw	16
 15205  2682  0021               	movlb	1	; select bank1
 15206  2683  00A0               	movwf	___ftge@ff1^(0+128)
 15207  2684  3049               	movlw	73
 15208  2685  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15209  2686  3040               	movlw	64
 15210  2687  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15211  2688  0022               	movlb	2	; select bank2
 15212  2689  084C               	movf	cos@f^(0+256),w
 15213  268A  0021               	movlb	1	; select bank1
 15214  268B  00A3               	movwf	___ftge@ff2^(0+128)
 15215  268C  0022               	movlb	2	; select bank2
 15216  268D  084D               	movf	(cos@f+1)^(0+256),w
 15217  268E  0021               	movlb	1	; select bank1
 15218  268F  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15219  2690  0022               	movlb	2	; select bank2
 15220  2691  084E               	movf	(cos@f+2)^(0+256),w
 15221  2692  0021               	movlb	1	; select bank1
 15222  2693  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15223  2694  31A0  2089  31A6   	fcall	___ftge
 15224  2697  1803               	btfsc	3,0
 15225  2698  2ECB               	goto	l8650
 15226  2699  30CC               	movlw	204
 15227  269A  0021               	movlb	1	; select bank1
 15228  269B  00C1               	movwf	___ftadd@f1^(0+128)
 15229  269C  3096               	movlw	150
 15230  269D  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 15231  269E  30C0               	movlw	192
 15232  269F  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 15233  26A0  0022               	movlb	2	; select bank2
 15234  26A1  084C               	movf	cos@f^(0+256),w
 15235  26A2  0021               	movlb	1	; select bank1
 15236  26A3  00C4               	movwf	___ftadd@f2^(0+128)
 15237  26A4  0022               	movlb	2	; select bank2
 15238  26A5  084D               	movf	(cos@f+1)^(0+256),w
 15239  26A6  0021               	movlb	1	; select bank1
 15240  26A7  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 15241  26A8  0022               	movlb	2	; select bank2
 15242  26A9  084E               	movf	(cos@f+2)^(0+256),w
 15243  26AA  0021               	movlb	1	; select bank1
 15244  26AB  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 15245  26AC  319F  270A  31A6   	fcall	___ftadd
 15246  26AF  0021               	movlb	1	; select bank1
 15247  26B0  0841               	movf	?___ftadd^(0+128),w
 15248  26B1  0022               	movlb	2	; select bank2
 15249  26B2  00CF               	movwf	_cos$2882^(0+256)
 15250  26B3  0021               	movlb	1	; select bank1
 15251  26B4  0842               	movf	(?___ftadd+1)^(0+128),w
 15252  26B5  0022               	movlb	2	; select bank2
 15253  26B6  00D0               	movwf	(_cos$2882+1)^(0+256)
 15254  26B7  0021               	movlb	1	; select bank1
 15255  26B8  0843               	movf	(?___ftadd+2)^(0+128),w
 15256  26B9  0022               	movlb	2	; select bank2
 15257  26BA  00D1               	movwf	(_cos$2882+2)^(0+256)
 15258  26BB  084F               	movf	_cos$2882^(0+256),w
 15259  26BC  00BE               	movwf	sin@f^(0+256)
 15260  26BD  0850               	movf	(_cos$2882+1)^(0+256),w
 15261  26BE  00BF               	movwf	(sin@f+1)^(0+256)
 15262  26BF  0851               	movf	(_cos$2882+2)^(0+256),w
 15263  26C0  00C0               	movwf	(sin@f+2)^(0+256)
 15264  26C1  3196  2631         	fcall	_sin
 15265  26C3  0022               	movlb	2	; select bank2
 15266  26C4  083E               	movf	?_sin^(0+256),w
 15267  26C5  00CC               	movwf	?_cos^(0+256)
 15268  26C6  083F               	movf	(?_sin+1)^(0+256),w
 15269  26C7  00CD               	movwf	(?_cos+1)^(0+256)
 15270  26C8  0840               	movf	(?_sin+2)^(0+256),w
 15271  26C9  00CE               	movwf	(?_cos+2)^(0+256)
 15272  26CA  0008               	return
 15273  26CB                     l8650:	
 15274  26CB  3010               	movlw	16
 15275  26CC  0021               	movlb	1	; select bank1
 15276  26CD  00C1               	movwf	___ftadd@f1^(0+128)
 15277  26CE  30C9               	movlw	201
 15278  26CF  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 15279  26D0  303F               	movlw	63
 15280  26D1  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 15281  26D2  0022               	movlb	2	; select bank2
 15282  26D3  084C               	movf	cos@f^(0+256),w
 15283  26D4  0021               	movlb	1	; select bank1
 15284  26D5  00C4               	movwf	___ftadd@f2^(0+128)
 15285  26D6  0022               	movlb	2	; select bank2
 15286  26D7  084D               	movf	(cos@f+1)^(0+256),w
 15287  26D8  0021               	movlb	1	; select bank1
 15288  26D9  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 15289  26DA  0022               	movlb	2	; select bank2
 15290  26DB  084E               	movf	(cos@f+2)^(0+256),w
 15291  26DC  0021               	movlb	1	; select bank1
 15292  26DD  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 15293  26DE  319F  270A  31A6   	fcall	___ftadd
 15294  26E1  0021               	movlb	1	; select bank1
 15295  26E2  0841               	movf	?___ftadd^(0+128),w
 15296  26E3  0022               	movlb	2	; select bank2
 15297  26E4  00CF               	movwf	_cos$2882^(0+256)
 15298  26E5  0021               	movlb	1	; select bank1
 15299  26E6  0842               	movf	(?___ftadd+1)^(0+128),w
 15300  26E7  0022               	movlb	2	; select bank2
 15301  26E8  00D0               	movwf	(_cos$2882+1)^(0+256)
 15302  26E9  0021               	movlb	1	; select bank1
 15303  26EA  0843               	movf	(?___ftadd+2)^(0+128),w
 15304  26EB  0022               	movlb	2	; select bank2
 15305  26EC  00D1               	movwf	(_cos$2882+2)^(0+256)
 15306  26ED  084F               	movf	_cos$2882^(0+256),w
 15307  26EE  00BE               	movwf	sin@f^(0+256)
 15308  26EF  0850               	movf	(_cos$2882+1)^(0+256),w
 15309  26F0  00BF               	movwf	(sin@f+1)^(0+256)
 15310  26F1  0851               	movf	(_cos$2882+2)^(0+256),w
 15311  26F2  00C0               	movwf	(sin@f+2)^(0+256)
 15312  26F3  3196  2631         	fcall	_sin
 15313  26F5  0022               	movlb	2	; select bank2
 15314  26F6  083E               	movf	?_sin^(0+256),w
 15315  26F7  00CC               	movwf	?_cos^(0+256)
 15316  26F8  083F               	movf	(?_sin+1)^(0+256),w
 15317  26F9  00CD               	movwf	(?_cos+1)^(0+256)
 15318  26FA  0840               	movf	(?_sin+2)^(0+256),w
 15319  26FB  00CE               	movwf	(?_cos+2)^(0+256)
 15320  26FC  0008               	return
 15321  26FD                     __end_of_cos:	
 15322                           
 15323                           	psect	text46
 15324  1631                     __ptext46:	
 15325 ;; *************** function _sin *****************
 15326 ;; Defined at:
 15327 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\sin.c"
 15328 ;; Parameters:    Size  Location     Type
 15329 ;;  f               3   30[BANK2 ] void 
 15330 ;; Auto vars:     Size  Location     Type
 15331 ;;  x2              3   40[BANK2 ] void 
 15332 ;;  y               3   34[BANK2 ] void 
 15333 ;;  sgn             1   43[BANK2 ] unsigned char 
 15334 ;; Return value:  Size  Location     Type
 15335 ;;                  3   30[BANK2 ] unsigned char 
 15336 ;; Registers used:
 15337 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15338 ;; Tracked objects:
 15339 ;;		On entry : 0/0
 15340 ;;		On exit  : 0/0
 15341 ;;		Unchanged: 0/0
 15342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15343 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15344 ;;      Locals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15345 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15346 ;;      Totals:         0       0       0      14       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15347 ;;Total ram usage:       14 bytes
 15348 ;; Hardware stack levels used:    1
 15349 ;; Hardware stack levels required when called:    6
 15350 ;; This function calls:
 15351 ;;		___ftadd
 15352 ;;		___ftdiv
 15353 ;;		___ftge
 15354 ;;		___ftmul
 15355 ;;		___ftneg
 15356 ;;		___ftsub
 15357 ;;		_eval_poly
 15358 ;;		_floor
 15359 ;; This function is called by:
 15360 ;;		_cos
 15361 ;; This function uses a non-reentrant model
 15362 ;;
 15363                           
 15364                           
 15365                           ;psect for function _sin
 15366  1631                     _sin:	
 15367                           
 15368                           ;incstack = 0
 15369                           ; Regs used in _sin: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15370  1631  0022               	movlb	2	; select bank2
 15371  1632  01CB               	clrf	sin@sgn^(0+256)
 15372  1633  083E               	movf	sin@f^(0+256),w
 15373  1634  0021               	movlb	1	; select bank1
 15374  1635  00A0               	movwf	___ftge@ff1^(0+128)
 15375  1636  0022               	movlb	2	; select bank2
 15376  1637  083F               	movf	(sin@f+1)^(0+256),w
 15377  1638  0021               	movlb	1	; select bank1
 15378  1639  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15379  163A  0022               	movlb	2	; select bank2
 15380  163B  0840               	movf	(sin@f+2)^(0+256),w
 15381  163C  0021               	movlb	1	; select bank1
 15382  163D  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15383  163E  3000               	movlw	0
 15384  163F  00A3               	movwf	___ftge@ff2^(0+128)
 15385  1640  3000               	movlw	0
 15386  1641  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15387  1642  3000               	movlw	0
 15388  1643  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15389  1644  31A0  2089  3196   	fcall	___ftge
 15390  1647  1803               	btfsc	3,0
 15391  1648  2E66               	goto	l8368
 15392  1649  0022               	movlb	2	; select bank2
 15393  164A  083E               	movf	sin@f^(0+256),w
 15394  164B  0021               	movlb	1	; select bank1
 15395  164C  00BE               	movwf	___ftneg@f1^(0+128)
 15396  164D  0022               	movlb	2	; select bank2
 15397  164E  083F               	movf	(sin@f+1)^(0+256),w
 15398  164F  0021               	movlb	1	; select bank1
 15399  1650  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 15400  1651  0022               	movlb	2	; select bank2
 15401  1652  0840               	movf	(sin@f+2)^(0+256),w
 15402  1653  0021               	movlb	1	; select bank1
 15403  1654  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 15404  1655  31AC  24B5  3196   	fcall	___ftneg
 15405  1658  0021               	movlb	1	; select bank1
 15406  1659  083E               	movf	?___ftneg^(0+128),w
 15407  165A  0022               	movlb	2	; select bank2
 15408  165B  00BE               	movwf	sin@f^(0+256)
 15409  165C  0021               	movlb	1	; select bank1
 15410  165D  083F               	movf	(?___ftneg+1)^(0+128),w
 15411  165E  0022               	movlb	2	; select bank2
 15412  165F  00BF               	movwf	(sin@f+1)^(0+256)
 15413  1660  0021               	movlb	1	; select bank1
 15414  1661  0840               	movf	(?___ftneg+2)^(0+128),w
 15415  1662  0022               	movlb	2	; select bank2
 15416  1663  00C0               	movwf	(sin@f+2)^(0+256)
 15417  1664  01CB               	clrf	sin@sgn^(0+256)
 15418  1665  0ACB               	incf	sin@sgn^(0+256),f
 15419  1666                     l8368:	
 15420  1666  30FA               	movlw	250
 15421  1667  0021               	movlb	1	; select bank1
 15422  1668  00AE               	movwf	___ftmul@f1^(0+128)
 15423  1669  3022               	movlw	34
 15424  166A  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15425  166B  303E               	movlw	62
 15426  166C  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15427  166D  0022               	movlb	2	; select bank2
 15428  166E  083E               	movf	sin@f^(0+256),w
 15429  166F  0021               	movlb	1	; select bank1
 15430  1670  00B1               	movwf	___ftmul@f2^(0+128)
 15431  1671  0022               	movlb	2	; select bank2
 15432  1672  083F               	movf	(sin@f+1)^(0+256),w
 15433  1673  0021               	movlb	1	; select bank1
 15434  1674  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15435  1675  0022               	movlb	2	; select bank2
 15436  1676  0840               	movf	(sin@f+2)^(0+256),w
 15437  1677  0021               	movlb	1	; select bank1
 15438  1678  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15439  1679  319C  24BA  3196   	fcall	___ftmul
 15440  167C  0021               	movlb	1	; select bank1
 15441  167D  082E               	movf	?___ftmul^(0+128),w
 15442  167E  0022               	movlb	2	; select bank2
 15443  167F  00BE               	movwf	sin@f^(0+256)
 15444  1680  0021               	movlb	1	; select bank1
 15445  1681  082F               	movf	(?___ftmul+1)^(0+128),w
 15446  1682  0022               	movlb	2	; select bank2
 15447  1683  00BF               	movwf	(sin@f+1)^(0+256)
 15448  1684  0021               	movlb	1	; select bank1
 15449  1685  0830               	movf	(?___ftmul+2)^(0+128),w
 15450  1686  0022               	movlb	2	; select bank2
 15451  1687  00C0               	movwf	(sin@f+2)^(0+256)
 15452  1688  083E               	movf	sin@f^(0+256),w
 15453  1689  00AE               	movwf	floor@x^(0+256)
 15454  168A  083F               	movf	(sin@f+1)^(0+256),w
 15455  168B  00AF               	movwf	(floor@x+1)^(0+256)
 15456  168C  0840               	movf	(sin@f+2)^(0+256),w
 15457  168D  00B0               	movwf	(floor@x+2)^(0+256)
 15458  168E  3190  2000  3196   	fcall	_floor
 15459  1691  0022               	movlb	2	; select bank2
 15460  1692  082E               	movf	?_floor^(0+256),w
 15461  1693  00B7               	movwf	___ftsub@f2^(0+256)
 15462  1694  082F               	movf	(?_floor+1)^(0+256),w
 15463  1695  00B8               	movwf	(___ftsub@f2+1)^(0+256)
 15464  1696  0830               	movf	(?_floor+2)^(0+256),w
 15465  1697  00B9               	movwf	(___ftsub@f2+2)^(0+256)
 15466  1698  083E               	movf	sin@f^(0+256),w
 15467  1699  00BA               	movwf	___ftsub@f1^(0+256)
 15468  169A  083F               	movf	(sin@f+1)^(0+256),w
 15469  169B  00BB               	movwf	(___ftsub@f1+1)^(0+256)
 15470  169C  0840               	movf	(sin@f+2)^(0+256),w
 15471  169D  00BC               	movwf	(___ftsub@f1+2)^(0+256)
 15472  169E  31AE  26AC  3196   	fcall	___ftsub
 15473  16A1  0022               	movlb	2	; select bank2
 15474  16A2  0837               	movf	?___ftsub^(0+256),w
 15475  16A3  00BE               	movwf	sin@f^(0+256)
 15476  16A4  0838               	movf	(?___ftsub+1)^(0+256),w
 15477  16A5  00BF               	movwf	(sin@f+1)^(0+256)
 15478  16A6  0839               	movf	(?___ftsub+2)^(0+256),w
 15479  16A7  00C0               	movwf	(sin@f+2)^(0+256)
 15480  16A8  3000               	movlw	0
 15481  16A9  0021               	movlb	1	; select bank1
 15482  16AA  00AE               	movwf	___ftmul@f1^(0+128)
 15483  16AB  3080               	movlw	128
 15484  16AC  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15485  16AD  3040               	movlw	64
 15486  16AE  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15487  16AF  0022               	movlb	2	; select bank2
 15488  16B0  083E               	movf	sin@f^(0+256),w
 15489  16B1  0021               	movlb	1	; select bank1
 15490  16B2  00B1               	movwf	___ftmul@f2^(0+128)
 15491  16B3  0022               	movlb	2	; select bank2
 15492  16B4  083F               	movf	(sin@f+1)^(0+256),w
 15493  16B5  0021               	movlb	1	; select bank1
 15494  16B6  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15495  16B7  0022               	movlb	2	; select bank2
 15496  16B8  0840               	movf	(sin@f+2)^(0+256),w
 15497  16B9  0021               	movlb	1	; select bank1
 15498  16BA  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15499  16BB  319C  24BA  3196   	fcall	___ftmul
 15500  16BE  0021               	movlb	1	; select bank1
 15501  16BF  082E               	movf	?___ftmul^(0+128),w
 15502  16C0  0022               	movlb	2	; select bank2
 15503  16C1  00BE               	movwf	sin@f^(0+256)
 15504  16C2  0021               	movlb	1	; select bank1
 15505  16C3  082F               	movf	(?___ftmul+1)^(0+128),w
 15506  16C4  0022               	movlb	2	; select bank2
 15507  16C5  00BF               	movwf	(sin@f+1)^(0+256)
 15508  16C6  0021               	movlb	1	; select bank1
 15509  16C7  0830               	movf	(?___ftmul+2)^(0+128),w
 15510  16C8  0022               	movlb	2	; select bank2
 15511  16C9  00C0               	movwf	(sin@f+2)^(0+256)
 15512  16CA  3000               	movlw	0
 15513  16CB  0021               	movlb	1	; select bank1
 15514  16CC  00A0               	movwf	___ftge@ff1^(0+128)
 15515  16CD  3000               	movlw	0
 15516  16CE  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15517  16CF  3040               	movlw	64
 15518  16D0  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15519  16D1  0022               	movlb	2	; select bank2
 15520  16D2  083E               	movf	sin@f^(0+256),w
 15521  16D3  0021               	movlb	1	; select bank1
 15522  16D4  00A3               	movwf	___ftge@ff2^(0+128)
 15523  16D5  0022               	movlb	2	; select bank2
 15524  16D6  083F               	movf	(sin@f+1)^(0+256),w
 15525  16D7  0021               	movlb	1	; select bank1
 15526  16D8  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15527  16D9  0022               	movlb	2	; select bank2
 15528  16DA  0840               	movf	(sin@f+2)^(0+256),w
 15529  16DB  0021               	movlb	1	; select bank1
 15530  16DC  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15531  16DD  31A0  2089  3196   	fcall	___ftge
 15532  16E0  1803               	btfsc	3,0
 15533  16E1  2F02               	goto	l8380
 15534  16E2  3000               	movlw	0
 15535  16E3  0022               	movlb	2	; select bank2
 15536  16E4  00B7               	movwf	___ftsub@f2^(0+256)
 15537  16E5  3000               	movlw	0
 15538  16E6  00B8               	movwf	(___ftsub@f2+1)^(0+256)
 15539  16E7  3040               	movlw	64
 15540  16E8  00B9               	movwf	(___ftsub@f2+2)^(0+256)
 15541  16E9  083E               	movf	sin@f^(0+256),w
 15542  16EA  00BA               	movwf	___ftsub@f1^(0+256)
 15543  16EB  083F               	movf	(sin@f+1)^(0+256),w
 15544  16EC  00BB               	movwf	(___ftsub@f1+1)^(0+256)
 15545  16ED  0840               	movf	(sin@f+2)^(0+256),w
 15546  16EE  00BC               	movwf	(___ftsub@f1+2)^(0+256)
 15547  16EF  31AE  26AC  3196   	fcall	___ftsub
 15548  16F2  0022               	movlb	2	; select bank2
 15549  16F3  0837               	movf	?___ftsub^(0+256),w
 15550  16F4  00BE               	movwf	sin@f^(0+256)
 15551  16F5  0838               	movf	(?___ftsub+1)^(0+256),w
 15552  16F6  00BF               	movwf	(sin@f+1)^(0+256)
 15553  16F7  0839               	movf	(?___ftsub+2)^(0+256),w
 15554  16F8  00C0               	movwf	(sin@f+2)^(0+256)
 15555  16F9  084B               	movf	sin@sgn^(0+256),w
 15556  16FA  1D03               	btfss	3,2
 15557  16FB  2EFE               	goto	u8840
 15558  16FC  3001               	movlw	1
 15559  16FD  2EFF               	goto	u8850
 15560  16FE                     u8840:	
 15561  16FE  3000               	movlw	0
 15562  16FF                     u8850:	
 15563  16FF  00C1               	movwf	??_sin^(0+256)
 15564  1700  0841               	movf	??_sin^(0+256),w
 15565  1701  00CB               	movwf	sin@sgn^(0+256)
 15566  1702                     l8380:	
 15567  1702  3000               	movlw	0
 15568  1703  0021               	movlb	1	; select bank1
 15569  1704  00A0               	movwf	___ftge@ff1^(0+128)
 15570  1705  3080               	movlw	128
 15571  1706  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15572  1707  303F               	movlw	63
 15573  1708  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15574  1709  0022               	movlb	2	; select bank2
 15575  170A  083E               	movf	sin@f^(0+256),w
 15576  170B  0021               	movlb	1	; select bank1
 15577  170C  00A3               	movwf	___ftge@ff2^(0+128)
 15578  170D  0022               	movlb	2	; select bank2
 15579  170E  083F               	movf	(sin@f+1)^(0+256),w
 15580  170F  0021               	movlb	1	; select bank1
 15581  1710  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15582  1711  0022               	movlb	2	; select bank2
 15583  1712  0840               	movf	(sin@f+2)^(0+256),w
 15584  1713  0021               	movlb	1	; select bank1
 15585  1714  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15586  1715  31A0  2089  3196   	fcall	___ftge
 15587  1718  1803               	btfsc	3,0
 15588  1719  2F46               	goto	l2410
 15589  171A  3000               	movlw	0
 15590  171B  0021               	movlb	1	; select bank1
 15591  171C  00C1               	movwf	___ftadd@f1^(0+128)
 15592  171D  3000               	movlw	0
 15593  171E  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 15594  171F  3040               	movlw	64
 15595  1720  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 15596  1721  0022               	movlb	2	; select bank2
 15597  1722  083E               	movf	sin@f^(0+256),w
 15598  1723  0021               	movlb	1	; select bank1
 15599  1724  00BE               	movwf	___ftneg@f1^(0+128)
 15600  1725  0022               	movlb	2	; select bank2
 15601  1726  083F               	movf	(sin@f+1)^(0+256),w
 15602  1727  0021               	movlb	1	; select bank1
 15603  1728  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 15604  1729  0022               	movlb	2	; select bank2
 15605  172A  0840               	movf	(sin@f+2)^(0+256),w
 15606  172B  0021               	movlb	1	; select bank1
 15607  172C  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 15608  172D  31AC  24B5  3196   	fcall	___ftneg
 15609  1730  0021               	movlb	1	; select bank1
 15610  1731  083E               	movf	?___ftneg^(0+128),w
 15611  1732  00C4               	movwf	___ftadd@f2^(0+128)
 15612  1733  083F               	movf	(?___ftneg+1)^(0+128),w
 15613  1734  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 15614  1735  0840               	movf	(?___ftneg+2)^(0+128),w
 15615  1736  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 15616  1737  319F  270A  3196   	fcall	___ftadd
 15617  173A  0021               	movlb	1	; select bank1
 15618  173B  0841               	movf	?___ftadd^(0+128),w
 15619  173C  0022               	movlb	2	; select bank2
 15620  173D  00BE               	movwf	sin@f^(0+256)
 15621  173E  0021               	movlb	1	; select bank1
 15622  173F  0842               	movf	(?___ftadd+1)^(0+128),w
 15623  1740  0022               	movlb	2	; select bank2
 15624  1741  00BF               	movwf	(sin@f+1)^(0+256)
 15625  1742  0021               	movlb	1	; select bank1
 15626  1743  0843               	movf	(?___ftadd+2)^(0+128),w
 15627  1744  0022               	movlb	2	; select bank2
 15628  1745  00C0               	movwf	(sin@f+2)^(0+256)
 15629  1746                     l2410:	
 15630  1746  0022               	movlb	2	; select bank2
 15631  1747  083E               	movf	sin@f^(0+256),w
 15632  1748  0021               	movlb	1	; select bank1
 15633  1749  00AE               	movwf	___ftmul@f1^(0+128)
 15634  174A  0022               	movlb	2	; select bank2
 15635  174B  083F               	movf	(sin@f+1)^(0+256),w
 15636  174C  0021               	movlb	1	; select bank1
 15637  174D  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15638  174E  0022               	movlb	2	; select bank2
 15639  174F  0840               	movf	(sin@f+2)^(0+256),w
 15640  1750  0021               	movlb	1	; select bank1
 15641  1751  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15642  1752  0022               	movlb	2	; select bank2
 15643  1753  083E               	movf	sin@f^(0+256),w
 15644  1754  0021               	movlb	1	; select bank1
 15645  1755  00B1               	movwf	___ftmul@f2^(0+128)
 15646  1756  0022               	movlb	2	; select bank2
 15647  1757  083F               	movf	(sin@f+1)^(0+256),w
 15648  1758  0021               	movlb	1	; select bank1
 15649  1759  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15650  175A  0022               	movlb	2	; select bank2
 15651  175B  0840               	movf	(sin@f+2)^(0+256),w
 15652  175C  0021               	movlb	1	; select bank1
 15653  175D  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15654  175E  319C  24BA  3196   	fcall	___ftmul
 15655  1761  0021               	movlb	1	; select bank1
 15656  1762  082E               	movf	?___ftmul^(0+128),w
 15657  1763  0022               	movlb	2	; select bank2
 15658  1764  00C8               	movwf	sin@x2^(0+256)
 15659  1765  0021               	movlb	1	; select bank1
 15660  1766  082F               	movf	(?___ftmul+1)^(0+128),w
 15661  1767  0022               	movlb	2	; select bank2
 15662  1768  00C9               	movwf	(sin@x2+1)^(0+256)
 15663  1769  0021               	movlb	1	; select bank1
 15664  176A  0830               	movf	(?___ftmul+2)^(0+128),w
 15665  176B  0022               	movlb	2	; select bank2
 15666  176C  00CA               	movwf	(sin@x2+2)^(0+256)
 15667  176D  0848               	movf	sin@x2^(0+256),w
 15668  176E  00B4               	movwf	eval_poly@x^(0+256)
 15669  176F  0849               	movf	(sin@x2+1)^(0+256),w
 15670  1770  00B5               	movwf	(eval_poly@x+1)^(0+256)
 15671  1771  084A               	movf	(sin@x2+2)^(0+256),w
 15672  1772  00B6               	movwf	(eval_poly@x+2)^(0+256)
 15673  1773  3048               	movlw	low (sin@coeff_b| (0+32768))
 15674  1774  00B7               	movwf	eval_poly@d^(0+256)
 15675  1775  30A8               	movlw	high (sin@coeff_b| (0+32768))
 15676  1776  00B8               	movwf	(eval_poly@d^(0+256)+1)
 15677  1777  3003               	movlw	3
 15678  1778  00B9               	movwf	eval_poly@n^(0+256)
 15679  1779  3000               	movlw	0
 15680  177A  00BA               	movwf	(eval_poly@n^(0+256)+1)
 15681  177B  31A5  2598  3196   	fcall	_eval_poly
 15682  177E  0022               	movlb	2	; select bank2
 15683  177F  0834               	movf	?_eval_poly^(0+256),w
 15684  1780  00C2               	movwf	sin@y^(0+256)
 15685  1781  0835               	movf	(?_eval_poly+1)^(0+256),w
 15686  1782  00C3               	movwf	(sin@y+1)^(0+256)
 15687  1783  0836               	movf	(?_eval_poly+2)^(0+256),w
 15688  1784  00C4               	movwf	(sin@y+2)^(0+256)
 15689  1785  3004               	movlw	4
 15690  1786  00B9               	movwf	eval_poly@n^(0+256)
 15691  1787  3000               	movlw	0
 15692  1788  00BA               	movwf	(eval_poly@n^(0+256)+1)
 15693  1789  3039               	movlw	low (sin@coeff_a| (0+32768))
 15694  178A  00B7               	movwf	eval_poly@d^(0+256)
 15695  178B  30A8               	movlw	high (sin@coeff_a| (0+32768))
 15696  178C  00B8               	movwf	(eval_poly@d^(0+256)+1)
 15697  178D  0848               	movf	sin@x2^(0+256),w
 15698  178E  00B4               	movwf	eval_poly@x^(0+256)
 15699  178F  0849               	movf	(sin@x2+1)^(0+256),w
 15700  1790  00B5               	movwf	(eval_poly@x+1)^(0+256)
 15701  1791  084A               	movf	(sin@x2+2)^(0+256),w
 15702  1792  00B6               	movwf	(eval_poly@x+2)^(0+256)
 15703  1793  31A5  2598  3196   	fcall	_eval_poly
 15704  1796  0022               	movlb	2	; select bank2
 15705  1797  0834               	movf	?_eval_poly^(0+256),w
 15706  1798  0021               	movlb	1	; select bank1
 15707  1799  00D1               	movwf	___ftdiv@f1^(0+128)
 15708  179A  0022               	movlb	2	; select bank2
 15709  179B  0835               	movf	(?_eval_poly+1)^(0+256),w
 15710  179C  0021               	movlb	1	; select bank1
 15711  179D  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 15712  179E  0022               	movlb	2	; select bank2
 15713  179F  0836               	movf	(?_eval_poly+2)^(0+256),w
 15714  17A0  0021               	movlb	1	; select bank1
 15715  17A1  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 15716  17A2  0022               	movlb	2	; select bank2
 15717  17A3  0842               	movf	sin@y^(0+256),w
 15718  17A4  0021               	movlb	1	; select bank1
 15719  17A5  00CE               	movwf	___ftdiv@f2^(0+128)
 15720  17A6  0022               	movlb	2	; select bank2
 15721  17A7  0843               	movf	(sin@y+1)^(0+256),w
 15722  17A8  0021               	movlb	1	; select bank1
 15723  17A9  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 15724  17AA  0022               	movlb	2	; select bank2
 15725  17AB  0844               	movf	(sin@y+2)^(0+256),w
 15726  17AC  0021               	movlb	1	; select bank1
 15727  17AD  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 15728  17AE  319C  2411  3196   	fcall	___ftdiv
 15729  17B1  0021               	movlb	1	; select bank1
 15730  17B2  084E               	movf	?___ftdiv^(0+128),w
 15731  17B3  0022               	movlb	2	; select bank2
 15732  17B4  00C5               	movwf	_sin$2885^(0+256)
 15733  17B5  0021               	movlb	1	; select bank1
 15734  17B6  084F               	movf	(?___ftdiv+1)^(0+128),w
 15735  17B7  0022               	movlb	2	; select bank2
 15736  17B8  00C6               	movwf	(_sin$2885+1)^(0+256)
 15737  17B9  0021               	movlb	1	; select bank1
 15738  17BA  0850               	movf	(?___ftdiv+2)^(0+128),w
 15739  17BB  0022               	movlb	2	; select bank2
 15740  17BC  00C7               	movwf	(_sin$2885+2)^(0+256)
 15741  17BD  0845               	movf	_sin$2885^(0+256),w
 15742  17BE  0021               	movlb	1	; select bank1
 15743  17BF  00AE               	movwf	___ftmul@f1^(0+128)
 15744  17C0  0022               	movlb	2	; select bank2
 15745  17C1  0846               	movf	(_sin$2885+1)^(0+256),w
 15746  17C2  0021               	movlb	1	; select bank1
 15747  17C3  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15748  17C4  0022               	movlb	2	; select bank2
 15749  17C5  0847               	movf	(_sin$2885+2)^(0+256),w
 15750  17C6  0021               	movlb	1	; select bank1
 15751  17C7  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15752  17C8  0022               	movlb	2	; select bank2
 15753  17C9  083E               	movf	sin@f^(0+256),w
 15754  17CA  0021               	movlb	1	; select bank1
 15755  17CB  00B1               	movwf	___ftmul@f2^(0+128)
 15756  17CC  0022               	movlb	2	; select bank2
 15757  17CD  083F               	movf	(sin@f+1)^(0+256),w
 15758  17CE  0021               	movlb	1	; select bank1
 15759  17CF  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15760  17D0  0022               	movlb	2	; select bank2
 15761  17D1  0840               	movf	(sin@f+2)^(0+256),w
 15762  17D2  0021               	movlb	1	; select bank1
 15763  17D3  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15764  17D4  319C  24BA  3196   	fcall	___ftmul
 15765  17D7  0021               	movlb	1	; select bank1
 15766  17D8  082E               	movf	?___ftmul^(0+128),w
 15767  17D9  0022               	movlb	2	; select bank2
 15768  17DA  00BE               	movwf	sin@f^(0+256)
 15769  17DB  0021               	movlb	1	; select bank1
 15770  17DC  082F               	movf	(?___ftmul+1)^(0+128),w
 15771  17DD  0022               	movlb	2	; select bank2
 15772  17DE  00BF               	movwf	(sin@f+1)^(0+256)
 15773  17DF  0021               	movlb	1	; select bank1
 15774  17E0  0830               	movf	(?___ftmul+2)^(0+128),w
 15775  17E1  0022               	movlb	2	; select bank2
 15776  17E2  00C0               	movwf	(sin@f+2)^(0+256)
 15777  17E3  084B               	movf	sin@sgn^(0+256),w
 15778  17E4  1903               	btfsc	3,2
 15779  17E5  0008               	return
 15780  17E6  083E               	movf	sin@f^(0+256),w
 15781  17E7  0021               	movlb	1	; select bank1
 15782  17E8  00BE               	movwf	___ftneg@f1^(0+128)
 15783  17E9  0022               	movlb	2	; select bank2
 15784  17EA  083F               	movf	(sin@f+1)^(0+256),w
 15785  17EB  0021               	movlb	1	; select bank1
 15786  17EC  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 15787  17ED  0022               	movlb	2	; select bank2
 15788  17EE  0840               	movf	(sin@f+2)^(0+256),w
 15789  17EF  0021               	movlb	1	; select bank1
 15790  17F0  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 15791  17F1  31AC  24B5         	fcall	___ftneg
 15792  17F3  0021               	movlb	1	; select bank1
 15793  17F4  083E               	movf	?___ftneg^(0+128),w
 15794  17F5  0022               	movlb	2	; select bank2
 15795  17F6  00BE               	movwf	?_sin^(0+256)
 15796  17F7  0021               	movlb	1	; select bank1
 15797  17F8  083F               	movf	(?___ftneg+1)^(0+128),w
 15798  17F9  0022               	movlb	2	; select bank2
 15799  17FA  00BF               	movwf	(?_sin+1)^(0+256)
 15800  17FB  0021               	movlb	1	; select bank1
 15801  17FC  0840               	movf	(?___ftneg+2)^(0+128),w
 15802  17FD  0022               	movlb	2	; select bank2
 15803  17FE  00C0               	movwf	(?_sin+2)^(0+256)
 15804  17FF  0008               	return
 15805  1800                     __end_of_sin:	
 15806                           
 15807                           	psect	text47
 15808  1000                     __ptext47:	
 15809 ;; *************** function _floor *****************
 15810 ;; Defined at:
 15811 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\floor.c"
 15812 ;; Parameters:    Size  Location     Type
 15813 ;;  x               3   14[BANK2 ] unsigned char 
 15814 ;; Auto vars:     Size  Location     Type
 15815 ;;  i               3   18[BANK2 ] unsigned char 
 15816 ;;  expon           2   21[BANK2 ] int 
 15817 ;; Return value:  Size  Location     Type
 15818 ;;                  3   14[BANK2 ] int 
 15819 ;; Registers used:
 15820 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15821 ;; Tracked objects:
 15822 ;;		On entry : 0/0
 15823 ;;		On exit  : 0/0
 15824 ;;		Unchanged: 0/0
 15825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15826 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15827 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15828 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15829 ;;      Totals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15830 ;;Total ram usage:        9 bytes
 15831 ;; Hardware stack levels used:    1
 15832 ;; Hardware stack levels required when called:    5
 15833 ;; This function calls:
 15834 ;;		___altoft
 15835 ;;		___ftadd
 15836 ;;		___ftge
 15837 ;;		___fttol
 15838 ;;		_frexp
 15839 ;; This function is called by:
 15840 ;;		_sin
 15841 ;;		_exp
 15842 ;; This function uses a non-reentrant model
 15843 ;;
 15844                           
 15845                           
 15846                           ;psect for function _floor
 15847  1000                     _floor:	
 15848                           
 15849                           ;incstack = 0
 15850                           ; Regs used in _floor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15851  1000  0022               	movlb	2	; select bank2
 15852  1001  082E               	movf	floor@x^(0+256),w
 15853  1002  0021               	movlb	1	; select bank1
 15854  1003  00A0               	movwf	frexp@value^(0+128)
 15855  1004  0022               	movlb	2	; select bank2
 15856  1005  082F               	movf	(floor@x+1)^(0+256),w
 15857  1006  0021               	movlb	1	; select bank1
 15858  1007  00A1               	movwf	(frexp@value+1)^(0+128)
 15859  1008  0022               	movlb	2	; select bank2
 15860  1009  0830               	movf	(floor@x+2)^(0+256),w
 15861  100A  0021               	movlb	1	; select bank1
 15862  100B  00A2               	movwf	(frexp@value+2)^(0+128)
 15863  100C  3035               	movlw	(low (floor@expon| (0+256)))& (0+255)
 15864  100D  0022               	movlb	2	; select bank2
 15865  100E  00B1               	movwf	??_floor^(0+256)
 15866  100F  0831               	movf	??_floor^(0+256),w
 15867  1010  0021               	movlb	1	; select bank1
 15868  1011  00A3               	movwf	frexp@eptr^(0+128)
 15869  1012  31A1  217D  3190   	fcall	_frexp
 15870  1015  0022               	movlb	2	; select bank2
 15871  1016  1FB6               	btfss	(floor@expon+1)^(0+256),7
 15872  1017  283E               	goto	l8216
 15873  1018  082E               	movf	floor@x^(0+256),w
 15874  1019  0021               	movlb	1	; select bank1
 15875  101A  00A0               	movwf	___ftge@ff1^(0+128)
 15876  101B  0022               	movlb	2	; select bank2
 15877  101C  082F               	movf	(floor@x+1)^(0+256),w
 15878  101D  0021               	movlb	1	; select bank1
 15879  101E  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15880  101F  0022               	movlb	2	; select bank2
 15881  1020  0830               	movf	(floor@x+2)^(0+256),w
 15882  1021  0021               	movlb	1	; select bank1
 15883  1022  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15884  1023  3000               	movlw	0
 15885  1024  00A3               	movwf	___ftge@ff2^(0+128)
 15886  1025  3000               	movlw	0
 15887  1026  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15888  1027  3000               	movlw	0
 15889  1028  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15890  1029  31A0  2089  3190   	fcall	___ftge
 15891  102C  1803               	btfsc	3,0
 15892  102D  2836               	goto	l8212
 15893  102E  3000               	movlw	0
 15894  102F  0022               	movlb	2	; select bank2
 15895  1030  00AE               	movwf	?_floor^(0+256)
 15896  1031  3080               	movlw	128
 15897  1032  00AF               	movwf	(?_floor+1)^(0+256)
 15898  1033  30BF               	movlw	191
 15899  1034  00B0               	movwf	(?_floor+2)^(0+256)
 15900  1035  0008               	return
 15901  1036                     l8212:	
 15902  1036  3000               	movlw	0
 15903  1037  0022               	movlb	2	; select bank2
 15904  1038  00AE               	movwf	?_floor^(0+256)
 15905  1039  3000               	movlw	0
 15906  103A  00AF               	movwf	(?_floor+1)^(0+256)
 15907  103B  3000               	movlw	0
 15908  103C  00B0               	movwf	(?_floor+2)^(0+256)
 15909  103D  0008               	return
 15910  103E                     l8216:	
 15911  103E  3000               	movlw	0
 15912  103F  0236               	subwf	(floor@expon+1)^(0+256),w
 15913  1040  3015               	movlw	21
 15914  1041  1903               	skipnz
 15915  1042  0235               	subwf	floor@expon^(0+256),w
 15916  1043  1803               	btfsc	3,0
 15917  1044  0008               	return
 15918  1045  082E               	movf	floor@x^(0+256),w
 15919  1046  00A0               	movwf	___fttol@f1^(0+256)
 15920  1047  082F               	movf	(floor@x+1)^(0+256),w
 15921  1048  00A1               	movwf	(___fttol@f1+1)^(0+256)
 15922  1049  0830               	movf	(floor@x+2)^(0+256),w
 15923  104A  00A2               	movwf	(___fttol@f1+2)^(0+256)
 15924  104B  3199  213F  3190   	fcall	___fttol
 15925  104E  0022               	movlb	2	; select bank2
 15926  104F  0823               	movf	(?___fttol+3)^(0+256),w
 15927  1050  0021               	movlb	1	; select bank1
 15928  1051  00AB               	movwf	(___altoft@c+3)^(0+128)
 15929  1052  0022               	movlb	2	; select bank2
 15930  1053  0822               	movf	(?___fttol+2)^(0+256),w
 15931  1054  0021               	movlb	1	; select bank1
 15932  1055  00AA               	movwf	(___altoft@c+2)^(0+128)
 15933  1056  0022               	movlb	2	; select bank2
 15934  1057  0821               	movf	(?___fttol+1)^(0+256),w
 15935  1058  0021               	movlb	1	; select bank1
 15936  1059  00A9               	movwf	(___altoft@c+1)^(0+128)
 15937  105A  0022               	movlb	2	; select bank2
 15938  105B  0820               	movf	?___fttol^(0+256),w
 15939  105C  0021               	movlb	1	; select bank1
 15940  105D  00A8               	movwf	___altoft@c^(0+128)
 15941  105E  31A0  20C5  3190   	fcall	___altoft
 15942  1061  0021               	movlb	1	; select bank1
 15943  1062  0828               	movf	?___altoft^(0+128),w
 15944  1063  0022               	movlb	2	; select bank2
 15945  1064  00B2               	movwf	floor@i^(0+256)
 15946  1065  0021               	movlb	1	; select bank1
 15947  1066  0829               	movf	(?___altoft+1)^(0+128),w
 15948  1067  0022               	movlb	2	; select bank2
 15949  1068  00B3               	movwf	(floor@i+1)^(0+256)
 15950  1069  0021               	movlb	1	; select bank1
 15951  106A  082A               	movf	(?___altoft+2)^(0+128),w
 15952  106B  0022               	movlb	2	; select bank2
 15953  106C  00B4               	movwf	(floor@i+2)^(0+256)
 15954  106D  082E               	movf	floor@x^(0+256),w
 15955  106E  0021               	movlb	1	; select bank1
 15956  106F  00A0               	movwf	___ftge@ff1^(0+128)
 15957  1070  0022               	movlb	2	; select bank2
 15958  1071  082F               	movf	(floor@x+1)^(0+256),w
 15959  1072  0021               	movlb	1	; select bank1
 15960  1073  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15961  1074  0022               	movlb	2	; select bank2
 15962  1075  0830               	movf	(floor@x+2)^(0+256),w
 15963  1076  0021               	movlb	1	; select bank1
 15964  1077  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15965  1078  0022               	movlb	2	; select bank2
 15966  1079  0832               	movf	floor@i^(0+256),w
 15967  107A  0021               	movlb	1	; select bank1
 15968  107B  00A3               	movwf	___ftge@ff2^(0+128)
 15969  107C  0022               	movlb	2	; select bank2
 15970  107D  0833               	movf	(floor@i+1)^(0+256),w
 15971  107E  0021               	movlb	1	; select bank1
 15972  107F  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15973  1080  0022               	movlb	2	; select bank2
 15974  1081  0834               	movf	(floor@i+2)^(0+256),w
 15975  1082  0021               	movlb	1	; select bank1
 15976  1083  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15977  1084  31A0  2089  3190   	fcall	___ftge
 15978  1087  1803               	btfsc	3,0
 15979  1088  28AB               	goto	l8226
 15980  1089  3000               	movlw	0
 15981  108A  0021               	movlb	1	; select bank1
 15982  108B  00C1               	movwf	___ftadd@f1^(0+128)
 15983  108C  3080               	movlw	128
 15984  108D  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 15985  108E  30BF               	movlw	191
 15986  108F  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 15987  1090  0022               	movlb	2	; select bank2
 15988  1091  0832               	movf	floor@i^(0+256),w
 15989  1092  0021               	movlb	1	; select bank1
 15990  1093  00C4               	movwf	___ftadd@f2^(0+128)
 15991  1094  0022               	movlb	2	; select bank2
 15992  1095  0833               	movf	(floor@i+1)^(0+256),w
 15993  1096  0021               	movlb	1	; select bank1
 15994  1097  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 15995  1098  0022               	movlb	2	; select bank2
 15996  1099  0834               	movf	(floor@i+2)^(0+256),w
 15997  109A  0021               	movlb	1	; select bank1
 15998  109B  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 15999  109C  319F  270A         	fcall	___ftadd
 16000  109E  0021               	movlb	1	; select bank1
 16001  109F  0841               	movf	?___ftadd^(0+128),w
 16002  10A0  0022               	movlb	2	; select bank2
 16003  10A1  00AE               	movwf	?_floor^(0+256)
 16004  10A2  0021               	movlb	1	; select bank1
 16005  10A3  0842               	movf	(?___ftadd+1)^(0+128),w
 16006  10A4  0022               	movlb	2	; select bank2
 16007  10A5  00AF               	movwf	(?_floor+1)^(0+256)
 16008  10A6  0021               	movlb	1	; select bank1
 16009  10A7  0843               	movf	(?___ftadd+2)^(0+128),w
 16010  10A8  0022               	movlb	2	; select bank2
 16011  10A9  00B0               	movwf	(?_floor+2)^(0+256)
 16012  10AA  0008               	return
 16013  10AB                     l8226:	
 16014  10AB  0022               	movlb	2	; select bank2
 16015  10AC  0832               	movf	floor@i^(0+256),w
 16016  10AD  00AE               	movwf	?_floor^(0+256)
 16017  10AE  0833               	movf	(floor@i+1)^(0+256),w
 16018  10AF  00AF               	movwf	(?_floor+1)^(0+256)
 16019  10B0  0834               	movf	(floor@i+2)^(0+256),w
 16020  10B1  00B0               	movwf	(?_floor+2)^(0+256)
 16021  10B2  0008               	return
 16022  10B3                     __end_of_floor:	
 16023                           
 16024                           	psect	text48
 16025  217D                     __ptext48:	
 16026 ;; *************** function _frexp *****************
 16027 ;; Defined at:
 16028 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
 16029 ;; Parameters:    Size  Location     Type
 16030 ;;  value           3    0[BANK1 ] int 
 16031 ;;  eptr            1    3[BANK1 ] PTR int 
 16032 ;;		 -> log@exponent(2), floor@expon(2), 
 16033 ;; Auto vars:     Size  Location     Type
 16034 ;;		None
 16035 ;; Return value:  Size  Location     Type
 16036 ;;                  3    0[BANK1 ] PTR int 
 16037 ;; Registers used:
 16038 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16039 ;; Tracked objects:
 16040 ;;		On entry : 0/0
 16041 ;;		On exit  : 0/0
 16042 ;;		Unchanged: 0/0
 16043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16044 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16045 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16046 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16047 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16048 ;;Total ram usage:        6 bytes
 16049 ;; Hardware stack levels used:    1
 16050 ;; Hardware stack levels required when called:    3
 16051 ;; This function calls:
 16052 ;;		Nothing
 16053 ;; This function is called by:
 16054 ;;		_floor
 16055 ;;		_log
 16056 ;; This function uses a non-reentrant model
 16057 ;;
 16058                           
 16059                           
 16060                           ;psect for function _frexp
 16061  217D                     _frexp:	
 16062                           
 16063                           ;incstack = 0
 16064                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
 16065  217D  0021               	movlb	1	; select bank1
 16066  217E  0822               	movf	(frexp@value+2)^(0+128),w
 16067  217F  0421               	iorwf	(frexp@value+1)^(0+128),w
 16068  2180  0420               	iorwf	frexp@value^(0+128),w
 16069  2181  1D03               	skipz
 16070  2182  2991               	goto	l8078
 16071  2183  0823               	movf	frexp@eptr^(0+128),w
 16072  2184  0086               	movwf	6
 16073  2185  3001               	movlw	1	; select bank2/3
 16074  2186  0087               	movwf	7
 16075  2187  3000               	movlw	0
 16076  2188  3FC0               	movwi [0]fsr1
 16077  2189  3FC1               	movwi [1]fsr1
 16078  218A  3000               	movlw	0
 16079  218B  00A0               	movwf	?_frexp^(0+128)
 16080  218C  3000               	movlw	0
 16081  218D  00A1               	movwf	(?_frexp+1)^(0+128)
 16082  218E  3000               	movlw	0
 16083  218F  00A2               	movwf	(?_frexp+2)^(0+128)
 16084  2190  0008               	return
 16085  2191                     l8078:	
 16086  2191  0822               	movf	(frexp@value^(0+128)+2),w
 16087  2192  397F               	andlw	127
 16088  2193  00A4               	movwf	??_frexp^(0+128)
 16089  2194  01A5               	clrf	(??_frexp^(0+128)+1)
 16090  2195  35A4               	lslf	??_frexp^(0+128),f
 16091  2196  0DA5               	rlf	(??_frexp^(0+128)+1),f
 16092  2197  0823               	movf	frexp@eptr^(0+128),w
 16093  2198  0086               	movwf	6
 16094  2199  3001               	movlw	1	; select bank2/3
 16095  219A  0087               	movwf	7
 16096  219B  0824               	movf	??_frexp^(0+128),w
 16097  219C  3FC0               	movwi [0]fsr1
 16098  219D  0825               	movf	(??_frexp+1)^(0+128),w
 16099  219E  3FC1               	movwi [1]fsr1
 16100  219F  0D21               	rlf	(frexp@value^(0+128)+1),w
 16101  21A0  0D21               	rlf	(frexp@value^(0+128)+1),w
 16102  21A1  3901               	andlw	1
 16103  21A2  00A4               	movwf	??_frexp^(0+128)
 16104  21A3  01A5               	clrf	(??_frexp^(0+128)+1)
 16105  21A4  0823               	movf	frexp@eptr^(0+128),w
 16106  21A5  0086               	movwf	6
 16107  21A6  3001               	movlw	1	; select bank2/3
 16108  21A7  0087               	movwf	7
 16109  21A8  0824               	movf	??_frexp^(0+128),w
 16110  21A9  0481               	iorwf	1,f
 16111  21AA  3141               	addfsr 1,1
 16112  21AB  0825               	movf	(??_frexp+1)^(0+128),w
 16113  21AC  0481               	iorwf	1,f
 16114  21AD  0823               	movf	frexp@eptr^(0+128),w
 16115  21AE  0086               	movwf	6
 16116  21AF  3001               	movlw	1	; select bank2/3
 16117  21B0  0087               	movwf	7
 16118  21B1  3082               	movlw	130
 16119  21B2  0781               	addwf	1,f
 16120  21B3  3141               	addfsr 1,1
 16121  21B4  30FF               	movlw	255
 16122  21B5  3D81               	addwfc	1,f
 16123  21B6  317F               	addfsr 1,-1
 16124  21B7  0822               	movf	(frexp@value^(0+128)+2),w
 16125  21B8  3980               	andlw	-128
 16126  21B9  383F               	iorlw	63
 16127  21BA  00A2               	movwf	(frexp@value^(0+128)+2)
 16128  21BB  13A1               	bcf	(frexp@value^(0+128)+1),7
 16129  21BC  0008               	return
 16130  21BD                     __end_of_frexp:	
 16131                           
 16132                           	psect	text49
 16133  193F                     __ptext49:	
 16134 ;; *************** function ___fttol *****************
 16135 ;; Defined at:
 16136 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
 16137 ;; Parameters:    Size  Location     Type
 16138 ;;  f1              3    0[BANK2 ] float 
 16139 ;; Auto vars:     Size  Location     Type
 16140 ;;  lval            4    9[BANK2 ] unsigned long 
 16141 ;;  exp1            1   13[BANK2 ] unsigned char 
 16142 ;;  sign1           1    8[BANK2 ] unsigned char 
 16143 ;; Return value:  Size  Location     Type
 16144 ;;                  4    0[BANK2 ] long 
 16145 ;; Registers used:
 16146 ;;		wreg, status,2, status,0
 16147 ;; Tracked objects:
 16148 ;;		On entry : 0/0
 16149 ;;		On exit  : 0/0
 16150 ;;		Unchanged: 0/0
 16151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16152 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16153 ;;      Locals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16154 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16155 ;;      Totals:         0       0       0      14       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16156 ;;Total ram usage:       14 bytes
 16157 ;; Hardware stack levels used:    1
 16158 ;; Hardware stack levels required when called:    3
 16159 ;; This function calls:
 16160 ;;		Nothing
 16161 ;; This function is called by:
 16162 ;;		_main
 16163 ;;		_set_subdivision
 16164 ;;		_scaleA100kPot
 16165 ;;		_scaleA10kPot
 16166 ;;		_scaleiA10kPot
 16167 ;;		_getModulationDelayTime
 16168 ;;		_modCos
 16169 ;;		_modTri
 16170 ;;		_modSaw
 16171 ;;		_pow
 16172 ;;		_exp
 16173 ;;		_floor
 16174 ;;		_scaleiA100kPot
 16175 ;;		_scaleA25kPot
 16176 ;;		_scaleiA25kPot
 16177 ;; This function uses a non-reentrant model
 16178 ;;
 16179                           
 16180                           
 16181                           ;psect for function ___fttol
 16182  193F                     ___fttol:	
 16183                           
 16184                           ;incstack = 0
 16185                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 16186  193F  0022               	movlb	2	; select bank2
 16187  1940  0820               	movf	___fttol@f1^(0+256),w
 16188  1941  00A4               	movwf	??___fttol^(0+256)
 16189  1942  0821               	movf	(___fttol@f1+1)^(0+256),w
 16190  1943  00A5               	movwf	(??___fttol^(0+256)+1)
 16191  1944  0822               	movf	(___fttol@f1+2)^(0+256),w
 16192  1945  00A6               	movwf	(??___fttol^(0+256)+2)
 16193  1946  1003               	clrc
 16194  1947  0D25               	rlf	(??___fttol^(0+256)+1),w
 16195  1948  0D26               	rlf	(??___fttol^(0+256)+2),w
 16196  1949  00A7               	movwf	(??___fttol+3)^(0+256)
 16197  194A  0827               	movf	(??___fttol+3)^(0+256),w
 16198  194B  00AD               	movwf	___fttol@exp1^(0+256)
 16199  194C  082D               	movf	___fttol@exp1^(0+256),w
 16200  194D  1D03               	btfss	3,2
 16201  194E  2958               	goto	l8034
 16202  194F  3000               	movlw	0
 16203  1950  00A3               	movwf	(?___fttol+3)^(0+256)
 16204  1951  3000               	movlw	0
 16205  1952  00A2               	movwf	(?___fttol+2)^(0+256)
 16206  1953  3000               	movlw	0
 16207  1954  00A1               	movwf	(?___fttol+1)^(0+256)
 16208  1955  3000               	movlw	0
 16209  1956  00A0               	movwf	?___fttol^(0+256)
 16210  1957  0008               	return
 16211  1958                     l8034:	
 16212  1958  0820               	movf	___fttol@f1^(0+256),w
 16213  1959  00A4               	movwf	??___fttol^(0+256)
 16214  195A  0821               	movf	(___fttol@f1+1)^(0+256),w
 16215  195B  00A5               	movwf	(??___fttol^(0+256)+1)
 16216  195C  0822               	movf	(___fttol@f1+2)^(0+256),w
 16217  195D  00A6               	movwf	(??___fttol^(0+256)+2)
 16218  195E  3017               	movlw	23
 16219  195F                     u8445:	
 16220  195F  36A6               	lsrf	(??___fttol^(0+256)+2),f
 16221  1960  0CA5               	rrf	(??___fttol^(0+256)+1),f
 16222  1961  0CA4               	rrf	??___fttol^(0+256),f
 16223  1962  0B89               	decfsz	9,f
 16224  1963  295F               	goto	u8445
 16225  1964  0824               	movf	??___fttol^(0+256),w
 16226  1965  00A7               	movwf	(??___fttol+3)^(0+256)
 16227  1966  0827               	movf	(??___fttol+3)^(0+256),w
 16228  1967  00A8               	movwf	___fttol@sign1^(0+256)
 16229  1968  17A1               	bsf	(___fttol@f1^(0+256)+1),7
 16230  1969  30FF               	movlw	255
 16231  196A  05A0               	andwf	___fttol@f1^(0+256),f
 16232  196B  30FF               	movlw	255
 16233  196C  05A1               	andwf	(___fttol@f1+1)^(0+256),f
 16234  196D  3000               	movlw	0
 16235  196E  05A2               	andwf	(___fttol@f1+2)^(0+256),f
 16236  196F  0820               	movf	___fttol@f1^(0+256),w
 16237  1970  00A9               	movwf	___fttol@lval^(0+256)
 16238  1971  0821               	movf	(___fttol@f1+1)^(0+256),w
 16239  1972  00AA               	movwf	(___fttol@lval^(0+256)+1)
 16240  1973  0822               	movf	(___fttol@f1+2)^(0+256),w
 16241  1974  00AB               	movwf	(___fttol@lval^(0+256)+2)
 16242  1975  01AC               	clrf	(___fttol@lval^(0+256)+3)
 16243  1976  308E               	movlw	142
 16244  1977  02AD               	subwf	___fttol@exp1^(0+256),f
 16245  1978  1FAD               	btfss	___fttol@exp1^(0+256),7
 16246  1979  2996               	goto	l8054
 16247  197A  082D               	movf	___fttol@exp1^(0+256),w
 16248  197B  3A80               	xorlw	128
 16249  197C  3E8F               	addlw	143
 16250  197D  1803               	skipnc
 16251  197E  2988               	goto	l8052
 16252  197F  3000               	movlw	0
 16253  1980  00A3               	movwf	(?___fttol+3)^(0+256)
 16254  1981  3000               	movlw	0
 16255  1982  00A2               	movwf	(?___fttol+2)^(0+256)
 16256  1983  3000               	movlw	0
 16257  1984  00A1               	movwf	(?___fttol+1)^(0+256)
 16258  1985  3000               	movlw	0
 16259  1986  00A0               	movwf	?___fttol^(0+256)
 16260  1987  0008               	return
 16261  1988                     l8052:	
 16262  1988  3001               	movlw	1
 16263  1989                     u8475:	
 16264  1989  36AC               	lsrf	(___fttol@lval+3)^(0+256),f
 16265  198A  0CAB               	rrf	(___fttol@lval+2)^(0+256),f
 16266  198B  0CAA               	rrf	(___fttol@lval+1)^(0+256),f
 16267  198C  0CA9               	rrf	___fttol@lval^(0+256),f
 16268  198D  0B89               	decfsz	9,f
 16269  198E  2989               	goto	u8475
 16270  198F  3001               	movlw	1
 16271  1990  00A4               	movwf	??___fttol^(0+256)
 16272  1991  0824               	movf	??___fttol^(0+256),w
 16273  1992  07AD               	addwf	___fttol@exp1^(0+256),f
 16274  1993  1903               	btfsc	3,2
 16275  1994  29AF               	goto	l8062
 16276  1995  2988               	goto	l8052
 16277  1996                     l8054:	
 16278  1996  3018               	movlw	24
 16279  1997  022D               	subwf	___fttol@exp1^(0+256),w
 16280  1998  1C03               	skipc
 16281  1999  29AC               	goto	l2280
 16282  199A  3000               	movlw	0
 16283  199B  00A3               	movwf	(?___fttol+3)^(0+256)
 16284  199C  3000               	movlw	0
 16285  199D  00A2               	movwf	(?___fttol+2)^(0+256)
 16286  199E  3000               	movlw	0
 16287  199F  00A1               	movwf	(?___fttol+1)^(0+256)
 16288  19A0  3000               	movlw	0
 16289  19A1  00A0               	movwf	?___fttol^(0+256)
 16290  19A2  0008               	return
 16291  19A3                     l8060:	
 16292  19A3  3001               	movlw	1
 16293  19A4                     u8505:	
 16294  19A4  35A9               	lslf	___fttol@lval^(0+256),f
 16295  19A5  0DAA               	rlf	(___fttol@lval+1)^(0+256),f
 16296  19A6  0DAB               	rlf	(___fttol@lval+2)^(0+256),f
 16297  19A7  0DAC               	rlf	(___fttol@lval+3)^(0+256),f
 16298  19A8  0B89               	decfsz	9,f
 16299  19A9  29A4               	goto	u8505
 16300  19AA  3001               	movlw	1
 16301  19AB  02AD               	subwf	___fttol@exp1^(0+256),f
 16302  19AC                     l2280:	
 16303  19AC  082D               	movf	___fttol@exp1^(0+256),w
 16304  19AD  1D03               	btfss	3,2
 16305  19AE  29A3               	goto	l8060
 16306  19AF                     l8062:	
 16307  19AF  0828               	movf	___fttol@sign1^(0+256),w
 16308  19B0  1903               	btfsc	3,2
 16309  19B1  29BD               	goto	l8066
 16310  19B2  09A9               	comf	___fttol@lval^(0+256),f
 16311  19B3  09AA               	comf	(___fttol@lval+1)^(0+256),f
 16312  19B4  09AB               	comf	(___fttol@lval+2)^(0+256),f
 16313  19B5  09AC               	comf	(___fttol@lval+3)^(0+256),f
 16314  19B6  0AA9               	incf	___fttol@lval^(0+256),f
 16315  19B7  1903               	skipnz
 16316  19B8  0AAA               	incf	(___fttol@lval+1)^(0+256),f
 16317  19B9  1903               	skipnz
 16318  19BA  0AAB               	incf	(___fttol@lval+2)^(0+256),f
 16319  19BB  1903               	skipnz
 16320  19BC  0AAC               	incf	(___fttol@lval+3)^(0+256),f
 16321  19BD                     l8066:	
 16322  19BD  082C               	movf	(___fttol@lval+3)^(0+256),w
 16323  19BE  00A3               	movwf	(?___fttol+3)^(0+256)
 16324  19BF  082B               	movf	(___fttol@lval+2)^(0+256),w
 16325  19C0  00A2               	movwf	(?___fttol+2)^(0+256)
 16326  19C1  082A               	movf	(___fttol@lval+1)^(0+256),w
 16327  19C2  00A1               	movwf	(?___fttol+1)^(0+256)
 16328  19C3  0829               	movf	___fttol@lval^(0+256),w
 16329  19C4  00A0               	movwf	?___fttol^(0+256)
 16330  19C5  0008               	return
 16331  19C6                     __end_of___fttol:	
 16332                           
 16333                           	psect	text50
 16334  2089                     __ptext50:	
 16335 ;; *************** function ___ftge *****************
 16336 ;; Defined at:
 16337 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftge.c"
 16338 ;; Parameters:    Size  Location     Type
 16339 ;;  ff1             3    0[BANK1 ] float 
 16340 ;;  ff2             3    3[BANK1 ] float 
 16341 ;; Auto vars:     Size  Location     Type
 16342 ;;		None
 16343 ;; Return value:  Size  Location     Type
 16344 ;;		None               void
 16345 ;; Registers used:
 16346 ;;		wreg, status,2, status,0
 16347 ;; Tracked objects:
 16348 ;;		On entry : 0/0
 16349 ;;		On exit  : 0/0
 16350 ;;		Unchanged: 0/0
 16351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16352 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16354 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16355 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16356 ;;Total ram usage:        9 bytes
 16357 ;; Hardware stack levels used:    1
 16358 ;; Hardware stack levels required when called:    3
 16359 ;; This function calls:
 16360 ;;		Nothing
 16361 ;; This function is called by:
 16362 ;;		_scaleA10kPot
 16363 ;;		_scaleiA10kPot
 16364 ;;		_modCos
 16365 ;;		_modTri
 16366 ;;		_modSaw
 16367 ;;		_modSquare
 16368 ;;		_cos
 16369 ;;		_pow
 16370 ;;		_sin
 16371 ;;		_exp
 16372 ;;		_floor
 16373 ;;		_ldexp
 16374 ;;		_log
 16375 ;;		_scaleiA100kPot
 16376 ;;		_scaleA25kPot
 16377 ;;		_scaleiA25kPot
 16378 ;; This function uses a non-reentrant model
 16379 ;;
 16380                           
 16381                           
 16382                           ;psect for function ___ftge
 16383  2089                     ___ftge:	
 16384                           
 16385                           ;incstack = 0
 16386                           ; Regs used in ___ftge: [wreg+status,2+status,0]
 16387  2089  0021               	movlb	1	; select bank1
 16388  208A  1FA2               	btfss	(___ftge@ff1+2)^(0+128),7
 16389  208B  28A0               	goto	l7954
 16390  208C  0920               	comf	___ftge@ff1^(0+128),w
 16391  208D  00A6               	movwf	??___ftge^(0+128)
 16392  208E  0921               	comf	(___ftge@ff1+1)^(0+128),w
 16393  208F  00A7               	movwf	(??___ftge^(0+128)+1)
 16394  2090  0922               	comf	(___ftge@ff1+2)^(0+128),w
 16395  2091  00A8               	movwf	(??___ftge^(0+128)+2)
 16396  2092  0AA6               	incf	??___ftge^(0+128),f
 16397  2093  1903               	skipnz
 16398  2094  0AA7               	incf	(??___ftge^(0+128)+1),f
 16399  2095  1903               	skipnz
 16400  2096  0AA8               	incf	(??___ftge^(0+128)+2),f
 16401  2097  3000               	movlw	0
 16402  2098  0726               	addwf	??___ftge^(0+128),w
 16403  2099  00A0               	movwf	___ftge@ff1^(0+128)
 16404  209A  3000               	movlw	0
 16405  209B  3D27               	addwfc	(??___ftge+1)^(0+128),w
 16406  209C  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 16407  209D  3080               	movlw	128
 16408  209E  3D28               	addwfc	(??___ftge+2)^(0+128),w
 16409  209F  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 16410  20A0                     l7954:	
 16411  20A0  1FA5               	btfss	(___ftge@ff2+2)^(0+128),7
 16412  20A1  28B6               	goto	l7958
 16413  20A2  0923               	comf	___ftge@ff2^(0+128),w
 16414  20A3  00A6               	movwf	??___ftge^(0+128)
 16415  20A4  0924               	comf	(___ftge@ff2+1)^(0+128),w
 16416  20A5  00A7               	movwf	(??___ftge^(0+128)+1)
 16417  20A6  0925               	comf	(___ftge@ff2+2)^(0+128),w
 16418  20A7  00A8               	movwf	(??___ftge^(0+128)+2)
 16419  20A8  0AA6               	incf	??___ftge^(0+128),f
 16420  20A9  1903               	skipnz
 16421  20AA  0AA7               	incf	(??___ftge^(0+128)+1),f
 16422  20AB  1903               	skipnz
 16423  20AC  0AA8               	incf	(??___ftge^(0+128)+2),f
 16424  20AD  3000               	movlw	0
 16425  20AE  0726               	addwf	??___ftge^(0+128),w
 16426  20AF  00A3               	movwf	___ftge@ff2^(0+128)
 16427  20B0  3000               	movlw	0
 16428  20B1  3D27               	addwfc	(??___ftge+1)^(0+128),w
 16429  20B2  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 16430  20B3  3080               	movlw	128
 16431  20B4  3D28               	addwfc	(??___ftge+2)^(0+128),w
 16432  20B5  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 16433  20B6                     l7958:	
 16434  20B6  3080               	movlw	128
 16435  20B7  06A2               	xorwf	(___ftge@ff1+2)^(0+128),f
 16436  20B8  3080               	movlw	128
 16437  20B9  06A5               	xorwf	(___ftge@ff2+2)^(0+128),f
 16438  20BA  0825               	movf	(___ftge@ff2+2)^(0+128),w
 16439  20BB  0222               	subwf	(___ftge@ff1+2)^(0+128),w
 16440  20BC  1D03               	skipz
 16441  20BD  0008               	return
 16442  20BE  0824               	movf	(___ftge@ff2+1)^(0+128),w
 16443  20BF  0221               	subwf	(___ftge@ff1+1)^(0+128),w
 16444  20C0  1D03               	skipz
 16445  20C1  0008               	return
 16446  20C2  0823               	movf	___ftge@ff2^(0+128),w
 16447  20C3  0220               	subwf	___ftge@ff1^(0+128),w
 16448  20C4  0008               	return
 16449  20C5                     __end_of___ftge:	
 16450                           
 16451                           	psect	text51
 16452  20C5                     __ptext51:	
 16453 ;; *************** function ___altoft *****************
 16454 ;; Defined at:
 16455 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\altoft.c"
 16456 ;; Parameters:    Size  Location     Type
 16457 ;;  c               4    8[BANK1 ] long 
 16458 ;; Auto vars:     Size  Location     Type
 16459 ;;  sign            1   15[BANK1 ] unsigned char 
 16460 ;;  exp             1   14[BANK1 ] unsigned char 
 16461 ;; Return value:  Size  Location     Type
 16462 ;;                  3    8[BANK1 ] float 
 16463 ;; Registers used:
 16464 ;;		wreg, status,2, status,0, pclath, cstack
 16465 ;; Tracked objects:
 16466 ;;		On entry : 0/0
 16467 ;;		On exit  : 0/0
 16468 ;;		Unchanged: 0/0
 16469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16470 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16471 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16472 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16473 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16474 ;;Total ram usage:        8 bytes
 16475 ;; Hardware stack levels used:    1
 16476 ;; Hardware stack levels required when called:    4
 16477 ;; This function calls:
 16478 ;;		___ftpack
 16479 ;; This function is called by:
 16480 ;;		_getModulationDelayTime
 16481 ;;		_floor
 16482 ;; This function uses a non-reentrant model
 16483 ;;
 16484                           
 16485                           
 16486                           ;psect for function ___altoft
 16487  20C5                     ___altoft:	
 16488                           
 16489                           ;incstack = 0
 16490                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
 16491  20C5  0021               	movlb	1	; select bank1
 16492  20C6  01AF               	clrf	___altoft@sign^(0+128)
 16493  20C7  308E               	movlw	142
 16494  20C8  00AC               	movwf	??___altoft^(0+128)
 16495  20C9  082C               	movf	??___altoft^(0+128),w
 16496  20CA  00AE               	movwf	___altoft@exp^(0+128)
 16497  20CB  1FAB               	btfss	(___altoft@c+3)^(0+128),7
 16498  20CC  28DA               	goto	l7874
 16499  20CD  09A8               	comf	___altoft@c^(0+128),f
 16500  20CE  09A9               	comf	(___altoft@c+1)^(0+128),f
 16501  20CF  09AA               	comf	(___altoft@c+2)^(0+128),f
 16502  20D0  09AB               	comf	(___altoft@c+3)^(0+128),f
 16503  20D1  0AA8               	incf	___altoft@c^(0+128),f
 16504  20D2  1903               	skipnz
 16505  20D3  0AA9               	incf	(___altoft@c+1)^(0+128),f
 16506  20D4  1903               	skipnz
 16507  20D5  0AAA               	incf	(___altoft@c+2)^(0+128),f
 16508  20D6  1903               	skipnz
 16509  20D7  0AAB               	incf	(___altoft@c+3)^(0+128),f
 16510  20D8  01AF               	clrf	___altoft@sign^(0+128)
 16511  20D9  0AAF               	incf	___altoft@sign^(0+128),f
 16512  20DA                     l7874:	
 16513  20DA  30FF               	movlw	255
 16514  20DB  052B               	andwf	(___altoft@c+3)^(0+128),w
 16515  20DC  1903               	btfsc	3,2
 16516  20DD  28EA               	goto	l7876
 16517  20DE  3001               	movlw	1
 16518  20DF                     u8025:	
 16519  20DF  36AB               	lsrf	(___altoft@c+3)^(0+128),f
 16520  20E0  0CAA               	rrf	(___altoft@c+2)^(0+128),f
 16521  20E1  0CA9               	rrf	(___altoft@c+1)^(0+128),f
 16522  20E2  0CA8               	rrf	___altoft@c^(0+128),f
 16523  20E3  0B89               	decfsz	9,f
 16524  20E4  28DF               	goto	u8025
 16525  20E5  3001               	movlw	1
 16526  20E6  00AC               	movwf	??___altoft^(0+128)
 16527  20E7  082C               	movf	??___altoft^(0+128),w
 16528  20E8  07AE               	addwf	___altoft@exp^(0+128),f
 16529  20E9  28DA               	goto	l7874
 16530  20EA                     l7876:	
 16531  20EA  0828               	movf	___altoft@c^(0+128),w
 16532  20EB  00A0               	movwf	___ftpack@arg^(0+128)
 16533  20EC  0829               	movf	(___altoft@c+1)^(0+128),w
 16534  20ED  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 16535  20EE  082A               	movf	(___altoft@c+2)^(0+128),w
 16536  20EF  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 16537  20F0  082E               	movf	___altoft@exp^(0+128),w
 16538  20F1  00AC               	movwf	??___altoft^(0+128)
 16539  20F2  082C               	movf	??___altoft^(0+128),w
 16540  20F3  00A3               	movwf	___ftpack@exp^(0+128)
 16541  20F4  082F               	movf	___altoft@sign^(0+128),w
 16542  20F5  00AD               	movwf	(??___altoft+1)^(0+128)
 16543  20F6  082D               	movf	(??___altoft+1)^(0+128),w
 16544  20F7  00A4               	movwf	___ftpack@sign^(0+128)
 16545  20F8  31A5  2533         	fcall	___ftpack
 16546  20FA  0021               	movlb	1	; select bank1
 16547  20FB  0820               	movf	?___ftpack^(0+128),w
 16548  20FC  00A8               	movwf	?___altoft^(0+128)
 16549  20FD  0821               	movf	(?___ftpack+1)^(0+128),w
 16550  20FE  00A9               	movwf	(?___altoft+1)^(0+128)
 16551  20FF  0822               	movf	(?___ftpack+2)^(0+128),w
 16552  2100  00AA               	movwf	(?___altoft+2)^(0+128)
 16553  2101  0008               	return
 16554  2102                     __end_of___altoft:	
 16555                           
 16556                           	psect	text52
 16557  2598                     __ptext52:	
 16558 ;; *************** function _eval_poly *****************
 16559 ;; Defined at:
 16560 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\evalpoly.c"
 16561 ;; Parameters:    Size  Location     Type
 16562 ;;  x               3   20[BANK2 ] float 
 16563 ;;  d               2   23[BANK2 ] PTR const 
 16564 ;;		 -> log@coeff(27), exp@coeff(30), sin@coeff_a(15), sin@coeff_b(12), 
 16565 ;;  n               2   25[BANK2 ] int 
 16566 ;; Auto vars:     Size  Location     Type
 16567 ;;  res             3   27[BANK2 ] int 
 16568 ;; Return value:  Size  Location     Type
 16569 ;;                  3   20[BANK2 ] int 
 16570 ;; Registers used:
 16571 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 16572 ;; Tracked objects:
 16573 ;;		On entry : 0/0
 16574 ;;		On exit  : 0/0
 16575 ;;		Unchanged: 0/0
 16576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16577 ;;      Params:         0       0       0       7       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16578 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16580 ;;      Totals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16581 ;;Total ram usage:       10 bytes
 16582 ;; Hardware stack levels used:    1
 16583 ;; Hardware stack levels required when called:    5
 16584 ;; This function calls:
 16585 ;;		___ftadd
 16586 ;;		___ftmul
 16587 ;;		___wmul
 16588 ;; This function is called by:
 16589 ;;		_sin
 16590 ;;		_exp
 16591 ;;		_log
 16592 ;; This function uses a non-reentrant model
 16593 ;;
 16594                           
 16595                           
 16596                           ;psect for function _eval_poly
 16597  2598                     _eval_poly:	
 16598                           
 16599                           ;incstack = 0
 16600                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 16601  2598  0022               	movlb	2	; select bank2
 16602  2599  083A               	movf	(eval_poly@n+1)^(0+256),w
 16603  259A  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 16604  259B  0839               	movf	eval_poly@n^(0+256),w
 16605  259C  00AE               	movwf	___wmul@multiplier^(0+256)
 16606  259D  3003               	movlw	3
 16607  259E  00B0               	movwf	___wmul@multiplicand^(0+256)
 16608  259F  3000               	movlw	0
 16609  25A0  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 16610  25A1  31AD  255F  31A5   	fcall	___wmul
 16611  25A4  0022               	movlb	2	; select bank2
 16612  25A5  0837               	movf	eval_poly@d^(0+256),w
 16613  25A6  072E               	addwf	?___wmul^(0+256),w
 16614  25A7  0084               	movwf	4
 16615  25A8  0838               	movf	(eval_poly@d+1)^(0+256),w
 16616  25A9  3D2F               	addwfc	(?___wmul+1)^(0+256),w
 16617  25AA  0085               	movwf	5
 16618  25AB  3F00               	moviw [0]fsr0
 16619  25AC  00BB               	movwf	eval_poly@res^(0+256)
 16620  25AD  3F01               	moviw [1]fsr0
 16621  25AE  00BC               	movwf	(eval_poly@res+1)^(0+256)
 16622  25AF  3F02               	moviw [2]fsr0
 16623  25B0                     L21:	
 16624  25B0  00BD               	movwf	(eval_poly@res+2)^(0+256)
 16625  25B1  0839               	movf	eval_poly@n^(0+256),w
 16626  25B2  043A               	iorwf	(eval_poly@n+1)^(0+256),w
 16627  25B3  1903               	btfsc	3,2
 16628  25B4  2E03               	goto	l8236
 16629  25B5  30FF               	movlw	255
 16630  25B6  07B9               	addwf	eval_poly@n^(0+256),f
 16631  25B7  30FF               	movlw	255
 16632  25B8  3DBA               	addwfc	(eval_poly@n+1)^(0+256),f
 16633  25B9  083A               	movf	(eval_poly@n+1)^(0+256),w
 16634  25BA  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 16635  25BB  0839               	movf	eval_poly@n^(0+256),w
 16636  25BC  00AE               	movwf	___wmul@multiplier^(0+256)
 16637  25BD  3003               	movlw	3
 16638  25BE  00B0               	movwf	___wmul@multiplicand^(0+256)
 16639  25BF  3000               	movlw	0
 16640  25C0  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 16641  25C1  31AD  255F  31A5   	fcall	___wmul
 16642  25C4  0022               	movlb	2	; select bank2
 16643  25C5  0837               	movf	eval_poly@d^(0+256),w
 16644  25C6  072E               	addwf	?___wmul^(0+256),w
 16645  25C7  0084               	movwf	4
 16646  25C8  0838               	movf	(eval_poly@d+1)^(0+256),w
 16647  25C9  3D2F               	addwfc	(?___wmul+1)^(0+256),w
 16648  25CA  0085               	movwf	5
 16649  25CB  3F00               	moviw [0]fsr0
 16650  25CC  0021               	movlb	1	; select bank1
 16651  25CD  00C1               	movwf	___ftadd@f1^(0+128)
 16652  25CE  3F01               	moviw [1]fsr0
 16653  25CF  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 16654  25D0  3F02               	moviw [2]fsr0
 16655  25D1  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 16656  25D2  0022               	movlb	2	; select bank2
 16657  25D3  083B               	movf	eval_poly@res^(0+256),w
 16658  25D4  0021               	movlb	1	; select bank1
 16659  25D5  00AE               	movwf	___ftmul@f1^(0+128)
 16660  25D6  0022               	movlb	2	; select bank2
 16661  25D7  083C               	movf	(eval_poly@res+1)^(0+256),w
 16662  25D8  0021               	movlb	1	; select bank1
 16663  25D9  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 16664  25DA  0022               	movlb	2	; select bank2
 16665  25DB  083D               	movf	(eval_poly@res+2)^(0+256),w
 16666  25DC  0021               	movlb	1	; select bank1
 16667  25DD  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 16668  25DE  0022               	movlb	2	; select bank2
 16669  25DF  0834               	movf	eval_poly@x^(0+256),w
 16670  25E0  0021               	movlb	1	; select bank1
 16671  25E1  00B1               	movwf	___ftmul@f2^(0+128)
 16672  25E2  0022               	movlb	2	; select bank2
 16673  25E3  0835               	movf	(eval_poly@x+1)^(0+256),w
 16674  25E4  0021               	movlb	1	; select bank1
 16675  25E5  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 16676  25E6  0022               	movlb	2	; select bank2
 16677  25E7  0836               	movf	(eval_poly@x+2)^(0+256),w
 16678  25E8  0021               	movlb	1	; select bank1
 16679  25E9  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 16680  25EA  319C  24BA  31A5   	fcall	___ftmul
 16681  25ED  0021               	movlb	1	; select bank1
 16682  25EE  082E               	movf	?___ftmul^(0+128),w
 16683  25EF  00C4               	movwf	___ftadd@f2^(0+128)
 16684  25F0  082F               	movf	(?___ftmul+1)^(0+128),w
 16685  25F1  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 16686  25F2  0830               	movf	(?___ftmul+2)^(0+128),w
 16687  25F3  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 16688  25F4  319F  270A  31A5   	fcall	___ftadd
 16689  25F7  0021               	movlb	1	; select bank1
 16690  25F8  0841               	movf	?___ftadd^(0+128),w
 16691  25F9  0022               	movlb	2	; select bank2
 16692  25FA  00BB               	movwf	eval_poly@res^(0+256)
 16693  25FB  0021               	movlb	1	; select bank1
 16694  25FC  0842               	movf	(?___ftadd+1)^(0+128),w
 16695  25FD  0022               	movlb	2	; select bank2
 16696  25FE  00BC               	movwf	(eval_poly@res+1)^(0+256)
 16697  25FF  0021               	movlb	1	; select bank1
 16698  2600  0843               	movf	(?___ftadd+2)^(0+128),w
 16699  2601  0022               	movlb	2	; select bank2
 16700  2602  2DB0               	goto	L21
 16701  2603                     l8236:	
 16702  2603  083B               	movf	eval_poly@res^(0+256),w
 16703  2604  00B4               	movwf	?_eval_poly^(0+256)
 16704  2605  083C               	movf	(eval_poly@res+1)^(0+256),w
 16705  2606  00B5               	movwf	(?_eval_poly+1)^(0+256)
 16706  2607  083D               	movf	(eval_poly@res+2)^(0+256),w
 16707  2608  00B6               	movwf	(?_eval_poly+2)^(0+256)
 16708  2609  0008               	return
 16709  260A                     __end_of_eval_poly:	
 16710                           
 16711                           	psect	text53
 16712  2D5F                     __ptext53:	
 16713 ;; *************** function ___wmul *****************
 16714 ;; Defined at:
 16715 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
 16716 ;; Parameters:    Size  Location     Type
 16717 ;;  multiplier      2   14[BANK2 ] unsigned int 
 16718 ;;  multiplicand    2   16[BANK2 ] unsigned int 
 16719 ;; Auto vars:     Size  Location     Type
 16720 ;;  product         2   18[BANK2 ] unsigned int 
 16721 ;; Return value:  Size  Location     Type
 16722 ;;                  2   14[BANK2 ] unsigned int 
 16723 ;; Registers used:
 16724 ;;		wreg, status,2, status,0
 16725 ;; Tracked objects:
 16726 ;;		On entry : 0/0
 16727 ;;		On exit  : 0/0
 16728 ;;		Unchanged: 0/0
 16729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16730 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16731 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16733 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16734 ;;Total ram usage:        6 bytes
 16735 ;; Hardware stack levels used:    1
 16736 ;; Hardware stack levels required when called:    3
 16737 ;; This function calls:
 16738 ;;		Nothing
 16739 ;; This function is called by:
 16740 ;;		_calcCosArray
 16741 ;;		_updateModulationArray
 16742 ;;		_modCos
 16743 ;;		_eval_poly
 16744 ;; This function uses a non-reentrant model
 16745 ;;
 16746                           
 16747                           
 16748                           ;psect for function ___wmul
 16749  2D5F                     ___wmul:	
 16750                           
 16751                           ;incstack = 0
 16752                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 16753  2D5F  0022               	movlb	2	; select bank2
 16754  2D60  01B2               	clrf	___wmul@product^(0+256)
 16755  2D61  01B3               	clrf	(___wmul@product+1)^(0+256)
 16756  2D62                     l7852:	
 16757  2D62  1C2E               	btfss	___wmul@multiplier^(0+256),0
 16758  2D63  2D68               	goto	l2022
 16759  2D64  0830               	movf	___wmul@multiplicand^(0+256),w
 16760  2D65  07B2               	addwf	___wmul@product^(0+256),f
 16761  2D66  0831               	movf	(___wmul@multiplicand+1)^(0+256),w
 16762  2D67  3DB3               	addwfc	(___wmul@product+1)^(0+256),f
 16763  2D68                     l2022:	
 16764  2D68  3001               	movlw	1
 16765  2D69                     u7985:	
 16766  2D69  35B0               	lslf	___wmul@multiplicand^(0+256),f
 16767  2D6A  0DB1               	rlf	(___wmul@multiplicand+1)^(0+256),f
 16768  2D6B  0B89               	decfsz	9,f
 16769  2D6C  2D69               	goto	u7985
 16770  2D6D  3001               	movlw	1
 16771  2D6E                     u7995:	
 16772  2D6E  36AF               	lsrf	(___wmul@multiplier+1)^(0+256),f
 16773  2D6F  0CAE               	rrf	___wmul@multiplier^(0+256),f
 16774  2D70  0B89               	decfsz	9,f
 16775  2D71  2D6E               	goto	u7995
 16776  2D72  082E               	movf	___wmul@multiplier^(0+256),w
 16777  2D73  042F               	iorwf	(___wmul@multiplier+1)^(0+256),w
 16778  2D74  1D03               	btfss	3,2
 16779  2D75  2D62               	goto	l7852
 16780  2D76  0833               	movf	(___wmul@product+1)^(0+256),w
 16781  2D77  00AF               	movwf	(?___wmul+1)^(0+256)
 16782  2D78  0832               	movf	___wmul@product^(0+256),w
 16783  2D79  00AE               	movwf	?___wmul^(0+256)
 16784  2D7A  0008               	return
 16785  2D7B                     __end_of___wmul:	
 16786                           
 16787                           	psect	text54
 16788  1CBA                     __ptext54:	
 16789 ;; *************** function ___ftmul *****************
 16790 ;; Defined at:
 16791 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
 16792 ;; Parameters:    Size  Location     Type
 16793 ;;  f1              3   14[BANK1 ] float 
 16794 ;;  f2              3   17[BANK1 ] float 
 16795 ;; Auto vars:     Size  Location     Type
 16796 ;;  f3_as_produc    3   25[BANK1 ] unsigned um
 16797 ;;  sign            1   29[BANK1 ] unsigned char 
 16798 ;;  cntr            1   28[BANK1 ] unsigned char 
 16799 ;;  exp             1   24[BANK1 ] unsigned char 
 16800 ;; Return value:  Size  Location     Type
 16801 ;;                  3   14[BANK1 ] float 
 16802 ;; Registers used:
 16803 ;;		wreg, status,2, status,0, pclath, cstack
 16804 ;; Tracked objects:
 16805 ;;		On entry : 0/0
 16806 ;;		On exit  : 0/0
 16807 ;;		Unchanged: 0/0
 16808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16809 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16810 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16811 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16812 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16813 ;;Total ram usage:       16 bytes
 16814 ;; Hardware stack levels used:    1
 16815 ;; Hardware stack levels required when called:    4
 16816 ;; This function calls:
 16817 ;;		___ftpack
 16818 ;; This function is called by:
 16819 ;;		_set_subdivision
 16820 ;;		_map
 16821 ;;		_scaleA100kPot
 16822 ;;		_scaleA10kPot
 16823 ;;		_scaleiA10kPot
 16824 ;;		_calcCosArray
 16825 ;;		_modCos
 16826 ;;		_modTri
 16827 ;;		_modSaw
 16828 ;;		_pow
 16829 ;;		_sin
 16830 ;;		_eval_poly
 16831 ;;		_exp
 16832 ;;		_log
 16833 ;;		_scalePotValue
 16834 ;;		_scaleiA100kPot
 16835 ;;		_scaleA25kPot
 16836 ;;		_scaleiA25kPot
 16837 ;; This function uses a non-reentrant model
 16838 ;;
 16839                           
 16840                           
 16841                           ;psect for function ___ftmul
 16842  1CBA                     ___ftmul:	
 16843                           
 16844                           ;incstack = 0
 16845                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 16846  1CBA  0021               	movlb	1	; select bank1
 16847  1CBB  082E               	movf	___ftmul@f1^(0+128),w
 16848  1CBC  00B4               	movwf	??___ftmul^(0+128)
 16849  1CBD  082F               	movf	(___ftmul@f1+1)^(0+128),w
 16850  1CBE  00B5               	movwf	(??___ftmul^(0+128)+1)
 16851  1CBF  0830               	movf	(___ftmul@f1+2)^(0+128),w
 16852  1CC0  00B6               	movwf	(??___ftmul^(0+128)+2)
 16853  1CC1  1003               	clrc
 16854  1CC2  0D35               	rlf	(??___ftmul^(0+128)+1),w
 16855  1CC3  0D36               	rlf	(??___ftmul^(0+128)+2),w
 16856  1CC4  00B7               	movwf	(??___ftmul+3)^(0+128)
 16857  1CC5  0837               	movf	(??___ftmul+3)^(0+128),w
 16858  1CC6  00B8               	movwf	___ftmul@exp^(0+128)
 16859  1CC7  0838               	movf	___ftmul@exp^(0+128),w
 16860  1CC8  1D03               	btfss	3,2
 16861  1CC9  2CD1               	goto	l7976
 16862  1CCA  3000               	movlw	0
 16863  1CCB  00AE               	movwf	?___ftmul^(0+128)
 16864  1CCC  3000               	movlw	0
 16865  1CCD  00AF               	movwf	(?___ftmul+1)^(0+128)
 16866  1CCE  3000               	movlw	0
 16867  1CCF  00B0               	movwf	(?___ftmul+2)^(0+128)
 16868  1CD0  0008               	return
 16869  1CD1                     l7976:	
 16870  1CD1  0831               	movf	___ftmul@f2^(0+128),w
 16871  1CD2  00B4               	movwf	??___ftmul^(0+128)
 16872  1CD3  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16873  1CD4  00B5               	movwf	(??___ftmul^(0+128)+1)
 16874  1CD5  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16875  1CD6  00B6               	movwf	(??___ftmul^(0+128)+2)
 16876  1CD7  1003               	clrc
 16877  1CD8  0D35               	rlf	(??___ftmul^(0+128)+1),w
 16878  1CD9  0D36               	rlf	(??___ftmul^(0+128)+2),w
 16879  1CDA  00B7               	movwf	(??___ftmul+3)^(0+128)
 16880  1CDB  0837               	movf	(??___ftmul+3)^(0+128),w
 16881  1CDC  00BD               	movwf	___ftmul@sign^(0+128)
 16882  1CDD  083D               	movf	___ftmul@sign^(0+128),w
 16883  1CDE  1D03               	btfss	3,2
 16884  1CDF  2CE7               	goto	l7982
 16885  1CE0  3000               	movlw	0
 16886  1CE1  00AE               	movwf	?___ftmul^(0+128)
 16887  1CE2  3000               	movlw	0
 16888  1CE3  00AF               	movwf	(?___ftmul+1)^(0+128)
 16889  1CE4  3000               	movlw	0
 16890  1CE5  00B0               	movwf	(?___ftmul+2)^(0+128)
 16891  1CE6  0008               	return
 16892  1CE7                     l7982:	
 16893  1CE7  083D               	movf	___ftmul@sign^(0+128),w
 16894  1CE8  3E7B               	addlw	123
 16895  1CE9  00B4               	movwf	??___ftmul^(0+128)
 16896  1CEA  0834               	movf	??___ftmul^(0+128),w
 16897  1CEB  07B8               	addwf	___ftmul@exp^(0+128),f
 16898  1CEC  082E               	movf	___ftmul@f1^(0+128),w
 16899  1CED  00B4               	movwf	??___ftmul^(0+128)
 16900  1CEE  082F               	movf	(___ftmul@f1+1)^(0+128),w
 16901  1CEF  00B5               	movwf	(??___ftmul^(0+128)+1)
 16902  1CF0  0830               	movf	(___ftmul@f1+2)^(0+128),w
 16903  1CF1  00B6               	movwf	(??___ftmul^(0+128)+2)
 16904  1CF2  3010               	movlw	16
 16905  1CF3                     u8325:	
 16906  1CF3  36B6               	lsrf	(??___ftmul^(0+128)+2),f
 16907  1CF4  0CB5               	rrf	(??___ftmul^(0+128)+1),f
 16908  1CF5  0CB4               	rrf	??___ftmul^(0+128),f
 16909  1CF6  0B89               	decfsz	9,f
 16910  1CF7  2CF3               	goto	u8325
 16911  1CF8  0834               	movf	??___ftmul^(0+128),w
 16912  1CF9  00B7               	movwf	(??___ftmul+3)^(0+128)
 16913  1CFA  0837               	movf	(??___ftmul+3)^(0+128),w
 16914  1CFB  00BD               	movwf	___ftmul@sign^(0+128)
 16915  1CFC  0831               	movf	___ftmul@f2^(0+128),w
 16916  1CFD  00B4               	movwf	??___ftmul^(0+128)
 16917  1CFE  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16918  1CFF  00B5               	movwf	(??___ftmul^(0+128)+1)
 16919  1D00  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16920  1D01  00B6               	movwf	(??___ftmul^(0+128)+2)
 16921  1D02  3010               	movlw	16
 16922  1D03                     u8335:	
 16923  1D03  36B6               	lsrf	(??___ftmul^(0+128)+2),f
 16924  1D04  0CB5               	rrf	(??___ftmul^(0+128)+1),f
 16925  1D05  0CB4               	rrf	??___ftmul^(0+128),f
 16926  1D06  0B89               	decfsz	9,f
 16927  1D07  2D03               	goto	u8335
 16928  1D08  0834               	movf	??___ftmul^(0+128),w
 16929  1D09  00B7               	movwf	(??___ftmul+3)^(0+128)
 16930  1D0A  0837               	movf	(??___ftmul+3)^(0+128),w
 16931  1D0B  06BD               	xorwf	___ftmul@sign^(0+128),f
 16932  1D0C  3080               	movlw	128
 16933  1D0D  00B4               	movwf	??___ftmul^(0+128)
 16934  1D0E  0834               	movf	??___ftmul^(0+128),w
 16935  1D0F  05BD               	andwf	___ftmul@sign^(0+128),f
 16936  1D10  17AF               	bsf	(___ftmul@f1^(0+128)+1),7
 16937  1D11  17B2               	bsf	(___ftmul@f2^(0+128)+1),7
 16938  1D12  30FF               	movlw	255
 16939  1D13  05B1               	andwf	___ftmul@f2^(0+128),f
 16940  1D14  30FF               	movlw	255
 16941  1D15  05B2               	andwf	(___ftmul@f2+1)^(0+128),f
 16942  1D16  3000               	movlw	0
 16943  1D17  05B3               	andwf	(___ftmul@f2+2)^(0+128),f
 16944  1D18  3000               	movlw	0
 16945  1D19  00B9               	movwf	___ftmul@f3_as_product^(0+128)
 16946  1D1A  3000               	movlw	0
 16947  1D1B  00BA               	movwf	(___ftmul@f3_as_product+1)^(0+128)
 16948  1D1C  3000               	movlw	0
 16949  1D1D  00BB               	movwf	(___ftmul@f3_as_product+2)^(0+128)
 16950  1D1E  3007               	movlw	7
 16951  1D1F  00B4               	movwf	??___ftmul^(0+128)
 16952  1D20  0834               	movf	??___ftmul^(0+128),w
 16953  1D21  00BC               	movwf	___ftmul@cntr^(0+128)
 16954  1D22                     l7994:	
 16955  1D22  1C2E               	btfss	___ftmul@f1^(0+128),0
 16956  1D23  2D2A               	goto	l7998
 16957  1D24  0831               	movf	___ftmul@f2^(0+128),w
 16958  1D25  07B9               	addwf	___ftmul@f3_as_product^(0+128),f
 16959  1D26  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16960  1D27  3DBA               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
 16961  1D28  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16962  1D29  3DBB               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
 16963  1D2A                     l7998:	
 16964  1D2A  3001               	movlw	1
 16965  1D2B                     u8355:	
 16966  1D2B  36B0               	lsrf	(___ftmul@f1+2)^(0+128),f
 16967  1D2C  0CAF               	rrf	(___ftmul@f1+1)^(0+128),f
 16968  1D2D  0CAE               	rrf	___ftmul@f1^(0+128),f
 16969  1D2E  0B89               	decfsz	9,f
 16970  1D2F  2D2B               	goto	u8355
 16971  1D30  3001               	movlw	1
 16972  1D31                     u8365:	
 16973  1D31  35B1               	lslf	___ftmul@f2^(0+128),f
 16974  1D32  0DB2               	rlf	(___ftmul@f2+1)^(0+128),f
 16975  1D33  0DB3               	rlf	(___ftmul@f2+2)^(0+128),f
 16976  1D34  0B89               	decfsz	9,f
 16977  1D35  2D31               	goto	u8365
 16978  1D36  3001               	movlw	1
 16979  1D37  02BC               	subwf	___ftmul@cntr^(0+128),f
 16980  1D38  1D03               	btfss	3,2
 16981  1D39  2D22               	goto	l7994
 16982  1D3A  3009               	movlw	9
 16983  1D3B  00B4               	movwf	??___ftmul^(0+128)
 16984  1D3C  0834               	movf	??___ftmul^(0+128),w
 16985  1D3D  00BC               	movwf	___ftmul@cntr^(0+128)
 16986  1D3E                     l8006:	
 16987  1D3E  1C2E               	btfss	___ftmul@f1^(0+128),0
 16988  1D3F  2D46               	goto	l8010
 16989  1D40  0831               	movf	___ftmul@f2^(0+128),w
 16990  1D41  07B9               	addwf	___ftmul@f3_as_product^(0+128),f
 16991  1D42  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16992  1D43  3DBA               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
 16993  1D44  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16994  1D45  3DBB               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
 16995  1D46                     l8010:	
 16996  1D46  3001               	movlw	1
 16997  1D47                     u8395:	
 16998  1D47  36B0               	lsrf	(___ftmul@f1+2)^(0+128),f
 16999  1D48  0CAF               	rrf	(___ftmul@f1+1)^(0+128),f
 17000  1D49  0CAE               	rrf	___ftmul@f1^(0+128),f
 17001  1D4A  0B89               	decfsz	9,f
 17002  1D4B  2D47               	goto	u8395
 17003  1D4C  3001               	movlw	1
 17004  1D4D                     u8405:	
 17005  1D4D  36BB               	lsrf	(___ftmul@f3_as_product+2)^(0+128),f
 17006  1D4E  0CBA               	rrf	(___ftmul@f3_as_product+1)^(0+128),f
 17007  1D4F  0CB9               	rrf	___ftmul@f3_as_product^(0+128),f
 17008  1D50  0B89               	decfsz	9,f
 17009  1D51  2D4D               	goto	u8405
 17010  1D52  3001               	movlw	1
 17011  1D53  02BC               	subwf	___ftmul@cntr^(0+128),f
 17012  1D54  1D03               	btfss	3,2
 17013  1D55  2D3E               	goto	l8006
 17014  1D56  0839               	movf	___ftmul@f3_as_product^(0+128),w
 17015  1D57  00A0               	movwf	___ftpack@arg^(0+128)
 17016  1D58  083A               	movf	(___ftmul@f3_as_product+1)^(0+128),w
 17017  1D59  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 17018  1D5A  083B               	movf	(___ftmul@f3_as_product+2)^(0+128),w
 17019  1D5B  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 17020  1D5C  0838               	movf	___ftmul@exp^(0+128),w
 17021  1D5D  00B4               	movwf	??___ftmul^(0+128)
 17022  1D5E  0834               	movf	??___ftmul^(0+128),w
 17023  1D5F  00A3               	movwf	___ftpack@exp^(0+128)
 17024  1D60  083D               	movf	___ftmul@sign^(0+128),w
 17025  1D61  00B5               	movwf	(??___ftmul+1)^(0+128)
 17026  1D62  0835               	movf	(??___ftmul+1)^(0+128),w
 17027  1D63  00A4               	movwf	___ftpack@sign^(0+128)
 17028  1D64  31A5  2533         	fcall	___ftpack
 17029  1D66  0021               	movlb	1	; select bank1
 17030  1D67  0820               	movf	?___ftpack^(0+128),w
 17031  1D68  00AE               	movwf	?___ftmul^(0+128)
 17032  1D69  0821               	movf	(?___ftpack+1)^(0+128),w
 17033  1D6A  00AF               	movwf	(?___ftmul+1)^(0+128)
 17034  1D6B  0822               	movf	(?___ftpack+2)^(0+128),w
 17035  1D6C  00B0               	movwf	(?___ftmul+2)^(0+128)
 17036  1D6D  0008               	return
 17037  1D6E                     __end_of___ftmul:	
 17038                           
 17039                           	psect	text55
 17040  2EAC                     __ptext55:	
 17041 ;; *************** function ___ftsub *****************
 17042 ;; Defined at:
 17043 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftsub.c"
 17044 ;; Parameters:    Size  Location     Type
 17045 ;;  f2              3   23[BANK2 ] float 
 17046 ;;  f1              3   26[BANK2 ] float 
 17047 ;; Auto vars:     Size  Location     Type
 17048 ;;		None
 17049 ;; Return value:  Size  Location     Type
 17050 ;;                  3   23[BANK2 ] float 
 17051 ;; Registers used:
 17052 ;;		wreg, status,2, status,0, pclath, cstack
 17053 ;; Tracked objects:
 17054 ;;		On entry : 0/0
 17055 ;;		On exit  : 0/0
 17056 ;;		Unchanged: 0/0
 17057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17058 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17061 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17062 ;;Total ram usage:        6 bytes
 17063 ;; Hardware stack levels used:    1
 17064 ;; Hardware stack levels required when called:    5
 17065 ;; This function calls:
 17066 ;;		___ftadd
 17067 ;; This function is called by:
 17068 ;;		_sin
 17069 ;;		_exp
 17070 ;; This function uses a non-reentrant model
 17071 ;;
 17072                           
 17073                           
 17074                           ;psect for function ___ftsub
 17075  2EAC                     ___ftsub:	
 17076                           
 17077                           ;incstack = 0
 17078                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
 17079  2EAC  0022               	movlb	2	; select bank2
 17080  2EAD  0839               	movf	(___ftsub@f2+2)^(0+256),w
 17081  2EAE  0438               	iorwf	(___ftsub@f2+1)^(0+256),w
 17082  2EAF  0437               	iorwf	___ftsub@f2^(0+256),w
 17083  2EB0  1903               	skipnz
 17084  2EB1  2EB4               	goto	l8198
 17085  2EB2  3080               	movlw	128
 17086  2EB3  06B9               	xorwf	(___ftsub@f2+2)^(0+256),f
 17087  2EB4                     l8198:	
 17088  2EB4  083A               	movf	___ftsub@f1^(0+256),w
 17089  2EB5  0021               	movlb	1	; select bank1
 17090  2EB6  00C1               	movwf	___ftadd@f1^(0+128)
 17091  2EB7  0022               	movlb	2	; select bank2
 17092  2EB8  083B               	movf	(___ftsub@f1+1)^(0+256),w
 17093  2EB9  0021               	movlb	1	; select bank1
 17094  2EBA  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 17095  2EBB  0022               	movlb	2	; select bank2
 17096  2EBC  083C               	movf	(___ftsub@f1+2)^(0+256),w
 17097  2EBD  0021               	movlb	1	; select bank1
 17098  2EBE  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 17099  2EBF  0022               	movlb	2	; select bank2
 17100  2EC0  0837               	movf	___ftsub@f2^(0+256),w
 17101  2EC1  0021               	movlb	1	; select bank1
 17102  2EC2  00C4               	movwf	___ftadd@f2^(0+128)
 17103  2EC3  0022               	movlb	2	; select bank2
 17104  2EC4  0838               	movf	(___ftsub@f2+1)^(0+256),w
 17105  2EC5  0021               	movlb	1	; select bank1
 17106  2EC6  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 17107  2EC7  0022               	movlb	2	; select bank2
 17108  2EC8  0839               	movf	(___ftsub@f2+2)^(0+256),w
 17109  2EC9  0021               	movlb	1	; select bank1
 17110  2ECA  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 17111  2ECB  319F  270A         	fcall	___ftadd
 17112  2ECD  0021               	movlb	1	; select bank1
 17113  2ECE  0841               	movf	?___ftadd^(0+128),w
 17114  2ECF  0022               	movlb	2	; select bank2
 17115  2ED0  00B7               	movwf	?___ftsub^(0+256)
 17116  2ED1  0021               	movlb	1	; select bank1
 17117  2ED2  0842               	movf	(?___ftadd+1)^(0+128),w
 17118  2ED3  0022               	movlb	2	; select bank2
 17119  2ED4  00B8               	movwf	(?___ftsub+1)^(0+256)
 17120  2ED5  0021               	movlb	1	; select bank1
 17121  2ED6  0843               	movf	(?___ftadd+2)^(0+128),w
 17122  2ED7  0022               	movlb	2	; select bank2
 17123  2ED8  00B9               	movwf	(?___ftsub+2)^(0+256)
 17124  2ED9  0008               	return
 17125  2EDA                     __end_of___ftsub:	
 17126                           
 17127                           	psect	text56
 17128  1F0A                     __ptext56:	
 17129 ;; *************** function ___ftadd *****************
 17130 ;; Defined at:
 17131 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
 17132 ;; Parameters:    Size  Location     Type
 17133 ;;  f1              3   33[BANK1 ] float 
 17134 ;;  f2              3   36[BANK1 ] float 
 17135 ;; Auto vars:     Size  Location     Type
 17136 ;;  exp1            1   45[BANK1 ] unsigned char 
 17137 ;;  exp2            1   44[BANK1 ] unsigned char 
 17138 ;;  sign            1   43[BANK1 ] unsigned char 
 17139 ;; Return value:  Size  Location     Type
 17140 ;;                  3   33[BANK1 ] float 
 17141 ;; Registers used:
 17142 ;;		wreg, status,2, status,0, pclath, cstack
 17143 ;; Tracked objects:
 17144 ;;		On entry : 0/0
 17145 ;;		On exit  : 0/0
 17146 ;;		Unchanged: 0/0
 17147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17148 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17149 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17150 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17151 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17152 ;;Total ram usage:       13 bytes
 17153 ;; Hardware stack levels used:    1
 17154 ;; Hardware stack levels required when called:    4
 17155 ;; This function calls:
 17156 ;;		___ftpack
 17157 ;; This function is called by:
 17158 ;;		_map
 17159 ;;		_scaleiA10kPot
 17160 ;;		_modCos
 17161 ;;		_modTri
 17162 ;;		_modSaw
 17163 ;;		_cos
 17164 ;;		___ftsub
 17165 ;;		_sin
 17166 ;;		_eval_poly
 17167 ;;		_floor
 17168 ;;		_log
 17169 ;;		_scalePotValue
 17170 ;; This function uses a non-reentrant model
 17171 ;;
 17172                           
 17173                           
 17174                           ;psect for function ___ftadd
 17175  1F0A                     ___ftadd:	
 17176                           
 17177                           ;incstack = 0
 17178                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 17179  1F0A  0021               	movlb	1	; select bank1
 17180  1F0B  0841               	movf	___ftadd@f1^(0+128),w
 17181  1F0C  00C7               	movwf	??___ftadd^(0+128)
 17182  1F0D  0842               	movf	(___ftadd@f1+1)^(0+128),w
 17183  1F0E  00C8               	movwf	(??___ftadd^(0+128)+1)
 17184  1F0F  0843               	movf	(___ftadd@f1+2)^(0+128),w
 17185  1F10  00C9               	movwf	(??___ftadd^(0+128)+2)
 17186  1F11  1003               	clrc
 17187  1F12  0D48               	rlf	(??___ftadd^(0+128)+1),w
 17188  1F13  0D49               	rlf	(??___ftadd^(0+128)+2),w
 17189  1F14  00CA               	movwf	(??___ftadd+3)^(0+128)
 17190  1F15  084A               	movf	(??___ftadd+3)^(0+128),w
 17191  1F16  00CD               	movwf	___ftadd@exp1^(0+128)
 17192  1F17  0844               	movf	___ftadd@f2^(0+128),w
 17193  1F18  00C7               	movwf	??___ftadd^(0+128)
 17194  1F19  0845               	movf	(___ftadd@f2+1)^(0+128),w
 17195  1F1A  00C8               	movwf	(??___ftadd^(0+128)+1)
 17196  1F1B  0846               	movf	(___ftadd@f2+2)^(0+128),w
 17197  1F1C  00C9               	movwf	(??___ftadd^(0+128)+2)
 17198  1F1D  1003               	clrc
 17199  1F1E  0D48               	rlf	(??___ftadd^(0+128)+1),w
 17200  1F1F  0D49               	rlf	(??___ftadd^(0+128)+2),w
 17201  1F20  00CA               	movwf	(??___ftadd+3)^(0+128)
 17202  1F21  084A               	movf	(??___ftadd+3)^(0+128),w
 17203  1F22  00CC               	movwf	___ftadd@exp2^(0+128)
 17204  1F23  084D               	movf	___ftadd@exp1^(0+128),w
 17205  1F24  1903               	btfsc	3,2
 17206  1F25  2F32               	goto	l7886
 17207  1F26  084C               	movf	___ftadd@exp2^(0+128),w
 17208  1F27  024D               	subwf	___ftadd@exp1^(0+128),w
 17209  1F28  1803               	skipnc
 17210  1F29  2F39               	goto	l7890
 17211  1F2A  034D               	decf	___ftadd@exp1^(0+128),w
 17212  1F2B  3AFF               	xorlw	255
 17213  1F2C  074C               	addwf	___ftadd@exp2^(0+128),w
 17214  1F2D  00C7               	movwf	??___ftadd^(0+128)
 17215  1F2E  3019               	movlw	25
 17216  1F2F  0247               	subwf	??___ftadd^(0+128),w
 17217  1F30  1C03               	skipc
 17218  1F31  2F39               	goto	l7890
 17219  1F32                     l7886:	
 17220  1F32  0844               	movf	___ftadd@f2^(0+128),w
 17221  1F33  00C1               	movwf	?___ftadd^(0+128)
 17222  1F34  0845               	movf	(___ftadd@f2+1)^(0+128),w
 17223  1F35  00C2               	movwf	(?___ftadd+1)^(0+128)
 17224  1F36  0846               	movf	(___ftadd@f2+2)^(0+128),w
 17225  1F37  00C3               	movwf	(?___ftadd+2)^(0+128)
 17226  1F38  0008               	return
 17227  1F39                     l7890:	
 17228  1F39  084C               	movf	___ftadd@exp2^(0+128),w
 17229  1F3A  1903               	btfsc	3,2
 17230  1F3B  0008               	return
 17231  1F3C  084D               	movf	___ftadd@exp1^(0+128),w
 17232  1F3D  024C               	subwf	___ftadd@exp2^(0+128),w
 17233  1F3E  1803               	skipnc
 17234  1F3F  2F48               	goto	l7896
 17235  1F40  034C               	decf	___ftadd@exp2^(0+128),w
 17236  1F41  3AFF               	xorlw	255
 17237  1F42  074D               	addwf	___ftadd@exp1^(0+128),w
 17238  1F43  00C7               	movwf	??___ftadd^(0+128)
 17239  1F44  3019               	movlw	25
 17240  1F45  0247               	subwf	??___ftadd^(0+128),w
 17241  1F46  1803               	btfsc	3,0
 17242  1F47  0008               	return
 17243  1F48                     l7896:	
 17244  1F48  3006               	movlw	6
 17245  1F49  00C7               	movwf	??___ftadd^(0+128)
 17246  1F4A  0847               	movf	??___ftadd^(0+128),w
 17247  1F4B  00CB               	movwf	___ftadd@sign^(0+128)
 17248  1F4C  1BC3               	btfsc	(___ftadd@f1+2)^(0+128),7
 17249  1F4D  17CB               	bsf	___ftadd@sign^(0+128),7
 17250  1F4E  1BC6               	btfsc	(___ftadd@f2+2)^(0+128),7
 17251  1F4F  174B               	bsf	___ftadd@sign^(0+128),6
 17252  1F50  17C2               	bsf	(___ftadd@f1^(0+128)+1),7
 17253  1F51  30FF               	movlw	255
 17254  1F52  05C1               	andwf	___ftadd@f1^(0+128),f
 17255  1F53  30FF               	movlw	255
 17256  1F54  05C2               	andwf	(___ftadd@f1+1)^(0+128),f
 17257  1F55  3000               	movlw	0
 17258  1F56  05C3               	andwf	(___ftadd@f1+2)^(0+128),f
 17259  1F57  17C5               	bsf	(___ftadd@f2^(0+128)+1),7
 17260  1F58  30FF               	movlw	255
 17261  1F59  05C4               	andwf	___ftadd@f2^(0+128),f
 17262  1F5A  30FF               	movlw	255
 17263  1F5B  05C5               	andwf	(___ftadd@f2+1)^(0+128),f
 17264  1F5C  3000               	movlw	0
 17265  1F5D  05C6               	andwf	(___ftadd@f2+2)^(0+128),f
 17266  1F5E  084C               	movf	___ftadd@exp2^(0+128),w
 17267  1F5F  024D               	subwf	___ftadd@exp1^(0+128),w
 17268  1F60  1803               	skipnc
 17269  1F61  2F84               	goto	l7918
 17270  1F62                     l7908:	
 17271  1F62  3001               	movlw	1
 17272  1F63                     u8135:	
 17273  1F63  35C4               	lslf	___ftadd@f2^(0+128),f
 17274  1F64  0DC5               	rlf	(___ftadd@f2+1)^(0+128),f
 17275  1F65  0DC6               	rlf	(___ftadd@f2+2)^(0+128),f
 17276  1F66  0B89               	decfsz	9,f
 17277  1F67  2F63               	goto	u8135
 17278  1F68  3001               	movlw	1
 17279  1F69  02CC               	subwf	___ftadd@exp2^(0+128),f
 17280  1F6A  084C               	movf	___ftadd@exp2^(0+128),w
 17281  1F6B  064D               	xorwf	___ftadd@exp1^(0+128),w
 17282  1F6C  1903               	skipnz
 17283  1F6D  2F7F               	goto	l7916
 17284  1F6E  3001               	movlw	1
 17285  1F6F  02CB               	subwf	___ftadd@sign^(0+128),f
 17286  1F70  084B               	movf	___ftadd@sign^(0+128),w
 17287  1F71  3907               	andlw	7
 17288  1F72  1903               	btfsc	3,2
 17289  1F73  2F7F               	goto	l7916
 17290  1F74  2F62               	goto	l7908
 17291  1F75                     l7914:	
 17292  1F75  3001               	movlw	1
 17293  1F76                     u8165:	
 17294  1F76  36C3               	lsrf	(___ftadd@f1+2)^(0+128),f
 17295  1F77  0CC2               	rrf	(___ftadd@f1+1)^(0+128),f
 17296  1F78  0CC1               	rrf	___ftadd@f1^(0+128),f
 17297  1F79  0B89               	decfsz	9,f
 17298  1F7A  2F76               	goto	u8165
 17299  1F7B  3001               	movlw	1
 17300  1F7C  00C7               	movwf	??___ftadd^(0+128)
 17301  1F7D  0847               	movf	??___ftadd^(0+128),w
 17302  1F7E  07CD               	addwf	___ftadd@exp1^(0+128),f
 17303  1F7F                     l7916:	
 17304  1F7F  084D               	movf	___ftadd@exp1^(0+128),w
 17305  1F80  064C               	xorwf	___ftadd@exp2^(0+128),w
 17306  1F81  1903               	btfsc	3,2
 17307  1F82  2FA9               	goto	l2220
 17308  1F83  2F75               	goto	l7914
 17309  1F84                     l7918:	
 17310  1F84  084D               	movf	___ftadd@exp1^(0+128),w
 17311  1F85  024C               	subwf	___ftadd@exp2^(0+128),w
 17312  1F86  1803               	skipnc
 17313  1F87  2FA9               	goto	l2220
 17314  1F88                     l7920:	
 17315  1F88  3001               	movlw	1
 17316  1F89                     u8195:	
 17317  1F89  35C1               	lslf	___ftadd@f1^(0+128),f
 17318  1F8A  0DC2               	rlf	(___ftadd@f1+1)^(0+128),f
 17319  1F8B  0DC3               	rlf	(___ftadd@f1+2)^(0+128),f
 17320  1F8C  0B89               	decfsz	9,f
 17321  1F8D  2F89               	goto	u8195
 17322  1F8E  3001               	movlw	1
 17323  1F8F  02CD               	subwf	___ftadd@exp1^(0+128),f
 17324  1F90  084C               	movf	___ftadd@exp2^(0+128),w
 17325  1F91  064D               	xorwf	___ftadd@exp1^(0+128),w
 17326  1F92  1903               	skipnz
 17327  1F93  2FA5               	goto	l7928
 17328  1F94  3001               	movlw	1
 17329  1F95  02CB               	subwf	___ftadd@sign^(0+128),f
 17330  1F96  084B               	movf	___ftadd@sign^(0+128),w
 17331  1F97  3907               	andlw	7
 17332  1F98  1903               	btfsc	3,2
 17333  1F99  2FA5               	goto	l7928
 17334  1F9A  2F88               	goto	l7920
 17335  1F9B                     l7926:	
 17336  1F9B  3001               	movlw	1
 17337  1F9C                     u8225:	
 17338  1F9C  36C6               	lsrf	(___ftadd@f2+2)^(0+128),f
 17339  1F9D  0CC5               	rrf	(___ftadd@f2+1)^(0+128),f
 17340  1F9E  0CC4               	rrf	___ftadd@f2^(0+128),f
 17341  1F9F  0B89               	decfsz	9,f
 17342  1FA0  2F9C               	goto	u8225
 17343  1FA1  3001               	movlw	1
 17344  1FA2  00C7               	movwf	??___ftadd^(0+128)
 17345  1FA3  0847               	movf	??___ftadd^(0+128),w
 17346  1FA4  07CC               	addwf	___ftadd@exp2^(0+128),f
 17347  1FA5                     l7928:	
 17348  1FA5  084D               	movf	___ftadd@exp1^(0+128),w
 17349  1FA6  064C               	xorwf	___ftadd@exp2^(0+128),w
 17350  1FA7  1D03               	skipz
 17351  1FA8  2F9B               	goto	l7926
 17352  1FA9                     l2220:	
 17353  1FA9  1FCB               	btfss	___ftadd@sign^(0+128),7
 17354  1FAA  2FBB               	goto	l7932
 17355  1FAB  30FF               	movlw	255
 17356  1FAC  06C1               	xorwf	___ftadd@f1^(0+128),f
 17357  1FAD  30FF               	movlw	255
 17358  1FAE  06C2               	xorwf	(___ftadd@f1+1)^(0+128),f
 17359  1FAF  30FF               	movlw	255
 17360  1FB0  06C3               	xorwf	(___ftadd@f1+2)^(0+128),f
 17361  1FB1  3001               	movlw	1
 17362  1FB2  07C1               	addwf	___ftadd@f1^(0+128),f
 17363  1FB3  3000               	movlw	0
 17364  1FB4  1803               	skipnc
 17365  1FB5  3001               	movlw	1
 17366  1FB6  07C2               	addwf	(___ftadd@f1+1)^(0+128),f
 17367  1FB7  3000               	movlw	0
 17368  1FB8  1803               	skipnc
 17369  1FB9  3001               	movlw	1
 17370  1FBA  07C3               	addwf	(___ftadd@f1+2)^(0+128),f
 17371  1FBB                     l7932:	
 17372  1FBB  1F4B               	btfss	___ftadd@sign^(0+128),6
 17373  1FBC  2FCD               	goto	l7936
 17374  1FBD  30FF               	movlw	255
 17375  1FBE  06C4               	xorwf	___ftadd@f2^(0+128),f
 17376  1FBF  30FF               	movlw	255
 17377  1FC0  06C5               	xorwf	(___ftadd@f2+1)^(0+128),f
 17378  1FC1  30FF               	movlw	255
 17379  1FC2  06C6               	xorwf	(___ftadd@f2+2)^(0+128),f
 17380  1FC3  3001               	movlw	1
 17381  1FC4  07C4               	addwf	___ftadd@f2^(0+128),f
 17382  1FC5  3000               	movlw	0
 17383  1FC6  1803               	skipnc
 17384  1FC7  3001               	movlw	1
 17385  1FC8  07C5               	addwf	(___ftadd@f2+1)^(0+128),f
 17386  1FC9  3000               	movlw	0
 17387  1FCA  1803               	skipnc
 17388  1FCB  3001               	movlw	1
 17389  1FCC  07C6               	addwf	(___ftadd@f2+2)^(0+128),f
 17390  1FCD                     l7936:	
 17391  1FCD  01CB               	clrf	___ftadd@sign^(0+128)
 17392  1FCE  0841               	movf	___ftadd@f1^(0+128),w
 17393  1FCF  07C4               	addwf	___ftadd@f2^(0+128),f
 17394  1FD0  0842               	movf	(___ftadd@f1+1)^(0+128),w
 17395  1FD1  3DC5               	addwfc	(___ftadd@f2+1)^(0+128),f
 17396  1FD2  0843               	movf	(___ftadd@f1+2)^(0+128),w
 17397  1FD3  3DC6               	addwfc	(___ftadd@f2+2)^(0+128),f
 17398  1FD4  1FC6               	btfss	(___ftadd@f2+2)^(0+128),7
 17399  1FD5  2FE8               	goto	l7946
 17400  1FD6  30FF               	movlw	255
 17401  1FD7  06C4               	xorwf	___ftadd@f2^(0+128),f
 17402  1FD8  30FF               	movlw	255
 17403  1FD9  06C5               	xorwf	(___ftadd@f2+1)^(0+128),f
 17404  1FDA  30FF               	movlw	255
 17405  1FDB  06C6               	xorwf	(___ftadd@f2+2)^(0+128),f
 17406  1FDC  3001               	movlw	1
 17407  1FDD  07C4               	addwf	___ftadd@f2^(0+128),f
 17408  1FDE  3000               	movlw	0
 17409  1FDF  1803               	skipnc
 17410  1FE0  3001               	movlw	1
 17411  1FE1  07C5               	addwf	(___ftadd@f2+1)^(0+128),f
 17412  1FE2  3000               	movlw	0
 17413  1FE3  1803               	skipnc
 17414  1FE4  3001               	movlw	1
 17415  1FE5  07C6               	addwf	(___ftadd@f2+2)^(0+128),f
 17416  1FE6  01CB               	clrf	___ftadd@sign^(0+128)
 17417  1FE7  0ACB               	incf	___ftadd@sign^(0+128),f
 17418  1FE8                     l7946:	
 17419  1FE8  0844               	movf	___ftadd@f2^(0+128),w
 17420  1FE9  00A0               	movwf	___ftpack@arg^(0+128)
 17421  1FEA  0845               	movf	(___ftadd@f2+1)^(0+128),w
 17422  1FEB  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 17423  1FEC  0846               	movf	(___ftadd@f2+2)^(0+128),w
 17424  1FED  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 17425  1FEE  084D               	movf	___ftadd@exp1^(0+128),w
 17426  1FEF  00C7               	movwf	??___ftadd^(0+128)
 17427  1FF0  0847               	movf	??___ftadd^(0+128),w
 17428  1FF1  00A3               	movwf	___ftpack@exp^(0+128)
 17429  1FF2  084B               	movf	___ftadd@sign^(0+128),w
 17430  1FF3  00C8               	movwf	(??___ftadd+1)^(0+128)
 17431  1FF4  0848               	movf	(??___ftadd+1)^(0+128),w
 17432  1FF5  00A4               	movwf	___ftpack@sign^(0+128)
 17433  1FF6  31A5  2533         	fcall	___ftpack
 17434  1FF8  0021               	movlb	1	; select bank1
 17435  1FF9  0820               	movf	?___ftpack^(0+128),w
 17436  1FFA  00C1               	movwf	?___ftadd^(0+128)
 17437  1FFB  0821               	movf	(?___ftpack+1)^(0+128),w
 17438  1FFC  00C2               	movwf	(?___ftadd+1)^(0+128)
 17439  1FFD  0822               	movf	(?___ftpack+2)^(0+128),w
 17440  1FFE  00C3               	movwf	(?___ftadd+2)^(0+128)
 17441  1FFF  0008               	return
 17442  2000                     __end_of___ftadd:	
 17443                           
 17444                           	psect	text57
 17445  2CB5                     __ptext57:	
 17446 ;; *************** function ___ftneg *****************
 17447 ;; Defined at:
 17448 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
 17449 ;; Parameters:    Size  Location     Type
 17450 ;;  f1              3   30[BANK1 ] float 
 17451 ;; Auto vars:     Size  Location     Type
 17452 ;;		None
 17453 ;; Return value:  Size  Location     Type
 17454 ;;                  3   30[BANK1 ] float 
 17455 ;; Registers used:
 17456 ;;		wreg
 17457 ;; Tracked objects:
 17458 ;;		On entry : 0/0
 17459 ;;		On exit  : 0/0
 17460 ;;		Unchanged: 0/0
 17461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17462 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17465 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17466 ;;Total ram usage:        3 bytes
 17467 ;; Hardware stack levels used:    1
 17468 ;; Hardware stack levels required when called:    3
 17469 ;; This function calls:
 17470 ;;		Nothing
 17471 ;; This function is called by:
 17472 ;;		_map
 17473 ;;		_scaleiA10kPot
 17474 ;;		_modCos
 17475 ;;		_modTri
 17476 ;;		_modSaw
 17477 ;;		_pow
 17478 ;;		_sin
 17479 ;;		_exp
 17480 ;;		_ldexp
 17481 ;;		_scalePotValue
 17482 ;; This function uses a non-reentrant model
 17483 ;;
 17484                           
 17485                           
 17486                           ;psect for function ___ftneg
 17487  2CB5                     ___ftneg:	
 17488                           
 17489                           ;incstack = 0
 17490                           ; Regs used in ___ftneg: [wreg]
 17491  2CB5  0021               	movlb	1	; select bank1
 17492  2CB6  0840               	movf	(___ftneg@f1+2)^(0+128),w
 17493  2CB7  043F               	iorwf	(___ftneg@f1+1)^(0+128),w
 17494  2CB8  043E               	iorwf	___ftneg@f1^(0+128),w
 17495  2CB9  1903               	skipnz
 17496  2CBA  0008               	return
 17497  2CBB  3080               	movlw	128
 17498  2CBC  06C0               	xorwf	(___ftneg@f1+2)^(0+128),f
 17499  2CBD  0008               	return
 17500  2CBE                     __end_of___ftneg:	
 17501                           
 17502                           	psect	text58
 17503  1C11                     __ptext58:	
 17504 ;; *************** function ___ftdiv *****************
 17505 ;; Defined at:
 17506 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
 17507 ;; Parameters:    Size  Location     Type
 17508 ;;  f2              3   46[BANK1 ] float 
 17509 ;;  f1              3   49[BANK1 ] float 
 17510 ;; Auto vars:     Size  Location     Type
 17511 ;;  f3              3   57[BANK1 ] float 
 17512 ;;  sign            1   61[BANK1 ] unsigned char 
 17513 ;;  exp             1   60[BANK1 ] unsigned char 
 17514 ;;  cntr            1   56[BANK1 ] unsigned char 
 17515 ;; Return value:  Size  Location     Type
 17516 ;;                  3   46[BANK1 ] float 
 17517 ;; Registers used:
 17518 ;;		wreg, status,2, status,0, pclath, cstack
 17519 ;; Tracked objects:
 17520 ;;		On entry : 0/0
 17521 ;;		On exit  : 0/0
 17522 ;;		Unchanged: 0/0
 17523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17524 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17525 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17526 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17527 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17528 ;;Total ram usage:       16 bytes
 17529 ;; Hardware stack levels used:    1
 17530 ;; Hardware stack levels required when called:    4
 17531 ;; This function calls:
 17532 ;;		___ftpack
 17533 ;; This function is called by:
 17534 ;;		_map
 17535 ;;		_scaleA100kPot
 17536 ;;		_scaleA10kPot
 17537 ;;		_scaleiA10kPot
 17538 ;;		_calcCosArray
 17539 ;;		_getModulationDelayTime
 17540 ;;		_modCos
 17541 ;;		_modTri
 17542 ;;		_modSaw
 17543 ;;		_sin
 17544 ;;		_exp
 17545 ;;		_scalePotValue
 17546 ;;		_scaleiA100kPot
 17547 ;;		_scaleA25kPot
 17548 ;;		_scaleiA25kPot
 17549 ;; This function uses a non-reentrant model
 17550 ;;
 17551                           
 17552                           
 17553                           ;psect for function ___ftdiv
 17554  1C11                     ___ftdiv:	
 17555                           
 17556                           ;incstack = 0
 17557                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 17558  1C11  0021               	movlb	1	; select bank1
 17559  1C12  0851               	movf	___ftdiv@f1^(0+128),w
 17560  1C13  00D4               	movwf	??___ftdiv^(0+128)
 17561  1C14  0852               	movf	(___ftdiv@f1+1)^(0+128),w
 17562  1C15  00D5               	movwf	(??___ftdiv^(0+128)+1)
 17563  1C16  0853               	movf	(___ftdiv@f1+2)^(0+128),w
 17564  1C17  00D6               	movwf	(??___ftdiv^(0+128)+2)
 17565  1C18  1003               	clrc
 17566  1C19  0D55               	rlf	(??___ftdiv^(0+128)+1),w
 17567  1C1A  0D56               	rlf	(??___ftdiv^(0+128)+2),w
 17568  1C1B  00D7               	movwf	(??___ftdiv+3)^(0+128)
 17569  1C1C  0857               	movf	(??___ftdiv+3)^(0+128),w
 17570  1C1D  00DC               	movwf	___ftdiv@exp^(0+128)
 17571  1C1E  085C               	movf	___ftdiv@exp^(0+128),w
 17572  1C1F  1D03               	btfss	3,2
 17573  1C20  2C28               	goto	l8158
 17574  1C21  3000               	movlw	0
 17575  1C22  00CE               	movwf	?___ftdiv^(0+128)
 17576  1C23  3000               	movlw	0
 17577  1C24  00CF               	movwf	(?___ftdiv+1)^(0+128)
 17578  1C25  3000               	movlw	0
 17579  1C26  00D0               	movwf	(?___ftdiv+2)^(0+128)
 17580  1C27  0008               	return
 17581  1C28                     l8158:	
 17582  1C28  084E               	movf	___ftdiv@f2^(0+128),w
 17583  1C29  00D4               	movwf	??___ftdiv^(0+128)
 17584  1C2A  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 17585  1C2B  00D5               	movwf	(??___ftdiv^(0+128)+1)
 17586  1C2C  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 17587  1C2D  00D6               	movwf	(??___ftdiv^(0+128)+2)
 17588  1C2E  1003               	clrc
 17589  1C2F  0D55               	rlf	(??___ftdiv^(0+128)+1),w
 17590  1C30  0D56               	rlf	(??___ftdiv^(0+128)+2),w
 17591  1C31  00D7               	movwf	(??___ftdiv+3)^(0+128)
 17592  1C32  0857               	movf	(??___ftdiv+3)^(0+128),w
 17593  1C33  00DD               	movwf	___ftdiv@sign^(0+128)
 17594  1C34  085D               	movf	___ftdiv@sign^(0+128),w
 17595  1C35  1D03               	btfss	3,2
 17596  1C36  2C3E               	goto	l8164
 17597  1C37  3000               	movlw	0
 17598  1C38  00CE               	movwf	?___ftdiv^(0+128)
 17599  1C39  3000               	movlw	0
 17600  1C3A  00CF               	movwf	(?___ftdiv+1)^(0+128)
 17601  1C3B  3000               	movlw	0
 17602  1C3C  00D0               	movwf	(?___ftdiv+2)^(0+128)
 17603  1C3D  0008               	return
 17604  1C3E                     l8164:	
 17605  1C3E  3000               	movlw	0
 17606  1C3F  00D9               	movwf	___ftdiv@f3^(0+128)
 17607  1C40  3000               	movlw	0
 17608  1C41  00DA               	movwf	(___ftdiv@f3+1)^(0+128)
 17609  1C42  3000               	movlw	0
 17610  1C43  00DB               	movwf	(___ftdiv@f3+2)^(0+128)
 17611  1C44  3089               	movlw	137
 17612  1C45  075D               	addwf	___ftdiv@sign^(0+128),w
 17613  1C46  00D4               	movwf	??___ftdiv^(0+128)
 17614  1C47  0854               	movf	??___ftdiv^(0+128),w
 17615  1C48  02DC               	subwf	___ftdiv@exp^(0+128),f
 17616  1C49  0851               	movf	___ftdiv@f1^(0+128),w
 17617  1C4A  00D4               	movwf	??___ftdiv^(0+128)
 17618  1C4B  0852               	movf	(___ftdiv@f1+1)^(0+128),w
 17619  1C4C  00D5               	movwf	(??___ftdiv^(0+128)+1)
 17620  1C4D  0853               	movf	(___ftdiv@f1+2)^(0+128),w
 17621  1C4E  00D6               	movwf	(??___ftdiv^(0+128)+2)
 17622  1C4F  3010               	movlw	16
 17623  1C50                     u8625:	
 17624  1C50  36D6               	lsrf	(??___ftdiv^(0+128)+2),f
 17625  1C51  0CD5               	rrf	(??___ftdiv^(0+128)+1),f
 17626  1C52  0CD4               	rrf	??___ftdiv^(0+128),f
 17627  1C53  0B89               	decfsz	9,f
 17628  1C54  2C50               	goto	u8625
 17629  1C55  0854               	movf	??___ftdiv^(0+128),w
 17630  1C56  00D7               	movwf	(??___ftdiv+3)^(0+128)
 17631  1C57  0857               	movf	(??___ftdiv+3)^(0+128),w
 17632  1C58  00DD               	movwf	___ftdiv@sign^(0+128)
 17633  1C59  084E               	movf	___ftdiv@f2^(0+128),w
 17634  1C5A  00D4               	movwf	??___ftdiv^(0+128)
 17635  1C5B  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 17636  1C5C  00D5               	movwf	(??___ftdiv^(0+128)+1)
 17637  1C5D  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 17638  1C5E  00D6               	movwf	(??___ftdiv^(0+128)+2)
 17639  1C5F  3010               	movlw	16
 17640  1C60                     u8635:	
 17641  1C60  36D6               	lsrf	(??___ftdiv^(0+128)+2),f
 17642  1C61  0CD5               	rrf	(??___ftdiv^(0+128)+1),f
 17643  1C62  0CD4               	rrf	??___ftdiv^(0+128),f
 17644  1C63  0B89               	decfsz	9,f
 17645  1C64  2C60               	goto	u8635
 17646  1C65  0854               	movf	??___ftdiv^(0+128),w
 17647  1C66  00D7               	movwf	(??___ftdiv+3)^(0+128)
 17648  1C67  0857               	movf	(??___ftdiv+3)^(0+128),w
 17649  1C68  06DD               	xorwf	___ftdiv@sign^(0+128),f
 17650  1C69  3080               	movlw	128
 17651  1C6A  00D4               	movwf	??___ftdiv^(0+128)
 17652  1C6B  0854               	movf	??___ftdiv^(0+128),w
 17653  1C6C  05DD               	andwf	___ftdiv@sign^(0+128),f
 17654  1C6D  17D2               	bsf	(___ftdiv@f1^(0+128)+1),7
 17655  1C6E  30FF               	movlw	255
 17656  1C6F  05D1               	andwf	___ftdiv@f1^(0+128),f
 17657  1C70  30FF               	movlw	255
 17658  1C71  05D2               	andwf	(___ftdiv@f1+1)^(0+128),f
 17659  1C72  3000               	movlw	0
 17660  1C73  05D3               	andwf	(___ftdiv@f1+2)^(0+128),f
 17661  1C74  17CF               	bsf	(___ftdiv@f2^(0+128)+1),7
 17662  1C75  30FF               	movlw	255
 17663  1C76  05CE               	andwf	___ftdiv@f2^(0+128),f
 17664  1C77  30FF               	movlw	255
 17665  1C78  05CF               	andwf	(___ftdiv@f2+1)^(0+128),f
 17666  1C79  3000               	movlw	0
 17667  1C7A  05D0               	andwf	(___ftdiv@f2+2)^(0+128),f
 17668  1C7B  3018               	movlw	24
 17669  1C7C  00D4               	movwf	??___ftdiv^(0+128)
 17670  1C7D  0854               	movf	??___ftdiv^(0+128),w
 17671  1C7E  00D8               	movwf	___ftdiv@cntr^(0+128)
 17672  1C7F                     l8178:	
 17673  1C7F  3001               	movlw	1
 17674  1C80                     u8645:	
 17675  1C80  35D9               	lslf	___ftdiv@f3^(0+128),f
 17676  1C81  0DDA               	rlf	(___ftdiv@f3+1)^(0+128),f
 17677  1C82  0DDB               	rlf	(___ftdiv@f3+2)^(0+128),f
 17678  1C83  0B89               	decfsz	9,f
 17679  1C84  2C80               	goto	u8645
 17680  1C85  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 17681  1C86  0253               	subwf	(___ftdiv@f1+2)^(0+128),w
 17682  1C87  1D03               	skipz
 17683  1C88  2C8F               	goto	u8655
 17684  1C89  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 17685  1C8A  0252               	subwf	(___ftdiv@f1+1)^(0+128),w
 17686  1C8B  1D03               	skipz
 17687  1C8C  2C8F               	goto	u8655
 17688  1C8D  084E               	movf	___ftdiv@f2^(0+128),w
 17689  1C8E  0251               	subwf	___ftdiv@f1^(0+128),w
 17690  1C8F                     u8655:	
 17691  1C8F  1C03               	skipc
 17692  1C90  2C98               	goto	l8186
 17693  1C91  084E               	movf	___ftdiv@f2^(0+128),w
 17694  1C92  02D1               	subwf	___ftdiv@f1^(0+128),f
 17695  1C93  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 17696  1C94  3BD2               	subwfb	(___ftdiv@f1+1)^(0+128),f
 17697  1C95  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 17698  1C96  3BD3               	subwfb	(___ftdiv@f1+2)^(0+128),f
 17699  1C97  1459               	bsf	___ftdiv@f3^(0+128),0
 17700  1C98                     l8186:	
 17701  1C98  3001               	movlw	1
 17702  1C99                     u8665:	
 17703  1C99  35D1               	lslf	___ftdiv@f1^(0+128),f
 17704  1C9A  0DD2               	rlf	(___ftdiv@f1+1)^(0+128),f
 17705  1C9B  0DD3               	rlf	(___ftdiv@f1+2)^(0+128),f
 17706  1C9C  0B89               	decfsz	9,f
 17707  1C9D  2C99               	goto	u8665
 17708  1C9E  3001               	movlw	1
 17709  1C9F  02D8               	subwf	___ftdiv@cntr^(0+128),f
 17710  1CA0  1D03               	btfss	3,2
 17711  1CA1  2C7F               	goto	l8178
 17712  1CA2  0859               	movf	___ftdiv@f3^(0+128),w
 17713  1CA3  00A0               	movwf	___ftpack@arg^(0+128)
 17714  1CA4  085A               	movf	(___ftdiv@f3+1)^(0+128),w
 17715  1CA5  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 17716  1CA6  085B               	movf	(___ftdiv@f3+2)^(0+128),w
 17717  1CA7  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 17718  1CA8  085C               	movf	___ftdiv@exp^(0+128),w
 17719  1CA9  00D4               	movwf	??___ftdiv^(0+128)
 17720  1CAA  0854               	movf	??___ftdiv^(0+128),w
 17721  1CAB  00A3               	movwf	___ftpack@exp^(0+128)
 17722  1CAC  085D               	movf	___ftdiv@sign^(0+128),w
 17723  1CAD  00D5               	movwf	(??___ftdiv+1)^(0+128)
 17724  1CAE  0855               	movf	(??___ftdiv+1)^(0+128),w
 17725  1CAF  00A4               	movwf	___ftpack@sign^(0+128)
 17726  1CB0  31A5  2533         	fcall	___ftpack
 17727  1CB2  0021               	movlb	1	; select bank1
 17728  1CB3  0820               	movf	?___ftpack^(0+128),w
 17729  1CB4  00CE               	movwf	?___ftdiv^(0+128)
 17730  1CB5  0821               	movf	(?___ftpack+1)^(0+128),w
 17731  1CB6  00CF               	movwf	(?___ftdiv+1)^(0+128)
 17732  1CB7  0822               	movf	(?___ftpack+2)^(0+128),w
 17733  1CB8  00D0               	movwf	(?___ftdiv+2)^(0+128)
 17734  1CB9  0008               	return
 17735  1CBA                     __end_of___ftdiv:	
 17736                           
 17737                           	psect	text59
 17738  2E10                     __ptext59:	
 17739 ;; *************** function ___awtoft *****************
 17740 ;; Defined at:
 17741 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awtoft.c"
 17742 ;; Parameters:    Size  Location     Type
 17743 ;;  c               2    8[BANK1 ] int 
 17744 ;; Auto vars:     Size  Location     Type
 17745 ;;  sign            1   13[BANK1 ] unsigned char 
 17746 ;; Return value:  Size  Location     Type
 17747 ;;                  3    8[BANK1 ] float 
 17748 ;; Registers used:
 17749 ;;		wreg, status,2, status,0, pclath, cstack
 17750 ;; Tracked objects:
 17751 ;;		On entry : 0/0
 17752 ;;		On exit  : 0/0
 17753 ;;		Unchanged: 0/0
 17754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17755 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17756 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17757 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17758 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17759 ;;Total ram usage:        6 bytes
 17760 ;; Hardware stack levels used:    1
 17761 ;; Hardware stack levels required when called:    4
 17762 ;; This function calls:
 17763 ;;		___ftpack
 17764 ;; This function is called by:
 17765 ;;		_main
 17766 ;;		_set_subdivision
 17767 ;;		_calcCosArray
 17768 ;;		_getModulationDelayTime
 17769 ;;		_updateModulationArray
 17770 ;;		_exp
 17771 ;;		_log
 17772 ;; This function uses a non-reentrant model
 17773 ;;
 17774                           
 17775                           
 17776                           ;psect for function ___awtoft
 17777  2E10                     ___awtoft:	
 17778                           
 17779                           ;incstack = 0
 17780                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 17781  2E10  0021               	movlb	1	; select bank1
 17782  2E11  01AD               	clrf	___awtoft@sign^(0+128)
 17783  2E12  1FA9               	btfss	(___awtoft@c+1)^(0+128),7
 17784  2E13  2E1B               	goto	l8148
 17785  2E14  09A8               	comf	___awtoft@c^(0+128),f
 17786  2E15  09A9               	comf	(___awtoft@c+1)^(0+128),f
 17787  2E16  0AA8               	incf	___awtoft@c^(0+128),f
 17788  2E17  1903               	skipnz
 17789  2E18  0AA9               	incf	(___awtoft@c+1)^(0+128),f
 17790  2E19  01AD               	clrf	___awtoft@sign^(0+128)
 17791  2E1A  0AAD               	incf	___awtoft@sign^(0+128),f
 17792  2E1B                     l8148:	
 17793  2E1B  0828               	movf	___awtoft@c^(0+128),w
 17794  2E1C  00A0               	movwf	___ftpack@arg^(0+128)
 17795  2E1D  0829               	movf	(___awtoft@c+1)^(0+128),w
 17796  2E1E  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 17797  2E1F  01A2               	clrf	(___ftpack@arg+2)^(0+128)
 17798  2E20  308E               	movlw	142
 17799  2E21  00AB               	movwf	??___awtoft^(0+128)
 17800  2E22  082B               	movf	??___awtoft^(0+128),w
 17801  2E23  00A3               	movwf	___ftpack@exp^(0+128)
 17802  2E24  082D               	movf	___awtoft@sign^(0+128),w
 17803  2E25  00AC               	movwf	(??___awtoft+1)^(0+128)
 17804  2E26  082C               	movf	(??___awtoft+1)^(0+128),w
 17805  2E27  00A4               	movwf	___ftpack@sign^(0+128)
 17806  2E28  31A5  2533         	fcall	___ftpack
 17807  2E2A  0021               	movlb	1	; select bank1
 17808  2E2B  0820               	movf	?___ftpack^(0+128),w
 17809  2E2C  00A8               	movwf	?___awtoft^(0+128)
 17810  2E2D  0821               	movf	(?___ftpack+1)^(0+128),w
 17811  2E2E  00A9               	movwf	(?___awtoft+1)^(0+128)
 17812  2E2F  0822               	movf	(?___ftpack+2)^(0+128),w
 17813  2E30  00AA               	movwf	(?___awtoft+2)^(0+128)
 17814  2E31  0008               	return
 17815  2E32                     __end_of___awtoft:	
 17816                           
 17817                           	psect	text60
 17818  2533                     __ptext60:	
 17819 ;; *************** function ___ftpack *****************
 17820 ;; Defined at:
 17821 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
 17822 ;; Parameters:    Size  Location     Type
 17823 ;;  arg             3    0[BANK1 ] unsigned um
 17824 ;;  exp             1    3[BANK1 ] unsigned char 
 17825 ;;  sign            1    4[BANK1 ] unsigned char 
 17826 ;; Auto vars:     Size  Location     Type
 17827 ;;		None
 17828 ;; Return value:  Size  Location     Type
 17829 ;;                  3    0[BANK1 ] float 
 17830 ;; Registers used:
 17831 ;;		wreg, status,2, status,0
 17832 ;; Tracked objects:
 17833 ;;		On entry : 0/0
 17834 ;;		On exit  : 0/0
 17835 ;;		Unchanged: 0/0
 17836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17837 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17839 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17840 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17841 ;;Total ram usage:        8 bytes
 17842 ;; Hardware stack levels used:    1
 17843 ;; Hardware stack levels required when called:    3
 17844 ;; This function calls:
 17845 ;;		Nothing
 17846 ;; This function is called by:
 17847 ;;		___altoft
 17848 ;;		___awtoft
 17849 ;;		___ftadd
 17850 ;;		___ftdiv
 17851 ;;		___ftmul
 17852 ;;		___lltoft
 17853 ;; This function uses a non-reentrant model
 17854 ;;
 17855                           
 17856                           
 17857                           ;psect for function ___ftpack
 17858  2533                     ___ftpack:	
 17859                           
 17860                           ;incstack = 0
 17861                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 17862  2533  0021               	movlb	1	; select bank1
 17863  2534  0823               	movf	___ftpack@exp^(0+128),w
 17864  2535  1903               	btfsc	3,2
 17865  2536  2D3C               	goto	l7786
 17866  2537  0822               	movf	(___ftpack@arg+2)^(0+128),w
 17867  2538  0421               	iorwf	(___ftpack@arg+1)^(0+128),w
 17868  2539  0420               	iorwf	___ftpack@arg^(0+128),w
 17869  253A  1D03               	skipz
 17870  253B  2D4D               	goto	l7792
 17871  253C                     l7786:	
 17872  253C  3000               	movlw	0
 17873  253D  00A0               	movwf	?___ftpack^(0+128)
 17874  253E  3000               	movlw	0
 17875  253F  00A1               	movwf	(?___ftpack+1)^(0+128)
 17876  2540  3000               	movlw	0
 17877  2541  00A2               	movwf	(?___ftpack+2)^(0+128)
 17878  2542  0008               	return
 17879  2543                     l7790:	
 17880  2543  3001               	movlw	1
 17881  2544  00A5               	movwf	??___ftpack^(0+128)
 17882  2545  0825               	movf	??___ftpack^(0+128),w
 17883  2546  07A3               	addwf	___ftpack@exp^(0+128),f
 17884  2547  3001               	movlw	1
 17885  2548                     u7865:	
 17886  2548  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 17887  2549  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 17888  254A  0CA0               	rrf	___ftpack@arg^(0+128),f
 17889  254B  0B89               	decfsz	9,f
 17890  254C  2D48               	goto	u7865
 17891  254D                     l7792:	
 17892  254D  30FE               	movlw	254
 17893  254E  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 17894  254F  1903               	btfsc	3,2
 17895  2550  2D66               	goto	l2189
 17896  2551  2D43               	goto	l7790
 17897  2552                     l7794:	
 17898  2552  3001               	movlw	1
 17899  2553  00A5               	movwf	??___ftpack^(0+128)
 17900  2554  0825               	movf	??___ftpack^(0+128),w
 17901  2555  07A3               	addwf	___ftpack@exp^(0+128),f
 17902  2556  3001               	movlw	1
 17903  2557  07A0               	addwf	___ftpack@arg^(0+128),f
 17904  2558  3000               	movlw	0
 17905  2559  1803               	skipnc
 17906  255A  3001               	movlw	1
 17907  255B  07A1               	addwf	(___ftpack@arg+1)^(0+128),f
 17908  255C  3000               	movlw	0
 17909  255D  1803               	skipnc
 17910  255E  3001               	movlw	1
 17911  255F  07A2               	addwf	(___ftpack@arg+2)^(0+128),f
 17912  2560  3001               	movlw	1
 17913  2561                     u7885:	
 17914  2561  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 17915  2562  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 17916  2563  0CA0               	rrf	___ftpack@arg^(0+128),f
 17917  2564  0B89               	decfsz	9,f
 17918  2565  2D61               	goto	u7885
 17919  2566                     l2189:	
 17920  2566  30FF               	movlw	255
 17921  2567  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 17922  2568  1903               	btfsc	3,2
 17923  2569  2D73               	goto	l7802
 17924  256A  2D52               	goto	l7794
 17925  256B                     l7800:	
 17926  256B  3001               	movlw	1
 17927  256C  02A3               	subwf	___ftpack@exp^(0+128),f
 17928  256D  3001               	movlw	1
 17929  256E                     u7905:	
 17930  256E  35A0               	lslf	___ftpack@arg^(0+128),f
 17931  256F  0DA1               	rlf	(___ftpack@arg+1)^(0+128),f
 17932  2570  0DA2               	rlf	(___ftpack@arg+2)^(0+128),f
 17933  2571  0B89               	decfsz	9,f
 17934  2572  2D6E               	goto	u7905
 17935  2573                     l7802:	
 17936  2573  1BA1               	btfsc	(___ftpack@arg+1)^(0+128),7
 17937  2574  2D79               	goto	l2196
 17938  2575  3002               	movlw	2
 17939  2576  0223               	subwf	___ftpack@exp^(0+128),w
 17940  2577  1803               	skipnc
 17941  2578  2D6B               	goto	l7800
 17942  2579                     l2196:	
 17943  2579  1823               	btfsc	___ftpack@exp^(0+128),0
 17944  257A  2D81               	goto	l2197
 17945  257B  30FF               	movlw	255
 17946  257C  05A0               	andwf	___ftpack@arg^(0+128),f
 17947  257D  307F               	movlw	127
 17948  257E  05A1               	andwf	(___ftpack@arg+1)^(0+128),f
 17949  257F  30FF               	movlw	255
 17950  2580  05A2               	andwf	(___ftpack@arg+2)^(0+128),f
 17951  2581                     l2197:	
 17952  2581  1003               	clrc
 17953  2582  0CA3               	rrf	___ftpack@exp^(0+128),f
 17954  2583  0823               	movf	___ftpack@exp^(0+128),w
 17955  2584  00A5               	movwf	??___ftpack^(0+128)
 17956  2585  01A6               	clrf	(??___ftpack^(0+128)+1)
 17957  2586  01A7               	clrf	(??___ftpack^(0+128)+2)
 17958  2587  3010               	movlw	16
 17959  2588                     u7945:	
 17960  2588  35A5               	lslf	??___ftpack^(0+128),f
 17961  2589  0DA6               	rlf	(??___ftpack^(0+128)+1),f
 17962  258A  0DA7               	rlf	(??___ftpack^(0+128)+2),f
 17963  258B  0B89               	decfsz	9,f
 17964  258C  2D88               	goto	u7945
 17965  258D  0825               	movf	??___ftpack^(0+128),w
 17966  258E  04A0               	iorwf	___ftpack@arg^(0+128),f
 17967  258F  0826               	movf	(??___ftpack+1)^(0+128),w
 17968  2590  04A1               	iorwf	(___ftpack@arg+1)^(0+128),f
 17969  2591  0827               	movf	(??___ftpack+2)^(0+128),w
 17970  2592  04A2               	iorwf	(___ftpack@arg+2)^(0+128),f
 17971  2593  0824               	movf	___ftpack@sign^(0+128),w
 17972  2594  1903               	btfsc	3,2
 17973  2595  0008               	return
 17974  2596  17A2               	bsf	(___ftpack@arg^(0+128)+2),7
 17975  2597  0008               	return
 17976  2598                     __end_of___ftpack:	
 17977                           
 17978                           	psect	text61
 17979  2D00                     __ptext61:	
 17980 ;; *************** function _adc_convert *****************
 17981 ;; Defined at:
 17982 ;;		line 122 in file "user.c"
 17983 ;; Parameters:    Size  Location     Type
 17984 ;;  channel         1    wreg     unsigned char 
 17985 ;; Auto vars:     Size  Location     Type
 17986 ;;  channel         1    3[BANK1 ] unsigned char 
 17987 ;; Return value:  Size  Location     Type
 17988 ;;                  2    0[BANK1 ] unsigned int 
 17989 ;; Registers used:
 17990 ;;		wreg, status,2, status,0
 17991 ;; Tracked objects:
 17992 ;;		On entry : 0/0
 17993 ;;		On exit  : 0/0
 17994 ;;		Unchanged: 0/0
 17995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17996 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17997 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17998 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17999 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18000 ;;Total ram usage:        4 bytes
 18001 ;; Hardware stack levels used:    1
 18002 ;; Hardware stack levels required when called:    3
 18003 ;; This function calls:
 18004 ;;		Nothing
 18005 ;; This function is called by:
 18006 ;;		_main
 18007 ;; This function uses a non-reentrant model
 18008 ;;
 18009                           
 18010                           
 18011                           ;psect for function _adc_convert
 18012  2D00                     _adc_convert:	
 18013                           
 18014                           ;incstack = 0
 18015                           ; Regs used in _adc_convert: [wreg+status,2+status,0]
 18016                           ;adc_convert@channel stored from wreg
 18017  2D00  0021               	movlb	1	; select bank1
 18018  2D01  00A3               	movwf	adc_convert@channel^(0+128)
 18019                           
 18020                           ;user.c: 123: ADCON0bits.CHS = channel;
 18021  2D02  0823               	movf	adc_convert@channel^(0+128),w
 18022  2D03  00A2               	movwf	??_adc_convert^(0+128)
 18023  2D04  0DA2               	rlf	??_adc_convert^(0+128),f
 18024  2D05  0DA2               	rlf	??_adc_convert^(0+128),f
 18025  2D06  081D               	movf	29,w	;volatile
 18026  2D07  0622               	xorwf	??_adc_convert^(0+128),w
 18027  2D08  3983               	andlw	-125
 18028  2D09  0622               	xorwf	??_adc_convert^(0+128),w
 18029  2D0A  009D               	movwf	29	;volatile
 18030                           
 18031                           ;user.c: 124: ADCON0bits.GO = 0b1;
 18032  2D0B  149D               	bsf	29,1	;volatile
 18033  2D0C                     l608:	
 18034                           ;user.c: 125: while (ADCON0bits.GO_nDONE);
 18035                           
 18036  2D0C  189D               	btfsc	29,1	;volatile
 18037  2D0D  2D0C               	goto	l608
 18038                           
 18039                           ;user.c: 126: return (ADRESH << 8) | ADRESL;
 18040  2D0E  081C               	movf	28,w	;volatile
 18041  2D0F  00A1               	movwf	(?_adc_convert+1)^(0+128)
 18042  2D10  081B               	movf	27,w	;volatile
 18043  2D11  00A0               	movwf	?_adc_convert^(0+128)
 18044  2D12  0008               	return
 18045  2D13                     __end_of_adc_convert:	
 18046                           
 18047                           	psect	text62
 18048  227F                     __ptext62:	
 18049 ;; *************** function _USARTInit *****************
 18050 ;; Defined at:
 18051 ;;		line 31 in file "usart_pic16.c"
 18052 ;; Parameters:    Size  Location     Type
 18053 ;;  baud_rate       2    0[BANK1 ] unsigned int 
 18054 ;; Auto vars:     Size  Location     Type
 18055 ;;		None
 18056 ;; Return value:  Size  Location     Type
 18057 ;;                  1    wreg      void 
 18058 ;; Registers used:
 18059 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 18060 ;; Tracked objects:
 18061 ;;		On entry : 0/0
 18062 ;;		On exit  : 0/0
 18063 ;;		Unchanged: 0/0
 18064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18065 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18067 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18068 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18069 ;;Total ram usage:        3 bytes
 18070 ;; Hardware stack levels used:    1
 18071 ;; Hardware stack levels required when called:    3
 18072 ;; This function calls:
 18073 ;;		Nothing
 18074 ;; This function is called by:
 18075 ;;		_main
 18076 ;; This function uses a non-reentrant model
 18077 ;;
 18078                           
 18079                           
 18080                           ;psect for function _USARTInit
 18081  227F                     _USARTInit:	
 18082                           
 18083                           ;usart_pic16.c: 34: UQFront=UQEnd=-1;
 18084                           
 18085                           ;incstack = 0
 18086                           ; Regs used in _USARTInit: [wreg-fsr0h+status,2+status,0]
 18087  227F  30FF               	movlw	255
 18088  2280  0020               	movlb	0	; select bank0
 18089  2281  00D9               	movwf	_UQEnd	;volatile
 18090  2282  0021               	movlb	1	; select bank1
 18091  2283  00A2               	movwf	??_USARTInit^(0+128)
 18092  2284  0822               	movf	??_USARTInit^(0+128),w
 18093  2285  0020               	movlb	0	; select bank0
 18094  2286  00DA               	movwf	_UQFront	;volatile
 18095                           
 18096                           ;usart_pic16.c: 37: switch(baud_rate)
 18097  2287  2A92               	goto	l8796
 18098  2288                     l8786:	
 18099                           ;usart_pic16.c: 38: {
 18100                           ;usart_pic16.c: 39: case 9600:
 18101                           
 18102                           
 18103                           ;usart_pic16.c: 40: SPBRG=103;
 18104  2288  3067               	movlw	103
 18105  2289  2A8F               	goto	L24
 18106  228A                     l8788:	
 18107                           ;usart_pic16.c: 42: case 19200:
 18108                           
 18109                           ;usart_pic16.c: 41: break;
 18110                           
 18111                           
 18112                           ;usart_pic16.c: 43: SPBRG=51;
 18113  228A  3033               	movlw	51
 18114  228B  2A8F               	goto	L24
 18115  228C                     l8790:	
 18116                           ;usart_pic16.c: 45: case 31250:
 18117                           
 18118                           ;usart_pic16.c: 44: break;
 18119                           
 18120                           
 18121                           ;usart_pic16.c: 46: SPBRG = 31;
 18122  228C  301F               	movlw	31
 18123  228D  2A8F               	goto	L24
 18124  228E                     l8792:	
 18125                           ;usart_pic16.c: 48: case 38400:
 18126                           
 18127                           ;usart_pic16.c: 47: break;
 18128                           
 18129                           
 18130                           ;usart_pic16.c: 49: SPBRG=25;
 18131  228E  3019               	movlw	25
 18132  228F                     L24:	
 18133  228F  0023               	movlb	3	; select bank3
 18134  2290  009B               	movwf	27	;volatile
 18135                           
 18136                           ;usart_pic16.c: 51: }
 18137                           
 18138                           ;usart_pic16.c: 50: break;
 18139  2291  2AB5               	goto	l1770
 18140  2292                     l8796:	
 18141                           
 18142                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 18143                           ; Switch size 1, requested type "space"
 18144                           ; Number of cases is 4, Range of values is 37 to 150
 18145                           ; switch strategies available:
 18146                           ; Name         Instructions Cycles
 18147                           ; simple_byte           13     7 (average)
 18148                           ; direct_byte          237     9 (fixed)
 18149                           ; jumptable            263     9 (fixed)
 18150                           ;	Chosen strategy is simple_byte
 18151  2292  0021               	movlb	1	; select bank1
 18152  2293  0821               	movf	(USARTInit@baud_rate+1)^(0+128),w
 18153  2294  3A25               	xorlw	37	; case 37
 18154  2295  1903               	skipnz
 18155  2296  2AA1               	goto	l9950
 18156  2297  3A6E               	xorlw	110	; case 75
 18157  2298  1903               	skipnz
 18158  2299  2AA6               	goto	l9952
 18159  229A  3A31               	xorlw	49	; case 122
 18160  229B  1903               	skipnz
 18161  229C  2AAB               	goto	l9954
 18162  229D  3AEC               	xorlw	236	; case 150
 18163  229E  1903               	skipnz
 18164  229F  2AB0               	goto	l9956
 18165  22A0  2AB5               	goto	l1770
 18166  22A1                     l9950:	
 18167                           
 18168                           ; Switch size 1, requested type "space"
 18169                           ; Number of cases is 1, Range of values is 128 to 128
 18170                           ; switch strategies available:
 18171                           ; Name         Instructions Cycles
 18172                           ; simple_byte            4     3 (average)
 18173                           ; direct_byte           11     9 (fixed)
 18174                           ; jumptable            263     9 (fixed)
 18175                           ;	Chosen strategy is simple_byte
 18176  22A1  0820               	movf	USARTInit@baud_rate^(0+128),w
 18177  22A2  3A80               	xorlw	128	; case 128
 18178  22A3  1903               	skipnz
 18179  22A4  2A88               	goto	l8786
 18180  22A5  2AB5               	goto	l1770
 18181  22A6                     l9952:	
 18182                           
 18183                           ; Switch size 1, requested type "space"
 18184                           ; Number of cases is 1, Range of values is 0 to 0
 18185                           ; switch strategies available:
 18186                           ; Name         Instructions Cycles
 18187                           ; simple_byte            4     3 (average)
 18188                           ; direct_byte            8     6 (fixed)
 18189                           ; jumptable            260     6 (fixed)
 18190                           ;	Chosen strategy is simple_byte
 18191  22A6  0820               	movf	USARTInit@baud_rate^(0+128),w
 18192  22A7  3A00               	xorlw	0	; case 0
 18193  22A8  1903               	skipnz
 18194  22A9  2A8A               	goto	l8788
 18195  22AA  2AB5               	goto	l1770
 18196  22AB                     l9954:	
 18197                           
 18198                           ; Switch size 1, requested type "space"
 18199                           ; Number of cases is 1, Range of values is 18 to 18
 18200                           ; switch strategies available:
 18201                           ; Name         Instructions Cycles
 18202                           ; simple_byte            4     3 (average)
 18203                           ; direct_byte           11     9 (fixed)
 18204                           ; jumptable            263     9 (fixed)
 18205                           ;	Chosen strategy is simple_byte
 18206  22AB  0820               	movf	USARTInit@baud_rate^(0+128),w
 18207  22AC  3A12               	xorlw	18	; case 18
 18208  22AD  1903               	skipnz
 18209  22AE  2A8C               	goto	l8790
 18210  22AF  2AB5               	goto	l1770
 18211  22B0                     l9956:	
 18212                           
 18213                           ; Switch size 1, requested type "space"
 18214                           ; Number of cases is 1, Range of values is 0 to 0
 18215                           ; switch strategies available:
 18216                           ; Name         Instructions Cycles
 18217                           ; simple_byte            4     3 (average)
 18218                           ; direct_byte            8     6 (fixed)
 18219                           ; jumptable            260     6 (fixed)
 18220                           ;	Chosen strategy is simple_byte
 18221  22B0  0820               	movf	USARTInit@baud_rate^(0+128),w
 18222  22B1  3A00               	xorlw	0	; case 0
 18223  22B2  1903               	skipnz
 18224  22B3  2A8E               	goto	l8792
 18225  22B4  2AB5               	goto	l1770
 18226  22B5                     l1770:	
 18227                           
 18228                           ;usart_pic16.c: 53: TXSTAbits.TX9=0;
 18229  22B5  0023               	movlb	3	; select bank3
 18230  22B6  131E               	bcf	30,6	;volatile
 18231                           
 18232                           ;usart_pic16.c: 54: TXSTAbits.TXEN=1;
 18233  22B7  169E               	bsf	30,5	;volatile
 18234                           
 18235                           ;usart_pic16.c: 55: TXSTAbits.SYNC=0;
 18236  22B8  121E               	bcf	30,4	;volatile
 18237                           
 18238                           ;usart_pic16.c: 56: TXSTAbits.BRGH=1;
 18239  22B9  151E               	bsf	30,2	;volatile
 18240                           
 18241                           ;usart_pic16.c: 59: RCSTAbits.SPEN=1;
 18242  22BA  179D               	bsf	29,7	;volatile
 18243                           
 18244                           ;usart_pic16.c: 60: RCSTAbits.RX9=0;
 18245  22BB  131D               	bcf	29,6	;volatile
 18246                           
 18247                           ;usart_pic16.c: 61: RCSTAbits.CREN=1;
 18248  22BC  161D               	bsf	29,4	;volatile
 18249                           
 18250                           ;usart_pic16.c: 62: RCSTAbits.ADDEN=0;
 18251  22BD  119D               	bcf	29,3	;volatile
 18252                           
 18253                           ;usart_pic16.c: 65: RCIE=1;
 18254  22BE  0021               	movlb	1	; select bank1
 18255  22BF  1691               	bsf	17,5	;volatile
 18256                           
 18257                           ;usart_pic16.c: 66: PEIE=1;
 18258  22C0  170B               	bsf	11,6	;volatile
 18259                           
 18260                           ;usart_pic16.c: 68: (GIE = 1);
 18261  22C1  178B               	bsf	11,7	;volatile
 18262  22C2  0008               	return
 18263  22C3                     __end_of_USARTInit:	
 18264                           
 18265                           	psect	text63
 18266  260A                     __ptext63:	
 18267 ;; *************** function _ReadSavedSettings *****************
 18268 ;; Defined at:
 18269 ;;		line 252 in file "user.c"
 18270 ;; Parameters:    Size  Location     Type
 18271 ;;		None
 18272 ;; Auto vars:     Size  Location     Type
 18273 ;;		None
 18274 ;; Return value:  Size  Location     Type
 18275 ;;                  1    wreg      void 
 18276 ;; Registers used:
 18277 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 18278 ;; Tracked objects:
 18279 ;;		On entry : 0/0
 18280 ;;		On exit  : 0/0
 18281 ;;		Unchanged: 0/0
 18282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18285 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18286 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18287 ;;Total ram usage:        1 bytes
 18288 ;; Hardware stack levels used:    1
 18289 ;; Hardware stack levels required when called:    4
 18290 ;; This function calls:
 18291 ;;		_FLASH_ReadWord
 18292 ;;		_set_leds_bottom
 18293 ;;		_set_leds_top
 18294 ;; This function is called by:
 18295 ;;		_main
 18296 ;; This function uses a non-reentrant model
 18297 ;;
 18298                           
 18299                           
 18300                           ;psect for function _ReadSavedSettings
 18301  260A                     _ReadSavedSettings:	
 18302                           
 18303                           ;user.c: 254: top_push_state = FLASH_ReadWord(0x1F81);
 18304                           
 18305                           ;incstack = 0
 18306                           ; Regs used in _ReadSavedSettings: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 18307  260A  3081               	movlw	129
 18308  260B  0021               	movlb	1	; select bank1
 18309  260C  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 18310  260D  301F               	movlw	31
 18311  260E  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
 18312  260F  31AD  25CF  31A6   	fcall	_FLASH_ReadWord
 18313  2612  0021               	movlb	1	; select bank1
 18314  2613  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
 18315  2614  0020               	movlb	0	; select bank0
 18316  2615  00CB               	movwf	_top_push_state+1
 18317  2616  0021               	movlb	1	; select bank1
 18318  2617  0820               	movf	?_FLASH_ReadWord^(0+128),w
 18319  2618  0020               	movlb	0	; select bank0
 18320  2619  00CA               	movwf	_top_push_state
 18321                           
 18322                           ;user.c: 255: bottom_push_state = FLASH_ReadWord(0x1F82);
 18323  261A  3082               	movlw	130
 18324  261B  0021               	movlb	1	; select bank1
 18325  261C  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 18326  261D  301F               	movlw	31
 18327  261E  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
 18328  261F  31AD  25CF  31A6   	fcall	_FLASH_ReadWord
 18329  2622  0021               	movlb	1	; select bank1
 18330  2623  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
 18331  2624  0023               	movlb	3	; select bank3
 18332  2625  00CC               	movwf	(_bottom_push_state+1)^(0+384)
 18333  2626  0021               	movlb	1	; select bank1
 18334  2627  0820               	movf	?_FLASH_ReadWord^(0+128),w
 18335  2628  0023               	movlb	3	; select bank3
 18336  2629  00CB               	movwf	_bottom_push_state^(0+384)
 18337                           
 18338                           ;user.c: 257: if (top_push_state > 6) {
 18339  262A  0020               	movlb	0	; select bank0
 18340  262B  084B               	movf	_top_push_state+1,w
 18341  262C  3A80               	xorlw	128
 18342  262D  0021               	movlb	1	; select bank1
 18343  262E  00A4               	movwf	??_ReadSavedSettings^(0+128)
 18344  262F  3080               	movlw	128
 18345  2630  0224               	subwf	??_ReadSavedSettings^(0+128),w
 18346  2631  1D03               	skipz
 18347  2632  2E36               	goto	u9445
 18348  2633  3007               	movlw	7
 18349  2634  0020               	movlb	0	; select bank0
 18350  2635  024A               	subwf	_top_push_state,w
 18351  2636                     u9445:	
 18352  2636  1C03               	skipc
 18353  2637  2E3D               	goto	l665
 18354                           
 18355                           ;user.c: 259: top_push_state = 6;
 18356  2638  3006               	movlw	6
 18357  2639  0020               	movlb	0	; select bank0
 18358  263A  00CA               	movwf	_top_push_state
 18359  263B  3000               	movlw	0
 18360  263C  00CB               	movwf	_top_push_state+1
 18361  263D                     l665:	
 18362                           
 18363                           ;user.c: 260: }
 18364                           ;user.c: 261: if (bottom_push_state > 5) {
 18365  263D  0023               	movlb	3	; select bank3
 18366  263E  084C               	movf	(_bottom_push_state+1)^(0+384),w
 18367  263F  3A80               	xorlw	128
 18368  2640  0021               	movlb	1	; select bank1
 18369  2641  00A4               	movwf	??_ReadSavedSettings^(0+128)
 18370  2642  3080               	movlw	128
 18371  2643  0224               	subwf	??_ReadSavedSettings^(0+128),w
 18372  2644  1D03               	skipz
 18373  2645  2E49               	goto	u9455
 18374  2646  3006               	movlw	6
 18375  2647  0023               	movlb	3	; select bank3
 18376  2648  024B               	subwf	_bottom_push_state^(0+384),w
 18377  2649                     u9455:	
 18378  2649  1C03               	skipc
 18379  264A  2E50               	goto	l8850
 18380                           
 18381                           ;user.c: 263: bottom_push_state = 1;
 18382  264B  3001               	movlw	1
 18383  264C  0023               	movlb	3	; select bank3
 18384  264D  00CB               	movwf	_bottom_push_state^(0+384)
 18385  264E  3000               	movlw	0
 18386  264F  00CC               	movwf	(_bottom_push_state^(0+384)+1)
 18387  2650                     l8850:	
 18388                           
 18389                           ;user.c: 264: }
 18390                           ;user.c: 267: LATGbits.LATG1 = !switchBypass_state;
 18391  2650  0020               	movlb	0	; select bank0
 18392  2651  0850               	movf	_switchBypass_state,w
 18393  2652  1D03               	btfss	3,2
 18394  2653  2E57               	goto	u9460
 18395  2654  0027               	movlb	7	; select bank7
 18396  2655  148D               	bsf	13,1	;volatile
 18397  2656  2E59               	goto	l8852
 18398  2657                     u9460:	
 18399  2657  0027               	movlb	7	; select bank7
 18400  2658  108D               	bcf	13,1	;volatile
 18401  2659                     l8852:	
 18402                           
 18403                           ;user.c: 268: LATGbits.LATG2 = switchBypass_state;
 18404  2659  0020               	movlb	0	; select bank0
 18405  265A  0C50               	rrf	_switchBypass_state,w
 18406  265B  0027               	movlb	7	; select bank7
 18407  265C  1C03               	skipc
 18408  265D  110D               	bcf	13,2	;volatile
 18409  265E  1803               	skipnc
 18410  265F  150D               	bsf	13,2	;volatile
 18411                           
 18412                           ;user.c: 269: LATBbits.LATB2 = 0;
 18413  2660  0022               	movlb	2	; select bank2
 18414  2661  110D               	bcf	13,2	;volatile
 18415                           
 18416                           ;user.c: 270: LATBbits.LATB3 = 0;
 18417  2662  118D               	bcf	13,3	;volatile
 18418                           
 18419                           ;user.c: 272: LATBbits.LATB4 = 0;
 18420  2663  120D               	bcf	13,4	;volatile
 18421                           
 18422                           ;user.c: 273: LATBbits.LATB5 = 0;
 18423  2664  128D               	bcf	13,5	;volatile
 18424                           
 18425                           ;user.c: 275: LATBbits.LATB1 = 0;
 18426  2665  108D               	bcf	13,1	;volatile
 18427                           
 18428                           ;user.c: 276: LATBbits.LATB0 = 0;
 18429  2666  100D               	bcf	13,0	;volatile
 18430                           
 18431                           ;user.c: 279: set_leds_top(top_push_state, 1);
 18432  2667  0020               	movlb	0	; select bank0
 18433  2668  084B               	movf	_top_push_state+1,w
 18434  2669  0021               	movlb	1	; select bank1
 18435  266A  00A1               	movwf	(set_leds_top@x+1)^(0+128)
 18436  266B  0020               	movlb	0	; select bank0
 18437  266C  084A               	movf	_top_push_state,w
 18438  266D  0021               	movlb	1	; select bank1
 18439  266E  00A0               	movwf	set_leds_top@x^(0+128)
 18440  266F  3001               	movlw	1
 18441  2670  00A2               	movwf	set_leds_top@ledState^(0+128)
 18442  2671  3000               	movlw	0
 18443  2672  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
 18444  2673  31A4  24DF  31A6   	fcall	_set_leds_top
 18445                           
 18446                           ;user.c: 280: set_leds_bottom(bottom_push_state);
 18447  2676  0023               	movlb	3	; select bank3
 18448  2677  084C               	movf	(_bottom_push_state+1)^(0+384),w
 18449  2678  0021               	movlb	1	; select bank1
 18450  2679  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
 18451  267A  0023               	movlb	3	; select bank3
 18452  267B  084B               	movf	_bottom_push_state^(0+384),w
 18453  267C  0021               	movlb	1	; select bank1
 18454  267D  00A0               	movwf	set_leds_bottom@x^(0+128)
 18455  267E  31A0  204E         	fcall	_set_leds_bottom
 18456  2680  0008               	return
 18457  2681                     __end_of_ReadSavedSettings:	
 18458                           
 18459                           	psect	text64
 18460  24DF                     __ptext64:	
 18461 ;; *************** function _set_leds_top *****************
 18462 ;; Defined at:
 18463 ;;		line 16 in file "LEDs.c"
 18464 ;; Parameters:    Size  Location     Type
 18465 ;;  x               2    0[BANK1 ] int 
 18466 ;;  ledState        2    2[BANK1 ] int 
 18467 ;; Auto vars:     Size  Location     Type
 18468 ;;		None
 18469 ;; Return value:  Size  Location     Type
 18470 ;;                  1    wreg      void 
 18471 ;; Registers used:
 18472 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 18473 ;; Tracked objects:
 18474 ;;		On entry : 0/0
 18475 ;;		On exit  : 0/0
 18476 ;;		Unchanged: 0/0
 18477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18478 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18481 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18482 ;;Total ram usage:        4 bytes
 18483 ;; Hardware stack levels used:    1
 18484 ;; Hardware stack levels required when called:    3
 18485 ;; This function calls:
 18486 ;;		Nothing
 18487 ;; This function is called by:
 18488 ;;		_ReadSavedSettings
 18489 ;;		_ring_tactiles
 18490 ;;		_solidring_tactiles
 18491 ;;		_read_top_tactile
 18492 ;;		_setPresetDisplay
 18493 ;;		_resetRingLEDs
 18494 ;;		_setExpressionDisplay
 18495 ;;		_star_tactiles
 18496 ;; This function uses a non-reentrant model
 18497 ;;
 18498                           
 18499                           
 18500                           ;psect for function _set_leds_top
 18501  24DF                     _set_leds_top:	
 18502                           
 18503                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 18504                           
 18505                           ;incstack = 0
 18506                           ; Regs used in _set_leds_top: [wreg-fsr0h+status,2+status,0]
 18507  24DF  0027               	movlb	7	; select bank7
 18508  24E0  100C               	bcf	12,0	;volatile
 18509                           
 18510                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 18511  24E1  108C               	bcf	12,1	;volatile
 18512                           
 18513                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 18514  24E2  110C               	bcf	12,2	;volatile
 18515                           
 18516                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 18517  24E3  118C               	bcf	12,3	;volatile
 18518                           
 18519                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 18520  24E4  120C               	bcf	12,4	;volatile
 18521                           
 18522                           ;LEDs.c: 22: switch (x) {
 18523  24E5  2D15               	goto	l7828
 18524  24E6                     l7816:	
 18525                           ;LEDs.c: 23: case 1:
 18526                           
 18527                           
 18528                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 18529  24E6  0021               	movlb	1	; select bank1
 18530  24E7  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18531  24E8  0027               	movlb	7	; select bank7
 18532  24E9  1C03               	skipc
 18533  24EA  100C               	bcf	12,0	;volatile
 18534  24EB  1803               	skipnc
 18535  24EC  140C               	bsf	12,0	;volatile
 18536                           
 18537                           ;LEDs.c: 25: break;
 18538  24ED  0008               	return
 18539  24EE                     l7818:	
 18540                           ;LEDs.c: 26: case 2:
 18541                           
 18542                           
 18543                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 18544  24EE  0021               	movlb	1	; select bank1
 18545  24EF  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18546  24F0  0027               	movlb	7	; select bank7
 18547  24F1  1C03               	skipc
 18548  24F2  108C               	bcf	12,1	;volatile
 18549  24F3  1803               	skipnc
 18550  24F4  148C               	bsf	12,1	;volatile
 18551                           
 18552                           ;LEDs.c: 28: break;
 18553  24F5  0008               	return
 18554  24F6                     l7820:	
 18555                           ;LEDs.c: 29: case 3:
 18556                           
 18557                           
 18558                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 18559  24F6  0021               	movlb	1	; select bank1
 18560  24F7  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18561  24F8  0027               	movlb	7	; select bank7
 18562  24F9  1C03               	skipc
 18563  24FA  110C               	bcf	12,2	;volatile
 18564  24FB  1803               	skipnc
 18565  24FC  150C               	bsf	12,2	;volatile
 18566                           
 18567                           ;LEDs.c: 31: break;
 18568  24FD  0008               	return
 18569  24FE                     l7822:	
 18570                           ;LEDs.c: 32: case 4:
 18571                           
 18572                           
 18573                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 18574  24FE  0021               	movlb	1	; select bank1
 18575  24FF  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18576  2500  0027               	movlb	7	; select bank7
 18577  2501  1C03               	skipc
 18578  2502  118C               	bcf	12,3	;volatile
 18579  2503  1803               	skipnc
 18580  2504  158C               	bsf	12,3	;volatile
 18581                           
 18582                           ;LEDs.c: 34: break;
 18583  2505  0008               	return
 18584  2506                     l7824:	
 18585                           ;LEDs.c: 35: case 5:
 18586                           
 18587                           
 18588                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 18589  2506  0021               	movlb	1	; select bank1
 18590  2507  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18591  2508  0027               	movlb	7	; select bank7
 18592  2509  1C03               	skipc
 18593  250A  120C               	bcf	12,4	;volatile
 18594  250B  1803               	skipnc
 18595  250C  160C               	bsf	12,4	;volatile
 18596                           
 18597                           ;LEDs.c: 39: break;
 18598                           
 18599                           ;LEDs.c: 38: case 6:
 18600                           
 18601                           ;LEDs.c: 37: break;
 18602  250D  0008               	return
 18603  250E                     l828:	
 18604                           ;LEDs.c: 40: case 100:
 18605                           
 18606                           
 18607                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 18608  250E  0027               	movlb	7	; select bank7
 18609  250F  140C               	bsf	12,0	;volatile
 18610                           
 18611                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 18612  2510  148C               	bsf	12,1	;volatile
 18613                           
 18614                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 18615  2511  150C               	bsf	12,2	;volatile
 18616                           
 18617                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 18618  2512  158C               	bsf	12,3	;volatile
 18619                           
 18620                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 18621  2513  160C               	bsf	12,4	;volatile
 18622                           
 18623                           ;LEDs.c: 47: }
 18624                           
 18625                           ;LEDs.c: 46: break;
 18626  2514  0008               	return
 18627  2515                     l7828:	
 18628                           
 18629                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18630                           ; Switch size 1, requested type "space"
 18631                           ; Number of cases is 1, Range of values is 0 to 0
 18632                           ; switch strategies available:
 18633                           ; Name         Instructions Cycles
 18634                           ; simple_byte            4     3 (average)
 18635                           ; direct_byte            8     6 (fixed)
 18636                           ; jumptable            260     6 (fixed)
 18637                           ;	Chosen strategy is simple_byte
 18638  2515  0021               	movlb	1	; select bank1
 18639  2516  0821               	movf	(set_leds_top@x+1)^(0+128),w
 18640  2517  3A00               	xorlw	0	; case 0
 18641  2518  1903               	skipnz
 18642  2519  2D1B               	goto	l9958
 18643  251A  2D32               	goto	l829
 18644  251B                     l9958:	
 18645                           
 18646                           ; Switch size 1, requested type "space"
 18647                           ; Number of cases is 7, Range of values is 1 to 100
 18648                           ; switch strategies available:
 18649                           ; Name         Instructions Cycles
 18650                           ; simple_byte           22    12 (average)
 18651                           ; direct_byte          209     9 (fixed)
 18652                           ; jumptable            263     9 (fixed)
 18653                           ;	Chosen strategy is simple_byte
 18654  251B  0820               	movf	set_leds_top@x^(0+128),w
 18655  251C  3A01               	xorlw	1	; case 1
 18656  251D  1903               	skipnz
 18657  251E  2CE6               	goto	l7816
 18658  251F  3A03               	xorlw	3	; case 2
 18659  2520  1903               	skipnz
 18660  2521  2CEE               	goto	l7818
 18661  2522  3A01               	xorlw	1	; case 3
 18662  2523  1903               	skipnz
 18663  2524  2CF6               	goto	l7820
 18664  2525  3A07               	xorlw	7	; case 4
 18665  2526  1903               	skipnz
 18666  2527  2CFE               	goto	l7822
 18667  2528  3A01               	xorlw	1	; case 5
 18668  2529  1903               	skipnz
 18669  252A  2D06               	goto	l7824
 18670  252B  3A03               	xorlw	3	; case 6
 18671  252C  1903               	skipnz
 18672  252D  2D32               	goto	l829
 18673  252E  3A62               	xorlw	98	; case 100
 18674  252F  1903               	skipnz
 18675  2530  2D0E               	goto	l828
 18676  2531  2D32               	goto	l829
 18677  2532                     l829:	
 18678  2532  0008               	return
 18679  2533                     __end_of_set_leds_top:	
 18680                           
 18681                           	psect	text65
 18682  204E                     __ptext65:	
 18683 ;; *************** function _set_leds_bottom *****************
 18684 ;; Defined at:
 18685 ;;		line 51 in file "LEDs.c"
 18686 ;; Parameters:    Size  Location     Type
 18687 ;;  x               2    0[BANK1 ] int 
 18688 ;; Auto vars:     Size  Location     Type
 18689 ;;		None
 18690 ;; Return value:  Size  Location     Type
 18691 ;;                  1    wreg      void 
 18692 ;; Registers used:
 18693 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 18694 ;; Tracked objects:
 18695 ;;		On entry : 0/0
 18696 ;;		On exit  : 0/0
 18697 ;;		Unchanged: 0/0
 18698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18699 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18700 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18702 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18703 ;;Total ram usage:        2 bytes
 18704 ;; Hardware stack levels used:    1
 18705 ;; Hardware stack levels required when called:    3
 18706 ;; This function calls:
 18707 ;;		Nothing
 18708 ;; This function is called by:
 18709 ;;		_ReadSavedSettings
 18710 ;;		_ring_tactiles
 18711 ;;		_solidring_tactiles
 18712 ;;		_read_bottom_tactile
 18713 ;;		_setPresetDisplay
 18714 ;;		_resetRingLEDs
 18715 ;;		_setExpressionDisplay
 18716 ;;		_star_tactiles
 18717 ;; This function uses a non-reentrant model
 18718 ;;
 18719                           
 18720                           
 18721                           ;psect for function _set_leds_bottom
 18722  204E                     _set_leds_bottom:	
 18723                           
 18724                           ;LEDs.c: 52: LATDbits.LATD0 = 0;
 18725                           
 18726                           ;incstack = 0
 18727                           ; Regs used in _set_leds_bottom: [wreg-fsr0h+status,2+status,0]
 18728  204E  0022               	movlb	2	; select bank2
 18729  204F  100F               	bcf	15,0	;volatile
 18730                           
 18731                           ;LEDs.c: 53: LATDbits.LATD1 = 0;
 18732  2050  108F               	bcf	15,1	;volatile
 18733                           
 18734                           ;LEDs.c: 54: LATDbits.LATD2 = 0;
 18735  2051  110F               	bcf	15,2	;volatile
 18736                           
 18737                           ;LEDs.c: 55: LATDbits.LATD3 = 0;
 18738  2052  118F               	bcf	15,3	;volatile
 18739                           
 18740                           ;LEDs.c: 56: LATDbits.LATD4 = 0;
 18741  2053  120F               	bcf	15,4	;volatile
 18742                           
 18743                           ;LEDs.c: 57: switch (x) {
 18744  2054  286B               	goto	l7844
 18745  2055                     l833:	
 18746                           ;LEDs.c: 58: case 1:
 18747                           
 18748                           
 18749                           ;LEDs.c: 59: LATDbits.LATD0 = 1;
 18750  2055  0022               	movlb	2	; select bank2
 18751  2056  140F               	bsf	15,0	;volatile
 18752                           
 18753                           ;LEDs.c: 60: break;
 18754  2057  0008               	return
 18755  2058                     l835:	
 18756                           ;LEDs.c: 61: case 2:
 18757                           
 18758                           
 18759                           ;LEDs.c: 62: LATDbits.LATD1 = 1;
 18760  2058  0022               	movlb	2	; select bank2
 18761  2059  148F               	bsf	15,1	;volatile
 18762                           
 18763                           ;LEDs.c: 63: break;
 18764  205A  0008               	return
 18765  205B                     l836:	
 18766                           ;LEDs.c: 64: case 3:
 18767                           
 18768                           
 18769                           ;LEDs.c: 65: LATDbits.LATD2 = 1;
 18770  205B  0022               	movlb	2	; select bank2
 18771  205C  150F               	bsf	15,2	;volatile
 18772                           
 18773                           ;LEDs.c: 66: break;
 18774  205D  0008               	return
 18775  205E                     l837:	
 18776                           ;LEDs.c: 67: case 4:
 18777                           
 18778                           
 18779                           ;LEDs.c: 68: LATDbits.LATD3 = 1;
 18780  205E  0022               	movlb	2	; select bank2
 18781  205F  158F               	bsf	15,3	;volatile
 18782                           
 18783                           ;LEDs.c: 69: break;
 18784  2060  0008               	return
 18785  2061                     l838:	
 18786                           ;LEDs.c: 70: case 5:
 18787                           
 18788                           
 18789                           ;LEDs.c: 71: LATDbits.LATD4 = 1;
 18790  2061  0022               	movlb	2	; select bank2
 18791  2062  160F               	bsf	15,4	;volatile
 18792                           
 18793                           ;LEDs.c: 74: break;
 18794                           
 18795                           ;LEDs.c: 73: case 6:
 18796                           
 18797                           ;LEDs.c: 72: break;
 18798  2063  0008               	return
 18799  2064                     l840:	
 18800                           ;LEDs.c: 75: case 100:
 18801                           
 18802                           
 18803                           ;LEDs.c: 76: LATDbits.LATD0 = 1;
 18804  2064  0022               	movlb	2	; select bank2
 18805  2065  140F               	bsf	15,0	;volatile
 18806                           
 18807                           ;LEDs.c: 77: LATDbits.LATD1 = 1;
 18808  2066  148F               	bsf	15,1	;volatile
 18809                           
 18810                           ;LEDs.c: 78: LATDbits.LATD2 = 1;
 18811  2067  150F               	bsf	15,2	;volatile
 18812                           
 18813                           ;LEDs.c: 79: LATDbits.LATD3 = 1;
 18814  2068  158F               	bsf	15,3	;volatile
 18815                           
 18816                           ;LEDs.c: 80: LATDbits.LATD4 = 1;
 18817  2069  160F               	bsf	15,4	;volatile
 18818                           
 18819                           ;LEDs.c: 82: }
 18820                           
 18821                           ;LEDs.c: 81: break;
 18822  206A  0008               	return
 18823  206B                     l7844:	
 18824                           
 18825                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18826                           ; Switch size 1, requested type "space"
 18827                           ; Number of cases is 1, Range of values is 0 to 0
 18828                           ; switch strategies available:
 18829                           ; Name         Instructions Cycles
 18830                           ; simple_byte            4     3 (average)
 18831                           ; direct_byte            8     6 (fixed)
 18832                           ; jumptable            260     6 (fixed)
 18833                           ;	Chosen strategy is simple_byte
 18834  206B  0021               	movlb	1	; select bank1
 18835  206C  0821               	movf	(set_leds_bottom@x+1)^(0+128),w
 18836  206D  3A00               	xorlw	0	; case 0
 18837  206E  1903               	skipnz
 18838  206F  2871               	goto	l9960
 18839  2070  2888               	goto	l841
 18840  2071                     l9960:	
 18841                           
 18842                           ; Switch size 1, requested type "space"
 18843                           ; Number of cases is 7, Range of values is 1 to 100
 18844                           ; switch strategies available:
 18845                           ; Name         Instructions Cycles
 18846                           ; simple_byte           22    12 (average)
 18847                           ; direct_byte          209     9 (fixed)
 18848                           ; jumptable            263     9 (fixed)
 18849                           ;	Chosen strategy is simple_byte
 18850  2071  0820               	movf	set_leds_bottom@x^(0+128),w
 18851  2072  3A01               	xorlw	1	; case 1
 18852  2073  1903               	skipnz
 18853  2074  2855               	goto	l833
 18854  2075  3A03               	xorlw	3	; case 2
 18855  2076  1903               	skipnz
 18856  2077  2858               	goto	l835
 18857  2078  3A01               	xorlw	1	; case 3
 18858  2079  1903               	skipnz
 18859  207A  285B               	goto	l836
 18860  207B  3A07               	xorlw	7	; case 4
 18861  207C  1903               	skipnz
 18862  207D  285E               	goto	l837
 18863  207E  3A01               	xorlw	1	; case 5
 18864  207F  1903               	skipnz
 18865  2080  2861               	goto	l838
 18866  2081  3A03               	xorlw	3	; case 6
 18867  2082  1903               	skipnz
 18868  2083  2888               	goto	l841
 18869  2084  3A62               	xorlw	98	; case 100
 18870  2085  1903               	skipnz
 18871  2086  2864               	goto	l840
 18872  2087  2888               	goto	l841
 18873  2088                     l841:	
 18874  2088  0008               	return
 18875  2089                     __end_of_set_leds_bottom:	
 18876                           
 18877                           	psect	text66
 18878  2DCF                     __ptext66:	
 18879 ;; *************** function _FLASH_ReadWord *****************
 18880 ;; Defined at:
 18881 ;;		line 58 in file "memory.c"
 18882 ;; Parameters:    Size  Location     Type
 18883 ;;  flashAddr       2    0[BANK1 ] unsigned int 
 18884 ;; Auto vars:     Size  Location     Type
 18885 ;;  GIEBitValue     1    2[BANK1 ] unsigned char 
 18886 ;; Return value:  Size  Location     Type
 18887 ;;                  2    0[BANK1 ] unsigned int 
 18888 ;; Registers used:
 18889 ;;		wreg, status,2, status,0
 18890 ;; Tracked objects:
 18891 ;;		On entry : 0/0
 18892 ;;		On exit  : 0/0
 18893 ;;		Unchanged: 0/0
 18894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18895 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18896 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18898 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18899 ;;Total ram usage:        3 bytes
 18900 ;; Hardware stack levels used:    1
 18901 ;; Hardware stack levels required when called:    3
 18902 ;; This function calls:
 18903 ;;		Nothing
 18904 ;; This function is called by:
 18905 ;;		_ReadSavedSettings
 18906 ;;		_FLASH_WriteWord
 18907 ;; This function uses a non-reentrant model
 18908 ;;
 18909                           
 18910                           
 18911                           ;psect for function _FLASH_ReadWord
 18912  2DCF                     _FLASH_ReadWord:	
 18913                           
 18914                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
 18915                           
 18916                           ;incstack = 0
 18917                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
 18918  2DCF  3000               	movlw	0
 18919  2DD0  1B8B               	btfsc	11,7	;volatile
 18920  2DD1  3001               	movlw	1
 18921  2DD2  0021               	movlb	1	; select bank1
 18922  2DD3  00A2               	movwf	FLASH_ReadWord@GIEBitValue^(0+128)
 18923                           
 18924                           ;memory.c: 61: INTCONbits.GIE = 0;
 18925  2DD4  138B               	bcf	11,7	;volatile
 18926                           
 18927                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
 18928  2DD5  0820               	movf	FLASH_ReadWord@flashAddr^(0+128),w
 18929  2DD6  0023               	movlb	3	; select bank3
 18930  2DD7  0091               	movwf	17	;volatile
 18931                           
 18932                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
 18933  2DD8  0021               	movlb	1	; select bank1
 18934  2DD9  0821               	movf	(FLASH_ReadWord@flashAddr+1)^(0+128),w
 18935  2DDA  0023               	movlb	3	; select bank3
 18936  2DDB  0092               	movwf	18	;volatile
 18937                           
 18938                           ;memory.c: 65: PMCON1bits.CFGS = 0;
 18939  2DDC  1315               	bcf	21,6	;volatile
 18940                           
 18941                           ;memory.c: 66: PMCON1bits.RD = 1;
 18942  2DDD  1415               	bsf	21,0	;volatile
 18943                           
 18944                           ;memory.c: 67: __nop();
 18945  2DDE  0000               	nop
 18946                           
 18947                           ;memory.c: 68: __nop();
 18948  2DDF  0000               	nop
 18949                           
 18950                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
 18951  2DE0  0021               	movlb	1	; select bank1
 18952  2DE1  0C22               	rrf	FLASH_ReadWord@GIEBitValue^(0+128),w
 18953  2DE2  1C03               	skipc
 18954  2DE3  138B               	bcf	11,7	;volatile
 18955  2DE4  1803               	skipnc
 18956  2DE5  178B               	bsf	11,7	;volatile
 18957                           
 18958                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
 18959  2DE6  0023               	movlb	3	; select bank3
 18960  2DE7  0814               	movf	20,w	;volatile
 18961  2DE8  0021               	movlb	1	; select bank1
 18962  2DE9  00A1               	movwf	(?_FLASH_ReadWord+1)^(0+128)
 18963  2DEA  0023               	movlb	3	; select bank3
 18964  2DEB  0813               	movf	19,w	;volatile
 18965  2DEC  0021               	movlb	1	; select bank1
 18966  2DED  00A0               	movwf	?_FLASH_ReadWord^(0+128)
 18967  2DEE  0008               	return
 18968  2DEF                     __end_of_FLASH_ReadWord:	
 18969                           
 18970                           	psect	text67
 18971  0802                     __ptext67:	
 18972 ;; *************** function _InitializeTaps *****************
 18973 ;; Defined at:
 18974 ;;		line 246 in file "user.c"
 18975 ;; Parameters:    Size  Location     Type
 18976 ;;		None
 18977 ;; Auto vars:     Size  Location     Type
 18978 ;;  itap            2    1[BANK1 ] int 
 18979 ;; Return value:  Size  Location     Type
 18980 ;;                  1    wreg      void 
 18981 ;; Registers used:
 18982 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18983 ;; Tracked objects:
 18984 ;;		On entry : 0/0
 18985 ;;		On exit  : 0/0
 18986 ;;		Unchanged: 0/0
 18987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18989 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18990 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18991 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18992 ;;Total ram usage:        3 bytes
 18993 ;; Hardware stack levels used:    1
 18994 ;; Hardware stack levels required when called:    3
 18995 ;; This function calls:
 18996 ;;		Nothing
 18997 ;; This function is called by:
 18998 ;;		_main
 18999 ;; This function uses a non-reentrant model
 19000 ;;
 19001                           
 19002                           
 19003                           ;psect for function _InitializeTaps
 19004  0802                     _InitializeTaps:	
 19005                           
 19006                           ;user.c: 247: for (int itap = 0; itap < 12; itap++) {
 19007                           
 19008                           ;incstack = 0
 19009                           ; Regs used in _InitializeTaps: [wreg+fsr1l+fsr1h+status,2+status,0]
 19010  0802  0021               	movlb	1	; select bank1
 19011  0803  01A1               	clrf	InitializeTaps@itap^(0+128)
 19012  0804  01A2               	clrf	(InitializeTaps@itap+1)^(0+128)
 19013  0805                     L25:	
 19014  0805  0822               	movf	(InitializeTaps@itap+1)^(0+128),w
 19015  0806  3A80               	xorlw	128
 19016  0807  00A0               	movwf	??_InitializeTaps^(0+128)
 19017  0808  3080               	movlw	128
 19018  0809  0220               	subwf	??_InitializeTaps^(0+128),w
 19019  080A  1D03               	skipz
 19020  080B  280E               	goto	u9415
 19021  080C  300C               	movlw	12
 19022  080D  0221               	subwf	InitializeTaps@itap^(0+128),w
 19023  080E                     u9415:	
 19024  080E  1803               	btfsc	3,0
 19025  080F  0008               	return
 19026                           
 19027                           ;user.c: 248: tap[itap] = 0;
 19028  0810  0021               	movlb	1	; select bank1
 19029  0811  0821               	movf	InitializeTaps@itap^(0+128),w
 19030  0812  00A0               	movwf	??_InitializeTaps^(0+128)
 19031  0813  3001               	movlw	1
 19032  0814                     u9425:	
 19033  0814  35A0               	lslf	??_InitializeTaps^(0+128),f
 19034  0815  3EFF               	addlw	-1
 19035  0816  1D03               	skipz
 19036  0817  2814               	goto	u9425
 19037  0818  3520               	lslf	??_InitializeTaps^(0+128),w
 19038  0819  3EA0               	addlw	(low (_tap| (0+512)))& (0+255)
 19039  081A  0086               	movwf	6
 19040  081B  3002               	movlw	2	; select bank5/6
 19041  081C  0087               	movwf	7
 19042  081D  3000               	movlw	0
 19043  081E  3FC0               	movwi [0]fsr1
 19044  081F  3000               	movlw	0
 19045  0820  3FC1               	movwi [1]fsr1
 19046  0821  3FC2               	movwi [2]fsr1
 19047  0822  3FC3               	movwi [3]fsr1
 19048  0823  3001               	movlw	1
 19049  0824  07A1               	addwf	InitializeTaps@itap^(0+128),f
 19050  0825  3000               	movlw	0
 19051  0826  3DA2               	addwfc	(InitializeTaps@itap+1)^(0+128),f
 19052  0827  2805               	goto	L25
 19053  0828                     __end_of_InitializeTaps:	
 19054                           
 19055                           	psect	text68
 19056  2F38                     __ptext68:	
 19057 ;; *************** function _InitApp *****************
 19058 ;; Defined at:
 19059 ;;		line 23 in file "user.c"
 19060 ;; Parameters:    Size  Location     Type
 19061 ;;		None
 19062 ;; Auto vars:     Size  Location     Type
 19063 ;;		None
 19064 ;; Return value:  Size  Location     Type
 19065 ;;                  1    wreg      void 
 19066 ;; Registers used:
 19067 ;;		wreg, status,2, status,0, pclath, cstack
 19068 ;; Tracked objects:
 19069 ;;		On entry : 0/0
 19070 ;;		On exit  : 0/0
 19071 ;;		Unchanged: 0/0
 19072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19074 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19076 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19077 ;;Total ram usage:        0 bytes
 19078 ;; Hardware stack levels used:    1
 19079 ;; Hardware stack levels required when called:    5
 19080 ;; This function calls:
 19081 ;;		_init_adc
 19082 ;;		_init_pwm
 19083 ;; This function is called by:
 19084 ;;		_main
 19085 ;; This function uses a non-reentrant model
 19086 ;;
 19087                           
 19088                           
 19089                           ;psect for function _InitApp
 19090  2F38                     _InitApp:	
 19091                           
 19092                           ;user.c: 24: TRISBbits.TRISB0 = 0;
 19093                           
 19094                           ;incstack = 0
 19095                           ; Regs used in _InitApp: [wreg+status,2+status,0+pclath+cstack]
 19096  2F38  0021               	movlb	1	; select bank1
 19097  2F39  100D               	bcf	13,0	;volatile
 19098                           
 19099                           ;user.c: 25: TRISBbits.TRISB1 = 0;
 19100  2F3A  108D               	bcf	13,1	;volatile
 19101                           
 19102                           ;user.c: 26: TRISBbits.TRISB2 = 0;
 19103  2F3B  110D               	bcf	13,2	;volatile
 19104                           
 19105                           ;user.c: 27: TRISBbits.TRISB3 = 0;
 19106  2F3C  118D               	bcf	13,3	;volatile
 19107                           
 19108                           ;user.c: 28: TRISBbits.TRISB4 = 0;
 19109  2F3D  120D               	bcf	13,4	;volatile
 19110                           
 19111                           ;user.c: 29: TRISBbits.TRISB5 = 0;
 19112  2F3E  128D               	bcf	13,5	;volatile
 19113                           
 19114                           ;user.c: 31: TRISCbits.TRISC0 = 1;
 19115  2F3F  140E               	bsf	14,0	;volatile
 19116                           
 19117                           ;user.c: 32: TRISCbits.TRISC4 = 0;
 19118  2F40  120E               	bcf	14,4	;volatile
 19119                           
 19120                           ;user.c: 33: TRISCbits.TRISC5 = 0;
 19121  2F41  128E               	bcf	14,5	;volatile
 19122                           
 19123                           ;user.c: 36: TRISDbits.TRISD0 = 0;
 19124  2F42  100F               	bcf	15,0	;volatile
 19125                           
 19126                           ;user.c: 37: TRISDbits.TRISD1 = 0;
 19127  2F43  108F               	bcf	15,1	;volatile
 19128                           
 19129                           ;user.c: 38: TRISDbits.TRISD2 = 0;
 19130  2F44  110F               	bcf	15,2	;volatile
 19131                           
 19132                           ;user.c: 39: TRISDbits.TRISD3 = 0;
 19133  2F45  118F               	bcf	15,3	;volatile
 19134                           
 19135                           ;user.c: 40: TRISDbits.TRISD4 = 0;
 19136  2F46  120F               	bcf	15,4	;volatile
 19137                           
 19138                           ;user.c: 41: TRISDbits.TRISD5 = 1;
 19139  2F47  168F               	bsf	15,5	;volatile
 19140                           
 19141                           ;user.c: 42: TRISDbits.TRISD6 = 1;
 19142  2F48  170F               	bsf	15,6	;volatile
 19143                           
 19144                           ;user.c: 43: TRISDbits.TRISD7 = 1;
 19145  2F49  178F               	bsf	15,7	;volatile
 19146                           
 19147                           ;user.c: 49: TRISEbits.TRISE0 = 1;
 19148  2F4A  1410               	bsf	16,0	;volatile
 19149                           
 19150                           ;user.c: 50: TRISEbits.TRISE1 = 1;
 19151  2F4B  1490               	bsf	16,1	;volatile
 19152                           
 19153                           ;user.c: 51: ANSELEbits.ANSE0 = 0;
 19154  2F4C  0023               	movlb	3	; select bank3
 19155  2F4D  1010               	bcf	16,0	;volatile
 19156                           
 19157                           ;user.c: 52: ANSELEbits.ANSE1 = 0;
 19158  2F4E  1090               	bcf	16,1	;volatile
 19159                           
 19160                           ;user.c: 53: PORTEbits.RE0 = 0;
 19161  2F4F  0020               	movlb	0	; select bank0
 19162  2F50  1010               	bcf	16,0	;volatile
 19163                           
 19164                           ;user.c: 54: PORTEbits.RE1 = 0;
 19165  2F51  1090               	bcf	16,1	;volatile
 19166                           
 19167                           ;user.c: 56: TRISFbits.TRISF0 = 0;
 19168  2F52  0026               	movlb	6	; select bank6
 19169  2F53  100C               	bcf	12,0	;volatile
 19170                           
 19171                           ;user.c: 57: TRISFbits.TRISF1 = 0;
 19172  2F54  108C               	bcf	12,1	;volatile
 19173                           
 19174                           ;user.c: 58: TRISFbits.TRISF2 = 0;
 19175  2F55  110C               	bcf	12,2	;volatile
 19176                           
 19177                           ;user.c: 59: TRISFbits.TRISF3 = 0;
 19178  2F56  118C               	bcf	12,3	;volatile
 19179                           
 19180                           ;user.c: 60: TRISFbits.TRISF4 = 0;
 19181  2F57  120C               	bcf	12,4	;volatile
 19182                           
 19183                           ;user.c: 61: TRISFbits.TRISF5 = 0;
 19184  2F58  128C               	bcf	12,5	;volatile
 19185                           
 19186                           ;user.c: 62: TRISFbits.TRISF6 = 1;
 19187  2F59  170C               	bsf	12,6	;volatile
 19188                           
 19189                           ;user.c: 63: ANSELFbits.ANSF6 = 0;
 19190  2F5A  0028               	movlb	8	; select bank8
 19191  2F5B  130C               	bcf	12,6	;volatile
 19192                           
 19193                           ;user.c: 65: TRISGbits.TRISG1 = 0;
 19194  2F5C  0026               	movlb	6	; select bank6
 19195  2F5D  108D               	bcf	13,1	;volatile
 19196                           
 19197                           ;user.c: 66: TRISGbits.TRISG2 = 0;
 19198  2F5E  110D               	bcf	13,2	;volatile
 19199                           
 19200                           ;user.c: 68: init_adc();
 19201  2F5F  31AC  24BE  31AF   	fcall	_init_adc
 19202                           
 19203                           ;user.c: 69: init_pwm();
 19204  2F62  31A2  223E         	fcall	_init_pwm
 19205                           
 19206                           ;user.c: 71: INTCONbits.GIE = 0b1;
 19207  2F64  178B               	bsf	11,7	;volatile
 19208                           
 19209                           ;user.c: 72: INTCONbits.TMR0IE = 0b1;
 19210  2F65  168B               	bsf	11,5	;volatile
 19211                           
 19212                           ;user.c: 73: INTCONbits.TMR0IF = 0b0;
 19213  2F66  110B               	bcf	11,2	;volatile
 19214  2F67  0008               	return
 19215  2F68                     __end_of_InitApp:	
 19216                           
 19217                           	psect	text69
 19218  223E                     __ptext69:	
 19219 ;; *************** function _init_pwm *****************
 19220 ;; Defined at:
 19221 ;;		line 129 in file "user.c"
 19222 ;; Parameters:    Size  Location     Type
 19223 ;;		None
 19224 ;; Auto vars:     Size  Location     Type
 19225 ;;		None
 19226 ;; Return value:  Size  Location     Type
 19227 ;;                  1    wreg      void 
 19228 ;; Registers used:
 19229 ;;		wreg, status,2, status,0, pclath, cstack
 19230 ;; Tracked objects:
 19231 ;;		On entry : 0/0
 19232 ;;		On exit  : 0/0
 19233 ;;		Unchanged: 0/0
 19234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19236 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19238 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19239 ;;Total ram usage:        0 bytes
 19240 ;; Hardware stack levels used:    1
 19241 ;; Hardware stack levels required when called:    4
 19242 ;; This function calls:
 19243 ;;		_init_timer0
 19244 ;;		_init_timer2
 19245 ;; This function is called by:
 19246 ;;		_InitApp
 19247 ;; This function uses a non-reentrant model
 19248 ;;
 19249                           
 19250                           
 19251                           ;psect for function _init_pwm
 19252  223E                     _init_pwm:	
 19253                           
 19254                           ;user.c: 130: APFCONbits.CCP2SEL = 0;
 19255                           
 19256                           ;incstack = 0
 19257                           ; Regs used in _init_pwm: [wreg+status,2+status,0+pclath+cstack]
 19258  223E  0022               	movlb	2	; select bank2
 19259  223F  101D               	bcf	29,0	;volatile
 19260                           
 19261                           ;user.c: 131: TRISCbits.TRISC2 = 0;
 19262  2240  0021               	movlb	1	; select bank1
 19263  2241  110E               	bcf	14,2	;volatile
 19264                           
 19265                           ;user.c: 132: TRISCbits.TRISC1 = 0;
 19266  2242  108E               	bcf	14,1	;volatile
 19267                           
 19268                           ;user.c: 133: TRISGbits.TRISG0 = 0;
 19269  2243  0026               	movlb	6	; select bank6
 19270  2244  100D               	bcf	13,0	;volatile
 19271                           
 19272                           ;user.c: 134: TRISGbits.TRISG3 = 0;
 19273  2245  118D               	bcf	13,3	;volatile
 19274                           
 19275                           ;user.c: 135: TRISGbits.TRISG4 = 0;
 19276  2246  120D               	bcf	13,4	;volatile
 19277                           
 19278                           ;user.c: 136: TRISEbits.TRISE6 = 0;
 19279  2247  0021               	movlb	1	; select bank1
 19280  2248  1310               	bcf	16,6	;volatile
 19281                           
 19282                           ;user.c: 137: TRISEbits.TRISE5 = 0;
 19283  2249  1290               	bcf	16,5	;volatile
 19284                           
 19285                           ;user.c: 138: TRISEbits.TRISE4 = 0;
 19286  224A  1210               	bcf	16,4	;volatile
 19287                           
 19288                           ;user.c: 139: TRISEbits.TRISE3 = 0;
 19289  224B  1190               	bcf	16,3	;volatile
 19290                           
 19291                           ;user.c: 140: TRISEbits.TRISE2 = 0;
 19292  224C  1110               	bcf	16,2	;volatile
 19293                           
 19294                           ;user.c: 141: CCP1CONbits.CCP1M = 0b1111;
 19295  224D  300F               	movlw	15
 19296  224E  0025               	movlb	5	; select bank5
 19297  224F  0493               	iorwf	19,f	;volatile
 19298                           
 19299                           ;user.c: 142: CCP2CONbits.CCP2M = 0b1111;
 19300  2250  300F               	movlw	15
 19301  2251  049A               	iorwf	26,f	;volatile
 19302                           
 19303                           ;user.c: 143: CCP3CONbits.CCP3M = 0b1111;
 19304  2252  300F               	movlw	15
 19305  2253  0026               	movlb	6	; select bank6
 19306  2254  0493               	iorwf	19,f	;volatile
 19307                           
 19308                           ;user.c: 144: CCP4CONbits.CCP4M = 0b1111;
 19309  2255  300F               	movlw	15
 19310  2256  049A               	iorwf	26,f	;volatile
 19311                           
 19312                           ;user.c: 145: CCP5CONbits.CCP5M = 0b1111;
 19313  2257  300F               	movlw	15
 19314  2258  049E               	iorwf	30,f	;volatile
 19315                           
 19316                           ;user.c: 146: CCP6CONbits.CCP6M = 0b1111;
 19317  2259  300F               	movlw	15
 19318  225A  002C               	movlb	12	; select bank12
 19319  225B  0493               	iorwf	19,f	;volatile
 19320                           
 19321                           ;user.c: 147: CCP7CONbits.CCP7M = 0b1111;
 19322  225C  300F               	movlw	15
 19323  225D  0496               	iorwf	22,f	;volatile
 19324                           
 19325                           ;user.c: 148: CCP8CONbits.CCP8M = 0b1111;
 19326  225E  300F               	movlw	15
 19327  225F  0499               	iorwf	25,f	;volatile
 19328                           
 19329                           ;user.c: 149: CCP9CONbits.CCP9M = 0b1111;
 19330  2260  300F               	movlw	15
 19331  2261  049C               	iorwf	28,f	;volatile
 19332                           
 19333                           ;user.c: 150: CCP10CONbits.CCP10M = 0b1111;
 19334  2262  300F               	movlw	15
 19335  2263  049F               	iorwf	31,f	;volatile
 19336                           
 19337                           ;user.c: 151: CCPTMRS0 = 0b00000000;
 19338  2264  0025               	movlb	5	; select bank5
 19339  2265  019D               	clrf	29	;volatile
 19340                           
 19341                           ;user.c: 152: CCPTMRS1 = 0b00000000;
 19342  2266  019E               	clrf	30	;volatile
 19343                           
 19344                           ;user.c: 153: CCPTMRS2 = 0b00000000;
 19345  2267  019F               	clrf	31	;volatile
 19346                           
 19347                           ;user.c: 154: CCPR1 = 50;
 19348  2268  3000               	movlw	0
 19349  2269  0092               	movwf	18	;volatile
 19350  226A  3032               	movlw	50
 19351  226B  0091               	movwf	17	;volatile
 19352                           
 19353                           ;user.c: 155: CCPR2 = 100;
 19354  226C  3000               	movlw	0
 19355  226D  0099               	movwf	25	;volatile
 19356  226E  3064               	movlw	100
 19357  226F  0098               	movwf	24	;volatile
 19358                           
 19359                           ;user.c: 156: CCPR3 = 150;
 19360  2270  3000               	movlw	0
 19361  2271  0026               	movlb	6	; select bank6
 19362  2272  0092               	movwf	18	;volatile
 19363  2273  3096               	movlw	150
 19364  2274  0091               	movwf	17	;volatile
 19365                           
 19366                           ;user.c: 157: CCPR4 = 200;
 19367  2275  3000               	movlw	0
 19368  2276  0099               	movwf	25	;volatile
 19369  2277  30C8               	movlw	200
 19370  2278  0098               	movwf	24	;volatile
 19371                           
 19372                           ;user.c: 158: init_timer2();
 19373  2279  31AC  24AC  31A2   	fcall	_init_timer2
 19374                           
 19375                           ;user.c: 159: init_timer0();
 19376  227C  3187  27F9         	fcall	_init_timer0
 19377  227E  0008               	return
 19378  227F                     __end_of_init_pwm:	
 19379                           
 19380                           	psect	text70
 19381  2CAC                     __ptext70:	
 19382 ;; *************** function _init_timer2 *****************
 19383 ;; Defined at:
 19384 ;;		line 162 in file "user.c"
 19385 ;; Parameters:    Size  Location     Type
 19386 ;;		None
 19387 ;; Auto vars:     Size  Location     Type
 19388 ;;		None
 19389 ;; Return value:  Size  Location     Type
 19390 ;;                  1    wreg      void 
 19391 ;; Registers used:
 19392 ;;		wreg, status,2, status,0
 19393 ;; Tracked objects:
 19394 ;;		On entry : 0/0
 19395 ;;		On exit  : 0/0
 19396 ;;		Unchanged: 0/0
 19397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19401 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19402 ;;Total ram usage:        0 bytes
 19403 ;; Hardware stack levels used:    1
 19404 ;; Hardware stack levels required when called:    3
 19405 ;; This function calls:
 19406 ;;		Nothing
 19407 ;; This function is called by:
 19408 ;;		_init_pwm
 19409 ;; This function uses a non-reentrant model
 19410 ;;
 19411                           
 19412                           
 19413                           ;psect for function _init_timer2
 19414  2CAC                     _init_timer2:	
 19415                           
 19416                           ;user.c: 163: T2CONbits.T2OUTPS = 0b0000;
 19417                           
 19418                           ;incstack = 0
 19419                           ; Regs used in _init_timer2: [wreg+status,2+status,0]
 19420  2CAC  3087               	movlw	-121
 19421  2CAD  0020               	movlb	0	; select bank0
 19422  2CAE  059C               	andwf	28,f	;volatile
 19423                           
 19424                           ;user.c: 164: T2CONbits.T2CKPS = 0b00;
 19425  2CAF  30FC               	movlw	-4
 19426  2CB0  059C               	andwf	28,f	;volatile
 19427                           
 19428                           ;user.c: 165: PR2 = 0xFF;
 19429  2CB1  30FF               	movlw	255
 19430  2CB2  009B               	movwf	27	;volatile
 19431                           
 19432                           ;user.c: 166: T2CONbits.TMR2ON = 1;
 19433  2CB3  151C               	bsf	28,2	;volatile
 19434  2CB4  0008               	return
 19435  2CB5                     __end_of_init_timer2:	
 19436                           
 19437                           	psect	text71
 19438  07F9                     __ptext71:	
 19439 ;; *************** function _init_timer0 *****************
 19440 ;; Defined at:
 19441 ;;		line 169 in file "user.c"
 19442 ;; Parameters:    Size  Location     Type
 19443 ;;		None
 19444 ;; Auto vars:     Size  Location     Type
 19445 ;;		None
 19446 ;; Return value:  Size  Location     Type
 19447 ;;                  1    wreg      void 
 19448 ;; Registers used:
 19449 ;;		None
 19450 ;; Tracked objects:
 19451 ;;		On entry : 0/0
 19452 ;;		On exit  : 0/0
 19453 ;;		Unchanged: 0/0
 19454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19458 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19459 ;;Total ram usage:        0 bytes
 19460 ;; Hardware stack levels used:    1
 19461 ;; Hardware stack levels required when called:    3
 19462 ;; This function calls:
 19463 ;;		Nothing
 19464 ;; This function is called by:
 19465 ;;		_init_pwm
 19466 ;; This function uses a non-reentrant model
 19467 ;;
 19468                           
 19469                           
 19470                           ;psect for function _init_timer0
 19471  07F9                     _init_timer0:	
 19472                           
 19473                           ;user.c: 170: OPTION_REGbits.TMR0CS = 0b0;
 19474                           
 19475                           ;incstack = 0
 19476                           ; Regs used in _init_timer0: []
 19477  07F9  0021               	movlb	1	; select bank1
 19478  07FA  1295               	bcf	21,5	;volatile
 19479                           
 19480                           ;user.c: 171: OPTION_REGbits.PSA = 0b0;
 19481  07FB  1195               	bcf	21,3	;volatile
 19482                           
 19483                           ;user.c: 172: OPTION_REGbits.PS0 = 0b0;
 19484  07FC  1015               	bcf	21,0	;volatile
 19485                           
 19486                           ;user.c: 173: OPTION_REGbits.PS1 = 0b1;
 19487  07FD  1495               	bsf	21,1	;volatile
 19488                           
 19489                           ;user.c: 174: OPTION_REGbits.PS2 = 0b0;
 19490  07FE  1115               	bcf	21,2	;volatile
 19491  07FF  0008               	return
 19492  0800                     __end_of_init_timer0:	
 19493                           
 19494                           	psect	text72
 19495  2CBE                     __ptext72:	
 19496 ;; *************** function _init_adc *****************
 19497 ;; Defined at:
 19498 ;;		line 115 in file "user.c"
 19499 ;; Parameters:    Size  Location     Type
 19500 ;;		None
 19501 ;; Auto vars:     Size  Location     Type
 19502 ;;		None
 19503 ;; Return value:  Size  Location     Type
 19504 ;;                  1    wreg      void 
 19505 ;; Registers used:
 19506 ;;		wreg, status,2, status,0
 19507 ;; Tracked objects:
 19508 ;;		On entry : 0/0
 19509 ;;		On exit  : 0/0
 19510 ;;		Unchanged: 0/0
 19511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19515 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19516 ;;Total ram usage:        0 bytes
 19517 ;; Hardware stack levels used:    1
 19518 ;; Hardware stack levels required when called:    3
 19519 ;; This function calls:
 19520 ;;		Nothing
 19521 ;; This function is called by:
 19522 ;;		_InitApp
 19523 ;; This function uses a non-reentrant model
 19524 ;;
 19525                           
 19526                           
 19527                           ;psect for function _init_adc
 19528  2CBE                     _init_adc:	
 19529                           
 19530                           ;user.c: 116: ADCON1bits.ADFM = 0b1;
 19531                           
 19532                           ;incstack = 0
 19533                           ; Regs used in _init_adc: [wreg+status,2+status,0]
 19534  2CBE  0021               	movlb	1	; select bank1
 19535  2CBF  179E               	bsf	30,7	;volatile
 19536                           
 19537                           ;user.c: 117: ADCON1bits.ADCS = 0b110;
 19538  2CC0  081E               	movf	30,w	;volatile
 19539  2CC1  398F               	andlw	-113
 19540  2CC2  3860               	iorlw	96
 19541  2CC3  009E               	movwf	30	;volatile
 19542                           
 19543                           ;user.c: 118: ADCON1bits.ADPREF = 0b00;
 19544  2CC4  30FC               	movlw	-4
 19545  2CC5  059E               	andwf	30,f	;volatile
 19546                           
 19547                           ;user.c: 119: ADCON0bits.ADON = 0b1;
 19548  2CC6  141D               	bsf	29,0	;volatile
 19549  2CC7  0008               	return
 19550  2CC8                     __end_of_init_adc:	
 19551                           
 19552                           	psect	text73
 19553  2CA0                     __ptext73:	
 19554 ;; *************** function _ConfigureOscillator *****************
 19555 ;; Defined at:
 19556 ;;		line 18 in file "system.c"
 19557 ;; Parameters:    Size  Location     Type
 19558 ;;		None
 19559 ;; Auto vars:     Size  Location     Type
 19560 ;;		None
 19561 ;; Return value:  Size  Location     Type
 19562 ;;                  1    wreg      void 
 19563 ;; Registers used:
 19564 ;;		wreg, status,2, status,0
 19565 ;; Tracked objects:
 19566 ;;		On entry : 0/0
 19567 ;;		On exit  : 0/0
 19568 ;;		Unchanged: 0/0
 19569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19573 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19574 ;;Total ram usage:        0 bytes
 19575 ;; Hardware stack levels used:    1
 19576 ;; Hardware stack levels required when called:    3
 19577 ;; This function calls:
 19578 ;;		Nothing
 19579 ;; This function is called by:
 19580 ;;		_main
 19581 ;; This function uses a non-reentrant model
 19582 ;;
 19583                           
 19584                           
 19585                           ;psect for function _ConfigureOscillator
 19586  2CA0                     _ConfigureOscillator:	
 19587                           
 19588                           ;system.c: 20: OSCCONbits.SCS = 0b00;
 19589                           
 19590                           ;incstack = 0
 19591                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
 19592  2CA0  30FC               	movlw	-4
 19593  2CA1  0021               	movlb	1	; select bank1
 19594  2CA2  0599               	andwf	25,f	;volatile
 19595  2CA3  0008               	return
 19596  2CA4                     __end_of_ConfigureOscillator:	
 19597                           
 19598                           	psect	intentry
 19599  0004                     __pintentry:	
 19600 ;; *************** function _isr *****************
 19601 ;; Defined at:
 19602 ;;		line 28 in file "interrupts.c"
 19603 ;; Parameters:    Size  Location     Type
 19604 ;;		None
 19605 ;; Auto vars:     Size  Location     Type
 19606 ;;  subDiv          1   13[COMMON] unsigned char 
 19607 ;; Return value:  Size  Location     Type
 19608 ;;                  1    wreg      void 
 19609 ;; Registers used:
 19610 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19611 ;; Tracked objects:
 19612 ;;		On entry : 0/0
 19613 ;;		On exit  : 0/0
 19614 ;;		Unchanged: 0/0
 19615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19617 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19618 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19619 ;;      Totals:         1       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19620 ;;Total ram usage:        7 bytes
 19621 ;; Hardware stack levels used:    1
 19622 ;; Hardware stack levels required when called:    2
 19623 ;; This function calls:
 19624 ;;		_modulation
 19625 ;;		i1___awdiv
 19626 ;;		i1_getModulationSubdivision
 19627 ;;		i1_set_leds_top
 19628 ;; This function is called by:
 19629 ;;		Interrupt level 1
 19630 ;; This function uses a non-reentrant model
 19631 ;;
 19632                           
 19633  0004                     _isr:	
 19634                           
 19635                           ;incstack = 0
 19636                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19637  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 19638  0005  3180               	pagesel	$
 19639  0006  0020               	movlb	0	; select bank0
 19640  0007  087F               	movf	127,w
 19641  0008  00BF               	movwf	??_isr+5
 19642                           
 19643                           ;interrupts.c: 31: extern char isInitialized;
 19644                           ;interrupts.c: 32: extern volatile long timer;
 19645                           ;interrupts.c: 33: extern volatile long sub_timer;
 19646                           ;interrupts.c: 34: extern volatile long tap_timer;
 19647                           ;interrupts.c: 35: extern signed int adjusted_pot_value;
 19648                           ;interrupts.c: 36: extern int mod_delay_time;
 19649                           ;interrupts.c: 40: extern int top_push_state;
 19650                           ;interrupts.c: 41: extern uint8_t longBypass_start;
 19651                           ;interrupts.c: 42: extern volatile long mod_timer;
 19652                           ;interrupts.c: 43: extern volatile long delay_time;
 19653                           ;interrupts.c: 46: if (INTCONbits.TMR0IF == 1) {
 19654  0009  1D0B               	btfss	11,2	;volatile
 19655  000A  2AEE               	goto	i1l139
 19656                           
 19657                           ;interrupts.c: 47: if (isInitialized == 0) {
 19658  000B  0023               	movlb	3	; select bank3
 19659  000C  0842               	movf	_isInitialized^(0+384),w
 19660  000D  1903               	btfsc	3,2
 19661  000E  2AED               	goto	i1l7064
 19662                           
 19663                           ;interrupts.c: 52: }
 19664                           ;interrupts.c: 63: if (timer == 0) {
 19665                           
 19666                           ;interrupts.c: 51: return;
 19667                           
 19668                           ;interrupts.c: 50: INTCONbits.TMR0IF = 0;
 19669  000F  0020               	movlb	0	; select bank0
 19670  0010  0858               	movf	_timer+3,w	;volatile
 19671  0011  0457               	iorwf	_timer+2,w	;volatile
 19672  0012  0456               	iorwf	_timer+1,w	;volatile
 19673  0013  0455               	iorwf	_timer,w	;volatile
 19674  0014  1D03               	skipz
 19675  0015  281B               	goto	i1l140
 19676                           
 19677                           ;interrupts.c: 64: tmpModDelay = mod_delay_time;
 19678  0016  0023               	movlb	3	; select bank3
 19679  0017  085A               	movf	(_mod_delay_time+1)^(0+384),w
 19680  0018  00BF               	movwf	(_tmpModDelay+1)^(0+384)
 19681  0019  0859               	movf	_mod_delay_time^(0+384),w
 19682  001A  00BE               	movwf	_tmpModDelay^(0+384)
 19683  001B                     i1l140:	
 19684                           
 19685                           ;interrupts.c: 65: }
 19686                           ;interrupts.c: 70: timer = timer + 1;
 19687  001B  3001               	movlw	1
 19688  001C  0020               	movlb	0	; select bank0
 19689  001D  00BA               	movwf	??_isr
 19690  001E  3000               	movlw	0
 19691  001F  00BB               	movwf	??_isr+1
 19692  0020  3000               	movlw	0
 19693  0021  00BC               	movwf	??_isr+2
 19694  0022  3000               	movlw	0
 19695  0023  00BD               	movwf	??_isr+3
 19696  0024  0855               	movf	_timer,w	;volatile
 19697  0025  07BA               	addwf	??_isr,f
 19698  0026  0856               	movf	_timer+1,w	;volatile
 19699  0027  3DBB               	addwfc	??_isr+1,f
 19700  0028  0857               	movf	_timer+2,w	;volatile
 19701  0029  3DBC               	addwfc	??_isr+2,f
 19702  002A  0858               	movf	_timer+3,w	;volatile
 19703  002B  3DBD               	addwfc	??_isr+3,f
 19704  002C  083D               	movf	??_isr+3,w
 19705  002D  00D8               	movwf	_timer+3	;volatile
 19706  002E  083C               	movf	??_isr+2,w
 19707  002F  00D7               	movwf	_timer+2	;volatile
 19708  0030  083B               	movf	??_isr+1,w
 19709  0031  00D6               	movwf	_timer+1	;volatile
 19710  0032  083A               	movf	??_isr,w
 19711  0033  00D5               	movwf	_timer	;volatile
 19712                           
 19713                           ;interrupts.c: 71: sub_timer = sub_timer + 1;
 19714  0034  3001               	movlw	1
 19715  0035  00BA               	movwf	??_isr
 19716  0036  3000               	movlw	0
 19717  0037  00BB               	movwf	??_isr+1
 19718  0038  3000               	movlw	0
 19719  0039  00BC               	movwf	??_isr+2
 19720  003A  3000               	movlw	0
 19721  003B  00BD               	movwf	??_isr+3
 19722  003C  0023               	movlb	3	; select bank3
 19723  003D  0828               	movf	_sub_timer^(0+384),w	;volatile
 19724  003E  0020               	movlb	0	; select bank0
 19725  003F  07BA               	addwf	??_isr,f
 19726  0040  0023               	movlb	3	; select bank3
 19727  0041  0829               	movf	(_sub_timer+1)^(0+384),w	;volatile
 19728  0042  0020               	movlb	0	; select bank0
 19729  0043  3DBB               	addwfc	??_isr+1,f
 19730  0044  0023               	movlb	3	; select bank3
 19731  0045  082A               	movf	(_sub_timer+2)^(0+384),w	;volatile
 19732  0046  0020               	movlb	0	; select bank0
 19733  0047  3DBC               	addwfc	??_isr+2,f
 19734  0048  0023               	movlb	3	; select bank3
 19735  0049  082B               	movf	(_sub_timer+3)^(0+384),w	;volatile
 19736  004A  0020               	movlb	0	; select bank0
 19737  004B  3DBD               	addwfc	??_isr+3,f
 19738  004C  083D               	movf	??_isr+3,w
 19739  004D  0023               	movlb	3	; select bank3
 19740  004E  00AB               	movwf	(_sub_timer+3)^(0+384)	;volatile
 19741  004F  0020               	movlb	0	; select bank0
 19742  0050  083C               	movf	??_isr+2,w
 19743  0051  0023               	movlb	3	; select bank3
 19744  0052  00AA               	movwf	(_sub_timer+2)^(0+384)	;volatile
 19745  0053  0020               	movlb	0	; select bank0
 19746  0054  083B               	movf	??_isr+1,w
 19747  0055  0023               	movlb	3	; select bank3
 19748  0056  00A9               	movwf	(_sub_timer+1)^(0+384)	;volatile
 19749  0057  0020               	movlb	0	; select bank0
 19750  0058  083A               	movf	??_isr,w
 19751  0059  0023               	movlb	3	; select bank3
 19752  005A  00A8               	movwf	_sub_timer^(0+384)	;volatile
 19753                           
 19754                           ;interrupts.c: 72: tap_timer = tap_timer + 1;
 19755  005B  3001               	movlw	1
 19756  005C  0020               	movlb	0	; select bank0
 19757  005D  00BA               	movwf	??_isr
 19758  005E  3000               	movlw	0
 19759  005F  00BB               	movwf	??_isr+1
 19760  0060  3000               	movlw	0
 19761  0061  00BC               	movwf	??_isr+2
 19762  0062  3000               	movlw	0
 19763  0063  00BD               	movwf	??_isr+3
 19764  0064  0851               	movf	_tap_timer,w	;volatile
 19765  0065  07BA               	addwf	??_isr,f
 19766  0066  0852               	movf	_tap_timer+1,w	;volatile
 19767  0067  3DBB               	addwfc	??_isr+1,f
 19768  0068  0853               	movf	_tap_timer+2,w	;volatile
 19769  0069  3DBC               	addwfc	??_isr+2,f
 19770  006A  0854               	movf	_tap_timer+3,w	;volatile
 19771  006B  3DBD               	addwfc	??_isr+3,f
 19772  006C  083D               	movf	??_isr+3,w
 19773  006D  00D4               	movwf	_tap_timer+3	;volatile
 19774  006E  083C               	movf	??_isr+2,w
 19775  006F  00D3               	movwf	_tap_timer+2	;volatile
 19776  0070  083B               	movf	??_isr+1,w
 19777  0071  00D2               	movwf	_tap_timer+1	;volatile
 19778  0072  083A               	movf	??_isr,w
 19779  0073  00D1               	movwf	_tap_timer	;volatile
 19780                           
 19781                           ;interrupts.c: 73: mod_timer = mod_timer + 1;
 19782  0074  3001               	movlw	1
 19783  0075  00BA               	movwf	??_isr
 19784  0076  3000               	movlw	0
 19785  0077  00BB               	movwf	??_isr+1
 19786  0078  3000               	movlw	0
 19787  0079  00BC               	movwf	??_isr+2
 19788  007A  3000               	movlw	0
 19789  007B  00BD               	movwf	??_isr+3
 19790  007C  0023               	movlb	3	; select bank3
 19791  007D  0824               	movf	_mod_timer^(0+384),w	;volatile
 19792  007E  0020               	movlb	0	; select bank0
 19793  007F  07BA               	addwf	??_isr,f
 19794  0080  0023               	movlb	3	; select bank3
 19795  0081  0825               	movf	(_mod_timer+1)^(0+384),w	;volatile
 19796  0082  0020               	movlb	0	; select bank0
 19797  0083  3DBB               	addwfc	??_isr+1,f
 19798  0084  0023               	movlb	3	; select bank3
 19799  0085  0826               	movf	(_mod_timer+2)^(0+384),w	;volatile
 19800  0086  0020               	movlb	0	; select bank0
 19801  0087  3DBC               	addwfc	??_isr+2,f
 19802  0088  0023               	movlb	3	; select bank3
 19803  0089  0827               	movf	(_mod_timer+3)^(0+384),w	;volatile
 19804  008A  0020               	movlb	0	; select bank0
 19805  008B  3DBD               	addwfc	??_isr+3,f
 19806  008C  083D               	movf	??_isr+3,w
 19807  008D  0023               	movlb	3	; select bank3
 19808  008E  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 19809  008F  0020               	movlb	0	; select bank0
 19810  0090  083C               	movf	??_isr+2,w
 19811  0091  0023               	movlb	3	; select bank3
 19812  0092  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 19813  0093  0020               	movlb	0	; select bank0
 19814  0094  083B               	movf	??_isr+1,w
 19815  0095  0023               	movlb	3	; select bank3
 19816  0096  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 19817  0097  0020               	movlb	0	; select bank0
 19818  0098  083A               	movf	??_isr,w
 19819  0099  0023               	movlb	3	; select bank3
 19820  009A  00A4               	movwf	_mod_timer^(0+384)	;volatile
 19821                           
 19822                           ;interrupts.c: 74: double_timer++;
 19823  009B  3001               	movlw	1
 19824  009C  07A0               	addwf	_double_timer^(0+384),f	;volatile
 19825  009D  3000               	movlw	0
 19826  009E  3DA1               	addwfc	(_double_timer+1)^(0+384),f	;volatile
 19827  009F  3000               	movlw	0
 19828  00A0  3DA2               	addwfc	(_double_timer+2)^(0+384),f	;volatile
 19829  00A1  3000               	movlw	0
 19830  00A2  3DA3               	addwfc	(_double_timer+3)^(0+384),f	;volatile
 19831                           
 19832                           ;interrupts.c: 77: char subDiv = getModulationSubdivision();
 19833  00A3  31AE  2680  3180   	fcall	i1_getModulationSubdivision
 19834  00A6  0870               	movf	?i1_getModulationSubdivision,w
 19835  00A7  0020               	movlb	0	; select bank0
 19836  00A8  00BA               	movwf	??_isr
 19837  00A9  083A               	movf	??_isr,w
 19838  00AA  00FD               	movwf	isr@subDiv
 19839                           
 19840                           ;interrupts.c: 82: if ((mod_timer >= tmpModDelay) && (mod_counter == subDiv) && (tmpModD
      +                          elay == mod_delay_time)) {
 19841  00AB  0023               	movlb	3	; select bank3
 19842  00AC  083E               	movf	_tmpModDelay^(0+384),w
 19843  00AD  0020               	movlb	0	; select bank0
 19844  00AE  00BA               	movwf	??_isr
 19845  00AF  0023               	movlb	3	; select bank3
 19846  00B0  083F               	movf	(_tmpModDelay+1)^(0+384),w
 19847  00B1  0020               	movlb	0	; select bank0
 19848  00B2  00BB               	movwf	??_isr+1
 19849  00B3  3000               	movlw	0
 19850  00B4  1BBB               	btfsc	??_isr+1,7
 19851  00B5  30FF               	movlw	255
 19852  00B6  00BC               	movwf	??_isr+2
 19853  00B7  00BD               	movwf	??_isr+3
 19854  00B8  0023               	movlb	3	; select bank3
 19855  00B9  0827               	movf	(_mod_timer+3)^(0+384),w	;volatile
 19856  00BA  3A80               	xorlw	128
 19857  00BB  0020               	movlb	0	; select bank0
 19858  00BC  00BE               	movwf	??_isr+4
 19859  00BD  083D               	movf	??_isr+3,w
 19860  00BE  3A80               	xorlw	128
 19861  00BF  023E               	subwf	??_isr+4,w
 19862  00C0  0023               	movlb	3	; select bank3
 19863  00C1  1D03               	skipz
 19864  00C2  28D3               	goto	u682_23
 19865  00C3  0020               	movlb	0	; select bank0
 19866  00C4  083C               	movf	??_isr+2,w
 19867  00C5  0023               	movlb	3	; select bank3
 19868  00C6  0226               	subwf	(_mod_timer+2)^(0+384),w	;volatile
 19869  00C7  1D03               	skipz
 19870  00C8  28D3               	goto	u682_23
 19871  00C9  0020               	movlb	0	; select bank0
 19872  00CA  083B               	movf	??_isr+1,w
 19873  00CB  0023               	movlb	3	; select bank3
 19874  00CC  0225               	subwf	(_mod_timer+1)^(0+384),w	;volatile
 19875  00CD  1D03               	skipz
 19876  00CE  28D3               	goto	u682_23
 19877  00CF  0020               	movlb	0	; select bank0
 19878  00D0  083A               	movf	??_isr,w
 19879  00D1  0023               	movlb	3	; select bank3
 19880  00D2  0224               	subwf	_mod_timer^(0+384),w	;volatile
 19881  00D3                     u682_23:	
 19882  00D3  1C03               	skipc
 19883  00D4  2901               	goto	i1l141
 19884  00D5  087D               	movf	isr@subDiv,w
 19885  00D6  0020               	movlb	0	; select bank0
 19886  00D7  00BA               	movwf	??_isr
 19887  00D8  01BB               	clrf	??_isr+1
 19888  00D9  0023               	movlb	3	; select bank3
 19889  00DA  0858               	movf	(_mod_counter+1)^(0+384),w
 19890  00DB  0020               	movlb	0	; select bank0
 19891  00DC  063B               	xorwf	??_isr+1,w
 19892  00DD  1D03               	skipz
 19893  00DE  28E3               	goto	u683_25
 19894  00DF  0023               	movlb	3	; select bank3
 19895  00E0  0857               	movf	_mod_counter^(0+384),w
 19896  00E1  0020               	movlb	0	; select bank0
 19897  00E2  063A               	xorwf	??_isr,w
 19898  00E3                     u683_25:	
 19899  00E3  1D03               	skipz
 19900  00E4  2901               	goto	i1l141
 19901  00E5  0023               	movlb	3	; select bank3
 19902  00E6  085A               	movf	(_mod_delay_time+1)^(0+384),w
 19903  00E7  063F               	xorwf	(_tmpModDelay+1)^(0+384),w
 19904  00E8  1D03               	skipz
 19905  00E9  28EC               	goto	u684_25
 19906  00EA  0859               	movf	_mod_delay_time^(0+384),w
 19907  00EB  063E               	xorwf	_tmpModDelay^(0+384),w
 19908  00EC                     u684_25:	
 19909  00EC  1D03               	skipz
 19910  00ED  2901               	goto	i1l141
 19911                           
 19912                           ;interrupts.c: 83: tmpModDelay = (delay_time - sub_timer);
 19913  00EE  0928               	comf	_sub_timer^(0+384),w	;volatile
 19914  00EF  0020               	movlb	0	; select bank0
 19915  00F0  00BA               	movwf	??_isr
 19916  00F1  0023               	movlb	3	; select bank3
 19917  00F2  0929               	comf	(_sub_timer+1)^(0+384),w	;volatile
 19918  00F3  0020               	movlb	0	; select bank0
 19919  00F4  00BB               	movwf	??_isr+1
 19920  00F5  0ABA               	incf	??_isr,f
 19921  00F6  1903               	skipnz
 19922  00F7  0ABB               	incf	??_isr+1,f
 19923  00F8  0844               	movf	_delay_time,w	;volatile
 19924  00F9  073A               	addwf	??_isr,w
 19925  00FA  0023               	movlb	3	; select bank3
 19926  00FB  00BE               	movwf	_tmpModDelay^(0+384)
 19927  00FC  0020               	movlb	0	; select bank0
 19928  00FD  0845               	movf	_delay_time+1,w	;volatile
 19929  00FE  3D3B               	addwfc	??_isr+1,w
 19930  00FF  0023               	movlb	3	; select bank3
 19931  0100  00BF               	movwf	(_tmpModDelay+1)^(0+384)
 19932  0101                     i1l141:	
 19933                           
 19934                           ;interrupts.c: 84: }
 19935                           ;interrupts.c: 86: if (longBypass_start == 1) {
 19936  0101  0022               	movlb	2	; select bank2
 19937  0102  036A               	decf	_longBypass_start^(0+256),w
 19938  0103  1D03               	btfss	3,2
 19939  0104  291C               	goto	i1l6968
 19940                           
 19941                           ;interrupts.c: 87: longBypass_timer++;
 19942  0105  3001               	movlw	1
 19943  0106  0023               	movlb	3	; select bank3
 19944  0107  07B6               	addwf	_longBypass_timer^(0+384),f	;volatile
 19945  0108  3000               	movlw	0
 19946  0109  3DB7               	addwfc	(_longBypass_timer+1)^(0+384),f	;volatile
 19947                           
 19948                           ;interrupts.c: 88: if (longBypass_timer > long_press_limit) {longBypass_timer = long_pre
      +                          ss_limit;}
 19949  010A  0837               	movf	(_longBypass_timer+1)^(0+384),w	;volatile
 19950  010B  0020               	movlb	0	; select bank0
 19951  010C  0249               	subwf	_long_press_limit+1,w
 19952  010D  1D03               	skipz
 19953  010E  2913               	goto	u686_25
 19954  010F  0023               	movlb	3	; select bank3
 19955  0110  0836               	movf	_longBypass_timer^(0+384),w	;volatile
 19956  0111  0020               	movlb	0	; select bank0
 19957  0112  0248               	subwf	_long_press_limit,w
 19958  0113                     u686_25:	
 19959  0113  1803               	skipnc
 19960  0114  291C               	goto	i1l6968
 19961  0115  0849               	movf	_long_press_limit+1,w
 19962  0116  0023               	movlb	3	; select bank3
 19963  0117  00B7               	movwf	(_longBypass_timer+1)^(0+384)	;volatile
 19964  0118  0020               	movlb	0	; select bank0
 19965  0119  0848               	movf	_long_press_limit,w
 19966  011A  0023               	movlb	3	; select bank3
 19967  011B  00B6               	movwf	_longBypass_timer^(0+384)	;volatile
 19968  011C                     i1l6968:	
 19969                           
 19970                           ;interrupts.c: 89: }
 19971                           ;interrupts.c: 90: if (longTap_start == 1) {
 19972  011C  0022               	movlb	2	; select bank2
 19973  011D  036B               	decf	_longTap_start^(0+256),w
 19974  011E  1D03               	btfss	3,2
 19975  011F  2937               	goto	i1l6974
 19976                           
 19977                           ;interrupts.c: 91: longTap_timer++;
 19978  0120  3001               	movlw	1
 19979  0121  0023               	movlb	3	; select bank3
 19980  0122  07B8               	addwf	_longTap_timer^(0+384),f	;volatile
 19981  0123  3000               	movlw	0
 19982  0124  3DB9               	addwfc	(_longTap_timer+1)^(0+384),f	;volatile
 19983                           
 19984                           ;interrupts.c: 92: if (longTap_timer > long_press_limit) {
 19985  0125  0839               	movf	(_longTap_timer+1)^(0+384),w	;volatile
 19986  0126  0020               	movlb	0	; select bank0
 19987  0127  0249               	subwf	_long_press_limit+1,w
 19988  0128  1D03               	skipz
 19989  0129  292E               	goto	u688_25
 19990  012A  0023               	movlb	3	; select bank3
 19991  012B  0838               	movf	_longTap_timer^(0+384),w	;volatile
 19992  012C  0020               	movlb	0	; select bank0
 19993  012D  0248               	subwf	_long_press_limit,w
 19994  012E                     u688_25:	
 19995  012E  1803               	skipnc
 19996  012F  2937               	goto	i1l6974
 19997                           
 19998                           ;interrupts.c: 93: longTap_timer = long_press_limit;
 19999  0130  0849               	movf	_long_press_limit+1,w
 20000  0131  0023               	movlb	3	; select bank3
 20001  0132  00B9               	movwf	(_longTap_timer+1)^(0+384)	;volatile
 20002  0133  0020               	movlb	0	; select bank0
 20003  0134  0848               	movf	_long_press_limit,w
 20004  0135  0023               	movlb	3	; select bank3
 20005  0136  00B8               	movwf	_longTap_timer^(0+384)	;volatile
 20006  0137                     i1l6974:	
 20007                           
 20008                           ;interrupts.c: 94: }
 20009                           ;interrupts.c: 95: }
 20010                           ;interrupts.c: 97: if (longTap_state < 1 && doubleTap_state < 1 && presetSaveMode < 1) {
 20011  0137  0020               	movlb	0	; select bank0
 20012  0138  084D               	movf	_longTap_state,w	;volatile
 20013  0139  1D03               	btfss	3,2
 20014  013A  2995               	goto	i1l7000
 20015  013B  085B               	movf	_doubleTap_state,w	;volatile
 20016  013C  1D03               	btfss	3,2
 20017  013D  2995               	goto	i1l7000
 20018  013E  085E               	movf	_presetSaveMode,w
 20019  013F  1D03               	btfss	3,2
 20020  0140  2995               	goto	i1l7000
 20021                           
 20022                           ;interrupts.c: 99: if (timer >= baseline_mod_time) {
 20023  0141  0858               	movf	_timer+3,w	;volatile
 20024  0142  3A80               	xorlw	128
 20025  0143  00BA               	movwf	??_isr
 20026  0144  0843               	movf	_baseline_mod_time+3,w	;volatile
 20027  0145  3A80               	xorlw	128
 20028  0146  023A               	subwf	??_isr,w
 20029  0147  1D03               	skipz
 20030  0148  2953               	goto	u692_23
 20031  0149  0842               	movf	_baseline_mod_time+2,w	;volatile
 20032  014A  0257               	subwf	_timer+2,w	;volatile
 20033  014B  1D03               	skipz
 20034  014C  2953               	goto	u692_23
 20035  014D  0841               	movf	_baseline_mod_time+1,w	;volatile
 20036  014E  0256               	subwf	_timer+1,w	;volatile
 20037  014F  1D03               	skipz
 20038  0150  2953               	goto	u692_23
 20039  0151  0840               	movf	_baseline_mod_time,w	;volatile
 20040  0152  0255               	subwf	_timer,w	;volatile
 20041  0153                     u692_23:	
 20042  0153  1C03               	skipc
 20043  0154  2983               	goto	i1l6996
 20044                           
 20045                           ;interrupts.c: 102: LATBbits.LATB4 = 1;
 20046  0155  0022               	movlb	2	; select bank2
 20047  0156  160D               	bsf	13,4	;volatile
 20048                           
 20049                           ;interrupts.c: 104: timer = 0;
 20050  0157  3000               	movlw	0
 20051  0158  0020               	movlb	0	; select bank0
 20052  0159  00D8               	movwf	_timer+3	;volatile
 20053  015A  3000               	movlw	0
 20054  015B  00D7               	movwf	_timer+2	;volatile
 20055  015C  3000               	movlw	0
 20056  015D  00D6               	movwf	_timer+1	;volatile
 20057  015E  3000               	movlw	0
 20058  015F  00D5               	movwf	_timer	;volatile
 20059                           
 20060                           ;interrupts.c: 106: if (modulation_changed == 1) {
 20061  0160  0023               	movlb	3	; select bank3
 20062  0161  0346               	decf	_modulation_changed^(0+384),w
 20063  0162  1D03               	btfss	3,2
 20064  0163  2983               	goto	i1l6996
 20065                           
 20066                           ;interrupts.c: 109: modulation_changed = 0;
 20067  0164  01C6               	clrf	_modulation_changed^(0+384)
 20068                           
 20069                           ;interrupts.c: 110: mod_time_changed = 0;
 20070  0165  01E4               	clrf	_mod_time_changed^(0+384)
 20071                           
 20072                           ;interrupts.c: 111: sub_timer = delay_time;
 20073  0166  0020               	movlb	0	; select bank0
 20074  0167  0847               	movf	_delay_time+3,w	;volatile
 20075  0168  0023               	movlb	3	; select bank3
 20076  0169  00AB               	movwf	(_sub_timer+3)^(0+384)	;volatile
 20077  016A  0020               	movlb	0	; select bank0
 20078  016B  0846               	movf	_delay_time+2,w	;volatile
 20079  016C  0023               	movlb	3	; select bank3
 20080  016D  00AA               	movwf	(_sub_timer+2)^(0+384)	;volatile
 20081  016E  0020               	movlb	0	; select bank0
 20082  016F  0845               	movf	_delay_time+1,w	;volatile
 20083  0170  0023               	movlb	3	; select bank3
 20084  0171  00A9               	movwf	(_sub_timer+1)^(0+384)	;volatile
 20085  0172  0020               	movlb	0	; select bank0
 20086  0173  0844               	movf	_delay_time,w	;volatile
 20087  0174  0023               	movlb	3	; select bank3
 20088  0175  00A8               	movwf	_sub_timer^(0+384)	;volatile
 20089                           
 20090                           ;interrupts.c: 112: tmpModDelay = mod_delay_time;
 20091  0176  085A               	movf	(_mod_delay_time+1)^(0+384),w
 20092  0177  00BF               	movwf	(_tmpModDelay+1)^(0+384)
 20093  0178  0859               	movf	_mod_delay_time^(0+384),w
 20094  0179  00BE               	movwf	_tmpModDelay^(0+384)
 20095                           
 20096                           ;interrupts.c: 113: mod_timer = tmpModDelay;
 20097  017A  083E               	movf	_tmpModDelay^(0+384),w
 20098  017B  00A4               	movwf	_mod_timer^(0+384)	;volatile
 20099  017C  083F               	movf	(_tmpModDelay+1)^(0+384),w
 20100  017D  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 20101  017E  0D89               	rlf	9,f
 20102  017F  3B89               	subwfb	9,f
 20103  0180  0989               	comf	9,f
 20104  0181  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 20105  0182  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 20106  0183                     i1l6996:	
 20107                           
 20108                           ;interrupts.c: 121: }
 20109                           ;interrupts.c: 122: }
 20110                           ;interrupts.c: 124: if (timer >= 30) {
 20111  0183  0020               	movlb	0	; select bank0
 20112  0184  1BD8               	btfsc	_timer+3,7	;volatile
 20113  0185  2995               	goto	i1l7000
 20114  0186  0858               	movf	_timer+3,w	;volatile
 20115  0187  1D03               	btfss	3,2
 20116  0188  2993               	goto	i1l6998
 20117  0189  0857               	movf	_timer+2,w	;volatile
 20118  018A  1D03               	btfss	3,2
 20119  018B  2993               	goto	i1l6998
 20120  018C  0856               	movf	_timer+1,w	;volatile
 20121  018D  1D03               	btfss	3,2
 20122  018E  2993               	goto	i1l6998
 20123  018F  301E               	movlw	30
 20124  0190  0255               	subwf	_timer,w	;volatile
 20125  0191  1C03               	btfss	3,0
 20126  0192  2995               	goto	i1l7000
 20127  0193                     i1l6998:	
 20128                           
 20129                           ;interrupts.c: 126: LATBbits.LATB4 = 0;
 20130  0193  0022               	movlb	2	; select bank2
 20131  0194  120D               	bcf	13,4	;volatile
 20132  0195                     i1l7000:	
 20133                           
 20134                           ;interrupts.c: 128: }
 20135                           ;interrupts.c: 129: }
 20136                           ;interrupts.c: 138: if (presetSaveMode < 1 && mode2_state == 0) {
 20137  0195  0020               	movlb	0	; select bank0
 20138  0196  085E               	movf	_presetSaveMode,w
 20139  0197  1D03               	btfss	3,2
 20140  0198  29EE               	goto	i1l7018
 20141  0199  085D               	movf	_mode2_state,w
 20142  019A  1D03               	btfss	3,2
 20143  019B  29EE               	goto	i1l7018
 20144                           
 20145                           ;interrupts.c: 139: if (sub_timer >= delay_time ) {
 20146  019C  0023               	movlb	3	; select bank3
 20147  019D  082B               	movf	(_sub_timer+3)^(0+384),w	;volatile
 20148  019E  3A80               	xorlw	128
 20149  019F  0020               	movlb	0	; select bank0
 20150  01A0  00BA               	movwf	??_isr
 20151  01A1  0847               	movf	_delay_time+3,w	;volatile
 20152  01A2  3A80               	xorlw	128
 20153  01A3  023A               	subwf	??_isr,w
 20154  01A4  0023               	movlb	3	; select bank3
 20155  01A5  1D03               	skipz
 20156  01A6  29B7               	goto	u697_23
 20157  01A7  0020               	movlb	0	; select bank0
 20158  01A8  0846               	movf	_delay_time+2,w	;volatile
 20159  01A9  0023               	movlb	3	; select bank3
 20160  01AA  022A               	subwf	(_sub_timer+2)^(0+384),w	;volatile
 20161  01AB  1D03               	skipz
 20162  01AC  29B7               	goto	u697_23
 20163  01AD  0020               	movlb	0	; select bank0
 20164  01AE  0845               	movf	_delay_time+1,w	;volatile
 20165  01AF  0023               	movlb	3	; select bank3
 20166  01B0  0229               	subwf	(_sub_timer+1)^(0+384),w	;volatile
 20167  01B1  1D03               	skipz
 20168  01B2  29B7               	goto	u697_23
 20169  01B3  0020               	movlb	0	; select bank0
 20170  01B4  0844               	movf	_delay_time,w	;volatile
 20171  01B5  0023               	movlb	3	; select bank3
 20172  01B6  0228               	subwf	_sub_timer^(0+384),w	;volatile
 20173  01B7                     u697_23:	
 20174  01B7  1C03               	skipc
 20175  01B8  29D1               	goto	i1l7012
 20176                           
 20177                           ;interrupts.c: 140: if (suspend_blink == 0) {
 20178  01B9  0020               	movlb	0	; select bank0
 20179  01BA  085F               	movf	_suspend_blink,w	;volatile
 20180  01BB  1D03               	btfss	3,2
 20181  01BC  29C8               	goto	i1l7010
 20182                           
 20183                           ;interrupts.c: 141: set_leds_top(top_push_state, 1);
 20184  01BD  084B               	movf	_top_push_state+1,w
 20185  01BE  00F1               	movwf	i1set_leds_top@x+1
 20186  01BF  084A               	movf	_top_push_state,w
 20187  01C0  00F0               	movwf	i1set_leds_top@x
 20188  01C1  3001               	movlw	1
 20189  01C2  00F2               	movwf	i1set_leds_top@ledState
 20190  01C3  3000               	movlw	0
 20191  01C4  00F3               	movwf	i1set_leds_top@ledState+1
 20192  01C5  31A2  22C3  3180   	fcall	i1_set_leds_top
 20193  01C8                     i1l7010:	
 20194                           
 20195                           ;interrupts.c: 142: }
 20196                           ;interrupts.c: 144: sub_timer = 0;
 20197  01C8  3000               	movlw	0
 20198  01C9  0023               	movlb	3	; select bank3
 20199  01CA  00AB               	movwf	(_sub_timer+3)^(0+384)	;volatile
 20200  01CB  3000               	movlw	0
 20201  01CC  00AA               	movwf	(_sub_timer+2)^(0+384)	;volatile
 20202  01CD  3000               	movlw	0
 20203  01CE  00A9               	movwf	(_sub_timer+1)^(0+384)	;volatile
 20204  01CF  3000               	movlw	0
 20205  01D0  00A8               	movwf	_sub_timer^(0+384)	;volatile
 20206  01D1                     i1l7012:	
 20207                           
 20208                           ;interrupts.c: 145: }
 20209                           ;interrupts.c: 147: if (sub_timer >= 20) {
 20210  01D1  1BAB               	btfsc	(_sub_timer+3)^(0+384),7	;volatile
 20211  01D2  29EE               	goto	i1l7018
 20212  01D3  082B               	movf	(_sub_timer+3)^(0+384),w	;volatile
 20213  01D4  1D03               	btfss	3,2
 20214  01D5  29E0               	goto	i1l7014
 20215  01D6  082A               	movf	(_sub_timer+2)^(0+384),w	;volatile
 20216  01D7  1D03               	btfss	3,2
 20217  01D8  29E0               	goto	i1l7014
 20218  01D9  0829               	movf	(_sub_timer+1)^(0+384),w	;volatile
 20219  01DA  1D03               	btfss	3,2
 20220  01DB  29E0               	goto	i1l7014
 20221  01DC  3014               	movlw	20
 20222  01DD  0228               	subwf	_sub_timer^(0+384),w	;volatile
 20223  01DE  1C03               	btfss	3,0
 20224  01DF  29EE               	goto	i1l7018
 20225  01E0                     i1l7014:	
 20226                           
 20227                           ;interrupts.c: 148: if (suspend_blink == 0) {
 20228  01E0  0020               	movlb	0	; select bank0
 20229  01E1  085F               	movf	_suspend_blink,w	;volatile
 20230  01E2  1D03               	btfss	3,2
 20231  01E3  29EE               	goto	i1l7018
 20232                           
 20233                           ;interrupts.c: 149: set_leds_top(top_push_state, 0);
 20234  01E4  084B               	movf	_top_push_state+1,w
 20235  01E5  00F1               	movwf	i1set_leds_top@x+1
 20236  01E6  084A               	movf	_top_push_state,w
 20237  01E7  00F0               	movwf	i1set_leds_top@x
 20238  01E8  3000               	movlw	0
 20239  01E9  00F2               	movwf	i1set_leds_top@ledState
 20240  01EA  00F3               	movwf	i1set_leds_top@ledState+1
 20241  01EB  31A2  22C3  3180   	fcall	i1_set_leds_top
 20242  01EE                     i1l7018:	
 20243                           
 20244                           ;interrupts.c: 150: }
 20245                           ;interrupts.c: 151: }
 20246                           ;interrupts.c: 152: }
 20247                           ;interrupts.c: 157: if (presetSaveMode == 1) {
 20248  01EE  0020               	movlb	0	; select bank0
 20249  01EF  035E               	decf	_presetSaveMode,w
 20250  01F0  1D03               	btfss	3,2
 20251  01F1  2A1E               	goto	i1l7030
 20252                           
 20253                           ;interrupts.c: 158: if (double_timer >= 250) {
 20254  01F2  0023               	movlb	3	; select bank3
 20255  01F3  1BA3               	btfsc	(_double_timer+3)^(0+384),7	;volatile
 20256  01F4  2A0D               	goto	i1l7026
 20257  01F5  0823               	movf	(_double_timer+3)^(0+384),w	;volatile
 20258  01F6  1D03               	btfss	3,2
 20259  01F7  2A02               	goto	i1l7022
 20260  01F8  0822               	movf	(_double_timer+2)^(0+384),w	;volatile
 20261  01F9  1D03               	btfss	3,2
 20262  01FA  2A02               	goto	i1l7022
 20263  01FB  0821               	movf	(_double_timer+1)^(0+384),w	;volatile
 20264  01FC  1D03               	btfss	3,2
 20265  01FD  2A02               	goto	i1l7022
 20266  01FE  30FA               	movlw	250
 20267  01FF  0220               	subwf	_double_timer^(0+384),w	;volatile
 20268  0200  1C03               	btfss	3,0
 20269  0201  2A0D               	goto	i1l7026
 20270  0202                     i1l7022:	
 20271                           
 20272                           ;interrupts.c: 159: LATBbits.LATB0 = 1;
 20273  0202  0022               	movlb	2	; select bank2
 20274  0203  140D               	bsf	13,0	;volatile
 20275                           
 20276                           ;interrupts.c: 160: double_timer = 0;
 20277  0204  3000               	movlw	0
 20278  0205  0023               	movlb	3	; select bank3
 20279  0206  00A3               	movwf	(_double_timer+3)^(0+384)	;volatile
 20280  0207  3000               	movlw	0
 20281  0208  00A2               	movwf	(_double_timer+2)^(0+384)	;volatile
 20282  0209  3000               	movlw	0
 20283  020A  00A1               	movwf	(_double_timer+1)^(0+384)	;volatile
 20284  020B  3000               	movlw	0
 20285  020C  00A0               	movwf	_double_timer^(0+384)	;volatile
 20286  020D                     i1l7026:	
 20287                           
 20288                           ;interrupts.c: 161: }
 20289                           ;interrupts.c: 162: if (double_timer >= 30) {
 20290  020D  1BA3               	btfsc	(_double_timer+3)^(0+384),7	;volatile
 20291  020E  2A1E               	goto	i1l7030
 20292  020F  0823               	movf	(_double_timer+3)^(0+384),w	;volatile
 20293  0210  1D03               	btfss	3,2
 20294  0211  2A1C               	goto	i1l7028
 20295  0212  0822               	movf	(_double_timer+2)^(0+384),w	;volatile
 20296  0213  1D03               	btfss	3,2
 20297  0214  2A1C               	goto	i1l7028
 20298  0215  0821               	movf	(_double_timer+1)^(0+384),w	;volatile
 20299  0216  1D03               	btfss	3,2
 20300  0217  2A1C               	goto	i1l7028
 20301  0218  301E               	movlw	30
 20302  0219  0220               	subwf	_double_timer^(0+384),w	;volatile
 20303  021A  1C03               	btfss	3,0
 20304  021B  2A1E               	goto	i1l7030
 20305  021C                     i1l7028:	
 20306                           
 20307                           ;interrupts.c: 163: LATBbits.LATB0 = 0;
 20308  021C  0022               	movlb	2	; select bank2
 20309  021D  100D               	bcf	13,0	;volatile
 20310  021E                     i1l7030:	
 20311                           
 20312                           ;interrupts.c: 164: }
 20313                           ;interrupts.c: 165: }
 20314                           ;interrupts.c: 184: if (mod_timer >= tmpModDelay) {
 20315  021E  0023               	movlb	3	; select bank3
 20316  021F  083E               	movf	_tmpModDelay^(0+384),w
 20317  0220  0020               	movlb	0	; select bank0
 20318  0221  00BA               	movwf	??_isr
 20319  0222  0023               	movlb	3	; select bank3
 20320  0223  083F               	movf	(_tmpModDelay+1)^(0+384),w
 20321  0224  0020               	movlb	0	; select bank0
 20322  0225  00BB               	movwf	??_isr+1
 20323  0226  3000               	movlw	0
 20324  0227  1BBB               	btfsc	??_isr+1,7
 20325  0228  30FF               	movlw	255
 20326  0229  00BC               	movwf	??_isr+2
 20327  022A  00BD               	movwf	??_isr+3
 20328  022B  0023               	movlb	3	; select bank3
 20329  022C  0827               	movf	(_mod_timer+3)^(0+384),w	;volatile
 20330  022D  3A80               	xorlw	128
 20331  022E  0020               	movlb	0	; select bank0
 20332  022F  00BE               	movwf	??_isr+4
 20333  0230  083D               	movf	??_isr+3,w
 20334  0231  3A80               	xorlw	128
 20335  0232  023E               	subwf	??_isr+4,w
 20336  0233  0023               	movlb	3	; select bank3
 20337  0234  1D03               	skipz
 20338  0235  2A46               	goto	u704_23
 20339  0236  0020               	movlb	0	; select bank0
 20340  0237  083C               	movf	??_isr+2,w
 20341  0238  0023               	movlb	3	; select bank3
 20342  0239  0226               	subwf	(_mod_timer+2)^(0+384),w	;volatile
 20343  023A  1D03               	skipz
 20344  023B  2A46               	goto	u704_23
 20345  023C  0020               	movlb	0	; select bank0
 20346  023D  083B               	movf	??_isr+1,w
 20347  023E  0023               	movlb	3	; select bank3
 20348  023F  0225               	subwf	(_mod_timer+1)^(0+384),w	;volatile
 20349  0240  1D03               	skipz
 20350  0241  2A46               	goto	u704_23
 20351  0242  0020               	movlb	0	; select bank0
 20352  0243  083A               	movf	??_isr,w
 20353  0244  0023               	movlb	3	; select bank3
 20354  0245  0224               	subwf	_mod_timer^(0+384),w	;volatile
 20355  0246                     u704_23:	
 20356  0246  1C03               	skipc
 20357  0247  2AB6               	goto	i1l7046
 20358                           
 20359                           ;interrupts.c: 185: mod_timer = 0;
 20360  0248  3000               	movlw	0
 20361  0249  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 20362  024A  3000               	movlw	0
 20363  024B  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 20364  024C  3000               	movlw	0
 20365  024D  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 20366  024E  3000               	movlw	0
 20367  024F  00A4               	movwf	_mod_timer^(0+384)	;volatile
 20368                           
 20369                           ;interrupts.c: 187: if (mod_counter >= subDiv) {
 20370  0250  0858               	movf	(_mod_counter+1)^(0+384),w
 20371  0251  3A80               	xorlw	128
 20372  0252  0020               	movlb	0	; select bank0
 20373  0253  00BA               	movwf	??_isr
 20374  0254  3080               	movlw	128
 20375  0255  023A               	subwf	??_isr,w
 20376  0256  1D03               	skipz
 20377  0257  2A5B               	goto	u705_25
 20378  0258  087D               	movf	isr@subDiv,w
 20379  0259  0023               	movlb	3	; select bank3
 20380  025A  0257               	subwf	_mod_counter^(0+384),w
 20381  025B                     u705_25:	
 20382  025B  1C03               	skipc
 20383  025C  2A64               	goto	i1l7038
 20384                           
 20385                           ;interrupts.c: 188: mod_counter = 0;
 20386  025D  0023               	movlb	3	; select bank3
 20387  025E  01D7               	clrf	_mod_counter^(0+384)
 20388  025F  01D8               	clrf	(_mod_counter+1)^(0+384)
 20389                           
 20390                           ;interrupts.c: 189: tmpModDelay = mod_delay_time;
 20391  0260  085A               	movf	(_mod_delay_time+1)^(0+384),w
 20392  0261  00BF               	movwf	(_tmpModDelay+1)^(0+384)
 20393  0262  0859               	movf	_mod_delay_time^(0+384),w
 20394  0263  00BE               	movwf	_tmpModDelay^(0+384)
 20395  0264                     i1l7038:	
 20396                           
 20397                           ;interrupts.c: 193: }
 20398                           ;interrupts.c: 197: mod_value = modArray[mod_counter];
 20399  0264  0023               	movlb	3	; select bank3
 20400  0265  0858               	movf	(_mod_counter+1)^(0+384),w
 20401  0266  0020               	movlb	0	; select bank0
 20402  0267  00BB               	movwf	??_isr+1
 20403  0268  0023               	movlb	3	; select bank3
 20404  0269  0857               	movf	_mod_counter^(0+384),w
 20405  026A  0020               	movlb	0	; select bank0
 20406  026B  00BA               	movwf	??_isr
 20407  026C  35BA               	lslf	??_isr,f
 20408  026D  0DBB               	rlf	??_isr+1,f
 20409  026E  308A               	movlw	138
 20410  026F  00BC               	movwf	??_isr+2
 20411  0270  3023               	movlw	35
 20412  0271  00BD               	movwf	??_isr+3
 20413  0272  083A               	movf	??_isr,w
 20414  0273  073C               	addwf	??_isr+2,w
 20415  0274  0086               	movwf	6
 20416  0275  083B               	movf	??_isr+1,w
 20417  0276  3D3D               	addwfc	??_isr+3,w
 20418  0277  0087               	movwf	7
 20419  0278  3F40               	moviw [0]fsr1
 20420  0279  0024               	movlb	4	; select bank4
 20421  027A  00D3               	movwf	_mod_value^(0+512)
 20422  027B  3F41               	moviw [1]fsr1
 20423  027C  00D4               	movwf	(_mod_value+1)^(0+512)
 20424                           
 20425                           ;interrupts.c: 204: mod_value = modulation(mod_value, adjusted_pot_value);
 20426  027D  0853               	movf	_mod_value^(0+512),w
 20427  027E  0020               	movlb	0	; select bank0
 20428  027F  00AE               	movwf	modulation@x
 20429  0280  0024               	movlb	4	; select bank4
 20430  0281  0854               	movf	(_mod_value+1)^(0+512),w
 20431  0282  0020               	movlb	0	; select bank0
 20432  0283  00AF               	movwf	modulation@x+1
 20433  0284  0D89               	rlf	9,f
 20434  0285  3B89               	subwfb	9,f
 20435  0286  0989               	comf	9,f
 20436  0287  00B0               	movwf	modulation@x+2
 20437  0288  00B1               	movwf	modulation@x+3
 20438  0289  0024               	movlb	4	; select bank4
 20439  028A  0845               	movf	_adjusted_pot_value^(0+512),w
 20440  028B  0020               	movlb	0	; select bank0
 20441  028C  00B2               	movwf	modulation@y
 20442  028D  0024               	movlb	4	; select bank4
 20443  028E  0846               	movf	(_adjusted_pot_value+1)^(0+512),w
 20444  028F  0020               	movlb	0	; select bank0
 20445  0290  00B3               	movwf	modulation@y+1
 20446  0291  0D89               	rlf	9,f
 20447  0292  3B89               	subwfb	9,f
 20448  0293  0989               	comf	9,f
 20449  0294  00B4               	movwf	modulation@y+2
 20450  0295  00B5               	movwf	modulation@y+3
 20451  0296  31A1  21FD  3180   	fcall	_modulation
 20452  0299  0020               	movlb	0	; select bank0
 20453  029A  082F               	movf	?_modulation+1,w
 20454  029B  0024               	movlb	4	; select bank4
 20455  029C  00D4               	movwf	(_mod_value+1)^(0+512)
 20456  029D  0020               	movlb	0	; select bank0
 20457  029E  082E               	movf	?_modulation,w
 20458  029F  0024               	movlb	4	; select bank4
 20459  02A0  00D3               	movwf	_mod_value^(0+512)
 20460                           
 20461                           ;interrupts.c: 205: CCPR3 = mod_value / 2;
 20462  02A1  3002               	movlw	2
 20463  02A2  00F0               	movwf	i1___awdiv@divisor
 20464  02A3  3000               	movlw	0
 20465  02A4  00F1               	movwf	i1___awdiv@divisor+1
 20466  02A5  0854               	movf	(_mod_value+1)^(0+512),w
 20467  02A6  00F3               	movwf	i1___awdiv@dividend+1
 20468  02A7  0853               	movf	_mod_value^(0+512),w
 20469  02A8  00F2               	movwf	i1___awdiv@dividend
 20470  02A9  31A4  243C  3180   	fcall	i1___awdiv
 20471  02AC  0871               	movf	?i1___awdiv+1,w
 20472  02AD  0026               	movlb	6	; select bank6
 20473  02AE  0092               	movwf	18	;volatile
 20474  02AF  0870               	movf	?i1___awdiv,w
 20475  02B0  0091               	movwf	17	;volatile
 20476                           
 20477                           ;interrupts.c: 206: mod_counter++;
 20478  02B1  3001               	movlw	1
 20479  02B2  0023               	movlb	3	; select bank3
 20480  02B3  07D7               	addwf	_mod_counter^(0+384),f
 20481  02B4  3000               	movlw	0
 20482  02B5  3DD8               	addwfc	(_mod_counter+1)^(0+384),f
 20483  02B6                     i1l7046:	
 20484                           
 20485                           ;interrupts.c: 208: }
 20486                           ;interrupts.c: 210: if (preset_programmning_on == 1) {
 20487  02B6  0348               	decf	_preset_programmning_on^(0+384),w
 20488  02B7  1D03               	btfss	3,2
 20489  02B8  2AE6               	goto	i1l7058
 20490                           
 20491                           ;interrupts.c: 211: preset_blink++;
 20492  02B9  3001               	movlw	1
 20493  02BA  0020               	movlb	0	; select bank0
 20494  02BB  00BA               	movwf	??_isr
 20495  02BC  083A               	movf	??_isr,w
 20496  02BD  0023               	movlb	3	; select bank3
 20497  02BE  07C7               	addwf	_preset_blink^(0+384),f
 20498                           
 20499                           ;interrupts.c: 213: if (preset_blink >= blink_delay) {
 20500  02BF  0024               	movlb	4	; select bank4
 20501  02C0  0869               	movf	(_blink_delay+1)^(0+512),w
 20502  02C1  3A80               	xorlw	128
 20503  02C2  3C80               	sublw	128
 20504  02C3  1D03               	skipz
 20505  02C4  2AC8               	goto	u707_25
 20506  02C5  0868               	movf	_blink_delay^(0+512),w
 20507  02C6  0023               	movlb	3	; select bank3
 20508  02C7  0247               	subwf	_preset_blink^(0+384),w
 20509  02C8                     u707_25:	
 20510  02C8  1C03               	skipc
 20511  02C9  2AEB               	goto	i1l7062
 20512                           
 20513                           ;interrupts.c: 214: LATBbits.LATB1 = 1;
 20514  02CA  0022               	movlb	2	; select bank2
 20515  02CB  148D               	bsf	13,1	;volatile
 20516                           
 20517                           ;interrupts.c: 215: if (preset_blink > blink_delay*2) {
 20518  02CC  0024               	movlb	4	; select bank4
 20519  02CD  0869               	movf	(_blink_delay+1)^(0+512),w
 20520  02CE  0020               	movlb	0	; select bank0
 20521  02CF  00BB               	movwf	??_isr+1
 20522  02D0  0024               	movlb	4	; select bank4
 20523  02D1  0868               	movf	_blink_delay^(0+512),w
 20524  02D2  0020               	movlb	0	; select bank0
 20525  02D3  00BA               	movwf	??_isr
 20526  02D4  35BA               	lslf	??_isr,f
 20527  02D5  0DBB               	rlf	??_isr+1,f
 20528  02D6  083B               	movf	??_isr+1,w
 20529  02D7  3A80               	xorlw	128
 20530  02D8  00BC               	movwf	??_isr+2
 20531  02D9  3080               	movlw	128
 20532  02DA  023C               	subwf	??_isr+2,w
 20533  02DB  1D03               	skipz
 20534  02DC  2AE1               	goto	u708_25
 20535  02DD  0023               	movlb	3	; select bank3
 20536  02DE  0847               	movf	_preset_blink^(0+384),w
 20537  02DF  0020               	movlb	0	; select bank0
 20538  02E0  023A               	subwf	??_isr,w
 20539  02E1                     u708_25:	
 20540  02E1  1803               	skipnc
 20541  02E2  2AED               	goto	i1l7064
 20542                           
 20543                           ;interrupts.c: 216: preset_blink = 0;
 20544  02E3  0023               	movlb	3	; select bank3
 20545  02E4  01C7               	clrf	_preset_blink^(0+384)
 20546                           
 20547                           ;interrupts.c: 217: }
 20548                           ;interrupts.c: 219: } else {
 20549  02E5  2AED               	goto	i1l7064
 20550  02E6                     i1l7058:	
 20551                           ;interrupts.c: 221: }
 20552                           ;interrupts.c: 223: } else {
 20553                           
 20554                           ;interrupts.c: 220: LATBbits.LATB1 = 0;
 20555                           
 20556                           
 20557                           ;interrupts.c: 224: if (preset_blink > 0) {
 20558  02E6  0023               	movlb	3	; select bank3
 20559  02E7  0847               	movf	_preset_blink^(0+384),w
 20560  02E8  1903               	btfsc	3,2
 20561  02E9  2AED               	goto	i1l7064
 20562                           
 20563                           ;interrupts.c: 225: preset_blink = 0;
 20564  02EA  01C7               	clrf	_preset_blink^(0+384)
 20565  02EB                     i1l7062:	
 20566                           
 20567                           ;interrupts.c: 226: LATBbits.LATB1 = 0;
 20568  02EB  0022               	movlb	2	; select bank2
 20569  02EC  108D               	bcf	13,1	;volatile
 20570  02ED                     i1l7064:	
 20571                           
 20572                           ;interrupts.c: 227: }
 20573                           ;interrupts.c: 228: }
 20574                           ;interrupts.c: 232: INTCONbits.TMR0IF = 0;
 20575  02ED  110B               	bcf	11,2	;volatile
 20576  02EE                     i1l139:	
 20577  02EE  0020               	movlb	0	; select bank0
 20578  02EF  083F               	movf	??_isr+5,w
 20579  02F0  00FF               	movwf	127
 20580  02F1  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 20581  02F2  0009               	retfie
 20582  02F3                     __end_of_isr:	
 20583                           
 20584                           	psect	text75
 20585  22C3                     __ptext75:	
 20586 ;; *************** function i1_set_leds_top *****************
 20587 ;; Defined at:
 20588 ;;		line 16 in file "LEDs.c"
 20589 ;; Parameters:    Size  Location     Type
 20590 ;;  x               2    0[COMMON] int 
 20591 ;;  ledState        2    2[COMMON] int 
 20592 ;; Auto vars:     Size  Location     Type
 20593 ;;		None
 20594 ;; Return value:  Size  Location     Type
 20595 ;;                  1    wreg      void 
 20596 ;; Registers used:
 20597 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 20598 ;; Tracked objects:
 20599 ;;		On entry : 0/0
 20600 ;;		On exit  : 0/0
 20601 ;;		Unchanged: 0/0
 20602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20603 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20604 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20606 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20607 ;;Total ram usage:        4 bytes
 20608 ;; Hardware stack levels used:    1
 20609 ;; This function calls:
 20610 ;;		Nothing
 20611 ;; This function is called by:
 20612 ;;		_isr
 20613 ;; This function uses a non-reentrant model
 20614 ;;
 20615                           
 20616                           
 20617                           ;psect for function i1_set_leds_top
 20618  22C3                     i1_set_leds_top:	
 20619                           
 20620                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 20621                           
 20622                           ;incstack = 0
 20623                           ; Regs used in i1_set_leds_top: [wreg-fsr0h+status,2+status,0]
 20624  22C3  0027               	movlb	7	; select bank7
 20625  22C4  100C               	bcf	12,0	;volatile
 20626                           
 20627                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 20628  22C5  108C               	bcf	12,1	;volatile
 20629                           
 20630                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 20631  22C6  110C               	bcf	12,2	;volatile
 20632                           
 20633                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 20634  22C7  118C               	bcf	12,3	;volatile
 20635                           
 20636                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 20637  22C8  120C               	bcf	12,4	;volatile
 20638                           
 20639                           ;LEDs.c: 22: switch (x) {
 20640  22C9  2AEE               	goto	i1l6882
 20641  22CA                     i1l6870:	
 20642                           ;LEDs.c: 23: case 1:
 20643                           
 20644                           
 20645                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 20646  22CA  0C72               	rrf	i1set_leds_top@ledState,w
 20647  22CB  1C03               	skipc
 20648  22CC  100C               	bcf	12,0	;volatile
 20649  22CD  1803               	skipnc
 20650  22CE  140C               	bsf	12,0	;volatile
 20651                           
 20652                           ;LEDs.c: 25: break;
 20653  22CF  0008               	return
 20654  22D0                     i1l6872:	
 20655                           ;LEDs.c: 26: case 2:
 20656                           
 20657                           
 20658                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 20659  22D0  0C72               	rrf	i1set_leds_top@ledState,w
 20660  22D1  1C03               	skipc
 20661  22D2  108C               	bcf	12,1	;volatile
 20662  22D3  1803               	skipnc
 20663  22D4  148C               	bsf	12,1	;volatile
 20664                           
 20665                           ;LEDs.c: 28: break;
 20666  22D5  0008               	return
 20667  22D6                     i1l6874:	
 20668                           ;LEDs.c: 29: case 3:
 20669                           
 20670                           
 20671                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 20672  22D6  0C72               	rrf	i1set_leds_top@ledState,w
 20673  22D7  1C03               	skipc
 20674  22D8  110C               	bcf	12,2	;volatile
 20675  22D9  1803               	skipnc
 20676  22DA  150C               	bsf	12,2	;volatile
 20677                           
 20678                           ;LEDs.c: 31: break;
 20679  22DB  0008               	return
 20680  22DC                     i1l6876:	
 20681                           ;LEDs.c: 32: case 4:
 20682                           
 20683                           
 20684                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 20685  22DC  0C72               	rrf	i1set_leds_top@ledState,w
 20686  22DD  1C03               	skipc
 20687  22DE  118C               	bcf	12,3	;volatile
 20688  22DF  1803               	skipnc
 20689  22E0  158C               	bsf	12,3	;volatile
 20690                           
 20691                           ;LEDs.c: 34: break;
 20692  22E1  0008               	return
 20693  22E2                     i1l6878:	
 20694                           ;LEDs.c: 35: case 5:
 20695                           
 20696                           
 20697                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 20698  22E2  0C72               	rrf	i1set_leds_top@ledState,w
 20699  22E3  1C03               	skipc
 20700  22E4  120C               	bcf	12,4	;volatile
 20701  22E5  1803               	skipnc
 20702  22E6  160C               	bsf	12,4	;volatile
 20703                           
 20704                           ;LEDs.c: 39: break;
 20705                           
 20706                           ;LEDs.c: 38: case 6:
 20707                           
 20708                           ;LEDs.c: 37: break;
 20709  22E7  0008               	return
 20710  22E8                     i1l828:	
 20711                           ;LEDs.c: 40: case 100:
 20712                           
 20713                           
 20714                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 20715  22E8  140C               	bsf	12,0	;volatile
 20716                           
 20717                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 20718  22E9  148C               	bsf	12,1	;volatile
 20719                           
 20720                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 20721  22EA  150C               	bsf	12,2	;volatile
 20722                           
 20723                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 20724  22EB  158C               	bsf	12,3	;volatile
 20725                           
 20726                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 20727  22EC  160C               	bsf	12,4	;volatile
 20728                           
 20729                           ;LEDs.c: 47: }
 20730                           
 20731                           ;LEDs.c: 46: break;
 20732  22ED  0008               	return
 20733  22EE                     i1l6882:	
 20734                           
 20735                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20736                           ; Switch size 1, requested type "space"
 20737                           ; Number of cases is 1, Range of values is 0 to 0
 20738                           ; switch strategies available:
 20739                           ; Name         Instructions Cycles
 20740                           ; simple_byte            4     3 (average)
 20741                           ; direct_byte            8     6 (fixed)
 20742                           ; jumptable            260     6 (fixed)
 20743                           ;	Chosen strategy is simple_byte
 20744  22EE  0871               	movf	i1set_leds_top@x+1,w
 20745  22EF  3A00               	xorlw	0	; case 0
 20746  22F0  1903               	skipnz
 20747  22F1  2AF3               	goto	i1l9962
 20748  22F2  2B0A               	goto	i1l829
 20749  22F3                     i1l9962:	
 20750                           
 20751                           ; Switch size 1, requested type "space"
 20752                           ; Number of cases is 7, Range of values is 1 to 100
 20753                           ; switch strategies available:
 20754                           ; Name         Instructions Cycles
 20755                           ; simple_byte           22    12 (average)
 20756                           ; direct_byte          209     9 (fixed)
 20757                           ; jumptable            263     9 (fixed)
 20758                           ;	Chosen strategy is simple_byte
 20759  22F3  0870               	movf	i1set_leds_top@x,w
 20760  22F4  3A01               	xorlw	1	; case 1
 20761  22F5  1903               	skipnz
 20762  22F6  2ACA               	goto	i1l6870
 20763  22F7  3A03               	xorlw	3	; case 2
 20764  22F8  1903               	skipnz
 20765  22F9  2AD0               	goto	i1l6872
 20766  22FA  3A01               	xorlw	1	; case 3
 20767  22FB  1903               	skipnz
 20768  22FC  2AD6               	goto	i1l6874
 20769  22FD  3A07               	xorlw	7	; case 4
 20770  22FE  1903               	skipnz
 20771  22FF  2ADC               	goto	i1l6876
 20772  2300  3A01               	xorlw	1	; case 5
 20773  2301  1903               	skipnz
 20774  2302  2AE2               	goto	i1l6878
 20775  2303  3A03               	xorlw	3	; case 6
 20776  2304  1903               	skipnz
 20777  2305  2B0A               	goto	i1l829
 20778  2306  3A62               	xorlw	98	; case 100
 20779  2307  1903               	skipnz
 20780  2308  2AE8               	goto	i1l828
 20781  2309  2B0A               	goto	i1l829
 20782  230A                     i1l829:	
 20783  230A  0008               	return
 20784  230B                     __end_ofi1_set_leds_top:	
 20785                           
 20786                           	psect	text76
 20787  2E80                     __ptext76:	
 20788 ;; *************** function i1_getModulationSubdivision *****************
 20789 ;; Defined at:
 20790 ;;		line 26 in file "modulation.c"
 20791 ;; Parameters:    Size  Location     Type
 20792 ;;		None
 20793 ;; Auto vars:     Size  Location     Type
 20794 ;;		None
 20795 ;; Return value:  Size  Location     Type
 20796 ;;                  2    0[COMMON] int 
 20797 ;; Registers used:
 20798 ;;		wreg, status,2, status,0
 20799 ;; Tracked objects:
 20800 ;;		On entry : 0/0
 20801 ;;		On exit  : 0/0
 20802 ;;		Unchanged: 0/0
 20803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20804 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20807 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20808 ;;Total ram usage:        2 bytes
 20809 ;; Hardware stack levels used:    1
 20810 ;; This function calls:
 20811 ;;		Nothing
 20812 ;; This function is called by:
 20813 ;;		_isr
 20814 ;; This function uses a non-reentrant model
 20815 ;;
 20816                           
 20817                           
 20818                           ;psect for function i1_getModulationSubdivision
 20819  2E80                     i1_getModulationSubdivision:	
 20820                           
 20821                           ;modulation.c: 27: if (delay_time >= 2400) {
 20822                           
 20823                           ;incstack = 0
 20824                           ; Regs used in i1_getModulationSubdivision: [wreg+status,2+status,0]
 20825  2E80  0020               	movlb	0	; select bank0
 20826  2E81  1BC7               	btfsc	_delay_time+3,7	;volatile
 20827  2E82  2E91               	goto	i1l6892
 20828  2E83  0847               	movf	_delay_time+3,w	;volatile
 20829  2E84  1D03               	btfss	3,2
 20830  2E85  2E8F               	goto	i1l6890
 20831  2E86  0846               	movf	_delay_time+2,w	;volatile
 20832  2E87  1D03               	btfss	3,2
 20833  2E88  2E8F               	goto	i1l6890
 20834  2E89  3060               	movlw	96
 20835  2E8A  0244               	subwf	_delay_time,w	;volatile
 20836  2E8B  3009               	movlw	9
 20837  2E8C  3B45               	subwfb	_delay_time+1,w	;volatile
 20838  2E8D  1C03               	btfss	3,0
 20839  2E8E  2E91               	goto	i1l6892
 20840  2E8F                     i1l6890:	
 20841                           
 20842                           ;modulation.c: 28: modulationSubdivision = 120;
 20843  2E8F  3078               	movlw	120
 20844  2E90  2EA3               	goto	L27
 20845  2E91                     i1l6892:	
 20846                           ;modulation.c: 29: } else if (delay_time >= 600) {
 20847                           
 20848  2E91  0020               	movlb	0	; select bank0
 20849  2E92  1BC7               	btfsc	_delay_time+3,7	;volatile
 20850  2E93  2EA2               	goto	i1l6896
 20851  2E94  0847               	movf	_delay_time+3,w	;volatile
 20852  2E95  1D03               	btfss	3,2
 20853  2E96  2EA0               	goto	i1l6894
 20854  2E97  0846               	movf	_delay_time+2,w	;volatile
 20855  2E98  1D03               	btfss	3,2
 20856  2E99  2EA0               	goto	i1l6894
 20857  2E9A  3058               	movlw	88
 20858  2E9B  0244               	subwf	_delay_time,w	;volatile
 20859  2E9C  3002               	movlw	2
 20860  2E9D  3B45               	subwfb	_delay_time+1,w	;volatile
 20861  2E9E  1C03               	btfss	3,0
 20862  2E9F  2EA2               	goto	i1l6896
 20863  2EA0                     i1l6894:	
 20864                           
 20865                           ;modulation.c: 30: modulationSubdivision = 60;
 20866  2EA0  303C               	movlw	60
 20867  2EA1  2EA3               	goto	L27
 20868  2EA2                     i1l6896:	
 20869                           ;modulation.c: 31: } else {
 20870                           
 20871                           
 20872                           ;modulation.c: 32: modulationSubdivision = 30;
 20873  2EA2  301E               	movlw	30
 20874  2EA3                     L27:	
 20875  2EA3  0023               	movlb	3	; select bank3
 20876  2EA4  00BA               	movwf	_modulationSubdivision^(0+384)
 20877  2EA5  3000               	movlw	0
 20878  2EA6  00BB               	movwf	(_modulationSubdivision^(0+384)+1)
 20879                           
 20880                           ;modulation.c: 33: }
 20881                           ;modulation.c: 34: return modulationSubdivision;
 20882  2EA7  083B               	movf	(_modulationSubdivision+1)^(0+384),w
 20883  2EA8  00F1               	movwf	?i1_getModulationSubdivision+1
 20884  2EA9  083A               	movf	_modulationSubdivision^(0+384),w
 20885  2EAA  00F0               	movwf	?i1_getModulationSubdivision
 20886  2EAB  0008               	return
 20887  2EAC                     __end_ofi1_getModulationSubdivision:	
 20888                           
 20889                           	psect	text77
 20890  243C                     __ptext77:	
 20891 ;; *************** function i1___awdiv *****************
 20892 ;; Defined at:
 20893 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 20894 ;; Parameters:    Size  Location     Type
 20895 ;;  divisor         2    0[COMMON] int 
 20896 ;;  dividend        2    2[COMMON] int 
 20897 ;; Auto vars:     Size  Location     Type
 20898 ;;  __awdiv         2    7[COMMON] int 
 20899 ;;  __awdiv         1    6[COMMON] unsigned char 
 20900 ;;  __awdiv         1    5[COMMON] unsigned char 
 20901 ;; Return value:  Size  Location     Type
 20902 ;;                  2    0[COMMON] int 
 20903 ;; Registers used:
 20904 ;;		wreg, status,2, status,0
 20905 ;; Tracked objects:
 20906 ;;		On entry : 0/0
 20907 ;;		On exit  : 0/0
 20908 ;;		Unchanged: 0/0
 20909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20910 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20911 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20912 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20913 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20914 ;;Total ram usage:        9 bytes
 20915 ;; Hardware stack levels used:    1
 20916 ;; This function calls:
 20917 ;;		Nothing
 20918 ;; This function is called by:
 20919 ;;		_isr
 20920 ;; This function uses a non-reentrant model
 20921 ;;
 20922                           
 20923                           
 20924                           ;psect for function i1___awdiv
 20925  243C                     i1___awdiv:	
 20926                           
 20927                           ;incstack = 0
 20928                           ; Regs used in i1___awdiv: [wreg+status,2+status,0]
 20929  243C  01F6               	clrf	i1___awdiv@sign
 20930  243D  1FF1               	btfss	i1___awdiv@divisor+1,7
 20931  243E  2C46               	goto	i1l6908
 20932  243F  09F0               	comf	i1___awdiv@divisor,f
 20933  2440  09F1               	comf	i1___awdiv@divisor+1,f
 20934  2441  0AF0               	incf	i1___awdiv@divisor,f
 20935  2442  1903               	skipnz
 20936  2443  0AF1               	incf	i1___awdiv@divisor+1,f
 20937  2444  01F6               	clrf	i1___awdiv@sign
 20938  2445  0AF6               	incf	i1___awdiv@sign,f
 20939  2446                     i1l6908:	
 20940  2446  1FF3               	btfss	i1___awdiv@dividend+1,7
 20941  2447  2C51               	goto	i1l6914
 20942  2448  09F2               	comf	i1___awdiv@dividend,f
 20943  2449  09F3               	comf	i1___awdiv@dividend+1,f
 20944  244A  0AF2               	incf	i1___awdiv@dividend,f
 20945  244B  1903               	skipnz
 20946  244C  0AF3               	incf	i1___awdiv@dividend+1,f
 20947  244D  3001               	movlw	1
 20948  244E  00F4               	movwf	??i1___awdiv
 20949  244F  0874               	movf	??i1___awdiv,w
 20950  2450  06F6               	xorwf	i1___awdiv@sign,f
 20951  2451                     i1l6914:	
 20952  2451  01F7               	clrf	i1___awdiv@quotient
 20953  2452  01F8               	clrf	i1___awdiv@quotient+1
 20954  2453  0870               	movf	i1___awdiv@divisor,w
 20955  2454  0471               	iorwf	i1___awdiv@divisor+1,w
 20956  2455  1903               	btfsc	3,2
 20957  2456  2C80               	goto	i1l6936
 20958  2457  01F5               	clrf	i1___awdiv@counter
 20959  2458  0AF5               	incf	i1___awdiv@counter,f
 20960  2459                     i1l6924:	
 20961  2459  1BF1               	btfsc	i1___awdiv@divisor+1,7
 20962  245A  2C65               	goto	i1l6926
 20963  245B  3001               	movlw	1
 20964  245C                     u672_25:	
 20965  245C  35F0               	lslf	i1___awdiv@divisor,f
 20966  245D  0DF1               	rlf	i1___awdiv@divisor+1,f
 20967  245E  0B89               	decfsz	9,f
 20968  245F  2C5C               	goto	u672_25
 20969  2460  3001               	movlw	1
 20970  2461  00F4               	movwf	??i1___awdiv
 20971  2462  0874               	movf	??i1___awdiv,w
 20972  2463  07F5               	addwf	i1___awdiv@counter,f
 20973  2464  2C59               	goto	i1l6924
 20974  2465                     i1l6926:	
 20975  2465  3001               	movlw	1
 20976  2466                     u674_25:	
 20977  2466  35F7               	lslf	i1___awdiv@quotient,f
 20978  2467  0DF8               	rlf	i1___awdiv@quotient+1,f
 20979  2468  0B89               	decfsz	9,f
 20980  2469  2C66               	goto	u674_25
 20981  246A  0871               	movf	i1___awdiv@divisor+1,w
 20982  246B  0273               	subwf	i1___awdiv@dividend+1,w
 20983  246C  1D03               	skipz
 20984  246D  2C70               	goto	u675_25
 20985  246E  0870               	movf	i1___awdiv@divisor,w
 20986  246F  0272               	subwf	i1___awdiv@dividend,w
 20987  2470                     u675_25:	
 20988  2470  1C03               	skipc
 20989  2471  2C77               	goto	i1l6932
 20990  2472  0870               	movf	i1___awdiv@divisor,w
 20991  2473  02F2               	subwf	i1___awdiv@dividend,f
 20992  2474  0871               	movf	i1___awdiv@divisor+1,w
 20993  2475  3BF3               	subwfb	i1___awdiv@dividend+1,f
 20994  2476  1477               	bsf	i1___awdiv@quotient,0
 20995  2477                     i1l6932:	
 20996  2477  3001               	movlw	1
 20997  2478                     u676_25:	
 20998  2478  36F1               	lsrf	i1___awdiv@divisor+1,f
 20999  2479  0CF0               	rrf	i1___awdiv@divisor,f
 21000  247A  0B89               	decfsz	9,f
 21001  247B  2C78               	goto	u676_25
 21002  247C  3001               	movlw	1
 21003  247D  02F5               	subwf	i1___awdiv@counter,f
 21004  247E  1D03               	btfss	3,2
 21005  247F  2C65               	goto	i1l6926
 21006  2480                     i1l6936:	
 21007  2480  0876               	movf	i1___awdiv@sign,w
 21008  2481  1903               	btfsc	3,2
 21009  2482  2C88               	goto	i1l6940
 21010  2483  09F7               	comf	i1___awdiv@quotient,f
 21011  2484  09F8               	comf	i1___awdiv@quotient+1,f
 21012  2485  0AF7               	incf	i1___awdiv@quotient,f
 21013  2486  1903               	skipnz
 21014  2487  0AF8               	incf	i1___awdiv@quotient+1,f
 21015  2488                     i1l6940:	
 21016  2488  0878               	movf	i1___awdiv@quotient+1,w
 21017  2489  00F1               	movwf	?i1___awdiv+1
 21018  248A  0877               	movf	i1___awdiv@quotient,w
 21019  248B  00F0               	movwf	?i1___awdiv
 21020  248C  0008               	return
 21021  248D                     __end_ofi1___awdiv:	
 21022                           
 21023                           	psect	text78
 21024  21FD                     __ptext78:	
 21025 ;; *************** function _modulation *****************
 21026 ;; Defined at:
 21027 ;;		line 240 in file "user.c"
 21028 ;; Parameters:    Size  Location     Type
 21029 ;;  x               4   14[BANK0 ] long 
 21030 ;;  y               4   18[BANK0 ] long 
 21031 ;; Auto vars:     Size  Location     Type
 21032 ;;		None
 21033 ;; Return value:  Size  Location     Type
 21034 ;;                  4   14[BANK0 ] long 
 21035 ;; Registers used:
 21036 ;;		wreg, status,2, status,0, pclath, cstack
 21037 ;; Tracked objects:
 21038 ;;		On entry : 0/0
 21039 ;;		On exit  : 0/0
 21040 ;;		Unchanged: 0/0
 21041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 21042 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21044 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21045 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21046 ;;Total ram usage:       12 bytes
 21047 ;; Hardware stack levels used:    1
 21048 ;; Hardware stack levels required when called:    1
 21049 ;; This function calls:
 21050 ;;		i1___aldiv
 21051 ;;		i1___lmul
 21052 ;; This function is called by:
 21053 ;;		_isr
 21054 ;; This function uses a non-reentrant model
 21055 ;;
 21056                           
 21057                           
 21058                           ;psect for function _modulation
 21059  21FD                     _modulation:	
 21060                           
 21061                           ;user.c: 243: return (127500 + (y * x)) / 1000;
 21062                           
 21063                           ;incstack = 0
 21064                           ; Regs used in _modulation: [wreg+status,2+status,0+pclath+cstack]
 21065  21FD  3000               	movlw	0
 21066  21FE  0020               	movlb	0	; select bank0
 21067  21FF  00A3               	movwf	i1___aldiv@divisor+3
 21068  2200  3000               	movlw	0
 21069  2201  00A2               	movwf	i1___aldiv@divisor+2
 21070  2202  3003               	movlw	3
 21071  2203  00A1               	movwf	i1___aldiv@divisor+1
 21072  2204  30E8               	movlw	232
 21073  2205  00A0               	movwf	i1___aldiv@divisor
 21074  2206  300C               	movlw	12
 21075  2207  00B6               	movwf	??_modulation
 21076  2208  30F2               	movlw	242
 21077  2209  00B7               	movwf	??_modulation+1
 21078  220A  3001               	movlw	1
 21079  220B  00B8               	movwf	??_modulation+2
 21080  220C  3000               	movlw	0
 21081  220D  00B9               	movwf	??_modulation+3
 21082  220E  0835               	movf	modulation@y+3,w
 21083  220F  00F3               	movwf	i1___lmul@multiplier+3
 21084  2210  0834               	movf	modulation@y+2,w
 21085  2211  00F2               	movwf	i1___lmul@multiplier+2
 21086  2212  0833               	movf	modulation@y+1,w
 21087  2213  00F1               	movwf	i1___lmul@multiplier+1
 21088  2214  0832               	movf	modulation@y,w
 21089  2215  00F0               	movwf	i1___lmul@multiplier
 21090  2216  0831               	movf	modulation@x+3,w
 21091  2217  00F7               	movwf	i1___lmul@multiplicand+3
 21092  2218  0830               	movf	modulation@x+2,w
 21093  2219  00F6               	movwf	i1___lmul@multiplicand+2
 21094  221A  082F               	movf	modulation@x+1,w
 21095  221B  00F5               	movwf	i1___lmul@multiplicand+1
 21096  221C  082E               	movf	modulation@x,w
 21097  221D  00F4               	movwf	i1___lmul@multiplicand
 21098  221E  31AE  26DA  31A1   	fcall	i1___lmul
 21099  2221  0870               	movf	?i1___lmul,w
 21100  2222  0020               	movlb	0	; select bank0
 21101  2223  07B6               	addwf	??_modulation,f
 21102  2224  0871               	movf	?i1___lmul+1,w
 21103  2225  3DB7               	addwfc	??_modulation+1,f
 21104  2226  0872               	movf	?i1___lmul+2,w
 21105  2227  3DB8               	addwfc	??_modulation+2,f
 21106  2228  0873               	movf	?i1___lmul+3,w
 21107  2229  3DB9               	addwfc	??_modulation+3,f
 21108  222A  0839               	movf	??_modulation+3,w
 21109  222B  00A7               	movwf	i1___aldiv@dividend+3
 21110  222C  0838               	movf	??_modulation+2,w
 21111  222D  00A6               	movwf	i1___aldiv@dividend+2
 21112  222E  0837               	movf	??_modulation+1,w
 21113  222F  00A5               	movwf	i1___aldiv@dividend+1
 21114  2230  0836               	movf	??_modulation,w
 21115  2231  00A4               	movwf	i1___aldiv@dividend
 21116  2232  31A7  277E         	fcall	i1___aldiv
 21117  2234  0020               	movlb	0	; select bank0
 21118  2235  0823               	movf	?i1___aldiv+3,w
 21119  2236  00B1               	movwf	?_modulation+3
 21120  2237  0822               	movf	?i1___aldiv+2,w
 21121  2238  00B0               	movwf	?_modulation+2
 21122  2239  0821               	movf	?i1___aldiv+1,w
 21123  223A  00AF               	movwf	?_modulation+1
 21124  223B  0820               	movf	?i1___aldiv,w
 21125  223C  00AE               	movwf	?_modulation
 21126  223D  0008               	return
 21127  223E                     __end_of_modulation:	
 21128                           
 21129                           	psect	text79
 21130  2EDA                     __ptext79:	
 21131 ;; *************** function i1___lmul *****************
 21132 ;; Defined at:
 21133 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 21134 ;; Parameters:    Size  Location     Type
 21135 ;;  multiplier      4    0[COMMON] unsigned long 
 21136 ;;  multiplicand    4    4[COMMON] unsigned long 
 21137 ;; Auto vars:     Size  Location     Type
 21138 ;;  __lmul          4    8[COMMON] unsigned long 
 21139 ;; Return value:  Size  Location     Type
 21140 ;;                  4    0[COMMON] unsigned long 
 21141 ;; Registers used:
 21142 ;;		wreg, status,2, status,0
 21143 ;; Tracked objects:
 21144 ;;		On entry : 0/0
 21145 ;;		On exit  : 0/0
 21146 ;;		Unchanged: 0/0
 21147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 21148 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21149 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21151 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21152 ;;Total ram usage:       12 bytes
 21153 ;; Hardware stack levels used:    1
 21154 ;; This function calls:
 21155 ;;		Nothing
 21156 ;; This function is called by:
 21157 ;;		_modulation
 21158 ;; This function uses a non-reentrant model
 21159 ;;
 21160                           
 21161                           
 21162                           ;psect for function i1___lmul
 21163  2EDA                     i1___lmul:	
 21164                           
 21165                           ;incstack = 0
 21166                           ; Regs used in i1___lmul: [wreg+status,2+status,0]
 21167  2EDA  3000               	movlw	0
 21168  2EDB  00FB               	movwf	i1___lmul@product+3
 21169  2EDC  3000               	movlw	0
 21170  2EDD  00FA               	movwf	i1___lmul@product+2
 21171  2EDE  3000               	movlw	0
 21172  2EDF  00F9               	movwf	i1___lmul@product+1
 21173  2EE0  3000               	movlw	0
 21174  2EE1  00F8               	movwf	i1___lmul@product
 21175  2EE2                     i1l6174:	
 21176  2EE2  1C70               	btfss	i1___lmul@multiplier,0
 21177  2EE3  2EEC               	goto	i1l6178
 21178  2EE4  0874               	movf	i1___lmul@multiplicand,w
 21179  2EE5  07F8               	addwf	i1___lmul@product,f
 21180  2EE6  0875               	movf	i1___lmul@multiplicand+1,w
 21181  2EE7  3DF9               	addwfc	i1___lmul@product+1,f
 21182  2EE8  0876               	movf	i1___lmul@multiplicand+2,w
 21183  2EE9  3DFA               	addwfc	i1___lmul@product+2,f
 21184  2EEA  0877               	movf	i1___lmul@multiplicand+3,w
 21185  2EEB  3DFB               	addwfc	i1___lmul@product+3,f
 21186  2EEC                     i1l6178:	
 21187  2EEC  3001               	movlw	1
 21188  2EED                     u548_25:	
 21189  2EED  35F4               	lslf	i1___lmul@multiplicand,f
 21190  2EEE  0DF5               	rlf	i1___lmul@multiplicand+1,f
 21191  2EEF  0DF6               	rlf	i1___lmul@multiplicand+2,f
 21192  2EF0  0DF7               	rlf	i1___lmul@multiplicand+3,f
 21193  2EF1  0B89               	decfsz	9,f
 21194  2EF2  2EED               	goto	u548_25
 21195  2EF3  3001               	movlw	1
 21196  2EF4                     u549_25:	
 21197  2EF4  36F3               	lsrf	i1___lmul@multiplier+3,f
 21198  2EF5  0CF2               	rrf	i1___lmul@multiplier+2,f
 21199  2EF6  0CF1               	rrf	i1___lmul@multiplier+1,f
 21200  2EF7  0CF0               	rrf	i1___lmul@multiplier,f
 21201  2EF8  0B89               	decfsz	9,f
 21202  2EF9  2EF4               	goto	u549_25
 21203  2EFA  0873               	movf	i1___lmul@multiplier+3,w
 21204  2EFB  0472               	iorwf	i1___lmul@multiplier+2,w
 21205  2EFC  0471               	iorwf	i1___lmul@multiplier+1,w
 21206  2EFD  0470               	iorwf	i1___lmul@multiplier,w
 21207  2EFE  1D03               	skipz
 21208  2EFF  2EE2               	goto	i1l6174
 21209  2F00  087B               	movf	i1___lmul@product+3,w
 21210  2F01  00F3               	movwf	?i1___lmul+3
 21211  2F02  087A               	movf	i1___lmul@product+2,w
 21212  2F03  00F2               	movwf	?i1___lmul+2
 21213  2F04  0879               	movf	i1___lmul@product+1,w
 21214  2F05  00F1               	movwf	?i1___lmul+1
 21215  2F06  0878               	movf	i1___lmul@product,w
 21216  2F07  00F0               	movwf	?i1___lmul
 21217  2F08  0008               	return
 21218  2F09                     __end_ofi1___lmul:	
 21219                           
 21220                           	psect	text80
 21221  277E                     __ptext80:	
 21222 ;; *************** function i1___aldiv *****************
 21223 ;; Defined at:
 21224 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
 21225 ;; Parameters:    Size  Location     Type
 21226 ;;  divisor         4    0[BANK0 ] long 
 21227 ;;  dividend        4    4[BANK0 ] long 
 21228 ;; Auto vars:     Size  Location     Type
 21229 ;;  __aldiv         4   10[BANK0 ] long 
 21230 ;;  __aldiv         1    9[BANK0 ] unsigned char 
 21231 ;;  __aldiv         1    8[BANK0 ] unsigned char 
 21232 ;; Return value:  Size  Location     Type
 21233 ;;                  4    0[BANK0 ] long 
 21234 ;; Registers used:
 21235 ;;		wreg, status,2, status,0
 21236 ;; Tracked objects:
 21237 ;;		On entry : 0/0
 21238 ;;		On exit  : 0/0
 21239 ;;		Unchanged: 0/0
 21240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 21241 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21242 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21243 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21244 ;;      Totals:         1      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21245 ;;Total ram usage:       15 bytes
 21246 ;; Hardware stack levels used:    1
 21247 ;; This function calls:
 21248 ;;		Nothing
 21249 ;; This function is called by:
 21250 ;;		_modulation
 21251 ;; This function uses a non-reentrant model
 21252 ;;
 21253                           
 21254                           
 21255                           ;psect for function i1___aldiv
 21256  277E                     i1___aldiv:	
 21257                           
 21258                           ;incstack = 0
 21259                           ; Regs used in i1___aldiv: [wreg+status,2+status,0]
 21260  277E  0020               	movlb	0	; select bank0
 21261  277F  01A9               	clrf	i1___aldiv@sign
 21262  2780  1FA3               	btfss	i1___aldiv@divisor+3,7
 21263  2781  2F8F               	goto	i1l2077
 21264  2782  09A0               	comf	i1___aldiv@divisor,f
 21265  2783  09A1               	comf	i1___aldiv@divisor+1,f
 21266  2784  09A2               	comf	i1___aldiv@divisor+2,f
 21267  2785  09A3               	comf	i1___aldiv@divisor+3,f
 21268  2786  0AA0               	incf	i1___aldiv@divisor,f
 21269  2787  1903               	skipnz
 21270  2788  0AA1               	incf	i1___aldiv@divisor+1,f
 21271  2789  1903               	skipnz
 21272  278A  0AA2               	incf	i1___aldiv@divisor+2,f
 21273  278B  1903               	skipnz
 21274  278C  0AA3               	incf	i1___aldiv@divisor+3,f
 21275  278D  01A9               	clrf	i1___aldiv@sign
 21276  278E  0AA9               	incf	i1___aldiv@sign,f
 21277  278F                     i1l2077:	
 21278  278F  1FA7               	btfss	i1___aldiv@dividend+3,7
 21279  2790  2FA0               	goto	i1l6196
 21280  2791  09A4               	comf	i1___aldiv@dividend,f
 21281  2792  09A5               	comf	i1___aldiv@dividend+1,f
 21282  2793  09A6               	comf	i1___aldiv@dividend+2,f
 21283  2794  09A7               	comf	i1___aldiv@dividend+3,f
 21284  2795  0AA4               	incf	i1___aldiv@dividend,f
 21285  2796  1903               	skipnz
 21286  2797  0AA5               	incf	i1___aldiv@dividend+1,f
 21287  2798  1903               	skipnz
 21288  2799  0AA6               	incf	i1___aldiv@dividend+2,f
 21289  279A  1903               	skipnz
 21290  279B  0AA7               	incf	i1___aldiv@dividend+3,f
 21291  279C  3001               	movlw	1
 21292  279D  00FC               	movwf	??i1___aldiv
 21293  279E  087C               	movf	??i1___aldiv,w
 21294  279F  06A9               	xorwf	i1___aldiv@sign,f
 21295  27A0                     i1l6196:	
 21296  27A0  3000               	movlw	0
 21297  27A1  00AD               	movwf	i1___aldiv@quotient+3
 21298  27A2  3000               	movlw	0
 21299  27A3  00AC               	movwf	i1___aldiv@quotient+2
 21300  27A4  3000               	movlw	0
 21301  27A5  00AB               	movwf	i1___aldiv@quotient+1
 21302  27A6  3000               	movlw	0
 21303  27A7  00AA               	movwf	i1___aldiv@quotient
 21304  27A8  0823               	movf	i1___aldiv@divisor+3,w
 21305  27A9  0422               	iorwf	i1___aldiv@divisor+2,w
 21306  27AA  0421               	iorwf	i1___aldiv@divisor+1,w
 21307  27AB  0420               	iorwf	i1___aldiv@divisor,w
 21308  27AC  1903               	skipnz
 21309  27AD  2FE9               	goto	i1l6218
 21310  27AE  01A8               	clrf	i1___aldiv@counter
 21311  27AF  0AA8               	incf	i1___aldiv@counter,f
 21312  27B0                     i1l6204:	
 21313  27B0  1BA3               	btfsc	i1___aldiv@divisor+3,7
 21314  27B1  2FBE               	goto	i1l6206
 21315  27B2  3001               	movlw	1
 21316  27B3                     u554_25:	
 21317  27B3  35A0               	lslf	i1___aldiv@divisor,f
 21318  27B4  0DA1               	rlf	i1___aldiv@divisor+1,f
 21319  27B5  0DA2               	rlf	i1___aldiv@divisor+2,f
 21320  27B6  0DA3               	rlf	i1___aldiv@divisor+3,f
 21321  27B7  0B89               	decfsz	9,f
 21322  27B8  2FB3               	goto	u554_25
 21323  27B9  3001               	movlw	1
 21324  27BA  00FC               	movwf	??i1___aldiv
 21325  27BB  087C               	movf	??i1___aldiv,w
 21326  27BC  07A8               	addwf	i1___aldiv@counter,f
 21327  27BD  2FB0               	goto	i1l6204
 21328  27BE                     i1l6206:	
 21329  27BE  3001               	movlw	1
 21330  27BF                     u556_25:	
 21331  27BF  35AA               	lslf	i1___aldiv@quotient,f
 21332  27C0  0DAB               	rlf	i1___aldiv@quotient+1,f
 21333  27C1  0DAC               	rlf	i1___aldiv@quotient+2,f
 21334  27C2  0DAD               	rlf	i1___aldiv@quotient+3,f
 21335  27C3  0B89               	decfsz	9,f
 21336  27C4  2FBF               	goto	u556_25
 21337  27C5  0823               	movf	i1___aldiv@divisor+3,w
 21338  27C6  0227               	subwf	i1___aldiv@dividend+3,w
 21339  27C7  1D03               	skipz
 21340  27C8  2FD3               	goto	u557_25
 21341  27C9  0822               	movf	i1___aldiv@divisor+2,w
 21342  27CA  0226               	subwf	i1___aldiv@dividend+2,w
 21343  27CB  1D03               	skipz
 21344  27CC  2FD3               	goto	u557_25
 21345  27CD  0821               	movf	i1___aldiv@divisor+1,w
 21346  27CE  0225               	subwf	i1___aldiv@dividend+1,w
 21347  27CF  1D03               	skipz
 21348  27D0  2FD3               	goto	u557_25
 21349  27D1  0820               	movf	i1___aldiv@divisor,w
 21350  27D2  0224               	subwf	i1___aldiv@dividend,w
 21351  27D3                     u557_25:	
 21352  27D3  1C03               	skipc
 21353  27D4  2FDE               	goto	i1l6214
 21354  27D5  0820               	movf	i1___aldiv@divisor,w
 21355  27D6  02A4               	subwf	i1___aldiv@dividend,f
 21356  27D7  0821               	movf	i1___aldiv@divisor+1,w
 21357  27D8  3BA5               	subwfb	i1___aldiv@dividend+1,f
 21358  27D9  0822               	movf	i1___aldiv@divisor+2,w
 21359  27DA  3BA6               	subwfb	i1___aldiv@dividend+2,f
 21360  27DB  0823               	movf	i1___aldiv@divisor+3,w
 21361  27DC  3BA7               	subwfb	i1___aldiv@dividend+3,f
 21362  27DD  142A               	bsf	i1___aldiv@quotient,0
 21363  27DE                     i1l6214:	
 21364  27DE  3001               	movlw	1
 21365  27DF                     u558_25:	
 21366  27DF  36A3               	lsrf	i1___aldiv@divisor+3,f
 21367  27E0  0CA2               	rrf	i1___aldiv@divisor+2,f
 21368  27E1  0CA1               	rrf	i1___aldiv@divisor+1,f
 21369  27E2  0CA0               	rrf	i1___aldiv@divisor,f
 21370  27E3  0B89               	decfsz	9,f
 21371  27E4  2FDF               	goto	u558_25
 21372  27E5  3001               	movlw	1
 21373  27E6  02A8               	subwf	i1___aldiv@counter,f
 21374  27E7  1D03               	btfss	3,2
 21375  27E8  2FBE               	goto	i1l6206
 21376  27E9                     i1l6218:	
 21377  27E9  0829               	movf	i1___aldiv@sign,w
 21378  27EA  1903               	btfsc	3,2
 21379  27EB  2FF7               	goto	i1l6222
 21380  27EC  09AA               	comf	i1___aldiv@quotient,f
 21381  27ED  09AB               	comf	i1___aldiv@quotient+1,f
 21382  27EE  09AC               	comf	i1___aldiv@quotient+2,f
 21383  27EF  09AD               	comf	i1___aldiv@quotient+3,f
 21384  27F0  0AAA               	incf	i1___aldiv@quotient,f
 21385  27F1  1903               	skipnz
 21386  27F2  0AAB               	incf	i1___aldiv@quotient+1,f
 21387  27F3  1903               	skipnz
 21388  27F4  0AAC               	incf	i1___aldiv@quotient+2,f
 21389  27F5  1903               	skipnz
 21390  27F6  0AAD               	incf	i1___aldiv@quotient+3,f
 21391  27F7                     i1l6222:	
 21392  27F7  082D               	movf	i1___aldiv@quotient+3,w
 21393  27F8  00A3               	movwf	?i1___aldiv+3
 21394  27F9  082C               	movf	i1___aldiv@quotient+2,w
 21395  27FA  00A2               	movwf	?i1___aldiv+2
 21396  27FB  082B               	movf	i1___aldiv@quotient+1,w
 21397  27FC  00A1               	movwf	?i1___aldiv+1
 21398  27FD  082A               	movf	i1___aldiv@quotient,w
 21399  27FE  00A0               	movwf	?i1___aldiv
 21400  27FF  0008               	return
 21401  2800                     __end_ofi1___aldiv:	
 21402  007E                     btemp	set	126	;btemp
 21403  007E                     int$flags	set	126
 21404  007E                     wtemp	set	126
 21405  007E                     wtemp0	set	126
 21406  0080                     wtemp1	set	128
 21407  0082                     wtemp2	set	130
 21408  0084                     wtemp3	set	132
 21409  0086                     wtemp4	set	134
 21410  0088                     wtemp5	set	136
 21411  007F                     wtemp6	set	127
 21412  007E                     ttemp	set	126
 21413  007E                     ttemp0	set	126
 21414  0081                     ttemp1	set	129
 21415  0084                     ttemp2	set	132
 21416  0087                     ttemp3	set	135
 21417  007F                     ttemp4	set	127
 21418  007E                     ltemp	set	126
 21419  007E                     ltemp0	set	126
 21420  0082                     ltemp1	set	130
 21421  0086                     ltemp2	set	134
 21422  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    84
    Data        49
    BSS         297
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     32      64
    BANK1            80     80      80
    BANK2            80     74      77
    BANK3            80      9      80
    BANK4            80      8      76
    BANK5            80      9      53
    BANK6            80      0      64
    BANK7            80      0      64
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           26      0       0
    BANK12            0      0       0
    BANK13            0      0       0
    BANK14            0      0       0
    BANK15            0      0       0
    BANK16            0      0       0
    BANK17            0      0       0
    BANK18            0      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK2[2]), floor@expon(BANK2[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), sin@coeff_a(CODE[15]), sin@coeff_b(CODE[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _modulation->i1___aldiv
    i1___aldiv->i1___lmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _isr->_modulation
    _modulation->i1___aldiv

Critical Paths under _main in BANK1

    _main->_map
    _update_selectMode->_setExpressionDisplay
    _update_selectMode->_setPresetDisplay
    _updateSwitchTap->_setDoublePressState
    _updateSwitchBypass->_setDoublePressState
    _setDoublePressState->_showSave
    _showSave->_ring_tactiles
    _solidring_tactiles->_wait_ms
    _ring_tactiles->_wait_ms
    _setPedalMode->_setExpressionDisplay
    _setPedalMode->_setPresetDisplay
    _setPresetDisplay->_set_leds_top
    _setExpressionDisplay->_set_leds_top
    _resetRingLEDs->_set_leds_top
    ___lltoft->___ftpack
    _read_top_tactile->_wait_ms
    _read_bottom_tactile->_wait_ms
    _map->___ftdiv
    _initSwitchBypass->_setSwitchBypassState
    _setSwitchBypassState->_setSwitchBypassRelays
    _setSwitchBypassRelays->_wait_ms
    _wait_ms->___lmul
    ___fttol->_map
    ___altoft->___ftpack
    ___ftmul->___awtoft
    ___ftadd->___ftneg
    ___ftneg->___ftmul
    ___ftdiv->___ftadd
    ___awtoft->___ftpack
    _ReadSavedSettings->_set_leds_top

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_scaleA100kPot
    _main->_scaleA10kPot
    _main->_scaleiA10kPot
    _updateModulationArray->_modSquare
    _modTri->___fttol
    _modSquare->_modCos
    _modCos->___wmul
    _modSawRev->_modSaw
    _modSaw->___fttol
    _set_subdivision->___fttol
    _scaleiA10kPot->_pow
    _scaleA10kPot->_pow
    _scaleA100kPot->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _getModulationDelayTime->___fttol
    _calcCosArray->_cos
    _cos->_sin
    _sin->_eval_poly
    _floor->___fttol
    _eval_poly->___wmul
    ___wmul->___fttol
    ___ftsub->_floor

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_scaleA100kPot
    _main->_scaleA10kPot
    _main->_scaleiA10kPot

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _isr in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _isr in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _isr in BANK18

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                20    20      0  944278
                                              0 BANK4      8     8      0
                                              0 BANK5      9     9      0
                _ConfigureOscillator
                            _InitApp
                     _InitializeTaps
                  _ReadSavedSettings
                          _USARTInit
                           ___awtoft
                            ___fttol
                        _adc_convert
                       _calcCosArray
             _getModulationDelayTime
                   _initSwitchBypass
                                _map
                _read_bottom_tactile
                   _read_top_tactile
                      _scaleA100kPot
                       _scaleA10kPot
                      _scaleiA10kPot
                    _set_subdivision
              _updateModulationArray
                 _updateSwitchBypass
                    _updateSwitchTap
                        _update_mode
                  _update_selectMode
 ---------------------------------------------------------------------------------
 (1) _update_selectMode                                    1     1      0    5976
                                              7 BANK1      1     1      0
               _setExpressionDisplay
                   _setPresetDisplay
 ---------------------------------------------------------------------------------
 (1) _update_mode                                          1     1      0   11828
                                              7 BANK1      1     1      0
                      _resetRingLEDs
                       _setPedalMode
 ---------------------------------------------------------------------------------
 (1) _updateSwitchTap                                      9     9      0   27947
                                             28 BANK1      9     9      0
                            ___aldiv
                _setDoublePressState
                    _setLongTapState
 ---------------------------------------------------------------------------------
 (2) _setLongTapState                                      4     2      2     247
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     683
                                              0 BANK1     15     7      8
 ---------------------------------------------------------------------------------
 (1) _updateSwitchBypass                                   2     2      0   31922
                                             28 BANK1      2     2      0
                _setDoublePressState
                 _setLongBypassState
              _setSwitchBypassRelays
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setLongBypassState                                   4     2      2     355
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) _setDoublePressState                                  4     2      2   26779
                                             24 BANK1      4     2      2
                      _resetRingLEDs
                       _setPedalMode
                   _setPresetDisplay
                           _showSave
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _showSave                                             1     1      0    9777
                                             23 BANK1      1     1      0
                      _ring_tactiles
                 _solidring_tactiles
 ---------------------------------------------------------------------------------
 (4) _solidring_tactiles                                   3     3      0    4822
                                             18 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (4) _ring_tactiles                                        5     5      0    4955
                                             18 BANK1      5     5      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _setPedalMode                                         0     0      0    8902
                      _resetRingLEDs
               _setExpressionDisplay
                   _setPresetDisplay
 ---------------------------------------------------------------------------------
 (2) _setPresetDisplay                                     3     3      0    3019
                                              4 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (2) _setExpressionDisplay                                 3     3      0    2957
                                              4 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _resetRingLEDs                                        0     0      0    2926
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (1) _updateModulationArray                               12    12      0  173640
                                             48 BANK2     12    12      0
                            ___awdiv
                           ___awtoft
                             ___wmul
           _getModulationSubdivision
                             _modCos
                             _modSaw
                          _modSawRev
                          _modSquare
                             _modTri
 ---------------------------------------------------------------------------------
 (2) _modTri                                              18    12      6   31918
                                             14 BANK2     18    12      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) _modSquare                                            8     2      6   37516
                                             40 BANK2      8     2      6
                           ___awtoft (ARG)
                             ___ftge
                             _modCos
 ---------------------------------------------------------------------------------
 (3) _modCos                                              20    14      6   33033
                                             20 BANK2     20    14      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _modSawRev                                            8     2      6   32189
                                             34 BANK2      8     2      6
                           ___awtoft (ARG)
                             _modSaw
 ---------------------------------------------------------------------------------
 (3) _modSaw                                              20    14      6   31973
                                             14 BANK2     20    14      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     837
                                              0 BANK1      9     5      4
 ---------------------------------------------------------------------------------
 (1) _set_subdivision                                      9     5      4   14526
                                             14 BANK2      9     5      4
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _scaleiA10kPot                                       12     9      3  177510
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (1) _scaleA10kPot                                        12     9      3  166860
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (1) _scaleA100kPot                                       12     9      3  162707
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (2) _pow                                                 18    12      6  145969
                                             53 BANK2     18    12      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  6     3      3   44643
                                             30 BANK2      6     3      3
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                 13    10      3   80982
                                             40 BANK2     13    10      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                               10     5      5    6973
                                             30 BANK2     10     5      5
                             ___ftge
                            ___ftneg
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    2763
                                              8 BANK1      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _read_top_tactile                                     1     1      0    3879
                                             18 BANK1      1     1      0
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _read_bottom_tactile                                  1     1      0    2709
                                             18 BANK1      1     1      0
                    _set_leds_bottom
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _map                                                 18     3     15   26716
                                             62 BANK1     18     3     15
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (1) _initSwitchBypass                                     2     2      0    2667
                                             26 BANK1      2     2      0
               _getSwitchBypassState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setSwitchBypassState                                 4     2      2    2633
                                             22 BANK1      4     2      2
              _setSwitchBypassRelays
 ---------------------------------------------------------------------------------
 (3) _setSwitchBypassRelays                                4     2      2    2155
                                             18 BANK1      4     2      2
            _updateSwitchBypassState
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _wait_ms                                              6     4      2    1831
                                             12 BANK1      6     4      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     374
                                              0 BANK1     12     4      8
 ---------------------------------------------------------------------------------
 (4) _updateSwitchBypassState                              2     0      2      77
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _getSwitchBypassState                                 2     0      2       0
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _getModulationDelayTime                               0     0      0   15810
                           ___altoft
                           ___awtoft
                            ___ftdiv
                            ___fttol
           _getModulationSubdivision
 ---------------------------------------------------------------------------------
 (2) _getModulationSubdivision                             2     0      2       0
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _calcCosArray                                         8     8      0  109718
                                             50 BANK2      8     8      0
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                             ___wmul
                                _cos
 ---------------------------------------------------------------------------------
 (2) _cos                                                  9     6      3   89389
                                             44 BANK2      6     3      3
                            ___ftadd
                             ___ftge
                                _sin
 ---------------------------------------------------------------------------------
 (3) _sin                                                 14    11      3   76452
                                             30 BANK2     14    11      3
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                          _eval_poly
                              _floor
 ---------------------------------------------------------------------------------
 (4) _floor                                                9     6      3   18482
                                             14 BANK2      9     6      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                6     2      4     630
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4    1757
                                              0 BANK2     14    10      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                                _map (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    4202
                                              0 BANK1      9     3      6
 ---------------------------------------------------------------------------------
 (5) ___altoft                                             8     4      4    2942
                                              8 BANK1      8     4      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           10     3      7   18627
                                             20 BANK2     10     3      7
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1060
                                             14 BANK2      6     2      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    7960
                                             14 BANK1     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    8987
                                             23 BANK2      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
                              _floor (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    8429
                                             33 BANK1     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3    2221
                                             30 BANK1      3     0      3
                            ___ftmul (ARG)
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    6700
                                             46 BANK1     16    10      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    4411
                                              8 BANK1      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2584
                                              0 BANK1      8     3      5
 ---------------------------------------------------------------------------------
 (1) _adc_convert                                          4     2      2      31
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (1) _USARTInit                                            3     1      2     108
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (1) _ReadSavedSettings                                    1     1      0    3253
                                              4 BANK1      1     1      0
                     _FLASH_ReadWord
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _set_leds_top                                         4     0      4    2048
                                              0 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 (3) _set_leds_bottom                                      2     0      2     878
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadWord                                       3     1      2     327
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (1) _InitializeTaps                                       3     3      0      99
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
                           _init_adc
                           _init_pwm
 ---------------------------------------------------------------------------------
 (2) _init_pwm                                             0     0      0       0
                        _init_timer0
                        _init_timer2
 ---------------------------------------------------------------------------------
 (3) _init_timer2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                  7     7      0    1301
                                             13 COMMON     1     1      0
                                             26 BANK0      6     6      0
                         _modulation
                          i1___awdiv
         i1_getModulationSubdivision
                     i1_set_leds_top
 ---------------------------------------------------------------------------------
 (8) i1_set_leds_top                                       4     0      4     236
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (8) i1_getModulationSubdivision                           2     0      2       0
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (8) i1___awdiv                                            9     5      4     352
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (8) _modulation                                          12     4      8     668
                                             14 BANK0     12     4      8
                          i1___aldiv
                           i1___lmul
 ---------------------------------------------------------------------------------
 (9) i1___lmul                                            12     4      8     144
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (9) i1___aldiv                                           15     7      8     352
                                             12 COMMON     1     1      0
                                              0 BANK0     14     6      8
                           i1___lmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _init_adc
     _init_pwm
       _init_timer0
       _init_timer2
   _InitializeTaps
   _ReadSavedSettings
     _FLASH_ReadWord
     _set_leds_bottom
     _set_leds_top
   _USARTInit
   ___awtoft
     ___ftpack
   ___fttol
     ___altoft (ARG)
       ___ftpack
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     _map (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
   _adc_convert
   _calcCosArray
     ___awtoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___wmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _cos
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftge
       _sin
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
   _getModulationDelayTime
     ___altoft
       ___ftpack
     ___awtoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _getModulationSubdivision
   _initSwitchBypass
     _getSwitchBypassState
     _setSwitchBypassState
       _setSwitchBypassRelays
         _updateSwitchBypassState
         _wait_ms
           ___lmul
   _map
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
   _read_bottom_tactile
     _set_leds_bottom
     _wait_ms
       ___lmul
   _read_top_tactile
     _set_leds_top
     _wait_ms
       ___lmul
   _scaleA100kPot
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _frexp
   _scaleA10kPot
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _frexp
   _scaleiA10kPot
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _frexp
   _set_subdivision
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
   _updateModulationArray
     ___awdiv
     ___awtoft
       ___ftpack
     ___wmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _getModulationSubdivision
     _modCos
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___wmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
     _modSaw
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _modSawRev
       ___awtoft (ARG)
         ___ftpack
       _modSaw (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
     _modSquare
       ___awtoft (ARG)
         ___ftpack
       ___ftge (ARG)
       _modCos (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
     _modTri
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
   _updateSwitchBypass
     _setDoublePressState
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setPedalMode
         _resetRingLEDs
           _set_leds_bottom
           _set_leds_top
         _setExpressionDisplay
           _set_leds_bottom
           _set_leds_top
         _setPresetDisplay
           _set_leds_bottom
           _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
       _showSave
         _ring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
         _solidring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
       _wait_ms
         ___lmul
     _setLongBypassState
     _setSwitchBypassRelays
       _updateSwitchBypassState
       _wait_ms
         ___lmul
     _setSwitchBypassState
       _setSwitchBypassRelays
         _updateSwitchBypassState
         _wait_ms
           ___lmul
   _updateSwitchTap
     ___aldiv
     _setDoublePressState
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setPedalMode
         _resetRingLEDs
           _set_leds_bottom
           _set_leds_top
         _setExpressionDisplay
           _set_leds_bottom
           _set_leds_top
         _setPresetDisplay
           _set_leds_bottom
           _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
       _showSave
         _ring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
         _solidring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
       _wait_ms
         ___lmul
     _setLongTapState
   _update_mode
     _resetRingLEDs
       _set_leds_bottom
       _set_leds_top
     _setPedalMode
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setExpressionDisplay
         _set_leds_bottom
         _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
   _update_selectMode
     _setExpressionDisplay
       _set_leds_bottom
       _set_leds_top
     _setPresetDisplay
       _set_leds_bottom
       _set_leds_top

 _isr (ROOT)
   _modulation
     i1___aldiv
       i1___lmul (ARG)
     i1___lmul
   i1___awdiv
   i1_getModulationSubdivision
   i1_set_leds_top

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     20      40       5       80.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     50      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     4A      4D       9       96.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      9      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      8      4C      13       95.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      9      35      15       66.3%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
ABS                  0      0     23C      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      40      18       80.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0      40      20       80.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
DATA                 0      0     23C      28        0.0%
BANK11              1A      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITBANK12           50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BANK12               0      0       0      31        0.0%
BITBANK13           50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BANK13               0      0       0      33        0.0%
BITBANK14           50      0       0      34        0.0%
BANK14               0      0       0      35        0.0%
BITBANK15           50      0       0      36        0.0%
BANK15               0      0       0      37        0.0%
BITBANK16           50      0       0      38        0.0%
BANK16               0      0       0      39        0.0%
BITBANK17           50      0       0      40        0.0%
BANK17               0      0       0      41        0.0%
BITBANK18           50      0       0      42        0.0%
BANK18               0      0       0      43        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Mon Jan 16 17:05:56 2017

                        _update_mode 1800                         ___altoft@exp 00AE  
                        __CFG_CP$OFF 0000                        ___altoft@sign 00AF  
                   modSaw@inflection 0131                     scaleA100kPot@pwm 01E7  
                       ___awdiv@sign 00A6                   _topTactile_pressed 01CA  
         setDoublePressState@f_state 00B8                  ___wmul@multiplicand 0130  
                 USARTInit@baud_rate 00A0                      _updateSwitchTap 05B8  
                       ___ftadd@exp1 00CD                         ___ftadd@exp2 00CC  
                       ___ftadd@sign 00CB                                  l402 2FBB  
                                l370 0D37                                  l608 2D0C  
                                l384 0EFC                                  l378 0E01  
               __size_of_adc_convert 0013                                  l840 2064  
                                l841 2088                                  l833 2055  
                                l665 263D                                  l835 2058  
                                l836 205B                                  l828 250E  
                                l837 205E                                  l829 2532  
                                l838 2061                                  _GIE 005F  
                                _RB1 0069                                  _PR2 001B  
       solidring_tactiles@ring_delay 00B4                                  _cos 2681  
                                _map 19C6                                  _exp 0828  
                                _log 1E39                                  _isr 0004  
                                _tap 02A0                                  _sin 1631  
                                _pow 10B3                         __CFG_BORV$LO 0000  
                                wreg 0009                         __CFG_IESO$ON 0000  
                       __CFG_FOSC$HS 0000                  set_subdivision@tmpX 0135  
            __end_of_set_leds_bottom 2089                         __CFG_LVP$OFF 0000  
                     i1___aldiv@sign 0029                         ___ftdiv@cntr 00D8  
                       ___ftdiv@sign 00DD                                 l1002 2320  
                               l1006 2348                                 l1014 23B3  
                               l1040 2E41                                 l1041 2E55  
                               l1018 23E1                                 l1044 07A7  
                               l1037 2E33                                 l1029 1830  
                               l2022 2D68                                 l1039 2E39  
                               l1055 07F1                                 l2220 1FA9  
                               l2410 1746                                 l2077 1849  
                               l2280 19AC                                 l1482 0689  
                               l2196 2579                                 l1468 05CF  
                               l2197 2581                                 l2189 2566  
                               l2392 10D7                                 l1770 22B5  
                               ?_cos 014C                                 ?_map 00DE  
                               l8010 1D46                                 l8006 1D3E  
                               l9000 1296                                 l8034 1958  
                               l9010 12B6                                 l8060 19A3  
                               l8052 1988                                 l8212 1036  
                               l8116 2420                                 l8108 23FC  
                               ?_exp 0148                                 ?_log 013E  
                               l8062 19AF                                 l8054 1996  
                               l8216 103E                                 l8400 2E6B  
                               l8136 2030                                 l9024 12D6  
                               l9008 12B0                                 l9120 0748  
                               l8066 19BD                                 l8226 10AB  
                               l8410 1E5D                                 l9018 12CA  
                               l9114 06D8                                 l9106 06CC  
                               l9050 05E1                                 l8148 2E1B  
                               l8164 1C3E                                 l8236 2603  
                               l8324 2FE1                                 l9204 1B98  
                               l9220 1D89                                 l8340 14BA  
                               l8316 2E49                                 l9116 0722  
                               l9044 05C4                                 ?_isr 0070  
                               l8158 1C28                                 l8078 2191  
                               l8246 1AE9                                 l7800 256B  
                               l8280 1B5B                                 l8256 1B0B  
                               l8432 0835                                 l8416 1E70  
                               l9240 18C6                                 l9320 0503  
                               l9312 03EB                                 l9072 062B  
                               l9064 0603                                 l9128 0786  
                               l7802 2573                                 l8186 1C98  
                               l8178 1C7F                                 l9146 2315  
                               l8442 085A                                 l8530 10DF  
                               l9226 1DA6                                 l8354 1322  
                               l9322 0549                                 l9314 0431  
                               l9330 03CD                                 l9306 03B6  
                               l9090 0669                                 l9066 0620  
                               l7820 24F6                                 l8380 1702  
                               l9156 233B                                 l8276 1B53  
                               l9260 1A5F                                 l9332 057A  
                               l9316 0477                                 l9420 0CC1  
                               l7822 24FE                                 l8198 2EB4  
                               l8454 08B9                                 l9270 1A77  
                               l9262 1A65                                 l9342 059D  
                               l9318 04BD                                 l9326 055D  
                               l8702 186A                                 l9086 0652  
                               l9406 0C23                                 l7824 2506  
                               l7816 24E6                                 l7920 1F88  
                               l8368 1666                                 l9168 23A8  
                               l8448 087E                                 l8544 1145  
                               l8536 10EB                                 l9264 1A69  
                               l9336 0583                                 l9328 0574  
                               l8624 216A                                 l8632 2175  
                               l8616 2159                                 l8720 18B1  
                               l8712 1898                                 l8704 1878  
                               l9088 065A                                 l9416 0C81  
                               l7818 24EE                                 l7914 1F75  
                               l8650 26CB                                 l8482 2F18  
                               l7770 2F71                                 l9178 23CF  
                               l9282 1AD6                                 l9266 1A6D  
                               l9274 1A7E                                 l9098 0681  
                               l9442 0E04                                 l9434 0D7F  
                               l7844 206B                                 l7828 2515  
                               l7932 1FBB                                 l7916 1F7F  
                               l7908 1F62                                 l7852 2D62  
                               l8484 2F1A                                 l8476 0961  
                               l8548 1165                                 l9268 1A71  
                               l9276 1A97                                 l8732 2498  
                               l8716 18A3                                 l9460 0F3F  
                               l9452 0E9B                                 ?_sin 013E  
                               l7790 2543                                 l7926 1F9B  
                               l7918 1F84                                 l8486 2F29  
                               l7774 2F7B                                 l8398 2E5B  
                               l9198 1B7E                                 l8750 24B7  
                               l8662 09B6                                 l8910 07D6  
                               l9454 0ED2                                 l9438 0DC9  
                               l7792 254D                                 l7936 1FCD  
                               l7928 1FA5                                 l8488 2F2B  
                               l8760 24D2                                 l8920 07ED  
                               l8912 07DB                                 l8904 07CA  
                               l9464 0F89                                 l9456 0EFF  
                               l9448 0E4C                                 l9392 0BA8  
                               l9376 0B89                                 l8850 2650  
                               l7794 2552                                 l7786 253C  
                               l7946 1FE8                                 l7890 1F39  
                               l7874 20DA                                 l7954 20A0  
                               l8738 24A3                                 l8666 0AF8  
                               l8930 11DF                                 l8922 07F5  
                               l9482 0FF9                                 l9386 0B99  
                               l8852 2659                                 l7876 20EA  
                               l8764 24DA                                 l8756 24C9  
                               l8748 24AB                                 l8676 2139  
                               l9476 0FBC                                 ?_pow 0155  
                               l8790 228C                                 l7886 1F32  
                               l7982 1CE7                                 l7958 20B6  
                               l8942 1200                                 l8934 11F2  
                               l8694 185A                                 l8792 228E  
                               l7896 1F48                                 l7976 1CD1  
                               l8786 2288                                 l7994 1D22  
                               l8962 122E                                 l8882 1823  
                               l8890 1834                                 l8788 228A  
                               l8796 2292                                 l8980 1262  
                               l9950 22A1                                 l7998 1D2A  
                               l8966 1240                                 l9960 2071  
                               l9952 22A6                                 l8992 1277  
                               l8968 1248                                 l8888 182D  
                               l9954 22AB                                 l9946 0563  
                               l8994 127B                                 l9956 22B0  
                               l9948 1A83                                 l9958 251B  
                               _PEIE 005E                                 _RCIE 048D  
                               u8025 20DF                                 u8135 1F63  
                               u8225 1F9C                                 u9105 214A  
                               u8165 1F76                                 u8405 1D4D  
                               u8325 1CF3                                 u8335 1D03  
                               u8505 19A4                                 u9065 1136  
                               u9225 186D                                 u9145 2D50  
                               u8195 1F89                                 u8355 1D2B  
                               u8365 1D31                                 u8445 195F  
                               u9085 2D86                                 u9325 24AE  
                               u9245 1879                                 u9415 080E  
                               u7815 2F7C                                 u9095 2DFA  
                               u9255 188D                                 u9425 0814  
                               u7905 256E                                 u8625 1C50  
                               u7825 2F83                                 u9345 24B8  
                               u8545 23FA                                 u9265 1899  
                               u8635 1C60                                 u8395 1D47  
                               u8475 1989                                 u9355 24C2  
                               u8555 241E                                 u9460 2657  
                               u9445 2636                                 u8645 1C80  
                               u9365 24CA                                 u9455 2649  
                               u8655 1C8F                                 u8840 16FE  
                               u7945 2588                                 u7865 2548  
                               u8665 1C99                                 u8850 16FF  
                               u8780 2FDF                                 u7885 2561  
                               u8765 1B14                                 u9645 11D8  
                               u9565 07B9                                 u8950 0897  
                               u9655 11EB                                 u9495 1813  
                               u8960 0898                                 u7985 2D69  
                               u7995 2D6E                                 u8885 2E60  
                               u9685 120A                                 u9935 060C  
                               u8995 0958                                 u9795 1287  
                               u9965 0635                   scaleA100kPot@input 0167  
                       __CFG_WRT$OFF 0000                        __CFG_FCMEN$ON 0000  
                  _scaleA10kPot$2870 01EA                    _scaleA10kPot$2871 01ED  
                               _iCnt 025E                                 _main 0B64  
                       ___ftpack@arg 00A0                                 cos@f 014C  
                       ___ftpack@exp 00A3                                 fsr0h 0005  
                               fsr1h 0007                                 fsr0l 0004  
                               indf0 0000                                 indf1 0001  
                               fsr1l 0006                                 map@x 00DE  
                               btemp 007E                                 exp@x 0148  
                               log@x 013E                        __CFG_BOREN$ON 0000  
                               sin@f 013E                                 sin@y 0142  
                               ltemp 007E                                 pow@x 0155  
                               pow@y 0158                                 start 02F3  
                               ttemp 007E                                 wtemp 007E  
       __end_of_getSwitchBypassState 2CA8                      _expressModeCnst 01E2  
       updateSwitchTap@tapCntDivisor 00C2         __end_of_setSwitchBypassState 2D97  
                    ?i1_set_leds_top 0070                        __CFG_MCLRE$ON 0000  
                       ___ftmul@cntr 00BC                         ___ftmul@sign 00BD  
                    __end_of_InitApp 2F68                         ___fttol@exp1 012D  
                              ??_cos 00F0                                ??_map 00ED  
              __size_of_calcCosArray 0081                                ??_exp 014B  
                              ??_log 0141                         ___fttol@lval 0129  
                              ??_isr 003A                                ??_sin 0141  
                              ??_pow 015B                      _switchBypass_up 026A  
          __size_of_initSwitchBypass 000F                      __end_of___aldiv 18BA  
                              ?_main 0070                       i1___awdiv@sign 0076  
                    __end_of___awdiv 24DF                      __end_of___ftadd 2000  
                              _CCPR1 0291                                _CCPR2 0298  
                              _CCPR3 0311                                _CCPR4 0318  
                              _CCPR5 031C                        __CFG_WDTE$OFF 0000  
                    __end_of___ftdiv 1CBA                      __end_of___ftneg 2CBE  
                              u10105 0727                                u10045 069A  
                              u10055 06B1                                u10225 23C8  
                              u10305 1AD1                                u10065 06E1  
                              u10315 0390                                u10075 06F6  
                    __end_of___ftmul 1D6E                                u10165 2334  
                              u10325 03A4                                u10085 070A  
                              u10405 0C01                                u10335 03B4  
                              u10415 0C21                                u10345 03D4  
                              u10425 0C9F                                u10435 0CBF  
                    ___awdiv@divisor 00A0                                u10525 0F1D  
                              u10445 0D5D                                u10535 0F3D  
                              u10455 0D7D                                u10465 0DE3  
                    __end_of___ftsub 2EDA                                u10555 0FCF  
                              u10475 0DFF                      __end_of___fttol 19C6  
                              u10565 0FE3                                u10485 0E2A  
                              u10575 0FF7                                u10495 0E4A  
                              i1l140 001B                                i1l141 0101  
                              i1l139 02EE                                i1l828 22E8  
                              i1l829 230A                      ___awdiv@counter 00A5  
                              _RCREG 0199                                _SPBRG 019B  
                 __end_ofsin@coeff_a 2848                   __end_ofsin@coeff_b 2854  
                              _TXREG 019A                                _UQEnd 0059  
                _ConfigureOscillator 2CA0          __size_of_setLongBypassState 0021  
                   _setPresetDisplay 2014                         ?_init_timer0 0070  
                       ?_init_timer2 0070                  ___lmul@multiplicand 00A4  
                       ___lltoft@exp 00AD                      _switchTap_state 01E6  
                  ??_setLongTapState 00A2                        ___awtoft@sign 00AD  
                              _floor 1000                                _ldexp 1ADC  
                              _frexp 217D                                _myBuf 03A0  
                              _errno 0251             _getModulationSubdivision 2F09  
                      ___ftpack@sign 00A4                                _timer 0055  
                   __end_ofi1___lmul 2F09                                sin@x2 0148  
                              ltemp0 007E                                ltemp1 0082  
                              ltemp2 0086                                ltemp3 0080  
                    __end_of_wait_ms 2FCA                                pow@yi 0163  
                    scaleA10kPot@pwm 01E7                   __size_of_USARTInit 0044  
                              ttemp0 007E                                ttemp1 0081  
                              ttemp2 0084                                ttemp3 0087  
                              ttemp4 007F                                status 0003  
        __end_of_read_bottom_tactile 2353                   __size_ofi1___aldiv 0082  
                              wtemp0 007E                                wtemp1 0080  
                              wtemp2 0082                                wtemp3 0084  
                              wtemp4 0086                                wtemp5 0088  
                              wtemp6 007F                   __size_ofi1___awdiv 0051  
              set_subdivision@scalar 0132       __size_of_setSwitchBypassRelays 0036  
      __end_of_setSwitchBypassRelays 3000                         _calcCosArray 26FD  
                        exp@exponent 0152                 ?_ConfigureOscillator 0070  
                 _updateSwitchBypass 11C9                          ldexp@newexp 0141  
            __end_of_updateSwitchTap 07A0                      __initialization 02F5  
                        log@exponent 0142          updateModulationArray@iAngle 015B  
            _updateSwitchBypassState 0003                         __end_of_main 1000  
            __size_of_InitializeTaps 0026                  i1___lmul@multiplier 0070  
             __size_of_scaleA100kPot 0085                          modCos@angle 0134  
                ?_updateSwitchBypass 0070                       __CFG_LPBOR$OFF 0000  
             ring_tactiles@iLed_1548 00B5                          modCos@shift 013F  
                    _set_subdivision 1A51          updateModulationArray@subDiv 0157  
                             ??_main 0260                        ___fttol@sign1 0128  
 __end_ofi1_getModulationSubdivision 2EAC           i1_getModulationSubdivision 2E80  
                      ?_scaleA10kPot 0167              __size_of_FLASH_ReadWord 0020  
          setLongBypassState@f_state 00A0           __end_of_solidring_tactiles 21FD  
                   ?_set_leds_bottom 00A0                               ?_floor 012E  
                             ?_ldexp 013E                               ?_frexp 00A0  
                   __end_of___altoft 2102                               _ADRESH 009C  
                             _ADRESL 009B                     ___awdiv@dividend 00A2  
                   __end_of___awtoft 2E32                     __end_of___ftpack 2598  
               ??_updateSwitchBypass 00BC                     __end_of___lltoft 2E80  
                             i1l2077 278F                               i1l7000 0195  
                             i1l7010 01C8                               i1l6204 27B0  
                             i1l7012 01D1                               i1l6222 27F7  
                             i1l6214 27DE                               i1l6206 27BE  
                             i1l7022 0202                               i1l7030 021E  
                             i1l7014 01E0                               i1l6218 27E9  
                             i1l7026 020D                               i1l7018 01EE  
                             i1l7028 021C                               i1l6174 2EE2  
                             i1l7062 02EB                               i1l7038 0264  
                             i1l7046 02B6                               i1l7064 02ED  
                             i1l6178 2EEC                               i1l7058 02E6  
                             i1l6196 27A0                               i1l6914 2451  
                             i1l6940 2488                               i1l6932 2477  
                             i1l6924 2459                               i1l6908 2446  
                             i1l6926 2465                               i1l6870 22CA  
                             i1l6936 2480                               i1l6872 22D0  
                             i1l6890 2E8F                               i1l6874 22D6  
                             i1l6882 22EE                               i1l6892 2E91  
                             i1l6876 22DC                               i1l6894 2EA0  
                             i1l6878 22E2                               i1l6974 0137  
                             i1l6896 2EA2                               i1l6968 011C  
                             i1l6996 0183                               i1l6998 0193  
                             i1l9962 22F3                               _PMADRH 0192  
                             _PMADRL 0191                               _PMDATH 0194  
                             _PMDATL 0193                               _PMCON2 0196  
                             u704_23 0246                               u705_25 025B  
                             u554_25 27B3                               u707_25 02C8  
                             u556_25 27BF                               u548_25 2EED  
                             u708_25 02E1                               u557_25 27D3  
                             u549_25 2EF4                               u558_25 27DF  
                             u672_25 245C                               u682_23 00D3  
                             u674_25 2466                               u675_25 2470  
                             u683_25 00E3                               u692_23 0153  
                             u676_25 2478                               u684_25 00EC  
                             u686_25 0113                               u688_25 012E  
                             u697_23 01B7                       _debounce_count 0249  
                        modSaw@angle 012E                       _debounce_mode1 024B  
                     _debounce_mode2 024D                          modSaw@shift 013C  
                             _URBuff 0320                            ??_InitApp 00A0  
              ??_ConfigureOscillator 00A0             __end_of_read_top_tactile 23EC  
            ?_getModulationDelayTime 0070                       __CFG_PWRTE$OFF 0000  
                             ___ftge 2089                               ___lmul 2F68  
                          ??___aldiv 00A8                               ___wmul 2D5F  
                  _update_selectMode 07A0                            ??___awdiv 00A4  
                          ??___ftadd 00C7                       __CFG_STVREN$ON 0000  
                          ??___ftdiv 00D4                            ??___ftneg 00C1  
                          ??___ftmul 00B4                            ??___ftsub 00F0  
                          ??___fttol 0124                          modTri@angle 012E  
                             _modCos 1485                     __end_of_init_adc 2CC8  
                             _modSaw 12ED                               _modTri 0981  
                   __end_of_init_pwm 227F                   ?_update_selectMode 0070  
                        modTri@shift 0137                     ___awdiv@quotient 00A7  
              __end_of_resetRingLEDs 2D45                               _tmpVal 025B  
                  __end_of_USARTInit 22C3                       ??_scaleA10kPot 00F0  
                  __end_ofi1___aldiv 2800                               floor@i 0132  
                             floor@x 012E                ___ftmul@f3_as_product 00B9  
                  __end_ofi1___awdiv 248D              FLASH_ReadWord@flashAddr 00A0  
                             sin@sgn 014B                     __end_of_showSave 2014  
                ??_update_selectMode 00A7                 _getSwitchBypassState 2CA4  
                          ??_wait_ms 00AE                 _setSwitchBypassState 2D7B  
                      _scaleA100kPot 18BA         __end_of_setExpressionDisplay 2D2B  
             __size_of_scaleiA10kPot 00CB               setLongTapState@f_state 00A0  
                   __end_ofexp@coeff 281E                     __end_oflog@coeff 2839  
            __end_of__initialization 036F                           ___altoft@c 00A8  
     __end_of_getModulationDelayTime 239E                           ___ftadd@f1 00C1  
                         ___ftadd@f2 00C4                           ___ftge@ff1 00A0  
                         ___ftge@ff2 00A3                    _bypass_turning_on 01C1  
                       eval_poly@res 013B                           ___ftdiv@f1 00D1  
                         ___ftdiv@f2 00CE                           ___ftdiv@f3 00D9  
                     _top_push_state 004A            ??_updateSwitchBypassState 00A2  
                         ___ftneg@f1 00BE                  _switchBypass_toggle 0259  
                         ___awtoft@c 00A8                __end_of_ring_tactiles 243C  
          __end_of_update_selectMode 07F9              __end_of_set_subdivision 1ADC  
                         ___ftmul@f1 00AE                           ___ftmul@f2 00B1  
                         ___ftsub@f1 013A                           ___ftsub@f2 0137  
                         ___fttol@f1 0120                     ?_updateSwitchTap 0070  
                       ?_update_mode 0070                       __pcstackCOMMON 0070  
                       __pidataBANK0 2CEF                         __pidataBANK3 2DB3  
                       __pidataBANK4 2CA8                           ___lltoft@c 00A8  
                      __end_of_floor 10B3                        __end_of_ldexp 1B73  
                      __end_of_frexp 21BD                     _initSwitchBypass 2CE0  
                          ?i1___lmul 0070                _updateModulationArray 0373  
                    _doubleTap_state 005B                       _OPTION_REGbits 0095  
                       modCos@period 0142                         modCos@tmpVal 0145  
              ?_getSwitchBypassState 00A0                ?_setSwitchBypassState 00B6  
                     ?_scaleA100kPot 0167                              ??_floor 0131  
                            ??_ldexp 0143                              ??_frexp 00A4  
               __size_of_init_timer0 0007                 __size_of_init_timer2 0009  
                  i1___aldiv@divisor 0020                    i1___aldiv@counter 0028  
                      ?_setPedalMode 0070                           __pbssBANK0 0051  
                         __pbssBANK2 016A                           __pbssBANK3 01A0  
                         __pbssBANK4 0220                           __pbssBANK5 02A0  
                         __pbssBANK6 0320                           __pbssBANK7 03A0  
                 __size_of_eval_poly 0072                     ??i1_set_leds_top 0074  
                    __CFG_VCAPEN$OFF 0000                   __size_of_modSawRev 001C  
                 __size_of_modSquare 003D             __end_of_setPresetDisplay 204E  
                         _delay_time 0044                     _long_press_limit 0048  
       __size_of_setDoublePressState 003E                           _delayfound 024F  
                         __pmaintext 0B64                       _InitializeTaps 0802  
                            ?___ftge 00A0                              ?___lmul 00A0  
                            ?___wmul 012E       updateModulationArray@thisAngle 0159  
                         __pintentry 0004                        _scaleiA10kPot 1D6E  
                         _blink_rate 004C                        ??_adc_convert 00A2  
                            ?_modCos 0134                            ?___altoft 00A8  
                            ?_modSaw 012E                              ?_modTri 012E  
                     ___lmul@product 00A8                      _setLongTapState 2D45  
                          ?___awtoft 00A8                            ?___ftpack 00A0  
                modSquare@inflection 014B                            ?___lltoft 00A8  
                         ??i1___lmul 0078           ??_getModulationSubdivision 00A2  
                     _FLASH_ReadWord 2DCF                   i1___awdiv@dividend 0072  
    __end_of_updateSwitchBypassState 0004                          modulation@x 002E  
                        modulation@y 0032                           _ldexp$2664 0145  
                    _debounce_bypass 0247                       ??_setPedalMode 00A7  
                 USARTWriteInt@F3536 0234                _modulationSubdivision 01BA  
                      _suspend_blink 005F         setSwitchBypassRelays@f_state 00B2  
                       modSaw@period 013F                              _UQFront 005A  
                          ?_init_adc 0070                            ?_init_pwm 0070  
                   _adjust_mod_delay 025D                              _InitApp 2F38  
               __end_of_scaleA10kPot 1C11               __end_of_InitializeTaps 0828  
                      ?_set_leds_top 00A0                           _knob1_prev 01CD  
         __size_of_update_selectMode 0059                   i1___awdiv@quotient 0077  
                         _knob2_prev 01CF                           _knob3_prev 01D1  
                         _knob4_prev 01D3                           _knob5_prev 01D5  
                   ?_set_subdivision 012E                            ?_showSave 0070  
                            ___aldiv 1838                       ?_scaleiA10kPot 0167  
                    __size_of___ftge 003C                              ___awdiv 248D  
                    __size_of___lmul 0030                              ___ftadd 1F0A  
                            ___ftdiv 1C11                              ___ftneg 2CB5  
                         _knob_1_pos 01AC                           _knob_2_pos 01AE  
                    __size_of___wmul 001C                              ___ftmul 1CBA  
                         _knob_3_pos 01B0                              ___ftsub 2EAC  
                            ___fttol 193F                           _knob_4_pos 01B2  
                         _knob_5_pos 01B4                    _switchTap_pressed 016C  
                         ??___altoft 00AC                 _setExpressionDisplay 2D13  
             ?_updateModulationArray 0070                      __size_of_modCos 01AC  
             __end_of_FLASH_ReadWord 2DEF                      __size_of_modSaw 0198  
                         ??___awtoft 00AB                           ??___ftpack 00A5  
                    __size_of_modTri 01E3                    __end_of_eval_poly 260A  
                 InitializeTaps@itap 00A1                           ??___lltoft 00AC  
                            __ptext1 07A0                              __ptext2 1800  
                            __ptext3 05B8                              __ptext4 2D45  
                            __ptext5 1838                              __ptext6 11C9  
                            __ptext7 2DEF                              __ptext8 213F  
                            __ptext9 2000           __end_of_setLongBypassState 2E10  
        ?i1_getModulationSubdivision 0070               ??_getSwitchBypassState 00A2  
                  __end_of_modSawRev 2DB3                            _T2CONbits 001C  
                       __size_of_cos 007C                         __size_of_map 008B  
                       __size_of_exp 0159                         __size_of_log 00D1  
                       __size_of_isr 02EF               ??_setSwitchBypassState 00B8  
                       __size_of_sin 01CF                         __size_of_pow 0116  
                __end_of_adc_convert 2D13                         modTri@period 013A  
                  __end_of_modSquare 213F                      ??_scaleA100kPot 00F0  
                   ___aldiv@dividend 00A4                         modTri@tmpVal 013D  
                            _wait_ms 2F98                              clrloop0 2CD5  
               end_of_initialization 036F                              exp@sign 0154  
                         _modulation 21FD                              init_ram 2CC8  
                         ??_init_adc 00A0                              initloop 2CC9  
                         ??_init_pwm 00A0         updateSwitchBypassState@state 00A0  
                 _solidring_tactiles 21BD                        _longTap_timer 01B8  
                      _longTap_state 004D                        _longTap_start 016B  
                     ??_set_leds_top 00A4                    ?_read_top_tactile 0070  
                    ?_InitializeTaps 0070                              pow@sign 0162  
                  scaleA10kPot@input 0167              __end_of_setLongTapState 2D5F  
              _setSwitchBypassRelays 2FCA               i1set_leds_top@ledState 0072  
                 ??_read_top_tactile 00B2                            _RCSTAbits 019D  
                         ??_showSave 00B7                     _mod_time_changed 01E4  
                   _longBypass_timer 01B6                     ___aldiv@quotient 00AB  
                   _longBypass_state 005C                     _longBypass_start 016A  
       __size_of_read_bottom_tactile 0048                  ?_solidring_tactiles 0070  
                       __pstringtext 2800            FLASH_ReadWord@GIEBitValue 00A2  
              ?_setExpressionDisplay 0070                 __size_of_update_mode 0038  
                    ?_FLASH_ReadWord 00A0                    _expressionChannel 01E3  
                          _PORTAbits 000C                            _PORTCbits 000E  
                          _PORTDbits 000F                            _PORTEbits 0010  
                         _test_timer 0241                            _USARTInit 227F  
                          _TRISBbits 008D                            _TRISCbits 008E  
                          _TRISDbits 008F                            _TRISEbits 0090  
                          _TRISFbits 030C                            _TRISGbits 030D  
                          i1___aldiv 277E                            i1___awdiv 243C  
               ??_solidring_tactiles 00B2          __end_of_ConfigureOscillator 2CA4  
                         map@out_max 00EA                           map@out_min 00E7  
        __size_of_updateSwitchBypass 0124             __end_of_initSwitchBypass 2CEF  
                        _CCP1CONbits 0293                          ___ftdiv@exp 00DC  
           __size_of_set_leds_bottom 003B                          _CCP2CONbits 029A  
                          _TXSTAbits 019E                 _switchBypass_pressed 01BC  
                        _CCP3CONbits 0313                          _CCP4CONbits 031A  
                        _CCP5CONbits 031E                          _CCP6CONbits 0613  
                    ??_scaleiA10kPot 00F0                          _CCP7CONbits 0616  
                        ___ftmul@exp 00B8                   adc_convert@channel 00A3  
                        _CCP8CONbits 0619                          _CCP9CONbits 061C  
               set_leds_top@ledState 00A2                       __end_of___ftge 20C5  
               __end_of_setPedalMode 2E56                       __end_of___lmul 2F98  
                     __end_of___wmul 2D7B                         _double_timer 01A0  
                        _adc_convert 2D00     __end_of_getModulationSubdivision 2F38  
                     _switchTap_down 01C9                       __end_of_modCos 1631  
                     __end_of_modSaw 1485                       __end_of_modTri 0B64  
                     modSawRev@angle 0142                           floor@expon 0135  
              i1___lmul@multiplicand 0074                    __size_ofi1___lmul 002F  
                start_initialization 02F5                           ?_USARTInit 00A0  
                         eval_poly@d 0137                           eval_poly@n 0139  
                         eval_poly@x 0134                _bottomTactile_pressed 01C0  
                _setDoublePressState 213F                           ldexp@value 013E  
                         ?i1___aldiv 0020                          __end_of_cos 26FD  
                        __end_of_map 1A51                          __end_of_exp 0981  
                        __end_of_log 1F0A                          __end_of_isr 02F3  
                         ?i1___awdiv 0070                          __end_of_sin 1800  
                        __end_of_pow 11C9                __size_of_scaleA10kPot 009E  
                 _adjusted_pot_value 0245                          ?_modulation 002E  
                 scaleiA10kPot@input 0167                           frexp@value 00A0  
             __size_of_resetRingLEDs 001A               ?_setSwitchBypassRelays 00B2  
               ?_setDoublePressState 00B8  __size_ofi1_getModulationSubdivision 002C  
                   ?_setLongTapState 00A0                    ?_setPresetDisplay 0070  
                           ??___ftge 00A6                             ??___lmul 00A8  
             ??_setExpressionDisplay 00A4                             ??___wmul 00F0  
                 ??_setPresetDisplay 00A4                          __pdataBANK0 0040  
                        __pdataBANK3 01CB                          __pdataBANK4 0268  
                           ??_modCos 013A                             ??_modSaw 00F0  
                 i1___aldiv@dividend 0024                             ??_modTri 00F0  
                      _tap_iteration 01DD             __size_of_updateSwitchTap 01E8  
                  __size_of___altoft 003D                    __size_of___awtoft 0022  
                  __size_of___ftpack 0065                          __pbssBIGRAM 238A  
                       _scaleA10kPot 1B73                    __size_of___lltoft 002A  
                      ??_init_timer0 00A0                        ??_init_timer2 00A0  
               __end_of_set_leds_top 2533                            ___latbits 0003  
     setExpressionDisplay@ledChannel 00A6                   _switchBypass_state 0050  
                      __pcstackBANK0 0020                        __pcstackBANK1 00A0  
                      __pcstackBANK2 0120                        __pcstackBANK3 01E7  
                      __pcstackBANK4 0260                        __pcstackBANK5 02CC  
             __size_of_ring_tactiles 0050                       _expSwitchState 01E1  
   updateModulationArray@iAngle_2363 0156                     i1___lmul@product 0078  
                   scaleiA10kPot@pwm 01E7             ?_updateSwitchBypassState 00A0  
                         sin@coeff_a 2839                           sin@coeff_b 2848  
                 i1___aldiv@quotient 002A                     modCos@inflection 0137  
                      ?_calcCosArray 0070                             ?_InitApp 0070  
              ??_setDoublePressState 00BA                    __size_of_init_adc 000A  
                  __size_of_init_pwm 0041                            _main$2861 02CC  
                          _main$2862 02CF                            _main$2863 02D2  
            ??_updateModulationArray 0150                             ?___aldiv 00A0  
                  ??_set_leds_bottom 00A2                   _currentBypassState 01E0  
                           ?___awdiv 00A0                             ?___ftadd 00C1  
                           ?___ftdiv 00CE                             ?___ftneg 00BE  
                           ?___ftmul 00AE                             ?___ftsub 0137  
                           ?___fttol 0120                    __size_of_showSave 0014  
                 _modulation_changed 01C6                    i1___awdiv@divisor 0070  
                 _scaleA100kPot$2866 01EA                   _scaleA100kPot$2867 01ED  
                  i1___awdiv@counter 0075                          _blink_delay 0268  
                __size_of_modulation 0041                        _resetRingLEDs 2D2B  
                        _blink_state 01DF                            _eval_poly 2598  
                        ??_USARTInit 00A2                             _CCPTMRS0 029D  
                           _CCPTMRS1 029E                             _CCPTMRS2 029F  
                        ??i1___aldiv 007C                             ?_wait_ms 00AC  
                        ??i1___awdiv 0074                            _modSawRev 2D97  
           ??_getModulationDelayTime 00F0                  _read_bottom_tactile 230B  
                     __size_of_floor 00B3                       __size_of_ldexp 0097  
                     __size_of_frexp 0040                            _modSquare 2102  
                 calcCosArray@iAngle 0159                       _presetModeCnst 01E5  
                 _setLongBypassState 2DEF                  __end_of_init_timer0 0800  
                __end_of_init_timer2 2CB5                            _mod_value 0253  
                          _mod_timer 01A4                     ??_InitializeTaps 00A0  
                    ___aldiv@divisor 00A0    __size_of_getModulationSubdivision 002F  
                    ___aldiv@counter 00A9            ?_getModulationSubdivision 00A0  
                     _presetSaveMode 005E                       ___wmul@product 0132  
                     ??_calcCosArray 0152                             _LATBbits 010D  
                           _LATDbits 010F                             _LATFbits 038C  
                           _LATGbits 038D                       _mod_delay_time 01D9  
                          clear_ram0 2CD4                   calcCosArray@tmpVal 0156  
                          _tap_timer 0051                  ?_setLongBypassState 00A0  
                          _tap_total 023D                __size_of_setPedalMode 0024  
                      set_leds_top@x 00A0                             _PIR1bits 0011  
                      _ring_tactiles 23EC                      _longBypass_down 01C3  
                   ??_FLASH_ReadWord 00A2                      _longBypass_save 01C4  
               ?_read_bottom_tactile 0070              __size_ofi1_set_leds_top 0048  
          initSwitchBypass@initState 00BA                            map@in_max 00E4  
                          map@in_min 00E1                       ?_resetRingLEDs 0070  
                          _sub_timer 01A8                           _ADCON0bits 009D  
                           i1___lmul 2EDA                           _ADCON1bits 009E  
           __size_of_set_subdivision 008B                    ___wmul@multiplier 012E  
                   set_subdivision@x 012E                     set_subdivision@y 0130  
          __size_of_read_top_tactile 004E                 ??_setLongBypassState 00A2  
                         ?_eval_poly 0134        __size_of_getSwitchBypassState 0004  
                        _modCos$2878 013C        __size_of_setSwitchBypassState 001C  
                         ?_modSawRev 0142                __end_of_scaleA100kPot 193F  
                  ??_updateSwitchTap 00BC                    ___lmul@multiplier 00A0  
                         ?_modSquare 0148                      modSquare@tmpVal 014E  
                       _setPedalMode 2E32                    _ReadSavedSettings 260A  
                  ?_initSwitchBypass 0070                    ring_tactiles@iLed 00B3  
                        _oldBaseTime 0255                       wait_ms@timeSec 00AC  
                 ?_ReadSavedSettings 0070                          _modSaw$2880 0134  
                        _modSaw$2881 0137                       wait_ms@timemsl 00AE  
                          frexp@eptr 00A3          setSwitchBypassState@f_state 00B6  
                 ??_initSwitchBypass 00BA                     __size_of_InitApp 0030  
                     ?_ring_tactiles 0070                            modSaw@mod 013A  
                        _mode1_state 01C5                        ??_update_mode 00A7  
                        _mode2_state 005D                            isr@subDiv 007D  
              ??_read_bottom_tactile 00B2                          _modTri$2879 0134  
                updateSwitchTap@iCnt 00C4                  ??_ReadSavedSettings 00A4  
                         _APFCONbits 011D                     __size_of___aldiv 0082  
                   __size_of___awdiv 0052                     __size_of___ftadd 00F6  
                   __size_of___ftdiv 00A9                         ?_adc_convert 00A0  
                   __size_of___ftneg 0009                             ___altoft 20C5  
                   __size_of___ftmul 00B4                     __size_of___ftsub 002E  
                   __size_of___fttol 0087                             _cos$2882 014F  
                           ___awtoft 2E10                __size_of_set_leds_top 0054  
                           ___ftpack 2533                    _baseline_mod_time 0040  
                           _map$2864 00ED                             ___lltoft 2E56  
             _preset_programmning_on 01C8                           _ANSELEbits 0190  
                         _ANSELFbits 040C                     modTri@inflection 0131  
                   set_leds_bottom@x 00A0                             _exp$2627 014F  
                           _exp$2886 014C                          _init_timer0 07F9  
                        _init_timer2 2CAC                             _cosArray 2482  
         __end_of_updateSwitchBypass 12ED                             __ptext10 21BD  
                           __ptext11 23EC                             __ptext20 2D97  
                           __ptext12 2E32                             __ptext21 12ED  
                           __ptext13 2014                             __ptext30 1ADC  
                           __ptext22 248D                             __ptext14 2D13  
                           __ptext31 2E56                             __ptext23 1A51  
                           __ptext15 2D2B                             __ptext40 0003  
                           __ptext32 239E                             __ptext24 1D6E  
                           __ptext16 0373                             __ptext41 2CA4  
                           __ptext33 230B                             __ptext25 1B73  
                           __ptext17 0981                             __ptext50 2089  
                           __ptext42 2353                             __ptext34 19C6  
                           __ptext26 18BA                             __ptext18 2102  
                           __ptext51 20C5                             __ptext43 2F09  
                           __ptext35 2CE0                             __ptext27 10B3  
                           __ptext19 1485                             __ptext60 2533  
                           __ptext52 2598                             __ptext44 26FD  
                           __ptext36 2D7B                             __ptext28 1E39  
                           __ptext61 2D00                             __ptext53 2D5F  
                           __ptext45 2681                             __ptext37 2FCA  
                           __ptext29 0828                             __ptext70 2CAC  
                           __ptext62 227F                             __ptext54 1CBA  
                           __ptext46 1631                             __ptext38 2F98  
                           __ptext71 07F9                             __ptext63 260A  
                           __ptext55 2EAC                             __ptext47 1000  
                           __ptext39 2F68                             __ptext80 277E  
                           __ptext72 2CBE                             __ptext64 24DF  
                           __ptext56 1F0A                             __ptext48 217D  
                           __ptext73 2CA0                             __ptext65 204E  
                           __ptext57 2CB5                             __ptext49 193F  
                           __ptext66 2DCF                             __ptext58 1C11  
                           __ptext75 22C3                             __ptext67 0802  
                           __ptext59 2E10                             __ptext76 2E80  
                           __ptext68 2F38                             __ptext77 243C  
                           __ptext69 223E                             __ptext78 21FD  
                           __ptext79 2EDA                             _sin$2885 0145  
          __end_of_ReadSavedSettings 2681                     __size_of_wait_ms 0032  
        __size_of_solidring_tactiles 0040      __size_of_getModulationDelayTime 004B  
                           _ledState 0239                             _pow$2883 015C  
                           _pow$2884 015F                        _presetChannel 004F  
                       ??_modulation 0036                          _mod_counter 01D7  
                           _modArray 238A                          _oldSymmetry 0257  
            ??_setSwitchBypassRelays 00B4                             _init_adc 2CBE  
                      __size_of_main 049C                             _init_pwm 223E  
   updateModulationArray@angleFactor 0154         __size_of_ConfigureOscillator 0004  
                       _set_leds_top 24DF                             _showSave 2000  
                           _num_taps 004E                __end_of_scaleiA10kPot 1E39  
                           int$flags 007E                      ??_resetRingLEDs 00A4  
                    i1set_leds_top@x 0070                       modSquare@angle 0148  
                __end_of_update_mode 1838                             exp@coeff 2800  
                           _symmetry 01DB                  modSawRev@inflection 0145  
                           log@coeff 281E                   __end_of_modulation 223E  
               __end_of_calcCosArray 277E                           _INTCONbits 000B  
                        ??_eval_poly 00F0            __size_of_setPresetDisplay 003A  
                        _tap_history 0220                          ??_modSawRev 0148  
                  ??_set_subdivision 00F0                          ??_modSquare 00F0  
                           intlevel1 0000                      _set_leds_bottom 204E  
                         _PMCON1bits 0195                      ??_ring_tactiles 00B2  
                  __CFG_CLKOUTEN$OFF 0000                      _reset_sub_delay 025F  
                         _OSCCONbits 0099                         _preset_blink 01C7  
             _getModulationDelayTime 2353                       i1_set_leds_top 22C3  
     __size_of_updateModulationArray 0245     __size_of_updateSwitchBypassState 0001  
      __end_of_updateModulationArray 05B8                        _isInitialized 01C2  
      __size_of_setExpressionDisplay 0018                   _scaleiA10kPot$2872 01EA  
                 _scaleiA10kPot$2873 01ED             __size_of_setLongTapState 001A  
                        _tmpModDelay 01BE                     _read_top_tactile 239E  
       ??i1_getModulationSubdivision 0072                         ___aldiv@sign 00AA  
         __size_of_ReadSavedSettings 0077          __end_of_setDoublePressState 217D  
                       _CCP10CONbits 061F                    _bottom_push_state 01CB  
         setPresetDisplay@ledChannel 00A6               __end_ofi1_set_leds_top 230B  
