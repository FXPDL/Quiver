

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Fri Jan 13 16:43:03 2017

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1527
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	idataBANK4,global,class=CODE,delta=2
     7                           	psect	stringtext,global,class=STRCODE,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    17                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    18                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    19                           	psect	bssBANK7,global,class=BANK7,space=1,delta=1
    20                           	psect	clrtext,global,class=CODE,delta=2
    21                           	psect	inittext,global,class=CODE,delta=2
    22                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    23                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    24                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    25                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    26                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    27                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    28                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    29                           	psect	text1,local,class=CODE,merge=1,delta=2
    30                           	psect	text2,local,class=CODE,merge=1,delta=2
    31                           	psect	text3,local,class=CODE,merge=1,delta=2
    32                           	psect	text4,local,class=CODE,merge=1,delta=2
    33                           	psect	text5,local,class=CODE,merge=1,delta=2
    34                           	psect	text6,local,class=CODE,merge=1,delta=2
    35                           	psect	text7,local,class=CODE,merge=1,delta=2
    36                           	psect	text8,local,class=CODE,merge=1,delta=2
    37                           	psect	text9,local,class=CODE,merge=1,delta=2
    38                           	psect	text10,local,class=CODE,merge=1,delta=2
    39                           	psect	text11,local,class=CODE,merge=1,delta=2
    40                           	psect	text12,local,class=CODE,merge=1,delta=2
    41                           	psect	text13,local,class=CODE,merge=1,delta=2
    42                           	psect	text14,local,class=CODE,merge=1,delta=2
    43                           	psect	text15,local,class=CODE,merge=1,delta=2
    44                           	psect	text16,local,class=CODE,merge=1,delta=2
    45                           	psect	text17,local,class=CODE,merge=1,delta=2
    46                           	psect	text18,local,class=CODE,merge=1,delta=2
    47                           	psect	text19,local,class=CODE,merge=1,delta=2
    48                           	psect	text20,local,class=CODE,merge=1,delta=2
    49                           	psect	text21,local,class=CODE,merge=1,delta=2
    50                           	psect	text22,local,class=CODE,merge=1,delta=2
    51                           	psect	text23,local,class=CODE,merge=1,delta=2
    52                           	psect	text24,local,class=CODE,merge=1,delta=2
    53                           	psect	text25,local,class=CODE,merge=1,delta=2
    54                           	psect	text26,local,class=CODE,merge=1,delta=2
    55                           	psect	text27,local,class=CODE,merge=1,delta=2
    56                           	psect	text28,local,class=CODE,merge=1,delta=2
    57                           	psect	text29,local,class=CODE,merge=1,delta=2
    58                           	psect	text30,local,class=CODE,merge=1,delta=2
    59                           	psect	text31,local,class=CODE,merge=1,delta=2
    60                           	psect	text32,local,class=CODE,merge=1,delta=2
    61                           	psect	text33,local,class=CODE,merge=1,delta=2
    62                           	psect	text34,local,class=CODE,merge=1,delta=2
    63                           	psect	text35,local,class=CODE,merge=1,delta=2
    64                           	psect	text36,local,class=CODE,merge=1,delta=2
    65                           	psect	text37,local,class=CODE,merge=1,delta=2
    66                           	psect	text38,local,class=CODE,merge=1,delta=2
    67                           	psect	text39,local,class=CODE,merge=1,delta=2
    68                           	psect	text40,local,class=CODE,merge=1,delta=2
    69                           	psect	text41,local,class=CODE,merge=1,delta=2
    70                           	psect	text42,local,class=CODE,merge=1,delta=2
    71                           	psect	text43,local,class=CODE,merge=1,delta=2
    72                           	psect	text44,local,class=CODE,merge=1,delta=2
    73                           	psect	text45,local,class=CODE,merge=1,delta=2
    74                           	psect	text46,local,class=CODE,merge=1,delta=2
    75                           	psect	text47,local,class=CODE,merge=1,delta=2
    76                           	psect	text48,local,class=CODE,merge=1,delta=2
    77                           	psect	text49,local,class=CODE,merge=1,delta=2
    78                           	psect	text50,local,class=CODE,merge=1,delta=2
    79                           	psect	text51,local,class=CODE,merge=1,delta=2
    80                           	psect	text52,local,class=CODE,merge=1,delta=2
    81                           	psect	text53,local,class=CODE,merge=1,delta=2
    82                           	psect	text54,local,class=CODE,merge=1,delta=2
    83                           	psect	text55,local,class=CODE,merge=1,delta=2
    84                           	psect	text56,local,class=CODE,merge=1,delta=2
    85                           	psect	text57,local,class=CODE,merge=1,delta=2
    86                           	psect	text58,local,class=CODE,merge=1,delta=2
    87                           	psect	text59,local,class=CODE,merge=1,delta=2
    88                           	psect	text60,local,class=CODE,merge=1,delta=2
    89                           	psect	text61,local,class=CODE,merge=1,delta=2
    90                           	psect	text62,local,class=CODE,merge=1,delta=2
    91                           	psect	text63,local,class=CODE,merge=1,delta=2
    92                           	psect	text64,local,class=CODE,merge=1,delta=2
    93                           	psect	text65,local,class=CODE,merge=1,delta=2
    94                           	psect	text66,local,class=CODE,merge=1,delta=2
    95                           	psect	text67,local,class=CODE,merge=1,delta=2
    96                           	psect	text68,local,class=CODE,merge=1,delta=2
    97                           	psect	text69,local,class=CODE,merge=1,delta=2
    98                           	psect	intentry,global,class=CODE,delta=2
    99                           	psect	text71,local,class=CODE,merge=1,delta=2
   100                           	psect	text72,local,class=CODE,merge=1,delta=2
   101                           	psect	text73,local,class=CODE,merge=1,delta=2
   102                           	psect	text74,local,class=CODE,merge=1,delta=2
   103                           	psect	text75,local,class=CODE,merge=1,delta=2
   104                           	dabs	1,0x920,80
   105                           	dabs	1,0x8A0,80
   106                           	dabs	1,0x820,80
   107                           	dabs	1,0x7A0,80
   108                           	dabs	1,0x742,46
   109                           	dabs	1,0x720,34
   110                           	dabs	1,0x6A0,80
   111                           	dabs	1,0x620,80
   112                           	dabs	1,0x5BE,50
   113                           	dabs	1,0x2482,0,_sinArray
   114                           	dabs	1,0x238E,0,_modArray
   115                           	dabs	1,0x7E,2
   116  0000                     	;# 
   117  0001                     	;# 
   118  0002                     	;# 
   119  0003                     	;# 
   120  0004                     	;# 
   121  0005                     	;# 
   122  0006                     	;# 
   123  0007                     	;# 
   124  0008                     	;# 
   125  0009                     	;# 
   126  000A                     	;# 
   127  000B                     	;# 
   128  000C                     	;# 
   129  000D                     	;# 
   130  000E                     	;# 
   131  000F                     	;# 
   132  0010                     	;# 
   133  0011                     	;# 
   134  0012                     	;# 
   135  0013                     	;# 
   136  0014                     	;# 
   137  0015                     	;# 
   138  0016                     	;# 
   139  0016                     	;# 
   140  0017                     	;# 
   141  0018                     	;# 
   142  0019                     	;# 
   143  001A                     	;# 
   144  001B                     	;# 
   145  001C                     	;# 
   146  008C                     	;# 
   147  008D                     	;# 
   148  008E                     	;# 
   149  008F                     	;# 
   150  0090                     	;# 
   151  0091                     	;# 
   152  0092                     	;# 
   153  0093                     	;# 
   154  0094                     	;# 
   155  0095                     	;# 
   156  0096                     	;# 
   157  0097                     	;# 
   158  0099                     	;# 
   159  009A                     	;# 
   160  009B                     	;# 
   161  009B                     	;# 
   162  009C                     	;# 
   163  009D                     	;# 
   164  009E                     	;# 
   165  010C                     	;# 
   166  010D                     	;# 
   167  010E                     	;# 
   168  010F                     	;# 
   169  0110                     	;# 
   170  0116                     	;# 
   171  0117                     	;# 
   172  011D                     	;# 
   173  018C                     	;# 
   174  018D                     	;# 
   175  018F                     	;# 
   176  0190                     	;# 
   177  0191                     	;# 
   178  0191                     	;# 
   179  0192                     	;# 
   180  0193                     	;# 
   181  0193                     	;# 
   182  0194                     	;# 
   183  0195                     	;# 
   184  0196                     	;# 
   185  0197                     	;# 
   186  0199                     	;# 
   187  0199                     	;# 
   188  0199                     	;# 
   189  019A                     	;# 
   190  019A                     	;# 
   191  019A                     	;# 
   192  019B                     	;# 
   193  019B                     	;# 
   194  019B                     	;# 
   195  019B                     	;# 
   196  019B                     	;# 
   197  019C                     	;# 
   198  019C                     	;# 
   199  019C                     	;# 
   200  019D                     	;# 
   201  019D                     	;# 
   202  019D                     	;# 
   203  019E                     	;# 
   204  019E                     	;# 
   205  019E                     	;# 
   206  019F                     	;# 
   207  019F                     	;# 
   208  019F                     	;# 
   209  020D                     	;# 
   210  020F                     	;# 
   211  0210                     	;# 
   212  0211                     	;# 
   213  0211                     	;# 
   214  0212                     	;# 
   215  0212                     	;# 
   216  0213                     	;# 
   217  0213                     	;# 
   218  0214                     	;# 
   219  0214                     	;# 
   220  0215                     	;# 
   221  0215                     	;# 
   222  0215                     	;# 
   223  0216                     	;# 
   224  0216                     	;# 
   225  0217                     	;# 
   226  0217                     	;# 
   227  0219                     	;# 
   228  021A                     	;# 
   229  021B                     	;# 
   230  021C                     	;# 
   231  021D                     	;# 
   232  021E                     	;# 
   233  021F                     	;# 
   234  028C                     	;# 
   235  028D                     	;# 
   236  0291                     	;# 
   237  0291                     	;# 
   238  0292                     	;# 
   239  0293                     	;# 
   240  0298                     	;# 
   241  0298                     	;# 
   242  0299                     	;# 
   243  029A                     	;# 
   244  029D                     	;# 
   245  029E                     	;# 
   246  029F                     	;# 
   247  030C                     	;# 
   248  030D                     	;# 
   249  0311                     	;# 
   250  0311                     	;# 
   251  0312                     	;# 
   252  0313                     	;# 
   253  0318                     	;# 
   254  0318                     	;# 
   255  0319                     	;# 
   256  031A                     	;# 
   257  031C                     	;# 
   258  031C                     	;# 
   259  031D                     	;# 
   260  031E                     	;# 
   261  038C                     	;# 
   262  038D                     	;# 
   263  0394                     	;# 
   264  0395                     	;# 
   265  0396                     	;# 
   266  040C                     	;# 
   267  040D                     	;# 
   268  0411                     	;# 
   269  0411                     	;# 
   270  0412                     	;# 
   271  0413                     	;# 
   272  0414                     	;# 
   273  0415                     	;# 
   274  0416                     	;# 
   275  0417                     	;# 
   276  0418                     	;# 
   277  0418                     	;# 
   278  0419                     	;# 
   279  041A                     	;# 
   280  041B                     	;# 
   281  041C                     	;# 
   282  041D                     	;# 
   283  041E                     	;# 
   284  048D                     	;# 
   285  0491                     	;# 
   286  0491                     	;# 
   287  0492                     	;# 
   288  0492                     	;# 
   289  0493                     	;# 
   290  0493                     	;# 
   291  0493                     	;# 
   292  0494                     	;# 
   293  0494                     	;# 
   294  0495                     	;# 
   295  0495                     	;# 
   296  0496                     	;# 
   297  0496                     	;# 
   298  0497                     	;# 
   299  0497                     	;# 
   300  0595                     	;# 
   301  0596                     	;# 
   302  0597                     	;# 
   303  059C                     	;# 
   304  059D                     	;# 
   305  059E                     	;# 
   306  0611                     	;# 
   307  0611                     	;# 
   308  0612                     	;# 
   309  0613                     	;# 
   310  0614                     	;# 
   311  0614                     	;# 
   312  0615                     	;# 
   313  0616                     	;# 
   314  0617                     	;# 
   315  0617                     	;# 
   316  0618                     	;# 
   317  0619                     	;# 
   318  061A                     	;# 
   319  061A                     	;# 
   320  061B                     	;# 
   321  061C                     	;# 
   322  061D                     	;# 
   323  061D                     	;# 
   324  061E                     	;# 
   325  061F                     	;# 
   326  0FE4                     	;# 
   327  0FE5                     	;# 
   328  0FE6                     	;# 
   329  0FE7                     	;# 
   330  0FE8                     	;# 
   331  0FE9                     	;# 
   332  0FEA                     	;# 
   333  0FEB                     	;# 
   334  0FED                     	;# 
   335  0FEE                     	;# 
   336  0FEF                     	;# 
   337  0000                     	;# 
   338  0001                     	;# 
   339  0002                     	;# 
   340  0003                     	;# 
   341  0004                     	;# 
   342  0005                     	;# 
   343  0006                     	;# 
   344  0007                     	;# 
   345  0008                     	;# 
   346  0009                     	;# 
   347  000A                     	;# 
   348  000B                     	;# 
   349  000C                     	;# 
   350  000D                     	;# 
   351  000E                     	;# 
   352  000F                     	;# 
   353  0010                     	;# 
   354  0011                     	;# 
   355  0012                     	;# 
   356  0013                     	;# 
   357  0014                     	;# 
   358  0015                     	;# 
   359  0016                     	;# 
   360  0016                     	;# 
   361  0017                     	;# 
   362  0018                     	;# 
   363  0019                     	;# 
   364  001A                     	;# 
   365  001B                     	;# 
   366  001C                     	;# 
   367  008C                     	;# 
   368  008D                     	;# 
   369  008E                     	;# 
   370  008F                     	;# 
   371  0090                     	;# 
   372  0091                     	;# 
   373  0092                     	;# 
   374  0093                     	;# 
   375  0094                     	;# 
   376  0095                     	;# 
   377  0096                     	;# 
   378  0097                     	;# 
   379  0099                     	;# 
   380  009A                     	;# 
   381  009B                     	;# 
   382  009B                     	;# 
   383  009C                     	;# 
   384  009D                     	;# 
   385  009E                     	;# 
   386  010C                     	;# 
   387  010D                     	;# 
   388  010E                     	;# 
   389  010F                     	;# 
   390  0110                     	;# 
   391  0116                     	;# 
   392  0117                     	;# 
   393  011D                     	;# 
   394  018C                     	;# 
   395  018D                     	;# 
   396  018F                     	;# 
   397  0190                     	;# 
   398  0191                     	;# 
   399  0191                     	;# 
   400  0192                     	;# 
   401  0193                     	;# 
   402  0193                     	;# 
   403  0194                     	;# 
   404  0195                     	;# 
   405  0196                     	;# 
   406  0197                     	;# 
   407  0199                     	;# 
   408  0199                     	;# 
   409  0199                     	;# 
   410  019A                     	;# 
   411  019A                     	;# 
   412  019A                     	;# 
   413  019B                     	;# 
   414  019B                     	;# 
   415  019B                     	;# 
   416  019B                     	;# 
   417  019B                     	;# 
   418  019C                     	;# 
   419  019C                     	;# 
   420  019C                     	;# 
   421  019D                     	;# 
   422  019D                     	;# 
   423  019D                     	;# 
   424  019E                     	;# 
   425  019E                     	;# 
   426  019E                     	;# 
   427  019F                     	;# 
   428  019F                     	;# 
   429  019F                     	;# 
   430  020D                     	;# 
   431  020F                     	;# 
   432  0210                     	;# 
   433  0211                     	;# 
   434  0211                     	;# 
   435  0212                     	;# 
   436  0212                     	;# 
   437  0213                     	;# 
   438  0213                     	;# 
   439  0214                     	;# 
   440  0214                     	;# 
   441  0215                     	;# 
   442  0215                     	;# 
   443  0215                     	;# 
   444  0216                     	;# 
   445  0216                     	;# 
   446  0217                     	;# 
   447  0217                     	;# 
   448  0219                     	;# 
   449  021A                     	;# 
   450  021B                     	;# 
   451  021C                     	;# 
   452  021D                     	;# 
   453  021E                     	;# 
   454  021F                     	;# 
   455  028C                     	;# 
   456  028D                     	;# 
   457  0291                     	;# 
   458  0291                     	;# 
   459  0292                     	;# 
   460  0293                     	;# 
   461  0298                     	;# 
   462  0298                     	;# 
   463  0299                     	;# 
   464  029A                     	;# 
   465  029D                     	;# 
   466  029E                     	;# 
   467  029F                     	;# 
   468  030C                     	;# 
   469  030D                     	;# 
   470  0311                     	;# 
   471  0311                     	;# 
   472  0312                     	;# 
   473  0313                     	;# 
   474  0318                     	;# 
   475  0318                     	;# 
   476  0319                     	;# 
   477  031A                     	;# 
   478  031C                     	;# 
   479  031C                     	;# 
   480  031D                     	;# 
   481  031E                     	;# 
   482  038C                     	;# 
   483  038D                     	;# 
   484  0394                     	;# 
   485  0395                     	;# 
   486  0396                     	;# 
   487  040C                     	;# 
   488  040D                     	;# 
   489  0411                     	;# 
   490  0411                     	;# 
   491  0412                     	;# 
   492  0413                     	;# 
   493  0414                     	;# 
   494  0415                     	;# 
   495  0416                     	;# 
   496  0417                     	;# 
   497  0418                     	;# 
   498  0418                     	;# 
   499  0419                     	;# 
   500  041A                     	;# 
   501  041B                     	;# 
   502  041C                     	;# 
   503  041D                     	;# 
   504  041E                     	;# 
   505  048D                     	;# 
   506  0491                     	;# 
   507  0491                     	;# 
   508  0492                     	;# 
   509  0492                     	;# 
   510  0493                     	;# 
   511  0493                     	;# 
   512  0493                     	;# 
   513  0494                     	;# 
   514  0494                     	;# 
   515  0495                     	;# 
   516  0495                     	;# 
   517  0496                     	;# 
   518  0496                     	;# 
   519  0497                     	;# 
   520  0497                     	;# 
   521  0595                     	;# 
   522  0596                     	;# 
   523  0597                     	;# 
   524  059C                     	;# 
   525  059D                     	;# 
   526  059E                     	;# 
   527  0611                     	;# 
   528  0611                     	;# 
   529  0612                     	;# 
   530  0613                     	;# 
   531  0614                     	;# 
   532  0614                     	;# 
   533  0615                     	;# 
   534  0616                     	;# 
   535  0617                     	;# 
   536  0617                     	;# 
   537  0618                     	;# 
   538  0619                     	;# 
   539  061A                     	;# 
   540  061A                     	;# 
   541  061B                     	;# 
   542  061C                     	;# 
   543  061D                     	;# 
   544  061D                     	;# 
   545  061E                     	;# 
   546  061F                     	;# 
   547  0FE4                     	;# 
   548  0FE5                     	;# 
   549  0FE6                     	;# 
   550  0FE7                     	;# 
   551  0FE8                     	;# 
   552  0FE9                     	;# 
   553  0FEA                     	;# 
   554  0FEB                     	;# 
   555  0FED                     	;# 
   556  0FEE                     	;# 
   557  0FEF                     	;# 
   558  0000                     	;# 
   559  0001                     	;# 
   560  0002                     	;# 
   561  0003                     	;# 
   562  0004                     	;# 
   563  0005                     	;# 
   564  0006                     	;# 
   565  0007                     	;# 
   566  0008                     	;# 
   567  0009                     	;# 
   568  000A                     	;# 
   569  000B                     	;# 
   570  000C                     	;# 
   571  000D                     	;# 
   572  000E                     	;# 
   573  000F                     	;# 
   574  0010                     	;# 
   575  0011                     	;# 
   576  0012                     	;# 
   577  0013                     	;# 
   578  0014                     	;# 
   579  0015                     	;# 
   580  0016                     	;# 
   581  0016                     	;# 
   582  0017                     	;# 
   583  0018                     	;# 
   584  0019                     	;# 
   585  001A                     	;# 
   586  001B                     	;# 
   587  001C                     	;# 
   588  008C                     	;# 
   589  008D                     	;# 
   590  008E                     	;# 
   591  008F                     	;# 
   592  0090                     	;# 
   593  0091                     	;# 
   594  0092                     	;# 
   595  0093                     	;# 
   596  0094                     	;# 
   597  0095                     	;# 
   598  0096                     	;# 
   599  0097                     	;# 
   600  0099                     	;# 
   601  009A                     	;# 
   602  009B                     	;# 
   603  009B                     	;# 
   604  009C                     	;# 
   605  009D                     	;# 
   606  009E                     	;# 
   607  010C                     	;# 
   608  010D                     	;# 
   609  010E                     	;# 
   610  010F                     	;# 
   611  0110                     	;# 
   612  0116                     	;# 
   613  0117                     	;# 
   614  011D                     	;# 
   615  018C                     	;# 
   616  018D                     	;# 
   617  018F                     	;# 
   618  0190                     	;# 
   619  0191                     	;# 
   620  0191                     	;# 
   621  0192                     	;# 
   622  0193                     	;# 
   623  0193                     	;# 
   624  0194                     	;# 
   625  0195                     	;# 
   626  0196                     	;# 
   627  0197                     	;# 
   628  0199                     	;# 
   629  0199                     	;# 
   630  0199                     	;# 
   631  019A                     	;# 
   632  019A                     	;# 
   633  019A                     	;# 
   634  019B                     	;# 
   635  019B                     	;# 
   636  019B                     	;# 
   637  019B                     	;# 
   638  019B                     	;# 
   639  019C                     	;# 
   640  019C                     	;# 
   641  019C                     	;# 
   642  019D                     	;# 
   643  019D                     	;# 
   644  019D                     	;# 
   645  019E                     	;# 
   646  019E                     	;# 
   647  019E                     	;# 
   648  019F                     	;# 
   649  019F                     	;# 
   650  019F                     	;# 
   651  020D                     	;# 
   652  020F                     	;# 
   653  0210                     	;# 
   654  0211                     	;# 
   655  0211                     	;# 
   656  0212                     	;# 
   657  0212                     	;# 
   658  0213                     	;# 
   659  0213                     	;# 
   660  0214                     	;# 
   661  0214                     	;# 
   662  0215                     	;# 
   663  0215                     	;# 
   664  0215                     	;# 
   665  0216                     	;# 
   666  0216                     	;# 
   667  0217                     	;# 
   668  0217                     	;# 
   669  0219                     	;# 
   670  021A                     	;# 
   671  021B                     	;# 
   672  021C                     	;# 
   673  021D                     	;# 
   674  021E                     	;# 
   675  021F                     	;# 
   676  028C                     	;# 
   677  028D                     	;# 
   678  0291                     	;# 
   679  0291                     	;# 
   680  0292                     	;# 
   681  0293                     	;# 
   682  0298                     	;# 
   683  0298                     	;# 
   684  0299                     	;# 
   685  029A                     	;# 
   686  029D                     	;# 
   687  029E                     	;# 
   688  029F                     	;# 
   689  030C                     	;# 
   690  030D                     	;# 
   691  0311                     	;# 
   692  0311                     	;# 
   693  0312                     	;# 
   694  0313                     	;# 
   695  0318                     	;# 
   696  0318                     	;# 
   697  0319                     	;# 
   698  031A                     	;# 
   699  031C                     	;# 
   700  031C                     	;# 
   701  031D                     	;# 
   702  031E                     	;# 
   703  038C                     	;# 
   704  038D                     	;# 
   705  0394                     	;# 
   706  0395                     	;# 
   707  0396                     	;# 
   708  040C                     	;# 
   709  040D                     	;# 
   710  0411                     	;# 
   711  0411                     	;# 
   712  0412                     	;# 
   713  0413                     	;# 
   714  0414                     	;# 
   715  0415                     	;# 
   716  0416                     	;# 
   717  0417                     	;# 
   718  0418                     	;# 
   719  0418                     	;# 
   720  0419                     	;# 
   721  041A                     	;# 
   722  041B                     	;# 
   723  041C                     	;# 
   724  041D                     	;# 
   725  041E                     	;# 
   726  048D                     	;# 
   727  0491                     	;# 
   728  0491                     	;# 
   729  0492                     	;# 
   730  0492                     	;# 
   731  0493                     	;# 
   732  0493                     	;# 
   733  0493                     	;# 
   734  0494                     	;# 
   735  0494                     	;# 
   736  0495                     	;# 
   737  0495                     	;# 
   738  0496                     	;# 
   739  0496                     	;# 
   740  0497                     	;# 
   741  0497                     	;# 
   742  0595                     	;# 
   743  0596                     	;# 
   744  0597                     	;# 
   745  059C                     	;# 
   746  059D                     	;# 
   747  059E                     	;# 
   748  0611                     	;# 
   749  0611                     	;# 
   750  0612                     	;# 
   751  0613                     	;# 
   752  0614                     	;# 
   753  0614                     	;# 
   754  0615                     	;# 
   755  0616                     	;# 
   756  0617                     	;# 
   757  0617                     	;# 
   758  0618                     	;# 
   759  0619                     	;# 
   760  061A                     	;# 
   761  061A                     	;# 
   762  061B                     	;# 
   763  061C                     	;# 
   764  061D                     	;# 
   765  061D                     	;# 
   766  061E                     	;# 
   767  061F                     	;# 
   768  0FE4                     	;# 
   769  0FE5                     	;# 
   770  0FE6                     	;# 
   771  0FE7                     	;# 
   772  0FE8                     	;# 
   773  0FE9                     	;# 
   774  0FEA                     	;# 
   775  0FEB                     	;# 
   776  0FED                     	;# 
   777  0FEE                     	;# 
   778  0FEF                     	;# 
   779  0000                     	;# 
   780  0001                     	;# 
   781  0002                     	;# 
   782  0003                     	;# 
   783  0004                     	;# 
   784  0005                     	;# 
   785  0006                     	;# 
   786  0007                     	;# 
   787  0008                     	;# 
   788  0009                     	;# 
   789  000A                     	;# 
   790  000B                     	;# 
   791  000C                     	;# 
   792  000D                     	;# 
   793  000E                     	;# 
   794  000F                     	;# 
   795  0010                     	;# 
   796  0011                     	;# 
   797  0012                     	;# 
   798  0013                     	;# 
   799  0014                     	;# 
   800  0015                     	;# 
   801  0016                     	;# 
   802  0016                     	;# 
   803  0017                     	;# 
   804  0018                     	;# 
   805  0019                     	;# 
   806  001A                     	;# 
   807  001B                     	;# 
   808  001C                     	;# 
   809  008C                     	;# 
   810  008D                     	;# 
   811  008E                     	;# 
   812  008F                     	;# 
   813  0090                     	;# 
   814  0091                     	;# 
   815  0092                     	;# 
   816  0093                     	;# 
   817  0094                     	;# 
   818  0095                     	;# 
   819  0096                     	;# 
   820  0097                     	;# 
   821  0099                     	;# 
   822  009A                     	;# 
   823  009B                     	;# 
   824  009B                     	;# 
   825  009C                     	;# 
   826  009D                     	;# 
   827  009E                     	;# 
   828  010C                     	;# 
   829  010D                     	;# 
   830  010E                     	;# 
   831  010F                     	;# 
   832  0110                     	;# 
   833  0116                     	;# 
   834  0117                     	;# 
   835  011D                     	;# 
   836  018C                     	;# 
   837  018D                     	;# 
   838  018F                     	;# 
   839  0190                     	;# 
   840  0191                     	;# 
   841  0191                     	;# 
   842  0192                     	;# 
   843  0193                     	;# 
   844  0193                     	;# 
   845  0194                     	;# 
   846  0195                     	;# 
   847  0196                     	;# 
   848  0197                     	;# 
   849  0199                     	;# 
   850  0199                     	;# 
   851  0199                     	;# 
   852  019A                     	;# 
   853  019A                     	;# 
   854  019A                     	;# 
   855  019B                     	;# 
   856  019B                     	;# 
   857  019B                     	;# 
   858  019B                     	;# 
   859  019B                     	;# 
   860  019C                     	;# 
   861  019C                     	;# 
   862  019C                     	;# 
   863  019D                     	;# 
   864  019D                     	;# 
   865  019D                     	;# 
   866  019E                     	;# 
   867  019E                     	;# 
   868  019E                     	;# 
   869  019F                     	;# 
   870  019F                     	;# 
   871  019F                     	;# 
   872  020D                     	;# 
   873  020F                     	;# 
   874  0210                     	;# 
   875  0211                     	;# 
   876  0211                     	;# 
   877  0212                     	;# 
   878  0212                     	;# 
   879  0213                     	;# 
   880  0213                     	;# 
   881  0214                     	;# 
   882  0214                     	;# 
   883  0215                     	;# 
   884  0215                     	;# 
   885  0215                     	;# 
   886  0216                     	;# 
   887  0216                     	;# 
   888  0217                     	;# 
   889  0217                     	;# 
   890  0219                     	;# 
   891  021A                     	;# 
   892  021B                     	;# 
   893  021C                     	;# 
   894  021D                     	;# 
   895  021E                     	;# 
   896  021F                     	;# 
   897  028C                     	;# 
   898  028D                     	;# 
   899  0291                     	;# 
   900  0291                     	;# 
   901  0292                     	;# 
   902  0293                     	;# 
   903  0298                     	;# 
   904  0298                     	;# 
   905  0299                     	;# 
   906  029A                     	;# 
   907  029D                     	;# 
   908  029E                     	;# 
   909  029F                     	;# 
   910  030C                     	;# 
   911  030D                     	;# 
   912  0311                     	;# 
   913  0311                     	;# 
   914  0312                     	;# 
   915  0313                     	;# 
   916  0318                     	;# 
   917  0318                     	;# 
   918  0319                     	;# 
   919  031A                     	;# 
   920  031C                     	;# 
   921  031C                     	;# 
   922  031D                     	;# 
   923  031E                     	;# 
   924  038C                     	;# 
   925  038D                     	;# 
   926  0394                     	;# 
   927  0395                     	;# 
   928  0396                     	;# 
   929  040C                     	;# 
   930  040D                     	;# 
   931  0411                     	;# 
   932  0411                     	;# 
   933  0412                     	;# 
   934  0413                     	;# 
   935  0414                     	;# 
   936  0415                     	;# 
   937  0416                     	;# 
   938  0417                     	;# 
   939  0418                     	;# 
   940  0418                     	;# 
   941  0419                     	;# 
   942  041A                     	;# 
   943  041B                     	;# 
   944  041C                     	;# 
   945  041D                     	;# 
   946  041E                     	;# 
   947  048D                     	;# 
   948  0491                     	;# 
   949  0491                     	;# 
   950  0492                     	;# 
   951  0492                     	;# 
   952  0493                     	;# 
   953  0493                     	;# 
   954  0493                     	;# 
   955  0494                     	;# 
   956  0494                     	;# 
   957  0495                     	;# 
   958  0495                     	;# 
   959  0496                     	;# 
   960  0496                     	;# 
   961  0497                     	;# 
   962  0497                     	;# 
   963  0595                     	;# 
   964  0596                     	;# 
   965  0597                     	;# 
   966  059C                     	;# 
   967  059D                     	;# 
   968  059E                     	;# 
   969  0611                     	;# 
   970  0611                     	;# 
   971  0612                     	;# 
   972  0613                     	;# 
   973  0614                     	;# 
   974  0614                     	;# 
   975  0615                     	;# 
   976  0616                     	;# 
   977  0617                     	;# 
   978  0617                     	;# 
   979  0618                     	;# 
   980  0619                     	;# 
   981  061A                     	;# 
   982  061A                     	;# 
   983  061B                     	;# 
   984  061C                     	;# 
   985  061D                     	;# 
   986  061D                     	;# 
   987  061E                     	;# 
   988  061F                     	;# 
   989  0FE4                     	;# 
   990  0FE5                     	;# 
   991  0FE6                     	;# 
   992  0FE7                     	;# 
   993  0FE8                     	;# 
   994  0FE9                     	;# 
   995  0FEA                     	;# 
   996  0FEB                     	;# 
   997  0FED                     	;# 
   998  0FEE                     	;# 
   999  0FEF                     	;# 
  1000  0000                     	;# 
  1001  0001                     	;# 
  1002  0002                     	;# 
  1003  0003                     	;# 
  1004  0004                     	;# 
  1005  0005                     	;# 
  1006  0006                     	;# 
  1007  0007                     	;# 
  1008  0008                     	;# 
  1009  0009                     	;# 
  1010  000A                     	;# 
  1011  000B                     	;# 
  1012  000C                     	;# 
  1013  000D                     	;# 
  1014  000E                     	;# 
  1015  000F                     	;# 
  1016  0010                     	;# 
  1017  0011                     	;# 
  1018  0012                     	;# 
  1019  0013                     	;# 
  1020  0014                     	;# 
  1021  0015                     	;# 
  1022  0016                     	;# 
  1023  0016                     	;# 
  1024  0017                     	;# 
  1025  0018                     	;# 
  1026  0019                     	;# 
  1027  001A                     	;# 
  1028  001B                     	;# 
  1029  001C                     	;# 
  1030  008C                     	;# 
  1031  008D                     	;# 
  1032  008E                     	;# 
  1033  008F                     	;# 
  1034  0090                     	;# 
  1035  0091                     	;# 
  1036  0092                     	;# 
  1037  0093                     	;# 
  1038  0094                     	;# 
  1039  0095                     	;# 
  1040  0096                     	;# 
  1041  0097                     	;# 
  1042  0099                     	;# 
  1043  009A                     	;# 
  1044  009B                     	;# 
  1045  009B                     	;# 
  1046  009C                     	;# 
  1047  009D                     	;# 
  1048  009E                     	;# 
  1049  010C                     	;# 
  1050  010D                     	;# 
  1051  010E                     	;# 
  1052  010F                     	;# 
  1053  0110                     	;# 
  1054  0116                     	;# 
  1055  0117                     	;# 
  1056  011D                     	;# 
  1057  018C                     	;# 
  1058  018D                     	;# 
  1059  018F                     	;# 
  1060  0190                     	;# 
  1061  0191                     	;# 
  1062  0191                     	;# 
  1063  0192                     	;# 
  1064  0193                     	;# 
  1065  0193                     	;# 
  1066  0194                     	;# 
  1067  0195                     	;# 
  1068  0196                     	;# 
  1069  0197                     	;# 
  1070  0199                     	;# 
  1071  0199                     	;# 
  1072  0199                     	;# 
  1073  019A                     	;# 
  1074  019A                     	;# 
  1075  019A                     	;# 
  1076  019B                     	;# 
  1077  019B                     	;# 
  1078  019B                     	;# 
  1079  019B                     	;# 
  1080  019B                     	;# 
  1081  019C                     	;# 
  1082  019C                     	;# 
  1083  019C                     	;# 
  1084  019D                     	;# 
  1085  019D                     	;# 
  1086  019D                     	;# 
  1087  019E                     	;# 
  1088  019E                     	;# 
  1089  019E                     	;# 
  1090  019F                     	;# 
  1091  019F                     	;# 
  1092  019F                     	;# 
  1093  020D                     	;# 
  1094  020F                     	;# 
  1095  0210                     	;# 
  1096  0211                     	;# 
  1097  0211                     	;# 
  1098  0212                     	;# 
  1099  0212                     	;# 
  1100  0213                     	;# 
  1101  0213                     	;# 
  1102  0214                     	;# 
  1103  0214                     	;# 
  1104  0215                     	;# 
  1105  0215                     	;# 
  1106  0215                     	;# 
  1107  0216                     	;# 
  1108  0216                     	;# 
  1109  0217                     	;# 
  1110  0217                     	;# 
  1111  0219                     	;# 
  1112  021A                     	;# 
  1113  021B                     	;# 
  1114  021C                     	;# 
  1115  021D                     	;# 
  1116  021E                     	;# 
  1117  021F                     	;# 
  1118  028C                     	;# 
  1119  028D                     	;# 
  1120  0291                     	;# 
  1121  0291                     	;# 
  1122  0292                     	;# 
  1123  0293                     	;# 
  1124  0298                     	;# 
  1125  0298                     	;# 
  1126  0299                     	;# 
  1127  029A                     	;# 
  1128  029D                     	;# 
  1129  029E                     	;# 
  1130  029F                     	;# 
  1131  030C                     	;# 
  1132  030D                     	;# 
  1133  0311                     	;# 
  1134  0311                     	;# 
  1135  0312                     	;# 
  1136  0313                     	;# 
  1137  0318                     	;# 
  1138  0318                     	;# 
  1139  0319                     	;# 
  1140  031A                     	;# 
  1141  031C                     	;# 
  1142  031C                     	;# 
  1143  031D                     	;# 
  1144  031E                     	;# 
  1145  038C                     	;# 
  1146  038D                     	;# 
  1147  0394                     	;# 
  1148  0395                     	;# 
  1149  0396                     	;# 
  1150  040C                     	;# 
  1151  040D                     	;# 
  1152  0411                     	;# 
  1153  0411                     	;# 
  1154  0412                     	;# 
  1155  0413                     	;# 
  1156  0414                     	;# 
  1157  0415                     	;# 
  1158  0416                     	;# 
  1159  0417                     	;# 
  1160  0418                     	;# 
  1161  0418                     	;# 
  1162  0419                     	;# 
  1163  041A                     	;# 
  1164  041B                     	;# 
  1165  041C                     	;# 
  1166  041D                     	;# 
  1167  041E                     	;# 
  1168  048D                     	;# 
  1169  0491                     	;# 
  1170  0491                     	;# 
  1171  0492                     	;# 
  1172  0492                     	;# 
  1173  0493                     	;# 
  1174  0493                     	;# 
  1175  0493                     	;# 
  1176  0494                     	;# 
  1177  0494                     	;# 
  1178  0495                     	;# 
  1179  0495                     	;# 
  1180  0496                     	;# 
  1181  0496                     	;# 
  1182  0497                     	;# 
  1183  0497                     	;# 
  1184  0595                     	;# 
  1185  0596                     	;# 
  1186  0597                     	;# 
  1187  059C                     	;# 
  1188  059D                     	;# 
  1189  059E                     	;# 
  1190  0611                     	;# 
  1191  0611                     	;# 
  1192  0612                     	;# 
  1193  0613                     	;# 
  1194  0614                     	;# 
  1195  0614                     	;# 
  1196  0615                     	;# 
  1197  0616                     	;# 
  1198  0617                     	;# 
  1199  0617                     	;# 
  1200  0618                     	;# 
  1201  0619                     	;# 
  1202  061A                     	;# 
  1203  061A                     	;# 
  1204  061B                     	;# 
  1205  061C                     	;# 
  1206  061D                     	;# 
  1207  061D                     	;# 
  1208  061E                     	;# 
  1209  061F                     	;# 
  1210  0FE4                     	;# 
  1211  0FE5                     	;# 
  1212  0FE6                     	;# 
  1213  0FE7                     	;# 
  1214  0FE8                     	;# 
  1215  0FE9                     	;# 
  1216  0FEA                     	;# 
  1217  0FEB                     	;# 
  1218  0FED                     	;# 
  1219  0FEE                     	;# 
  1220  0FEF                     	;# 
  1221  0000                     	;# 
  1222  0001                     	;# 
  1223  0002                     	;# 
  1224  0003                     	;# 
  1225  0004                     	;# 
  1226  0005                     	;# 
  1227  0006                     	;# 
  1228  0007                     	;# 
  1229  0008                     	;# 
  1230  0009                     	;# 
  1231  000A                     	;# 
  1232  000B                     	;# 
  1233  000C                     	;# 
  1234  000D                     	;# 
  1235  000E                     	;# 
  1236  000F                     	;# 
  1237  0010                     	;# 
  1238  0011                     	;# 
  1239  0012                     	;# 
  1240  0013                     	;# 
  1241  0014                     	;# 
  1242  0015                     	;# 
  1243  0016                     	;# 
  1244  0016                     	;# 
  1245  0017                     	;# 
  1246  0018                     	;# 
  1247  0019                     	;# 
  1248  001A                     	;# 
  1249  001B                     	;# 
  1250  001C                     	;# 
  1251  008C                     	;# 
  1252  008D                     	;# 
  1253  008E                     	;# 
  1254  008F                     	;# 
  1255  0090                     	;# 
  1256  0091                     	;# 
  1257  0092                     	;# 
  1258  0093                     	;# 
  1259  0094                     	;# 
  1260  0095                     	;# 
  1261  0096                     	;# 
  1262  0097                     	;# 
  1263  0099                     	;# 
  1264  009A                     	;# 
  1265  009B                     	;# 
  1266  009B                     	;# 
  1267  009C                     	;# 
  1268  009D                     	;# 
  1269  009E                     	;# 
  1270  010C                     	;# 
  1271  010D                     	;# 
  1272  010E                     	;# 
  1273  010F                     	;# 
  1274  0110                     	;# 
  1275  0116                     	;# 
  1276  0117                     	;# 
  1277  011D                     	;# 
  1278  018C                     	;# 
  1279  018D                     	;# 
  1280  018F                     	;# 
  1281  0190                     	;# 
  1282  0191                     	;# 
  1283  0191                     	;# 
  1284  0192                     	;# 
  1285  0193                     	;# 
  1286  0193                     	;# 
  1287  0194                     	;# 
  1288  0195                     	;# 
  1289  0196                     	;# 
  1290  0197                     	;# 
  1291  0199                     	;# 
  1292  0199                     	;# 
  1293  0199                     	;# 
  1294  019A                     	;# 
  1295  019A                     	;# 
  1296  019A                     	;# 
  1297  019B                     	;# 
  1298  019B                     	;# 
  1299  019B                     	;# 
  1300  019B                     	;# 
  1301  019B                     	;# 
  1302  019C                     	;# 
  1303  019C                     	;# 
  1304  019C                     	;# 
  1305  019D                     	;# 
  1306  019D                     	;# 
  1307  019D                     	;# 
  1308  019E                     	;# 
  1309  019E                     	;# 
  1310  019E                     	;# 
  1311  019F                     	;# 
  1312  019F                     	;# 
  1313  019F                     	;# 
  1314  020D                     	;# 
  1315  020F                     	;# 
  1316  0210                     	;# 
  1317  0211                     	;# 
  1318  0211                     	;# 
  1319  0212                     	;# 
  1320  0212                     	;# 
  1321  0213                     	;# 
  1322  0213                     	;# 
  1323  0214                     	;# 
  1324  0214                     	;# 
  1325  0215                     	;# 
  1326  0215                     	;# 
  1327  0215                     	;# 
  1328  0216                     	;# 
  1329  0216                     	;# 
  1330  0217                     	;# 
  1331  0217                     	;# 
  1332  0219                     	;# 
  1333  021A                     	;# 
  1334  021B                     	;# 
  1335  021C                     	;# 
  1336  021D                     	;# 
  1337  021E                     	;# 
  1338  021F                     	;# 
  1339  028C                     	;# 
  1340  028D                     	;# 
  1341  0291                     	;# 
  1342  0291                     	;# 
  1343  0292                     	;# 
  1344  0293                     	;# 
  1345  0298                     	;# 
  1346  0298                     	;# 
  1347  0299                     	;# 
  1348  029A                     	;# 
  1349  029D                     	;# 
  1350  029E                     	;# 
  1351  029F                     	;# 
  1352  030C                     	;# 
  1353  030D                     	;# 
  1354  0311                     	;# 
  1355  0311                     	;# 
  1356  0312                     	;# 
  1357  0313                     	;# 
  1358  0318                     	;# 
  1359  0318                     	;# 
  1360  0319                     	;# 
  1361  031A                     	;# 
  1362  031C                     	;# 
  1363  031C                     	;# 
  1364  031D                     	;# 
  1365  031E                     	;# 
  1366  038C                     	;# 
  1367  038D                     	;# 
  1368  0394                     	;# 
  1369  0395                     	;# 
  1370  0396                     	;# 
  1371  040C                     	;# 
  1372  040D                     	;# 
  1373  0411                     	;# 
  1374  0411                     	;# 
  1375  0412                     	;# 
  1376  0413                     	;# 
  1377  0414                     	;# 
  1378  0415                     	;# 
  1379  0416                     	;# 
  1380  0417                     	;# 
  1381  0418                     	;# 
  1382  0418                     	;# 
  1383  0419                     	;# 
  1384  041A                     	;# 
  1385  041B                     	;# 
  1386  041C                     	;# 
  1387  041D                     	;# 
  1388  041E                     	;# 
  1389  048D                     	;# 
  1390  0491                     	;# 
  1391  0491                     	;# 
  1392  0492                     	;# 
  1393  0492                     	;# 
  1394  0493                     	;# 
  1395  0493                     	;# 
  1396  0493                     	;# 
  1397  0494                     	;# 
  1398  0494                     	;# 
  1399  0495                     	;# 
  1400  0495                     	;# 
  1401  0496                     	;# 
  1402  0496                     	;# 
  1403  0497                     	;# 
  1404  0497                     	;# 
  1405  0595                     	;# 
  1406  0596                     	;# 
  1407  0597                     	;# 
  1408  059C                     	;# 
  1409  059D                     	;# 
  1410  059E                     	;# 
  1411  0611                     	;# 
  1412  0611                     	;# 
  1413  0612                     	;# 
  1414  0613                     	;# 
  1415  0614                     	;# 
  1416  0614                     	;# 
  1417  0615                     	;# 
  1418  0616                     	;# 
  1419  0617                     	;# 
  1420  0617                     	;# 
  1421  0618                     	;# 
  1422  0619                     	;# 
  1423  061A                     	;# 
  1424  061A                     	;# 
  1425  061B                     	;# 
  1426  061C                     	;# 
  1427  061D                     	;# 
  1428  061D                     	;# 
  1429  061E                     	;# 
  1430  061F                     	;# 
  1431  0FE4                     	;# 
  1432  0FE5                     	;# 
  1433  0FE6                     	;# 
  1434  0FE7                     	;# 
  1435  0FE8                     	;# 
  1436  0FE9                     	;# 
  1437  0FEA                     	;# 
  1438  0FEB                     	;# 
  1439  0FED                     	;# 
  1440  0FEE                     	;# 
  1441  0FEF                     	;# 
  1442  0000                     	;# 
  1443  0001                     	;# 
  1444  0002                     	;# 
  1445  0003                     	;# 
  1446  0004                     	;# 
  1447  0005                     	;# 
  1448  0006                     	;# 
  1449  0007                     	;# 
  1450  0008                     	;# 
  1451  0009                     	;# 
  1452  000A                     	;# 
  1453  000B                     	;# 
  1454  000C                     	;# 
  1455  000D                     	;# 
  1456  000E                     	;# 
  1457  000F                     	;# 
  1458  0010                     	;# 
  1459  0011                     	;# 
  1460  0012                     	;# 
  1461  0013                     	;# 
  1462  0014                     	;# 
  1463  0015                     	;# 
  1464  0016                     	;# 
  1465  0016                     	;# 
  1466  0017                     	;# 
  1467  0018                     	;# 
  1468  0019                     	;# 
  1469  001A                     	;# 
  1470  001B                     	;# 
  1471  001C                     	;# 
  1472  008C                     	;# 
  1473  008D                     	;# 
  1474  008E                     	;# 
  1475  008F                     	;# 
  1476  0090                     	;# 
  1477  0091                     	;# 
  1478  0092                     	;# 
  1479  0093                     	;# 
  1480  0094                     	;# 
  1481  0095                     	;# 
  1482  0096                     	;# 
  1483  0097                     	;# 
  1484  0099                     	;# 
  1485  009A                     	;# 
  1486  009B                     	;# 
  1487  009B                     	;# 
  1488  009C                     	;# 
  1489  009D                     	;# 
  1490  009E                     	;# 
  1491  010C                     	;# 
  1492  010D                     	;# 
  1493  010E                     	;# 
  1494  010F                     	;# 
  1495  0110                     	;# 
  1496  0116                     	;# 
  1497  0117                     	;# 
  1498  011D                     	;# 
  1499  018C                     	;# 
  1500  018D                     	;# 
  1501  018F                     	;# 
  1502  0190                     	;# 
  1503  0191                     	;# 
  1504  0191                     	;# 
  1505  0192                     	;# 
  1506  0193                     	;# 
  1507  0193                     	;# 
  1508  0194                     	;# 
  1509  0195                     	;# 
  1510  0196                     	;# 
  1511  0197                     	;# 
  1512  0199                     	;# 
  1513  0199                     	;# 
  1514  0199                     	;# 
  1515  019A                     	;# 
  1516  019A                     	;# 
  1517  019A                     	;# 
  1518  019B                     	;# 
  1519  019B                     	;# 
  1520  019B                     	;# 
  1521  019B                     	;# 
  1522  019B                     	;# 
  1523  019C                     	;# 
  1524  019C                     	;# 
  1525  019C                     	;# 
  1526  019D                     	;# 
  1527  019D                     	;# 
  1528  019D                     	;# 
  1529  019E                     	;# 
  1530  019E                     	;# 
  1531  019E                     	;# 
  1532  019F                     	;# 
  1533  019F                     	;# 
  1534  019F                     	;# 
  1535  020D                     	;# 
  1536  020F                     	;# 
  1537  0210                     	;# 
  1538  0211                     	;# 
  1539  0211                     	;# 
  1540  0212                     	;# 
  1541  0212                     	;# 
  1542  0213                     	;# 
  1543  0213                     	;# 
  1544  0214                     	;# 
  1545  0214                     	;# 
  1546  0215                     	;# 
  1547  0215                     	;# 
  1548  0215                     	;# 
  1549  0216                     	;# 
  1550  0216                     	;# 
  1551  0217                     	;# 
  1552  0217                     	;# 
  1553  0219                     	;# 
  1554  021A                     	;# 
  1555  021B                     	;# 
  1556  021C                     	;# 
  1557  021D                     	;# 
  1558  021E                     	;# 
  1559  021F                     	;# 
  1560  028C                     	;# 
  1561  028D                     	;# 
  1562  0291                     	;# 
  1563  0291                     	;# 
  1564  0292                     	;# 
  1565  0293                     	;# 
  1566  0298                     	;# 
  1567  0298                     	;# 
  1568  0299                     	;# 
  1569  029A                     	;# 
  1570  029D                     	;# 
  1571  029E                     	;# 
  1572  029F                     	;# 
  1573  030C                     	;# 
  1574  030D                     	;# 
  1575  0311                     	;# 
  1576  0311                     	;# 
  1577  0312                     	;# 
  1578  0313                     	;# 
  1579  0318                     	;# 
  1580  0318                     	;# 
  1581  0319                     	;# 
  1582  031A                     	;# 
  1583  031C                     	;# 
  1584  031C                     	;# 
  1585  031D                     	;# 
  1586  031E                     	;# 
  1587  038C                     	;# 
  1588  038D                     	;# 
  1589  0394                     	;# 
  1590  0395                     	;# 
  1591  0396                     	;# 
  1592  040C                     	;# 
  1593  040D                     	;# 
  1594  0411                     	;# 
  1595  0411                     	;# 
  1596  0412                     	;# 
  1597  0413                     	;# 
  1598  0414                     	;# 
  1599  0415                     	;# 
  1600  0416                     	;# 
  1601  0417                     	;# 
  1602  0418                     	;# 
  1603  0418                     	;# 
  1604  0419                     	;# 
  1605  041A                     	;# 
  1606  041B                     	;# 
  1607  041C                     	;# 
  1608  041D                     	;# 
  1609  041E                     	;# 
  1610  048D                     	;# 
  1611  0491                     	;# 
  1612  0491                     	;# 
  1613  0492                     	;# 
  1614  0492                     	;# 
  1615  0493                     	;# 
  1616  0493                     	;# 
  1617  0493                     	;# 
  1618  0494                     	;# 
  1619  0494                     	;# 
  1620  0495                     	;# 
  1621  0495                     	;# 
  1622  0496                     	;# 
  1623  0496                     	;# 
  1624  0497                     	;# 
  1625  0497                     	;# 
  1626  0595                     	;# 
  1627  0596                     	;# 
  1628  0597                     	;# 
  1629  059C                     	;# 
  1630  059D                     	;# 
  1631  059E                     	;# 
  1632  0611                     	;# 
  1633  0611                     	;# 
  1634  0612                     	;# 
  1635  0613                     	;# 
  1636  0614                     	;# 
  1637  0614                     	;# 
  1638  0615                     	;# 
  1639  0616                     	;# 
  1640  0617                     	;# 
  1641  0617                     	;# 
  1642  0618                     	;# 
  1643  0619                     	;# 
  1644  061A                     	;# 
  1645  061A                     	;# 
  1646  061B                     	;# 
  1647  061C                     	;# 
  1648  061D                     	;# 
  1649  061D                     	;# 
  1650  061E                     	;# 
  1651  061F                     	;# 
  1652  0FE4                     	;# 
  1653  0FE5                     	;# 
  1654  0FE6                     	;# 
  1655  0FE7                     	;# 
  1656  0FE8                     	;# 
  1657  0FE9                     	;# 
  1658  0FEA                     	;# 
  1659  0FEB                     	;# 
  1660  0FED                     	;# 
  1661  0FEE                     	;# 
  1662  0FEF                     	;# 
  1663  0000                     	;# 
  1664  0001                     	;# 
  1665  0002                     	;# 
  1666  0003                     	;# 
  1667  0004                     	;# 
  1668  0005                     	;# 
  1669  0006                     	;# 
  1670  0007                     	;# 
  1671  0008                     	;# 
  1672  0009                     	;# 
  1673  000A                     	;# 
  1674  000B                     	;# 
  1675  000C                     	;# 
  1676  000D                     	;# 
  1677  000E                     	;# 
  1678  000F                     	;# 
  1679  0010                     	;# 
  1680  0011                     	;# 
  1681  0012                     	;# 
  1682  0013                     	;# 
  1683  0014                     	;# 
  1684  0015                     	;# 
  1685  0016                     	;# 
  1686  0016                     	;# 
  1687  0017                     	;# 
  1688  0018                     	;# 
  1689  0019                     	;# 
  1690  001A                     	;# 
  1691  001B                     	;# 
  1692  001C                     	;# 
  1693  008C                     	;# 
  1694  008D                     	;# 
  1695  008E                     	;# 
  1696  008F                     	;# 
  1697  0090                     	;# 
  1698  0091                     	;# 
  1699  0092                     	;# 
  1700  0093                     	;# 
  1701  0094                     	;# 
  1702  0095                     	;# 
  1703  0096                     	;# 
  1704  0097                     	;# 
  1705  0099                     	;# 
  1706  009A                     	;# 
  1707  009B                     	;# 
  1708  009B                     	;# 
  1709  009C                     	;# 
  1710  009D                     	;# 
  1711  009E                     	;# 
  1712  010C                     	;# 
  1713  010D                     	;# 
  1714  010E                     	;# 
  1715  010F                     	;# 
  1716  0110                     	;# 
  1717  0116                     	;# 
  1718  0117                     	;# 
  1719  011D                     	;# 
  1720  018C                     	;# 
  1721  018D                     	;# 
  1722  018F                     	;# 
  1723  0190                     	;# 
  1724  0191                     	;# 
  1725  0191                     	;# 
  1726  0192                     	;# 
  1727  0193                     	;# 
  1728  0193                     	;# 
  1729  0194                     	;# 
  1730  0195                     	;# 
  1731  0196                     	;# 
  1732  0197                     	;# 
  1733  0199                     	;# 
  1734  0199                     	;# 
  1735  0199                     	;# 
  1736  019A                     	;# 
  1737  019A                     	;# 
  1738  019A                     	;# 
  1739  019B                     	;# 
  1740  019B                     	;# 
  1741  019B                     	;# 
  1742  019B                     	;# 
  1743  019B                     	;# 
  1744  019C                     	;# 
  1745  019C                     	;# 
  1746  019C                     	;# 
  1747  019D                     	;# 
  1748  019D                     	;# 
  1749  019D                     	;# 
  1750  019E                     	;# 
  1751  019E                     	;# 
  1752  019E                     	;# 
  1753  019F                     	;# 
  1754  019F                     	;# 
  1755  019F                     	;# 
  1756  020D                     	;# 
  1757  020F                     	;# 
  1758  0210                     	;# 
  1759  0211                     	;# 
  1760  0211                     	;# 
  1761  0212                     	;# 
  1762  0212                     	;# 
  1763  0213                     	;# 
  1764  0213                     	;# 
  1765  0214                     	;# 
  1766  0214                     	;# 
  1767  0215                     	;# 
  1768  0215                     	;# 
  1769  0215                     	;# 
  1770  0216                     	;# 
  1771  0216                     	;# 
  1772  0217                     	;# 
  1773  0217                     	;# 
  1774  0219                     	;# 
  1775  021A                     	;# 
  1776  021B                     	;# 
  1777  021C                     	;# 
  1778  021D                     	;# 
  1779  021E                     	;# 
  1780  021F                     	;# 
  1781  028C                     	;# 
  1782  028D                     	;# 
  1783  0291                     	;# 
  1784  0291                     	;# 
  1785  0292                     	;# 
  1786  0293                     	;# 
  1787  0298                     	;# 
  1788  0298                     	;# 
  1789  0299                     	;# 
  1790  029A                     	;# 
  1791  029D                     	;# 
  1792  029E                     	;# 
  1793  029F                     	;# 
  1794  030C                     	;# 
  1795  030D                     	;# 
  1796  0311                     	;# 
  1797  0311                     	;# 
  1798  0312                     	;# 
  1799  0313                     	;# 
  1800  0318                     	;# 
  1801  0318                     	;# 
  1802  0319                     	;# 
  1803  031A                     	;# 
  1804  031C                     	;# 
  1805  031C                     	;# 
  1806  031D                     	;# 
  1807  031E                     	;# 
  1808  038C                     	;# 
  1809  038D                     	;# 
  1810  0394                     	;# 
  1811  0395                     	;# 
  1812  0396                     	;# 
  1813  040C                     	;# 
  1814  040D                     	;# 
  1815  0411                     	;# 
  1816  0411                     	;# 
  1817  0412                     	;# 
  1818  0413                     	;# 
  1819  0414                     	;# 
  1820  0415                     	;# 
  1821  0416                     	;# 
  1822  0417                     	;# 
  1823  0418                     	;# 
  1824  0418                     	;# 
  1825  0419                     	;# 
  1826  041A                     	;# 
  1827  041B                     	;# 
  1828  041C                     	;# 
  1829  041D                     	;# 
  1830  041E                     	;# 
  1831  048D                     	;# 
  1832  0491                     	;# 
  1833  0491                     	;# 
  1834  0492                     	;# 
  1835  0492                     	;# 
  1836  0493                     	;# 
  1837  0493                     	;# 
  1838  0493                     	;# 
  1839  0494                     	;# 
  1840  0494                     	;# 
  1841  0495                     	;# 
  1842  0495                     	;# 
  1843  0496                     	;# 
  1844  0496                     	;# 
  1845  0497                     	;# 
  1846  0497                     	;# 
  1847  0595                     	;# 
  1848  0596                     	;# 
  1849  0597                     	;# 
  1850  059C                     	;# 
  1851  059D                     	;# 
  1852  059E                     	;# 
  1853  0611                     	;# 
  1854  0611                     	;# 
  1855  0612                     	;# 
  1856  0613                     	;# 
  1857  0614                     	;# 
  1858  0614                     	;# 
  1859  0615                     	;# 
  1860  0616                     	;# 
  1861  0617                     	;# 
  1862  0617                     	;# 
  1863  0618                     	;# 
  1864  0619                     	;# 
  1865  061A                     	;# 
  1866  061A                     	;# 
  1867  061B                     	;# 
  1868  061C                     	;# 
  1869  061D                     	;# 
  1870  061D                     	;# 
  1871  061E                     	;# 
  1872  061F                     	;# 
  1873  0FE4                     	;# 
  1874  0FE5                     	;# 
  1875  0FE6                     	;# 
  1876  0FE7                     	;# 
  1877  0FE8                     	;# 
  1878  0FE9                     	;# 
  1879  0FEA                     	;# 
  1880  0FEB                     	;# 
  1881  0FED                     	;# 
  1882  0FEE                     	;# 
  1883  0FEF                     	;# 
  1884  0000                     	;# 
  1885  0001                     	;# 
  1886  0002                     	;# 
  1887  0003                     	;# 
  1888  0004                     	;# 
  1889  0005                     	;# 
  1890  0006                     	;# 
  1891  0007                     	;# 
  1892  0008                     	;# 
  1893  0009                     	;# 
  1894  000A                     	;# 
  1895  000B                     	;# 
  1896  000C                     	;# 
  1897  000D                     	;# 
  1898  000E                     	;# 
  1899  000F                     	;# 
  1900  0010                     	;# 
  1901  0011                     	;# 
  1902  0012                     	;# 
  1903  0013                     	;# 
  1904  0014                     	;# 
  1905  0015                     	;# 
  1906  0016                     	;# 
  1907  0016                     	;# 
  1908  0017                     	;# 
  1909  0018                     	;# 
  1910  0019                     	;# 
  1911  001A                     	;# 
  1912  001B                     	;# 
  1913  001C                     	;# 
  1914  008C                     	;# 
  1915  008D                     	;# 
  1916  008E                     	;# 
  1917  008F                     	;# 
  1918  0090                     	;# 
  1919  0091                     	;# 
  1920  0092                     	;# 
  1921  0093                     	;# 
  1922  0094                     	;# 
  1923  0095                     	;# 
  1924  0096                     	;# 
  1925  0097                     	;# 
  1926  0099                     	;# 
  1927  009A                     	;# 
  1928  009B                     	;# 
  1929  009B                     	;# 
  1930  009C                     	;# 
  1931  009D                     	;# 
  1932  009E                     	;# 
  1933  010C                     	;# 
  1934  010D                     	;# 
  1935  010E                     	;# 
  1936  010F                     	;# 
  1937  0110                     	;# 
  1938  0116                     	;# 
  1939  0117                     	;# 
  1940  011D                     	;# 
  1941  018C                     	;# 
  1942  018D                     	;# 
  1943  018F                     	;# 
  1944  0190                     	;# 
  1945  0191                     	;# 
  1946  0191                     	;# 
  1947  0192                     	;# 
  1948  0193                     	;# 
  1949  0193                     	;# 
  1950  0194                     	;# 
  1951  0195                     	;# 
  1952  0196                     	;# 
  1953  0197                     	;# 
  1954  0199                     	;# 
  1955  0199                     	;# 
  1956  0199                     	;# 
  1957  019A                     	;# 
  1958  019A                     	;# 
  1959  019A                     	;# 
  1960  019B                     	;# 
  1961  019B                     	;# 
  1962  019B                     	;# 
  1963  019B                     	;# 
  1964  019B                     	;# 
  1965  019C                     	;# 
  1966  019C                     	;# 
  1967  019C                     	;# 
  1968  019D                     	;# 
  1969  019D                     	;# 
  1970  019D                     	;# 
  1971  019E                     	;# 
  1972  019E                     	;# 
  1973  019E                     	;# 
  1974  019F                     	;# 
  1975  019F                     	;# 
  1976  019F                     	;# 
  1977  020D                     	;# 
  1978  020F                     	;# 
  1979  0210                     	;# 
  1980  0211                     	;# 
  1981  0211                     	;# 
  1982  0212                     	;# 
  1983  0212                     	;# 
  1984  0213                     	;# 
  1985  0213                     	;# 
  1986  0214                     	;# 
  1987  0214                     	;# 
  1988  0215                     	;# 
  1989  0215                     	;# 
  1990  0215                     	;# 
  1991  0216                     	;# 
  1992  0216                     	;# 
  1993  0217                     	;# 
  1994  0217                     	;# 
  1995  0219                     	;# 
  1996  021A                     	;# 
  1997  021B                     	;# 
  1998  021C                     	;# 
  1999  021D                     	;# 
  2000  021E                     	;# 
  2001  021F                     	;# 
  2002  028C                     	;# 
  2003  028D                     	;# 
  2004  0291                     	;# 
  2005  0291                     	;# 
  2006  0292                     	;# 
  2007  0293                     	;# 
  2008  0298                     	;# 
  2009  0298                     	;# 
  2010  0299                     	;# 
  2011  029A                     	;# 
  2012  029D                     	;# 
  2013  029E                     	;# 
  2014  029F                     	;# 
  2015  030C                     	;# 
  2016  030D                     	;# 
  2017  0311                     	;# 
  2018  0311                     	;# 
  2019  0312                     	;# 
  2020  0313                     	;# 
  2021  0318                     	;# 
  2022  0318                     	;# 
  2023  0319                     	;# 
  2024  031A                     	;# 
  2025  031C                     	;# 
  2026  031C                     	;# 
  2027  031D                     	;# 
  2028  031E                     	;# 
  2029  038C                     	;# 
  2030  038D                     	;# 
  2031  0394                     	;# 
  2032  0395                     	;# 
  2033  0396                     	;# 
  2034  040C                     	;# 
  2035  040D                     	;# 
  2036  0411                     	;# 
  2037  0411                     	;# 
  2038  0412                     	;# 
  2039  0413                     	;# 
  2040  0414                     	;# 
  2041  0415                     	;# 
  2042  0416                     	;# 
  2043  0417                     	;# 
  2044  0418                     	;# 
  2045  0418                     	;# 
  2046  0419                     	;# 
  2047  041A                     	;# 
  2048  041B                     	;# 
  2049  041C                     	;# 
  2050  041D                     	;# 
  2051  041E                     	;# 
  2052  048D                     	;# 
  2053  0491                     	;# 
  2054  0491                     	;# 
  2055  0492                     	;# 
  2056  0492                     	;# 
  2057  0493                     	;# 
  2058  0493                     	;# 
  2059  0493                     	;# 
  2060  0494                     	;# 
  2061  0494                     	;# 
  2062  0495                     	;# 
  2063  0495                     	;# 
  2064  0496                     	;# 
  2065  0496                     	;# 
  2066  0497                     	;# 
  2067  0497                     	;# 
  2068  0595                     	;# 
  2069  0596                     	;# 
  2070  0597                     	;# 
  2071  059C                     	;# 
  2072  059D                     	;# 
  2073  059E                     	;# 
  2074  0611                     	;# 
  2075  0611                     	;# 
  2076  0612                     	;# 
  2077  0613                     	;# 
  2078  0614                     	;# 
  2079  0614                     	;# 
  2080  0615                     	;# 
  2081  0616                     	;# 
  2082  0617                     	;# 
  2083  0617                     	;# 
  2084  0618                     	;# 
  2085  0619                     	;# 
  2086  061A                     	;# 
  2087  061A                     	;# 
  2088  061B                     	;# 
  2089  061C                     	;# 
  2090  061D                     	;# 
  2091  061D                     	;# 
  2092  061E                     	;# 
  2093  061F                     	;# 
  2094  0FE4                     	;# 
  2095  0FE5                     	;# 
  2096  0FE6                     	;# 
  2097  0FE7                     	;# 
  2098  0FE8                     	;# 
  2099  0FE9                     	;# 
  2100  0FEA                     	;# 
  2101  0FEB                     	;# 
  2102  0FED                     	;# 
  2103  0FEE                     	;# 
  2104  0FEF                     	;# 
  2105  0000                     	;# 
  2106  0001                     	;# 
  2107  0002                     	;# 
  2108  0003                     	;# 
  2109  0004                     	;# 
  2110  0005                     	;# 
  2111  0006                     	;# 
  2112  0007                     	;# 
  2113  0008                     	;# 
  2114  0009                     	;# 
  2115  000A                     	;# 
  2116  000B                     	;# 
  2117  000C                     	;# 
  2118  000D                     	;# 
  2119  000E                     	;# 
  2120  000F                     	;# 
  2121  0010                     	;# 
  2122  0011                     	;# 
  2123  0012                     	;# 
  2124  0013                     	;# 
  2125  0014                     	;# 
  2126  0015                     	;# 
  2127  0016                     	;# 
  2128  0016                     	;# 
  2129  0017                     	;# 
  2130  0018                     	;# 
  2131  0019                     	;# 
  2132  001A                     	;# 
  2133  001B                     	;# 
  2134  001C                     	;# 
  2135  008C                     	;# 
  2136  008D                     	;# 
  2137  008E                     	;# 
  2138  008F                     	;# 
  2139  0090                     	;# 
  2140  0091                     	;# 
  2141  0092                     	;# 
  2142  0093                     	;# 
  2143  0094                     	;# 
  2144  0095                     	;# 
  2145  0096                     	;# 
  2146  0097                     	;# 
  2147  0099                     	;# 
  2148  009A                     	;# 
  2149  009B                     	;# 
  2150  009B                     	;# 
  2151  009C                     	;# 
  2152  009D                     	;# 
  2153  009E                     	;# 
  2154  010C                     	;# 
  2155  010D                     	;# 
  2156  010E                     	;# 
  2157  010F                     	;# 
  2158  0110                     	;# 
  2159  0116                     	;# 
  2160  0117                     	;# 
  2161  011D                     	;# 
  2162  018C                     	;# 
  2163  018D                     	;# 
  2164  018F                     	;# 
  2165  0190                     	;# 
  2166  0191                     	;# 
  2167  0191                     	;# 
  2168  0192                     	;# 
  2169  0193                     	;# 
  2170  0193                     	;# 
  2171  0194                     	;# 
  2172  0195                     	;# 
  2173  0196                     	;# 
  2174  0197                     	;# 
  2175  0199                     	;# 
  2176  0199                     	;# 
  2177  0199                     	;# 
  2178  019A                     	;# 
  2179  019A                     	;# 
  2180  019A                     	;# 
  2181  019B                     	;# 
  2182  019B                     	;# 
  2183  019B                     	;# 
  2184  019B                     	;# 
  2185  019B                     	;# 
  2186  019C                     	;# 
  2187  019C                     	;# 
  2188  019C                     	;# 
  2189  019D                     	;# 
  2190  019D                     	;# 
  2191  019D                     	;# 
  2192  019E                     	;# 
  2193  019E                     	;# 
  2194  019E                     	;# 
  2195  019F                     	;# 
  2196  019F                     	;# 
  2197  019F                     	;# 
  2198  020D                     	;# 
  2199  020F                     	;# 
  2200  0210                     	;# 
  2201  0211                     	;# 
  2202  0211                     	;# 
  2203  0212                     	;# 
  2204  0212                     	;# 
  2205  0213                     	;# 
  2206  0213                     	;# 
  2207  0214                     	;# 
  2208  0214                     	;# 
  2209  0215                     	;# 
  2210  0215                     	;# 
  2211  0215                     	;# 
  2212  0216                     	;# 
  2213  0216                     	;# 
  2214  0217                     	;# 
  2215  0217                     	;# 
  2216  0219                     	;# 
  2217  021A                     	;# 
  2218  021B                     	;# 
  2219  021C                     	;# 
  2220  021D                     	;# 
  2221  021E                     	;# 
  2222  021F                     	;# 
  2223  028C                     	;# 
  2224  028D                     	;# 
  2225  0291                     	;# 
  2226  0291                     	;# 
  2227  0292                     	;# 
  2228  0293                     	;# 
  2229  0298                     	;# 
  2230  0298                     	;# 
  2231  0299                     	;# 
  2232  029A                     	;# 
  2233  029D                     	;# 
  2234  029E                     	;# 
  2235  029F                     	;# 
  2236  030C                     	;# 
  2237  030D                     	;# 
  2238  0311                     	;# 
  2239  0311                     	;# 
  2240  0312                     	;# 
  2241  0313                     	;# 
  2242  0318                     	;# 
  2243  0318                     	;# 
  2244  0319                     	;# 
  2245  031A                     	;# 
  2246  031C                     	;# 
  2247  031C                     	;# 
  2248  031D                     	;# 
  2249  031E                     	;# 
  2250  038C                     	;# 
  2251  038D                     	;# 
  2252  0394                     	;# 
  2253  0395                     	;# 
  2254  0396                     	;# 
  2255  040C                     	;# 
  2256  040D                     	;# 
  2257  0411                     	;# 
  2258  0411                     	;# 
  2259  0412                     	;# 
  2260  0413                     	;# 
  2261  0414                     	;# 
  2262  0415                     	;# 
  2263  0416                     	;# 
  2264  0417                     	;# 
  2265  0418                     	;# 
  2266  0418                     	;# 
  2267  0419                     	;# 
  2268  041A                     	;# 
  2269  041B                     	;# 
  2270  041C                     	;# 
  2271  041D                     	;# 
  2272  041E                     	;# 
  2273  048D                     	;# 
  2274  0491                     	;# 
  2275  0491                     	;# 
  2276  0492                     	;# 
  2277  0492                     	;# 
  2278  0493                     	;# 
  2279  0493                     	;# 
  2280  0493                     	;# 
  2281  0494                     	;# 
  2282  0494                     	;# 
  2283  0495                     	;# 
  2284  0495                     	;# 
  2285  0496                     	;# 
  2286  0496                     	;# 
  2287  0497                     	;# 
  2288  0497                     	;# 
  2289  0595                     	;# 
  2290  0596                     	;# 
  2291  0597                     	;# 
  2292  059C                     	;# 
  2293  059D                     	;# 
  2294  059E                     	;# 
  2295  0611                     	;# 
  2296  0611                     	;# 
  2297  0612                     	;# 
  2298  0613                     	;# 
  2299  0614                     	;# 
  2300  0614                     	;# 
  2301  0615                     	;# 
  2302  0616                     	;# 
  2303  0617                     	;# 
  2304  0617                     	;# 
  2305  0618                     	;# 
  2306  0619                     	;# 
  2307  061A                     	;# 
  2308  061A                     	;# 
  2309  061B                     	;# 
  2310  061C                     	;# 
  2311  061D                     	;# 
  2312  061D                     	;# 
  2313  061E                     	;# 
  2314  061F                     	;# 
  2315  0FE4                     	;# 
  2316  0FE5                     	;# 
  2317  0FE6                     	;# 
  2318  0FE7                     	;# 
  2319  0FE8                     	;# 
  2320  0FE9                     	;# 
  2321  0FEA                     	;# 
  2322  0FEB                     	;# 
  2323  0FED                     	;# 
  2324  0FEE                     	;# 
  2325  0FEF                     	;# 
  2326  0000                     	;# 
  2327  0001                     	;# 
  2328  0002                     	;# 
  2329  0003                     	;# 
  2330  0004                     	;# 
  2331  0005                     	;# 
  2332  0006                     	;# 
  2333  0007                     	;# 
  2334  0008                     	;# 
  2335  0009                     	;# 
  2336  000A                     	;# 
  2337  000B                     	;# 
  2338  000C                     	;# 
  2339  000D                     	;# 
  2340  000E                     	;# 
  2341  000F                     	;# 
  2342  0010                     	;# 
  2343  0011                     	;# 
  2344  0012                     	;# 
  2345  0013                     	;# 
  2346  0014                     	;# 
  2347  0015                     	;# 
  2348  0016                     	;# 
  2349  0016                     	;# 
  2350  0017                     	;# 
  2351  0018                     	;# 
  2352  0019                     	;# 
  2353  001A                     	;# 
  2354  001B                     	;# 
  2355  001C                     	;# 
  2356  008C                     	;# 
  2357  008D                     	;# 
  2358  008E                     	;# 
  2359  008F                     	;# 
  2360  0090                     	;# 
  2361  0091                     	;# 
  2362  0092                     	;# 
  2363  0093                     	;# 
  2364  0094                     	;# 
  2365  0095                     	;# 
  2366  0096                     	;# 
  2367  0097                     	;# 
  2368  0099                     	;# 
  2369  009A                     	;# 
  2370  009B                     	;# 
  2371  009B                     	;# 
  2372  009C                     	;# 
  2373  009D                     	;# 
  2374  009E                     	;# 
  2375  010C                     	;# 
  2376  010D                     	;# 
  2377  010E                     	;# 
  2378  010F                     	;# 
  2379  0110                     	;# 
  2380  0116                     	;# 
  2381  0117                     	;# 
  2382  011D                     	;# 
  2383  018C                     	;# 
  2384  018D                     	;# 
  2385  018F                     	;# 
  2386  0190                     	;# 
  2387  0191                     	;# 
  2388  0191                     	;# 
  2389  0192                     	;# 
  2390  0193                     	;# 
  2391  0193                     	;# 
  2392  0194                     	;# 
  2393  0195                     	;# 
  2394  0196                     	;# 
  2395  0197                     	;# 
  2396  0199                     	;# 
  2397  0199                     	;# 
  2398  0199                     	;# 
  2399  019A                     	;# 
  2400  019A                     	;# 
  2401  019A                     	;# 
  2402  019B                     	;# 
  2403  019B                     	;# 
  2404  019B                     	;# 
  2405  019B                     	;# 
  2406  019B                     	;# 
  2407  019C                     	;# 
  2408  019C                     	;# 
  2409  019C                     	;# 
  2410  019D                     	;# 
  2411  019D                     	;# 
  2412  019D                     	;# 
  2413  019E                     	;# 
  2414  019E                     	;# 
  2415  019E                     	;# 
  2416  019F                     	;# 
  2417  019F                     	;# 
  2418  019F                     	;# 
  2419  020D                     	;# 
  2420  020F                     	;# 
  2421  0210                     	;# 
  2422  0211                     	;# 
  2423  0211                     	;# 
  2424  0212                     	;# 
  2425  0212                     	;# 
  2426  0213                     	;# 
  2427  0213                     	;# 
  2428  0214                     	;# 
  2429  0214                     	;# 
  2430  0215                     	;# 
  2431  0215                     	;# 
  2432  0215                     	;# 
  2433  0216                     	;# 
  2434  0216                     	;# 
  2435  0217                     	;# 
  2436  0217                     	;# 
  2437  0219                     	;# 
  2438  021A                     	;# 
  2439  021B                     	;# 
  2440  021C                     	;# 
  2441  021D                     	;# 
  2442  021E                     	;# 
  2443  021F                     	;# 
  2444  028C                     	;# 
  2445  028D                     	;# 
  2446  0291                     	;# 
  2447  0291                     	;# 
  2448  0292                     	;# 
  2449  0293                     	;# 
  2450  0298                     	;# 
  2451  0298                     	;# 
  2452  0299                     	;# 
  2453  029A                     	;# 
  2454  029D                     	;# 
  2455  029E                     	;# 
  2456  029F                     	;# 
  2457  030C                     	;# 
  2458  030D                     	;# 
  2459  0311                     	;# 
  2460  0311                     	;# 
  2461  0312                     	;# 
  2462  0313                     	;# 
  2463  0318                     	;# 
  2464  0318                     	;# 
  2465  0319                     	;# 
  2466  031A                     	;# 
  2467  031C                     	;# 
  2468  031C                     	;# 
  2469  031D                     	;# 
  2470  031E                     	;# 
  2471  038C                     	;# 
  2472  038D                     	;# 
  2473  0394                     	;# 
  2474  0395                     	;# 
  2475  0396                     	;# 
  2476  040C                     	;# 
  2477  040D                     	;# 
  2478  0411                     	;# 
  2479  0411                     	;# 
  2480  0412                     	;# 
  2481  0413                     	;# 
  2482  0414                     	;# 
  2483  0415                     	;# 
  2484  0416                     	;# 
  2485  0417                     	;# 
  2486  0418                     	;# 
  2487  0418                     	;# 
  2488  0419                     	;# 
  2489  041A                     	;# 
  2490  041B                     	;# 
  2491  041C                     	;# 
  2492  041D                     	;# 
  2493  041E                     	;# 
  2494  048D                     	;# 
  2495  0491                     	;# 
  2496  0491                     	;# 
  2497  0492                     	;# 
  2498  0492                     	;# 
  2499  0493                     	;# 
  2500  0493                     	;# 
  2501  0493                     	;# 
  2502  0494                     	;# 
  2503  0494                     	;# 
  2504  0495                     	;# 
  2505  0495                     	;# 
  2506  0496                     	;# 
  2507  0496                     	;# 
  2508  0497                     	;# 
  2509  0497                     	;# 
  2510  0595                     	;# 
  2511  0596                     	;# 
  2512  0597                     	;# 
  2513  059C                     	;# 
  2514  059D                     	;# 
  2515  059E                     	;# 
  2516  0611                     	;# 
  2517  0611                     	;# 
  2518  0612                     	;# 
  2519  0613                     	;# 
  2520  0614                     	;# 
  2521  0614                     	;# 
  2522  0615                     	;# 
  2523  0616                     	;# 
  2524  0617                     	;# 
  2525  0617                     	;# 
  2526  0618                     	;# 
  2527  0619                     	;# 
  2528  061A                     	;# 
  2529  061A                     	;# 
  2530  061B                     	;# 
  2531  061C                     	;# 
  2532  061D                     	;# 
  2533  061D                     	;# 
  2534  061E                     	;# 
  2535  061F                     	;# 
  2536  0FE4                     	;# 
  2537  0FE5                     	;# 
  2538  0FE6                     	;# 
  2539  0FE7                     	;# 
  2540  0FE8                     	;# 
  2541  0FE9                     	;# 
  2542  0FEA                     	;# 
  2543  0FEB                     	;# 
  2544  0FED                     	;# 
  2545  0FEE                     	;# 
  2546  0FEF                     	;# 
  2547  0000                     	;# 
  2548  0001                     	;# 
  2549  0002                     	;# 
  2550  0003                     	;# 
  2551  0004                     	;# 
  2552  0005                     	;# 
  2553  0006                     	;# 
  2554  0007                     	;# 
  2555  0008                     	;# 
  2556  0009                     	;# 
  2557  000A                     	;# 
  2558  000B                     	;# 
  2559  000C                     	;# 
  2560  000D                     	;# 
  2561  000E                     	;# 
  2562  000F                     	;# 
  2563  0010                     	;# 
  2564  0011                     	;# 
  2565  0012                     	;# 
  2566  0013                     	;# 
  2567  0014                     	;# 
  2568  0015                     	;# 
  2569  0016                     	;# 
  2570  0016                     	;# 
  2571  0017                     	;# 
  2572  0018                     	;# 
  2573  0019                     	;# 
  2574  001A                     	;# 
  2575  001B                     	;# 
  2576  001C                     	;# 
  2577  008C                     	;# 
  2578  008D                     	;# 
  2579  008E                     	;# 
  2580  008F                     	;# 
  2581  0090                     	;# 
  2582  0091                     	;# 
  2583  0092                     	;# 
  2584  0093                     	;# 
  2585  0094                     	;# 
  2586  0095                     	;# 
  2587  0096                     	;# 
  2588  0097                     	;# 
  2589  0099                     	;# 
  2590  009A                     	;# 
  2591  009B                     	;# 
  2592  009B                     	;# 
  2593  009C                     	;# 
  2594  009D                     	;# 
  2595  009E                     	;# 
  2596  010C                     	;# 
  2597  010D                     	;# 
  2598  010E                     	;# 
  2599  010F                     	;# 
  2600  0110                     	;# 
  2601  0116                     	;# 
  2602  0117                     	;# 
  2603  011D                     	;# 
  2604  018C                     	;# 
  2605  018D                     	;# 
  2606  018F                     	;# 
  2607  0190                     	;# 
  2608  0191                     	;# 
  2609  0191                     	;# 
  2610  0192                     	;# 
  2611  0193                     	;# 
  2612  0193                     	;# 
  2613  0194                     	;# 
  2614  0195                     	;# 
  2615  0196                     	;# 
  2616  0197                     	;# 
  2617  0199                     	;# 
  2618  0199                     	;# 
  2619  0199                     	;# 
  2620  019A                     	;# 
  2621  019A                     	;# 
  2622  019A                     	;# 
  2623  019B                     	;# 
  2624  019B                     	;# 
  2625  019B                     	;# 
  2626  019B                     	;# 
  2627  019B                     	;# 
  2628  019C                     	;# 
  2629  019C                     	;# 
  2630  019C                     	;# 
  2631  019D                     	;# 
  2632  019D                     	;# 
  2633  019D                     	;# 
  2634  019E                     	;# 
  2635  019E                     	;# 
  2636  019E                     	;# 
  2637  019F                     	;# 
  2638  019F                     	;# 
  2639  019F                     	;# 
  2640  020D                     	;# 
  2641  020F                     	;# 
  2642  0210                     	;# 
  2643  0211                     	;# 
  2644  0211                     	;# 
  2645  0212                     	;# 
  2646  0212                     	;# 
  2647  0213                     	;# 
  2648  0213                     	;# 
  2649  0214                     	;# 
  2650  0214                     	;# 
  2651  0215                     	;# 
  2652  0215                     	;# 
  2653  0215                     	;# 
  2654  0216                     	;# 
  2655  0216                     	;# 
  2656  0217                     	;# 
  2657  0217                     	;# 
  2658  0219                     	;# 
  2659  021A                     	;# 
  2660  021B                     	;# 
  2661  021C                     	;# 
  2662  021D                     	;# 
  2663  021E                     	;# 
  2664  021F                     	;# 
  2665  028C                     	;# 
  2666  028D                     	;# 
  2667  0291                     	;# 
  2668  0291                     	;# 
  2669  0292                     	;# 
  2670  0293                     	;# 
  2671  0298                     	;# 
  2672  0298                     	;# 
  2673  0299                     	;# 
  2674  029A                     	;# 
  2675  029D                     	;# 
  2676  029E                     	;# 
  2677  029F                     	;# 
  2678  030C                     	;# 
  2679  030D                     	;# 
  2680  0311                     	;# 
  2681  0311                     	;# 
  2682  0312                     	;# 
  2683  0313                     	;# 
  2684  0318                     	;# 
  2685  0318                     	;# 
  2686  0319                     	;# 
  2687  031A                     	;# 
  2688  031C                     	;# 
  2689  031C                     	;# 
  2690  031D                     	;# 
  2691  031E                     	;# 
  2692  038C                     	;# 
  2693  038D                     	;# 
  2694  0394                     	;# 
  2695  0395                     	;# 
  2696  0396                     	;# 
  2697  040C                     	;# 
  2698  040D                     	;# 
  2699  0411                     	;# 
  2700  0411                     	;# 
  2701  0412                     	;# 
  2702  0413                     	;# 
  2703  0414                     	;# 
  2704  0415                     	;# 
  2705  0416                     	;# 
  2706  0417                     	;# 
  2707  0418                     	;# 
  2708  0418                     	;# 
  2709  0419                     	;# 
  2710  041A                     	;# 
  2711  041B                     	;# 
  2712  041C                     	;# 
  2713  041D                     	;# 
  2714  041E                     	;# 
  2715  048D                     	;# 
  2716  0491                     	;# 
  2717  0491                     	;# 
  2718  0492                     	;# 
  2719  0492                     	;# 
  2720  0493                     	;# 
  2721  0493                     	;# 
  2722  0493                     	;# 
  2723  0494                     	;# 
  2724  0494                     	;# 
  2725  0495                     	;# 
  2726  0495                     	;# 
  2727  0496                     	;# 
  2728  0496                     	;# 
  2729  0497                     	;# 
  2730  0497                     	;# 
  2731  0595                     	;# 
  2732  0596                     	;# 
  2733  0597                     	;# 
  2734  059C                     	;# 
  2735  059D                     	;# 
  2736  059E                     	;# 
  2737  0611                     	;# 
  2738  0611                     	;# 
  2739  0612                     	;# 
  2740  0613                     	;# 
  2741  0614                     	;# 
  2742  0614                     	;# 
  2743  0615                     	;# 
  2744  0616                     	;# 
  2745  0617                     	;# 
  2746  0617                     	;# 
  2747  0618                     	;# 
  2748  0619                     	;# 
  2749  061A                     	;# 
  2750  061A                     	;# 
  2751  061B                     	;# 
  2752  061C                     	;# 
  2753  061D                     	;# 
  2754  061D                     	;# 
  2755  061E                     	;# 
  2756  061F                     	;# 
  2757  0FE4                     	;# 
  2758  0FE5                     	;# 
  2759  0FE6                     	;# 
  2760  0FE7                     	;# 
  2761  0FE8                     	;# 
  2762  0FE9                     	;# 
  2763  0FEA                     	;# 
  2764  0FEB                     	;# 
  2765  0FED                     	;# 
  2766  0FEE                     	;# 
  2767  0FEF                     	;# 
  2768  0000                     	;# 
  2769  0001                     	;# 
  2770  0002                     	;# 
  2771  0003                     	;# 
  2772  0004                     	;# 
  2773  0005                     	;# 
  2774  0006                     	;# 
  2775  0007                     	;# 
  2776  0008                     	;# 
  2777  0009                     	;# 
  2778  000A                     	;# 
  2779  000B                     	;# 
  2780  000C                     	;# 
  2781  000D                     	;# 
  2782  000E                     	;# 
  2783  000F                     	;# 
  2784  0010                     	;# 
  2785  0011                     	;# 
  2786  0012                     	;# 
  2787  0013                     	;# 
  2788  0014                     	;# 
  2789  0015                     	;# 
  2790  0016                     	;# 
  2791  0016                     	;# 
  2792  0017                     	;# 
  2793  0018                     	;# 
  2794  0019                     	;# 
  2795  001A                     	;# 
  2796  001B                     	;# 
  2797  001C                     	;# 
  2798  008C                     	;# 
  2799  008D                     	;# 
  2800  008E                     	;# 
  2801  008F                     	;# 
  2802  0090                     	;# 
  2803  0091                     	;# 
  2804  0092                     	;# 
  2805  0093                     	;# 
  2806  0094                     	;# 
  2807  0095                     	;# 
  2808  0096                     	;# 
  2809  0097                     	;# 
  2810  0099                     	;# 
  2811  009A                     	;# 
  2812  009B                     	;# 
  2813  009B                     	;# 
  2814  009C                     	;# 
  2815  009D                     	;# 
  2816  009E                     	;# 
  2817  010C                     	;# 
  2818  010D                     	;# 
  2819  010E                     	;# 
  2820  010F                     	;# 
  2821  0110                     	;# 
  2822  0116                     	;# 
  2823  0117                     	;# 
  2824  011D                     	;# 
  2825  018C                     	;# 
  2826  018D                     	;# 
  2827  018F                     	;# 
  2828  0190                     	;# 
  2829  0191                     	;# 
  2830  0191                     	;# 
  2831  0192                     	;# 
  2832  0193                     	;# 
  2833  0193                     	;# 
  2834  0194                     	;# 
  2835  0195                     	;# 
  2836  0196                     	;# 
  2837  0197                     	;# 
  2838  0199                     	;# 
  2839  0199                     	;# 
  2840  0199                     	;# 
  2841  019A                     	;# 
  2842  019A                     	;# 
  2843  019A                     	;# 
  2844  019B                     	;# 
  2845  019B                     	;# 
  2846  019B                     	;# 
  2847  019B                     	;# 
  2848  019B                     	;# 
  2849  019C                     	;# 
  2850  019C                     	;# 
  2851  019C                     	;# 
  2852  019D                     	;# 
  2853  019D                     	;# 
  2854  019D                     	;# 
  2855  019E                     	;# 
  2856  019E                     	;# 
  2857  019E                     	;# 
  2858  019F                     	;# 
  2859  019F                     	;# 
  2860  019F                     	;# 
  2861  020D                     	;# 
  2862  020F                     	;# 
  2863  0210                     	;# 
  2864  0211                     	;# 
  2865  0211                     	;# 
  2866  0212                     	;# 
  2867  0212                     	;# 
  2868  0213                     	;# 
  2869  0213                     	;# 
  2870  0214                     	;# 
  2871  0214                     	;# 
  2872  0215                     	;# 
  2873  0215                     	;# 
  2874  0215                     	;# 
  2875  0216                     	;# 
  2876  0216                     	;# 
  2877  0217                     	;# 
  2878  0217                     	;# 
  2879  0219                     	;# 
  2880  021A                     	;# 
  2881  021B                     	;# 
  2882  021C                     	;# 
  2883  021D                     	;# 
  2884  021E                     	;# 
  2885  021F                     	;# 
  2886  028C                     	;# 
  2887  028D                     	;# 
  2888  0291                     	;# 
  2889  0291                     	;# 
  2890  0292                     	;# 
  2891  0293                     	;# 
  2892  0298                     	;# 
  2893  0298                     	;# 
  2894  0299                     	;# 
  2895  029A                     	;# 
  2896  029D                     	;# 
  2897  029E                     	;# 
  2898  029F                     	;# 
  2899  030C                     	;# 
  2900  030D                     	;# 
  2901  0311                     	;# 
  2902  0311                     	;# 
  2903  0312                     	;# 
  2904  0313                     	;# 
  2905  0318                     	;# 
  2906  0318                     	;# 
  2907  0319                     	;# 
  2908  031A                     	;# 
  2909  031C                     	;# 
  2910  031C                     	;# 
  2911  031D                     	;# 
  2912  031E                     	;# 
  2913  038C                     	;# 
  2914  038D                     	;# 
  2915  0394                     	;# 
  2916  0395                     	;# 
  2917  0396                     	;# 
  2918  040C                     	;# 
  2919  040D                     	;# 
  2920  0411                     	;# 
  2921  0411                     	;# 
  2922  0412                     	;# 
  2923  0413                     	;# 
  2924  0414                     	;# 
  2925  0415                     	;# 
  2926  0416                     	;# 
  2927  0417                     	;# 
  2928  0418                     	;# 
  2929  0418                     	;# 
  2930  0419                     	;# 
  2931  041A                     	;# 
  2932  041B                     	;# 
  2933  041C                     	;# 
  2934  041D                     	;# 
  2935  041E                     	;# 
  2936  048D                     	;# 
  2937  0491                     	;# 
  2938  0491                     	;# 
  2939  0492                     	;# 
  2940  0492                     	;# 
  2941  0493                     	;# 
  2942  0493                     	;# 
  2943  0493                     	;# 
  2944  0494                     	;# 
  2945  0494                     	;# 
  2946  0495                     	;# 
  2947  0495                     	;# 
  2948  0496                     	;# 
  2949  0496                     	;# 
  2950  0497                     	;# 
  2951  0497                     	;# 
  2952  0595                     	;# 
  2953  0596                     	;# 
  2954  0597                     	;# 
  2955  059C                     	;# 
  2956  059D                     	;# 
  2957  059E                     	;# 
  2958  0611                     	;# 
  2959  0611                     	;# 
  2960  0612                     	;# 
  2961  0613                     	;# 
  2962  0614                     	;# 
  2963  0614                     	;# 
  2964  0615                     	;# 
  2965  0616                     	;# 
  2966  0617                     	;# 
  2967  0617                     	;# 
  2968  0618                     	;# 
  2969  0619                     	;# 
  2970  061A                     	;# 
  2971  061A                     	;# 
  2972  061B                     	;# 
  2973  061C                     	;# 
  2974  061D                     	;# 
  2975  061D                     	;# 
  2976  061E                     	;# 
  2977  061F                     	;# 
  2978  0FE4                     	;# 
  2979  0FE5                     	;# 
  2980  0FE6                     	;# 
  2981  0FE7                     	;# 
  2982  0FE8                     	;# 
  2983  0FE9                     	;# 
  2984  0FEA                     	;# 
  2985  0FEB                     	;# 
  2986  0FED                     	;# 
  2987  0FEE                     	;# 
  2988  0FEF                     	;# 
  2989  0000                     	;# 
  2990  0001                     	;# 
  2991  0002                     	;# 
  2992  0003                     	;# 
  2993  0004                     	;# 
  2994  0005                     	;# 
  2995  0006                     	;# 
  2996  0007                     	;# 
  2997  0008                     	;# 
  2998  0009                     	;# 
  2999  000A                     	;# 
  3000  000B                     	;# 
  3001  000C                     	;# 
  3002  000D                     	;# 
  3003  000E                     	;# 
  3004  000F                     	;# 
  3005  0010                     	;# 
  3006  0011                     	;# 
  3007  0012                     	;# 
  3008  0013                     	;# 
  3009  0014                     	;# 
  3010  0015                     	;# 
  3011  0016                     	;# 
  3012  0016                     	;# 
  3013  0017                     	;# 
  3014  0018                     	;# 
  3015  0019                     	;# 
  3016  001A                     	;# 
  3017  001B                     	;# 
  3018  001C                     	;# 
  3019  008C                     	;# 
  3020  008D                     	;# 
  3021  008E                     	;# 
  3022  008F                     	;# 
  3023  0090                     	;# 
  3024  0091                     	;# 
  3025  0092                     	;# 
  3026  0093                     	;# 
  3027  0094                     	;# 
  3028  0095                     	;# 
  3029  0096                     	;# 
  3030  0097                     	;# 
  3031  0099                     	;# 
  3032  009A                     	;# 
  3033  009B                     	;# 
  3034  009B                     	;# 
  3035  009C                     	;# 
  3036  009D                     	;# 
  3037  009E                     	;# 
  3038  010C                     	;# 
  3039  010D                     	;# 
  3040  010E                     	;# 
  3041  010F                     	;# 
  3042  0110                     	;# 
  3043  0116                     	;# 
  3044  0117                     	;# 
  3045  011D                     	;# 
  3046  018C                     	;# 
  3047  018D                     	;# 
  3048  018F                     	;# 
  3049  0190                     	;# 
  3050  0191                     	;# 
  3051  0191                     	;# 
  3052  0192                     	;# 
  3053  0193                     	;# 
  3054  0193                     	;# 
  3055  0194                     	;# 
  3056  0195                     	;# 
  3057  0196                     	;# 
  3058  0197                     	;# 
  3059  0199                     	;# 
  3060  0199                     	;# 
  3061  0199                     	;# 
  3062  019A                     	;# 
  3063  019A                     	;# 
  3064  019A                     	;# 
  3065  019B                     	;# 
  3066  019B                     	;# 
  3067  019B                     	;# 
  3068  019B                     	;# 
  3069  019B                     	;# 
  3070  019C                     	;# 
  3071  019C                     	;# 
  3072  019C                     	;# 
  3073  019D                     	;# 
  3074  019D                     	;# 
  3075  019D                     	;# 
  3076  019E                     	;# 
  3077  019E                     	;# 
  3078  019E                     	;# 
  3079  019F                     	;# 
  3080  019F                     	;# 
  3081  019F                     	;# 
  3082  020D                     	;# 
  3083  020F                     	;# 
  3084  0210                     	;# 
  3085  0211                     	;# 
  3086  0211                     	;# 
  3087  0212                     	;# 
  3088  0212                     	;# 
  3089  0213                     	;# 
  3090  0213                     	;# 
  3091  0214                     	;# 
  3092  0214                     	;# 
  3093  0215                     	;# 
  3094  0215                     	;# 
  3095  0215                     	;# 
  3096  0216                     	;# 
  3097  0216                     	;# 
  3098  0217                     	;# 
  3099  0217                     	;# 
  3100  0219                     	;# 
  3101  021A                     	;# 
  3102  021B                     	;# 
  3103  021C                     	;# 
  3104  021D                     	;# 
  3105  021E                     	;# 
  3106  021F                     	;# 
  3107  028C                     	;# 
  3108  028D                     	;# 
  3109  0291                     	;# 
  3110  0291                     	;# 
  3111  0292                     	;# 
  3112  0293                     	;# 
  3113  0298                     	;# 
  3114  0298                     	;# 
  3115  0299                     	;# 
  3116  029A                     	;# 
  3117  029D                     	;# 
  3118  029E                     	;# 
  3119  029F                     	;# 
  3120  030C                     	;# 
  3121  030D                     	;# 
  3122  0311                     	;# 
  3123  0311                     	;# 
  3124  0312                     	;# 
  3125  0313                     	;# 
  3126  0318                     	;# 
  3127  0318                     	;# 
  3128  0319                     	;# 
  3129  031A                     	;# 
  3130  031C                     	;# 
  3131  031C                     	;# 
  3132  031D                     	;# 
  3133  031E                     	;# 
  3134  038C                     	;# 
  3135  038D                     	;# 
  3136  0394                     	;# 
  3137  0395                     	;# 
  3138  0396                     	;# 
  3139  040C                     	;# 
  3140  040D                     	;# 
  3141  0411                     	;# 
  3142  0411                     	;# 
  3143  0412                     	;# 
  3144  0413                     	;# 
  3145  0414                     	;# 
  3146  0415                     	;# 
  3147  0416                     	;# 
  3148  0417                     	;# 
  3149  0418                     	;# 
  3150  0418                     	;# 
  3151  0419                     	;# 
  3152  041A                     	;# 
  3153  041B                     	;# 
  3154  041C                     	;# 
  3155  041D                     	;# 
  3156  041E                     	;# 
  3157  048D                     	;# 
  3158  0491                     	;# 
  3159  0491                     	;# 
  3160  0492                     	;# 
  3161  0492                     	;# 
  3162  0493                     	;# 
  3163  0493                     	;# 
  3164  0493                     	;# 
  3165  0494                     	;# 
  3166  0494                     	;# 
  3167  0495                     	;# 
  3168  0495                     	;# 
  3169  0496                     	;# 
  3170  0496                     	;# 
  3171  0497                     	;# 
  3172  0497                     	;# 
  3173  0595                     	;# 
  3174  0596                     	;# 
  3175  0597                     	;# 
  3176  059C                     	;# 
  3177  059D                     	;# 
  3178  059E                     	;# 
  3179  0611                     	;# 
  3180  0611                     	;# 
  3181  0612                     	;# 
  3182  0613                     	;# 
  3183  0614                     	;# 
  3184  0614                     	;# 
  3185  0615                     	;# 
  3186  0616                     	;# 
  3187  0617                     	;# 
  3188  0617                     	;# 
  3189  0618                     	;# 
  3190  0619                     	;# 
  3191  061A                     	;# 
  3192  061A                     	;# 
  3193  061B                     	;# 
  3194  061C                     	;# 
  3195  061D                     	;# 
  3196  061D                     	;# 
  3197  061E                     	;# 
  3198  061F                     	;# 
  3199  0FE4                     	;# 
  3200  0FE5                     	;# 
  3201  0FE6                     	;# 
  3202  0FE7                     	;# 
  3203  0FE8                     	;# 
  3204  0FE9                     	;# 
  3205  0FEA                     	;# 
  3206  0FEB                     	;# 
  3207  0FED                     	;# 
  3208  0FEE                     	;# 
  3209  0FEF                     	;# 
  3210  0000                     	;# 
  3211  0001                     	;# 
  3212  0002                     	;# 
  3213  0003                     	;# 
  3214  0004                     	;# 
  3215  0005                     	;# 
  3216  0006                     	;# 
  3217  0007                     	;# 
  3218  0008                     	;# 
  3219  0009                     	;# 
  3220  000A                     	;# 
  3221  000B                     	;# 
  3222  000C                     	;# 
  3223  000D                     	;# 
  3224  000E                     	;# 
  3225  000F                     	;# 
  3226  0010                     	;# 
  3227  0011                     	;# 
  3228  0012                     	;# 
  3229  0013                     	;# 
  3230  0014                     	;# 
  3231  0015                     	;# 
  3232  0016                     	;# 
  3233  0016                     	;# 
  3234  0017                     	;# 
  3235  0018                     	;# 
  3236  0019                     	;# 
  3237  001A                     	;# 
  3238  001B                     	;# 
  3239  001C                     	;# 
  3240  008C                     	;# 
  3241  008D                     	;# 
  3242  008E                     	;# 
  3243  008F                     	;# 
  3244  0090                     	;# 
  3245  0091                     	;# 
  3246  0092                     	;# 
  3247  0093                     	;# 
  3248  0094                     	;# 
  3249  0095                     	;# 
  3250  0096                     	;# 
  3251  0097                     	;# 
  3252  0099                     	;# 
  3253  009A                     	;# 
  3254  009B                     	;# 
  3255  009B                     	;# 
  3256  009C                     	;# 
  3257  009D                     	;# 
  3258  009E                     	;# 
  3259  010C                     	;# 
  3260  010D                     	;# 
  3261  010E                     	;# 
  3262  010F                     	;# 
  3263  0110                     	;# 
  3264  0116                     	;# 
  3265  0117                     	;# 
  3266  011D                     	;# 
  3267  018C                     	;# 
  3268  018D                     	;# 
  3269  018F                     	;# 
  3270  0190                     	;# 
  3271  0191                     	;# 
  3272  0191                     	;# 
  3273  0192                     	;# 
  3274  0193                     	;# 
  3275  0193                     	;# 
  3276  0194                     	;# 
  3277  0195                     	;# 
  3278  0196                     	;# 
  3279  0197                     	;# 
  3280  0199                     	;# 
  3281  0199                     	;# 
  3282  0199                     	;# 
  3283  019A                     	;# 
  3284  019A                     	;# 
  3285  019A                     	;# 
  3286  019B                     	;# 
  3287  019B                     	;# 
  3288  019B                     	;# 
  3289  019B                     	;# 
  3290  019B                     	;# 
  3291  019C                     	;# 
  3292  019C                     	;# 
  3293  019C                     	;# 
  3294  019D                     	;# 
  3295  019D                     	;# 
  3296  019D                     	;# 
  3297  019E                     	;# 
  3298  019E                     	;# 
  3299  019E                     	;# 
  3300  019F                     	;# 
  3301  019F                     	;# 
  3302  019F                     	;# 
  3303  020D                     	;# 
  3304  020F                     	;# 
  3305  0210                     	;# 
  3306  0211                     	;# 
  3307  0211                     	;# 
  3308  0212                     	;# 
  3309  0212                     	;# 
  3310  0213                     	;# 
  3311  0213                     	;# 
  3312  0214                     	;# 
  3313  0214                     	;# 
  3314  0215                     	;# 
  3315  0215                     	;# 
  3316  0215                     	;# 
  3317  0216                     	;# 
  3318  0216                     	;# 
  3319  0217                     	;# 
  3320  0217                     	;# 
  3321  0219                     	;# 
  3322  021A                     	;# 
  3323  021B                     	;# 
  3324  021C                     	;# 
  3325  021D                     	;# 
  3326  021E                     	;# 
  3327  021F                     	;# 
  3328  028C                     	;# 
  3329  028D                     	;# 
  3330  0291                     	;# 
  3331  0291                     	;# 
  3332  0292                     	;# 
  3333  0293                     	;# 
  3334  0298                     	;# 
  3335  0298                     	;# 
  3336  0299                     	;# 
  3337  029A                     	;# 
  3338  029D                     	;# 
  3339  029E                     	;# 
  3340  029F                     	;# 
  3341  030C                     	;# 
  3342  030D                     	;# 
  3343  0311                     	;# 
  3344  0311                     	;# 
  3345  0312                     	;# 
  3346  0313                     	;# 
  3347  0318                     	;# 
  3348  0318                     	;# 
  3349  0319                     	;# 
  3350  031A                     	;# 
  3351  031C                     	;# 
  3352  031C                     	;# 
  3353  031D                     	;# 
  3354  031E                     	;# 
  3355  038C                     	;# 
  3356  038D                     	;# 
  3357  0394                     	;# 
  3358  0395                     	;# 
  3359  0396                     	;# 
  3360  040C                     	;# 
  3361  040D                     	;# 
  3362  0411                     	;# 
  3363  0411                     	;# 
  3364  0412                     	;# 
  3365  0413                     	;# 
  3366  0414                     	;# 
  3367  0415                     	;# 
  3368  0416                     	;# 
  3369  0417                     	;# 
  3370  0418                     	;# 
  3371  0418                     	;# 
  3372  0419                     	;# 
  3373  041A                     	;# 
  3374  041B                     	;# 
  3375  041C                     	;# 
  3376  041D                     	;# 
  3377  041E                     	;# 
  3378  048D                     	;# 
  3379  0491                     	;# 
  3380  0491                     	;# 
  3381  0492                     	;# 
  3382  0492                     	;# 
  3383  0493                     	;# 
  3384  0493                     	;# 
  3385  0493                     	;# 
  3386  0494                     	;# 
  3387  0494                     	;# 
  3388  0495                     	;# 
  3389  0495                     	;# 
  3390  0496                     	;# 
  3391  0496                     	;# 
  3392  0497                     	;# 
  3393  0497                     	;# 
  3394  0595                     	;# 
  3395  0596                     	;# 
  3396  0597                     	;# 
  3397  059C                     	;# 
  3398  059D                     	;# 
  3399  059E                     	;# 
  3400  0611                     	;# 
  3401  0611                     	;# 
  3402  0612                     	;# 
  3403  0613                     	;# 
  3404  0614                     	;# 
  3405  0614                     	;# 
  3406  0615                     	;# 
  3407  0616                     	;# 
  3408  0617                     	;# 
  3409  0617                     	;# 
  3410  0618                     	;# 
  3411  0619                     	;# 
  3412  061A                     	;# 
  3413  061A                     	;# 
  3414  061B                     	;# 
  3415  061C                     	;# 
  3416  061D                     	;# 
  3417  061D                     	;# 
  3418  061E                     	;# 
  3419  061F                     	;# 
  3420  0FE4                     	;# 
  3421  0FE5                     	;# 
  3422  0FE6                     	;# 
  3423  0FE7                     	;# 
  3424  0FE8                     	;# 
  3425  0FE9                     	;# 
  3426  0FEA                     	;# 
  3427  0FEB                     	;# 
  3428  0FED                     	;# 
  3429  0FEE                     	;# 
  3430  0FEF                     	;_modArray
  3431                           
  3432                           	psect	idataBANK0
  3433  2FA1                     __pidataBANK0:	
  3434                           
  3435                           ;initializer for _baseline_delay_time
  3436  2FA1  34D0               	retlw	208
  3437  2FA2  3407               	retlw	7
  3438  2FA3  3400               	retlw	0
  3439  2FA4  3400               	retlw	0
  3440                           
  3441                           ;initializer for _delay_time
  3442  2FA5  34D0               	retlw	208
  3443  2FA6  3407               	retlw	7
  3444  2FA7  3400               	retlw	0
  3445  2FA8  3400               	retlw	0
  3446                           
  3447                           ;initializer for _bottom_push_state
  3448  2FA9  3401               	retlw	1
  3449  2FAA  3400               	retlw	0
  3450                           
  3451                           ;initializer for _long_press_limit
  3452  2FAB  34E8               	retlw	232
  3453  2FAC  3403               	retlw	3
  3454                           
  3455                           ;initializer for _top_push_state
  3456  2FAD  3406               	retlw	6
  3457  2FAE  3400               	retlw	0
  3458                           
  3459                           ;initializer for _blink_rate
  3460  2FAF  3414               	retlw	20
  3461                           
  3462                           ;initializer for _longTap_state
  3463  2FB0  34FF               	retlw	255
  3464                           
  3465                           ;initializer for _num_taps
  3466  2FB1  3404               	retlw	4
  3467                           
  3468                           ;initializer for _presetChannel
  3469  2FB2  3401               	retlw	1
  3470                           
  3471                           ;initializer for _switchBypass_state
  3472  2FB3  34FF               	retlw	255
  3473                           
  3474                           	psect	idataBANK3
  3475  2016                     __pidataBANK3:	
  3476                           
  3477                           ;initializer for _blink_delay
  3478  2016  3464               	retlw	100
  3479  2017  3400               	retlw	0
  3480                           
  3481                           ;initializer for _knob1_prev
  3482  2018  34D0               	retlw	208
  3483  2019  3407               	retlw	7
  3484                           
  3485                           ;initializer for _knob2_prev
  3486  201A  34D0               	retlw	208
  3487  201B  3407               	retlw	7
  3488                           
  3489                           ;initializer for _knob3_prev
  3490  201C  34D0               	retlw	208
  3491  201D  3407               	retlw	7
  3492                           
  3493                           ;initializer for _knob4_prev
  3494  201E  34D0               	retlw	208
  3495  201F  3407               	retlw	7
  3496                           
  3497                           ;initializer for _knob5_prev
  3498  2020  34D0               	retlw	208
  3499  2021  3407               	retlw	7
  3500                           
  3501                           ;initializer for _mod_delay_time
  3502  2022  34D0               	retlw	208
  3503  2023  3407               	retlw	7
  3504                           
  3505                           ;initializer for _symmetry
  3506  2024  34B4               	retlw	180
  3507  2025  3400               	retlw	0
  3508                           
  3509                           ;initializer for _tap_iteration
  3510  2026  3401               	retlw	1
  3511  2027  3400               	retlw	0
  3512                           
  3513                           ;initializer for _blink_state
  3514  2028  3401               	retlw	1
  3515                           
  3516                           ;initializer for _currentBypassState
  3517  2029  34FF               	retlw	255
  3518                           
  3519                           ;initializer for _delay_time_changed
  3520  202A  3401               	retlw	1
  3521                           
  3522                           ;initializer for _expSwitchState
  3523  202B  34FF               	retlw	255
  3524                           
  3525                           ;initializer for _expressModeCnst
  3526  202C  3402               	retlw	2
  3527                           
  3528                           ;initializer for _expressionChannel
  3529  202D  3401               	retlw	1
  3530                           
  3531                           ;initializer for _presetModeCnst
  3532  202E  3401               	retlw	1
  3533                           
  3534                           ;initializer for _switchTap_state
  3535  202F  34FF               	retlw	255
  3536                           
  3537                           	psect	idataBANK4
  3538  0002                     __pidataBANK4:	
  3539                           
  3540                           ;initializer for _switchBypass_up
  3541  0002  3401               	retlw	1
  3542  0003  3400               	retlw	0
  3543                           
  3544                           	psect	stringtext
  3545  2800                     __pstringtext:	
  3546  2800                     exp@coeff:	
  3547  2800  3400               	retlw	0
  3548  2801  3480               	retlw	128
  3549  2802  343F               	retlw	63
  3550  2803  3472               	retlw	114
  3551  2804  3431               	retlw	49
  3552  2805  343F               	retlw	63
  3553  2806  34FE               	retlw	254
  3554  2807  3475               	retlw	117
  3555  2808  343E               	retlw	62
  3556  2809  3458               	retlw	88
  3557  280A  3463               	retlw	99
  3558  280B  343D               	retlw	61
  3559  280C  3495               	retlw	149
  3560  280D  341D               	retlw	29
  3561  280E  343C               	retlw	60
  3562  280F  34C5               	retlw	197
  3563  2810  34AE               	retlw	174
  3564  2811  343A               	retlw	58
  3565  2812  3479               	retlw	121
  3566  2813  3421               	retlw	33
  3567  2814  3439               	retlw	57
  3568  2815  3494               	retlw	148
  3569  2816  3480               	retlw	128
  3570  2817  3437               	retlw	55
  3571  2818  3493               	retlw	147
  3572  2819  34A7               	retlw	167
  3573  281A  3435               	retlw	53
  3574  281B  3456               	retlw	86
  3575  281C  3415               	retlw	21
  3576  281D  3434               	retlw	52
  3577  281E                     __end_ofexp@coeff:	
  3578  281E                     log@coeff:	
  3579  281E  3400               	retlw	0
  3580  281F  3400               	retlw	0
  3581  2820  3400               	retlw	0
  3582  2821  3400               	retlw	0
  3583  2822  3480               	retlw	128
  3584  2823  343F               	retlw	63
  3585  2824  34F0               	retlw	240
  3586  2825  34FF               	retlw	255
  3587  2826  34BE               	retlw	190
  3588  2827  34E2               	retlw	226
  3589  2828  34A9               	retlw	169
  3590  2829  343E               	retlw	62
  3591  282A  3483               	retlw	131
  3592  282B  3476               	retlw	118
  3593  282C  34BE               	retlw	190
  3594  282D  34AE               	retlw	174
  3595  282E  342B               	retlw	43
  3596  282F  343E               	retlw	62
  3597  2830  343C               	retlw	60
  3598  2831  34C3               	retlw	195
  3599  2832  34BD               	retlw	189
  3600  2833  34D2               	retlw	210
  3601  2834  3413               	retlw	19
  3602  2835  343D               	retlw	61
  3603  2836  3478               	retlw	120
  3604  2837  34D3               	retlw	211
  3605  2838  34BB               	retlw	187
  3606  2839                     __end_oflog@coeff:	
  3607  2839                     sin@coeff_a:	
  3608  2839  34F4               	retlw	244
  3609  283A  344A               	retlw	74
  3610  283B  3448               	retlw	72
  3611  283C  3495               	retlw	149
  3612  283D  3495               	retlw	149
  3613  283E  34C7               	retlw	199
  3614  283F  34C1               	retlw	193
  3615  2840  34DC               	retlw	220
  3616  2841  3445               	retlw	69
  3617  2842  34DC               	retlw	220
  3618  2843  346D               	retlw	109
  3619  2844  34C3               	retlw	195
  3620  2845  34B3               	retlw	179
  3621  2846  3433               	retlw	51
  3622  2847  3440               	retlw	64
  3623  2848                     __end_ofsin@coeff_a:	
  3624  2848                     sin@coeff_b:	
  3625  2848  3434               	retlw	52
  3626  2849  3401               	retlw	1
  3627  284A  3448               	retlw	72
  3628  284B  349D               	retlw	157
  3629  284C  34B0               	retlw	176
  3630  284D  3445               	retlw	69
  3631  284E  3400               	retlw	0
  3632  284F  34DA               	retlw	218
  3633  2850  3442               	retlw	66
  3634  2851  3400               	retlw	0
  3635  2852  3480               	retlw	128
  3636  2853  343F               	retlw	63
  3637  2854                     __end_ofsin@coeff_b:	
  3638  000B                     _INTCONbits	set	11
  3639  0011                     _PIR1bits	set	17
  3640  000C                     _PORTAbits	set	12
  3641  000E                     _PORTCbits	set	14
  3642  000F                     _PORTDbits	set	15
  3643  0010                     _PORTEbits	set	16
  3644  001B                     _PR2	set	27
  3645  001C                     _T2CONbits	set	28
  3646  005F                     _GIE	set	95
  3647  005E                     _PEIE	set	94
  3648  0069                     _RB1	set	105
  3649  009D                     _ADCON0bits	set	157
  3650  009E                     _ADCON1bits	set	158
  3651  009C                     _ADRESH	set	156
  3652  009B                     _ADRESL	set	155
  3653  0095                     _OPTION_REGbits	set	149
  3654  0099                     _OSCCONbits	set	153
  3655  008D                     _TRISBbits	set	141
  3656  008E                     _TRISCbits	set	142
  3657  008F                     _TRISDbits	set	143
  3658  0090                     _TRISEbits	set	144
  3659  048D                     _RCIE	set	1165
  3660  011D                     _APFCONbits	set	285
  3661  010D                     _LATBbits	set	269
  3662  010F                     _LATDbits	set	271
  3663  0190                     _ANSELEbits	set	400
  3664  0192                     _PMADRH	set	402
  3665  0191                     _PMADRL	set	401
  3666  0195                     _PMCON1bits	set	405
  3667  0196                     _PMCON2	set	406
  3668  0194                     _PMDATH	set	404
  3669  0193                     _PMDATL	set	403
  3670  0199                     _RCREG	set	409
  3671  019D                     _RCSTAbits	set	413
  3672  019B                     _SPBRG	set	411
  3673  019A                     _TXREG	set	410
  3674  019E                     _TXSTAbits	set	414
  3675  0291                     _CCPR1	set	657
  3676  0298                     _CCPR2	set	664
  3677  0293                     _CCP1CONbits	set	659
  3678  029A                     _CCP2CONbits	set	666
  3679  029D                     _CCPTMRS0	set	669
  3680  029E                     _CCPTMRS1	set	670
  3681  029F                     _CCPTMRS2	set	671
  3682  0311                     _CCPR3	set	785
  3683  0318                     _CCPR4	set	792
  3684  031C                     _CCPR5	set	796
  3685  0313                     _CCP3CONbits	set	787
  3686  031A                     _CCP4CONbits	set	794
  3687  031E                     _CCP5CONbits	set	798
  3688  030C                     _TRISFbits	set	780
  3689  030D                     _TRISGbits	set	781
  3690  038C                     _LATFbits	set	908
  3691  038D                     _LATGbits	set	909
  3692  040C                     _ANSELFbits	set	1036
  3693  061F                     _CCP10CONbits	set	1567
  3694  0613                     _CCP6CONbits	set	1555
  3695  0616                     _CCP7CONbits	set	1558
  3696  0619                     _CCP8CONbits	set	1561
  3697  061C                     _CCP9CONbits	set	1564
  3698                           
  3699                           ; #config settings
  3700  0000                     
  3701                           	psect	cinit
  3702  02E1                     start_initialization:	
  3703  02E1                     __initialization:		;BIGRAM
  3704                           
  3705                           ; Clear objects allocated to BIGRAM
  3706  02E1  308E               	movlw	low (0+9102)
  3707  02E2  0084               	movwf	4
  3708  02E3  3023               	movlw	high (0+9102)
  3709  02E4  0085               	movwf	5
  3710  02E5  3062               	movlw	98
  3711  02E6  00FE               	movwf	btemp
  3712  02E7  3002               	movlw	2
  3713  02E8  00FF               	movwf	btemp+1
  3714  02E9  31AF  2782  3182   	fcall	clear_ram0
  3715                           
  3716                           ; Clear objects allocated to COMMON
  3717  02EC  01FD               	clrf	__pbssCOMMON& (0+127)
  3718                           
  3719                           ; Clear objects allocated to BANK0
  3720  02ED  3058               	movlw	low __pbssBANK0
  3721  02EE  0084               	movwf	4
  3722  02EF  3000               	movlw	high __pbssBANK0
  3723  02F0  0085               	movwf	5
  3724  02F1  3012               	movlw	18
  3725  02F2  00FE               	movwf	btemp
  3726  02F3  3000               	movlw	0
  3727  02F4  00FF               	movwf	btemp+1
  3728  02F5  31AF  2782  3182   	fcall	clear_ram0
  3729                           
  3730                           ; Clear objects allocated to BANK2
  3731  02F8  0022               	movlb	2	; select bank2
  3732  02F9  01EA               	clrf	__pbssBANK2& (0+127)
  3733  02FA  01EB               	clrf	(__pbssBANK2+1)& (0+127)
  3734  02FB  01EC               	clrf	(__pbssBANK2+2)& (0+127)
  3735                           
  3736                           ; Clear objects allocated to BANK3
  3737  02FC  30A0               	movlw	low __pbssBANK3
  3738  02FD  0084               	movwf	4
  3739  02FE  3001               	movlw	high __pbssBANK3
  3740  02FF  0085               	movwf	5
  3741  0300  3028               	movlw	40
  3742  0301  00FE               	movwf	btemp
  3743  0302  3000               	movlw	0
  3744  0303  00FF               	movwf	btemp+1
  3745  0304  31AF  2782  3182   	fcall	clear_ram0
  3746                           
  3747                           ; Clear objects allocated to BANK4
  3748  0307  3020               	movlw	low __pbssBANK4
  3749  0308  0084               	movwf	4
  3750  0309  3002               	movlw	high __pbssBANK4
  3751  030A  0085               	movwf	5
  3752  030B  3039               	movlw	57
  3753  030C  00FE               	movwf	btemp
  3754  030D  3000               	movlw	0
  3755  030E  00FF               	movwf	btemp+1
  3756  030F  31AF  2782  3182   	fcall	clear_ram0
  3757                           
  3758                           ; Clear objects allocated to BANK5
  3759  0312  30A0               	movlw	low __pbssBANK5
  3760  0313  0084               	movwf	4
  3761  0314  3002               	movlw	high __pbssBANK5
  3762  0315  0085               	movwf	5
  3763  0316  302C               	movlw	44
  3764  0317  00FE               	movwf	btemp
  3765  0318  3000               	movlw	0
  3766  0319  00FF               	movwf	btemp+1
  3767  031A  31AF  2782  3182   	fcall	clear_ram0
  3768                           
  3769                           ; Clear objects allocated to BANK6
  3770  031D  3020               	movlw	low __pbssBANK6
  3771  031E  0084               	movwf	4
  3772  031F  3003               	movlw	high __pbssBANK6
  3773  0320  0085               	movwf	5
  3774  0321  3040               	movlw	64
  3775  0322  00FE               	movwf	btemp
  3776  0323  3000               	movlw	0
  3777  0324  00FF               	movwf	btemp+1
  3778  0325  31AF  2782  3182   	fcall	clear_ram0
  3779                           
  3780                           ; Clear objects allocated to BANK7
  3781  0328  30A0               	movlw	low __pbssBANK7
  3782  0329  0084               	movwf	4
  3783  032A  3003               	movlw	high __pbssBANK7
  3784  032B  0085               	movwf	5
  3785  032C  3040               	movlw	64
  3786  032D  00FE               	movwf	btemp
  3787  032E  3000               	movlw	0
  3788  032F  00FF               	movwf	btemp+1
  3789  0330  31AF  2782  3182   	fcall	clear_ram0
  3790                           
  3791                           ; Initialize objects allocated to BANK0
  3792  0333  30A1               	movlw	low __pidataBANK0
  3793  0334  0084               	movwf	4
  3794  0335  30AF               	movlw	(high __pidataBANK0)| (0+128)
  3795  0336  0085               	movwf	5
  3796  0337  3045               	movlw	low __pdataBANK0
  3797  0338  0086               	movwf	6
  3798  0339  3000               	movlw	high __pdataBANK0
  3799  033A  0087               	movwf	7
  3800  033B  3000               	movlw	0
  3801  033C  00FF               	movwf	btemp+1
  3802  033D  3013               	movlw	19
  3803  033E  31AF  2776  3182   	fcall	init_ram
  3804                           
  3805                           ; Initialize objects allocated to BANK3
  3806  0341  3016               	movlw	low __pidataBANK3
  3807  0342  0084               	movwf	4
  3808  0343  30A0               	movlw	(high __pidataBANK3)| (0+128)
  3809  0344  0085               	movwf	5
  3810  0345  30C8               	movlw	low __pdataBANK3
  3811  0346  0086               	movwf	6
  3812  0347  3001               	movlw	high __pdataBANK3
  3813  0348  0087               	movwf	7
  3814  0349  3000               	movlw	0
  3815  034A  00FF               	movwf	btemp+1
  3816  034B  301A               	movlw	26
  3817  034C  31AF  2776  3182   	fcall	init_ram
  3818                           
  3819                           ; Initialize objects allocated to BANK4
  3820  034F  0024               	movlb	4	; select bank4
  3821  0350  3180  2002  3182   	fcall	__pidataBANK4	;fetch initializer
  3822  0353  00E2               	movwf	__pdataBANK4& (0+127)
  3823  0354  3180  2003         	fcall	__pidataBANK4+1	;fetch initializer
  3824  0356  00E3               	movwf	(__pdataBANK4+1)& (0+127)
  3825  0357                     end_of_initialization:	
  3826                           ;End of C runtime variable initialization code
  3827                           
  3828  0357                     __end_of__initialization:	
  3829  0357  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3830  0358  0020               	movlb	0
  3831  0359  3183  2B5B         	ljmp	_main	;jump to C main() function
  3832                           
  3833                           	psect	bssCOMMON
  3834  007D                     __pbssCOMMON:	
  3835  007D                     _UQFront:	
  3836  007D                     	ds	1
  3837                           
  3838                           	psect	bssBANK0
  3839  0058                     __pbssBANK0:	
  3840  0058                     _sub_timer:	
  3841  0058                     	ds	4
  3842  005C                     _tap_timer:	
  3843  005C                     	ds	4
  3844  0060                     _timer:	
  3845  0060                     	ds	4
  3846  0064                     _UQEnd:	
  3847  0064                     	ds	1
  3848  0065                     _doubleTap_state:	
  3849  0065                     	ds	1
  3850  0066                     _longBypass_state:	
  3851  0066                     	ds	1
  3852  0067                     _mode2_state:	
  3853  0067                     	ds	1
  3854  0068                     _presetSaveMode:	
  3855  0068                     	ds	1
  3856  0069                     _suspend_blink:	
  3857  0069                     	ds	1
  3858                           
  3859                           	psect	dataBANK0
  3860  0045                     __pdataBANK0:	
  3861  0045                     _baseline_delay_time:	
  3862  0045                     	ds	4
  3863  0049                     _delay_time:	
  3864  0049                     	ds	4
  3865  004D                     _bottom_push_state:	
  3866  004D                     	ds	2
  3867  004F                     _long_press_limit:	
  3868  004F                     	ds	2
  3869  0051                     _top_push_state:	
  3870  0051                     	ds	2
  3871  0053                     _blink_rate:	
  3872  0053                     	ds	1
  3873  0054                     _longTap_state:	
  3874  0054                     	ds	1
  3875  0055                     _num_taps:	
  3876  0055                     	ds	1
  3877  0056                     _presetChannel:	
  3878  0056                     	ds	1
  3879  0057                     _switchBypass_state:	
  3880  0057                     	ds	1
  3881                           
  3882                           	psect	bssBANK2
  3883  016A                     __pbssBANK2:	
  3884  016A                     _longBypass_start:	
  3885  016A                     	ds	1
  3886  016B                     _longTap_start:	
  3887  016B                     	ds	1
  3888  016C                     _switchTap_pressed:	
  3889  016C                     	ds	1
  3890                           
  3891                           	psect	bssBANK3
  3892  01A0                     __pbssBANK3:	
  3893  01A0                     _double_timer:	
  3894  01A0                     	ds	4
  3895  01A4                     _mod_timer:	
  3896  01A4                     	ds	4
  3897  01A8                     _knob_1_pos:	
  3898  01A8                     	ds	2
  3899  01AA                     _knob_2_pos:	
  3900  01AA                     	ds	2
  3901  01AC                     _knob_3_pos:	
  3902  01AC                     	ds	2
  3903  01AE                     _knob_4_pos:	
  3904  01AE                     	ds	2
  3905  01B0                     _knob_5_pos:	
  3906  01B0                     	ds	2
  3907  01B2                     _longBypass_timer:	
  3908  01B2                     	ds	2
  3909  01B4                     _longTap_timer:	
  3910  01B4                     	ds	2
  3911  01B6                     _mod_counter:	
  3912  01B6                     	ds	2
  3913  01B8                     _mod_value:	
  3914  01B8                     	ds	2
  3915  01BA                     _switchBypass_pressed:	
  3916  01BA                     	ds	2
  3917  01BC                     _adjust_sub_delay:	
  3918  01BC                     	ds	1
  3919  01BD                     _bottomTactile_pressed:	
  3920  01BD                     	ds	1
  3921  01BE                     _bypass_turning_on:	
  3922  01BE                     	ds	1
  3923  01BF                     _iCnt:	
  3924  01BF                     	ds	1
  3925  01C0                     _longBypass_down:	
  3926  01C0                     	ds	1
  3927  01C1                     _mode1_state:	
  3928  01C1                     	ds	1
  3929  01C2                     _modulation_changed:	
  3930  01C2                     	ds	1
  3931  01C3                     _preset_blink:	
  3932  01C3                     	ds	1
  3933  01C4                     _preset_programmning_on:	
  3934  01C4                     	ds	1
  3935  01C5                     _reset_sub_delay:	
  3936  01C5                     	ds	1
  3937  01C6                     _switchTap_down:	
  3938  01C6                     	ds	1
  3939  01C7                     _topTactile_pressed:	
  3940  01C7                     	ds	1
  3941                           
  3942                           	psect	dataBANK3
  3943  01C8                     __pdataBANK3:	
  3944  01C8                     _blink_delay:	
  3945  01C8                     	ds	2
  3946  01CA                     _knob1_prev:	
  3947  01CA                     	ds	2
  3948  01CC                     _knob2_prev:	
  3949  01CC                     	ds	2
  3950  01CE                     _knob3_prev:	
  3951  01CE                     	ds	2
  3952  01D0                     _knob4_prev:	
  3953  01D0                     	ds	2
  3954  01D2                     _knob5_prev:	
  3955  01D2                     	ds	2
  3956  01D4                     _mod_delay_time:	
  3957  01D4                     	ds	2
  3958  01D6                     _symmetry:	
  3959  01D6                     	ds	2
  3960  01D8                     _tap_iteration:	
  3961  01D8                     	ds	2
  3962  01DA                     _blink_state:	
  3963  01DA                     	ds	1
  3964  01DB                     _currentBypassState:	
  3965  01DB                     	ds	1
  3966  01DC                     _delay_time_changed:	
  3967  01DC                     	ds	1
  3968  01DD                     _expSwitchState:	
  3969  01DD                     	ds	1
  3970  01DE                     _expressModeCnst:	
  3971  01DE                     	ds	1
  3972  01DF                     _expressionChannel:	
  3973  01DF                     	ds	1
  3974  01E0                     _presetModeCnst:	
  3975  01E0                     	ds	1
  3976  01E1                     _switchTap_state:	
  3977  01E1                     	ds	1
  3978                           
  3979                           	psect	bssBANK4
  3980  0220                     __pbssBANK4:	
  3981  0220                     _tap_history:	
  3982  0220                     	ds	20
  3983  0234                     USARTWriteInt@F3536:	
  3984  0234                     	ds	5
  3985  0239                     _ledState:	
  3986  0239                     	ds	4
  3987  023D                     _tap_total:	
  3988  023D                     	ds	4
  3989  0241                     _test_timer:	
  3990  0241                     	ds	4
  3991  0245                     _adjusted_pot_value:	
  3992  0245                     	ds	2
  3993  0247                     _debounce_bypass:	
  3994  0247                     	ds	2
  3995  0249                     _debounce_count:	
  3996  0249                     	ds	2
  3997  024B                     _debounce_mode1:	
  3998  024B                     	ds	2
  3999  024D                     _debounce_mode2:	
  4000  024D                     	ds	2
  4001  024F                     _delay_counter:	
  4002  024F                     	ds	2
  4003  0251                     _delayfound:	
  4004  0251                     	ds	2
  4005  0253                     _errno:	
  4006  0253                     	ds	2
  4007  0255                     _switchBypass_toggle:	
  4008  0255                     	ds	2
  4009  0257                     _tmpVal:	
  4010  0257                     	ds	2
  4011                           
  4012                           	psect	dataBANK4
  4013  0262                     __pdataBANK4:	
  4014  0262                     _switchBypass_up:	
  4015  0262                     	ds	2
  4016                           
  4017                           	psect	bssBANK5
  4018  02A0                     __pbssBANK5:	
  4019  02A0                     _tap:	
  4020  02A0                     	ds	44
  4021                           
  4022                           	psect	bssBANK6
  4023  0320                     __pbssBANK6:	
  4024  0320                     _URBuff:	
  4025  0320                     	ds	64
  4026                           
  4027                           	psect	bssBANK7
  4028  03A0                     __pbssBANK7:	
  4029  03A0                     _myBuf:	
  4030  03A0                     	ds	64
  4031                           
  4032                           	psect	clrtext
  4033  2F82                     clear_ram0:	
  4034                           ;	Called with FSR0 containing the base address, and
  4035                           ;	btemp/btemp+1 has the size to clear
  4036                           
  4037  2F82  0064               	clrwdt	;clear the watchdog before getting into this loop
  4038  2F83                     clrloop0:	
  4039  2F83  0180               	clrf	0	;clear RAM location pointed to by FSR
  4040  2F84  3101               	addfsr 0,1
  4041  2F85  3001               	movlw	1
  4042  2F86  02FE               	subwf	126,f
  4043  2F87  3000               	movlw	0
  4044  2F88  3BFF               	subwfb	127,f
  4045  2F89  087F               	movf	127,w
  4046  2F8A  047E               	iorwf	126,w
  4047  2F8B  1903               	btfsc	3,2
  4048  2F8C  3400               	retlw	0	;all done for this memory range, return
  4049  2F8D  2F83               	goto	clrloop0	;have we reached the end yet?
  4050                           
  4051                           	psect	inittext
  4052  2F76                     init_ram:	
  4053  2F76  00FE               	movwf	126
  4054  2F77                     initloop:	
  4055  2F77  0012               	moviw fsr0++
  4056  2F78  001E               	movwi fsr1++
  4057  2F79  3001               	movlw	1
  4058  2F7A  02FE               	subwf	126,f
  4059  2F7B  3000               	movlw	0
  4060  2F7C  3BFF               	subwfb	127,f
  4061  2F7D  087F               	movf	127,w
  4062  2F7E  047E               	iorwf	126,w
  4063  2F7F  1903               	btfsc	3,2
  4064  2F80  3400               	retlw	0
  4065  2F81  2F77               	goto	initloop
  4066                           
  4067                           	psect	cstackBANK4
  4068  0259                     __pcstackBANK4:	
  4069  0259                     _main$2806:	
  4070                           
  4071                           ; 3 bytes @ 0x0
  4072  0259                     	ds	3
  4073  025C                     _main$2807:	
  4074                           
  4075                           ; 3 bytes @ 0x3
  4076  025C                     	ds	3
  4077  025F                     _main$2808:	
  4078                           
  4079                           ; 3 bytes @ 0x6
  4080  025F                     	ds	3
  4081                           
  4082                           	psect	cstackBANK3
  4083  01E2                     __pcstackBANK3:	
  4084  01E2                     scaleA100kPot@pwm:	
  4085  01E2                     scaleA10kPot@pwm:	
  4086                           ; 3 bytes @ 0x0
  4087                           
  4088  01E2                     scaleiA10kPot@pwm:	
  4089                           ; 3 bytes @ 0x0
  4090                           
  4091                           
  4092                           ; 3 bytes @ 0x0
  4093  01E2                     	ds	3
  4094  01E5                     _scaleA100kPot$2811:	
  4095  01E5                     _scaleA10kPot$2815:	
  4096                           ; 3 bytes @ 0x3
  4097                           
  4098  01E5                     _scaleiA10kPot$2817:	
  4099                           ; 3 bytes @ 0x3
  4100                           
  4101                           
  4102                           ; 3 bytes @ 0x3
  4103  01E5                     	ds	3
  4104  01E8                     _scaleA100kPot$2812:	
  4105  01E8                     _scaleA10kPot$2816:	
  4106                           ; 3 bytes @ 0x6
  4107                           
  4108  01E8                     _scaleiA10kPot$2818:	
  4109                           ; 3 bytes @ 0x6
  4110                           
  4111                           
  4112                           ; 3 bytes @ 0x6
  4113  01E8                     	ds	3
  4114  01EB                     ??_main:	
  4115                           
  4116                           ; 1 bytes @ 0x9
  4117  01EB                     	ds	5
  4118                           
  4119                           	psect	cstackBANK2
  4120  0120                     __pcstackBANK2:	
  4121  0120                     ?___fttol:	
  4122  0120                     ___fttol@f1:	
  4123                           ; 4 bytes @ 0x0
  4124                           
  4125                           
  4126                           ; 3 bytes @ 0x0
  4127  0120                     	ds	4
  4128  0124                     ??___fttol:	
  4129                           
  4130                           ; 1 bytes @ 0x4
  4131  0124                     	ds	4
  4132  0128                     ___fttol@sign1:	
  4133                           
  4134                           ; 1 bytes @ 0x8
  4135  0128                     	ds	1
  4136  0129                     ___fttol@lval:	
  4137                           
  4138                           ; 4 bytes @ 0x9
  4139  0129                     	ds	4
  4140  012D                     ___fttol@exp1:	
  4141                           
  4142                           ; 1 bytes @ 0xD
  4143  012D                     	ds	1
  4144  012E                     ?_modTri:	
  4145  012E                     ?_modSaw:	
  4146                           ; 2 bytes @ 0xE
  4147                           
  4148  012E                     ?___wmul:	
  4149                           ; 2 bytes @ 0xE
  4150                           
  4151  012E                     ?___altoft:	
  4152                           ; 2 bytes @ 0xE
  4153                           
  4154  012E                     ___wmul@multiplier:	
  4155                           ; 3 bytes @ 0xE
  4156                           
  4157  012E                     modTri@angle:	
  4158                           ; 2 bytes @ 0xE
  4159                           
  4160  012E                     modSaw@angle:	
  4161                           ; 3 bytes @ 0xE
  4162                           
  4163  012E                     ___altoft@c:	
  4164                           ; 3 bytes @ 0xE
  4165                           
  4166                           
  4167                           ; 4 bytes @ 0xE
  4168  012E                     	ds	2
  4169  0130                     ___wmul@multiplicand:	
  4170                           
  4171                           ; 2 bytes @ 0x10
  4172  0130                     	ds	1
  4173  0131                     modTri@inflection:	
  4174  0131                     modSaw@inflection:	
  4175                           ; 3 bytes @ 0x11
  4176                           
  4177                           
  4178                           ; 3 bytes @ 0x11
  4179  0131                     	ds	1
  4180  0132                     ??___altoft:	
  4181  0132                     ___wmul@product:	
  4182                           ; 1 bytes @ 0x12
  4183                           
  4184                           
  4185                           ; 2 bytes @ 0x12
  4186  0132                     	ds	2
  4187  0134                     ?_modSin:	
  4188  0134                     ?_eval_poly:	
  4189                           ; 2 bytes @ 0x14
  4190                           
  4191  0134                     ___altoft@exp:	
  4192                           ; 3 bytes @ 0x14
  4193                           
  4194  0134                     modSin@angle:	
  4195                           ; 1 bytes @ 0x14
  4196                           
  4197  0134                     eval_poly@x:	
  4198                           ; 3 bytes @ 0x14
  4199                           
  4200  0134                     _modTri$2820:	
  4201                           ; 3 bytes @ 0x14
  4202                           
  4203  0134                     _modSaw$2821:	
  4204                           ; 3 bytes @ 0x14
  4205                           
  4206                           
  4207                           ; 3 bytes @ 0x14
  4208  0134                     	ds	1
  4209  0135                     ___altoft@sign:	
  4210                           
  4211                           ; 1 bytes @ 0x15
  4212  0135                     	ds	1
  4213  0136                     ?_trunc:	
  4214  0136                     ?_floor:	
  4215                           ; 3 bytes @ 0x16
  4216                           
  4217  0136                     trunc@x:	
  4218                           ; 3 bytes @ 0x16
  4219                           
  4220  0136                     floor@x:	
  4221                           ; 3 bytes @ 0x16
  4222                           
  4223                           
  4224                           ; 3 bytes @ 0x16
  4225  0136                     	ds	1
  4226  0137                     eval_poly@d:	
  4227  0137                     modSin@inflection:	
  4228                           ; 2 bytes @ 0x17
  4229                           
  4230  0137                     modTri@shift:	
  4231                           ; 3 bytes @ 0x17
  4232                           
  4233  0137                     _modSaw$2822:	
  4234                           ; 3 bytes @ 0x17
  4235                           
  4236                           
  4237                           ; 3 bytes @ 0x17
  4238  0137                     	ds	2
  4239  0139                     ??_trunc:	
  4240  0139                     ??_floor:	
  4241                           ; 1 bytes @ 0x19
  4242                           
  4243  0139                     eval_poly@n:	
  4244                           ; 1 bytes @ 0x19
  4245                           
  4246                           
  4247                           ; 2 bytes @ 0x19
  4248  0139                     	ds	1
  4249  013A                     ??_modSin:	
  4250  013A                     modTri@period:	
  4251                           ; 1 bytes @ 0x1A
  4252                           
  4253  013A                     trunc@i:	
  4254                           ; 3 bytes @ 0x1A
  4255                           
  4256  013A                     floor@i:	
  4257                           ; 3 bytes @ 0x1A
  4258                           
  4259  013A                     _modSaw$2823:	
  4260                           ; 3 bytes @ 0x1A
  4261                           
  4262                           
  4263                           ; 3 bytes @ 0x1A
  4264  013A                     	ds	1
  4265  013B                     eval_poly@res:	
  4266                           
  4267                           ; 3 bytes @ 0x1B
  4268  013B                     	ds	1
  4269  013C                     _modSin$2819:	
  4270                           
  4271                           ; 3 bytes @ 0x1C
  4272  013C                     	ds	1
  4273  013D                     modSaw@mod:	
  4274  013D                     trunc@expon:	
  4275                           ; 2 bytes @ 0x1D
  4276                           
  4277  013D                     floor@expon:	
  4278                           ; 2 bytes @ 0x1D
  4279                           
  4280  013D                     modTri@tmpVal:	
  4281                           ; 2 bytes @ 0x1D
  4282                           
  4283                           
  4284                           ; 3 bytes @ 0x1D
  4285  013D                     	ds	1
  4286  013E                     ?_log:	
  4287  013E                     ?_ldexp:	
  4288                           ; 3 bytes @ 0x1E
  4289                           
  4290  013E                     ldexp@value:	
  4291                           ; 3 bytes @ 0x1E
  4292                           
  4293  013E                     log@x:	
  4294                           ; 3 bytes @ 0x1E
  4295                           
  4296                           
  4297                           ; 3 bytes @ 0x1E
  4298  013E                     	ds	1
  4299  013F                     ?_set_subdivision:	
  4300  013F                     ?___ftsub:	
  4301                           ; 2 bytes @ 0x1F
  4302                           
  4303  013F                     set_subdivision@x:	
  4304                           ; 3 bytes @ 0x1F
  4305                           
  4306  013F                     modSin@shift:	
  4307                           ; 2 bytes @ 0x1F
  4308                           
  4309  013F                     modSaw@shift:	
  4310                           ; 3 bytes @ 0x1F
  4311                           
  4312  013F                     ___ftsub@f2:	
  4313                           ; 3 bytes @ 0x1F
  4314                           
  4315                           
  4316                           ; 3 bytes @ 0x1F
  4317  013F                     	ds	2
  4318  0141                     ??_log:	
  4319  0141                     set_subdivision@y:	
  4320                           ; 1 bytes @ 0x21
  4321                           
  4322  0141                     ldexp@newexp:	
  4323                           ; 2 bytes @ 0x21
  4324                           
  4325                           
  4326                           ; 2 bytes @ 0x21
  4327  0141                     	ds	1
  4328  0142                     log@exponent:	
  4329  0142                     modSin@period:	
  4330                           ; 2 bytes @ 0x22
  4331                           
  4332  0142                     modSaw@period:	
  4333                           ; 3 bytes @ 0x22
  4334                           
  4335  0142                     ___ftsub@f1:	
  4336                           ; 3 bytes @ 0x22
  4337                           
  4338                           
  4339                           ; 3 bytes @ 0x22
  4340  0142                     	ds	1
  4341  0143                     ??_set_subdivision:	
  4342  0143                     ??_ldexp:	
  4343                           ; 1 bytes @ 0x23
  4344                           
  4345                           
  4346                           ; 1 bytes @ 0x23
  4347  0143                     	ds	2
  4348  0145                     ?_modSawRev:	
  4349  0145                     ?_sin:	
  4350                           ; 2 bytes @ 0x25
  4351                           
  4352  0145                     modSin@tmpVal:	
  4353                           ; 3 bytes @ 0x25
  4354                           
  4355  0145                     modSawRev@angle:	
  4356                           ; 3 bytes @ 0x25
  4357                           
  4358  0145                     sin@f:	
  4359                           ; 3 bytes @ 0x25
  4360                           
  4361  0145                     _ldexp$2615:	
  4362                           ; 3 bytes @ 0x25
  4363                           
  4364                           
  4365                           ; 3 bytes @ 0x25
  4366  0145                     	ds	1
  4367  0146                     set_subdivision@scalar:	
  4368                           
  4369                           ; 3 bytes @ 0x26
  4370  0146                     	ds	2
  4371  0148                     ??_sin:	
  4372  0148                     ?_modSquare:	
  4373                           ; 1 bytes @ 0x28
  4374                           
  4375  0148                     ?_exp:	
  4376                           ; 2 bytes @ 0x28
  4377                           
  4378  0148                     modSawRev@inflection:	
  4379                           ; 3 bytes @ 0x28
  4380                           
  4381  0148                     modSquare@angle:	
  4382                           ; 3 bytes @ 0x28
  4383                           
  4384  0148                     exp@x:	
  4385                           ; 3 bytes @ 0x28
  4386                           
  4387                           
  4388                           ; 3 bytes @ 0x28
  4389  0148                     	ds	1
  4390  0149                     set_subdivision@tmpX:	
  4391  0149                     sin@y:	
  4392                           ; 2 bytes @ 0x29
  4393                           
  4394                           
  4395                           ; 3 bytes @ 0x29
  4396  0149                     	ds	2
  4397  014B                     ??_modSawRev:	
  4398  014B                     ??_exp:	
  4399                           ; 1 bytes @ 0x2B
  4400                           
  4401  014B                     modSquare@inflection:	
  4402                           ; 1 bytes @ 0x2B
  4403                           
  4404                           
  4405                           ; 3 bytes @ 0x2B
  4406  014B                     	ds	1
  4407  014C                     _sin$2826:	
  4408  014C                     _exp$2827:	
  4409                           ; 3 bytes @ 0x2C
  4410                           
  4411                           
  4412                           ; 3 bytes @ 0x2C
  4413  014C                     	ds	2
  4414  014E                     modSquare@tmpVal:	
  4415                           
  4416                           ; 2 bytes @ 0x2E
  4417  014E                     	ds	1
  4418  014F                     sin@x2:	
  4419  014F                     _exp$2583:	
  4420                           ; 3 bytes @ 0x2F
  4421                           
  4422                           
  4423                           ; 3 bytes @ 0x2F
  4424  014F                     	ds	1
  4425  0150                     ??_updateModulationArray:	
  4426                           
  4427                           ; 1 bytes @ 0x30
  4428  0150                     	ds	2
  4429  0152                     sin@sgn:	
  4430  0152                     exp@exponent:	
  4431                           ; 1 bytes @ 0x32
  4432                           
  4433                           
  4434                           ; 2 bytes @ 0x32
  4435  0152                     	ds	1
  4436  0153                     ??_calcSinArray:	
  4437                           
  4438                           ; 1 bytes @ 0x33
  4439  0153                     	ds	1
  4440  0154                     exp@sign:	
  4441  0154                     updateModulationArray@thisAngle:	
  4442                           ; 1 bytes @ 0x34
  4443                           
  4444                           
  4445                           ; 2 bytes @ 0x34
  4446  0154                     	ds	1
  4447  0155                     ?_pow:	
  4448  0155                     pow@x:	
  4449                           ; 3 bytes @ 0x35
  4450                           
  4451                           
  4452                           ; 3 bytes @ 0x35
  4453  0155                     	ds	1
  4454  0156                     updateModulationArray@iAngle:	
  4455                           
  4456                           ; 1 bytes @ 0x36
  4457  0156                     	ds	1
  4458  0157                     calcSinArray@x:	
  4459                           
  4460                           ; 1 bytes @ 0x37
  4461  0157                     	ds	1
  4462  0158                     calcSinArray@tmpVal:	
  4463  0158                     pow@y:	
  4464                           ; 3 bytes @ 0x38
  4465                           
  4466                           
  4467                           ; 3 bytes @ 0x38
  4468  0158                     	ds	3
  4469  015B                     ??_pow:	
  4470  015B                     calcSinArray@iAngle:	
  4471                           ; 1 bytes @ 0x3B
  4472                           
  4473                           
  4474                           ; 1 bytes @ 0x3B
  4475  015B                     	ds	1
  4476  015C                     _pow$2824:	
  4477                           
  4478                           ; 3 bytes @ 0x3C
  4479  015C                     	ds	3
  4480  015F                     _pow$2825:	
  4481                           
  4482                           ; 3 bytes @ 0x3F
  4483  015F                     	ds	3
  4484  0162                     pow@sign:	
  4485                           
  4486                           ; 1 bytes @ 0x42
  4487  0162                     	ds	1
  4488  0163                     pow@yi:	
  4489                           
  4490                           ; 4 bytes @ 0x43
  4491  0163                     	ds	4
  4492  0167                     ?_scaleA10kPot:	
  4493  0167                     ?_scaleiA10kPot:	
  4494                           ; 2 bytes @ 0x47
  4495                           
  4496  0167                     ?_scaleA100kPot:	
  4497                           ; 2 bytes @ 0x47
  4498                           
  4499  0167                     scaleA100kPot@input:	
  4500                           ; 2 bytes @ 0x47
  4501                           
  4502  0167                     scaleA10kPot@input:	
  4503                           ; 3 bytes @ 0x47
  4504                           
  4505  0167                     scaleiA10kPot@input:	
  4506                           ; 3 bytes @ 0x47
  4507                           
  4508                           
  4509                           ; 3 bytes @ 0x47
  4510  0167                     	ds	3
  4511                           
  4512                           	psect	cstackBANK1
  4513  00A0                     __pcstackBANK1:	
  4514  00A0                     ?___ftge:	
  4515  00A0                     ?_set_leds_top:	
  4516                           ; 1 bit 
  4517                           
  4518  00A0                     ?_USARTInit:	
  4519                           ; 1 bytes @ 0x0
  4520                           
  4521  00A0                     ??_ConfigureOscillator:	
  4522                           ; 1 bytes @ 0x0
  4523                           
  4524  00A0                     ??_InitApp:	
  4525                           ; 1 bytes @ 0x0
  4526                           
  4527  00A0                     ??_InitializeTaps:	
  4528                           ; 1 bytes @ 0x0
  4529                           
  4530  00A0                     ??_init_adc:	
  4531                           ; 1 bytes @ 0x0
  4532                           
  4533  00A0                     ??_init_pwm:	
  4534                           ; 1 bytes @ 0x0
  4535                           
  4536  00A0                     ??_init_timer2:	
  4537                           ; 1 bytes @ 0x0
  4538                           
  4539  00A0                     ??_init_timer0:	
  4540                           ; 1 bytes @ 0x0
  4541                           
  4542  00A0                     ?_set_leds_bottom:	
  4543                           ; 1 bytes @ 0x0
  4544                           
  4545  00A0                     ?_setLongBypassState:	
  4546                           ; 1 bytes @ 0x0
  4547                           
  4548  00A0                     ?_setLongTapState:	
  4549                           ; 1 bytes @ 0x0
  4550                           
  4551  00A0                     ?_updateSwitchBypassState:	
  4552                           ; 1 bytes @ 0x0
  4553                           
  4554  00A0                     ?_adc_convert:	
  4555                           ; 1 bytes @ 0x0
  4556                           
  4557  00A0                     ?_FLASH_ReadWord:	
  4558                           ; 2 bytes @ 0x0
  4559                           
  4560  00A0                     ?_getSwitchBypassState:	
  4561                           ; 2 bytes @ 0x0
  4562                           
  4563  00A0                     ?___ftpack:	
  4564                           ; 2 bytes @ 0x0
  4565                           
  4566  00A0                     ?_frexp:	
  4567                           ; 3 bytes @ 0x0
  4568                           
  4569  00A0                     ?___lmul:	
  4570                           ; 3 bytes @ 0x0
  4571                           
  4572  00A0                     ?___aldiv:	
  4573                           ; 4 bytes @ 0x0
  4574                           
  4575  00A0                     FLASH_ReadWord@flashAddr:	
  4576                           ; 4 bytes @ 0x0
  4577                           
  4578  00A0                     set_leds_top@x:	
  4579                           ; 2 bytes @ 0x0
  4580                           
  4581  00A0                     set_leds_bottom@x:	
  4582                           ; 2 bytes @ 0x0
  4583                           
  4584  00A0                     updateSwitchBypassState@state:	
  4585                           ; 2 bytes @ 0x0
  4586                           
  4587  00A0                     setLongBypassState@f_state:	
  4588                           ; 2 bytes @ 0x0
  4589                           
  4590  00A0                     setLongTapState@f_state:	
  4591                           ; 2 bytes @ 0x0
  4592                           
  4593  00A0                     USARTInit@baud_rate:	
  4594                           ; 2 bytes @ 0x0
  4595                           
  4596  00A0                     ___ftpack@arg:	
  4597                           ; 2 bytes @ 0x0
  4598                           
  4599  00A0                     ___ftge@ff1:	
  4600                           ; 3 bytes @ 0x0
  4601                           
  4602  00A0                     frexp@value:	
  4603                           ; 3 bytes @ 0x0
  4604                           
  4605  00A0                     ___lmul@multiplier:	
  4606                           ; 3 bytes @ 0x0
  4607                           
  4608  00A0                     ___aldiv@divisor:	
  4609                           ; 4 bytes @ 0x0
  4610                           
  4611                           
  4612                           ; 4 bytes @ 0x0
  4613  00A0                     	ds	1
  4614  00A1                     InitializeTaps@itap:	
  4615                           
  4616                           ; 2 bytes @ 0x1
  4617  00A1                     	ds	1
  4618  00A2                     ??_USARTInit:	
  4619  00A2                     ??_adc_convert:	
  4620                           ; 1 bytes @ 0x2
  4621                           
  4622  00A2                     ??_FLASH_ReadWord:	
  4623                           ; 1 bytes @ 0x2
  4624                           
  4625  00A2                     ??_set_leds_bottom:	
  4626                           ; 1 bytes @ 0x2
  4627                           
  4628  00A2                     ??_setLongBypassState:	
  4629                           ; 1 bytes @ 0x2
  4630                           
  4631  00A2                     ??_setLongTapState:	
  4632                           ; 1 bytes @ 0x2
  4633                           
  4634  00A2                     ??_updateSwitchBypassState:	
  4635                           ; 1 bytes @ 0x2
  4636                           
  4637  00A2                     ??_getSwitchBypassState:	
  4638                           ; 1 bytes @ 0x2
  4639                           
  4640  00A2                     FLASH_ReadWord@GIEBitValue:	
  4641                           ; 1 bytes @ 0x2
  4642                           
  4643  00A2                     set_leds_top@ledState:	
  4644                           ; 1 bytes @ 0x2
  4645                           
  4646                           
  4647                           ; 2 bytes @ 0x2
  4648  00A2                     	ds	1
  4649  00A3                     adc_convert@channel:	
  4650  00A3                     ___ftpack@exp:	
  4651                           ; 1 bytes @ 0x3
  4652                           
  4653  00A3                     frexp@eptr:	
  4654                           ; 1 bytes @ 0x3
  4655                           
  4656  00A3                     ___ftge@ff2:	
  4657                           ; 1 bytes @ 0x3
  4658                           
  4659                           
  4660                           ; 3 bytes @ 0x3
  4661  00A3                     	ds	1
  4662  00A4                     ??_set_leds_top:	
  4663  00A4                     ??_ReadSavedSettings:	
  4664                           ; 1 bytes @ 0x4
  4665                           
  4666  00A4                     ??_resetRingLEDs:	
  4667                           ; 1 bytes @ 0x4
  4668                           
  4669  00A4                     ??_setPresetDisplay:	
  4670                           ; 1 bytes @ 0x4
  4671                           
  4672  00A4                     ??_setExpressionDisplay:	
  4673                           ; 1 bytes @ 0x4
  4674                           
  4675  00A4                     ??_frexp:	
  4676                           ; 1 bytes @ 0x4
  4677                           
  4678  00A4                     ___ftpack@sign:	
  4679                           ; 1 bytes @ 0x4
  4680                           
  4681  00A4                     ___lmul@multiplicand:	
  4682                           ; 1 bytes @ 0x4
  4683                           
  4684  00A4                     ___aldiv@dividend:	
  4685                           ; 4 bytes @ 0x4
  4686                           
  4687                           
  4688                           ; 4 bytes @ 0x4
  4689  00A4                     	ds	1
  4690  00A5                     ??___ftpack:	
  4691                           
  4692                           ; 1 bytes @ 0x5
  4693  00A5                     	ds	1
  4694  00A6                     ??___ftge:	
  4695  00A6                     setPresetDisplay@ledChannel:	
  4696                           ; 1 bytes @ 0x6
  4697                           
  4698  00A6                     setExpressionDisplay@ledChannel:	
  4699                           ; 1 bytes @ 0x6
  4700                           
  4701                           
  4702                           ; 1 bytes @ 0x6
  4703  00A6                     	ds	1
  4704  00A7                     ??_update_mode:	
  4705  00A7                     ??_update_selectMode:	
  4706                           ; 1 bytes @ 0x7
  4707                           
  4708  00A7                     ??_setPedalMode:	
  4709                           ; 1 bytes @ 0x7
  4710                           
  4711                           
  4712                           ; 1 bytes @ 0x7
  4713  00A7                     	ds	1
  4714  00A8                     ??___lmul:	
  4715  00A8                     ??___aldiv:	
  4716                           ; 1 bytes @ 0x8
  4717                           
  4718  00A8                     ?___awtoft:	
  4719                           ; 1 bytes @ 0x8
  4720                           
  4721  00A8                     ?___lltoft:	
  4722                           ; 3 bytes @ 0x8
  4723                           
  4724  00A8                     ___awtoft@c:	
  4725                           ; 3 bytes @ 0x8
  4726                           
  4727  00A8                     ___lmul@product:	
  4728                           ; 2 bytes @ 0x8
  4729                           
  4730  00A8                     ___lltoft@c:	
  4731                           ; 4 bytes @ 0x8
  4732                           
  4733                           
  4734                           ; 4 bytes @ 0x8
  4735  00A8                     	ds	1
  4736  00A9                     ___aldiv@counter:	
  4737                           
  4738                           ; 1 bytes @ 0x9
  4739  00A9                     	ds	1
  4740  00AA                     ___aldiv@sign:	
  4741                           
  4742                           ; 1 bytes @ 0xA
  4743  00AA                     	ds	1
  4744  00AB                     ??___awtoft:	
  4745  00AB                     ___aldiv@quotient:	
  4746                           ; 1 bytes @ 0xB
  4747                           
  4748                           
  4749                           ; 4 bytes @ 0xB
  4750  00AB                     	ds	1
  4751  00AC                     ?_wait_ms:	
  4752  00AC                     ??___lltoft:	
  4753                           ; 1 bytes @ 0xC
  4754                           
  4755  00AC                     wait_ms@timeSec:	
  4756                           ; 1 bytes @ 0xC
  4757                           
  4758                           
  4759                           ; 2 bytes @ 0xC
  4760  00AC                     	ds	1
  4761  00AD                     ___awtoft@sign:	
  4762  00AD                     ___lltoft@exp:	
  4763                           ; 1 bytes @ 0xD
  4764                           
  4765                           
  4766                           ; 1 bytes @ 0xD
  4767  00AD                     	ds	1
  4768  00AE                     ??_wait_ms:	
  4769  00AE                     ?___ftmul:	
  4770                           ; 1 bytes @ 0xE
  4771                           
  4772  00AE                     ___ftmul@f1:	
  4773                           ; 3 bytes @ 0xE
  4774                           
  4775  00AE                     wait_ms@timemsl:	
  4776                           ; 3 bytes @ 0xE
  4777                           
  4778                           
  4779                           ; 4 bytes @ 0xE
  4780  00AE                     	ds	3
  4781  00B1                     ___ftmul@f2:	
  4782                           
  4783                           ; 3 bytes @ 0x11
  4784  00B1                     	ds	1
  4785  00B2                     ??_read_bottom_tactile:	
  4786  00B2                     ??_read_top_tactile:	
  4787                           ; 1 bytes @ 0x12
  4788                           
  4789  00B2                     ??_solidring_tactiles:	
  4790                           ; 1 bytes @ 0x12
  4791                           
  4792  00B2                     ??_ring_tactiles:	
  4793                           ; 1 bytes @ 0x12
  4794                           
  4795  00B2                     ?_setSwitchBypassState:	
  4796                           ; 1 bytes @ 0x12
  4797                           
  4798  00B2                     setSwitchBypassState@f_state:	
  4799                           ; 1 bytes @ 0x12
  4800                           
  4801                           
  4802                           ; 2 bytes @ 0x12
  4803  00B2                     	ds	1
  4804  00B3                     ring_tactiles@iLed:	
  4805                           
  4806                           ; 2 bytes @ 0x13
  4807  00B3                     	ds	1
  4808  00B4                     ??_setSwitchBypassState:	
  4809  00B4                     ??___ftmul:	
  4810                           ; 1 bytes @ 0x14
  4811                           
  4812  00B4                     solidring_tactiles@ring_delay:	
  4813                           ; 1 bytes @ 0x14
  4814                           
  4815                           
  4816                           ; 1 bytes @ 0x14
  4817  00B4                     	ds	1
  4818  00B5                     ring_tactiles@iLed_1529:	
  4819                           
  4820                           ; 2 bytes @ 0x15
  4821  00B5                     	ds	1
  4822  00B6                     ??_initSwitchBypass:	
  4823  00B6                     initSwitchBypass@initState:	
  4824                           ; 1 bytes @ 0x16
  4825                           
  4826                           
  4827                           ; 2 bytes @ 0x16
  4828  00B6                     	ds	1
  4829  00B7                     ??_showSave:	
  4830                           
  4831                           ; 1 bytes @ 0x17
  4832  00B7                     	ds	1
  4833  00B8                     ?_setDoublePressState:	
  4834  00B8                     ___ftmul@exp:	
  4835                           ; 1 bytes @ 0x18
  4836                           
  4837  00B8                     setDoublePressState@f_state:	
  4838                           ; 1 bytes @ 0x18
  4839                           
  4840                           
  4841                           ; 2 bytes @ 0x18
  4842  00B8                     	ds	1
  4843  00B9                     ___ftmul@f3_as_product:	
  4844                           
  4845                           ; 3 bytes @ 0x19
  4846  00B9                     	ds	1
  4847  00BA                     ??_setDoublePressState:	
  4848                           
  4849                           ; 1 bytes @ 0x1A
  4850  00BA                     	ds	2
  4851  00BC                     ??_updateSwitchBypass:	
  4852  00BC                     ??_updateSwitchTap:	
  4853                           ; 1 bytes @ 0x1C
  4854                           
  4855  00BC                     ___ftmul@cntr:	
  4856                           ; 1 bytes @ 0x1C
  4857                           
  4858                           
  4859                           ; 1 bytes @ 0x1C
  4860  00BC                     	ds	1
  4861  00BD                     ___ftmul@sign:	
  4862                           
  4863                           ; 1 bytes @ 0x1D
  4864  00BD                     	ds	1
  4865  00BE                     ?___ftneg:	
  4866  00BE                     ___ftneg@f1:	
  4867                           ; 3 bytes @ 0x1E
  4868                           
  4869                           
  4870                           ; 3 bytes @ 0x1E
  4871  00BE                     	ds	3
  4872  00C1                     ??___ftneg:	
  4873  00C1                     ?___ftadd:	
  4874                           ; 1 bytes @ 0x21
  4875                           
  4876  00C1                     ___ftadd@f1:	
  4877                           ; 3 bytes @ 0x21
  4878                           
  4879                           
  4880                           ; 3 bytes @ 0x21
  4881  00C1                     	ds	1
  4882  00C2                     updateSwitchTap@tapCntDivisor:	
  4883                           
  4884                           ; 2 bytes @ 0x22
  4885  00C2                     	ds	2
  4886  00C4                     updateSwitchTap@iCnt:	
  4887  00C4                     ___ftadd@f2:	
  4888                           ; 1 bytes @ 0x24
  4889                           
  4890                           
  4891                           ; 3 bytes @ 0x24
  4892  00C4                     	ds	3
  4893  00C7                     ??___ftadd:	
  4894                           
  4895                           ; 1 bytes @ 0x27
  4896  00C7                     	ds	4
  4897  00CB                     ___ftadd@sign:	
  4898                           
  4899                           ; 1 bytes @ 0x2B
  4900  00CB                     	ds	1
  4901  00CC                     ___ftadd@exp2:	
  4902                           
  4903                           ; 1 bytes @ 0x2C
  4904  00CC                     	ds	1
  4905  00CD                     ___ftadd@exp1:	
  4906                           
  4907                           ; 1 bytes @ 0x2D
  4908  00CD                     	ds	1
  4909  00CE                     ?___ftdiv:	
  4910  00CE                     ___ftdiv@f2:	
  4911                           ; 3 bytes @ 0x2E
  4912                           
  4913                           
  4914                           ; 3 bytes @ 0x2E
  4915  00CE                     	ds	3
  4916  00D1                     ___ftdiv@f1:	
  4917                           
  4918                           ; 3 bytes @ 0x31
  4919  00D1                     	ds	3
  4920  00D4                     ??___ftdiv:	
  4921                           
  4922                           ; 1 bytes @ 0x34
  4923  00D4                     	ds	4
  4924  00D8                     ___ftdiv@cntr:	
  4925                           
  4926                           ; 1 bytes @ 0x38
  4927  00D8                     	ds	1
  4928  00D9                     ___ftdiv@f3:	
  4929                           
  4930                           ; 3 bytes @ 0x39
  4931  00D9                     	ds	3
  4932  00DC                     ___ftdiv@exp:	
  4933                           
  4934                           ; 1 bytes @ 0x3C
  4935  00DC                     	ds	1
  4936  00DD                     ___ftdiv@sign:	
  4937                           
  4938                           ; 1 bytes @ 0x3D
  4939  00DD                     	ds	1
  4940  00DE                     ?_map:	
  4941  00DE                     map@x:	
  4942                           ; 3 bytes @ 0x3E
  4943                           
  4944                           
  4945                           ; 3 bytes @ 0x3E
  4946  00DE                     	ds	3
  4947  00E1                     map@in_min:	
  4948                           
  4949                           ; 3 bytes @ 0x41
  4950  00E1                     	ds	3
  4951  00E4                     map@in_max:	
  4952                           
  4953                           ; 3 bytes @ 0x44
  4954  00E4                     	ds	3
  4955  00E7                     map@out_min:	
  4956                           
  4957                           ; 3 bytes @ 0x47
  4958  00E7                     	ds	3
  4959  00EA                     map@out_max:	
  4960                           
  4961                           ; 3 bytes @ 0x4A
  4962  00EA                     	ds	3
  4963  00ED                     ??_map:	
  4964  00ED                     _map$2809:	
  4965                           ; 1 bytes @ 0x4D
  4966                           
  4967                           
  4968                           ; 3 bytes @ 0x4D
  4969  00ED                     	ds	3
  4970  00F0                     ??_scaleA10kPot:	
  4971  00F0                     ??_scaleiA10kPot:	
  4972                           ; 1 bytes @ 0x50
  4973                           
  4974  00F0                     ??_scaleA100kPot:	
  4975                           ; 1 bytes @ 0x50
  4976                           
  4977  00F0                     ??_modTri:	
  4978                           ; 1 bytes @ 0x50
  4979                           
  4980  00F0                     ??_modSquare:	
  4981                           ; 1 bytes @ 0x50
  4982                           
  4983  00F0                     ??_modSaw:	
  4984                           ; 1 bytes @ 0x50
  4985                           
  4986  00F0                     ??_eval_poly:	
  4987                           ; 1 bytes @ 0x50
  4988                           
  4989  00F0                     ??___wmul:	
  4990                           ; 1 bytes @ 0x50
  4991                           
  4992  00F0                     ??___ftsub:	
  4993                           ; 1 bytes @ 0x50
  4994                           
  4995                           
  4996                           	psect	cstackCOMMON
  4997  0070                     __pcstackCOMMON:	
  4998                           ; 1 bytes @ 0x50
  4999                           
  5000  0070                     ?_calcSinArray:	
  5001  0070                     ?_ConfigureOscillator:	
  5002                           ; 1 bytes @ 0x0
  5003                           
  5004  0070                     ?_InitApp:	
  5005                           ; 1 bytes @ 0x0
  5006                           
  5007  0070                     ?_InitializeTaps:	
  5008                           ; 1 bytes @ 0x0
  5009                           
  5010  0070                     ?_initSwitchBypass:	
  5011                           ; 1 bytes @ 0x0
  5012                           
  5013  0070                     ?_ReadSavedSettings:	
  5014                           ; 1 bytes @ 0x0
  5015                           
  5016  0070                     ?_updateModulationArray:	
  5017                           ; 1 bytes @ 0x0
  5018                           
  5019  0070                     ?_update_mode:	
  5020                           ; 1 bytes @ 0x0
  5021                           
  5022  0070                     ?_update_selectMode:	
  5023                           ; 1 bytes @ 0x0
  5024                           
  5025  0070                     ?_updateSwitchBypass:	
  5026                           ; 1 bytes @ 0x0
  5027                           
  5028  0070                     ?_updateSwitchTap:	
  5029                           ; 1 bytes @ 0x0
  5030                           
  5031  0070                     ?_read_bottom_tactile:	
  5032                           ; 1 bytes @ 0x0
  5033                           
  5034  0070                     ?_read_top_tactile:	
  5035                           ; 1 bytes @ 0x0
  5036                           
  5037  0070                     ?_init_adc:	
  5038                           ; 1 bytes @ 0x0
  5039                           
  5040  0070                     ?_init_pwm:	
  5041                           ; 1 bytes @ 0x0
  5042                           
  5043  0070                     ?_init_timer2:	
  5044                           ; 1 bytes @ 0x0
  5045                           
  5046  0070                     ?_init_timer0:	
  5047                           ; 1 bytes @ 0x0
  5048                           
  5049  0070                     ?_solidring_tactiles:	
  5050                           ; 1 bytes @ 0x0
  5051                           
  5052  0070                     ?_ring_tactiles:	
  5053                           ; 1 bytes @ 0x0
  5054                           
  5055  0070                     ?_resetRingLEDs:	
  5056                           ; 1 bytes @ 0x0
  5057                           
  5058  0070                     ?_setPedalMode:	
  5059                           ; 1 bytes @ 0x0
  5060                           
  5061  0070                     ?_setPresetDisplay:	
  5062                           ; 1 bytes @ 0x0
  5063                           
  5064  0070                     ?_setExpressionDisplay:	
  5065                           ; 1 bytes @ 0x0
  5066                           
  5067  0070                     ?_isr:	
  5068                           ; 1 bytes @ 0x0
  5069                           
  5070  0070                     ?_main:	
  5071                           ; 1 bytes @ 0x0
  5072                           
  5073  0070                     ?_showSave:	
  5074                           ; 1 bytes @ 0x0
  5075                           
  5076  0070                     ?i1_set_leds_top:	
  5077                           ; 1 bytes @ 0x0
  5078                           
  5079  0070                     ?___awdiv:	
  5080                           ; 1 bytes @ 0x0
  5081                           
  5082  0070                     ?i1___lmul:	
  5083                           ; 2 bytes @ 0x0
  5084                           
  5085  0070                     ___awdiv@divisor:	
  5086                           ; 4 bytes @ 0x0
  5087                           
  5088  0070                     i1set_leds_top@x:	
  5089                           ; 2 bytes @ 0x0
  5090                           
  5091  0070                     i1___lmul@multiplier:	
  5092                           ; 2 bytes @ 0x0
  5093                           
  5094                           
  5095                           ; 4 bytes @ 0x0
  5096  0070                     	ds	2
  5097  0072                     ___awdiv@dividend:	
  5098  0072                     i1set_leds_top@ledState:	
  5099                           ; 2 bytes @ 0x2
  5100                           
  5101                           
  5102                           ; 2 bytes @ 0x2
  5103  0072                     	ds	2
  5104  0074                     ??___awdiv:	
  5105  0074                     ??i1_set_leds_top:	
  5106                           ; 1 bytes @ 0x4
  5107                           
  5108  0074                     i1___lmul@multiplicand:	
  5109                           ; 1 bytes @ 0x4
  5110                           
  5111                           
  5112                           ; 4 bytes @ 0x4
  5113  0074                     	ds	1
  5114  0075                     ___awdiv@counter:	
  5115                           
  5116                           ; 1 bytes @ 0x5
  5117  0075                     	ds	1
  5118  0076                     ___awdiv@sign:	
  5119                           
  5120                           ; 1 bytes @ 0x6
  5121  0076                     	ds	1
  5122  0077                     ___awdiv@quotient:	
  5123                           
  5124                           ; 2 bytes @ 0x7
  5125  0077                     	ds	1
  5126  0078                     ??i1___lmul:	
  5127  0078                     i1___lmul@product:	
  5128                           ; 1 bytes @ 0x8
  5129                           
  5130                           
  5131                           ; 4 bytes @ 0x8
  5132  0078                     	ds	4
  5133  007C                     ??i1___aldiv:	
  5134                           
  5135                           ; 1 bytes @ 0xC
  5136  007C                     	ds	1
  5137                           
  5138                           	psect	cstackBANK0
  5139  0020                     __pcstackBANK0:	
  5140  0020                     ?i1___aldiv:	
  5141  0020                     i1___aldiv@divisor:	
  5142                           ; 4 bytes @ 0x0
  5143                           
  5144                           
  5145                           ; 4 bytes @ 0x0
  5146  0020                     	ds	4
  5147  0024                     i1___aldiv@dividend:	
  5148                           
  5149                           ; 4 bytes @ 0x4
  5150  0024                     	ds	4
  5151  0028                     i1___aldiv@counter:	
  5152                           
  5153                           ; 1 bytes @ 0x8
  5154  0028                     	ds	1
  5155  0029                     i1___aldiv@sign:	
  5156                           
  5157                           ; 1 bytes @ 0x9
  5158  0029                     	ds	1
  5159  002A                     i1___aldiv@quotient:	
  5160                           
  5161                           ; 4 bytes @ 0xA
  5162  002A                     	ds	4
  5163  002E                     ?_modulation:	
  5164  002E                     modulation@x:	
  5165                           ; 4 bytes @ 0xE
  5166                           
  5167                           
  5168                           ; 4 bytes @ 0xE
  5169  002E                     	ds	4
  5170  0032                     modulation@y:	
  5171                           
  5172                           ; 4 bytes @ 0x12
  5173  0032                     	ds	4
  5174  0036                     ??_modulation:	
  5175                           
  5176                           ; 1 bytes @ 0x16
  5177  0036                     	ds	4
  5178  003A                     ??_isr:	
  5179                           
  5180                           ; 1 bytes @ 0x1A
  5181  003A                     	ds	9
  5182  0043                     isr@tmpSubDelay:	
  5183                           
  5184                           ; 2 bytes @ 0x23
  5185  0043                     	ds	2
  5186                           
  5187                           	psect	maintext
  5188  035B                     __pmaintext:	
  5189 ;;
  5190 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  5191 ;;
  5192 ;; *************** function _main *****************
  5193 ;; Defined at:
  5194 ;;		line 68 in file "main.c"
  5195 ;; Parameters:    Size  Location     Type
  5196 ;;		None
  5197 ;; Auto vars:     Size  Location     Type
  5198 ;;		None
  5199 ;; Return value:  Size  Location     Type
  5200 ;;                  1    wreg      void 
  5201 ;; Registers used:
  5202 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5203 ;; Tracked objects:
  5204 ;;		On entry : B1F/0
  5205 ;;		On exit  : 0/0
  5206 ;;		Unchanged: 0/0
  5207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  5208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5209 ;;      Locals:         0       0       0       0       0       9       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5210 ;;      Temps:          0       0       0       0       5       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5211 ;;      Totals:         0       0       0       0       5       9       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5212 ;;Total ram usage:       14 bytes
  5213 ;; Hardware stack levels required when called:    9
  5214 ;; This function calls:
  5215 ;;		_ConfigureOscillator
  5216 ;;		_InitApp
  5217 ;;		_InitializeTaps
  5218 ;;		_ReadSavedSettings
  5219 ;;		_USARTInit
  5220 ;;		___awtoft
  5221 ;;		___fttol
  5222 ;;		_adc_convert
  5223 ;;		_calcSinArray
  5224 ;;		_initSwitchBypass
  5225 ;;		_map
  5226 ;;		_read_bottom_tactile
  5227 ;;		_read_top_tactile
  5228 ;;		_scaleA100kPot
  5229 ;;		_scaleA10kPot
  5230 ;;		_scaleiA10kPot
  5231 ;;		_set_subdivision
  5232 ;;		_updateModulationArray
  5233 ;;		_updateSwitchBypass
  5234 ;;		_updateSwitchTap
  5235 ;;		_update_mode
  5236 ;;		_update_selectMode
  5237 ;; This function is called by:
  5238 ;;		Startup code after reset
  5239 ;; This function uses a non-reentrant model
  5240 ;;
  5241                           
  5242                           
  5243                           ;psect for function _main
  5244  035B                     _main:	
  5245                           
  5246                           ;main.c: 70: calcSinArray();
  5247                           
  5248                           ;incstack = 0
  5249                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5250  035B  319A  225C  3183   	fcall	_calcSinArray
  5251                           
  5252                           ;main.c: 82: USARTInit(31250);
  5253  035E  3012               	movlw	18
  5254  035F  0021               	movlb	1	; select bank1
  5255  0360  00A0               	movwf	USARTInit@baud_rate^(0+128)
  5256  0361  307A               	movlw	122
  5257  0362  00A1               	movwf	(USARTInit@baud_rate^(0+128)+1)
  5258  0363  31A4  2494  3183   	fcall	_USARTInit
  5259                           
  5260                           ;main.c: 83: ConfigureOscillator();
  5261  0366  31AF  274F  3183   	fcall	_ConfigureOscillator
  5262                           
  5263                           ;main.c: 84: InitApp();
  5264  0369  31A1  219C  3183   	fcall	_InitApp
  5265                           
  5266                           ;main.c: 86: PORTEbits.RE0 = 1;
  5267  036C  0020               	movlb	0	; select bank0
  5268  036D  1410               	bsf	16,0	;volatile
  5269                           
  5270                           ;main.c: 87: PORTEbits.RE1 = 1;
  5271  036E  1490               	bsf	16,1	;volatile
  5272                           
  5273                           ;main.c: 88: PORTDbits.RD6 = 1;
  5274  036F  170F               	bsf	15,6	;volatile
  5275                           
  5276                           ;main.c: 89: PORTDbits.RD5 = 1;
  5277  0370  168F               	bsf	15,5	;volatile
  5278                           
  5279                           ;main.c: 90: PORTCbits.RC0 = 1;
  5280  0371  140E               	bsf	14,0	;volatile
  5281                           
  5282                           ;main.c: 91: PORTDbits.RD7 = 1;
  5283  0372  178F               	bsf	15,7	;volatile
  5284                           
  5285                           ;main.c: 93: InitializeTaps();
  5286  0373  31A0  20EF  3183   	fcall	_InitializeTaps
  5287                           
  5288                           ;main.c: 94: initSwitchBypass();
  5289  0376  3187  27F1  3183   	fcall	_initSwitchBypass
  5290                           
  5291                           ;main.c: 97: ReadSavedSettings();
  5292  0379  3198  2058  3183   	fcall	_ReadSavedSettings
  5293                           
  5294                           ;main.c: 98: updateModulationArray();
  5295  037C  318A  2236  3183   	fcall	_updateModulationArray
  5296  037F                     l8916:	
  5297                           ;main.c: 99: while (1) {
  5298                           
  5299                           
  5300                           ;main.c: 102: update_mode();
  5301  037F  31A2  222E  3183   	fcall	_update_mode
  5302                           
  5303                           ;main.c: 103: update_selectMode();
  5304  0382  31A7  2735  3183   	fcall	_update_selectMode
  5305                           
  5306                           ;main.c: 106: updateSwitchBypass();
  5307  0385  3192  2249  3183   	fcall	_updateSwitchBypass
  5308                           
  5309                           ;main.c: 107: if (presetSaveMode != 1) {
  5310  0388  0020               	movlb	0	; select bank0
  5311  0389  0368               	decf	_presetSaveMode,w
  5312  038A  1903               	btfsc	3,2
  5313  038B  2B8F               	goto	l8926
  5314                           
  5315                           ;main.c: 108: updateSwitchTap();
  5316  038C  318C  241D  3183   	fcall	_updateSwitchTap
  5317  038F                     l8926:	
  5318                           
  5319                           ;main.c: 109: }
  5320                           ;main.c: 111: if (presetSaveMode != 1 && mode2_state != presetModeCnst) {
  5321  038F  0020               	movlb	0	; select bank0
  5322  0390  0368               	decf	_presetSaveMode,w
  5323  0391  1903               	btfsc	3,2
  5324  0392  2B9E               	goto	l8932
  5325  0393  0867               	movf	_mode2_state,w
  5326  0394  0023               	movlb	3	; select bank3
  5327  0395  0660               	xorwf	_presetModeCnst^(0+384),w
  5328  0396  1903               	skipnz
  5329  0397  2B9E               	goto	l8932
  5330                           
  5331                           ;main.c: 112: read_bottom_tactile();
  5332  0398  31A5  25B1  3183   	fcall	_read_bottom_tactile
  5333                           
  5334                           ;main.c: 113: read_top_tactile();
  5335  039B  31A6  2646  3183   	fcall	_read_top_tactile
  5336  039E                     l8932:	
  5337                           
  5338                           ;main.c: 114: }
  5339                           ;main.c: 117: knob_1_pos = adc_convert(0);
  5340  039E  3000               	movlw	0
  5341  039F  31AF  278E  3183   	fcall	_adc_convert
  5342  03A2  0021               	movlb	1	; select bank1
  5343  03A3  0821               	movf	(?_adc_convert+1)^(0+128),w
  5344  03A4  0023               	movlb	3	; select bank3
  5345  03A5  00A9               	movwf	(_knob_1_pos+1)^(0+384)
  5346  03A6  0021               	movlb	1	; select bank1
  5347  03A7  0820               	movf	?_adc_convert^(0+128),w
  5348  03A8  0023               	movlb	3	; select bank3
  5349  03A9  00A8               	movwf	_knob_1_pos^(0+384)
  5350                           
  5351                           ;main.c: 118: knob_2_pos = adc_convert(1);
  5352  03AA  3001               	movlw	1
  5353  03AB  31AF  278E  3183   	fcall	_adc_convert
  5354  03AE  0021               	movlb	1	; select bank1
  5355  03AF  0821               	movf	(?_adc_convert+1)^(0+128),w
  5356  03B0  0023               	movlb	3	; select bank3
  5357  03B1  00AB               	movwf	(_knob_2_pos+1)^(0+384)
  5358  03B2  0021               	movlb	1	; select bank1
  5359  03B3  0820               	movf	?_adc_convert^(0+128),w
  5360  03B4  0023               	movlb	3	; select bank3
  5361  03B5  00AA               	movwf	_knob_2_pos^(0+384)
  5362                           
  5363                           ;main.c: 119: knob_3_pos = adc_convert(2);
  5364  03B6  3002               	movlw	2
  5365  03B7  31AF  278E  3183   	fcall	_adc_convert
  5366  03BA  0021               	movlb	1	; select bank1
  5367  03BB  0821               	movf	(?_adc_convert+1)^(0+128),w
  5368  03BC  0023               	movlb	3	; select bank3
  5369  03BD  00AD               	movwf	(_knob_3_pos+1)^(0+384)
  5370  03BE  0021               	movlb	1	; select bank1
  5371  03BF  0820               	movf	?_adc_convert^(0+128),w
  5372  03C0  0023               	movlb	3	; select bank3
  5373  03C1  00AC               	movwf	_knob_3_pos^(0+384)
  5374                           
  5375                           ;main.c: 120: knob_4_pos = adc_convert(3);
  5376  03C2  3003               	movlw	3
  5377  03C3  31AF  278E  3183   	fcall	_adc_convert
  5378  03C6  0021               	movlb	1	; select bank1
  5379  03C7  0821               	movf	(?_adc_convert+1)^(0+128),w
  5380  03C8  0023               	movlb	3	; select bank3
  5381  03C9  00AF               	movwf	(_knob_4_pos+1)^(0+384)
  5382  03CA  0021               	movlb	1	; select bank1
  5383  03CB  0820               	movf	?_adc_convert^(0+128),w
  5384  03CC  0023               	movlb	3	; select bank3
  5385  03CD  00AE               	movwf	_knob_4_pos^(0+384)
  5386                           
  5387                           ;main.c: 121: knob_5_pos = adc_convert(4);
  5388  03CE  3004               	movlw	4
  5389  03CF  31AF  278E  3183   	fcall	_adc_convert
  5390  03D2  0021               	movlb	1	; select bank1
  5391  03D3  0821               	movf	(?_adc_convert+1)^(0+128),w
  5392  03D4  0023               	movlb	3	; select bank3
  5393  03D5  00B1               	movwf	(_knob_5_pos+1)^(0+384)
  5394  03D6  0021               	movlb	1	; select bank1
  5395  03D7  0820               	movf	?_adc_convert^(0+128),w
  5396  03D8  0023               	movlb	3	; select bank3
  5397  03D9  00B0               	movwf	_knob_5_pos^(0+384)
  5398                           
  5399                           ;main.c: 125: if ((knob_1_pos - knob1_prev) >= 4 || (knob_1_pos - knob1_prev) <= -4) {
  5400  03DA  094A               	comf	_knob1_prev^(0+384),w	;volatile
  5401  03DB  00EB               	movwf	??_main^(0+384)
  5402  03DC  094B               	comf	(_knob1_prev+1)^(0+384),w	;volatile
  5403  03DD  00EC               	movwf	(??_main^(0+384)+1)
  5404  03DE  0AEB               	incf	??_main^(0+384),f
  5405  03DF  1903               	skipnz
  5406  03E0  0AEC               	incf	(??_main^(0+384)+1),f
  5407  03E1  0828               	movf	_knob_1_pos^(0+384),w
  5408  03E2  076B               	addwf	??_main^(0+384),w
  5409  03E3  00ED               	movwf	(??_main+2)^(0+384)
  5410  03E4  0829               	movf	(_knob_1_pos+1)^(0+384),w
  5411  03E5  3D6C               	addwfc	(??_main+1)^(0+384),w
  5412  03E6  00EE               	movwf	(??_main+3)^(0+384)
  5413  03E7  086E               	movf	(??_main+3)^(0+384),w
  5414  03E8  3A80               	xorlw	128
  5415  03E9  00EF               	movwf	(??_main+4)^(0+384)
  5416  03EA  3080               	movlw	128
  5417  03EB  026F               	subwf	(??_main+4)^(0+384),w
  5418  03EC  1D03               	skipz
  5419  03ED  2BF0               	goto	u9825
  5420  03EE  3004               	movlw	4
  5421  03EF  026D               	subwf	(??_main+2)^(0+384),w
  5422  03F0                     u9825:	
  5423  03F0  1803               	skipnc
  5424  03F1  2C0B               	goto	l8946
  5425  03F2  0023               	movlb	3	; select bank3
  5426  03F3  094A               	comf	_knob1_prev^(0+384),w	;volatile
  5427  03F4  00EB               	movwf	??_main^(0+384)
  5428  03F5  094B               	comf	(_knob1_prev+1)^(0+384),w	;volatile
  5429  03F6  00EC               	movwf	(??_main^(0+384)+1)
  5430  03F7  0AEB               	incf	??_main^(0+384),f
  5431  03F8  1903               	skipnz
  5432  03F9  0AEC               	incf	(??_main^(0+384)+1),f
  5433  03FA  0828               	movf	_knob_1_pos^(0+384),w
  5434  03FB  076B               	addwf	??_main^(0+384),w
  5435  03FC  00ED               	movwf	(??_main+2)^(0+384)
  5436  03FD  0829               	movf	(_knob_1_pos+1)^(0+384),w
  5437  03FE  3D6C               	addwfc	(??_main+1)^(0+384),w
  5438  03FF  00EE               	movwf	(??_main+3)^(0+384)
  5439  0400  086E               	movf	(??_main+3)^(0+384),w
  5440  0401  3A80               	xorlw	128
  5441  0402  00EF               	movwf	(??_main+4)^(0+384)
  5442  0403  307F               	movlw	127
  5443  0404  026F               	subwf	(??_main+4)^(0+384),w
  5444  0405  1D03               	skipz
  5445  0406  2C09               	goto	u9835
  5446  0407  30FD               	movlw	253
  5447  0408  026D               	subwf	(??_main+2)^(0+384),w
  5448  0409                     u9835:	
  5449  0409  1803               	skipnc
  5450  040A  2C69               	goto	l8956
  5451  040B                     l8946:	
  5452                           
  5453                           ;main.c: 126: knob1_prev = knob_1_pos;
  5454  040B  0023               	movlb	3	; select bank3
  5455  040C  0829               	movf	(_knob_1_pos+1)^(0+384),w
  5456  040D  00CB               	movwf	(_knob1_prev+1)^(0+384)	;volatile
  5457  040E  0828               	movf	_knob_1_pos^(0+384),w
  5458  040F  00CA               	movwf	_knob1_prev^(0+384)	;volatile
  5459                           
  5460                           ;main.c: 127: CCPR4 = scaleA10kPot(knob1_prev);
  5461  0410  084B               	movf	(_knob1_prev+1)^(0+384),w	;volatile
  5462  0411  0021               	movlb	1	; select bank1
  5463  0412  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5464  0413  0023               	movlb	3	; select bank3
  5465  0414  084A               	movf	_knob1_prev^(0+384),w	;volatile
  5466  0415  0021               	movlb	1	; select bank1
  5467  0416  00A8               	movwf	___awtoft@c^(0+128)
  5468  0417  31A0  20A9  3183   	fcall	___awtoft
  5469  041A  0021               	movlb	1	; select bank1
  5470  041B  0828               	movf	?___awtoft^(0+128),w
  5471  041C  0024               	movlb	4	; select bank4
  5472  041D  00D9               	movwf	_main$2806^(0+512)
  5473  041E  0021               	movlb	1	; select bank1
  5474  041F  0829               	movf	(?___awtoft+1)^(0+128),w
  5475  0420  0024               	movlb	4	; select bank4
  5476  0421  00DA               	movwf	(_main$2806+1)^(0+512)
  5477  0422  0021               	movlb	1	; select bank1
  5478  0423  082A               	movf	(?___awtoft+2)^(0+128),w
  5479  0424  0024               	movlb	4	; select bank4
  5480  0425  00DB               	movwf	(_main$2806+2)^(0+512)
  5481                           
  5482                           ;main.c: 127: CCPR4 = scaleA10kPot(knob1_prev);
  5483  0426  0859               	movf	_main$2806^(0+512),w
  5484  0427  0022               	movlb	2	; select bank2
  5485  0428  00E7               	movwf	scaleA10kPot@input^(0+256)
  5486  0429  0024               	movlb	4	; select bank4
  5487  042A  085A               	movf	(_main$2806+1)^(0+512),w
  5488  042B  0022               	movlb	2	; select bank2
  5489  042C  00E8               	movwf	(scaleA10kPot@input+1)^(0+256)
  5490  042D  0024               	movlb	4	; select bank4
  5491  042E  085B               	movf	(_main$2806+2)^(0+512),w
  5492  042F  0022               	movlb	2	; select bank2
  5493  0430  00E9               	movwf	(scaleA10kPot@input+2)^(0+256)
  5494  0431  319B  236E  3183   	fcall	_scaleA10kPot
  5495  0434  0022               	movlb	2	; select bank2
  5496  0435  0868               	movf	(?_scaleA10kPot+1)^(0+256),w
  5497  0436  0026               	movlb	6	; select bank6
  5498  0437  0099               	movwf	25	;volatile
  5499  0438  0022               	movlb	2	; select bank2
  5500  0439  0867               	movf	?_scaleA10kPot^(0+256),w
  5501  043A  0026               	movlb	6	; select bank6
  5502  043B  0098               	movwf	24	;volatile
  5503                           
  5504                           ;main.c: 128: CCPR5 = scaleiA10kPot(knob1_prev);
  5505  043C  0023               	movlb	3	; select bank3
  5506  043D  084B               	movf	(_knob1_prev+1)^(0+384),w	;volatile
  5507  043E  0021               	movlb	1	; select bank1
  5508  043F  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5509  0440  0023               	movlb	3	; select bank3
  5510  0441  084A               	movf	_knob1_prev^(0+384),w	;volatile
  5511  0442  0021               	movlb	1	; select bank1
  5512  0443  00A8               	movwf	___awtoft@c^(0+128)
  5513  0444  31A0  20A9  3183   	fcall	___awtoft
  5514  0447  0021               	movlb	1	; select bank1
  5515  0448  0828               	movf	?___awtoft^(0+128),w
  5516  0449  0024               	movlb	4	; select bank4
  5517  044A  00DC               	movwf	_main$2807^(0+512)
  5518  044B  0021               	movlb	1	; select bank1
  5519  044C  0829               	movf	(?___awtoft+1)^(0+128),w
  5520  044D  0024               	movlb	4	; select bank4
  5521  044E  00DD               	movwf	(_main$2807+1)^(0+512)
  5522  044F  0021               	movlb	1	; select bank1
  5523  0450  082A               	movf	(?___awtoft+2)^(0+128),w
  5524  0451  0024               	movlb	4	; select bank4
  5525  0452  00DE               	movwf	(_main$2807+2)^(0+512)
  5526                           
  5527                           ;main.c: 128: CCPR5 = scaleiA10kPot(knob1_prev);
  5528  0453  085C               	movf	_main$2807^(0+512),w
  5529  0454  0022               	movlb	2	; select bank2
  5530  0455  00E7               	movwf	scaleiA10kPot@input^(0+256)
  5531  0456  0024               	movlb	4	; select bank4
  5532  0457  085D               	movf	(_main$2807+1)^(0+512),w
  5533  0458  0022               	movlb	2	; select bank2
  5534  0459  00E8               	movwf	(scaleiA10kPot@input+1)^(0+256)
  5535  045A  0024               	movlb	4	; select bank4
  5536  045B  085E               	movf	(_main$2807+2)^(0+512),w
  5537  045C  0022               	movlb	2	; select bank2
  5538  045D  00E9               	movwf	(scaleiA10kPot@input+2)^(0+256)
  5539  045E  319D  25E6  3183   	fcall	_scaleiA10kPot
  5540  0461  0022               	movlb	2	; select bank2
  5541  0462  0868               	movf	(?_scaleiA10kPot+1)^(0+256),w
  5542  0463  0026               	movlb	6	; select bank6
  5543  0464  009D               	movwf	29	;volatile
  5544  0465  0022               	movlb	2	; select bank2
  5545  0466  0867               	movf	?_scaleiA10kPot^(0+256),w
  5546  0467  0026               	movlb	6	; select bank6
  5547  0468  009C               	movwf	28	;volatile
  5548  0469                     l8956:	
  5549                           
  5550                           ;main.c: 130: }
  5551                           ;main.c: 134: if (knob_2_pos - knob2_prev >= 4 || knob_2_pos - knob2_prev <= -4) {
  5552  0469  0023               	movlb	3	; select bank3
  5553  046A  094C               	comf	_knob2_prev^(0+384),w	;volatile
  5554  046B  00EB               	movwf	??_main^(0+384)
  5555  046C  094D               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5556  046D  00EC               	movwf	(??_main^(0+384)+1)
  5557  046E  0AEB               	incf	??_main^(0+384),f
  5558  046F  1903               	skipnz
  5559  0470  0AEC               	incf	(??_main^(0+384)+1),f
  5560  0471  082A               	movf	_knob_2_pos^(0+384),w
  5561  0472  076B               	addwf	??_main^(0+384),w
  5562  0473  00ED               	movwf	(??_main+2)^(0+384)
  5563  0474  082B               	movf	(_knob_2_pos+1)^(0+384),w
  5564  0475  3D6C               	addwfc	(??_main+1)^(0+384),w
  5565  0476  00EE               	movwf	(??_main+3)^(0+384)
  5566  0477  086E               	movf	(??_main+3)^(0+384),w
  5567  0478  3A80               	xorlw	128
  5568  0479  00EF               	movwf	(??_main+4)^(0+384)
  5569  047A  3080               	movlw	128
  5570  047B  026F               	subwf	(??_main+4)^(0+384),w
  5571  047C  1D03               	skipz
  5572  047D  2C80               	goto	u9845
  5573  047E  3004               	movlw	4
  5574  047F  026D               	subwf	(??_main+2)^(0+384),w
  5575  0480                     u9845:	
  5576  0480  1803               	skipnc
  5577  0481  2C9B               	goto	l8960
  5578  0482  0023               	movlb	3	; select bank3
  5579  0483  094C               	comf	_knob2_prev^(0+384),w	;volatile
  5580  0484  00EB               	movwf	??_main^(0+384)
  5581  0485  094D               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5582  0486  00EC               	movwf	(??_main^(0+384)+1)
  5583  0487  0AEB               	incf	??_main^(0+384),f
  5584  0488  1903               	skipnz
  5585  0489  0AEC               	incf	(??_main^(0+384)+1),f
  5586  048A  082A               	movf	_knob_2_pos^(0+384),w
  5587  048B  076B               	addwf	??_main^(0+384),w
  5588  048C  00ED               	movwf	(??_main+2)^(0+384)
  5589  048D  082B               	movf	(_knob_2_pos+1)^(0+384),w
  5590  048E  3D6C               	addwfc	(??_main+1)^(0+384),w
  5591  048F  00EE               	movwf	(??_main+3)^(0+384)
  5592  0490  086E               	movf	(??_main+3)^(0+384),w
  5593  0491  3A80               	xorlw	128
  5594  0492  00EF               	movwf	(??_main+4)^(0+384)
  5595  0493  307F               	movlw	127
  5596  0494  026F               	subwf	(??_main+4)^(0+384),w
  5597  0495  1D03               	skipz
  5598  0496  2C99               	goto	u9855
  5599  0497  30FD               	movlw	253
  5600  0498  026D               	subwf	(??_main+2)^(0+384),w
  5601  0499                     u9855:	
  5602  0499  1803               	skipnc
  5603  049A  2D0B               	goto	l8970
  5604  049B                     l8960:	
  5605                           
  5606                           ;main.c: 135: knob2_prev = knob_2_pos;
  5607  049B  0023               	movlb	3	; select bank3
  5608  049C  082B               	movf	(_knob_2_pos+1)^(0+384),w
  5609  049D  00CD               	movwf	(_knob2_prev+1)^(0+384)	;volatile
  5610  049E  082A               	movf	_knob_2_pos^(0+384),w
  5611  049F  00CC               	movwf	_knob2_prev^(0+384)	;volatile
  5612                           
  5613                           ;main.c: 136: CCPR1 = scaleA100kPot(1023-knob2_prev);
  5614  04A0  094C               	comf	_knob2_prev^(0+384),w	;volatile
  5615  04A1  00EB               	movwf	??_main^(0+384)
  5616  04A2  094D               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5617  04A3  00EC               	movwf	(??_main^(0+384)+1)
  5618  04A4  0AEB               	incf	??_main^(0+384),f
  5619  04A5  1903               	skipnz
  5620  04A6  0AEC               	incf	(??_main^(0+384)+1),f
  5621  04A7  086B               	movf	??_main^(0+384),w
  5622  04A8  3EFF               	addlw	255
  5623  04A9  0021               	movlb	1	; select bank1
  5624  04AA  00A8               	movwf	___awtoft@c^(0+128)
  5625  04AB  3003               	movlw	3
  5626  04AC  0023               	movlb	3	; select bank3
  5627  04AD  3D6C               	addwfc	(??_main+1)^(0+384),w
  5628  04AE  0021               	movlb	1	; select bank1
  5629  04AF  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5630  04B0  31A0  20A9  3183   	fcall	___awtoft
  5631  04B3  0021               	movlb	1	; select bank1
  5632  04B4  0828               	movf	?___awtoft^(0+128),w
  5633  04B5  0024               	movlb	4	; select bank4
  5634  04B6  00DF               	movwf	_main$2808^(0+512)
  5635  04B7  0021               	movlb	1	; select bank1
  5636  04B8  0829               	movf	(?___awtoft+1)^(0+128),w
  5637  04B9  0024               	movlb	4	; select bank4
  5638  04BA  00E0               	movwf	(_main$2808+1)^(0+512)
  5639  04BB  0021               	movlb	1	; select bank1
  5640  04BC  082A               	movf	(?___awtoft+2)^(0+128),w
  5641  04BD  0024               	movlb	4	; select bank4
  5642  04BE  00E1               	movwf	(_main$2808+2)^(0+512)
  5643                           
  5644                           ;main.c: 136: CCPR1 = scaleA100kPot(1023-knob2_prev);
  5645  04BF  085F               	movf	_main$2808^(0+512),w
  5646  04C0  0022               	movlb	2	; select bank2
  5647  04C1  00E7               	movwf	scaleA100kPot@input^(0+256)
  5648  04C2  0024               	movlb	4	; select bank4
  5649  04C3  0860               	movf	(_main$2808+1)^(0+512),w
  5650  04C4  0022               	movlb	2	; select bank2
  5651  04C5  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
  5652  04C6  0024               	movlb	4	; select bank4
  5653  04C7  0861               	movf	(_main$2808+2)^(0+512),w
  5654  04C8  0022               	movlb	2	; select bank2
  5655  04C9  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
  5656  04CA  3199  2150  3183   	fcall	_scaleA100kPot
  5657  04CD  0022               	movlb	2	; select bank2
  5658  04CE  0868               	movf	(?_scaleA100kPot+1)^(0+256),w
  5659  04CF  0025               	movlb	5	; select bank5
  5660  04D0  0092               	movwf	18	;volatile
  5661  04D1  0022               	movlb	2	; select bank2
  5662  04D2  0867               	movf	?_scaleA100kPot^(0+256),w
  5663  04D3  0025               	movlb	5	; select bank5
  5664  04D4  0091               	movwf	17	;volatile
  5665                           
  5666                           ;main.c: 137: CCPR2 = scaleA100kPot(1023-knob2_prev);
  5667  04D5  0023               	movlb	3	; select bank3
  5668  04D6  094C               	comf	_knob2_prev^(0+384),w	;volatile
  5669  04D7  00EB               	movwf	??_main^(0+384)
  5670  04D8  094D               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5671  04D9  00EC               	movwf	(??_main^(0+384)+1)
  5672  04DA  0AEB               	incf	??_main^(0+384),f
  5673  04DB  1903               	skipnz
  5674  04DC  0AEC               	incf	(??_main^(0+384)+1),f
  5675  04DD  086B               	movf	??_main^(0+384),w
  5676  04DE  3EFF               	addlw	255
  5677  04DF  0021               	movlb	1	; select bank1
  5678  04E0  00A8               	movwf	___awtoft@c^(0+128)
  5679  04E1  3003               	movlw	3
  5680  04E2  0023               	movlb	3	; select bank3
  5681  04E3  3D6C               	addwfc	(??_main+1)^(0+384),w
  5682  04E4  0021               	movlb	1	; select bank1
  5683  04E5  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5684  04E6  31A0  20A9  3183   	fcall	___awtoft
  5685  04E9  0021               	movlb	1	; select bank1
  5686  04EA  0828               	movf	?___awtoft^(0+128),w
  5687  04EB  0024               	movlb	4	; select bank4
  5688  04EC  00DF               	movwf	_main$2808^(0+512)
  5689  04ED  0021               	movlb	1	; select bank1
  5690  04EE  0829               	movf	(?___awtoft+1)^(0+128),w
  5691  04EF  0024               	movlb	4	; select bank4
  5692  04F0  00E0               	movwf	(_main$2808+1)^(0+512)
  5693  04F1  0021               	movlb	1	; select bank1
  5694  04F2  082A               	movf	(?___awtoft+2)^(0+128),w
  5695  04F3  0024               	movlb	4	; select bank4
  5696  04F4  00E1               	movwf	(_main$2808+2)^(0+512)
  5697                           
  5698                           ;main.c: 137: CCPR2 = scaleA100kPot(1023-knob2_prev);
  5699  04F5  085F               	movf	_main$2808^(0+512),w
  5700  04F6  0022               	movlb	2	; select bank2
  5701  04F7  00E7               	movwf	scaleA100kPot@input^(0+256)
  5702  04F8  0024               	movlb	4	; select bank4
  5703  04F9  0860               	movf	(_main$2808+1)^(0+512),w
  5704  04FA  0022               	movlb	2	; select bank2
  5705  04FB  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
  5706  04FC  0024               	movlb	4	; select bank4
  5707  04FD  0861               	movf	(_main$2808+2)^(0+512),w
  5708  04FE  0022               	movlb	2	; select bank2
  5709  04FF  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
  5710  0500  3199  2150  3183   	fcall	_scaleA100kPot
  5711  0503  0022               	movlb	2	; select bank2
  5712  0504  0868               	movf	(?_scaleA100kPot+1)^(0+256),w
  5713  0505  0025               	movlb	5	; select bank5
  5714  0506  0099               	movwf	25	;volatile
  5715  0507  0022               	movlb	2	; select bank2
  5716  0508  0867               	movf	?_scaleA100kPot^(0+256),w
  5717  0509  0025               	movlb	5	; select bank5
  5718  050A  0098               	movwf	24	;volatile
  5719  050B                     l8970:	
  5720                           
  5721                           ;main.c: 138: }
  5722                           ;main.c: 148: if (knob_3_pos - knob3_prev >= 4 || knob_3_pos - knob3_prev <= -4) {
  5723  050B  0023               	movlb	3	; select bank3
  5724  050C  094E               	comf	_knob3_prev^(0+384),w	;volatile
  5725  050D  00EB               	movwf	??_main^(0+384)
  5726  050E  094F               	comf	(_knob3_prev+1)^(0+384),w	;volatile
  5727  050F  00EC               	movwf	(??_main^(0+384)+1)
  5728  0510  0AEB               	incf	??_main^(0+384),f
  5729  0511  1903               	skipnz
  5730  0512  0AEC               	incf	(??_main^(0+384)+1),f
  5731  0513  082C               	movf	_knob_3_pos^(0+384),w
  5732  0514  076B               	addwf	??_main^(0+384),w
  5733  0515  00ED               	movwf	(??_main+2)^(0+384)
  5734  0516  082D               	movf	(_knob_3_pos+1)^(0+384),w
  5735  0517  3D6C               	addwfc	(??_main+1)^(0+384),w
  5736  0518  00EE               	movwf	(??_main+3)^(0+384)
  5737  0519  086E               	movf	(??_main+3)^(0+384),w
  5738  051A  3A80               	xorlw	128
  5739  051B  00EF               	movwf	(??_main+4)^(0+384)
  5740  051C  3080               	movlw	128
  5741  051D  026F               	subwf	(??_main+4)^(0+384),w
  5742  051E  1D03               	skipz
  5743  051F  2D22               	goto	u9865
  5744  0520  3004               	movlw	4
  5745  0521  026D               	subwf	(??_main+2)^(0+384),w
  5746  0522                     u9865:	
  5747  0522  1803               	skipnc
  5748  0523  2D3D               	goto	l8974
  5749  0524  0023               	movlb	3	; select bank3
  5750  0525  094E               	comf	_knob3_prev^(0+384),w	;volatile
  5751  0526  00EB               	movwf	??_main^(0+384)
  5752  0527  094F               	comf	(_knob3_prev+1)^(0+384),w	;volatile
  5753  0528  00EC               	movwf	(??_main^(0+384)+1)
  5754  0529  0AEB               	incf	??_main^(0+384),f
  5755  052A  1903               	skipnz
  5756  052B  0AEC               	incf	(??_main^(0+384)+1),f
  5757  052C  082C               	movf	_knob_3_pos^(0+384),w
  5758  052D  076B               	addwf	??_main^(0+384),w
  5759  052E  00ED               	movwf	(??_main+2)^(0+384)
  5760  052F  082D               	movf	(_knob_3_pos+1)^(0+384),w
  5761  0530  3D6C               	addwfc	(??_main+1)^(0+384),w
  5762  0531  00EE               	movwf	(??_main+3)^(0+384)
  5763  0532  086E               	movf	(??_main+3)^(0+384),w
  5764  0533  3A80               	xorlw	128
  5765  0534  00EF               	movwf	(??_main+4)^(0+384)
  5766  0535  307F               	movlw	127
  5767  0536  026F               	subwf	(??_main+4)^(0+384),w
  5768  0537  1D03               	skipz
  5769  0538  2D3B               	goto	u9875
  5770  0539  30FD               	movlw	253
  5771  053A  026D               	subwf	(??_main+2)^(0+384),w
  5772  053B                     u9875:	
  5773  053B  1803               	skipnc
  5774  053C  2DA5               	goto	l8986
  5775  053D                     l8974:	
  5776                           
  5777                           ;main.c: 149: knob3_prev = knob_3_pos;
  5778  053D  0023               	movlb	3	; select bank3
  5779  053E  082D               	movf	(_knob_3_pos+1)^(0+384),w
  5780  053F  00CF               	movwf	(_knob3_prev+1)^(0+384)	;volatile
  5781  0540  082C               	movf	_knob_3_pos^(0+384),w
  5782  0541  00CE               	movwf	_knob3_prev^(0+384)	;volatile
  5783                           
  5784                           ;main.c: 150: symmetry = (int) map(knob3_prev, 0, 1023, 45, 315);
  5785  0542  3080               	movlw	128
  5786  0543  0021               	movlb	1	; select bank1
  5787  0544  00EA               	movwf	map@out_max^(0+128)
  5788  0545  309D               	movlw	157
  5789  0546  00EB               	movwf	(map@out_max+1)^(0+128)
  5790  0547  3043               	movlw	67
  5791  0548  00EC               	movwf	(map@out_max+2)^(0+128)
  5792  0549  3000               	movlw	0
  5793  054A  00E7               	movwf	map@out_min^(0+128)
  5794  054B  3034               	movlw	52
  5795  054C  00E8               	movwf	(map@out_min+1)^(0+128)
  5796  054D  3042               	movlw	66
  5797  054E  00E9               	movwf	(map@out_min+2)^(0+128)
  5798  054F  30C0               	movlw	192
  5799  0550  00E4               	movwf	map@in_max^(0+128)
  5800  0551  307F               	movlw	127
  5801  0552  00E5               	movwf	(map@in_max+1)^(0+128)
  5802  0553  3044               	movlw	68
  5803  0554  00E6               	movwf	(map@in_max+2)^(0+128)
  5804  0555  3000               	movlw	0
  5805  0556  00E1               	movwf	map@in_min^(0+128)
  5806  0557  3000               	movlw	0
  5807  0558  00E2               	movwf	(map@in_min+1)^(0+128)
  5808  0559  3000               	movlw	0
  5809  055A  00E3               	movwf	(map@in_min+2)^(0+128)
  5810  055B  0023               	movlb	3	; select bank3
  5811  055C  084F               	movf	(_knob3_prev+1)^(0+384),w	;volatile
  5812  055D  0021               	movlb	1	; select bank1
  5813  055E  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5814  055F  0023               	movlb	3	; select bank3
  5815  0560  084E               	movf	_knob3_prev^(0+384),w	;volatile
  5816  0561  0021               	movlb	1	; select bank1
  5817  0562  00A8               	movwf	___awtoft@c^(0+128)
  5818  0563  31A0  20A9  3183   	fcall	___awtoft
  5819  0566  0021               	movlb	1	; select bank1
  5820  0567  0828               	movf	?___awtoft^(0+128),w
  5821  0568  00DE               	movwf	map@x^(0+128)
  5822  0569  0829               	movf	(?___awtoft+1)^(0+128),w
  5823  056A  00DF               	movwf	(map@x+1)^(0+128)
  5824  056B  082A               	movf	(?___awtoft+2)^(0+128),w
  5825  056C  00E0               	movwf	(map@x+2)^(0+128)
  5826  056D  319A  22E3  3183   	fcall	_map
  5827  0570  0021               	movlb	1	; select bank1
  5828  0571  085E               	movf	?_map^(0+128),w
  5829  0572  0022               	movlb	2	; select bank2
  5830  0573  00A0               	movwf	___fttol@f1^(0+256)
  5831  0574  0021               	movlb	1	; select bank1
  5832  0575  085F               	movf	(?_map+1)^(0+128),w
  5833  0576  0022               	movlb	2	; select bank2
  5834  0577  00A1               	movwf	(___fttol@f1+1)^(0+256)
  5835  0578  0021               	movlb	1	; select bank1
  5836  0579  0860               	movf	(?_map+2)^(0+128),w
  5837  057A  0022               	movlb	2	; select bank2
  5838  057B  00A2               	movwf	(___fttol@f1+2)^(0+256)
  5839  057C  3199  21D5  3183   	fcall	___fttol
  5840  057F  0022               	movlb	2	; select bank2
  5841  0580  0821               	movf	(?___fttol^(0+256)+1),w
  5842  0581  0023               	movlb	3	; select bank3
  5843  0582  00D7               	movwf	(_symmetry+1)^(0+384)
  5844  0583  0022               	movlb	2	; select bank2
  5845  0584  0820               	movf	?___fttol^(0+256),w
  5846  0585  0023               	movlb	3	; select bank3
  5847  0586  00D6               	movwf	_symmetry^(0+384)
  5848                           
  5849                           ;main.c: 152: modulation_changed = 1;
  5850  0587  01C2               	clrf	_modulation_changed^(0+384)
  5851  0588  0AC2               	incf	_modulation_changed^(0+384),f
  5852                           
  5853                           ;main.c: 153: if (symmetry > 174 && symmetry < 185) {
  5854  0589  0857               	movf	(_symmetry+1)^(0+384),w
  5855  058A  3A80               	xorlw	128
  5856  058B  00EB               	movwf	??_main^(0+384)
  5857  058C  3080               	movlw	128
  5858  058D  026B               	subwf	??_main^(0+384),w
  5859  058E  1D03               	skipz
  5860  058F  2D92               	goto	u9885
  5861  0590  30AF               	movlw	175
  5862  0591  0256               	subwf	_symmetry^(0+384),w
  5863  0592                     u9885:	
  5864  0592  1C03               	skipc
  5865  0593  2DA3               	goto	l362
  5866  0594  0023               	movlb	3	; select bank3
  5867  0595  0857               	movf	(_symmetry+1)^(0+384),w
  5868  0596  3A80               	xorlw	128
  5869  0597  00EB               	movwf	??_main^(0+384)
  5870  0598  3080               	movlw	128
  5871  0599  026B               	subwf	??_main^(0+384),w
  5872  059A  1D03               	skipz
  5873  059B  2D9E               	goto	u9895
  5874  059C  30B9               	movlw	185
  5875  059D  0256               	subwf	_symmetry^(0+384),w
  5876  059E                     u9895:	
  5877  059E  1803               	skipnc
  5878  059F  2DA3               	goto	l362
  5879                           
  5880                           ;main.c: 154: LATBbits.LATB1 = 1;
  5881  05A0  0022               	movlb	2	; select bank2
  5882  05A1  148D               	bsf	13,1	;volatile
  5883                           
  5884                           ;main.c: 155: } else {
  5885  05A2  2DA5               	goto	l8986
  5886  05A3                     l362:	
  5887                           
  5888                           ;main.c: 156: LATBbits.LATB1 = 0;
  5889  05A3  0022               	movlb	2	; select bank2
  5890  05A4  108D               	bcf	13,1	;volatile
  5891  05A5                     l8986:	
  5892                           
  5893                           ;main.c: 157: }
  5894                           ;main.c: 158: }
  5895                           ;main.c: 169: if (knob_4_pos - knob4_prev >= 4 || knob_4_pos - knob4_prev <= -4) {
  5896  05A5  0023               	movlb	3	; select bank3
  5897  05A6  0950               	comf	_knob4_prev^(0+384),w	;volatile
  5898  05A7  00EB               	movwf	??_main^(0+384)
  5899  05A8  0951               	comf	(_knob4_prev+1)^(0+384),w	;volatile
  5900  05A9  00EC               	movwf	(??_main^(0+384)+1)
  5901  05AA  0AEB               	incf	??_main^(0+384),f
  5902  05AB  1903               	skipnz
  5903  05AC  0AEC               	incf	(??_main^(0+384)+1),f
  5904  05AD  082E               	movf	_knob_4_pos^(0+384),w
  5905  05AE  076B               	addwf	??_main^(0+384),w
  5906  05AF  00ED               	movwf	(??_main+2)^(0+384)
  5907  05B0  082F               	movf	(_knob_4_pos+1)^(0+384),w
  5908  05B1  3D6C               	addwfc	(??_main+1)^(0+384),w
  5909  05B2  00EE               	movwf	(??_main+3)^(0+384)
  5910  05B3  086E               	movf	(??_main+3)^(0+384),w
  5911  05B4  3A80               	xorlw	128
  5912  05B5  00EF               	movwf	(??_main+4)^(0+384)
  5913  05B6  3080               	movlw	128
  5914  05B7  026F               	subwf	(??_main+4)^(0+384),w
  5915  05B8  1D03               	skipz
  5916  05B9  2DBC               	goto	u9905
  5917  05BA  3004               	movlw	4
  5918  05BB  026D               	subwf	(??_main+2)^(0+384),w
  5919  05BC                     u9905:	
  5920  05BC  1803               	skipnc
  5921  05BD  2DD7               	goto	l8990
  5922  05BE  0023               	movlb	3	; select bank3
  5923  05BF  0950               	comf	_knob4_prev^(0+384),w	;volatile
  5924  05C0  00EB               	movwf	??_main^(0+384)
  5925  05C1  0951               	comf	(_knob4_prev+1)^(0+384),w	;volatile
  5926  05C2  00EC               	movwf	(??_main^(0+384)+1)
  5927  05C3  0AEB               	incf	??_main^(0+384),f
  5928  05C4  1903               	skipnz
  5929  05C5  0AEC               	incf	(??_main^(0+384)+1),f
  5930  05C6  082E               	movf	_knob_4_pos^(0+384),w
  5931  05C7  076B               	addwf	??_main^(0+384),w
  5932  05C8  00ED               	movwf	(??_main+2)^(0+384)
  5933  05C9  082F               	movf	(_knob_4_pos+1)^(0+384),w
  5934  05CA  3D6C               	addwfc	(??_main+1)^(0+384),w
  5935  05CB  00EE               	movwf	(??_main+3)^(0+384)
  5936  05CC  086E               	movf	(??_main+3)^(0+384),w
  5937  05CD  3A80               	xorlw	128
  5938  05CE  00EF               	movwf	(??_main+4)^(0+384)
  5939  05CF  307F               	movlw	127
  5940  05D0  026F               	subwf	(??_main+4)^(0+384),w
  5941  05D1  1D03               	skipz
  5942  05D2  2DD5               	goto	u9915
  5943  05D3  30FD               	movlw	253
  5944  05D4  026D               	subwf	(??_main+2)^(0+384),w
  5945  05D5                     u9915:	
  5946  05D5  1803               	skipnc
  5947  05D6  2E21               	goto	l8994
  5948  05D7                     l8990:	
  5949                           
  5950                           ;main.c: 170: knob4_prev = knob_4_pos;
  5951  05D7  0023               	movlb	3	; select bank3
  5952  05D8  082F               	movf	(_knob_4_pos+1)^(0+384),w
  5953  05D9  00D1               	movwf	(_knob4_prev+1)^(0+384)	;volatile
  5954  05DA  082E               	movf	_knob_4_pos^(0+384),w
  5955  05DB  00D0               	movwf	_knob4_prev^(0+384)	;volatile
  5956                           
  5957                           ;main.c: 172: mod_delay_time = (int)map(knob4_prev, 0, 1023, 3, 47);
  5958  05DC  3000               	movlw	0
  5959  05DD  0021               	movlb	1	; select bank1
  5960  05DE  00EA               	movwf	map@out_max^(0+128)
  5961  05DF  303C               	movlw	60
  5962  05E0  00EB               	movwf	(map@out_max+1)^(0+128)
  5963  05E1  3042               	movlw	66
  5964  05E2  00EC               	movwf	(map@out_max+2)^(0+128)
  5965  05E3  3000               	movlw	0
  5966  05E4  00E7               	movwf	map@out_min^(0+128)
  5967  05E5  3040               	movlw	64
  5968  05E6  00E8               	movwf	(map@out_min+1)^(0+128)
  5969  05E7  3040               	movlw	64
  5970  05E8  00E9               	movwf	(map@out_min+2)^(0+128)
  5971  05E9  30C0               	movlw	192
  5972  05EA  00E4               	movwf	map@in_max^(0+128)
  5973  05EB  307F               	movlw	127
  5974  05EC  00E5               	movwf	(map@in_max+1)^(0+128)
  5975  05ED  3044               	movlw	68
  5976  05EE  00E6               	movwf	(map@in_max+2)^(0+128)
  5977  05EF  3000               	movlw	0
  5978  05F0  00E1               	movwf	map@in_min^(0+128)
  5979  05F1  3000               	movlw	0
  5980  05F2  00E2               	movwf	(map@in_min+1)^(0+128)
  5981  05F3  3000               	movlw	0
  5982  05F4  00E3               	movwf	(map@in_min+2)^(0+128)
  5983  05F5  0023               	movlb	3	; select bank3
  5984  05F6  0851               	movf	(_knob4_prev+1)^(0+384),w	;volatile
  5985  05F7  0021               	movlb	1	; select bank1
  5986  05F8  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5987  05F9  0023               	movlb	3	; select bank3
  5988  05FA  0850               	movf	_knob4_prev^(0+384),w	;volatile
  5989  05FB  0021               	movlb	1	; select bank1
  5990  05FC  00A8               	movwf	___awtoft@c^(0+128)
  5991  05FD  31A0  20A9  3183   	fcall	___awtoft
  5992  0600  0021               	movlb	1	; select bank1
  5993  0601  0828               	movf	?___awtoft^(0+128),w
  5994  0602  00DE               	movwf	map@x^(0+128)
  5995  0603  0829               	movf	(?___awtoft+1)^(0+128),w
  5996  0604  00DF               	movwf	(map@x+1)^(0+128)
  5997  0605  082A               	movf	(?___awtoft+2)^(0+128),w
  5998  0606  00E0               	movwf	(map@x+2)^(0+128)
  5999  0607  319A  22E3  3183   	fcall	_map
  6000  060A  0021               	movlb	1	; select bank1
  6001  060B  085E               	movf	?_map^(0+128),w
  6002  060C  0022               	movlb	2	; select bank2
  6003  060D  00A0               	movwf	___fttol@f1^(0+256)
  6004  060E  0021               	movlb	1	; select bank1
  6005  060F  085F               	movf	(?_map+1)^(0+128),w
  6006  0610  0022               	movlb	2	; select bank2
  6007  0611  00A1               	movwf	(___fttol@f1+1)^(0+256)
  6008  0612  0021               	movlb	1	; select bank1
  6009  0613  0860               	movf	(?_map+2)^(0+128),w
  6010  0614  0022               	movlb	2	; select bank2
  6011  0615  00A2               	movwf	(___fttol@f1+2)^(0+256)
  6012  0616  3199  21D5  3183   	fcall	___fttol
  6013  0619  0022               	movlb	2	; select bank2
  6014  061A  0821               	movf	(?___fttol^(0+256)+1),w
  6015  061B  0023               	movlb	3	; select bank3
  6016  061C  00D5               	movwf	(_mod_delay_time+1)^(0+384)
  6017  061D  0022               	movlb	2	; select bank2
  6018  061E  0820               	movf	?___fttol^(0+256),w
  6019  061F  0023               	movlb	3	; select bank3
  6020  0620  00D4               	movwf	_mod_delay_time^(0+384)
  6021  0621                     l8994:	
  6022                           
  6023                           ;main.c: 173: }
  6024                           ;main.c: 178: if (knob_5_pos - knob5_prev >= 4 || knob_5_pos - knob5_prev <= -4) {
  6025  0621  0023               	movlb	3	; select bank3
  6026  0622  0952               	comf	_knob5_prev^(0+384),w	;volatile
  6027  0623  00EB               	movwf	??_main^(0+384)
  6028  0624  0953               	comf	(_knob5_prev+1)^(0+384),w	;volatile
  6029  0625  00EC               	movwf	(??_main^(0+384)+1)
  6030  0626  0AEB               	incf	??_main^(0+384),f
  6031  0627  1903               	skipnz
  6032  0628  0AEC               	incf	(??_main^(0+384)+1),f
  6033  0629  0830               	movf	_knob_5_pos^(0+384),w
  6034  062A  076B               	addwf	??_main^(0+384),w
  6035  062B  00ED               	movwf	(??_main+2)^(0+384)
  6036  062C  0831               	movf	(_knob_5_pos+1)^(0+384),w
  6037  062D  3D6C               	addwfc	(??_main+1)^(0+384),w
  6038  062E  00EE               	movwf	(??_main+3)^(0+384)
  6039  062F  086E               	movf	(??_main+3)^(0+384),w
  6040  0630  3A80               	xorlw	128
  6041  0631  00EF               	movwf	(??_main+4)^(0+384)
  6042  0632  3080               	movlw	128
  6043  0633  026F               	subwf	(??_main+4)^(0+384),w
  6044  0634  1D03               	skipz
  6045  0635  2E38               	goto	u9925
  6046  0636  3004               	movlw	4
  6047  0637  026D               	subwf	(??_main+2)^(0+384),w
  6048  0638                     u9925:	
  6049  0638  1803               	skipnc
  6050  0639  2E53               	goto	l8998
  6051  063A  0023               	movlb	3	; select bank3
  6052  063B  0952               	comf	_knob5_prev^(0+384),w	;volatile
  6053  063C  00EB               	movwf	??_main^(0+384)
  6054  063D  0953               	comf	(_knob5_prev+1)^(0+384),w	;volatile
  6055  063E  00EC               	movwf	(??_main^(0+384)+1)
  6056  063F  0AEB               	incf	??_main^(0+384),f
  6057  0640  1903               	skipnz
  6058  0641  0AEC               	incf	(??_main^(0+384)+1),f
  6059  0642  0830               	movf	_knob_5_pos^(0+384),w
  6060  0643  076B               	addwf	??_main^(0+384),w
  6061  0644  00ED               	movwf	(??_main+2)^(0+384)
  6062  0645  0831               	movf	(_knob_5_pos+1)^(0+384),w
  6063  0646  3D6C               	addwfc	(??_main+1)^(0+384),w
  6064  0647  00EE               	movwf	(??_main+3)^(0+384)
  6065  0648  086E               	movf	(??_main+3)^(0+384),w
  6066  0649  3A80               	xorlw	128
  6067  064A  00EF               	movwf	(??_main+4)^(0+384)
  6068  064B  307F               	movlw	127
  6069  064C  026F               	subwf	(??_main+4)^(0+384),w
  6070  064D  1D03               	skipz
  6071  064E  2E51               	goto	u9935
  6072  064F  30FD               	movlw	253
  6073  0650  026D               	subwf	(??_main+2)^(0+384),w
  6074  0651                     u9935:	
  6075  0651  1803               	skipnc
  6076  0652  2E9D               	goto	l9002
  6077  0653                     l8998:	
  6078                           
  6079                           ;main.c: 179: knob5_prev = knob_5_pos;
  6080  0653  0023               	movlb	3	; select bank3
  6081  0654  0831               	movf	(_knob_5_pos+1)^(0+384),w
  6082  0655  00D3               	movwf	(_knob5_prev+1)^(0+384)	;volatile
  6083  0656  0830               	movf	_knob_5_pos^(0+384),w
  6084  0657  00D2               	movwf	_knob5_prev^(0+384)	;volatile
  6085                           
  6086                           ;main.c: 180: adjusted_pot_value = (int)map(knob5_prev, 0, 1023, 1275, 0);
  6087  0658  3000               	movlw	0
  6088  0659  0021               	movlb	1	; select bank1
  6089  065A  00EA               	movwf	map@out_max^(0+128)
  6090  065B  3000               	movlw	0
  6091  065C  00EB               	movwf	(map@out_max+1)^(0+128)
  6092  065D  3000               	movlw	0
  6093  065E  00EC               	movwf	(map@out_max+2)^(0+128)
  6094  065F  3060               	movlw	96
  6095  0660  00E7               	movwf	map@out_min^(0+128)
  6096  0661  309F               	movlw	159
  6097  0662  00E8               	movwf	(map@out_min+1)^(0+128)
  6098  0663  3044               	movlw	68
  6099  0664  00E9               	movwf	(map@out_min+2)^(0+128)
  6100  0665  30C0               	movlw	192
  6101  0666  00E4               	movwf	map@in_max^(0+128)
  6102  0667  307F               	movlw	127
  6103  0668  00E5               	movwf	(map@in_max+1)^(0+128)
  6104  0669  3044               	movlw	68
  6105  066A  00E6               	movwf	(map@in_max+2)^(0+128)
  6106  066B  3000               	movlw	0
  6107  066C  00E1               	movwf	map@in_min^(0+128)
  6108  066D  3000               	movlw	0
  6109  066E  00E2               	movwf	(map@in_min+1)^(0+128)
  6110  066F  3000               	movlw	0
  6111  0670  00E3               	movwf	(map@in_min+2)^(0+128)
  6112  0671  0023               	movlb	3	; select bank3
  6113  0672  0853               	movf	(_knob5_prev+1)^(0+384),w	;volatile
  6114  0673  0021               	movlb	1	; select bank1
  6115  0674  00A9               	movwf	(___awtoft@c+1)^(0+128)
  6116  0675  0023               	movlb	3	; select bank3
  6117  0676  0852               	movf	_knob5_prev^(0+384),w	;volatile
  6118  0677  0021               	movlb	1	; select bank1
  6119  0678  00A8               	movwf	___awtoft@c^(0+128)
  6120  0679  31A0  20A9  3183   	fcall	___awtoft
  6121  067C  0021               	movlb	1	; select bank1
  6122  067D  0828               	movf	?___awtoft^(0+128),w
  6123  067E  00DE               	movwf	map@x^(0+128)
  6124  067F  0829               	movf	(?___awtoft+1)^(0+128),w
  6125  0680  00DF               	movwf	(map@x+1)^(0+128)
  6126  0681  082A               	movf	(?___awtoft+2)^(0+128),w
  6127  0682  00E0               	movwf	(map@x+2)^(0+128)
  6128  0683  319A  22E3  3183   	fcall	_map
  6129  0686  0021               	movlb	1	; select bank1
  6130  0687  085E               	movf	?_map^(0+128),w
  6131  0688  0022               	movlb	2	; select bank2
  6132  0689  00A0               	movwf	___fttol@f1^(0+256)
  6133  068A  0021               	movlb	1	; select bank1
  6134  068B  085F               	movf	(?_map+1)^(0+128),w
  6135  068C  0022               	movlb	2	; select bank2
  6136  068D  00A1               	movwf	(___fttol@f1+1)^(0+256)
  6137  068E  0021               	movlb	1	; select bank1
  6138  068F  0860               	movf	(?_map+2)^(0+128),w
  6139  0690  0022               	movlb	2	; select bank2
  6140  0691  00A2               	movwf	(___fttol@f1+2)^(0+256)
  6141  0692  3199  21D5  3183   	fcall	___fttol
  6142  0695  0022               	movlb	2	; select bank2
  6143  0696  0821               	movf	(?___fttol^(0+256)+1),w
  6144  0697  0024               	movlb	4	; select bank4
  6145  0698  00C6               	movwf	(_adjusted_pot_value+1)^(0+512)
  6146  0699  0022               	movlb	2	; select bank2
  6147  069A  0820               	movf	?___fttol^(0+256),w
  6148  069B  0024               	movlb	4	; select bank4
  6149  069C  00C5               	movwf	_adjusted_pot_value^(0+512)
  6150  069D                     l9002:	
  6151                           
  6152                           ;main.c: 181: }
  6153                           ;main.c: 183: if (modulation_changed == 1) {
  6154  069D  0023               	movlb	3	; select bank3
  6155  069E  0342               	decf	_modulation_changed^(0+384),w
  6156  069F  1D03               	btfss	3,2
  6157  06A0  2EA4               	goto	l9006
  6158                           
  6159                           ;main.c: 184: updateModulationArray();
  6160  06A1  318A  2236  3183   	fcall	_updateModulationArray
  6161  06A4                     l9006:	
  6162                           
  6163                           ;main.c: 185: }
  6164                           ;main.c: 188: if (delay_time_changed == 1) {
  6165  06A4  0023               	movlb	3	; select bank3
  6166  06A5  035C               	decf	_delay_time_changed^(0+384),w
  6167  06A6  1D03               	btfss	3,2
  6168  06A7  2B7F               	goto	l8916
  6169                           
  6170                           ;main.c: 189: delay_time = baseline_delay_time;
  6171  06A8  0020               	movlb	0	; select bank0
  6172  06A9  0848               	movf	_baseline_delay_time+3,w	;volatile
  6173  06AA  00CC               	movwf	_delay_time+3	;volatile
  6174  06AB  0847               	movf	_baseline_delay_time+2,w	;volatile
  6175  06AC  00CB               	movwf	_delay_time+2	;volatile
  6176  06AD  0846               	movf	_baseline_delay_time+1,w	;volatile
  6177  06AE  00CA               	movwf	_delay_time+1	;volatile
  6178  06AF  0845               	movf	_baseline_delay_time,w	;volatile
  6179  06B0  00C9               	movwf	_delay_time	;volatile
  6180                           
  6181                           ;main.c: 190: delay_time = set_subdivision(baseline_delay_time, top_push_state);
  6182  06B1  0846               	movf	_baseline_delay_time+1,w	;volatile
  6183  06B2  0022               	movlb	2	; select bank2
  6184  06B3  00C0               	movwf	(set_subdivision@x+1)^(0+256)
  6185  06B4  0020               	movlb	0	; select bank0
  6186  06B5  0845               	movf	_baseline_delay_time,w	;volatile
  6187  06B6  0022               	movlb	2	; select bank2
  6188  06B7  00BF               	movwf	set_subdivision@x^(0+256)
  6189  06B8  0020               	movlb	0	; select bank0
  6190  06B9  0852               	movf	_top_push_state+1,w
  6191  06BA  0022               	movlb	2	; select bank2
  6192  06BB  00C2               	movwf	(set_subdivision@y+1)^(0+256)
  6193  06BC  0020               	movlb	0	; select bank0
  6194  06BD  0851               	movf	_top_push_state,w
  6195  06BE  0022               	movlb	2	; select bank2
  6196  06BF  00C1               	movwf	set_subdivision@y^(0+256)
  6197  06C0  319F  2745  3183   	fcall	_set_subdivision
  6198  06C3  0022               	movlb	2	; select bank2
  6199  06C4  083F               	movf	?_set_subdivision^(0+256),w
  6200  06C5  0020               	movlb	0	; select bank0
  6201  06C6  00C9               	movwf	_delay_time	;volatile
  6202  06C7  0022               	movlb	2	; select bank2
  6203  06C8  0840               	movf	(?_set_subdivision+1)^(0+256),w
  6204  06C9  0020               	movlb	0	; select bank0
  6205  06CA  00CA               	movwf	_delay_time+1	;volatile
  6206  06CB  0D89               	rlf	9,f
  6207  06CC  3B89               	subwfb	9,f
  6208  06CD  0989               	comf	9,f
  6209  06CE  00CB               	movwf	_delay_time+2	;volatile
  6210  06CF  00CC               	movwf	_delay_time+3	;volatile
  6211                           
  6212                           ;main.c: 191: reset_sub_delay = 1;
  6213  06D0  0023               	movlb	3	; select bank3
  6214  06D1  01C5               	clrf	_reset_sub_delay^(0+384)
  6215  06D2  0AC5               	incf	_reset_sub_delay^(0+384),f
  6216                           
  6217                           ;main.c: 192: delayfound = 0;
  6218  06D3  0024               	movlb	4	; select bank4
  6219  06D4  01D1               	clrf	_delayfound^(0+512)
  6220  06D5  01D2               	clrf	(_delayfound+1)^(0+512)
  6221                           
  6222                           ;main.c: 193: delay_counter = 0;
  6223  06D6  01CF               	clrf	_delay_counter^(0+512)	;volatile
  6224  06D7  01D0               	clrf	(_delay_counter+1)^(0+512)	;volatile
  6225                           
  6226                           ;main.c: 205: delay_time_changed = 0;
  6227  06D8  0023               	movlb	3	; select bank3
  6228  06D9  01DC               	clrf	_delay_time_changed^(0+384)
  6229  06DA  2B7F               	goto	l8916
  6230  06DB                     __end_of_main:	
  6231                           
  6232                           	psect	text1
  6233  2735                     __ptext1:	
  6234 ;; *************** function _update_selectMode *****************
  6235 ;; Defined at:
  6236 ;;		line 139 in file "tactiles.c"
  6237 ;; Parameters:    Size  Location     Type
  6238 ;;		None
  6239 ;; Auto vars:     Size  Location     Type
  6240 ;;		None
  6241 ;; Return value:  Size  Location     Type
  6242 ;;                  1    wreg      void 
  6243 ;; Registers used:
  6244 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6245 ;; Tracked objects:
  6246 ;;		On entry : 0/0
  6247 ;;		On exit  : 0/0
  6248 ;;		Unchanged: 0/0
  6249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6251 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6252 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6253 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6254 ;;Total ram usage:        1 bytes
  6255 ;; Hardware stack levels used:    1
  6256 ;; Hardware stack levels required when called:    5
  6257 ;; This function calls:
  6258 ;;		_setExpressionDisplay
  6259 ;;		_setPresetDisplay
  6260 ;; This function is called by:
  6261 ;;		_main
  6262 ;; This function uses a non-reentrant model
  6263 ;;
  6264                           
  6265                           
  6266                           ;psect for function _update_selectMode
  6267  2735                     _update_selectMode:	
  6268                           
  6269                           ;tactiles.c: 140: if (mode2_state == 0 && presetSaveMode != 1) {
  6270                           
  6271                           ;incstack = 0
  6272                           ; Regs used in _update_selectMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6273  2735  0020               	movlb	0	; select bank0
  6274  2736  0867               	movf	_mode2_state,w
  6275  2737  1D03               	btfss	3,2
  6276  2738  2F3C               	goto	l1004
  6277  2739  0368               	decf	_presetSaveMode,w
  6278  273A  1D03               	btfss	3,2
  6279  273B  0008               	return
  6280  273C                     l1004:	
  6281                           ;tactiles.c: 142: return;
  6282                           
  6283                           
  6284                           ;tactiles.c: 143: }
  6285                           ;tactiles.c: 144: if (PORTDbits.RD7 == 0) {
  6286  273C  1B8F               	btfsc	15,7	;volatile
  6287  273D  2F8A               	goto	l8536
  6288                           
  6289                           ;tactiles.c: 145: debounce_mode1++;
  6290  273E  3001               	movlw	1
  6291  273F  0024               	movlb	4	; select bank4
  6292  2740  07CB               	addwf	_debounce_mode1^(0+512),f
  6293  2741  3000               	movlw	0
  6294  2742  3DCC               	addwfc	(_debounce_mode1+1)^(0+512),f
  6295                           
  6296                           ;tactiles.c: 146: if (debounce_mode1 > 25) {
  6297  2743  084C               	movf	(_debounce_mode1+1)^(0+512),w
  6298  2744  3A80               	xorlw	128
  6299  2745  0021               	movlb	1	; select bank1
  6300  2746  00A7               	movwf	??_update_selectMode^(0+128)
  6301  2747  3080               	movlw	128
  6302  2748  0227               	subwf	??_update_selectMode^(0+128),w
  6303  2749  1D03               	skipz
  6304  274A  2F4E               	goto	u9045
  6305  274B  301A               	movlw	26
  6306  274C  0024               	movlb	4	; select bank4
  6307  274D  024B               	subwf	_debounce_mode1^(0+512),w
  6308  274E                     u9045:	
  6309  274E  1C03               	skipc
  6310  274F  0008               	return
  6311                           
  6312                           ;tactiles.c: 147: debounce_mode1 = 25;
  6313  2750  3019               	movlw	25
  6314  2751  0024               	movlb	4	; select bank4
  6315  2752  00CB               	movwf	_debounce_mode1^(0+512)
  6316  2753  3000               	movlw	0
  6317  2754  00CC               	movwf	(_debounce_mode1^(0+512)+1)
  6318                           
  6319                           ;tactiles.c: 148: if (mode2_state == presetModeCnst || presetSaveMode == 1) {
  6320  2755  0020               	movlb	0	; select bank0
  6321  2756  0867               	movf	_mode2_state,w
  6322  2757  0023               	movlb	3	; select bank3
  6323  2758  0660               	xorwf	_presetModeCnst^(0+384),w
  6324  2759  1903               	skipnz
  6325  275A  2F5F               	goto	l8518
  6326  275B  0020               	movlb	0	; select bank0
  6327  275C  0368               	decf	_presetSaveMode,w
  6328  275D  1D03               	btfss	3,2
  6329  275E  2F70               	goto	l8526
  6330  275F                     l8518:	
  6331                           
  6332                           ;tactiles.c: 149: presetChannel++;
  6333  275F  3001               	movlw	1
  6334  2760  0021               	movlb	1	; select bank1
  6335  2761  00A7               	movwf	??_update_selectMode^(0+128)
  6336  2762  0827               	movf	??_update_selectMode^(0+128),w
  6337  2763  0020               	movlb	0	; select bank0
  6338  2764  07D6               	addwf	_presetChannel,f
  6339                           
  6340                           ;tactiles.c: 150: if (presetChannel > 10) {
  6341  2765  300B               	movlw	11
  6342  2766  0256               	subwf	_presetChannel,w
  6343  2767  1C03               	skipc
  6344  2768  2F6B               	goto	l8524
  6345                           
  6346                           ;tactiles.c: 151: presetChannel = 1;
  6347  2769  01D6               	clrf	_presetChannel
  6348  276A  0AD6               	incf	_presetChannel,f
  6349  276B                     l8524:	
  6350                           
  6351                           ;tactiles.c: 152: }
  6352                           ;tactiles.c: 153: setPresetDisplay(presetChannel);
  6353  276B  0856               	movf	_presetChannel,w
  6354  276C  31A2  2266  31A7   	fcall	_setPresetDisplay
  6355                           
  6356                           ;tactiles.c: 154: } else if (mode2_state == expressModeCnst) {
  6357  276F  2F86               	goto	l1015
  6358  2770                     l8526:	
  6359  2770  0020               	movlb	0	; select bank0
  6360  2771  0867               	movf	_mode2_state,w
  6361  2772  0023               	movlb	3	; select bank3
  6362  2773  065E               	xorwf	_expressModeCnst^(0+384),w
  6363  2774  1D03               	skipz
  6364  2775  2F86               	goto	l1015
  6365                           
  6366                           ;tactiles.c: 155: expressionChannel++;
  6367  2776  3001               	movlw	1
  6368  2777  0021               	movlb	1	; select bank1
  6369  2778  00A7               	movwf	??_update_selectMode^(0+128)
  6370  2779  0827               	movf	??_update_selectMode^(0+128),w
  6371  277A  0023               	movlb	3	; select bank3
  6372  277B  07DF               	addwf	_expressionChannel^(0+384),f
  6373                           
  6374                           ;tactiles.c: 156: if (expressionChannel > 5) {
  6375  277C  3006               	movlw	6
  6376  277D  025F               	subwf	_expressionChannel^(0+384),w
  6377  277E  1C03               	skipc
  6378  277F  2F82               	goto	l8534
  6379                           
  6380                           ;tactiles.c: 157: expressionChannel = 1;
  6381  2780  01DF               	clrf	_expressionChannel^(0+384)
  6382  2781  0ADF               	incf	_expressionChannel^(0+384),f
  6383  2782                     l8534:	
  6384                           
  6385                           ;tactiles.c: 158: }
  6386                           ;tactiles.c: 159: setExpressionDisplay(expressionChannel);
  6387  2782  085F               	movf	_expressionChannel^(0+384),w
  6388  2783  31AF  27B4  31A7   	fcall	_setExpressionDisplay
  6389  2786                     l1015:	
  6390                           ;tactiles.c: 160: }
  6391                           ;tactiles.c: 167: while (PORTDbits.RD7 == 0) {
  6392                           
  6393  2786  0020               	movlb	0	; select bank0
  6394  2787  1B8F               	btfsc	15,7	;volatile
  6395  2788  0008               	return
  6396  2789  2F86               	goto	l1015
  6397  278A                     l8536:	
  6398                           ;tactiles.c: 168: }
  6399                           ;tactiles.c: 169: }
  6400                           ;tactiles.c: 170: } else {
  6401                           
  6402                           
  6403                           ;tactiles.c: 171: debounce_mode1 = 0;
  6404  278A  0024               	movlb	4	; select bank4
  6405  278B  01CB               	clrf	_debounce_mode1^(0+512)
  6406  278C  01CC               	clrf	(_debounce_mode1+1)^(0+512)
  6407  278D  0008               	return
  6408  278E                     __end_of_update_selectMode:	
  6409                           
  6410                           	psect	text2
  6411  222E                     __ptext2:	
  6412 ;; *************** function _update_mode *****************
  6413 ;; Defined at:
  6414 ;;		line 87 in file "tactiles.c"
  6415 ;; Parameters:    Size  Location     Type
  6416 ;;		None
  6417 ;; Auto vars:     Size  Location     Type
  6418 ;;		None
  6419 ;; Return value:  Size  Location     Type
  6420 ;;                  1    wreg      void 
  6421 ;; Registers used:
  6422 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6423 ;; Tracked objects:
  6424 ;;		On entry : 0/0
  6425 ;;		On exit  : 0/0
  6426 ;;		Unchanged: 0/0
  6427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6429 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6430 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6431 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6432 ;;Total ram usage:        1 bytes
  6433 ;; Hardware stack levels used:    1
  6434 ;; Hardware stack levels required when called:    6
  6435 ;; This function calls:
  6436 ;;		_resetRingLEDs
  6437 ;;		_setPedalMode
  6438 ;; This function is called by:
  6439 ;;		_main
  6440 ;; This function uses a non-reentrant model
  6441 ;;
  6442                           
  6443                           
  6444                           ;psect for function _update_mode
  6445  222E                     _update_mode:	
  6446                           
  6447                           ;tactiles.c: 92: if (PORTCbits.RC0 == 0) {
  6448                           
  6449                           ;incstack = 0
  6450                           ; Regs used in _update_mode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6451  222E  0020               	movlb	0	; select bank0
  6452  222F  180E               	btfsc	14,0	;volatile
  6453  2230  2A62               	goto	l8504
  6454                           
  6455                           ;tactiles.c: 95: debounce_mode2++;
  6456  2231  3001               	movlw	1
  6457  2232  0024               	movlb	4	; select bank4
  6458  2233  07CD               	addwf	_debounce_mode2^(0+512),f
  6459  2234  3000               	movlw	0
  6460  2235  3DCE               	addwfc	(_debounce_mode2+1)^(0+512),f
  6461                           
  6462                           ;tactiles.c: 96: if (debounce_mode2 > 25) {
  6463  2236  084E               	movf	(_debounce_mode2+1)^(0+512),w
  6464  2237  3A80               	xorlw	128
  6465  2238  0021               	movlb	1	; select bank1
  6466  2239  00A7               	movwf	??_update_mode^(0+128)
  6467  223A  3080               	movlw	128
  6468  223B  0227               	subwf	??_update_mode^(0+128),w
  6469  223C  1D03               	skipz
  6470  223D  2A41               	goto	u8975
  6471  223E  301A               	movlw	26
  6472  223F  0024               	movlb	4	; select bank4
  6473  2240  024D               	subwf	_debounce_mode2^(0+512),w
  6474  2241                     u8975:	
  6475  2241  1C03               	skipc
  6476  2242  0008               	return
  6477                           
  6478                           ;tactiles.c: 97: debounce_mode2 = 25;
  6479  2243  3019               	movlw	25
  6480  2244  0024               	movlb	4	; select bank4
  6481  2245  00CD               	movwf	_debounce_mode2^(0+512)
  6482  2246  3000               	movlw	0
  6483  2247  00CE               	movwf	(_debounce_mode2^(0+512)+1)
  6484                           
  6485                           ;tactiles.c: 99: if (presetSaveMode == 1) {
  6486  2248  0020               	movlb	0	; select bank0
  6487  2249  0368               	decf	_presetSaveMode,w
  6488  224A  1D03               	btfss	3,2
  6489  224B  2A51               	goto	l8496
  6490                           
  6491                           ;tactiles.c: 100: presetSaveMode = 0;
  6492  224C  01E8               	clrf	_presetSaveMode
  6493                           
  6494                           ;tactiles.c: 101: resetRingLEDs();
  6495  224D  31AF  27CC  31A2   	fcall	_resetRingLEDs
  6496                           
  6497                           ;tactiles.c: 102: } else {
  6498  2250  2A5B               	goto	l8502
  6499  2251                     l8496:	
  6500                           
  6501                           ;tactiles.c: 103: mode2_state++;
  6502  2251  3001               	movlw	1
  6503  2252  0021               	movlb	1	; select bank1
  6504  2253  00A7               	movwf	??_update_mode^(0+128)
  6505  2254  0827               	movf	??_update_mode^(0+128),w
  6506  2255  0020               	movlb	0	; select bank0
  6507  2256  07E7               	addwf	_mode2_state,f
  6508                           
  6509                           ;tactiles.c: 104: if (mode2_state > 2) {
  6510  2257  3003               	movlw	3
  6511  2258  0267               	subwf	_mode2_state,w
  6512  2259  1803               	btfsc	3,0
  6513                           
  6514                           ;tactiles.c: 105: mode2_state = 0;
  6515  225A  01E7               	clrf	_mode2_state
  6516  225B                     l8502:	
  6517                           
  6518                           ;tactiles.c: 106: }
  6519                           ;tactiles.c: 107: }
  6520                           ;tactiles.c: 109: setPedalMode();
  6521  225B  31A0  20CB  31A2   	fcall	_setPedalMode
  6522  225E                     l989:	
  6523                           ;tactiles.c: 110: while (PORTCbits.RC0 == 0) {
  6524                           
  6525  225E  0020               	movlb	0	; select bank0
  6526  225F  180E               	btfsc	14,0	;volatile
  6527  2260  0008               	return
  6528  2261  2A5E               	goto	l989
  6529  2262                     l8504:	
  6530                           ;tactiles.c: 111: }
  6531                           ;tactiles.c: 112: }
  6532                           ;tactiles.c: 113: } else {
  6533                           
  6534                           
  6535                           ;tactiles.c: 114: debounce_mode2 = 0;
  6536  2262  0024               	movlb	4	; select bank4
  6537  2263  01CD               	clrf	_debounce_mode2^(0+512)
  6538  2264  01CE               	clrf	(_debounce_mode2+1)^(0+512)
  6539  2265  0008               	return
  6540  2266                     __end_of_update_mode:	
  6541                           
  6542                           	psect	text3
  6543  0C1D                     __ptext3:	
  6544 ;; *************** function _updateSwitchTap *****************
  6545 ;; Defined at:
  6546 ;;		line 48 in file "SwitchTap.c"
  6547 ;; Parameters:    Size  Location     Type
  6548 ;;		None
  6549 ;; Auto vars:     Size  Location     Type
  6550 ;;  tapCntDiviso    2   34[BANK1 ] int 
  6551 ;;  iCnt            1   36[BANK1 ] unsigned char 
  6552 ;; Return value:  Size  Location     Type
  6553 ;;                  1    wreg      void 
  6554 ;; Registers used:
  6555 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6556 ;; Tracked objects:
  6557 ;;		On entry : 0/0
  6558 ;;		On exit  : 0/0
  6559 ;;		Unchanged: 0/0
  6560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6562 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6563 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6564 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6565 ;;Total ram usage:        9 bytes
  6566 ;; Hardware stack levels used:    1
  6567 ;; Hardware stack levels required when called:    8
  6568 ;; This function calls:
  6569 ;;		___aldiv
  6570 ;;		_setDoublePressState
  6571 ;;		_setLongTapState
  6572 ;; This function is called by:
  6573 ;;		_main
  6574 ;; This function uses a non-reentrant model
  6575 ;;
  6576                           
  6577                           
  6578                           ;psect for function _updateSwitchTap
  6579  0C1D                     _updateSwitchTap:	
  6580                           
  6581                           ;SwitchTap.c: 49: uint8_t iCnt = 0;
  6582                           
  6583                           ;incstack = 0
  6584                           ; Regs used in _updateSwitchTap: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6585  0C1D  0021               	movlb	1	; select bank1
  6586  0C1E  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  6587                           
  6588                           ;SwitchTap.c: 57: if (PORTEbits.RE0 == 0) {
  6589  0C1F  0020               	movlb	0	; select bank0
  6590  0C20  1810               	btfsc	16,0	;volatile
  6591  0C21  2C29               	goto	l8646
  6592                           
  6593                           ;SwitchTap.c: 58: if (switchTap_pressed > 0) {
  6594  0C22  0022               	movlb	2	; select bank2
  6595  0C23  086C               	movf	_switchTap_pressed^(0+256),w
  6596  0C24  1903               	btfsc	3,2
  6597  0C25  2C34               	goto	l1409
  6598                           
  6599                           ;SwitchTap.c: 59: switchTap_pressed--;
  6600  0C26  3001               	movlw	1
  6601  0C27  02EC               	subwf	_switchTap_pressed^(0+256),f
  6602                           
  6603                           ;SwitchTap.c: 60: }
  6604                           ;SwitchTap.c: 61: } else if (switchTap_pressed < 25) {
  6605  0C28  2C34               	goto	l1409
  6606  0C29                     l8646:	
  6607  0C29  3019               	movlw	25
  6608  0C2A  0022               	movlb	2	; select bank2
  6609  0C2B  026C               	subwf	_switchTap_pressed^(0+256),w
  6610  0C2C  1803               	skipnc
  6611  0C2D  2C34               	goto	l1409
  6612                           
  6613                           ;SwitchTap.c: 62: switchTap_pressed++;
  6614  0C2E  3001               	movlw	1
  6615  0C2F  0021               	movlb	1	; select bank1
  6616  0C30  00BC               	movwf	??_updateSwitchTap^(0+128)
  6617  0C31  083C               	movf	??_updateSwitchTap^(0+128),w
  6618  0C32  0022               	movlb	2	; select bank2
  6619  0C33  07EC               	addwf	_switchTap_pressed^(0+256),f
  6620  0C34                     l1409:	
  6621                           
  6622                           ;SwitchTap.c: 63: }
  6623                           ;SwitchTap.c: 69: if (switchTap_pressed == 0) {
  6624  0C34  086C               	movf	_switchTap_pressed^(0+256),w
  6625  0C35  1D03               	btfss	3,2
  6626  0C36  2DEB               	goto	l8730
  6627                           
  6628                           ;SwitchTap.c: 73: if (tap_timer >= 1563) {
  6629  0C37  0020               	movlb	0	; select bank0
  6630  0C38  1BDF               	btfsc	_tap_timer+3,7	;volatile
  6631  0C39  2CBF               	goto	l8690
  6632  0C3A  085F               	movf	_tap_timer+3,w	;volatile
  6633  0C3B  1D03               	btfss	3,2
  6634  0C3C  2C46               	goto	l8652
  6635  0C3D  085E               	movf	_tap_timer+2,w	;volatile
  6636  0C3E  1D03               	btfss	3,2
  6637  0C3F  2C46               	goto	l8652
  6638  0C40  301B               	movlw	27
  6639  0C41  025C               	subwf	_tap_timer,w	;volatile
  6640  0C42  3006               	movlw	6
  6641  0C43  3B5D               	subwfb	_tap_timer+1,w	;volatile
  6642  0C44  1C03               	btfss	3,0
  6643  0C45  2CBF               	goto	l8690
  6644  0C46                     l8652:	
  6645                           
  6646                           ;SwitchTap.c: 76: if (switchTap_down != 1) {
  6647  0C46  0023               	movlb	3	; select bank3
  6648  0C47  0346               	decf	_switchTap_down^(0+384),w
  6649  0C48  1903               	btfsc	3,2
  6650  0C49  2C85               	goto	l8668
  6651                           
  6652                           ;SwitchTap.c: 78: switchTap_down = 1;
  6653  0C4A  01C6               	clrf	_switchTap_down^(0+384)
  6654  0C4B  0AC6               	incf	_switchTap_down^(0+384),f
  6655                           
  6656                           ;SwitchTap.c: 79: tap_timer = 0;
  6657  0C4C  3000               	movlw	0
  6658  0C4D  0020               	movlb	0	; select bank0
  6659  0C4E  00DF               	movwf	_tap_timer+3	;volatile
  6660  0C4F  3000               	movlw	0
  6661  0C50  00DE               	movwf	_tap_timer+2	;volatile
  6662  0C51  3000               	movlw	0
  6663  0C52  00DD               	movwf	_tap_timer+1	;volatile
  6664  0C53  3000               	movlw	0
  6665  0C54  00DC               	movwf	_tap_timer	;volatile
  6666                           
  6667                           ;SwitchTap.c: 80: tap_iteration = 1;
  6668  0C55  3001               	movlw	1
  6669  0C56  0023               	movlb	3	; select bank3
  6670  0C57  00D8               	movwf	_tap_iteration^(0+384)
  6671  0C58  3000               	movlw	0
  6672  0C59  00D9               	movwf	(_tap_iteration^(0+384)+1)
  6673                           
  6674                           ;SwitchTap.c: 81: tap_total = 0;
  6675  0C5A  3000               	movlw	0
  6676  0C5B  0024               	movlb	4	; select bank4
  6677  0C5C  00C0               	movwf	(_tap_total+3)^(0+512)
  6678  0C5D  3000               	movlw	0
  6679  0C5E  00BF               	movwf	(_tap_total+2)^(0+512)
  6680  0C5F  3000               	movlw	0
  6681  0C60  00BE               	movwf	(_tap_total+1)^(0+512)
  6682  0C61  3000               	movlw	0
  6683  0C62  00BD               	movwf	_tap_total^(0+512)
  6684                           
  6685                           ;SwitchTap.c: 82: delay_time_changed = 0;
  6686  0C63  0023               	movlb	3	; select bank3
  6687  0C64  01DC               	clrf	_delay_time_changed^(0+384)
  6688                           
  6689                           ;SwitchTap.c: 84: for (iCnt = 1; iCnt <= num_taps; iCnt++) {
  6690  0C65  0021               	movlb	1	; select bank1
  6691  0C66  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  6692  0C67  0AC4               	incf	updateSwitchTap@iCnt^(0+128),f
  6693  0C68                     l8666:	
  6694  0C68  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  6695  0C69  0020               	movlb	0	; select bank0
  6696  0C6A  0255               	subwf	_num_taps,w
  6697  0C6B  1C03               	btfss	3,0
  6698  0C6C  2C85               	goto	l8668
  6699                           
  6700                           ;SwitchTap.c: 85: tap_history[iCnt] = 0;
  6701  0C6D  0021               	movlb	1	; select bank1
  6702  0C6E  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  6703  0C6F  00BC               	movwf	??_updateSwitchTap^(0+128)
  6704  0C70  3001               	movlw	1
  6705  0C71                     u9415:	
  6706  0C71  35BC               	lslf	??_updateSwitchTap^(0+128),f
  6707  0C72  3EFF               	addlw	-1
  6708  0C73  1D03               	skipz
  6709  0C74  2C71               	goto	u9415
  6710  0C75  353C               	lslf	??_updateSwitchTap^(0+128),w
  6711  0C76  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  6712  0C77  0086               	movwf	6
  6713  0C78  3002               	movlw	2	; select bank4/5
  6714  0C79  0087               	movwf	7
  6715  0C7A  3000               	movlw	0
  6716  0C7B  3FC0               	movwi [0]fsr1
  6717  0C7C  3000               	movlw	0
  6718  0C7D  3FC1               	movwi [1]fsr1
  6719  0C7E  3FC2               	movwi [2]fsr1
  6720  0C7F  3FC3               	movwi [3]fsr1
  6721  0C80  3001               	movlw	1
  6722  0C81  00BC               	movwf	??_updateSwitchTap^(0+128)
  6723  0C82  083C               	movf	??_updateSwitchTap^(0+128),w
  6724  0C83  07C4               	addwf	updateSwitchTap@iCnt^(0+128),f
  6725  0C84  2C68               	goto	l8666
  6726  0C85                     l8668:	
  6727                           
  6728                           ;SwitchTap.c: 86: }
  6729                           ;SwitchTap.c: 87: }
  6730                           ;SwitchTap.c: 90: if (longTap_start == 0) {
  6731  0C85  0022               	movlb	2	; select bank2
  6732  0C86  086B               	movf	_longTap_start^(0+256),w
  6733  0C87  1D03               	btfss	3,2
  6734  0C88  2C90               	goto	l8674
  6735                           
  6736                           ;SwitchTap.c: 91: longTap_start = 1;
  6737  0C89  01EB               	clrf	_longTap_start^(0+256)
  6738  0C8A  0AEB               	incf	_longTap_start^(0+256),f
  6739                           
  6740                           ;SwitchTap.c: 92: longTap_state = 0;
  6741  0C8B  0020               	movlb	0	; select bank0
  6742  0C8C  01D4               	clrf	_longTap_state	;volatile
  6743                           
  6744                           ;SwitchTap.c: 93: longTap_timer = 0;
  6745  0C8D  0023               	movlb	3	; select bank3
  6746  0C8E  01B4               	clrf	_longTap_timer^(0+384)	;volatile
  6747  0C8F  01B5               	clrf	(_longTap_timer+1)^(0+384)	;volatile
  6748  0C90                     l8674:	
  6749                           
  6750                           ;SwitchTap.c: 94: }
  6751                           ;SwitchTap.c: 98: if (longTap_timer >= long_press_limit && longTap_state == 0 && doubleT
      +                          ap_state == 0) {
  6752  0C90  0020               	movlb	0	; select bank0
  6753  0C91  0850               	movf	_long_press_limit+1,w
  6754  0C92  0023               	movlb	3	; select bank3
  6755  0C93  0235               	subwf	(_longTap_timer+1)^(0+384),w	;volatile
  6756  0C94  1D03               	skipz
  6757  0C95  2C9A               	goto	u9445
  6758  0C96  0020               	movlb	0	; select bank0
  6759  0C97  084F               	movf	_long_press_limit,w
  6760  0C98  0023               	movlb	3	; select bank3
  6761  0C99  0234               	subwf	_longTap_timer^(0+384),w	;volatile
  6762  0C9A                     u9445:	
  6763  0C9A  1C03               	skipc
  6764  0C9B  0008               	return
  6765  0C9C  0020               	movlb	0	; select bank0
  6766  0C9D  0854               	movf	_longTap_state,w	;volatile
  6767  0C9E  1D03               	btfss	3,2
  6768  0C9F  0008               	return
  6769  0CA0  0865               	movf	_doubleTap_state,w	;volatile
  6770  0CA1  1D03               	btfss	3,2
  6771  0CA2  0008               	return
  6772                           
  6773                           ;SwitchTap.c: 100: longTap_timer = long_press_limit;
  6774  0CA3  0850               	movf	_long_press_limit+1,w
  6775  0CA4  0023               	movlb	3	; select bank3
  6776  0CA5  00B5               	movwf	(_longTap_timer+1)^(0+384)	;volatile
  6777  0CA6  0020               	movlb	0	; select bank0
  6778  0CA7  084F               	movf	_long_press_limit,w
  6779  0CA8  0023               	movlb	3	; select bank3
  6780  0CA9  00B4               	movwf	_longTap_timer^(0+384)	;volatile
  6781                           
  6782                           ;SwitchTap.c: 102: LATBbits.LATB4 = 0;
  6783  0CAA  0022               	movlb	2	; select bank2
  6784  0CAB  120D               	bcf	13,4	;volatile
  6785                           
  6786                           ;SwitchTap.c: 103: if (longBypass_start != 1) {
  6787  0CAC  036A               	decf	_longBypass_start^(0+256),w
  6788  0CAD  1903               	btfsc	3,2
  6789  0CAE  2CB7               	goto	l8688
  6790                           
  6791                           ;SwitchTap.c: 104: setLongTapState(1);
  6792  0CAF  3001               	movlw	1
  6793  0CB0  0021               	movlb	1	; select bank1
  6794  0CB1  00A0               	movwf	setLongTapState@f_state^(0+128)
  6795  0CB2  3000               	movlw	0
  6796  0CB3  00A1               	movwf	(setLongTapState@f_state^(0+128)+1)
  6797  0CB4  31AF  27E6         	fcall	_setLongTapState
  6798                           
  6799                           ;SwitchTap.c: 105: } else {
  6800  0CB6  0008               	return
  6801  0CB7                     l8688:	
  6802                           
  6803                           ;SwitchTap.c: 106: setDoublePressState(1);
  6804  0CB7  3001               	movlw	1
  6805  0CB8  0021               	movlb	1	; select bank1
  6806  0CB9  00B8               	movwf	setDoublePressState@f_state^(0+128)
  6807  0CBA  3000               	movlw	0
  6808  0CBB  00B9               	movwf	(setDoublePressState@f_state^(0+128)+1)
  6809  0CBC  31A3  2354         	fcall	_setDoublePressState
  6810                           
  6811                           ;SwitchTap.c: 107: }
  6812                           ;SwitchTap.c: 108: }
  6813                           ;SwitchTap.c: 110: } else if (tap_timer < 1563 && longTap_state == 0 && switchTap_down !
      +                          = 1) {
  6814  0CBE  0008               	return
  6815  0CBF                     l8690:	
  6816  0CBF  0020               	movlb	0	; select bank0
  6817  0CC0  1BDF               	btfsc	_tap_timer+3,7	;volatile
  6818  0CC1  2CCE               	goto	l8692
  6819  0CC2  085F               	movf	_tap_timer+3,w	;volatile
  6820  0CC3  1D03               	btfss	3,2
  6821  0CC4  0008               	return
  6822  0CC5  085E               	movf	_tap_timer+2,w	;volatile
  6823  0CC6  1D03               	btfss	3,2
  6824  0CC7  0008               	return
  6825  0CC8  301B               	movlw	27
  6826  0CC9  025C               	subwf	_tap_timer,w	;volatile
  6827  0CCA  3006               	movlw	6
  6828  0CCB  3B5D               	subwfb	_tap_timer+1,w	;volatile
  6829  0CCC  1803               	btfsc	3,0
  6830  0CCD  0008               	return
  6831  0CCE                     l8692:	
  6832  0CCE  0854               	movf	_longTap_state,w	;volatile
  6833  0CCF  1D03               	btfss	3,2
  6834  0CD0  0008               	return
  6835  0CD1  0023               	movlb	3	; select bank3
  6836  0CD2  0346               	decf	_switchTap_down^(0+384),w
  6837  0CD3  1903               	btfsc	3,2
  6838  0CD4  0008               	return
  6839                           
  6840                           ;SwitchTap.c: 112: switchTap_down = 1;
  6841  0CD5  01C6               	clrf	_switchTap_down^(0+384)
  6842  0CD6  0AC6               	incf	_switchTap_down^(0+384),f
  6843                           
  6844                           ;SwitchTap.c: 113: if (tap_timer >= 1172) {
  6845  0CD7  0020               	movlb	0	; select bank0
  6846  0CD8  1BDF               	btfsc	_tap_timer+3,7	;volatile
  6847  0CD9  2CEE               	goto	l1423
  6848  0CDA  085F               	movf	_tap_timer+3,w	;volatile
  6849  0CDB  1D03               	btfss	3,2
  6850  0CDC  2CE6               	goto	l8700
  6851  0CDD  085E               	movf	_tap_timer+2,w	;volatile
  6852  0CDE  1D03               	btfss	3,2
  6853  0CDF  2CE6               	goto	l8700
  6854  0CE0  3094               	movlw	148
  6855  0CE1  025C               	subwf	_tap_timer,w	;volatile
  6856  0CE2  3004               	movlw	4
  6857  0CE3  3B5D               	subwfb	_tap_timer+1,w	;volatile
  6858  0CE4  1C03               	btfss	3,0
  6859  0CE5  2CEE               	goto	l1423
  6860  0CE6                     l8700:	
  6861                           
  6862                           ;SwitchTap.c: 114: tap_timer = 1172;
  6863  0CE6  3000               	movlw	0
  6864  0CE7  00DF               	movwf	_tap_timer+3	;volatile
  6865  0CE8  3000               	movlw	0
  6866  0CE9  00DE               	movwf	_tap_timer+2	;volatile
  6867  0CEA  3004               	movlw	4
  6868  0CEB  00DD               	movwf	_tap_timer+1	;volatile
  6869  0CEC  3094               	movlw	148
  6870  0CED  00DC               	movwf	_tap_timer	;volatile
  6871  0CEE                     l1423:	
  6872                           
  6873                           ;SwitchTap.c: 115: }
  6874                           ;SwitchTap.c: 117: int tapCntDivisor = num_taps;
  6875  0CEE  0855               	movf	_num_taps,w
  6876  0CEF  0021               	movlb	1	; select bank1
  6877  0CF0  00BC               	movwf	??_updateSwitchTap^(0+128)
  6878  0CF1  01BD               	clrf	(??_updateSwitchTap^(0+128)+1)
  6879  0CF2  083C               	movf	??_updateSwitchTap^(0+128),w
  6880  0CF3  00C2               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  6881  0CF4  083D               	movf	(??_updateSwitchTap+1)^(0+128),w
  6882  0CF5  00C3               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  6883                           
  6884                           ;SwitchTap.c: 118: if (tap_iteration <= num_taps) {
  6885  0CF6  0023               	movlb	3	; select bank3
  6886  0CF7  0859               	movf	(_tap_iteration+1)^(0+384),w
  6887  0CF8  3A80               	xorlw	128
  6888  0CF9  3C80               	sublw	128
  6889  0CFA  1D03               	skipz
  6890  0CFB  2CFF               	goto	u9525
  6891  0CFC  0858               	movf	_tap_iteration^(0+384),w
  6892  0CFD  0020               	movlb	0	; select bank0
  6893  0CFE  0255               	subwf	_num_taps,w
  6894  0CFF                     u9525:	
  6895  0CFF  1C03               	skipc
  6896  0D00  2D31               	goto	l8708
  6897                           
  6898                           ;SwitchTap.c: 119: tap_total += tap_timer;
  6899  0D01  0020               	movlb	0	; select bank0
  6900  0D02  085C               	movf	_tap_timer,w	;volatile
  6901  0D03  0024               	movlb	4	; select bank4
  6902  0D04  07BD               	addwf	_tap_total^(0+512),f
  6903  0D05  0020               	movlb	0	; select bank0
  6904  0D06  085D               	movf	_tap_timer+1,w	;volatile
  6905  0D07  0024               	movlb	4	; select bank4
  6906  0D08  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  6907  0D09  0020               	movlb	0	; select bank0
  6908  0D0A  085E               	movf	_tap_timer+2,w	;volatile
  6909  0D0B  0024               	movlb	4	; select bank4
  6910  0D0C  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  6911  0D0D  0020               	movlb	0	; select bank0
  6912  0D0E  085F               	movf	_tap_timer+3,w	;volatile
  6913  0D0F  0024               	movlb	4	; select bank4
  6914  0D10  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  6915                           
  6916                           ;SwitchTap.c: 120: tap_history[tap_iteration] = tap_timer;
  6917  0D11  0023               	movlb	3	; select bank3
  6918  0D12  0858               	movf	_tap_iteration^(0+384),w
  6919  0D13  0021               	movlb	1	; select bank1
  6920  0D14  00BC               	movwf	??_updateSwitchTap^(0+128)
  6921  0D15  3001               	movlw	1
  6922  0D16                     u9535:	
  6923  0D16  35BC               	lslf	??_updateSwitchTap^(0+128),f
  6924  0D17  3EFF               	addlw	-1
  6925  0D18  1D03               	skipz
  6926  0D19  2D16               	goto	u9535
  6927  0D1A  353C               	lslf	??_updateSwitchTap^(0+128),w
  6928  0D1B  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  6929  0D1C  0086               	movwf	6
  6930  0D1D  3002               	movlw	2	; select bank4/5
  6931  0D1E  0087               	movwf	7
  6932  0D1F  0020               	movlb	0	; select bank0
  6933  0D20  085C               	movf	_tap_timer,w	;volatile
  6934  0D21  3FC0               	movwi [0]fsr1
  6935  0D22  085D               	movf	_tap_timer+1,w	;volatile
  6936  0D23  3FC1               	movwi [1]fsr1
  6937  0D24  085E               	movf	_tap_timer+2,w	;volatile
  6938  0D25  3FC2               	movwi [2]fsr1
  6939  0D26  085F               	movf	_tap_timer+3,w	;volatile
  6940  0D27  3FC3               	movwi [3]fsr1
  6941                           
  6942                           ;SwitchTap.c: 121: tapCntDivisor = tap_iteration;
  6943  0D28  0023               	movlb	3	; select bank3
  6944  0D29  0859               	movf	(_tap_iteration+1)^(0+384),w
  6945  0D2A  0021               	movlb	1	; select bank1
  6946  0D2B  00C3               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  6947  0D2C  0023               	movlb	3	; select bank3
  6948  0D2D  0858               	movf	_tap_iteration^(0+384),w
  6949  0D2E  0021               	movlb	1	; select bank1
  6950  0D2F  00C2               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  6951                           
  6952                           ;SwitchTap.c: 122: } else {
  6953  0D30  2DAD               	goto	l8722
  6954  0D31                     l8708:	
  6955                           
  6956                           ;SwitchTap.c: 123: tap_total = 0;
  6957  0D31  3000               	movlw	0
  6958  0D32  0024               	movlb	4	; select bank4
  6959  0D33  00C0               	movwf	(_tap_total+3)^(0+512)
  6960  0D34  3000               	movlw	0
  6961  0D35  00BF               	movwf	(_tap_total+2)^(0+512)
  6962  0D36  3000               	movlw	0
  6963  0D37  00BE               	movwf	(_tap_total+1)^(0+512)
  6964  0D38  3000               	movlw	0
  6965  0D39  00BD               	movwf	_tap_total^(0+512)
  6966                           
  6967                           ;SwitchTap.c: 124: for (iCnt = 1; iCnt < num_taps; iCnt++) {
  6968  0D3A  0021               	movlb	1	; select bank1
  6969  0D3B  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  6970  0D3C  0AC4               	incf	updateSwitchTap@iCnt^(0+128),f
  6971  0D3D                     l8716:	
  6972  0D3D  0020               	movlb	0	; select bank0
  6973  0D3E  0855               	movf	_num_taps,w
  6974  0D3F  0021               	movlb	1	; select bank1
  6975  0D40  0244               	subwf	updateSwitchTap@iCnt^(0+128),w
  6976  0D41  1803               	btfsc	3,0
  6977  0D42  2D87               	goto	l8718
  6978                           
  6979                           ;SwitchTap.c: 125: tap_history[iCnt] = tap_history[iCnt + 1];
  6980  0D43  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  6981  0D44  00BC               	movwf	??_updateSwitchTap^(0+128)
  6982  0D45  3001               	movlw	1
  6983  0D46                     u9545:	
  6984  0D46  35BC               	lslf	??_updateSwitchTap^(0+128),f
  6985  0D47  3EFF               	addlw	-1
  6986  0D48  1D03               	skipz
  6987  0D49  2D46               	goto	u9545
  6988  0D4A  353C               	lslf	??_updateSwitchTap^(0+128),w
  6989  0D4B  3E04               	addlw	4
  6990  0D4C  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  6991  0D4D  0086               	movwf	6
  6992  0D4E  3002               	movlw	2	; select bank4/5
  6993  0D4F  0087               	movwf	7
  6994  0D50  3F40               	moviw [0]fsr1
  6995  0D51  00BD               	movwf	(??_updateSwitchTap+1)^(0+128)
  6996  0D52  3F41               	moviw [1]fsr1
  6997  0D53  00BE               	movwf	((??_updateSwitchTap+1)^(0+128)+1)
  6998  0D54  3F42               	moviw [2]fsr1
  6999  0D55  00BF               	movwf	((??_updateSwitchTap+1)^(0+128)+2)
  7000  0D56  3F43               	moviw [3]fsr1
  7001  0D57  00C0               	movwf	((??_updateSwitchTap+1)^(0+128)+3)
  7002  0D58  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7003  0D59  00C1               	movwf	(??_updateSwitchTap+5)^(0+128)
  7004  0D5A  3001               	movlw	1
  7005  0D5B                     u9555:	
  7006  0D5B  35C1               	lslf	(??_updateSwitchTap+5)^(0+128),f
  7007  0D5C  3EFF               	addlw	-1
  7008  0D5D  1D03               	skipz
  7009  0D5E  2D5B               	goto	u9555
  7010  0D5F  3541               	lslf	(??_updateSwitchTap+5)^(0+128),w
  7011  0D60  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7012  0D61  0086               	movwf	6
  7013  0D62  3002               	movlw	2	; select bank4/5
  7014  0D63  0087               	movwf	7
  7015  0D64  083D               	movf	(??_updateSwitchTap+1)^(0+128),w
  7016  0D65  3FC0               	movwi [0]fsr1
  7017  0D66  083E               	movf	(??_updateSwitchTap+2)^(0+128),w
  7018  0D67  3FC1               	movwi [1]fsr1
  7019  0D68  083F               	movf	(??_updateSwitchTap+3)^(0+128),w
  7020  0D69  3FC2               	movwi [2]fsr1
  7021  0D6A  0840               	movf	(??_updateSwitchTap+4)^(0+128),w
  7022  0D6B  3FC3               	movwi [3]fsr1
  7023                           
  7024                           ;SwitchTap.c: 126: tap_total += tap_history[iCnt];
  7025  0D6C  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7026  0D6D  00BC               	movwf	??_updateSwitchTap^(0+128)
  7027  0D6E  3001               	movlw	1
  7028  0D6F                     u9565:	
  7029  0D6F  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7030  0D70  3EFF               	addlw	-1
  7031  0D71  1D03               	skipz
  7032  0D72  2D6F               	goto	u9565
  7033  0D73  353C               	lslf	??_updateSwitchTap^(0+128),w
  7034  0D74  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7035  0D75  0086               	movwf	6
  7036  0D76  3002               	movlw	2	; select bank4/5
  7037  0D77  0087               	movwf	7
  7038  0D78  3F40               	moviw [0]fsr1
  7039  0D79  0024               	movlb	4	; select bank4
  7040  0D7A  07BD               	addwf	_tap_total^(0+512),f
  7041  0D7B  3F41               	moviw [1]fsr1
  7042  0D7C  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  7043  0D7D  3F42               	moviw [2]fsr1
  7044  0D7E  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  7045  0D7F  3F43               	moviw [3]fsr1
  7046  0D80  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  7047  0D81  3001               	movlw	1
  7048  0D82  0021               	movlb	1	; select bank1
  7049  0D83  00BC               	movwf	??_updateSwitchTap^(0+128)
  7050  0D84  083C               	movf	??_updateSwitchTap^(0+128),w
  7051  0D85  07C4               	addwf	updateSwitchTap@iCnt^(0+128),f
  7052  0D86  2D3D               	goto	l8716
  7053  0D87                     l8718:	
  7054                           
  7055                           ;SwitchTap.c: 127: }
  7056                           ;SwitchTap.c: 128: tap_history[num_taps] = tap_timer;
  7057  0D87  0020               	movlb	0	; select bank0
  7058  0D88  0855               	movf	_num_taps,w
  7059  0D89  0021               	movlb	1	; select bank1
  7060  0D8A  00BC               	movwf	??_updateSwitchTap^(0+128)
  7061  0D8B  3001               	movlw	1
  7062  0D8C                     u9585:	
  7063  0D8C  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7064  0D8D  3EFF               	addlw	-1
  7065  0D8E  1D03               	skipz
  7066  0D8F  2D8C               	goto	u9585
  7067  0D90  353C               	lslf	??_updateSwitchTap^(0+128),w
  7068  0D91  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7069  0D92  0086               	movwf	6
  7070  0D93  3002               	movlw	2	; select bank4/5
  7071  0D94  0087               	movwf	7
  7072  0D95  0020               	movlb	0	; select bank0
  7073  0D96  085C               	movf	_tap_timer,w	;volatile
  7074  0D97  3FC0               	movwi [0]fsr1
  7075  0D98  085D               	movf	_tap_timer+1,w	;volatile
  7076  0D99  3FC1               	movwi [1]fsr1
  7077  0D9A  085E               	movf	_tap_timer+2,w	;volatile
  7078  0D9B  3FC2               	movwi [2]fsr1
  7079  0D9C  085F               	movf	_tap_timer+3,w	;volatile
  7080  0D9D  3FC3               	movwi [3]fsr1
  7081                           
  7082                           ;SwitchTap.c: 129: tap_total += tap_timer;
  7083  0D9E  085C               	movf	_tap_timer,w	;volatile
  7084  0D9F  0024               	movlb	4	; select bank4
  7085  0DA0  07BD               	addwf	_tap_total^(0+512),f
  7086  0DA1  0020               	movlb	0	; select bank0
  7087  0DA2  085D               	movf	_tap_timer+1,w	;volatile
  7088  0DA3  0024               	movlb	4	; select bank4
  7089  0DA4  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  7090  0DA5  0020               	movlb	0	; select bank0
  7091  0DA6  085E               	movf	_tap_timer+2,w	;volatile
  7092  0DA7  0024               	movlb	4	; select bank4
  7093  0DA8  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  7094  0DA9  0020               	movlb	0	; select bank0
  7095  0DAA  085F               	movf	_tap_timer+3,w	;volatile
  7096  0DAB  0024               	movlb	4	; select bank4
  7097  0DAC  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  7098  0DAD                     l8722:	
  7099                           
  7100                           ;SwitchTap.c: 130: }
  7101                           ;SwitchTap.c: 132: baseline_delay_time = tap_total / tapCntDivisor;
  7102  0DAD  0021               	movlb	1	; select bank1
  7103  0DAE  0842               	movf	updateSwitchTap@tapCntDivisor^(0+128),w
  7104  0DAF  00A0               	movwf	___aldiv@divisor^(0+128)
  7105  0DB0  0843               	movf	(updateSwitchTap@tapCntDivisor+1)^(0+128),w
  7106  0DB1  00A1               	movwf	(___aldiv@divisor+1)^(0+128)
  7107  0DB2  0D89               	rlf	9,f
  7108  0DB3  3B89               	subwfb	9,f
  7109  0DB4  0989               	comf	9,f
  7110  0DB5  00A2               	movwf	(___aldiv@divisor+2)^(0+128)
  7111  0DB6  00A3               	movwf	(___aldiv@divisor+3)^(0+128)
  7112  0DB7  0024               	movlb	4	; select bank4
  7113  0DB8  0840               	movf	(_tap_total+3)^(0+512),w
  7114  0DB9  0021               	movlb	1	; select bank1
  7115  0DBA  00A7               	movwf	(___aldiv@dividend+3)^(0+128)
  7116  0DBB  0024               	movlb	4	; select bank4
  7117  0DBC  083F               	movf	(_tap_total+2)^(0+512),w
  7118  0DBD  0021               	movlb	1	; select bank1
  7119  0DBE  00A6               	movwf	(___aldiv@dividend+2)^(0+128)
  7120  0DBF  0024               	movlb	4	; select bank4
  7121  0DC0  083E               	movf	(_tap_total+1)^(0+512),w
  7122  0DC1  0021               	movlb	1	; select bank1
  7123  0DC2  00A5               	movwf	(___aldiv@dividend+1)^(0+128)
  7124  0DC3  0024               	movlb	4	; select bank4
  7125  0DC4  083D               	movf	_tap_total^(0+512),w
  7126  0DC5  0021               	movlb	1	; select bank1
  7127  0DC6  00A4               	movwf	___aldiv@dividend^(0+128)
  7128  0DC7  3190  2000         	fcall	___aldiv
  7129  0DC9  0021               	movlb	1	; select bank1
  7130  0DCA  0823               	movf	(?___aldiv+3)^(0+128),w
  7131  0DCB  0020               	movlb	0	; select bank0
  7132  0DCC  00C8               	movwf	_baseline_delay_time+3	;volatile
  7133  0DCD  0021               	movlb	1	; select bank1
  7134  0DCE  0822               	movf	(?___aldiv+2)^(0+128),w
  7135  0DCF  0020               	movlb	0	; select bank0
  7136  0DD0  00C7               	movwf	_baseline_delay_time+2	;volatile
  7137  0DD1  0021               	movlb	1	; select bank1
  7138  0DD2  0821               	movf	(?___aldiv+1)^(0+128),w
  7139  0DD3  0020               	movlb	0	; select bank0
  7140  0DD4  00C6               	movwf	_baseline_delay_time+1	;volatile
  7141  0DD5  0021               	movlb	1	; select bank1
  7142  0DD6  0820               	movf	?___aldiv^(0+128),w
  7143  0DD7  0020               	movlb	0	; select bank0
  7144  0DD8  00C5               	movwf	_baseline_delay_time	;volatile
  7145                           
  7146                           ;SwitchTap.c: 133: delay_time_changed = 1;
  7147  0DD9  0023               	movlb	3	; select bank3
  7148  0DDA  01DC               	clrf	_delay_time_changed^(0+384)
  7149  0DDB  0ADC               	incf	_delay_time_changed^(0+384),f
  7150                           
  7151                           ;SwitchTap.c: 134: tap_timer = 0;
  7152  0DDC  3000               	movlw	0
  7153  0DDD  0020               	movlb	0	; select bank0
  7154  0DDE  00DF               	movwf	_tap_timer+3	;volatile
  7155  0DDF  3000               	movlw	0
  7156  0DE0  00DE               	movwf	_tap_timer+2	;volatile
  7157  0DE1  3000               	movlw	0
  7158  0DE2  00DD               	movwf	_tap_timer+1	;volatile
  7159  0DE3  3000               	movlw	0
  7160  0DE4  00DC               	movwf	_tap_timer	;volatile
  7161                           
  7162                           ;SwitchTap.c: 136: tap_iteration++;
  7163  0DE5  3001               	movlw	1
  7164  0DE6  0023               	movlb	3	; select bank3
  7165  0DE7  07D8               	addwf	_tap_iteration^(0+384),f
  7166  0DE8  3000               	movlw	0
  7167  0DE9  3DD9               	addwfc	(_tap_iteration+1)^(0+384),f
  7168                           
  7169                           ;SwitchTap.c: 137: }
  7170                           ;SwitchTap.c: 139: } else if (switchTap_pressed >= 25) {
  7171  0DEA  0008               	return
  7172  0DEB                     l8730:	
  7173  0DEB  3019               	movlw	25
  7174  0DEC  0022               	movlb	2	; select bank2
  7175  0DED  026C               	subwf	_switchTap_pressed^(0+256),w
  7176  0DEE  1C03               	skipc
  7177  0DEF  0008               	return
  7178                           
  7179                           ;SwitchTap.c: 140: switchTap_down = 0;
  7180  0DF0  0023               	movlb	3	; select bank3
  7181  0DF1  01C6               	clrf	_switchTap_down^(0+384)
  7182                           
  7183                           ;SwitchTap.c: 141: switchTap_state = 0;
  7184  0DF2  01E1               	clrf	_switchTap_state^(0+384)
  7185                           
  7186                           ;SwitchTap.c: 147: setLongTapState(0);
  7187  0DF3  3000               	movlw	0
  7188  0DF4  0021               	movlb	1	; select bank1
  7189  0DF5  00A0               	movwf	setLongTapState@f_state^(0+128)
  7190  0DF6  00A1               	movwf	(setLongTapState@f_state+1)^(0+128)
  7191  0DF7  31AF  27E6         	fcall	_setLongTapState
  7192                           
  7193                           ;SwitchTap.c: 149: longTap_timer = 0;
  7194  0DF9  0023               	movlb	3	; select bank3
  7195  0DFA  01B4               	clrf	_longTap_timer^(0+384)	;volatile
  7196  0DFB  01B5               	clrf	(_longTap_timer+1)^(0+384)	;volatile
  7197                           
  7198                           ;SwitchTap.c: 150: longTap_start = 0;
  7199  0DFC  0022               	movlb	2	; select bank2
  7200  0DFD  01EB               	clrf	_longTap_start^(0+256)
  7201                           
  7202                           ;SwitchTap.c: 152: switchTap_pressed = 25;
  7203  0DFE  3019               	movlw	25
  7204  0DFF  0021               	movlb	1	; select bank1
  7205  0E00  00BC               	movwf	??_updateSwitchTap^(0+128)
  7206  0E01  083C               	movf	??_updateSwitchTap^(0+128),w
  7207  0E02  0022               	movlb	2	; select bank2
  7208  0E03  00EC               	movwf	_switchTap_pressed^(0+256)
  7209  0E04  0008               	return
  7210  0E05                     __end_of_updateSwitchTap:	
  7211                           
  7212                           	psect	text4
  7213  2FE6                     __ptext4:	
  7214 ;; *************** function _setLongTapState *****************
  7215 ;; Defined at:
  7216 ;;		line 167 in file "SwitchTap.c"
  7217 ;; Parameters:    Size  Location     Type
  7218 ;;  f_state         2    0[BANK1 ] int 
  7219 ;; Auto vars:     Size  Location     Type
  7220 ;;		None
  7221 ;; Return value:  Size  Location     Type
  7222 ;;                  1    wreg      void 
  7223 ;; Registers used:
  7224 ;;		wreg, status,0
  7225 ;; Tracked objects:
  7226 ;;		On entry : 0/0
  7227 ;;		On exit  : 0/0
  7228 ;;		Unchanged: 0/0
  7229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7230 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7232 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7233 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7234 ;;Total ram usage:        4 bytes
  7235 ;; Hardware stack levels used:    1
  7236 ;; Hardware stack levels required when called:    3
  7237 ;; This function calls:
  7238 ;;		Nothing
  7239 ;; This function is called by:
  7240 ;;		_updateSwitchTap
  7241 ;; This function uses a non-reentrant model
  7242 ;;
  7243                           
  7244                           
  7245                           ;psect for function _setLongTapState
  7246  2FE6                     _setLongTapState:	
  7247                           
  7248                           ;SwitchTap.c: 168: if (longTap_state == f_state) {return;}
  7249                           
  7250                           ;incstack = 0
  7251                           ; Regs used in _setLongTapState: [wreg+status,0]
  7252  2FE6  0020               	movlb	0	; select bank0
  7253  2FE7  0854               	movf	_longTap_state,w	;volatile
  7254  2FE8  0021               	movlb	1	; select bank1
  7255  2FE9  00A2               	movwf	??_setLongTapState^(0+128)
  7256  2FEA  01A3               	clrf	(??_setLongTapState^(0+128)+1)
  7257  2FEB  0821               	movf	(setLongTapState@f_state+1)^(0+128),w
  7258  2FEC  0623               	xorwf	(??_setLongTapState+1)^(0+128),w
  7259  2FED  1D03               	skipz
  7260  2FEE  2FF1               	goto	u8625
  7261  2FEF  0820               	movf	setLongTapState@f_state^(0+128),w
  7262  2FF0  0622               	xorwf	??_setLongTapState^(0+128),w
  7263  2FF1                     u8625:	
  7264  2FF1  1903               	btfsc	3,2
  7265  2FF2  0008               	return
  7266                           
  7267                           ;SwitchTap.c: 169: longTap_state = f_state;
  7268  2FF3  0820               	movf	setLongTapState@f_state^(0+128),w
  7269  2FF4  00A2               	movwf	??_setLongTapState^(0+128)
  7270  2FF5  0822               	movf	??_setLongTapState^(0+128),w
  7271  2FF6  0020               	movlb	0	; select bank0
  7272  2FF7  00D4               	movwf	_longTap_state	;volatile
  7273                           
  7274                           ;SwitchTap.c: 170: LATBbits.LATB5 = f_state;
  7275  2FF8  0021               	movlb	1	; select bank1
  7276  2FF9  0C20               	rrf	setLongTapState@f_state^(0+128),w
  7277  2FFA  0022               	movlb	2	; select bank2
  7278  2FFB  1C03               	skipc
  7279  2FFC  128D               	bcf	13,5	;volatile
  7280  2FFD  1803               	skipnc
  7281  2FFE  168D               	bsf	13,5	;volatile
  7282  2FFF  0008               	return
  7283  3000                     __end_of_setLongTapState:	
  7284                           
  7285                           	psect	text5
  7286  1000                     __ptext5:	
  7287 ;; *************** function ___aldiv *****************
  7288 ;; Defined at:
  7289 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
  7290 ;; Parameters:    Size  Location     Type
  7291 ;;  divisor         4    0[BANK1 ] long 
  7292 ;;  dividend        4    4[BANK1 ] long 
  7293 ;; Auto vars:     Size  Location     Type
  7294 ;;  quotient        4   11[BANK1 ] long 
  7295 ;;  sign            1   10[BANK1 ] unsigned char 
  7296 ;;  counter         1    9[BANK1 ] unsigned char 
  7297 ;; Return value:  Size  Location     Type
  7298 ;;                  4    0[BANK1 ] long 
  7299 ;; Registers used:
  7300 ;;		wreg, status,2, status,0
  7301 ;; Tracked objects:
  7302 ;;		On entry : 0/0
  7303 ;;		On exit  : 0/0
  7304 ;;		Unchanged: 0/0
  7305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7306 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7307 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7308 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7309 ;;      Totals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7310 ;;Total ram usage:       15 bytes
  7311 ;; Hardware stack levels used:    1
  7312 ;; Hardware stack levels required when called:    3
  7313 ;; This function calls:
  7314 ;;		Nothing
  7315 ;; This function is called by:
  7316 ;;		_updateSwitchTap
  7317 ;; This function uses a non-reentrant model
  7318 ;;
  7319                           
  7320                           
  7321                           ;psect for function ___aldiv
  7322  1000                     ___aldiv:	
  7323                           
  7324                           ;incstack = 0
  7325                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  7326  1000  0021               	movlb	1	; select bank1
  7327  1001  01AA               	clrf	___aldiv@sign^(0+128)
  7328  1002  1FA3               	btfss	(___aldiv@divisor+3)^(0+128),7
  7329  1003  2811               	goto	l1990
  7330  1004  09A0               	comf	___aldiv@divisor^(0+128),f
  7331  1005  09A1               	comf	(___aldiv@divisor+1)^(0+128),f
  7332  1006  09A2               	comf	(___aldiv@divisor+2)^(0+128),f
  7333  1007  09A3               	comf	(___aldiv@divisor+3)^(0+128),f
  7334  1008  0AA0               	incf	___aldiv@divisor^(0+128),f
  7335  1009  1903               	skipnz
  7336  100A  0AA1               	incf	(___aldiv@divisor+1)^(0+128),f
  7337  100B  1903               	skipnz
  7338  100C  0AA2               	incf	(___aldiv@divisor+2)^(0+128),f
  7339  100D  1903               	skipnz
  7340  100E  0AA3               	incf	(___aldiv@divisor+3)^(0+128),f
  7341  100F  01AA               	clrf	___aldiv@sign^(0+128)
  7342  1010  0AAA               	incf	___aldiv@sign^(0+128),f
  7343  1011                     l1990:	
  7344  1011  1FA7               	btfss	(___aldiv@dividend+3)^(0+128),7
  7345  1012  2822               	goto	l8312
  7346  1013  09A4               	comf	___aldiv@dividend^(0+128),f
  7347  1014  09A5               	comf	(___aldiv@dividend+1)^(0+128),f
  7348  1015  09A6               	comf	(___aldiv@dividend+2)^(0+128),f
  7349  1016  09A7               	comf	(___aldiv@dividend+3)^(0+128),f
  7350  1017  0AA4               	incf	___aldiv@dividend^(0+128),f
  7351  1018  1903               	skipnz
  7352  1019  0AA5               	incf	(___aldiv@dividend+1)^(0+128),f
  7353  101A  1903               	skipnz
  7354  101B  0AA6               	incf	(___aldiv@dividend+2)^(0+128),f
  7355  101C  1903               	skipnz
  7356  101D  0AA7               	incf	(___aldiv@dividend+3)^(0+128),f
  7357  101E  3001               	movlw	1
  7358  101F  00A8               	movwf	??___aldiv^(0+128)
  7359  1020  0828               	movf	??___aldiv^(0+128),w
  7360  1021  06AA               	xorwf	___aldiv@sign^(0+128),f
  7361  1022                     l8312:	
  7362  1022  3000               	movlw	0
  7363  1023  00AE               	movwf	(___aldiv@quotient+3)^(0+128)
  7364  1024  3000               	movlw	0
  7365  1025  00AD               	movwf	(___aldiv@quotient+2)^(0+128)
  7366  1026  3000               	movlw	0
  7367  1027  00AC               	movwf	(___aldiv@quotient+1)^(0+128)
  7368  1028  3000               	movlw	0
  7369  1029  00AB               	movwf	___aldiv@quotient^(0+128)
  7370  102A  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7371  102B  0422               	iorwf	(___aldiv@divisor+2)^(0+128),w
  7372  102C  0421               	iorwf	(___aldiv@divisor+1)^(0+128),w
  7373  102D  0420               	iorwf	___aldiv@divisor^(0+128),w
  7374  102E  1903               	skipnz
  7375  102F  286B               	goto	l8334
  7376  1030  01A9               	clrf	___aldiv@counter^(0+128)
  7377  1031  0AA9               	incf	___aldiv@counter^(0+128),f
  7378  1032                     l8320:	
  7379  1032  1BA3               	btfsc	(___aldiv@divisor+3)^(0+128),7
  7380  1033  2840               	goto	l8322
  7381  1034  3001               	movlw	1
  7382  1035                     u8765:	
  7383  1035  35A0               	lslf	___aldiv@divisor^(0+128),f
  7384  1036  0DA1               	rlf	(___aldiv@divisor+1)^(0+128),f
  7385  1037  0DA2               	rlf	(___aldiv@divisor+2)^(0+128),f
  7386  1038  0DA3               	rlf	(___aldiv@divisor+3)^(0+128),f
  7387  1039  0B89               	decfsz	9,f
  7388  103A  2835               	goto	u8765
  7389  103B  3001               	movlw	1
  7390  103C  00A8               	movwf	??___aldiv^(0+128)
  7391  103D  0828               	movf	??___aldiv^(0+128),w
  7392  103E  07A9               	addwf	___aldiv@counter^(0+128),f
  7393  103F  2832               	goto	l8320
  7394  1040                     l8322:	
  7395  1040  3001               	movlw	1
  7396  1041                     u8785:	
  7397  1041  35AB               	lslf	___aldiv@quotient^(0+128),f
  7398  1042  0DAC               	rlf	(___aldiv@quotient+1)^(0+128),f
  7399  1043  0DAD               	rlf	(___aldiv@quotient+2)^(0+128),f
  7400  1044  0DAE               	rlf	(___aldiv@quotient+3)^(0+128),f
  7401  1045  0B89               	decfsz	9,f
  7402  1046  2841               	goto	u8785
  7403  1047  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7404  1048  0227               	subwf	(___aldiv@dividend+3)^(0+128),w
  7405  1049  1D03               	skipz
  7406  104A  2855               	goto	u8795
  7407  104B  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7408  104C  0226               	subwf	(___aldiv@dividend+2)^(0+128),w
  7409  104D  1D03               	skipz
  7410  104E  2855               	goto	u8795
  7411  104F  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  7412  1050  0225               	subwf	(___aldiv@dividend+1)^(0+128),w
  7413  1051  1D03               	skipz
  7414  1052  2855               	goto	u8795
  7415  1053  0820               	movf	___aldiv@divisor^(0+128),w
  7416  1054  0224               	subwf	___aldiv@dividend^(0+128),w
  7417  1055                     u8795:	
  7418  1055  1C03               	skipc
  7419  1056  2860               	goto	l8330
  7420  1057  0820               	movf	___aldiv@divisor^(0+128),w
  7421  1058  02A4               	subwf	___aldiv@dividend^(0+128),f
  7422  1059  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  7423  105A  3BA5               	subwfb	(___aldiv@dividend+1)^(0+128),f
  7424  105B  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7425  105C  3BA6               	subwfb	(___aldiv@dividend+2)^(0+128),f
  7426  105D  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7427  105E  3BA7               	subwfb	(___aldiv@dividend+3)^(0+128),f
  7428  105F  142B               	bsf	___aldiv@quotient^(0+128),0
  7429  1060                     l8330:	
  7430  1060  3001               	movlw	1
  7431  1061                     u8805:	
  7432  1061  36A3               	lsrf	(___aldiv@divisor+3)^(0+128),f
  7433  1062  0CA2               	rrf	(___aldiv@divisor+2)^(0+128),f
  7434  1063  0CA1               	rrf	(___aldiv@divisor+1)^(0+128),f
  7435  1064  0CA0               	rrf	___aldiv@divisor^(0+128),f
  7436  1065  0B89               	decfsz	9,f
  7437  1066  2861               	goto	u8805
  7438  1067  3001               	movlw	1
  7439  1068  02A9               	subwf	___aldiv@counter^(0+128),f
  7440  1069  1D03               	btfss	3,2
  7441  106A  2840               	goto	l8322
  7442  106B                     l8334:	
  7443  106B  082A               	movf	___aldiv@sign^(0+128),w
  7444  106C  1903               	btfsc	3,2
  7445  106D  2879               	goto	l8338
  7446  106E  09AB               	comf	___aldiv@quotient^(0+128),f
  7447  106F  09AC               	comf	(___aldiv@quotient+1)^(0+128),f
  7448  1070  09AD               	comf	(___aldiv@quotient+2)^(0+128),f
  7449  1071  09AE               	comf	(___aldiv@quotient+3)^(0+128),f
  7450  1072  0AAB               	incf	___aldiv@quotient^(0+128),f
  7451  1073  1903               	skipnz
  7452  1074  0AAC               	incf	(___aldiv@quotient+1)^(0+128),f
  7453  1075  1903               	skipnz
  7454  1076  0AAD               	incf	(___aldiv@quotient+2)^(0+128),f
  7455  1077  1903               	skipnz
  7456  1078  0AAE               	incf	(___aldiv@quotient+3)^(0+128),f
  7457  1079                     l8338:	
  7458  1079  082E               	movf	(___aldiv@quotient+3)^(0+128),w
  7459  107A  00A3               	movwf	(?___aldiv+3)^(0+128)
  7460  107B  082D               	movf	(___aldiv@quotient+2)^(0+128),w
  7461  107C  00A2               	movwf	(?___aldiv+2)^(0+128)
  7462  107D  082C               	movf	(___aldiv@quotient+1)^(0+128),w
  7463  107E  00A1               	movwf	(?___aldiv+1)^(0+128)
  7464  107F  082B               	movf	___aldiv@quotient^(0+128),w
  7465  1080  00A0               	movwf	?___aldiv^(0+128)
  7466  1081  0008               	return
  7467  1082                     __end_of___aldiv:	
  7468                           
  7469                           	psect	text6
  7470  1249                     __ptext6:	
  7471 ;; *************** function _updateSwitchBypass *****************
  7472 ;; Defined at:
  7473 ;;		line 34 in file "SwitchBypass.c"
  7474 ;; Parameters:    Size  Location     Type
  7475 ;;		None
  7476 ;; Auto vars:     Size  Location     Type
  7477 ;;		None
  7478 ;; Return value:  Size  Location     Type
  7479 ;;                  1    wreg      void 
  7480 ;; Registers used:
  7481 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7482 ;; Tracked objects:
  7483 ;;		On entry : 0/0
  7484 ;;		On exit  : 0/0
  7485 ;;		Unchanged: 0/0
  7486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7487 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7488 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7489 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7490 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7491 ;;Total ram usage:        2 bytes
  7492 ;; Hardware stack levels used:    1
  7493 ;; Hardware stack levels required when called:    8
  7494 ;; This function calls:
  7495 ;;		_setDoublePressState
  7496 ;;		_setLongBypassState
  7497 ;;		_setSwitchBypassState
  7498 ;; This function is called by:
  7499 ;;		_main
  7500 ;; This function uses a non-reentrant model
  7501 ;;
  7502                           
  7503                           
  7504                           ;psect for function _updateSwitchBypass
  7505  1249                     _updateSwitchBypass:	
  7506                           
  7507                           ;SwitchBypass.c: 41: if (PORTEbits.RE1 == 0) {
  7508                           
  7509                           ;incstack = 0
  7510                           ; Regs used in _updateSwitchBypass: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7511  1249  0020               	movlb	0	; select bank0
  7512  124A  1890               	btfsc	16,1	;volatile
  7513  124B  2A5F               	goto	l8544
  7514                           
  7515                           ;SwitchBypass.c: 42: if (switchBypass_pressed > 0) {
  7516  124C  0023               	movlb	3	; select bank3
  7517  124D  083B               	movf	(_switchBypass_pressed+1)^(0+384),w
  7518  124E  3A80               	xorlw	128
  7519  124F  0021               	movlb	1	; select bank1
  7520  1250  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7521  1251  3080               	movlw	128
  7522  1252  023C               	subwf	??_updateSwitchBypass^(0+128),w
  7523  1253  1D03               	skipz
  7524  1254  2A58               	goto	u9125
  7525  1255  3001               	movlw	1
  7526  1256  0023               	movlb	3	; select bank3
  7527  1257  023A               	subwf	_switchBypass_pressed^(0+384),w
  7528  1258                     u9125:	
  7529  1258  1C03               	skipc
  7530  1259  2A72               	goto	l8548
  7531                           
  7532                           ;SwitchBypass.c: 43: switchBypass_pressed--;
  7533  125A  30FF               	movlw	255
  7534  125B  0023               	movlb	3	; select bank3
  7535  125C  07BA               	addwf	_switchBypass_pressed^(0+384),f
  7536  125D  30FF               	movlw	255
  7537  125E  2A71               	goto	L1
  7538  125F                     l8544:	
  7539                           ;SwitchBypass.c: 44: }
  7540                           ;SwitchBypass.c: 45: } else if (switchBypass_pressed < 25) {
  7541                           
  7542  125F  0023               	movlb	3	; select bank3
  7543  1260  083B               	movf	(_switchBypass_pressed+1)^(0+384),w
  7544  1261  3A80               	xorlw	128
  7545  1262  0021               	movlb	1	; select bank1
  7546  1263  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7547  1264  3080               	movlw	128
  7548  1265  023C               	subwf	??_updateSwitchBypass^(0+128),w
  7549  1266  1D03               	skipz
  7550  1267  2A6B               	goto	u9135
  7551  1268  3019               	movlw	25
  7552  1269  0023               	movlb	3	; select bank3
  7553  126A  023A               	subwf	_switchBypass_pressed^(0+384),w
  7554  126B                     u9135:	
  7555  126B  1803               	skipnc
  7556  126C  2A72               	goto	l8548
  7557                           
  7558                           ;SwitchBypass.c: 46: switchBypass_pressed++;
  7559  126D  3001               	movlw	1
  7560  126E  0023               	movlb	3	; select bank3
  7561  126F  07BA               	addwf	_switchBypass_pressed^(0+384),f
  7562  1270  3000               	movlw	0
  7563  1271                     L1:	
  7564  1271  3DBB               	addwfc	(_switchBypass_pressed+1)^(0+384),f
  7565  1272                     l8548:	
  7566                           
  7567                           ;SwitchBypass.c: 47: }
  7568                           ;SwitchBypass.c: 53: if (switchBypass_pressed == 0) {
  7569  1272  0023               	movlb	3	; select bank3
  7570  1273  083A               	movf	_switchBypass_pressed^(0+384),w
  7571  1274  043B               	iorwf	(_switchBypass_pressed+1)^(0+384),w
  7572  1275  1D03               	btfss	3,2
  7573  1276  2AF2               	goto	l8600
  7574                           
  7575                           ;SwitchBypass.c: 56: if (longBypass_start == 0) {
  7576  1277  0022               	movlb	2	; select bank2
  7577  1278  086A               	movf	_longBypass_start^(0+256),w
  7578  1279  1D03               	btfss	3,2
  7579  127A  2A80               	goto	l8556
  7580                           
  7581                           ;SwitchBypass.c: 57: longBypass_start = 1;
  7582  127B  01EA               	clrf	_longBypass_start^(0+256)
  7583  127C  0AEA               	incf	_longBypass_start^(0+256),f
  7584                           
  7585                           ;SwitchBypass.c: 58: longBypass_timer = 0;
  7586  127D  0023               	movlb	3	; select bank3
  7587  127E  01B2               	clrf	_longBypass_timer^(0+384)	;volatile
  7588  127F  01B3               	clrf	(_longBypass_timer+1)^(0+384)	;volatile
  7589  1280                     l8556:	
  7590                           
  7591                           ;SwitchBypass.c: 59: }
  7592                           ;SwitchBypass.c: 61: if (longBypass_timer >= long_press_limit && longBypass_down == 0 &&
      +                           doubleTap_state == 0) {
  7593  1280  0020               	movlb	0	; select bank0
  7594  1281  0850               	movf	_long_press_limit+1,w
  7595  1282  0023               	movlb	3	; select bank3
  7596  1283  0233               	subwf	(_longBypass_timer+1)^(0+384),w	;volatile
  7597  1284  1D03               	skipz
  7598  1285  2A8A               	goto	u9165
  7599  1286  0020               	movlb	0	; select bank0
  7600  1287  084F               	movf	_long_press_limit,w
  7601  1288  0023               	movlb	3	; select bank3
  7602  1289  0232               	subwf	_longBypass_timer^(0+384),w	;volatile
  7603  128A                     u9165:	
  7604  128A  1C03               	skipc
  7605  128B  2AC8               	goto	l8582
  7606  128C  0840               	movf	_longBypass_down^(0+384),w
  7607  128D  1D03               	btfss	3,2
  7608  128E  2AC8               	goto	l8582
  7609  128F  0020               	movlb	0	; select bank0
  7610  1290  0865               	movf	_doubleTap_state,w	;volatile
  7611  1291  1D03               	btfss	3,2
  7612  1292  2AC8               	goto	l8582
  7613                           
  7614                           ;SwitchBypass.c: 64: LATBbits.LATB2 = 0;
  7615  1293  0022               	movlb	2	; select bank2
  7616  1294  110D               	bcf	13,2	;volatile
  7617                           
  7618                           ;SwitchBypass.c: 65: if (longTap_start != 1 ) {
  7619  1295  036B               	decf	_longTap_start^(0+256),w
  7620  1296  1903               	btfsc	3,2
  7621  1297  2AC0               	goto	l8580
  7622                           
  7623                           ;SwitchBypass.c: 66: if (switchBypass_state == 1) {
  7624  1298  0020               	movlb	0	; select bank0
  7625  1299  0357               	decf	_switchBypass_state,w
  7626  129A  1D03               	btfss	3,2
  7627  129B  2AC8               	goto	l8582
  7628                           
  7629                           ;SwitchBypass.c: 67: longBypass_down = 1;
  7630  129C  0023               	movlb	3	; select bank3
  7631  129D  01C0               	clrf	_longBypass_down^(0+384)
  7632  129E  0AC0               	incf	_longBypass_down^(0+384),f
  7633                           
  7634                           ;SwitchBypass.c: 68: if (longBypass_state == 0) {
  7635  129F  0020               	movlb	0	; select bank0
  7636  12A0  0866               	movf	_longBypass_state,w	;volatile
  7637  12A1  1D03               	btfss	3,2
  7638  12A2  2AAE               	goto	l8576
  7639                           
  7640                           ;SwitchBypass.c: 69: LATBbits.LATB2 = 0;
  7641  12A3  0022               	movlb	2	; select bank2
  7642  12A4  110D               	bcf	13,2	;volatile
  7643                           
  7644                           ;SwitchBypass.c: 70: setLongBypassState(1);
  7645  12A5  3001               	movlw	1
  7646  12A6  0021               	movlb	1	; select bank1
  7647  12A7  00A0               	movwf	setLongBypassState@f_state^(0+128)
  7648  12A8  3000               	movlw	0
  7649  12A9  00A1               	movwf	(setLongBypassState@f_state^(0+128)+1)
  7650  12AA  31A0  2088  3192   	fcall	_setLongBypassState
  7651                           
  7652                           ;SwitchBypass.c: 71: } else {
  7653  12AD  2AC8               	goto	l8582
  7654  12AE                     l8576:	
  7655                           
  7656                           ;SwitchBypass.c: 72: setSwitchBypassState(1);
  7657  12AE  3001               	movlw	1
  7658  12AF  0021               	movlb	1	; select bank1
  7659  12B0  00B2               	movwf	setSwitchBypassState@f_state^(0+128)
  7660  12B1  3000               	movlw	0
  7661  12B2  00B3               	movwf	(setSwitchBypassState@f_state^(0+128)+1)
  7662  12B3  31A5  2567  3192   	fcall	_setSwitchBypassState
  7663                           
  7664                           ;SwitchBypass.c: 73: setLongBypassState(0);
  7665  12B6  3000               	movlw	0
  7666  12B7  0021               	movlb	1	; select bank1
  7667  12B8  00A0               	movwf	setLongBypassState@f_state^(0+128)
  7668  12B9  00A1               	movwf	(setLongBypassState@f_state+1)^(0+128)
  7669  12BA  31A0  2088  3192   	fcall	_setLongBypassState
  7670                           
  7671                           ;SwitchBypass.c: 74: LATBbits.LATB2 = 1;
  7672  12BD  0022               	movlb	2	; select bank2
  7673  12BE  150D               	bsf	13,2	;volatile
  7674                           
  7675                           ;SwitchBypass.c: 75: }
  7676                           ;SwitchBypass.c: 76: }
  7677                           ;SwitchBypass.c: 77: } else {
  7678  12BF  2AC8               	goto	l8582
  7679  12C0                     l8580:	
  7680                           
  7681                           ;SwitchBypass.c: 78: setDoublePressState(1);
  7682  12C0  3001               	movlw	1
  7683  12C1  0021               	movlb	1	; select bank1
  7684  12C2  00B8               	movwf	setDoublePressState@f_state^(0+128)
  7685  12C3  3000               	movlw	0
  7686  12C4  00B9               	movwf	(setDoublePressState@f_state^(0+128)+1)
  7687  12C5  31A3  2354  3192   	fcall	_setDoublePressState
  7688  12C8                     l8582:	
  7689                           
  7690                           ;SwitchBypass.c: 79: }
  7691                           ;SwitchBypass.c: 80: }
  7692                           ;SwitchBypass.c: 82: if (doubleTap_state == 0 && longBypass_state == 0) {
  7693  12C8  0020               	movlb	0	; select bank0
  7694  12C9  0865               	movf	_doubleTap_state,w	;volatile
  7695  12CA  1D03               	btfss	3,2
  7696  12CB  2AEE               	goto	l1266
  7697  12CC  0866               	movf	_longBypass_state,w	;volatile
  7698  12CD  1D03               	btfss	3,2
  7699  12CE  2AEE               	goto	l1266
  7700                           
  7701                           ;SwitchBypass.c: 83: if (switchBypass_state == 1) {
  7702  12CF  0357               	decf	_switchBypass_state,w
  7703  12D0  1D03               	btfss	3,2
  7704  12D1  2AE0               	goto	l8594
  7705                           
  7706                           ;SwitchBypass.c: 85: if (switchBypass_up == 1) {
  7707  12D2  0024               	movlb	4	; select bank4
  7708  12D3  0362               	decf	_switchBypass_up^(0+512),w
  7709  12D4  0463               	iorwf	(_switchBypass_up+1)^(0+512),w
  7710  12D5  1D03               	btfss	3,2
  7711  12D6  2AEE               	goto	l1266
  7712                           
  7713                           ;SwitchBypass.c: 86: currentBypassState = 1;
  7714  12D7  0023               	movlb	3	; select bank3
  7715  12D8  01DB               	clrf	_currentBypassState^(0+384)
  7716  12D9  0ADB               	incf	_currentBypassState^(0+384),f
  7717                           
  7718                           ;SwitchBypass.c: 87: switchBypass_toggle = 1;
  7719  12DA  3001               	movlw	1
  7720  12DB  0024               	movlb	4	; select bank4
  7721  12DC  00D5               	movwf	_switchBypass_toggle^(0+512)
  7722  12DD  3000               	movlw	0
  7723  12DE  00D6               	movwf	(_switchBypass_toggle^(0+512)+1)
  7724                           
  7725                           ;SwitchBypass.c: 88: }
  7726                           ;SwitchBypass.c: 89: } else {
  7727  12DF  2AEE               	goto	l1266
  7728  12E0                     l8594:	
  7729                           
  7730                           ;SwitchBypass.c: 90: if (bypass_turning_on != 1) {
  7731  12E0  0023               	movlb	3	; select bank3
  7732  12E1  033E               	decf	_bypass_turning_on^(0+384),w
  7733  12E2  1903               	btfsc	3,2
  7734  12E3  2AEE               	goto	l1266
  7735                           
  7736                           ;SwitchBypass.c: 92: currentBypassState = 0;
  7737  12E4  01DB               	clrf	_currentBypassState^(0+384)
  7738                           
  7739                           ;SwitchBypass.c: 94: bypass_turning_on = 1;
  7740  12E5  01BE               	clrf	_bypass_turning_on^(0+384)
  7741  12E6  0ABE               	incf	_bypass_turning_on^(0+384),f
  7742                           
  7743                           ;SwitchBypass.c: 95: switchBypass_toggle = 0;
  7744  12E7  0024               	movlb	4	; select bank4
  7745  12E8  01D5               	clrf	_switchBypass_toggle^(0+512)
  7746  12E9  01D6               	clrf	(_switchBypass_toggle+1)^(0+512)
  7747                           
  7748                           ;SwitchBypass.c: 97: longBypass_state = 0;
  7749  12EA  0020               	movlb	0	; select bank0
  7750  12EB  01E6               	clrf	_longBypass_state	;volatile
  7751                           
  7752                           ;SwitchBypass.c: 98: longBypass_start = 0;
  7753  12EC  0022               	movlb	2	; select bank2
  7754  12ED  01EA               	clrf	_longBypass_start^(0+256)
  7755  12EE                     l1266:	
  7756                           
  7757                           ;SwitchBypass.c: 99: }
  7758                           ;SwitchBypass.c: 100: }
  7759                           ;SwitchBypass.c: 102: }
  7760                           ;SwitchBypass.c: 103: switchBypass_up = 0;
  7761  12EE  0024               	movlb	4	; select bank4
  7762  12EF  01E2               	clrf	_switchBypass_up^(0+512)
  7763  12F0  01E3               	clrf	(_switchBypass_up+1)^(0+512)
  7764                           
  7765                           ;SwitchBypass.c: 104: } else if (switchBypass_pressed >= 25) {
  7766  12F1  0008               	return
  7767  12F2                     l8600:	
  7768  12F2  0023               	movlb	3	; select bank3
  7769  12F3  083B               	movf	(_switchBypass_pressed+1)^(0+384),w
  7770  12F4  3A80               	xorlw	128
  7771  12F5  0021               	movlb	1	; select bank1
  7772  12F6  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7773  12F7  3080               	movlw	128
  7774  12F8  023C               	subwf	??_updateSwitchBypass^(0+128),w
  7775  12F9  1D03               	skipz
  7776  12FA  2AFE               	goto	u9275
  7777  12FB  3019               	movlw	25
  7778  12FC  0023               	movlb	3	; select bank3
  7779  12FD  023A               	subwf	_switchBypass_pressed^(0+384),w
  7780  12FE                     u9275:	
  7781  12FE  1C03               	skipc
  7782  12FF  0008               	return
  7783                           
  7784                           ;SwitchBypass.c: 105: if (doubleTap_state == 1) {
  7785  1300  0020               	movlb	0	; select bank0
  7786  1301  0365               	decf	_doubleTap_state,w	;volatile
  7787  1302  1D03               	btfss	3,2
  7788  1303  2B0D               	goto	l8606
  7789                           
  7790                           ;SwitchBypass.c: 106: setSwitchBypassState(currentBypassState);
  7791  1304  0023               	movlb	3	; select bank3
  7792  1305  085B               	movf	_currentBypassState^(0+384),w
  7793  1306  0021               	movlb	1	; select bank1
  7794  1307  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7795  1308  01BD               	clrf	(??_updateSwitchBypass^(0+128)+1)
  7796  1309  083C               	movf	??_updateSwitchBypass^(0+128),w
  7797  130A  00B2               	movwf	setSwitchBypassState@f_state^(0+128)
  7798  130B  083D               	movf	(??_updateSwitchBypass+1)^(0+128),w
  7799  130C  2B2A               	goto	L2
  7800  130D                     l8606:	
  7801                           ;SwitchBypass.c: 107: } else if (bypass_turning_on == 1 || longBypass_state == 1) {
  7802                           
  7803  130D  0023               	movlb	3	; select bank3
  7804  130E  033E               	decf	_bypass_turning_on^(0+384),w
  7805  130F  1903               	btfsc	3,2
  7806  1310  2B15               	goto	l8610
  7807  1311  0020               	movlb	0	; select bank0
  7808  1312  0366               	decf	_longBypass_state,w	;volatile
  7809  1313  1D03               	btfss	3,2
  7810  1314  2B1B               	goto	l8612
  7811  1315                     l8610:	
  7812                           
  7813                           ;SwitchBypass.c: 108: setSwitchBypassState(1);
  7814  1315  3001               	movlw	1
  7815  1316  0021               	movlb	1	; select bank1
  7816  1317  00B2               	movwf	setSwitchBypassState@f_state^(0+128)
  7817  1318  3000               	movlw	0
  7818  1319  00B3               	movwf	(setSwitchBypassState@f_state^(0+128)+1)
  7819  131A  2B2B               	goto	L3
  7820  131B                     l8612:	
  7821                           ;SwitchBypass.c: 109: } else if (switchBypass_toggle == 1 && longBypass_state == 0 && do
      +                          ubleTap_state == 0) {
  7822                           
  7823  131B  0024               	movlb	4	; select bank4
  7824  131C  0355               	decf	_switchBypass_toggle^(0+512),w
  7825  131D  0456               	iorwf	(_switchBypass_toggle+1)^(0+512),w
  7826  131E  1D03               	btfss	3,2
  7827  131F  2B2E               	goto	l8620
  7828  1320  0020               	movlb	0	; select bank0
  7829  1321  0866               	movf	_longBypass_state,w	;volatile
  7830  1322  1D03               	btfss	3,2
  7831  1323  2B2E               	goto	l8620
  7832  1324  0865               	movf	_doubleTap_state,w	;volatile
  7833  1325  1D03               	btfss	3,2
  7834  1326  2B2E               	goto	l8620
  7835                           
  7836                           ;SwitchBypass.c: 110: setSwitchBypassState(0);
  7837  1327  3000               	movlw	0
  7838  1328  0021               	movlb	1	; select bank1
  7839  1329  00B2               	movwf	setSwitchBypassState@f_state^(0+128)
  7840  132A                     L2:	
  7841  132A  00B3               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
  7842  132B                     L3:	
  7843  132B  31A5  2567  3192   	fcall	_setSwitchBypassState
  7844  132E                     l8620:	
  7845                           
  7846                           ;SwitchBypass.c: 111: }
  7847                           ;SwitchBypass.c: 113: longBypass_down = 0;
  7848  132E  0023               	movlb	3	; select bank3
  7849  132F  01C0               	clrf	_longBypass_down^(0+384)
  7850                           
  7851                           ;SwitchBypass.c: 114: if (longBypass_state == 0) {
  7852  1330  0020               	movlb	0	; select bank0
  7853  1331  0866               	movf	_longBypass_state,w	;volatile
  7854  1332  1D03               	btfss	3,2
  7855  1333  2B3A               	goto	l8626
  7856                           
  7857                           ;SwitchBypass.c: 115: LATBbits.LATB2 = switchBypass_state;
  7858  1334  0C57               	rrf	_switchBypass_state,w
  7859  1335  0022               	movlb	2	; select bank2
  7860  1336  1C03               	skipc
  7861  1337  110D               	bcf	13,2	;volatile
  7862  1338  1803               	skipnc
  7863  1339  150D               	bsf	13,2	;volatile
  7864  133A                     l8626:	
  7865                           
  7866                           ;SwitchBypass.c: 116: }
  7867                           ;SwitchBypass.c: 118: setDoublePressState(0);
  7868  133A  3000               	movlw	0
  7869  133B  0021               	movlb	1	; select bank1
  7870  133C  00B8               	movwf	setDoublePressState@f_state^(0+128)
  7871  133D  00B9               	movwf	(setDoublePressState@f_state+1)^(0+128)
  7872  133E  31A3  2354         	fcall	_setDoublePressState
  7873                           
  7874                           ;SwitchBypass.c: 119: longBypass_start = 0;
  7875  1340  0022               	movlb	2	; select bank2
  7876  1341  01EA               	clrf	_longBypass_start^(0+256)
  7877                           
  7878                           ;SwitchBypass.c: 120: bypass_turning_on = 0;
  7879  1342  0023               	movlb	3	; select bank3
  7880  1343  01BE               	clrf	_bypass_turning_on^(0+384)
  7881                           
  7882                           ;SwitchBypass.c: 121: switchBypass_toggle = 0;
  7883  1344  0024               	movlb	4	; select bank4
  7884  1345  01D5               	clrf	_switchBypass_toggle^(0+512)
  7885  1346  01D6               	clrf	(_switchBypass_toggle+1)^(0+512)
  7886                           
  7887                           ;SwitchBypass.c: 122: switchBypass_up = 1;
  7888  1347  3001               	movlw	1
  7889  1348  00E2               	movwf	_switchBypass_up^(0+512)
  7890  1349  3000               	movlw	0
  7891  134A  00E3               	movwf	(_switchBypass_up^(0+512)+1)
  7892                           
  7893                           ;SwitchBypass.c: 124: switchBypass_pressed = 25;
  7894  134B  3019               	movlw	25
  7895  134C  0023               	movlb	3	; select bank3
  7896  134D  00BA               	movwf	_switchBypass_pressed^(0+384)
  7897  134E  3000               	movlw	0
  7898  134F  00BB               	movwf	(_switchBypass_pressed^(0+384)+1)
  7899  1350  0008               	return
  7900  1351                     __end_of_updateSwitchBypass:	
  7901                           
  7902                           	psect	text7
  7903  2088                     __ptext7:	
  7904 ;; *************** function _setLongBypassState *****************
  7905 ;; Defined at:
  7906 ;;		line 148 in file "SwitchBypass.c"
  7907 ;; Parameters:    Size  Location     Type
  7908 ;;  f_state         2    0[BANK1 ] int 
  7909 ;; Auto vars:     Size  Location     Type
  7910 ;;		None
  7911 ;; Return value:  Size  Location     Type
  7912 ;;                  1    wreg      void 
  7913 ;; Registers used:
  7914 ;;		wreg, status,0
  7915 ;; Tracked objects:
  7916 ;;		On entry : 0/0
  7917 ;;		On exit  : 0/0
  7918 ;;		Unchanged: 0/0
  7919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7920 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7921 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7922 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7923 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7924 ;;Total ram usage:        4 bytes
  7925 ;; Hardware stack levels used:    1
  7926 ;; Hardware stack levels required when called:    3
  7927 ;; This function calls:
  7928 ;;		Nothing
  7929 ;; This function is called by:
  7930 ;;		_updateSwitchBypass
  7931 ;; This function uses a non-reentrant model
  7932 ;;
  7933                           
  7934                           
  7935                           ;psect for function _setLongBypassState
  7936  2088                     _setLongBypassState:	
  7937                           
  7938                           ;SwitchBypass.c: 149: if (longBypass_state == f_state) {return;}
  7939                           
  7940                           ;incstack = 0
  7941                           ; Regs used in _setLongBypassState: [wreg+status,0]
  7942  2088  0020               	movlb	0	; select bank0
  7943  2089  0866               	movf	_longBypass_state,w	;volatile
  7944  208A  0021               	movlb	1	; select bank1
  7945  208B  00A2               	movwf	??_setLongBypassState^(0+128)
  7946  208C  01A3               	clrf	(??_setLongBypassState^(0+128)+1)
  7947  208D  0821               	movf	(setLongBypassState@f_state+1)^(0+128),w
  7948  208E  0623               	xorwf	(??_setLongBypassState+1)^(0+128),w
  7949  208F  1D03               	skipz
  7950  2090  2893               	goto	u8575
  7951  2091  0820               	movf	setLongBypassState@f_state^(0+128),w
  7952  2092  0622               	xorwf	??_setLongBypassState^(0+128),w
  7953  2093                     u8575:	
  7954  2093  1903               	btfsc	3,2
  7955  2094  0008               	return
  7956                           
  7957                           ;SwitchBypass.c: 150: longBypass_state = f_state;
  7958  2095  0820               	movf	setLongBypassState@f_state^(0+128),w
  7959  2096  00A2               	movwf	??_setLongBypassState^(0+128)
  7960  2097  0822               	movf	??_setLongBypassState^(0+128),w
  7961  2098  0020               	movlb	0	; select bank0
  7962  2099  00E6               	movwf	_longBypass_state	;volatile
  7963                           
  7964                           ;SwitchBypass.c: 151: LATBbits.LATB3 = f_state;
  7965  209A  0021               	movlb	1	; select bank1
  7966  209B  0C20               	rrf	setLongBypassState@f_state^(0+128),w
  7967  209C  0022               	movlb	2	; select bank2
  7968  209D  1C03               	skipc
  7969  209E  118D               	bcf	13,3	;volatile
  7970  209F  1803               	skipnc
  7971  20A0  158D               	bsf	13,3	;volatile
  7972                           
  7973                           ;SwitchBypass.c: 152: PORTCbits.RC4 = f_state;
  7974  20A1  0021               	movlb	1	; select bank1
  7975  20A2  0C20               	rrf	setLongBypassState@f_state^(0+128),w
  7976  20A3  0020               	movlb	0	; select bank0
  7977  20A4  1C03               	skipc
  7978  20A5  120E               	bcf	14,4	;volatile
  7979  20A6  1803               	skipnc
  7980  20A7  160E               	bsf	14,4	;volatile
  7981  20A8  0008               	return
  7982  20A9                     __end_of_setLongBypassState:	
  7983                           
  7984                           	psect	text8
  7985  2354                     __ptext8:	
  7986 ;; *************** function _setDoublePressState *****************
  7987 ;; Defined at:
  7988 ;;		line 21 in file "preset_programming.c"
  7989 ;; Parameters:    Size  Location     Type
  7990 ;;  f_state         2   24[BANK1 ] int 
  7991 ;; Auto vars:     Size  Location     Type
  7992 ;;		None
  7993 ;; Return value:  Size  Location     Type
  7994 ;;                  1    wreg      void 
  7995 ;; Registers used:
  7996 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7997 ;; Tracked objects:
  7998 ;;		On entry : 0/0
  7999 ;;		On exit  : 0/0
  8000 ;;		Unchanged: 0/0
  8001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8002 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8003 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8004 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8005 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8006 ;;Total ram usage:        4 bytes
  8007 ;; Hardware stack levels used:    1
  8008 ;; Hardware stack levels required when called:    7
  8009 ;; This function calls:
  8010 ;;		_resetRingLEDs
  8011 ;;		_setPedalMode
  8012 ;;		_setPresetDisplay
  8013 ;;		_showSave
  8014 ;;		_wait_ms
  8015 ;; This function is called by:
  8016 ;;		_updateSwitchBypass
  8017 ;;		_updateSwitchTap
  8018 ;; This function uses a non-reentrant model
  8019 ;;
  8020                           
  8021                           
  8022                           ;psect for function _setDoublePressState
  8023  2354                     _setDoublePressState:	
  8024                           
  8025                           ;preset_programming.c: 22: if (doubleTap_state == f_state) {return;}
  8026                           
  8027                           ;incstack = 0
  8028                           ; Regs used in _setDoublePressState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8029  2354  0020               	movlb	0	; select bank0
  8030  2355  0865               	movf	_doubleTap_state,w	;volatile
  8031  2356  0021               	movlb	1	; select bank1
  8032  2357  00BA               	movwf	??_setDoublePressState^(0+128)
  8033  2358  01BB               	clrf	(??_setDoublePressState^(0+128)+1)
  8034  2359  0839               	movf	(setDoublePressState@f_state+1)^(0+128),w
  8035  235A  063B               	xorwf	(??_setDoublePressState+1)^(0+128),w
  8036  235B  1D03               	skipz
  8037  235C  2B5F               	goto	u8585
  8038  235D  0838               	movf	setDoublePressState@f_state^(0+128),w
  8039  235E  063A               	xorwf	??_setDoublePressState^(0+128),w
  8040  235F                     u8585:	
  8041  235F  1903               	btfsc	3,2
  8042  2360  0008               	return
  8043                           
  8044                           ;preset_programming.c: 23: doubleTap_state = f_state;
  8045  2361  0838               	movf	setDoublePressState@f_state^(0+128),w
  8046  2362  00BA               	movwf	??_setDoublePressState^(0+128)
  8047  2363  083A               	movf	??_setDoublePressState^(0+128),w
  8048  2364  0020               	movlb	0	; select bank0
  8049  2365  00E5               	movwf	_doubleTap_state	;volatile
  8050                           
  8051                           ;preset_programming.c: 24: if (f_state == 1) {
  8052  2366  0021               	movlb	1	; select bank1
  8053  2367  0338               	decf	setDoublePressState@f_state^(0+128),w
  8054  2368  0439               	iorwf	(setDoublePressState@f_state+1)^(0+128),w
  8055  2369  1D03               	btfss	3,2
  8056  236A  2B6E               	goto	l8212
  8057                           
  8058                           ;preset_programming.c: 25: LATBbits.LATB4 = 0;
  8059  236B  0022               	movlb	2	; select bank2
  8060  236C  120D               	bcf	13,4	;volatile
  8061                           
  8062                           ;preset_programming.c: 27: LATBbits.LATB5 = 0;
  8063  236D  128D               	bcf	13,5	;volatile
  8064  236E                     l8212:	
  8065                           
  8066                           ;preset_programming.c: 30: }
  8067                           ;preset_programming.c: 32: if (doubleTap_state == 1) {
  8068  236E  0020               	movlb	0	; select bank0
  8069  236F  0365               	decf	_doubleTap_state,w	;volatile
  8070  2370  1D03               	btfss	3,2
  8071  2371  2B8A               	goto	l8228
  8072                           
  8073                           ;preset_programming.c: 33: if (presetSaveMode == 0) {
  8074  2372  0868               	movf	_presetSaveMode,w
  8075  2373  1D03               	btfss	3,2
  8076  2374  2B7F               	goto	l8220
  8077                           
  8078                           ;preset_programming.c: 34: presetSaveMode = 1;
  8079  2375  01E8               	clrf	_presetSaveMode
  8080  2376  0AE8               	incf	_presetSaveMode,f
  8081                           
  8082                           ;preset_programming.c: 35: LATBbits.LATB1 = 0;
  8083  2377  0022               	movlb	2	; select bank2
  8084  2378  108D               	bcf	13,1	;volatile
  8085                           
  8086                           ;preset_programming.c: 36: setPresetDisplay(presetChannel);
  8087  2379  0020               	movlb	0	; select bank0
  8088  237A  0856               	movf	_presetChannel,w
  8089  237B  31A2  2266  31A3   	fcall	_setPresetDisplay
  8090                           
  8091                           ;preset_programming.c: 37: } else {
  8092  237E  2B8A               	goto	l8228
  8093  237F                     l8220:	
  8094                           
  8095                           ;preset_programming.c: 39: presetSaveMode = 0;
  8096  237F  0020               	movlb	0	; select bank0
  8097  2380  01E8               	clrf	_presetSaveMode
  8098                           
  8099                           ;preset_programming.c: 40: setPedalMode();
  8100  2381  31A0  20CB  31A3   	fcall	_setPedalMode
  8101                           
  8102                           ;preset_programming.c: 41: resetRingLEDs();
  8103  2384  31AF  27CC  31A3   	fcall	_resetRingLEDs
  8104                           
  8105                           ;preset_programming.c: 42: showSave();
  8106  2387  31A0  2002  31A3   	fcall	_showSave
  8107  238A                     l8228:	
  8108                           
  8109                           ;preset_programming.c: 44: }
  8110                           ;preset_programming.c: 45: }
  8111                           ;preset_programming.c: 47: wait_ms(20);
  8112  238A  3014               	movlw	20
  8113  238B  0021               	movlb	1	; select bank1
  8114  238C  00AC               	movwf	wait_ms@timeSec^(0+128)
  8115  238D  3000               	movlw	0
  8116  238E  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8117  238F  31A1  21FC         	fcall	_wait_ms
  8118  2391  0008               	return
  8119  2392                     __end_of_setDoublePressState:	
  8120                           
  8121                           	psect	text9
  8122  2002                     __ptext9:	
  8123 ;; *************** function _showSave *****************
  8124 ;; Defined at:
  8125 ;;		line 112 in file "LEDs.c"
  8126 ;; Parameters:    Size  Location     Type
  8127 ;;		None
  8128 ;; Auto vars:     Size  Location     Type
  8129 ;;		None
  8130 ;; Return value:  Size  Location     Type
  8131 ;;                  1    wreg      void 
  8132 ;; Registers used:
  8133 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8134 ;; Tracked objects:
  8135 ;;		On entry : 0/0
  8136 ;;		On exit  : 0/0
  8137 ;;		Unchanged: 0/0
  8138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8141 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8142 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8143 ;;Total ram usage:        1 bytes
  8144 ;; Hardware stack levels used:    1
  8145 ;; Hardware stack levels required when called:    6
  8146 ;; This function calls:
  8147 ;;		_ring_tactiles
  8148 ;;		_solidring_tactiles
  8149 ;; This function is called by:
  8150 ;;		_setDoublePressState
  8151 ;; This function uses a non-reentrant model
  8152 ;;
  8153                           
  8154                           
  8155                           ;psect for function _showSave
  8156  2002                     _showSave:	
  8157                           
  8158                           ;LEDs.c: 113: suspend_blink = 1;
  8159                           
  8160                           ;incstack = 0
  8161                           ; Regs used in _showSave: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8162  2002  3001               	movlw	1
  8163  2003  0021               	movlb	1	; select bank1
  8164  2004  00B7               	movwf	??_showSave^(0+128)
  8165  2005  0837               	movf	??_showSave^(0+128),w
  8166  2006  0020               	movlb	0	; select bank0
  8167  2007  00E9               	movwf	_suspend_blink	;volatile
  8168                           
  8169                           ;LEDs.c: 114: ring_tactiles();
  8170  2008  31A6  2694  31A0   	fcall	_ring_tactiles
  8171                           
  8172                           ;LEDs.c: 115: ring_tactiles();
  8173  200B  31A6  2694  31A0   	fcall	_ring_tactiles
  8174                           
  8175                           ;LEDs.c: 116: solidring_tactiles();
  8176  200E  31A3  23D2  31A0   	fcall	_solidring_tactiles
  8177                           
  8178                           ;LEDs.c: 117: solidring_tactiles();
  8179  2011  31A3  23D2         	fcall	_solidring_tactiles
  8180                           
  8181                           ;LEDs.c: 118: suspend_blink = 0;
  8182  2013  0020               	movlb	0	; select bank0
  8183  2014  01E9               	clrf	_suspend_blink	;volatile
  8184  2015  0008               	return
  8185  2016                     __end_of_showSave:	
  8186                           
  8187                           	psect	text10
  8188  23D2                     __ptext10:	
  8189 ;; *************** function _solidring_tactiles *****************
  8190 ;; Defined at:
  8191 ;;		line 208 in file "LEDs.c"
  8192 ;; Parameters:    Size  Location     Type
  8193 ;;		None
  8194 ;; Auto vars:     Size  Location     Type
  8195 ;;  ring_delay      1   20[BANK1 ] unsigned char 
  8196 ;; Return value:  Size  Location     Type
  8197 ;;                  1    wreg      void 
  8198 ;; Registers used:
  8199 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8200 ;; Tracked objects:
  8201 ;;		On entry : 0/0
  8202 ;;		On exit  : 0/0
  8203 ;;		Unchanged: 0/0
  8204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8206 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8207 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8208 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8209 ;;Total ram usage:        3 bytes
  8210 ;; Hardware stack levels used:    1
  8211 ;; Hardware stack levels required when called:    5
  8212 ;; This function calls:
  8213 ;;		_set_leds_bottom
  8214 ;;		_set_leds_top
  8215 ;;		_wait_ms
  8216 ;; This function is called by:
  8217 ;;		_showSave
  8218 ;;		_showBootSequence
  8219 ;; This function uses a non-reentrant model
  8220 ;;
  8221                           
  8222                           
  8223                           ;psect for function _solidring_tactiles
  8224  23D2                     _solidring_tactiles:	
  8225                           
  8226                           ;LEDs.c: 209: uint8_t ring_delay = 30;
  8227                           
  8228                           ;incstack = 0
  8229                           ; Regs used in _solidring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8230  23D2  301E               	movlw	30
  8231  23D3  0021               	movlb	1	; select bank1
  8232  23D4  00B2               	movwf	??_solidring_tactiles^(0+128)
  8233  23D5  0832               	movf	??_solidring_tactiles^(0+128),w
  8234  23D6  00B4               	movwf	solidring_tactiles@ring_delay^(0+128)
  8235                           
  8236                           ;LEDs.c: 210: set_leds_top(100, 1);
  8237  23D7  3064               	movlw	100
  8238  23D8  00A0               	movwf	set_leds_top@x^(0+128)
  8239  23D9  3000               	movlw	0
  8240  23DA  00A1               	movwf	(set_leds_top@x^(0+128)+1)
  8241  23DB  3001               	movlw	1
  8242  23DC  00A2               	movwf	set_leds_top@ledState^(0+128)
  8243  23DD  3000               	movlw	0
  8244  23DE  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8245  23DF  3198  2004  31A3   	fcall	_set_leds_top
  8246                           
  8247                           ;LEDs.c: 211: set_leds_bottom(100);
  8248  23E2  3064               	movlw	100
  8249  23E3  0021               	movlb	1	; select bank1
  8250  23E4  00A0               	movwf	set_leds_bottom@x^(0+128)
  8251  23E5  3000               	movlw	0
  8252  23E6  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8253  23E7  31A2  22A0  31A3   	fcall	_set_leds_bottom
  8254                           
  8255                           ;LEDs.c: 212: wait_ms(ring_delay);
  8256  23EA  0021               	movlb	1	; select bank1
  8257  23EB  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8258  23EC  00B2               	movwf	??_solidring_tactiles^(0+128)
  8259  23ED  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8260  23EE  0832               	movf	??_solidring_tactiles^(0+128),w
  8261  23EF  00AC               	movwf	wait_ms@timeSec^(0+128)
  8262  23F0  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8263  23F1  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8264  23F2  31A1  21FC  31A3   	fcall	_wait_ms
  8265                           
  8266                           ;LEDs.c: 214: set_leds_top(0, 1);
  8267  23F5  3000               	movlw	0
  8268  23F6  0021               	movlb	1	; select bank1
  8269  23F7  00A0               	movwf	set_leds_top@x^(0+128)
  8270  23F8  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8271  23F9  3001               	movlw	1
  8272  23FA  00A2               	movwf	set_leds_top@ledState^(0+128)
  8273  23FB  3000               	movlw	0
  8274  23FC  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8275  23FD  3198  2004  31A3   	fcall	_set_leds_top
  8276                           
  8277                           ;LEDs.c: 215: set_leds_bottom(0);
  8278  2400  3000               	movlw	0
  8279  2401  0021               	movlb	1	; select bank1
  8280  2402  00A0               	movwf	set_leds_bottom@x^(0+128)
  8281  2403  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8282  2404  31A2  22A0  31A3   	fcall	_set_leds_bottom
  8283                           
  8284                           ;LEDs.c: 216: wait_ms(ring_delay);
  8285  2407  0021               	movlb	1	; select bank1
  8286  2408  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8287  2409  00B2               	movwf	??_solidring_tactiles^(0+128)
  8288  240A  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8289  240B  0832               	movf	??_solidring_tactiles^(0+128),w
  8290  240C  00AC               	movwf	wait_ms@timeSec^(0+128)
  8291  240D  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8292  240E  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8293  240F  31A1  21FC         	fcall	_wait_ms
  8294  2411  0008               	return
  8295  2412                     __end_of_solidring_tactiles:	
  8296                           
  8297                           	psect	text11
  8298  2694                     __ptext11:	
  8299 ;; *************** function _ring_tactiles *****************
  8300 ;; Defined at:
  8301 ;;		line 196 in file "LEDs.c"
  8302 ;; Parameters:    Size  Location     Type
  8303 ;;		None
  8304 ;; Auto vars:     Size  Location     Type
  8305 ;;  iLed            2   21[BANK1 ] int 
  8306 ;;  iLed            2   19[BANK1 ] int 
  8307 ;; Return value:  Size  Location     Type
  8308 ;;                  1    wreg      void 
  8309 ;; Registers used:
  8310 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8311 ;; Tracked objects:
  8312 ;;		On entry : 0/0
  8313 ;;		On exit  : 0/0
  8314 ;;		Unchanged: 0/0
  8315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8317 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8318 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8319 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8320 ;;Total ram usage:        5 bytes
  8321 ;; Hardware stack levels used:    1
  8322 ;; Hardware stack levels required when called:    5
  8323 ;; This function calls:
  8324 ;;		_set_leds_bottom
  8325 ;;		_set_leds_top
  8326 ;;		_wait_ms
  8327 ;; This function is called by:
  8328 ;;		_showSave
  8329 ;; This function uses a non-reentrant model
  8330 ;;
  8331                           
  8332                           
  8333                           ;psect for function _ring_tactiles
  8334  2694                     _ring_tactiles:	
  8335                           
  8336                           ;LEDs.c: 197: for (int iLed = 1; iLed < 7; iLed++) {
  8337                           
  8338                           ;incstack = 0
  8339                           ; Regs used in _ring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8340  2694  3001               	movlw	1
  8341  2695  0021               	movlb	1	; select bank1
  8342  2696  00B3               	movwf	ring_tactiles@iLed^(0+128)
  8343  2697  3000               	movlw	0
  8344  2698  00B4               	movwf	(ring_tactiles@iLed^(0+128)+1)
  8345  2699  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8346  269A  3A80               	xorlw	128
  8347  269B  00B2               	movwf	??_ring_tactiles^(0+128)
  8348  269C  3080               	movlw	128
  8349  269D  0232               	subwf	??_ring_tactiles^(0+128),w
  8350  269E  1D03               	skipz
  8351  269F  2EA2               	goto	u8085
  8352  26A0  3007               	movlw	7
  8353  26A1  0233               	subwf	ring_tactiles@iLed^(0+128),w
  8354  26A2                     u8085:	
  8355  26A2  1803               	btfsc	3,0
  8356  26A3  2EC8               	goto	l7742
  8357  26A4                     l7734:	
  8358                           
  8359                           ;LEDs.c: 198: set_leds_top(iLed, 1);
  8360  26A4  0021               	movlb	1	; select bank1
  8361  26A5  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8362  26A6  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8363  26A7  0833               	movf	ring_tactiles@iLed^(0+128),w
  8364  26A8  00A0               	movwf	set_leds_top@x^(0+128)
  8365  26A9  3001               	movlw	1
  8366  26AA  00A2               	movwf	set_leds_top@ledState^(0+128)
  8367  26AB  3000               	movlw	0
  8368  26AC  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8369  26AD  3198  2004  31A6   	fcall	_set_leds_top
  8370                           
  8371                           ;LEDs.c: 199: wait_ms(5);
  8372  26B0  3005               	movlw	5
  8373  26B1  0021               	movlb	1	; select bank1
  8374  26B2  00AC               	movwf	wait_ms@timeSec^(0+128)
  8375  26B3  3000               	movlw	0
  8376  26B4  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8377  26B5  31A1  21FC  31A6   	fcall	_wait_ms
  8378  26B8  3001               	movlw	1
  8379  26B9  0021               	movlb	1	; select bank1
  8380  26BA  07B3               	addwf	ring_tactiles@iLed^(0+128),f
  8381  26BB  3000               	movlw	0
  8382  26BC  3DB4               	addwfc	(ring_tactiles@iLed+1)^(0+128),f
  8383  26BD  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8384  26BE  3A80               	xorlw	128
  8385  26BF  00B2               	movwf	??_ring_tactiles^(0+128)
  8386  26C0  3080               	movlw	128
  8387  26C1  0232               	subwf	??_ring_tactiles^(0+128),w
  8388  26C2  1D03               	skipz
  8389  26C3  2EC6               	goto	u8095
  8390  26C4  3007               	movlw	7
  8391  26C5  0233               	subwf	ring_tactiles@iLed^(0+128),w
  8392  26C6                     u8095:	
  8393  26C6  1C03               	skipc
  8394  26C7  2EA4               	goto	l7734
  8395  26C8                     l7742:	
  8396                           
  8397                           ;LEDs.c: 200: }
  8398                           ;LEDs.c: 201: for (int iLed = 5; iLed > -1; iLed--) {
  8399  26C8  3005               	movlw	5
  8400  26C9  0021               	movlb	1	; select bank1
  8401  26CA  00B5               	movwf	ring_tactiles@iLed_1529^(0+128)
  8402  26CB  3000               	movlw	0
  8403  26CC  00B6               	movwf	(ring_tactiles@iLed_1529^(0+128)+1)
  8404  26CD                     L4:	
  8405  26CD  1BB6               	btfsc	(ring_tactiles@iLed_1529+1)^(0+128),7
  8406  26CE  0008               	return
  8407                           
  8408                           ;LEDs.c: 202: set_leds_bottom(iLed);
  8409  26CF  0836               	movf	(ring_tactiles@iLed_1529+1)^(0+128),w
  8410  26D0  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8411  26D1  0835               	movf	ring_tactiles@iLed_1529^(0+128),w
  8412  26D2  00A0               	movwf	set_leds_bottom@x^(0+128)
  8413  26D3  31A2  22A0  31A6   	fcall	_set_leds_bottom
  8414                           
  8415                           ;LEDs.c: 203: wait_ms(5);
  8416  26D6  3005               	movlw	5
  8417  26D7  0021               	movlb	1	; select bank1
  8418  26D8  00AC               	movwf	wait_ms@timeSec^(0+128)
  8419  26D9  3000               	movlw	0
  8420  26DA  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8421  26DB  31A1  21FC  31A6   	fcall	_wait_ms
  8422  26DE  30FF               	movlw	255
  8423  26DF  0021               	movlb	1	; select bank1
  8424  26E0  07B5               	addwf	ring_tactiles@iLed_1529^(0+128),f
  8425  26E1  30FF               	movlw	255
  8426  26E2  3DB6               	addwfc	(ring_tactiles@iLed_1529+1)^(0+128),f
  8427  26E3  2ECD               	goto	L4
  8428  26E4                     __end_of_ring_tactiles:	
  8429                           
  8430                           	psect	text12
  8431  20CB                     __ptext12:	
  8432 ;; *************** function _setPedalMode *****************
  8433 ;; Defined at:
  8434 ;;		line 119 in file "tactiles.c"
  8435 ;; Parameters:    Size  Location     Type
  8436 ;;		None
  8437 ;; Auto vars:     Size  Location     Type
  8438 ;;		None
  8439 ;; Return value:  Size  Location     Type
  8440 ;;                  1    wreg      void 
  8441 ;; Registers used:
  8442 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8443 ;; Tracked objects:
  8444 ;;		On entry : 0/0
  8445 ;;		On exit  : 0/0
  8446 ;;		Unchanged: 0/0
  8447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8451 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8452 ;;Total ram usage:        0 bytes
  8453 ;; Hardware stack levels used:    1
  8454 ;; Hardware stack levels required when called:    5
  8455 ;; This function calls:
  8456 ;;		_resetRingLEDs
  8457 ;;		_setExpressionDisplay
  8458 ;;		_setPresetDisplay
  8459 ;; This function is called by:
  8460 ;;		_update_mode
  8461 ;;		_setDoublePressState
  8462 ;; This function uses a non-reentrant model
  8463 ;;
  8464                           
  8465                           
  8466                           ;psect for function _setPedalMode
  8467  20CB                     _setPedalMode:	
  8468                           
  8469                           ;tactiles.c: 120: switch (mode2_state) {
  8470                           
  8471                           ;incstack = 0
  8472                           ; Regs used in _setPedalMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8473  20CB  28E2               	goto	l7942
  8474  20CC                     l997:	
  8475                           ;tactiles.c: 121: case 0:
  8476                           
  8477                           
  8478                           ;tactiles.c: 122: LATBbits.LATB1 = 0;
  8479  20CC  0022               	movlb	2	; select bank2
  8480  20CD  108D               	bcf	13,1	;volatile
  8481                           
  8482                           ;tactiles.c: 123: LATBbits.LATB0 = 0;
  8483  20CE  100D               	bcf	13,0	;volatile
  8484                           
  8485                           ;tactiles.c: 124: resetRingLEDs();
  8486  20CF  31AF  27CC         	fcall	_resetRingLEDs
  8487                           
  8488                           ;tactiles.c: 125: break;
  8489  20D1  0008               	return
  8490  20D2                     l999:	
  8491                           ;tactiles.c: 126: case 1:
  8492                           
  8493                           
  8494                           ;tactiles.c: 127: LATBbits.LATB1 = 0;
  8495  20D2  0022               	movlb	2	; select bank2
  8496  20D3  108D               	bcf	13,1	;volatile
  8497                           
  8498                           ;tactiles.c: 128: LATBbits.LATB0 = 1;
  8499  20D4  140D               	bsf	13,0	;volatile
  8500                           
  8501                           ;tactiles.c: 129: setPresetDisplay(presetChannel);
  8502  20D5  0020               	movlb	0	; select bank0
  8503  20D6  0856               	movf	_presetChannel,w
  8504  20D7  31A2  2266         	fcall	_setPresetDisplay
  8505                           
  8506                           ;tactiles.c: 130: break;
  8507  20D9  0008               	return
  8508  20DA                     l1000:	
  8509                           ;tactiles.c: 131: case 2:
  8510                           
  8511                           
  8512                           ;tactiles.c: 132: LATBbits.LATB1 = 1;
  8513  20DA  0022               	movlb	2	; select bank2
  8514  20DB  148D               	bsf	13,1	;volatile
  8515                           
  8516                           ;tactiles.c: 133: LATBbits.LATB0 = 0;
  8517  20DC  100D               	bcf	13,0	;volatile
  8518                           
  8519                           ;tactiles.c: 134: setExpressionDisplay(expressionChannel);
  8520  20DD  0023               	movlb	3	; select bank3
  8521  20DE  085F               	movf	_expressionChannel^(0+384),w
  8522  20DF  31AF  27B4         	fcall	_setExpressionDisplay
  8523                           
  8524                           ;tactiles.c: 136: }
  8525                           
  8526                           ;tactiles.c: 135: break;
  8527  20E1  0008               	return
  8528  20E2                     l7942:	
  8529  20E2  0020               	movlb	0	; select bank0
  8530  20E3  0867               	movf	_mode2_state,w
  8531                           
  8532                           ; Switch size 1, requested type "space"
  8533                           ; Number of cases is 3, Range of values is 0 to 2
  8534                           ; switch strategies available:
  8535                           ; Name         Instructions Cycles
  8536                           ; simple_byte           10     6 (average)
  8537                           ; direct_byte           12     6 (fixed)
  8538                           ; jumptable            260     6 (fixed)
  8539                           ;	Chosen strategy is simple_byte
  8540  20E4  3A00               	xorlw	0	; case 0
  8541  20E5  1903               	skipnz
  8542  20E6  28CC               	goto	l997
  8543  20E7  3A01               	xorlw	1	; case 1
  8544  20E8  1903               	skipnz
  8545  20E9  28D2               	goto	l999
  8546  20EA  3A03               	xorlw	3	; case 2
  8547  20EB  1903               	skipnz
  8548  20EC  28DA               	goto	l1000
  8549  20ED  28EE               	goto	l1001
  8550  20EE                     l1001:	
  8551  20EE  0008               	return
  8552  20EF                     __end_of_setPedalMode:	
  8553                           
  8554                           	psect	text13
  8555  2266                     __ptext13:	
  8556 ;; *************** function _setPresetDisplay *****************
  8557 ;; Defined at:
  8558 ;;		line 51 in file "preset_programming.c"
  8559 ;; Parameters:    Size  Location     Type
  8560 ;;  ledChannel      1    wreg     unsigned char 
  8561 ;; Auto vars:     Size  Location     Type
  8562 ;;  ledChannel      1    6[BANK1 ] unsigned char 
  8563 ;; Return value:  Size  Location     Type
  8564 ;;                  1    wreg      void 
  8565 ;; Registers used:
  8566 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8567 ;; Tracked objects:
  8568 ;;		On entry : 0/0
  8569 ;;		On exit  : 0/0
  8570 ;;		Unchanged: 0/0
  8571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8573 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8574 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8575 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8576 ;;Total ram usage:        3 bytes
  8577 ;; Hardware stack levels used:    1
  8578 ;; Hardware stack levels required when called:    4
  8579 ;; This function calls:
  8580 ;;		_set_leds_bottom
  8581 ;;		_set_leds_top
  8582 ;; This function is called by:
  8583 ;;		_setPedalMode
  8584 ;;		_update_selectMode
  8585 ;;		_setDoublePressState
  8586 ;; This function uses a non-reentrant model
  8587 ;;
  8588                           
  8589                           
  8590                           ;psect for function _setPresetDisplay
  8591  2266                     _setPresetDisplay:	
  8592                           
  8593                           ;incstack = 0
  8594                           ; Regs used in _setPresetDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8595                           ;setPresetDisplay@ledChannel stored from wreg
  8596  2266  0021               	movlb	1	; select bank1
  8597  2267  00A6               	movwf	setPresetDisplay@ledChannel^(0+128)
  8598                           
  8599                           ;preset_programming.c: 52: if (ledChannel < 6) {
  8600  2268  3006               	movlw	6
  8601  2269  0226               	subwf	setPresetDisplay@ledChannel^(0+128),w
  8602  226A  1803               	skipnc
  8603  226B  2A82               	goto	l7762
  8604                           
  8605                           ;preset_programming.c: 53: set_leds_top(ledChannel, 1);
  8606  226C  0826               	movf	setPresetDisplay@ledChannel^(0+128),w
  8607  226D  00A4               	movwf	??_setPresetDisplay^(0+128)
  8608  226E  01A5               	clrf	(??_setPresetDisplay^(0+128)+1)
  8609  226F  0824               	movf	??_setPresetDisplay^(0+128),w
  8610  2270  00A0               	movwf	set_leds_top@x^(0+128)
  8611  2271  0825               	movf	(??_setPresetDisplay+1)^(0+128),w
  8612  2272  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8613  2273  3001               	movlw	1
  8614  2274  00A2               	movwf	set_leds_top@ledState^(0+128)
  8615  2275  3000               	movlw	0
  8616  2276  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8617  2277  3198  2004  31A2   	fcall	_set_leds_top
  8618                           
  8619                           ;preset_programming.c: 54: set_leds_bottom(6);
  8620  227A  3006               	movlw	6
  8621  227B  0021               	movlb	1	; select bank1
  8622  227C  00A0               	movwf	set_leds_bottom@x^(0+128)
  8623  227D  3000               	movlw	0
  8624  227E  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8625  227F  31A2  22A0         	fcall	_set_leds_bottom
  8626                           
  8627                           ;preset_programming.c: 55: } else {
  8628  2281  0008               	return
  8629  2282                     l7762:	
  8630                           
  8631                           ;preset_programming.c: 56: set_leds_top(6, 1);
  8632  2282  3006               	movlw	6
  8633  2283  0021               	movlb	1	; select bank1
  8634  2284  00A0               	movwf	set_leds_top@x^(0+128)
  8635  2285  3000               	movlw	0
  8636  2286  00A1               	movwf	(set_leds_top@x^(0+128)+1)
  8637  2287  3001               	movlw	1
  8638  2288  00A2               	movwf	set_leds_top@ledState^(0+128)
  8639  2289  3000               	movlw	0
  8640  228A  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8641  228B  3198  2004  31A2   	fcall	_set_leds_top
  8642                           
  8643                           ;preset_programming.c: 57: set_leds_bottom(10 - ledChannel + 1);
  8644  228E  0021               	movlb	1	; select bank1
  8645  228F  0826               	movf	setPresetDisplay@ledChannel^(0+128),w
  8646  2290  00A4               	movwf	??_setPresetDisplay^(0+128)
  8647  2291  01A5               	clrf	(??_setPresetDisplay^(0+128)+1)
  8648  2292  09A4               	comf	??_setPresetDisplay^(0+128),f
  8649  2293  09A5               	comf	(??_setPresetDisplay^(0+128)+1),f
  8650  2294  0AA4               	incf	??_setPresetDisplay^(0+128),f
  8651  2295  1903               	skipnz
  8652  2296  0AA5               	incf	(??_setPresetDisplay^(0+128)+1),f
  8653  2297  0824               	movf	??_setPresetDisplay^(0+128),w
  8654  2298  3E0B               	addlw	11
  8655  2299  00A0               	movwf	set_leds_bottom@x^(0+128)
  8656  229A  3000               	movlw	0
  8657  229B  3D25               	addwfc	(??_setPresetDisplay+1)^(0+128),w
  8658  229C  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8659  229D  31A2  22A0         	fcall	_set_leds_bottom
  8660  229F  0008               	return
  8661  22A0                     __end_of_setPresetDisplay:	
  8662                           
  8663                           	psect	text14
  8664  2FB4                     __ptext14:	
  8665 ;; *************** function _setExpressionDisplay *****************
  8666 ;; Defined at:
  8667 ;;		line 66 in file "preset_programming.c"
  8668 ;; Parameters:    Size  Location     Type
  8669 ;;  ledChannel      1    wreg     unsigned char 
  8670 ;; Auto vars:     Size  Location     Type
  8671 ;;  ledChannel      1    6[BANK1 ] unsigned char 
  8672 ;; Return value:  Size  Location     Type
  8673 ;;                  1    wreg      void 
  8674 ;; Registers used:
  8675 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8676 ;; Tracked objects:
  8677 ;;		On entry : 0/0
  8678 ;;		On exit  : 0/0
  8679 ;;		Unchanged: 0/0
  8680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8682 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8683 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8684 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8685 ;;Total ram usage:        3 bytes
  8686 ;; Hardware stack levels used:    1
  8687 ;; Hardware stack levels required when called:    4
  8688 ;; This function calls:
  8689 ;;		_set_leds_bottom
  8690 ;;		_set_leds_top
  8691 ;; This function is called by:
  8692 ;;		_setPedalMode
  8693 ;;		_update_selectMode
  8694 ;; This function uses a non-reentrant model
  8695 ;;
  8696                           
  8697                           
  8698                           ;psect for function _setExpressionDisplay
  8699  2FB4                     _setExpressionDisplay:	
  8700                           
  8701                           ;incstack = 0
  8702                           ; Regs used in _setExpressionDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8703                           ;setExpressionDisplay@ledChannel stored from wreg
  8704  2FB4  0021               	movlb	1	; select bank1
  8705  2FB5  00A6               	movwf	setExpressionDisplay@ledChannel^(0+128)
  8706                           
  8707                           ;preset_programming.c: 67: set_leds_top(ledChannel, 1);
  8708  2FB6  0826               	movf	setExpressionDisplay@ledChannel^(0+128),w
  8709  2FB7  00A4               	movwf	??_setExpressionDisplay^(0+128)
  8710  2FB8  01A5               	clrf	(??_setExpressionDisplay^(0+128)+1)
  8711  2FB9  0824               	movf	??_setExpressionDisplay^(0+128),w
  8712  2FBA  00A0               	movwf	set_leds_top@x^(0+128)
  8713  2FBB  0825               	movf	(??_setExpressionDisplay+1)^(0+128),w
  8714  2FBC  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8715  2FBD  3001               	movlw	1
  8716  2FBE  00A2               	movwf	set_leds_top@ledState^(0+128)
  8717  2FBF  3000               	movlw	0
  8718  2FC0  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8719  2FC1  3198  2004  31AF   	fcall	_set_leds_top
  8720                           
  8721                           ;preset_programming.c: 68: set_leds_bottom(6);
  8722  2FC4  3006               	movlw	6
  8723  2FC5  0021               	movlb	1	; select bank1
  8724  2FC6  00A0               	movwf	set_leds_bottom@x^(0+128)
  8725  2FC7  3000               	movlw	0
  8726  2FC8  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8727  2FC9  31A2  22A0         	fcall	_set_leds_bottom
  8728  2FCB  0008               	return
  8729  2FCC                     __end_of_setExpressionDisplay:	
  8730                           
  8731                           	psect	text15
  8732  2FCC                     __ptext15:	
  8733 ;; *************** function _resetRingLEDs *****************
  8734 ;; Defined at:
  8735 ;;		line 61 in file "preset_programming.c"
  8736 ;; Parameters:    Size  Location     Type
  8737 ;;		None
  8738 ;; Auto vars:     Size  Location     Type
  8739 ;;		None
  8740 ;; Return value:  Size  Location     Type
  8741 ;;                  1    wreg      void 
  8742 ;; Registers used:
  8743 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8744 ;; Tracked objects:
  8745 ;;		On entry : 0/0
  8746 ;;		On exit  : 0/0
  8747 ;;		Unchanged: 0/0
  8748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8750 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8752 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8753 ;;Total ram usage:        0 bytes
  8754 ;; Hardware stack levels used:    1
  8755 ;; Hardware stack levels required when called:    4
  8756 ;; This function calls:
  8757 ;;		_set_leds_bottom
  8758 ;;		_set_leds_top
  8759 ;; This function is called by:
  8760 ;;		_update_mode
  8761 ;;		_setPedalMode
  8762 ;;		_setDoublePressState
  8763 ;; This function uses a non-reentrant model
  8764 ;;
  8765                           
  8766                           
  8767                           ;psect for function _resetRingLEDs
  8768  2FCC                     _resetRingLEDs:	
  8769                           
  8770                           ;preset_programming.c: 62: set_leds_top(top_push_state, 1);
  8771                           
  8772                           ;incstack = 0
  8773                           ; Regs used in _resetRingLEDs: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8774  2FCC  0020               	movlb	0	; select bank0
  8775  2FCD  0852               	movf	_top_push_state+1,w
  8776  2FCE  0021               	movlb	1	; select bank1
  8777  2FCF  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8778  2FD0  0020               	movlb	0	; select bank0
  8779  2FD1  0851               	movf	_top_push_state,w
  8780  2FD2  0021               	movlb	1	; select bank1
  8781  2FD3  00A0               	movwf	set_leds_top@x^(0+128)
  8782  2FD4  3001               	movlw	1
  8783  2FD5  00A2               	movwf	set_leds_top@ledState^(0+128)
  8784  2FD6  3000               	movlw	0
  8785  2FD7  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8786  2FD8  3198  2004  31AF   	fcall	_set_leds_top
  8787                           
  8788                           ;preset_programming.c: 63: set_leds_bottom(bottom_push_state);
  8789  2FDB  0020               	movlb	0	; select bank0
  8790  2FDC  084E               	movf	_bottom_push_state+1,w
  8791  2FDD  0021               	movlb	1	; select bank1
  8792  2FDE  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8793  2FDF  0020               	movlb	0	; select bank0
  8794  2FE0  084D               	movf	_bottom_push_state,w
  8795  2FE1  0021               	movlb	1	; select bank1
  8796  2FE2  00A0               	movwf	set_leds_bottom@x^(0+128)
  8797  2FE3  31A2  22A0         	fcall	_set_leds_bottom
  8798  2FE5  0008               	return
  8799  2FE6                     __end_of_resetRingLEDs:	
  8800                           
  8801                           	psect	text16
  8802  0A36                     __ptext16:	
  8803 ;; *************** function _updateModulationArray *****************
  8804 ;; Defined at:
  8805 ;;		line 24 in file "modulation.c"
  8806 ;; Parameters:    Size  Location     Type
  8807 ;;		None
  8808 ;; Auto vars:     Size  Location     Type
  8809 ;;  thisAngle       2   52[BANK2 ] int 
  8810 ;;  iAngle          1   54[BANK2 ] unsigned char 
  8811 ;; Return value:  Size  Location     Type
  8812 ;;                  1    wreg      void 
  8813 ;; Registers used:
  8814 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8815 ;; Tracked objects:
  8816 ;;		On entry : 0/0
  8817 ;;		On exit  : 0/0
  8818 ;;		Unchanged: 0/0
  8819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8821 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8822 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8823 ;;      Totals:         0       0       0       7       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8824 ;;Total ram usage:        7 bytes
  8825 ;; Hardware stack levels used:    1
  8826 ;; Hardware stack levels required when called:    7
  8827 ;; This function calls:
  8828 ;;		___awtoft
  8829 ;;		___wmul
  8830 ;;		_modSaw
  8831 ;;		_modSawRev
  8832 ;;		_modSin
  8833 ;;		_modSquare
  8834 ;;		_modTri
  8835 ;; This function is called by:
  8836 ;;		_main
  8837 ;; This function uses a non-reentrant model
  8838 ;;
  8839                           
  8840                           
  8841                           ;psect for function _updateModulationArray
  8842  0A36                     _updateModulationArray:	
  8843                           
  8844                           ;modulation.c: 25: if (modArray[120] == bottom_push_state && modArray[121] == symmetry) 
      +                          {
  8845                           
  8846                           ;incstack = 0
  8847                           ; Regs used in _updateModulationArray: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8848  0A36  307E               	movlw	126
  8849  0A37  0086               	movwf	6
  8850  0A38  3024               	movlw	36
  8851  0A39  0087               	movwf	7
  8852  0A3A  3F40               	moviw [0]fsr1
  8853  0A3B  0022               	movlb	2	; select bank2
  8854  0A3C  00D0               	movwf	??_updateModulationArray^(0+256)
  8855  0A3D  3F41               	moviw [1]fsr1
  8856  0A3E  00D1               	movwf	(??_updateModulationArray^(0+256)+1)
  8857  0A3F  0020               	movlb	0	; select bank0
  8858  0A40  084E               	movf	_bottom_push_state+1,w
  8859  0A41  0022               	movlb	2	; select bank2
  8860  0A42  0651               	xorwf	(??_updateModulationArray+1)^(0+256),w
  8861  0A43  1D03               	skipz
  8862  0A44  2A49               	goto	u8925
  8863  0A45  0020               	movlb	0	; select bank0
  8864  0A46  084D               	movf	_bottom_push_state,w
  8865  0A47  0022               	movlb	2	; select bank2
  8866  0A48  0650               	xorwf	??_updateModulationArray^(0+256),w
  8867  0A49                     u8925:	
  8868  0A49  1D03               	skipz
  8869  0A4A  2A5F               	goto	l8450
  8870  0A4B  3080               	movlw	128
  8871  0A4C  0086               	movwf	6
  8872  0A4D  3024               	movlw	36
  8873  0A4E  0087               	movwf	7
  8874  0A4F  3F40               	moviw [0]fsr1
  8875  0A50  00D0               	movwf	??_updateModulationArray^(0+256)
  8876  0A51  3F41               	moviw [1]fsr1
  8877  0A52  00D1               	movwf	(??_updateModulationArray^(0+256)+1)
  8878  0A53  0023               	movlb	3	; select bank3
  8879  0A54  0857               	movf	(_symmetry+1)^(0+384),w
  8880  0A55  0022               	movlb	2	; select bank2
  8881  0A56  0651               	xorwf	(??_updateModulationArray+1)^(0+256),w
  8882  0A57  1D03               	skipz
  8883  0A58  2A5D               	goto	u8935
  8884  0A59  0023               	movlb	3	; select bank3
  8885  0A5A  0856               	movf	_symmetry^(0+384),w
  8886  0A5B  0022               	movlb	2	; select bank2
  8887  0A5C  0650               	xorwf	??_updateModulationArray^(0+256),w
  8888  0A5D                     u8935:	
  8889  0A5D  1903               	btfsc	3,2
  8890  0A5E  0008               	return
  8891  0A5F                     l8450:	
  8892                           ;modulation.c: 27: return;
  8893                           
  8894                           
  8895                           ;modulation.c: 28: }
  8896                           ;modulation.c: 29: for (char iAngle = 0; iAngle < 60; iAngle++) {
  8897  0A5F  01D6               	clrf	updateModulationArray@iAngle^(0+256)
  8898  0A60  303C               	movlw	60
  8899  0A61  0256               	subwf	updateModulationArray@iAngle^(0+256),w
  8900  0A62  1803               	btfsc	3,0
  8901  0A63  2C0A               	goto	l8478
  8902  0A64                     l8456:	
  8903                           
  8904                           ;modulation.c: 30: int thisAngle = 6 * iAngle;
  8905  0A64  0856               	movf	updateModulationArray@iAngle^(0+256),w
  8906  0A65  00D0               	movwf	??_updateModulationArray^(0+256)
  8907  0A66  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  8908  0A67  0850               	movf	??_updateModulationArray^(0+256),w
  8909  0A68  00AE               	movwf	___wmul@multiplier^(0+256)
  8910  0A69  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  8911  0A6A  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
  8912  0A6B  3006               	movlw	6
  8913  0A6C  00B0               	movwf	___wmul@multiplicand^(0+256)
  8914  0A6D  3000               	movlw	0
  8915  0A6E  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
  8916  0A6F  31A0  2030  318A   	fcall	___wmul
  8917  0A72  0022               	movlb	2	; select bank2
  8918  0A73  082F               	movf	(?___wmul+1)^(0+256),w
  8919  0A74  00D5               	movwf	(updateModulationArray@thisAngle+1)^(0+256)
  8920  0A75  082E               	movf	?___wmul^(0+256),w
  8921  0A76  00D4               	movwf	updateModulationArray@thisAngle^(0+256)
  8922                           
  8923                           ;modulation.c: 31: switch (bottom_push_state) {
  8924  0A77  2BEA               	goto	l8472
  8925  0A78                     l8458:	
  8926                           ;modulation.c: 32: case 1:
  8927                           
  8928                           
  8929                           ;modulation.c: 33: modArray[iAngle] = modSin(thisAngle, symmetry);
  8930  0A78  0022               	movlb	2	; select bank2
  8931  0A79  0855               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  8932  0A7A  0021               	movlb	1	; select bank1
  8933  0A7B  00A9               	movwf	(___awtoft@c+1)^(0+128)
  8934  0A7C  0022               	movlb	2	; select bank2
  8935  0A7D  0854               	movf	updateModulationArray@thisAngle^(0+256),w
  8936  0A7E  0021               	movlb	1	; select bank1
  8937  0A7F  00A8               	movwf	___awtoft@c^(0+128)
  8938  0A80  31A0  20A9  318A   	fcall	___awtoft
  8939  0A83  0021               	movlb	1	; select bank1
  8940  0A84  0828               	movf	?___awtoft^(0+128),w
  8941  0A85  0022               	movlb	2	; select bank2
  8942  0A86  00B4               	movwf	modSin@angle^(0+256)
  8943  0A87  0021               	movlb	1	; select bank1
  8944  0A88  0829               	movf	(?___awtoft+1)^(0+128),w
  8945  0A89  0022               	movlb	2	; select bank2
  8946  0A8A  00B5               	movwf	(modSin@angle+1)^(0+256)
  8947  0A8B  0021               	movlb	1	; select bank1
  8948  0A8C  082A               	movf	(?___awtoft+2)^(0+128),w
  8949  0A8D  0022               	movlb	2	; select bank2
  8950  0A8E  00B6               	movwf	(modSin@angle+2)^(0+256)
  8951  0A8F  0023               	movlb	3	; select bank3
  8952  0A90  0857               	movf	(_symmetry+1)^(0+384),w
  8953  0A91  0021               	movlb	1	; select bank1
  8954  0A92  00A9               	movwf	(___awtoft@c+1)^(0+128)
  8955  0A93  0023               	movlb	3	; select bank3
  8956  0A94  0856               	movf	_symmetry^(0+384),w
  8957  0A95  0021               	movlb	1	; select bank1
  8958  0A96  00A8               	movwf	___awtoft@c^(0+128)
  8959  0A97  31A0  20A9  318A   	fcall	___awtoft
  8960  0A9A  0021               	movlb	1	; select bank1
  8961  0A9B  0828               	movf	?___awtoft^(0+128),w
  8962  0A9C  0022               	movlb	2	; select bank2
  8963  0A9D  00B7               	movwf	modSin@inflection^(0+256)
  8964  0A9E  0021               	movlb	1	; select bank1
  8965  0A9F  0829               	movf	(?___awtoft+1)^(0+128),w
  8966  0AA0  0022               	movlb	2	; select bank2
  8967  0AA1  00B8               	movwf	(modSin@inflection+1)^(0+256)
  8968  0AA2  0021               	movlb	1	; select bank1
  8969  0AA3  082A               	movf	(?___awtoft+2)^(0+128),w
  8970  0AA4  0022               	movlb	2	; select bank2
  8971  0AA5  00B9               	movwf	(modSin@inflection+2)^(0+256)
  8972  0AA6  3196  2654  318A   	fcall	_modSin
  8973  0AA9  0022               	movlb	2	; select bank2
  8974  0AAA  0856               	movf	updateModulationArray@iAngle^(0+256),w
  8975  0AAB  00D0               	movwf	??_updateModulationArray^(0+256)
  8976  0AAC  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  8977  0AAD  35D0               	lslf	??_updateModulationArray^(0+256),f
  8978  0AAE  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  8979  0AAF  308E               	movlw	142
  8980  0AB0  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  8981  0AB1  3023               	movlw	35
  8982  0AB2  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  8983  0AB3  0850               	movf	??_updateModulationArray^(0+256),w
  8984  0AB4  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  8985  0AB5  0086               	movwf	6
  8986  0AB6  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  8987  0AB7  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  8988  0AB8  0087               	movwf	7
  8989  0AB9  0834               	movf	?_modSin^(0+256),w
  8990  0ABA  3FC0               	movwi [0]fsr1
  8991  0ABB  0835               	movf	(?_modSin+1)^(0+256),w
  8992  0ABC  3FC1               	movwi [1]fsr1
  8993                           
  8994                           ;modulation.c: 34: break;
  8995  0ABD  2C01               	goto	l8474
  8996  0ABE                     l8460:	
  8997                           ;modulation.c: 35: case 2:
  8998                           
  8999                           
  9000                           ;modulation.c: 36: modArray[iAngle] = modTri(thisAngle, symmetry);
  9001  0ABE  0022               	movlb	2	; select bank2
  9002  0ABF  0855               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9003  0AC0  0021               	movlb	1	; select bank1
  9004  0AC1  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9005  0AC2  0022               	movlb	2	; select bank2
  9006  0AC3  0854               	movf	updateModulationArray@thisAngle^(0+256),w
  9007  0AC4  0021               	movlb	1	; select bank1
  9008  0AC5  00A8               	movwf	___awtoft@c^(0+128)
  9009  0AC6  31A0  20A9  318A   	fcall	___awtoft
  9010  0AC9  0021               	movlb	1	; select bank1
  9011  0ACA  0828               	movf	?___awtoft^(0+128),w
  9012  0ACB  0022               	movlb	2	; select bank2
  9013  0ACC  00AE               	movwf	modTri@angle^(0+256)
  9014  0ACD  0021               	movlb	1	; select bank1
  9015  0ACE  0829               	movf	(?___awtoft+1)^(0+128),w
  9016  0ACF  0022               	movlb	2	; select bank2
  9017  0AD0  00AF               	movwf	(modTri@angle+1)^(0+256)
  9018  0AD1  0021               	movlb	1	; select bank1
  9019  0AD2  082A               	movf	(?___awtoft+2)^(0+128),w
  9020  0AD3  0022               	movlb	2	; select bank2
  9021  0AD4  00B0               	movwf	(modTri@angle+2)^(0+256)
  9022  0AD5  0023               	movlb	3	; select bank3
  9023  0AD6  0857               	movf	(_symmetry+1)^(0+384),w
  9024  0AD7  0021               	movlb	1	; select bank1
  9025  0AD8  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9026  0AD9  0023               	movlb	3	; select bank3
  9027  0ADA  0856               	movf	_symmetry^(0+384),w
  9028  0ADB  0021               	movlb	1	; select bank1
  9029  0ADC  00A8               	movwf	___awtoft@c^(0+128)
  9030  0ADD  31A0  20A9  318A   	fcall	___awtoft
  9031  0AE0  0021               	movlb	1	; select bank1
  9032  0AE1  0828               	movf	?___awtoft^(0+128),w
  9033  0AE2  0022               	movlb	2	; select bank2
  9034  0AE3  00B1               	movwf	modTri@inflection^(0+256)
  9035  0AE4  0021               	movlb	1	; select bank1
  9036  0AE5  0829               	movf	(?___awtoft+1)^(0+128),w
  9037  0AE6  0022               	movlb	2	; select bank2
  9038  0AE7  00B2               	movwf	(modTri@inflection+1)^(0+256)
  9039  0AE8  0021               	movlb	1	; select bank1
  9040  0AE9  082A               	movf	(?___awtoft+2)^(0+128),w
  9041  0AEA  0022               	movlb	2	; select bank2
  9042  0AEB  00B3               	movwf	(modTri@inflection+2)^(0+256)
  9043  0AEC  318E  2605  318A   	fcall	_modTri
  9044  0AEF  0022               	movlb	2	; select bank2
  9045  0AF0  0856               	movf	updateModulationArray@iAngle^(0+256),w
  9046  0AF1  00D0               	movwf	??_updateModulationArray^(0+256)
  9047  0AF2  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9048  0AF3  35D0               	lslf	??_updateModulationArray^(0+256),f
  9049  0AF4  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9050  0AF5  308E               	movlw	142
  9051  0AF6  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9052  0AF7  3023               	movlw	35
  9053  0AF8  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9054  0AF9  0850               	movf	??_updateModulationArray^(0+256),w
  9055  0AFA  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9056  0AFB  0086               	movwf	6
  9057  0AFC  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9058  0AFD  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9059  0AFE  0087               	movwf	7
  9060  0AFF  082E               	movf	?_modTri^(0+256),w
  9061  0B00  3FC0               	movwi [0]fsr1
  9062  0B01  082F               	movf	(?_modTri+1)^(0+256),w
  9063  0B02  3FC1               	movwi [1]fsr1
  9064                           
  9065                           ;modulation.c: 37: break;
  9066  0B03  2C01               	goto	l8474
  9067  0B04                     l8462:	
  9068                           ;modulation.c: 38: case 3:
  9069                           
  9070                           
  9071                           ;modulation.c: 39: modArray[iAngle] = modSquare(thisAngle, symmetry);
  9072  0B04  0022               	movlb	2	; select bank2
  9073  0B05  0855               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9074  0B06  0021               	movlb	1	; select bank1
  9075  0B07  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9076  0B08  0022               	movlb	2	; select bank2
  9077  0B09  0854               	movf	updateModulationArray@thisAngle^(0+256),w
  9078  0B0A  0021               	movlb	1	; select bank1
  9079  0B0B  00A8               	movwf	___awtoft@c^(0+128)
  9080  0B0C  31A0  20A9  318A   	fcall	___awtoft
  9081  0B0F  0021               	movlb	1	; select bank1
  9082  0B10  0828               	movf	?___awtoft^(0+128),w
  9083  0B11  0022               	movlb	2	; select bank2
  9084  0B12  00C8               	movwf	modSquare@angle^(0+256)
  9085  0B13  0021               	movlb	1	; select bank1
  9086  0B14  0829               	movf	(?___awtoft+1)^(0+128),w
  9087  0B15  0022               	movlb	2	; select bank2
  9088  0B16  00C9               	movwf	(modSquare@angle+1)^(0+256)
  9089  0B17  0021               	movlb	1	; select bank1
  9090  0B18  082A               	movf	(?___awtoft+2)^(0+128),w
  9091  0B19  0022               	movlb	2	; select bank2
  9092  0B1A  00CA               	movwf	(modSquare@angle+2)^(0+256)
  9093  0B1B  0023               	movlb	3	; select bank3
  9094  0B1C  0857               	movf	(_symmetry+1)^(0+384),w
  9095  0B1D  0021               	movlb	1	; select bank1
  9096  0B1E  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9097  0B1F  0023               	movlb	3	; select bank3
  9098  0B20  0856               	movf	_symmetry^(0+384),w
  9099  0B21  0021               	movlb	1	; select bank1
  9100  0B22  00A8               	movwf	___awtoft@c^(0+128)
  9101  0B23  31A0  20A9  318A   	fcall	___awtoft
  9102  0B26  0021               	movlb	1	; select bank1
  9103  0B27  0828               	movf	?___awtoft^(0+128),w
  9104  0B28  0022               	movlb	2	; select bank2
  9105  0B29  00CB               	movwf	modSquare@inflection^(0+256)
  9106  0B2A  0021               	movlb	1	; select bank1
  9107  0B2B  0829               	movf	(?___awtoft+1)^(0+128),w
  9108  0B2C  0022               	movlb	2	; select bank2
  9109  0B2D  00CC               	movwf	(modSquare@inflection+1)^(0+256)
  9110  0B2E  0021               	movlb	1	; select bank1
  9111  0B2F  082A               	movf	(?___awtoft+2)^(0+128),w
  9112  0B30  0022               	movlb	2	; select bank2
  9113  0B31  00CD               	movwf	(modSquare@inflection+2)^(0+256)
  9114  0B32  31A3  2317  318A   	fcall	_modSquare
  9115  0B35  0022               	movlb	2	; select bank2
  9116  0B36  0856               	movf	updateModulationArray@iAngle^(0+256),w
  9117  0B37  00D0               	movwf	??_updateModulationArray^(0+256)
  9118  0B38  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9119  0B39  35D0               	lslf	??_updateModulationArray^(0+256),f
  9120  0B3A  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9121  0B3B  308E               	movlw	142
  9122  0B3C  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9123  0B3D  3023               	movlw	35
  9124  0B3E  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9125  0B3F  0850               	movf	??_updateModulationArray^(0+256),w
  9126  0B40  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9127  0B41  0086               	movwf	6
  9128  0B42  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9129  0B43  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9130  0B44  0087               	movwf	7
  9131  0B45  0848               	movf	?_modSquare^(0+256),w
  9132  0B46  3FC0               	movwi [0]fsr1
  9133  0B47  0849               	movf	(?_modSquare+1)^(0+256),w
  9134  0B48  3FC1               	movwi [1]fsr1
  9135                           
  9136                           ;modulation.c: 40: break;
  9137  0B49  2C01               	goto	l8474
  9138  0B4A                     l8464:	
  9139                           ;modulation.c: 41: case 4:
  9140                           
  9141                           
  9142                           ;modulation.c: 42: modArray[iAngle] = modSaw(thisAngle, symmetry);
  9143  0B4A  0022               	movlb	2	; select bank2
  9144  0B4B  0855               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9145  0B4C  0021               	movlb	1	; select bank1
  9146  0B4D  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9147  0B4E  0022               	movlb	2	; select bank2
  9148  0B4F  0854               	movf	updateModulationArray@thisAngle^(0+256),w
  9149  0B50  0021               	movlb	1	; select bank1
  9150  0B51  00A8               	movwf	___awtoft@c^(0+128)
  9151  0B52  31A0  20A9  318A   	fcall	___awtoft
  9152  0B55  0021               	movlb	1	; select bank1
  9153  0B56  0828               	movf	?___awtoft^(0+128),w
  9154  0B57  0022               	movlb	2	; select bank2
  9155  0B58  00AE               	movwf	modSaw@angle^(0+256)
  9156  0B59  0021               	movlb	1	; select bank1
  9157  0B5A  0829               	movf	(?___awtoft+1)^(0+128),w
  9158  0B5B  0022               	movlb	2	; select bank2
  9159  0B5C  00AF               	movwf	(modSaw@angle+1)^(0+256)
  9160  0B5D  0021               	movlb	1	; select bank1
  9161  0B5E  082A               	movf	(?___awtoft+2)^(0+128),w
  9162  0B5F  0022               	movlb	2	; select bank2
  9163  0B60  00B0               	movwf	(modSaw@angle+2)^(0+256)
  9164  0B61  0023               	movlb	3	; select bank3
  9165  0B62  0857               	movf	(_symmetry+1)^(0+384),w
  9166  0B63  0021               	movlb	1	; select bank1
  9167  0B64  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9168  0B65  0023               	movlb	3	; select bank3
  9169  0B66  0856               	movf	_symmetry^(0+384),w
  9170  0B67  0021               	movlb	1	; select bank1
  9171  0B68  00A8               	movwf	___awtoft@c^(0+128)
  9172  0B69  31A0  20A9  318A   	fcall	___awtoft
  9173  0B6C  0021               	movlb	1	; select bank1
  9174  0B6D  0828               	movf	?___awtoft^(0+128),w
  9175  0B6E  0022               	movlb	2	; select bank2
  9176  0B6F  00B1               	movwf	modSaw@inflection^(0+256)
  9177  0B70  0021               	movlb	1	; select bank1
  9178  0B71  0829               	movf	(?___awtoft+1)^(0+128),w
  9179  0B72  0022               	movlb	2	; select bank2
  9180  0B73  00B2               	movwf	(modSaw@inflection+1)^(0+256)
  9181  0B74  0021               	movlb	1	; select bank1
  9182  0B75  082A               	movf	(?___awtoft+2)^(0+128),w
  9183  0B76  0022               	movlb	2	; select bank2
  9184  0B77  00B3               	movwf	(modSaw@inflection+2)^(0+256)
  9185  0B78  3194  24AA  318A   	fcall	_modSaw
  9186  0B7B  0022               	movlb	2	; select bank2
  9187  0B7C  0856               	movf	updateModulationArray@iAngle^(0+256),w
  9188  0B7D  00D0               	movwf	??_updateModulationArray^(0+256)
  9189  0B7E  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9190  0B7F  35D0               	lslf	??_updateModulationArray^(0+256),f
  9191  0B80  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9192  0B81  308E               	movlw	142
  9193  0B82  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9194  0B83  3023               	movlw	35
  9195  0B84  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9196  0B85  0850               	movf	??_updateModulationArray^(0+256),w
  9197  0B86  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9198  0B87  0086               	movwf	6
  9199  0B88  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9200  0B89  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9201  0B8A  0087               	movwf	7
  9202  0B8B  082E               	movf	?_modSaw^(0+256),w
  9203  0B8C  3FC0               	movwi [0]fsr1
  9204  0B8D  082F               	movf	(?_modSaw+1)^(0+256),w
  9205  0B8E  3FC1               	movwi [1]fsr1
  9206                           
  9207                           ;modulation.c: 43: break;
  9208  0B8F  2C01               	goto	l8474
  9209  0B90                     l8466:	
  9210                           ;modulation.c: 44: case 5:
  9211                           
  9212                           
  9213                           ;modulation.c: 45: modArray[iAngle] = modSawRev(thisAngle, symmetry);
  9214  0B90  0022               	movlb	2	; select bank2
  9215  0B91  0855               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9216  0B92  0021               	movlb	1	; select bank1
  9217  0B93  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9218  0B94  0022               	movlb	2	; select bank2
  9219  0B95  0854               	movf	updateModulationArray@thisAngle^(0+256),w
  9220  0B96  0021               	movlb	1	; select bank1
  9221  0B97  00A8               	movwf	___awtoft@c^(0+128)
  9222  0B98  31A0  20A9  318A   	fcall	___awtoft
  9223  0B9B  0021               	movlb	1	; select bank1
  9224  0B9C  0828               	movf	?___awtoft^(0+128),w
  9225  0B9D  0022               	movlb	2	; select bank2
  9226  0B9E  00C5               	movwf	modSawRev@angle^(0+256)
  9227  0B9F  0021               	movlb	1	; select bank1
  9228  0BA0  0829               	movf	(?___awtoft+1)^(0+128),w
  9229  0BA1  0022               	movlb	2	; select bank2
  9230  0BA2  00C6               	movwf	(modSawRev@angle+1)^(0+256)
  9231  0BA3  0021               	movlb	1	; select bank1
  9232  0BA4  082A               	movf	(?___awtoft+2)^(0+128),w
  9233  0BA5  0022               	movlb	2	; select bank2
  9234  0BA6  00C7               	movwf	(modSawRev@angle+2)^(0+256)
  9235  0BA7  0023               	movlb	3	; select bank3
  9236  0BA8  0857               	movf	(_symmetry+1)^(0+384),w
  9237  0BA9  0021               	movlb	1	; select bank1
  9238  0BAA  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9239  0BAB  0023               	movlb	3	; select bank3
  9240  0BAC  0856               	movf	_symmetry^(0+384),w
  9241  0BAD  0021               	movlb	1	; select bank1
  9242  0BAE  00A8               	movwf	___awtoft@c^(0+128)
  9243  0BAF  31A0  20A9  318A   	fcall	___awtoft
  9244  0BB2  0021               	movlb	1	; select bank1
  9245  0BB3  0828               	movf	?___awtoft^(0+128),w
  9246  0BB4  0022               	movlb	2	; select bank2
  9247  0BB5  00C8               	movwf	modSawRev@inflection^(0+256)
  9248  0BB6  0021               	movlb	1	; select bank1
  9249  0BB7  0829               	movf	(?___awtoft+1)^(0+128),w
  9250  0BB8  0022               	movlb	2	; select bank2
  9251  0BB9  00C9               	movwf	(modSawRev@inflection+1)^(0+256)
  9252  0BBA  0021               	movlb	1	; select bank1
  9253  0BBB  082A               	movf	(?___awtoft+2)^(0+128),w
  9254  0BBC  0022               	movlb	2	; select bank2
  9255  0BBD  00CA               	movwf	(modSawRev@inflection+2)^(0+256)
  9256  0BBE  31A0  204C  318A   	fcall	_modSawRev
  9257  0BC1  0022               	movlb	2	; select bank2
  9258  0BC2  0856               	movf	updateModulationArray@iAngle^(0+256),w
  9259  0BC3  00D0               	movwf	??_updateModulationArray^(0+256)
  9260  0BC4  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9261  0BC5  35D0               	lslf	??_updateModulationArray^(0+256),f
  9262  0BC6  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9263  0BC7  308E               	movlw	142
  9264  0BC8  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9265  0BC9  3023               	movlw	35
  9266  0BCA  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9267  0BCB  0850               	movf	??_updateModulationArray^(0+256),w
  9268  0BCC  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9269  0BCD  0086               	movwf	6
  9270  0BCE  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9271  0BCF  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9272  0BD0  0087               	movwf	7
  9273  0BD1  0845               	movf	?_modSawRev^(0+256),w
  9274  0BD2  3FC0               	movwi [0]fsr1
  9275  0BD3  0846               	movf	(?_modSawRev+1)^(0+256),w
  9276  0BD4  3FC1               	movwi [1]fsr1
  9277                           
  9278                           ;modulation.c: 46: break;
  9279  0BD5  2C01               	goto	l8474
  9280  0BD6                     l8468:	
  9281                           ;modulation.c: 47: default:
  9282                           
  9283                           
  9284                           ;modulation.c: 48: modArray[iAngle] = 0;
  9285  0BD6  0022               	movlb	2	; select bank2
  9286  0BD7  0856               	movf	updateModulationArray@iAngle^(0+256),w
  9287  0BD8  00D0               	movwf	??_updateModulationArray^(0+256)
  9288  0BD9  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9289  0BDA  35D0               	lslf	??_updateModulationArray^(0+256),f
  9290  0BDB  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9291  0BDC  308E               	movlw	142
  9292  0BDD  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9293  0BDE  3023               	movlw	35
  9294  0BDF  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9295  0BE0  0850               	movf	??_updateModulationArray^(0+256),w
  9296  0BE1  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9297  0BE2  0086               	movwf	6
  9298  0BE3  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9299  0BE4  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9300  0BE5  0087               	movwf	7
  9301  0BE6  3000               	movlw	0
  9302  0BE7  3FC0               	movwi [0]fsr1
  9303  0BE8  3FC1               	movwi [1]fsr1
  9304                           
  9305                           ;modulation.c: 50: }
  9306                           
  9307                           ;modulation.c: 49: break;
  9308  0BE9  2C01               	goto	l8474
  9309  0BEA                     l8472:	
  9310                           
  9311                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9312                           ; Switch size 1, requested type "space"
  9313                           ; Number of cases is 1, Range of values is 0 to 0
  9314                           ; switch strategies available:
  9315                           ; Name         Instructions Cycles
  9316                           ; simple_byte            4     3 (average)
  9317                           ; direct_byte            8     6 (fixed)
  9318                           ; jumptable            260     6 (fixed)
  9319                           ;	Chosen strategy is simple_byte
  9320  0BEA  0020               	movlb	0	; select bank0
  9321  0BEB  084E               	movf	_bottom_push_state+1,w
  9322  0BEC  3A00               	xorlw	0	; case 0
  9323  0BED  1903               	skipnz
  9324  0BEE  2BF0               	goto	l9392
  9325  0BEF  2BD6               	goto	l8468
  9326  0BF0                     l9392:	
  9327                           
  9328                           ; Switch size 1, requested type "space"
  9329                           ; Number of cases is 5, Range of values is 1 to 5
  9330                           ; switch strategies available:
  9331                           ; Name         Instructions Cycles
  9332                           ; simple_byte           16     9 (average)
  9333                           ; direct_byte           19     9 (fixed)
  9334                           ; jumptable            263     9 (fixed)
  9335                           ;	Chosen strategy is simple_byte
  9336  0BF0  084D               	movf	_bottom_push_state,w
  9337  0BF1  3A01               	xorlw	1	; case 1
  9338  0BF2  1903               	skipnz
  9339  0BF3  2A78               	goto	l8458
  9340  0BF4  3A03               	xorlw	3	; case 2
  9341  0BF5  1903               	skipnz
  9342  0BF6  2ABE               	goto	l8460
  9343  0BF7  3A01               	xorlw	1	; case 3
  9344  0BF8  1903               	skipnz
  9345  0BF9  2B04               	goto	l8462
  9346  0BFA  3A07               	xorlw	7	; case 4
  9347  0BFB  1903               	skipnz
  9348  0BFC  2B4A               	goto	l8464
  9349  0BFD  3A01               	xorlw	1	; case 5
  9350  0BFE  1903               	skipnz
  9351  0BFF  2B90               	goto	l8466
  9352  0C00  2BD6               	goto	l8468
  9353  0C01                     l8474:	
  9354  0C01  3001               	movlw	1
  9355  0C02  0022               	movlb	2	; select bank2
  9356  0C03  00D0               	movwf	??_updateModulationArray^(0+256)
  9357  0C04  0850               	movf	??_updateModulationArray^(0+256),w
  9358  0C05  07D6               	addwf	updateModulationArray@iAngle^(0+256),f
  9359  0C06  303C               	movlw	60
  9360  0C07  0256               	subwf	updateModulationArray@iAngle^(0+256),w
  9361  0C08  1C03               	skipc
  9362  0C09  2A64               	goto	l8456
  9363  0C0A                     l8478:	
  9364                           
  9365                           ;modulation.c: 51: }
  9366                           ;modulation.c: 52: modArray[120] = bottom_push_state;
  9367  0C0A  307E               	movlw	126
  9368  0C0B  0086               	movwf	6
  9369  0C0C  3024               	movlw	36
  9370  0C0D  0087               	movwf	7
  9371  0C0E  0020               	movlb	0	; select bank0
  9372  0C0F  084D               	movf	_bottom_push_state,w
  9373  0C10  3FC0               	movwi [0]fsr1
  9374  0C11  084E               	movf	_bottom_push_state+1,w
  9375  0C12  3FC1               	movwi [1]fsr1
  9376                           
  9377                           ;modulation.c: 53: modArray[121] = symmetry;
  9378  0C13  3080               	movlw	128
  9379  0C14  0086               	movwf	6
  9380  0C15  3024               	movlw	36
  9381  0C16  0087               	movwf	7
  9382  0C17  0023               	movlb	3	; select bank3
  9383  0C18  0856               	movf	_symmetry^(0+384),w
  9384  0C19  3FC0               	movwi [0]fsr1
  9385  0C1A  0857               	movf	(_symmetry+1)^(0+384),w
  9386  0C1B  3FC1               	movwi [1]fsr1
  9387  0C1C  0008               	return
  9388  0C1D                     __end_of_updateModulationArray:	
  9389                           
  9390                           	psect	text17
  9391  0E05                     __ptext17:	
  9392 ;; *************** function _modTri *****************
  9393 ;; Defined at:
  9394 ;;		line 72 in file "modulation.c"
  9395 ;; Parameters:    Size  Location     Type
  9396 ;;  angle           3   14[BANK2 ] void 
  9397 ;;  inflection      3   17[BANK2 ] void 
  9398 ;; Auto vars:     Size  Location     Type
  9399 ;;  tmpVal          3   29[BANK2 ] void 
  9400 ;;  period          3   26[BANK2 ] void 
  9401 ;;  shift           3   23[BANK2 ] void 
  9402 ;; Return value:  Size  Location     Type
  9403 ;;                  2   14[BANK2 ] int 
  9404 ;; Registers used:
  9405 ;;		wreg, status,2, status,0, pclath, cstack
  9406 ;; Tracked objects:
  9407 ;;		On entry : 0/0
  9408 ;;		On exit  : 0/0
  9409 ;;		Unchanged: 0/0
  9410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9411 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9412 ;;      Locals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9414 ;;      Totals:         0       0       0      18       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9415 ;;Total ram usage:       18 bytes
  9416 ;; Hardware stack levels used:    1
  9417 ;; Hardware stack levels required when called:    5
  9418 ;; This function calls:
  9419 ;;		___ftadd
  9420 ;;		___ftdiv
  9421 ;;		___ftge
  9422 ;;		___ftmul
  9423 ;;		___ftneg
  9424 ;;		___fttol
  9425 ;; This function is called by:
  9426 ;;		_updateModulationArray
  9427 ;; This function uses a non-reentrant model
  9428 ;;
  9429                           
  9430                           
  9431                           ;psect for function _modTri
  9432  0E05                     _modTri:	
  9433                           
  9434                           ;modulation.c: 73: double period = 1.0;
  9435                           
  9436                           ;incstack = 0
  9437                           ; Regs used in _modTri: [wreg+status,2+status,0+pclath+cstack]
  9438  0E05  3000               	movlw	0
  9439  0E06  0022               	movlb	2	; select bank2
  9440  0E07  00BA               	movwf	modTri@period^(0+256)
  9441  0E08  3080               	movlw	128
  9442  0E09  00BB               	movwf	(modTri@period+1)^(0+256)
  9443  0E0A  303F               	movlw	63
  9444  0E0B  00BC               	movwf	(modTri@period+2)^(0+256)
  9445                           
  9446                           ;modulation.c: 74: double shift = 0;
  9447  0E0C  3000               	movlw	0
  9448  0E0D  00B7               	movwf	modTri@shift^(0+256)
  9449  0E0E  3000               	movlw	0
  9450  0E0F  00B8               	movwf	(modTri@shift+1)^(0+256)
  9451  0E10  3000               	movlw	0
  9452  0E11  00B9               	movwf	(modTri@shift+2)^(0+256)
  9453                           
  9454                           ;modulation.c: 76: if(angle<=inflection) {
  9455  0E12  0831               	movf	modTri@inflection^(0+256),w
  9456  0E13  0021               	movlb	1	; select bank1
  9457  0E14  00A0               	movwf	___ftge@ff1^(0+128)
  9458  0E15  0022               	movlb	2	; select bank2
  9459  0E16  0832               	movf	(modTri@inflection+1)^(0+256),w
  9460  0E17  0021               	movlb	1	; select bank1
  9461  0E18  00A1               	movwf	(___ftge@ff1+1)^(0+128)
  9462  0E19  0022               	movlb	2	; select bank2
  9463  0E1A  0833               	movf	(modTri@inflection+2)^(0+256),w
  9464  0E1B  0021               	movlb	1	; select bank1
  9465  0E1C  00A2               	movwf	(___ftge@ff1+2)^(0+128)
  9466  0E1D  0022               	movlb	2	; select bank2
  9467  0E1E  082E               	movf	modTri@angle^(0+256),w
  9468  0E1F  0021               	movlb	1	; select bank1
  9469  0E20  00A3               	movwf	___ftge@ff2^(0+128)
  9470  0E21  0022               	movlb	2	; select bank2
  9471  0E22  082F               	movf	(modTri@angle+1)^(0+256),w
  9472  0E23  0021               	movlb	1	; select bank1
  9473  0E24  00A4               	movwf	(___ftge@ff2+1)^(0+128)
  9474  0E25  0022               	movlb	2	; select bank2
  9475  0E26  0830               	movf	(modTri@angle+2)^(0+256),w
  9476  0E27  0021               	movlb	1	; select bank1
  9477  0E28  00A5               	movwf	(___ftge@ff2+2)^(0+128)
  9478  0E29  31A2  22DB  318E   	fcall	___ftge
  9479  0E2C  1C03               	btfss	3,0
  9480  0E2D  2E3A               	goto	l8278
  9481                           
  9482                           ;modulation.c: 77: period = 180.0/inflection;
  9483  0E2E  0022               	movlb	2	; select bank2
  9484  0E2F  0831               	movf	modTri@inflection^(0+256),w
  9485  0E30  0021               	movlb	1	; select bank1
  9486  0E31  00CE               	movwf	___ftdiv@f2^(0+128)
  9487  0E32  0022               	movlb	2	; select bank2
  9488  0E33  0832               	movf	(modTri@inflection+1)^(0+256),w
  9489  0E34  0021               	movlb	1	; select bank1
  9490  0E35  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
  9491  0E36  0022               	movlb	2	; select bank2
  9492  0E37  0833               	movf	(modTri@inflection+2)^(0+256),w
  9493  0E38  0021               	movlb	1	; select bank1
  9494  0E39  2EF5               	goto	L5
  9495  0E3A                     l8278:	
  9496                           ;modulation.c: 78: } else {
  9497                           
  9498                           
  9499                           ;modulation.c: 79: shift = -(360-inflection*2)*(180/(360-inflection));
  9500  0E3A  0022               	movlb	2	; select bank2
  9501  0E3B  0831               	movf	modTri@inflection^(0+256),w
  9502  0E3C  0021               	movlb	1	; select bank1
  9503  0E3D  00B1               	movwf	___ftmul@f2^(0+128)
  9504  0E3E  0022               	movlb	2	; select bank2
  9505  0E3F  0832               	movf	(modTri@inflection+1)^(0+256),w
  9506  0E40  0021               	movlb	1	; select bank1
  9507  0E41  00B2               	movwf	(___ftmul@f2+1)^(0+128)
  9508  0E42  0022               	movlb	2	; select bank2
  9509  0E43  0833               	movf	(modTri@inflection+2)^(0+256),w
  9510  0E44  0021               	movlb	1	; select bank1
  9511  0E45  00B3               	movwf	(___ftmul@f2+2)^(0+128)
  9512  0E46  3000               	movlw	0
  9513  0E47  00AE               	movwf	___ftmul@f1^(0+128)
  9514  0E48  3000               	movlw	0
  9515  0E49  00AF               	movwf	(___ftmul@f1+1)^(0+128)
  9516  0E4A  3040               	movlw	64
  9517  0E4B  00B0               	movwf	(___ftmul@f1+2)^(0+128)
  9518  0E4C  319E  2691  318E   	fcall	___ftmul
  9519  0E4F  0021               	movlb	1	; select bank1
  9520  0E50  082E               	movf	?___ftmul^(0+128),w
  9521  0E51  00BE               	movwf	___ftneg@f1^(0+128)
  9522  0E52  082F               	movf	(?___ftmul+1)^(0+128),w
  9523  0E53  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9524  0E54  0830               	movf	(?___ftmul+2)^(0+128),w
  9525  0E55  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9526  0E56  31AF  2763  318E   	fcall	___ftneg
  9527  0E59  0021               	movlb	1	; select bank1
  9528  0E5A  083E               	movf	?___ftneg^(0+128),w
  9529  0E5B  00C4               	movwf	___ftadd@f2^(0+128)
  9530  0E5C  083F               	movf	(?___ftneg+1)^(0+128),w
  9531  0E5D  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9532  0E5E  0840               	movf	(?___ftneg+2)^(0+128),w
  9533  0E5F  00C6               	movwf	(___ftadd@f2+2)^(0+128)
  9534  0E60  3000               	movlw	0
  9535  0E61  00C1               	movwf	___ftadd@f1^(0+128)
  9536  0E62  30B4               	movlw	180
  9537  0E63  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9538  0E64  3043               	movlw	67
  9539  0E65  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9540  0E66  3191  2153  318E   	fcall	___ftadd
  9541  0E69  0021               	movlb	1	; select bank1
  9542  0E6A  0841               	movf	?___ftadd^(0+128),w
  9543  0E6B  0022               	movlb	2	; select bank2
  9544  0E6C  00B4               	movwf	_modTri$2820^(0+256)
  9545  0E6D  0021               	movlb	1	; select bank1
  9546  0E6E  0842               	movf	(?___ftadd+1)^(0+128),w
  9547  0E6F  0022               	movlb	2	; select bank2
  9548  0E70  00B5               	movwf	(_modTri$2820+1)^(0+256)
  9549  0E71  0021               	movlb	1	; select bank1
  9550  0E72  0843               	movf	(?___ftadd+2)^(0+128),w
  9551  0E73  0022               	movlb	2	; select bank2
  9552  0E74  00B6               	movwf	(_modTri$2820+2)^(0+256)
  9553                           
  9554                           ;modulation.c: 79: shift = -(360-inflection*2)*(180/(360-inflection));
  9555  0E75  0834               	movf	_modTri$2820^(0+256),w
  9556  0E76  0021               	movlb	1	; select bank1
  9557  0E77  00BE               	movwf	___ftneg@f1^(0+128)
  9558  0E78  0022               	movlb	2	; select bank2
  9559  0E79  0835               	movf	(_modTri$2820+1)^(0+256),w
  9560  0E7A  0021               	movlb	1	; select bank1
  9561  0E7B  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9562  0E7C  0022               	movlb	2	; select bank2
  9563  0E7D  0836               	movf	(_modTri$2820+2)^(0+256),w
  9564  0E7E  0021               	movlb	1	; select bank1
  9565  0E7F  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9566  0E80  31AF  2763  318E   	fcall	___ftneg
  9567  0E83  0021               	movlb	1	; select bank1
  9568  0E84  083E               	movf	?___ftneg^(0+128),w
  9569  0E85  00AE               	movwf	___ftmul@f1^(0+128)
  9570  0E86  083F               	movf	(?___ftneg+1)^(0+128),w
  9571  0E87  00AF               	movwf	(___ftmul@f1+1)^(0+128)
  9572  0E88  0840               	movf	(?___ftneg+2)^(0+128),w
  9573  0E89  00B0               	movwf	(___ftmul@f1+2)^(0+128)
  9574  0E8A  3000               	movlw	0
  9575  0E8B  00C1               	movwf	___ftadd@f1^(0+128)
  9576  0E8C  30B4               	movlw	180
  9577  0E8D  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9578  0E8E  3043               	movlw	67
  9579  0E8F  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9580  0E90  0022               	movlb	2	; select bank2
  9581  0E91  0831               	movf	modTri@inflection^(0+256),w
  9582  0E92  0021               	movlb	1	; select bank1
  9583  0E93  00BE               	movwf	___ftneg@f1^(0+128)
  9584  0E94  0022               	movlb	2	; select bank2
  9585  0E95  0832               	movf	(modTri@inflection+1)^(0+256),w
  9586  0E96  0021               	movlb	1	; select bank1
  9587  0E97  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9588  0E98  0022               	movlb	2	; select bank2
  9589  0E99  0833               	movf	(modTri@inflection+2)^(0+256),w
  9590  0E9A  0021               	movlb	1	; select bank1
  9591  0E9B  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9592  0E9C  31AF  2763  318E   	fcall	___ftneg
  9593  0E9F  0021               	movlb	1	; select bank1
  9594  0EA0  083E               	movf	?___ftneg^(0+128),w
  9595  0EA1  00C4               	movwf	___ftadd@f2^(0+128)
  9596  0EA2  083F               	movf	(?___ftneg+1)^(0+128),w
  9597  0EA3  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9598  0EA4  0840               	movf	(?___ftneg+2)^(0+128),w
  9599  0EA5  00C6               	movwf	(___ftadd@f2+2)^(0+128)
  9600  0EA6  3191  2153  318E   	fcall	___ftadd
  9601  0EA9  0021               	movlb	1	; select bank1
  9602  0EAA  0841               	movf	?___ftadd^(0+128),w
  9603  0EAB  00CE               	movwf	___ftdiv@f2^(0+128)
  9604  0EAC  0842               	movf	(?___ftadd+1)^(0+128),w
  9605  0EAD  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
  9606  0EAE  0843               	movf	(?___ftadd+2)^(0+128),w
  9607  0EAF  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
  9608  0EB0  3000               	movlw	0
  9609  0EB1  00D1               	movwf	___ftdiv@f1^(0+128)
  9610  0EB2  3034               	movlw	52
  9611  0EB3  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
  9612  0EB4  3043               	movlw	67
  9613  0EB5  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
  9614  0EB6  319D  253D  318E   	fcall	___ftdiv
  9615  0EB9  0021               	movlb	1	; select bank1
  9616  0EBA  084E               	movf	?___ftdiv^(0+128),w
  9617  0EBB  00B1               	movwf	___ftmul@f2^(0+128)
  9618  0EBC  084F               	movf	(?___ftdiv+1)^(0+128),w
  9619  0EBD  00B2               	movwf	(___ftmul@f2+1)^(0+128)
  9620  0EBE  0850               	movf	(?___ftdiv+2)^(0+128),w
  9621  0EBF  00B3               	movwf	(___ftmul@f2+2)^(0+128)
  9622  0EC0  319E  2691  318E   	fcall	___ftmul
  9623  0EC3  0021               	movlb	1	; select bank1
  9624  0EC4  082E               	movf	?___ftmul^(0+128),w
  9625  0EC5  0022               	movlb	2	; select bank2
  9626  0EC6  00B7               	movwf	modTri@shift^(0+256)
  9627  0EC7  0021               	movlb	1	; select bank1
  9628  0EC8  082F               	movf	(?___ftmul+1)^(0+128),w
  9629  0EC9  0022               	movlb	2	; select bank2
  9630  0ECA  00B8               	movwf	(modTri@shift+1)^(0+256)
  9631  0ECB  0021               	movlb	1	; select bank1
  9632  0ECC  0830               	movf	(?___ftmul+2)^(0+128),w
  9633  0ECD  0022               	movlb	2	; select bank2
  9634  0ECE  00B9               	movwf	(modTri@shift+2)^(0+256)
  9635                           
  9636                           ;modulation.c: 80: period = 180/(360-inflection);
  9637  0ECF  3000               	movlw	0
  9638  0ED0  0021               	movlb	1	; select bank1
  9639  0ED1  00C1               	movwf	___ftadd@f1^(0+128)
  9640  0ED2  30B4               	movlw	180
  9641  0ED3  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9642  0ED4  3043               	movlw	67
  9643  0ED5  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9644  0ED6  0022               	movlb	2	; select bank2
  9645  0ED7  0831               	movf	modTri@inflection^(0+256),w
  9646  0ED8  0021               	movlb	1	; select bank1
  9647  0ED9  00BE               	movwf	___ftneg@f1^(0+128)
  9648  0EDA  0022               	movlb	2	; select bank2
  9649  0EDB  0832               	movf	(modTri@inflection+1)^(0+256),w
  9650  0EDC  0021               	movlb	1	; select bank1
  9651  0EDD  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9652  0EDE  0022               	movlb	2	; select bank2
  9653  0EDF  0833               	movf	(modTri@inflection+2)^(0+256),w
  9654  0EE0  0021               	movlb	1	; select bank1
  9655  0EE1  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9656  0EE2  31AF  2763  318E   	fcall	___ftneg
  9657  0EE5  0021               	movlb	1	; select bank1
  9658  0EE6  083E               	movf	?___ftneg^(0+128),w
  9659  0EE7  00C4               	movwf	___ftadd@f2^(0+128)
  9660  0EE8  083F               	movf	(?___ftneg+1)^(0+128),w
  9661  0EE9  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9662  0EEA  0840               	movf	(?___ftneg+2)^(0+128),w
  9663  0EEB  00C6               	movwf	(___ftadd@f2+2)^(0+128)
  9664  0EEC  3191  2153  318E   	fcall	___ftadd
  9665  0EEF  0021               	movlb	1	; select bank1
  9666  0EF0  0841               	movf	?___ftadd^(0+128),w
  9667  0EF1  00CE               	movwf	___ftdiv@f2^(0+128)
  9668  0EF2  0842               	movf	(?___ftadd+1)^(0+128),w
  9669  0EF3  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
  9670  0EF4  0843               	movf	(?___ftadd+2)^(0+128),w
  9671  0EF5                     L5:	
  9672  0EF5  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
  9673  0EF6  3000               	movlw	0
  9674  0EF7  00D1               	movwf	___ftdiv@f1^(0+128)
  9675  0EF8  3034               	movlw	52
  9676  0EF9  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
  9677  0EFA  3043               	movlw	67
  9678  0EFB  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
  9679  0EFC  319D  253D  318E   	fcall	___ftdiv
  9680  0EFF  0021               	movlb	1	; select bank1
  9681  0F00  084E               	movf	?___ftdiv^(0+128),w
  9682  0F01  0022               	movlb	2	; select bank2
  9683  0F02  00BA               	movwf	modTri@period^(0+256)
  9684  0F03  0021               	movlb	1	; select bank1
  9685  0F04  084F               	movf	(?___ftdiv+1)^(0+128),w
  9686  0F05  0022               	movlb	2	; select bank2
  9687  0F06  00BB               	movwf	(modTri@period+1)^(0+256)
  9688  0F07  0021               	movlb	1	; select bank1
  9689  0F08  0850               	movf	(?___ftdiv+2)^(0+128),w
  9690  0F09  0022               	movlb	2	; select bank2
  9691  0F0A  00BC               	movwf	(modTri@period+2)^(0+256)
  9692                           
  9693                           ;modulation.c: 82: }
  9694                           ;modulation.c: 83: double tmpVal = (period*angle-shift) ;
  9695  0F0B  0837               	movf	modTri@shift^(0+256),w
  9696  0F0C  0021               	movlb	1	; select bank1
  9697  0F0D  00BE               	movwf	___ftneg@f1^(0+128)
  9698  0F0E  0022               	movlb	2	; select bank2
  9699  0F0F  0838               	movf	(modTri@shift+1)^(0+256),w
  9700  0F10  0021               	movlb	1	; select bank1
  9701  0F11  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9702  0F12  0022               	movlb	2	; select bank2
  9703  0F13  0839               	movf	(modTri@shift+2)^(0+256),w
  9704  0F14  0021               	movlb	1	; select bank1
  9705  0F15  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9706  0F16  31AF  2763  318E   	fcall	___ftneg
  9707  0F19  0021               	movlb	1	; select bank1
  9708  0F1A  083E               	movf	?___ftneg^(0+128),w
  9709  0F1B  00C1               	movwf	___ftadd@f1^(0+128)
  9710  0F1C  083F               	movf	(?___ftneg+1)^(0+128),w
  9711  0F1D  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9712  0F1E  0840               	movf	(?___ftneg+2)^(0+128),w
  9713  0F1F  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9714  0F20  0022               	movlb	2	; select bank2
  9715  0F21  082E               	movf	modTri@angle^(0+256),w
  9716  0F22  0021               	movlb	1	; select bank1
  9717  0F23  00AE               	movwf	___ftmul@f1^(0+128)
  9718  0F24  0022               	movlb	2	; select bank2
  9719  0F25  082F               	movf	(modTri@angle+1)^(0+256),w
  9720  0F26  0021               	movlb	1	; select bank1
  9721  0F27  00AF               	movwf	(___ftmul@f1+1)^(0+128)
  9722  0F28  0022               	movlb	2	; select bank2
  9723  0F29  0830               	movf	(modTri@angle+2)^(0+256),w
  9724  0F2A  0021               	movlb	1	; select bank1
  9725  0F2B  00B0               	movwf	(___ftmul@f1+2)^(0+128)
  9726  0F2C  0022               	movlb	2	; select bank2
  9727  0F2D  083A               	movf	modTri@period^(0+256),w
  9728  0F2E  0021               	movlb	1	; select bank1
  9729  0F2F  00B1               	movwf	___ftmul@f2^(0+128)
  9730  0F30  0022               	movlb	2	; select bank2
  9731  0F31  083B               	movf	(modTri@period+1)^(0+256),w
  9732  0F32  0021               	movlb	1	; select bank1
  9733  0F33  00B2               	movwf	(___ftmul@f2+1)^(0+128)
  9734  0F34  0022               	movlb	2	; select bank2
  9735  0F35  083C               	movf	(modTri@period+2)^(0+256),w
  9736  0F36  0021               	movlb	1	; select bank1
  9737  0F37  00B3               	movwf	(___ftmul@f2+2)^(0+128)
  9738  0F38  319E  2691  318E   	fcall	___ftmul
  9739  0F3B  0021               	movlb	1	; select bank1
  9740  0F3C  082E               	movf	?___ftmul^(0+128),w
  9741  0F3D  00C4               	movwf	___ftadd@f2^(0+128)
  9742  0F3E  082F               	movf	(?___ftmul+1)^(0+128),w
  9743  0F3F  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9744  0F40  0830               	movf	(?___ftmul+2)^(0+128),w
  9745  0F41  00C6               	movwf	(___ftadd@f2+2)^(0+128)
  9746  0F42  3191  2153  318E   	fcall	___ftadd
  9747  0F45  0021               	movlb	1	; select bank1
  9748  0F46  0841               	movf	?___ftadd^(0+128),w
  9749  0F47  0022               	movlb	2	; select bank2
  9750  0F48  00BD               	movwf	modTri@tmpVal^(0+256)
  9751  0F49  0021               	movlb	1	; select bank1
  9752  0F4A  0842               	movf	(?___ftadd+1)^(0+128),w
  9753  0F4B  0022               	movlb	2	; select bank2
  9754  0F4C  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
  9755  0F4D  0021               	movlb	1	; select bank1
  9756  0F4E  0843               	movf	(?___ftadd+2)^(0+128),w
  9757  0F4F  0022               	movlb	2	; select bank2
  9758  0F50  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
  9759                           
  9760                           ;modulation.c: 84: if (tmpVal > 270) {
  9761  0F51  3000               	movlw	0
  9762  0F52  0021               	movlb	1	; select bank1
  9763  0F53  00A0               	movwf	___ftge@ff1^(0+128)
  9764  0F54  3087               	movlw	135
  9765  0F55  00A1               	movwf	(___ftge@ff1+1)^(0+128)
  9766  0F56  3043               	movlw	67
  9767  0F57  00A2               	movwf	(___ftge@ff1+2)^(0+128)
  9768  0F58  0022               	movlb	2	; select bank2
  9769  0F59  083D               	movf	modTri@tmpVal^(0+256),w
  9770  0F5A  0021               	movlb	1	; select bank1
  9771  0F5B  00A3               	movwf	___ftge@ff2^(0+128)
  9772  0F5C  0022               	movlb	2	; select bank2
  9773  0F5D  083E               	movf	(modTri@tmpVal+1)^(0+256),w
  9774  0F5E  0021               	movlb	1	; select bank1
  9775  0F5F  00A4               	movwf	(___ftge@ff2+1)^(0+128)
  9776  0F60  0022               	movlb	2	; select bank2
  9777  0F61  083F               	movf	(modTri@tmpVal+2)^(0+256),w
  9778  0F62  0021               	movlb	1	; select bank1
  9779  0F63  00A5               	movwf	(___ftge@ff2+2)^(0+128)
  9780  0F64  31A2  22DB  318E   	fcall	___ftge
  9781  0F67  1803               	btfsc	3,0
  9782  0F68  2F7C               	goto	l8282
  9783                           
  9784                           ;modulation.c: 85: tmpVal = tmpVal - 360.0;
  9785  0F69  3000               	movlw	0
  9786  0F6A  0021               	movlb	1	; select bank1
  9787  0F6B  00C1               	movwf	___ftadd@f1^(0+128)
  9788  0F6C  30B4               	movlw	180
  9789  0F6D  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9790  0F6E  30C3               	movlw	195
  9791  0F6F  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9792  0F70  0022               	movlb	2	; select bank2
  9793  0F71  083D               	movf	modTri@tmpVal^(0+256),w
  9794  0F72  0021               	movlb	1	; select bank1
  9795  0F73  00C4               	movwf	___ftadd@f2^(0+128)
  9796  0F74  0022               	movlb	2	; select bank2
  9797  0F75  083E               	movf	(modTri@tmpVal+1)^(0+256),w
  9798  0F76  0021               	movlb	1	; select bank1
  9799  0F77  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9800  0F78  0022               	movlb	2	; select bank2
  9801  0F79  083F               	movf	(modTri@tmpVal+2)^(0+256),w
  9802  0F7A  0021               	movlb	1	; select bank1
  9803  0F7B  2FB0               	goto	L7
  9804  0F7C                     l8282:	
  9805                           ;modulation.c: 86: } else if (tmpVal > 90) {
  9806                           
  9807  0F7C  3000               	movlw	0
  9808  0F7D  0021               	movlb	1	; select bank1
  9809  0F7E  00A0               	movwf	___ftge@ff1^(0+128)
  9810  0F7F  30B4               	movlw	180
  9811  0F80  00A1               	movwf	(___ftge@ff1+1)^(0+128)
  9812  0F81  3042               	movlw	66
  9813  0F82  00A2               	movwf	(___ftge@ff1+2)^(0+128)
  9814  0F83  0022               	movlb	2	; select bank2
  9815  0F84  083D               	movf	modTri@tmpVal^(0+256),w
  9816  0F85  0021               	movlb	1	; select bank1
  9817  0F86  00A3               	movwf	___ftge@ff2^(0+128)
  9818  0F87  0022               	movlb	2	; select bank2
  9819  0F88  083E               	movf	(modTri@tmpVal+1)^(0+256),w
  9820  0F89  0021               	movlb	1	; select bank1
  9821  0F8A  00A4               	movwf	(___ftge@ff2+1)^(0+128)
  9822  0F8B  0022               	movlb	2	; select bank2
  9823  0F8C  083F               	movf	(modTri@tmpVal+2)^(0+256),w
  9824  0F8D  0021               	movlb	1	; select bank1
  9825  0F8E  00A5               	movwf	(___ftge@ff2+2)^(0+128)
  9826  0F8F  31A2  22DB  318E   	fcall	___ftge
  9827  0F92  1803               	btfsc	3,0
  9828  0F93  2FC0               	goto	l1914
  9829                           
  9830                           ;modulation.c: 87: tmpVal = 180 - tmpVal;
  9831  0F94  3000               	movlw	0
  9832  0F95  0021               	movlb	1	; select bank1
  9833  0F96  00C1               	movwf	___ftadd@f1^(0+128)
  9834  0F97  3034               	movlw	52
  9835  0F98  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9836  0F99  3043               	movlw	67
  9837  0F9A  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9838  0F9B  0022               	movlb	2	; select bank2
  9839  0F9C  083D               	movf	modTri@tmpVal^(0+256),w
  9840  0F9D  0021               	movlb	1	; select bank1
  9841  0F9E  00BE               	movwf	___ftneg@f1^(0+128)
  9842  0F9F  0022               	movlb	2	; select bank2
  9843  0FA0  083E               	movf	(modTri@tmpVal+1)^(0+256),w
  9844  0FA1  0021               	movlb	1	; select bank1
  9845  0FA2  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9846  0FA3  0022               	movlb	2	; select bank2
  9847  0FA4  083F               	movf	(modTri@tmpVal+2)^(0+256),w
  9848  0FA5  0021               	movlb	1	; select bank1
  9849  0FA6  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9850  0FA7  31AF  2763  318E   	fcall	___ftneg
  9851  0FAA  0021               	movlb	1	; select bank1
  9852  0FAB  083E               	movf	?___ftneg^(0+128),w
  9853  0FAC  00C4               	movwf	___ftadd@f2^(0+128)
  9854  0FAD  083F               	movf	(?___ftneg+1)^(0+128),w
  9855  0FAE  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9856  0FAF  0840               	movf	(?___ftneg+2)^(0+128),w
  9857  0FB0                     L7:	
  9858  0FB0  00C6               	movwf	(___ftadd@f2+2)^(0+128)
  9859  0FB1  3191  2153  318E   	fcall	___ftadd
  9860  0FB4  0021               	movlb	1	; select bank1
  9861  0FB5  0841               	movf	?___ftadd^(0+128),w
  9862  0FB6  0022               	movlb	2	; select bank2
  9863  0FB7  00BD               	movwf	modTri@tmpVal^(0+256)
  9864  0FB8  0021               	movlb	1	; select bank1
  9865  0FB9  0842               	movf	(?___ftadd+1)^(0+128),w
  9866  0FBA  0022               	movlb	2	; select bank2
  9867  0FBB  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
  9868  0FBC  0021               	movlb	1	; select bank1
  9869  0FBD  0843               	movf	(?___ftadd+2)^(0+128),w
  9870  0FBE  0022               	movlb	2	; select bank2
  9871  0FBF  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
  9872  0FC0                     l1914:	
  9873                           
  9874                           ;modulation.c: 88: }
  9875                           ;modulation.c: 89: tmpVal = tmpVal * 10/9;
  9876  0FC0  3000               	movlw	0
  9877  0FC1  0021               	movlb	1	; select bank1
  9878  0FC2  00CE               	movwf	___ftdiv@f2^(0+128)
  9879  0FC3  3010               	movlw	16
  9880  0FC4  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
  9881  0FC5  3041               	movlw	65
  9882  0FC6  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
  9883  0FC7  3000               	movlw	0
  9884  0FC8  00AE               	movwf	___ftmul@f1^(0+128)
  9885  0FC9  3020               	movlw	32
  9886  0FCA  00AF               	movwf	(___ftmul@f1+1)^(0+128)
  9887  0FCB  3041               	movlw	65
  9888  0FCC  00B0               	movwf	(___ftmul@f1+2)^(0+128)
  9889  0FCD  0022               	movlb	2	; select bank2
  9890  0FCE  083D               	movf	modTri@tmpVal^(0+256),w
  9891  0FCF  0021               	movlb	1	; select bank1
  9892  0FD0  00B1               	movwf	___ftmul@f2^(0+128)
  9893  0FD1  0022               	movlb	2	; select bank2
  9894  0FD2  083E               	movf	(modTri@tmpVal+1)^(0+256),w
  9895  0FD3  0021               	movlb	1	; select bank1
  9896  0FD4  00B2               	movwf	(___ftmul@f2+1)^(0+128)
  9897  0FD5  0022               	movlb	2	; select bank2
  9898  0FD6  083F               	movf	(modTri@tmpVal+2)^(0+256),w
  9899  0FD7  0021               	movlb	1	; select bank1
  9900  0FD8  00B3               	movwf	(___ftmul@f2+2)^(0+128)
  9901  0FD9  319E  2691  318E   	fcall	___ftmul
  9902  0FDC  0021               	movlb	1	; select bank1
  9903  0FDD  082E               	movf	?___ftmul^(0+128),w
  9904  0FDE  00D1               	movwf	___ftdiv@f1^(0+128)
  9905  0FDF  082F               	movf	(?___ftmul+1)^(0+128),w
  9906  0FE0  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
  9907  0FE1  0830               	movf	(?___ftmul+2)^(0+128),w
  9908  0FE2  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
  9909  0FE3  319D  253D  318E   	fcall	___ftdiv
  9910  0FE6  0021               	movlb	1	; select bank1
  9911  0FE7  084E               	movf	?___ftdiv^(0+128),w
  9912  0FE8  0022               	movlb	2	; select bank2
  9913  0FE9  00BD               	movwf	modTri@tmpVal^(0+256)
  9914  0FEA  0021               	movlb	1	; select bank1
  9915  0FEB  084F               	movf	(?___ftdiv+1)^(0+128),w
  9916  0FEC  0022               	movlb	2	; select bank2
  9917  0FED  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
  9918  0FEE  0021               	movlb	1	; select bank1
  9919  0FEF  0850               	movf	(?___ftdiv+2)^(0+128),w
  9920  0FF0  0022               	movlb	2	; select bank2
  9921  0FF1  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
  9922                           
  9923                           ;modulation.c: 91: return (int)(tmpVal);
  9924  0FF2  083D               	movf	modTri@tmpVal^(0+256),w
  9925  0FF3  00A0               	movwf	___fttol@f1^(0+256)
  9926  0FF4  083E               	movf	(modTri@tmpVal+1)^(0+256),w
  9927  0FF5  00A1               	movwf	(___fttol@f1+1)^(0+256)
  9928  0FF6  083F               	movf	(modTri@tmpVal+2)^(0+256),w
  9929  0FF7  00A2               	movwf	(___fttol@f1+2)^(0+256)
  9930  0FF8  3199  21D5         	fcall	___fttol
  9931  0FFA  0022               	movlb	2	; select bank2
  9932  0FFB  0821               	movf	(?___fttol^(0+256)+1),w
  9933  0FFC  00AF               	movwf	(?_modTri+1)^(0+256)
  9934  0FFD  0820               	movf	?___fttol^(0+256),w
  9935  0FFE  00AE               	movwf	?_modTri^(0+256)
  9936  0FFF  0008               	return
  9937  1000                     __end_of_modTri:	
  9938                           
  9939                           	psect	text18
  9940  2317                     __ptext18:	
  9941 ;; *************** function _modSquare *****************
  9942 ;; Defined at:
  9943 ;;		line 117 in file "modulation.c"
  9944 ;; Parameters:    Size  Location     Type
  9945 ;;  angle           3   40[BANK2 ] int 
  9946 ;;  inflection      3   43[BANK2 ] int 
  9947 ;; Auto vars:     Size  Location     Type
  9948 ;;  tmpVal          2   46[BANK2 ] int 
  9949 ;; Return value:  Size  Location     Type
  9950 ;;                  2   40[BANK2 ] int 
  9951 ;; Registers used:
  9952 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9953 ;; Tracked objects:
  9954 ;;		On entry : 0/0
  9955 ;;		On exit  : 0/0
  9956 ;;		Unchanged: 0/0
  9957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9958 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9959 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9961 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9962 ;;Total ram usage:        8 bytes
  9963 ;; Hardware stack levels used:    1
  9964 ;; Hardware stack levels required when called:    6
  9965 ;; This function calls:
  9966 ;;		___ftge
  9967 ;;		_modSin
  9968 ;; This function is called by:
  9969 ;;		_updateModulationArray
  9970 ;; This function uses a non-reentrant model
  9971 ;;
  9972                           
  9973                           
  9974                           ;psect for function _modSquare
  9975  2317                     _modSquare:	
  9976                           
  9977                           ;modulation.c: 118: int tmpVal = modSin(angle, inflection);
  9978                           
  9979                           ;incstack = 0
  9980                           ; Regs used in _modSquare: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9981  2317  0022               	movlb	2	; select bank2
  9982  2318  0848               	movf	modSquare@angle^(0+256),w
  9983  2319  00B4               	movwf	modSin@angle^(0+256)
  9984  231A  0849               	movf	(modSquare@angle+1)^(0+256),w
  9985  231B  00B5               	movwf	(modSin@angle+1)^(0+256)
  9986  231C  084A               	movf	(modSquare@angle+2)^(0+256),w
  9987  231D  00B6               	movwf	(modSin@angle+2)^(0+256)
  9988  231E  084B               	movf	modSquare@inflection^(0+256),w
  9989  231F  00B7               	movwf	modSin@inflection^(0+256)
  9990  2320  084C               	movf	(modSquare@inflection+1)^(0+256),w
  9991  2321  00B8               	movwf	(modSin@inflection+1)^(0+256)
  9992  2322  084D               	movf	(modSquare@inflection+2)^(0+256),w
  9993  2323  00B9               	movwf	(modSin@inflection+2)^(0+256)
  9994  2324  3196  2654  31A3   	fcall	_modSin
  9995  2327  0022               	movlb	2	; select bank2
  9996  2328  0835               	movf	(?_modSin+1)^(0+256),w
  9997  2329  00CF               	movwf	(modSquare@tmpVal+1)^(0+256)
  9998  232A  0834               	movf	?_modSin^(0+256),w
  9999  232B  00CE               	movwf	modSquare@tmpVal^(0+256)
 10000                           
 10001                           ;modulation.c: 120: return (angle <= inflection) ? 100 : -100;
 10002  232C  084B               	movf	modSquare@inflection^(0+256),w
 10003  232D  0021               	movlb	1	; select bank1
 10004  232E  00A0               	movwf	___ftge@ff1^(0+128)
 10005  232F  0022               	movlb	2	; select bank2
 10006  2330  084C               	movf	(modSquare@inflection+1)^(0+256),w
 10007  2331  0021               	movlb	1	; select bank1
 10008  2332  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10009  2333  0022               	movlb	2	; select bank2
 10010  2334  084D               	movf	(modSquare@inflection+2)^(0+256),w
 10011  2335  0021               	movlb	1	; select bank1
 10012  2336  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10013  2337  0022               	movlb	2	; select bank2
 10014  2338  0848               	movf	modSquare@angle^(0+256),w
 10015  2339  0021               	movlb	1	; select bank1
 10016  233A  00A3               	movwf	___ftge@ff2^(0+128)
 10017  233B  0022               	movlb	2	; select bank2
 10018  233C  0849               	movf	(modSquare@angle+1)^(0+256),w
 10019  233D  0021               	movlb	1	; select bank1
 10020  233E  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10021  233F  0022               	movlb	2	; select bank2
 10022  2340  084A               	movf	(modSquare@angle+2)^(0+256),w
 10023  2341  0021               	movlb	1	; select bank1
 10024  2342  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10025  2343  31A2  22DB  31A3   	fcall	___ftge
 10026  2346  1803               	btfsc	3,0
 10027  2347  2B4E               	goto	l8294
 10028  2348  309C               	movlw	156
 10029  2349  0022               	movlb	2	; select bank2
 10030  234A  00C8               	movwf	?_modSquare^(0+256)
 10031  234B  30FF               	movlw	255
 10032  234C  00C9               	movwf	(?_modSquare^(0+256)+1)
 10033  234D  0008               	return
 10034  234E                     l8294:	
 10035  234E  3064               	movlw	100
 10036  234F  0022               	movlb	2	; select bank2
 10037  2350  00C8               	movwf	?_modSquare^(0+256)
 10038  2351  3000               	movlw	0
 10039  2352  00C9               	movwf	(?_modSquare^(0+256)+1)
 10040  2353  0008               	return
 10041  2354                     __end_of_modSquare:	
 10042                           
 10043                           	psect	text19
 10044  1654                     __ptext19:	
 10045 ;; *************** function _modSin *****************
 10046 ;; Defined at:
 10047 ;;		line 56 in file "modulation.c"
 10048 ;; Parameters:    Size  Location     Type
 10049 ;;  angle           3   20[BANK2 ] int 
 10050 ;;  inflection      3   23[BANK2 ] int 
 10051 ;; Auto vars:     Size  Location     Type
 10052 ;;  tmpVal          3   37[BANK2 ] int 
 10053 ;;  period          3   34[BANK2 ] int 
 10054 ;;  shift           3   31[BANK2 ] int 
 10055 ;; Return value:  Size  Location     Type
 10056 ;;                  2   20[BANK2 ] int 
 10057 ;; Registers used:
 10058 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10059 ;; Tracked objects:
 10060 ;;		On entry : 0/0
 10061 ;;		On exit  : 0/0
 10062 ;;		Unchanged: 0/0
 10063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10064 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10065 ;;      Locals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10066 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10067 ;;      Totals:         0       0       0      20       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10068 ;;Total ram usage:       20 bytes
 10069 ;; Hardware stack levels used:    1
 10070 ;; Hardware stack levels required when called:    5
 10071 ;; This function calls:
 10072 ;;		___ftadd
 10073 ;;		___ftdiv
 10074 ;;		___ftge
 10075 ;;		___ftmul
 10076 ;;		___ftneg
 10077 ;;		___fttol
 10078 ;;		___wmul
 10079 ;; This function is called by:
 10080 ;;		_updateModulationArray
 10081 ;;		_modSquare
 10082 ;; This function uses a non-reentrant model
 10083 ;;
 10084                           
 10085                           
 10086                           ;psect for function _modSin
 10087  1654                     _modSin:	
 10088                           
 10089                           ;modulation.c: 57: double period = 1.0;
 10090                           
 10091                           ;incstack = 0
 10092                           ; Regs used in _modSin: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10093  1654  3000               	movlw	0
 10094  1655  0022               	movlb	2	; select bank2
 10095  1656  00C2               	movwf	modSin@period^(0+256)
 10096  1657  3080               	movlw	128
 10097  1658  00C3               	movwf	(modSin@period+1)^(0+256)
 10098  1659  303F               	movlw	63
 10099  165A  00C4               	movwf	(modSin@period+2)^(0+256)
 10100                           
 10101                           ;modulation.c: 58: double shift = 0.0;
 10102  165B  3000               	movlw	0
 10103  165C  00BF               	movwf	modSin@shift^(0+256)
 10104  165D  3000               	movlw	0
 10105  165E  00C0               	movwf	(modSin@shift+1)^(0+256)
 10106  165F  3000               	movlw	0
 10107  1660  00C1               	movwf	(modSin@shift+2)^(0+256)
 10108                           
 10109                           ;modulation.c: 60: if(angle<=inflection) {
 10110  1661  0837               	movf	modSin@inflection^(0+256),w
 10111  1662  0021               	movlb	1	; select bank1
 10112  1663  00A0               	movwf	___ftge@ff1^(0+128)
 10113  1664  0022               	movlb	2	; select bank2
 10114  1665  0838               	movf	(modSin@inflection+1)^(0+256),w
 10115  1666  0021               	movlb	1	; select bank1
 10116  1667  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10117  1668  0022               	movlb	2	; select bank2
 10118  1669  0839               	movf	(modSin@inflection+2)^(0+256),w
 10119  166A  0021               	movlb	1	; select bank1
 10120  166B  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10121  166C  0022               	movlb	2	; select bank2
 10122  166D  0834               	movf	modSin@angle^(0+256),w
 10123  166E  0021               	movlb	1	; select bank1
 10124  166F  00A3               	movwf	___ftge@ff2^(0+128)
 10125  1670  0022               	movlb	2	; select bank2
 10126  1671  0835               	movf	(modSin@angle+1)^(0+256),w
 10127  1672  0021               	movlb	1	; select bank1
 10128  1673  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10129  1674  0022               	movlb	2	; select bank2
 10130  1675  0836               	movf	(modSin@angle+2)^(0+256),w
 10131  1676  0021               	movlb	1	; select bank1
 10132  1677  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10133  1678  31A2  22DB  3196   	fcall	___ftge
 10134  167B  1C03               	btfss	3,0
 10135  167C  2E89               	goto	l7950
 10136                           
 10137                           ;modulation.c: 61: period = 180.0/inflection;
 10138  167D  0022               	movlb	2	; select bank2
 10139  167E  0837               	movf	modSin@inflection^(0+256),w
 10140  167F  0021               	movlb	1	; select bank1
 10141  1680  00CE               	movwf	___ftdiv@f2^(0+128)
 10142  1681  0022               	movlb	2	; select bank2
 10143  1682  0838               	movf	(modSin@inflection+1)^(0+256),w
 10144  1683  0021               	movlb	1	; select bank1
 10145  1684  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10146  1685  0022               	movlb	2	; select bank2
 10147  1686  0839               	movf	(modSin@inflection+2)^(0+256),w
 10148  1687  0021               	movlb	1	; select bank1
 10149  1688  2F44               	goto	L8
 10150  1689                     l7950:	
 10151                           ;modulation.c: 62: } else {
 10152                           
 10153                           
 10154                           ;modulation.c: 63: shift = -(360-inflection*2)*(180/(360-inflection));
 10155  1689  0022               	movlb	2	; select bank2
 10156  168A  0837               	movf	modSin@inflection^(0+256),w
 10157  168B  0021               	movlb	1	; select bank1
 10158  168C  00B1               	movwf	___ftmul@f2^(0+128)
 10159  168D  0022               	movlb	2	; select bank2
 10160  168E  0838               	movf	(modSin@inflection+1)^(0+256),w
 10161  168F  0021               	movlb	1	; select bank1
 10162  1690  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10163  1691  0022               	movlb	2	; select bank2
 10164  1692  0839               	movf	(modSin@inflection+2)^(0+256),w
 10165  1693  0021               	movlb	1	; select bank1
 10166  1694  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10167  1695  3000               	movlw	0
 10168  1696  00AE               	movwf	___ftmul@f1^(0+128)
 10169  1697  3000               	movlw	0
 10170  1698  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10171  1699  3040               	movlw	64
 10172  169A  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10173  169B  319E  2691  3196   	fcall	___ftmul
 10174  169E  0021               	movlb	1	; select bank1
 10175  169F  082E               	movf	?___ftmul^(0+128),w
 10176  16A0  00BE               	movwf	___ftneg@f1^(0+128)
 10177  16A1  082F               	movf	(?___ftmul+1)^(0+128),w
 10178  16A2  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10179  16A3  0830               	movf	(?___ftmul+2)^(0+128),w
 10180  16A4  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10181  16A5  31AF  2763  3196   	fcall	___ftneg
 10182  16A8  0021               	movlb	1	; select bank1
 10183  16A9  083E               	movf	?___ftneg^(0+128),w
 10184  16AA  00C4               	movwf	___ftadd@f2^(0+128)
 10185  16AB  083F               	movf	(?___ftneg+1)^(0+128),w
 10186  16AC  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10187  16AD  0840               	movf	(?___ftneg+2)^(0+128),w
 10188  16AE  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10189  16AF  3000               	movlw	0
 10190  16B0  00C1               	movwf	___ftadd@f1^(0+128)
 10191  16B1  30B4               	movlw	180
 10192  16B2  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10193  16B3  3043               	movlw	67
 10194  16B4  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10195  16B5  3191  2153  3196   	fcall	___ftadd
 10196  16B8  0021               	movlb	1	; select bank1
 10197  16B9  0841               	movf	?___ftadd^(0+128),w
 10198  16BA  0022               	movlb	2	; select bank2
 10199  16BB  00BC               	movwf	_modSin$2819^(0+256)
 10200  16BC  0021               	movlb	1	; select bank1
 10201  16BD  0842               	movf	(?___ftadd+1)^(0+128),w
 10202  16BE  0022               	movlb	2	; select bank2
 10203  16BF  00BD               	movwf	(_modSin$2819+1)^(0+256)
 10204  16C0  0021               	movlb	1	; select bank1
 10205  16C1  0843               	movf	(?___ftadd+2)^(0+128),w
 10206  16C2  0022               	movlb	2	; select bank2
 10207  16C3  00BE               	movwf	(_modSin$2819+2)^(0+256)
 10208                           
 10209                           ;modulation.c: 63: shift = -(360-inflection*2)*(180/(360-inflection));
 10210  16C4  083C               	movf	_modSin$2819^(0+256),w
 10211  16C5  0021               	movlb	1	; select bank1
 10212  16C6  00BE               	movwf	___ftneg@f1^(0+128)
 10213  16C7  0022               	movlb	2	; select bank2
 10214  16C8  083D               	movf	(_modSin$2819+1)^(0+256),w
 10215  16C9  0021               	movlb	1	; select bank1
 10216  16CA  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10217  16CB  0022               	movlb	2	; select bank2
 10218  16CC  083E               	movf	(_modSin$2819+2)^(0+256),w
 10219  16CD  0021               	movlb	1	; select bank1
 10220  16CE  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10221  16CF  31AF  2763  3196   	fcall	___ftneg
 10222  16D2  0021               	movlb	1	; select bank1
 10223  16D3  083E               	movf	?___ftneg^(0+128),w
 10224  16D4  00AE               	movwf	___ftmul@f1^(0+128)
 10225  16D5  083F               	movf	(?___ftneg+1)^(0+128),w
 10226  16D6  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10227  16D7  0840               	movf	(?___ftneg+2)^(0+128),w
 10228  16D8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10229  16D9  3000               	movlw	0
 10230  16DA  00C1               	movwf	___ftadd@f1^(0+128)
 10231  16DB  30B4               	movlw	180
 10232  16DC  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10233  16DD  3043               	movlw	67
 10234  16DE  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10235  16DF  0022               	movlb	2	; select bank2
 10236  16E0  0837               	movf	modSin@inflection^(0+256),w
 10237  16E1  0021               	movlb	1	; select bank1
 10238  16E2  00BE               	movwf	___ftneg@f1^(0+128)
 10239  16E3  0022               	movlb	2	; select bank2
 10240  16E4  0838               	movf	(modSin@inflection+1)^(0+256),w
 10241  16E5  0021               	movlb	1	; select bank1
 10242  16E6  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10243  16E7  0022               	movlb	2	; select bank2
 10244  16E8  0839               	movf	(modSin@inflection+2)^(0+256),w
 10245  16E9  0021               	movlb	1	; select bank1
 10246  16EA  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10247  16EB  31AF  2763  3196   	fcall	___ftneg
 10248  16EE  0021               	movlb	1	; select bank1
 10249  16EF  083E               	movf	?___ftneg^(0+128),w
 10250  16F0  00C4               	movwf	___ftadd@f2^(0+128)
 10251  16F1  083F               	movf	(?___ftneg+1)^(0+128),w
 10252  16F2  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10253  16F3  0840               	movf	(?___ftneg+2)^(0+128),w
 10254  16F4  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10255  16F5  3191  2153  3196   	fcall	___ftadd
 10256  16F8  0021               	movlb	1	; select bank1
 10257  16F9  0841               	movf	?___ftadd^(0+128),w
 10258  16FA  00CE               	movwf	___ftdiv@f2^(0+128)
 10259  16FB  0842               	movf	(?___ftadd+1)^(0+128),w
 10260  16FC  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10261  16FD  0843               	movf	(?___ftadd+2)^(0+128),w
 10262  16FE  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10263  16FF  3000               	movlw	0
 10264  1700  00D1               	movwf	___ftdiv@f1^(0+128)
 10265  1701  3034               	movlw	52
 10266  1702  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10267  1703  3043               	movlw	67
 10268  1704  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10269  1705  319D  253D  3196   	fcall	___ftdiv
 10270  1708  0021               	movlb	1	; select bank1
 10271  1709  084E               	movf	?___ftdiv^(0+128),w
 10272  170A  00B1               	movwf	___ftmul@f2^(0+128)
 10273  170B  084F               	movf	(?___ftdiv+1)^(0+128),w
 10274  170C  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10275  170D  0850               	movf	(?___ftdiv+2)^(0+128),w
 10276  170E  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10277  170F  319E  2691  3196   	fcall	___ftmul
 10278  1712  0021               	movlb	1	; select bank1
 10279  1713  082E               	movf	?___ftmul^(0+128),w
 10280  1714  0022               	movlb	2	; select bank2
 10281  1715  00BF               	movwf	modSin@shift^(0+256)
 10282  1716  0021               	movlb	1	; select bank1
 10283  1717  082F               	movf	(?___ftmul+1)^(0+128),w
 10284  1718  0022               	movlb	2	; select bank2
 10285  1719  00C0               	movwf	(modSin@shift+1)^(0+256)
 10286  171A  0021               	movlb	1	; select bank1
 10287  171B  0830               	movf	(?___ftmul+2)^(0+128),w
 10288  171C  0022               	movlb	2	; select bank2
 10289  171D  00C1               	movwf	(modSin@shift+2)^(0+256)
 10290                           
 10291                           ;modulation.c: 64: period = 180/(360-inflection);
 10292  171E  3000               	movlw	0
 10293  171F  0021               	movlb	1	; select bank1
 10294  1720  00C1               	movwf	___ftadd@f1^(0+128)
 10295  1721  30B4               	movlw	180
 10296  1722  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10297  1723  3043               	movlw	67
 10298  1724  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10299  1725  0022               	movlb	2	; select bank2
 10300  1726  0837               	movf	modSin@inflection^(0+256),w
 10301  1727  0021               	movlb	1	; select bank1
 10302  1728  00BE               	movwf	___ftneg@f1^(0+128)
 10303  1729  0022               	movlb	2	; select bank2
 10304  172A  0838               	movf	(modSin@inflection+1)^(0+256),w
 10305  172B  0021               	movlb	1	; select bank1
 10306  172C  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10307  172D  0022               	movlb	2	; select bank2
 10308  172E  0839               	movf	(modSin@inflection+2)^(0+256),w
 10309  172F  0021               	movlb	1	; select bank1
 10310  1730  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10311  1731  31AF  2763  3196   	fcall	___ftneg
 10312  1734  0021               	movlb	1	; select bank1
 10313  1735  083E               	movf	?___ftneg^(0+128),w
 10314  1736  00C4               	movwf	___ftadd@f2^(0+128)
 10315  1737  083F               	movf	(?___ftneg+1)^(0+128),w
 10316  1738  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10317  1739  0840               	movf	(?___ftneg+2)^(0+128),w
 10318  173A  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10319  173B  3191  2153  3196   	fcall	___ftadd
 10320  173E  0021               	movlb	1	; select bank1
 10321  173F  0841               	movf	?___ftadd^(0+128),w
 10322  1740  00CE               	movwf	___ftdiv@f2^(0+128)
 10323  1741  0842               	movf	(?___ftadd+1)^(0+128),w
 10324  1742  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10325  1743  0843               	movf	(?___ftadd+2)^(0+128),w
 10326  1744                     L8:	
 10327  1744  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10328  1745  3000               	movlw	0
 10329  1746  00D1               	movwf	___ftdiv@f1^(0+128)
 10330  1747  3034               	movlw	52
 10331  1748  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10332  1749  3043               	movlw	67
 10333  174A  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10334  174B  319D  253D  3196   	fcall	___ftdiv
 10335  174E  0021               	movlb	1	; select bank1
 10336  174F  084E               	movf	?___ftdiv^(0+128),w
 10337  1750  0022               	movlb	2	; select bank2
 10338  1751  00C2               	movwf	modSin@period^(0+256)
 10339  1752  0021               	movlb	1	; select bank1
 10340  1753  084F               	movf	(?___ftdiv+1)^(0+128),w
 10341  1754  0022               	movlb	2	; select bank2
 10342  1755  00C3               	movwf	(modSin@period+1)^(0+256)
 10343  1756  0021               	movlb	1	; select bank1
 10344  1757  0850               	movf	(?___ftdiv+2)^(0+128),w
 10345  1758  0022               	movlb	2	; select bank2
 10346  1759  00C4               	movwf	(modSin@period+2)^(0+256)
 10347                           
 10348                           ;modulation.c: 66: }
 10349                           ;modulation.c: 67: double tmpVal = (period*angle-shift) /3;
 10350  175A  3000               	movlw	0
 10351  175B  0021               	movlb	1	; select bank1
 10352  175C  00CE               	movwf	___ftdiv@f2^(0+128)
 10353  175D  3040               	movlw	64
 10354  175E  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10355  175F  3040               	movlw	64
 10356  1760  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10357  1761  0022               	movlb	2	; select bank2
 10358  1762  083F               	movf	modSin@shift^(0+256),w
 10359  1763  0021               	movlb	1	; select bank1
 10360  1764  00BE               	movwf	___ftneg@f1^(0+128)
 10361  1765  0022               	movlb	2	; select bank2
 10362  1766  0840               	movf	(modSin@shift+1)^(0+256),w
 10363  1767  0021               	movlb	1	; select bank1
 10364  1768  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10365  1769  0022               	movlb	2	; select bank2
 10366  176A  0841               	movf	(modSin@shift+2)^(0+256),w
 10367  176B  0021               	movlb	1	; select bank1
 10368  176C  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10369  176D  31AF  2763  3196   	fcall	___ftneg
 10370  1770  0021               	movlb	1	; select bank1
 10371  1771  083E               	movf	?___ftneg^(0+128),w
 10372  1772  00C1               	movwf	___ftadd@f1^(0+128)
 10373  1773  083F               	movf	(?___ftneg+1)^(0+128),w
 10374  1774  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10375  1775  0840               	movf	(?___ftneg+2)^(0+128),w
 10376  1776  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10377  1777  0022               	movlb	2	; select bank2
 10378  1778  0834               	movf	modSin@angle^(0+256),w
 10379  1779  0021               	movlb	1	; select bank1
 10380  177A  00AE               	movwf	___ftmul@f1^(0+128)
 10381  177B  0022               	movlb	2	; select bank2
 10382  177C  0835               	movf	(modSin@angle+1)^(0+256),w
 10383  177D  0021               	movlb	1	; select bank1
 10384  177E  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10385  177F  0022               	movlb	2	; select bank2
 10386  1780  0836               	movf	(modSin@angle+2)^(0+256),w
 10387  1781  0021               	movlb	1	; select bank1
 10388  1782  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10389  1783  0022               	movlb	2	; select bank2
 10390  1784  0842               	movf	modSin@period^(0+256),w
 10391  1785  0021               	movlb	1	; select bank1
 10392  1786  00B1               	movwf	___ftmul@f2^(0+128)
 10393  1787  0022               	movlb	2	; select bank2
 10394  1788  0843               	movf	(modSin@period+1)^(0+256),w
 10395  1789  0021               	movlb	1	; select bank1
 10396  178A  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10397  178B  0022               	movlb	2	; select bank2
 10398  178C  0844               	movf	(modSin@period+2)^(0+256),w
 10399  178D  0021               	movlb	1	; select bank1
 10400  178E  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10401  178F  319E  2691  3196   	fcall	___ftmul
 10402  1792  0021               	movlb	1	; select bank1
 10403  1793  082E               	movf	?___ftmul^(0+128),w
 10404  1794  00C4               	movwf	___ftadd@f2^(0+128)
 10405  1795  082F               	movf	(?___ftmul+1)^(0+128),w
 10406  1796  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10407  1797  0830               	movf	(?___ftmul+2)^(0+128),w
 10408  1798  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10409  1799  3191  2153  3196   	fcall	___ftadd
 10410  179C  0021               	movlb	1	; select bank1
 10411  179D  0841               	movf	?___ftadd^(0+128),w
 10412  179E  00D1               	movwf	___ftdiv@f1^(0+128)
 10413  179F  0842               	movf	(?___ftadd+1)^(0+128),w
 10414  17A0  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10415  17A1  0843               	movf	(?___ftadd+2)^(0+128),w
 10416  17A2  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10417  17A3  319D  253D  3196   	fcall	___ftdiv
 10418  17A6  0021               	movlb	1	; select bank1
 10419  17A7  084E               	movf	?___ftdiv^(0+128),w
 10420  17A8  0022               	movlb	2	; select bank2
 10421  17A9  00C5               	movwf	modSin@tmpVal^(0+256)
 10422  17AA  0021               	movlb	1	; select bank1
 10423  17AB  084F               	movf	(?___ftdiv+1)^(0+128),w
 10424  17AC  0022               	movlb	2	; select bank2
 10425  17AD  00C6               	movwf	(modSin@tmpVal+1)^(0+256)
 10426  17AE  0021               	movlb	1	; select bank1
 10427  17AF  0850               	movf	(?___ftdiv+2)^(0+128),w
 10428  17B0  0022               	movlb	2	; select bank2
 10429  17B1  00C7               	movwf	(modSin@tmpVal+2)^(0+256)
 10430                           
 10431                           ;modulation.c: 68: tmpVal = sinArray[(int)(tmpVal)];
 10432  17B2  0845               	movf	modSin@tmpVal^(0+256),w
 10433  17B3  00A0               	movwf	___fttol@f1^(0+256)
 10434  17B4  0846               	movf	(modSin@tmpVal+1)^(0+256),w
 10435  17B5  00A1               	movwf	(___fttol@f1+1)^(0+256)
 10436  17B6  0847               	movf	(modSin@tmpVal+2)^(0+256),w
 10437  17B7  00A2               	movwf	(___fttol@f1+2)^(0+256)
 10438  17B8  3199  21D5  3196   	fcall	___fttol
 10439  17BB  0022               	movlb	2	; select bank2
 10440  17BC  0821               	movf	(?___fttol^(0+256)+1),w
 10441  17BD  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 10442  17BE  0820               	movf	?___fttol^(0+256),w
 10443  17BF  00AE               	movwf	___wmul@multiplier^(0+256)
 10444  17C0  3003               	movlw	3
 10445  17C1  00B0               	movwf	___wmul@multiplicand^(0+256)
 10446  17C2  3000               	movlw	0
 10447  17C3  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 10448  17C4  31A0  2030  3196   	fcall	___wmul
 10449  17C7  3082               	movlw	130
 10450  17C8  0022               	movlb	2	; select bank2
 10451  17C9  00BA               	movwf	??_modSin^(0+256)
 10452  17CA  3024               	movlw	36
 10453  17CB  00BB               	movwf	(??_modSin^(0+256)+1)
 10454  17CC  082E               	movf	?___wmul^(0+256),w
 10455  17CD  073A               	addwf	??_modSin^(0+256),w
 10456  17CE  0086               	movwf	6
 10457  17CF  082F               	movf	(?___wmul+1)^(0+256),w
 10458  17D0  3D3B               	addwfc	(??_modSin+1)^(0+256),w
 10459  17D1  0087               	movwf	7
 10460  17D2  3F40               	moviw [0]fsr1
 10461  17D3  00C5               	movwf	modSin@tmpVal^(0+256)
 10462  17D4  3F41               	moviw [1]fsr1
 10463  17D5  00C6               	movwf	(modSin@tmpVal+1)^(0+256)
 10464  17D6  3F42               	moviw [2]fsr1
 10465  17D7  00C7               	movwf	(modSin@tmpVal+2)^(0+256)
 10466                           
 10467                           ;modulation.c: 69: return (int)(100.0 * tmpVal);
 10468  17D8  0845               	movf	modSin@tmpVal^(0+256),w
 10469  17D9  0021               	movlb	1	; select bank1
 10470  17DA  00B1               	movwf	___ftmul@f2^(0+128)
 10471  17DB  0022               	movlb	2	; select bank2
 10472  17DC  0846               	movf	(modSin@tmpVal+1)^(0+256),w
 10473  17DD  0021               	movlb	1	; select bank1
 10474  17DE  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10475  17DF  0022               	movlb	2	; select bank2
 10476  17E0  0847               	movf	(modSin@tmpVal+2)^(0+256),w
 10477  17E1  0021               	movlb	1	; select bank1
 10478  17E2  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10479  17E3  3000               	movlw	0
 10480  17E4  00AE               	movwf	___ftmul@f1^(0+128)
 10481  17E5  30C8               	movlw	200
 10482  17E6  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10483  17E7  3042               	movlw	66
 10484  17E8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10485  17E9  319E  2691  3196   	fcall	___ftmul
 10486  17EC  0021               	movlb	1	; select bank1
 10487  17ED  082E               	movf	?___ftmul^(0+128),w
 10488  17EE  0022               	movlb	2	; select bank2
 10489  17EF  00A0               	movwf	___fttol@f1^(0+256)
 10490  17F0  0021               	movlb	1	; select bank1
 10491  17F1  082F               	movf	(?___ftmul+1)^(0+128),w
 10492  17F2  0022               	movlb	2	; select bank2
 10493  17F3  00A1               	movwf	(___fttol@f1+1)^(0+256)
 10494  17F4  0021               	movlb	1	; select bank1
 10495  17F5  0830               	movf	(?___ftmul+2)^(0+128),w
 10496  17F6  0022               	movlb	2	; select bank2
 10497  17F7  00A2               	movwf	(___fttol@f1+2)^(0+256)
 10498  17F8  3199  21D5         	fcall	___fttol
 10499  17FA  0022               	movlb	2	; select bank2
 10500  17FB  0821               	movf	(?___fttol^(0+256)+1),w
 10501  17FC  00B5               	movwf	(?_modSin+1)^(0+256)
 10502  17FD  0820               	movf	?___fttol^(0+256),w
 10503  17FE  00B4               	movwf	?_modSin^(0+256)
 10504  17FF  0008               	return
 10505  1800                     __end_of_modSin:	
 10506                           
 10507                           	psect	text20
 10508  204C                     __ptext20:	
 10509 ;; *************** function _modSawRev *****************
 10510 ;; Defined at:
 10511 ;;		line 111 in file "modulation.c"
 10512 ;; Parameters:    Size  Location     Type
 10513 ;;  angle           3   37[BANK2 ] int 
 10514 ;;  inflection      3   40[BANK2 ] int 
 10515 ;; Auto vars:     Size  Location     Type
 10516 ;;		None
 10517 ;; Return value:  Size  Location     Type
 10518 ;;                  2   37[BANK2 ] int 
 10519 ;; Registers used:
 10520 ;;		wreg, status,2, status,0, pclath, cstack
 10521 ;; Tracked objects:
 10522 ;;		On entry : 0/0
 10523 ;;		On exit  : 0/0
 10524 ;;		Unchanged: 0/0
 10525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10526 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10527 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10528 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10529 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10530 ;;Total ram usage:        8 bytes
 10531 ;; Hardware stack levels used:    1
 10532 ;; Hardware stack levels required when called:    6
 10533 ;; This function calls:
 10534 ;;		_modSaw
 10535 ;; This function is called by:
 10536 ;;		_updateModulationArray
 10537 ;; This function uses a non-reentrant model
 10538 ;;
 10539                           
 10540                           
 10541                           ;psect for function _modSawRev
 10542  204C                     _modSawRev:	
 10543                           
 10544                           ;modulation.c: 112: return -1 * modSaw(angle, inflection);
 10545                           
 10546                           ;incstack = 0
 10547                           ; Regs used in _modSawRev: [wreg+status,2+status,0+pclath+cstack]
 10548  204C  0022               	movlb	2	; select bank2
 10549  204D  0845               	movf	modSawRev@angle^(0+256),w
 10550  204E  00AE               	movwf	modSaw@angle^(0+256)
 10551  204F  0846               	movf	(modSawRev@angle+1)^(0+256),w
 10552  2050  00AF               	movwf	(modSaw@angle+1)^(0+256)
 10553  2051  0847               	movf	(modSawRev@angle+2)^(0+256),w
 10554  2052  00B0               	movwf	(modSaw@angle+2)^(0+256)
 10555  2053  0848               	movf	modSawRev@inflection^(0+256),w
 10556  2054  00B1               	movwf	modSaw@inflection^(0+256)
 10557  2055  0849               	movf	(modSawRev@inflection+1)^(0+256),w
 10558  2056  00B2               	movwf	(modSaw@inflection+1)^(0+256)
 10559  2057  084A               	movf	(modSawRev@inflection+2)^(0+256),w
 10560  2058  00B3               	movwf	(modSaw@inflection+2)^(0+256)
 10561  2059  3194  24AA         	fcall	_modSaw
 10562  205B  0022               	movlb	2	; select bank2
 10563  205C  092E               	comf	?_modSaw^(0+256),w
 10564  205D  00CB               	movwf	??_modSawRev^(0+256)
 10565  205E  092F               	comf	(?_modSaw+1)^(0+256),w
 10566  205F  00CC               	movwf	(??_modSawRev^(0+256)+1)
 10567  2060  0ACB               	incf	??_modSawRev^(0+256),f
 10568  2061  1903               	skipnz
 10569  2062  0ACC               	incf	(??_modSawRev^(0+256)+1),f
 10570  2063  084B               	movf	??_modSawRev^(0+256),w
 10571  2064  00C5               	movwf	?_modSawRev^(0+256)
 10572  2065  084C               	movf	(??_modSawRev+1)^(0+256),w
 10573  2066  00C6               	movwf	(?_modSawRev+1)^(0+256)
 10574  2067  0008               	return
 10575  2068                     __end_of_modSawRev:	
 10576                           
 10577                           	psect	text21
 10578  14AA                     __ptext21:	
 10579 ;; *************** function _modSaw *****************
 10580 ;; Defined at:
 10581 ;;		line 95 in file "modulation.c"
 10582 ;; Parameters:    Size  Location     Type
 10583 ;;  angle           3   14[BANK2 ] int 
 10584 ;;  inflection      3   17[BANK2 ] int 
 10585 ;; Auto vars:     Size  Location     Type
 10586 ;;  period          3   34[BANK2 ] int 
 10587 ;;  shift           3   31[BANK2 ] int 
 10588 ;;  mod             2   29[BANK2 ] int 
 10589 ;; Return value:  Size  Location     Type
 10590 ;;                  2   14[BANK2 ] int 
 10591 ;; Registers used:
 10592 ;;		wreg, status,2, status,0, pclath, cstack
 10593 ;; Tracked objects:
 10594 ;;		On entry : 0/0
 10595 ;;		On exit  : 0/0
 10596 ;;		Unchanged: 0/0
 10597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10598 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10599 ;;      Locals:         0       0       0      17       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10601 ;;      Totals:         0       0       0      23       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10602 ;;Total ram usage:       23 bytes
 10603 ;; Hardware stack levels used:    1
 10604 ;; Hardware stack levels required when called:    5
 10605 ;; This function calls:
 10606 ;;		___ftadd
 10607 ;;		___ftdiv
 10608 ;;		___ftge
 10609 ;;		___ftmul
 10610 ;;		___ftneg
 10611 ;;		___fttol
 10612 ;; This function is called by:
 10613 ;;		_updateModulationArray
 10614 ;;		_modSawRev
 10615 ;; This function uses a non-reentrant model
 10616 ;;
 10617                           
 10618                           
 10619                           ;psect for function _modSaw
 10620  14AA                     _modSaw:	
 10621                           
 10622                           ;modulation.c: 96: double period = 1.0;
 10623                           
 10624                           ;incstack = 0
 10625                           ; Regs used in _modSaw: [wreg+status,2+status,0+pclath+cstack]
 10626  14AA  3000               	movlw	0
 10627  14AB  0022               	movlb	2	; select bank2
 10628  14AC  00C2               	movwf	modSaw@period^(0+256)
 10629  14AD  3080               	movlw	128
 10630  14AE  00C3               	movwf	(modSaw@period+1)^(0+256)
 10631  14AF  303F               	movlw	63
 10632  14B0  00C4               	movwf	(modSaw@period+2)^(0+256)
 10633                           
 10634                           ;modulation.c: 97: double shift = 0;
 10635  14B1  3000               	movlw	0
 10636  14B2  00BF               	movwf	modSaw@shift^(0+256)
 10637  14B3  3000               	movlw	0
 10638  14B4  00C0               	movwf	(modSaw@shift+1)^(0+256)
 10639  14B5  3000               	movlw	0
 10640  14B6  00C1               	movwf	(modSaw@shift+2)^(0+256)
 10641                           
 10642                           ;modulation.c: 99: if(angle<=inflection) {
 10643  14B7  0831               	movf	modSaw@inflection^(0+256),w
 10644  14B8  0021               	movlb	1	; select bank1
 10645  14B9  00A0               	movwf	___ftge@ff1^(0+128)
 10646  14BA  0022               	movlb	2	; select bank2
 10647  14BB  0832               	movf	(modSaw@inflection+1)^(0+256),w
 10648  14BC  0021               	movlb	1	; select bank1
 10649  14BD  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10650  14BE  0022               	movlb	2	; select bank2
 10651  14BF  0833               	movf	(modSaw@inflection+2)^(0+256),w
 10652  14C0  0021               	movlb	1	; select bank1
 10653  14C1  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10654  14C2  0022               	movlb	2	; select bank2
 10655  14C3  082E               	movf	modSaw@angle^(0+256),w
 10656  14C4  0021               	movlb	1	; select bank1
 10657  14C5  00A3               	movwf	___ftge@ff2^(0+128)
 10658  14C6  0022               	movlb	2	; select bank2
 10659  14C7  082F               	movf	(modSaw@angle+1)^(0+256),w
 10660  14C8  0021               	movlb	1	; select bank1
 10661  14C9  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10662  14CA  0022               	movlb	2	; select bank2
 10663  14CB  0830               	movf	(modSaw@angle+2)^(0+256),w
 10664  14CC  0021               	movlb	1	; select bank1
 10665  14CD  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10666  14CE  31A2  22DB  3194   	fcall	___ftge
 10667  14D1  1C03               	btfss	3,0
 10668  14D2  2CDF               	goto	l7964
 10669                           
 10670                           ;modulation.c: 100: period = 180.0/inflection;
 10671  14D3  0022               	movlb	2	; select bank2
 10672  14D4  0831               	movf	modSaw@inflection^(0+256),w
 10673  14D5  0021               	movlb	1	; select bank1
 10674  14D6  00CE               	movwf	___ftdiv@f2^(0+128)
 10675  14D7  0022               	movlb	2	; select bank2
 10676  14D8  0832               	movf	(modSaw@inflection+1)^(0+256),w
 10677  14D9  0021               	movlb	1	; select bank1
 10678  14DA  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10679  14DB  0022               	movlb	2	; select bank2
 10680  14DC  0833               	movf	(modSaw@inflection+2)^(0+256),w
 10681  14DD  0021               	movlb	1	; select bank1
 10682  14DE  2DBC               	goto	L9
 10683  14DF                     l7964:	
 10684                           ;modulation.c: 101: } else {
 10685                           
 10686                           
 10687                           ;modulation.c: 102: shift = -(360-inflection*2)*(180/(360-inflection)) + 360;
 10688  14DF  0022               	movlb	2	; select bank2
 10689  14E0  0831               	movf	modSaw@inflection^(0+256),w
 10690  14E1  0021               	movlb	1	; select bank1
 10691  14E2  00B1               	movwf	___ftmul@f2^(0+128)
 10692  14E3  0022               	movlb	2	; select bank2
 10693  14E4  0832               	movf	(modSaw@inflection+1)^(0+256),w
 10694  14E5  0021               	movlb	1	; select bank1
 10695  14E6  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10696  14E7  0022               	movlb	2	; select bank2
 10697  14E8  0833               	movf	(modSaw@inflection+2)^(0+256),w
 10698  14E9  0021               	movlb	1	; select bank1
 10699  14EA  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10700  14EB  3000               	movlw	0
 10701  14EC  00AE               	movwf	___ftmul@f1^(0+128)
 10702  14ED  3000               	movlw	0
 10703  14EE  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10704  14EF  3040               	movlw	64
 10705  14F0  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10706  14F1  319E  2691  3194   	fcall	___ftmul
 10707  14F4  0021               	movlb	1	; select bank1
 10708  14F5  082E               	movf	?___ftmul^(0+128),w
 10709  14F6  00BE               	movwf	___ftneg@f1^(0+128)
 10710  14F7  082F               	movf	(?___ftmul+1)^(0+128),w
 10711  14F8  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10712  14F9  0830               	movf	(?___ftmul+2)^(0+128),w
 10713  14FA  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10714  14FB  31AF  2763  3194   	fcall	___ftneg
 10715  14FE  0021               	movlb	1	; select bank1
 10716  14FF  083E               	movf	?___ftneg^(0+128),w
 10717  1500  00C4               	movwf	___ftadd@f2^(0+128)
 10718  1501  083F               	movf	(?___ftneg+1)^(0+128),w
 10719  1502  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10720  1503  0840               	movf	(?___ftneg+2)^(0+128),w
 10721  1504  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10722  1505  3000               	movlw	0
 10723  1506  00C1               	movwf	___ftadd@f1^(0+128)
 10724  1507  30B4               	movlw	180
 10725  1508  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10726  1509  3043               	movlw	67
 10727  150A  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10728  150B  3191  2153  3194   	fcall	___ftadd
 10729  150E  0021               	movlb	1	; select bank1
 10730  150F  0841               	movf	?___ftadd^(0+128),w
 10731  1510  0022               	movlb	2	; select bank2
 10732  1511  00B4               	movwf	_modSaw$2821^(0+256)
 10733  1512  0021               	movlb	1	; select bank1
 10734  1513  0842               	movf	(?___ftadd+1)^(0+128),w
 10735  1514  0022               	movlb	2	; select bank2
 10736  1515  00B5               	movwf	(_modSaw$2821+1)^(0+256)
 10737  1516  0021               	movlb	1	; select bank1
 10738  1517  0843               	movf	(?___ftadd+2)^(0+128),w
 10739  1518  0022               	movlb	2	; select bank2
 10740  1519  00B6               	movwf	(_modSaw$2821+2)^(0+256)
 10741                           
 10742                           ;modulation.c: 102: shift = -(360-inflection*2)*(180/(360-inflection)) + 360;
 10743  151A  0834               	movf	_modSaw$2821^(0+256),w
 10744  151B  0021               	movlb	1	; select bank1
 10745  151C  00BE               	movwf	___ftneg@f1^(0+128)
 10746  151D  0022               	movlb	2	; select bank2
 10747  151E  0835               	movf	(_modSaw$2821+1)^(0+256),w
 10748  151F  0021               	movlb	1	; select bank1
 10749  1520  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10750  1521  0022               	movlb	2	; select bank2
 10751  1522  0836               	movf	(_modSaw$2821+2)^(0+256),w
 10752  1523  0021               	movlb	1	; select bank1
 10753  1524  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10754  1525  31AF  2763  3194   	fcall	___ftneg
 10755  1528  0021               	movlb	1	; select bank1
 10756  1529  083E               	movf	?___ftneg^(0+128),w
 10757  152A  00AE               	movwf	___ftmul@f1^(0+128)
 10758  152B  083F               	movf	(?___ftneg+1)^(0+128),w
 10759  152C  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10760  152D  0840               	movf	(?___ftneg+2)^(0+128),w
 10761  152E  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10762  152F  3000               	movlw	0
 10763  1530  00C1               	movwf	___ftadd@f1^(0+128)
 10764  1531  30B4               	movlw	180
 10765  1532  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10766  1533  3043               	movlw	67
 10767  1534  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10768  1535  0022               	movlb	2	; select bank2
 10769  1536  0831               	movf	modSaw@inflection^(0+256),w
 10770  1537  0021               	movlb	1	; select bank1
 10771  1538  00BE               	movwf	___ftneg@f1^(0+128)
 10772  1539  0022               	movlb	2	; select bank2
 10773  153A  0832               	movf	(modSaw@inflection+1)^(0+256),w
 10774  153B  0021               	movlb	1	; select bank1
 10775  153C  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10776  153D  0022               	movlb	2	; select bank2
 10777  153E  0833               	movf	(modSaw@inflection+2)^(0+256),w
 10778  153F  0021               	movlb	1	; select bank1
 10779  1540  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10780  1541  31AF  2763  3194   	fcall	___ftneg
 10781  1544  0021               	movlb	1	; select bank1
 10782  1545  083E               	movf	?___ftneg^(0+128),w
 10783  1546  00C4               	movwf	___ftadd@f2^(0+128)
 10784  1547  083F               	movf	(?___ftneg+1)^(0+128),w
 10785  1548  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10786  1549  0840               	movf	(?___ftneg+2)^(0+128),w
 10787  154A  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10788  154B  3191  2153  3194   	fcall	___ftadd
 10789  154E  0021               	movlb	1	; select bank1
 10790  154F  0841               	movf	?___ftadd^(0+128),w
 10791  1550  00CE               	movwf	___ftdiv@f2^(0+128)
 10792  1551  0842               	movf	(?___ftadd+1)^(0+128),w
 10793  1552  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10794  1553  0843               	movf	(?___ftadd+2)^(0+128),w
 10795  1554  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10796  1555  3000               	movlw	0
 10797  1556  00D1               	movwf	___ftdiv@f1^(0+128)
 10798  1557  3034               	movlw	52
 10799  1558  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10800  1559  3043               	movlw	67
 10801  155A  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10802  155B  319D  253D  3194   	fcall	___ftdiv
 10803  155E  0021               	movlb	1	; select bank1
 10804  155F  084E               	movf	?___ftdiv^(0+128),w
 10805  1560  00B1               	movwf	___ftmul@f2^(0+128)
 10806  1561  084F               	movf	(?___ftdiv+1)^(0+128),w
 10807  1562  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10808  1563  0850               	movf	(?___ftdiv+2)^(0+128),w
 10809  1564  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10810  1565  319E  2691  3194   	fcall	___ftmul
 10811  1568  0021               	movlb	1	; select bank1
 10812  1569  082E               	movf	?___ftmul^(0+128),w
 10813  156A  0022               	movlb	2	; select bank2
 10814  156B  00B7               	movwf	_modSaw$2822^(0+256)
 10815  156C  0021               	movlb	1	; select bank1
 10816  156D  082F               	movf	(?___ftmul+1)^(0+128),w
 10817  156E  0022               	movlb	2	; select bank2
 10818  156F  00B8               	movwf	(_modSaw$2822+1)^(0+256)
 10819  1570  0021               	movlb	1	; select bank1
 10820  1571  0830               	movf	(?___ftmul+2)^(0+128),w
 10821  1572  0022               	movlb	2	; select bank2
 10822  1573  00B9               	movwf	(_modSaw$2822+2)^(0+256)
 10823                           
 10824                           ;modulation.c: 102: shift = -(360-inflection*2)*(180/(360-inflection)) + 360;
 10825  1574  3000               	movlw	0
 10826  1575  0021               	movlb	1	; select bank1
 10827  1576  00C1               	movwf	___ftadd@f1^(0+128)
 10828  1577  30B4               	movlw	180
 10829  1578  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10830  1579  3043               	movlw	67
 10831  157A  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10832  157B  0022               	movlb	2	; select bank2
 10833  157C  0837               	movf	_modSaw$2822^(0+256),w
 10834  157D  0021               	movlb	1	; select bank1
 10835  157E  00C4               	movwf	___ftadd@f2^(0+128)
 10836  157F  0022               	movlb	2	; select bank2
 10837  1580  0838               	movf	(_modSaw$2822+1)^(0+256),w
 10838  1581  0021               	movlb	1	; select bank1
 10839  1582  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10840  1583  0022               	movlb	2	; select bank2
 10841  1584  0839               	movf	(_modSaw$2822+2)^(0+256),w
 10842  1585  0021               	movlb	1	; select bank1
 10843  1586  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10844  1587  3191  2153  3194   	fcall	___ftadd
 10845  158A  0021               	movlb	1	; select bank1
 10846  158B  0841               	movf	?___ftadd^(0+128),w
 10847  158C  0022               	movlb	2	; select bank2
 10848  158D  00BF               	movwf	modSaw@shift^(0+256)
 10849  158E  0021               	movlb	1	; select bank1
 10850  158F  0842               	movf	(?___ftadd+1)^(0+128),w
 10851  1590  0022               	movlb	2	; select bank2
 10852  1591  00C0               	movwf	(modSaw@shift+1)^(0+256)
 10853  1592  0021               	movlb	1	; select bank1
 10854  1593  0843               	movf	(?___ftadd+2)^(0+128),w
 10855  1594  0022               	movlb	2	; select bank2
 10856  1595  00C1               	movwf	(modSaw@shift+2)^(0+256)
 10857                           
 10858                           ;modulation.c: 103: period = 180/(360-inflection);
 10859  1596  3000               	movlw	0
 10860  1597  0021               	movlb	1	; select bank1
 10861  1598  00C1               	movwf	___ftadd@f1^(0+128)
 10862  1599  30B4               	movlw	180
 10863  159A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10864  159B  3043               	movlw	67
 10865  159C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10866  159D  0022               	movlb	2	; select bank2
 10867  159E  0831               	movf	modSaw@inflection^(0+256),w
 10868  159F  0021               	movlb	1	; select bank1
 10869  15A0  00BE               	movwf	___ftneg@f1^(0+128)
 10870  15A1  0022               	movlb	2	; select bank2
 10871  15A2  0832               	movf	(modSaw@inflection+1)^(0+256),w
 10872  15A3  0021               	movlb	1	; select bank1
 10873  15A4  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10874  15A5  0022               	movlb	2	; select bank2
 10875  15A6  0833               	movf	(modSaw@inflection+2)^(0+256),w
 10876  15A7  0021               	movlb	1	; select bank1
 10877  15A8  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10878  15A9  31AF  2763  3194   	fcall	___ftneg
 10879  15AC  0021               	movlb	1	; select bank1
 10880  15AD  083E               	movf	?___ftneg^(0+128),w
 10881  15AE  00C4               	movwf	___ftadd@f2^(0+128)
 10882  15AF  083F               	movf	(?___ftneg+1)^(0+128),w
 10883  15B0  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10884  15B1  0840               	movf	(?___ftneg+2)^(0+128),w
 10885  15B2  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10886  15B3  3191  2153  3194   	fcall	___ftadd
 10887  15B6  0021               	movlb	1	; select bank1
 10888  15B7  0841               	movf	?___ftadd^(0+128),w
 10889  15B8  00CE               	movwf	___ftdiv@f2^(0+128)
 10890  15B9  0842               	movf	(?___ftadd+1)^(0+128),w
 10891  15BA  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10892  15BB  0843               	movf	(?___ftadd+2)^(0+128),w
 10893  15BC                     L9:	
 10894  15BC  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10895  15BD  3000               	movlw	0
 10896  15BE  00D1               	movwf	___ftdiv@f1^(0+128)
 10897  15BF  3034               	movlw	52
 10898  15C0  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10899  15C1  3043               	movlw	67
 10900  15C2  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10901  15C3  319D  253D  3194   	fcall	___ftdiv
 10902  15C6  0021               	movlb	1	; select bank1
 10903  15C7  084E               	movf	?___ftdiv^(0+128),w
 10904  15C8  0022               	movlb	2	; select bank2
 10905  15C9  00C2               	movwf	modSaw@period^(0+256)
 10906  15CA  0021               	movlb	1	; select bank1
 10907  15CB  084F               	movf	(?___ftdiv+1)^(0+128),w
 10908  15CC  0022               	movlb	2	; select bank2
 10909  15CD  00C3               	movwf	(modSaw@period+1)^(0+256)
 10910  15CE  0021               	movlb	1	; select bank1
 10911  15CF  0850               	movf	(?___ftdiv+2)^(0+128),w
 10912  15D0  0022               	movlb	2	; select bank2
 10913  15D1  00C4               	movwf	(modSaw@period+2)^(0+256)
 10914                           
 10915                           ;modulation.c: 104: }
 10916                           ;modulation.c: 107: int mod = (int)((period*angle-shift)*5/9);
 10917  15D2  0842               	movf	modSaw@period^(0+256),w
 10918  15D3  0021               	movlb	1	; select bank1
 10919  15D4  00B1               	movwf	___ftmul@f2^(0+128)
 10920  15D5  0022               	movlb	2	; select bank2
 10921  15D6  0843               	movf	(modSaw@period+1)^(0+256),w
 10922  15D7  0021               	movlb	1	; select bank1
 10923  15D8  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10924  15D9  0022               	movlb	2	; select bank2
 10925  15DA  0844               	movf	(modSaw@period+2)^(0+256),w
 10926  15DB  0021               	movlb	1	; select bank1
 10927  15DC  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10928  15DD  0022               	movlb	2	; select bank2
 10929  15DE  082E               	movf	modSaw@angle^(0+256),w
 10930  15DF  0021               	movlb	1	; select bank1
 10931  15E0  00AE               	movwf	___ftmul@f1^(0+128)
 10932  15E1  0022               	movlb	2	; select bank2
 10933  15E2  082F               	movf	(modSaw@angle+1)^(0+256),w
 10934  15E3  0021               	movlb	1	; select bank1
 10935  15E4  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10936  15E5  0022               	movlb	2	; select bank2
 10937  15E6  0830               	movf	(modSaw@angle+2)^(0+256),w
 10938  15E7  0021               	movlb	1	; select bank1
 10939  15E8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10940  15E9  319E  2691  3194   	fcall	___ftmul
 10941  15EC  0021               	movlb	1	; select bank1
 10942  15ED  082E               	movf	?___ftmul^(0+128),w
 10943  15EE  00C4               	movwf	___ftadd@f2^(0+128)
 10944  15EF  082F               	movf	(?___ftmul+1)^(0+128),w
 10945  15F0  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10946  15F1  0830               	movf	(?___ftmul+2)^(0+128),w
 10947  15F2  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10948  15F3  0022               	movlb	2	; select bank2
 10949  15F4  083F               	movf	modSaw@shift^(0+256),w
 10950  15F5  0021               	movlb	1	; select bank1
 10951  15F6  00BE               	movwf	___ftneg@f1^(0+128)
 10952  15F7  0022               	movlb	2	; select bank2
 10953  15F8  0840               	movf	(modSaw@shift+1)^(0+256),w
 10954  15F9  0021               	movlb	1	; select bank1
 10955  15FA  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10956  15FB  0022               	movlb	2	; select bank2
 10957  15FC  0841               	movf	(modSaw@shift+2)^(0+256),w
 10958  15FD  0021               	movlb	1	; select bank1
 10959  15FE  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10960  15FF  31AF  2763  3194   	fcall	___ftneg
 10961  1602  0021               	movlb	1	; select bank1
 10962  1603  083E               	movf	?___ftneg^(0+128),w
 10963  1604  00C1               	movwf	___ftadd@f1^(0+128)
 10964  1605  083F               	movf	(?___ftneg+1)^(0+128),w
 10965  1606  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10966  1607  0840               	movf	(?___ftneg+2)^(0+128),w
 10967  1608  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10968  1609  3191  2153  3194   	fcall	___ftadd
 10969  160C  0021               	movlb	1	; select bank1
 10970  160D  0841               	movf	?___ftadd^(0+128),w
 10971  160E  0022               	movlb	2	; select bank2
 10972  160F  00BA               	movwf	_modSaw$2823^(0+256)
 10973  1610  0021               	movlb	1	; select bank1
 10974  1611  0842               	movf	(?___ftadd+1)^(0+128),w
 10975  1612  0022               	movlb	2	; select bank2
 10976  1613  00BB               	movwf	(_modSaw$2823+1)^(0+256)
 10977  1614  0021               	movlb	1	; select bank1
 10978  1615  0843               	movf	(?___ftadd+2)^(0+128),w
 10979  1616  0022               	movlb	2	; select bank2
 10980  1617  00BC               	movwf	(_modSaw$2823+2)^(0+256)
 10981                           
 10982                           ;modulation.c: 104: }
 10983                           ;modulation.c: 107: int mod = (int)((period*angle-shift)*5/9);
 10984  1618  083A               	movf	_modSaw$2823^(0+256),w
 10985  1619  0021               	movlb	1	; select bank1
 10986  161A  00B1               	movwf	___ftmul@f2^(0+128)
 10987  161B  0022               	movlb	2	; select bank2
 10988  161C  083B               	movf	(_modSaw$2823+1)^(0+256),w
 10989  161D  0021               	movlb	1	; select bank1
 10990  161E  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10991  161F  0022               	movlb	2	; select bank2
 10992  1620  083C               	movf	(_modSaw$2823+2)^(0+256),w
 10993  1621  0021               	movlb	1	; select bank1
 10994  1622  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10995  1623  3000               	movlw	0
 10996  1624  00AE               	movwf	___ftmul@f1^(0+128)
 10997  1625  30A0               	movlw	160
 10998  1626  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10999  1627  3040               	movlw	64
 11000  1628  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11001  1629  319E  2691  3194   	fcall	___ftmul
 11002  162C  0021               	movlb	1	; select bank1
 11003  162D  082E               	movf	?___ftmul^(0+128),w
 11004  162E  00D1               	movwf	___ftdiv@f1^(0+128)
 11005  162F  082F               	movf	(?___ftmul+1)^(0+128),w
 11006  1630  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11007  1631  0830               	movf	(?___ftmul+2)^(0+128),w
 11008  1632  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11009  1633  3000               	movlw	0
 11010  1634  00CE               	movwf	___ftdiv@f2^(0+128)
 11011  1635  3010               	movlw	16
 11012  1636  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11013  1637  3041               	movlw	65
 11014  1638  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11015  1639  319D  253D  3194   	fcall	___ftdiv
 11016  163C  0021               	movlb	1	; select bank1
 11017  163D  084E               	movf	?___ftdiv^(0+128),w
 11018  163E  0022               	movlb	2	; select bank2
 11019  163F  00A0               	movwf	___fttol@f1^(0+256)
 11020  1640  0021               	movlb	1	; select bank1
 11021  1641  084F               	movf	(?___ftdiv+1)^(0+128),w
 11022  1642  0022               	movlb	2	; select bank2
 11023  1643  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11024  1644  0021               	movlb	1	; select bank1
 11025  1645  0850               	movf	(?___ftdiv+2)^(0+128),w
 11026  1646  0022               	movlb	2	; select bank2
 11027  1647  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11028  1648  3199  21D5         	fcall	___fttol
 11029  164A  0022               	movlb	2	; select bank2
 11030  164B  0821               	movf	(?___fttol^(0+256)+1),w
 11031  164C  00BE               	movwf	(modSaw@mod+1)^(0+256)
 11032  164D  0820               	movf	?___fttol^(0+256),w
 11033  164E  00BD               	movwf	modSaw@mod^(0+256)
 11034                           
 11035                           ;modulation.c: 108: return mod;
 11036  164F  083E               	movf	(modSaw@mod+1)^(0+256),w
 11037  1650  00AF               	movwf	(?_modSaw+1)^(0+256)
 11038  1651  083D               	movf	modSaw@mod^(0+256),w
 11039  1652  00AE               	movwf	?_modSaw^(0+256)
 11040  1653  0008               	return
 11041  1654                     __end_of_modSaw:	
 11042                           
 11043                           	psect	text22
 11044  1F45                     __ptext22:	
 11045 ;; *************** function _set_subdivision *****************
 11046 ;; Defined at:
 11047 ;;		line 77 in file "user.c"
 11048 ;; Parameters:    Size  Location     Type
 11049 ;;  x               2   31[BANK2 ] int 
 11050 ;;  y               2   33[BANK2 ] int 
 11051 ;; Auto vars:     Size  Location     Type
 11052 ;;  scalar          3   38[BANK2 ] float 
 11053 ;;  tmpX            2   41[BANK2 ] int 
 11054 ;; Return value:  Size  Location     Type
 11055 ;;                  2   31[BANK2 ] int 
 11056 ;; Registers used:
 11057 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11058 ;; Tracked objects:
 11059 ;;		On entry : 0/0
 11060 ;;		On exit  : 0/0
 11061 ;;		Unchanged: 0/0
 11062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11063 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11064 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11065 ;;      Temps:          0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11066 ;;      Totals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11067 ;;Total ram usage:       12 bytes
 11068 ;; Hardware stack levels used:    1
 11069 ;; Hardware stack levels required when called:    6
 11070 ;; This function calls:
 11071 ;;		___awtoft
 11072 ;;		___ftmul
 11073 ;;		___fttol
 11074 ;;		_trunc
 11075 ;; This function is called by:
 11076 ;;		_main
 11077 ;; This function uses a non-reentrant model
 11078 ;;
 11079                           
 11080                           
 11081                           ;psect for function _set_subdivision
 11082  1F45                     _set_subdivision:	
 11083                           
 11084                           ;user.c: 81: adjust_sub_delay = 0;
 11085                           
 11086                           ;incstack = 0
 11087                           ; Regs used in _set_subdivision: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11088  1F45  0023               	movlb	3	; select bank3
 11089  1F46  01BC               	clrf	_adjust_sub_delay^(0+384)
 11090                           
 11091                           ;user.c: 82: int tmpX = x;
 11092  1F47  0022               	movlb	2	; select bank2
 11093  1F48  0840               	movf	(set_subdivision@x+1)^(0+256),w
 11094  1F49  00CA               	movwf	(set_subdivision@tmpX+1)^(0+256)
 11095  1F4A  083F               	movf	set_subdivision@x^(0+256),w
 11096  1F4B  00C9               	movwf	set_subdivision@tmpX^(0+256)
 11097                           
 11098                           ;user.c: 83: float scalar = 1.0;
 11099  1F4C  3000               	movlw	0
 11100  1F4D  00C6               	movwf	set_subdivision@scalar^(0+256)
 11101  1F4E  3080               	movlw	128
 11102  1F4F  00C7               	movwf	(set_subdivision@scalar+1)^(0+256)
 11103  1F50  303F               	movlw	63
 11104  1F51  00C8               	movwf	(set_subdivision@scalar+2)^(0+256)
 11105                           
 11106                           ;user.c: 85: switch (y) {
 11107  1F52  2F6E               	goto	l8874
 11108  1F53                     l8862:	
 11109                           ;user.c: 86: case 1:
 11110                           
 11111                           
 11112                           ;user.c: 87: scalar = 2.0;
 11113  1F53  3000               	movlw	0
 11114  1F54  00C6               	movwf	set_subdivision@scalar^(0+256)
 11115  1F55  3000               	movlw	0
 11116  1F56  00C7               	movwf	(set_subdivision@scalar+1)^(0+256)
 11117  1F57  3040               	movlw	64
 11118  1F58  2F6C               	goto	L13
 11119  1F59                     l8864:	
 11120                           ;user.c: 89: case 2:
 11121                           
 11122                           ;user.c: 88: break;
 11123                           
 11124                           
 11125                           ;user.c: 90: scalar = 0.6666;
 11126  1F59  30A6               	movlw	166
 11127  1F5A  00C6               	movwf	set_subdivision@scalar^(0+256)
 11128  1F5B  302A               	movlw	42
 11129  1F5C  2F60               	goto	L15
 11130  1F5D                     l8866:	
 11131                           ;user.c: 92: case 3:
 11132                           
 11133                           ;user.c: 91: break;
 11134                           
 11135                           
 11136                           ;user.c: 93: scalar = .5;
 11137  1F5D  3000               	movlw	0
 11138  1F5E  00C6               	movwf	set_subdivision@scalar^(0+256)
 11139  1F5F  3000               	movlw	0
 11140  1F60                     L15:	
 11141  1F60  00C7               	movwf	(set_subdivision@scalar+1)^(0+256)
 11142  1F61  303F               	movlw	63
 11143  1F62  2F6C               	goto	L13
 11144  1F63                     l8868:	
 11145                           ;user.c: 95: case 4:
 11146                           
 11147                           ;user.c: 94: break;
 11148                           
 11149                           
 11150                           ;user.c: 96: scalar = 0.3333;
 11151  1F63  30A6               	movlw	166
 11152  1F64  00C6               	movwf	set_subdivision@scalar^(0+256)
 11153  1F65  30AA               	movlw	170
 11154  1F66  2F6A               	goto	L14
 11155  1F67                     l8870:	
 11156                           ;user.c: 98: case 5:
 11157                           
 11158                           ;user.c: 97: break;
 11159                           
 11160                           
 11161                           ;user.c: 99: scalar = 0.25;
 11162  1F67  3000               	movlw	0
 11163  1F68  00C6               	movwf	set_subdivision@scalar^(0+256)
 11164  1F69  3080               	movlw	128
 11165  1F6A                     L14:	
 11166  1F6A  00C7               	movwf	(set_subdivision@scalar+1)^(0+256)
 11167  1F6B  303E               	movlw	62
 11168  1F6C                     L13:	
 11169  1F6C  00C8               	movwf	(set_subdivision@scalar+2)^(0+256)
 11170                           
 11171                           ;user.c: 104: }
 11172                           
 11173                           ;user.c: 103: break;
 11174                           
 11175                           ;user.c: 101: case 6:
 11176                           
 11177                           ;user.c: 100: break;
 11178  1F6D  2F87               	goto	l8876
 11179  1F6E                     l8874:	
 11180                           
 11181                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11182                           ; Switch size 1, requested type "space"
 11183                           ; Number of cases is 1, Range of values is 0 to 0
 11184                           ; switch strategies available:
 11185                           ; Name         Instructions Cycles
 11186                           ; simple_byte            4     3 (average)
 11187                           ; direct_byte            8     6 (fixed)
 11188                           ; jumptable            260     6 (fixed)
 11189                           ;	Chosen strategy is simple_byte
 11190  1F6E  0842               	movf	(set_subdivision@y+1)^(0+256),w
 11191  1F6F  3A00               	xorlw	0	; case 0
 11192  1F70  1903               	skipnz
 11193  1F71  2F73               	goto	l9394
 11194  1F72  2F87               	goto	l8876
 11195  1F73                     l9394:	
 11196                           
 11197                           ; Switch size 1, requested type "space"
 11198                           ; Number of cases is 6, Range of values is 1 to 6
 11199                           ; switch strategies available:
 11200                           ; Name         Instructions Cycles
 11201                           ; simple_byte           19    10 (average)
 11202                           ; direct_byte           21     9 (fixed)
 11203                           ; jumptable            263     9 (fixed)
 11204                           ;	Chosen strategy is simple_byte
 11205  1F73  0841               	movf	set_subdivision@y^(0+256),w
 11206  1F74  3A01               	xorlw	1	; case 1
 11207  1F75  1903               	skipnz
 11208  1F76  2F53               	goto	l8862
 11209  1F77  3A03               	xorlw	3	; case 2
 11210  1F78  1903               	skipnz
 11211  1F79  2F59               	goto	l8864
 11212  1F7A  3A01               	xorlw	1	; case 3
 11213  1F7B  1903               	skipnz
 11214  1F7C  2F5D               	goto	l8866
 11215  1F7D  3A07               	xorlw	7	; case 4
 11216  1F7E  1903               	skipnz
 11217  1F7F  2F63               	goto	l8868
 11218  1F80  3A01               	xorlw	1	; case 5
 11219  1F81  1903               	skipnz
 11220  1F82  2F67               	goto	l8870
 11221  1F83  3A03               	xorlw	3	; case 6
 11222  1F84  1903               	skipnz
 11223  1F85  2F87               	goto	l8876
 11224  1F86  2F87               	goto	l8876
 11225  1F87                     l8876:	
 11226                           
 11227                           ;user.c: 106: tmpX = tmpX * scalar;
 11228  1F87  084A               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11229  1F88  0021               	movlb	1	; select bank1
 11230  1F89  00A9               	movwf	(___awtoft@c+1)^(0+128)
 11231  1F8A  0022               	movlb	2	; select bank2
 11232  1F8B  0849               	movf	set_subdivision@tmpX^(0+256),w
 11233  1F8C  0021               	movlb	1	; select bank1
 11234  1F8D  00A8               	movwf	___awtoft@c^(0+128)
 11235  1F8E  31A0  20A9  319F   	fcall	___awtoft
 11236  1F91  0021               	movlb	1	; select bank1
 11237  1F92  0828               	movf	?___awtoft^(0+128),w
 11238  1F93  00B1               	movwf	___ftmul@f2^(0+128)
 11239  1F94  0829               	movf	(?___awtoft+1)^(0+128),w
 11240  1F95  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11241  1F96  082A               	movf	(?___awtoft+2)^(0+128),w
 11242  1F97  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11243  1F98  0022               	movlb	2	; select bank2
 11244  1F99  0846               	movf	set_subdivision@scalar^(0+256),w
 11245  1F9A  0021               	movlb	1	; select bank1
 11246  1F9B  00AE               	movwf	___ftmul@f1^(0+128)
 11247  1F9C  0022               	movlb	2	; select bank2
 11248  1F9D  0847               	movf	(set_subdivision@scalar+1)^(0+256),w
 11249  1F9E  0021               	movlb	1	; select bank1
 11250  1F9F  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11251  1FA0  0022               	movlb	2	; select bank2
 11252  1FA1  0848               	movf	(set_subdivision@scalar+2)^(0+256),w
 11253  1FA2  0021               	movlb	1	; select bank1
 11254  1FA3  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11255  1FA4  319E  2691  319F   	fcall	___ftmul
 11256  1FA7  0021               	movlb	1	; select bank1
 11257  1FA8  082E               	movf	?___ftmul^(0+128),w
 11258  1FA9  0022               	movlb	2	; select bank2
 11259  1FAA  00A0               	movwf	___fttol@f1^(0+256)
 11260  1FAB  0021               	movlb	1	; select bank1
 11261  1FAC  082F               	movf	(?___ftmul+1)^(0+128),w
 11262  1FAD  0022               	movlb	2	; select bank2
 11263  1FAE  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11264  1FAF  0021               	movlb	1	; select bank1
 11265  1FB0  0830               	movf	(?___ftmul+2)^(0+128),w
 11266  1FB1  0022               	movlb	2	; select bank2
 11267  1FB2  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11268  1FB3  3199  21D5  319F   	fcall	___fttol
 11269  1FB6  0022               	movlb	2	; select bank2
 11270  1FB7  0821               	movf	(?___fttol^(0+256)+1),w
 11271  1FB8  00CA               	movwf	(set_subdivision@tmpX+1)^(0+256)
 11272  1FB9  0820               	movf	?___fttol^(0+256),w
 11273  1FBA  00C9               	movwf	set_subdivision@tmpX^(0+256)
 11274                           
 11275                           ;user.c: 108: if (trunc(tmpX) != tmpX) {
 11276  1FBB  084A               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11277  1FBC  0021               	movlb	1	; select bank1
 11278  1FBD  00A9               	movwf	(___awtoft@c+1)^(0+128)
 11279  1FBE  0022               	movlb	2	; select bank2
 11280  1FBF  0849               	movf	set_subdivision@tmpX^(0+256),w
 11281  1FC0  0021               	movlb	1	; select bank1
 11282  1FC1  00A8               	movwf	___awtoft@c^(0+128)
 11283  1FC2  31A0  20A9  319F   	fcall	___awtoft
 11284  1FC5  0021               	movlb	1	; select bank1
 11285  1FC6  0828               	movf	?___awtoft^(0+128),w
 11286  1FC7  0022               	movlb	2	; select bank2
 11287  1FC8  00B6               	movwf	trunc@x^(0+256)
 11288  1FC9  0021               	movlb	1	; select bank1
 11289  1FCA  0829               	movf	(?___awtoft+1)^(0+128),w
 11290  1FCB  0022               	movlb	2	; select bank2
 11291  1FCC  00B7               	movwf	(trunc@x+1)^(0+256)
 11292  1FCD  0021               	movlb	1	; select bank1
 11293  1FCE  082A               	movf	(?___awtoft+2)^(0+128),w
 11294  1FCF  0022               	movlb	2	; select bank2
 11295  1FD0  00B8               	movwf	(trunc@x+2)^(0+256)
 11296  1FD1  31A5  251F  319F   	fcall	_trunc
 11297  1FD4  0022               	movlb	2	; select bank2
 11298  1FD5  0836               	movf	?_trunc^(0+256),w
 11299  1FD6  00C3               	movwf	??_set_subdivision^(0+256)
 11300  1FD7  0837               	movf	(?_trunc+1)^(0+256),w
 11301  1FD8  00C4               	movwf	(??_set_subdivision^(0+256)+1)
 11302  1FD9  0838               	movf	(?_trunc+2)^(0+256),w
 11303  1FDA  00C5               	movwf	(??_set_subdivision^(0+256)+2)
 11304  1FDB  084A               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11305  1FDC  0021               	movlb	1	; select bank1
 11306  1FDD  00A9               	movwf	(___awtoft@c+1)^(0+128)
 11307  1FDE  0022               	movlb	2	; select bank2
 11308  1FDF  0849               	movf	set_subdivision@tmpX^(0+256),w
 11309  1FE0  0021               	movlb	1	; select bank1
 11310  1FE1  00A8               	movwf	___awtoft@c^(0+128)
 11311  1FE2  31A0  20A9  319F   	fcall	___awtoft
 11312  1FE5  0021               	movlb	1	; select bank1
 11313  1FE6  082A               	movf	(?___awtoft+2)^(0+128),w
 11314  1FE7  0022               	movlb	2	; select bank2
 11315  1FE8  0645               	xorwf	(??_set_subdivision+2)^(0+256),w
 11316  1FE9  1D03               	skipz
 11317  1FEA  2FF5               	goto	u9785
 11318  1FEB  0021               	movlb	1	; select bank1
 11319  1FEC  0829               	movf	(?___awtoft+1)^(0+128),w
 11320  1FED  0022               	movlb	2	; select bank2
 11321  1FEE  0644               	xorwf	(??_set_subdivision+1)^(0+256),w
 11322  1FEF  1D03               	skipz
 11323  1FF0  2FF5               	goto	u9785
 11324  1FF1  0021               	movlb	1	; select bank1
 11325  1FF2  0828               	movf	?___awtoft^(0+128),w
 11326  1FF3  0022               	movlb	2	; select bank2
 11327  1FF4  0643               	xorwf	??_set_subdivision^(0+256),w
 11328  1FF5                     u9785:	
 11329  1FF5  1903               	skipnz
 11330  1FF6  2FFA               	goto	l8882
 11331                           
 11332                           ;user.c: 109: adjust_sub_delay = 1;
 11333  1FF7  0023               	movlb	3	; select bank3
 11334  1FF8  01BC               	clrf	_adjust_sub_delay^(0+384)
 11335  1FF9  0ABC               	incf	_adjust_sub_delay^(0+384),f
 11336  1FFA                     l8882:	
 11337                           
 11338                           ;user.c: 110: }
 11339                           ;user.c: 112: return tmpX;
 11340  1FFA  0022               	movlb	2	; select bank2
 11341  1FFB  084A               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11342  1FFC  00C0               	movwf	(?_set_subdivision+1)^(0+256)
 11343  1FFD  0849               	movf	set_subdivision@tmpX^(0+256),w
 11344  1FFE  00BF               	movwf	?_set_subdivision^(0+256)
 11345  1FFF  0008               	return
 11346  2000                     __end_of_set_subdivision:	
 11347                           
 11348                           	psect	text23
 11349  251F                     __ptext23:	
 11350 ;; *************** function _trunc *****************
 11351 ;; Defined at:
 11352 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\trunc.c"
 11353 ;; Parameters:    Size  Location     Type
 11354 ;;  x               3   22[BANK2 ] int 
 11355 ;; Auto vars:     Size  Location     Type
 11356 ;;  i               3   26[BANK2 ] int 
 11357 ;;  expon           2   29[BANK2 ] int 
 11358 ;; Return value:  Size  Location     Type
 11359 ;;                  3   22[BANK2 ] int 
 11360 ;; Registers used:
 11361 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11362 ;; Tracked objects:
 11363 ;;		On entry : 0/0
 11364 ;;		On exit  : 0/0
 11365 ;;		Unchanged: 0/0
 11366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11367 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11368 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11369 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11370 ;;      Totals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11371 ;;Total ram usage:        9 bytes
 11372 ;; Hardware stack levels used:    1
 11373 ;; Hardware stack levels required when called:    5
 11374 ;; This function calls:
 11375 ;;		___altoft
 11376 ;;		___fttol
 11377 ;;		_frexp
 11378 ;; This function is called by:
 11379 ;;		_set_subdivision
 11380 ;; This function uses a non-reentrant model
 11381 ;;
 11382                           
 11383                           
 11384                           ;psect for function _trunc
 11385  251F                     _trunc:	
 11386                           
 11387                           ;incstack = 0
 11388                           ; Regs used in _trunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11389  251F  0022               	movlb	2	; select bank2
 11390  2520  0836               	movf	trunc@x^(0+256),w
 11391  2521  0021               	movlb	1	; select bank1
 11392  2522  00A0               	movwf	frexp@value^(0+128)
 11393  2523  0022               	movlb	2	; select bank2
 11394  2524  0837               	movf	(trunc@x+1)^(0+256),w
 11395  2525  0021               	movlb	1	; select bank1
 11396  2526  00A1               	movwf	(frexp@value+1)^(0+128)
 11397  2527  0022               	movlb	2	; select bank2
 11398  2528  0838               	movf	(trunc@x+2)^(0+256),w
 11399  2529  0021               	movlb	1	; select bank1
 11400  252A  00A2               	movwf	(frexp@value+2)^(0+128)
 11401  252B  303D               	movlw	(low (trunc@expon| (0+256)))& (0+255)
 11402  252C  0022               	movlb	2	; select bank2
 11403  252D  00B9               	movwf	??_trunc^(0+256)
 11404  252E  0839               	movf	??_trunc^(0+256),w
 11405  252F  0021               	movlb	1	; select bank1
 11406  2530  00A3               	movwf	frexp@eptr^(0+128)
 11407  2531  31A3  2392  31A5   	fcall	_frexp
 11408  2534  0022               	movlb	2	; select bank2
 11409  2535  1FBE               	btfss	(trunc@expon+1)^(0+256),7
 11410  2536  2D3E               	goto	l8092
 11411  2537  3000               	movlw	0
 11412  2538  00B6               	movwf	?_trunc^(0+256)
 11413  2539  3000               	movlw	0
 11414  253A  00B7               	movwf	(?_trunc+1)^(0+256)
 11415  253B  3000               	movlw	0
 11416  253C  00B8               	movwf	(?_trunc+2)^(0+256)
 11417  253D  0008               	return
 11418  253E                     l8092:	
 11419  253E  3000               	movlw	0
 11420  253F  023E               	subwf	(trunc@expon+1)^(0+256),w
 11421  2540  3015               	movlw	21
 11422  2541  1903               	skipnz
 11423  2542  023D               	subwf	trunc@expon^(0+256),w
 11424  2543  1803               	btfsc	3,0
 11425  2544  0008               	return
 11426  2545  0836               	movf	trunc@x^(0+256),w
 11427  2546  00A0               	movwf	___fttol@f1^(0+256)
 11428  2547  0837               	movf	(trunc@x+1)^(0+256),w
 11429  2548  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11430  2549  0838               	movf	(trunc@x+2)^(0+256),w
 11431  254A  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11432  254B  3199  21D5  31A5   	fcall	___fttol
 11433  254E  0022               	movlb	2	; select bank2
 11434  254F  0823               	movf	(?___fttol+3)^(0+256),w
 11435  2550  00B1               	movwf	(___altoft@c+3)^(0+256)
 11436  2551  0822               	movf	(?___fttol+2)^(0+256),w
 11437  2552  00B0               	movwf	(___altoft@c+2)^(0+256)
 11438  2553  0821               	movf	(?___fttol+1)^(0+256),w
 11439  2554  00AF               	movwf	(___altoft@c+1)^(0+256)
 11440  2555  0820               	movf	?___fttol^(0+256),w
 11441  2556  00AE               	movwf	___altoft@c^(0+256)
 11442  2557  31A5  25FB         	fcall	___altoft
 11443  2559  0022               	movlb	2	; select bank2
 11444  255A  082E               	movf	?___altoft^(0+256),w
 11445  255B  00BA               	movwf	trunc@i^(0+256)
 11446  255C  082F               	movf	(?___altoft+1)^(0+256),w
 11447  255D  00BB               	movwf	(trunc@i+1)^(0+256)
 11448  255E  0830               	movf	(?___altoft+2)^(0+256),w
 11449  255F  00BC               	movwf	(trunc@i+2)^(0+256)
 11450  2560  083A               	movf	trunc@i^(0+256),w
 11451  2561  00B6               	movwf	?_trunc^(0+256)
 11452  2562  083B               	movf	(trunc@i+1)^(0+256),w
 11453  2563  00B7               	movwf	(?_trunc+1)^(0+256)
 11454  2564  083C               	movf	(trunc@i+2)^(0+256),w
 11455  2565  00B8               	movwf	(?_trunc+2)^(0+256)
 11456  2566  0008               	return
 11457  2567                     __end_of_trunc:	
 11458                           
 11459                           	psect	text24
 11460  1DE6                     __ptext24:	
 11461 ;; *************** function _scaleiA10kPot *****************
 11462 ;; Defined at:
 11463 ;;		line 211 in file "user.c"
 11464 ;; Parameters:    Size  Location     Type
 11465 ;;  input           3   71[BANK2 ] int 
 11466 ;; Auto vars:     Size  Location     Type
 11467 ;;  pwm             3    0[BANK3 ] float 
 11468 ;; Return value:  Size  Location     Type
 11469 ;;                  2   71[BANK2 ] int 
 11470 ;; Registers used:
 11471 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11472 ;; Tracked objects:
 11473 ;;		On entry : 0/0
 11474 ;;		On exit  : 0/0
 11475 ;;		Unchanged: 0/0
 11476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11477 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11478 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11480 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11481 ;;Total ram usage:       12 bytes
 11482 ;; Hardware stack levels used:    1
 11483 ;; Hardware stack levels required when called:    8
 11484 ;; This function calls:
 11485 ;;		___ftadd
 11486 ;;		___ftdiv
 11487 ;;		___ftmul
 11488 ;;		___ftneg
 11489 ;;		___fttol
 11490 ;;		_pow
 11491 ;; This function is called by:
 11492 ;;		_main
 11493 ;; This function uses a non-reentrant model
 11494 ;;
 11495                           
 11496                           
 11497                           ;psect for function _scaleiA10kPot
 11498  1DE6                     _scaleiA10kPot:	
 11499                           
 11500                           ;user.c: 214: if (input == 0.0) {return 0;}
 11501                           
 11502                           ;incstack = 0
 11503                           ; Regs used in _scaleiA10kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11504  1DE6  0022               	movlb	2	; select bank2
 11505  1DE7  0869               	movf	(scaleiA10kPot@input+2)^(0+256),w
 11506  1DE8  0468               	iorwf	(scaleiA10kPot@input+1)^(0+256),w
 11507  1DE9  0467               	iorwf	scaleiA10kPot@input^(0+256),w
 11508  1DEA  1D03               	skipz
 11509  1DEB  2DEF               	goto	l8822
 11510  1DEC  01E7               	clrf	?_scaleiA10kPot^(0+256)
 11511  1DED  01E8               	clrf	(?_scaleiA10kPot+1)^(0+256)
 11512  1DEE  0008               	return
 11513  1DEF                     l8822:	
 11514                           
 11515                           ;user.c: 216: if (input == 1023.0) {return 255;}
 11516  1DEF  30C0               	movlw	192
 11517  1DF0  0667               	xorwf	scaleiA10kPot@input^(0+256),w
 11518  1DF1  307F               	movlw	127
 11519  1DF2  1903               	skipnz
 11520  1DF3  0668               	xorwf	(scaleiA10kPot@input+1)^(0+256),w
 11521  1DF4  3044               	movlw	68
 11522  1DF5  1903               	skipnz
 11523  1DF6  0669               	xorwf	(scaleiA10kPot@input+2)^(0+256),w
 11524  1DF7  1D03               	btfss	3,2
 11525  1DF8  2DFE               	goto	l8828
 11526  1DF9  30FF               	movlw	255
 11527  1DFA  00E7               	movwf	?_scaleiA10kPot^(0+256)
 11528  1DFB  3000               	movlw	0
 11529  1DFC  00E8               	movwf	(?_scaleiA10kPot^(0+256)+1)
 11530  1DFD  0008               	return
 11531  1DFE                     l8828:	
 11532                           
 11533                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 11534  1DFE  3000               	movlw	0
 11535  1DFF  0021               	movlb	1	; select bank1
 11536  1E00  00C1               	movwf	___ftadd@f1^(0+128)
 11537  1E01  3080               	movlw	128
 11538  1E02  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11539  1E03  303F               	movlw	63
 11540  1E04  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11541  1E05  0022               	movlb	2	; select bank2
 11542  1E06  0867               	movf	scaleiA10kPot@input^(0+256),w
 11543  1E07  0021               	movlb	1	; select bank1
 11544  1E08  00D1               	movwf	___ftdiv@f1^(0+128)
 11545  1E09  0022               	movlb	2	; select bank2
 11546  1E0A  0868               	movf	(scaleiA10kPot@input+1)^(0+256),w
 11547  1E0B  0021               	movlb	1	; select bank1
 11548  1E0C  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11549  1E0D  0022               	movlb	2	; select bank2
 11550  1E0E  0869               	movf	(scaleiA10kPot@input+2)^(0+256),w
 11551  1E0F  0021               	movlb	1	; select bank1
 11552  1E10  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11553  1E11  30C0               	movlw	192
 11554  1E12  00CE               	movwf	___ftdiv@f2^(0+128)
 11555  1E13  307F               	movlw	127
 11556  1E14  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11557  1E15  3044               	movlw	68
 11558  1E16  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11559  1E17  319D  253D  319D   	fcall	___ftdiv
 11560  1E1A  0021               	movlb	1	; select bank1
 11561  1E1B  084E               	movf	?___ftdiv^(0+128),w
 11562  1E1C  00BE               	movwf	___ftneg@f1^(0+128)
 11563  1E1D  084F               	movf	(?___ftdiv+1)^(0+128),w
 11564  1E1E  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11565  1E1F  0850               	movf	(?___ftdiv+2)^(0+128),w
 11566  1E20  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11567  1E21  31AF  2763  319D   	fcall	___ftneg
 11568  1E24  0021               	movlb	1	; select bank1
 11569  1E25  083E               	movf	?___ftneg^(0+128),w
 11570  1E26  00C4               	movwf	___ftadd@f2^(0+128)
 11571  1E27  083F               	movf	(?___ftneg+1)^(0+128),w
 11572  1E28  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11573  1E29  0840               	movf	(?___ftneg+2)^(0+128),w
 11574  1E2A  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11575  1E2B  3191  2153  319D   	fcall	___ftadd
 11576  1E2E  0021               	movlb	1	; select bank1
 11577  1E2F  0841               	movf	?___ftadd^(0+128),w
 11578  1E30  0023               	movlb	3	; select bank3
 11579  1E31  00E5               	movwf	_scaleiA10kPot$2817^(0+384)
 11580  1E32  0021               	movlb	1	; select bank1
 11581  1E33  0842               	movf	(?___ftadd+1)^(0+128),w
 11582  1E34  0023               	movlb	3	; select bank3
 11583  1E35  00E6               	movwf	(_scaleiA10kPot$2817+1)^(0+384)
 11584  1E36  0021               	movlb	1	; select bank1
 11585  1E37  0843               	movf	(?___ftadd+2)^(0+128),w
 11586  1E38  0023               	movlb	3	; select bank3
 11587  1E39  00E7               	movwf	(_scaleiA10kPot$2817+2)^(0+384)
 11588                           
 11589                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 11590  1E3A  306A               	movlw	106
 11591  1E3B  0022               	movlb	2	; select bank2
 11592  1E3C  00D8               	movwf	pow@y^(0+256)
 11593  1E3D  309C               	movlw	156
 11594  1E3E  00D9               	movwf	(pow@y+1)^(0+256)
 11595  1E3F  30BF               	movlw	191
 11596  1E40  00DA               	movwf	(pow@y+2)^(0+256)
 11597  1E41  0023               	movlb	3	; select bank3
 11598  1E42  0865               	movf	_scaleiA10kPot$2817^(0+384),w
 11599  1E43  0022               	movlb	2	; select bank2
 11600  1E44  00D5               	movwf	pow@x^(0+256)
 11601  1E45  0023               	movlb	3	; select bank3
 11602  1E46  0866               	movf	(_scaleiA10kPot$2817+1)^(0+384),w
 11603  1E47  0022               	movlb	2	; select bank2
 11604  1E48  00D6               	movwf	(pow@x+1)^(0+256)
 11605  1E49  0023               	movlb	3	; select bank3
 11606  1E4A  0867               	movf	(_scaleiA10kPot$2817+2)^(0+384),w
 11607  1E4B  0022               	movlb	2	; select bank2
 11608  1E4C  00D7               	movwf	(pow@x+2)^(0+256)
 11609  1E4D  3186  26DB  319D   	fcall	_pow
 11610  1E50  0022               	movlb	2	; select bank2
 11611  1E51  0855               	movf	?_pow^(0+256),w
 11612  1E52  0023               	movlb	3	; select bank3
 11613  1E53  00E8               	movwf	_scaleiA10kPot$2818^(0+384)
 11614  1E54  0022               	movlb	2	; select bank2
 11615  1E55  0856               	movf	(?_pow+1)^(0+256),w
 11616  1E56  0023               	movlb	3	; select bank3
 11617  1E57  00E9               	movwf	(_scaleiA10kPot$2818+1)^(0+384)
 11618  1E58  0022               	movlb	2	; select bank2
 11619  1E59  0857               	movf	(?_pow+2)^(0+256),w
 11620  1E5A  0023               	movlb	3	; select bank3
 11621  1E5B  00EA               	movwf	(_scaleiA10kPot$2818+2)^(0+384)
 11622                           
 11623                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 11624  1E5C  30E3               	movlw	227
 11625  1E5D  0021               	movlb	1	; select bank1
 11626  1E5E  00AE               	movwf	___ftmul@f1^(0+128)
 11627  1E5F  300B               	movlw	11
 11628  1E60  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11629  1E61  3041               	movlw	65
 11630  1E62  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11631  1E63  0023               	movlb	3	; select bank3
 11632  1E64  0868               	movf	_scaleiA10kPot$2818^(0+384),w
 11633  1E65  0021               	movlb	1	; select bank1
 11634  1E66  00B1               	movwf	___ftmul@f2^(0+128)
 11635  1E67  0023               	movlb	3	; select bank3
 11636  1E68  0869               	movf	(_scaleiA10kPot$2818+1)^(0+384),w
 11637  1E69  0021               	movlb	1	; select bank1
 11638  1E6A  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11639  1E6B  0023               	movlb	3	; select bank3
 11640  1E6C  086A               	movf	(_scaleiA10kPot$2818+2)^(0+384),w
 11641  1E6D  0021               	movlb	1	; select bank1
 11642  1E6E  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11643  1E6F  319E  2691  319D   	fcall	___ftmul
 11644  1E72  0021               	movlb	1	; select bank1
 11645  1E73  082E               	movf	?___ftmul^(0+128),w
 11646  1E74  0023               	movlb	3	; select bank3
 11647  1E75  00E2               	movwf	scaleiA10kPot@pwm^(0+384)
 11648  1E76  0021               	movlb	1	; select bank1
 11649  1E77  082F               	movf	(?___ftmul+1)^(0+128),w
 11650  1E78  0023               	movlb	3	; select bank3
 11651  1E79  00E3               	movwf	(scaleiA10kPot@pwm+1)^(0+384)
 11652  1E7A  0021               	movlb	1	; select bank1
 11653  1E7B  0830               	movf	(?___ftmul+2)^(0+128),w
 11654  1E7C  0023               	movlb	3	; select bank3
 11655  1E7D  00E4               	movwf	(scaleiA10kPot@pwm+2)^(0+384)
 11656                           
 11657                           ;user.c: 219: return (int)(pwm);
 11658  1E7E  0862               	movf	scaleiA10kPot@pwm^(0+384),w
 11659  1E7F  0022               	movlb	2	; select bank2
 11660  1E80  00A0               	movwf	___fttol@f1^(0+256)
 11661  1E81  0023               	movlb	3	; select bank3
 11662  1E82  0863               	movf	(scaleiA10kPot@pwm+1)^(0+384),w
 11663  1E83  0022               	movlb	2	; select bank2
 11664  1E84  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11665  1E85  0023               	movlb	3	; select bank3
 11666  1E86  0864               	movf	(scaleiA10kPot@pwm+2)^(0+384),w
 11667  1E87  0022               	movlb	2	; select bank2
 11668  1E88  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11669  1E89  3199  21D5         	fcall	___fttol
 11670  1E8B  0022               	movlb	2	; select bank2
 11671  1E8C  0821               	movf	(?___fttol^(0+256)+1),w
 11672  1E8D  00E8               	movwf	(?_scaleiA10kPot+1)^(0+256)
 11673  1E8E  0820               	movf	?___fttol^(0+256),w
 11674  1E8F  00E7               	movwf	?_scaleiA10kPot^(0+256)
 11675  1E90  0008               	return
 11676  1E91                     __end_of_scaleiA10kPot:	
 11677                           
 11678                           	psect	text25
 11679  1B6E                     __ptext25:	
 11680 ;; *************** function _scaleA10kPot *****************
 11681 ;; Defined at:
 11682 ;;		line 202 in file "user.c"
 11683 ;; Parameters:    Size  Location     Type
 11684 ;;  input           3   71[BANK2 ] int 
 11685 ;; Auto vars:     Size  Location     Type
 11686 ;;  pwm             3    0[BANK3 ] float 
 11687 ;; Return value:  Size  Location     Type
 11688 ;;                  2   71[BANK2 ] int 
 11689 ;; Registers used:
 11690 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11691 ;; Tracked objects:
 11692 ;;		On entry : 0/0
 11693 ;;		On exit  : 0/0
 11694 ;;		Unchanged: 0/0
 11695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11696 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11697 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11699 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11700 ;;Total ram usage:       12 bytes
 11701 ;; Hardware stack levels used:    1
 11702 ;; Hardware stack levels required when called:    8
 11703 ;; This function calls:
 11704 ;;		___ftdiv
 11705 ;;		___ftmul
 11706 ;;		___fttol
 11707 ;;		_pow
 11708 ;; This function is called by:
 11709 ;;		_main
 11710 ;; This function uses a non-reentrant model
 11711 ;;
 11712                           
 11713                           
 11714                           ;psect for function _scaleA10kPot
 11715  1B6E                     _scaleA10kPot:	
 11716                           
 11717                           ;user.c: 204: if (input == 0.0) {return 255;}
 11718                           
 11719                           ;incstack = 0
 11720                           ; Regs used in _scaleA10kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11721  1B6E  0022               	movlb	2	; select bank2
 11722  1B6F  0869               	movf	(scaleA10kPot@input+2)^(0+256),w
 11723  1B70  0468               	iorwf	(scaleA10kPot@input+1)^(0+256),w
 11724  1B71  0467               	iorwf	scaleA10kPot@input^(0+256),w
 11725  1B72  1D03               	skipz
 11726  1B73  2B79               	goto	l8800
 11727  1B74  30FF               	movlw	255
 11728  1B75  00E7               	movwf	?_scaleA10kPot^(0+256)
 11729  1B76  3000               	movlw	0
 11730  1B77  00E8               	movwf	(?_scaleA10kPot^(0+256)+1)
 11731  1B78  0008               	return
 11732  1B79                     l8800:	
 11733                           
 11734                           ;user.c: 205: if (input == 1023.0) {return 0;}
 11735  1B79  30C0               	movlw	192
 11736  1B7A  0667               	xorwf	scaleA10kPot@input^(0+256),w
 11737  1B7B  307F               	movlw	127
 11738  1B7C  1903               	skipnz
 11739  1B7D  0668               	xorwf	(scaleA10kPot@input+1)^(0+256),w
 11740  1B7E  3044               	movlw	68
 11741  1B7F  1903               	skipnz
 11742  1B80  0669               	xorwf	(scaleA10kPot@input+2)^(0+256),w
 11743  1B81  1D03               	btfss	3,2
 11744  1B82  2B86               	goto	l8806
 11745  1B83  01E7               	clrf	?_scaleA10kPot^(0+256)
 11746  1B84  01E8               	clrf	(?_scaleA10kPot+1)^(0+256)
 11747  1B85  0008               	return
 11748  1B86                     l8806:	
 11749                           
 11750                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 11751  1B86  30C0               	movlw	192
 11752  1B87  0021               	movlb	1	; select bank1
 11753  1B88  00CE               	movwf	___ftdiv@f2^(0+128)
 11754  1B89  307F               	movlw	127
 11755  1B8A  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11756  1B8B  3044               	movlw	68
 11757  1B8C  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11758  1B8D  0022               	movlb	2	; select bank2
 11759  1B8E  0867               	movf	scaleA10kPot@input^(0+256),w
 11760  1B8F  0021               	movlb	1	; select bank1
 11761  1B90  00D1               	movwf	___ftdiv@f1^(0+128)
 11762  1B91  0022               	movlb	2	; select bank2
 11763  1B92  0868               	movf	(scaleA10kPot@input+1)^(0+256),w
 11764  1B93  0021               	movlb	1	; select bank1
 11765  1B94  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11766  1B95  0022               	movlb	2	; select bank2
 11767  1B96  0869               	movf	(scaleA10kPot@input+2)^(0+256),w
 11768  1B97  0021               	movlb	1	; select bank1
 11769  1B98  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11770  1B99  319D  253D  319B   	fcall	___ftdiv
 11771  1B9C  0021               	movlb	1	; select bank1
 11772  1B9D  084E               	movf	?___ftdiv^(0+128),w
 11773  1B9E  0023               	movlb	3	; select bank3
 11774  1B9F  00E5               	movwf	_scaleA10kPot$2815^(0+384)
 11775  1BA0  0021               	movlb	1	; select bank1
 11776  1BA1  084F               	movf	(?___ftdiv+1)^(0+128),w
 11777  1BA2  0023               	movlb	3	; select bank3
 11778  1BA3  00E6               	movwf	(_scaleA10kPot$2815+1)^(0+384)
 11779  1BA4  0021               	movlb	1	; select bank1
 11780  1BA5  0850               	movf	(?___ftdiv+2)^(0+128),w
 11781  1BA6  0023               	movlb	3	; select bank3
 11782  1BA7  00E7               	movwf	(_scaleA10kPot$2815+2)^(0+384)
 11783                           
 11784                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 11785  1BA8  306A               	movlw	106
 11786  1BA9  0022               	movlb	2	; select bank2
 11787  1BAA  00D8               	movwf	pow@y^(0+256)
 11788  1BAB  309C               	movlw	156
 11789  1BAC  00D9               	movwf	(pow@y+1)^(0+256)
 11790  1BAD  30BF               	movlw	191
 11791  1BAE  00DA               	movwf	(pow@y+2)^(0+256)
 11792  1BAF  0023               	movlb	3	; select bank3
 11793  1BB0  0865               	movf	_scaleA10kPot$2815^(0+384),w
 11794  1BB1  0022               	movlb	2	; select bank2
 11795  1BB2  00D5               	movwf	pow@x^(0+256)
 11796  1BB3  0023               	movlb	3	; select bank3
 11797  1BB4  0866               	movf	(_scaleA10kPot$2815+1)^(0+384),w
 11798  1BB5  0022               	movlb	2	; select bank2
 11799  1BB6  00D6               	movwf	(pow@x+1)^(0+256)
 11800  1BB7  0023               	movlb	3	; select bank3
 11801  1BB8  0867               	movf	(_scaleA10kPot$2815+2)^(0+384),w
 11802  1BB9  0022               	movlb	2	; select bank2
 11803  1BBA  00D7               	movwf	(pow@x+2)^(0+256)
 11804  1BBB  3186  26DB  319B   	fcall	_pow
 11805  1BBE  0022               	movlb	2	; select bank2
 11806  1BBF  0855               	movf	?_pow^(0+256),w
 11807  1BC0  0023               	movlb	3	; select bank3
 11808  1BC1  00E8               	movwf	_scaleA10kPot$2816^(0+384)
 11809  1BC2  0022               	movlb	2	; select bank2
 11810  1BC3  0856               	movf	(?_pow+1)^(0+256),w
 11811  1BC4  0023               	movlb	3	; select bank3
 11812  1BC5  00E9               	movwf	(_scaleA10kPot$2816+1)^(0+384)
 11813  1BC6  0022               	movlb	2	; select bank2
 11814  1BC7  0857               	movf	(?_pow+2)^(0+256),w
 11815  1BC8  0023               	movlb	3	; select bank3
 11816  1BC9  00EA               	movwf	(_scaleA10kPot$2816+2)^(0+384)
 11817                           
 11818                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 11819  1BCA  30E3               	movlw	227
 11820  1BCB  0021               	movlb	1	; select bank1
 11821  1BCC  00AE               	movwf	___ftmul@f1^(0+128)
 11822  1BCD  300B               	movlw	11
 11823  1BCE  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11824  1BCF  3041               	movlw	65
 11825  1BD0  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11826  1BD1  0023               	movlb	3	; select bank3
 11827  1BD2  0868               	movf	_scaleA10kPot$2816^(0+384),w
 11828  1BD3  0021               	movlb	1	; select bank1
 11829  1BD4  00B1               	movwf	___ftmul@f2^(0+128)
 11830  1BD5  0023               	movlb	3	; select bank3
 11831  1BD6  0869               	movf	(_scaleA10kPot$2816+1)^(0+384),w
 11832  1BD7  0021               	movlb	1	; select bank1
 11833  1BD8  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11834  1BD9  0023               	movlb	3	; select bank3
 11835  1BDA  086A               	movf	(_scaleA10kPot$2816+2)^(0+384),w
 11836  1BDB  0021               	movlb	1	; select bank1
 11837  1BDC  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11838  1BDD  319E  2691  319B   	fcall	___ftmul
 11839  1BE0  0021               	movlb	1	; select bank1
 11840  1BE1  082E               	movf	?___ftmul^(0+128),w
 11841  1BE2  0023               	movlb	3	; select bank3
 11842  1BE3  00E2               	movwf	scaleA10kPot@pwm^(0+384)
 11843  1BE4  0021               	movlb	1	; select bank1
 11844  1BE5  082F               	movf	(?___ftmul+1)^(0+128),w
 11845  1BE6  0023               	movlb	3	; select bank3
 11846  1BE7  00E3               	movwf	(scaleA10kPot@pwm+1)^(0+384)
 11847  1BE8  0021               	movlb	1	; select bank1
 11848  1BE9  0830               	movf	(?___ftmul+2)^(0+128),w
 11849  1BEA  0023               	movlb	3	; select bank3
 11850  1BEB  00E4               	movwf	(scaleA10kPot@pwm+2)^(0+384)
 11851                           
 11852                           ;user.c: 207: return (int)(pwm);
 11853  1BEC  0862               	movf	scaleA10kPot@pwm^(0+384),w
 11854  1BED  0022               	movlb	2	; select bank2
 11855  1BEE  00A0               	movwf	___fttol@f1^(0+256)
 11856  1BEF  0023               	movlb	3	; select bank3
 11857  1BF0  0863               	movf	(scaleA10kPot@pwm+1)^(0+384),w
 11858  1BF1  0022               	movlb	2	; select bank2
 11859  1BF2  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11860  1BF3  0023               	movlb	3	; select bank3
 11861  1BF4  0864               	movf	(scaleA10kPot@pwm+2)^(0+384),w
 11862  1BF5  0022               	movlb	2	; select bank2
 11863  1BF6  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11864  1BF7  3199  21D5         	fcall	___fttol
 11865  1BF9  0022               	movlb	2	; select bank2
 11866  1BFA  0821               	movf	(?___fttol^(0+256)+1),w
 11867  1BFB  00E8               	movwf	(?_scaleA10kPot+1)^(0+256)
 11868  1BFC  0820               	movf	?___fttol^(0+256),w
 11869  1BFD  00E7               	movwf	?_scaleA10kPot^(0+256)
 11870  1BFE  0008               	return
 11871  1BFF                     __end_of_scaleA10kPot:	
 11872                           
 11873                           	psect	text26
 11874  1950                     __ptext26:	
 11875 ;; *************** function _scaleA100kPot *****************
 11876 ;; Defined at:
 11877 ;;		line 188 in file "user.c"
 11878 ;; Parameters:    Size  Location     Type
 11879 ;;  input           3   71[BANK2 ] int 
 11880 ;; Auto vars:     Size  Location     Type
 11881 ;;  pwm             3    0[BANK3 ] float 
 11882 ;; Return value:  Size  Location     Type
 11883 ;;                  2   71[BANK2 ] int 
 11884 ;; Registers used:
 11885 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11886 ;; Tracked objects:
 11887 ;;		On entry : 0/0
 11888 ;;		On exit  : 0/0
 11889 ;;		Unchanged: 0/0
 11890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11891 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11892 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11894 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11895 ;;Total ram usage:       12 bytes
 11896 ;; Hardware stack levels used:    1
 11897 ;; Hardware stack levels required when called:    8
 11898 ;; This function calls:
 11899 ;;		___ftdiv
 11900 ;;		___ftmul
 11901 ;;		___fttol
 11902 ;;		_pow
 11903 ;; This function is called by:
 11904 ;;		_main
 11905 ;; This function uses a non-reentrant model
 11906 ;;
 11907                           
 11908                           
 11909                           ;psect for function _scaleA100kPot
 11910  1950                     _scaleA100kPot:	
 11911                           
 11912                           ;user.c: 190: if (input == 0.0) {input = 1.0;}
 11913                           
 11914                           ;incstack = 0
 11915                           ; Regs used in _scaleA100kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11916  1950  0022               	movlb	2	; select bank2
 11917  1951  0869               	movf	(scaleA100kPot@input+2)^(0+256),w
 11918  1952  0468               	iorwf	(scaleA100kPot@input+1)^(0+256),w
 11919  1953  0467               	iorwf	scaleA100kPot@input^(0+256),w
 11920  1954  1D03               	skipz
 11921  1955  295C               	goto	l8842
 11922  1956  3000               	movlw	0
 11923  1957  00E7               	movwf	scaleA100kPot@input^(0+256)
 11924  1958  3080               	movlw	128
 11925  1959  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
 11926  195A  303F               	movlw	63
 11927  195B  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
 11928  195C                     l8842:	
 11929                           
 11930                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 11931  195C  30C0               	movlw	192
 11932  195D  0021               	movlb	1	; select bank1
 11933  195E  00CE               	movwf	___ftdiv@f2^(0+128)
 11934  195F  307F               	movlw	127
 11935  1960  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11936  1961  3044               	movlw	68
 11937  1962  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11938  1963  0022               	movlb	2	; select bank2
 11939  1964  0867               	movf	scaleA100kPot@input^(0+256),w
 11940  1965  0021               	movlb	1	; select bank1
 11941  1966  00D1               	movwf	___ftdiv@f1^(0+128)
 11942  1967  0022               	movlb	2	; select bank2
 11943  1968  0868               	movf	(scaleA100kPot@input+1)^(0+256),w
 11944  1969  0021               	movlb	1	; select bank1
 11945  196A  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11946  196B  0022               	movlb	2	; select bank2
 11947  196C  0869               	movf	(scaleA100kPot@input+2)^(0+256),w
 11948  196D  0021               	movlb	1	; select bank1
 11949  196E  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11950  196F  319D  253D  3199   	fcall	___ftdiv
 11951  1972  0021               	movlb	1	; select bank1
 11952  1973  084E               	movf	?___ftdiv^(0+128),w
 11953  1974  0023               	movlb	3	; select bank3
 11954  1975  00E5               	movwf	_scaleA100kPot$2811^(0+384)
 11955  1976  0021               	movlb	1	; select bank1
 11956  1977  084F               	movf	(?___ftdiv+1)^(0+128),w
 11957  1978  0023               	movlb	3	; select bank3
 11958  1979  00E6               	movwf	(_scaleA100kPot$2811+1)^(0+384)
 11959  197A  0021               	movlb	1	; select bank1
 11960  197B  0850               	movf	(?___ftdiv+2)^(0+128),w
 11961  197C  0023               	movlb	3	; select bank3
 11962  197D  00E7               	movwf	(_scaleA100kPot$2811+2)^(0+384)
 11963                           
 11964                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 11965  197E  3056               	movlw	86
 11966  197F  0022               	movlb	2	; select bank2
 11967  1980  00D8               	movwf	pow@y^(0+256)
 11968  1981  308E               	movlw	142
 11969  1982  00D9               	movwf	(pow@y+1)^(0+256)
 11970  1983  30BF               	movlw	191
 11971  1984  00DA               	movwf	(pow@y+2)^(0+256)
 11972  1985  0023               	movlb	3	; select bank3
 11973  1986  0865               	movf	_scaleA100kPot$2811^(0+384),w
 11974  1987  0022               	movlb	2	; select bank2
 11975  1988  00D5               	movwf	pow@x^(0+256)
 11976  1989  0023               	movlb	3	; select bank3
 11977  198A  0866               	movf	(_scaleA100kPot$2811+1)^(0+384),w
 11978  198B  0022               	movlb	2	; select bank2
 11979  198C  00D6               	movwf	(pow@x+1)^(0+256)
 11980  198D  0023               	movlb	3	; select bank3
 11981  198E  0867               	movf	(_scaleA100kPot$2811+2)^(0+384),w
 11982  198F  0022               	movlb	2	; select bank2
 11983  1990  00D7               	movwf	(pow@x+2)^(0+256)
 11984  1991  3186  26DB  3199   	fcall	_pow
 11985  1994  0022               	movlb	2	; select bank2
 11986  1995  0855               	movf	?_pow^(0+256),w
 11987  1996  0023               	movlb	3	; select bank3
 11988  1997  00E8               	movwf	_scaleA100kPot$2812^(0+384)
 11989  1998  0022               	movlb	2	; select bank2
 11990  1999  0856               	movf	(?_pow+1)^(0+256),w
 11991  199A  0023               	movlb	3	; select bank3
 11992  199B  00E9               	movwf	(_scaleA100kPot$2812+1)^(0+384)
 11993  199C  0022               	movlb	2	; select bank2
 11994  199D  0857               	movf	(?_pow+2)^(0+256),w
 11995  199E  0023               	movlb	3	; select bank3
 11996  199F  00EA               	movwf	(_scaleA100kPot$2812+2)^(0+384)
 11997                           
 11998                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 11999  19A0  309F               	movlw	159
 12000  19A1  0021               	movlb	1	; select bank1
 12001  19A2  00AE               	movwf	___ftmul@f1^(0+128)
 12002  19A3  3068               	movlw	104
 12003  19A4  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12004  19A5  3040               	movlw	64
 12005  19A6  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12006  19A7  0023               	movlb	3	; select bank3
 12007  19A8  0868               	movf	_scaleA100kPot$2812^(0+384),w
 12008  19A9  0021               	movlb	1	; select bank1
 12009  19AA  00B1               	movwf	___ftmul@f2^(0+128)
 12010  19AB  0023               	movlb	3	; select bank3
 12011  19AC  0869               	movf	(_scaleA100kPot$2812+1)^(0+384),w
 12012  19AD  0021               	movlb	1	; select bank1
 12013  19AE  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12014  19AF  0023               	movlb	3	; select bank3
 12015  19B0  086A               	movf	(_scaleA100kPot$2812+2)^(0+384),w
 12016  19B1  0021               	movlb	1	; select bank1
 12017  19B2  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12018  19B3  319E  2691  3199   	fcall	___ftmul
 12019  19B6  0021               	movlb	1	; select bank1
 12020  19B7  082E               	movf	?___ftmul^(0+128),w
 12021  19B8  0023               	movlb	3	; select bank3
 12022  19B9  00E2               	movwf	scaleA100kPot@pwm^(0+384)
 12023  19BA  0021               	movlb	1	; select bank1
 12024  19BB  082F               	movf	(?___ftmul+1)^(0+128),w
 12025  19BC  0023               	movlb	3	; select bank3
 12026  19BD  00E3               	movwf	(scaleA100kPot@pwm+1)^(0+384)
 12027  19BE  0021               	movlb	1	; select bank1
 12028  19BF  0830               	movf	(?___ftmul+2)^(0+128),w
 12029  19C0  0023               	movlb	3	; select bank3
 12030  19C1  00E4               	movwf	(scaleA100kPot@pwm+2)^(0+384)
 12031                           
 12032                           ;user.c: 192: return (int)(pwm);
 12033  19C2  0862               	movf	scaleA100kPot@pwm^(0+384),w
 12034  19C3  0022               	movlb	2	; select bank2
 12035  19C4  00A0               	movwf	___fttol@f1^(0+256)
 12036  19C5  0023               	movlb	3	; select bank3
 12037  19C6  0863               	movf	(scaleA100kPot@pwm+1)^(0+384),w
 12038  19C7  0022               	movlb	2	; select bank2
 12039  19C8  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12040  19C9  0023               	movlb	3	; select bank3
 12041  19CA  0864               	movf	(scaleA100kPot@pwm+2)^(0+384),w
 12042  19CB  0022               	movlb	2	; select bank2
 12043  19CC  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12044  19CD  3199  21D5         	fcall	___fttol
 12045  19CF  0022               	movlb	2	; select bank2
 12046  19D0  0821               	movf	(?___fttol^(0+256)+1),w
 12047  19D1  00E8               	movwf	(?_scaleA100kPot+1)^(0+256)
 12048  19D2  0820               	movf	?___fttol^(0+256),w
 12049  19D3  00E7               	movwf	?_scaleA100kPot^(0+256)
 12050  19D4  0008               	return
 12051  19D5                     __end_of_scaleA100kPot:	
 12052                           
 12053                           	psect	text27
 12054  06DB                     __ptext27:	
 12055 ;; *************** function _pow *****************
 12056 ;; Defined at:
 12057 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\pow.c"
 12058 ;; Parameters:    Size  Location     Type
 12059 ;;  x               3   53[BANK2 ] int 
 12060 ;;  y               3   56[BANK2 ] int 
 12061 ;; Auto vars:     Size  Location     Type
 12062 ;;  yi              4   67[BANK2 ] unsigned long 
 12063 ;;  sign            1   66[BANK2 ] unsigned char 
 12064 ;; Return value:  Size  Location     Type
 12065 ;;                  3   53[BANK2 ] unsigned char 
 12066 ;; Registers used:
 12067 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12068 ;; Tracked objects:
 12069 ;;		On entry : 0/0
 12070 ;;		On exit  : 0/0
 12071 ;;		Unchanged: 0/0
 12072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12073 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12074 ;;      Locals:         0       0       0      11       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12075 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12076 ;;      Totals:         0       0       0      18       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12077 ;;Total ram usage:       18 bytes
 12078 ;; Hardware stack levels used:    1
 12079 ;; Hardware stack levels required when called:    7
 12080 ;; This function calls:
 12081 ;;		___ftge
 12082 ;;		___ftmul
 12083 ;;		___ftneg
 12084 ;;		___fttol
 12085 ;;		___lltoft
 12086 ;;		_exp
 12087 ;;		_log
 12088 ;; This function is called by:
 12089 ;;		_scaleA100kPot
 12090 ;;		_scaleA10kPot
 12091 ;;		_scaleiA10kPot
 12092 ;;		_scaleiA100kPot
 12093 ;; This function uses a non-reentrant model
 12094 ;;
 12095                           
 12096                           
 12097                           ;psect for function _pow
 12098  06DB                     _pow:	
 12099                           
 12100                           ;incstack = 0
 12101                           ; Regs used in _pow: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12102  06DB  0022               	movlb	2	; select bank2
 12103  06DC  01E2               	clrf	pow@sign^(0+256)
 12104  06DD  0857               	movf	(pow@x+2)^(0+256),w
 12105  06DE  0456               	iorwf	(pow@x+1)^(0+256),w
 12106  06DF  0455               	iorwf	pow@x^(0+256),w
 12107  06E0  1D03               	skipz
 12108  06E1  2F07               	goto	l8112
 12109  06E2  3000               	movlw	0
 12110  06E3  0021               	movlb	1	; select bank1
 12111  06E4  00A0               	movwf	___ftge@ff1^(0+128)
 12112  06E5  3000               	movlw	0
 12113  06E6  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12114  06E7  3000               	movlw	0
 12115  06E8  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12116  06E9  0022               	movlb	2	; select bank2
 12117  06EA  0858               	movf	pow@y^(0+256),w
 12118  06EB  0021               	movlb	1	; select bank1
 12119  06EC  00A3               	movwf	___ftge@ff2^(0+128)
 12120  06ED  0022               	movlb	2	; select bank2
 12121  06EE  0859               	movf	(pow@y+1)^(0+256),w
 12122  06EF  0021               	movlb	1	; select bank1
 12123  06F0  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12124  06F1  0022               	movlb	2	; select bank2
 12125  06F2  085A               	movf	(pow@y+2)^(0+256),w
 12126  06F3  0021               	movlb	1	; select bank1
 12127  06F4  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12128  06F5  31A2  22DB  3186   	fcall	___ftge
 12129  06F8  1C03               	btfss	3,0
 12130  06F9  2EFF               	goto	l2299
 12131  06FA  3021               	movlw	33
 12132  06FB  0024               	movlb	4	; select bank4
 12133  06FC  00D3               	movwf	_errno^(0+512)
 12134  06FD  3000               	movlw	0
 12135  06FE  00D4               	movwf	(_errno^(0+512)+1)
 12136  06FF                     l2299:	
 12137  06FF  3000               	movlw	0
 12138  0700  0022               	movlb	2	; select bank2
 12139  0701  00D5               	movwf	?_pow^(0+256)
 12140  0702  3000               	movlw	0
 12141  0703  00D6               	movwf	(?_pow+1)^(0+256)
 12142  0704  3000               	movlw	0
 12143  0705  00D7               	movwf	(?_pow+2)^(0+256)
 12144  0706  0008               	return
 12145  0707                     l8112:	
 12146  0707  085A               	movf	(pow@y+2)^(0+256),w
 12147  0708  0459               	iorwf	(pow@y+1)^(0+256),w
 12148  0709  0458               	iorwf	pow@y^(0+256),w
 12149  070A  1D03               	skipz
 12150  070B  2F13               	goto	l8118
 12151  070C  3000               	movlw	0
 12152  070D  00D5               	movwf	?_pow^(0+256)
 12153  070E  3080               	movlw	128
 12154  070F  00D6               	movwf	(?_pow+1)^(0+256)
 12155  0710  303F               	movlw	63
 12156  0711  00D7               	movwf	(?_pow+2)^(0+256)
 12157  0712  0008               	return
 12158  0713                     l8118:	
 12159  0713  0855               	movf	pow@x^(0+256),w
 12160  0714  0021               	movlb	1	; select bank1
 12161  0715  00A0               	movwf	___ftge@ff1^(0+128)
 12162  0716  0022               	movlb	2	; select bank2
 12163  0717  0856               	movf	(pow@x+1)^(0+256),w
 12164  0718  0021               	movlb	1	; select bank1
 12165  0719  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12166  071A  0022               	movlb	2	; select bank2
 12167  071B  0857               	movf	(pow@x+2)^(0+256),w
 12168  071C  0021               	movlb	1	; select bank1
 12169  071D  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12170  071E  3000               	movlw	0
 12171  071F  00A3               	movwf	___ftge@ff2^(0+128)
 12172  0720  3000               	movlw	0
 12173  0721  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12174  0722  3000               	movlw	0
 12175  0723  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12176  0724  31A2  22DB  3186   	fcall	___ftge
 12177  0727  1803               	btfsc	3,0
 12178  0728  2F8D               	goto	l8130
 12179  0729  0022               	movlb	2	; select bank2
 12180  072A  0858               	movf	pow@y^(0+256),w
 12181  072B  00A0               	movwf	___fttol@f1^(0+256)
 12182  072C  0859               	movf	(pow@y+1)^(0+256),w
 12183  072D  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12184  072E  085A               	movf	(pow@y+2)^(0+256),w
 12185  072F  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12186  0730  3199  21D5  3186   	fcall	___fttol
 12187  0733  0022               	movlb	2	; select bank2
 12188  0734  0823               	movf	(?___fttol+3)^(0+256),w
 12189  0735  00E6               	movwf	(pow@yi+3)^(0+256)
 12190  0736  0822               	movf	(?___fttol+2)^(0+256),w
 12191  0737  00E5               	movwf	(pow@yi+2)^(0+256)
 12192  0738  0821               	movf	(?___fttol+1)^(0+256),w
 12193  0739  00E4               	movwf	(pow@yi+1)^(0+256)
 12194  073A  0820               	movf	?___fttol^(0+256),w
 12195  073B  00E3               	movwf	pow@yi^(0+256)
 12196  073C  0866               	movf	(pow@yi+3)^(0+256),w
 12197  073D  0021               	movlb	1	; select bank1
 12198  073E  00AB               	movwf	(___lltoft@c+3)^(0+128)
 12199  073F  0022               	movlb	2	; select bank2
 12200  0740  0865               	movf	(pow@yi+2)^(0+256),w
 12201  0741  0021               	movlb	1	; select bank1
 12202  0742  00AA               	movwf	(___lltoft@c+2)^(0+128)
 12203  0743  0022               	movlb	2	; select bank2
 12204  0744  0864               	movf	(pow@yi+1)^(0+256),w
 12205  0745  0021               	movlb	1	; select bank1
 12206  0746  00A9               	movwf	(___lltoft@c+1)^(0+128)
 12207  0747  0022               	movlb	2	; select bank2
 12208  0748  0863               	movf	pow@yi^(0+256),w
 12209  0749  0021               	movlb	1	; select bank1
 12210  074A  00A8               	movwf	___lltoft@c^(0+128)
 12211  074B  31A1  2115  3186   	fcall	___lltoft
 12212  074E  0022               	movlb	2	; select bank2
 12213  074F  085A               	movf	(pow@y+2)^(0+256),w
 12214  0750  0021               	movlb	1	; select bank1
 12215  0751  062A               	xorwf	(?___lltoft+2)^(0+128),w
 12216  0752  1D03               	skipz
 12217  0753  2F5E               	goto	u8525
 12218  0754  0022               	movlb	2	; select bank2
 12219  0755  0859               	movf	(pow@y+1)^(0+256),w
 12220  0756  0021               	movlb	1	; select bank1
 12221  0757  0629               	xorwf	(?___lltoft+1)^(0+128),w
 12222  0758  1D03               	skipz
 12223  0759  2F5E               	goto	u8525
 12224  075A  0022               	movlb	2	; select bank2
 12225  075B  0858               	movf	pow@y^(0+256),w
 12226  075C  0021               	movlb	1	; select bank1
 12227  075D  0628               	xorwf	?___lltoft^(0+128),w
 12228  075E                     u8525:	
 12229  075E  1903               	skipnz
 12230  075F  2F6D               	goto	l8126
 12231  0760  3021               	movlw	33
 12232  0761  0024               	movlb	4	; select bank4
 12233  0762  00D3               	movwf	_errno^(0+512)
 12234  0763  3000               	movlw	0
 12235  0764  00D4               	movwf	(_errno^(0+512)+1)
 12236  0765  3000               	movlw	0
 12237  0766  0022               	movlb	2	; select bank2
 12238  0767  00D5               	movwf	?_pow^(0+256)
 12239  0768  3000               	movlw	0
 12240  0769  00D6               	movwf	(?_pow+1)^(0+256)
 12241  076A  3000               	movlw	0
 12242  076B  00D7               	movwf	(?_pow+2)^(0+256)
 12243  076C  0008               	return
 12244  076D                     l8126:	
 12245  076D  0022               	movlb	2	; select bank2
 12246  076E  0863               	movf	pow@yi^(0+256),w
 12247  076F  3901               	andlw	1
 12248  0770  00DB               	movwf	??_pow^(0+256)
 12249  0771  085B               	movf	??_pow^(0+256),w
 12250  0772  00E2               	movwf	pow@sign^(0+256)
 12251  0773  0855               	movf	pow@x^(0+256),w
 12252  0774  0021               	movlb	1	; select bank1
 12253  0775  00BE               	movwf	___ftneg@f1^(0+128)
 12254  0776  0022               	movlb	2	; select bank2
 12255  0777  0856               	movf	(pow@x+1)^(0+256),w
 12256  0778  0021               	movlb	1	; select bank1
 12257  0779  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12258  077A  0022               	movlb	2	; select bank2
 12259  077B  0857               	movf	(pow@x+2)^(0+256),w
 12260  077C  0021               	movlb	1	; select bank1
 12261  077D  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12262  077E  31AF  2763  3186   	fcall	___ftneg
 12263  0781  0021               	movlb	1	; select bank1
 12264  0782  083E               	movf	?___ftneg^(0+128),w
 12265  0783  0022               	movlb	2	; select bank2
 12266  0784  00D5               	movwf	pow@x^(0+256)
 12267  0785  0021               	movlb	1	; select bank1
 12268  0786  083F               	movf	(?___ftneg+1)^(0+128),w
 12269  0787  0022               	movlb	2	; select bank2
 12270  0788  00D6               	movwf	(pow@x+1)^(0+256)
 12271  0789  0021               	movlb	1	; select bank1
 12272  078A  0840               	movf	(?___ftneg+2)^(0+128),w
 12273  078B  0022               	movlb	2	; select bank2
 12274  078C  00D7               	movwf	(pow@x+2)^(0+256)
 12275  078D                     l8130:	
 12276  078D  0022               	movlb	2	; select bank2
 12277  078E  0855               	movf	pow@x^(0+256),w
 12278  078F  00BE               	movwf	log@x^(0+256)
 12279  0790  0856               	movf	(pow@x+1)^(0+256),w
 12280  0791  00BF               	movwf	(log@x+1)^(0+256)
 12281  0792  0857               	movf	(pow@x+2)^(0+256),w
 12282  0793  00C0               	movwf	(log@x+2)^(0+256)
 12283  0794  3190  2082  3186   	fcall	_log
 12284  0797  0022               	movlb	2	; select bank2
 12285  0798  083E               	movf	?_log^(0+256),w
 12286  0799  00DC               	movwf	_pow$2824^(0+256)
 12287  079A  083F               	movf	(?_log+1)^(0+256),w
 12288  079B  00DD               	movwf	(_pow$2824+1)^(0+256)
 12289  079C  0840               	movf	(?_log+2)^(0+256),w
 12290  079D  00DE               	movwf	(_pow$2824+2)^(0+256)
 12291  079E  0858               	movf	pow@y^(0+256),w
 12292  079F  0021               	movlb	1	; select bank1
 12293  07A0  00AE               	movwf	___ftmul@f1^(0+128)
 12294  07A1  0022               	movlb	2	; select bank2
 12295  07A2  0859               	movf	(pow@y+1)^(0+256),w
 12296  07A3  0021               	movlb	1	; select bank1
 12297  07A4  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12298  07A5  0022               	movlb	2	; select bank2
 12299  07A6  085A               	movf	(pow@y+2)^(0+256),w
 12300  07A7  0021               	movlb	1	; select bank1
 12301  07A8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12302  07A9  0022               	movlb	2	; select bank2
 12303  07AA  085C               	movf	_pow$2824^(0+256),w
 12304  07AB  0021               	movlb	1	; select bank1
 12305  07AC  00B1               	movwf	___ftmul@f2^(0+128)
 12306  07AD  0022               	movlb	2	; select bank2
 12307  07AE  085D               	movf	(_pow$2824+1)^(0+256),w
 12308  07AF  0021               	movlb	1	; select bank1
 12309  07B0  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12310  07B1  0022               	movlb	2	; select bank2
 12311  07B2  085E               	movf	(_pow$2824+2)^(0+256),w
 12312  07B3  0021               	movlb	1	; select bank1
 12313  07B4  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12314  07B5  319E  2691  3186   	fcall	___ftmul
 12315  07B8  0021               	movlb	1	; select bank1
 12316  07B9  082E               	movf	?___ftmul^(0+128),w
 12317  07BA  0022               	movlb	2	; select bank2
 12318  07BB  00DF               	movwf	_pow$2825^(0+256)
 12319  07BC  0021               	movlb	1	; select bank1
 12320  07BD  082F               	movf	(?___ftmul+1)^(0+128),w
 12321  07BE  0022               	movlb	2	; select bank2
 12322  07BF  00E0               	movwf	(_pow$2825+1)^(0+256)
 12323  07C0  0021               	movlb	1	; select bank1
 12324  07C1  0830               	movf	(?___ftmul+2)^(0+128),w
 12325  07C2  0022               	movlb	2	; select bank2
 12326  07C3  00E1               	movwf	(_pow$2825+2)^(0+256)
 12327  07C4  085F               	movf	_pow$2825^(0+256),w
 12328  07C5  00C8               	movwf	exp@x^(0+256)
 12329  07C6  0860               	movf	(_pow$2825+1)^(0+256),w
 12330  07C7  00C9               	movwf	(exp@x+1)^(0+256)
 12331  07C8  0861               	movf	(_pow$2825+2)^(0+256),w
 12332  07C9  00CA               	movwf	(exp@x+2)^(0+256)
 12333  07CA  3193  2351  3186   	fcall	_exp
 12334  07CD  0022               	movlb	2	; select bank2
 12335  07CE  0848               	movf	?_exp^(0+256),w
 12336  07CF  00D5               	movwf	pow@x^(0+256)
 12337  07D0  0849               	movf	(?_exp+1)^(0+256),w
 12338  07D1  00D6               	movwf	(pow@x+1)^(0+256)
 12339  07D2  084A               	movf	(?_exp+2)^(0+256),w
 12340  07D3  00D7               	movwf	(pow@x+2)^(0+256)
 12341  07D4  0862               	movf	pow@sign^(0+256),w
 12342  07D5  1903               	btfsc	3,2
 12343  07D6  0008               	return
 12344  07D7  0855               	movf	pow@x^(0+256),w
 12345  07D8  0021               	movlb	1	; select bank1
 12346  07D9  00BE               	movwf	___ftneg@f1^(0+128)
 12347  07DA  0022               	movlb	2	; select bank2
 12348  07DB  0856               	movf	(pow@x+1)^(0+256),w
 12349  07DC  0021               	movlb	1	; select bank1
 12350  07DD  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12351  07DE  0022               	movlb	2	; select bank2
 12352  07DF  0857               	movf	(pow@x+2)^(0+256),w
 12353  07E0  0021               	movlb	1	; select bank1
 12354  07E1  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12355  07E2  31AF  2763         	fcall	___ftneg
 12356  07E4  0021               	movlb	1	; select bank1
 12357  07E5  083E               	movf	?___ftneg^(0+128),w
 12358  07E6  0022               	movlb	2	; select bank2
 12359  07E7  00D5               	movwf	?_pow^(0+256)
 12360  07E8  0021               	movlb	1	; select bank1
 12361  07E9  083F               	movf	(?___ftneg+1)^(0+128),w
 12362  07EA  0022               	movlb	2	; select bank2
 12363  07EB  00D6               	movwf	(?_pow+1)^(0+256)
 12364  07EC  0021               	movlb	1	; select bank1
 12365  07ED  0840               	movf	(?___ftneg+2)^(0+128),w
 12366  07EE  0022               	movlb	2	; select bank2
 12367  07EF  00D7               	movwf	(?_pow+2)^(0+256)
 12368  07F0  0008               	return
 12369  07F1                     __end_of_pow:	
 12370                           
 12371                           	psect	text28
 12372  1082                     __ptext28:	
 12373 ;; *************** function _log *****************
 12374 ;; Defined at:
 12375 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\log.c"
 12376 ;; Parameters:    Size  Location     Type
 12377 ;;  x               3   30[BANK2 ] unsigned char 
 12378 ;; Auto vars:     Size  Location     Type
 12379 ;;  exponent        2   34[BANK2 ] int 
 12380 ;; Return value:  Size  Location     Type
 12381 ;;                  3   30[BANK2 ] int 
 12382 ;; Registers used:
 12383 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12384 ;; Tracked objects:
 12385 ;;		On entry : 0/0
 12386 ;;		On exit  : 0/0
 12387 ;;		Unchanged: 0/0
 12388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12389 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12390 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12391 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12392 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12393 ;;Total ram usage:        6 bytes
 12394 ;; Hardware stack levels used:    1
 12395 ;; Hardware stack levels required when called:    6
 12396 ;; This function calls:
 12397 ;;		___awtoft
 12398 ;;		___ftadd
 12399 ;;		___ftge
 12400 ;;		___ftmul
 12401 ;;		_eval_poly
 12402 ;;		_frexp
 12403 ;; This function is called by:
 12404 ;;		_pow
 12405 ;; This function uses a non-reentrant model
 12406 ;;
 12407                           
 12408                           
 12409                           ;psect for function _log
 12410  1082                     _log:	
 12411                           
 12412                           ;incstack = 0
 12413                           ; Regs used in _log: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12414  1082  0022               	movlb	2	; select bank2
 12415  1083  083E               	movf	log@x^(0+256),w
 12416  1084  0021               	movlb	1	; select bank1
 12417  1085  00A0               	movwf	___ftge@ff1^(0+128)
 12418  1086  0022               	movlb	2	; select bank2
 12419  1087  083F               	movf	(log@x+1)^(0+256),w
 12420  1088  0021               	movlb	1	; select bank1
 12421  1089  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12422  108A  0022               	movlb	2	; select bank2
 12423  108B  0840               	movf	(log@x+2)^(0+256),w
 12424  108C  0021               	movlb	1	; select bank1
 12425  108D  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12426  108E  3000               	movlw	0
 12427  108F  00A3               	movwf	___ftge@ff2^(0+128)
 12428  1090  3000               	movlw	0
 12429  1091  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12430  1092  3000               	movlw	0
 12431  1093  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12432  1094  31A2  22DB  3190   	fcall	___ftge
 12433  1097  1803               	btfsc	3,0
 12434  1098  28A6               	goto	l7986
 12435  1099  3021               	movlw	33
 12436  109A  0024               	movlb	4	; select bank4
 12437  109B  00D3               	movwf	_errno^(0+512)
 12438  109C  3000               	movlw	0
 12439  109D  00D4               	movwf	(_errno^(0+512)+1)
 12440  109E  3000               	movlw	0
 12441  109F  0022               	movlb	2	; select bank2
 12442  10A0  00BE               	movwf	?_log^(0+256)
 12443  10A1  3000               	movlw	0
 12444  10A2  00BF               	movwf	(?_log+1)^(0+256)
 12445  10A3  3000               	movlw	0
 12446  10A4  00C0               	movwf	(?_log+2)^(0+256)
 12447  10A5  0008               	return
 12448  10A6                     l7986:	
 12449  10A6  0022               	movlb	2	; select bank2
 12450  10A7  0840               	movf	(log@x+2)^(0+256),w
 12451  10A8  043F               	iorwf	(log@x+1)^(0+256),w
 12452  10A9  043E               	iorwf	log@x^(0+256),w
 12453  10AA  1D03               	skipz
 12454  10AB  28B9               	goto	l7992
 12455  10AC  3022               	movlw	34
 12456  10AD  0024               	movlb	4	; select bank4
 12457  10AE  00D3               	movwf	_errno^(0+512)
 12458  10AF  3000               	movlw	0
 12459  10B0  00D4               	movwf	(_errno^(0+512)+1)
 12460  10B1  3000               	movlw	0
 12461  10B2  0022               	movlb	2	; select bank2
 12462  10B3  00BE               	movwf	?_log^(0+256)
 12463  10B4  3000               	movlw	0
 12464  10B5  00BF               	movwf	(?_log+1)^(0+256)
 12465  10B6  3000               	movlw	0
 12466  10B7  00C0               	movwf	(?_log+2)^(0+256)
 12467  10B8  0008               	return
 12468  10B9                     l7992:	
 12469  10B9  3000               	movlw	0
 12470  10BA  0021               	movlb	1	; select bank1
 12471  10BB  00C1               	movwf	___ftadd@f1^(0+128)
 12472  10BC  3080               	movlw	128
 12473  10BD  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 12474  10BE  30BF               	movlw	191
 12475  10BF  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 12476  10C0  3000               	movlw	0
 12477  10C1  00AE               	movwf	___ftmul@f1^(0+128)
 12478  10C2  3000               	movlw	0
 12479  10C3  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12480  10C4  3040               	movlw	64
 12481  10C5  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12482  10C6  3042               	movlw	(low (log@exponent| (0+256)))& (0+255)
 12483  10C7  0022               	movlb	2	; select bank2
 12484  10C8  00C1               	movwf	??_log^(0+256)
 12485  10C9  0841               	movf	??_log^(0+256),w
 12486  10CA  0021               	movlb	1	; select bank1
 12487  10CB  00A3               	movwf	frexp@eptr^(0+128)
 12488  10CC  0022               	movlb	2	; select bank2
 12489  10CD  083E               	movf	log@x^(0+256),w
 12490  10CE  0021               	movlb	1	; select bank1
 12491  10CF  00A0               	movwf	frexp@value^(0+128)
 12492  10D0  0022               	movlb	2	; select bank2
 12493  10D1  083F               	movf	(log@x+1)^(0+256),w
 12494  10D2  0021               	movlb	1	; select bank1
 12495  10D3  00A1               	movwf	(frexp@value+1)^(0+128)
 12496  10D4  0022               	movlb	2	; select bank2
 12497  10D5  0840               	movf	(log@x+2)^(0+256),w
 12498  10D6  0021               	movlb	1	; select bank1
 12499  10D7  00A2               	movwf	(frexp@value+2)^(0+128)
 12500  10D8  31A3  2392  3190   	fcall	_frexp
 12501  10DB  0021               	movlb	1	; select bank1
 12502  10DC  0820               	movf	?_frexp^(0+128),w
 12503  10DD  00B1               	movwf	___ftmul@f2^(0+128)
 12504  10DE  0821               	movf	(?_frexp+1)^(0+128),w
 12505  10DF  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12506  10E0  0822               	movf	(?_frexp+2)^(0+128),w
 12507  10E1  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12508  10E2  319E  2691  3190   	fcall	___ftmul
 12509  10E5  0021               	movlb	1	; select bank1
 12510  10E6  082E               	movf	?___ftmul^(0+128),w
 12511  10E7  00C4               	movwf	___ftadd@f2^(0+128)
 12512  10E8  082F               	movf	(?___ftmul+1)^(0+128),w
 12513  10E9  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 12514  10EA  0830               	movf	(?___ftmul+2)^(0+128),w
 12515  10EB  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 12516  10EC  3191  2153  3190   	fcall	___ftadd
 12517  10EF  0021               	movlb	1	; select bank1
 12518  10F0  0841               	movf	?___ftadd^(0+128),w
 12519  10F1  0022               	movlb	2	; select bank2
 12520  10F2  00BE               	movwf	log@x^(0+256)
 12521  10F3  0021               	movlb	1	; select bank1
 12522  10F4  0842               	movf	(?___ftadd+1)^(0+128),w
 12523  10F5  0022               	movlb	2	; select bank2
 12524  10F6  00BF               	movwf	(log@x+1)^(0+256)
 12525  10F7  0021               	movlb	1	; select bank1
 12526  10F8  0843               	movf	(?___ftadd+2)^(0+128),w
 12527  10F9  0022               	movlb	2	; select bank2
 12528  10FA  00C0               	movwf	(log@x+2)^(0+256)
 12529  10FB  30FF               	movlw	255
 12530  10FC  07C2               	addwf	log@exponent^(0+256),f
 12531  10FD  30FF               	movlw	255
 12532  10FE  3DC3               	addwfc	(log@exponent+1)^(0+256),f
 12533  10FF  083E               	movf	log@x^(0+256),w
 12534  1100  00B4               	movwf	eval_poly@x^(0+256)
 12535  1101  083F               	movf	(log@x+1)^(0+256),w
 12536  1102  00B5               	movwf	(eval_poly@x+1)^(0+256)
 12537  1103  0840               	movf	(log@x+2)^(0+256),w
 12538  1104  00B6               	movwf	(eval_poly@x+2)^(0+256)
 12539  1105  301E               	movlw	low (log@coeff| (0+32768))
 12540  1106  00B7               	movwf	eval_poly@d^(0+256)
 12541  1107  30A8               	movlw	high (log@coeff| (0+32768))
 12542  1108  00B8               	movwf	(eval_poly@d^(0+256)+1)
 12543  1109  3008               	movlw	8
 12544  110A  00B9               	movwf	eval_poly@n^(0+256)
 12545  110B  3000               	movlw	0
 12546  110C  00BA               	movwf	(eval_poly@n^(0+256)+1)
 12547  110D  31A7  278E  3190   	fcall	_eval_poly
 12548  1110  0022               	movlb	2	; select bank2
 12549  1111  0834               	movf	?_eval_poly^(0+256),w
 12550  1112  00BE               	movwf	log@x^(0+256)
 12551  1113  0835               	movf	(?_eval_poly+1)^(0+256),w
 12552  1114  00BF               	movwf	(log@x+1)^(0+256)
 12553  1115  0836               	movf	(?_eval_poly+2)^(0+256),w
 12554  1116  00C0               	movwf	(log@x+2)^(0+256)
 12555  1117  083E               	movf	log@x^(0+256),w
 12556  1118  0021               	movlb	1	; select bank1
 12557  1119  00C1               	movwf	___ftadd@f1^(0+128)
 12558  111A  0022               	movlb	2	; select bank2
 12559  111B  083F               	movf	(log@x+1)^(0+256),w
 12560  111C  0021               	movlb	1	; select bank1
 12561  111D  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 12562  111E  0022               	movlb	2	; select bank2
 12563  111F  0840               	movf	(log@x+2)^(0+256),w
 12564  1120  0021               	movlb	1	; select bank1
 12565  1121  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 12566  1122  3072               	movlw	114
 12567  1123  00AE               	movwf	___ftmul@f1^(0+128)
 12568  1124  3031               	movlw	49
 12569  1125  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12570  1126  303F               	movlw	63
 12571  1127  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12572  1128  0022               	movlb	2	; select bank2
 12573  1129  0843               	movf	(log@exponent+1)^(0+256),w
 12574  112A  0021               	movlb	1	; select bank1
 12575  112B  00A9               	movwf	(___awtoft@c+1)^(0+128)
 12576  112C  0022               	movlb	2	; select bank2
 12577  112D  0842               	movf	log@exponent^(0+256),w
 12578  112E  0021               	movlb	1	; select bank1
 12579  112F  00A8               	movwf	___awtoft@c^(0+128)
 12580  1130  31A0  20A9  3190   	fcall	___awtoft
 12581  1133  0021               	movlb	1	; select bank1
 12582  1134  0828               	movf	?___awtoft^(0+128),w
 12583  1135  00B1               	movwf	___ftmul@f2^(0+128)
 12584  1136  0829               	movf	(?___awtoft+1)^(0+128),w
 12585  1137  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12586  1138  082A               	movf	(?___awtoft+2)^(0+128),w
 12587  1139  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12588  113A  319E  2691  3190   	fcall	___ftmul
 12589  113D  0021               	movlb	1	; select bank1
 12590  113E  082E               	movf	?___ftmul^(0+128),w
 12591  113F  00C4               	movwf	___ftadd@f2^(0+128)
 12592  1140  082F               	movf	(?___ftmul+1)^(0+128),w
 12593  1141  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 12594  1142  0830               	movf	(?___ftmul+2)^(0+128),w
 12595  1143  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 12596  1144  3191  2153         	fcall	___ftadd
 12597  1146  0021               	movlb	1	; select bank1
 12598  1147  0841               	movf	?___ftadd^(0+128),w
 12599  1148  0022               	movlb	2	; select bank2
 12600  1149  00BE               	movwf	?_log^(0+256)
 12601  114A  0021               	movlb	1	; select bank1
 12602  114B  0842               	movf	(?___ftadd+1)^(0+128),w
 12603  114C  0022               	movlb	2	; select bank2
 12604  114D  00BF               	movwf	(?_log+1)^(0+256)
 12605  114E  0021               	movlb	1	; select bank1
 12606  114F  0843               	movf	(?___ftadd+2)^(0+128),w
 12607  1150  0022               	movlb	2	; select bank2
 12608  1151  00C0               	movwf	(?_log+2)^(0+256)
 12609  1152  0008               	return
 12610  1153                     __end_of_log:	
 12611                           
 12612                           	psect	text29
 12613  1351                     __ptext29:	
 12614 ;; *************** function _exp *****************
 12615 ;; Defined at:
 12616 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\exp.c"
 12617 ;; Parameters:    Size  Location     Type
 12618 ;;  x               3   40[BANK2 ] int 
 12619 ;; Auto vars:     Size  Location     Type
 12620 ;;  exponent        2   50[BANK2 ] int 
 12621 ;;  sign            1   52[BANK2 ] unsigned char 
 12622 ;; Return value:  Size  Location     Type
 12623 ;;                  3   40[BANK2 ] unsigned char 
 12624 ;; Registers used:
 12625 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12626 ;; Tracked objects:
 12627 ;;		On entry : 0/0
 12628 ;;		On exit  : 0/0
 12629 ;;		Unchanged: 0/0
 12630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12631 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12632 ;;      Locals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12633 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12634 ;;      Totals:         0       0       0      13       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12635 ;;Total ram usage:       13 bytes
 12636 ;; Hardware stack levels used:    1
 12637 ;; Hardware stack levels required when called:    6
 12638 ;; This function calls:
 12639 ;;		___awtoft
 12640 ;;		___ftdiv
 12641 ;;		___ftge
 12642 ;;		___ftmul
 12643 ;;		___ftneg
 12644 ;;		___ftsub
 12645 ;;		___fttol
 12646 ;;		_eval_poly
 12647 ;;		_floor
 12648 ;;		_ldexp
 12649 ;; This function is called by:
 12650 ;;		_pow
 12651 ;; This function uses a non-reentrant model
 12652 ;;
 12653                           
 12654                           
 12655                           ;psect for function _exp
 12656  1351                     _exp:	
 12657                           
 12658                           ;incstack = 0
 12659                           ; Regs used in _exp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12660  1351  0022               	movlb	2	; select bank2
 12661  1352  084A               	movf	(exp@x+2)^(0+256),w
 12662  1353  0449               	iorwf	(exp@x+1)^(0+256),w
 12663  1354  0448               	iorwf	exp@x^(0+256),w
 12664  1355  1D03               	skipz
 12665  1356  2B5E               	goto	l8008
 12666  1357  3000               	movlw	0
 12667  1358  00C8               	movwf	?_exp^(0+256)
 12668  1359  3080               	movlw	128
 12669  135A  00C9               	movwf	(?_exp+1)^(0+256)
 12670  135B  303F               	movlw	63
 12671  135C  00CA               	movwf	(?_exp+2)^(0+256)
 12672  135D  0008               	return
 12673  135E                     l8008:	
 12674  135E  3072               	movlw	114
 12675  135F  0021               	movlb	1	; select bank1
 12676  1360  00A0               	movwf	___ftge@ff1^(0+128)
 12677  1361  3031               	movlw	49
 12678  1362  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12679  1363  3044               	movlw	68
 12680  1364  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12681  1365  0022               	movlb	2	; select bank2
 12682  1366  0848               	movf	exp@x^(0+256),w
 12683  1367  0021               	movlb	1	; select bank1
 12684  1368  00A3               	movwf	___ftge@ff2^(0+128)
 12685  1369  0022               	movlb	2	; select bank2
 12686  136A  0849               	movf	(exp@x+1)^(0+256),w
 12687  136B  0021               	movlb	1	; select bank1
 12688  136C  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12689  136D  0022               	movlb	2	; select bank2
 12690  136E  084A               	movf	(exp@x+2)^(0+256),w
 12691  136F  0021               	movlb	1	; select bank1
 12692  1370  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12693  1371  31A2  22DB  3193   	fcall	___ftge
 12694  1374  1803               	btfsc	3,0
 12695  1375  2B83               	goto	l8018
 12696  1376  3022               	movlw	34
 12697  1377  0024               	movlb	4	; select bank4
 12698  1378  00D3               	movwf	_errno^(0+512)
 12699  1379  3000               	movlw	0
 12700  137A  00D4               	movwf	(_errno^(0+512)+1)
 12701  137B  30FF               	movlw	255
 12702  137C  0022               	movlb	2	; select bank2
 12703  137D  00C8               	movwf	?_exp^(0+256)
 12704  137E  307F               	movlw	127
 12705  137F  00C9               	movwf	(?_exp+1)^(0+256)
 12706  1380  307F               	movlw	127
 12707  1381  00CA               	movwf	(?_exp+2)^(0+256)
 12708  1382  0008               	return
 12709  1383                     l8018:	
 12710  1383  0022               	movlb	2	; select bank2
 12711  1384  0848               	movf	exp@x^(0+256),w
 12712  1385  0021               	movlb	1	; select bank1
 12713  1386  00A0               	movwf	___ftge@ff1^(0+128)
 12714  1387  0022               	movlb	2	; select bank2
 12715  1388  0849               	movf	(exp@x+1)^(0+256),w
 12716  1389  0021               	movlb	1	; select bank1
 12717  138A  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12718  138B  0022               	movlb	2	; select bank2
 12719  138C  084A               	movf	(exp@x+2)^(0+256),w
 12720  138D  0021               	movlb	1	; select bank1
 12721  138E  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12722  138F  3049               	movlw	73
 12723  1390  00A3               	movwf	___ftge@ff2^(0+128)
 12724  1391  303A               	movlw	58
 12725  1392  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12726  1393  30C4               	movlw	196
 12727  1394  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12728  1395  31A2  22DB  3193   	fcall	___ftge
 12729  1398  1803               	btfsc	3,0
 12730  1399  2BA7               	goto	l8024
 12731  139A  3022               	movlw	34
 12732  139B  0024               	movlb	4	; select bank4
 12733  139C  00D3               	movwf	_errno^(0+512)
 12734  139D  3000               	movlw	0
 12735  139E  00D4               	movwf	(_errno^(0+512)+1)
 12736  139F  3000               	movlw	0
 12737  13A0  0022               	movlb	2	; select bank2
 12738  13A1  00C8               	movwf	?_exp^(0+256)
 12739  13A2  3000               	movlw	0
 12740  13A3  00C9               	movwf	(?_exp+1)^(0+256)
 12741  13A4  3000               	movlw	0
 12742  13A5  00CA               	movwf	(?_exp+2)^(0+256)
 12743  13A6  0008               	return
 12744  13A7                     l8024:	
 12745  13A7  0022               	movlb	2	; select bank2
 12746  13A8  0848               	movf	exp@x^(0+256),w
 12747  13A9  0021               	movlb	1	; select bank1
 12748  13AA  00A0               	movwf	___ftge@ff1^(0+128)
 12749  13AB  0022               	movlb	2	; select bank2
 12750  13AC  0849               	movf	(exp@x+1)^(0+256),w
 12751  13AD  0021               	movlb	1	; select bank1
 12752  13AE  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12753  13AF  0022               	movlb	2	; select bank2
 12754  13B0  084A               	movf	(exp@x+2)^(0+256),w
 12755  13B1  0021               	movlb	1	; select bank1
 12756  13B2  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12757  13B3  3000               	movlw	0
 12758  13B4  00A3               	movwf	___ftge@ff2^(0+128)
 12759  13B5  3000               	movlw	0
 12760  13B6  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12761  13B7  3000               	movlw	0
 12762  13B8  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12763  13B9  31A2  22DB  3193   	fcall	___ftge
 12764  13BC  1803               	btfsc	3,0
 12765  13BD  2BC0               	goto	u8410
 12766  13BE  3001               	movlw	1
 12767  13BF  2BC1               	goto	u8420
 12768  13C0                     u8410:	
 12769  13C0  3000               	movlw	0
 12770  13C1                     u8420:	
 12771  13C1  0022               	movlb	2	; select bank2
 12772  13C2  00CB               	movwf	??_exp^(0+256)
 12773  13C3  084B               	movf	??_exp^(0+256),w
 12774  13C4  00D4               	movwf	exp@sign^(0+256)
 12775  13C5  0854               	movf	exp@sign^(0+256),w
 12776  13C6  1903               	btfsc	3,2
 12777  13C7  2BE2               	goto	l8030
 12778  13C8  0848               	movf	exp@x^(0+256),w
 12779  13C9  0021               	movlb	1	; select bank1
 12780  13CA  00BE               	movwf	___ftneg@f1^(0+128)
 12781  13CB  0022               	movlb	2	; select bank2
 12782  13CC  0849               	movf	(exp@x+1)^(0+256),w
 12783  13CD  0021               	movlb	1	; select bank1
 12784  13CE  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12785  13CF  0022               	movlb	2	; select bank2
 12786  13D0  084A               	movf	(exp@x+2)^(0+256),w
 12787  13D1  0021               	movlb	1	; select bank1
 12788  13D2  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12789  13D3  31AF  2763  3193   	fcall	___ftneg
 12790  13D6  0021               	movlb	1	; select bank1
 12791  13D7  083E               	movf	?___ftneg^(0+128),w
 12792  13D8  0022               	movlb	2	; select bank2
 12793  13D9  00C8               	movwf	exp@x^(0+256)
 12794  13DA  0021               	movlb	1	; select bank1
 12795  13DB  083F               	movf	(?___ftneg+1)^(0+128),w
 12796  13DC  0022               	movlb	2	; select bank2
 12797  13DD  00C9               	movwf	(exp@x+1)^(0+256)
 12798  13DE  0021               	movlb	1	; select bank1
 12799  13DF  0840               	movf	(?___ftneg+2)^(0+128),w
 12800  13E0  0022               	movlb	2	; select bank2
 12801  13E1  00CA               	movwf	(exp@x+2)^(0+256)
 12802  13E2                     l8030:	
 12803  13E2  30AA               	movlw	170
 12804  13E3  0021               	movlb	1	; select bank1
 12805  13E4  00AE               	movwf	___ftmul@f1^(0+128)
 12806  13E5  30B8               	movlw	184
 12807  13E6  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12808  13E7  303F               	movlw	63
 12809  13E8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12810  13E9  0022               	movlb	2	; select bank2
 12811  13EA  0848               	movf	exp@x^(0+256),w
 12812  13EB  0021               	movlb	1	; select bank1
 12813  13EC  00B1               	movwf	___ftmul@f2^(0+128)
 12814  13ED  0022               	movlb	2	; select bank2
 12815  13EE  0849               	movf	(exp@x+1)^(0+256),w
 12816  13EF  0021               	movlb	1	; select bank1
 12817  13F0  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12818  13F1  0022               	movlb	2	; select bank2
 12819  13F2  084A               	movf	(exp@x+2)^(0+256),w
 12820  13F3  0021               	movlb	1	; select bank1
 12821  13F4  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12822  13F5  319E  2691  3193   	fcall	___ftmul
 12823  13F8  0021               	movlb	1	; select bank1
 12824  13F9  082E               	movf	?___ftmul^(0+128),w
 12825  13FA  0022               	movlb	2	; select bank2
 12826  13FB  00C8               	movwf	exp@x^(0+256)
 12827  13FC  0021               	movlb	1	; select bank1
 12828  13FD  082F               	movf	(?___ftmul+1)^(0+128),w
 12829  13FE  0022               	movlb	2	; select bank2
 12830  13FF  00C9               	movwf	(exp@x+1)^(0+256)
 12831  1400  0021               	movlb	1	; select bank1
 12832  1401  0830               	movf	(?___ftmul+2)^(0+128),w
 12833  1402  0022               	movlb	2	; select bank2
 12834  1403  00CA               	movwf	(exp@x+2)^(0+256)
 12835  1404  0848               	movf	exp@x^(0+256),w
 12836  1405  00B6               	movwf	floor@x^(0+256)
 12837  1406  0849               	movf	(exp@x+1)^(0+256),w
 12838  1407  00B7               	movwf	(floor@x+1)^(0+256)
 12839  1408  084A               	movf	(exp@x+2)^(0+256),w
 12840  1409  00B8               	movwf	(floor@x+2)^(0+256)
 12841  140A  319C  2496  3193   	fcall	_floor
 12842  140D  0022               	movlb	2	; select bank2
 12843  140E  0836               	movf	?_floor^(0+256),w
 12844  140F  00CC               	movwf	_exp$2827^(0+256)
 12845  1410  0837               	movf	(?_floor+1)^(0+256),w
 12846  1411  00CD               	movwf	(_exp$2827+1)^(0+256)
 12847  1412  0838               	movf	(?_floor+2)^(0+256),w
 12848  1413  00CE               	movwf	(_exp$2827+2)^(0+256)
 12849  1414  084C               	movf	_exp$2827^(0+256),w
 12850  1415  00A0               	movwf	___fttol@f1^(0+256)
 12851  1416  084D               	movf	(_exp$2827+1)^(0+256),w
 12852  1417  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12853  1418  084E               	movf	(_exp$2827+2)^(0+256),w
 12854  1419  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12855  141A  3199  21D5  3193   	fcall	___fttol
 12856  141D  0022               	movlb	2	; select bank2
 12857  141E  0821               	movf	(?___fttol^(0+256)+1),w
 12858  141F  00D3               	movwf	(exp@exponent+1)^(0+256)
 12859  1420  0820               	movf	?___fttol^(0+256),w
 12860  1421  00D2               	movwf	exp@exponent^(0+256)
 12861  1422  0853               	movf	(exp@exponent+1)^(0+256),w
 12862  1423  0021               	movlb	1	; select bank1
 12863  1424  00A9               	movwf	(___awtoft@c+1)^(0+128)
 12864  1425  0022               	movlb	2	; select bank2
 12865  1426  0852               	movf	exp@exponent^(0+256),w
 12866  1427  0021               	movlb	1	; select bank1
 12867  1428  00A8               	movwf	___awtoft@c^(0+128)
 12868  1429  31A0  20A9  3193   	fcall	___awtoft
 12869  142C  0021               	movlb	1	; select bank1
 12870  142D  0828               	movf	?___awtoft^(0+128),w
 12871  142E  0022               	movlb	2	; select bank2
 12872  142F  00BF               	movwf	___ftsub@f2^(0+256)
 12873  1430  0021               	movlb	1	; select bank1
 12874  1431  0829               	movf	(?___awtoft+1)^(0+128),w
 12875  1432  0022               	movlb	2	; select bank2
 12876  1433  00C0               	movwf	(___ftsub@f2+1)^(0+256)
 12877  1434  0021               	movlb	1	; select bank1
 12878  1435  082A               	movf	(?___awtoft+2)^(0+128),w
 12879  1436  0022               	movlb	2	; select bank2
 12880  1437  00C1               	movwf	(___ftsub@f2+2)^(0+256)
 12881  1438  0848               	movf	exp@x^(0+256),w
 12882  1439  00C2               	movwf	___ftsub@f1^(0+256)
 12883  143A  0849               	movf	(exp@x+1)^(0+256),w
 12884  143B  00C3               	movwf	(___ftsub@f1+1)^(0+256)
 12885  143C  084A               	movf	(exp@x+2)^(0+256),w
 12886  143D  00C4               	movwf	(___ftsub@f1+2)^(0+256)
 12887  143E  31A1  213F  3193   	fcall	___ftsub
 12888  1441  0022               	movlb	2	; select bank2
 12889  1442  083F               	movf	?___ftsub^(0+256),w
 12890  1443  00C8               	movwf	exp@x^(0+256)
 12891  1444  0840               	movf	(?___ftsub+1)^(0+256),w
 12892  1445  00C9               	movwf	(exp@x+1)^(0+256)
 12893  1446  0841               	movf	(?___ftsub+2)^(0+256),w
 12894  1447  00CA               	movwf	(exp@x+2)^(0+256)
 12895  1448  0848               	movf	exp@x^(0+256),w
 12896  1449  00B4               	movwf	eval_poly@x^(0+256)
 12897  144A  0849               	movf	(exp@x+1)^(0+256),w
 12898  144B  00B5               	movwf	(eval_poly@x+1)^(0+256)
 12899  144C  084A               	movf	(exp@x+2)^(0+256),w
 12900  144D  00B6               	movwf	(eval_poly@x+2)^(0+256)
 12901  144E  3000               	movlw	low (exp@coeff| (0+32768))
 12902  144F  00B7               	movwf	eval_poly@d^(0+256)
 12903  1450  30A8               	movlw	high (exp@coeff| (0+32768))
 12904  1451  00B8               	movwf	(eval_poly@d^(0+256)+1)
 12905  1452  3009               	movlw	9
 12906  1453  00B9               	movwf	eval_poly@n^(0+256)
 12907  1454  3000               	movlw	0
 12908  1455  00BA               	movwf	(eval_poly@n^(0+256)+1)
 12909  1456  31A7  278E  3193   	fcall	_eval_poly
 12910  1459  0022               	movlb	2	; select bank2
 12911  145A  0834               	movf	?_eval_poly^(0+256),w
 12912  145B  00BE               	movwf	ldexp@value^(0+256)
 12913  145C  0835               	movf	(?_eval_poly+1)^(0+256),w
 12914  145D  00BF               	movwf	(ldexp@value+1)^(0+256)
 12915  145E  0836               	movf	(?_eval_poly+2)^(0+256),w
 12916  145F  00C0               	movwf	(ldexp@value+2)^(0+256)
 12917  1460  0853               	movf	(exp@exponent+1)^(0+256),w
 12918  1461  00C2               	movwf	(ldexp@newexp+1)^(0+256)
 12919  1462  0852               	movf	exp@exponent^(0+256),w
 12920  1463  00C1               	movwf	ldexp@newexp^(0+256)
 12921  1464  319B  23FF  3193   	fcall	_ldexp
 12922  1467  0022               	movlb	2	; select bank2
 12923  1468  083E               	movf	?_ldexp^(0+256),w
 12924  1469  00C8               	movwf	exp@x^(0+256)
 12925  146A  083F               	movf	(?_ldexp+1)^(0+256),w
 12926  146B  00C9               	movwf	(exp@x+1)^(0+256)
 12927  146C  0840               	movf	(?_ldexp+2)^(0+256),w
 12928  146D  00CA               	movwf	(exp@x+2)^(0+256)
 12929  146E  0854               	movf	exp@sign^(0+256),w
 12930  146F  1903               	btfsc	3,2
 12931  1470  0008               	return
 12932  1471  30FF               	movlw	255
 12933  1472  00CF               	movwf	_exp$2583^(0+256)
 12934  1473  307F               	movlw	127
 12935  1474  00D0               	movwf	(_exp$2583+1)^(0+256)
 12936  1475  307F               	movlw	127
 12937  1476  00D1               	movwf	(_exp$2583+2)^(0+256)
 12938  1477  084A               	movf	(exp@x+2)^(0+256),w
 12939  1478  0651               	xorwf	(_exp$2583+2)^(0+256),w
 12940  1479  1D03               	skipz
 12941  147A  2C81               	goto	u8455
 12942  147B  0849               	movf	(exp@x+1)^(0+256),w
 12943  147C  0650               	xorwf	(_exp$2583+1)^(0+256),w
 12944  147D  1D03               	skipz
 12945  147E  2C81               	goto	u8455
 12946  147F  0848               	movf	exp@x^(0+256),w
 12947  1480  064F               	xorwf	_exp$2583^(0+256),w
 12948  1481                     u8455:	
 12949  1481  1D03               	skipz
 12950  1482  2C8A               	goto	l8052
 12951  1483  3000               	movlw	0
 12952  1484  00C8               	movwf	?_exp^(0+256)
 12953  1485  3000               	movlw	0
 12954  1486  00C9               	movwf	(?_exp+1)^(0+256)
 12955  1487  3000               	movlw	0
 12956  1488  00CA               	movwf	(?_exp+2)^(0+256)
 12957  1489  0008               	return
 12958  148A                     l8052:	
 12959  148A  0848               	movf	exp@x^(0+256),w
 12960  148B  0021               	movlb	1	; select bank1
 12961  148C  00CE               	movwf	___ftdiv@f2^(0+128)
 12962  148D  0022               	movlb	2	; select bank2
 12963  148E  0849               	movf	(exp@x+1)^(0+256),w
 12964  148F  0021               	movlb	1	; select bank1
 12965  1490  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 12966  1491  0022               	movlb	2	; select bank2
 12967  1492  084A               	movf	(exp@x+2)^(0+256),w
 12968  1493  0021               	movlb	1	; select bank1
 12969  1494  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 12970  1495  3000               	movlw	0
 12971  1496  00D1               	movwf	___ftdiv@f1^(0+128)
 12972  1497  3080               	movlw	128
 12973  1498  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 12974  1499  303F               	movlw	63
 12975  149A  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 12976  149B  319D  253D         	fcall	___ftdiv
 12977  149D  0021               	movlb	1	; select bank1
 12978  149E  084E               	movf	?___ftdiv^(0+128),w
 12979  149F  0022               	movlb	2	; select bank2
 12980  14A0  00C8               	movwf	?_exp^(0+256)
 12981  14A1  0021               	movlb	1	; select bank1
 12982  14A2  084F               	movf	(?___ftdiv+1)^(0+128),w
 12983  14A3  0022               	movlb	2	; select bank2
 12984  14A4  00C9               	movwf	(?_exp+1)^(0+256)
 12985  14A5  0021               	movlb	1	; select bank1
 12986  14A6  0850               	movf	(?___ftdiv+2)^(0+128),w
 12987  14A7  0022               	movlb	2	; select bank2
 12988  14A8  00CA               	movwf	(?_exp+2)^(0+256)
 12989  14A9  0008               	return
 12990  14AA                     __end_of_exp:	
 12991                           
 12992                           	psect	text30
 12993  1BFF                     __ptext30:	
 12994 ;; *************** function _ldexp *****************
 12995 ;; Defined at:
 12996 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
 12997 ;; Parameters:    Size  Location     Type
 12998 ;;  value           3   30[BANK2 ] unsigned char 
 12999 ;;  newexp          2   33[BANK2 ] int 
 13000 ;; Auto vars:     Size  Location     Type
 13001 ;;		None
 13002 ;; Return value:  Size  Location     Type
 13003 ;;                  3   30[BANK2 ] int 
 13004 ;; Registers used:
 13005 ;;		wreg, status,2, status,0, pclath, cstack
 13006 ;; Tracked objects:
 13007 ;;		On entry : 0/0
 13008 ;;		On exit  : 0/0
 13009 ;;		Unchanged: 0/0
 13010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13011 ;;      Params:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13012 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13013 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13014 ;;      Totals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13015 ;;Total ram usage:       10 bytes
 13016 ;; Hardware stack levels used:    1
 13017 ;; Hardware stack levels required when called:    4
 13018 ;; This function calls:
 13019 ;;		___ftge
 13020 ;;		___ftneg
 13021 ;; This function is called by:
 13022 ;;		_exp
 13023 ;; This function uses a non-reentrant model
 13024 ;;
 13025                           
 13026                           
 13027                           ;psect for function _ldexp
 13028  1BFF                     _ldexp:	
 13029                           
 13030                           ;incstack = 0
 13031                           ; Regs used in _ldexp: [wreg+status,2+status,0+pclath+cstack]
 13032  1BFF  0022               	movlb	2	; select bank2
 13033  1C00  0840               	movf	(ldexp@value+2)^(0+256),w
 13034  1C01  043F               	iorwf	(ldexp@value+1)^(0+256),w
 13035  1C02  043E               	iorwf	ldexp@value^(0+256),w
 13036  1C03  1D03               	skipz
 13037  1C04  2C0C               	goto	l7872
 13038  1C05  3000               	movlw	0
 13039  1C06  00BE               	movwf	?_ldexp^(0+256)
 13040  1C07  3000               	movlw	0
 13041  1C08  00BF               	movwf	(?_ldexp+1)^(0+256)
 13042  1C09  3000               	movlw	0
 13043  1C0A  00C0               	movwf	(?_ldexp+2)^(0+256)
 13044  1C0B  0008               	return
 13045  1C0C                     l7872:	
 13046  1C0C  0840               	movf	(ldexp@value^(0+256)+2),w
 13047  1C0D  397F               	andlw	127
 13048  1C0E  00C3               	movwf	??_ldexp^(0+256)
 13049  1C0F  01C4               	clrf	(??_ldexp^(0+256)+1)
 13050  1C10  35C3               	lslf	??_ldexp^(0+256),f
 13051  1C11  0DC4               	rlf	(??_ldexp^(0+256)+1),f
 13052  1C12  0843               	movf	??_ldexp^(0+256),w
 13053  1C13  07C1               	addwf	ldexp@newexp^(0+256),f
 13054  1C14  0844               	movf	(??_ldexp+1)^(0+256),w
 13055  1C15  3DC2               	addwfc	(ldexp@newexp+1)^(0+256),f
 13056  1C16  0D3F               	rlf	(ldexp@value^(0+256)+1),w
 13057  1C17  0D3F               	rlf	(ldexp@value^(0+256)+1),w
 13058  1C18  3901               	andlw	1
 13059  1C19  00C3               	movwf	??_ldexp^(0+256)
 13060  1C1A  01C4               	clrf	(??_ldexp^(0+256)+1)
 13061  1C1B  0843               	movf	??_ldexp^(0+256),w
 13062  1C1C  07C1               	addwf	ldexp@newexp^(0+256),f
 13063  1C1D  0844               	movf	(??_ldexp+1)^(0+256),w
 13064  1C1E  3DC2               	addwfc	(ldexp@newexp+1)^(0+256),f
 13065  1C1F  1FC2               	btfss	(ldexp@newexp+1)^(0+256),7
 13066  1C20  2C2E               	goto	l7882
 13067  1C21  3022               	movlw	34
 13068  1C22  0024               	movlb	4	; select bank4
 13069  1C23  00D3               	movwf	_errno^(0+512)
 13070  1C24  3000               	movlw	0
 13071  1C25  00D4               	movwf	(_errno^(0+512)+1)
 13072  1C26  3000               	movlw	0
 13073  1C27  0022               	movlb	2	; select bank2
 13074  1C28  00BE               	movwf	?_ldexp^(0+256)
 13075  1C29  3000               	movlw	0
 13076  1C2A  00BF               	movwf	(?_ldexp+1)^(0+256)
 13077  1C2B  3000               	movlw	0
 13078  1C2C  00C0               	movwf	(?_ldexp+2)^(0+256)
 13079  1C2D  0008               	return
 13080  1C2E                     l7882:	
 13081  1C2E  0842               	movf	(ldexp@newexp+1)^(0+256),w
 13082  1C2F  3A80               	xorlw	128
 13083  1C30  00C3               	movwf	??_ldexp^(0+256)
 13084  1C31  3081               	movlw	129
 13085  1C32  0243               	subwf	??_ldexp^(0+256),w
 13086  1C33  1D03               	skipz
 13087  1C34  2C37               	goto	u8305
 13088  1C35  3000               	movlw	0
 13089  1C36  0241               	subwf	ldexp@newexp^(0+256),w
 13090  1C37                     u8305:	
 13091  1C37  1C03               	skipc
 13092  1C38  2C7E               	goto	l7906
 13093  1C39  3022               	movlw	34
 13094  1C3A  0024               	movlb	4	; select bank4
 13095  1C3B  00D3               	movwf	_errno^(0+512)
 13096  1C3C  3000               	movlw	0
 13097  1C3D  00D4               	movwf	(_errno^(0+512)+1)
 13098  1C3E  0022               	movlb	2	; select bank2
 13099  1C3F  083E               	movf	ldexp@value^(0+256),w
 13100  1C40  0021               	movlb	1	; select bank1
 13101  1C41  00A0               	movwf	___ftge@ff1^(0+128)
 13102  1C42  0022               	movlb	2	; select bank2
 13103  1C43  083F               	movf	(ldexp@value+1)^(0+256),w
 13104  1C44  0021               	movlb	1	; select bank1
 13105  1C45  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13106  1C46  0022               	movlb	2	; select bank2
 13107  1C47  0840               	movf	(ldexp@value+2)^(0+256),w
 13108  1C48  0021               	movlb	1	; select bank1
 13109  1C49  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13110  1C4A  3000               	movlw	0
 13111  1C4B  00A3               	movwf	___ftge@ff2^(0+128)
 13112  1C4C  3000               	movlw	0
 13113  1C4D  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13114  1C4E  3000               	movlw	0
 13115  1C4F  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13116  1C50  31A2  22DB  319B   	fcall	___ftge
 13117  1C53  1803               	btfsc	3,0
 13118  1C54  2C76               	goto	l7902
 13119  1C55  30FF               	movlw	255
 13120  1C56  0022               	movlb	2	; select bank2
 13121  1C57  00C5               	movwf	_ldexp$2615^(0+256)
 13122  1C58  307F               	movlw	127
 13123  1C59  00C6               	movwf	(_ldexp$2615+1)^(0+256)
 13124  1C5A  307F               	movlw	127
 13125  1C5B  00C7               	movwf	(_ldexp$2615+2)^(0+256)
 13126  1C5C  0845               	movf	_ldexp$2615^(0+256),w
 13127  1C5D  0021               	movlb	1	; select bank1
 13128  1C5E  00BE               	movwf	___ftneg@f1^(0+128)
 13129  1C5F  0022               	movlb	2	; select bank2
 13130  1C60  0846               	movf	(_ldexp$2615+1)^(0+256),w
 13131  1C61  0021               	movlb	1	; select bank1
 13132  1C62  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13133  1C63  0022               	movlb	2	; select bank2
 13134  1C64  0847               	movf	(_ldexp$2615+2)^(0+256),w
 13135  1C65  0021               	movlb	1	; select bank1
 13136  1C66  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13137  1C67  31AF  2763         	fcall	___ftneg
 13138  1C69  0021               	movlb	1	; select bank1
 13139  1C6A  083E               	movf	?___ftneg^(0+128),w
 13140  1C6B  0022               	movlb	2	; select bank2
 13141  1C6C  00BE               	movwf	?_ldexp^(0+256)
 13142  1C6D  0021               	movlb	1	; select bank1
 13143  1C6E  083F               	movf	(?___ftneg+1)^(0+128),w
 13144  1C6F  0022               	movlb	2	; select bank2
 13145  1C70  00BF               	movwf	(?_ldexp+1)^(0+256)
 13146  1C71  0021               	movlb	1	; select bank1
 13147  1C72  0840               	movf	(?___ftneg+2)^(0+128),w
 13148  1C73  0022               	movlb	2	; select bank2
 13149  1C74  00C0               	movwf	(?_ldexp+2)^(0+256)
 13150  1C75  0008               	return
 13151  1C76                     l7902:	
 13152  1C76  30FF               	movlw	255
 13153  1C77  0022               	movlb	2	; select bank2
 13154  1C78  00BE               	movwf	?_ldexp^(0+256)
 13155  1C79  307F               	movlw	127
 13156  1C7A  00BF               	movwf	(?_ldexp+1)^(0+256)
 13157  1C7B  307F               	movlw	127
 13158  1C7C  00C0               	movwf	(?_ldexp+2)^(0+256)
 13159  1C7D  0008               	return
 13160  1C7E                     l7906:	
 13161  1C7E  0022               	movlb	2	; select bank2
 13162  1C7F  0842               	movf	(ldexp@newexp+1)^(0+256),w
 13163  1C80  00C4               	movwf	(??_ldexp^(0+256)+1)
 13164  1C81  0841               	movf	ldexp@newexp^(0+256),w
 13165  1C82  00C3               	movwf	??_ldexp^(0+256)
 13166  1C83  0D44               	rlf	(??_ldexp^(0+256)+1),w
 13167  1C84  0CC4               	rrf	(??_ldexp^(0+256)+1),f
 13168  1C85  0CC3               	rrf	??_ldexp^(0+256),f
 13169  1C86  0840               	movf	(ldexp@value^(0+256)+2),w
 13170  1C87  0643               	xorwf	??_ldexp^(0+256),w
 13171  1C88  3980               	andlw	-128
 13172  1C89  0643               	xorwf	??_ldexp^(0+256),w
 13173  1C8A  00C0               	movwf	(ldexp@value^(0+256)+2)
 13174  1C8B  0841               	movf	ldexp@newexp^(0+256),w
 13175  1C8C  3901               	andlw	1
 13176  1C8D  00C3               	movwf	??_ldexp^(0+256)
 13177  1C8E  0CC3               	rrf	??_ldexp^(0+256),f
 13178  1C8F  0CC3               	rrf	??_ldexp^(0+256),f
 13179  1C90  083F               	movf	(ldexp@value^(0+256)+1),w
 13180  1C91  0643               	xorwf	??_ldexp^(0+256),w
 13181  1C92  397F               	andlw	-129
 13182  1C93  0643               	xorwf	??_ldexp^(0+256),w
 13183  1C94  00BF               	movwf	(ldexp@value^(0+256)+1)
 13184  1C95  0008               	return
 13185  1C96                     __end_of_ldexp:	
 13186                           
 13187                           	psect	text31
 13188  2115                     __ptext31:	
 13189 ;; *************** function ___lltoft *****************
 13190 ;; Defined at:
 13191 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lltoft.c"
 13192 ;; Parameters:    Size  Location     Type
 13193 ;;  c               4    8[BANK1 ] unsigned long 
 13194 ;; Auto vars:     Size  Location     Type
 13195 ;;  exp             1   13[BANK1 ] unsigned char 
 13196 ;; Return value:  Size  Location     Type
 13197 ;;                  3    8[BANK1 ] float 
 13198 ;; Registers used:
 13199 ;;		wreg, status,2, status,0, pclath, cstack
 13200 ;; Tracked objects:
 13201 ;;		On entry : 0/0
 13202 ;;		On exit  : 0/0
 13203 ;;		Unchanged: 0/0
 13204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13205 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13206 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13207 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13208 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13209 ;;Total ram usage:        6 bytes
 13210 ;; Hardware stack levels used:    1
 13211 ;; Hardware stack levels required when called:    4
 13212 ;; This function calls:
 13213 ;;		___ftpack
 13214 ;; This function is called by:
 13215 ;;		_pow
 13216 ;; This function uses a non-reentrant model
 13217 ;;
 13218                           
 13219                           
 13220                           ;psect for function ___lltoft
 13221  2115                     ___lltoft:	
 13222                           
 13223                           ;incstack = 0
 13224                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
 13225  2115  308E               	movlw	142
 13226  2116  0021               	movlb	1	; select bank1
 13227  2117  00AC               	movwf	??___lltoft^(0+128)
 13228  2118  082C               	movf	??___lltoft^(0+128),w
 13229  2119  00AD               	movwf	___lltoft@exp^(0+128)
 13230  211A                     l7974:	
 13231  211A  30FF               	movlw	255
 13232  211B  052B               	andwf	(___lltoft@c+3)^(0+128),w
 13233  211C  1903               	btfsc	3,2
 13234  211D  292A               	goto	l7976
 13235  211E  3001               	movlw	1
 13236  211F                     u8345:	
 13237  211F  36AB               	lsrf	(___lltoft@c+3)^(0+128),f
 13238  2120  0CAA               	rrf	(___lltoft@c+2)^(0+128),f
 13239  2121  0CA9               	rrf	(___lltoft@c+1)^(0+128),f
 13240  2122  0CA8               	rrf	___lltoft@c^(0+128),f
 13241  2123  0B89               	decfsz	9,f
 13242  2124  291F               	goto	u8345
 13243  2125  3001               	movlw	1
 13244  2126  00AC               	movwf	??___lltoft^(0+128)
 13245  2127  082C               	movf	??___lltoft^(0+128),w
 13246  2128  07AD               	addwf	___lltoft@exp^(0+128),f
 13247  2129  291A               	goto	l7974
 13248  212A                     l7976:	
 13249  212A  0828               	movf	___lltoft@c^(0+128),w
 13250  212B  00A0               	movwf	___ftpack@arg^(0+128)
 13251  212C  0829               	movf	(___lltoft@c+1)^(0+128),w
 13252  212D  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 13253  212E  082A               	movf	(___lltoft@c+2)^(0+128),w
 13254  212F  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 13255  2130  082D               	movf	___lltoft@exp^(0+128),w
 13256  2131  00AC               	movwf	??___lltoft^(0+128)
 13257  2132  082C               	movf	??___lltoft^(0+128),w
 13258  2133  00A3               	movwf	___ftpack@exp^(0+128)
 13259  2134  01A4               	clrf	___ftpack@sign^(0+128)
 13260  2135  3188  2002         	fcall	___ftpack
 13261  2137  0021               	movlb	1	; select bank1
 13262  2138  0820               	movf	?___ftpack^(0+128),w
 13263  2139  00A8               	movwf	?___lltoft^(0+128)
 13264  213A  0821               	movf	(?___ftpack+1)^(0+128),w
 13265  213B  00A9               	movwf	(?___lltoft+1)^(0+128)
 13266  213C  0822               	movf	(?___ftpack+2)^(0+128),w
 13267  213D  00AA               	movwf	(?___lltoft+2)^(0+128)
 13268  213E  0008               	return
 13269  213F                     __end_of___lltoft:	
 13270                           
 13271                           	psect	text32
 13272  2646                     __ptext32:	
 13273 ;; *************** function _read_top_tactile *****************
 13274 ;; Defined at:
 13275 ;;		line 50 in file "tactiles.c"
 13276 ;; Parameters:    Size  Location     Type
 13277 ;;		None
 13278 ;; Auto vars:     Size  Location     Type
 13279 ;;		None
 13280 ;; Return value:  Size  Location     Type
 13281 ;;                  1    wreg      void 
 13282 ;; Registers used:
 13283 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13284 ;; Tracked objects:
 13285 ;;		On entry : 0/0
 13286 ;;		On exit  : 0/0
 13287 ;;		Unchanged: 0/0
 13288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13291 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13292 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13293 ;;Total ram usage:        1 bytes
 13294 ;; Hardware stack levels used:    1
 13295 ;; Hardware stack levels required when called:    5
 13296 ;; This function calls:
 13297 ;;		_set_leds_top
 13298 ;;		_wait_ms
 13299 ;; This function is called by:
 13300 ;;		_main
 13301 ;; This function uses a non-reentrant model
 13302 ;;
 13303                           
 13304                           
 13305                           ;psect for function _read_top_tactile
 13306  2646                     _read_top_tactile:	
 13307                           
 13308                           ;tactiles.c: 60: if (PORTDbits.RD5 == 0) {
 13309                           
 13310                           ;incstack = 0
 13311                           ; Regs used in _read_top_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13312  2646  0020               	movlb	0	; select bank0
 13313  2647  1A8F               	btfsc	15,5	;volatile
 13314  2648  2E50               	goto	l8770
 13315                           
 13316                           ;tactiles.c: 61: if (topTactile_pressed > 0) {
 13317  2649  0023               	movlb	3	; select bank3
 13318  264A  0847               	movf	_topTactile_pressed^(0+384),w
 13319  264B  1903               	btfsc	3,2
 13320  264C  2E5B               	goto	l974
 13321                           
 13322                           ;tactiles.c: 62: topTactile_pressed--;
 13323  264D  3001               	movlw	1
 13324  264E  02C7               	subwf	_topTactile_pressed^(0+384),f
 13325                           
 13326                           ;tactiles.c: 63: }
 13327                           ;tactiles.c: 64: } else if (topTactile_pressed < 25) {
 13328  264F  2E5B               	goto	l974
 13329  2650                     l8770:	
 13330  2650  3019               	movlw	25
 13331  2651  0023               	movlb	3	; select bank3
 13332  2652  0247               	subwf	_topTactile_pressed^(0+384),w
 13333  2653  1803               	skipnc
 13334  2654  2E5B               	goto	l974
 13335                           
 13336                           ;tactiles.c: 65: topTactile_pressed++;
 13337  2655  3001               	movlw	1
 13338  2656  0021               	movlb	1	; select bank1
 13339  2657  00B2               	movwf	??_read_top_tactile^(0+128)
 13340  2658  0832               	movf	??_read_top_tactile^(0+128),w
 13341  2659  0023               	movlb	3	; select bank3
 13342  265A  07C7               	addwf	_topTactile_pressed^(0+384),f
 13343  265B                     l974:	
 13344                           
 13345                           ;tactiles.c: 66: }
 13346                           ;tactiles.c: 71: if (topTactile_pressed == 0) {
 13347  265B  0847               	movf	_topTactile_pressed^(0+384),w
 13348  265C  1D03               	btfss	3,2
 13349  265D  0008               	return
 13350                           
 13351                           ;tactiles.c: 73: top_push_state = top_push_state + 1;
 13352  265E  0020               	movlb	0	; select bank0
 13353  265F  0851               	movf	_top_push_state,w
 13354  2660  3E01               	addlw	1
 13355  2661  00D1               	movwf	_top_push_state
 13356  2662  3000               	movlw	0
 13357  2663  3D52               	addwfc	_top_push_state+1,w
 13358  2664  00D2               	movwf	_top_push_state+1
 13359                           
 13360                           ;tactiles.c: 74: if (top_push_state >= 7) {
 13361  2665  0852               	movf	_top_push_state+1,w
 13362  2666  3A80               	xorlw	128
 13363  2667  0021               	movlb	1	; select bank1
 13364  2668  00B2               	movwf	??_read_top_tactile^(0+128)
 13365  2669  3080               	movlw	128
 13366  266A  0232               	subwf	??_read_top_tactile^(0+128),w
 13367  266B  1D03               	skipz
 13368  266C  2E70               	goto	u9705
 13369  266D  3007               	movlw	7
 13370  266E  0020               	movlb	0	; select bank0
 13371  266F  0251               	subwf	_top_push_state,w
 13372  2670                     u9705:	
 13373  2670  1C03               	skipc
 13374  2671  2E77               	goto	l8780
 13375                           
 13376                           ;tactiles.c: 75: top_push_state = 1;
 13377  2672  3001               	movlw	1
 13378  2673  0020               	movlb	0	; select bank0
 13379  2674  00D1               	movwf	_top_push_state
 13380  2675  3000               	movlw	0
 13381  2676  00D2               	movwf	_top_push_state+1
 13382  2677                     l8780:	
 13383                           
 13384                           ;tactiles.c: 76: }
 13385                           ;tactiles.c: 77: set_leds_top(top_push_state, 1);
 13386  2677  0020               	movlb	0	; select bank0
 13387  2678  0852               	movf	_top_push_state+1,w
 13388  2679  0021               	movlb	1	; select bank1
 13389  267A  00A1               	movwf	(set_leds_top@x+1)^(0+128)
 13390  267B  0020               	movlb	0	; select bank0
 13391  267C  0851               	movf	_top_push_state,w
 13392  267D  0021               	movlb	1	; select bank1
 13393  267E  00A0               	movwf	set_leds_top@x^(0+128)
 13394  267F  3001               	movlw	1
 13395  2680  00A2               	movwf	set_leds_top@ledState^(0+128)
 13396  2681  3000               	movlw	0
 13397  2682  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
 13398  2683  3198  2004  31A6   	fcall	_set_leds_top
 13399                           
 13400                           ;tactiles.c: 78: delay_time_changed = 1;
 13401  2686  0023               	movlb	3	; select bank3
 13402  2687  01DC               	clrf	_delay_time_changed^(0+384)
 13403  2688  0ADC               	incf	_delay_time_changed^(0+384),f
 13404  2689                     l978:	
 13405                           ;tactiles.c: 81: while (PORTDbits.RD5 == 0) {
 13406                           
 13407  2689  0020               	movlb	0	; select bank0
 13408  268A  1E8F               	btfss	15,5	;volatile
 13409  268B  2E89               	goto	l978
 13410                           
 13411                           ;tactiles.c: 82: }
 13412                           ;tactiles.c: 83: wait_ms(20);
 13413  268C  3014               	movlw	20
 13414  268D  0021               	movlb	1	; select bank1
 13415  268E  00AC               	movwf	wait_ms@timeSec^(0+128)
 13416  268F  3000               	movlw	0
 13417  2690  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 13418  2691  31A1  21FC         	fcall	_wait_ms
 13419  2693  0008               	return
 13420  2694                     __end_of_read_top_tactile:	
 13421                           
 13422                           	psect	text33
 13423  25B1                     __ptext33:	
 13424 ;; *************** function _read_bottom_tactile *****************
 13425 ;; Defined at:
 13426 ;;		line 18 in file "tactiles.c"
 13427 ;; Parameters:    Size  Location     Type
 13428 ;;		None
 13429 ;; Auto vars:     Size  Location     Type
 13430 ;;		None
 13431 ;; Return value:  Size  Location     Type
 13432 ;;                  1    wreg      void 
 13433 ;; Registers used:
 13434 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13435 ;; Tracked objects:
 13436 ;;		On entry : 0/0
 13437 ;;		On exit  : 0/0
 13438 ;;		Unchanged: 0/0
 13439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13441 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13442 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13443 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13444 ;;Total ram usage:        1 bytes
 13445 ;; Hardware stack levels used:    1
 13446 ;; Hardware stack levels required when called:    5
 13447 ;; This function calls:
 13448 ;;		_set_leds_bottom
 13449 ;;		_wait_ms
 13450 ;; This function is called by:
 13451 ;;		_main
 13452 ;; This function uses a non-reentrant model
 13453 ;;
 13454                           
 13455                           
 13456                           ;psect for function _read_bottom_tactile
 13457  25B1                     _read_bottom_tactile:	
 13458                           
 13459                           ;tactiles.c: 27: if (PORTDbits.RD6 == 0) {
 13460                           
 13461                           ;incstack = 0
 13462                           ; Regs used in _read_bottom_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13463  25B1  0020               	movlb	0	; select bank0
 13464  25B2  1B0F               	btfsc	15,6	;volatile
 13465  25B3  2DBB               	goto	l8748
 13466                           
 13467                           ;tactiles.c: 28: if (bottomTactile_pressed > 0) {
 13468  25B4  0023               	movlb	3	; select bank3
 13469  25B5  083D               	movf	_bottomTactile_pressed^(0+384),w
 13470  25B6  1903               	btfsc	3,2
 13471  25B7  2DC6               	goto	l962
 13472                           
 13473                           ;tactiles.c: 29: bottomTactile_pressed--;
 13474  25B8  3001               	movlw	1
 13475  25B9  02BD               	subwf	_bottomTactile_pressed^(0+384),f
 13476                           
 13477                           ;tactiles.c: 30: }
 13478                           ;tactiles.c: 31: } else if (bottomTactile_pressed < 25) {
 13479  25BA  2DC6               	goto	l962
 13480  25BB                     l8748:	
 13481  25BB  3019               	movlw	25
 13482  25BC  0023               	movlb	3	; select bank3
 13483  25BD  023D               	subwf	_bottomTactile_pressed^(0+384),w
 13484  25BE  1803               	skipnc
 13485  25BF  2DC6               	goto	l962
 13486                           
 13487                           ;tactiles.c: 32: bottomTactile_pressed++;
 13488  25C0  3001               	movlw	1
 13489  25C1  0021               	movlb	1	; select bank1
 13490  25C2  00B2               	movwf	??_read_bottom_tactile^(0+128)
 13491  25C3  0832               	movf	??_read_bottom_tactile^(0+128),w
 13492  25C4  0023               	movlb	3	; select bank3
 13493  25C5  07BD               	addwf	_bottomTactile_pressed^(0+384),f
 13494  25C6                     l962:	
 13495                           
 13496                           ;tactiles.c: 33: }
 13497                           ;tactiles.c: 36: if (bottomTactile_pressed == 0) {
 13498  25C6  083D               	movf	_bottomTactile_pressed^(0+384),w
 13499  25C7  1D03               	btfss	3,2
 13500  25C8  0008               	return
 13501                           
 13502                           ;tactiles.c: 37: bottom_push_state = bottom_push_state + 1;
 13503  25C9  0020               	movlb	0	; select bank0
 13504  25CA  084D               	movf	_bottom_push_state,w
 13505  25CB  3E01               	addlw	1
 13506  25CC  00CD               	movwf	_bottom_push_state
 13507  25CD  3000               	movlw	0
 13508  25CE  3D4E               	addwfc	_bottom_push_state+1,w
 13509  25CF  00CE               	movwf	_bottom_push_state+1
 13510                           
 13511                           ;tactiles.c: 38: if (bottom_push_state > 5) {
 13512  25D0  084E               	movf	_bottom_push_state+1,w
 13513  25D1  3A80               	xorlw	128
 13514  25D2  0021               	movlb	1	; select bank1
 13515  25D3  00B2               	movwf	??_read_bottom_tactile^(0+128)
 13516  25D4  3080               	movlw	128
 13517  25D5  0232               	subwf	??_read_bottom_tactile^(0+128),w
 13518  25D6  1D03               	skipz
 13519  25D7  2DDB               	goto	u9645
 13520  25D8  3006               	movlw	6
 13521  25D9  0020               	movlb	0	; select bank0
 13522  25DA  024D               	subwf	_bottom_push_state,w
 13523  25DB                     u9645:	
 13524  25DB  1C03               	skipc
 13525  25DC  2DE2               	goto	l8758
 13526                           
 13527                           ;tactiles.c: 39: bottom_push_state = 1;
 13528  25DD  3001               	movlw	1
 13529  25DE  0020               	movlb	0	; select bank0
 13530  25DF  00CD               	movwf	_bottom_push_state
 13531  25E0  3000               	movlw	0
 13532  25E1  00CE               	movwf	_bottom_push_state+1
 13533  25E2                     l8758:	
 13534                           
 13535                           ;tactiles.c: 40: }
 13536                           ;tactiles.c: 41: modulation_changed = 1;
 13537  25E2  0023               	movlb	3	; select bank3
 13538  25E3  01C2               	clrf	_modulation_changed^(0+384)
 13539  25E4  0AC2               	incf	_modulation_changed^(0+384),f
 13540                           
 13541                           ;tactiles.c: 42: set_leds_bottom(bottom_push_state);
 13542  25E5  0020               	movlb	0	; select bank0
 13543  25E6  084E               	movf	_bottom_push_state+1,w
 13544  25E7  0021               	movlb	1	; select bank1
 13545  25E8  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
 13546  25E9  0020               	movlb	0	; select bank0
 13547  25EA  084D               	movf	_bottom_push_state,w
 13548  25EB  0021               	movlb	1	; select bank1
 13549  25EC  00A0               	movwf	set_leds_bottom@x^(0+128)
 13550  25ED  31A2  22A0  31A5   	fcall	_set_leds_bottom
 13551  25F0                     l966:	
 13552                           ;tactiles.c: 44: while (PORTDbits.RD6 == 0) {
 13553                           
 13554  25F0  0020               	movlb	0	; select bank0
 13555  25F1  1F0F               	btfss	15,6	;volatile
 13556  25F2  2DF0               	goto	l966
 13557                           
 13558                           ;tactiles.c: 45: }
 13559                           ;tactiles.c: 46: wait_ms(20);
 13560  25F3  3014               	movlw	20
 13561  25F4  0021               	movlb	1	; select bank1
 13562  25F5  00AC               	movwf	wait_ms@timeSec^(0+128)
 13563  25F6  3000               	movlw	0
 13564  25F7  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 13565  25F8  31A1  21FC         	fcall	_wait_ms
 13566  25FA  0008               	return
 13567  25FB                     __end_of_read_bottom_tactile:	
 13568                           
 13569                           	psect	text34
 13570  1AE3                     __ptext34:	
 13571 ;; *************** function _map *****************
 13572 ;; Defined at:
 13573 ;;		line 177 in file "user.c"
 13574 ;; Parameters:    Size  Location     Type
 13575 ;;  x               3   62[BANK1 ] float 
 13576 ;;  in_min          3   65[BANK1 ] float 
 13577 ;;  in_max          3   68[BANK1 ] float 
 13578 ;;  out_min         3   71[BANK1 ] float 
 13579 ;;  out_max         3   74[BANK1 ] float 
 13580 ;; Auto vars:     Size  Location     Type
 13581 ;;		None
 13582 ;; Return value:  Size  Location     Type
 13583 ;;                  3   62[BANK1 ] float 
 13584 ;; Registers used:
 13585 ;;		wreg, status,2, status,0, pclath, cstack
 13586 ;; Tracked objects:
 13587 ;;		On entry : 0/0
 13588 ;;		On exit  : 0/0
 13589 ;;		Unchanged: 0/0
 13590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13591 ;;      Params:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13592 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13594 ;;      Totals:         0       0      18       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13595 ;;Total ram usage:       18 bytes
 13596 ;; Hardware stack levels used:    1
 13597 ;; Hardware stack levels required when called:    5
 13598 ;; This function calls:
 13599 ;;		___ftadd
 13600 ;;		___ftdiv
 13601 ;;		___ftmul
 13602 ;;		___ftneg
 13603 ;; This function is called by:
 13604 ;;		_main
 13605 ;; This function uses a non-reentrant model
 13606 ;;
 13607                           
 13608                           
 13609                           ;psect for function _map
 13610  1AE3                     _map:	
 13611                           
 13612                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 13613                           
 13614                           ;incstack = 0
 13615                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
 13616  1AE3  0021               	movlb	1	; select bank1
 13617  1AE4  0864               	movf	map@in_max^(0+128),w
 13618  1AE5  00C1               	movwf	___ftadd@f1^(0+128)
 13619  1AE6  0865               	movf	(map@in_max+1)^(0+128),w
 13620  1AE7  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 13621  1AE8  0866               	movf	(map@in_max+2)^(0+128),w
 13622  1AE9  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 13623  1AEA  0861               	movf	map@in_min^(0+128),w
 13624  1AEB  00BE               	movwf	___ftneg@f1^(0+128)
 13625  1AEC  0862               	movf	(map@in_min+1)^(0+128),w
 13626  1AED  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13627  1AEE  0863               	movf	(map@in_min+2)^(0+128),w
 13628  1AEF  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13629  1AF0  31AF  2763  319A   	fcall	___ftneg
 13630  1AF3  0021               	movlb	1	; select bank1
 13631  1AF4  083E               	movf	?___ftneg^(0+128),w
 13632  1AF5  00C4               	movwf	___ftadd@f2^(0+128)
 13633  1AF6  083F               	movf	(?___ftneg+1)^(0+128),w
 13634  1AF7  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 13635  1AF8  0840               	movf	(?___ftneg+2)^(0+128),w
 13636  1AF9  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 13637  1AFA  3191  2153  319A   	fcall	___ftadd
 13638  1AFD  0021               	movlb	1	; select bank1
 13639  1AFE  0841               	movf	?___ftadd^(0+128),w
 13640  1AFF  00CE               	movwf	___ftdiv@f2^(0+128)
 13641  1B00  0842               	movf	(?___ftadd+1)^(0+128),w
 13642  1B01  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 13643  1B02  0843               	movf	(?___ftadd+2)^(0+128),w
 13644  1B03  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 13645  1B04  086A               	movf	map@out_max^(0+128),w
 13646  1B05  00C1               	movwf	___ftadd@f1^(0+128)
 13647  1B06  086B               	movf	(map@out_max+1)^(0+128),w
 13648  1B07  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 13649  1B08  086C               	movf	(map@out_max+2)^(0+128),w
 13650  1B09  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 13651  1B0A  0867               	movf	map@out_min^(0+128),w
 13652  1B0B  00BE               	movwf	___ftneg@f1^(0+128)
 13653  1B0C  0868               	movf	(map@out_min+1)^(0+128),w
 13654  1B0D  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13655  1B0E  0869               	movf	(map@out_min+2)^(0+128),w
 13656  1B0F  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13657  1B10  31AF  2763  319A   	fcall	___ftneg
 13658  1B13  0021               	movlb	1	; select bank1
 13659  1B14  083E               	movf	?___ftneg^(0+128),w
 13660  1B15  00C4               	movwf	___ftadd@f2^(0+128)
 13661  1B16  083F               	movf	(?___ftneg+1)^(0+128),w
 13662  1B17  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 13663  1B18  0840               	movf	(?___ftneg+2)^(0+128),w
 13664  1B19  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 13665  1B1A  3191  2153  319A   	fcall	___ftadd
 13666  1B1D  0021               	movlb	1	; select bank1
 13667  1B1E  0841               	movf	?___ftadd^(0+128),w
 13668  1B1F  00AE               	movwf	___ftmul@f1^(0+128)
 13669  1B20  0842               	movf	(?___ftadd+1)^(0+128),w
 13670  1B21  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 13671  1B22  0843               	movf	(?___ftadd+2)^(0+128),w
 13672  1B23  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 13673  1B24  085E               	movf	map@x^(0+128),w
 13674  1B25  00C1               	movwf	___ftadd@f1^(0+128)
 13675  1B26  085F               	movf	(map@x+1)^(0+128),w
 13676  1B27  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 13677  1B28  0860               	movf	(map@x+2)^(0+128),w
 13678  1B29  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 13679  1B2A  0861               	movf	map@in_min^(0+128),w
 13680  1B2B  00BE               	movwf	___ftneg@f1^(0+128)
 13681  1B2C  0862               	movf	(map@in_min+1)^(0+128),w
 13682  1B2D  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13683  1B2E  0863               	movf	(map@in_min+2)^(0+128),w
 13684  1B2F  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13685  1B30  31AF  2763  319A   	fcall	___ftneg
 13686  1B33  0021               	movlb	1	; select bank1
 13687  1B34  083E               	movf	?___ftneg^(0+128),w
 13688  1B35  00C4               	movwf	___ftadd@f2^(0+128)
 13689  1B36  083F               	movf	(?___ftneg+1)^(0+128),w
 13690  1B37  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 13691  1B38  0840               	movf	(?___ftneg+2)^(0+128),w
 13692  1B39  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 13693  1B3A  3191  2153  319A   	fcall	___ftadd
 13694  1B3D  0021               	movlb	1	; select bank1
 13695  1B3E  0841               	movf	?___ftadd^(0+128),w
 13696  1B3F  00B1               	movwf	___ftmul@f2^(0+128)
 13697  1B40  0842               	movf	(?___ftadd+1)^(0+128),w
 13698  1B41  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 13699  1B42  0843               	movf	(?___ftadd+2)^(0+128),w
 13700  1B43  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 13701  1B44  319E  2691  319A   	fcall	___ftmul
 13702  1B47  0021               	movlb	1	; select bank1
 13703  1B48  082E               	movf	?___ftmul^(0+128),w
 13704  1B49  00D1               	movwf	___ftdiv@f1^(0+128)
 13705  1B4A  082F               	movf	(?___ftmul+1)^(0+128),w
 13706  1B4B  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 13707  1B4C  0830               	movf	(?___ftmul+2)^(0+128),w
 13708  1B4D  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 13709  1B4E  319D  253D  319A   	fcall	___ftdiv
 13710  1B51  0021               	movlb	1	; select bank1
 13711  1B52  084E               	movf	?___ftdiv^(0+128),w
 13712  1B53  00ED               	movwf	_map$2809^(0+128)
 13713  1B54  084F               	movf	(?___ftdiv+1)^(0+128),w
 13714  1B55  00EE               	movwf	(_map$2809+1)^(0+128)
 13715  1B56  0850               	movf	(?___ftdiv+2)^(0+128),w
 13716  1B57  00EF               	movwf	(_map$2809+2)^(0+128)
 13717                           
 13718                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 13719  1B58  0867               	movf	map@out_min^(0+128),w
 13720  1B59  00C1               	movwf	___ftadd@f1^(0+128)
 13721  1B5A  0868               	movf	(map@out_min+1)^(0+128),w
 13722  1B5B  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 13723  1B5C  0869               	movf	(map@out_min+2)^(0+128),w
 13724  1B5D  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 13725  1B5E  086D               	movf	_map$2809^(0+128),w
 13726  1B5F  00C4               	movwf	___ftadd@f2^(0+128)
 13727  1B60  086E               	movf	(_map$2809+1)^(0+128),w
 13728  1B61  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 13729  1B62  086F               	movf	(_map$2809+2)^(0+128),w
 13730  1B63  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 13731  1B64  3191  2153         	fcall	___ftadd
 13732  1B66  0021               	movlb	1	; select bank1
 13733  1B67  0841               	movf	?___ftadd^(0+128),w
 13734  1B68  00DE               	movwf	?_map^(0+128)
 13735  1B69  0842               	movf	(?___ftadd+1)^(0+128),w
 13736  1B6A  00DF               	movwf	(?_map+1)^(0+128)
 13737  1B6B  0843               	movf	(?___ftadd+2)^(0+128),w
 13738  1B6C  00E0               	movwf	(?_map+2)^(0+128)
 13739  1B6D  0008               	return
 13740  1B6E                     __end_of_map:	
 13741                           
 13742                           	psect	text35
 13743  07F1                     __ptext35:	
 13744 ;; *************** function _initSwitchBypass *****************
 13745 ;; Defined at:
 13746 ;;		line 29 in file "SwitchBypass.c"
 13747 ;; Parameters:    Size  Location     Type
 13748 ;;		None
 13749 ;; Auto vars:     Size  Location     Type
 13750 ;;  initState       2   22[BANK1 ] int 
 13751 ;; Return value:  Size  Location     Type
 13752 ;;                  1    wreg      void 
 13753 ;; Registers used:
 13754 ;;		wreg, status,2, status,0, pclath, cstack
 13755 ;; Tracked objects:
 13756 ;;		On entry : 0/0
 13757 ;;		On exit  : 0/0
 13758 ;;		Unchanged: 0/0
 13759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13761 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13763 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13764 ;;Total ram usage:        2 bytes
 13765 ;; Hardware stack levels used:    1
 13766 ;; Hardware stack levels required when called:    6
 13767 ;; This function calls:
 13768 ;;		_getSwitchBypassState
 13769 ;;		_setSwitchBypassState
 13770 ;; This function is called by:
 13771 ;;		_main
 13772 ;; This function uses a non-reentrant model
 13773 ;;
 13774                           
 13775                           
 13776                           ;psect for function _initSwitchBypass
 13777  07F1                     _initSwitchBypass:	
 13778                           
 13779                           ;SwitchBypass.c: 30: int initState = getSwitchBypassState();
 13780                           
 13781                           ;incstack = 0
 13782                           ; Regs used in _initSwitchBypass: [wreg+status,2+status,0+pclath+cstack]
 13783  07F1  3198  2000  3187   	fcall	_getSwitchBypassState
 13784  07F4  0021               	movlb	1	; select bank1
 13785  07F5  0821               	movf	(?_getSwitchBypassState+1)^(0+128),w
 13786  07F6  00B7               	movwf	(initSwitchBypass@initState+1)^(0+128)
 13787  07F7  0820               	movf	?_getSwitchBypassState^(0+128),w
 13788  07F8  00B6               	movwf	initSwitchBypass@initState^(0+128)
 13789                           
 13790                           ;SwitchBypass.c: 31: setSwitchBypassState(initState);
 13791  07F9  0837               	movf	(initSwitchBypass@initState+1)^(0+128),w
 13792  07FA  00B3               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
 13793  07FB  0836               	movf	initSwitchBypass@initState^(0+128),w
 13794  07FC  00B2               	movwf	setSwitchBypassState@f_state^(0+128)
 13795  07FD  31A5  2567         	fcall	_setSwitchBypassState
 13796  07FF  0008               	return
 13797  0800                     __end_of_initSwitchBypass:	
 13798                           
 13799                           	psect	text36
 13800  2567                     __ptext36:	
 13801 ;; *************** function _setSwitchBypassState *****************
 13802 ;; Defined at:
 13803 ;;		line 131 in file "SwitchBypass.c"
 13804 ;; Parameters:    Size  Location     Type
 13805 ;;  f_state         2   18[BANK1 ] int 
 13806 ;; Auto vars:     Size  Location     Type
 13807 ;;		None
 13808 ;; Return value:  Size  Location     Type
 13809 ;;                  1    wreg      void 
 13810 ;; Registers used:
 13811 ;;		wreg, status,2, status,0, pclath, cstack
 13812 ;; Tracked objects:
 13813 ;;		On entry : 0/0
 13814 ;;		On exit  : 0/0
 13815 ;;		Unchanged: 0/0
 13816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13817 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13819 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13820 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13821 ;;Total ram usage:        4 bytes
 13822 ;; Hardware stack levels used:    1
 13823 ;; Hardware stack levels required when called:    5
 13824 ;; This function calls:
 13825 ;;		_updateSwitchBypassState
 13826 ;;		_wait_ms
 13827 ;; This function is called by:
 13828 ;;		_initSwitchBypass
 13829 ;;		_updateSwitchBypass
 13830 ;; This function uses a non-reentrant model
 13831 ;;
 13832                           
 13833                           
 13834                           ;psect for function _setSwitchBypassState
 13835  2567                     _setSwitchBypassState:	
 13836                           
 13837                           ;SwitchBypass.c: 132: if (switchBypass_state == f_state) {return;}
 13838                           
 13839                           ;incstack = 0
 13840                           ; Regs used in _setSwitchBypassState: [wreg+status,2+status,0+pclath+cstack]
 13841  2567  0020               	movlb	0	; select bank0
 13842  2568  0857               	movf	_switchBypass_state,w
 13843  2569  0021               	movlb	1	; select bank1
 13844  256A  00B4               	movwf	??_setSwitchBypassState^(0+128)
 13845  256B  01B5               	clrf	(??_setSwitchBypassState^(0+128)+1)
 13846  256C  0833               	movf	(setSwitchBypassState@f_state+1)^(0+128),w
 13847  256D  0635               	xorwf	(??_setSwitchBypassState+1)^(0+128),w
 13848  256E  1D03               	skipz
 13849  256F  2D72               	goto	u8545
 13850  2570  0832               	movf	setSwitchBypassState@f_state^(0+128),w
 13851  2571  0634               	xorwf	??_setSwitchBypassState^(0+128),w
 13852  2572                     u8545:	
 13853  2572  1903               	btfsc	3,2
 13854  2573  0008               	return
 13855                           
 13856                           ;SwitchBypass.c: 133: switchBypass_state = f_state;
 13857  2574  0832               	movf	setSwitchBypassState@f_state^(0+128),w
 13858  2575  00B4               	movwf	??_setSwitchBypassState^(0+128)
 13859  2576  0834               	movf	??_setSwitchBypassState^(0+128),w
 13860  2577  0020               	movlb	0	; select bank0
 13861  2578  00D7               	movwf	_switchBypass_state
 13862                           
 13863                           ;SwitchBypass.c: 134: LATBbits.LATB2 = f_state;
 13864  2579  0021               	movlb	1	; select bank1
 13865  257A  0C32               	rrf	setSwitchBypassState@f_state^(0+128),w
 13866  257B  0022               	movlb	2	; select bank2
 13867  257C  1C03               	skipc
 13868  257D  110D               	bcf	13,2	;volatile
 13869  257E  1803               	skipnc
 13870  257F  150D               	bsf	13,2	;volatile
 13871                           
 13872                           ;SwitchBypass.c: 135: LATBbits.LATB3 = 0;
 13873  2580  118D               	bcf	13,3	;volatile
 13874                           
 13875                           ;SwitchBypass.c: 136: LATGbits.LATG2 = f_state;
 13876  2581  0021               	movlb	1	; select bank1
 13877  2582  0C32               	rrf	setSwitchBypassState@f_state^(0+128),w
 13878  2583  0027               	movlb	7	; select bank7
 13879  2584  1C03               	skipc
 13880  2585  110D               	bcf	13,2	;volatile
 13881  2586  1803               	skipnc
 13882  2587  150D               	bsf	13,2	;volatile
 13883                           
 13884                           ;SwitchBypass.c: 137: LATGbits.LATG1 = !f_state;
 13885  2588  0021               	movlb	1	; select bank1
 13886  2589  0832               	movf	setSwitchBypassState@f_state^(0+128),w
 13887  258A  0433               	iorwf	(setSwitchBypassState@f_state+1)^(0+128),w
 13888  258B  1D03               	btfss	3,2
 13889  258C  2D90               	goto	u8550
 13890  258D  0027               	movlb	7	; select bank7
 13891  258E  148D               	bsf	13,1	;volatile
 13892  258F  2D92               	goto	l8182
 13893  2590                     u8550:	
 13894  2590  0027               	movlb	7	; select bank7
 13895  2591  108D               	bcf	13,1	;volatile
 13896  2592                     l8182:	
 13897                           
 13898                           ;SwitchBypass.c: 139: wait_ms(20);
 13899  2592  3014               	movlw	20
 13900  2593  0021               	movlb	1	; select bank1
 13901  2594  00AC               	movwf	wait_ms@timeSec^(0+128)
 13902  2595  3000               	movlw	0
 13903  2596  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 13904  2597  31A1  21FC  31A5   	fcall	_wait_ms
 13905                           
 13906                           ;SwitchBypass.c: 141: LATGbits.LATG2 = 0;
 13907  259A  0027               	movlb	7	; select bank7
 13908  259B  110D               	bcf	13,2	;volatile
 13909                           
 13910                           ;SwitchBypass.c: 142: LATGbits.LATG1 = 0;
 13911  259C  108D               	bcf	13,1	;volatile
 13912                           
 13913                           ;SwitchBypass.c: 144: updateSwitchBypassState(switchBypass_state);
 13914  259D  0020               	movlb	0	; select bank0
 13915  259E  0857               	movf	_switchBypass_state,w
 13916  259F  0021               	movlb	1	; select bank1
 13917  25A0  00B4               	movwf	??_setSwitchBypassState^(0+128)
 13918  25A1  01B5               	clrf	(??_setSwitchBypassState^(0+128)+1)
 13919  25A2  0834               	movf	??_setSwitchBypassState^(0+128),w
 13920  25A3  00A0               	movwf	updateSwitchBypassState@state^(0+128)
 13921  25A4  0835               	movf	(??_setSwitchBypassState+1)^(0+128),w
 13922  25A5  00A1               	movwf	(updateSwitchBypassState@state+1)^(0+128)
 13923  25A6  3188  2001  31A5   	fcall	_updateSwitchBypassState
 13924                           
 13925                           ;SwitchBypass.c: 145: wait_ms(20);
 13926  25A9  3014               	movlw	20
 13927  25AA  0021               	movlb	1	; select bank1
 13928  25AB  00AC               	movwf	wait_ms@timeSec^(0+128)
 13929  25AC  3000               	movlw	0
 13930  25AD  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 13931  25AE  31A1  21FC         	fcall	_wait_ms
 13932  25B0  0008               	return
 13933  25B1                     __end_of_setSwitchBypassState:	
 13934                           
 13935                           	psect	text37
 13936  21FC                     __ptext37:	
 13937 ;; *************** function _wait_ms *****************
 13938 ;; Defined at:
 13939 ;;		line 23 in file "system.c"
 13940 ;; Parameters:    Size  Location     Type
 13941 ;;  timeSec         2   12[BANK1 ] unsigned int 
 13942 ;; Auto vars:     Size  Location     Type
 13943 ;;  timemsl         4   14[BANK1 ] long 
 13944 ;; Return value:  Size  Location     Type
 13945 ;;                  1    wreg      void 
 13946 ;; Registers used:
 13947 ;;		wreg, status,2, status,0, pclath, cstack
 13948 ;; Tracked objects:
 13949 ;;		On entry : 0/0
 13950 ;;		On exit  : 0/0
 13951 ;;		Unchanged: 0/0
 13952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13953 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13954 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13956 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13957 ;;Total ram usage:        6 bytes
 13958 ;; Hardware stack levels used:    1
 13959 ;; Hardware stack levels required when called:    4
 13960 ;; This function calls:
 13961 ;;		___lmul
 13962 ;; This function is called by:
 13963 ;;		_ring_tactiles
 13964 ;;		_solidring_tactiles
 13965 ;;		_read_bottom_tactile
 13966 ;;		_read_top_tactile
 13967 ;;		_setSwitchBypassState
 13968 ;;		_setDoublePressState
 13969 ;;		_showError_Alternating
 13970 ;;		_show_error
 13971 ;;		_show_cancel
 13972 ;;		_star_tactiles
 13973 ;;		_initExpModeState
 13974 ;; This function uses a non-reentrant model
 13975 ;;
 13976                           
 13977                           
 13978                           ;psect for function _wait_ms
 13979  21FC                     _wait_ms:	
 13980                           
 13981                           ;system.c: 25: long timemsl = 0;
 13982                           
 13983                           ;incstack = 0
 13984                           ; Regs used in _wait_ms: [wreg+status,2+status,0+pclath+cstack]
 13985  21FC  3000               	movlw	0
 13986  21FD  0021               	movlb	1	; select bank1
 13987  21FE  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 13988  21FF  3000               	movlw	0
 13989  2200  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 13990  2201  3000               	movlw	0
 13991  2202  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 13992  2203  3000               	movlw	0
 13993  2204  00AE               	movwf	wait_ms@timemsl^(0+128)
 13994                           
 13995                           ;system.c: 26: timemsl = timeSec * 1000l;
 13996  2205  082C               	movf	wait_ms@timeSec^(0+128),w
 13997  2206  00A0               	movwf	___lmul@multiplier^(0+128)
 13998  2207  082D               	movf	(wait_ms@timeSec+1)^(0+128),w
 13999  2208  00A1               	movwf	(___lmul@multiplier^(0+128)+1)
 14000  2209  01A2               	clrf	(___lmul@multiplier^(0+128)+2)
 14001  220A  01A3               	clrf	(___lmul@multiplier^(0+128)+3)
 14002  220B  3000               	movlw	0
 14003  220C  00A7               	movwf	(___lmul@multiplicand+3)^(0+128)
 14004  220D  3000               	movlw	0
 14005  220E  00A6               	movwf	(___lmul@multiplicand+2)^(0+128)
 14006  220F  3003               	movlw	3
 14007  2210  00A5               	movwf	(___lmul@multiplicand+1)^(0+128)
 14008  2211  30E8               	movlw	232
 14009  2212  00A4               	movwf	___lmul@multiplicand^(0+128)
 14010  2213  31A1  21CC  31A1   	fcall	___lmul
 14011  2216  0021               	movlb	1	; select bank1
 14012  2217  0823               	movf	(?___lmul+3)^(0+128),w
 14013  2218  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 14014  2219  0822               	movf	(?___lmul+2)^(0+128),w
 14015  221A  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 14016  221B  0821               	movf	(?___lmul+1)^(0+128),w
 14017  221C  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 14018  221D  0820               	movf	?___lmul^(0+128),w
 14019  221E  00AE               	movwf	wait_ms@timemsl^(0+128)
 14020  221F                     l382:	
 14021                           ;system.c: 27: for( ; timemsl; timemsl--);
 14022                           
 14023  221F  0831               	movf	(wait_ms@timemsl+3)^(0+128),w
 14024  2220  0430               	iorwf	(wait_ms@timemsl+2)^(0+128),w
 14025  2221  042F               	iorwf	(wait_ms@timemsl+1)^(0+128),w
 14026  2222  042E               	iorwf	wait_ms@timemsl^(0+128),w
 14027  2223  1903               	btfsc	3,2
 14028  2224  0008               	return
 14029  2225  30FF               	movlw	255
 14030  2226  07AE               	addwf	wait_ms@timemsl^(0+128),f
 14031  2227  30FF               	movlw	255
 14032  2228  3DAF               	addwfc	(wait_ms@timemsl+1)^(0+128),f
 14033  2229  30FF               	movlw	255
 14034  222A  3DB0               	addwfc	(wait_ms@timemsl+2)^(0+128),f
 14035  222B  30FF               	movlw	255
 14036  222C  3DB1               	addwfc	(wait_ms@timemsl+3)^(0+128),f
 14037  222D  2A1F               	goto	l382
 14038  222E                     __end_of_wait_ms:	
 14039                           
 14040                           	psect	text38
 14041  21CC                     __ptext38:	
 14042 ;; *************** function ___lmul *****************
 14043 ;; Defined at:
 14044 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 14045 ;; Parameters:    Size  Location     Type
 14046 ;;  multiplier      4    0[BANK1 ] unsigned long 
 14047 ;;  multiplicand    4    4[BANK1 ] unsigned long 
 14048 ;; Auto vars:     Size  Location     Type
 14049 ;;  product         4    8[BANK1 ] unsigned long 
 14050 ;; Return value:  Size  Location     Type
 14051 ;;                  4    0[BANK1 ] unsigned long 
 14052 ;; Registers used:
 14053 ;;		wreg, status,2, status,0
 14054 ;; Tracked objects:
 14055 ;;		On entry : 0/0
 14056 ;;		On exit  : 0/0
 14057 ;;		Unchanged: 0/0
 14058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14059 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14060 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14062 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14063 ;;Total ram usage:       12 bytes
 14064 ;; Hardware stack levels used:    1
 14065 ;; Hardware stack levels required when called:    3
 14066 ;; This function calls:
 14067 ;;		Nothing
 14068 ;; This function is called by:
 14069 ;;		_wait_ms
 14070 ;; This function uses a non-reentrant model
 14071 ;;
 14072                           
 14073                           
 14074                           ;psect for function ___lmul
 14075  21CC                     ___lmul:	
 14076                           
 14077                           ;incstack = 0
 14078                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 14079  21CC  3000               	movlw	0
 14080  21CD  0021               	movlb	1	; select bank1
 14081  21CE  00AB               	movwf	(___lmul@product+3)^(0+128)
 14082  21CF  3000               	movlw	0
 14083  21D0  00AA               	movwf	(___lmul@product+2)^(0+128)
 14084  21D1  3000               	movlw	0
 14085  21D2  00A9               	movwf	(___lmul@product+1)^(0+128)
 14086  21D3  3000               	movlw	0
 14087  21D4  00A8               	movwf	___lmul@product^(0+128)
 14088  21D5                     l7396:	
 14089  21D5  1C20               	btfss	___lmul@multiplier^(0+128),0
 14090  21D6  29DF               	goto	l7400
 14091  21D7  0824               	movf	___lmul@multiplicand^(0+128),w
 14092  21D8  07A8               	addwf	___lmul@product^(0+128),f
 14093  21D9  0825               	movf	(___lmul@multiplicand+1)^(0+128),w
 14094  21DA  3DA9               	addwfc	(___lmul@product+1)^(0+128),f
 14095  21DB  0826               	movf	(___lmul@multiplicand+2)^(0+128),w
 14096  21DC  3DAA               	addwfc	(___lmul@product+2)^(0+128),f
 14097  21DD  0827               	movf	(___lmul@multiplicand+3)^(0+128),w
 14098  21DE  3DAB               	addwfc	(___lmul@product+3)^(0+128),f
 14099  21DF                     l7400:	
 14100  21DF  3001               	movlw	1
 14101  21E0                     u7355:	
 14102  21E0  35A4               	lslf	___lmul@multiplicand^(0+128),f
 14103  21E1  0DA5               	rlf	(___lmul@multiplicand+1)^(0+128),f
 14104  21E2  0DA6               	rlf	(___lmul@multiplicand+2)^(0+128),f
 14105  21E3  0DA7               	rlf	(___lmul@multiplicand+3)^(0+128),f
 14106  21E4  0B89               	decfsz	9,f
 14107  21E5  29E0               	goto	u7355
 14108  21E6  3001               	movlw	1
 14109  21E7                     u7365:	
 14110  21E7  36A3               	lsrf	(___lmul@multiplier+3)^(0+128),f
 14111  21E8  0CA2               	rrf	(___lmul@multiplier+2)^(0+128),f
 14112  21E9  0CA1               	rrf	(___lmul@multiplier+1)^(0+128),f
 14113  21EA  0CA0               	rrf	___lmul@multiplier^(0+128),f
 14114  21EB  0B89               	decfsz	9,f
 14115  21EC  29E7               	goto	u7365
 14116  21ED  0823               	movf	(___lmul@multiplier+3)^(0+128),w
 14117  21EE  0422               	iorwf	(___lmul@multiplier+2)^(0+128),w
 14118  21EF  0421               	iorwf	(___lmul@multiplier+1)^(0+128),w
 14119  21F0  0420               	iorwf	___lmul@multiplier^(0+128),w
 14120  21F1  1D03               	skipz
 14121  21F2  29D5               	goto	l7396
 14122  21F3  082B               	movf	(___lmul@product+3)^(0+128),w
 14123  21F4  00A3               	movwf	(?___lmul+3)^(0+128)
 14124  21F5  082A               	movf	(___lmul@product+2)^(0+128),w
 14125  21F6  00A2               	movwf	(?___lmul+2)^(0+128)
 14126  21F7  0829               	movf	(___lmul@product+1)^(0+128),w
 14127  21F8  00A1               	movwf	(?___lmul+1)^(0+128)
 14128  21F9  0828               	movf	___lmul@product^(0+128),w
 14129  21FA  00A0               	movwf	?___lmul^(0+128)
 14130  21FB  0008               	return
 14131  21FC                     __end_of___lmul:	
 14132                           
 14133                           	psect	text39
 14134  0801                     __ptext39:	
 14135 ;; *************** function _updateSwitchBypassState *****************
 14136 ;; Defined at:
 14137 ;;		line 96 in file "state_manager.c"
 14138 ;; Parameters:    Size  Location     Type
 14139 ;;  state           2    0[BANK1 ] int 
 14140 ;; Auto vars:     Size  Location     Type
 14141 ;;		None
 14142 ;; Return value:  Size  Location     Type
 14143 ;;                  1    wreg      void 
 14144 ;; Registers used:
 14145 ;;		None
 14146 ;; Tracked objects:
 14147 ;;		On entry : 0/0
 14148 ;;		On exit  : 0/0
 14149 ;;		Unchanged: 0/0
 14150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14151 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14154 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14155 ;;Total ram usage:        2 bytes
 14156 ;; Hardware stack levels used:    1
 14157 ;; Hardware stack levels required when called:    3
 14158 ;; This function calls:
 14159 ;;		Nothing
 14160 ;; This function is called by:
 14161 ;;		_setSwitchBypassState
 14162 ;; This function uses a non-reentrant model
 14163 ;;
 14164                           
 14165                           
 14166                           ;psect for function _updateSwitchBypassState
 14167  0801                     _updateSwitchBypassState:	
 14168                           
 14169                           ;incstack = 0
 14170                           ; Regs used in _updateSwitchBypassState: []
 14171  0801  0008               	return
 14172  0802                     __end_of_updateSwitchBypassState:	
 14173                           
 14174                           	psect	text40
 14175  1800                     __ptext40:	
 14176 ;; *************** function _getSwitchBypassState *****************
 14177 ;; Defined at:
 14178 ;;		line 103 in file "state_manager.c"
 14179 ;; Parameters:    Size  Location     Type
 14180 ;;		None
 14181 ;; Auto vars:     Size  Location     Type
 14182 ;;		None
 14183 ;; Return value:  Size  Location     Type
 14184 ;;                  2    0[BANK1 ] int 
 14185 ;; Registers used:
 14186 ;;		status,2
 14187 ;; Tracked objects:
 14188 ;;		On entry : 0/0
 14189 ;;		On exit  : 0/0
 14190 ;;		Unchanged: 0/0
 14191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14192 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14195 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14196 ;;Total ram usage:        2 bytes
 14197 ;; Hardware stack levels used:    1
 14198 ;; Hardware stack levels required when called:    3
 14199 ;; This function calls:
 14200 ;;		Nothing
 14201 ;; This function is called by:
 14202 ;;		_initSwitchBypass
 14203 ;; This function uses a non-reentrant model
 14204 ;;
 14205                           
 14206                           
 14207                           ;psect for function _getSwitchBypassState
 14208  1800                     _getSwitchBypassState:	
 14209                           
 14210                           ;state_manager.c: 108: return 0;
 14211                           
 14212                           ;incstack = 0
 14213                           ; Regs used in _getSwitchBypassState: [status,2]
 14214  1800  0021               	movlb	1	; select bank1
 14215  1801  01A0               	clrf	?_getSwitchBypassState^(0+128)
 14216  1802  01A1               	clrf	(?_getSwitchBypassState+1)^(0+128)
 14217  1803  0008               	return
 14218  1804                     __end_of_getSwitchBypassState:	
 14219                           
 14220                           	psect	text41
 14221  1A5C                     __ptext41:	
 14222 ;; *************** function _calcSinArray *****************
 14223 ;; Defined at:
 14224 ;;		line 15 in file "modulation.c"
 14225 ;; Parameters:    Size  Location     Type
 14226 ;;		None
 14227 ;; Auto vars:     Size  Location     Type
 14228 ;;  tmpVal          3   56[BANK2 ] int 
 14229 ;;  iAngle          1   59[BANK2 ] unsigned char 
 14230 ;;  x               1   55[BANK2 ] unsigned char 
 14231 ;; Return value:  Size  Location     Type
 14232 ;;                  1    wreg      void 
 14233 ;; Registers used:
 14234 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14235 ;; Tracked objects:
 14236 ;;		On entry : 0/0
 14237 ;;		On exit  : 0/0
 14238 ;;		Unchanged: 0/0
 14239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14241 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14242 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14243 ;;      Totals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14244 ;;Total ram usage:        9 bytes
 14245 ;; Hardware stack levels used:    1
 14246 ;; Hardware stack levels required when called:    7
 14247 ;; This function calls:
 14248 ;;		___awtoft
 14249 ;;		___ftdiv
 14250 ;;		___ftmul
 14251 ;;		___wmul
 14252 ;;		_sin
 14253 ;; This function is called by:
 14254 ;;		_main
 14255 ;; This function uses a non-reentrant model
 14256 ;;
 14257                           
 14258                           
 14259                           ;psect for function _calcSinArray
 14260  1A5C                     _calcSinArray:	
 14261                           
 14262                           ;modulation.c: 16: for (char iAngle = 0; iAngle < 120; iAngle++) {
 14263                           
 14264                           ;incstack = 0
 14265                           ; Regs used in _calcSinArray: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14266  1A5C  0022               	movlb	2	; select bank2
 14267  1A5D  01DB               	clrf	calcSinArray@iAngle^(0+256)
 14268  1A5E  3078               	movlw	120
 14269  1A5F  025B               	subwf	calcSinArray@iAngle^(0+256),w
 14270  1A60  1803               	btfsc	3,0
 14271  1A61  2AE0               	goto	l1888
 14272  1A62                     l8348:	
 14273                           
 14274                           ;modulation.c: 17: double tmpVal = 3 * iAngle * 3.14159265358979323846/180.0;
 14275  1A62  3000               	movlw	0
 14276  1A63  0021               	movlb	1	; select bank1
 14277  1A64  00CE               	movwf	___ftdiv@f2^(0+128)
 14278  1A65  3034               	movlw	52
 14279  1A66  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 14280  1A67  3043               	movlw	67
 14281  1A68  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 14282  1A69  3010               	movlw	16
 14283  1A6A  00AE               	movwf	___ftmul@f1^(0+128)
 14284  1A6B  3049               	movlw	73
 14285  1A6C  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 14286  1A6D  3040               	movlw	64
 14287  1A6E  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 14288  1A6F  0022               	movlb	2	; select bank2
 14289  1A70  085B               	movf	calcSinArray@iAngle^(0+256),w
 14290  1A71  00D3               	movwf	??_calcSinArray^(0+256)
 14291  1A72  01D4               	clrf	(??_calcSinArray^(0+256)+1)
 14292  1A73  0853               	movf	??_calcSinArray^(0+256),w
 14293  1A74  00AE               	movwf	___wmul@multiplier^(0+256)
 14294  1A75  0854               	movf	(??_calcSinArray+1)^(0+256),w
 14295  1A76  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 14296  1A77  3003               	movlw	3
 14297  1A78  00B0               	movwf	___wmul@multiplicand^(0+256)
 14298  1A79  3000               	movlw	0
 14299  1A7A  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 14300  1A7B  31A0  2030  319A   	fcall	___wmul
 14301  1A7E  0022               	movlb	2	; select bank2
 14302  1A7F  082F               	movf	(?___wmul+1)^(0+256),w
 14303  1A80  0021               	movlb	1	; select bank1
 14304  1A81  00A9               	movwf	(___awtoft@c+1)^(0+128)
 14305  1A82  0022               	movlb	2	; select bank2
 14306  1A83  082E               	movf	?___wmul^(0+256),w
 14307  1A84  0021               	movlb	1	; select bank1
 14308  1A85  00A8               	movwf	___awtoft@c^(0+128)
 14309  1A86  31A0  20A9  319A   	fcall	___awtoft
 14310  1A89  0021               	movlb	1	; select bank1
 14311  1A8A  0828               	movf	?___awtoft^(0+128),w
 14312  1A8B  00B1               	movwf	___ftmul@f2^(0+128)
 14313  1A8C  0829               	movf	(?___awtoft+1)^(0+128),w
 14314  1A8D  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 14315  1A8E  082A               	movf	(?___awtoft+2)^(0+128),w
 14316  1A8F  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 14317  1A90  319E  2691  319A   	fcall	___ftmul
 14318  1A93  0021               	movlb	1	; select bank1
 14319  1A94  082E               	movf	?___ftmul^(0+128),w
 14320  1A95  00D1               	movwf	___ftdiv@f1^(0+128)
 14321  1A96  082F               	movf	(?___ftmul+1)^(0+128),w
 14322  1A97  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 14323  1A98  0830               	movf	(?___ftmul+2)^(0+128),w
 14324  1A99  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 14325  1A9A  319D  253D  319A   	fcall	___ftdiv
 14326  1A9D  0021               	movlb	1	; select bank1
 14327  1A9E  084E               	movf	?___ftdiv^(0+128),w
 14328  1A9F  0022               	movlb	2	; select bank2
 14329  1AA0  00D8               	movwf	calcSinArray@tmpVal^(0+256)
 14330  1AA1  0021               	movlb	1	; select bank1
 14331  1AA2  084F               	movf	(?___ftdiv+1)^(0+128),w
 14332  1AA3  0022               	movlb	2	; select bank2
 14333  1AA4  00D9               	movwf	(calcSinArray@tmpVal+1)^(0+256)
 14334  1AA5  0021               	movlb	1	; select bank1
 14335  1AA6  0850               	movf	(?___ftdiv+2)^(0+128),w
 14336  1AA7  0022               	movlb	2	; select bank2
 14337  1AA8  00DA               	movwf	(calcSinArray@tmpVal+2)^(0+256)
 14338                           
 14339                           ;modulation.c: 18: tmpVal = sin(tmpVal);
 14340  1AA9  0858               	movf	calcSinArray@tmpVal^(0+256),w
 14341  1AAA  00C5               	movwf	sin@f^(0+256)
 14342  1AAB  0859               	movf	(calcSinArray@tmpVal+1)^(0+256),w
 14343  1AAC  00C6               	movwf	(sin@f+1)^(0+256)
 14344  1AAD  085A               	movf	(calcSinArray@tmpVal+2)^(0+256),w
 14345  1AAE  00C7               	movwf	(sin@f+2)^(0+256)
 14346  1AAF  3188  2067  319A   	fcall	_sin
 14347  1AB2  0022               	movlb	2	; select bank2
 14348  1AB3  0845               	movf	?_sin^(0+256),w
 14349  1AB4  00D8               	movwf	calcSinArray@tmpVal^(0+256)
 14350  1AB5  0846               	movf	(?_sin+1)^(0+256),w
 14351  1AB6  00D9               	movwf	(calcSinArray@tmpVal+1)^(0+256)
 14352  1AB7  0847               	movf	(?_sin+2)^(0+256),w
 14353  1AB8  00DA               	movwf	(calcSinArray@tmpVal+2)^(0+256)
 14354                           
 14355                           ;modulation.c: 19: sinArray[iAngle] = tmpVal;
 14356  1AB9  085B               	movf	calcSinArray@iAngle^(0+256),w
 14357  1ABA  00D3               	movwf	??_calcSinArray^(0+256)
 14358  1ABB  01D4               	clrf	(??_calcSinArray^(0+256)+1)
 14359  1ABC  0853               	movf	??_calcSinArray^(0+256),w
 14360  1ABD  00AE               	movwf	___wmul@multiplier^(0+256)
 14361  1ABE  0854               	movf	(??_calcSinArray+1)^(0+256),w
 14362  1ABF  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 14363  1AC0  3003               	movlw	3
 14364  1AC1  00B0               	movwf	___wmul@multiplicand^(0+256)
 14365  1AC2  3000               	movlw	0
 14366  1AC3  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 14367  1AC4  31A0  2030  319A   	fcall	___wmul
 14368  1AC7  3082               	movlw	130
 14369  1AC8  0022               	movlb	2	; select bank2
 14370  1AC9  00D5               	movwf	(??_calcSinArray+2)^(0+256)
 14371  1ACA  3024               	movlw	36
 14372  1ACB  00D6               	movwf	((??_calcSinArray+2)^(0+256)+1)
 14373  1ACC  082E               	movf	?___wmul^(0+256),w
 14374  1ACD  0755               	addwf	(??_calcSinArray+2)^(0+256),w
 14375  1ACE  0086               	movwf	6
 14376  1ACF  082F               	movf	(?___wmul+1)^(0+256),w
 14377  1AD0  3D56               	addwfc	(??_calcSinArray+3)^(0+256),w
 14378  1AD1  0087               	movwf	7
 14379  1AD2  0858               	movf	calcSinArray@tmpVal^(0+256),w
 14380  1AD3  3FC0               	movwi [0]fsr1
 14381  1AD4  0859               	movf	(calcSinArray@tmpVal+1)^(0+256),w
 14382  1AD5  3FC1               	movwi [1]fsr1
 14383  1AD6  085A               	movf	(calcSinArray@tmpVal+2)^(0+256),w
 14384  1AD7  3FC2               	movwi [2]fsr1
 14385  1AD8  3001               	movlw	1
 14386  1AD9  00D3               	movwf	??_calcSinArray^(0+256)
 14387  1ADA  0853               	movf	??_calcSinArray^(0+256),w
 14388  1ADB  07DB               	addwf	calcSinArray@iAngle^(0+256),f
 14389  1ADC  3078               	movlw	120
 14390  1ADD  025B               	subwf	calcSinArray@iAngle^(0+256),w
 14391  1ADE  1C03               	skipc
 14392  1ADF  2A62               	goto	l8348
 14393  1AE0                     l1888:	
 14394                           
 14395                           ;modulation.c: 20: }
 14396                           ;modulation.c: 21: char x = 1;
 14397  1AE0  01D7               	clrf	calcSinArray@x^(0+256)
 14398  1AE1  0AD7               	incf	calcSinArray@x^(0+256),f
 14399  1AE2  0008               	return
 14400  1AE3                     __end_of_calcSinArray:	
 14401                           
 14402                           	psect	text42
 14403  0867                     __ptext42:	
 14404 ;; *************** function _sin *****************
 14405 ;; Defined at:
 14406 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\sin.c"
 14407 ;; Parameters:    Size  Location     Type
 14408 ;;  f               3   37[BANK2 ] void 
 14409 ;; Auto vars:     Size  Location     Type
 14410 ;;  x2              3   47[BANK2 ] void 
 14411 ;;  y               3   41[BANK2 ] void 
 14412 ;;  sgn             1   50[BANK2 ] unsigned char 
 14413 ;; Return value:  Size  Location     Type
 14414 ;;                  3   37[BANK2 ] unsigned char 
 14415 ;; Registers used:
 14416 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14417 ;; Tracked objects:
 14418 ;;		On entry : 0/0
 14419 ;;		On exit  : 0/0
 14420 ;;		Unchanged: 0/0
 14421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14422 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14423 ;;      Locals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14424 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14425 ;;      Totals:         0       0       0      14       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14426 ;;Total ram usage:       14 bytes
 14427 ;; Hardware stack levels used:    1
 14428 ;; Hardware stack levels required when called:    6
 14429 ;; This function calls:
 14430 ;;		___ftadd
 14431 ;;		___ftdiv
 14432 ;;		___ftge
 14433 ;;		___ftmul
 14434 ;;		___ftneg
 14435 ;;		___ftsub
 14436 ;;		_eval_poly
 14437 ;;		_floor
 14438 ;; This function is called by:
 14439 ;;		_calcSinArray
 14440 ;; This function uses a non-reentrant model
 14441 ;;
 14442                           
 14443                           
 14444                           ;psect for function _sin
 14445  0867                     _sin:	
 14446                           
 14447                           ;incstack = 0
 14448                           ; Regs used in _sin: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14449  0867  0022               	movlb	2	; select bank2
 14450  0868  01D2               	clrf	sin@sgn^(0+256)
 14451  0869  0845               	movf	sin@f^(0+256),w
 14452  086A  0021               	movlb	1	; select bank1
 14453  086B  00A0               	movwf	___ftge@ff1^(0+128)
 14454  086C  0022               	movlb	2	; select bank2
 14455  086D  0846               	movf	(sin@f+1)^(0+256),w
 14456  086E  0021               	movlb	1	; select bank1
 14457  086F  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 14458  0870  0022               	movlb	2	; select bank2
 14459  0871  0847               	movf	(sin@f+2)^(0+256),w
 14460  0872  0021               	movlb	1	; select bank1
 14461  0873  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 14462  0874  3000               	movlw	0
 14463  0875  00A3               	movwf	___ftge@ff2^(0+128)
 14464  0876  3000               	movlw	0
 14465  0877  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 14466  0878  3000               	movlw	0
 14467  0879  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 14468  087A  31A2  22DB  3188   	fcall	___ftge
 14469  087D  1803               	btfsc	3,0
 14470  087E  289C               	goto	l8246
 14471  087F  0022               	movlb	2	; select bank2
 14472  0880  0845               	movf	sin@f^(0+256),w
 14473  0881  0021               	movlb	1	; select bank1
 14474  0882  00BE               	movwf	___ftneg@f1^(0+128)
 14475  0883  0022               	movlb	2	; select bank2
 14476  0884  0846               	movf	(sin@f+1)^(0+256),w
 14477  0885  0021               	movlb	1	; select bank1
 14478  0886  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 14479  0887  0022               	movlb	2	; select bank2
 14480  0888  0847               	movf	(sin@f+2)^(0+256),w
 14481  0889  0021               	movlb	1	; select bank1
 14482  088A  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 14483  088B  31AF  2763  3188   	fcall	___ftneg
 14484  088E  0021               	movlb	1	; select bank1
 14485  088F  083E               	movf	?___ftneg^(0+128),w
 14486  0890  0022               	movlb	2	; select bank2
 14487  0891  00C5               	movwf	sin@f^(0+256)
 14488  0892  0021               	movlb	1	; select bank1
 14489  0893  083F               	movf	(?___ftneg+1)^(0+128),w
 14490  0894  0022               	movlb	2	; select bank2
 14491  0895  00C6               	movwf	(sin@f+1)^(0+256)
 14492  0896  0021               	movlb	1	; select bank1
 14493  0897  0840               	movf	(?___ftneg+2)^(0+128),w
 14494  0898  0022               	movlb	2	; select bank2
 14495  0899  00C7               	movwf	(sin@f+2)^(0+256)
 14496  089A  01D2               	clrf	sin@sgn^(0+256)
 14497  089B  0AD2               	incf	sin@sgn^(0+256),f
 14498  089C                     l8246:	
 14499  089C  30FA               	movlw	250
 14500  089D  0021               	movlb	1	; select bank1
 14501  089E  00AE               	movwf	___ftmul@f1^(0+128)
 14502  089F  3022               	movlw	34
 14503  08A0  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 14504  08A1  303E               	movlw	62
 14505  08A2  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 14506  08A3  0022               	movlb	2	; select bank2
 14507  08A4  0845               	movf	sin@f^(0+256),w
 14508  08A5  0021               	movlb	1	; select bank1
 14509  08A6  00B1               	movwf	___ftmul@f2^(0+128)
 14510  08A7  0022               	movlb	2	; select bank2
 14511  08A8  0846               	movf	(sin@f+1)^(0+256),w
 14512  08A9  0021               	movlb	1	; select bank1
 14513  08AA  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 14514  08AB  0022               	movlb	2	; select bank2
 14515  08AC  0847               	movf	(sin@f+2)^(0+256),w
 14516  08AD  0021               	movlb	1	; select bank1
 14517  08AE  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 14518  08AF  319E  2691  3188   	fcall	___ftmul
 14519  08B2  0021               	movlb	1	; select bank1
 14520  08B3  082E               	movf	?___ftmul^(0+128),w
 14521  08B4  0022               	movlb	2	; select bank2
 14522  08B5  00C5               	movwf	sin@f^(0+256)
 14523  08B6  0021               	movlb	1	; select bank1
 14524  08B7  082F               	movf	(?___ftmul+1)^(0+128),w
 14525  08B8  0022               	movlb	2	; select bank2
 14526  08B9  00C6               	movwf	(sin@f+1)^(0+256)
 14527  08BA  0021               	movlb	1	; select bank1
 14528  08BB  0830               	movf	(?___ftmul+2)^(0+128),w
 14529  08BC  0022               	movlb	2	; select bank2
 14530  08BD  00C7               	movwf	(sin@f+2)^(0+256)
 14531  08BE  0845               	movf	sin@f^(0+256),w
 14532  08BF  00B6               	movwf	floor@x^(0+256)
 14533  08C0  0846               	movf	(sin@f+1)^(0+256),w
 14534  08C1  00B7               	movwf	(floor@x+1)^(0+256)
 14535  08C2  0847               	movf	(sin@f+2)^(0+256),w
 14536  08C3  00B8               	movwf	(floor@x+2)^(0+256)
 14537  08C4  319C  2496  3188   	fcall	_floor
 14538  08C7  0022               	movlb	2	; select bank2
 14539  08C8  0836               	movf	?_floor^(0+256),w
 14540  08C9  00BF               	movwf	___ftsub@f2^(0+256)
 14541  08CA  0837               	movf	(?_floor+1)^(0+256),w
 14542  08CB  00C0               	movwf	(___ftsub@f2+1)^(0+256)
 14543  08CC  0838               	movf	(?_floor+2)^(0+256),w
 14544  08CD  00C1               	movwf	(___ftsub@f2+2)^(0+256)
 14545  08CE  0845               	movf	sin@f^(0+256),w
 14546  08CF  00C2               	movwf	___ftsub@f1^(0+256)
 14547  08D0  0846               	movf	(sin@f+1)^(0+256),w
 14548  08D1  00C3               	movwf	(___ftsub@f1+1)^(0+256)
 14549  08D2  0847               	movf	(sin@f+2)^(0+256),w
 14550  08D3  00C4               	movwf	(___ftsub@f1+2)^(0+256)
 14551  08D4  31A1  213F  3188   	fcall	___ftsub
 14552  08D7  0022               	movlb	2	; select bank2
 14553  08D8  083F               	movf	?___ftsub^(0+256),w
 14554  08D9  00C5               	movwf	sin@f^(0+256)
 14555  08DA  0840               	movf	(?___ftsub+1)^(0+256),w
 14556  08DB  00C6               	movwf	(sin@f+1)^(0+256)
 14557  08DC  0841               	movf	(?___ftsub+2)^(0+256),w
 14558  08DD  00C7               	movwf	(sin@f+2)^(0+256)
 14559  08DE  3000               	movlw	0
 14560  08DF  0021               	movlb	1	; select bank1
 14561  08E0  00AE               	movwf	___ftmul@f1^(0+128)
 14562  08E1  3080               	movlw	128
 14563  08E2  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 14564  08E3  3040               	movlw	64
 14565  08E4  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 14566  08E5  0022               	movlb	2	; select bank2
 14567  08E6  0845               	movf	sin@f^(0+256),w
 14568  08E7  0021               	movlb	1	; select bank1
 14569  08E8  00B1               	movwf	___ftmul@f2^(0+128)
 14570  08E9  0022               	movlb	2	; select bank2
 14571  08EA  0846               	movf	(sin@f+1)^(0+256),w
 14572  08EB  0021               	movlb	1	; select bank1
 14573  08EC  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 14574  08ED  0022               	movlb	2	; select bank2
 14575  08EE  0847               	movf	(sin@f+2)^(0+256),w
 14576  08EF  0021               	movlb	1	; select bank1
 14577  08F0  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 14578  08F1  319E  2691  3188   	fcall	___ftmul
 14579  08F4  0021               	movlb	1	; select bank1
 14580  08F5  082E               	movf	?___ftmul^(0+128),w
 14581  08F6  0022               	movlb	2	; select bank2
 14582  08F7  00C5               	movwf	sin@f^(0+256)
 14583  08F8  0021               	movlb	1	; select bank1
 14584  08F9  082F               	movf	(?___ftmul+1)^(0+128),w
 14585  08FA  0022               	movlb	2	; select bank2
 14586  08FB  00C6               	movwf	(sin@f+1)^(0+256)
 14587  08FC  0021               	movlb	1	; select bank1
 14588  08FD  0830               	movf	(?___ftmul+2)^(0+128),w
 14589  08FE  0022               	movlb	2	; select bank2
 14590  08FF  00C7               	movwf	(sin@f+2)^(0+256)
 14591  0900  3000               	movlw	0
 14592  0901  0021               	movlb	1	; select bank1
 14593  0902  00A0               	movwf	___ftge@ff1^(0+128)
 14594  0903  3000               	movlw	0
 14595  0904  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 14596  0905  3040               	movlw	64
 14597  0906  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 14598  0907  0022               	movlb	2	; select bank2
 14599  0908  0845               	movf	sin@f^(0+256),w
 14600  0909  0021               	movlb	1	; select bank1
 14601  090A  00A3               	movwf	___ftge@ff2^(0+128)
 14602  090B  0022               	movlb	2	; select bank2
 14603  090C  0846               	movf	(sin@f+1)^(0+256),w
 14604  090D  0021               	movlb	1	; select bank1
 14605  090E  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 14606  090F  0022               	movlb	2	; select bank2
 14607  0910  0847               	movf	(sin@f+2)^(0+256),w
 14608  0911  0021               	movlb	1	; select bank1
 14609  0912  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 14610  0913  31A2  22DB  3188   	fcall	___ftge
 14611  0916  1803               	btfsc	3,0
 14612  0917  2938               	goto	l8258
 14613  0918  3000               	movlw	0
 14614  0919  0022               	movlb	2	; select bank2
 14615  091A  00BF               	movwf	___ftsub@f2^(0+256)
 14616  091B  3000               	movlw	0
 14617  091C  00C0               	movwf	(___ftsub@f2+1)^(0+256)
 14618  091D  3040               	movlw	64
 14619  091E  00C1               	movwf	(___ftsub@f2+2)^(0+256)
 14620  091F  0845               	movf	sin@f^(0+256),w
 14621  0920  00C2               	movwf	___ftsub@f1^(0+256)
 14622  0921  0846               	movf	(sin@f+1)^(0+256),w
 14623  0922  00C3               	movwf	(___ftsub@f1+1)^(0+256)
 14624  0923  0847               	movf	(sin@f+2)^(0+256),w
 14625  0924  00C4               	movwf	(___ftsub@f1+2)^(0+256)
 14626  0925  31A1  213F  3188   	fcall	___ftsub
 14627  0928  0022               	movlb	2	; select bank2
 14628  0929  083F               	movf	?___ftsub^(0+256),w
 14629  092A  00C5               	movwf	sin@f^(0+256)
 14630  092B  0840               	movf	(?___ftsub+1)^(0+256),w
 14631  092C  00C6               	movwf	(sin@f+1)^(0+256)
 14632  092D  0841               	movf	(?___ftsub+2)^(0+256),w
 14633  092E  00C7               	movwf	(sin@f+2)^(0+256)
 14634  092F  0852               	movf	sin@sgn^(0+256),w
 14635  0930  1D03               	btfss	3,2
 14636  0931  2934               	goto	u8650
 14637  0932  3001               	movlw	1
 14638  0933  2935               	goto	u8660
 14639  0934                     u8650:	
 14640  0934  3000               	movlw	0
 14641  0935                     u8660:	
 14642  0935  00C8               	movwf	??_sin^(0+256)
 14643  0936  0848               	movf	??_sin^(0+256),w
 14644  0937  00D2               	movwf	sin@sgn^(0+256)
 14645  0938                     l8258:	
 14646  0938  3000               	movlw	0
 14647  0939  0021               	movlb	1	; select bank1
 14648  093A  00A0               	movwf	___ftge@ff1^(0+128)
 14649  093B  3080               	movlw	128
 14650  093C  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 14651  093D  303F               	movlw	63
 14652  093E  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 14653  093F  0022               	movlb	2	; select bank2
 14654  0940  0845               	movf	sin@f^(0+256),w
 14655  0941  0021               	movlb	1	; select bank1
 14656  0942  00A3               	movwf	___ftge@ff2^(0+128)
 14657  0943  0022               	movlb	2	; select bank2
 14658  0944  0846               	movf	(sin@f+1)^(0+256),w
 14659  0945  0021               	movlb	1	; select bank1
 14660  0946  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 14661  0947  0022               	movlb	2	; select bank2
 14662  0948  0847               	movf	(sin@f+2)^(0+256),w
 14663  0949  0021               	movlb	1	; select bank1
 14664  094A  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 14665  094B  31A2  22DB  3188   	fcall	___ftge
 14666  094E  1803               	btfsc	3,0
 14667  094F  297C               	goto	l2317
 14668  0950  3000               	movlw	0
 14669  0951  0021               	movlb	1	; select bank1
 14670  0952  00C1               	movwf	___ftadd@f1^(0+128)
 14671  0953  3000               	movlw	0
 14672  0954  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 14673  0955  3040               	movlw	64
 14674  0956  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 14675  0957  0022               	movlb	2	; select bank2
 14676  0958  0845               	movf	sin@f^(0+256),w
 14677  0959  0021               	movlb	1	; select bank1
 14678  095A  00BE               	movwf	___ftneg@f1^(0+128)
 14679  095B  0022               	movlb	2	; select bank2
 14680  095C  0846               	movf	(sin@f+1)^(0+256),w
 14681  095D  0021               	movlb	1	; select bank1
 14682  095E  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 14683  095F  0022               	movlb	2	; select bank2
 14684  0960  0847               	movf	(sin@f+2)^(0+256),w
 14685  0961  0021               	movlb	1	; select bank1
 14686  0962  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 14687  0963  31AF  2763  3188   	fcall	___ftneg
 14688  0966  0021               	movlb	1	; select bank1
 14689  0967  083E               	movf	?___ftneg^(0+128),w
 14690  0968  00C4               	movwf	___ftadd@f2^(0+128)
 14691  0969  083F               	movf	(?___ftneg+1)^(0+128),w
 14692  096A  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 14693  096B  0840               	movf	(?___ftneg+2)^(0+128),w
 14694  096C  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 14695  096D  3191  2153  3188   	fcall	___ftadd
 14696  0970  0021               	movlb	1	; select bank1
 14697  0971  0841               	movf	?___ftadd^(0+128),w
 14698  0972  0022               	movlb	2	; select bank2
 14699  0973  00C5               	movwf	sin@f^(0+256)
 14700  0974  0021               	movlb	1	; select bank1
 14701  0975  0842               	movf	(?___ftadd+1)^(0+128),w
 14702  0976  0022               	movlb	2	; select bank2
 14703  0977  00C6               	movwf	(sin@f+1)^(0+256)
 14704  0978  0021               	movlb	1	; select bank1
 14705  0979  0843               	movf	(?___ftadd+2)^(0+128),w
 14706  097A  0022               	movlb	2	; select bank2
 14707  097B  00C7               	movwf	(sin@f+2)^(0+256)
 14708  097C                     l2317:	
 14709  097C  0022               	movlb	2	; select bank2
 14710  097D  0845               	movf	sin@f^(0+256),w
 14711  097E  0021               	movlb	1	; select bank1
 14712  097F  00AE               	movwf	___ftmul@f1^(0+128)
 14713  0980  0022               	movlb	2	; select bank2
 14714  0981  0846               	movf	(sin@f+1)^(0+256),w
 14715  0982  0021               	movlb	1	; select bank1
 14716  0983  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 14717  0984  0022               	movlb	2	; select bank2
 14718  0985  0847               	movf	(sin@f+2)^(0+256),w
 14719  0986  0021               	movlb	1	; select bank1
 14720  0987  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 14721  0988  0022               	movlb	2	; select bank2
 14722  0989  0845               	movf	sin@f^(0+256),w
 14723  098A  0021               	movlb	1	; select bank1
 14724  098B  00B1               	movwf	___ftmul@f2^(0+128)
 14725  098C  0022               	movlb	2	; select bank2
 14726  098D  0846               	movf	(sin@f+1)^(0+256),w
 14727  098E  0021               	movlb	1	; select bank1
 14728  098F  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 14729  0990  0022               	movlb	2	; select bank2
 14730  0991  0847               	movf	(sin@f+2)^(0+256),w
 14731  0992  0021               	movlb	1	; select bank1
 14732  0993  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 14733  0994  319E  2691  3188   	fcall	___ftmul
 14734  0997  0021               	movlb	1	; select bank1
 14735  0998  082E               	movf	?___ftmul^(0+128),w
 14736  0999  0022               	movlb	2	; select bank2
 14737  099A  00CF               	movwf	sin@x2^(0+256)
 14738  099B  0021               	movlb	1	; select bank1
 14739  099C  082F               	movf	(?___ftmul+1)^(0+128),w
 14740  099D  0022               	movlb	2	; select bank2
 14741  099E  00D0               	movwf	(sin@x2+1)^(0+256)
 14742  099F  0021               	movlb	1	; select bank1
 14743  09A0  0830               	movf	(?___ftmul+2)^(0+128),w
 14744  09A1  0022               	movlb	2	; select bank2
 14745  09A2  00D1               	movwf	(sin@x2+2)^(0+256)
 14746  09A3  084F               	movf	sin@x2^(0+256),w
 14747  09A4  00B4               	movwf	eval_poly@x^(0+256)
 14748  09A5  0850               	movf	(sin@x2+1)^(0+256),w
 14749  09A6  00B5               	movwf	(eval_poly@x+1)^(0+256)
 14750  09A7  0851               	movf	(sin@x2+2)^(0+256),w
 14751  09A8  00B6               	movwf	(eval_poly@x+2)^(0+256)
 14752  09A9  3048               	movlw	low (sin@coeff_b| (0+32768))
 14753  09AA  00B7               	movwf	eval_poly@d^(0+256)
 14754  09AB  30A8               	movlw	high (sin@coeff_b| (0+32768))
 14755  09AC  00B8               	movwf	(eval_poly@d^(0+256)+1)
 14756  09AD  3003               	movlw	3
 14757  09AE  00B9               	movwf	eval_poly@n^(0+256)
 14758  09AF  3000               	movlw	0
 14759  09B0  00BA               	movwf	(eval_poly@n^(0+256)+1)
 14760  09B1  31A7  278E  3188   	fcall	_eval_poly
 14761  09B4  0022               	movlb	2	; select bank2
 14762  09B5  0834               	movf	?_eval_poly^(0+256),w
 14763  09B6  00C9               	movwf	sin@y^(0+256)
 14764  09B7  0835               	movf	(?_eval_poly+1)^(0+256),w
 14765  09B8  00CA               	movwf	(sin@y+1)^(0+256)
 14766  09B9  0836               	movf	(?_eval_poly+2)^(0+256),w
 14767  09BA  00CB               	movwf	(sin@y+2)^(0+256)
 14768  09BB  3004               	movlw	4
 14769  09BC  00B9               	movwf	eval_poly@n^(0+256)
 14770  09BD  3000               	movlw	0
 14771  09BE  00BA               	movwf	(eval_poly@n^(0+256)+1)
 14772  09BF  3039               	movlw	low (sin@coeff_a| (0+32768))
 14773  09C0  00B7               	movwf	eval_poly@d^(0+256)
 14774  09C1  30A8               	movlw	high (sin@coeff_a| (0+32768))
 14775  09C2  00B8               	movwf	(eval_poly@d^(0+256)+1)
 14776  09C3  084F               	movf	sin@x2^(0+256),w
 14777  09C4  00B4               	movwf	eval_poly@x^(0+256)
 14778  09C5  0850               	movf	(sin@x2+1)^(0+256),w
 14779  09C6  00B5               	movwf	(eval_poly@x+1)^(0+256)
 14780  09C7  0851               	movf	(sin@x2+2)^(0+256),w
 14781  09C8  00B6               	movwf	(eval_poly@x+2)^(0+256)
 14782  09C9  31A7  278E  3188   	fcall	_eval_poly
 14783  09CC  0022               	movlb	2	; select bank2
 14784  09CD  0834               	movf	?_eval_poly^(0+256),w
 14785  09CE  0021               	movlb	1	; select bank1
 14786  09CF  00D1               	movwf	___ftdiv@f1^(0+128)
 14787  09D0  0022               	movlb	2	; select bank2
 14788  09D1  0835               	movf	(?_eval_poly+1)^(0+256),w
 14789  09D2  0021               	movlb	1	; select bank1
 14790  09D3  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 14791  09D4  0022               	movlb	2	; select bank2
 14792  09D5  0836               	movf	(?_eval_poly+2)^(0+256),w
 14793  09D6  0021               	movlb	1	; select bank1
 14794  09D7  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 14795  09D8  0022               	movlb	2	; select bank2
 14796  09D9  0849               	movf	sin@y^(0+256),w
 14797  09DA  0021               	movlb	1	; select bank1
 14798  09DB  00CE               	movwf	___ftdiv@f2^(0+128)
 14799  09DC  0022               	movlb	2	; select bank2
 14800  09DD  084A               	movf	(sin@y+1)^(0+256),w
 14801  09DE  0021               	movlb	1	; select bank1
 14802  09DF  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 14803  09E0  0022               	movlb	2	; select bank2
 14804  09E1  084B               	movf	(sin@y+2)^(0+256),w
 14805  09E2  0021               	movlb	1	; select bank1
 14806  09E3  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 14807  09E4  319D  253D  3188   	fcall	___ftdiv
 14808  09E7  0021               	movlb	1	; select bank1
 14809  09E8  084E               	movf	?___ftdiv^(0+128),w
 14810  09E9  0022               	movlb	2	; select bank2
 14811  09EA  00CC               	movwf	_sin$2826^(0+256)
 14812  09EB  0021               	movlb	1	; select bank1
 14813  09EC  084F               	movf	(?___ftdiv+1)^(0+128),w
 14814  09ED  0022               	movlb	2	; select bank2
 14815  09EE  00CD               	movwf	(_sin$2826+1)^(0+256)
 14816  09EF  0021               	movlb	1	; select bank1
 14817  09F0  0850               	movf	(?___ftdiv+2)^(0+128),w
 14818  09F1  0022               	movlb	2	; select bank2
 14819  09F2  00CE               	movwf	(_sin$2826+2)^(0+256)
 14820  09F3  084C               	movf	_sin$2826^(0+256),w
 14821  09F4  0021               	movlb	1	; select bank1
 14822  09F5  00AE               	movwf	___ftmul@f1^(0+128)
 14823  09F6  0022               	movlb	2	; select bank2
 14824  09F7  084D               	movf	(_sin$2826+1)^(0+256),w
 14825  09F8  0021               	movlb	1	; select bank1
 14826  09F9  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 14827  09FA  0022               	movlb	2	; select bank2
 14828  09FB  084E               	movf	(_sin$2826+2)^(0+256),w
 14829  09FC  0021               	movlb	1	; select bank1
 14830  09FD  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 14831  09FE  0022               	movlb	2	; select bank2
 14832  09FF  0845               	movf	sin@f^(0+256),w
 14833  0A00  0021               	movlb	1	; select bank1
 14834  0A01  00B1               	movwf	___ftmul@f2^(0+128)
 14835  0A02  0022               	movlb	2	; select bank2
 14836  0A03  0846               	movf	(sin@f+1)^(0+256),w
 14837  0A04  0021               	movlb	1	; select bank1
 14838  0A05  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 14839  0A06  0022               	movlb	2	; select bank2
 14840  0A07  0847               	movf	(sin@f+2)^(0+256),w
 14841  0A08  0021               	movlb	1	; select bank1
 14842  0A09  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 14843  0A0A  319E  2691  3188   	fcall	___ftmul
 14844  0A0D  0021               	movlb	1	; select bank1
 14845  0A0E  082E               	movf	?___ftmul^(0+128),w
 14846  0A0F  0022               	movlb	2	; select bank2
 14847  0A10  00C5               	movwf	sin@f^(0+256)
 14848  0A11  0021               	movlb	1	; select bank1
 14849  0A12  082F               	movf	(?___ftmul+1)^(0+128),w
 14850  0A13  0022               	movlb	2	; select bank2
 14851  0A14  00C6               	movwf	(sin@f+1)^(0+256)
 14852  0A15  0021               	movlb	1	; select bank1
 14853  0A16  0830               	movf	(?___ftmul+2)^(0+128),w
 14854  0A17  0022               	movlb	2	; select bank2
 14855  0A18  00C7               	movwf	(sin@f+2)^(0+256)
 14856  0A19  0852               	movf	sin@sgn^(0+256),w
 14857  0A1A  1903               	btfsc	3,2
 14858  0A1B  0008               	return
 14859  0A1C  0845               	movf	sin@f^(0+256),w
 14860  0A1D  0021               	movlb	1	; select bank1
 14861  0A1E  00BE               	movwf	___ftneg@f1^(0+128)
 14862  0A1F  0022               	movlb	2	; select bank2
 14863  0A20  0846               	movf	(sin@f+1)^(0+256),w
 14864  0A21  0021               	movlb	1	; select bank1
 14865  0A22  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 14866  0A23  0022               	movlb	2	; select bank2
 14867  0A24  0847               	movf	(sin@f+2)^(0+256),w
 14868  0A25  0021               	movlb	1	; select bank1
 14869  0A26  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 14870  0A27  31AF  2763         	fcall	___ftneg
 14871  0A29  0021               	movlb	1	; select bank1
 14872  0A2A  083E               	movf	?___ftneg^(0+128),w
 14873  0A2B  0022               	movlb	2	; select bank2
 14874  0A2C  00C5               	movwf	?_sin^(0+256)
 14875  0A2D  0021               	movlb	1	; select bank1
 14876  0A2E  083F               	movf	(?___ftneg+1)^(0+128),w
 14877  0A2F  0022               	movlb	2	; select bank2
 14878  0A30  00C6               	movwf	(?_sin+1)^(0+256)
 14879  0A31  0021               	movlb	1	; select bank1
 14880  0A32  0840               	movf	(?___ftneg+2)^(0+128),w
 14881  0A33  0022               	movlb	2	; select bank2
 14882  0A34  00C7               	movwf	(?_sin+2)^(0+256)
 14883  0A35  0008               	return
 14884  0A36                     __end_of_sin:	
 14885                           
 14886                           	psect	text43
 14887  1C96                     __ptext43:	
 14888 ;; *************** function _floor *****************
 14889 ;; Defined at:
 14890 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\floor.c"
 14891 ;; Parameters:    Size  Location     Type
 14892 ;;  x               3   22[BANK2 ] unsigned char 
 14893 ;; Auto vars:     Size  Location     Type
 14894 ;;  i               3   26[BANK2 ] unsigned char 
 14895 ;;  expon           2   29[BANK2 ] int 
 14896 ;; Return value:  Size  Location     Type
 14897 ;;                  3   22[BANK2 ] int 
 14898 ;; Registers used:
 14899 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14900 ;; Tracked objects:
 14901 ;;		On entry : 0/0
 14902 ;;		On exit  : 0/0
 14903 ;;		Unchanged: 0/0
 14904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14905 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14906 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14907 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14908 ;;      Totals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14909 ;;Total ram usage:        9 bytes
 14910 ;; Hardware stack levels used:    1
 14911 ;; Hardware stack levels required when called:    5
 14912 ;; This function calls:
 14913 ;;		___altoft
 14914 ;;		___ftadd
 14915 ;;		___ftge
 14916 ;;		___fttol
 14917 ;;		_frexp
 14918 ;; This function is called by:
 14919 ;;		_sin
 14920 ;;		_exp
 14921 ;; This function uses a non-reentrant model
 14922 ;;
 14923                           
 14924                           
 14925                           ;psect for function _floor
 14926  1C96                     _floor:	
 14927                           
 14928                           ;incstack = 0
 14929                           ; Regs used in _floor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14930  1C96  0022               	movlb	2	; select bank2
 14931  1C97  0836               	movf	floor@x^(0+256),w
 14932  1C98  0021               	movlb	1	; select bank1
 14933  1C99  00A0               	movwf	frexp@value^(0+128)
 14934  1C9A  0022               	movlb	2	; select bank2
 14935  1C9B  0837               	movf	(floor@x+1)^(0+256),w
 14936  1C9C  0021               	movlb	1	; select bank1
 14937  1C9D  00A1               	movwf	(frexp@value+1)^(0+128)
 14938  1C9E  0022               	movlb	2	; select bank2
 14939  1C9F  0838               	movf	(floor@x+2)^(0+256),w
 14940  1CA0  0021               	movlb	1	; select bank1
 14941  1CA1  00A2               	movwf	(frexp@value+2)^(0+128)
 14942  1CA2  303D               	movlw	(low (floor@expon| (0+256)))& (0+255)
 14943  1CA3  0022               	movlb	2	; select bank2
 14944  1CA4  00B9               	movwf	??_floor^(0+256)
 14945  1CA5  0839               	movf	??_floor^(0+256),w
 14946  1CA6  0021               	movlb	1	; select bank1
 14947  1CA7  00A3               	movwf	frexp@eptr^(0+128)
 14948  1CA8  31A3  2392  319C   	fcall	_frexp
 14949  1CAB  0022               	movlb	2	; select bank2
 14950  1CAC  1FBE               	btfss	(floor@expon+1)^(0+256),7
 14951  1CAD  2CD4               	goto	l7842
 14952  1CAE  0836               	movf	floor@x^(0+256),w
 14953  1CAF  0021               	movlb	1	; select bank1
 14954  1CB0  00A0               	movwf	___ftge@ff1^(0+128)
 14955  1CB1  0022               	movlb	2	; select bank2
 14956  1CB2  0837               	movf	(floor@x+1)^(0+256),w
 14957  1CB3  0021               	movlb	1	; select bank1
 14958  1CB4  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 14959  1CB5  0022               	movlb	2	; select bank2
 14960  1CB6  0838               	movf	(floor@x+2)^(0+256),w
 14961  1CB7  0021               	movlb	1	; select bank1
 14962  1CB8  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 14963  1CB9  3000               	movlw	0
 14964  1CBA  00A3               	movwf	___ftge@ff2^(0+128)
 14965  1CBB  3000               	movlw	0
 14966  1CBC  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 14967  1CBD  3000               	movlw	0
 14968  1CBE  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 14969  1CBF  31A2  22DB  319C   	fcall	___ftge
 14970  1CC2  1803               	btfsc	3,0
 14971  1CC3  2CCC               	goto	l7838
 14972  1CC4  3000               	movlw	0
 14973  1CC5  0022               	movlb	2	; select bank2
 14974  1CC6  00B6               	movwf	?_floor^(0+256)
 14975  1CC7  3080               	movlw	128
 14976  1CC8  00B7               	movwf	(?_floor+1)^(0+256)
 14977  1CC9  30BF               	movlw	191
 14978  1CCA  00B8               	movwf	(?_floor+2)^(0+256)
 14979  1CCB  0008               	return
 14980  1CCC                     l7838:	
 14981  1CCC  3000               	movlw	0
 14982  1CCD  0022               	movlb	2	; select bank2
 14983  1CCE  00B6               	movwf	?_floor^(0+256)
 14984  1CCF  3000               	movlw	0
 14985  1CD0  00B7               	movwf	(?_floor+1)^(0+256)
 14986  1CD1  3000               	movlw	0
 14987  1CD2  00B8               	movwf	(?_floor+2)^(0+256)
 14988  1CD3  0008               	return
 14989  1CD4                     l7842:	
 14990  1CD4  3000               	movlw	0
 14991  1CD5  023E               	subwf	(floor@expon+1)^(0+256),w
 14992  1CD6  3015               	movlw	21
 14993  1CD7  1903               	skipnz
 14994  1CD8  023D               	subwf	floor@expon^(0+256),w
 14995  1CD9  1803               	btfsc	3,0
 14996  1CDA  0008               	return
 14997  1CDB  0836               	movf	floor@x^(0+256),w
 14998  1CDC  00A0               	movwf	___fttol@f1^(0+256)
 14999  1CDD  0837               	movf	(floor@x+1)^(0+256),w
 15000  1CDE  00A1               	movwf	(___fttol@f1+1)^(0+256)
 15001  1CDF  0838               	movf	(floor@x+2)^(0+256),w
 15002  1CE0  00A2               	movwf	(___fttol@f1+2)^(0+256)
 15003  1CE1  3199  21D5  319C   	fcall	___fttol
 15004  1CE4  0022               	movlb	2	; select bank2
 15005  1CE5  0823               	movf	(?___fttol+3)^(0+256),w
 15006  1CE6  00B1               	movwf	(___altoft@c+3)^(0+256)
 15007  1CE7  0822               	movf	(?___fttol+2)^(0+256),w
 15008  1CE8  00B0               	movwf	(___altoft@c+2)^(0+256)
 15009  1CE9  0821               	movf	(?___fttol+1)^(0+256),w
 15010  1CEA  00AF               	movwf	(___altoft@c+1)^(0+256)
 15011  1CEB  0820               	movf	?___fttol^(0+256),w
 15012  1CEC  00AE               	movwf	___altoft@c^(0+256)
 15013  1CED  31A5  25FB  319C   	fcall	___altoft
 15014  1CF0  0022               	movlb	2	; select bank2
 15015  1CF1  082E               	movf	?___altoft^(0+256),w
 15016  1CF2  00BA               	movwf	floor@i^(0+256)
 15017  1CF3  082F               	movf	(?___altoft+1)^(0+256),w
 15018  1CF4  00BB               	movwf	(floor@i+1)^(0+256)
 15019  1CF5  0830               	movf	(?___altoft+2)^(0+256),w
 15020  1CF6  00BC               	movwf	(floor@i+2)^(0+256)
 15021  1CF7  0836               	movf	floor@x^(0+256),w
 15022  1CF8  0021               	movlb	1	; select bank1
 15023  1CF9  00A0               	movwf	___ftge@ff1^(0+128)
 15024  1CFA  0022               	movlb	2	; select bank2
 15025  1CFB  0837               	movf	(floor@x+1)^(0+256),w
 15026  1CFC  0021               	movlb	1	; select bank1
 15027  1CFD  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15028  1CFE  0022               	movlb	2	; select bank2
 15029  1CFF  0838               	movf	(floor@x+2)^(0+256),w
 15030  1D00  0021               	movlb	1	; select bank1
 15031  1D01  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15032  1D02  0022               	movlb	2	; select bank2
 15033  1D03  083A               	movf	floor@i^(0+256),w
 15034  1D04  0021               	movlb	1	; select bank1
 15035  1D05  00A3               	movwf	___ftge@ff2^(0+128)
 15036  1D06  0022               	movlb	2	; select bank2
 15037  1D07  083B               	movf	(floor@i+1)^(0+256),w
 15038  1D08  0021               	movlb	1	; select bank1
 15039  1D09  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15040  1D0A  0022               	movlb	2	; select bank2
 15041  1D0B  083C               	movf	(floor@i+2)^(0+256),w
 15042  1D0C  0021               	movlb	1	; select bank1
 15043  1D0D  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15044  1D0E  31A2  22DB  319C   	fcall	___ftge
 15045  1D11  1803               	btfsc	3,0
 15046  1D12  2D35               	goto	l7852
 15047  1D13  3000               	movlw	0
 15048  1D14  0021               	movlb	1	; select bank1
 15049  1D15  00C1               	movwf	___ftadd@f1^(0+128)
 15050  1D16  3080               	movlw	128
 15051  1D17  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 15052  1D18  30BF               	movlw	191
 15053  1D19  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 15054  1D1A  0022               	movlb	2	; select bank2
 15055  1D1B  083A               	movf	floor@i^(0+256),w
 15056  1D1C  0021               	movlb	1	; select bank1
 15057  1D1D  00C4               	movwf	___ftadd@f2^(0+128)
 15058  1D1E  0022               	movlb	2	; select bank2
 15059  1D1F  083B               	movf	(floor@i+1)^(0+256),w
 15060  1D20  0021               	movlb	1	; select bank1
 15061  1D21  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 15062  1D22  0022               	movlb	2	; select bank2
 15063  1D23  083C               	movf	(floor@i+2)^(0+256),w
 15064  1D24  0021               	movlb	1	; select bank1
 15065  1D25  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 15066  1D26  3191  2153         	fcall	___ftadd
 15067  1D28  0021               	movlb	1	; select bank1
 15068  1D29  0841               	movf	?___ftadd^(0+128),w
 15069  1D2A  0022               	movlb	2	; select bank2
 15070  1D2B  00B6               	movwf	?_floor^(0+256)
 15071  1D2C  0021               	movlb	1	; select bank1
 15072  1D2D  0842               	movf	(?___ftadd+1)^(0+128),w
 15073  1D2E  0022               	movlb	2	; select bank2
 15074  1D2F  00B7               	movwf	(?_floor+1)^(0+256)
 15075  1D30  0021               	movlb	1	; select bank1
 15076  1D31  0843               	movf	(?___ftadd+2)^(0+128),w
 15077  1D32  0022               	movlb	2	; select bank2
 15078  1D33  00B8               	movwf	(?_floor+2)^(0+256)
 15079  1D34  0008               	return
 15080  1D35                     l7852:	
 15081  1D35  0022               	movlb	2	; select bank2
 15082  1D36  083A               	movf	floor@i^(0+256),w
 15083  1D37  00B6               	movwf	?_floor^(0+256)
 15084  1D38  083B               	movf	(floor@i+1)^(0+256),w
 15085  1D39  00B7               	movwf	(?_floor+1)^(0+256)
 15086  1D3A  083C               	movf	(floor@i+2)^(0+256),w
 15087  1D3B  00B8               	movwf	(?_floor+2)^(0+256)
 15088  1D3C  0008               	return
 15089  1D3D                     __end_of_floor:	
 15090                           
 15091                           	psect	text44
 15092  2392                     __ptext44:	
 15093 ;; *************** function _frexp *****************
 15094 ;; Defined at:
 15095 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
 15096 ;; Parameters:    Size  Location     Type
 15097 ;;  value           3    0[BANK1 ] int 
 15098 ;;  eptr            1    3[BANK1 ] PTR int 
 15099 ;;		 -> log@exponent(2), floor@expon(2), trunc@expon(2), 
 15100 ;; Auto vars:     Size  Location     Type
 15101 ;;		None
 15102 ;; Return value:  Size  Location     Type
 15103 ;;                  3    0[BANK1 ] PTR int 
 15104 ;; Registers used:
 15105 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15106 ;; Tracked objects:
 15107 ;;		On entry : 0/0
 15108 ;;		On exit  : 0/0
 15109 ;;		Unchanged: 0/0
 15110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15111 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15113 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15114 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15115 ;;Total ram usage:        6 bytes
 15116 ;; Hardware stack levels used:    1
 15117 ;; Hardware stack levels required when called:    3
 15118 ;; This function calls:
 15119 ;;		Nothing
 15120 ;; This function is called by:
 15121 ;;		_trunc
 15122 ;;		_floor
 15123 ;;		_log
 15124 ;; This function uses a non-reentrant model
 15125 ;;
 15126                           
 15127                           
 15128                           ;psect for function _frexp
 15129  2392                     _frexp:	
 15130                           
 15131                           ;incstack = 0
 15132                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
 15133  2392  0021               	movlb	1	; select bank1
 15134  2393  0822               	movf	(frexp@value+2)^(0+128),w
 15135  2394  0421               	iorwf	(frexp@value+1)^(0+128),w
 15136  2395  0420               	iorwf	frexp@value^(0+128),w
 15137  2396  1D03               	skipz
 15138  2397  2BA6               	goto	l7704
 15139  2398  0823               	movf	frexp@eptr^(0+128),w
 15140  2399  0086               	movwf	6
 15141  239A  3001               	movlw	1	; select bank2/3
 15142  239B  0087               	movwf	7
 15143  239C  3000               	movlw	0
 15144  239D  3FC0               	movwi [0]fsr1
 15145  239E  3FC1               	movwi [1]fsr1
 15146  239F  3000               	movlw	0
 15147  23A0  00A0               	movwf	?_frexp^(0+128)
 15148  23A1  3000               	movlw	0
 15149  23A2  00A1               	movwf	(?_frexp+1)^(0+128)
 15150  23A3  3000               	movlw	0
 15151  23A4  00A2               	movwf	(?_frexp+2)^(0+128)
 15152  23A5  0008               	return
 15153  23A6                     l7704:	
 15154  23A6  0822               	movf	(frexp@value^(0+128)+2),w
 15155  23A7  397F               	andlw	127
 15156  23A8  00A4               	movwf	??_frexp^(0+128)
 15157  23A9  01A5               	clrf	(??_frexp^(0+128)+1)
 15158  23AA  35A4               	lslf	??_frexp^(0+128),f
 15159  23AB  0DA5               	rlf	(??_frexp^(0+128)+1),f
 15160  23AC  0823               	movf	frexp@eptr^(0+128),w
 15161  23AD  0086               	movwf	6
 15162  23AE  3001               	movlw	1	; select bank2/3
 15163  23AF  0087               	movwf	7
 15164  23B0  0824               	movf	??_frexp^(0+128),w
 15165  23B1  3FC0               	movwi [0]fsr1
 15166  23B2  0825               	movf	(??_frexp+1)^(0+128),w
 15167  23B3  3FC1               	movwi [1]fsr1
 15168  23B4  0D21               	rlf	(frexp@value^(0+128)+1),w
 15169  23B5  0D21               	rlf	(frexp@value^(0+128)+1),w
 15170  23B6  3901               	andlw	1
 15171  23B7  00A4               	movwf	??_frexp^(0+128)
 15172  23B8  01A5               	clrf	(??_frexp^(0+128)+1)
 15173  23B9  0823               	movf	frexp@eptr^(0+128),w
 15174  23BA  0086               	movwf	6
 15175  23BB  3001               	movlw	1	; select bank2/3
 15176  23BC  0087               	movwf	7
 15177  23BD  0824               	movf	??_frexp^(0+128),w
 15178  23BE  0481               	iorwf	1,f
 15179  23BF  3141               	addfsr 1,1
 15180  23C0  0825               	movf	(??_frexp+1)^(0+128),w
 15181  23C1  0481               	iorwf	1,f
 15182  23C2  0823               	movf	frexp@eptr^(0+128),w
 15183  23C3  0086               	movwf	6
 15184  23C4  3001               	movlw	1	; select bank2/3
 15185  23C5  0087               	movwf	7
 15186  23C6  3082               	movlw	130
 15187  23C7  0781               	addwf	1,f
 15188  23C8  3141               	addfsr 1,1
 15189  23C9  30FF               	movlw	255
 15190  23CA  3D81               	addwfc	1,f
 15191  23CB  317F               	addfsr 1,-1
 15192  23CC  0822               	movf	(frexp@value^(0+128)+2),w
 15193  23CD  3980               	andlw	-128
 15194  23CE  383F               	iorlw	63
 15195  23CF  00A2               	movwf	(frexp@value^(0+128)+2)
 15196  23D0  13A1               	bcf	(frexp@value^(0+128)+1),7
 15197  23D1  0008               	return
 15198  23D2                     __end_of_frexp:	
 15199                           
 15200                           	psect	text45
 15201  19D5                     __ptext45:	
 15202 ;; *************** function ___fttol *****************
 15203 ;; Defined at:
 15204 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
 15205 ;; Parameters:    Size  Location     Type
 15206 ;;  f1              3    0[BANK2 ] float 
 15207 ;; Auto vars:     Size  Location     Type
 15208 ;;  lval            4    9[BANK2 ] unsigned long 
 15209 ;;  exp1            1   13[BANK2 ] unsigned char 
 15210 ;;  sign1           1    8[BANK2 ] unsigned char 
 15211 ;; Return value:  Size  Location     Type
 15212 ;;                  4    0[BANK2 ] long 
 15213 ;; Registers used:
 15214 ;;		wreg, status,2, status,0
 15215 ;; Tracked objects:
 15216 ;;		On entry : 0/0
 15217 ;;		On exit  : 0/0
 15218 ;;		Unchanged: 0/0
 15219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15220 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15221 ;;      Locals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15222 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15223 ;;      Totals:         0       0       0      14       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15224 ;;Total ram usage:       14 bytes
 15225 ;; Hardware stack levels used:    1
 15226 ;; Hardware stack levels required when called:    3
 15227 ;; This function calls:
 15228 ;;		Nothing
 15229 ;; This function is called by:
 15230 ;;		_main
 15231 ;;		_set_subdivision
 15232 ;;		_scaleA100kPot
 15233 ;;		_scaleA10kPot
 15234 ;;		_scaleiA10kPot
 15235 ;;		_modSin
 15236 ;;		_modTri
 15237 ;;		_modSaw
 15238 ;;		_pow
 15239 ;;		_trunc
 15240 ;;		_exp
 15241 ;;		_floor
 15242 ;;		_scaleiA100kPot
 15243 ;; This function uses a non-reentrant model
 15244 ;;
 15245                           
 15246                           
 15247                           ;psect for function ___fttol
 15248  19D5                     ___fttol:	
 15249                           
 15250                           ;incstack = 0
 15251                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 15252  19D5  0022               	movlb	2	; select bank2
 15253  19D6  0820               	movf	___fttol@f1^(0+256),w
 15254  19D7  00A4               	movwf	??___fttol^(0+256)
 15255  19D8  0821               	movf	(___fttol@f1+1)^(0+256),w
 15256  19D9  00A5               	movwf	(??___fttol^(0+256)+1)
 15257  19DA  0822               	movf	(___fttol@f1+2)^(0+256),w
 15258  19DB  00A6               	movwf	(??___fttol^(0+256)+2)
 15259  19DC  1003               	clrc
 15260  19DD  0D25               	rlf	(??___fttol^(0+256)+1),w
 15261  19DE  0D26               	rlf	(??___fttol^(0+256)+2),w
 15262  19DF  00A7               	movwf	(??___fttol+3)^(0+256)
 15263  19E0  0827               	movf	(??___fttol+3)^(0+256),w
 15264  19E1  00AD               	movwf	___fttol@exp1^(0+256)
 15265  19E2  082D               	movf	___fttol@exp1^(0+256),w
 15266  19E3  1D03               	btfss	3,2
 15267  19E4  29EE               	goto	l7660
 15268  19E5  3000               	movlw	0
 15269  19E6  00A3               	movwf	(?___fttol+3)^(0+256)
 15270  19E7  3000               	movlw	0
 15271  19E8  00A2               	movwf	(?___fttol+2)^(0+256)
 15272  19E9  3000               	movlw	0
 15273  19EA  00A1               	movwf	(?___fttol+1)^(0+256)
 15274  19EB  3000               	movlw	0
 15275  19EC  00A0               	movwf	?___fttol^(0+256)
 15276  19ED  0008               	return
 15277  19EE                     l7660:	
 15278  19EE  0820               	movf	___fttol@f1^(0+256),w
 15279  19EF  00A4               	movwf	??___fttol^(0+256)
 15280  19F0  0821               	movf	(___fttol@f1+1)^(0+256),w
 15281  19F1  00A5               	movwf	(??___fttol^(0+256)+1)
 15282  19F2  0822               	movf	(___fttol@f1+2)^(0+256),w
 15283  19F3  00A6               	movwf	(??___fttol^(0+256)+2)
 15284  19F4  3017               	movlw	23
 15285  19F5                     u7985:	
 15286  19F5  36A6               	lsrf	(??___fttol^(0+256)+2),f
 15287  19F6  0CA5               	rrf	(??___fttol^(0+256)+1),f
 15288  19F7  0CA4               	rrf	??___fttol^(0+256),f
 15289  19F8  0B89               	decfsz	9,f
 15290  19F9  29F5               	goto	u7985
 15291  19FA  0824               	movf	??___fttol^(0+256),w
 15292  19FB  00A7               	movwf	(??___fttol+3)^(0+256)
 15293  19FC  0827               	movf	(??___fttol+3)^(0+256),w
 15294  19FD  00A8               	movwf	___fttol@sign1^(0+256)
 15295  19FE  17A1               	bsf	(___fttol@f1^(0+256)+1),7
 15296  19FF  30FF               	movlw	255
 15297  1A00  05A0               	andwf	___fttol@f1^(0+256),f
 15298  1A01  30FF               	movlw	255
 15299  1A02  05A1               	andwf	(___fttol@f1+1)^(0+256),f
 15300  1A03  3000               	movlw	0
 15301  1A04  05A2               	andwf	(___fttol@f1+2)^(0+256),f
 15302  1A05  0820               	movf	___fttol@f1^(0+256),w
 15303  1A06  00A9               	movwf	___fttol@lval^(0+256)
 15304  1A07  0821               	movf	(___fttol@f1+1)^(0+256),w
 15305  1A08  00AA               	movwf	(___fttol@lval^(0+256)+1)
 15306  1A09  0822               	movf	(___fttol@f1+2)^(0+256),w
 15307  1A0A  00AB               	movwf	(___fttol@lval^(0+256)+2)
 15308  1A0B  01AC               	clrf	(___fttol@lval^(0+256)+3)
 15309  1A0C  308E               	movlw	142
 15310  1A0D  02AD               	subwf	___fttol@exp1^(0+256),f
 15311  1A0E  1FAD               	btfss	___fttol@exp1^(0+256),7
 15312  1A0F  2A2C               	goto	l7680
 15313  1A10  082D               	movf	___fttol@exp1^(0+256),w
 15314  1A11  3A80               	xorlw	128
 15315  1A12  3E8F               	addlw	143
 15316  1A13  1803               	skipnc
 15317  1A14  2A1E               	goto	l7678
 15318  1A15  3000               	movlw	0
 15319  1A16  00A3               	movwf	(?___fttol+3)^(0+256)
 15320  1A17  3000               	movlw	0
 15321  1A18  00A2               	movwf	(?___fttol+2)^(0+256)
 15322  1A19  3000               	movlw	0
 15323  1A1A  00A1               	movwf	(?___fttol+1)^(0+256)
 15324  1A1B  3000               	movlw	0
 15325  1A1C  00A0               	movwf	?___fttol^(0+256)
 15326  1A1D  0008               	return
 15327  1A1E                     l7678:	
 15328  1A1E  3001               	movlw	1
 15329  1A1F                     u8015:	
 15330  1A1F  36AC               	lsrf	(___fttol@lval+3)^(0+256),f
 15331  1A20  0CAB               	rrf	(___fttol@lval+2)^(0+256),f
 15332  1A21  0CAA               	rrf	(___fttol@lval+1)^(0+256),f
 15333  1A22  0CA9               	rrf	___fttol@lval^(0+256),f
 15334  1A23  0B89               	decfsz	9,f
 15335  1A24  2A1F               	goto	u8015
 15336  1A25  3001               	movlw	1
 15337  1A26  00A4               	movwf	??___fttol^(0+256)
 15338  1A27  0824               	movf	??___fttol^(0+256),w
 15339  1A28  07AD               	addwf	___fttol@exp1^(0+256),f
 15340  1A29  1903               	btfsc	3,2
 15341  1A2A  2A45               	goto	l7688
 15342  1A2B  2A1E               	goto	l7678
 15343  1A2C                     l7680:	
 15344  1A2C  3018               	movlw	24
 15345  1A2D  022D               	subwf	___fttol@exp1^(0+256),w
 15346  1A2E  1C03               	skipc
 15347  1A2F  2A42               	goto	l2187
 15348  1A30  3000               	movlw	0
 15349  1A31  00A3               	movwf	(?___fttol+3)^(0+256)
 15350  1A32  3000               	movlw	0
 15351  1A33  00A2               	movwf	(?___fttol+2)^(0+256)
 15352  1A34  3000               	movlw	0
 15353  1A35  00A1               	movwf	(?___fttol+1)^(0+256)
 15354  1A36  3000               	movlw	0
 15355  1A37  00A0               	movwf	?___fttol^(0+256)
 15356  1A38  0008               	return
 15357  1A39                     l7686:	
 15358  1A39  3001               	movlw	1
 15359  1A3A                     u8045:	
 15360  1A3A  35A9               	lslf	___fttol@lval^(0+256),f
 15361  1A3B  0DAA               	rlf	(___fttol@lval+1)^(0+256),f
 15362  1A3C  0DAB               	rlf	(___fttol@lval+2)^(0+256),f
 15363  1A3D  0DAC               	rlf	(___fttol@lval+3)^(0+256),f
 15364  1A3E  0B89               	decfsz	9,f
 15365  1A3F  2A3A               	goto	u8045
 15366  1A40  3001               	movlw	1
 15367  1A41  02AD               	subwf	___fttol@exp1^(0+256),f
 15368  1A42                     l2187:	
 15369  1A42  082D               	movf	___fttol@exp1^(0+256),w
 15370  1A43  1D03               	btfss	3,2
 15371  1A44  2A39               	goto	l7686
 15372  1A45                     l7688:	
 15373  1A45  0828               	movf	___fttol@sign1^(0+256),w
 15374  1A46  1903               	btfsc	3,2
 15375  1A47  2A53               	goto	l7692
 15376  1A48  09A9               	comf	___fttol@lval^(0+256),f
 15377  1A49  09AA               	comf	(___fttol@lval+1)^(0+256),f
 15378  1A4A  09AB               	comf	(___fttol@lval+2)^(0+256),f
 15379  1A4B  09AC               	comf	(___fttol@lval+3)^(0+256),f
 15380  1A4C  0AA9               	incf	___fttol@lval^(0+256),f
 15381  1A4D  1903               	skipnz
 15382  1A4E  0AAA               	incf	(___fttol@lval+1)^(0+256),f
 15383  1A4F  1903               	skipnz
 15384  1A50  0AAB               	incf	(___fttol@lval+2)^(0+256),f
 15385  1A51  1903               	skipnz
 15386  1A52  0AAC               	incf	(___fttol@lval+3)^(0+256),f
 15387  1A53                     l7692:	
 15388  1A53  082C               	movf	(___fttol@lval+3)^(0+256),w
 15389  1A54  00A3               	movwf	(?___fttol+3)^(0+256)
 15390  1A55  082B               	movf	(___fttol@lval+2)^(0+256),w
 15391  1A56  00A2               	movwf	(?___fttol+2)^(0+256)
 15392  1A57  082A               	movf	(___fttol@lval+1)^(0+256),w
 15393  1A58  00A1               	movwf	(?___fttol+1)^(0+256)
 15394  1A59  0829               	movf	___fttol@lval^(0+256),w
 15395  1A5A  00A0               	movwf	?___fttol^(0+256)
 15396  1A5B  0008               	return
 15397  1A5C                     __end_of___fttol:	
 15398                           
 15399                           	psect	text46
 15400  22DB                     __ptext46:	
 15401 ;; *************** function ___ftge *****************
 15402 ;; Defined at:
 15403 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftge.c"
 15404 ;; Parameters:    Size  Location     Type
 15405 ;;  ff1             3    0[BANK1 ] float 
 15406 ;;  ff2             3    3[BANK1 ] float 
 15407 ;; Auto vars:     Size  Location     Type
 15408 ;;		None
 15409 ;; Return value:  Size  Location     Type
 15410 ;;		None               void
 15411 ;; Registers used:
 15412 ;;		wreg, status,2, status,0
 15413 ;; Tracked objects:
 15414 ;;		On entry : 0/0
 15415 ;;		On exit  : 0/0
 15416 ;;		Unchanged: 0/0
 15417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15418 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15420 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15421 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15422 ;;Total ram usage:        9 bytes
 15423 ;; Hardware stack levels used:    1
 15424 ;; Hardware stack levels required when called:    3
 15425 ;; This function calls:
 15426 ;;		Nothing
 15427 ;; This function is called by:
 15428 ;;		_modSin
 15429 ;;		_modTri
 15430 ;;		_modSaw
 15431 ;;		_modSquare
 15432 ;;		_pow
 15433 ;;		_sin
 15434 ;;		_exp
 15435 ;;		_floor
 15436 ;;		_ldexp
 15437 ;;		_log
 15438 ;; This function uses a non-reentrant model
 15439 ;;
 15440                           
 15441                           
 15442                           ;psect for function ___ftge
 15443  22DB                     ___ftge:	
 15444                           
 15445                           ;incstack = 0
 15446                           ; Regs used in ___ftge: [wreg+status,2+status,0]
 15447  22DB  0021               	movlb	1	; select bank1
 15448  22DC  1FA2               	btfss	(___ftge@ff1+2)^(0+128),7
 15449  22DD  2AF2               	goto	l7580
 15450  22DE  0920               	comf	___ftge@ff1^(0+128),w
 15451  22DF  00A6               	movwf	??___ftge^(0+128)
 15452  22E0  0921               	comf	(___ftge@ff1+1)^(0+128),w
 15453  22E1  00A7               	movwf	(??___ftge^(0+128)+1)
 15454  22E2  0922               	comf	(___ftge@ff1+2)^(0+128),w
 15455  22E3  00A8               	movwf	(??___ftge^(0+128)+2)
 15456  22E4  0AA6               	incf	??___ftge^(0+128),f
 15457  22E5  1903               	skipnz
 15458  22E6  0AA7               	incf	(??___ftge^(0+128)+1),f
 15459  22E7  1903               	skipnz
 15460  22E8  0AA8               	incf	(??___ftge^(0+128)+2),f
 15461  22E9  3000               	movlw	0
 15462  22EA  0726               	addwf	??___ftge^(0+128),w
 15463  22EB  00A0               	movwf	___ftge@ff1^(0+128)
 15464  22EC  3000               	movlw	0
 15465  22ED  3D27               	addwfc	(??___ftge+1)^(0+128),w
 15466  22EE  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15467  22EF  3080               	movlw	128
 15468  22F0  3D28               	addwfc	(??___ftge+2)^(0+128),w
 15469  22F1  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15470  22F2                     l7580:	
 15471  22F2  1FA5               	btfss	(___ftge@ff2+2)^(0+128),7
 15472  22F3  2B08               	goto	l7584
 15473  22F4  0923               	comf	___ftge@ff2^(0+128),w
 15474  22F5  00A6               	movwf	??___ftge^(0+128)
 15475  22F6  0924               	comf	(___ftge@ff2+1)^(0+128),w
 15476  22F7  00A7               	movwf	(??___ftge^(0+128)+1)
 15477  22F8  0925               	comf	(___ftge@ff2+2)^(0+128),w
 15478  22F9  00A8               	movwf	(??___ftge^(0+128)+2)
 15479  22FA  0AA6               	incf	??___ftge^(0+128),f
 15480  22FB  1903               	skipnz
 15481  22FC  0AA7               	incf	(??___ftge^(0+128)+1),f
 15482  22FD  1903               	skipnz
 15483  22FE  0AA8               	incf	(??___ftge^(0+128)+2),f
 15484  22FF  3000               	movlw	0
 15485  2300  0726               	addwf	??___ftge^(0+128),w
 15486  2301  00A3               	movwf	___ftge@ff2^(0+128)
 15487  2302  3000               	movlw	0
 15488  2303  3D27               	addwfc	(??___ftge+1)^(0+128),w
 15489  2304  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15490  2305  3080               	movlw	128
 15491  2306  3D28               	addwfc	(??___ftge+2)^(0+128),w
 15492  2307  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15493  2308                     l7584:	
 15494  2308  3080               	movlw	128
 15495  2309  06A2               	xorwf	(___ftge@ff1+2)^(0+128),f
 15496  230A  3080               	movlw	128
 15497  230B  06A5               	xorwf	(___ftge@ff2+2)^(0+128),f
 15498  230C  0825               	movf	(___ftge@ff2+2)^(0+128),w
 15499  230D  0222               	subwf	(___ftge@ff1+2)^(0+128),w
 15500  230E  1D03               	skipz
 15501  230F  0008               	return
 15502  2310  0824               	movf	(___ftge@ff2+1)^(0+128),w
 15503  2311  0221               	subwf	(___ftge@ff1+1)^(0+128),w
 15504  2312  1D03               	skipz
 15505  2313  0008               	return
 15506  2314  0823               	movf	___ftge@ff2^(0+128),w
 15507  2315  0220               	subwf	___ftge@ff1^(0+128),w
 15508  2316  0008               	return
 15509  2317                     __end_of___ftge:	
 15510                           
 15511                           	psect	text47
 15512  25FB                     __ptext47:	
 15513 ;; *************** function ___altoft *****************
 15514 ;; Defined at:
 15515 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\altoft.c"
 15516 ;; Parameters:    Size  Location     Type
 15517 ;;  c               4   14[BANK2 ] long 
 15518 ;; Auto vars:     Size  Location     Type
 15519 ;;  sign            1   21[BANK2 ] unsigned char 
 15520 ;;  exp             1   20[BANK2 ] unsigned char 
 15521 ;; Return value:  Size  Location     Type
 15522 ;;                  3   14[BANK2 ] float 
 15523 ;; Registers used:
 15524 ;;		wreg, status,2, status,0, pclath, cstack
 15525 ;; Tracked objects:
 15526 ;;		On entry : 0/0
 15527 ;;		On exit  : 0/0
 15528 ;;		Unchanged: 0/0
 15529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15530 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15531 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15532 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15533 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15534 ;;Total ram usage:        8 bytes
 15535 ;; Hardware stack levels used:    1
 15536 ;; Hardware stack levels required when called:    4
 15537 ;; This function calls:
 15538 ;;		___ftpack
 15539 ;; This function is called by:
 15540 ;;		_trunc
 15541 ;;		_floor
 15542 ;; This function uses a non-reentrant model
 15543 ;;
 15544                           
 15545                           
 15546                           ;psect for function ___altoft
 15547  25FB                     ___altoft:	
 15548                           
 15549                           ;incstack = 0
 15550                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
 15551  25FB  0022               	movlb	2	; select bank2
 15552  25FC  01B5               	clrf	___altoft@sign^(0+256)
 15553  25FD  308E               	movlw	142
 15554  25FE  00B2               	movwf	??___altoft^(0+256)
 15555  25FF  0832               	movf	??___altoft^(0+256),w
 15556  2600  00B4               	movwf	___altoft@exp^(0+256)
 15557  2601  1FB1               	btfss	(___altoft@c+3)^(0+256),7
 15558  2602  2E10               	goto	l7500
 15559  2603  09AE               	comf	___altoft@c^(0+256),f
 15560  2604  09AF               	comf	(___altoft@c+1)^(0+256),f
 15561  2605  09B0               	comf	(___altoft@c+2)^(0+256),f
 15562  2606  09B1               	comf	(___altoft@c+3)^(0+256),f
 15563  2607  0AAE               	incf	___altoft@c^(0+256),f
 15564  2608  1903               	skipnz
 15565  2609  0AAF               	incf	(___altoft@c+1)^(0+256),f
 15566  260A  1903               	skipnz
 15567  260B  0AB0               	incf	(___altoft@c+2)^(0+256),f
 15568  260C  1903               	skipnz
 15569  260D  0AB1               	incf	(___altoft@c+3)^(0+256),f
 15570  260E  01B5               	clrf	___altoft@sign^(0+256)
 15571  260F  0AB5               	incf	___altoft@sign^(0+256),f
 15572  2610                     l7500:	
 15573  2610  30FF               	movlw	255
 15574  2611  0531               	andwf	(___altoft@c+3)^(0+256),w
 15575  2612  1903               	btfsc	3,2
 15576  2613  2E20               	goto	l7502
 15577  2614  3001               	movlw	1
 15578  2615                     u7565:	
 15579  2615  36B1               	lsrf	(___altoft@c+3)^(0+256),f
 15580  2616  0CB0               	rrf	(___altoft@c+2)^(0+256),f
 15581  2617  0CAF               	rrf	(___altoft@c+1)^(0+256),f
 15582  2618  0CAE               	rrf	___altoft@c^(0+256),f
 15583  2619  0B89               	decfsz	9,f
 15584  261A  2E15               	goto	u7565
 15585  261B  3001               	movlw	1
 15586  261C  00B2               	movwf	??___altoft^(0+256)
 15587  261D  0832               	movf	??___altoft^(0+256),w
 15588  261E  07B4               	addwf	___altoft@exp^(0+256),f
 15589  261F  2E10               	goto	l7500
 15590  2620                     l7502:	
 15591  2620  082E               	movf	___altoft@c^(0+256),w
 15592  2621  0021               	movlb	1	; select bank1
 15593  2622  00A0               	movwf	___ftpack@arg^(0+128)
 15594  2623  0022               	movlb	2	; select bank2
 15595  2624  082F               	movf	(___altoft@c+1)^(0+256),w
 15596  2625  0021               	movlb	1	; select bank1
 15597  2626  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 15598  2627  0022               	movlb	2	; select bank2
 15599  2628  0830               	movf	(___altoft@c+2)^(0+256),w
 15600  2629  0021               	movlb	1	; select bank1
 15601  262A  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 15602  262B  0022               	movlb	2	; select bank2
 15603  262C  0834               	movf	___altoft@exp^(0+256),w
 15604  262D  00B2               	movwf	??___altoft^(0+256)
 15605  262E  0832               	movf	??___altoft^(0+256),w
 15606  262F  0021               	movlb	1	; select bank1
 15607  2630  00A3               	movwf	___ftpack@exp^(0+128)
 15608  2631  0022               	movlb	2	; select bank2
 15609  2632  0835               	movf	___altoft@sign^(0+256),w
 15610  2633  00B3               	movwf	(??___altoft+1)^(0+256)
 15611  2634  0833               	movf	(??___altoft+1)^(0+256),w
 15612  2635  0021               	movlb	1	; select bank1
 15613  2636  00A4               	movwf	___ftpack@sign^(0+128)
 15614  2637  3188  2002         	fcall	___ftpack
 15615  2639  0021               	movlb	1	; select bank1
 15616  263A  0820               	movf	?___ftpack^(0+128),w
 15617  263B  0022               	movlb	2	; select bank2
 15618  263C  00AE               	movwf	?___altoft^(0+256)
 15619  263D  0021               	movlb	1	; select bank1
 15620  263E  0821               	movf	(?___ftpack+1)^(0+128),w
 15621  263F  0022               	movlb	2	; select bank2
 15622  2640  00AF               	movwf	(?___altoft+1)^(0+256)
 15623  2641  0021               	movlb	1	; select bank1
 15624  2642  0822               	movf	(?___ftpack+2)^(0+128),w
 15625  2643  0022               	movlb	2	; select bank2
 15626  2644  00B0               	movwf	(?___altoft+2)^(0+256)
 15627  2645  0008               	return
 15628  2646                     __end_of___altoft:	
 15629                           
 15630                           	psect	text48
 15631  278E                     __ptext48:	
 15632 ;; *************** function _eval_poly *****************
 15633 ;; Defined at:
 15634 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\evalpoly.c"
 15635 ;; Parameters:    Size  Location     Type
 15636 ;;  x               3   20[BANK2 ] float 
 15637 ;;  d               2   23[BANK2 ] PTR const 
 15638 ;;		 -> log@coeff(27), exp@coeff(30), sin@coeff_a(15), sin@coeff_b(12), 
 15639 ;;  n               2   25[BANK2 ] int 
 15640 ;; Auto vars:     Size  Location     Type
 15641 ;;  res             3   27[BANK2 ] int 
 15642 ;; Return value:  Size  Location     Type
 15643 ;;                  3   20[BANK2 ] int 
 15644 ;; Registers used:
 15645 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 15646 ;; Tracked objects:
 15647 ;;		On entry : 0/0
 15648 ;;		On exit  : 0/0
 15649 ;;		Unchanged: 0/0
 15650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15651 ;;      Params:         0       0       0       7       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15652 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15654 ;;      Totals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15655 ;;Total ram usage:       10 bytes
 15656 ;; Hardware stack levels used:    1
 15657 ;; Hardware stack levels required when called:    5
 15658 ;; This function calls:
 15659 ;;		___ftadd
 15660 ;;		___ftmul
 15661 ;;		___wmul
 15662 ;; This function is called by:
 15663 ;;		_sin
 15664 ;;		_exp
 15665 ;;		_log
 15666 ;; This function uses a non-reentrant model
 15667 ;;
 15668                           
 15669                           
 15670                           ;psect for function _eval_poly
 15671  278E                     _eval_poly:	
 15672                           
 15673                           ;incstack = 0
 15674                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 15675  278E  0022               	movlb	2	; select bank2
 15676  278F  083A               	movf	(eval_poly@n+1)^(0+256),w
 15677  2790  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 15678  2791  0839               	movf	eval_poly@n^(0+256),w
 15679  2792  00AE               	movwf	___wmul@multiplier^(0+256)
 15680  2793  3003               	movlw	3
 15681  2794  00B0               	movwf	___wmul@multiplicand^(0+256)
 15682  2795  3000               	movlw	0
 15683  2796  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 15684  2797  31A0  2030  31A7   	fcall	___wmul
 15685  279A  0022               	movlb	2	; select bank2
 15686  279B  0837               	movf	eval_poly@d^(0+256),w
 15687  279C  072E               	addwf	?___wmul^(0+256),w
 15688  279D  0084               	movwf	4
 15689  279E  0838               	movf	(eval_poly@d+1)^(0+256),w
 15690  279F  3D2F               	addwfc	(?___wmul+1)^(0+256),w
 15691  27A0  0085               	movwf	5
 15692  27A1  3F00               	moviw [0]fsr0
 15693  27A2  00BB               	movwf	eval_poly@res^(0+256)
 15694  27A3  3F01               	moviw [1]fsr0
 15695  27A4  00BC               	movwf	(eval_poly@res+1)^(0+256)
 15696  27A5  3F02               	moviw [2]fsr0
 15697  27A6                     L18:	
 15698  27A6  00BD               	movwf	(eval_poly@res+2)^(0+256)
 15699  27A7  0839               	movf	eval_poly@n^(0+256),w
 15700  27A8  043A               	iorwf	(eval_poly@n+1)^(0+256),w
 15701  27A9  1903               	btfsc	3,2
 15702  27AA  2FF9               	goto	l7862
 15703  27AB  30FF               	movlw	255
 15704  27AC  07B9               	addwf	eval_poly@n^(0+256),f
 15705  27AD  30FF               	movlw	255
 15706  27AE  3DBA               	addwfc	(eval_poly@n+1)^(0+256),f
 15707  27AF  083A               	movf	(eval_poly@n+1)^(0+256),w
 15708  27B0  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 15709  27B1  0839               	movf	eval_poly@n^(0+256),w
 15710  27B2  00AE               	movwf	___wmul@multiplier^(0+256)
 15711  27B3  3003               	movlw	3
 15712  27B4  00B0               	movwf	___wmul@multiplicand^(0+256)
 15713  27B5  3000               	movlw	0
 15714  27B6  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 15715  27B7  31A0  2030  31A7   	fcall	___wmul
 15716  27BA  0022               	movlb	2	; select bank2
 15717  27BB  0837               	movf	eval_poly@d^(0+256),w
 15718  27BC  072E               	addwf	?___wmul^(0+256),w
 15719  27BD  0084               	movwf	4
 15720  27BE  0838               	movf	(eval_poly@d+1)^(0+256),w
 15721  27BF  3D2F               	addwfc	(?___wmul+1)^(0+256),w
 15722  27C0  0085               	movwf	5
 15723  27C1  3F00               	moviw [0]fsr0
 15724  27C2  0021               	movlb	1	; select bank1
 15725  27C3  00C1               	movwf	___ftadd@f1^(0+128)
 15726  27C4  3F01               	moviw [1]fsr0
 15727  27C5  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 15728  27C6  3F02               	moviw [2]fsr0
 15729  27C7  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 15730  27C8  0022               	movlb	2	; select bank2
 15731  27C9  083B               	movf	eval_poly@res^(0+256),w
 15732  27CA  0021               	movlb	1	; select bank1
 15733  27CB  00AE               	movwf	___ftmul@f1^(0+128)
 15734  27CC  0022               	movlb	2	; select bank2
 15735  27CD  083C               	movf	(eval_poly@res+1)^(0+256),w
 15736  27CE  0021               	movlb	1	; select bank1
 15737  27CF  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15738  27D0  0022               	movlb	2	; select bank2
 15739  27D1  083D               	movf	(eval_poly@res+2)^(0+256),w
 15740  27D2  0021               	movlb	1	; select bank1
 15741  27D3  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15742  27D4  0022               	movlb	2	; select bank2
 15743  27D5  0834               	movf	eval_poly@x^(0+256),w
 15744  27D6  0021               	movlb	1	; select bank1
 15745  27D7  00B1               	movwf	___ftmul@f2^(0+128)
 15746  27D8  0022               	movlb	2	; select bank2
 15747  27D9  0835               	movf	(eval_poly@x+1)^(0+256),w
 15748  27DA  0021               	movlb	1	; select bank1
 15749  27DB  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15750  27DC  0022               	movlb	2	; select bank2
 15751  27DD  0836               	movf	(eval_poly@x+2)^(0+256),w
 15752  27DE  0021               	movlb	1	; select bank1
 15753  27DF  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15754  27E0  319E  2691  31A7   	fcall	___ftmul
 15755  27E3  0021               	movlb	1	; select bank1
 15756  27E4  082E               	movf	?___ftmul^(0+128),w
 15757  27E5  00C4               	movwf	___ftadd@f2^(0+128)
 15758  27E6  082F               	movf	(?___ftmul+1)^(0+128),w
 15759  27E7  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 15760  27E8  0830               	movf	(?___ftmul+2)^(0+128),w
 15761  27E9  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 15762  27EA  3191  2153  31A7   	fcall	___ftadd
 15763  27ED  0021               	movlb	1	; select bank1
 15764  27EE  0841               	movf	?___ftadd^(0+128),w
 15765  27EF  0022               	movlb	2	; select bank2
 15766  27F0  00BB               	movwf	eval_poly@res^(0+256)
 15767  27F1  0021               	movlb	1	; select bank1
 15768  27F2  0842               	movf	(?___ftadd+1)^(0+128),w
 15769  27F3  0022               	movlb	2	; select bank2
 15770  27F4  00BC               	movwf	(eval_poly@res+1)^(0+256)
 15771  27F5  0021               	movlb	1	; select bank1
 15772  27F6  0843               	movf	(?___ftadd+2)^(0+128),w
 15773  27F7  0022               	movlb	2	; select bank2
 15774  27F8  2FA6               	goto	L18
 15775  27F9                     l7862:	
 15776  27F9  083B               	movf	eval_poly@res^(0+256),w
 15777  27FA  00B4               	movwf	?_eval_poly^(0+256)
 15778  27FB  083C               	movf	(eval_poly@res+1)^(0+256),w
 15779  27FC  00B5               	movwf	(?_eval_poly+1)^(0+256)
 15780  27FD  083D               	movf	(eval_poly@res+2)^(0+256),w
 15781  27FE  00B6               	movwf	(?_eval_poly+2)^(0+256)
 15782  27FF  0008               	return
 15783  2800                     __end_of_eval_poly:	
 15784                           
 15785                           	psect	text49
 15786  2030                     __ptext49:	
 15787 ;; *************** function ___wmul *****************
 15788 ;; Defined at:
 15789 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
 15790 ;; Parameters:    Size  Location     Type
 15791 ;;  multiplier      2   14[BANK2 ] unsigned int 
 15792 ;;  multiplicand    2   16[BANK2 ] unsigned int 
 15793 ;; Auto vars:     Size  Location     Type
 15794 ;;  product         2   18[BANK2 ] unsigned int 
 15795 ;; Return value:  Size  Location     Type
 15796 ;;                  2   14[BANK2 ] unsigned int 
 15797 ;; Registers used:
 15798 ;;		wreg, status,2, status,0
 15799 ;; Tracked objects:
 15800 ;;		On entry : 0/0
 15801 ;;		On exit  : 0/0
 15802 ;;		Unchanged: 0/0
 15803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15804 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15805 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15807 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15808 ;;Total ram usage:        6 bytes
 15809 ;; Hardware stack levels used:    1
 15810 ;; Hardware stack levels required when called:    3
 15811 ;; This function calls:
 15812 ;;		Nothing
 15813 ;; This function is called by:
 15814 ;;		_calcSinArray
 15815 ;;		_updateModulationArray
 15816 ;;		_modSin
 15817 ;;		_eval_poly
 15818 ;; This function uses a non-reentrant model
 15819 ;;
 15820                           
 15821                           
 15822                           ;psect for function ___wmul
 15823  2030                     ___wmul:	
 15824                           
 15825                           ;incstack = 0
 15826                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 15827  2030  0022               	movlb	2	; select bank2
 15828  2031  01B2               	clrf	___wmul@product^(0+256)
 15829  2032  01B3               	clrf	(___wmul@product+1)^(0+256)
 15830  2033                     l7478:	
 15831  2033  1C2E               	btfss	___wmul@multiplier^(0+256),0
 15832  2034  2839               	goto	l1935
 15833  2035  0830               	movf	___wmul@multiplicand^(0+256),w
 15834  2036  07B2               	addwf	___wmul@product^(0+256),f
 15835  2037  0831               	movf	(___wmul@multiplicand+1)^(0+256),w
 15836  2038  3DB3               	addwfc	(___wmul@product+1)^(0+256),f
 15837  2039                     l1935:	
 15838  2039  3001               	movlw	1
 15839  203A                     u7525:	
 15840  203A  35B0               	lslf	___wmul@multiplicand^(0+256),f
 15841  203B  0DB1               	rlf	(___wmul@multiplicand+1)^(0+256),f
 15842  203C  0B89               	decfsz	9,f
 15843  203D  283A               	goto	u7525
 15844  203E  3001               	movlw	1
 15845  203F                     u7535:	
 15846  203F  36AF               	lsrf	(___wmul@multiplier+1)^(0+256),f
 15847  2040  0CAE               	rrf	___wmul@multiplier^(0+256),f
 15848  2041  0B89               	decfsz	9,f
 15849  2042  283F               	goto	u7535
 15850  2043  082E               	movf	___wmul@multiplier^(0+256),w
 15851  2044  042F               	iorwf	(___wmul@multiplier+1)^(0+256),w
 15852  2045  1D03               	btfss	3,2
 15853  2046  2833               	goto	l7478
 15854  2047  0833               	movf	(___wmul@product+1)^(0+256),w
 15855  2048  00AF               	movwf	(?___wmul+1)^(0+256)
 15856  2049  0832               	movf	___wmul@product^(0+256),w
 15857  204A  00AE               	movwf	?___wmul^(0+256)
 15858  204B  0008               	return
 15859  204C                     __end_of___wmul:	
 15860                           
 15861                           	psect	text50
 15862  1E91                     __ptext50:	
 15863 ;; *************** function ___ftmul *****************
 15864 ;; Defined at:
 15865 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
 15866 ;; Parameters:    Size  Location     Type
 15867 ;;  f1              3   14[BANK1 ] float 
 15868 ;;  f2              3   17[BANK1 ] float 
 15869 ;; Auto vars:     Size  Location     Type
 15870 ;;  f3_as_produc    3   25[BANK1 ] unsigned um
 15871 ;;  sign            1   29[BANK1 ] unsigned char 
 15872 ;;  cntr            1   28[BANK1 ] unsigned char 
 15873 ;;  exp             1   24[BANK1 ] unsigned char 
 15874 ;; Return value:  Size  Location     Type
 15875 ;;                  3   14[BANK1 ] float 
 15876 ;; Registers used:
 15877 ;;		wreg, status,2, status,0, pclath, cstack
 15878 ;; Tracked objects:
 15879 ;;		On entry : 0/0
 15880 ;;		On exit  : 0/0
 15881 ;;		Unchanged: 0/0
 15882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15883 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15884 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15885 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15886 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15887 ;;Total ram usage:       16 bytes
 15888 ;; Hardware stack levels used:    1
 15889 ;; Hardware stack levels required when called:    4
 15890 ;; This function calls:
 15891 ;;		___ftpack
 15892 ;; This function is called by:
 15893 ;;		_set_subdivision
 15894 ;;		_map
 15895 ;;		_scaleA100kPot
 15896 ;;		_scaleA10kPot
 15897 ;;		_scaleiA10kPot
 15898 ;;		_calcSinArray
 15899 ;;		_modSin
 15900 ;;		_modTri
 15901 ;;		_modSaw
 15902 ;;		_pow
 15903 ;;		_sin
 15904 ;;		_eval_poly
 15905 ;;		_exp
 15906 ;;		_log
 15907 ;;		_scalePotValue
 15908 ;;		_scaleiA100kPot
 15909 ;; This function uses a non-reentrant model
 15910 ;;
 15911                           
 15912                           
 15913                           ;psect for function ___ftmul
 15914  1E91                     ___ftmul:	
 15915                           
 15916                           ;incstack = 0
 15917                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 15918  1E91  0021               	movlb	1	; select bank1
 15919  1E92  082E               	movf	___ftmul@f1^(0+128),w
 15920  1E93  00B4               	movwf	??___ftmul^(0+128)
 15921  1E94  082F               	movf	(___ftmul@f1+1)^(0+128),w
 15922  1E95  00B5               	movwf	(??___ftmul^(0+128)+1)
 15923  1E96  0830               	movf	(___ftmul@f1+2)^(0+128),w
 15924  1E97  00B6               	movwf	(??___ftmul^(0+128)+2)
 15925  1E98  1003               	clrc
 15926  1E99  0D35               	rlf	(??___ftmul^(0+128)+1),w
 15927  1E9A  0D36               	rlf	(??___ftmul^(0+128)+2),w
 15928  1E9B  00B7               	movwf	(??___ftmul+3)^(0+128)
 15929  1E9C  0837               	movf	(??___ftmul+3)^(0+128),w
 15930  1E9D  00B8               	movwf	___ftmul@exp^(0+128)
 15931  1E9E  0838               	movf	___ftmul@exp^(0+128),w
 15932  1E9F  1D03               	btfss	3,2
 15933  1EA0  2EA8               	goto	l7602
 15934  1EA1  3000               	movlw	0
 15935  1EA2  00AE               	movwf	?___ftmul^(0+128)
 15936  1EA3  3000               	movlw	0
 15937  1EA4  00AF               	movwf	(?___ftmul+1)^(0+128)
 15938  1EA5  3000               	movlw	0
 15939  1EA6  00B0               	movwf	(?___ftmul+2)^(0+128)
 15940  1EA7  0008               	return
 15941  1EA8                     l7602:	
 15942  1EA8  0831               	movf	___ftmul@f2^(0+128),w
 15943  1EA9  00B4               	movwf	??___ftmul^(0+128)
 15944  1EAA  0832               	movf	(___ftmul@f2+1)^(0+128),w
 15945  1EAB  00B5               	movwf	(??___ftmul^(0+128)+1)
 15946  1EAC  0833               	movf	(___ftmul@f2+2)^(0+128),w
 15947  1EAD  00B6               	movwf	(??___ftmul^(0+128)+2)
 15948  1EAE  1003               	clrc
 15949  1EAF  0D35               	rlf	(??___ftmul^(0+128)+1),w
 15950  1EB0  0D36               	rlf	(??___ftmul^(0+128)+2),w
 15951  1EB1  00B7               	movwf	(??___ftmul+3)^(0+128)
 15952  1EB2  0837               	movf	(??___ftmul+3)^(0+128),w
 15953  1EB3  00BD               	movwf	___ftmul@sign^(0+128)
 15954  1EB4  083D               	movf	___ftmul@sign^(0+128),w
 15955  1EB5  1D03               	btfss	3,2
 15956  1EB6  2EBE               	goto	l7608
 15957  1EB7  3000               	movlw	0
 15958  1EB8  00AE               	movwf	?___ftmul^(0+128)
 15959  1EB9  3000               	movlw	0
 15960  1EBA  00AF               	movwf	(?___ftmul+1)^(0+128)
 15961  1EBB  3000               	movlw	0
 15962  1EBC  00B0               	movwf	(?___ftmul+2)^(0+128)
 15963  1EBD  0008               	return
 15964  1EBE                     l7608:	
 15965  1EBE  083D               	movf	___ftmul@sign^(0+128),w
 15966  1EBF  3E7B               	addlw	123
 15967  1EC0  00B4               	movwf	??___ftmul^(0+128)
 15968  1EC1  0834               	movf	??___ftmul^(0+128),w
 15969  1EC2  07B8               	addwf	___ftmul@exp^(0+128),f
 15970  1EC3  082E               	movf	___ftmul@f1^(0+128),w
 15971  1EC4  00B4               	movwf	??___ftmul^(0+128)
 15972  1EC5  082F               	movf	(___ftmul@f1+1)^(0+128),w
 15973  1EC6  00B5               	movwf	(??___ftmul^(0+128)+1)
 15974  1EC7  0830               	movf	(___ftmul@f1+2)^(0+128),w
 15975  1EC8  00B6               	movwf	(??___ftmul^(0+128)+2)
 15976  1EC9  3010               	movlw	16
 15977  1ECA                     u7865:	
 15978  1ECA  36B6               	lsrf	(??___ftmul^(0+128)+2),f
 15979  1ECB  0CB5               	rrf	(??___ftmul^(0+128)+1),f
 15980  1ECC  0CB4               	rrf	??___ftmul^(0+128),f
 15981  1ECD  0B89               	decfsz	9,f
 15982  1ECE  2ECA               	goto	u7865
 15983  1ECF  0834               	movf	??___ftmul^(0+128),w
 15984  1ED0  00B7               	movwf	(??___ftmul+3)^(0+128)
 15985  1ED1  0837               	movf	(??___ftmul+3)^(0+128),w
 15986  1ED2  00BD               	movwf	___ftmul@sign^(0+128)
 15987  1ED3  0831               	movf	___ftmul@f2^(0+128),w
 15988  1ED4  00B4               	movwf	??___ftmul^(0+128)
 15989  1ED5  0832               	movf	(___ftmul@f2+1)^(0+128),w
 15990  1ED6  00B5               	movwf	(??___ftmul^(0+128)+1)
 15991  1ED7  0833               	movf	(___ftmul@f2+2)^(0+128),w
 15992  1ED8  00B6               	movwf	(??___ftmul^(0+128)+2)
 15993  1ED9  3010               	movlw	16
 15994  1EDA                     u7875:	
 15995  1EDA  36B6               	lsrf	(??___ftmul^(0+128)+2),f
 15996  1EDB  0CB5               	rrf	(??___ftmul^(0+128)+1),f
 15997  1EDC  0CB4               	rrf	??___ftmul^(0+128),f
 15998  1EDD  0B89               	decfsz	9,f
 15999  1EDE  2EDA               	goto	u7875
 16000  1EDF  0834               	movf	??___ftmul^(0+128),w
 16001  1EE0  00B7               	movwf	(??___ftmul+3)^(0+128)
 16002  1EE1  0837               	movf	(??___ftmul+3)^(0+128),w
 16003  1EE2  06BD               	xorwf	___ftmul@sign^(0+128),f
 16004  1EE3  3080               	movlw	128
 16005  1EE4  00B4               	movwf	??___ftmul^(0+128)
 16006  1EE5  0834               	movf	??___ftmul^(0+128),w
 16007  1EE6  05BD               	andwf	___ftmul@sign^(0+128),f
 16008  1EE7  17AF               	bsf	(___ftmul@f1^(0+128)+1),7
 16009  1EE8  17B2               	bsf	(___ftmul@f2^(0+128)+1),7
 16010  1EE9  30FF               	movlw	255
 16011  1EEA  05B1               	andwf	___ftmul@f2^(0+128),f
 16012  1EEB  30FF               	movlw	255
 16013  1EEC  05B2               	andwf	(___ftmul@f2+1)^(0+128),f
 16014  1EED  3000               	movlw	0
 16015  1EEE  05B3               	andwf	(___ftmul@f2+2)^(0+128),f
 16016  1EEF  3000               	movlw	0
 16017  1EF0  00B9               	movwf	___ftmul@f3_as_product^(0+128)
 16018  1EF1  3000               	movlw	0
 16019  1EF2  00BA               	movwf	(___ftmul@f3_as_product+1)^(0+128)
 16020  1EF3  3000               	movlw	0
 16021  1EF4  00BB               	movwf	(___ftmul@f3_as_product+2)^(0+128)
 16022  1EF5  3007               	movlw	7
 16023  1EF6  00B4               	movwf	??___ftmul^(0+128)
 16024  1EF7  0834               	movf	??___ftmul^(0+128),w
 16025  1EF8  00BC               	movwf	___ftmul@cntr^(0+128)
 16026  1EF9                     l7620:	
 16027  1EF9  1C2E               	btfss	___ftmul@f1^(0+128),0
 16028  1EFA  2F01               	goto	l7624
 16029  1EFB  0831               	movf	___ftmul@f2^(0+128),w
 16030  1EFC  07B9               	addwf	___ftmul@f3_as_product^(0+128),f
 16031  1EFD  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16032  1EFE  3DBA               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
 16033  1EFF  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16034  1F00  3DBB               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
 16035  1F01                     l7624:	
 16036  1F01  3001               	movlw	1
 16037  1F02                     u7895:	
 16038  1F02  36B0               	lsrf	(___ftmul@f1+2)^(0+128),f
 16039  1F03  0CAF               	rrf	(___ftmul@f1+1)^(0+128),f
 16040  1F04  0CAE               	rrf	___ftmul@f1^(0+128),f
 16041  1F05  0B89               	decfsz	9,f
 16042  1F06  2F02               	goto	u7895
 16043  1F07  3001               	movlw	1
 16044  1F08                     u7905:	
 16045  1F08  35B1               	lslf	___ftmul@f2^(0+128),f
 16046  1F09  0DB2               	rlf	(___ftmul@f2+1)^(0+128),f
 16047  1F0A  0DB3               	rlf	(___ftmul@f2+2)^(0+128),f
 16048  1F0B  0B89               	decfsz	9,f
 16049  1F0C  2F08               	goto	u7905
 16050  1F0D  3001               	movlw	1
 16051  1F0E  02BC               	subwf	___ftmul@cntr^(0+128),f
 16052  1F0F  1D03               	btfss	3,2
 16053  1F10  2EF9               	goto	l7620
 16054  1F11  3009               	movlw	9
 16055  1F12  00B4               	movwf	??___ftmul^(0+128)
 16056  1F13  0834               	movf	??___ftmul^(0+128),w
 16057  1F14  00BC               	movwf	___ftmul@cntr^(0+128)
 16058  1F15                     l7632:	
 16059  1F15  1C2E               	btfss	___ftmul@f1^(0+128),0
 16060  1F16  2F1D               	goto	l7636
 16061  1F17  0831               	movf	___ftmul@f2^(0+128),w
 16062  1F18  07B9               	addwf	___ftmul@f3_as_product^(0+128),f
 16063  1F19  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16064  1F1A  3DBA               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
 16065  1F1B  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16066  1F1C  3DBB               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
 16067  1F1D                     l7636:	
 16068  1F1D  3001               	movlw	1
 16069  1F1E                     u7935:	
 16070  1F1E  36B0               	lsrf	(___ftmul@f1+2)^(0+128),f
 16071  1F1F  0CAF               	rrf	(___ftmul@f1+1)^(0+128),f
 16072  1F20  0CAE               	rrf	___ftmul@f1^(0+128),f
 16073  1F21  0B89               	decfsz	9,f
 16074  1F22  2F1E               	goto	u7935
 16075  1F23  3001               	movlw	1
 16076  1F24                     u7945:	
 16077  1F24  36BB               	lsrf	(___ftmul@f3_as_product+2)^(0+128),f
 16078  1F25  0CBA               	rrf	(___ftmul@f3_as_product+1)^(0+128),f
 16079  1F26  0CB9               	rrf	___ftmul@f3_as_product^(0+128),f
 16080  1F27  0B89               	decfsz	9,f
 16081  1F28  2F24               	goto	u7945
 16082  1F29  3001               	movlw	1
 16083  1F2A  02BC               	subwf	___ftmul@cntr^(0+128),f
 16084  1F2B  1D03               	btfss	3,2
 16085  1F2C  2F15               	goto	l7632
 16086  1F2D  0839               	movf	___ftmul@f3_as_product^(0+128),w
 16087  1F2E  00A0               	movwf	___ftpack@arg^(0+128)
 16088  1F2F  083A               	movf	(___ftmul@f3_as_product+1)^(0+128),w
 16089  1F30  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 16090  1F31  083B               	movf	(___ftmul@f3_as_product+2)^(0+128),w
 16091  1F32  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 16092  1F33  0838               	movf	___ftmul@exp^(0+128),w
 16093  1F34  00B4               	movwf	??___ftmul^(0+128)
 16094  1F35  0834               	movf	??___ftmul^(0+128),w
 16095  1F36  00A3               	movwf	___ftpack@exp^(0+128)
 16096  1F37  083D               	movf	___ftmul@sign^(0+128),w
 16097  1F38  00B5               	movwf	(??___ftmul+1)^(0+128)
 16098  1F39  0835               	movf	(??___ftmul+1)^(0+128),w
 16099  1F3A  00A4               	movwf	___ftpack@sign^(0+128)
 16100  1F3B  3188  2002         	fcall	___ftpack
 16101  1F3D  0021               	movlb	1	; select bank1
 16102  1F3E  0820               	movf	?___ftpack^(0+128),w
 16103  1F3F  00AE               	movwf	?___ftmul^(0+128)
 16104  1F40  0821               	movf	(?___ftpack+1)^(0+128),w
 16105  1F41  00AF               	movwf	(?___ftmul+1)^(0+128)
 16106  1F42  0822               	movf	(?___ftpack+2)^(0+128),w
 16107  1F43  00B0               	movwf	(?___ftmul+2)^(0+128)
 16108  1F44  0008               	return
 16109  1F45                     __end_of___ftmul:	
 16110                           
 16111                           	psect	text51
 16112  213F                     __ptext51:	
 16113 ;; *************** function ___ftsub *****************
 16114 ;; Defined at:
 16115 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftsub.c"
 16116 ;; Parameters:    Size  Location     Type
 16117 ;;  f2              3   31[BANK2 ] float 
 16118 ;;  f1              3   34[BANK2 ] float 
 16119 ;; Auto vars:     Size  Location     Type
 16120 ;;		None
 16121 ;; Return value:  Size  Location     Type
 16122 ;;                  3   31[BANK2 ] float 
 16123 ;; Registers used:
 16124 ;;		wreg, status,2, status,0, pclath, cstack
 16125 ;; Tracked objects:
 16126 ;;		On entry : 0/0
 16127 ;;		On exit  : 0/0
 16128 ;;		Unchanged: 0/0
 16129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16130 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16131 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16133 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16134 ;;Total ram usage:        6 bytes
 16135 ;; Hardware stack levels used:    1
 16136 ;; Hardware stack levels required when called:    5
 16137 ;; This function calls:
 16138 ;;		___ftadd
 16139 ;; This function is called by:
 16140 ;;		_sin
 16141 ;;		_exp
 16142 ;; This function uses a non-reentrant model
 16143 ;;
 16144                           
 16145                           
 16146                           ;psect for function ___ftsub
 16147  213F                     ___ftsub:	
 16148                           
 16149                           ;incstack = 0
 16150                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
 16151  213F  0022               	movlb	2	; select bank2
 16152  2140  0841               	movf	(___ftsub@f2+2)^(0+256),w
 16153  2141  0440               	iorwf	(___ftsub@f2+1)^(0+256),w
 16154  2142  043F               	iorwf	___ftsub@f2^(0+256),w
 16155  2143  1903               	skipnz
 16156  2144  2947               	goto	l7824
 16157  2145  3080               	movlw	128
 16158  2146  06C1               	xorwf	(___ftsub@f2+2)^(0+256),f
 16159  2147                     l7824:	
 16160  2147  0842               	movf	___ftsub@f1^(0+256),w
 16161  2148  0021               	movlb	1	; select bank1
 16162  2149  00C1               	movwf	___ftadd@f1^(0+128)
 16163  214A  0022               	movlb	2	; select bank2
 16164  214B  0843               	movf	(___ftsub@f1+1)^(0+256),w
 16165  214C  0021               	movlb	1	; select bank1
 16166  214D  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 16167  214E  0022               	movlb	2	; select bank2
 16168  214F  0844               	movf	(___ftsub@f1+2)^(0+256),w
 16169  2150  0021               	movlb	1	; select bank1
 16170  2151  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 16171  2152  0022               	movlb	2	; select bank2
 16172  2153  083F               	movf	___ftsub@f2^(0+256),w
 16173  2154  0021               	movlb	1	; select bank1
 16174  2155  00C4               	movwf	___ftadd@f2^(0+128)
 16175  2156  0022               	movlb	2	; select bank2
 16176  2157  0840               	movf	(___ftsub@f2+1)^(0+256),w
 16177  2158  0021               	movlb	1	; select bank1
 16178  2159  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 16179  215A  0022               	movlb	2	; select bank2
 16180  215B  0841               	movf	(___ftsub@f2+2)^(0+256),w
 16181  215C  0021               	movlb	1	; select bank1
 16182  215D  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 16183  215E  3191  2153         	fcall	___ftadd
 16184  2160  0021               	movlb	1	; select bank1
 16185  2161  0841               	movf	?___ftadd^(0+128),w
 16186  2162  0022               	movlb	2	; select bank2
 16187  2163  00BF               	movwf	?___ftsub^(0+256)
 16188  2164  0021               	movlb	1	; select bank1
 16189  2165  0842               	movf	(?___ftadd+1)^(0+128),w
 16190  2166  0022               	movlb	2	; select bank2
 16191  2167  00C0               	movwf	(?___ftsub+1)^(0+256)
 16192  2168  0021               	movlb	1	; select bank1
 16193  2169  0843               	movf	(?___ftadd+2)^(0+128),w
 16194  216A  0022               	movlb	2	; select bank2
 16195  216B  00C1               	movwf	(?___ftsub+2)^(0+256)
 16196  216C  0008               	return
 16197  216D                     __end_of___ftsub:	
 16198                           
 16199                           	psect	text52
 16200  1153                     __ptext52:	
 16201 ;; *************** function ___ftadd *****************
 16202 ;; Defined at:
 16203 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
 16204 ;; Parameters:    Size  Location     Type
 16205 ;;  f1              3   33[BANK1 ] float 
 16206 ;;  f2              3   36[BANK1 ] float 
 16207 ;; Auto vars:     Size  Location     Type
 16208 ;;  exp1            1   45[BANK1 ] unsigned char 
 16209 ;;  exp2            1   44[BANK1 ] unsigned char 
 16210 ;;  sign            1   43[BANK1 ] unsigned char 
 16211 ;; Return value:  Size  Location     Type
 16212 ;;                  3   33[BANK1 ] float 
 16213 ;; Registers used:
 16214 ;;		wreg, status,2, status,0, pclath, cstack
 16215 ;; Tracked objects:
 16216 ;;		On entry : 0/0
 16217 ;;		On exit  : 0/0
 16218 ;;		Unchanged: 0/0
 16219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16220 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16221 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16222 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16223 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16224 ;;Total ram usage:       13 bytes
 16225 ;; Hardware stack levels used:    1
 16226 ;; Hardware stack levels required when called:    4
 16227 ;; This function calls:
 16228 ;;		___ftpack
 16229 ;; This function is called by:
 16230 ;;		_map
 16231 ;;		_scaleiA10kPot
 16232 ;;		_modSin
 16233 ;;		_modTri
 16234 ;;		_modSaw
 16235 ;;		___ftsub
 16236 ;;		_sin
 16237 ;;		_eval_poly
 16238 ;;		_floor
 16239 ;;		_log
 16240 ;;		_scalePotValue
 16241 ;; This function uses a non-reentrant model
 16242 ;;
 16243                           
 16244                           
 16245                           ;psect for function ___ftadd
 16246  1153                     ___ftadd:	
 16247                           
 16248                           ;incstack = 0
 16249                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 16250  1153  0021               	movlb	1	; select bank1
 16251  1154  0841               	movf	___ftadd@f1^(0+128),w
 16252  1155  00C7               	movwf	??___ftadd^(0+128)
 16253  1156  0842               	movf	(___ftadd@f1+1)^(0+128),w
 16254  1157  00C8               	movwf	(??___ftadd^(0+128)+1)
 16255  1158  0843               	movf	(___ftadd@f1+2)^(0+128),w
 16256  1159  00C9               	movwf	(??___ftadd^(0+128)+2)
 16257  115A  1003               	clrc
 16258  115B  0D48               	rlf	(??___ftadd^(0+128)+1),w
 16259  115C  0D49               	rlf	(??___ftadd^(0+128)+2),w
 16260  115D  00CA               	movwf	(??___ftadd+3)^(0+128)
 16261  115E  084A               	movf	(??___ftadd+3)^(0+128),w
 16262  115F  00CD               	movwf	___ftadd@exp1^(0+128)
 16263  1160  0844               	movf	___ftadd@f2^(0+128),w
 16264  1161  00C7               	movwf	??___ftadd^(0+128)
 16265  1162  0845               	movf	(___ftadd@f2+1)^(0+128),w
 16266  1163  00C8               	movwf	(??___ftadd^(0+128)+1)
 16267  1164  0846               	movf	(___ftadd@f2+2)^(0+128),w
 16268  1165  00C9               	movwf	(??___ftadd^(0+128)+2)
 16269  1166  1003               	clrc
 16270  1167  0D48               	rlf	(??___ftadd^(0+128)+1),w
 16271  1168  0D49               	rlf	(??___ftadd^(0+128)+2),w
 16272  1169  00CA               	movwf	(??___ftadd+3)^(0+128)
 16273  116A  084A               	movf	(??___ftadd+3)^(0+128),w
 16274  116B  00CC               	movwf	___ftadd@exp2^(0+128)
 16275  116C  084D               	movf	___ftadd@exp1^(0+128),w
 16276  116D  1903               	btfsc	3,2
 16277  116E  297B               	goto	l7512
 16278  116F  084C               	movf	___ftadd@exp2^(0+128),w
 16279  1170  024D               	subwf	___ftadd@exp1^(0+128),w
 16280  1171  1803               	skipnc
 16281  1172  2982               	goto	l7516
 16282  1173  034D               	decf	___ftadd@exp1^(0+128),w
 16283  1174  3AFF               	xorlw	255
 16284  1175  074C               	addwf	___ftadd@exp2^(0+128),w
 16285  1176  00C7               	movwf	??___ftadd^(0+128)
 16286  1177  3019               	movlw	25
 16287  1178  0247               	subwf	??___ftadd^(0+128),w
 16288  1179  1C03               	skipc
 16289  117A  2982               	goto	l7516
 16290  117B                     l7512:	
 16291  117B  0844               	movf	___ftadd@f2^(0+128),w
 16292  117C  00C1               	movwf	?___ftadd^(0+128)
 16293  117D  0845               	movf	(___ftadd@f2+1)^(0+128),w
 16294  117E  00C2               	movwf	(?___ftadd+1)^(0+128)
 16295  117F  0846               	movf	(___ftadd@f2+2)^(0+128),w
 16296  1180  00C3               	movwf	(?___ftadd+2)^(0+128)
 16297  1181  0008               	return
 16298  1182                     l7516:	
 16299  1182  084C               	movf	___ftadd@exp2^(0+128),w
 16300  1183  1903               	btfsc	3,2
 16301  1184  0008               	return
 16302  1185  084D               	movf	___ftadd@exp1^(0+128),w
 16303  1186  024C               	subwf	___ftadd@exp2^(0+128),w
 16304  1187  1803               	skipnc
 16305  1188  2991               	goto	l7522
 16306  1189  034C               	decf	___ftadd@exp2^(0+128),w
 16307  118A  3AFF               	xorlw	255
 16308  118B  074D               	addwf	___ftadd@exp1^(0+128),w
 16309  118C  00C7               	movwf	??___ftadd^(0+128)
 16310  118D  3019               	movlw	25
 16311  118E  0247               	subwf	??___ftadd^(0+128),w
 16312  118F  1803               	btfsc	3,0
 16313  1190  0008               	return
 16314  1191                     l7522:	
 16315  1191  3006               	movlw	6
 16316  1192  00C7               	movwf	??___ftadd^(0+128)
 16317  1193  0847               	movf	??___ftadd^(0+128),w
 16318  1194  00CB               	movwf	___ftadd@sign^(0+128)
 16319  1195  1BC3               	btfsc	(___ftadd@f1+2)^(0+128),7
 16320  1196  17CB               	bsf	___ftadd@sign^(0+128),7
 16321  1197  1BC6               	btfsc	(___ftadd@f2+2)^(0+128),7
 16322  1198  174B               	bsf	___ftadd@sign^(0+128),6
 16323  1199  17C2               	bsf	(___ftadd@f1^(0+128)+1),7
 16324  119A  30FF               	movlw	255
 16325  119B  05C1               	andwf	___ftadd@f1^(0+128),f
 16326  119C  30FF               	movlw	255
 16327  119D  05C2               	andwf	(___ftadd@f1+1)^(0+128),f
 16328  119E  3000               	movlw	0
 16329  119F  05C3               	andwf	(___ftadd@f1+2)^(0+128),f
 16330  11A0  17C5               	bsf	(___ftadd@f2^(0+128)+1),7
 16331  11A1  30FF               	movlw	255
 16332  11A2  05C4               	andwf	___ftadd@f2^(0+128),f
 16333  11A3  30FF               	movlw	255
 16334  11A4  05C5               	andwf	(___ftadd@f2+1)^(0+128),f
 16335  11A5  3000               	movlw	0
 16336  11A6  05C6               	andwf	(___ftadd@f2+2)^(0+128),f
 16337  11A7  084C               	movf	___ftadd@exp2^(0+128),w
 16338  11A8  024D               	subwf	___ftadd@exp1^(0+128),w
 16339  11A9  1803               	skipnc
 16340  11AA  29CD               	goto	l7544
 16341  11AB                     l7534:	
 16342  11AB  3001               	movlw	1
 16343  11AC                     u7675:	
 16344  11AC  35C4               	lslf	___ftadd@f2^(0+128),f
 16345  11AD  0DC5               	rlf	(___ftadd@f2+1)^(0+128),f
 16346  11AE  0DC6               	rlf	(___ftadd@f2+2)^(0+128),f
 16347  11AF  0B89               	decfsz	9,f
 16348  11B0  29AC               	goto	u7675
 16349  11B1  3001               	movlw	1
 16350  11B2  02CC               	subwf	___ftadd@exp2^(0+128),f
 16351  11B3  084C               	movf	___ftadd@exp2^(0+128),w
 16352  11B4  064D               	xorwf	___ftadd@exp1^(0+128),w
 16353  11B5  1903               	skipnz
 16354  11B6  29C8               	goto	l7542
 16355  11B7  3001               	movlw	1
 16356  11B8  02CB               	subwf	___ftadd@sign^(0+128),f
 16357  11B9  084B               	movf	___ftadd@sign^(0+128),w
 16358  11BA  3907               	andlw	7
 16359  11BB  1903               	btfsc	3,2
 16360  11BC  29C8               	goto	l7542
 16361  11BD  29AB               	goto	l7534
 16362  11BE                     l7540:	
 16363  11BE  3001               	movlw	1
 16364  11BF                     u7705:	
 16365  11BF  36C3               	lsrf	(___ftadd@f1+2)^(0+128),f
 16366  11C0  0CC2               	rrf	(___ftadd@f1+1)^(0+128),f
 16367  11C1  0CC1               	rrf	___ftadd@f1^(0+128),f
 16368  11C2  0B89               	decfsz	9,f
 16369  11C3  29BF               	goto	u7705
 16370  11C4  3001               	movlw	1
 16371  11C5  00C7               	movwf	??___ftadd^(0+128)
 16372  11C6  0847               	movf	??___ftadd^(0+128),w
 16373  11C7  07CD               	addwf	___ftadd@exp1^(0+128),f
 16374  11C8                     l7542:	
 16375  11C8  084D               	movf	___ftadd@exp1^(0+128),w
 16376  11C9  064C               	xorwf	___ftadd@exp2^(0+128),w
 16377  11CA  1903               	btfsc	3,2
 16378  11CB  29F2               	goto	l2127
 16379  11CC  29BE               	goto	l7540
 16380  11CD                     l7544:	
 16381  11CD  084D               	movf	___ftadd@exp1^(0+128),w
 16382  11CE  024C               	subwf	___ftadd@exp2^(0+128),w
 16383  11CF  1803               	skipnc
 16384  11D0  29F2               	goto	l2127
 16385  11D1                     l7546:	
 16386  11D1  3001               	movlw	1
 16387  11D2                     u7735:	
 16388  11D2  35C1               	lslf	___ftadd@f1^(0+128),f
 16389  11D3  0DC2               	rlf	(___ftadd@f1+1)^(0+128),f
 16390  11D4  0DC3               	rlf	(___ftadd@f1+2)^(0+128),f
 16391  11D5  0B89               	decfsz	9,f
 16392  11D6  29D2               	goto	u7735
 16393  11D7  3001               	movlw	1
 16394  11D8  02CD               	subwf	___ftadd@exp1^(0+128),f
 16395  11D9  084C               	movf	___ftadd@exp2^(0+128),w
 16396  11DA  064D               	xorwf	___ftadd@exp1^(0+128),w
 16397  11DB  1903               	skipnz
 16398  11DC  29EE               	goto	l7554
 16399  11DD  3001               	movlw	1
 16400  11DE  02CB               	subwf	___ftadd@sign^(0+128),f
 16401  11DF  084B               	movf	___ftadd@sign^(0+128),w
 16402  11E0  3907               	andlw	7
 16403  11E1  1903               	btfsc	3,2
 16404  11E2  29EE               	goto	l7554
 16405  11E3  29D1               	goto	l7546
 16406  11E4                     l7552:	
 16407  11E4  3001               	movlw	1
 16408  11E5                     u7765:	
 16409  11E5  36C6               	lsrf	(___ftadd@f2+2)^(0+128),f
 16410  11E6  0CC5               	rrf	(___ftadd@f2+1)^(0+128),f
 16411  11E7  0CC4               	rrf	___ftadd@f2^(0+128),f
 16412  11E8  0B89               	decfsz	9,f
 16413  11E9  29E5               	goto	u7765
 16414  11EA  3001               	movlw	1
 16415  11EB  00C7               	movwf	??___ftadd^(0+128)
 16416  11EC  0847               	movf	??___ftadd^(0+128),w
 16417  11ED  07CC               	addwf	___ftadd@exp2^(0+128),f
 16418  11EE                     l7554:	
 16419  11EE  084D               	movf	___ftadd@exp1^(0+128),w
 16420  11EF  064C               	xorwf	___ftadd@exp2^(0+128),w
 16421  11F0  1D03               	skipz
 16422  11F1  29E4               	goto	l7552
 16423  11F2                     l2127:	
 16424  11F2  1FCB               	btfss	___ftadd@sign^(0+128),7
 16425  11F3  2A04               	goto	l7558
 16426  11F4  30FF               	movlw	255
 16427  11F5  06C1               	xorwf	___ftadd@f1^(0+128),f
 16428  11F6  30FF               	movlw	255
 16429  11F7  06C2               	xorwf	(___ftadd@f1+1)^(0+128),f
 16430  11F8  30FF               	movlw	255
 16431  11F9  06C3               	xorwf	(___ftadd@f1+2)^(0+128),f
 16432  11FA  3001               	movlw	1
 16433  11FB  07C1               	addwf	___ftadd@f1^(0+128),f
 16434  11FC  3000               	movlw	0
 16435  11FD  1803               	skipnc
 16436  11FE  3001               	movlw	1
 16437  11FF  07C2               	addwf	(___ftadd@f1+1)^(0+128),f
 16438  1200  3000               	movlw	0
 16439  1201  1803               	skipnc
 16440  1202  3001               	movlw	1
 16441  1203  07C3               	addwf	(___ftadd@f1+2)^(0+128),f
 16442  1204                     l7558:	
 16443  1204  1F4B               	btfss	___ftadd@sign^(0+128),6
 16444  1205  2A16               	goto	l7562
 16445  1206  30FF               	movlw	255
 16446  1207  06C4               	xorwf	___ftadd@f2^(0+128),f
 16447  1208  30FF               	movlw	255
 16448  1209  06C5               	xorwf	(___ftadd@f2+1)^(0+128),f
 16449  120A  30FF               	movlw	255
 16450  120B  06C6               	xorwf	(___ftadd@f2+2)^(0+128),f
 16451  120C  3001               	movlw	1
 16452  120D  07C4               	addwf	___ftadd@f2^(0+128),f
 16453  120E  3000               	movlw	0
 16454  120F  1803               	skipnc
 16455  1210  3001               	movlw	1
 16456  1211  07C5               	addwf	(___ftadd@f2+1)^(0+128),f
 16457  1212  3000               	movlw	0
 16458  1213  1803               	skipnc
 16459  1214  3001               	movlw	1
 16460  1215  07C6               	addwf	(___ftadd@f2+2)^(0+128),f
 16461  1216                     l7562:	
 16462  1216  01CB               	clrf	___ftadd@sign^(0+128)
 16463  1217  0841               	movf	___ftadd@f1^(0+128),w
 16464  1218  07C4               	addwf	___ftadd@f2^(0+128),f
 16465  1219  0842               	movf	(___ftadd@f1+1)^(0+128),w
 16466  121A  3DC5               	addwfc	(___ftadd@f2+1)^(0+128),f
 16467  121B  0843               	movf	(___ftadd@f1+2)^(0+128),w
 16468  121C  3DC6               	addwfc	(___ftadd@f2+2)^(0+128),f
 16469  121D  1FC6               	btfss	(___ftadd@f2+2)^(0+128),7
 16470  121E  2A31               	goto	l7572
 16471  121F  30FF               	movlw	255
 16472  1220  06C4               	xorwf	___ftadd@f2^(0+128),f
 16473  1221  30FF               	movlw	255
 16474  1222  06C5               	xorwf	(___ftadd@f2+1)^(0+128),f
 16475  1223  30FF               	movlw	255
 16476  1224  06C6               	xorwf	(___ftadd@f2+2)^(0+128),f
 16477  1225  3001               	movlw	1
 16478  1226  07C4               	addwf	___ftadd@f2^(0+128),f
 16479  1227  3000               	movlw	0
 16480  1228  1803               	skipnc
 16481  1229  3001               	movlw	1
 16482  122A  07C5               	addwf	(___ftadd@f2+1)^(0+128),f
 16483  122B  3000               	movlw	0
 16484  122C  1803               	skipnc
 16485  122D  3001               	movlw	1
 16486  122E  07C6               	addwf	(___ftadd@f2+2)^(0+128),f
 16487  122F  01CB               	clrf	___ftadd@sign^(0+128)
 16488  1230  0ACB               	incf	___ftadd@sign^(0+128),f
 16489  1231                     l7572:	
 16490  1231  0844               	movf	___ftadd@f2^(0+128),w
 16491  1232  00A0               	movwf	___ftpack@arg^(0+128)
 16492  1233  0845               	movf	(___ftadd@f2+1)^(0+128),w
 16493  1234  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 16494  1235  0846               	movf	(___ftadd@f2+2)^(0+128),w
 16495  1236  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 16496  1237  084D               	movf	___ftadd@exp1^(0+128),w
 16497  1238  00C7               	movwf	??___ftadd^(0+128)
 16498  1239  0847               	movf	??___ftadd^(0+128),w
 16499  123A  00A3               	movwf	___ftpack@exp^(0+128)
 16500  123B  084B               	movf	___ftadd@sign^(0+128),w
 16501  123C  00C8               	movwf	(??___ftadd+1)^(0+128)
 16502  123D  0848               	movf	(??___ftadd+1)^(0+128),w
 16503  123E  00A4               	movwf	___ftpack@sign^(0+128)
 16504  123F  3188  2002         	fcall	___ftpack
 16505  1241  0021               	movlb	1	; select bank1
 16506  1242  0820               	movf	?___ftpack^(0+128),w
 16507  1243  00C1               	movwf	?___ftadd^(0+128)
 16508  1244  0821               	movf	(?___ftpack+1)^(0+128),w
 16509  1245  00C2               	movwf	(?___ftadd+1)^(0+128)
 16510  1246  0822               	movf	(?___ftpack+2)^(0+128),w
 16511  1247  00C3               	movwf	(?___ftadd+2)^(0+128)
 16512  1248  0008               	return
 16513  1249                     __end_of___ftadd:	
 16514                           
 16515                           	psect	text53
 16516  2F63                     __ptext53:	
 16517 ;; *************** function ___ftneg *****************
 16518 ;; Defined at:
 16519 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
 16520 ;; Parameters:    Size  Location     Type
 16521 ;;  f1              3   30[BANK1 ] float 
 16522 ;; Auto vars:     Size  Location     Type
 16523 ;;		None
 16524 ;; Return value:  Size  Location     Type
 16525 ;;                  3   30[BANK1 ] float 
 16526 ;; Registers used:
 16527 ;;		wreg
 16528 ;; Tracked objects:
 16529 ;;		On entry : 0/0
 16530 ;;		On exit  : 0/0
 16531 ;;		Unchanged: 0/0
 16532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16533 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16534 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16536 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16537 ;;Total ram usage:        3 bytes
 16538 ;; Hardware stack levels used:    1
 16539 ;; Hardware stack levels required when called:    3
 16540 ;; This function calls:
 16541 ;;		Nothing
 16542 ;; This function is called by:
 16543 ;;		_map
 16544 ;;		_scaleiA10kPot
 16545 ;;		_modSin
 16546 ;;		_modTri
 16547 ;;		_modSaw
 16548 ;;		_pow
 16549 ;;		_sin
 16550 ;;		_exp
 16551 ;;		_ldexp
 16552 ;;		_scalePotValue
 16553 ;; This function uses a non-reentrant model
 16554 ;;
 16555                           
 16556                           
 16557                           ;psect for function ___ftneg
 16558  2F63                     ___ftneg:	
 16559                           
 16560                           ;incstack = 0
 16561                           ; Regs used in ___ftneg: [wreg]
 16562  2F63  0021               	movlb	1	; select bank1
 16563  2F64  0840               	movf	(___ftneg@f1+2)^(0+128),w
 16564  2F65  043F               	iorwf	(___ftneg@f1+1)^(0+128),w
 16565  2F66  043E               	iorwf	___ftneg@f1^(0+128),w
 16566  2F67  1903               	skipnz
 16567  2F68  0008               	return
 16568  2F69  3080               	movlw	128
 16569  2F6A  06C0               	xorwf	(___ftneg@f1+2)^(0+128),f
 16570  2F6B  0008               	return
 16571  2F6C                     __end_of___ftneg:	
 16572                           
 16573                           	psect	text54
 16574  1D3D                     __ptext54:	
 16575 ;; *************** function ___ftdiv *****************
 16576 ;; Defined at:
 16577 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
 16578 ;; Parameters:    Size  Location     Type
 16579 ;;  f2              3   46[BANK1 ] float 
 16580 ;;  f1              3   49[BANK1 ] float 
 16581 ;; Auto vars:     Size  Location     Type
 16582 ;;  f3              3   57[BANK1 ] float 
 16583 ;;  sign            1   61[BANK1 ] unsigned char 
 16584 ;;  exp             1   60[BANK1 ] unsigned char 
 16585 ;;  cntr            1   56[BANK1 ] unsigned char 
 16586 ;; Return value:  Size  Location     Type
 16587 ;;                  3   46[BANK1 ] float 
 16588 ;; Registers used:
 16589 ;;		wreg, status,2, status,0, pclath, cstack
 16590 ;; Tracked objects:
 16591 ;;		On entry : 0/0
 16592 ;;		On exit  : 0/0
 16593 ;;		Unchanged: 0/0
 16594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16595 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16596 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16597 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16598 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16599 ;;Total ram usage:       16 bytes
 16600 ;; Hardware stack levels used:    1
 16601 ;; Hardware stack levels required when called:    4
 16602 ;; This function calls:
 16603 ;;		___ftpack
 16604 ;; This function is called by:
 16605 ;;		_map
 16606 ;;		_scaleA100kPot
 16607 ;;		_scaleA10kPot
 16608 ;;		_scaleiA10kPot
 16609 ;;		_calcSinArray
 16610 ;;		_modSin
 16611 ;;		_modTri
 16612 ;;		_modSaw
 16613 ;;		_sin
 16614 ;;		_exp
 16615 ;;		_scalePotValue
 16616 ;;		_scaleiA100kPot
 16617 ;; This function uses a non-reentrant model
 16618 ;;
 16619                           
 16620                           
 16621                           ;psect for function ___ftdiv
 16622  1D3D                     ___ftdiv:	
 16623                           
 16624                           ;incstack = 0
 16625                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 16626  1D3D  0021               	movlb	1	; select bank1
 16627  1D3E  0851               	movf	___ftdiv@f1^(0+128),w
 16628  1D3F  00D4               	movwf	??___ftdiv^(0+128)
 16629  1D40  0852               	movf	(___ftdiv@f1+1)^(0+128),w
 16630  1D41  00D5               	movwf	(??___ftdiv^(0+128)+1)
 16631  1D42  0853               	movf	(___ftdiv@f1+2)^(0+128),w
 16632  1D43  00D6               	movwf	(??___ftdiv^(0+128)+2)
 16633  1D44  1003               	clrc
 16634  1D45  0D55               	rlf	(??___ftdiv^(0+128)+1),w
 16635  1D46  0D56               	rlf	(??___ftdiv^(0+128)+2),w
 16636  1D47  00D7               	movwf	(??___ftdiv+3)^(0+128)
 16637  1D48  0857               	movf	(??___ftdiv+3)^(0+128),w
 16638  1D49  00DC               	movwf	___ftdiv@exp^(0+128)
 16639  1D4A  085C               	movf	___ftdiv@exp^(0+128),w
 16640  1D4B  1D03               	btfss	3,2
 16641  1D4C  2D54               	goto	l7784
 16642  1D4D  3000               	movlw	0
 16643  1D4E  00CE               	movwf	?___ftdiv^(0+128)
 16644  1D4F  3000               	movlw	0
 16645  1D50  00CF               	movwf	(?___ftdiv+1)^(0+128)
 16646  1D51  3000               	movlw	0
 16647  1D52  00D0               	movwf	(?___ftdiv+2)^(0+128)
 16648  1D53  0008               	return
 16649  1D54                     l7784:	
 16650  1D54  084E               	movf	___ftdiv@f2^(0+128),w
 16651  1D55  00D4               	movwf	??___ftdiv^(0+128)
 16652  1D56  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 16653  1D57  00D5               	movwf	(??___ftdiv^(0+128)+1)
 16654  1D58  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 16655  1D59  00D6               	movwf	(??___ftdiv^(0+128)+2)
 16656  1D5A  1003               	clrc
 16657  1D5B  0D55               	rlf	(??___ftdiv^(0+128)+1),w
 16658  1D5C  0D56               	rlf	(??___ftdiv^(0+128)+2),w
 16659  1D5D  00D7               	movwf	(??___ftdiv+3)^(0+128)
 16660  1D5E  0857               	movf	(??___ftdiv+3)^(0+128),w
 16661  1D5F  00DD               	movwf	___ftdiv@sign^(0+128)
 16662  1D60  085D               	movf	___ftdiv@sign^(0+128),w
 16663  1D61  1D03               	btfss	3,2
 16664  1D62  2D6A               	goto	l7790
 16665  1D63  3000               	movlw	0
 16666  1D64  00CE               	movwf	?___ftdiv^(0+128)
 16667  1D65  3000               	movlw	0
 16668  1D66  00CF               	movwf	(?___ftdiv+1)^(0+128)
 16669  1D67  3000               	movlw	0
 16670  1D68  00D0               	movwf	(?___ftdiv+2)^(0+128)
 16671  1D69  0008               	return
 16672  1D6A                     l7790:	
 16673  1D6A  3000               	movlw	0
 16674  1D6B  00D9               	movwf	___ftdiv@f3^(0+128)
 16675  1D6C  3000               	movlw	0
 16676  1D6D  00DA               	movwf	(___ftdiv@f3+1)^(0+128)
 16677  1D6E  3000               	movlw	0
 16678  1D6F  00DB               	movwf	(___ftdiv@f3+2)^(0+128)
 16679  1D70  3089               	movlw	137
 16680  1D71  075D               	addwf	___ftdiv@sign^(0+128),w
 16681  1D72  00D4               	movwf	??___ftdiv^(0+128)
 16682  1D73  0854               	movf	??___ftdiv^(0+128),w
 16683  1D74  02DC               	subwf	___ftdiv@exp^(0+128),f
 16684  1D75  0851               	movf	___ftdiv@f1^(0+128),w
 16685  1D76  00D4               	movwf	??___ftdiv^(0+128)
 16686  1D77  0852               	movf	(___ftdiv@f1+1)^(0+128),w
 16687  1D78  00D5               	movwf	(??___ftdiv^(0+128)+1)
 16688  1D79  0853               	movf	(___ftdiv@f1+2)^(0+128),w
 16689  1D7A  00D6               	movwf	(??___ftdiv^(0+128)+2)
 16690  1D7B  3010               	movlw	16
 16691  1D7C                     u8165:	
 16692  1D7C  36D6               	lsrf	(??___ftdiv^(0+128)+2),f
 16693  1D7D  0CD5               	rrf	(??___ftdiv^(0+128)+1),f
 16694  1D7E  0CD4               	rrf	??___ftdiv^(0+128),f
 16695  1D7F  0B89               	decfsz	9,f
 16696  1D80  2D7C               	goto	u8165
 16697  1D81  0854               	movf	??___ftdiv^(0+128),w
 16698  1D82  00D7               	movwf	(??___ftdiv+3)^(0+128)
 16699  1D83  0857               	movf	(??___ftdiv+3)^(0+128),w
 16700  1D84  00DD               	movwf	___ftdiv@sign^(0+128)
 16701  1D85  084E               	movf	___ftdiv@f2^(0+128),w
 16702  1D86  00D4               	movwf	??___ftdiv^(0+128)
 16703  1D87  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 16704  1D88  00D5               	movwf	(??___ftdiv^(0+128)+1)
 16705  1D89  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 16706  1D8A  00D6               	movwf	(??___ftdiv^(0+128)+2)
 16707  1D8B  3010               	movlw	16
 16708  1D8C                     u8175:	
 16709  1D8C  36D6               	lsrf	(??___ftdiv^(0+128)+2),f
 16710  1D8D  0CD5               	rrf	(??___ftdiv^(0+128)+1),f
 16711  1D8E  0CD4               	rrf	??___ftdiv^(0+128),f
 16712  1D8F  0B89               	decfsz	9,f
 16713  1D90  2D8C               	goto	u8175
 16714  1D91  0854               	movf	??___ftdiv^(0+128),w
 16715  1D92  00D7               	movwf	(??___ftdiv+3)^(0+128)
 16716  1D93  0857               	movf	(??___ftdiv+3)^(0+128),w
 16717  1D94  06DD               	xorwf	___ftdiv@sign^(0+128),f
 16718  1D95  3080               	movlw	128
 16719  1D96  00D4               	movwf	??___ftdiv^(0+128)
 16720  1D97  0854               	movf	??___ftdiv^(0+128),w
 16721  1D98  05DD               	andwf	___ftdiv@sign^(0+128),f
 16722  1D99  17D2               	bsf	(___ftdiv@f1^(0+128)+1),7
 16723  1D9A  30FF               	movlw	255
 16724  1D9B  05D1               	andwf	___ftdiv@f1^(0+128),f
 16725  1D9C  30FF               	movlw	255
 16726  1D9D  05D2               	andwf	(___ftdiv@f1+1)^(0+128),f
 16727  1D9E  3000               	movlw	0
 16728  1D9F  05D3               	andwf	(___ftdiv@f1+2)^(0+128),f
 16729  1DA0  17CF               	bsf	(___ftdiv@f2^(0+128)+1),7
 16730  1DA1  30FF               	movlw	255
 16731  1DA2  05CE               	andwf	___ftdiv@f2^(0+128),f
 16732  1DA3  30FF               	movlw	255
 16733  1DA4  05CF               	andwf	(___ftdiv@f2+1)^(0+128),f
 16734  1DA5  3000               	movlw	0
 16735  1DA6  05D0               	andwf	(___ftdiv@f2+2)^(0+128),f
 16736  1DA7  3018               	movlw	24
 16737  1DA8  00D4               	movwf	??___ftdiv^(0+128)
 16738  1DA9  0854               	movf	??___ftdiv^(0+128),w
 16739  1DAA  00D8               	movwf	___ftdiv@cntr^(0+128)
 16740  1DAB                     l7804:	
 16741  1DAB  3001               	movlw	1
 16742  1DAC                     u8185:	
 16743  1DAC  35D9               	lslf	___ftdiv@f3^(0+128),f
 16744  1DAD  0DDA               	rlf	(___ftdiv@f3+1)^(0+128),f
 16745  1DAE  0DDB               	rlf	(___ftdiv@f3+2)^(0+128),f
 16746  1DAF  0B89               	decfsz	9,f
 16747  1DB0  2DAC               	goto	u8185
 16748  1DB1  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 16749  1DB2  0253               	subwf	(___ftdiv@f1+2)^(0+128),w
 16750  1DB3  1D03               	skipz
 16751  1DB4  2DBB               	goto	u8195
 16752  1DB5  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 16753  1DB6  0252               	subwf	(___ftdiv@f1+1)^(0+128),w
 16754  1DB7  1D03               	skipz
 16755  1DB8  2DBB               	goto	u8195
 16756  1DB9  084E               	movf	___ftdiv@f2^(0+128),w
 16757  1DBA  0251               	subwf	___ftdiv@f1^(0+128),w
 16758  1DBB                     u8195:	
 16759  1DBB  1C03               	skipc
 16760  1DBC  2DC4               	goto	l7812
 16761  1DBD  084E               	movf	___ftdiv@f2^(0+128),w
 16762  1DBE  02D1               	subwf	___ftdiv@f1^(0+128),f
 16763  1DBF  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 16764  1DC0  3BD2               	subwfb	(___ftdiv@f1+1)^(0+128),f
 16765  1DC1  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 16766  1DC2  3BD3               	subwfb	(___ftdiv@f1+2)^(0+128),f
 16767  1DC3  1459               	bsf	___ftdiv@f3^(0+128),0
 16768  1DC4                     l7812:	
 16769  1DC4  3001               	movlw	1
 16770  1DC5                     u8205:	
 16771  1DC5  35D1               	lslf	___ftdiv@f1^(0+128),f
 16772  1DC6  0DD2               	rlf	(___ftdiv@f1+1)^(0+128),f
 16773  1DC7  0DD3               	rlf	(___ftdiv@f1+2)^(0+128),f
 16774  1DC8  0B89               	decfsz	9,f
 16775  1DC9  2DC5               	goto	u8205
 16776  1DCA  3001               	movlw	1
 16777  1DCB  02D8               	subwf	___ftdiv@cntr^(0+128),f
 16778  1DCC  1D03               	btfss	3,2
 16779  1DCD  2DAB               	goto	l7804
 16780  1DCE  0859               	movf	___ftdiv@f3^(0+128),w
 16781  1DCF  00A0               	movwf	___ftpack@arg^(0+128)
 16782  1DD0  085A               	movf	(___ftdiv@f3+1)^(0+128),w
 16783  1DD1  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 16784  1DD2  085B               	movf	(___ftdiv@f3+2)^(0+128),w
 16785  1DD3  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 16786  1DD4  085C               	movf	___ftdiv@exp^(0+128),w
 16787  1DD5  00D4               	movwf	??___ftdiv^(0+128)
 16788  1DD6  0854               	movf	??___ftdiv^(0+128),w
 16789  1DD7  00A3               	movwf	___ftpack@exp^(0+128)
 16790  1DD8  085D               	movf	___ftdiv@sign^(0+128),w
 16791  1DD9  00D5               	movwf	(??___ftdiv+1)^(0+128)
 16792  1DDA  0855               	movf	(??___ftdiv+1)^(0+128),w
 16793  1DDB  00A4               	movwf	___ftpack@sign^(0+128)
 16794  1DDC  3188  2002         	fcall	___ftpack
 16795  1DDE  0021               	movlb	1	; select bank1
 16796  1DDF  0820               	movf	?___ftpack^(0+128),w
 16797  1DE0  00CE               	movwf	?___ftdiv^(0+128)
 16798  1DE1  0821               	movf	(?___ftpack+1)^(0+128),w
 16799  1DE2  00CF               	movwf	(?___ftdiv+1)^(0+128)
 16800  1DE3  0822               	movf	(?___ftpack+2)^(0+128),w
 16801  1DE4  00D0               	movwf	(?___ftdiv+2)^(0+128)
 16802  1DE5  0008               	return
 16803  1DE6                     __end_of___ftdiv:	
 16804                           
 16805                           	psect	text55
 16806  20A9                     __ptext55:	
 16807 ;; *************** function ___awtoft *****************
 16808 ;; Defined at:
 16809 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awtoft.c"
 16810 ;; Parameters:    Size  Location     Type
 16811 ;;  c               2    8[BANK1 ] int 
 16812 ;; Auto vars:     Size  Location     Type
 16813 ;;  sign            1   13[BANK1 ] unsigned char 
 16814 ;; Return value:  Size  Location     Type
 16815 ;;                  3    8[BANK1 ] float 
 16816 ;; Registers used:
 16817 ;;		wreg, status,2, status,0, pclath, cstack
 16818 ;; Tracked objects:
 16819 ;;		On entry : 0/0
 16820 ;;		On exit  : 0/0
 16821 ;;		Unchanged: 0/0
 16822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16823 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16824 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16825 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16826 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16827 ;;Total ram usage:        6 bytes
 16828 ;; Hardware stack levels used:    1
 16829 ;; Hardware stack levels required when called:    4
 16830 ;; This function calls:
 16831 ;;		___ftpack
 16832 ;; This function is called by:
 16833 ;;		_main
 16834 ;;		_set_subdivision
 16835 ;;		_calcSinArray
 16836 ;;		_updateModulationArray
 16837 ;;		_exp
 16838 ;;		_log
 16839 ;; This function uses a non-reentrant model
 16840 ;;
 16841                           
 16842                           
 16843                           ;psect for function ___awtoft
 16844  20A9                     ___awtoft:	
 16845                           
 16846                           ;incstack = 0
 16847                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 16848  20A9  0021               	movlb	1	; select bank1
 16849  20AA  01AD               	clrf	___awtoft@sign^(0+128)
 16850  20AB  1FA9               	btfss	(___awtoft@c+1)^(0+128),7
 16851  20AC  28B4               	goto	l7774
 16852  20AD  09A8               	comf	___awtoft@c^(0+128),f
 16853  20AE  09A9               	comf	(___awtoft@c+1)^(0+128),f
 16854  20AF  0AA8               	incf	___awtoft@c^(0+128),f
 16855  20B0  1903               	skipnz
 16856  20B1  0AA9               	incf	(___awtoft@c+1)^(0+128),f
 16857  20B2  01AD               	clrf	___awtoft@sign^(0+128)
 16858  20B3  0AAD               	incf	___awtoft@sign^(0+128),f
 16859  20B4                     l7774:	
 16860  20B4  0828               	movf	___awtoft@c^(0+128),w
 16861  20B5  00A0               	movwf	___ftpack@arg^(0+128)
 16862  20B6  0829               	movf	(___awtoft@c+1)^(0+128),w
 16863  20B7  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 16864  20B8  01A2               	clrf	(___ftpack@arg+2)^(0+128)
 16865  20B9  308E               	movlw	142
 16866  20BA  00AB               	movwf	??___awtoft^(0+128)
 16867  20BB  082B               	movf	??___awtoft^(0+128),w
 16868  20BC  00A3               	movwf	___ftpack@exp^(0+128)
 16869  20BD  082D               	movf	___awtoft@sign^(0+128),w
 16870  20BE  00AC               	movwf	(??___awtoft+1)^(0+128)
 16871  20BF  082C               	movf	(??___awtoft+1)^(0+128),w
 16872  20C0  00A4               	movwf	___ftpack@sign^(0+128)
 16873  20C1  3188  2002         	fcall	___ftpack
 16874  20C3  0021               	movlb	1	; select bank1
 16875  20C4  0820               	movf	?___ftpack^(0+128),w
 16876  20C5  00A8               	movwf	?___awtoft^(0+128)
 16877  20C6  0821               	movf	(?___ftpack+1)^(0+128),w
 16878  20C7  00A9               	movwf	(?___awtoft+1)^(0+128)
 16879  20C8  0822               	movf	(?___ftpack+2)^(0+128),w
 16880  20C9  00AA               	movwf	(?___awtoft+2)^(0+128)
 16881  20CA  0008               	return
 16882  20CB                     __end_of___awtoft:	
 16883                           
 16884                           	psect	text56
 16885  0802                     __ptext56:	
 16886 ;; *************** function ___ftpack *****************
 16887 ;; Defined at:
 16888 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
 16889 ;; Parameters:    Size  Location     Type
 16890 ;;  arg             3    0[BANK1 ] unsigned um
 16891 ;;  exp             1    3[BANK1 ] unsigned char 
 16892 ;;  sign            1    4[BANK1 ] unsigned char 
 16893 ;; Auto vars:     Size  Location     Type
 16894 ;;		None
 16895 ;; Return value:  Size  Location     Type
 16896 ;;                  3    0[BANK1 ] float 
 16897 ;; Registers used:
 16898 ;;		wreg, status,2, status,0
 16899 ;; Tracked objects:
 16900 ;;		On entry : 0/0
 16901 ;;		On exit  : 0/0
 16902 ;;		Unchanged: 0/0
 16903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16904 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16906 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16907 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16908 ;;Total ram usage:        8 bytes
 16909 ;; Hardware stack levels used:    1
 16910 ;; Hardware stack levels required when called:    3
 16911 ;; This function calls:
 16912 ;;		Nothing
 16913 ;; This function is called by:
 16914 ;;		___altoft
 16915 ;;		___awtoft
 16916 ;;		___ftadd
 16917 ;;		___ftdiv
 16918 ;;		___ftmul
 16919 ;;		___lltoft
 16920 ;; This function uses a non-reentrant model
 16921 ;;
 16922                           
 16923                           
 16924                           ;psect for function ___ftpack
 16925  0802                     ___ftpack:	
 16926                           
 16927                           ;incstack = 0
 16928                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 16929  0802  0021               	movlb	1	; select bank1
 16930  0803  0823               	movf	___ftpack@exp^(0+128),w
 16931  0804  1903               	btfsc	3,2
 16932  0805  280B               	goto	l7412
 16933  0806  0822               	movf	(___ftpack@arg+2)^(0+128),w
 16934  0807  0421               	iorwf	(___ftpack@arg+1)^(0+128),w
 16935  0808  0420               	iorwf	___ftpack@arg^(0+128),w
 16936  0809  1D03               	skipz
 16937  080A  281C               	goto	l7418
 16938  080B                     l7412:	
 16939  080B  3000               	movlw	0
 16940  080C  00A0               	movwf	?___ftpack^(0+128)
 16941  080D  3000               	movlw	0
 16942  080E  00A1               	movwf	(?___ftpack+1)^(0+128)
 16943  080F  3000               	movlw	0
 16944  0810  00A2               	movwf	(?___ftpack+2)^(0+128)
 16945  0811  0008               	return
 16946  0812                     l7416:	
 16947  0812  3001               	movlw	1
 16948  0813  00A5               	movwf	??___ftpack^(0+128)
 16949  0814  0825               	movf	??___ftpack^(0+128),w
 16950  0815  07A3               	addwf	___ftpack@exp^(0+128),f
 16951  0816  3001               	movlw	1
 16952  0817                     u7405:	
 16953  0817  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 16954  0818  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 16955  0819  0CA0               	rrf	___ftpack@arg^(0+128),f
 16956  081A  0B89               	decfsz	9,f
 16957  081B  2817               	goto	u7405
 16958  081C                     l7418:	
 16959  081C  30FE               	movlw	254
 16960  081D  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 16961  081E  1903               	btfsc	3,2
 16962  081F  2835               	goto	l2096
 16963  0820  2812               	goto	l7416
 16964  0821                     l7420:	
 16965  0821  3001               	movlw	1
 16966  0822  00A5               	movwf	??___ftpack^(0+128)
 16967  0823  0825               	movf	??___ftpack^(0+128),w
 16968  0824  07A3               	addwf	___ftpack@exp^(0+128),f
 16969  0825  3001               	movlw	1
 16970  0826  07A0               	addwf	___ftpack@arg^(0+128),f
 16971  0827  3000               	movlw	0
 16972  0828  1803               	skipnc
 16973  0829  3001               	movlw	1
 16974  082A  07A1               	addwf	(___ftpack@arg+1)^(0+128),f
 16975  082B  3000               	movlw	0
 16976  082C  1803               	skipnc
 16977  082D  3001               	movlw	1
 16978  082E  07A2               	addwf	(___ftpack@arg+2)^(0+128),f
 16979  082F  3001               	movlw	1
 16980  0830                     u7425:	
 16981  0830  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 16982  0831  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 16983  0832  0CA0               	rrf	___ftpack@arg^(0+128),f
 16984  0833  0B89               	decfsz	9,f
 16985  0834  2830               	goto	u7425
 16986  0835                     l2096:	
 16987  0835  30FF               	movlw	255
 16988  0836  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 16989  0837  1903               	btfsc	3,2
 16990  0838  2842               	goto	l7428
 16991  0839  2821               	goto	l7420
 16992  083A                     l7426:	
 16993  083A  3001               	movlw	1
 16994  083B  02A3               	subwf	___ftpack@exp^(0+128),f
 16995  083C  3001               	movlw	1
 16996  083D                     u7445:	
 16997  083D  35A0               	lslf	___ftpack@arg^(0+128),f
 16998  083E  0DA1               	rlf	(___ftpack@arg+1)^(0+128),f
 16999  083F  0DA2               	rlf	(___ftpack@arg+2)^(0+128),f
 17000  0840  0B89               	decfsz	9,f
 17001  0841  283D               	goto	u7445
 17002  0842                     l7428:	
 17003  0842  1BA1               	btfsc	(___ftpack@arg+1)^(0+128),7
 17004  0843  2848               	goto	l2103
 17005  0844  3002               	movlw	2
 17006  0845  0223               	subwf	___ftpack@exp^(0+128),w
 17007  0846  1803               	skipnc
 17008  0847  283A               	goto	l7426
 17009  0848                     l2103:	
 17010  0848  1823               	btfsc	___ftpack@exp^(0+128),0
 17011  0849  2850               	goto	l2104
 17012  084A  30FF               	movlw	255
 17013  084B  05A0               	andwf	___ftpack@arg^(0+128),f
 17014  084C  307F               	movlw	127
 17015  084D  05A1               	andwf	(___ftpack@arg+1)^(0+128),f
 17016  084E  30FF               	movlw	255
 17017  084F  05A2               	andwf	(___ftpack@arg+2)^(0+128),f
 17018  0850                     l2104:	
 17019  0850  1003               	clrc
 17020  0851  0CA3               	rrf	___ftpack@exp^(0+128),f
 17021  0852  0823               	movf	___ftpack@exp^(0+128),w
 17022  0853  00A5               	movwf	??___ftpack^(0+128)
 17023  0854  01A6               	clrf	(??___ftpack^(0+128)+1)
 17024  0855  01A7               	clrf	(??___ftpack^(0+128)+2)
 17025  0856  3010               	movlw	16
 17026  0857                     u7485:	
 17027  0857  35A5               	lslf	??___ftpack^(0+128),f
 17028  0858  0DA6               	rlf	(??___ftpack^(0+128)+1),f
 17029  0859  0DA7               	rlf	(??___ftpack^(0+128)+2),f
 17030  085A  0B89               	decfsz	9,f
 17031  085B  2857               	goto	u7485
 17032  085C  0825               	movf	??___ftpack^(0+128),w
 17033  085D  04A0               	iorwf	___ftpack@arg^(0+128),f
 17034  085E  0826               	movf	(??___ftpack+1)^(0+128),w
 17035  085F  04A1               	iorwf	(___ftpack@arg+1)^(0+128),f
 17036  0860  0827               	movf	(??___ftpack+2)^(0+128),w
 17037  0861  04A2               	iorwf	(___ftpack@arg+2)^(0+128),f
 17038  0862  0824               	movf	___ftpack@sign^(0+128),w
 17039  0863  1903               	btfsc	3,2
 17040  0864  0008               	return
 17041  0865  17A2               	bsf	(___ftpack@arg^(0+128)+2),7
 17042  0866  0008               	return
 17043  0867                     __end_of___ftpack:	
 17044                           
 17045                           	psect	text57
 17046  2F8E                     __ptext57:	
 17047 ;; *************** function _adc_convert *****************
 17048 ;; Defined at:
 17049 ;;		line 122 in file "user.c"
 17050 ;; Parameters:    Size  Location     Type
 17051 ;;  channel         1    wreg     unsigned char 
 17052 ;; Auto vars:     Size  Location     Type
 17053 ;;  channel         1    3[BANK1 ] unsigned char 
 17054 ;; Return value:  Size  Location     Type
 17055 ;;                  2    0[BANK1 ] unsigned int 
 17056 ;; Registers used:
 17057 ;;		wreg, status,2, status,0
 17058 ;; Tracked objects:
 17059 ;;		On entry : 0/0
 17060 ;;		On exit  : 0/0
 17061 ;;		Unchanged: 0/0
 17062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17063 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17064 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17065 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17066 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17067 ;;Total ram usage:        4 bytes
 17068 ;; Hardware stack levels used:    1
 17069 ;; Hardware stack levels required when called:    3
 17070 ;; This function calls:
 17071 ;;		Nothing
 17072 ;; This function is called by:
 17073 ;;		_main
 17074 ;; This function uses a non-reentrant model
 17075 ;;
 17076                           
 17077                           
 17078                           ;psect for function _adc_convert
 17079  2F8E                     _adc_convert:	
 17080                           
 17081                           ;incstack = 0
 17082                           ; Regs used in _adc_convert: [wreg+status,2+status,0]
 17083                           ;adc_convert@channel stored from wreg
 17084  2F8E  0021               	movlb	1	; select bank1
 17085  2F8F  00A3               	movwf	adc_convert@channel^(0+128)
 17086                           
 17087                           ;user.c: 123: ADCON0bits.CHS = channel;
 17088  2F90  0823               	movf	adc_convert@channel^(0+128),w
 17089  2F91  00A2               	movwf	??_adc_convert^(0+128)
 17090  2F92  0DA2               	rlf	??_adc_convert^(0+128),f
 17091  2F93  0DA2               	rlf	??_adc_convert^(0+128),f
 17092  2F94  081D               	movf	29,w	;volatile
 17093  2F95  0622               	xorwf	??_adc_convert^(0+128),w
 17094  2F96  3983               	andlw	-125
 17095  2F97  0622               	xorwf	??_adc_convert^(0+128),w
 17096  2F98  009D               	movwf	29	;volatile
 17097                           
 17098                           ;user.c: 124: ADCON0bits.GO = 0b1;
 17099  2F99  149D               	bsf	29,1	;volatile
 17100  2F9A                     l586:	
 17101                           ;user.c: 125: while (ADCON0bits.GO_nDONE);
 17102                           
 17103  2F9A  189D               	btfsc	29,1	;volatile
 17104  2F9B  2F9A               	goto	l586
 17105                           
 17106                           ;user.c: 126: return (ADRESH << 8) | ADRESL;
 17107  2F9C  081C               	movf	28,w	;volatile
 17108  2F9D  00A1               	movwf	(?_adc_convert+1)^(0+128)
 17109  2F9E  081B               	movf	27,w	;volatile
 17110  2F9F  00A0               	movwf	?_adc_convert^(0+128)
 17111  2FA0  0008               	return
 17112  2FA1                     __end_of_adc_convert:	
 17113                           
 17114                           	psect	text58
 17115  2494                     __ptext58:	
 17116 ;; *************** function _USARTInit *****************
 17117 ;; Defined at:
 17118 ;;		line 31 in file "usart_pic16.c"
 17119 ;; Parameters:    Size  Location     Type
 17120 ;;  baud_rate       2    0[BANK1 ] unsigned int 
 17121 ;; Auto vars:     Size  Location     Type
 17122 ;;		None
 17123 ;; Return value:  Size  Location     Type
 17124 ;;                  1    wreg      void 
 17125 ;; Registers used:
 17126 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 17127 ;; Tracked objects:
 17128 ;;		On entry : 0/0
 17129 ;;		On exit  : 0/0
 17130 ;;		Unchanged: 0/0
 17131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17132 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17133 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17134 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17135 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17136 ;;Total ram usage:        3 bytes
 17137 ;; Hardware stack levels used:    1
 17138 ;; Hardware stack levels required when called:    3
 17139 ;; This function calls:
 17140 ;;		Nothing
 17141 ;; This function is called by:
 17142 ;;		_main
 17143 ;; This function uses a non-reentrant model
 17144 ;;
 17145                           
 17146                           
 17147                           ;psect for function _USARTInit
 17148  2494                     _USARTInit:	
 17149                           
 17150                           ;usart_pic16.c: 34: UQFront=UQEnd=-1;
 17151                           
 17152                           ;incstack = 0
 17153                           ; Regs used in _USARTInit: [wreg-fsr0h+status,2+status,0]
 17154  2494  30FF               	movlw	255
 17155  2495  0020               	movlb	0	; select bank0
 17156  2496  00E4               	movwf	_UQEnd	;volatile
 17157  2497  0021               	movlb	1	; select bank1
 17158  2498  00A2               	movwf	??_USARTInit^(0+128)
 17159  2499  0822               	movf	??_USARTInit^(0+128),w
 17160  249A  00FD               	movwf	_UQFront	;volatile
 17161                           
 17162                           ;usart_pic16.c: 37: switch(baud_rate)
 17163  249B  2CA6               	goto	l8370
 17164  249C                     l8360:	
 17165                           ;usart_pic16.c: 38: {
 17166                           ;usart_pic16.c: 39: case 9600:
 17167                           
 17168                           
 17169                           ;usart_pic16.c: 40: SPBRG=103;
 17170  249C  3067               	movlw	103
 17171  249D  2CA3               	goto	L21
 17172  249E                     l8362:	
 17173                           ;usart_pic16.c: 42: case 19200:
 17174                           
 17175                           ;usart_pic16.c: 41: break;
 17176                           
 17177                           
 17178                           ;usart_pic16.c: 43: SPBRG=51;
 17179  249E  3033               	movlw	51
 17180  249F  2CA3               	goto	L21
 17181  24A0                     l8364:	
 17182                           ;usart_pic16.c: 45: case 31250:
 17183                           
 17184                           ;usart_pic16.c: 44: break;
 17185                           
 17186                           
 17187                           ;usart_pic16.c: 46: SPBRG = 31;
 17188  24A0  301F               	movlw	31
 17189  24A1  2CA3               	goto	L21
 17190  24A2                     l8366:	
 17191                           ;usart_pic16.c: 48: case 38400:
 17192                           
 17193                           ;usart_pic16.c: 47: break;
 17194                           
 17195                           
 17196                           ;usart_pic16.c: 49: SPBRG=25;
 17197  24A2  3019               	movlw	25
 17198  24A3                     L21:	
 17199  24A3  0023               	movlb	3	; select bank3
 17200  24A4  009B               	movwf	27	;volatile
 17201                           
 17202                           ;usart_pic16.c: 51: }
 17203                           
 17204                           ;usart_pic16.c: 50: break;
 17205  24A5  2CC9               	goto	l1703
 17206  24A6                     l8370:	
 17207                           
 17208                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 17209                           ; Switch size 1, requested type "space"
 17210                           ; Number of cases is 4, Range of values is 37 to 150
 17211                           ; switch strategies available:
 17212                           ; Name         Instructions Cycles
 17213                           ; simple_byte           13     7 (average)
 17214                           ; direct_byte          237     9 (fixed)
 17215                           ; jumptable            263     9 (fixed)
 17216                           ;	Chosen strategy is simple_byte
 17217  24A6  0021               	movlb	1	; select bank1
 17218  24A7  0821               	movf	(USARTInit@baud_rate+1)^(0+128),w
 17219  24A8  3A25               	xorlw	37	; case 37
 17220  24A9  1903               	skipnz
 17221  24AA  2CB5               	goto	l9396
 17222  24AB  3A6E               	xorlw	110	; case 75
 17223  24AC  1903               	skipnz
 17224  24AD  2CBA               	goto	l9398
 17225  24AE  3A31               	xorlw	49	; case 122
 17226  24AF  1903               	skipnz
 17227  24B0  2CBF               	goto	l9400
 17228  24B1  3AEC               	xorlw	236	; case 150
 17229  24B2  1903               	skipnz
 17230  24B3  2CC4               	goto	l9402
 17231  24B4  2CC9               	goto	l1703
 17232  24B5                     l9396:	
 17233                           
 17234                           ; Switch size 1, requested type "space"
 17235                           ; Number of cases is 1, Range of values is 128 to 128
 17236                           ; switch strategies available:
 17237                           ; Name         Instructions Cycles
 17238                           ; simple_byte            4     3 (average)
 17239                           ; direct_byte           11     9 (fixed)
 17240                           ; jumptable            263     9 (fixed)
 17241                           ;	Chosen strategy is simple_byte
 17242  24B5  0820               	movf	USARTInit@baud_rate^(0+128),w
 17243  24B6  3A80               	xorlw	128	; case 128
 17244  24B7  1903               	skipnz
 17245  24B8  2C9C               	goto	l8360
 17246  24B9  2CC9               	goto	l1703
 17247  24BA                     l9398:	
 17248                           
 17249                           ; Switch size 1, requested type "space"
 17250                           ; Number of cases is 1, Range of values is 0 to 0
 17251                           ; switch strategies available:
 17252                           ; Name         Instructions Cycles
 17253                           ; simple_byte            4     3 (average)
 17254                           ; direct_byte            8     6 (fixed)
 17255                           ; jumptable            260     6 (fixed)
 17256                           ;	Chosen strategy is simple_byte
 17257  24BA  0820               	movf	USARTInit@baud_rate^(0+128),w
 17258  24BB  3A00               	xorlw	0	; case 0
 17259  24BC  1903               	skipnz
 17260  24BD  2C9E               	goto	l8362
 17261  24BE  2CC9               	goto	l1703
 17262  24BF                     l9400:	
 17263                           
 17264                           ; Switch size 1, requested type "space"
 17265                           ; Number of cases is 1, Range of values is 18 to 18
 17266                           ; switch strategies available:
 17267                           ; Name         Instructions Cycles
 17268                           ; simple_byte            4     3 (average)
 17269                           ; direct_byte           11     9 (fixed)
 17270                           ; jumptable            263     9 (fixed)
 17271                           ;	Chosen strategy is simple_byte
 17272  24BF  0820               	movf	USARTInit@baud_rate^(0+128),w
 17273  24C0  3A12               	xorlw	18	; case 18
 17274  24C1  1903               	skipnz
 17275  24C2  2CA0               	goto	l8364
 17276  24C3  2CC9               	goto	l1703
 17277  24C4                     l9402:	
 17278                           
 17279                           ; Switch size 1, requested type "space"
 17280                           ; Number of cases is 1, Range of values is 0 to 0
 17281                           ; switch strategies available:
 17282                           ; Name         Instructions Cycles
 17283                           ; simple_byte            4     3 (average)
 17284                           ; direct_byte            8     6 (fixed)
 17285                           ; jumptable            260     6 (fixed)
 17286                           ;	Chosen strategy is simple_byte
 17287  24C4  0820               	movf	USARTInit@baud_rate^(0+128),w
 17288  24C5  3A00               	xorlw	0	; case 0
 17289  24C6  1903               	skipnz
 17290  24C7  2CA2               	goto	l8366
 17291  24C8  2CC9               	goto	l1703
 17292  24C9                     l1703:	
 17293                           
 17294                           ;usart_pic16.c: 53: TXSTAbits.TX9=0;
 17295  24C9  0023               	movlb	3	; select bank3
 17296  24CA  131E               	bcf	30,6	;volatile
 17297                           
 17298                           ;usart_pic16.c: 54: TXSTAbits.TXEN=1;
 17299  24CB  169E               	bsf	30,5	;volatile
 17300                           
 17301                           ;usart_pic16.c: 55: TXSTAbits.SYNC=0;
 17302  24CC  121E               	bcf	30,4	;volatile
 17303                           
 17304                           ;usart_pic16.c: 56: TXSTAbits.BRGH=1;
 17305  24CD  151E               	bsf	30,2	;volatile
 17306                           
 17307                           ;usart_pic16.c: 59: RCSTAbits.SPEN=1;
 17308  24CE  179D               	bsf	29,7	;volatile
 17309                           
 17310                           ;usart_pic16.c: 60: RCSTAbits.RX9=0;
 17311  24CF  131D               	bcf	29,6	;volatile
 17312                           
 17313                           ;usart_pic16.c: 61: RCSTAbits.CREN=1;
 17314  24D0  161D               	bsf	29,4	;volatile
 17315                           
 17316                           ;usart_pic16.c: 62: RCSTAbits.ADDEN=0;
 17317  24D1  119D               	bcf	29,3	;volatile
 17318                           
 17319                           ;usart_pic16.c: 65: RCIE=1;
 17320  24D2  0021               	movlb	1	; select bank1
 17321  24D3  1691               	bsf	17,5	;volatile
 17322                           
 17323                           ;usart_pic16.c: 66: PEIE=1;
 17324  24D4  170B               	bsf	11,6	;volatile
 17325                           
 17326                           ;usart_pic16.c: 68: (GIE = 1);
 17327  24D5  178B               	bsf	11,7	;volatile
 17328  24D6  0008               	return
 17329  24D7                     __end_of_USARTInit:	
 17330                           
 17331                           	psect	text59
 17332  1858                     __ptext59:	
 17333 ;; *************** function _ReadSavedSettings *****************
 17334 ;; Defined at:
 17335 ;;		line 234 in file "user.c"
 17336 ;; Parameters:    Size  Location     Type
 17337 ;;		None
 17338 ;; Auto vars:     Size  Location     Type
 17339 ;;		None
 17340 ;; Return value:  Size  Location     Type
 17341 ;;                  1    wreg      void 
 17342 ;; Registers used:
 17343 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 17344 ;; Tracked objects:
 17345 ;;		On entry : 0/0
 17346 ;;		On exit  : 0/0
 17347 ;;		Unchanged: 0/0
 17348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17351 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17352 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17353 ;;Total ram usage:        1 bytes
 17354 ;; Hardware stack levels used:    1
 17355 ;; Hardware stack levels required when called:    4
 17356 ;; This function calls:
 17357 ;;		_FLASH_ReadWord
 17358 ;;		_set_leds_bottom
 17359 ;;		_set_leds_top
 17360 ;; This function is called by:
 17361 ;;		_main
 17362 ;; This function uses a non-reentrant model
 17363 ;;
 17364                           
 17365                           
 17366                           ;psect for function _ReadSavedSettings
 17367  1858                     _ReadSavedSettings:	
 17368                           
 17369                           ;user.c: 236: top_push_state = FLASH_ReadWord(0x1F81);
 17370                           
 17371                           ;incstack = 0
 17372                           ; Regs used in _ReadSavedSettings: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 17373  1858  3081               	movlw	129
 17374  1859  0021               	movlb	1	; select bank1
 17375  185A  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 17376  185B  301F               	movlw	31
 17377  185C  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
 17378  185D  31A0  2068  3198   	fcall	_FLASH_ReadWord
 17379  1860  0021               	movlb	1	; select bank1
 17380  1861  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
 17381  1862  0020               	movlb	0	; select bank0
 17382  1863  00D2               	movwf	_top_push_state+1
 17383  1864  0021               	movlb	1	; select bank1
 17384  1865  0820               	movf	?_FLASH_ReadWord^(0+128),w
 17385  1866  0020               	movlb	0	; select bank0
 17386  1867  00D1               	movwf	_top_push_state
 17387                           
 17388                           ;user.c: 237: bottom_push_state = FLASH_ReadWord(0x1F82);
 17389  1868  3082               	movlw	130
 17390  1869  0021               	movlb	1	; select bank1
 17391  186A  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 17392  186B  301F               	movlw	31
 17393  186C  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
 17394  186D  31A0  2068  3198   	fcall	_FLASH_ReadWord
 17395  1870  0021               	movlb	1	; select bank1
 17396  1871  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
 17397  1872  0020               	movlb	0	; select bank0
 17398  1873  00CE               	movwf	_bottom_push_state+1
 17399  1874  0021               	movlb	1	; select bank1
 17400  1875  0820               	movf	?_FLASH_ReadWord^(0+128),w
 17401  1876  0020               	movlb	0	; select bank0
 17402  1877  00CD               	movwf	_bottom_push_state
 17403                           
 17404                           ;user.c: 239: if (top_push_state > 6) {
 17405  1878  0852               	movf	_top_push_state+1,w
 17406  1879  3A80               	xorlw	128
 17407  187A  0021               	movlb	1	; select bank1
 17408  187B  00A4               	movwf	??_ReadSavedSettings^(0+128)
 17409  187C  3080               	movlw	128
 17410  187D  0224               	subwf	??_ReadSavedSettings^(0+128),w
 17411  187E  1D03               	skipz
 17412  187F  2883               	goto	u8885
 17413  1880  3007               	movlw	7
 17414  1881  0020               	movlb	0	; select bank0
 17415  1882  0251               	subwf	_top_push_state,w
 17416  1883                     u8885:	
 17417  1883  1C03               	skipc
 17418  1884  288A               	goto	l633
 17419                           
 17420                           ;user.c: 241: top_push_state = 6;
 17421  1885  3006               	movlw	6
 17422  1886  0020               	movlb	0	; select bank0
 17423  1887  00D1               	movwf	_top_push_state
 17424  1888  3000               	movlw	0
 17425  1889  00D2               	movwf	_top_push_state+1
 17426  188A                     l633:	
 17427                           
 17428                           ;user.c: 242: }
 17429                           ;user.c: 243: if (bottom_push_state > 5) {
 17430  188A  0020               	movlb	0	; select bank0
 17431  188B  084E               	movf	_bottom_push_state+1,w
 17432  188C  3A80               	xorlw	128
 17433  188D  0021               	movlb	1	; select bank1
 17434  188E  00A4               	movwf	??_ReadSavedSettings^(0+128)
 17435  188F  3080               	movlw	128
 17436  1890  0224               	subwf	??_ReadSavedSettings^(0+128),w
 17437  1891  1D03               	skipz
 17438  1892  2896               	goto	u8895
 17439  1893  3006               	movlw	6
 17440  1894  0020               	movlb	0	; select bank0
 17441  1895  024D               	subwf	_bottom_push_state,w
 17442  1896                     u8895:	
 17443  1896  1C03               	skipc
 17444  1897  289D               	goto	l8424
 17445                           
 17446                           ;user.c: 245: bottom_push_state = 1;
 17447  1898  3001               	movlw	1
 17448  1899  0020               	movlb	0	; select bank0
 17449  189A  00CD               	movwf	_bottom_push_state
 17450  189B  3000               	movlw	0
 17451  189C  00CE               	movwf	_bottom_push_state+1
 17452  189D                     l8424:	
 17453                           
 17454                           ;user.c: 246: }
 17455                           ;user.c: 249: LATGbits.LATG1 = !switchBypass_state;
 17456  189D  0020               	movlb	0	; select bank0
 17457  189E  0857               	movf	_switchBypass_state,w
 17458  189F  1D03               	btfss	3,2
 17459  18A0  28A4               	goto	u8900
 17460  18A1  0027               	movlb	7	; select bank7
 17461  18A2  148D               	bsf	13,1	;volatile
 17462  18A3  28A6               	goto	l8426
 17463  18A4                     u8900:	
 17464  18A4  0027               	movlb	7	; select bank7
 17465  18A5  108D               	bcf	13,1	;volatile
 17466  18A6                     l8426:	
 17467                           
 17468                           ;user.c: 250: LATGbits.LATG2 = switchBypass_state;
 17469  18A6  0020               	movlb	0	; select bank0
 17470  18A7  0C57               	rrf	_switchBypass_state,w
 17471  18A8  0027               	movlb	7	; select bank7
 17472  18A9  1C03               	skipc
 17473  18AA  110D               	bcf	13,2	;volatile
 17474  18AB  1803               	skipnc
 17475  18AC  150D               	bsf	13,2	;volatile
 17476                           
 17477                           ;user.c: 251: LATBbits.LATB2 = 0;
 17478  18AD  0022               	movlb	2	; select bank2
 17479  18AE  110D               	bcf	13,2	;volatile
 17480                           
 17481                           ;user.c: 252: LATBbits.LATB3 = 0;
 17482  18AF  118D               	bcf	13,3	;volatile
 17483                           
 17484                           ;user.c: 254: LATBbits.LATB4 = 0;
 17485  18B0  120D               	bcf	13,4	;volatile
 17486                           
 17487                           ;user.c: 255: LATBbits.LATB5 = 0;
 17488  18B1  128D               	bcf	13,5	;volatile
 17489                           
 17490                           ;user.c: 257: LATBbits.LATB1 = 0;
 17491  18B2  108D               	bcf	13,1	;volatile
 17492                           
 17493                           ;user.c: 258: LATBbits.LATB0 = 0;
 17494  18B3  100D               	bcf	13,0	;volatile
 17495                           
 17496                           ;user.c: 261: set_leds_top(top_push_state, 1);
 17497  18B4  0020               	movlb	0	; select bank0
 17498  18B5  0852               	movf	_top_push_state+1,w
 17499  18B6  0021               	movlb	1	; select bank1
 17500  18B7  00A1               	movwf	(set_leds_top@x+1)^(0+128)
 17501  18B8  0020               	movlb	0	; select bank0
 17502  18B9  0851               	movf	_top_push_state,w
 17503  18BA  0021               	movlb	1	; select bank1
 17504  18BB  00A0               	movwf	set_leds_top@x^(0+128)
 17505  18BC  3001               	movlw	1
 17506  18BD  00A2               	movwf	set_leds_top@ledState^(0+128)
 17507  18BE  3000               	movlw	0
 17508  18BF  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
 17509  18C0  3198  2004  3198   	fcall	_set_leds_top
 17510                           
 17511                           ;user.c: 262: set_leds_bottom(bottom_push_state);
 17512  18C3  0020               	movlb	0	; select bank0
 17513  18C4  084E               	movf	_bottom_push_state+1,w
 17514  18C5  0021               	movlb	1	; select bank1
 17515  18C6  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
 17516  18C7  0020               	movlb	0	; select bank0
 17517  18C8  084D               	movf	_bottom_push_state,w
 17518  18C9  0021               	movlb	1	; select bank1
 17519  18CA  00A0               	movwf	set_leds_bottom@x^(0+128)
 17520  18CB  31A2  22A0         	fcall	_set_leds_bottom
 17521  18CD  0008               	return
 17522  18CE                     __end_of_ReadSavedSettings:	
 17523                           
 17524                           	psect	text60
 17525  1804                     __ptext60:	
 17526 ;; *************** function _set_leds_top *****************
 17527 ;; Defined at:
 17528 ;;		line 16 in file "LEDs.c"
 17529 ;; Parameters:    Size  Location     Type
 17530 ;;  x               2    0[BANK1 ] int 
 17531 ;;  ledState        2    2[BANK1 ] int 
 17532 ;; Auto vars:     Size  Location     Type
 17533 ;;		None
 17534 ;; Return value:  Size  Location     Type
 17535 ;;                  1    wreg      void 
 17536 ;; Registers used:
 17537 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 17538 ;; Tracked objects:
 17539 ;;		On entry : 0/0
 17540 ;;		On exit  : 0/0
 17541 ;;		Unchanged: 0/0
 17542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17543 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17546 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17547 ;;Total ram usage:        4 bytes
 17548 ;; Hardware stack levels used:    1
 17549 ;; Hardware stack levels required when called:    3
 17550 ;; This function calls:
 17551 ;;		Nothing
 17552 ;; This function is called by:
 17553 ;;		_ReadSavedSettings
 17554 ;;		_ring_tactiles
 17555 ;;		_solidring_tactiles
 17556 ;;		_read_top_tactile
 17557 ;;		_setPresetDisplay
 17558 ;;		_resetRingLEDs
 17559 ;;		_setExpressionDisplay
 17560 ;;		_star_tactiles
 17561 ;; This function uses a non-reentrant model
 17562 ;;
 17563                           
 17564                           
 17565                           ;psect for function _set_leds_top
 17566  1804                     _set_leds_top:	
 17567                           
 17568                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 17569                           
 17570                           ;incstack = 0
 17571                           ; Regs used in _set_leds_top: [wreg-fsr0h+status,2+status,0]
 17572  1804  0027               	movlb	7	; select bank7
 17573  1805  100C               	bcf	12,0	;volatile
 17574                           
 17575                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 17576  1806  108C               	bcf	12,1	;volatile
 17577                           
 17578                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 17579  1807  110C               	bcf	12,2	;volatile
 17580                           
 17581                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 17582  1808  118C               	bcf	12,3	;volatile
 17583                           
 17584                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 17585  1809  120C               	bcf	12,4	;volatile
 17586                           
 17587                           ;LEDs.c: 22: switch (x) {
 17588  180A  283A               	goto	l7454
 17589  180B                     l7442:	
 17590                           ;LEDs.c: 23: case 1:
 17591                           
 17592                           
 17593                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 17594  180B  0021               	movlb	1	; select bank1
 17595  180C  0C22               	rrf	set_leds_top@ledState^(0+128),w
 17596  180D  0027               	movlb	7	; select bank7
 17597  180E  1C03               	skipc
 17598  180F  100C               	bcf	12,0	;volatile
 17599  1810  1803               	skipnc
 17600  1811  140C               	bsf	12,0	;volatile
 17601                           
 17602                           ;LEDs.c: 25: break;
 17603  1812  0008               	return
 17604  1813                     l7444:	
 17605                           ;LEDs.c: 26: case 2:
 17606                           
 17607                           
 17608                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 17609  1813  0021               	movlb	1	; select bank1
 17610  1814  0C22               	rrf	set_leds_top@ledState^(0+128),w
 17611  1815  0027               	movlb	7	; select bank7
 17612  1816  1C03               	skipc
 17613  1817  108C               	bcf	12,1	;volatile
 17614  1818  1803               	skipnc
 17615  1819  148C               	bsf	12,1	;volatile
 17616                           
 17617                           ;LEDs.c: 28: break;
 17618  181A  0008               	return
 17619  181B                     l7446:	
 17620                           ;LEDs.c: 29: case 3:
 17621                           
 17622                           
 17623                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 17624  181B  0021               	movlb	1	; select bank1
 17625  181C  0C22               	rrf	set_leds_top@ledState^(0+128),w
 17626  181D  0027               	movlb	7	; select bank7
 17627  181E  1C03               	skipc
 17628  181F  110C               	bcf	12,2	;volatile
 17629  1820  1803               	skipnc
 17630  1821  150C               	bsf	12,2	;volatile
 17631                           
 17632                           ;LEDs.c: 31: break;
 17633  1822  0008               	return
 17634  1823                     l7448:	
 17635                           ;LEDs.c: 32: case 4:
 17636                           
 17637                           
 17638                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 17639  1823  0021               	movlb	1	; select bank1
 17640  1824  0C22               	rrf	set_leds_top@ledState^(0+128),w
 17641  1825  0027               	movlb	7	; select bank7
 17642  1826  1C03               	skipc
 17643  1827  118C               	bcf	12,3	;volatile
 17644  1828  1803               	skipnc
 17645  1829  158C               	bsf	12,3	;volatile
 17646                           
 17647                           ;LEDs.c: 34: break;
 17648  182A  0008               	return
 17649  182B                     l7450:	
 17650                           ;LEDs.c: 35: case 5:
 17651                           
 17652                           
 17653                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 17654  182B  0021               	movlb	1	; select bank1
 17655  182C  0C22               	rrf	set_leds_top@ledState^(0+128),w
 17656  182D  0027               	movlb	7	; select bank7
 17657  182E  1C03               	skipc
 17658  182F  120C               	bcf	12,4	;volatile
 17659  1830  1803               	skipnc
 17660  1831  160C               	bsf	12,4	;volatile
 17661                           
 17662                           ;LEDs.c: 39: break;
 17663                           
 17664                           ;LEDs.c: 38: case 6:
 17665                           
 17666                           ;LEDs.c: 37: break;
 17667  1832  0008               	return
 17668  1833                     l792:	
 17669                           ;LEDs.c: 40: case 100:
 17670                           
 17671                           
 17672                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 17673  1833  0027               	movlb	7	; select bank7
 17674  1834  140C               	bsf	12,0	;volatile
 17675                           
 17676                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 17677  1835  148C               	bsf	12,1	;volatile
 17678                           
 17679                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 17680  1836  150C               	bsf	12,2	;volatile
 17681                           
 17682                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 17683  1837  158C               	bsf	12,3	;volatile
 17684                           
 17685                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 17686  1838  160C               	bsf	12,4	;volatile
 17687                           
 17688                           ;LEDs.c: 47: }
 17689                           
 17690                           ;LEDs.c: 46: break;
 17691  1839  0008               	return
 17692  183A                     l7454:	
 17693                           
 17694                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17695                           ; Switch size 1, requested type "space"
 17696                           ; Number of cases is 1, Range of values is 0 to 0
 17697                           ; switch strategies available:
 17698                           ; Name         Instructions Cycles
 17699                           ; simple_byte            4     3 (average)
 17700                           ; direct_byte            8     6 (fixed)
 17701                           ; jumptable            260     6 (fixed)
 17702                           ;	Chosen strategy is simple_byte
 17703  183A  0021               	movlb	1	; select bank1
 17704  183B  0821               	movf	(set_leds_top@x+1)^(0+128),w
 17705  183C  3A00               	xorlw	0	; case 0
 17706  183D  1903               	skipnz
 17707  183E  2840               	goto	l9404
 17708  183F  2857               	goto	l793
 17709  1840                     l9404:	
 17710                           
 17711                           ; Switch size 1, requested type "space"
 17712                           ; Number of cases is 7, Range of values is 1 to 100
 17713                           ; switch strategies available:
 17714                           ; Name         Instructions Cycles
 17715                           ; simple_byte           22    12 (average)
 17716                           ; direct_byte          209     9 (fixed)
 17717                           ; jumptable            263     9 (fixed)
 17718                           ;	Chosen strategy is simple_byte
 17719  1840  0820               	movf	set_leds_top@x^(0+128),w
 17720  1841  3A01               	xorlw	1	; case 1
 17721  1842  1903               	skipnz
 17722  1843  280B               	goto	l7442
 17723  1844  3A03               	xorlw	3	; case 2
 17724  1845  1903               	skipnz
 17725  1846  2813               	goto	l7444
 17726  1847  3A01               	xorlw	1	; case 3
 17727  1848  1903               	skipnz
 17728  1849  281B               	goto	l7446
 17729  184A  3A07               	xorlw	7	; case 4
 17730  184B  1903               	skipnz
 17731  184C  2823               	goto	l7448
 17732  184D  3A01               	xorlw	1	; case 5
 17733  184E  1903               	skipnz
 17734  184F  282B               	goto	l7450
 17735  1850  3A03               	xorlw	3	; case 6
 17736  1851  1903               	skipnz
 17737  1852  2857               	goto	l793
 17738  1853  3A62               	xorlw	98	; case 100
 17739  1854  1903               	skipnz
 17740  1855  2833               	goto	l792
 17741  1856  2857               	goto	l793
 17742  1857                     l793:	
 17743  1857  0008               	return
 17744  1858                     __end_of_set_leds_top:	
 17745                           
 17746                           	psect	text61
 17747  22A0                     __ptext61:	
 17748 ;; *************** function _set_leds_bottom *****************
 17749 ;; Defined at:
 17750 ;;		line 51 in file "LEDs.c"
 17751 ;; Parameters:    Size  Location     Type
 17752 ;;  x               2    0[BANK1 ] int 
 17753 ;; Auto vars:     Size  Location     Type
 17754 ;;		None
 17755 ;; Return value:  Size  Location     Type
 17756 ;;                  1    wreg      void 
 17757 ;; Registers used:
 17758 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 17759 ;; Tracked objects:
 17760 ;;		On entry : 0/0
 17761 ;;		On exit  : 0/0
 17762 ;;		Unchanged: 0/0
 17763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17764 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17767 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17768 ;;Total ram usage:        2 bytes
 17769 ;; Hardware stack levels used:    1
 17770 ;; Hardware stack levels required when called:    3
 17771 ;; This function calls:
 17772 ;;		Nothing
 17773 ;; This function is called by:
 17774 ;;		_ReadSavedSettings
 17775 ;;		_ring_tactiles
 17776 ;;		_solidring_tactiles
 17777 ;;		_read_bottom_tactile
 17778 ;;		_setPresetDisplay
 17779 ;;		_resetRingLEDs
 17780 ;;		_setExpressionDisplay
 17781 ;;		_star_tactiles
 17782 ;; This function uses a non-reentrant model
 17783 ;;
 17784                           
 17785                           
 17786                           ;psect for function _set_leds_bottom
 17787  22A0                     _set_leds_bottom:	
 17788                           
 17789                           ;LEDs.c: 52: LATDbits.LATD0 = 0;
 17790                           
 17791                           ;incstack = 0
 17792                           ; Regs used in _set_leds_bottom: [wreg-fsr0h+status,2+status,0]
 17793  22A0  0022               	movlb	2	; select bank2
 17794  22A1  100F               	bcf	15,0	;volatile
 17795                           
 17796                           ;LEDs.c: 53: LATDbits.LATD1 = 0;
 17797  22A2  108F               	bcf	15,1	;volatile
 17798                           
 17799                           ;LEDs.c: 54: LATDbits.LATD2 = 0;
 17800  22A3  110F               	bcf	15,2	;volatile
 17801                           
 17802                           ;LEDs.c: 55: LATDbits.LATD3 = 0;
 17803  22A4  118F               	bcf	15,3	;volatile
 17804                           
 17805                           ;LEDs.c: 56: LATDbits.LATD4 = 0;
 17806  22A5  120F               	bcf	15,4	;volatile
 17807                           
 17808                           ;LEDs.c: 57: switch (x) {
 17809  22A6  2ABD               	goto	l7470
 17810  22A7                     l797:	
 17811                           ;LEDs.c: 58: case 1:
 17812                           
 17813                           
 17814                           ;LEDs.c: 59: LATDbits.LATD0 = 1;
 17815  22A7  0022               	movlb	2	; select bank2
 17816  22A8  140F               	bsf	15,0	;volatile
 17817                           
 17818                           ;LEDs.c: 60: break;
 17819  22A9  0008               	return
 17820  22AA                     l799:	
 17821                           ;LEDs.c: 61: case 2:
 17822                           
 17823                           
 17824                           ;LEDs.c: 62: LATDbits.LATD1 = 1;
 17825  22AA  0022               	movlb	2	; select bank2
 17826  22AB  148F               	bsf	15,1	;volatile
 17827                           
 17828                           ;LEDs.c: 63: break;
 17829  22AC  0008               	return
 17830  22AD                     l800:	
 17831                           ;LEDs.c: 64: case 3:
 17832                           
 17833                           
 17834                           ;LEDs.c: 65: LATDbits.LATD2 = 1;
 17835  22AD  0022               	movlb	2	; select bank2
 17836  22AE  150F               	bsf	15,2	;volatile
 17837                           
 17838                           ;LEDs.c: 66: break;
 17839  22AF  0008               	return
 17840  22B0                     l801:	
 17841                           ;LEDs.c: 67: case 4:
 17842                           
 17843                           
 17844                           ;LEDs.c: 68: LATDbits.LATD3 = 1;
 17845  22B0  0022               	movlb	2	; select bank2
 17846  22B1  158F               	bsf	15,3	;volatile
 17847                           
 17848                           ;LEDs.c: 69: break;
 17849  22B2  0008               	return
 17850  22B3                     l802:	
 17851                           ;LEDs.c: 70: case 5:
 17852                           
 17853                           
 17854                           ;LEDs.c: 71: LATDbits.LATD4 = 1;
 17855  22B3  0022               	movlb	2	; select bank2
 17856  22B4  160F               	bsf	15,4	;volatile
 17857                           
 17858                           ;LEDs.c: 74: break;
 17859                           
 17860                           ;LEDs.c: 73: case 6:
 17861                           
 17862                           ;LEDs.c: 72: break;
 17863  22B5  0008               	return
 17864  22B6                     l804:	
 17865                           ;LEDs.c: 75: case 100:
 17866                           
 17867                           
 17868                           ;LEDs.c: 76: LATDbits.LATD0 = 1;
 17869  22B6  0022               	movlb	2	; select bank2
 17870  22B7  140F               	bsf	15,0	;volatile
 17871                           
 17872                           ;LEDs.c: 77: LATDbits.LATD1 = 1;
 17873  22B8  148F               	bsf	15,1	;volatile
 17874                           
 17875                           ;LEDs.c: 78: LATDbits.LATD2 = 1;
 17876  22B9  150F               	bsf	15,2	;volatile
 17877                           
 17878                           ;LEDs.c: 79: LATDbits.LATD3 = 1;
 17879  22BA  158F               	bsf	15,3	;volatile
 17880                           
 17881                           ;LEDs.c: 80: LATDbits.LATD4 = 1;
 17882  22BB  160F               	bsf	15,4	;volatile
 17883                           
 17884                           ;LEDs.c: 82: }
 17885                           
 17886                           ;LEDs.c: 81: break;
 17887  22BC  0008               	return
 17888  22BD                     l7470:	
 17889                           
 17890                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17891                           ; Switch size 1, requested type "space"
 17892                           ; Number of cases is 1, Range of values is 0 to 0
 17893                           ; switch strategies available:
 17894                           ; Name         Instructions Cycles
 17895                           ; simple_byte            4     3 (average)
 17896                           ; direct_byte            8     6 (fixed)
 17897                           ; jumptable            260     6 (fixed)
 17898                           ;	Chosen strategy is simple_byte
 17899  22BD  0021               	movlb	1	; select bank1
 17900  22BE  0821               	movf	(set_leds_bottom@x+1)^(0+128),w
 17901  22BF  3A00               	xorlw	0	; case 0
 17902  22C0  1903               	skipnz
 17903  22C1  2AC3               	goto	l9406
 17904  22C2  2ADA               	goto	l805
 17905  22C3                     l9406:	
 17906                           
 17907                           ; Switch size 1, requested type "space"
 17908                           ; Number of cases is 7, Range of values is 1 to 100
 17909                           ; switch strategies available:
 17910                           ; Name         Instructions Cycles
 17911                           ; simple_byte           22    12 (average)
 17912                           ; direct_byte          209     9 (fixed)
 17913                           ; jumptable            263     9 (fixed)
 17914                           ;	Chosen strategy is simple_byte
 17915  22C3  0820               	movf	set_leds_bottom@x^(0+128),w
 17916  22C4  3A01               	xorlw	1	; case 1
 17917  22C5  1903               	skipnz
 17918  22C6  2AA7               	goto	l797
 17919  22C7  3A03               	xorlw	3	; case 2
 17920  22C8  1903               	skipnz
 17921  22C9  2AAA               	goto	l799
 17922  22CA  3A01               	xorlw	1	; case 3
 17923  22CB  1903               	skipnz
 17924  22CC  2AAD               	goto	l800
 17925  22CD  3A07               	xorlw	7	; case 4
 17926  22CE  1903               	skipnz
 17927  22CF  2AB0               	goto	l801
 17928  22D0  3A01               	xorlw	1	; case 5
 17929  22D1  1903               	skipnz
 17930  22D2  2AB3               	goto	l802
 17931  22D3  3A03               	xorlw	3	; case 6
 17932  22D4  1903               	skipnz
 17933  22D5  2ADA               	goto	l805
 17934  22D6  3A62               	xorlw	98	; case 100
 17935  22D7  1903               	skipnz
 17936  22D8  2AB6               	goto	l804
 17937  22D9  2ADA               	goto	l805
 17938  22DA                     l805:	
 17939  22DA  0008               	return
 17940  22DB                     __end_of_set_leds_bottom:	
 17941                           
 17942                           	psect	text62
 17943  2068                     __ptext62:	
 17944 ;; *************** function _FLASH_ReadWord *****************
 17945 ;; Defined at:
 17946 ;;		line 58 in file "memory.c"
 17947 ;; Parameters:    Size  Location     Type
 17948 ;;  flashAddr       2    0[BANK1 ] unsigned int 
 17949 ;; Auto vars:     Size  Location     Type
 17950 ;;  GIEBitValue     1    2[BANK1 ] unsigned char 
 17951 ;; Return value:  Size  Location     Type
 17952 ;;                  2    0[BANK1 ] unsigned int 
 17953 ;; Registers used:
 17954 ;;		wreg, status,2, status,0
 17955 ;; Tracked objects:
 17956 ;;		On entry : 0/0
 17957 ;;		On exit  : 0/0
 17958 ;;		Unchanged: 0/0
 17959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17960 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17961 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17963 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17964 ;;Total ram usage:        3 bytes
 17965 ;; Hardware stack levels used:    1
 17966 ;; Hardware stack levels required when called:    3
 17967 ;; This function calls:
 17968 ;;		Nothing
 17969 ;; This function is called by:
 17970 ;;		_ReadSavedSettings
 17971 ;;		_FLASH_WriteWord
 17972 ;; This function uses a non-reentrant model
 17973 ;;
 17974                           
 17975                           
 17976                           ;psect for function _FLASH_ReadWord
 17977  2068                     _FLASH_ReadWord:	
 17978                           
 17979                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
 17980                           
 17981                           ;incstack = 0
 17982                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
 17983  2068  3000               	movlw	0
 17984  2069  1B8B               	btfsc	11,7	;volatile
 17985  206A  3001               	movlw	1
 17986  206B  0021               	movlb	1	; select bank1
 17987  206C  00A2               	movwf	FLASH_ReadWord@GIEBitValue^(0+128)
 17988                           
 17989                           ;memory.c: 61: INTCONbits.GIE = 0;
 17990  206D  138B               	bcf	11,7	;volatile
 17991                           
 17992                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
 17993  206E  0820               	movf	FLASH_ReadWord@flashAddr^(0+128),w
 17994  206F  0023               	movlb	3	; select bank3
 17995  2070  0091               	movwf	17	;volatile
 17996                           
 17997                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
 17998  2071  0021               	movlb	1	; select bank1
 17999  2072  0821               	movf	(FLASH_ReadWord@flashAddr+1)^(0+128),w
 18000  2073  0023               	movlb	3	; select bank3
 18001  2074  0092               	movwf	18	;volatile
 18002                           
 18003                           ;memory.c: 65: PMCON1bits.CFGS = 0;
 18004  2075  1315               	bcf	21,6	;volatile
 18005                           
 18006                           ;memory.c: 66: PMCON1bits.RD = 1;
 18007  2076  1415               	bsf	21,0	;volatile
 18008                           
 18009                           ;memory.c: 67: __nop();
 18010  2077  0000               	nop
 18011                           
 18012                           ;memory.c: 68: __nop();
 18013  2078  0000               	nop
 18014                           
 18015                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
 18016  2079  0021               	movlb	1	; select bank1
 18017  207A  0C22               	rrf	FLASH_ReadWord@GIEBitValue^(0+128),w
 18018  207B  1C03               	skipc
 18019  207C  138B               	bcf	11,7	;volatile
 18020  207D  1803               	skipnc
 18021  207E  178B               	bsf	11,7	;volatile
 18022                           
 18023                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
 18024  207F  0023               	movlb	3	; select bank3
 18025  2080  0814               	movf	20,w	;volatile
 18026  2081  0021               	movlb	1	; select bank1
 18027  2082  00A1               	movwf	(?_FLASH_ReadWord+1)^(0+128)
 18028  2083  0023               	movlb	3	; select bank3
 18029  2084  0813               	movf	19,w	;volatile
 18030  2085  0021               	movlb	1	; select bank1
 18031  2086  00A0               	movwf	?_FLASH_ReadWord^(0+128)
 18032  2087  0008               	return
 18033  2088                     __end_of_FLASH_ReadWord:	
 18034                           
 18035                           	psect	text63
 18036  20EF                     __ptext63:	
 18037 ;; *************** function _InitializeTaps *****************
 18038 ;; Defined at:
 18039 ;;		line 228 in file "user.c"
 18040 ;; Parameters:    Size  Location     Type
 18041 ;;		None
 18042 ;; Auto vars:     Size  Location     Type
 18043 ;;  itap            2    1[BANK1 ] int 
 18044 ;; Return value:  Size  Location     Type
 18045 ;;                  1    wreg      void 
 18046 ;; Registers used:
 18047 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18048 ;; Tracked objects:
 18049 ;;		On entry : 0/0
 18050 ;;		On exit  : 0/0
 18051 ;;		Unchanged: 0/0
 18052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18054 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18055 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18056 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18057 ;;Total ram usage:        3 bytes
 18058 ;; Hardware stack levels used:    1
 18059 ;; Hardware stack levels required when called:    3
 18060 ;; This function calls:
 18061 ;;		Nothing
 18062 ;; This function is called by:
 18063 ;;		_main
 18064 ;; This function uses a non-reentrant model
 18065 ;;
 18066                           
 18067                           
 18068                           ;psect for function _InitializeTaps
 18069  20EF                     _InitializeTaps:	
 18070                           
 18071                           ;user.c: 229: for (int itap = 0; itap < 12; itap++) {
 18072                           
 18073                           ;incstack = 0
 18074                           ; Regs used in _InitializeTaps: [wreg+fsr1l+fsr1h+status,2+status,0]
 18075  20EF  0021               	movlb	1	; select bank1
 18076  20F0  01A1               	clrf	InitializeTaps@itap^(0+128)
 18077  20F1  01A2               	clrf	(InitializeTaps@itap+1)^(0+128)
 18078  20F2                     L22:	
 18079  20F2  0822               	movf	(InitializeTaps@itap+1)^(0+128),w
 18080  20F3  3A80               	xorlw	128
 18081  20F4  00A0               	movwf	??_InitializeTaps^(0+128)
 18082  20F5  3080               	movlw	128
 18083  20F6  0220               	subwf	??_InitializeTaps^(0+128),w
 18084  20F7  1D03               	skipz
 18085  20F8  28FB               	goto	u8855
 18086  20F9  300C               	movlw	12
 18087  20FA  0221               	subwf	InitializeTaps@itap^(0+128),w
 18088  20FB                     u8855:	
 18089  20FB  1803               	btfsc	3,0
 18090  20FC  0008               	return
 18091                           
 18092                           ;user.c: 230: tap[itap] = 0;
 18093  20FD  0021               	movlb	1	; select bank1
 18094  20FE  0821               	movf	InitializeTaps@itap^(0+128),w
 18095  20FF  00A0               	movwf	??_InitializeTaps^(0+128)
 18096  2100  3001               	movlw	1
 18097  2101                     u8865:	
 18098  2101  35A0               	lslf	??_InitializeTaps^(0+128),f
 18099  2102  3EFF               	addlw	-1
 18100  2103  1D03               	skipz
 18101  2104  2901               	goto	u8865
 18102  2105  3520               	lslf	??_InitializeTaps^(0+128),w
 18103  2106  3EA0               	addlw	(low (_tap| (0+512)))& (0+255)
 18104  2107  0086               	movwf	6
 18105  2108  3002               	movlw	2	; select bank5/6
 18106  2109  0087               	movwf	7
 18107  210A  3000               	movlw	0
 18108  210B  3FC0               	movwi [0]fsr1
 18109  210C  3000               	movlw	0
 18110  210D  3FC1               	movwi [1]fsr1
 18111  210E  3FC2               	movwi [2]fsr1
 18112  210F  3FC3               	movwi [3]fsr1
 18113  2110  3001               	movlw	1
 18114  2111  07A1               	addwf	InitializeTaps@itap^(0+128),f
 18115  2112  3000               	movlw	0
 18116  2113  3DA2               	addwfc	(InitializeTaps@itap+1)^(0+128),f
 18117  2114  28F2               	goto	L22
 18118  2115                     __end_of_InitializeTaps:	
 18119                           
 18120                           	psect	text64
 18121  219C                     __ptext64:	
 18122 ;; *************** function _InitApp *****************
 18123 ;; Defined at:
 18124 ;;		line 23 in file "user.c"
 18125 ;; Parameters:    Size  Location     Type
 18126 ;;		None
 18127 ;; Auto vars:     Size  Location     Type
 18128 ;;		None
 18129 ;; Return value:  Size  Location     Type
 18130 ;;                  1    wreg      void 
 18131 ;; Registers used:
 18132 ;;		wreg, status,2, status,0, pclath, cstack
 18133 ;; Tracked objects:
 18134 ;;		On entry : 0/0
 18135 ;;		On exit  : 0/0
 18136 ;;		Unchanged: 0/0
 18137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18139 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18141 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18142 ;;Total ram usage:        0 bytes
 18143 ;; Hardware stack levels used:    1
 18144 ;; Hardware stack levels required when called:    5
 18145 ;; This function calls:
 18146 ;;		_init_adc
 18147 ;;		_init_pwm
 18148 ;; This function is called by:
 18149 ;;		_main
 18150 ;; This function uses a non-reentrant model
 18151 ;;
 18152                           
 18153                           
 18154                           ;psect for function _InitApp
 18155  219C                     _InitApp:	
 18156                           
 18157                           ;user.c: 24: TRISBbits.TRISB0 = 0;
 18158                           
 18159                           ;incstack = 0
 18160                           ; Regs used in _InitApp: [wreg+status,2+status,0+pclath+cstack]
 18161  219C  0021               	movlb	1	; select bank1
 18162  219D  100D               	bcf	13,0	;volatile
 18163                           
 18164                           ;user.c: 25: TRISBbits.TRISB1 = 0;
 18165  219E  108D               	bcf	13,1	;volatile
 18166                           
 18167                           ;user.c: 26: TRISBbits.TRISB2 = 0;
 18168  219F  110D               	bcf	13,2	;volatile
 18169                           
 18170                           ;user.c: 27: TRISBbits.TRISB3 = 0;
 18171  21A0  118D               	bcf	13,3	;volatile
 18172                           
 18173                           ;user.c: 28: TRISBbits.TRISB4 = 0;
 18174  21A1  120D               	bcf	13,4	;volatile
 18175                           
 18176                           ;user.c: 29: TRISBbits.TRISB5 = 0;
 18177  21A2  128D               	bcf	13,5	;volatile
 18178                           
 18179                           ;user.c: 31: TRISCbits.TRISC0 = 1;
 18180  21A3  140E               	bsf	14,0	;volatile
 18181                           
 18182                           ;user.c: 32: TRISCbits.TRISC4 = 0;
 18183  21A4  120E               	bcf	14,4	;volatile
 18184                           
 18185                           ;user.c: 33: TRISCbits.TRISC5 = 0;
 18186  21A5  128E               	bcf	14,5	;volatile
 18187                           
 18188                           ;user.c: 36: TRISDbits.TRISD0 = 0;
 18189  21A6  100F               	bcf	15,0	;volatile
 18190                           
 18191                           ;user.c: 37: TRISDbits.TRISD1 = 0;
 18192  21A7  108F               	bcf	15,1	;volatile
 18193                           
 18194                           ;user.c: 38: TRISDbits.TRISD2 = 0;
 18195  21A8  110F               	bcf	15,2	;volatile
 18196                           
 18197                           ;user.c: 39: TRISDbits.TRISD3 = 0;
 18198  21A9  118F               	bcf	15,3	;volatile
 18199                           
 18200                           ;user.c: 40: TRISDbits.TRISD4 = 0;
 18201  21AA  120F               	bcf	15,4	;volatile
 18202                           
 18203                           ;user.c: 41: TRISDbits.TRISD5 = 1;
 18204  21AB  168F               	bsf	15,5	;volatile
 18205                           
 18206                           ;user.c: 42: TRISDbits.TRISD6 = 1;
 18207  21AC  170F               	bsf	15,6	;volatile
 18208                           
 18209                           ;user.c: 43: TRISDbits.TRISD7 = 1;
 18210  21AD  178F               	bsf	15,7	;volatile
 18211                           
 18212                           ;user.c: 49: TRISEbits.TRISE0 = 1;
 18213  21AE  1410               	bsf	16,0	;volatile
 18214                           
 18215                           ;user.c: 50: TRISEbits.TRISE1 = 1;
 18216  21AF  1490               	bsf	16,1	;volatile
 18217                           
 18218                           ;user.c: 51: ANSELEbits.ANSE0 = 0;
 18219  21B0  0023               	movlb	3	; select bank3
 18220  21B1  1010               	bcf	16,0	;volatile
 18221                           
 18222                           ;user.c: 52: ANSELEbits.ANSE1 = 0;
 18223  21B2  1090               	bcf	16,1	;volatile
 18224                           
 18225                           ;user.c: 53: PORTEbits.RE0 = 0;
 18226  21B3  0020               	movlb	0	; select bank0
 18227  21B4  1010               	bcf	16,0	;volatile
 18228                           
 18229                           ;user.c: 54: PORTEbits.RE1 = 0;
 18230  21B5  1090               	bcf	16,1	;volatile
 18231                           
 18232                           ;user.c: 56: TRISFbits.TRISF0 = 0;
 18233  21B6  0026               	movlb	6	; select bank6
 18234  21B7  100C               	bcf	12,0	;volatile
 18235                           
 18236                           ;user.c: 57: TRISFbits.TRISF1 = 0;
 18237  21B8  108C               	bcf	12,1	;volatile
 18238                           
 18239                           ;user.c: 58: TRISFbits.TRISF2 = 0;
 18240  21B9  110C               	bcf	12,2	;volatile
 18241                           
 18242                           ;user.c: 59: TRISFbits.TRISF3 = 0;
 18243  21BA  118C               	bcf	12,3	;volatile
 18244                           
 18245                           ;user.c: 60: TRISFbits.TRISF4 = 0;
 18246  21BB  120C               	bcf	12,4	;volatile
 18247                           
 18248                           ;user.c: 61: TRISFbits.TRISF5 = 0;
 18249  21BC  128C               	bcf	12,5	;volatile
 18250                           
 18251                           ;user.c: 62: TRISFbits.TRISF6 = 1;
 18252  21BD  170C               	bsf	12,6	;volatile
 18253                           
 18254                           ;user.c: 63: ANSELFbits.ANSF6 = 0;
 18255  21BE  0028               	movlb	8	; select bank8
 18256  21BF  130C               	bcf	12,6	;volatile
 18257                           
 18258                           ;user.c: 65: TRISGbits.TRISG1 = 0;
 18259  21C0  0026               	movlb	6	; select bank6
 18260  21C1  108D               	bcf	13,1	;volatile
 18261                           
 18262                           ;user.c: 66: TRISGbits.TRISG2 = 0;
 18263  21C2  110D               	bcf	13,2	;volatile
 18264                           
 18265                           ;user.c: 68: init_adc();
 18266  21C3  31AF  276C  31A1   	fcall	_init_adc
 18267                           
 18268                           ;user.c: 69: init_pwm();
 18269  21C6  31A4  2453         	fcall	_init_pwm
 18270                           
 18271                           ;user.c: 71: INTCONbits.GIE = 0b1;
 18272  21C8  178B               	bsf	11,7	;volatile
 18273                           
 18274                           ;user.c: 72: INTCONbits.TMR0IE = 0b1;
 18275  21C9  168B               	bsf	11,5	;volatile
 18276                           
 18277                           ;user.c: 73: INTCONbits.TMR0IF = 0b0;
 18278  21CA  110B               	bcf	11,2	;volatile
 18279  21CB  0008               	return
 18280  21CC                     __end_of_InitApp:	
 18281                           
 18282                           	psect	text65
 18283  2453                     __ptext65:	
 18284 ;; *************** function _init_pwm *****************
 18285 ;; Defined at:
 18286 ;;		line 129 in file "user.c"
 18287 ;; Parameters:    Size  Location     Type
 18288 ;;		None
 18289 ;; Auto vars:     Size  Location     Type
 18290 ;;		None
 18291 ;; Return value:  Size  Location     Type
 18292 ;;                  1    wreg      void 
 18293 ;; Registers used:
 18294 ;;		wreg, status,2, status,0, pclath, cstack
 18295 ;; Tracked objects:
 18296 ;;		On entry : 0/0
 18297 ;;		On exit  : 0/0
 18298 ;;		Unchanged: 0/0
 18299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18303 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18304 ;;Total ram usage:        0 bytes
 18305 ;; Hardware stack levels used:    1
 18306 ;; Hardware stack levels required when called:    4
 18307 ;; This function calls:
 18308 ;;		_init_timer0
 18309 ;;		_init_timer2
 18310 ;; This function is called by:
 18311 ;;		_InitApp
 18312 ;; This function uses a non-reentrant model
 18313 ;;
 18314                           
 18315                           
 18316                           ;psect for function _init_pwm
 18317  2453                     _init_pwm:	
 18318                           
 18319                           ;user.c: 130: APFCONbits.CCP2SEL = 0;
 18320                           
 18321                           ;incstack = 0
 18322                           ; Regs used in _init_pwm: [wreg+status,2+status,0+pclath+cstack]
 18323  2453  0022               	movlb	2	; select bank2
 18324  2454  101D               	bcf	29,0	;volatile
 18325                           
 18326                           ;user.c: 131: TRISCbits.TRISC2 = 0;
 18327  2455  0021               	movlb	1	; select bank1
 18328  2456  110E               	bcf	14,2	;volatile
 18329                           
 18330                           ;user.c: 132: TRISCbits.TRISC1 = 0;
 18331  2457  108E               	bcf	14,1	;volatile
 18332                           
 18333                           ;user.c: 133: TRISGbits.TRISG0 = 0;
 18334  2458  0026               	movlb	6	; select bank6
 18335  2459  100D               	bcf	13,0	;volatile
 18336                           
 18337                           ;user.c: 134: TRISGbits.TRISG3 = 0;
 18338  245A  118D               	bcf	13,3	;volatile
 18339                           
 18340                           ;user.c: 135: TRISGbits.TRISG4 = 0;
 18341  245B  120D               	bcf	13,4	;volatile
 18342                           
 18343                           ;user.c: 136: TRISEbits.TRISE6 = 0;
 18344  245C  0021               	movlb	1	; select bank1
 18345  245D  1310               	bcf	16,6	;volatile
 18346                           
 18347                           ;user.c: 137: TRISEbits.TRISE5 = 0;
 18348  245E  1290               	bcf	16,5	;volatile
 18349                           
 18350                           ;user.c: 138: TRISEbits.TRISE4 = 0;
 18351  245F  1210               	bcf	16,4	;volatile
 18352                           
 18353                           ;user.c: 139: TRISEbits.TRISE3 = 0;
 18354  2460  1190               	bcf	16,3	;volatile
 18355                           
 18356                           ;user.c: 140: TRISEbits.TRISE2 = 0;
 18357  2461  1110               	bcf	16,2	;volatile
 18358                           
 18359                           ;user.c: 141: CCP1CONbits.CCP1M = 0b1111;
 18360  2462  300F               	movlw	15
 18361  2463  0025               	movlb	5	; select bank5
 18362  2464  0493               	iorwf	19,f	;volatile
 18363                           
 18364                           ;user.c: 142: CCP2CONbits.CCP2M = 0b1111;
 18365  2465  300F               	movlw	15
 18366  2466  049A               	iorwf	26,f	;volatile
 18367                           
 18368                           ;user.c: 143: CCP3CONbits.CCP3M = 0b1111;
 18369  2467  300F               	movlw	15
 18370  2468  0026               	movlb	6	; select bank6
 18371  2469  0493               	iorwf	19,f	;volatile
 18372                           
 18373                           ;user.c: 144: CCP4CONbits.CCP4M = 0b1111;
 18374  246A  300F               	movlw	15
 18375  246B  049A               	iorwf	26,f	;volatile
 18376                           
 18377                           ;user.c: 145: CCP5CONbits.CCP5M = 0b1111;
 18378  246C  300F               	movlw	15
 18379  246D  049E               	iorwf	30,f	;volatile
 18380                           
 18381                           ;user.c: 146: CCP6CONbits.CCP6M = 0b1111;
 18382  246E  300F               	movlw	15
 18383  246F  002C               	movlb	12	; select bank12
 18384  2470  0493               	iorwf	19,f	;volatile
 18385                           
 18386                           ;user.c: 147: CCP7CONbits.CCP7M = 0b1111;
 18387  2471  300F               	movlw	15
 18388  2472  0496               	iorwf	22,f	;volatile
 18389                           
 18390                           ;user.c: 148: CCP8CONbits.CCP8M = 0b1111;
 18391  2473  300F               	movlw	15
 18392  2474  0499               	iorwf	25,f	;volatile
 18393                           
 18394                           ;user.c: 149: CCP9CONbits.CCP9M = 0b1111;
 18395  2475  300F               	movlw	15
 18396  2476  049C               	iorwf	28,f	;volatile
 18397                           
 18398                           ;user.c: 150: CCP10CONbits.CCP10M = 0b1111;
 18399  2477  300F               	movlw	15
 18400  2478  049F               	iorwf	31,f	;volatile
 18401                           
 18402                           ;user.c: 151: CCPTMRS0 = 0b00000000;
 18403  2479  0025               	movlb	5	; select bank5
 18404  247A  019D               	clrf	29	;volatile
 18405                           
 18406                           ;user.c: 152: CCPTMRS1 = 0b00000000;
 18407  247B  019E               	clrf	30	;volatile
 18408                           
 18409                           ;user.c: 153: CCPTMRS2 = 0b00000000;
 18410  247C  019F               	clrf	31	;volatile
 18411                           
 18412                           ;user.c: 154: CCPR1 = 50;
 18413  247D  3000               	movlw	0
 18414  247E  0092               	movwf	18	;volatile
 18415  247F  3032               	movlw	50
 18416  2480  0091               	movwf	17	;volatile
 18417                           
 18418                           ;user.c: 155: CCPR2 = 100;
 18419  2481  3000               	movlw	0
 18420  2482  0099               	movwf	25	;volatile
 18421  2483  3064               	movlw	100
 18422  2484  0098               	movwf	24	;volatile
 18423                           
 18424                           ;user.c: 156: CCPR3 = 150;
 18425  2485  3000               	movlw	0
 18426  2486  0026               	movlb	6	; select bank6
 18427  2487  0092               	movwf	18	;volatile
 18428  2488  3096               	movlw	150
 18429  2489  0091               	movwf	17	;volatile
 18430                           
 18431                           ;user.c: 157: CCPR4 = 200;
 18432  248A  3000               	movlw	0
 18433  248B  0099               	movwf	25	;volatile
 18434  248C  30C8               	movlw	200
 18435  248D  0098               	movwf	24	;volatile
 18436                           
 18437                           ;user.c: 158: init_timer2();
 18438  248E  31AF  275A  31A4   	fcall	_init_timer2
 18439                           
 18440                           ;user.c: 159: init_timer0();
 18441  2491  31AF  2753         	fcall	_init_timer0
 18442  2493  0008               	return
 18443  2494                     __end_of_init_pwm:	
 18444                           
 18445                           	psect	text66
 18446  2F5A                     __ptext66:	
 18447 ;; *************** function _init_timer2 *****************
 18448 ;; Defined at:
 18449 ;;		line 162 in file "user.c"
 18450 ;; Parameters:    Size  Location     Type
 18451 ;;		None
 18452 ;; Auto vars:     Size  Location     Type
 18453 ;;		None
 18454 ;; Return value:  Size  Location     Type
 18455 ;;                  1    wreg      void 
 18456 ;; Registers used:
 18457 ;;		wreg, status,2, status,0
 18458 ;; Tracked objects:
 18459 ;;		On entry : 0/0
 18460 ;;		On exit  : 0/0
 18461 ;;		Unchanged: 0/0
 18462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18466 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18467 ;;Total ram usage:        0 bytes
 18468 ;; Hardware stack levels used:    1
 18469 ;; Hardware stack levels required when called:    3
 18470 ;; This function calls:
 18471 ;;		Nothing
 18472 ;; This function is called by:
 18473 ;;		_init_pwm
 18474 ;; This function uses a non-reentrant model
 18475 ;;
 18476                           
 18477                           
 18478                           ;psect for function _init_timer2
 18479  2F5A                     _init_timer2:	
 18480                           
 18481                           ;user.c: 163: T2CONbits.T2OUTPS = 0b0000;
 18482                           
 18483                           ;incstack = 0
 18484                           ; Regs used in _init_timer2: [wreg+status,2+status,0]
 18485  2F5A  3087               	movlw	-121
 18486  2F5B  0020               	movlb	0	; select bank0
 18487  2F5C  059C               	andwf	28,f	;volatile
 18488                           
 18489                           ;user.c: 164: T2CONbits.T2CKPS = 0b00;
 18490  2F5D  30FC               	movlw	-4
 18491  2F5E  059C               	andwf	28,f	;volatile
 18492                           
 18493                           ;user.c: 165: PR2 = 0xFF;
 18494  2F5F  30FF               	movlw	255
 18495  2F60  009B               	movwf	27	;volatile
 18496                           
 18497                           ;user.c: 166: T2CONbits.TMR2ON = 1;
 18498  2F61  151C               	bsf	28,2	;volatile
 18499  2F62  0008               	return
 18500  2F63                     __end_of_init_timer2:	
 18501                           
 18502                           	psect	text67
 18503  2F53                     __ptext67:	
 18504 ;; *************** function _init_timer0 *****************
 18505 ;; Defined at:
 18506 ;;		line 169 in file "user.c"
 18507 ;; Parameters:    Size  Location     Type
 18508 ;;		None
 18509 ;; Auto vars:     Size  Location     Type
 18510 ;;		None
 18511 ;; Return value:  Size  Location     Type
 18512 ;;                  1    wreg      void 
 18513 ;; Registers used:
 18514 ;;		None
 18515 ;; Tracked objects:
 18516 ;;		On entry : 0/0
 18517 ;;		On exit  : 0/0
 18518 ;;		Unchanged: 0/0
 18519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18521 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18523 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18524 ;;Total ram usage:        0 bytes
 18525 ;; Hardware stack levels used:    1
 18526 ;; Hardware stack levels required when called:    3
 18527 ;; This function calls:
 18528 ;;		Nothing
 18529 ;; This function is called by:
 18530 ;;		_init_pwm
 18531 ;; This function uses a non-reentrant model
 18532 ;;
 18533                           
 18534                           
 18535                           ;psect for function _init_timer0
 18536  2F53                     _init_timer0:	
 18537                           
 18538                           ;user.c: 170: OPTION_REGbits.TMR0CS = 0b0;
 18539                           
 18540                           ;incstack = 0
 18541                           ; Regs used in _init_timer0: []
 18542  2F53  0021               	movlb	1	; select bank1
 18543  2F54  1295               	bcf	21,5	;volatile
 18544                           
 18545                           ;user.c: 171: OPTION_REGbits.PSA = 0b0;
 18546  2F55  1195               	bcf	21,3	;volatile
 18547                           
 18548                           ;user.c: 172: OPTION_REGbits.PS0 = 0b0;
 18549  2F56  1015               	bcf	21,0	;volatile
 18550                           
 18551                           ;user.c: 173: OPTION_REGbits.PS1 = 0b1;
 18552  2F57  1495               	bsf	21,1	;volatile
 18553                           
 18554                           ;user.c: 174: OPTION_REGbits.PS2 = 0b0;
 18555  2F58  1115               	bcf	21,2	;volatile
 18556  2F59  0008               	return
 18557  2F5A                     __end_of_init_timer0:	
 18558                           
 18559                           	psect	text68
 18560  2F6C                     __ptext68:	
 18561 ;; *************** function _init_adc *****************
 18562 ;; Defined at:
 18563 ;;		line 115 in file "user.c"
 18564 ;; Parameters:    Size  Location     Type
 18565 ;;		None
 18566 ;; Auto vars:     Size  Location     Type
 18567 ;;		None
 18568 ;; Return value:  Size  Location     Type
 18569 ;;                  1    wreg      void 
 18570 ;; Registers used:
 18571 ;;		wreg, status,2, status,0
 18572 ;; Tracked objects:
 18573 ;;		On entry : 0/0
 18574 ;;		On exit  : 0/0
 18575 ;;		Unchanged: 0/0
 18576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18577 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18578 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18580 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18581 ;;Total ram usage:        0 bytes
 18582 ;; Hardware stack levels used:    1
 18583 ;; Hardware stack levels required when called:    3
 18584 ;; This function calls:
 18585 ;;		Nothing
 18586 ;; This function is called by:
 18587 ;;		_InitApp
 18588 ;; This function uses a non-reentrant model
 18589 ;;
 18590                           
 18591                           
 18592                           ;psect for function _init_adc
 18593  2F6C                     _init_adc:	
 18594                           
 18595                           ;user.c: 116: ADCON1bits.ADFM = 0b1;
 18596                           
 18597                           ;incstack = 0
 18598                           ; Regs used in _init_adc: [wreg+status,2+status,0]
 18599  2F6C  0021               	movlb	1	; select bank1
 18600  2F6D  179E               	bsf	30,7	;volatile
 18601                           
 18602                           ;user.c: 117: ADCON1bits.ADCS = 0b110;
 18603  2F6E  081E               	movf	30,w	;volatile
 18604  2F6F  398F               	andlw	-113
 18605  2F70  3860               	iorlw	96
 18606  2F71  009E               	movwf	30	;volatile
 18607                           
 18608                           ;user.c: 118: ADCON1bits.ADPREF = 0b00;
 18609  2F72  30FC               	movlw	-4
 18610  2F73  059E               	andwf	30,f	;volatile
 18611                           
 18612                           ;user.c: 119: ADCON0bits.ADON = 0b1;
 18613  2F74  141D               	bsf	29,0	;volatile
 18614  2F75  0008               	return
 18615  2F76                     __end_of_init_adc:	
 18616                           
 18617                           	psect	text69
 18618  2F4F                     __ptext69:	
 18619 ;; *************** function _ConfigureOscillator *****************
 18620 ;; Defined at:
 18621 ;;		line 18 in file "system.c"
 18622 ;; Parameters:    Size  Location     Type
 18623 ;;		None
 18624 ;; Auto vars:     Size  Location     Type
 18625 ;;		None
 18626 ;; Return value:  Size  Location     Type
 18627 ;;                  1    wreg      void 
 18628 ;; Registers used:
 18629 ;;		wreg, status,2, status,0
 18630 ;; Tracked objects:
 18631 ;;		On entry : 0/0
 18632 ;;		On exit  : 0/0
 18633 ;;		Unchanged: 0/0
 18634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18636 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18638 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18639 ;;Total ram usage:        0 bytes
 18640 ;; Hardware stack levels used:    1
 18641 ;; Hardware stack levels required when called:    3
 18642 ;; This function calls:
 18643 ;;		Nothing
 18644 ;; This function is called by:
 18645 ;;		_main
 18646 ;; This function uses a non-reentrant model
 18647 ;;
 18648                           
 18649                           
 18650                           ;psect for function _ConfigureOscillator
 18651  2F4F                     _ConfigureOscillator:	
 18652                           
 18653                           ;system.c: 20: OSCCONbits.SCS = 0b00;
 18654                           
 18655                           ;incstack = 0
 18656                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
 18657  2F4F  30FC               	movlw	-4
 18658  2F50  0021               	movlb	1	; select bank1
 18659  2F51  0599               	andwf	25,f	;volatile
 18660  2F52  0008               	return
 18661  2F53                     __end_of_ConfigureOscillator:	
 18662                           
 18663                           	psect	intentry
 18664  0004                     __pintentry:	
 18665 ;; *************** function _isr *****************
 18666 ;; Defined at:
 18667 ;;		line 28 in file "interrupts.c"
 18668 ;; Parameters:    Size  Location     Type
 18669 ;;		None
 18670 ;; Auto vars:     Size  Location     Type
 18671 ;;  tmpSubDelay     2   35[BANK0 ] int 
 18672 ;; Return value:  Size  Location     Type
 18673 ;;                  1    wreg      void 
 18674 ;; Registers used:
 18675 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18676 ;; Tracked objects:
 18677 ;;		On entry : 0/0
 18678 ;;		On exit  : 0/0
 18679 ;;		Unchanged: 0/0
 18680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18682 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18683 ;;      Temps:          0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18684 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18685 ;;Total ram usage:       11 bytes
 18686 ;; Hardware stack levels used:    1
 18687 ;; Hardware stack levels required when called:    2
 18688 ;; This function calls:
 18689 ;;		___awdiv
 18690 ;;		_modulation
 18691 ;;		i1_set_leds_top
 18692 ;; This function is called by:
 18693 ;;		Interrupt level 1
 18694 ;; This function uses a non-reentrant model
 18695 ;;
 18696                           
 18697  0004                     _isr:	
 18698                           
 18699                           ;incstack = 0
 18700                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18701  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 18702  0005  3180               	pagesel	$
 18703  0006  0020               	movlb	0	; select bank0
 18704  0007  087F               	movf	127,w
 18705  0008  00C2               	movwf	??_isr+8
 18706                           
 18707                           ;interrupts.c: 29: int tmpSubDelay;
 18708                           ;interrupts.c: 32: extern volatile long timer;
 18709                           ;interrupts.c: 33: extern volatile long sub_timer;
 18710                           ;interrupts.c: 34: extern volatile long tap_timer;
 18711                           ;interrupts.c: 35: extern signed int adjusted_pot_value;
 18712                           ;interrupts.c: 36: extern int mod_delay_time;
 18713                           ;interrupts.c: 38: extern volatile long baseline_delay_time;
 18714                           ;interrupts.c: 40: extern int top_push_state;
 18715                           ;interrupts.c: 41: extern uint8_t longBypass_start;
 18716                           ;interrupts.c: 42: extern volatile long mod_timer;
 18717                           ;interrupts.c: 43: extern volatile long delay_time;
 18718  0009  1D0B               	btfss	11,2	;volatile
 18719  000A  2921               	goto	i1l133
 18720                           
 18721                           ;interrupts.c: 47: test_timer++;
 18722  000B  3001               	movlw	1
 18723  000C  0024               	movlb	4	; select bank4
 18724  000D  07C1               	addwf	_test_timer^(0+512),f
 18725  000E  3000               	movlw	0
 18726  000F  3DC2               	addwfc	(_test_timer+1)^(0+512),f
 18727  0010  3000               	movlw	0
 18728  0011  3DC3               	addwfc	(_test_timer+2)^(0+512),f
 18729  0012  3000               	movlw	0
 18730  0013  3DC4               	addwfc	(_test_timer+3)^(0+512),f
 18731                           
 18732                           ;interrupts.c: 48: tmpSubDelay = delay_time;
 18733  0014  0020               	movlb	0	; select bank0
 18734  0015  084A               	movf	_delay_time+1,w	;volatile
 18735  0016  00C4               	movwf	isr@tmpSubDelay+1
 18736  0017  0849               	movf	_delay_time,w	;volatile
 18737  0018  00C3               	movwf	isr@tmpSubDelay
 18738                           
 18739                           ;interrupts.c: 49: timer = timer + 1;
 18740  0019  3001               	movlw	1
 18741  001A  00BA               	movwf	??_isr
 18742  001B  3000               	movlw	0
 18743  001C  00BB               	movwf	??_isr+1
 18744  001D  3000               	movlw	0
 18745  001E  00BC               	movwf	??_isr+2
 18746  001F  3000               	movlw	0
 18747  0020  00BD               	movwf	??_isr+3
 18748  0021  0860               	movf	_timer,w	;volatile
 18749  0022  07BA               	addwf	??_isr,f
 18750  0023  0861               	movf	_timer+1,w	;volatile
 18751  0024  3DBB               	addwfc	??_isr+1,f
 18752  0025  0862               	movf	_timer+2,w	;volatile
 18753  0026  3DBC               	addwfc	??_isr+2,f
 18754  0027  0863               	movf	_timer+3,w	;volatile
 18755  0028  3DBD               	addwfc	??_isr+3,f
 18756  0029  083D               	movf	??_isr+3,w
 18757  002A  00E3               	movwf	_timer+3	;volatile
 18758  002B  083C               	movf	??_isr+2,w
 18759  002C  00E2               	movwf	_timer+2	;volatile
 18760  002D  083B               	movf	??_isr+1,w
 18761  002E  00E1               	movwf	_timer+1	;volatile
 18762  002F  083A               	movf	??_isr,w
 18763  0030  00E0               	movwf	_timer	;volatile
 18764                           
 18765                           ;interrupts.c: 50: sub_timer = sub_timer + 1;
 18766  0031  3001               	movlw	1
 18767  0032  00BA               	movwf	??_isr
 18768  0033  3000               	movlw	0
 18769  0034  00BB               	movwf	??_isr+1
 18770  0035  3000               	movlw	0
 18771  0036  00BC               	movwf	??_isr+2
 18772  0037  3000               	movlw	0
 18773  0038  00BD               	movwf	??_isr+3
 18774  0039  0858               	movf	_sub_timer,w	;volatile
 18775  003A  07BA               	addwf	??_isr,f
 18776  003B  0859               	movf	_sub_timer+1,w	;volatile
 18777  003C  3DBB               	addwfc	??_isr+1,f
 18778  003D  085A               	movf	_sub_timer+2,w	;volatile
 18779  003E  3DBC               	addwfc	??_isr+2,f
 18780  003F  085B               	movf	_sub_timer+3,w	;volatile
 18781  0040  3DBD               	addwfc	??_isr+3,f
 18782  0041  083D               	movf	??_isr+3,w
 18783  0042  00DB               	movwf	_sub_timer+3	;volatile
 18784  0043  083C               	movf	??_isr+2,w
 18785  0044  00DA               	movwf	_sub_timer+2	;volatile
 18786  0045  083B               	movf	??_isr+1,w
 18787  0046  00D9               	movwf	_sub_timer+1	;volatile
 18788  0047  083A               	movf	??_isr,w
 18789  0048  00D8               	movwf	_sub_timer	;volatile
 18790                           
 18791                           ;interrupts.c: 51: tap_timer = tap_timer + 1;
 18792  0049  3001               	movlw	1
 18793  004A  00BA               	movwf	??_isr
 18794  004B  3000               	movlw	0
 18795  004C  00BB               	movwf	??_isr+1
 18796  004D  3000               	movlw	0
 18797  004E  00BC               	movwf	??_isr+2
 18798  004F  3000               	movlw	0
 18799  0050  00BD               	movwf	??_isr+3
 18800  0051  085C               	movf	_tap_timer,w	;volatile
 18801  0052  07BA               	addwf	??_isr,f
 18802  0053  085D               	movf	_tap_timer+1,w	;volatile
 18803  0054  3DBB               	addwfc	??_isr+1,f
 18804  0055  085E               	movf	_tap_timer+2,w	;volatile
 18805  0056  3DBC               	addwfc	??_isr+2,f
 18806  0057  085F               	movf	_tap_timer+3,w	;volatile
 18807  0058  3DBD               	addwfc	??_isr+3,f
 18808  0059  083D               	movf	??_isr+3,w
 18809  005A  00DF               	movwf	_tap_timer+3	;volatile
 18810  005B  083C               	movf	??_isr+2,w
 18811  005C  00DE               	movwf	_tap_timer+2	;volatile
 18812  005D  083B               	movf	??_isr+1,w
 18813  005E  00DD               	movwf	_tap_timer+1	;volatile
 18814  005F  083A               	movf	??_isr,w
 18815  0060  00DC               	movwf	_tap_timer	;volatile
 18816                           
 18817                           ;interrupts.c: 52: mod_timer = mod_timer + 1;
 18818  0061  3001               	movlw	1
 18819  0062  00BA               	movwf	??_isr
 18820  0063  3000               	movlw	0
 18821  0064  00BB               	movwf	??_isr+1
 18822  0065  3000               	movlw	0
 18823  0066  00BC               	movwf	??_isr+2
 18824  0067  3000               	movlw	0
 18825  0068  00BD               	movwf	??_isr+3
 18826  0069  0023               	movlb	3	; select bank3
 18827  006A  0824               	movf	_mod_timer^(0+384),w	;volatile
 18828  006B  0020               	movlb	0	; select bank0
 18829  006C  07BA               	addwf	??_isr,f
 18830  006D  0023               	movlb	3	; select bank3
 18831  006E  0825               	movf	(_mod_timer+1)^(0+384),w	;volatile
 18832  006F  0020               	movlb	0	; select bank0
 18833  0070  3DBB               	addwfc	??_isr+1,f
 18834  0071  0023               	movlb	3	; select bank3
 18835  0072  0826               	movf	(_mod_timer+2)^(0+384),w	;volatile
 18836  0073  0020               	movlb	0	; select bank0
 18837  0074  3DBC               	addwfc	??_isr+2,f
 18838  0075  0023               	movlb	3	; select bank3
 18839  0076  0827               	movf	(_mod_timer+3)^(0+384),w	;volatile
 18840  0077  0020               	movlb	0	; select bank0
 18841  0078  3DBD               	addwfc	??_isr+3,f
 18842  0079  083D               	movf	??_isr+3,w
 18843  007A  0023               	movlb	3	; select bank3
 18844  007B  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 18845  007C  0020               	movlb	0	; select bank0
 18846  007D  083C               	movf	??_isr+2,w
 18847  007E  0023               	movlb	3	; select bank3
 18848  007F  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 18849  0080  0020               	movlb	0	; select bank0
 18850  0081  083B               	movf	??_isr+1,w
 18851  0082  0023               	movlb	3	; select bank3
 18852  0083  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 18853  0084  0020               	movlb	0	; select bank0
 18854  0085  083A               	movf	??_isr,w
 18855  0086  0023               	movlb	3	; select bank3
 18856  0087  00A4               	movwf	_mod_timer^(0+384)	;volatile
 18857                           
 18858                           ;interrupts.c: 53: double_timer++;
 18859  0088  3001               	movlw	1
 18860  0089  07A0               	addwf	_double_timer^(0+384),f	;volatile
 18861  008A  3000               	movlw	0
 18862  008B  3DA1               	addwfc	(_double_timer+1)^(0+384),f	;volatile
 18863  008C  3000               	movlw	0
 18864  008D  3DA2               	addwfc	(_double_timer+2)^(0+384),f	;volatile
 18865  008E  3000               	movlw	0
 18866  008F  3DA3               	addwfc	(_double_timer+3)^(0+384),f	;volatile
 18867                           
 18868                           ;interrupts.c: 58: if (longBypass_start == 1) {
 18869  0090  0022               	movlb	2	; select bank2
 18870  0091  036A               	decf	_longBypass_start^(0+256),w
 18871  0092  1D03               	btfss	3,2
 18872  0093  28AB               	goto	i1l6628
 18873                           
 18874                           ;interrupts.c: 59: longBypass_timer++;
 18875  0094  3001               	movlw	1
 18876  0095  0023               	movlb	3	; select bank3
 18877  0096  07B2               	addwf	_longBypass_timer^(0+384),f	;volatile
 18878  0097  3000               	movlw	0
 18879  0098  3DB3               	addwfc	(_longBypass_timer+1)^(0+384),f	;volatile
 18880                           
 18881                           ;interrupts.c: 60: if (longBypass_timer > long_press_limit) {longBypass_timer = long_pre
      +                          ss_limit;}
 18882  0099  0833               	movf	(_longBypass_timer+1)^(0+384),w	;volatile
 18883  009A  0020               	movlb	0	; select bank0
 18884  009B  0250               	subwf	_long_press_limit+1,w
 18885  009C  1D03               	skipz
 18886  009D  28A2               	goto	u644_25
 18887  009E  0023               	movlb	3	; select bank3
 18888  009F  0832               	movf	_longBypass_timer^(0+384),w	;volatile
 18889  00A0  0020               	movlb	0	; select bank0
 18890  00A1  024F               	subwf	_long_press_limit,w
 18891  00A2                     u644_25:	
 18892  00A2  1803               	skipnc
 18893  00A3  28AB               	goto	i1l6628
 18894  00A4  0850               	movf	_long_press_limit+1,w
 18895  00A5  0023               	movlb	3	; select bank3
 18896  00A6  00B3               	movwf	(_longBypass_timer+1)^(0+384)	;volatile
 18897  00A7  0020               	movlb	0	; select bank0
 18898  00A8  084F               	movf	_long_press_limit,w
 18899  00A9  0023               	movlb	3	; select bank3
 18900  00AA  00B2               	movwf	_longBypass_timer^(0+384)	;volatile
 18901  00AB                     i1l6628:	
 18902                           
 18903                           ;interrupts.c: 61: }
 18904                           ;interrupts.c: 62: if (longTap_start == 1) {
 18905  00AB  0022               	movlb	2	; select bank2
 18906  00AC  036B               	decf	_longTap_start^(0+256),w
 18907  00AD  1D03               	btfss	3,2
 18908  00AE  28C6               	goto	i1l6634
 18909                           
 18910                           ;interrupts.c: 63: longTap_timer++;
 18911  00AF  3001               	movlw	1
 18912  00B0  0023               	movlb	3	; select bank3
 18913  00B1  07B4               	addwf	_longTap_timer^(0+384),f	;volatile
 18914  00B2  3000               	movlw	0
 18915  00B3  3DB5               	addwfc	(_longTap_timer+1)^(0+384),f	;volatile
 18916                           
 18917                           ;interrupts.c: 64: if (longTap_timer > long_press_limit) {
 18918  00B4  0835               	movf	(_longTap_timer+1)^(0+384),w	;volatile
 18919  00B5  0020               	movlb	0	; select bank0
 18920  00B6  0250               	subwf	_long_press_limit+1,w
 18921  00B7  1D03               	skipz
 18922  00B8  28BD               	goto	u646_25
 18923  00B9  0023               	movlb	3	; select bank3
 18924  00BA  0834               	movf	_longTap_timer^(0+384),w	;volatile
 18925  00BB  0020               	movlb	0	; select bank0
 18926  00BC  024F               	subwf	_long_press_limit,w
 18927  00BD                     u646_25:	
 18928  00BD  1803               	skipnc
 18929  00BE  28C6               	goto	i1l6634
 18930                           
 18931                           ;interrupts.c: 65: longTap_timer = long_press_limit;
 18932  00BF  0850               	movf	_long_press_limit+1,w
 18933  00C0  0023               	movlb	3	; select bank3
 18934  00C1  00B5               	movwf	(_longTap_timer+1)^(0+384)	;volatile
 18935  00C2  0020               	movlb	0	; select bank0
 18936  00C3  084F               	movf	_long_press_limit,w
 18937  00C4  0023               	movlb	3	; select bank3
 18938  00C5  00B4               	movwf	_longTap_timer^(0+384)	;volatile
 18939  00C6                     i1l6634:	
 18940                           
 18941                           ;interrupts.c: 66: }
 18942                           ;interrupts.c: 67: }
 18943                           ;interrupts.c: 68: INTCONbits.TMR0IF = 0;
 18944  00C6  110B               	bcf	11,2	;volatile
 18945                           
 18946                           ;interrupts.c: 70: if (adjust_sub_delay == 1) {
 18947  00C7  0023               	movlb	3	; select bank3
 18948  00C8  033C               	decf	_adjust_sub_delay^(0+384),w
 18949  00C9  1D03               	btfss	3,2
 18950  00CA  2921               	goto	i1l133
 18951                           
 18952                           ;interrupts.c: 71: if ((sub_timer >= delay_time) && ((baseline_delay_time - timer) < 4))
      +                           {
 18953  00CB  0020               	movlb	0	; select bank0
 18954  00CC  085B               	movf	_sub_timer+3,w	;volatile
 18955  00CD  3A80               	xorlw	128
 18956  00CE  00BA               	movwf	??_isr
 18957  00CF  084C               	movf	_delay_time+3,w	;volatile
 18958  00D0  3A80               	xorlw	128
 18959  00D1  023A               	subwf	??_isr,w
 18960  00D2  1D03               	skipz
 18961  00D3  28DE               	goto	u648_23
 18962  00D4  084B               	movf	_delay_time+2,w	;volatile
 18963  00D5  025A               	subwf	_sub_timer+2,w	;volatile
 18964  00D6  1D03               	skipz
 18965  00D7  28DE               	goto	u648_23
 18966  00D8  084A               	movf	_delay_time+1,w	;volatile
 18967  00D9  0259               	subwf	_sub_timer+1,w	;volatile
 18968  00DA  1D03               	skipz
 18969  00DB  28DE               	goto	u648_23
 18970  00DC  0849               	movf	_delay_time,w	;volatile
 18971  00DD  0258               	subwf	_sub_timer,w	;volatile
 18972  00DE                     u648_23:	
 18973  00DE  1C03               	skipc
 18974  00DF  2921               	goto	i1l133
 18975  00E0  0845               	movf	_baseline_delay_time,w	;volatile
 18976  00E1  00BA               	movwf	??_isr
 18977  00E2  0846               	movf	_baseline_delay_time+1,w	;volatile
 18978  00E3  00BB               	movwf	??_isr+1
 18979  00E4  0847               	movf	_baseline_delay_time+2,w	;volatile
 18980  00E5  00BC               	movwf	??_isr+2
 18981  00E6  0848               	movf	_baseline_delay_time+3,w	;volatile
 18982  00E7  00BD               	movwf	??_isr+3
 18983  00E8  0960               	comf	_timer,w	;volatile
 18984  00E9  00BE               	movwf	??_isr+4
 18985  00EA  0961               	comf	_timer+1,w	;volatile
 18986  00EB  00BF               	movwf	??_isr+5
 18987  00EC  0962               	comf	_timer+2,w	;volatile
 18988  00ED  00C0               	movwf	??_isr+6
 18989  00EE  0963               	comf	_timer+3,w	;volatile
 18990  00EF  00C1               	movwf	??_isr+7
 18991  00F0  0ABE               	incf	??_isr+4,f
 18992  00F1  1903               	skipnz
 18993  00F2  0ABF               	incf	??_isr+5,f
 18994  00F3  1903               	skipnz
 18995  00F4  0AC0               	incf	??_isr+6,f
 18996  00F5  1903               	skipnz
 18997  00F6  0AC1               	incf	??_isr+7,f
 18998  00F7  083E               	movf	??_isr+4,w
 18999  00F8  07BA               	addwf	??_isr,f
 19000  00F9  083F               	movf	??_isr+5,w
 19001  00FA  3DBB               	addwfc	??_isr+1,f
 19002  00FB  0840               	movf	??_isr+6,w
 19003  00FC  3DBC               	addwfc	??_isr+2,f
 19004  00FD  0841               	movf	??_isr+7,w
 19005  00FE  3DBD               	addwfc	??_isr+3,f
 19006  00FF  1BBD               	btfsc	??_isr+3,7
 19007  0100  290E               	goto	i1l6642
 19008  0101  083D               	movf	??_isr+3,w
 19009  0102  1D03               	btfss	3,2
 19010  0103  2921               	goto	i1l133
 19011  0104  083C               	movf	??_isr+2,w
 19012  0105  1D03               	btfss	3,2
 19013  0106  2921               	goto	i1l133
 19014  0107  083B               	movf	??_isr+1,w
 19015  0108  1D03               	btfss	3,2
 19016  0109  2921               	goto	i1l133
 19017  010A  3004               	movlw	4
 19018  010B  023A               	subwf	??_isr,w
 19019  010C  1803               	btfsc	3,0
 19020  010D  2921               	goto	i1l133
 19021  010E                     i1l6642:	
 19022                           
 19023                           ;interrupts.c: 72: tmpSubDelay = sub_timer + (baseline_delay_time- timer);
 19024  010E  0960               	comf	_timer,w	;volatile
 19025  010F  00BA               	movwf	??_isr
 19026  0110  0961               	comf	_timer+1,w	;volatile
 19027  0111  00BB               	movwf	??_isr+1
 19028  0112  0ABA               	incf	??_isr,f
 19029  0113  1903               	skipnz
 19030  0114  0ABB               	incf	??_isr+1,f
 19031  0115  0845               	movf	_baseline_delay_time,w	;volatile
 19032  0116  073A               	addwf	??_isr,w
 19033  0117  00BC               	movwf	??_isr+2
 19034  0118  0846               	movf	_baseline_delay_time+1,w	;volatile
 19035  0119  3D3B               	addwfc	??_isr+1,w
 19036  011A  00BD               	movwf	??_isr+3
 19037  011B  0858               	movf	_sub_timer,w	;volatile
 19038  011C  073C               	addwf	??_isr+2,w
 19039  011D  00C3               	movwf	isr@tmpSubDelay
 19040  011E  0859               	movf	_sub_timer+1,w	;volatile
 19041  011F  3D3D               	addwfc	??_isr+3,w
 19042  0120  00C4               	movwf	isr@tmpSubDelay+1
 19043  0121                     i1l133:	
 19044                           
 19045                           ;interrupts.c: 73: }
 19046                           ;interrupts.c: 74: }
 19047                           ;interrupts.c: 75: }
 19048                           ;interrupts.c: 78: if (longTap_state < 1 && doubleTap_state < 1 && presetSaveMode < 1) {
 19049  0121  0020               	movlb	0	; select bank0
 19050  0122  0854               	movf	_longTap_state,w	;volatile
 19051  0123  1D03               	btfss	3,2
 19052  0124  2978               	goto	i1l6668
 19053  0125  0865               	movf	_doubleTap_state,w	;volatile
 19054  0126  1D03               	btfss	3,2
 19055  0127  2978               	goto	i1l6668
 19056  0128  0868               	movf	_presetSaveMode,w
 19057  0129  1D03               	btfss	3,2
 19058  012A  2978               	goto	i1l6668
 19059                           
 19060                           ;interrupts.c: 81: if (timer >= baseline_delay_time) {
 19061  012B  0863               	movf	_timer+3,w	;volatile
 19062  012C  3A80               	xorlw	128
 19063  012D  00BA               	movwf	??_isr
 19064  012E  0848               	movf	_baseline_delay_time+3,w	;volatile
 19065  012F  3A80               	xorlw	128
 19066  0130  023A               	subwf	??_isr,w
 19067  0131  1D03               	skipz
 19068  0132  293D               	goto	u653_23
 19069  0133  0847               	movf	_baseline_delay_time+2,w	;volatile
 19070  0134  0262               	subwf	_timer+2,w	;volatile
 19071  0135  1D03               	skipz
 19072  0136  293D               	goto	u653_23
 19073  0137  0846               	movf	_baseline_delay_time+1,w	;volatile
 19074  0138  0261               	subwf	_timer+1,w	;volatile
 19075  0139  1D03               	skipz
 19076  013A  293D               	goto	u653_23
 19077  013B  0845               	movf	_baseline_delay_time,w	;volatile
 19078  013C  0260               	subwf	_timer,w	;volatile
 19079  013D                     u653_23:	
 19080  013D  1C03               	skipc
 19081  013E  2966               	goto	i1l6664
 19082                           
 19083                           ;interrupts.c: 84: LATBbits.LATB4 = 1;
 19084  013F  0022               	movlb	2	; select bank2
 19085  0140  160D               	bsf	13,4	;volatile
 19086                           
 19087                           ;interrupts.c: 86: timer = 0;
 19088  0141  3000               	movlw	0
 19089  0142  0020               	movlb	0	; select bank0
 19090  0143  00E3               	movwf	_timer+3	;volatile
 19091  0144  3000               	movlw	0
 19092  0145  00E2               	movwf	_timer+2	;volatile
 19093  0146  3000               	movlw	0
 19094  0147  00E1               	movwf	_timer+1	;volatile
 19095  0148  3000               	movlw	0
 19096  0149  00E0               	movwf	_timer	;volatile
 19097                           
 19098                           ;interrupts.c: 88: if (reset_sub_delay == 1 || modulation_changed == 1) {
 19099  014A  0023               	movlb	3	; select bank3
 19100  014B  0345               	decf	_reset_sub_delay^(0+384),w
 19101  014C  1D03               	btfss	3,2
 19102  014D  0342               	decf	_modulation_changed^(0+384),w
 19103  014E  1D03               	btfss	3,2
 19104  014F  2966               	goto	i1l6664
 19105                           
 19106                           ;interrupts.c: 93: mod_counter = 0;
 19107  0150  01B6               	clrf	_mod_counter^(0+384)
 19108  0151  01B7               	clrf	(_mod_counter+1)^(0+384)
 19109                           
 19110                           ;interrupts.c: 94: modulation_changed = 0;
 19111  0152  01C2               	clrf	_modulation_changed^(0+384)
 19112                           
 19113                           ;interrupts.c: 95: mod_timer = mod_delay_time;
 19114  0153  0854               	movf	_mod_delay_time^(0+384),w
 19115  0154  00A4               	movwf	_mod_timer^(0+384)	;volatile
 19116  0155  0855               	movf	(_mod_delay_time+1)^(0+384),w
 19117  0156  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 19118  0157  0D89               	rlf	9,f
 19119  0158  3B89               	subwfb	9,f
 19120  0159  0989               	comf	9,f
 19121  015A  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 19122  015B  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 19123                           
 19124                           ;interrupts.c: 97: reset_sub_delay = 0;
 19125  015C  01C5               	clrf	_reset_sub_delay^(0+384)
 19126                           
 19127                           ;interrupts.c: 98: sub_timer = delay_time;
 19128  015D  0020               	movlb	0	; select bank0
 19129  015E  084C               	movf	_delay_time+3,w	;volatile
 19130  015F  00DB               	movwf	_sub_timer+3	;volatile
 19131  0160  084B               	movf	_delay_time+2,w	;volatile
 19132  0161  00DA               	movwf	_sub_timer+2	;volatile
 19133  0162  084A               	movf	_delay_time+1,w	;volatile
 19134  0163  00D9               	movwf	_sub_timer+1	;volatile
 19135  0164  0849               	movf	_delay_time,w	;volatile
 19136  0165  00D8               	movwf	_sub_timer	;volatile
 19137  0166                     i1l6664:	
 19138                           
 19139                           ;interrupts.c: 99: }
 19140                           ;interrupts.c: 100: }
 19141                           ;interrupts.c: 102: if (timer >= 30) {
 19142  0166  0020               	movlb	0	; select bank0
 19143  0167  1BE3               	btfsc	_timer+3,7	;volatile
 19144  0168  2978               	goto	i1l6668
 19145  0169  0863               	movf	_timer+3,w	;volatile
 19146  016A  1D03               	btfss	3,2
 19147  016B  2976               	goto	i1l6666
 19148  016C  0862               	movf	_timer+2,w	;volatile
 19149  016D  1D03               	btfss	3,2
 19150  016E  2976               	goto	i1l6666
 19151  016F  0861               	movf	_timer+1,w	;volatile
 19152  0170  1D03               	btfss	3,2
 19153  0171  2976               	goto	i1l6666
 19154  0172  301E               	movlw	30
 19155  0173  0260               	subwf	_timer,w	;volatile
 19156  0174  1C03               	btfss	3,0
 19157  0175  2978               	goto	i1l6668
 19158  0176                     i1l6666:	
 19159                           
 19160                           ;interrupts.c: 104: LATBbits.LATB4 = 0;
 19161  0176  0022               	movlb	2	; select bank2
 19162  0177  120D               	bcf	13,4	;volatile
 19163  0178                     i1l6668:	
 19164                           
 19165                           ;interrupts.c: 106: }
 19166                           ;interrupts.c: 107: }
 19167                           ;interrupts.c: 110: if (presetSaveMode == 1) {
 19168  0178  0020               	movlb	0	; select bank0
 19169  0179  0368               	decf	_presetSaveMode,w
 19170  017A  1D03               	btfss	3,2
 19171  017B  29A8               	goto	i1l6680
 19172                           
 19173                           ;interrupts.c: 113: if (double_timer >= 250) {
 19174  017C  0023               	movlb	3	; select bank3
 19175  017D  1BA3               	btfsc	(_double_timer+3)^(0+384),7	;volatile
 19176  017E  2997               	goto	i1l6676
 19177  017F  0823               	movf	(_double_timer+3)^(0+384),w	;volatile
 19178  0180  1D03               	btfss	3,2
 19179  0181  298C               	goto	i1l6672
 19180  0182  0822               	movf	(_double_timer+2)^(0+384),w	;volatile
 19181  0183  1D03               	btfss	3,2
 19182  0184  298C               	goto	i1l6672
 19183  0185  0821               	movf	(_double_timer+1)^(0+384),w	;volatile
 19184  0186  1D03               	btfss	3,2
 19185  0187  298C               	goto	i1l6672
 19186  0188  30FA               	movlw	250
 19187  0189  0220               	subwf	_double_timer^(0+384),w	;volatile
 19188  018A  1C03               	btfss	3,0
 19189  018B  2997               	goto	i1l6676
 19190  018C                     i1l6672:	
 19191                           
 19192                           ;interrupts.c: 114: LATBbits.LATB0 = 1;
 19193  018C  0022               	movlb	2	; select bank2
 19194  018D  140D               	bsf	13,0	;volatile
 19195                           
 19196                           ;interrupts.c: 115: double_timer = 0;
 19197  018E  3000               	movlw	0
 19198  018F  0023               	movlb	3	; select bank3
 19199  0190  00A3               	movwf	(_double_timer+3)^(0+384)	;volatile
 19200  0191  3000               	movlw	0
 19201  0192  00A2               	movwf	(_double_timer+2)^(0+384)	;volatile
 19202  0193  3000               	movlw	0
 19203  0194  00A1               	movwf	(_double_timer+1)^(0+384)	;volatile
 19204  0195  3000               	movlw	0
 19205  0196  00A0               	movwf	_double_timer^(0+384)	;volatile
 19206  0197                     i1l6676:	
 19207                           
 19208                           ;interrupts.c: 117: }
 19209                           ;interrupts.c: 118: if (double_timer >= 30) {
 19210  0197  1BA3               	btfsc	(_double_timer+3)^(0+384),7	;volatile
 19211  0198  29A8               	goto	i1l6680
 19212  0199  0823               	movf	(_double_timer+3)^(0+384),w	;volatile
 19213  019A  1D03               	btfss	3,2
 19214  019B  29A6               	goto	i1l6678
 19215  019C  0822               	movf	(_double_timer+2)^(0+384),w	;volatile
 19216  019D  1D03               	btfss	3,2
 19217  019E  29A6               	goto	i1l6678
 19218  019F  0821               	movf	(_double_timer+1)^(0+384),w	;volatile
 19219  01A0  1D03               	btfss	3,2
 19220  01A1  29A6               	goto	i1l6678
 19221  01A2  301E               	movlw	30
 19222  01A3  0220               	subwf	_double_timer^(0+384),w	;volatile
 19223  01A4  1C03               	btfss	3,0
 19224  01A5  29A8               	goto	i1l6680
 19225  01A6                     i1l6678:	
 19226                           
 19227                           ;interrupts.c: 120: LATBbits.LATB0 = 0;
 19228  01A6  0022               	movlb	2	; select bank2
 19229  01A7  100D               	bcf	13,0	;volatile
 19230  01A8                     i1l6680:	
 19231                           
 19232                           ;interrupts.c: 121: }
 19233                           ;interrupts.c: 122: }
 19234                           ;interrupts.c: 124: if (presetSaveMode < 1 && mode2_state == 0) {
 19235  01A8  0020               	movlb	0	; select bank0
 19236  01A9  0868               	movf	_presetSaveMode,w
 19237  01AA  1D03               	btfss	3,2
 19238  01AB  2A03               	goto	i1l6700
 19239  01AC  0867               	movf	_mode2_state,w
 19240  01AD  1D03               	btfss	3,2
 19241  01AE  2A03               	goto	i1l6700
 19242                           
 19243                           ;interrupts.c: 125: if (sub_timer >= tmpSubDelay ) {
 19244  01AF  0843               	movf	isr@tmpSubDelay,w
 19245  01B0  00BA               	movwf	??_isr
 19246  01B1  0844               	movf	isr@tmpSubDelay+1,w
 19247  01B2  00BB               	movwf	??_isr+1
 19248  01B3  3000               	movlw	0
 19249  01B4  1BBB               	btfsc	??_isr+1,7
 19250  01B5  30FF               	movlw	255
 19251  01B6  00BC               	movwf	??_isr+2
 19252  01B7  00BD               	movwf	??_isr+3
 19253  01B8  085B               	movf	_sub_timer+3,w	;volatile
 19254  01B9  3A80               	xorlw	128
 19255  01BA  00BE               	movwf	??_isr+4
 19256  01BB  083D               	movf	??_isr+3,w
 19257  01BC  3A80               	xorlw	128
 19258  01BD  023E               	subwf	??_isr+4,w
 19259  01BE  1D03               	skipz
 19260  01BF  29CA               	goto	u662_23
 19261  01C0  083C               	movf	??_isr+2,w
 19262  01C1  025A               	subwf	_sub_timer+2,w	;volatile
 19263  01C2  1D03               	skipz
 19264  01C3  29CA               	goto	u662_23
 19265  01C4  083B               	movf	??_isr+1,w
 19266  01C5  0259               	subwf	_sub_timer+1,w	;volatile
 19267  01C6  1D03               	skipz
 19268  01C7  29CA               	goto	u662_23
 19269  01C8  083A               	movf	??_isr,w
 19270  01C9  0258               	subwf	_sub_timer,w	;volatile
 19271  01CA                     u662_23:	
 19272  01CA  1C03               	skipc
 19273  01CB  29E7               	goto	i1l6694
 19274                           
 19275                           ;interrupts.c: 126: if (suspend_blink == 0) {
 19276  01CC  0869               	movf	_suspend_blink,w	;volatile
 19277  01CD  1D03               	btfss	3,2
 19278  01CE  29DA               	goto	i1l6690
 19279                           
 19280                           ;interrupts.c: 127: set_leds_top(top_push_state, 1);
 19281  01CF  0852               	movf	_top_push_state+1,w
 19282  01D0  00F1               	movwf	i1set_leds_top@x+1
 19283  01D1  0851               	movf	_top_push_state,w
 19284  01D2  00F0               	movwf	i1set_leds_top@x
 19285  01D3  3001               	movlw	1
 19286  01D4  00F2               	movwf	i1set_leds_top@ledState
 19287  01D5  3000               	movlw	0
 19288  01D6  00F3               	movwf	i1set_leds_top@ledState+1
 19289  01D7  31A4  24D7  3180   	fcall	i1_set_leds_top
 19290  01DA                     i1l6690:	
 19291                           
 19292                           ;interrupts.c: 128: }
 19293                           ;interrupts.c: 129: tmpSubDelay = delay_time;
 19294  01DA  0020               	movlb	0	; select bank0
 19295  01DB  084A               	movf	_delay_time+1,w	;volatile
 19296  01DC  00C4               	movwf	isr@tmpSubDelay+1
 19297  01DD  0849               	movf	_delay_time,w	;volatile
 19298  01DE  00C3               	movwf	isr@tmpSubDelay
 19299                           
 19300                           ;interrupts.c: 130: sub_timer = 0;
 19301  01DF  3000               	movlw	0
 19302  01E0  00DB               	movwf	_sub_timer+3	;volatile
 19303  01E1  3000               	movlw	0
 19304  01E2  00DA               	movwf	_sub_timer+2	;volatile
 19305  01E3  3000               	movlw	0
 19306  01E4  00D9               	movwf	_sub_timer+1	;volatile
 19307  01E5  3000               	movlw	0
 19308  01E6  00D8               	movwf	_sub_timer	;volatile
 19309  01E7                     i1l6694:	
 19310                           
 19311                           ;interrupts.c: 131: }
 19312                           ;interrupts.c: 133: if (sub_timer >= 20) {
 19313  01E7  1BDB               	btfsc	_sub_timer+3,7	;volatile
 19314  01E8  2A03               	goto	i1l6700
 19315  01E9  085B               	movf	_sub_timer+3,w	;volatile
 19316  01EA  1D03               	btfss	3,2
 19317  01EB  29F6               	goto	i1l6696
 19318  01EC  085A               	movf	_sub_timer+2,w	;volatile
 19319  01ED  1D03               	btfss	3,2
 19320  01EE  29F6               	goto	i1l6696
 19321  01EF  0859               	movf	_sub_timer+1,w	;volatile
 19322  01F0  1D03               	btfss	3,2
 19323  01F1  29F6               	goto	i1l6696
 19324  01F2  3014               	movlw	20
 19325  01F3  0258               	subwf	_sub_timer,w	;volatile
 19326  01F4  1C03               	btfss	3,0
 19327  01F5  2A03               	goto	i1l6700
 19328  01F6                     i1l6696:	
 19329                           
 19330                           ;interrupts.c: 134: if (suspend_blink == 0) {
 19331  01F6  0869               	movf	_suspend_blink,w	;volatile
 19332  01F7  1D03               	btfss	3,2
 19333  01F8  2A03               	goto	i1l6700
 19334                           
 19335                           ;interrupts.c: 135: set_leds_top(top_push_state, 0);
 19336  01F9  0852               	movf	_top_push_state+1,w
 19337  01FA  00F1               	movwf	i1set_leds_top@x+1
 19338  01FB  0851               	movf	_top_push_state,w
 19339  01FC  00F0               	movwf	i1set_leds_top@x
 19340  01FD  3000               	movlw	0
 19341  01FE  00F2               	movwf	i1set_leds_top@ledState
 19342  01FF  00F3               	movwf	i1set_leds_top@ledState+1
 19343  0200  31A4  24D7  3180   	fcall	i1_set_leds_top
 19344  0203                     i1l6700:	
 19345                           
 19346                           ;interrupts.c: 136: }
 19347                           ;interrupts.c: 137: }
 19348                           ;interrupts.c: 138: }
 19349                           ;interrupts.c: 154: if (mod_timer >= mod_delay_time) {
 19350  0203  0023               	movlb	3	; select bank3
 19351  0204  0854               	movf	_mod_delay_time^(0+384),w
 19352  0205  0020               	movlb	0	; select bank0
 19353  0206  00BA               	movwf	??_isr
 19354  0207  0023               	movlb	3	; select bank3
 19355  0208  0855               	movf	(_mod_delay_time+1)^(0+384),w
 19356  0209  0020               	movlb	0	; select bank0
 19357  020A  00BB               	movwf	??_isr+1
 19358  020B  3000               	movlw	0
 19359  020C  1BBB               	btfsc	??_isr+1,7
 19360  020D  30FF               	movlw	255
 19361  020E  00BC               	movwf	??_isr+2
 19362  020F  00BD               	movwf	??_isr+3
 19363  0210  0023               	movlb	3	; select bank3
 19364  0211  0827               	movf	(_mod_timer+3)^(0+384),w	;volatile
 19365  0212  3A80               	xorlw	128
 19366  0213  0020               	movlb	0	; select bank0
 19367  0214  00BE               	movwf	??_isr+4
 19368  0215  083D               	movf	??_isr+3,w
 19369  0216  3A80               	xorlw	128
 19370  0217  023E               	subwf	??_isr+4,w
 19371  0218  0023               	movlb	3	; select bank3
 19372  0219  1D03               	skipz
 19373  021A  2A2B               	goto	u666_23
 19374  021B  0020               	movlb	0	; select bank0
 19375  021C  083C               	movf	??_isr+2,w
 19376  021D  0023               	movlb	3	; select bank3
 19377  021E  0226               	subwf	(_mod_timer+2)^(0+384),w	;volatile
 19378  021F  1D03               	skipz
 19379  0220  2A2B               	goto	u666_23
 19380  0221  0020               	movlb	0	; select bank0
 19381  0222  083B               	movf	??_isr+1,w
 19382  0223  0023               	movlb	3	; select bank3
 19383  0224  0225               	subwf	(_mod_timer+1)^(0+384),w	;volatile
 19384  0225  1D03               	skipz
 19385  0226  2A2B               	goto	u666_23
 19386  0227  0020               	movlb	0	; select bank0
 19387  0228  083A               	movf	??_isr,w
 19388  0229  0023               	movlb	3	; select bank3
 19389  022A  0224               	subwf	_mod_timer^(0+384),w	;volatile
 19390  022B                     u666_23:	
 19391  022B  1C03               	skipc
 19392  022C  2AA5               	goto	i1l6718
 19393                           
 19394                           ;interrupts.c: 155: mod_timer = 0;
 19395  022D  3000               	movlw	0
 19396  022E  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 19397  022F  3000               	movlw	0
 19398  0230  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 19399  0231  3000               	movlw	0
 19400  0232  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 19401  0233  3000               	movlw	0
 19402  0234  00A4               	movwf	_mod_timer^(0+384)	;volatile
 19403                           
 19404                           ;interrupts.c: 159: if (mod_counter >= 60) {
 19405  0235  0837               	movf	(_mod_counter+1)^(0+384),w
 19406  0236  3A80               	xorlw	128
 19407  0237  0020               	movlb	0	; select bank0
 19408  0238  00BA               	movwf	??_isr
 19409  0239  3080               	movlw	128
 19410  023A  023A               	subwf	??_isr,w
 19411  023B  1D03               	skipz
 19412  023C  2A40               	goto	u667_25
 19413  023D  303C               	movlw	60
 19414  023E  0023               	movlb	3	; select bank3
 19415  023F  0236               	subwf	_mod_counter^(0+384),w
 19416  0240                     u667_25:	
 19417  0240  1C03               	skipc
 19418  0241  2A51               	goto	i1l155
 19419                           
 19420                           ;interrupts.c: 160: mod_counter = 0;
 19421  0242  0023               	movlb	3	; select bank3
 19422  0243  01B6               	clrf	_mod_counter^(0+384)
 19423  0244  01B7               	clrf	(_mod_counter+1)^(0+384)
 19424                           
 19425                           ;interrupts.c: 161: test_timer = 0;
 19426  0245  3000               	movlw	0
 19427  0246  0024               	movlb	4	; select bank4
 19428  0247  00C4               	movwf	(_test_timer+3)^(0+512)
 19429  0248  3000               	movlw	0
 19430  0249  00C3               	movwf	(_test_timer+2)^(0+512)
 19431  024A  3000               	movlw	0
 19432  024B  00C2               	movwf	(_test_timer+1)^(0+512)
 19433  024C  3000               	movlw	0
 19434  024D  00C1               	movwf	_test_timer^(0+512)
 19435                           
 19436                           ;interrupts.c: 162: LATBbits.LATB0 = 1;
 19437  024E  0022               	movlb	2	; select bank2
 19438  024F  140D               	bsf	13,0	;volatile
 19439                           
 19440                           ;interrupts.c: 163: } else {
 19441  0250  2A53               	goto	i1l6710
 19442  0251                     i1l155:	
 19443                           
 19444                           ;interrupts.c: 164: LATBbits.LATB0 = 0;
 19445  0251  0022               	movlb	2	; select bank2
 19446  0252  100D               	bcf	13,0	;volatile
 19447  0253                     i1l6710:	
 19448                           
 19449                           ;interrupts.c: 165: }
 19450                           ;interrupts.c: 191: mod_value = modArray[mod_counter];
 19451  0253  0023               	movlb	3	; select bank3
 19452  0254  0837               	movf	(_mod_counter+1)^(0+384),w
 19453  0255  0020               	movlb	0	; select bank0
 19454  0256  00BB               	movwf	??_isr+1
 19455  0257  0023               	movlb	3	; select bank3
 19456  0258  0836               	movf	_mod_counter^(0+384),w
 19457  0259  0020               	movlb	0	; select bank0
 19458  025A  00BA               	movwf	??_isr
 19459  025B  35BA               	lslf	??_isr,f
 19460  025C  0DBB               	rlf	??_isr+1,f
 19461  025D  308E               	movlw	142
 19462  025E  00BC               	movwf	??_isr+2
 19463  025F  3023               	movlw	35
 19464  0260  00BD               	movwf	??_isr+3
 19465  0261  083A               	movf	??_isr,w
 19466  0262  073C               	addwf	??_isr+2,w
 19467  0263  0086               	movwf	6
 19468  0264  083B               	movf	??_isr+1,w
 19469  0265  3D3D               	addwfc	??_isr+3,w
 19470  0266  0087               	movwf	7
 19471  0267  3F40               	moviw [0]fsr1
 19472  0268  0023               	movlb	3	; select bank3
 19473  0269  00B8               	movwf	_mod_value^(0+384)
 19474  026A  3F41               	moviw [1]fsr1
 19475  026B  00B9               	movwf	(_mod_value+1)^(0+384)
 19476                           
 19477                           ;interrupts.c: 198: mod_value = modulation(mod_value, adjusted_pot_value);
 19478  026C  0838               	movf	_mod_value^(0+384),w
 19479  026D  0020               	movlb	0	; select bank0
 19480  026E  00AE               	movwf	modulation@x
 19481  026F  0023               	movlb	3	; select bank3
 19482  0270  0839               	movf	(_mod_value+1)^(0+384),w
 19483  0271  0020               	movlb	0	; select bank0
 19484  0272  00AF               	movwf	modulation@x+1
 19485  0273  0D89               	rlf	9,f
 19486  0274  3B89               	subwfb	9,f
 19487  0275  0989               	comf	9,f
 19488  0276  00B0               	movwf	modulation@x+2
 19489  0277  00B1               	movwf	modulation@x+3
 19490  0278  0024               	movlb	4	; select bank4
 19491  0279  0845               	movf	_adjusted_pot_value^(0+512),w
 19492  027A  0020               	movlb	0	; select bank0
 19493  027B  00B2               	movwf	modulation@y
 19494  027C  0024               	movlb	4	; select bank4
 19495  027D  0846               	movf	(_adjusted_pot_value+1)^(0+512),w
 19496  027E  0020               	movlb	0	; select bank0
 19497  027F  00B3               	movwf	modulation@y+1
 19498  0280  0D89               	rlf	9,f
 19499  0281  3B89               	subwfb	9,f
 19500  0282  0989               	comf	9,f
 19501  0283  00B4               	movwf	modulation@y+2
 19502  0284  00B5               	movwf	modulation@y+3
 19503  0285  31A4  2412  3180   	fcall	_modulation
 19504  0288  0020               	movlb	0	; select bank0
 19505  0289  082F               	movf	?_modulation+1,w
 19506  028A  0023               	movlb	3	; select bank3
 19507  028B  00B9               	movwf	(_mod_value+1)^(0+384)
 19508  028C  0020               	movlb	0	; select bank0
 19509  028D  082E               	movf	?_modulation,w
 19510  028E  0023               	movlb	3	; select bank3
 19511  028F  00B8               	movwf	_mod_value^(0+384)
 19512                           
 19513                           ;interrupts.c: 199: CCPR3 = mod_value / 2;
 19514  0290  3002               	movlw	2
 19515  0291  00F0               	movwf	___awdiv@divisor
 19516  0292  3000               	movlw	0
 19517  0293  00F1               	movwf	___awdiv@divisor+1
 19518  0294  0839               	movf	(_mod_value+1)^(0+384),w
 19519  0295  00F3               	movwf	___awdiv@dividend+1
 19520  0296  0838               	movf	_mod_value^(0+384),w
 19521  0297  00F2               	movwf	___awdiv@dividend
 19522  0298  31A6  26E4  3180   	fcall	___awdiv
 19523  029B  0871               	movf	?___awdiv+1,w
 19524  029C  0026               	movlb	6	; select bank6
 19525  029D  0092               	movwf	18	;volatile
 19526  029E  0870               	movf	?___awdiv,w
 19527  029F  0091               	movwf	17	;volatile
 19528                           
 19529                           ;interrupts.c: 200: mod_counter++;
 19530  02A0  3001               	movlw	1
 19531  02A1  0023               	movlb	3	; select bank3
 19532  02A2  07B6               	addwf	_mod_counter^(0+384),f
 19533  02A3  3000               	movlw	0
 19534  02A4  3DB7               	addwfc	(_mod_counter+1)^(0+384),f
 19535  02A5                     i1l6718:	
 19536                           
 19537                           ;interrupts.c: 204: }
 19538                           ;interrupts.c: 208: if (preset_programmning_on == 1) {
 19539  02A5  0344               	decf	_preset_programmning_on^(0+384),w
 19540  02A6  1D03               	btfss	3,2
 19541  02A7  2AD3               	goto	i1l6730
 19542                           
 19543                           ;interrupts.c: 209: preset_blink++;
 19544  02A8  3001               	movlw	1
 19545  02A9  0020               	movlb	0	; select bank0
 19546  02AA  00BA               	movwf	??_isr
 19547  02AB  083A               	movf	??_isr,w
 19548  02AC  0023               	movlb	3	; select bank3
 19549  02AD  07C3               	addwf	_preset_blink^(0+384),f
 19550                           
 19551                           ;interrupts.c: 211: if (preset_blink >= blink_delay) {
 19552  02AE  0849               	movf	(_blink_delay+1)^(0+384),w
 19553  02AF  3A80               	xorlw	128
 19554  02B0  3C80               	sublw	128
 19555  02B1  1D03               	skipz
 19556  02B2  2AB5               	goto	u669_25
 19557  02B3  0848               	movf	_blink_delay^(0+384),w
 19558  02B4  0243               	subwf	_preset_blink^(0+384),w
 19559  02B5                     u669_25:	
 19560  02B5  1C03               	skipc
 19561  02B6  2AD8               	goto	i1l6734
 19562                           
 19563                           ;interrupts.c: 212: LATBbits.LATB1 = 1;
 19564  02B7  0022               	movlb	2	; select bank2
 19565  02B8  148D               	bsf	13,1	;volatile
 19566                           
 19567                           ;interrupts.c: 213: if (preset_blink > blink_delay*2) {
 19568  02B9  0023               	movlb	3	; select bank3
 19569  02BA  0849               	movf	(_blink_delay+1)^(0+384),w
 19570  02BB  0020               	movlb	0	; select bank0
 19571  02BC  00BB               	movwf	??_isr+1
 19572  02BD  0023               	movlb	3	; select bank3
 19573  02BE  0848               	movf	_blink_delay^(0+384),w
 19574  02BF  0020               	movlb	0	; select bank0
 19575  02C0  00BA               	movwf	??_isr
 19576  02C1  35BA               	lslf	??_isr,f
 19577  02C2  0DBB               	rlf	??_isr+1,f
 19578  02C3  083B               	movf	??_isr+1,w
 19579  02C4  3A80               	xorlw	128
 19580  02C5  00BC               	movwf	??_isr+2
 19581  02C6  3080               	movlw	128
 19582  02C7  023C               	subwf	??_isr+2,w
 19583  02C8  1D03               	skipz
 19584  02C9  2ACE               	goto	u670_25
 19585  02CA  0023               	movlb	3	; select bank3
 19586  02CB  0843               	movf	_preset_blink^(0+384),w
 19587  02CC  0020               	movlb	0	; select bank0
 19588  02CD  023A               	subwf	??_isr,w
 19589  02CE                     u670_25:	
 19590  02CE  1803               	skipnc
 19591  02CF  2ADA               	goto	i1l163
 19592                           
 19593                           ;interrupts.c: 214: preset_blink = 0;
 19594  02D0  0023               	movlb	3	; select bank3
 19595  02D1  01C3               	clrf	_preset_blink^(0+384)
 19596                           
 19597                           ;interrupts.c: 215: }
 19598                           ;interrupts.c: 217: } else {
 19599  02D2  2ADA               	goto	i1l163
 19600  02D3                     i1l6730:	
 19601                           ;interrupts.c: 219: }
 19602                           ;interrupts.c: 221: } else {
 19603                           
 19604                           ;interrupts.c: 218: LATBbits.LATB1 = 0;
 19605                           
 19606                           
 19607                           ;interrupts.c: 222: if (preset_blink > 0) {
 19608  02D3  0023               	movlb	3	; select bank3
 19609  02D4  0843               	movf	_preset_blink^(0+384),w
 19610  02D5  1903               	btfsc	3,2
 19611  02D6  2ADA               	goto	i1l163
 19612                           
 19613                           ;interrupts.c: 223: preset_blink = 0;
 19614  02D7  01C3               	clrf	_preset_blink^(0+384)
 19615  02D8                     i1l6734:	
 19616                           
 19617                           ;interrupts.c: 224: LATBbits.LATB1 = 0;
 19618  02D8  0022               	movlb	2	; select bank2
 19619  02D9  108D               	bcf	13,1	;volatile
 19620  02DA                     i1l163:	
 19621  02DA  0020               	movlb	0	; select bank0
 19622  02DB  0842               	movf	??_isr+8,w
 19623  02DC  00FF               	movwf	127
 19624  02DD  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 19625  02DE  0009               	retfie
 19626  02DF                     __end_of_isr:	
 19627                           
 19628                           	psect	text71
 19629  24D7                     __ptext71:	
 19630 ;; *************** function i1_set_leds_top *****************
 19631 ;; Defined at:
 19632 ;;		line 16 in file "LEDs.c"
 19633 ;; Parameters:    Size  Location     Type
 19634 ;;  x               2    0[COMMON] int 
 19635 ;;  ledState        2    2[COMMON] int 
 19636 ;; Auto vars:     Size  Location     Type
 19637 ;;		None
 19638 ;; Return value:  Size  Location     Type
 19639 ;;                  1    wreg      void 
 19640 ;; Registers used:
 19641 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 19642 ;; Tracked objects:
 19643 ;;		On entry : 0/0
 19644 ;;		On exit  : 0/0
 19645 ;;		Unchanged: 0/0
 19646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19647 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19648 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19650 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19651 ;;Total ram usage:        4 bytes
 19652 ;; Hardware stack levels used:    1
 19653 ;; This function calls:
 19654 ;;		Nothing
 19655 ;; This function is called by:
 19656 ;;		_isr
 19657 ;; This function uses a non-reentrant model
 19658 ;;
 19659                           
 19660                           
 19661                           ;psect for function i1_set_leds_top
 19662  24D7                     i1_set_leds_top:	
 19663                           
 19664                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 19665                           
 19666                           ;incstack = 0
 19667                           ; Regs used in i1_set_leds_top: [wreg-fsr0h+status,2+status,0]
 19668  24D7  0027               	movlb	7	; select bank7
 19669  24D8  100C               	bcf	12,0	;volatile
 19670                           
 19671                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 19672  24D9  108C               	bcf	12,1	;volatile
 19673                           
 19674                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 19675  24DA  110C               	bcf	12,2	;volatile
 19676                           
 19677                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 19678  24DB  118C               	bcf	12,3	;volatile
 19679                           
 19680                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 19681  24DC  120C               	bcf	12,4	;volatile
 19682                           
 19683                           ;LEDs.c: 22: switch (x) {
 19684  24DD  2D02               	goto	i1l6612
 19685  24DE                     i1l6600:	
 19686                           ;LEDs.c: 23: case 1:
 19687                           
 19688                           
 19689                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 19690  24DE  0C72               	rrf	i1set_leds_top@ledState,w
 19691  24DF  1C03               	skipc
 19692  24E0  100C               	bcf	12,0	;volatile
 19693  24E1  1803               	skipnc
 19694  24E2  140C               	bsf	12,0	;volatile
 19695                           
 19696                           ;LEDs.c: 25: break;
 19697  24E3  0008               	return
 19698  24E4                     i1l6602:	
 19699                           ;LEDs.c: 26: case 2:
 19700                           
 19701                           
 19702                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 19703  24E4  0C72               	rrf	i1set_leds_top@ledState,w
 19704  24E5  1C03               	skipc
 19705  24E6  108C               	bcf	12,1	;volatile
 19706  24E7  1803               	skipnc
 19707  24E8  148C               	bsf	12,1	;volatile
 19708                           
 19709                           ;LEDs.c: 28: break;
 19710  24E9  0008               	return
 19711  24EA                     i1l6604:	
 19712                           ;LEDs.c: 29: case 3:
 19713                           
 19714                           
 19715                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 19716  24EA  0C72               	rrf	i1set_leds_top@ledState,w
 19717  24EB  1C03               	skipc
 19718  24EC  110C               	bcf	12,2	;volatile
 19719  24ED  1803               	skipnc
 19720  24EE  150C               	bsf	12,2	;volatile
 19721                           
 19722                           ;LEDs.c: 31: break;
 19723  24EF  0008               	return
 19724  24F0                     i1l6606:	
 19725                           ;LEDs.c: 32: case 4:
 19726                           
 19727                           
 19728                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 19729  24F0  0C72               	rrf	i1set_leds_top@ledState,w
 19730  24F1  1C03               	skipc
 19731  24F2  118C               	bcf	12,3	;volatile
 19732  24F3  1803               	skipnc
 19733  24F4  158C               	bsf	12,3	;volatile
 19734                           
 19735                           ;LEDs.c: 34: break;
 19736  24F5  0008               	return
 19737  24F6                     i1l6608:	
 19738                           ;LEDs.c: 35: case 5:
 19739                           
 19740                           
 19741                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 19742  24F6  0C72               	rrf	i1set_leds_top@ledState,w
 19743  24F7  1C03               	skipc
 19744  24F8  120C               	bcf	12,4	;volatile
 19745  24F9  1803               	skipnc
 19746  24FA  160C               	bsf	12,4	;volatile
 19747                           
 19748                           ;LEDs.c: 39: break;
 19749                           
 19750                           ;LEDs.c: 38: case 6:
 19751                           
 19752                           ;LEDs.c: 37: break;
 19753  24FB  0008               	return
 19754  24FC                     i1l792:	
 19755                           ;LEDs.c: 40: case 100:
 19756                           
 19757                           
 19758                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 19759  24FC  140C               	bsf	12,0	;volatile
 19760                           
 19761                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 19762  24FD  148C               	bsf	12,1	;volatile
 19763                           
 19764                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 19765  24FE  150C               	bsf	12,2	;volatile
 19766                           
 19767                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 19768  24FF  158C               	bsf	12,3	;volatile
 19769                           
 19770                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 19771  2500  160C               	bsf	12,4	;volatile
 19772                           
 19773                           ;LEDs.c: 47: }
 19774                           
 19775                           ;LEDs.c: 46: break;
 19776  2501  0008               	return
 19777  2502                     i1l6612:	
 19778                           
 19779                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 19780                           ; Switch size 1, requested type "space"
 19781                           ; Number of cases is 1, Range of values is 0 to 0
 19782                           ; switch strategies available:
 19783                           ; Name         Instructions Cycles
 19784                           ; simple_byte            4     3 (average)
 19785                           ; direct_byte            8     6 (fixed)
 19786                           ; jumptable            260     6 (fixed)
 19787                           ;	Chosen strategy is simple_byte
 19788  2502  0871               	movf	i1set_leds_top@x+1,w
 19789  2503  3A00               	xorlw	0	; case 0
 19790  2504  1903               	skipnz
 19791  2505  2D07               	goto	i1l9408
 19792  2506  2D1E               	goto	i1l793
 19793  2507                     i1l9408:	
 19794                           
 19795                           ; Switch size 1, requested type "space"
 19796                           ; Number of cases is 7, Range of values is 1 to 100
 19797                           ; switch strategies available:
 19798                           ; Name         Instructions Cycles
 19799                           ; simple_byte           22    12 (average)
 19800                           ; direct_byte          209     9 (fixed)
 19801                           ; jumptable            263     9 (fixed)
 19802                           ;	Chosen strategy is simple_byte
 19803  2507  0870               	movf	i1set_leds_top@x,w
 19804  2508  3A01               	xorlw	1	; case 1
 19805  2509  1903               	skipnz
 19806  250A  2CDE               	goto	i1l6600
 19807  250B  3A03               	xorlw	3	; case 2
 19808  250C  1903               	skipnz
 19809  250D  2CE4               	goto	i1l6602
 19810  250E  3A01               	xorlw	1	; case 3
 19811  250F  1903               	skipnz
 19812  2510  2CEA               	goto	i1l6604
 19813  2511  3A07               	xorlw	7	; case 4
 19814  2512  1903               	skipnz
 19815  2513  2CF0               	goto	i1l6606
 19816  2514  3A01               	xorlw	1	; case 5
 19817  2515  1903               	skipnz
 19818  2516  2CF6               	goto	i1l6608
 19819  2517  3A03               	xorlw	3	; case 6
 19820  2518  1903               	skipnz
 19821  2519  2D1E               	goto	i1l793
 19822  251A  3A62               	xorlw	98	; case 100
 19823  251B  1903               	skipnz
 19824  251C  2CFC               	goto	i1l792
 19825  251D  2D1E               	goto	i1l793
 19826  251E                     i1l793:	
 19827  251E  0008               	return
 19828  251F                     __end_ofi1_set_leds_top:	
 19829                           
 19830                           	psect	text72
 19831  2412                     __ptext72:	
 19832 ;; *************** function _modulation *****************
 19833 ;; Defined at:
 19834 ;;		line 222 in file "user.c"
 19835 ;; Parameters:    Size  Location     Type
 19836 ;;  x               4   14[BANK0 ] long 
 19837 ;;  y               4   18[BANK0 ] long 
 19838 ;; Auto vars:     Size  Location     Type
 19839 ;;		None
 19840 ;; Return value:  Size  Location     Type
 19841 ;;                  4   14[BANK0 ] long 
 19842 ;; Registers used:
 19843 ;;		wreg, status,2, status,0, pclath, cstack
 19844 ;; Tracked objects:
 19845 ;;		On entry : 0/0
 19846 ;;		On exit  : 0/0
 19847 ;;		Unchanged: 0/0
 19848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19849 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19851 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19852 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19853 ;;Total ram usage:       12 bytes
 19854 ;; Hardware stack levels used:    1
 19855 ;; Hardware stack levels required when called:    1
 19856 ;; This function calls:
 19857 ;;		i1___aldiv
 19858 ;;		i1___lmul
 19859 ;; This function is called by:
 19860 ;;		_isr
 19861 ;; This function uses a non-reentrant model
 19862 ;;
 19863                           
 19864                           
 19865                           ;psect for function _modulation
 19866  2412                     _modulation:	
 19867                           
 19868                           ;user.c: 225: return (127500 + (y * x)) / 1000;
 19869                           
 19870                           ;incstack = 0
 19871                           ; Regs used in _modulation: [wreg+status,2+status,0+pclath+cstack]
 19872  2412  3000               	movlw	0
 19873  2413  0020               	movlb	0	; select bank0
 19874  2414  00A3               	movwf	i1___aldiv@divisor+3
 19875  2415  3000               	movlw	0
 19876  2416  00A2               	movwf	i1___aldiv@divisor+2
 19877  2417  3003               	movlw	3
 19878  2418  00A1               	movwf	i1___aldiv@divisor+1
 19879  2419  30E8               	movlw	232
 19880  241A  00A0               	movwf	i1___aldiv@divisor
 19881  241B  300C               	movlw	12
 19882  241C  00B6               	movwf	??_modulation
 19883  241D  30F2               	movlw	242
 19884  241E  00B7               	movwf	??_modulation+1
 19885  241F  3001               	movlw	1
 19886  2420  00B8               	movwf	??_modulation+2
 19887  2421  3000               	movlw	0
 19888  2422  00B9               	movwf	??_modulation+3
 19889  2423  0835               	movf	modulation@y+3,w
 19890  2424  00F3               	movwf	i1___lmul@multiplier+3
 19891  2425  0834               	movf	modulation@y+2,w
 19892  2426  00F2               	movwf	i1___lmul@multiplier+2
 19893  2427  0833               	movf	modulation@y+1,w
 19894  2428  00F1               	movwf	i1___lmul@multiplier+1
 19895  2429  0832               	movf	modulation@y,w
 19896  242A  00F0               	movwf	i1___lmul@multiplier
 19897  242B  0831               	movf	modulation@x+3,w
 19898  242C  00F7               	movwf	i1___lmul@multiplicand+3
 19899  242D  0830               	movf	modulation@x+2,w
 19900  242E  00F6               	movwf	i1___lmul@multiplicand+2
 19901  242F  082F               	movf	modulation@x+1,w
 19902  2430  00F5               	movwf	i1___lmul@multiplicand+1
 19903  2431  082E               	movf	modulation@x,w
 19904  2432  00F4               	movwf	i1___lmul@multiplicand
 19905  2433  31A1  216D  31A4   	fcall	i1___lmul
 19906  2436  0870               	movf	?i1___lmul,w
 19907  2437  0020               	movlb	0	; select bank0
 19908  2438  07B6               	addwf	??_modulation,f
 19909  2439  0871               	movf	?i1___lmul+1,w
 19910  243A  3DB7               	addwfc	??_modulation+1,f
 19911  243B  0872               	movf	?i1___lmul+2,w
 19912  243C  3DB8               	addwfc	??_modulation+2,f
 19913  243D  0873               	movf	?i1___lmul+3,w
 19914  243E  3DB9               	addwfc	??_modulation+3,f
 19915  243F  0839               	movf	??_modulation+3,w
 19916  2440  00A7               	movwf	i1___aldiv@dividend+3
 19917  2441  0838               	movf	??_modulation+2,w
 19918  2442  00A6               	movwf	i1___aldiv@dividend+2
 19919  2443  0837               	movf	??_modulation+1,w
 19920  2444  00A5               	movwf	i1___aldiv@dividend+1
 19921  2445  0836               	movf	??_modulation,w
 19922  2446  00A4               	movwf	i1___aldiv@dividend
 19923  2447  3198  20CE         	fcall	i1___aldiv
 19924  2449  0020               	movlb	0	; select bank0
 19925  244A  0823               	movf	?i1___aldiv+3,w
 19926  244B  00B1               	movwf	?_modulation+3
 19927  244C  0822               	movf	?i1___aldiv+2,w
 19928  244D  00B0               	movwf	?_modulation+2
 19929  244E  0821               	movf	?i1___aldiv+1,w
 19930  244F  00AF               	movwf	?_modulation+1
 19931  2450  0820               	movf	?i1___aldiv,w
 19932  2451  00AE               	movwf	?_modulation
 19933  2452  0008               	return
 19934  2453                     __end_of_modulation:	
 19935                           
 19936                           	psect	text73
 19937  216D                     __ptext73:	
 19938 ;; *************** function i1___lmul *****************
 19939 ;; Defined at:
 19940 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 19941 ;; Parameters:    Size  Location     Type
 19942 ;;  multiplier      4    0[COMMON] unsigned long 
 19943 ;;  multiplicand    4    4[COMMON] unsigned long 
 19944 ;; Auto vars:     Size  Location     Type
 19945 ;;  __lmul          4    8[COMMON] unsigned long 
 19946 ;; Return value:  Size  Location     Type
 19947 ;;                  4    0[COMMON] unsigned long 
 19948 ;; Registers used:
 19949 ;;		wreg, status,2, status,0
 19950 ;; Tracked objects:
 19951 ;;		On entry : 0/0
 19952 ;;		On exit  : 0/0
 19953 ;;		Unchanged: 0/0
 19954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19955 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19956 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19958 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19959 ;;Total ram usage:       12 bytes
 19960 ;; Hardware stack levels used:    1
 19961 ;; This function calls:
 19962 ;;		Nothing
 19963 ;; This function is called by:
 19964 ;;		_modulation
 19965 ;; This function uses a non-reentrant model
 19966 ;;
 19967                           
 19968                           
 19969                           ;psect for function i1___lmul
 19970  216D                     i1___lmul:	
 19971                           
 19972                           ;incstack = 0
 19973                           ; Regs used in i1___lmul: [wreg+status,2+status,0]
 19974  216D  3000               	movlw	0
 19975  216E  00FB               	movwf	i1___lmul@product+3
 19976  216F  3000               	movlw	0
 19977  2170  00FA               	movwf	i1___lmul@product+2
 19978  2171  3000               	movlw	0
 19979  2172  00F9               	movwf	i1___lmul@product+1
 19980  2173  3000               	movlw	0
 19981  2174  00F8               	movwf	i1___lmul@product
 19982  2175                     i1l5892:	
 19983  2175  1C70               	btfss	i1___lmul@multiplier,0
 19984  2176  297F               	goto	i1l5896
 19985  2177  0874               	movf	i1___lmul@multiplicand,w
 19986  2178  07F8               	addwf	i1___lmul@product,f
 19987  2179  0875               	movf	i1___lmul@multiplicand+1,w
 19988  217A  3DF9               	addwfc	i1___lmul@product+1,f
 19989  217B  0876               	movf	i1___lmul@multiplicand+2,w
 19990  217C  3DFA               	addwfc	i1___lmul@product+2,f
 19991  217D  0877               	movf	i1___lmul@multiplicand+3,w
 19992  217E  3DFB               	addwfc	i1___lmul@product+3,f
 19993  217F                     i1l5896:	
 19994  217F  3001               	movlw	1
 19995  2180                     u515_25:	
 19996  2180  35F4               	lslf	i1___lmul@multiplicand,f
 19997  2181  0DF5               	rlf	i1___lmul@multiplicand+1,f
 19998  2182  0DF6               	rlf	i1___lmul@multiplicand+2,f
 19999  2183  0DF7               	rlf	i1___lmul@multiplicand+3,f
 20000  2184  0B89               	decfsz	9,f
 20001  2185  2980               	goto	u515_25
 20002  2186  3001               	movlw	1
 20003  2187                     u516_25:	
 20004  2187  36F3               	lsrf	i1___lmul@multiplier+3,f
 20005  2188  0CF2               	rrf	i1___lmul@multiplier+2,f
 20006  2189  0CF1               	rrf	i1___lmul@multiplier+1,f
 20007  218A  0CF0               	rrf	i1___lmul@multiplier,f
 20008  218B  0B89               	decfsz	9,f
 20009  218C  2987               	goto	u516_25
 20010  218D  0873               	movf	i1___lmul@multiplier+3,w
 20011  218E  0472               	iorwf	i1___lmul@multiplier+2,w
 20012  218F  0471               	iorwf	i1___lmul@multiplier+1,w
 20013  2190  0470               	iorwf	i1___lmul@multiplier,w
 20014  2191  1D03               	skipz
 20015  2192  2975               	goto	i1l5892
 20016  2193  087B               	movf	i1___lmul@product+3,w
 20017  2194  00F3               	movwf	?i1___lmul+3
 20018  2195  087A               	movf	i1___lmul@product+2,w
 20019  2196  00F2               	movwf	?i1___lmul+2
 20020  2197  0879               	movf	i1___lmul@product+1,w
 20021  2198  00F1               	movwf	?i1___lmul+1
 20022  2199  0878               	movf	i1___lmul@product,w
 20023  219A  00F0               	movwf	?i1___lmul
 20024  219B  0008               	return
 20025  219C                     __end_ofi1___lmul:	
 20026                           
 20027                           	psect	text74
 20028  18CE                     __ptext74:	
 20029 ;; *************** function i1___aldiv *****************
 20030 ;; Defined at:
 20031 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
 20032 ;; Parameters:    Size  Location     Type
 20033 ;;  divisor         4    0[BANK0 ] long 
 20034 ;;  dividend        4    4[BANK0 ] long 
 20035 ;; Auto vars:     Size  Location     Type
 20036 ;;  __aldiv         4   10[BANK0 ] long 
 20037 ;;  __aldiv         1    9[BANK0 ] unsigned char 
 20038 ;;  __aldiv         1    8[BANK0 ] unsigned char 
 20039 ;; Return value:  Size  Location     Type
 20040 ;;                  4    0[BANK0 ] long 
 20041 ;; Registers used:
 20042 ;;		wreg, status,2, status,0
 20043 ;; Tracked objects:
 20044 ;;		On entry : 0/0
 20045 ;;		On exit  : 0/0
 20046 ;;		Unchanged: 0/0
 20047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20048 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20049 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20050 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20051 ;;      Totals:         1      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20052 ;;Total ram usage:       15 bytes
 20053 ;; Hardware stack levels used:    1
 20054 ;; This function calls:
 20055 ;;		Nothing
 20056 ;; This function is called by:
 20057 ;;		_modulation
 20058 ;; This function uses a non-reentrant model
 20059 ;;
 20060                           
 20061                           
 20062                           ;psect for function i1___aldiv
 20063  18CE                     i1___aldiv:	
 20064                           
 20065                           ;incstack = 0
 20066                           ; Regs used in i1___aldiv: [wreg+status,2+status,0]
 20067  18CE  0020               	movlb	0	; select bank0
 20068  18CF  01A9               	clrf	i1___aldiv@sign
 20069  18D0  1FA3               	btfss	i1___aldiv@divisor+3,7
 20070  18D1  28DF               	goto	i1l1990
 20071  18D2  09A0               	comf	i1___aldiv@divisor,f
 20072  18D3  09A1               	comf	i1___aldiv@divisor+1,f
 20073  18D4  09A2               	comf	i1___aldiv@divisor+2,f
 20074  18D5  09A3               	comf	i1___aldiv@divisor+3,f
 20075  18D6  0AA0               	incf	i1___aldiv@divisor,f
 20076  18D7  1903               	skipnz
 20077  18D8  0AA1               	incf	i1___aldiv@divisor+1,f
 20078  18D9  1903               	skipnz
 20079  18DA  0AA2               	incf	i1___aldiv@divisor+2,f
 20080  18DB  1903               	skipnz
 20081  18DC  0AA3               	incf	i1___aldiv@divisor+3,f
 20082  18DD  01A9               	clrf	i1___aldiv@sign
 20083  18DE  0AA9               	incf	i1___aldiv@sign,f
 20084  18DF                     i1l1990:	
 20085  18DF  1FA7               	btfss	i1___aldiv@dividend+3,7
 20086  18E0  28F0               	goto	i1l5914
 20087  18E1  09A4               	comf	i1___aldiv@dividend,f
 20088  18E2  09A5               	comf	i1___aldiv@dividend+1,f
 20089  18E3  09A6               	comf	i1___aldiv@dividend+2,f
 20090  18E4  09A7               	comf	i1___aldiv@dividend+3,f
 20091  18E5  0AA4               	incf	i1___aldiv@dividend,f
 20092  18E6  1903               	skipnz
 20093  18E7  0AA5               	incf	i1___aldiv@dividend+1,f
 20094  18E8  1903               	skipnz
 20095  18E9  0AA6               	incf	i1___aldiv@dividend+2,f
 20096  18EA  1903               	skipnz
 20097  18EB  0AA7               	incf	i1___aldiv@dividend+3,f
 20098  18EC  3001               	movlw	1
 20099  18ED  00FC               	movwf	??i1___aldiv
 20100  18EE  087C               	movf	??i1___aldiv,w
 20101  18EF  06A9               	xorwf	i1___aldiv@sign,f
 20102  18F0                     i1l5914:	
 20103  18F0  3000               	movlw	0
 20104  18F1  00AD               	movwf	i1___aldiv@quotient+3
 20105  18F2  3000               	movlw	0
 20106  18F3  00AC               	movwf	i1___aldiv@quotient+2
 20107  18F4  3000               	movlw	0
 20108  18F5  00AB               	movwf	i1___aldiv@quotient+1
 20109  18F6  3000               	movlw	0
 20110  18F7  00AA               	movwf	i1___aldiv@quotient
 20111  18F8  0823               	movf	i1___aldiv@divisor+3,w
 20112  18F9  0422               	iorwf	i1___aldiv@divisor+2,w
 20113  18FA  0421               	iorwf	i1___aldiv@divisor+1,w
 20114  18FB  0420               	iorwf	i1___aldiv@divisor,w
 20115  18FC  1903               	skipnz
 20116  18FD  2939               	goto	i1l5936
 20117  18FE  01A8               	clrf	i1___aldiv@counter
 20118  18FF  0AA8               	incf	i1___aldiv@counter,f
 20119  1900                     i1l5922:	
 20120  1900  1BA3               	btfsc	i1___aldiv@divisor+3,7
 20121  1901  290E               	goto	i1l5924
 20122  1902  3001               	movlw	1
 20123  1903                     u521_25:	
 20124  1903  35A0               	lslf	i1___aldiv@divisor,f
 20125  1904  0DA1               	rlf	i1___aldiv@divisor+1,f
 20126  1905  0DA2               	rlf	i1___aldiv@divisor+2,f
 20127  1906  0DA3               	rlf	i1___aldiv@divisor+3,f
 20128  1907  0B89               	decfsz	9,f
 20129  1908  2903               	goto	u521_25
 20130  1909  3001               	movlw	1
 20131  190A  00FC               	movwf	??i1___aldiv
 20132  190B  087C               	movf	??i1___aldiv,w
 20133  190C  07A8               	addwf	i1___aldiv@counter,f
 20134  190D  2900               	goto	i1l5922
 20135  190E                     i1l5924:	
 20136  190E  3001               	movlw	1
 20137  190F                     u523_25:	
 20138  190F  35AA               	lslf	i1___aldiv@quotient,f
 20139  1910  0DAB               	rlf	i1___aldiv@quotient+1,f
 20140  1911  0DAC               	rlf	i1___aldiv@quotient+2,f
 20141  1912  0DAD               	rlf	i1___aldiv@quotient+3,f
 20142  1913  0B89               	decfsz	9,f
 20143  1914  290F               	goto	u523_25
 20144  1915  0823               	movf	i1___aldiv@divisor+3,w
 20145  1916  0227               	subwf	i1___aldiv@dividend+3,w
 20146  1917  1D03               	skipz
 20147  1918  2923               	goto	u524_25
 20148  1919  0822               	movf	i1___aldiv@divisor+2,w
 20149  191A  0226               	subwf	i1___aldiv@dividend+2,w
 20150  191B  1D03               	skipz
 20151  191C  2923               	goto	u524_25
 20152  191D  0821               	movf	i1___aldiv@divisor+1,w
 20153  191E  0225               	subwf	i1___aldiv@dividend+1,w
 20154  191F  1D03               	skipz
 20155  1920  2923               	goto	u524_25
 20156  1921  0820               	movf	i1___aldiv@divisor,w
 20157  1922  0224               	subwf	i1___aldiv@dividend,w
 20158  1923                     u524_25:	
 20159  1923  1C03               	skipc
 20160  1924  292E               	goto	i1l5932
 20161  1925  0820               	movf	i1___aldiv@divisor,w
 20162  1926  02A4               	subwf	i1___aldiv@dividend,f
 20163  1927  0821               	movf	i1___aldiv@divisor+1,w
 20164  1928  3BA5               	subwfb	i1___aldiv@dividend+1,f
 20165  1929  0822               	movf	i1___aldiv@divisor+2,w
 20166  192A  3BA6               	subwfb	i1___aldiv@dividend+2,f
 20167  192B  0823               	movf	i1___aldiv@divisor+3,w
 20168  192C  3BA7               	subwfb	i1___aldiv@dividend+3,f
 20169  192D  142A               	bsf	i1___aldiv@quotient,0
 20170  192E                     i1l5932:	
 20171  192E  3001               	movlw	1
 20172  192F                     u525_25:	
 20173  192F  36A3               	lsrf	i1___aldiv@divisor+3,f
 20174  1930  0CA2               	rrf	i1___aldiv@divisor+2,f
 20175  1931  0CA1               	rrf	i1___aldiv@divisor+1,f
 20176  1932  0CA0               	rrf	i1___aldiv@divisor,f
 20177  1933  0B89               	decfsz	9,f
 20178  1934  292F               	goto	u525_25
 20179  1935  3001               	movlw	1
 20180  1936  02A8               	subwf	i1___aldiv@counter,f
 20181  1937  1D03               	btfss	3,2
 20182  1938  290E               	goto	i1l5924
 20183  1939                     i1l5936:	
 20184  1939  0829               	movf	i1___aldiv@sign,w
 20185  193A  1903               	btfsc	3,2
 20186  193B  2947               	goto	i1l5940
 20187  193C  09AA               	comf	i1___aldiv@quotient,f
 20188  193D  09AB               	comf	i1___aldiv@quotient+1,f
 20189  193E  09AC               	comf	i1___aldiv@quotient+2,f
 20190  193F  09AD               	comf	i1___aldiv@quotient+3,f
 20191  1940  0AAA               	incf	i1___aldiv@quotient,f
 20192  1941  1903               	skipnz
 20193  1942  0AAB               	incf	i1___aldiv@quotient+1,f
 20194  1943  1903               	skipnz
 20195  1944  0AAC               	incf	i1___aldiv@quotient+2,f
 20196  1945  1903               	skipnz
 20197  1946  0AAD               	incf	i1___aldiv@quotient+3,f
 20198  1947                     i1l5940:	
 20199  1947  082D               	movf	i1___aldiv@quotient+3,w
 20200  1948  00A3               	movwf	?i1___aldiv+3
 20201  1949  082C               	movf	i1___aldiv@quotient+2,w
 20202  194A  00A2               	movwf	?i1___aldiv+2
 20203  194B  082B               	movf	i1___aldiv@quotient+1,w
 20204  194C  00A1               	movwf	?i1___aldiv+1
 20205  194D  082A               	movf	i1___aldiv@quotient,w
 20206  194E  00A0               	movwf	?i1___aldiv
 20207  194F  0008               	return
 20208  1950                     __end_ofi1___aldiv:	
 20209                           
 20210                           	psect	text75
 20211  26E4                     __ptext75:	
 20212 ;; *************** function ___awdiv *****************
 20213 ;; Defined at:
 20214 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 20215 ;; Parameters:    Size  Location     Type
 20216 ;;  divisor         2    0[COMMON] int 
 20217 ;;  dividend        2    2[COMMON] int 
 20218 ;; Auto vars:     Size  Location     Type
 20219 ;;  quotient        2    7[COMMON] int 
 20220 ;;  sign            1    6[COMMON] unsigned char 
 20221 ;;  counter         1    5[COMMON] unsigned char 
 20222 ;; Return value:  Size  Location     Type
 20223 ;;                  2    0[COMMON] int 
 20224 ;; Registers used:
 20225 ;;		wreg, status,2, status,0
 20226 ;; Tracked objects:
 20227 ;;		On entry : 0/0
 20228 ;;		On exit  : 0/0
 20229 ;;		Unchanged: 0/0
 20230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20231 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20232 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20233 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20234 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20235 ;;Total ram usage:        9 bytes
 20236 ;; Hardware stack levels used:    1
 20237 ;; This function calls:
 20238 ;;		Nothing
 20239 ;; This function is called by:
 20240 ;;		_isr
 20241 ;;		_USARTWriteInt
 20242 ;; This function uses a non-reentrant model
 20243 ;;
 20244                           
 20245                           
 20246                           ;psect for function ___awdiv
 20247  26E4                     ___awdiv:	
 20248                           
 20249                           ;incstack = 0
 20250                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 20251  26E4  01F6               	clrf	___awdiv@sign
 20252  26E5  1FF1               	btfss	___awdiv@divisor+1,7
 20253  26E6  2EEE               	goto	i1l6562
 20254  26E7  09F0               	comf	___awdiv@divisor,f
 20255  26E8  09F1               	comf	___awdiv@divisor+1,f
 20256  26E9  0AF0               	incf	___awdiv@divisor,f
 20257  26EA  1903               	skipnz
 20258  26EB  0AF1               	incf	___awdiv@divisor+1,f
 20259  26EC  01F6               	clrf	___awdiv@sign
 20260  26ED  0AF6               	incf	___awdiv@sign,f
 20261  26EE                     i1l6562:	
 20262  26EE  1FF3               	btfss	___awdiv@dividend+1,7
 20263  26EF  2EF9               	goto	i1l6568
 20264  26F0  09F2               	comf	___awdiv@dividend,f
 20265  26F1  09F3               	comf	___awdiv@dividend+1,f
 20266  26F2  0AF2               	incf	___awdiv@dividend,f
 20267  26F3  1903               	skipnz
 20268  26F4  0AF3               	incf	___awdiv@dividend+1,f
 20269  26F5  3001               	movlw	1
 20270  26F6  00F4               	movwf	??___awdiv
 20271  26F7  0874               	movf	??___awdiv,w
 20272  26F8  06F6               	xorwf	___awdiv@sign,f
 20273  26F9                     i1l6568:	
 20274  26F9  01F7               	clrf	___awdiv@quotient
 20275  26FA  01F8               	clrf	___awdiv@quotient+1
 20276  26FB  0870               	movf	___awdiv@divisor,w
 20277  26FC  0471               	iorwf	___awdiv@divisor+1,w
 20278  26FD  1903               	btfsc	3,2
 20279  26FE  2F28               	goto	i1l6590
 20280  26FF  01F5               	clrf	___awdiv@counter
 20281  2700  0AF5               	incf	___awdiv@counter,f
 20282  2701                     i1l6578:	
 20283  2701  1BF1               	btfsc	___awdiv@divisor+1,7
 20284  2702  2F0D               	goto	i1l6580
 20285  2703  3001               	movlw	1
 20286  2704                     u635_25:	
 20287  2704  35F0               	lslf	___awdiv@divisor,f
 20288  2705  0DF1               	rlf	___awdiv@divisor+1,f
 20289  2706  0B89               	decfsz	9,f
 20290  2707  2F04               	goto	u635_25
 20291  2708  3001               	movlw	1
 20292  2709  00F4               	movwf	??___awdiv
 20293  270A  0874               	movf	??___awdiv,w
 20294  270B  07F5               	addwf	___awdiv@counter,f
 20295  270C  2F01               	goto	i1l6578
 20296  270D                     i1l6580:	
 20297  270D  3001               	movlw	1
 20298  270E                     u637_25:	
 20299  270E  35F7               	lslf	___awdiv@quotient,f
 20300  270F  0DF8               	rlf	___awdiv@quotient+1,f
 20301  2710  0B89               	decfsz	9,f
 20302  2711  2F0E               	goto	u637_25
 20303  2712  0871               	movf	___awdiv@divisor+1,w
 20304  2713  0273               	subwf	___awdiv@dividend+1,w
 20305  2714  1D03               	skipz
 20306  2715  2F18               	goto	u638_25
 20307  2716  0870               	movf	___awdiv@divisor,w
 20308  2717  0272               	subwf	___awdiv@dividend,w
 20309  2718                     u638_25:	
 20310  2718  1C03               	skipc
 20311  2719  2F1F               	goto	i1l6586
 20312  271A  0870               	movf	___awdiv@divisor,w
 20313  271B  02F2               	subwf	___awdiv@dividend,f
 20314  271C  0871               	movf	___awdiv@divisor+1,w
 20315  271D  3BF3               	subwfb	___awdiv@dividend+1,f
 20316  271E  1477               	bsf	___awdiv@quotient,0
 20317  271F                     i1l6586:	
 20318  271F  3001               	movlw	1
 20319  2720                     u639_25:	
 20320  2720  36F1               	lsrf	___awdiv@divisor+1,f
 20321  2721  0CF0               	rrf	___awdiv@divisor,f
 20322  2722  0B89               	decfsz	9,f
 20323  2723  2F20               	goto	u639_25
 20324  2724  3001               	movlw	1
 20325  2725  02F5               	subwf	___awdiv@counter,f
 20326  2726  1D03               	btfss	3,2
 20327  2727  2F0D               	goto	i1l6580
 20328  2728                     i1l6590:	
 20329  2728  0876               	movf	___awdiv@sign,w
 20330  2729  1903               	btfsc	3,2
 20331  272A  2F30               	goto	i1l6594
 20332  272B  09F7               	comf	___awdiv@quotient,f
 20333  272C  09F8               	comf	___awdiv@quotient+1,f
 20334  272D  0AF7               	incf	___awdiv@quotient,f
 20335  272E  1903               	skipnz
 20336  272F  0AF8               	incf	___awdiv@quotient+1,f
 20337  2730                     i1l6594:	
 20338  2730  0878               	movf	___awdiv@quotient+1,w
 20339  2731  00F1               	movwf	?___awdiv+1
 20340  2732  0877               	movf	___awdiv@quotient,w
 20341  2733  00F0               	movwf	?___awdiv
 20342  2734  0008               	return
 20343  2735                     __end_of___awdiv:	
 20344  007E                     btemp	set	126	;btemp
 20345  007E                     int$flags	set	126
 20346  007E                     wtemp	set	126
 20347  007E                     wtemp0	set	126
 20348  0080                     wtemp1	set	128
 20349  0082                     wtemp2	set	130
 20350  0084                     wtemp3	set	132
 20351  0086                     wtemp4	set	134
 20352  0088                     wtemp5	set	136
 20353  007F                     wtemp6	set	127
 20354  007E                     ttemp	set	126
 20355  007E                     ttemp0	set	126
 20356  0081                     ttemp1	set	129
 20357  0084                     ttemp2	set	132
 20358  0087                     ttemp3	set	135
 20359  007F                     ttemp4	set	127
 20360  007E                     ltemp	set	126
 20361  007E                     ltemp0	set	126
 20362  0082                     ltemp1	set	130
 20363  0086                     ltemp2	set	134
 20364  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    84
    Data        47
    BSS         291
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     37      74
    BANK1            80     80      80
    BANK2            80     74      77
    BANK3            80     14      80
    BANK4            80      9      68
    BANK5            80      0      44
    BANK6            80      0      64
    BANK7            80      0      64
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           30      0       0
    BANK12            0      0       0
    BANK13            0      0       0
    BANK14            0      0       0
    BANK15            0      0       0
    BANK16            0      0       0
    BANK17            0      0       0
    BANK18            0      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK2[2]), floor@expon(BANK2[2]), trunc@expon(BANK2[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), sin@coeff_a(CODE[15]), sin@coeff_b(CODE[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _modulation->i1___aldiv
    i1___aldiv->i1___lmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _isr->_modulation
    _modulation->i1___aldiv

Critical Paths under _main in BANK1

    _main->_map
    _update_selectMode->_setExpressionDisplay
    _update_selectMode->_setPresetDisplay
    _updateSwitchTap->_setDoublePressState
    _updateSwitchBypass->_setDoublePressState
    _setDoublePressState->_showSave
    _showSave->_ring_tactiles
    _solidring_tactiles->_wait_ms
    _ring_tactiles->_wait_ms
    _setPedalMode->_setExpressionDisplay
    _setPedalMode->_setPresetDisplay
    _setPresetDisplay->_set_leds_top
    _setExpressionDisplay->_set_leds_top
    _resetRingLEDs->_set_leds_top
    ___lltoft->___ftpack
    _read_top_tactile->_wait_ms
    _read_bottom_tactile->_wait_ms
    _map->___ftdiv
    _initSwitchBypass->_setSwitchBypassState
    _setSwitchBypassState->_wait_ms
    _wait_ms->___lmul
    ___fttol->_map
    ___ftmul->___awtoft
    ___ftadd->___ftneg
    ___ftneg->___ftmul
    ___ftdiv->___ftadd
    ___awtoft->___ftpack
    _ReadSavedSettings->_set_leds_top

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_scaleA100kPot
    _main->_scaleA10kPot
    _main->_scaleiA10kPot
    _updateModulationArray->_modSquare
    _modTri->___fttol
    _modSquare->_modSin
    _modSin->___wmul
    _modSawRev->_modSaw
    _modSaw->___fttol
    _set_subdivision->_trunc
    _trunc->___altoft
    _scaleiA10kPot->_pow
    _scaleA10kPot->_pow
    _scaleA100kPot->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _calcSinArray->_sin
    _sin->___ftsub
    _floor->___altoft
    ___altoft->___fttol
    _eval_poly->___wmul
    ___wmul->___fttol
    ___ftsub->_floor

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_scaleA100kPot
    _main->_scaleA10kPot
    _main->_scaleiA10kPot

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _isr in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _isr in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _isr in BANK18

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0  855508
                                              9 BANK3      5     5      0
                                              0 BANK4      9     9      0
                _ConfigureOscillator
                            _InitApp
                     _InitializeTaps
                  _ReadSavedSettings
                          _USARTInit
                           ___awtoft
                            ___fttol
                        _adc_convert
                       _calcSinArray
                   _initSwitchBypass
                                _map
                _read_bottom_tactile
                   _read_top_tactile
                      _scaleA100kPot
                       _scaleA10kPot
                      _scaleiA10kPot
                    _set_subdivision
              _updateModulationArray
                 _updateSwitchBypass
                    _updateSwitchTap
                        _update_mode
                  _update_selectMode
 ---------------------------------------------------------------------------------
 (1) _update_selectMode                                    1     1      0    5976
                                              7 BANK1      1     1      0
               _setExpressionDisplay
                   _setPresetDisplay
 ---------------------------------------------------------------------------------
 (1) _update_mode                                          1     1      0   11828
                                              7 BANK1      1     1      0
                      _resetRingLEDs
                       _setPedalMode
 ---------------------------------------------------------------------------------
 (1) _updateSwitchTap                                      9     9      0   27947
                                             28 BANK1      9     9      0
                            ___aldiv
                _setDoublePressState
                    _setLongTapState
 ---------------------------------------------------------------------------------
 (2) _setLongTapState                                      4     2      2     247
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     683
                                              0 BANK1     15     7      8
 ---------------------------------------------------------------------------------
 (1) _updateSwitchBypass                                   2     2      0   29505
                                             28 BANK1      2     2      0
                _setDoublePressState
                 _setLongBypassState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setLongBypassState                                   4     2      2     278
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) _setDoublePressState                                  4     2      2   26779
                                             24 BANK1      4     2      2
                      _resetRingLEDs
                       _setPedalMode
                   _setPresetDisplay
                           _showSave
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _showSave                                             1     1      0    9777
                                             23 BANK1      1     1      0
                      _ring_tactiles
                 _solidring_tactiles
 ---------------------------------------------------------------------------------
 (4) _solidring_tactiles                                   3     3      0    4822
                                             18 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (4) _ring_tactiles                                        5     5      0    4955
                                             18 BANK1      5     5      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _setPedalMode                                         0     0      0    8902
                      _resetRingLEDs
               _setExpressionDisplay
                   _setPresetDisplay
 ---------------------------------------------------------------------------------
 (2) _setPresetDisplay                                     3     3      0    3019
                                              4 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (2) _setExpressionDisplay                                 3     3      0    2957
                                              4 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _resetRingLEDs                                        0     0      0    2926
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (1) _updateModulationArray                                7     7      0  159167
                                             48 BANK2      7     7      0
                           ___awtoft
                             ___wmul
                             _modSaw
                          _modSawRev
                             _modSin
                          _modSquare
                             _modTri
 ---------------------------------------------------------------------------------
 (2) _modTri                                              18    12      6   29485
                                             14 BANK2     18    12      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) _modSquare                                            8     2      6   33820
                                             40 BANK2      8     2      6
                           ___awtoft (ARG)
                             ___ftge
                             _modSin
 ---------------------------------------------------------------------------------
 (3) _modSin                                              20    14      6   30569
                                             20 BANK2     20    14      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _modSawRev                                            8     2      6   29759
                                             37 BANK2      8     2      6
                           ___awtoft (ARG)
                             _modSaw
 ---------------------------------------------------------------------------------
 (3) _modSaw                                              23    17      6   29543
                                             14 BANK2     23    17      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _set_subdivision                                     12     8      4   19788
                                             31 BANK2     12     8      4
                           ___awtoft
                            ___ftmul
                            ___fttol
                              _trunc
 ---------------------------------------------------------------------------------
 (2) _trunc                                                9     6      3    5650
                                             22 BANK2      9     6      3
                           ___altoft
                           ___awtoft (ARG)
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (1) _scaleiA10kPot                                       12     9      3  162066
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (1) _scaleA10kPot                                        12     9      3  151724
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (1) _scaleA100kPot                                       12     9      3  151773
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (2) _pow                                                 18    12      6  135959
                                             53 BANK2     18    12      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  6     3      3   42410
                                             30 BANK2      6     3      3
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                 13    10      3   75207
                                             40 BANK2     13    10      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                               10     5      5    5741
                                             30 BANK2     10     5      5
                             ___ftge
                            ___ftneg
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    2763
                                              8 BANK1      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _read_top_tactile                                     1     1      0    3879
                                             18 BANK1      1     1      0
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _read_bottom_tactile                                  1     1      0    2709
                                             18 BANK1      1     1      0
                    _set_leds_bottom
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _map                                                 18     3     15   25638
                                             62 BANK1     18     3     15
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (1) _initSwitchBypass                                     2     2      0    2482
                                             22 BANK1      2     2      0
               _getSwitchBypassState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setSwitchBypassState                                 4     2      2    2448
                                             18 BANK1      4     2      2
            _updateSwitchBypassState
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _wait_ms                                              6     4      2    1831
                                             12 BANK1      6     4      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     374
                                              0 BANK1     12     4      8
 ---------------------------------------------------------------------------------
 (3) _updateSwitchBypassState                              2     0      2      77
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _getSwitchBypassState                                 2     0      2       0
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _calcSinArray                                         9     9      0   91240
                                             51 BANK2      9     9      0
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                             ___wmul
                                _sin
 ---------------------------------------------------------------------------------
 (2) _sin                                                 14    11      3   71601
                                             37 BANK2     14    11      3
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                          _eval_poly
                              _floor
 ---------------------------------------------------------------------------------
 (4) _floor                                                9     6      3   16942
                                             22 BANK2      9     6      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                6     2      4     784
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4    1603
                                              0 BANK2     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                                _map (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    2970
                                              0 BANK1      9     3      6
 ---------------------------------------------------------------------------------
 (3) ___altoft                                             8     4      4    2942
                                             14 BANK2      8     4      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           10     3      7   18011
                                             20 BANK2     10     3      7
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1060
                                             14 BANK2      6     2      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    7652
                                             14 BANK1     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    8679
                                             31 BANK2      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
                              _floor (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    8121
                                             33 BANK1     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3    2221
                                             30 BANK1      3     0      3
                            ___ftmul (ARG)
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    6238
                                             46 BANK1     16    10      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    4488
                                              8 BANK1      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2584
                                              0 BANK1      8     3      5
 ---------------------------------------------------------------------------------
 (1) _adc_convert                                          4     2      2      31
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (1) _USARTInit                                            3     1      2     108
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (1) _ReadSavedSettings                                    1     1      0    3253
                                              4 BANK1      1     1      0
                     _FLASH_ReadWord
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _set_leds_top                                         4     0      4    2048
                                              0 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 (3) _set_leds_bottom                                      2     0      2     878
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadWord                                       3     1      2     327
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (1) _InitializeTaps                                       3     3      0      99
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
                           _init_adc
                           _init_pwm
 ---------------------------------------------------------------------------------
 (2) _init_pwm                                             0     0      0       0
                        _init_timer0
                        _init_timer2
 ---------------------------------------------------------------------------------
 (3) _init_timer2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                 11    11      0    1485
                                             26 BANK0     11    11      0
                            ___awdiv
                         _modulation
                     i1_set_leds_top
 ---------------------------------------------------------------------------------
 (8) i1_set_leds_top                                       4     0      4     236
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (8) _modulation                                          12     4      8     668
                                             14 BANK0     12     4      8
                          i1___aldiv
                           i1___lmul
 ---------------------------------------------------------------------------------
 (9) i1___lmul                                            12     4      8     144
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (9) i1___aldiv                                           15     7      8     352
                                             12 COMMON     1     1      0
                                              0 BANK0     14     6      8
                           i1___lmul (ARG)
 ---------------------------------------------------------------------------------
 (8) ___awdiv                                              9     5      4     556
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _init_adc
     _init_pwm
       _init_timer0
       _init_timer2
   _InitializeTaps
   _ReadSavedSettings
     _FLASH_ReadWord
     _set_leds_bottom
     _set_leds_top
   _USARTInit
   ___awtoft
     ___ftpack
   ___fttol
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     _map (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
   _adc_convert
   _calcSinArray
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___wmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _sin
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftsub
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _floor (ARG)
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
       _eval_poly
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
       _floor
         ___altoft
           ___ftpack
           ___fttol (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _frexp
   _initSwitchBypass
     _getSwitchBypassState
     _setSwitchBypassState
       _updateSwitchBypassState
       _wait_ms
         ___lmul
   _map
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
   _read_bottom_tactile
     _set_leds_bottom
     _wait_ms
       ___lmul
   _read_top_tactile
     _set_leds_top
     _wait_ms
       ___lmul
   _scaleA100kPot
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _frexp
   _scaleA10kPot
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _frexp
   _scaleiA10kPot
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _frexp
   _set_subdivision
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _trunc
       ___altoft
         ___ftpack
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       _frexp (ARG)
   _updateModulationArray
     ___awtoft
       ___ftpack
     ___wmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _modSaw
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _modSawRev
       ___awtoft (ARG)
         ___ftpack
       _modSaw (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
     _modSin
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___wmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
     _modSquare
       ___awtoft (ARG)
         ___ftpack
       ___ftge (ARG)
       _modSin (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
     _modTri
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
   _updateSwitchBypass
     _setDoublePressState
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setPedalMode
         _resetRingLEDs
           _set_leds_bottom
           _set_leds_top
         _setExpressionDisplay
           _set_leds_bottom
           _set_leds_top
         _setPresetDisplay
           _set_leds_bottom
           _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
       _showSave
         _ring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
         _solidring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
       _wait_ms
         ___lmul
     _setLongBypassState
     _setSwitchBypassState
       _updateSwitchBypassState
       _wait_ms
         ___lmul
   _updateSwitchTap
     ___aldiv
     _setDoublePressState
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setPedalMode
         _resetRingLEDs
           _set_leds_bottom
           _set_leds_top
         _setExpressionDisplay
           _set_leds_bottom
           _set_leds_top
         _setPresetDisplay
           _set_leds_bottom
           _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
       _showSave
         _ring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
         _solidring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
       _wait_ms
         ___lmul
     _setLongTapState
   _update_mode
     _resetRingLEDs
       _set_leds_bottom
       _set_leds_top
     _setPedalMode
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setExpressionDisplay
         _set_leds_bottom
         _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
   _update_selectMode
     _setExpressionDisplay
       _set_leds_bottom
       _set_leds_top
     _setPresetDisplay
       _set_leds_bottom
       _set_leds_top

 _isr (ROOT)
   ___awdiv
   _modulation
     i1___aldiv
       i1___lmul (ARG)
     i1___lmul
   i1_set_leds_top

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     25      4A       5       92.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     50      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     4A      4D       9       96.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      E      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      9      44      13       85.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      2C      15       55.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
ABS                  0      0     235      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      40      18       80.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0      40      20       80.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
DATA                 0      0     235      28        0.0%
BANK11              1E      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITBANK12           50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BANK12               0      0       0      31        0.0%
BITBANK13           50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BANK13               0      0       0      33        0.0%
BITBANK14           50      0       0      34        0.0%
BANK14               0      0       0      35        0.0%
BITBANK15           50      0       0      36        0.0%
BANK15               0      0       0      37        0.0%
BITBANK16           50      0       0      38        0.0%
BANK16               0      0       0      39        0.0%
BITBANK17           50      0       0      40        0.0%
BANK17               0      0       0      41        0.0%
BITBANK18           50      0       0      42        0.0%
BANK18               0      0       0      43        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Fri Jan 13 16:43:03 2017

                     _update_mode 222E                      ___altoft@exp 0134                       __CFG_CP$OFF 0000  
                   ___altoft@sign 0135                  modSaw@inflection 0131                  scaleA100kPot@pwm 01E2  
                    ___awdiv@sign 0076                _topTactile_pressed 01C7        setDoublePressState@f_state 00B8  
             ___wmul@multiplicand 0130                USARTInit@baud_rate 00A0                   _updateSwitchTap 0C1D  
                    ___ftadd@exp1 00CD                      ___ftadd@exp2 00CC                      ___ftadd@sign 00CB  
                             l362 05A3                               l382 221F                               l800 22AD  
                             l801 22B0                               l633 188A                               l802 22B3  
            __size_of_adc_convert 0013                               l804 22B6                               l805 22DA  
                             l586 2F9A                               l792 1833                               l793 1857  
                             l962 25C6                               l797 22A7                               l966 25F0  
                             l974 265B                               l799 22AA                               l978 2689  
                             _GIE 005F                               l997 20CC                               l989 225E  
                             l999 20D2                               _RB1 0069                               _PR2 001B  
    solidring_tactiles@ring_delay 00B4                               _map 1AE3                               _exp 1351  
                             _log 1082                               _isr 0004                               _tap 02A0  
                             _sin 0867                               _pow 06DB                      __CFG_BORV$LO 0000  
                             wreg 0009                      __CFG_IESO$ON 0000                      __CFG_FOSC$HS 0000  
             set_subdivision@tmpX 0149           __end_of_set_leds_bottom 22DB                      __CFG_LVP$OFF 0000  
                  i1___aldiv@sign 0029                      ___ftdiv@cntr 00D8                      ___ftdiv@sign 00DD  
                            l1000 20DA                              l1001 20EE                              l1004 273C  
                            l1015 2786                              l2103 0848                              l2104 0850  
                            l2127 11F2                              l1423 0CEE                              l1409 0C34  
                            l1266 12EE                              l2317 097C                              l1703 24C9  
                            l2096 0835                              l2187 1A42                              l1914 0FC0  
                            l2299 06FF                              l1935 2039                              l1990 1011  
                            ?_map 00DE                              l1888 1AE0                              l8030 13E2  
                            l7400 21DF                              l8024 13A7                              l8008 135E  
                            l8112 0707                              l8018 1383                              l8130 078D  
                            l9002 069D                              l7420 0821                              l7412 080B  
                            l7500 2610                              l8052 148A                              l8220 237F  
                            l8212 236E                              ?_exp 0148                              ?_log 013E  
                            l7502 2620                              l8126 076D                              l8118 0713  
                            l9006 06A4                              l7416 0812                              l7512 117B  
                            l8320 1032                              l8312 1022                              l7450 182B  
                            l7442 180B                              l7426 083A                              l7418 081C  
                            l7522 1191                              l7602 1EA8                              l8330 1060  
                            l8322 1040                              l7444 1813                              l7428 0842  
                            l7540 11BE                              l7516 1182                              l7620 1EF9  
                            l8092 253E                              l8228 238A                              ?_isr 0070  
                            l7470 22BD                              l7446 181B                              l7454 183A  
                            l7542 11C8                              l7534 11AB                              l8246 089C  
                            l8182 2592                              l8334 106B                              l8502 225B  
                            l7448 1823                              l8424 189D                              l9400 24BF  
                            l8360 249C                              l7552 11E4                              l7544 11CD  
                            l7632 1F15                              l7624 1F01                              l7608 1EBE  
                            l7704 23A6                              l8600 12F2                              l8504 2262  
                            l8426 18A6                              l9402 24C4                              l8362 249E  
                            l8370 24A6                              l7562 1216                              l7554 11EE  
                            l7546 11D1                              l8258 0938                              l8282 0F7C  
                            l8450 0A5F                              l8610 1315                              l8338 1079  
                            l9404 1840                              l8364 24A0                              l7812 1DC4  
                            l7804 1DAB                              l7572 1231                              l7636 1F1D  
                            l7580 22F2                              l7660 19EE                              l8348 1A62  
                            l7396 21D5                              l8460 0ABE                              l8612 131B  
                            l8620 132E                              l8700 0CE6                              l8524 276B  
                            l9406 22C3                              l8366 24A2                              l7558 1204  
                            l7478 2033                              l7902 1C76                              l8294 234E  
                            l8278 0E3A                              l8462 0B04                              l7742 26C8  
                            l7734 26A4                              l8606 130D                              l8534 2782  
                            l8526 2770                              l8518 275F                              l7824 2147  
                            l7584 2308                              l7680 1A2C                              l8800 1B79  
                            l8464 0B4A                              l8472 0BEA                              l8456 0A64  
                            l8544 125F                              l8536 278A                              l7842 1CD4  
                            l7906 1C7E                              l8466 0B90                              l8474 0C01  
                            l8458 0A78                              l7762 2282                              l8626 133A  
                            l8722 0DAD                              l8730 0DEB                              l7692 1A53  
                            l7852 1D35                              l8468 0BD6                              l8580 12C0  
                            l8556 1280                              l8548 1272                              l8716 0D3D  
                            l8708 0D31                              l8652 0C46                              ?_sin 0145  
                            l7774 20B4                              l7790 1D6A                              l7862 27F9  
                            l7686 1A39                              l7678 1A1E                              l7838 1CCC  
                            l8806 1B86                              l8822 1DEF                              l7950 1689  
                            l8478 0C0A                              l7942 20E2                              l8582 12C8  
                            l8718 0D87                              l8646 0C29                              l7784 1D54  
                            l7688 1A45                              l7872 1C0C                              l9392 0BF0  
                            l8576 12AE                              l8496 2251                              l8770 2650  
                            l7882 1C2E                              l8842 195C                              l9394 1F73  
                            l8594 12E0                              l8674 0C90                              l8666 0C68  
                            l8690 0CBF                              l9396 24B5                              l8748 25BB  
                            l8780 2677                              l8828 1DFE                              l7964 14DF  
                            l8692 0CCE                              l8668 0C85                              l8932 039E  
                            l8916 037F                              ?_pow 0155                              l9398 24BA  
                            l8758 25E2                              l7974 211A                              l8870 1F67  
                            l8862 1F53                              l8926 038F                              l7976 212A  
                            l7992 10B9                              l8864 1F59                              l8688 0CB7  
                            l8960 049B                              l7986 10A6                              l8882 1FFA  
                            l8866 1F5D                              l8874 1F6E                              l8970 050B  
                            l8946 040B                              l8868 1F63                              l8876 1F87  
                            l8956 0469                              l8990 05D7                              l8974 053D  
                            l8994 0621                              l8986 05A5                              l8998 0653  
                            _PEIE 005E                              _RCIE 048D                              u8015 1A1F  
                            u7405 0817                              u8205 1DC5                              u8045 1A3A  
                            u7425 0830                              u8305 1C37                              u8410 13C0  
                            u7355 21E0                              u8420 13C1                              u7445 083D  
                            u8165 1D7C                              u7525 203A                              u7365 21E7  
                            u8085 26A2                              u9125 1258                              u9045 274E  
                            u8175 1D8C                              u7535 203F                              u8095 26C6  
                            u9135 126B                              u8185 1DAC                              u7705 11BF  
                            u8345 211F                              u8195 1DBB                              u7485 0857  
                            u7565 2615                              u8525 075E                              u9165 128A  
                            u8550 2590                              u7735 11D2                              u8455 1481  
                            u9415 0C71                              u7905 1F08                              u8545 2572  
                            u8625 2FF1                              u8650 0934                              u7675 11AC  
                            u9275 12FE                              u8900 18A4                              u8660 0935  
                            u7765 11E5                              u8805 1061                              u9525 0CFF  
                            u9445 0C9A                              u7935 1F1E                              u8575 2093  
                            u9535 0D16                              u7945 1F24                              u7865 1ECA  
                            u9705 2670                              u8585 235F                              u9545 0D46  
                            u7875 1EDA                              u9555 0D5B                              u9645 25DB  
                            u8925 0A49                              u8765 1035                              u9565 0D6F  
                            u8855 20FB                              u7895 1F02                              u8935 0A5D  
                            u8865 2101                              u7985 19F5                              u8785 1041  
                            u9585 0D8C                              u9905 05BC                              u9825 03F0  
                            u8795 1055                              u9915 05D5                              u9835 0409  
                            u8885 1883                              u9925 0638                              u9845 0480  
                            u8895 1896                              u8975 2241                              u9935 0651  
                            u9855 0499                              u9785 1FF5                              u9865 0522  
                            u9875 053B                              u9885 0592                              u9895 059E  
              scaleA100kPot@input 0167                      __CFG_WRT$OFF 0000                 _scaleA10kPot$2815 01E5  
               _scaleA10kPot$2816 01E8                     __CFG_FCMEN$ON 0000                              _iCnt 01BF  
                            _main 035B                      ___ftpack@arg 00A0                      ___ftpack@exp 00A3  
                            fsr0h 0005                              fsr1h 0007                              fsr0l 0004  
                            indf0 0000                              indf1 0001                              fsr1l 0006  
                            map@x 00DE                              btemp 007E                              exp@x 0148  
                            log@x 013E                     __CFG_BOREN$ON 0000                              sin@f 0145  
                            sin@y 0149                              ltemp 007E                              pow@x 0155  
                            pow@y 0158                              start 02DF                              ttemp 007E  
                            wtemp 007E      __end_of_getSwitchBypassState 1804                   _expressModeCnst 01DE  
    updateSwitchTap@tapCntDivisor 00C2      __end_of_setSwitchBypassState 25B1                   ?i1_set_leds_top 0070  
                   __CFG_MCLRE$ON 0000                      ___ftmul@cntr 00BC                      ___ftmul@sign 00BD  
                 __end_of_InitApp 21CC                      ___fttol@exp1 012D                             ??_map 00ED  
                           ??_exp 014B                             ??_log 0141                      ___fttol@lval 0129  
                           ??_isr 003A                             ??_sin 0148                             ??_pow 015B  
                 _switchBypass_up 0262         __size_of_initSwitchBypass 000F                   __end_of___aldiv 1082  
                           ?_main 0070                   __end_of___awdiv 2735                   __end_of___ftadd 1249  
                           _CCPR1 0291                             _CCPR2 0298                             _CCPR3 0311  
                           _CCPR4 0318                             _CCPR5 031C                     __CFG_WDTE$OFF 0000  
                 __end_of___ftdiv 1DE6                   __end_of___ftneg 2F6C                   __end_of___ftmul 1F45  
                 ___awdiv@divisor 0070                   __end_of___ftsub 216D                   __end_of___fttol 1A5C  
                           i1l133 0121                             i1l163 02DA                             i1l155 0251  
                           i1l792 24FC                             i1l793 251E                   ___awdiv@counter 0075  
                           _RCREG 0199                             _SPBRG 019B                __end_ofsin@coeff_a 2848  
              __end_ofsin@coeff_b 2854                             _TXREG 019A                             _UQEnd 0064  
             _ConfigureOscillator 2F4F       __size_of_setLongBypassState 0021                  _setPresetDisplay 2266  
                    ?_init_timer0 0070                      ?_init_timer2 0070               ___lmul@multiplicand 00A4  
                    ___lltoft@exp 00AD             __size_of_calcSinArray 0087                   _switchTap_state 01E1  
               ??_setLongTapState 00A2                     ___awtoft@sign 00AD                             _floor 1C96  
                           _ldexp 1BFF                             _frexp 2392                             _myBuf 03A0  
                           _errno 0253                     ___ftpack@sign 00A4                             _timer 0060  
                           _trunc 251F                  __end_ofi1___lmul 219C                             sin@x2 014F  
                           ltemp0 007E                             ltemp1 0082                             ltemp2 0086  
                           ltemp3 0080                   __end_of_wait_ms 222E                             pow@yi 0163  
                 scaleA10kPot@pwm 01E2                __size_of_USARTInit 0043                             ttemp0 007E  
                           ttemp1 0081                             ttemp2 0084                             ttemp3 0087  
                           ttemp4 007F                             status 0003       __end_of_read_bottom_tactile 25FB  
              __size_ofi1___aldiv 0082                             wtemp0 007E                             wtemp1 0080  
                           wtemp2 0082                             wtemp3 0084                             wtemp4 0086  
                           wtemp5 0088                             wtemp6 007F             set_subdivision@scalar 0146  
                     exp@exponent 0152              ?_ConfigureOscillator 0070                _updateSwitchBypass 1249  
                     ldexp@newexp 0141           __end_of_updateSwitchTap 0E05                   __initialization 02E1  
                     log@exponent 0142       updateModulationArray@iAngle 0156           _updateSwitchBypassState 0801  
                    __end_of_main 06DB           __size_of_InitializeTaps 0026               i1___lmul@multiplier 0070  
          __size_of_scaleA100kPot 0085               ?_updateSwitchBypass 0070                    __CFG_LPBOR$OFF 0000  
          ring_tactiles@iLed_1529 00B5                   _set_subdivision 1F45                      _calcSinArray 1A5C  
                          ??_main 01EB                     ___fttol@sign1 0128                     ?_scaleA10kPot 0167  
         __size_of_FLASH_ReadWord 0020         setLongBypassState@f_state 00A0        __end_of_solidring_tactiles 2412  
                ?_set_leds_bottom 00A0                            ?_floor 0136                            ?_ldexp 013E  
                          ?_frexp 00A0                  __end_of___altoft 2646                            _ADRESH 009C  
                          _ADRESL 009B                  ___awdiv@dividend 0072               _baseline_delay_time 0045  
                __end_of___awtoft 20CB                  __end_of___ftpack 0867              ??_updateSwitchBypass 00BC  
                          ?_trunc 0136                  __end_of___lltoft 213F                            i1l1990 18DF  
                          i1l6600 24DE                            i1l6602 24E4                            i1l6604 24EA  
                          i1l6612 2502                            i1l6700 0203                            i1l6606 24F0  
                          i1l6710 0253                            i1l6608 24F6                            i1l6562 26EE  
                          i1l5922 1900                            i1l5914 18F0                            i1l6730 02D3  
                          i1l6642 010E                            i1l6634 00C6                            i1l6580 270D  
                          i1l5940 1947                            i1l5932 192E                            i1l5924 190E  
                          i1l6628 00AB                            i1l6590 2728                            i1l6734 02D8  
                          i1l6718 02A5                            i1l6568 26F9                            i1l5936 1939  
                          i1l6672 018C                            i1l6680 01A8                            i1l6664 0166  
                          i1l6594 2730                            i1l6586 271F                            i1l6578 2701  
                          i1l6690 01DA                            i1l6666 0176                            i1l5892 2175  
                          i1l6676 0197                            i1l6668 0178                            i1l6694 01E7  
                          i1l6678 01A6                            i1l5896 217F                            i1l9408 2507  
                          i1l6696 01F6                            _PMADRH 0192                            _PMADRL 0191  
                          u521_25 1903                            _PMDATH 0194                            _PMDATL 0193  
                          u523_25 190F                            u515_25 2180                            _PMCON2 0196  
                          u524_25 1923                            u516_25 2187                            u525_25 192F  
                          u635_25 2704                            u644_25 00A2                            u653_23 013D  
                          u637_25 270E                            u662_23 01CA                            u638_25 2718  
                          u670_25 02CE                            u646_25 00BD                            u639_25 2720  
                          u648_23 00DE                            u666_23 022B                            u667_25 0240  
                          u669_25 02B5                    _debounce_count 0249                       modSaw@angle 012E  
                  _debounce_mode1 024B                    _debounce_mode2 024D                       modSaw@shift 013F  
                          _URBuff 0320                         ??_InitApp 00A0             ??_ConfigureOscillator 00A0  
        __end_of_read_top_tactile 2694                       modSin@angle 0134                    __CFG_PWRTE$OFF 0000  
                     modSin@shift 013F                            ___ftge 22DB                            ___lmul 21CC  
                       ??___aldiv 00A8                            ___wmul 2030                 _update_selectMode 2735  
                       ??___awdiv 0074                         ??___ftadd 00C7                    __CFG_STVREN$ON 0000  
                       ??___ftdiv 00D4                         ??___ftneg 00C1                         ??___ftmul 00B4  
                       ??___ftsub 00F0                         ??___fttol 0124                       modTri@angle 012E  
                __end_of_init_adc 2F76                            _modSaw 14AA                            _modSin 1654  
                          _modTri 0E05                  __end_of_init_pwm 2494                ?_update_selectMode 0070  
                     modTri@shift 0137                  ___awdiv@quotient 0077             __end_of_resetRingLEDs 2FE6  
                          _tmpVal 0257                 __end_of_USARTInit 24D7                    ??_scaleA10kPot 00F0  
               __end_ofi1___aldiv 1950                            floor@i 013A                            floor@x 0136  
           ___ftmul@f3_as_product 00B9           FLASH_ReadWord@flashAddr 00A0                            sin@sgn 0152  
                __end_of_showSave 2016               ??_update_selectMode 00A7              _getSwitchBypassState 1800  
                       ??_wait_ms 00AE              _setSwitchBypassState 2567                            trunc@i 013A  
                          trunc@x 0136                     _scaleA100kPot 1950      __end_of_setExpressionDisplay 2FCC  
          __size_of_scaleiA10kPot 00AB            setLongTapState@f_state 00A0                  modSin@inflection 0137  
                __end_ofexp@coeff 281E                  __end_oflog@coeff 2839           __end_of__initialization 0357  
                      ___altoft@c 012E                        ___ftadd@f1 00C1                        ___ftadd@f2 00C4  
                      ___ftge@ff1 00A0                        ___ftge@ff2 00A3                 _bypass_turning_on 01BE  
                    eval_poly@res 013B                        ___ftdiv@f1 00D1                        ___ftdiv@f2 00CE  
                      ___ftdiv@f3 00D9                    _top_push_state 0051         ??_updateSwitchBypassState 00A2  
                      ___ftneg@f1 00BE               _switchBypass_toggle 0255                        ___awtoft@c 00A8  
           __end_of_ring_tactiles 26E4         __end_of_update_selectMode 278E           __end_of_set_subdivision 2000  
                      ___ftmul@f1 00AE                        ___ftmul@f2 00B1                        ___ftsub@f1 0142  
                      ___ftsub@f2 013F                        ___fttol@f1 0120                  ?_updateSwitchTap 0070  
                    ?_update_mode 0070                    __pcstackCOMMON 0070                      __pidataBANK0 2FA1  
                    __pidataBANK3 2016                      __pidataBANK4 0002                        ___lltoft@c 00A8  
                   __end_of_floor 1D3D                     __end_of_ldexp 1C96                     __end_of_frexp 23D2  
                   __end_of_trunc 2567                  _initSwitchBypass 07F1                         ?i1___lmul 0070  
           _updateModulationArray 0A36                   _doubleTap_state 0065                    _OPTION_REGbits 0095  
           ?_getSwitchBypassState 00A0             ?_setSwitchBypassState 00B2                    ?_scaleA100kPot 0167  
                         ??_floor 0139                           ??_ldexp 0143                           ??_frexp 00A4  
            __size_of_init_timer0 0007              __size_of_init_timer2 0009                 i1___aldiv@divisor 0020  
               i1___aldiv@counter 0028                           ??_trunc 0139                     ?_setPedalMode 0070  
                      __pbssBANK0 0058                        __pbssBANK2 016A                        __pbssBANK3 01A0  
                      __pbssBANK4 0220                        __pbssBANK5 02A0                        __pbssBANK6 0320  
                      __pbssBANK7 03A0                __size_of_eval_poly 0072                  ??i1_set_leds_top 0074  
                 __CFG_VCAPEN$OFF 0000                __size_of_modSawRev 001C                __size_of_modSquare 003D  
        __end_of_setPresetDisplay 22A0                        _delay_time 0049                  _long_press_limit 004F  
    __size_of_setDoublePressState 003E                        _delayfound 0251                        __pmaintext 035B  
                  _InitializeTaps 20EF                           ?___ftge 00A0                           ?___lmul 00A0  
                         ?___wmul 012E    updateModulationArray@thisAngle 0154                        __pintentry 0004  
                   _scaleiA10kPot 1DE6                        _blink_rate 0053                     ??_adc_convert 00A2  
                       ?___altoft 012E                           ?_modSaw 012E                           ?_modSin 0134  
                         ?_modTri 012E                    ___lmul@product 00A8                   _setLongTapState 2FE6  
                       ?___awtoft 00A8                         ?___ftpack 00A0               modSquare@inflection 014B  
                       ?___lltoft 00A8                        ??i1___lmul 0078                    _FLASH_ReadWord 2068  
 __end_of_updateSwitchBypassState 0802                       modulation@x 002E                       modulation@y 0032  
                      _ldexp$2615 0145                   _debounce_bypass 0247                    ??_setPedalMode 00A7  
              USARTWriteInt@F3536 0234                     _suspend_blink 0069                      modSaw@period 0142  
                         _UQFront 007D                         ?_init_adc 0070                         ?_init_pwm 0070  
                         _InitApp 219C              __end_of_scaleA10kPot 1BFF                      modSin@period 0142  
          __end_of_InitializeTaps 2115                      modSin@tmpVal 0145                     ?_set_leds_top 00A0  
                      _knob1_prev 01CA        __size_of_update_selectMode 0059                        _knob2_prev 01CC  
                      _knob3_prev 01CE                        _knob4_prev 01D0                        _knob5_prev 01D2  
                ?_set_subdivision 013F                         ?_showSave 0070                           ___aldiv 1000  
                  ?_scaleiA10kPot 0167                   __size_of___ftge 003C                           ___awdiv 26E4  
                 __size_of___lmul 0030                           ___ftadd 1153                           ___ftdiv 1D3D  
                         ___ftneg 2F63                        _knob_1_pos 01A8                        _knob_2_pos 01AA  
                 __size_of___wmul 001C                           ___ftmul 1E91                        _knob_3_pos 01AC  
                         ___ftsub 213F                           ___fttol 19D5                        _knob_4_pos 01AE  
                      _knob_5_pos 01B0                 _switchTap_pressed 016C                        ??___altoft 0132  
            _setExpressionDisplay 2FB4            ?_updateModulationArray 0070            __end_of_FLASH_ReadWord 2088  
                 __size_of_modSaw 01AA                   __size_of_modSin 01AC                        ??___awtoft 00AB  
                      ??___ftpack 00A5                   __size_of_modTri 01FB                 __end_of_eval_poly 2800  
              InitializeTaps@itap 00A1                        ??___lltoft 00AC                           __ptext1 2735  
                         __ptext2 222E                           __ptext3 0C1D                           __ptext4 2FE6  
                         __ptext5 1000                           __ptext6 1249                           __ptext7 2088  
                         __ptext8 2354                           __ptext9 2002        __end_of_setLongBypassState 20A9  
          ??_getSwitchBypassState 00A2                 __end_of_modSawRev 2068                         _T2CONbits 001C  
                _adjust_sub_delay 01BC                      __size_of_map 008B                      __size_of_exp 0159  
                    __size_of_log 00D1                      __size_of_isr 02DB            ??_setSwitchBypassState 00B4  
                    __size_of_sin 01CF                      __size_of_pow 0116               __end_of_adc_convert 2FA1  
                    modTri@period 013A                 __end_of_modSquare 2354                   ??_scaleA100kPot 00F0  
                ___aldiv@dividend 00A4                      modTri@tmpVal 013D                           _wait_ms 21FC  
                         clrloop0 2F83              end_of_initialization 0357                           exp@sign 0154  
                      _modulation 2412                           init_ram 2F76                        ??_init_adc 00A0  
                         initloop 2F77                        ??_init_pwm 00A0      updateSwitchBypassState@state 00A0  
              _solidring_tactiles 23D2                     _longTap_timer 01B4                     _longTap_state 0054  
                   _longTap_start 016B                    ??_set_leds_top 00A4                 ?_read_top_tactile 0070  
                 ?_InitializeTaps 0070                           pow@sign 0162                 scaleA10kPot@input 0167  
         __end_of_setLongTapState 3000            i1set_leds_top@ledState 0072                ??_read_top_tactile 00B2  
                       _RCSTAbits 019D                        ??_showSave 00B7                  _longBypass_timer 01B2  
                ___aldiv@quotient 00AB                  _longBypass_state 0066                  _longBypass_start 016A  
    __size_of_read_bottom_tactile 004A               ?_solidring_tactiles 0070                      __pstringtext 2800  
       FLASH_ReadWord@GIEBitValue 00A2             ?_setExpressionDisplay 0070              __size_of_update_mode 0038  
                 ?_FLASH_ReadWord 00A0                 _expressionChannel 01DF                         _PORTAbits 000C  
                       _PORTCbits 000E                         _PORTDbits 000F                         _PORTEbits 0010  
                      _test_timer 0241                         _USARTInit 2494                         _TRISBbits 008D  
                       _TRISCbits 008E                         _TRISDbits 008F                         _TRISEbits 0090  
                       _TRISFbits 030C                         _TRISGbits 030D                         i1___aldiv 18CE  
            ??_solidring_tactiles 00B2       __end_of_ConfigureOscillator 2F53                        map@out_max 00EA  
                      map@out_min 00E7       __size_of_updateSwitchBypass 0108          __end_of_initSwitchBypass 0800  
                     _CCP1CONbits 0293                       ___ftdiv@exp 00DC          __size_of_set_leds_bottom 003B  
                     _CCP2CONbits 029A                         _TXSTAbits 019E              _switchBypass_pressed 01BA  
                     _CCP3CONbits 0313                       _CCP4CONbits 031A                       _CCP5CONbits 031E  
                     _CCP6CONbits 0613                   ??_scaleiA10kPot 00F0                       _CCP7CONbits 0616  
                     ___ftmul@exp 00B8                adc_convert@channel 00A3                       _CCP8CONbits 0619  
                     _CCP9CONbits 061C              set_leds_top@ledState 00A2                    __end_of___ftge 2317  
            __end_of_setPedalMode 20EF                    __end_of___lmul 21FC                    __end_of___wmul 204C  
                    _double_timer 01A0                       _adc_convert 2F8E                    _switchTap_down 01C6  
                  __end_of_modSaw 1654                    __end_of_modSin 1800                    __end_of_modTri 1000  
                  modSawRev@angle 0145                        floor@expon 013D             i1___lmul@multiplicand 0074  
               __size_ofi1___lmul 002F               start_initialization 02E1                        ?_USARTInit 00A0  
                      eval_poly@d 0137                        eval_poly@n 0139                        eval_poly@x 0134  
           _bottomTactile_pressed 01BD               _setDoublePressState 2354                        ldexp@value 013E  
                      ?i1___aldiv 0020                       __end_of_map 1B6E                       __end_of_exp 14AA  
                     __end_of_log 1153                       __end_of_isr 02DF                       __end_of_sin 0A36  
                     __end_of_pow 07F1             __size_of_scaleA10kPot 0091                _adjusted_pot_value 0245  
                     ?_modulation 002E                scaleiA10kPot@input 0167                        frexp@value 00A0  
          __size_of_resetRingLEDs 001A              ?_setDoublePressState 00B8                  ?_setLongTapState 00A0  
               ?_setPresetDisplay 0070                          ??___ftge 00A6                          ??___lmul 00A8  
          ??_setExpressionDisplay 00A4                          ??___wmul 00F0                ??_setPresetDisplay 00A4  
                     __pdataBANK0 0045                       __pdataBANK3 01C8                       __pdataBANK4 0262  
                        ??_modSaw 00F0                          ??_modSin 013A                i1___aldiv@dividend 0024  
                        ??_modTri 00F0                     _tap_iteration 01D8          __size_of_updateSwitchTap 01E8  
               __size_of___altoft 004B                 __size_of___awtoft 0022                 __size_of___ftpack 0065  
                     __pbssBIGRAM 238E                      _scaleA10kPot 1B6E                 __size_of___lltoft 002A  
                   ??_init_timer0 00A0                     ??_init_timer2 00A0                       __pbssCOMMON 007D  
            __end_of_set_leds_top 1858                         ___latbits 0003    setExpressionDisplay@ledChannel 00A6  
              _switchBypass_state 0057                     __pcstackBANK0 0020                     __pcstackBANK1 00A0  
                   __pcstackBANK2 0120                     __pcstackBANK3 01E2                     __pcstackBANK4 0259  
          __size_of_ring_tactiles 0050                    _expSwitchState 01DD                     _delay_counter 024F  
                i1___lmul@product 0078                  scaleiA10kPot@pwm 01E2          ?_updateSwitchBypassState 00A0  
                      sin@coeff_a 2839                        sin@coeff_b 2848                i1___aldiv@quotient 002A  
                  isr@tmpSubDelay 0043                          ?_InitApp 0070             ??_setDoublePressState 00BA  
               __size_of_init_adc 000A                 __size_of_init_pwm 0041                         _main$2806 0259  
                       _main$2807 025C                         _main$2808 025F           ??_updateModulationArray 0150  
                        ?___aldiv 00A0                 ??_set_leds_bottom 00A2                _currentBypassState 01DB  
                        ?___awdiv 0070                          ?___ftadd 00C1                          ?___ftdiv 00CE  
                        ?___ftneg 00BE                          ?___ftmul 00AE                          ?___ftsub 013F  
                        ?___fttol 0120                 __size_of_showSave 0014                _modulation_changed 01C2  
              _scaleA100kPot$2811 01E5                _scaleA100kPot$2812 01E8                     ?_calcSinArray 0070  
                     _blink_delay 01C8               __size_of_modulation 0041                     _resetRingLEDs 2FCC  
                     _blink_state 01DA                         _eval_poly 278E                       ??_USARTInit 00A2  
                        _CCPTMRS0 029D                          _CCPTMRS1 029E                          _CCPTMRS2 029F  
                     ??i1___aldiv 007C                          ?_wait_ms 00AC                         _modSawRev 204C  
             _read_bottom_tactile 25B1                    __size_of_floor 00A7                    __size_of_ldexp 0097  
                  __size_of_frexp 0040                         _modSquare 2317                    _presetModeCnst 01E0  
                  __size_of_trunc 0048                _setLongBypassState 2088               __end_of_init_timer0 2F5A  
             __end_of_init_timer2 2F63                         _mod_value 01B8                         _mod_timer 01A4  
                ??_InitializeTaps 00A0                   ___aldiv@divisor 00A0                   ___aldiv@counter 00A9  
                  _presetSaveMode 0068                    ___wmul@product 0132                          _LATBbits 010D  
                        _LATDbits 010F                          _LATFbits 038C                          _LATGbits 038D  
                  _mod_delay_time 01D4                         clear_ram0 2F82                         _tap_timer 005C  
             ?_setLongBypassState 00A0                         _tap_total 023D             __size_of_setPedalMode 0024  
                   set_leds_top@x 00A0                          _PIR1bits 0011                     _ring_tactiles 2694  
                 _longBypass_down 01C0                  ??_FLASH_ReadWord 00A2              ?_read_bottom_tactile 0070  
         __size_ofi1_set_leds_top 0048                    ??_calcSinArray 0153         initSwitchBypass@initState 00B6  
                       map@in_max 00E4                         map@in_min 00E1                    ?_resetRingLEDs 0070  
                       _sub_timer 0058                        _ADCON0bits 009D                          i1___lmul 216D  
                      _ADCON1bits 009E          __size_of_set_subdivision 00BB                 ___wmul@multiplier 012E  
                set_subdivision@x 013F                  set_subdivision@y 0141         __size_of_read_top_tactile 004E  
            ??_setLongBypassState 00A2                        ?_eval_poly 0134     __size_of_getSwitchBypassState 0004  
   __size_of_setSwitchBypassState 004A                        ?_modSawRev 0145             __end_of_scaleA100kPot 19D5  
               ??_updateSwitchTap 00BC                 ___lmul@multiplier 00A0                        ?_modSquare 0148  
                 modSquare@tmpVal 014E                      _setPedalMode 20CB                 _ReadSavedSettings 1858  
               ?_initSwitchBypass 0070                 ring_tactiles@iLed 00B3                    wait_ms@timeSec 00AC  
              ?_ReadSavedSettings 0070                       _modSaw$2821 0134                       _modSaw$2822 0137  
                     _modSaw$2823 013A                    wait_ms@timemsl 00AE                         frexp@eptr 00A3  
     setSwitchBypassState@f_state 00B2                       _modSin$2819 013C                ??_initSwitchBypass 00B6  
                __size_of_InitApp 0030                    ?_ring_tactiles 0070                         modSaw@mod 013D  
                     _mode1_state 01C1                     ??_update_mode 00A7                       _mode2_state 0067  
           ??_read_bottom_tactile 00B2                       _modTri$2820 0134               updateSwitchTap@iCnt 00C4  
             ??_ReadSavedSettings 00A4                        _APFCONbits 011D                  __size_of___aldiv 0082  
                __size_of___awdiv 0051                  __size_of___ftadd 00F6                  __size_of___ftdiv 00A9  
                    ?_adc_convert 00A0                  __size_of___ftneg 0009                          ___altoft 25FB  
                __size_of___ftmul 00B4                  __size_of___ftsub 002E                  __size_of___fttol 0087  
                        ___awtoft 20A9             __size_of_set_leds_top 0054                          ___ftpack 0802  
                        _map$2809 00ED                          ___lltoft 2115            _preset_programmning_on 01C4  
                      _ANSELEbits 0190                        _ANSELFbits 040C                  modTri@inflection 0131  
                set_leds_bottom@x 00A0                          _exp$2583 014F                          _exp$2827 014C  
                     _init_timer0 2F53                       _init_timer2 2F5A                _delay_time_changed 01DC  
      __end_of_updateSwitchBypass 1351                          __ptext10 23D2                          __ptext11 2694  
                        __ptext20 204C                          __ptext12 20CB                          __ptext21 14AA  
                        __ptext13 2266                          __ptext30 1BFF                          __ptext22 1F45  
                        __ptext14 2FB4                          __ptext31 2115                          __ptext23 251F  
                        __ptext15 2FCC                          __ptext40 1800                          __ptext32 2646  
                        __ptext24 1DE6                          __ptext16 0A36                          __ptext41 1A5C  
                        __ptext33 25B1                          __ptext25 1B6E                          __ptext17 0E05  
                        __ptext50 1E91                          __ptext42 0867                          __ptext34 1AE3  
                        __ptext26 1950                          __ptext18 2317                          __ptext51 213F  
                        __ptext43 1C96                          __ptext35 07F1                          __ptext27 06DB  
                        __ptext19 1654                          __ptext60 1804                          __ptext52 1153  
                        __ptext44 2392                          __ptext36 2567                          __ptext28 1082  
                        __ptext61 22A0                          __ptext53 2F63                          __ptext45 19D5  
                        __ptext37 21FC                          __ptext29 1351                          __ptext62 2068  
                        __ptext54 1D3D                          __ptext46 22DB                          __ptext38 21CC  
                        __ptext71 24D7                          __ptext63 20EF                          __ptext55 20A9  
                        __ptext47 25FB                          __ptext39 0801                          __ptext72 2412  
                        __ptext64 219C                          __ptext56 0802                          __ptext48 278E  
                        __ptext73 216D                          __ptext65 2453                          __ptext57 2F8E  
                        __ptext49 2030                          __ptext74 18CE                          __ptext66 2F5A  
                        __ptext58 2494                          __ptext75 26E4                          __ptext67 2F53  
                        __ptext59 1858                          __ptext68 2F6C                          __ptext69 2F4F  
                        _sin$2826 014C         __end_of_ReadSavedSettings 18CE                  __size_of_wait_ms 0032  
     __size_of_solidring_tactiles 0040                          _ledState 0239                          _pow$2824 015C  
                        _pow$2825 015F                     _presetChannel 0056                      ??_modulation 0036  
                     _mod_counter 01B6                          _modArray 238E                        trunc@expon 013D  
                        _init_adc 2F6C                     __size_of_main 0380                          _init_pwm 2453  
                        _sinArray 2482      __size_of_ConfigureOscillator 0004                      _set_leds_top 1804  
                        _showSave 2002                          _num_taps 0055                     calcSinArray@x 0157  
           __end_of_scaleiA10kPot 1E91                          int$flags 007E                   ??_resetRingLEDs 00A4  
                 i1set_leds_top@x 0070                    modSquare@angle 0148               __end_of_update_mode 2266  
                        exp@coeff 2800                          _symmetry 01D6               modSawRev@inflection 0148  
                        log@coeff 281E                __end_of_modulation 2453                calcSinArray@iAngle 015B  
                      _INTCONbits 000B                       ??_eval_poly 00F0         __size_of_setPresetDisplay 003A  
                     _tap_history 0220                       ??_modSawRev 014B                 ??_set_subdivision 0143  
                     ??_modSquare 00F0                calcSinArray@tmpVal 0158                          intlevel1 0000  
            __end_of_calcSinArray 1AE3                   _set_leds_bottom 22A0                        _PMCON1bits 0195  
                 ??_ring_tactiles 00B2                 __CFG_CLKOUTEN$OFF 0000                   _reset_sub_delay 01C5  
                      _OSCCONbits 0099                      _preset_blink 01C3                    i1_set_leds_top 24D7  
  __size_of_updateModulationArray 01E7  __size_of_updateSwitchBypassState 0001     __end_of_updateModulationArray 0C1D  
   __size_of_setExpressionDisplay 0018                _scaleiA10kPot$2817 01E5                _scaleiA10kPot$2818 01E8  
        __size_of_setLongTapState 001A                  _read_top_tactile 2646                      ___aldiv@sign 00AA  
      __size_of_ReadSavedSettings 0076       __end_of_setDoublePressState 2392                      _CCP10CONbits 061F  
               _bottom_push_state 004D        setPresetDisplay@ledChannel 00A6            __end_ofi1_set_leds_top 251F  
