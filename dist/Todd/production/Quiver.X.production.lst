

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Sun Jan 15 19:31:27 2017

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1527
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	idataBANK4,global,class=CODE,delta=2
     8                           	psect	stringtext,global,class=STRCODE,delta=2
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    17                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    18                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    19                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    20                           	psect	bssBANK7,global,class=BANK7,space=1,delta=1
    21                           	psect	clrtext,global,class=CODE,delta=2
    22                           	psect	inittext,global,class=CODE,delta=2
    23                           	psect	cstackBANK5,global,class=BANK5,space=1,delta=1
    24                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    25                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    26                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    27                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    28                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    29                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    30                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    31                           	psect	text1,local,class=CODE,merge=1,delta=2
    32                           	psect	text2,local,class=CODE,merge=1,delta=2
    33                           	psect	text3,local,class=CODE,merge=1,delta=2
    34                           	psect	text4,local,class=CODE,merge=1,delta=2
    35                           	psect	text5,local,class=CODE,merge=1,delta=2
    36                           	psect	text6,local,class=CODE,merge=1,delta=2
    37                           	psect	text7,local,class=CODE,merge=1,delta=2
    38                           	psect	text8,local,class=CODE,merge=1,delta=2
    39                           	psect	text9,local,class=CODE,merge=1,delta=2
    40                           	psect	text10,local,class=CODE,merge=1,delta=2
    41                           	psect	text11,local,class=CODE,merge=1,delta=2
    42                           	psect	text12,local,class=CODE,merge=1,delta=2
    43                           	psect	text13,local,class=CODE,merge=1,delta=2
    44                           	psect	text14,local,class=CODE,merge=1,delta=2
    45                           	psect	text15,local,class=CODE,merge=1,delta=2
    46                           	psect	text16,local,class=CODE,merge=1,delta=2
    47                           	psect	text17,local,class=CODE,merge=1,delta=2
    48                           	psect	text18,local,class=CODE,merge=1,delta=2
    49                           	psect	text19,local,class=CODE,merge=1,delta=2
    50                           	psect	text20,local,class=CODE,merge=1,delta=2
    51                           	psect	text21,local,class=CODE,merge=1,delta=2
    52                           	psect	text22,local,class=CODE,merge=1,delta=2
    53                           	psect	text23,local,class=CODE,merge=1,delta=2
    54                           	psect	text24,local,class=CODE,merge=1,delta=2
    55                           	psect	text25,local,class=CODE,merge=1,delta=2
    56                           	psect	text26,local,class=CODE,merge=1,delta=2
    57                           	psect	text27,local,class=CODE,merge=1,delta=2
    58                           	psect	text28,local,class=CODE,merge=1,delta=2
    59                           	psect	text29,local,class=CODE,merge=1,delta=2
    60                           	psect	text30,local,class=CODE,merge=1,delta=2
    61                           	psect	text31,local,class=CODE,merge=1,delta=2
    62                           	psect	text32,local,class=CODE,merge=1,delta=2
    63                           	psect	text33,local,class=CODE,merge=1,delta=2
    64                           	psect	text34,local,class=CODE,merge=1,delta=2
    65                           	psect	text35,local,class=CODE,merge=1,delta=2
    66                           	psect	text36,local,class=CODE,merge=1,delta=2
    67                           	psect	text37,local,class=CODE,merge=1,delta=2
    68                           	psect	text38,local,class=CODE,merge=1,delta=2
    69                           	psect	text39,local,class=CODE,merge=1,delta=2
    70                           	psect	text40,local,class=CODE,merge=1,delta=2
    71                           	psect	text41,local,class=CODE,merge=1,delta=2
    72                           	psect	text42,local,class=CODE,merge=1,delta=2
    73                           	psect	text43,local,class=CODE,merge=1,delta=2
    74                           	psect	text44,local,class=CODE,merge=1,delta=2
    75                           	psect	text45,local,class=CODE,merge=1,delta=2
    76                           	psect	text46,local,class=CODE,merge=1,delta=2
    77                           	psect	text47,local,class=CODE,merge=1,delta=2
    78                           	psect	text48,local,class=CODE,merge=1,delta=2
    79                           	psect	text49,local,class=CODE,merge=1,delta=2
    80                           	psect	text50,local,class=CODE,merge=1,delta=2
    81                           	psect	text51,local,class=CODE,merge=1,delta=2
    82                           	psect	text52,local,class=CODE,merge=1,delta=2
    83                           	psect	text53,local,class=CODE,merge=1,delta=2
    84                           	psect	text54,local,class=CODE,merge=1,delta=2
    85                           	psect	text55,local,class=CODE,merge=1,delta=2
    86                           	psect	text56,local,class=CODE,merge=1,delta=2
    87                           	psect	text57,local,class=CODE,merge=1,delta=2
    88                           	psect	text58,local,class=CODE,merge=1,delta=2
    89                           	psect	text59,local,class=CODE,merge=1,delta=2
    90                           	psect	text60,local,class=CODE,merge=1,delta=2
    91                           	psect	text61,local,class=CODE,merge=1,delta=2
    92                           	psect	text62,local,class=CODE,merge=1,delta=2
    93                           	psect	text63,local,class=CODE,merge=1,delta=2
    94                           	psect	text64,local,class=CODE,merge=1,delta=2
    95                           	psect	text65,local,class=CODE,merge=1,delta=2
    96                           	psect	text66,local,class=CODE,merge=1,delta=2
    97                           	psect	text67,local,class=CODE,merge=1,delta=2
    98                           	psect	text68,local,class=CODE,merge=1,delta=2
    99                           	psect	text69,local,class=CODE,merge=1,delta=2
   100                           	psect	text70,local,class=CODE,merge=1,delta=2
   101                           	psect	text71,local,class=CODE,merge=1,delta=2
   102                           	psect	text72,local,class=CODE,merge=1,delta=2
   103                           	psect	text73,local,class=CODE,merge=1,delta=2
   104                           	psect	intentry,global,class=CODE,delta=2
   105                           	psect	text75,local,class=CODE,merge=1,delta=2
   106                           	psect	text76,local,class=CODE,merge=1,delta=2
   107                           	psect	text77,local,class=CODE,merge=1,delta=2
   108                           	psect	text78,local,class=CODE,merge=1,delta=2
   109                           	psect	text79,local,class=CODE,merge=1,delta=2
   110                           	psect	text80,local,class=CODE,merge=1,delta=2
   111                           	dabs	1,0x920,80
   112                           	dabs	1,0x8A0,80
   113                           	dabs	1,0x820,80
   114                           	dabs	1,0x7A0,80
   115                           	dabs	1,0x742,46
   116                           	dabs	1,0x720,34
   117                           	dabs	1,0x6A0,80
   118                           	dabs	1,0x620,80
   119                           	dabs	1,0x5BA,54
   120                           	dabs	1,0x2482,0,_cosArray
   121                           	dabs	1,0x238A,0,_modArray
   122                           	dabs	1,0x7E,2
   123  0000                     	;# 
   124  0001                     	;# 
   125  0002                     	;# 
   126  0003                     	;# 
   127  0004                     	;# 
   128  0005                     	;# 
   129  0006                     	;# 
   130  0007                     	;# 
   131  0008                     	;# 
   132  0009                     	;# 
   133  000A                     	;# 
   134  000B                     	;# 
   135  000C                     	;# 
   136  000D                     	;# 
   137  000E                     	;# 
   138  000F                     	;# 
   139  0010                     	;# 
   140  0011                     	;# 
   141  0012                     	;# 
   142  0013                     	;# 
   143  0014                     	;# 
   144  0015                     	;# 
   145  0016                     	;# 
   146  0016                     	;# 
   147  0017                     	;# 
   148  0018                     	;# 
   149  0019                     	;# 
   150  001A                     	;# 
   151  001B                     	;# 
   152  001C                     	;# 
   153  008C                     	;# 
   154  008D                     	;# 
   155  008E                     	;# 
   156  008F                     	;# 
   157  0090                     	;# 
   158  0091                     	;# 
   159  0092                     	;# 
   160  0093                     	;# 
   161  0094                     	;# 
   162  0095                     	;# 
   163  0096                     	;# 
   164  0097                     	;# 
   165  0099                     	;# 
   166  009A                     	;# 
   167  009B                     	;# 
   168  009B                     	;# 
   169  009C                     	;# 
   170  009D                     	;# 
   171  009E                     	;# 
   172  010C                     	;# 
   173  010D                     	;# 
   174  010E                     	;# 
   175  010F                     	;# 
   176  0110                     	;# 
   177  0116                     	;# 
   178  0117                     	;# 
   179  011D                     	;# 
   180  018C                     	;# 
   181  018D                     	;# 
   182  018F                     	;# 
   183  0190                     	;# 
   184  0191                     	;# 
   185  0191                     	;# 
   186  0192                     	;# 
   187  0193                     	;# 
   188  0193                     	;# 
   189  0194                     	;# 
   190  0195                     	;# 
   191  0196                     	;# 
   192  0197                     	;# 
   193  0199                     	;# 
   194  0199                     	;# 
   195  0199                     	;# 
   196  019A                     	;# 
   197  019A                     	;# 
   198  019A                     	;# 
   199  019B                     	;# 
   200  019B                     	;# 
   201  019B                     	;# 
   202  019B                     	;# 
   203  019B                     	;# 
   204  019C                     	;# 
   205  019C                     	;# 
   206  019C                     	;# 
   207  019D                     	;# 
   208  019D                     	;# 
   209  019D                     	;# 
   210  019E                     	;# 
   211  019E                     	;# 
   212  019E                     	;# 
   213  019F                     	;# 
   214  019F                     	;# 
   215  019F                     	;# 
   216  020D                     	;# 
   217  020F                     	;# 
   218  0210                     	;# 
   219  0211                     	;# 
   220  0211                     	;# 
   221  0212                     	;# 
   222  0212                     	;# 
   223  0213                     	;# 
   224  0213                     	;# 
   225  0214                     	;# 
   226  0214                     	;# 
   227  0215                     	;# 
   228  0215                     	;# 
   229  0215                     	;# 
   230  0216                     	;# 
   231  0216                     	;# 
   232  0217                     	;# 
   233  0217                     	;# 
   234  0219                     	;# 
   235  021A                     	;# 
   236  021B                     	;# 
   237  021C                     	;# 
   238  021D                     	;# 
   239  021E                     	;# 
   240  021F                     	;# 
   241  028C                     	;# 
   242  028D                     	;# 
   243  0291                     	;# 
   244  0291                     	;# 
   245  0292                     	;# 
   246  0293                     	;# 
   247  0298                     	;# 
   248  0298                     	;# 
   249  0299                     	;# 
   250  029A                     	;# 
   251  029D                     	;# 
   252  029E                     	;# 
   253  029F                     	;# 
   254  030C                     	;# 
   255  030D                     	;# 
   256  0311                     	;# 
   257  0311                     	;# 
   258  0312                     	;# 
   259  0313                     	;# 
   260  0318                     	;# 
   261  0318                     	;# 
   262  0319                     	;# 
   263  031A                     	;# 
   264  031C                     	;# 
   265  031C                     	;# 
   266  031D                     	;# 
   267  031E                     	;# 
   268  038C                     	;# 
   269  038D                     	;# 
   270  0394                     	;# 
   271  0395                     	;# 
   272  0396                     	;# 
   273  040C                     	;# 
   274  040D                     	;# 
   275  0411                     	;# 
   276  0411                     	;# 
   277  0412                     	;# 
   278  0413                     	;# 
   279  0414                     	;# 
   280  0415                     	;# 
   281  0416                     	;# 
   282  0417                     	;# 
   283  0418                     	;# 
   284  0418                     	;# 
   285  0419                     	;# 
   286  041A                     	;# 
   287  041B                     	;# 
   288  041C                     	;# 
   289  041D                     	;# 
   290  041E                     	;# 
   291  048D                     	;# 
   292  0491                     	;# 
   293  0491                     	;# 
   294  0492                     	;# 
   295  0492                     	;# 
   296  0493                     	;# 
   297  0493                     	;# 
   298  0493                     	;# 
   299  0494                     	;# 
   300  0494                     	;# 
   301  0495                     	;# 
   302  0495                     	;# 
   303  0496                     	;# 
   304  0496                     	;# 
   305  0497                     	;# 
   306  0497                     	;# 
   307  0595                     	;# 
   308  0596                     	;# 
   309  0597                     	;# 
   310  059C                     	;# 
   311  059D                     	;# 
   312  059E                     	;# 
   313  0611                     	;# 
   314  0611                     	;# 
   315  0612                     	;# 
   316  0613                     	;# 
   317  0614                     	;# 
   318  0614                     	;# 
   319  0615                     	;# 
   320  0616                     	;# 
   321  0617                     	;# 
   322  0617                     	;# 
   323  0618                     	;# 
   324  0619                     	;# 
   325  061A                     	;# 
   326  061A                     	;# 
   327  061B                     	;# 
   328  061C                     	;# 
   329  061D                     	;# 
   330  061D                     	;# 
   331  061E                     	;# 
   332  061F                     	;# 
   333  0FE4                     	;# 
   334  0FE5                     	;# 
   335  0FE6                     	;# 
   336  0FE7                     	;# 
   337  0FE8                     	;# 
   338  0FE9                     	;# 
   339  0FEA                     	;# 
   340  0FEB                     	;# 
   341  0FED                     	;# 
   342  0FEE                     	;# 
   343  0FEF                     	;# 
   344  0000                     	;# 
   345  0001                     	;# 
   346  0002                     	;# 
   347  0003                     	;# 
   348  0004                     	;# 
   349  0005                     	;# 
   350  0006                     	;# 
   351  0007                     	;# 
   352  0008                     	;# 
   353  0009                     	;# 
   354  000A                     	;# 
   355  000B                     	;# 
   356  000C                     	;# 
   357  000D                     	;# 
   358  000E                     	;# 
   359  000F                     	;# 
   360  0010                     	;# 
   361  0011                     	;# 
   362  0012                     	;# 
   363  0013                     	;# 
   364  0014                     	;# 
   365  0015                     	;# 
   366  0016                     	;# 
   367  0016                     	;# 
   368  0017                     	;# 
   369  0018                     	;# 
   370  0019                     	;# 
   371  001A                     	;# 
   372  001B                     	;# 
   373  001C                     	;# 
   374  008C                     	;# 
   375  008D                     	;# 
   376  008E                     	;# 
   377  008F                     	;# 
   378  0090                     	;# 
   379  0091                     	;# 
   380  0092                     	;# 
   381  0093                     	;# 
   382  0094                     	;# 
   383  0095                     	;# 
   384  0096                     	;# 
   385  0097                     	;# 
   386  0099                     	;# 
   387  009A                     	;# 
   388  009B                     	;# 
   389  009B                     	;# 
   390  009C                     	;# 
   391  009D                     	;# 
   392  009E                     	;# 
   393  010C                     	;# 
   394  010D                     	;# 
   395  010E                     	;# 
   396  010F                     	;# 
   397  0110                     	;# 
   398  0116                     	;# 
   399  0117                     	;# 
   400  011D                     	;# 
   401  018C                     	;# 
   402  018D                     	;# 
   403  018F                     	;# 
   404  0190                     	;# 
   405  0191                     	;# 
   406  0191                     	;# 
   407  0192                     	;# 
   408  0193                     	;# 
   409  0193                     	;# 
   410  0194                     	;# 
   411  0195                     	;# 
   412  0196                     	;# 
   413  0197                     	;# 
   414  0199                     	;# 
   415  0199                     	;# 
   416  0199                     	;# 
   417  019A                     	;# 
   418  019A                     	;# 
   419  019A                     	;# 
   420  019B                     	;# 
   421  019B                     	;# 
   422  019B                     	;# 
   423  019B                     	;# 
   424  019B                     	;# 
   425  019C                     	;# 
   426  019C                     	;# 
   427  019C                     	;# 
   428  019D                     	;# 
   429  019D                     	;# 
   430  019D                     	;# 
   431  019E                     	;# 
   432  019E                     	;# 
   433  019E                     	;# 
   434  019F                     	;# 
   435  019F                     	;# 
   436  019F                     	;# 
   437  020D                     	;# 
   438  020F                     	;# 
   439  0210                     	;# 
   440  0211                     	;# 
   441  0211                     	;# 
   442  0212                     	;# 
   443  0212                     	;# 
   444  0213                     	;# 
   445  0213                     	;# 
   446  0214                     	;# 
   447  0214                     	;# 
   448  0215                     	;# 
   449  0215                     	;# 
   450  0215                     	;# 
   451  0216                     	;# 
   452  0216                     	;# 
   453  0217                     	;# 
   454  0217                     	;# 
   455  0219                     	;# 
   456  021A                     	;# 
   457  021B                     	;# 
   458  021C                     	;# 
   459  021D                     	;# 
   460  021E                     	;# 
   461  021F                     	;# 
   462  028C                     	;# 
   463  028D                     	;# 
   464  0291                     	;# 
   465  0291                     	;# 
   466  0292                     	;# 
   467  0293                     	;# 
   468  0298                     	;# 
   469  0298                     	;# 
   470  0299                     	;# 
   471  029A                     	;# 
   472  029D                     	;# 
   473  029E                     	;# 
   474  029F                     	;# 
   475  030C                     	;# 
   476  030D                     	;# 
   477  0311                     	;# 
   478  0311                     	;# 
   479  0312                     	;# 
   480  0313                     	;# 
   481  0318                     	;# 
   482  0318                     	;# 
   483  0319                     	;# 
   484  031A                     	;# 
   485  031C                     	;# 
   486  031C                     	;# 
   487  031D                     	;# 
   488  031E                     	;# 
   489  038C                     	;# 
   490  038D                     	;# 
   491  0394                     	;# 
   492  0395                     	;# 
   493  0396                     	;# 
   494  040C                     	;# 
   495  040D                     	;# 
   496  0411                     	;# 
   497  0411                     	;# 
   498  0412                     	;# 
   499  0413                     	;# 
   500  0414                     	;# 
   501  0415                     	;# 
   502  0416                     	;# 
   503  0417                     	;# 
   504  0418                     	;# 
   505  0418                     	;# 
   506  0419                     	;# 
   507  041A                     	;# 
   508  041B                     	;# 
   509  041C                     	;# 
   510  041D                     	;# 
   511  041E                     	;# 
   512  048D                     	;# 
   513  0491                     	;# 
   514  0491                     	;# 
   515  0492                     	;# 
   516  0492                     	;# 
   517  0493                     	;# 
   518  0493                     	;# 
   519  0493                     	;# 
   520  0494                     	;# 
   521  0494                     	;# 
   522  0495                     	;# 
   523  0495                     	;# 
   524  0496                     	;# 
   525  0496                     	;# 
   526  0497                     	;# 
   527  0497                     	;# 
   528  0595                     	;# 
   529  0596                     	;# 
   530  0597                     	;# 
   531  059C                     	;# 
   532  059D                     	;# 
   533  059E                     	;# 
   534  0611                     	;# 
   535  0611                     	;# 
   536  0612                     	;# 
   537  0613                     	;# 
   538  0614                     	;# 
   539  0614                     	;# 
   540  0615                     	;# 
   541  0616                     	;# 
   542  0617                     	;# 
   543  0617                     	;# 
   544  0618                     	;# 
   545  0619                     	;# 
   546  061A                     	;# 
   547  061A                     	;# 
   548  061B                     	;# 
   549  061C                     	;# 
   550  061D                     	;# 
   551  061D                     	;# 
   552  061E                     	;# 
   553  061F                     	;# 
   554  0FE4                     	;# 
   555  0FE5                     	;# 
   556  0FE6                     	;# 
   557  0FE7                     	;# 
   558  0FE8                     	;# 
   559  0FE9                     	;# 
   560  0FEA                     	;# 
   561  0FEB                     	;# 
   562  0FED                     	;# 
   563  0FEE                     	;# 
   564  0FEF                     	;# 
   565  0000                     	;# 
   566  0001                     	;# 
   567  0002                     	;# 
   568  0003                     	;# 
   569  0004                     	;# 
   570  0005                     	;# 
   571  0006                     	;# 
   572  0007                     	;# 
   573  0008                     	;# 
   574  0009                     	;# 
   575  000A                     	;# 
   576  000B                     	;# 
   577  000C                     	;# 
   578  000D                     	;# 
   579  000E                     	;# 
   580  000F                     	;# 
   581  0010                     	;# 
   582  0011                     	;# 
   583  0012                     	;# 
   584  0013                     	;# 
   585  0014                     	;# 
   586  0015                     	;# 
   587  0016                     	;# 
   588  0016                     	;# 
   589  0017                     	;# 
   590  0018                     	;# 
   591  0019                     	;# 
   592  001A                     	;# 
   593  001B                     	;# 
   594  001C                     	;# 
   595  008C                     	;# 
   596  008D                     	;# 
   597  008E                     	;# 
   598  008F                     	;# 
   599  0090                     	;# 
   600  0091                     	;# 
   601  0092                     	;# 
   602  0093                     	;# 
   603  0094                     	;# 
   604  0095                     	;# 
   605  0096                     	;# 
   606  0097                     	;# 
   607  0099                     	;# 
   608  009A                     	;# 
   609  009B                     	;# 
   610  009B                     	;# 
   611  009C                     	;# 
   612  009D                     	;# 
   613  009E                     	;# 
   614  010C                     	;# 
   615  010D                     	;# 
   616  010E                     	;# 
   617  010F                     	;# 
   618  0110                     	;# 
   619  0116                     	;# 
   620  0117                     	;# 
   621  011D                     	;# 
   622  018C                     	;# 
   623  018D                     	;# 
   624  018F                     	;# 
   625  0190                     	;# 
   626  0191                     	;# 
   627  0191                     	;# 
   628  0192                     	;# 
   629  0193                     	;# 
   630  0193                     	;# 
   631  0194                     	;# 
   632  0195                     	;# 
   633  0196                     	;# 
   634  0197                     	;# 
   635  0199                     	;# 
   636  0199                     	;# 
   637  0199                     	;# 
   638  019A                     	;# 
   639  019A                     	;# 
   640  019A                     	;# 
   641  019B                     	;# 
   642  019B                     	;# 
   643  019B                     	;# 
   644  019B                     	;# 
   645  019B                     	;# 
   646  019C                     	;# 
   647  019C                     	;# 
   648  019C                     	;# 
   649  019D                     	;# 
   650  019D                     	;# 
   651  019D                     	;# 
   652  019E                     	;# 
   653  019E                     	;# 
   654  019E                     	;# 
   655  019F                     	;# 
   656  019F                     	;# 
   657  019F                     	;# 
   658  020D                     	;# 
   659  020F                     	;# 
   660  0210                     	;# 
   661  0211                     	;# 
   662  0211                     	;# 
   663  0212                     	;# 
   664  0212                     	;# 
   665  0213                     	;# 
   666  0213                     	;# 
   667  0214                     	;# 
   668  0214                     	;# 
   669  0215                     	;# 
   670  0215                     	;# 
   671  0215                     	;# 
   672  0216                     	;# 
   673  0216                     	;# 
   674  0217                     	;# 
   675  0217                     	;# 
   676  0219                     	;# 
   677  021A                     	;# 
   678  021B                     	;# 
   679  021C                     	;# 
   680  021D                     	;# 
   681  021E                     	;# 
   682  021F                     	;# 
   683  028C                     	;# 
   684  028D                     	;# 
   685  0291                     	;# 
   686  0291                     	;# 
   687  0292                     	;# 
   688  0293                     	;# 
   689  0298                     	;# 
   690  0298                     	;# 
   691  0299                     	;# 
   692  029A                     	;# 
   693  029D                     	;# 
   694  029E                     	;# 
   695  029F                     	;# 
   696  030C                     	;# 
   697  030D                     	;# 
   698  0311                     	;# 
   699  0311                     	;# 
   700  0312                     	;# 
   701  0313                     	;# 
   702  0318                     	;# 
   703  0318                     	;# 
   704  0319                     	;# 
   705  031A                     	;# 
   706  031C                     	;# 
   707  031C                     	;# 
   708  031D                     	;# 
   709  031E                     	;# 
   710  038C                     	;# 
   711  038D                     	;# 
   712  0394                     	;# 
   713  0395                     	;# 
   714  0396                     	;# 
   715  040C                     	;# 
   716  040D                     	;# 
   717  0411                     	;# 
   718  0411                     	;# 
   719  0412                     	;# 
   720  0413                     	;# 
   721  0414                     	;# 
   722  0415                     	;# 
   723  0416                     	;# 
   724  0417                     	;# 
   725  0418                     	;# 
   726  0418                     	;# 
   727  0419                     	;# 
   728  041A                     	;# 
   729  041B                     	;# 
   730  041C                     	;# 
   731  041D                     	;# 
   732  041E                     	;# 
   733  048D                     	;# 
   734  0491                     	;# 
   735  0491                     	;# 
   736  0492                     	;# 
   737  0492                     	;# 
   738  0493                     	;# 
   739  0493                     	;# 
   740  0493                     	;# 
   741  0494                     	;# 
   742  0494                     	;# 
   743  0495                     	;# 
   744  0495                     	;# 
   745  0496                     	;# 
   746  0496                     	;# 
   747  0497                     	;# 
   748  0497                     	;# 
   749  0595                     	;# 
   750  0596                     	;# 
   751  0597                     	;# 
   752  059C                     	;# 
   753  059D                     	;# 
   754  059E                     	;# 
   755  0611                     	;# 
   756  0611                     	;# 
   757  0612                     	;# 
   758  0613                     	;# 
   759  0614                     	;# 
   760  0614                     	;# 
   761  0615                     	;# 
   762  0616                     	;# 
   763  0617                     	;# 
   764  0617                     	;# 
   765  0618                     	;# 
   766  0619                     	;# 
   767  061A                     	;# 
   768  061A                     	;# 
   769  061B                     	;# 
   770  061C                     	;# 
   771  061D                     	;# 
   772  061D                     	;# 
   773  061E                     	;# 
   774  061F                     	;# 
   775  0FE4                     	;# 
   776  0FE5                     	;# 
   777  0FE6                     	;# 
   778  0FE7                     	;# 
   779  0FE8                     	;# 
   780  0FE9                     	;# 
   781  0FEA                     	;# 
   782  0FEB                     	;# 
   783  0FED                     	;# 
   784  0FEE                     	;# 
   785  0FEF                     	;# 
   786  0000                     	;# 
   787  0001                     	;# 
   788  0002                     	;# 
   789  0003                     	;# 
   790  0004                     	;# 
   791  0005                     	;# 
   792  0006                     	;# 
   793  0007                     	;# 
   794  0008                     	;# 
   795  0009                     	;# 
   796  000A                     	;# 
   797  000B                     	;# 
   798  000C                     	;# 
   799  000D                     	;# 
   800  000E                     	;# 
   801  000F                     	;# 
   802  0010                     	;# 
   803  0011                     	;# 
   804  0012                     	;# 
   805  0013                     	;# 
   806  0014                     	;# 
   807  0015                     	;# 
   808  0016                     	;# 
   809  0016                     	;# 
   810  0017                     	;# 
   811  0018                     	;# 
   812  0019                     	;# 
   813  001A                     	;# 
   814  001B                     	;# 
   815  001C                     	;# 
   816  008C                     	;# 
   817  008D                     	;# 
   818  008E                     	;# 
   819  008F                     	;# 
   820  0090                     	;# 
   821  0091                     	;# 
   822  0092                     	;# 
   823  0093                     	;# 
   824  0094                     	;# 
   825  0095                     	;# 
   826  0096                     	;# 
   827  0097                     	;# 
   828  0099                     	;# 
   829  009A                     	;# 
   830  009B                     	;# 
   831  009B                     	;# 
   832  009C                     	;# 
   833  009D                     	;# 
   834  009E                     	;# 
   835  010C                     	;# 
   836  010D                     	;# 
   837  010E                     	;# 
   838  010F                     	;# 
   839  0110                     	;# 
   840  0116                     	;# 
   841  0117                     	;# 
   842  011D                     	;# 
   843  018C                     	;# 
   844  018D                     	;# 
   845  018F                     	;# 
   846  0190                     	;# 
   847  0191                     	;# 
   848  0191                     	;# 
   849  0192                     	;# 
   850  0193                     	;# 
   851  0193                     	;# 
   852  0194                     	;# 
   853  0195                     	;# 
   854  0196                     	;# 
   855  0197                     	;# 
   856  0199                     	;# 
   857  0199                     	;# 
   858  0199                     	;# 
   859  019A                     	;# 
   860  019A                     	;# 
   861  019A                     	;# 
   862  019B                     	;# 
   863  019B                     	;# 
   864  019B                     	;# 
   865  019B                     	;# 
   866  019B                     	;# 
   867  019C                     	;# 
   868  019C                     	;# 
   869  019C                     	;# 
   870  019D                     	;# 
   871  019D                     	;# 
   872  019D                     	;# 
   873  019E                     	;# 
   874  019E                     	;# 
   875  019E                     	;# 
   876  019F                     	;# 
   877  019F                     	;# 
   878  019F                     	;# 
   879  020D                     	;# 
   880  020F                     	;# 
   881  0210                     	;# 
   882  0211                     	;# 
   883  0211                     	;# 
   884  0212                     	;# 
   885  0212                     	;# 
   886  0213                     	;# 
   887  0213                     	;# 
   888  0214                     	;# 
   889  0214                     	;# 
   890  0215                     	;# 
   891  0215                     	;# 
   892  0215                     	;# 
   893  0216                     	;# 
   894  0216                     	;# 
   895  0217                     	;# 
   896  0217                     	;# 
   897  0219                     	;# 
   898  021A                     	;# 
   899  021B                     	;# 
   900  021C                     	;# 
   901  021D                     	;# 
   902  021E                     	;# 
   903  021F                     	;# 
   904  028C                     	;# 
   905  028D                     	;# 
   906  0291                     	;# 
   907  0291                     	;# 
   908  0292                     	;# 
   909  0293                     	;# 
   910  0298                     	;# 
   911  0298                     	;# 
   912  0299                     	;# 
   913  029A                     	;# 
   914  029D                     	;# 
   915  029E                     	;# 
   916  029F                     	;# 
   917  030C                     	;# 
   918  030D                     	;# 
   919  0311                     	;# 
   920  0311                     	;# 
   921  0312                     	;# 
   922  0313                     	;# 
   923  0318                     	;# 
   924  0318                     	;# 
   925  0319                     	;# 
   926  031A                     	;# 
   927  031C                     	;# 
   928  031C                     	;# 
   929  031D                     	;# 
   930  031E                     	;# 
   931  038C                     	;# 
   932  038D                     	;# 
   933  0394                     	;# 
   934  0395                     	;# 
   935  0396                     	;# 
   936  040C                     	;# 
   937  040D                     	;# 
   938  0411                     	;# 
   939  0411                     	;# 
   940  0412                     	;# 
   941  0413                     	;# 
   942  0414                     	;# 
   943  0415                     	;# 
   944  0416                     	;# 
   945  0417                     	;# 
   946  0418                     	;# 
   947  0418                     	;# 
   948  0419                     	;# 
   949  041A                     	;# 
   950  041B                     	;# 
   951  041C                     	;# 
   952  041D                     	;# 
   953  041E                     	;# 
   954  048D                     	;# 
   955  0491                     	;# 
   956  0491                     	;# 
   957  0492                     	;# 
   958  0492                     	;# 
   959  0493                     	;# 
   960  0493                     	;# 
   961  0493                     	;# 
   962  0494                     	;# 
   963  0494                     	;# 
   964  0495                     	;# 
   965  0495                     	;# 
   966  0496                     	;# 
   967  0496                     	;# 
   968  0497                     	;# 
   969  0497                     	;# 
   970  0595                     	;# 
   971  0596                     	;# 
   972  0597                     	;# 
   973  059C                     	;# 
   974  059D                     	;# 
   975  059E                     	;# 
   976  0611                     	;# 
   977  0611                     	;# 
   978  0612                     	;# 
   979  0613                     	;# 
   980  0614                     	;# 
   981  0614                     	;# 
   982  0615                     	;# 
   983  0616                     	;# 
   984  0617                     	;# 
   985  0617                     	;# 
   986  0618                     	;# 
   987  0619                     	;# 
   988  061A                     	;# 
   989  061A                     	;# 
   990  061B                     	;# 
   991  061C                     	;# 
   992  061D                     	;# 
   993  061D                     	;# 
   994  061E                     	;# 
   995  061F                     	;# 
   996  0FE4                     	;# 
   997  0FE5                     	;# 
   998  0FE6                     	;# 
   999  0FE7                     	;# 
  1000  0FE8                     	;# 
  1001  0FE9                     	;# 
  1002  0FEA                     	;# 
  1003  0FEB                     	;# 
  1004  0FED                     	;# 
  1005  0FEE                     	;# 
  1006  0FEF                     	;# 
  1007  0000                     	;# 
  1008  0001                     	;# 
  1009  0002                     	;# 
  1010  0003                     	;# 
  1011  0004                     	;# 
  1012  0005                     	;# 
  1013  0006                     	;# 
  1014  0007                     	;# 
  1015  0008                     	;# 
  1016  0009                     	;# 
  1017  000A                     	;# 
  1018  000B                     	;# 
  1019  000C                     	;# 
  1020  000D                     	;# 
  1021  000E                     	;# 
  1022  000F                     	;# 
  1023  0010                     	;# 
  1024  0011                     	;# 
  1025  0012                     	;# 
  1026  0013                     	;# 
  1027  0014                     	;# 
  1028  0015                     	;# 
  1029  0016                     	;# 
  1030  0016                     	;# 
  1031  0017                     	;# 
  1032  0018                     	;# 
  1033  0019                     	;# 
  1034  001A                     	;# 
  1035  001B                     	;# 
  1036  001C                     	;# 
  1037  008C                     	;# 
  1038  008D                     	;# 
  1039  008E                     	;# 
  1040  008F                     	;# 
  1041  0090                     	;# 
  1042  0091                     	;# 
  1043  0092                     	;# 
  1044  0093                     	;# 
  1045  0094                     	;# 
  1046  0095                     	;# 
  1047  0096                     	;# 
  1048  0097                     	;# 
  1049  0099                     	;# 
  1050  009A                     	;# 
  1051  009B                     	;# 
  1052  009B                     	;# 
  1053  009C                     	;# 
  1054  009D                     	;# 
  1055  009E                     	;# 
  1056  010C                     	;# 
  1057  010D                     	;# 
  1058  010E                     	;# 
  1059  010F                     	;# 
  1060  0110                     	;# 
  1061  0116                     	;# 
  1062  0117                     	;# 
  1063  011D                     	;# 
  1064  018C                     	;# 
  1065  018D                     	;# 
  1066  018F                     	;# 
  1067  0190                     	;# 
  1068  0191                     	;# 
  1069  0191                     	;# 
  1070  0192                     	;# 
  1071  0193                     	;# 
  1072  0193                     	;# 
  1073  0194                     	;# 
  1074  0195                     	;# 
  1075  0196                     	;# 
  1076  0197                     	;# 
  1077  0199                     	;# 
  1078  0199                     	;# 
  1079  0199                     	;# 
  1080  019A                     	;# 
  1081  019A                     	;# 
  1082  019A                     	;# 
  1083  019B                     	;# 
  1084  019B                     	;# 
  1085  019B                     	;# 
  1086  019B                     	;# 
  1087  019B                     	;# 
  1088  019C                     	;# 
  1089  019C                     	;# 
  1090  019C                     	;# 
  1091  019D                     	;# 
  1092  019D                     	;# 
  1093  019D                     	;# 
  1094  019E                     	;# 
  1095  019E                     	;# 
  1096  019E                     	;# 
  1097  019F                     	;# 
  1098  019F                     	;# 
  1099  019F                     	;# 
  1100  020D                     	;# 
  1101  020F                     	;# 
  1102  0210                     	;# 
  1103  0211                     	;# 
  1104  0211                     	;# 
  1105  0212                     	;# 
  1106  0212                     	;# 
  1107  0213                     	;# 
  1108  0213                     	;# 
  1109  0214                     	;# 
  1110  0214                     	;# 
  1111  0215                     	;# 
  1112  0215                     	;# 
  1113  0215                     	;# 
  1114  0216                     	;# 
  1115  0216                     	;# 
  1116  0217                     	;# 
  1117  0217                     	;# 
  1118  0219                     	;# 
  1119  021A                     	;# 
  1120  021B                     	;# 
  1121  021C                     	;# 
  1122  021D                     	;# 
  1123  021E                     	;# 
  1124  021F                     	;# 
  1125  028C                     	;# 
  1126  028D                     	;# 
  1127  0291                     	;# 
  1128  0291                     	;# 
  1129  0292                     	;# 
  1130  0293                     	;# 
  1131  0298                     	;# 
  1132  0298                     	;# 
  1133  0299                     	;# 
  1134  029A                     	;# 
  1135  029D                     	;# 
  1136  029E                     	;# 
  1137  029F                     	;# 
  1138  030C                     	;# 
  1139  030D                     	;# 
  1140  0311                     	;# 
  1141  0311                     	;# 
  1142  0312                     	;# 
  1143  0313                     	;# 
  1144  0318                     	;# 
  1145  0318                     	;# 
  1146  0319                     	;# 
  1147  031A                     	;# 
  1148  031C                     	;# 
  1149  031C                     	;# 
  1150  031D                     	;# 
  1151  031E                     	;# 
  1152  038C                     	;# 
  1153  038D                     	;# 
  1154  0394                     	;# 
  1155  0395                     	;# 
  1156  0396                     	;# 
  1157  040C                     	;# 
  1158  040D                     	;# 
  1159  0411                     	;# 
  1160  0411                     	;# 
  1161  0412                     	;# 
  1162  0413                     	;# 
  1163  0414                     	;# 
  1164  0415                     	;# 
  1165  0416                     	;# 
  1166  0417                     	;# 
  1167  0418                     	;# 
  1168  0418                     	;# 
  1169  0419                     	;# 
  1170  041A                     	;# 
  1171  041B                     	;# 
  1172  041C                     	;# 
  1173  041D                     	;# 
  1174  041E                     	;# 
  1175  048D                     	;# 
  1176  0491                     	;# 
  1177  0491                     	;# 
  1178  0492                     	;# 
  1179  0492                     	;# 
  1180  0493                     	;# 
  1181  0493                     	;# 
  1182  0493                     	;# 
  1183  0494                     	;# 
  1184  0494                     	;# 
  1185  0495                     	;# 
  1186  0495                     	;# 
  1187  0496                     	;# 
  1188  0496                     	;# 
  1189  0497                     	;# 
  1190  0497                     	;# 
  1191  0595                     	;# 
  1192  0596                     	;# 
  1193  0597                     	;# 
  1194  059C                     	;# 
  1195  059D                     	;# 
  1196  059E                     	;# 
  1197  0611                     	;# 
  1198  0611                     	;# 
  1199  0612                     	;# 
  1200  0613                     	;# 
  1201  0614                     	;# 
  1202  0614                     	;# 
  1203  0615                     	;# 
  1204  0616                     	;# 
  1205  0617                     	;# 
  1206  0617                     	;# 
  1207  0618                     	;# 
  1208  0619                     	;# 
  1209  061A                     	;# 
  1210  061A                     	;# 
  1211  061B                     	;# 
  1212  061C                     	;# 
  1213  061D                     	;# 
  1214  061D                     	;# 
  1215  061E                     	;# 
  1216  061F                     	;# 
  1217  0FE4                     	;# 
  1218  0FE5                     	;# 
  1219  0FE6                     	;# 
  1220  0FE7                     	;# 
  1221  0FE8                     	;# 
  1222  0FE9                     	;# 
  1223  0FEA                     	;# 
  1224  0FEB                     	;# 
  1225  0FED                     	;# 
  1226  0FEE                     	;# 
  1227  0FEF                     	;# 
  1228  0000                     	;# 
  1229  0001                     	;# 
  1230  0002                     	;# 
  1231  0003                     	;# 
  1232  0004                     	;# 
  1233  0005                     	;# 
  1234  0006                     	;# 
  1235  0007                     	;# 
  1236  0008                     	;# 
  1237  0009                     	;# 
  1238  000A                     	;# 
  1239  000B                     	;# 
  1240  000C                     	;# 
  1241  000D                     	;# 
  1242  000E                     	;# 
  1243  000F                     	;# 
  1244  0010                     	;# 
  1245  0011                     	;# 
  1246  0012                     	;# 
  1247  0013                     	;# 
  1248  0014                     	;# 
  1249  0015                     	;# 
  1250  0016                     	;# 
  1251  0016                     	;# 
  1252  0017                     	;# 
  1253  0018                     	;# 
  1254  0019                     	;# 
  1255  001A                     	;# 
  1256  001B                     	;# 
  1257  001C                     	;# 
  1258  008C                     	;# 
  1259  008D                     	;# 
  1260  008E                     	;# 
  1261  008F                     	;# 
  1262  0090                     	;# 
  1263  0091                     	;# 
  1264  0092                     	;# 
  1265  0093                     	;# 
  1266  0094                     	;# 
  1267  0095                     	;# 
  1268  0096                     	;# 
  1269  0097                     	;# 
  1270  0099                     	;# 
  1271  009A                     	;# 
  1272  009B                     	;# 
  1273  009B                     	;# 
  1274  009C                     	;# 
  1275  009D                     	;# 
  1276  009E                     	;# 
  1277  010C                     	;# 
  1278  010D                     	;# 
  1279  010E                     	;# 
  1280  010F                     	;# 
  1281  0110                     	;# 
  1282  0116                     	;# 
  1283  0117                     	;# 
  1284  011D                     	;# 
  1285  018C                     	;# 
  1286  018D                     	;# 
  1287  018F                     	;# 
  1288  0190                     	;# 
  1289  0191                     	;# 
  1290  0191                     	;# 
  1291  0192                     	;# 
  1292  0193                     	;# 
  1293  0193                     	;# 
  1294  0194                     	;# 
  1295  0195                     	;# 
  1296  0196                     	;# 
  1297  0197                     	;# 
  1298  0199                     	;# 
  1299  0199                     	;# 
  1300  0199                     	;# 
  1301  019A                     	;# 
  1302  019A                     	;# 
  1303  019A                     	;# 
  1304  019B                     	;# 
  1305  019B                     	;# 
  1306  019B                     	;# 
  1307  019B                     	;# 
  1308  019B                     	;# 
  1309  019C                     	;# 
  1310  019C                     	;# 
  1311  019C                     	;# 
  1312  019D                     	;# 
  1313  019D                     	;# 
  1314  019D                     	;# 
  1315  019E                     	;# 
  1316  019E                     	;# 
  1317  019E                     	;# 
  1318  019F                     	;# 
  1319  019F                     	;# 
  1320  019F                     	;# 
  1321  020D                     	;# 
  1322  020F                     	;# 
  1323  0210                     	;# 
  1324  0211                     	;# 
  1325  0211                     	;# 
  1326  0212                     	;# 
  1327  0212                     	;# 
  1328  0213                     	;# 
  1329  0213                     	;# 
  1330  0214                     	;# 
  1331  0214                     	;# 
  1332  0215                     	;# 
  1333  0215                     	;# 
  1334  0215                     	;# 
  1335  0216                     	;# 
  1336  0216                     	;# 
  1337  0217                     	;# 
  1338  0217                     	;# 
  1339  0219                     	;# 
  1340  021A                     	;# 
  1341  021B                     	;# 
  1342  021C                     	;# 
  1343  021D                     	;# 
  1344  021E                     	;# 
  1345  021F                     	;# 
  1346  028C                     	;# 
  1347  028D                     	;# 
  1348  0291                     	;# 
  1349  0291                     	;# 
  1350  0292                     	;# 
  1351  0293                     	;# 
  1352  0298                     	;# 
  1353  0298                     	;# 
  1354  0299                     	;# 
  1355  029A                     	;# 
  1356  029D                     	;# 
  1357  029E                     	;# 
  1358  029F                     	;# 
  1359  030C                     	;# 
  1360  030D                     	;# 
  1361  0311                     	;# 
  1362  0311                     	;# 
  1363  0312                     	;# 
  1364  0313                     	;# 
  1365  0318                     	;# 
  1366  0318                     	;# 
  1367  0319                     	;# 
  1368  031A                     	;# 
  1369  031C                     	;# 
  1370  031C                     	;# 
  1371  031D                     	;# 
  1372  031E                     	;# 
  1373  038C                     	;# 
  1374  038D                     	;# 
  1375  0394                     	;# 
  1376  0395                     	;# 
  1377  0396                     	;# 
  1378  040C                     	;# 
  1379  040D                     	;# 
  1380  0411                     	;# 
  1381  0411                     	;# 
  1382  0412                     	;# 
  1383  0413                     	;# 
  1384  0414                     	;# 
  1385  0415                     	;# 
  1386  0416                     	;# 
  1387  0417                     	;# 
  1388  0418                     	;# 
  1389  0418                     	;# 
  1390  0419                     	;# 
  1391  041A                     	;# 
  1392  041B                     	;# 
  1393  041C                     	;# 
  1394  041D                     	;# 
  1395  041E                     	;# 
  1396  048D                     	;# 
  1397  0491                     	;# 
  1398  0491                     	;# 
  1399  0492                     	;# 
  1400  0492                     	;# 
  1401  0493                     	;# 
  1402  0493                     	;# 
  1403  0493                     	;# 
  1404  0494                     	;# 
  1405  0494                     	;# 
  1406  0495                     	;# 
  1407  0495                     	;# 
  1408  0496                     	;# 
  1409  0496                     	;# 
  1410  0497                     	;# 
  1411  0497                     	;# 
  1412  0595                     	;# 
  1413  0596                     	;# 
  1414  0597                     	;# 
  1415  059C                     	;# 
  1416  059D                     	;# 
  1417  059E                     	;# 
  1418  0611                     	;# 
  1419  0611                     	;# 
  1420  0612                     	;# 
  1421  0613                     	;# 
  1422  0614                     	;# 
  1423  0614                     	;# 
  1424  0615                     	;# 
  1425  0616                     	;# 
  1426  0617                     	;# 
  1427  0617                     	;# 
  1428  0618                     	;# 
  1429  0619                     	;# 
  1430  061A                     	;# 
  1431  061A                     	;# 
  1432  061B                     	;# 
  1433  061C                     	;# 
  1434  061D                     	;# 
  1435  061D                     	;# 
  1436  061E                     	;# 
  1437  061F                     	;# 
  1438  0FE4                     	;# 
  1439  0FE5                     	;# 
  1440  0FE6                     	;# 
  1441  0FE7                     	;# 
  1442  0FE8                     	;# 
  1443  0FE9                     	;# 
  1444  0FEA                     	;# 
  1445  0FEB                     	;# 
  1446  0FED                     	;# 
  1447  0FEE                     	;# 
  1448  0FEF                     	;# 
  1449  0000                     	;# 
  1450  0001                     	;# 
  1451  0002                     	;# 
  1452  0003                     	;# 
  1453  0004                     	;# 
  1454  0005                     	;# 
  1455  0006                     	;# 
  1456  0007                     	;# 
  1457  0008                     	;# 
  1458  0009                     	;# 
  1459  000A                     	;# 
  1460  000B                     	;# 
  1461  000C                     	;# 
  1462  000D                     	;# 
  1463  000E                     	;# 
  1464  000F                     	;# 
  1465  0010                     	;# 
  1466  0011                     	;# 
  1467  0012                     	;# 
  1468  0013                     	;# 
  1469  0014                     	;# 
  1470  0015                     	;# 
  1471  0016                     	;# 
  1472  0016                     	;# 
  1473  0017                     	;# 
  1474  0018                     	;# 
  1475  0019                     	;# 
  1476  001A                     	;# 
  1477  001B                     	;# 
  1478  001C                     	;# 
  1479  008C                     	;# 
  1480  008D                     	;# 
  1481  008E                     	;# 
  1482  008F                     	;# 
  1483  0090                     	;# 
  1484  0091                     	;# 
  1485  0092                     	;# 
  1486  0093                     	;# 
  1487  0094                     	;# 
  1488  0095                     	;# 
  1489  0096                     	;# 
  1490  0097                     	;# 
  1491  0099                     	;# 
  1492  009A                     	;# 
  1493  009B                     	;# 
  1494  009B                     	;# 
  1495  009C                     	;# 
  1496  009D                     	;# 
  1497  009E                     	;# 
  1498  010C                     	;# 
  1499  010D                     	;# 
  1500  010E                     	;# 
  1501  010F                     	;# 
  1502  0110                     	;# 
  1503  0116                     	;# 
  1504  0117                     	;# 
  1505  011D                     	;# 
  1506  018C                     	;# 
  1507  018D                     	;# 
  1508  018F                     	;# 
  1509  0190                     	;# 
  1510  0191                     	;# 
  1511  0191                     	;# 
  1512  0192                     	;# 
  1513  0193                     	;# 
  1514  0193                     	;# 
  1515  0194                     	;# 
  1516  0195                     	;# 
  1517  0196                     	;# 
  1518  0197                     	;# 
  1519  0199                     	;# 
  1520  0199                     	;# 
  1521  0199                     	;# 
  1522  019A                     	;# 
  1523  019A                     	;# 
  1524  019A                     	;# 
  1525  019B                     	;# 
  1526  019B                     	;# 
  1527  019B                     	;# 
  1528  019B                     	;# 
  1529  019B                     	;# 
  1530  019C                     	;# 
  1531  019C                     	;# 
  1532  019C                     	;# 
  1533  019D                     	;# 
  1534  019D                     	;# 
  1535  019D                     	;# 
  1536  019E                     	;# 
  1537  019E                     	;# 
  1538  019E                     	;# 
  1539  019F                     	;# 
  1540  019F                     	;# 
  1541  019F                     	;# 
  1542  020D                     	;# 
  1543  020F                     	;# 
  1544  0210                     	;# 
  1545  0211                     	;# 
  1546  0211                     	;# 
  1547  0212                     	;# 
  1548  0212                     	;# 
  1549  0213                     	;# 
  1550  0213                     	;# 
  1551  0214                     	;# 
  1552  0214                     	;# 
  1553  0215                     	;# 
  1554  0215                     	;# 
  1555  0215                     	;# 
  1556  0216                     	;# 
  1557  0216                     	;# 
  1558  0217                     	;# 
  1559  0217                     	;# 
  1560  0219                     	;# 
  1561  021A                     	;# 
  1562  021B                     	;# 
  1563  021C                     	;# 
  1564  021D                     	;# 
  1565  021E                     	;# 
  1566  021F                     	;# 
  1567  028C                     	;# 
  1568  028D                     	;# 
  1569  0291                     	;# 
  1570  0291                     	;# 
  1571  0292                     	;# 
  1572  0293                     	;# 
  1573  0298                     	;# 
  1574  0298                     	;# 
  1575  0299                     	;# 
  1576  029A                     	;# 
  1577  029D                     	;# 
  1578  029E                     	;# 
  1579  029F                     	;# 
  1580  030C                     	;# 
  1581  030D                     	;# 
  1582  0311                     	;# 
  1583  0311                     	;# 
  1584  0312                     	;# 
  1585  0313                     	;# 
  1586  0318                     	;# 
  1587  0318                     	;# 
  1588  0319                     	;# 
  1589  031A                     	;# 
  1590  031C                     	;# 
  1591  031C                     	;# 
  1592  031D                     	;# 
  1593  031E                     	;# 
  1594  038C                     	;# 
  1595  038D                     	;# 
  1596  0394                     	;# 
  1597  0395                     	;# 
  1598  0396                     	;# 
  1599  040C                     	;# 
  1600  040D                     	;# 
  1601  0411                     	;# 
  1602  0411                     	;# 
  1603  0412                     	;# 
  1604  0413                     	;# 
  1605  0414                     	;# 
  1606  0415                     	;# 
  1607  0416                     	;# 
  1608  0417                     	;# 
  1609  0418                     	;# 
  1610  0418                     	;# 
  1611  0419                     	;# 
  1612  041A                     	;# 
  1613  041B                     	;# 
  1614  041C                     	;# 
  1615  041D                     	;# 
  1616  041E                     	;# 
  1617  048D                     	;# 
  1618  0491                     	;# 
  1619  0491                     	;# 
  1620  0492                     	;# 
  1621  0492                     	;# 
  1622  0493                     	;# 
  1623  0493                     	;# 
  1624  0493                     	;# 
  1625  0494                     	;# 
  1626  0494                     	;# 
  1627  0495                     	;# 
  1628  0495                     	;# 
  1629  0496                     	;# 
  1630  0496                     	;# 
  1631  0497                     	;# 
  1632  0497                     	;# 
  1633  0595                     	;# 
  1634  0596                     	;# 
  1635  0597                     	;# 
  1636  059C                     	;# 
  1637  059D                     	;# 
  1638  059E                     	;# 
  1639  0611                     	;# 
  1640  0611                     	;# 
  1641  0612                     	;# 
  1642  0613                     	;# 
  1643  0614                     	;# 
  1644  0614                     	;# 
  1645  0615                     	;# 
  1646  0616                     	;# 
  1647  0617                     	;# 
  1648  0617                     	;# 
  1649  0618                     	;# 
  1650  0619                     	;# 
  1651  061A                     	;# 
  1652  061A                     	;# 
  1653  061B                     	;# 
  1654  061C                     	;# 
  1655  061D                     	;# 
  1656  061D                     	;# 
  1657  061E                     	;# 
  1658  061F                     	;# 
  1659  0FE4                     	;# 
  1660  0FE5                     	;# 
  1661  0FE6                     	;# 
  1662  0FE7                     	;# 
  1663  0FE8                     	;# 
  1664  0FE9                     	;# 
  1665  0FEA                     	;# 
  1666  0FEB                     	;# 
  1667  0FED                     	;# 
  1668  0FEE                     	;# 
  1669  0FEF                     	;# 
  1670  0000                     	;# 
  1671  0001                     	;# 
  1672  0002                     	;# 
  1673  0003                     	;# 
  1674  0004                     	;# 
  1675  0005                     	;# 
  1676  0006                     	;# 
  1677  0007                     	;# 
  1678  0008                     	;# 
  1679  0009                     	;# 
  1680  000A                     	;# 
  1681  000B                     	;# 
  1682  000C                     	;# 
  1683  000D                     	;# 
  1684  000E                     	;# 
  1685  000F                     	;# 
  1686  0010                     	;# 
  1687  0011                     	;# 
  1688  0012                     	;# 
  1689  0013                     	;# 
  1690  0014                     	;# 
  1691  0015                     	;# 
  1692  0016                     	;# 
  1693  0016                     	;# 
  1694  0017                     	;# 
  1695  0018                     	;# 
  1696  0019                     	;# 
  1697  001A                     	;# 
  1698  001B                     	;# 
  1699  001C                     	;# 
  1700  008C                     	;# 
  1701  008D                     	;# 
  1702  008E                     	;# 
  1703  008F                     	;# 
  1704  0090                     	;# 
  1705  0091                     	;# 
  1706  0092                     	;# 
  1707  0093                     	;# 
  1708  0094                     	;# 
  1709  0095                     	;# 
  1710  0096                     	;# 
  1711  0097                     	;# 
  1712  0099                     	;# 
  1713  009A                     	;# 
  1714  009B                     	;# 
  1715  009B                     	;# 
  1716  009C                     	;# 
  1717  009D                     	;# 
  1718  009E                     	;# 
  1719  010C                     	;# 
  1720  010D                     	;# 
  1721  010E                     	;# 
  1722  010F                     	;# 
  1723  0110                     	;# 
  1724  0116                     	;# 
  1725  0117                     	;# 
  1726  011D                     	;# 
  1727  018C                     	;# 
  1728  018D                     	;# 
  1729  018F                     	;# 
  1730  0190                     	;# 
  1731  0191                     	;# 
  1732  0191                     	;# 
  1733  0192                     	;# 
  1734  0193                     	;# 
  1735  0193                     	;# 
  1736  0194                     	;# 
  1737  0195                     	;# 
  1738  0196                     	;# 
  1739  0197                     	;# 
  1740  0199                     	;# 
  1741  0199                     	;# 
  1742  0199                     	;# 
  1743  019A                     	;# 
  1744  019A                     	;# 
  1745  019A                     	;# 
  1746  019B                     	;# 
  1747  019B                     	;# 
  1748  019B                     	;# 
  1749  019B                     	;# 
  1750  019B                     	;# 
  1751  019C                     	;# 
  1752  019C                     	;# 
  1753  019C                     	;# 
  1754  019D                     	;# 
  1755  019D                     	;# 
  1756  019D                     	;# 
  1757  019E                     	;# 
  1758  019E                     	;# 
  1759  019E                     	;# 
  1760  019F                     	;# 
  1761  019F                     	;# 
  1762  019F                     	;# 
  1763  020D                     	;# 
  1764  020F                     	;# 
  1765  0210                     	;# 
  1766  0211                     	;# 
  1767  0211                     	;# 
  1768  0212                     	;# 
  1769  0212                     	;# 
  1770  0213                     	;# 
  1771  0213                     	;# 
  1772  0214                     	;# 
  1773  0214                     	;# 
  1774  0215                     	;# 
  1775  0215                     	;# 
  1776  0215                     	;# 
  1777  0216                     	;# 
  1778  0216                     	;# 
  1779  0217                     	;# 
  1780  0217                     	;# 
  1781  0219                     	;# 
  1782  021A                     	;# 
  1783  021B                     	;# 
  1784  021C                     	;# 
  1785  021D                     	;# 
  1786  021E                     	;# 
  1787  021F                     	;# 
  1788  028C                     	;# 
  1789  028D                     	;# 
  1790  0291                     	;# 
  1791  0291                     	;# 
  1792  0292                     	;# 
  1793  0293                     	;# 
  1794  0298                     	;# 
  1795  0298                     	;# 
  1796  0299                     	;# 
  1797  029A                     	;# 
  1798  029D                     	;# 
  1799  029E                     	;# 
  1800  029F                     	;# 
  1801  030C                     	;# 
  1802  030D                     	;# 
  1803  0311                     	;# 
  1804  0311                     	;# 
  1805  0312                     	;# 
  1806  0313                     	;# 
  1807  0318                     	;# 
  1808  0318                     	;# 
  1809  0319                     	;# 
  1810  031A                     	;# 
  1811  031C                     	;# 
  1812  031C                     	;# 
  1813  031D                     	;# 
  1814  031E                     	;# 
  1815  038C                     	;# 
  1816  038D                     	;# 
  1817  0394                     	;# 
  1818  0395                     	;# 
  1819  0396                     	;# 
  1820  040C                     	;# 
  1821  040D                     	;# 
  1822  0411                     	;# 
  1823  0411                     	;# 
  1824  0412                     	;# 
  1825  0413                     	;# 
  1826  0414                     	;# 
  1827  0415                     	;# 
  1828  0416                     	;# 
  1829  0417                     	;# 
  1830  0418                     	;# 
  1831  0418                     	;# 
  1832  0419                     	;# 
  1833  041A                     	;# 
  1834  041B                     	;# 
  1835  041C                     	;# 
  1836  041D                     	;# 
  1837  041E                     	;# 
  1838  048D                     	;# 
  1839  0491                     	;# 
  1840  0491                     	;# 
  1841  0492                     	;# 
  1842  0492                     	;# 
  1843  0493                     	;# 
  1844  0493                     	;# 
  1845  0493                     	;# 
  1846  0494                     	;# 
  1847  0494                     	;# 
  1848  0495                     	;# 
  1849  0495                     	;# 
  1850  0496                     	;# 
  1851  0496                     	;# 
  1852  0497                     	;# 
  1853  0497                     	;# 
  1854  0595                     	;# 
  1855  0596                     	;# 
  1856  0597                     	;# 
  1857  059C                     	;# 
  1858  059D                     	;# 
  1859  059E                     	;# 
  1860  0611                     	;# 
  1861  0611                     	;# 
  1862  0612                     	;# 
  1863  0613                     	;# 
  1864  0614                     	;# 
  1865  0614                     	;# 
  1866  0615                     	;# 
  1867  0616                     	;# 
  1868  0617                     	;# 
  1869  0617                     	;# 
  1870  0618                     	;# 
  1871  0619                     	;# 
  1872  061A                     	;# 
  1873  061A                     	;# 
  1874  061B                     	;# 
  1875  061C                     	;# 
  1876  061D                     	;# 
  1877  061D                     	;# 
  1878  061E                     	;# 
  1879  061F                     	;# 
  1880  0FE4                     	;# 
  1881  0FE5                     	;# 
  1882  0FE6                     	;# 
  1883  0FE7                     	;# 
  1884  0FE8                     	;# 
  1885  0FE9                     	;# 
  1886  0FEA                     	;# 
  1887  0FEB                     	;# 
  1888  0FED                     	;# 
  1889  0FEE                     	;# 
  1890  0FEF                     	;# 
  1891  0000                     	;# 
  1892  0001                     	;# 
  1893  0002                     	;# 
  1894  0003                     	;# 
  1895  0004                     	;# 
  1896  0005                     	;# 
  1897  0006                     	;# 
  1898  0007                     	;# 
  1899  0008                     	;# 
  1900  0009                     	;# 
  1901  000A                     	;# 
  1902  000B                     	;# 
  1903  000C                     	;# 
  1904  000D                     	;# 
  1905  000E                     	;# 
  1906  000F                     	;# 
  1907  0010                     	;# 
  1908  0011                     	;# 
  1909  0012                     	;# 
  1910  0013                     	;# 
  1911  0014                     	;# 
  1912  0015                     	;# 
  1913  0016                     	;# 
  1914  0016                     	;# 
  1915  0017                     	;# 
  1916  0018                     	;# 
  1917  0019                     	;# 
  1918  001A                     	;# 
  1919  001B                     	;# 
  1920  001C                     	;# 
  1921  008C                     	;# 
  1922  008D                     	;# 
  1923  008E                     	;# 
  1924  008F                     	;# 
  1925  0090                     	;# 
  1926  0091                     	;# 
  1927  0092                     	;# 
  1928  0093                     	;# 
  1929  0094                     	;# 
  1930  0095                     	;# 
  1931  0096                     	;# 
  1932  0097                     	;# 
  1933  0099                     	;# 
  1934  009A                     	;# 
  1935  009B                     	;# 
  1936  009B                     	;# 
  1937  009C                     	;# 
  1938  009D                     	;# 
  1939  009E                     	;# 
  1940  010C                     	;# 
  1941  010D                     	;# 
  1942  010E                     	;# 
  1943  010F                     	;# 
  1944  0110                     	;# 
  1945  0116                     	;# 
  1946  0117                     	;# 
  1947  011D                     	;# 
  1948  018C                     	;# 
  1949  018D                     	;# 
  1950  018F                     	;# 
  1951  0190                     	;# 
  1952  0191                     	;# 
  1953  0191                     	;# 
  1954  0192                     	;# 
  1955  0193                     	;# 
  1956  0193                     	;# 
  1957  0194                     	;# 
  1958  0195                     	;# 
  1959  0196                     	;# 
  1960  0197                     	;# 
  1961  0199                     	;# 
  1962  0199                     	;# 
  1963  0199                     	;# 
  1964  019A                     	;# 
  1965  019A                     	;# 
  1966  019A                     	;# 
  1967  019B                     	;# 
  1968  019B                     	;# 
  1969  019B                     	;# 
  1970  019B                     	;# 
  1971  019B                     	;# 
  1972  019C                     	;# 
  1973  019C                     	;# 
  1974  019C                     	;# 
  1975  019D                     	;# 
  1976  019D                     	;# 
  1977  019D                     	;# 
  1978  019E                     	;# 
  1979  019E                     	;# 
  1980  019E                     	;# 
  1981  019F                     	;# 
  1982  019F                     	;# 
  1983  019F                     	;# 
  1984  020D                     	;# 
  1985  020F                     	;# 
  1986  0210                     	;# 
  1987  0211                     	;# 
  1988  0211                     	;# 
  1989  0212                     	;# 
  1990  0212                     	;# 
  1991  0213                     	;# 
  1992  0213                     	;# 
  1993  0214                     	;# 
  1994  0214                     	;# 
  1995  0215                     	;# 
  1996  0215                     	;# 
  1997  0215                     	;# 
  1998  0216                     	;# 
  1999  0216                     	;# 
  2000  0217                     	;# 
  2001  0217                     	;# 
  2002  0219                     	;# 
  2003  021A                     	;# 
  2004  021B                     	;# 
  2005  021C                     	;# 
  2006  021D                     	;# 
  2007  021E                     	;# 
  2008  021F                     	;# 
  2009  028C                     	;# 
  2010  028D                     	;# 
  2011  0291                     	;# 
  2012  0291                     	;# 
  2013  0292                     	;# 
  2014  0293                     	;# 
  2015  0298                     	;# 
  2016  0298                     	;# 
  2017  0299                     	;# 
  2018  029A                     	;# 
  2019  029D                     	;# 
  2020  029E                     	;# 
  2021  029F                     	;# 
  2022  030C                     	;# 
  2023  030D                     	;# 
  2024  0311                     	;# 
  2025  0311                     	;# 
  2026  0312                     	;# 
  2027  0313                     	;# 
  2028  0318                     	;# 
  2029  0318                     	;# 
  2030  0319                     	;# 
  2031  031A                     	;# 
  2032  031C                     	;# 
  2033  031C                     	;# 
  2034  031D                     	;# 
  2035  031E                     	;# 
  2036  038C                     	;# 
  2037  038D                     	;# 
  2038  0394                     	;# 
  2039  0395                     	;# 
  2040  0396                     	;# 
  2041  040C                     	;# 
  2042  040D                     	;# 
  2043  0411                     	;# 
  2044  0411                     	;# 
  2045  0412                     	;# 
  2046  0413                     	;# 
  2047  0414                     	;# 
  2048  0415                     	;# 
  2049  0416                     	;# 
  2050  0417                     	;# 
  2051  0418                     	;# 
  2052  0418                     	;# 
  2053  0419                     	;# 
  2054  041A                     	;# 
  2055  041B                     	;# 
  2056  041C                     	;# 
  2057  041D                     	;# 
  2058  041E                     	;# 
  2059  048D                     	;# 
  2060  0491                     	;# 
  2061  0491                     	;# 
  2062  0492                     	;# 
  2063  0492                     	;# 
  2064  0493                     	;# 
  2065  0493                     	;# 
  2066  0493                     	;# 
  2067  0494                     	;# 
  2068  0494                     	;# 
  2069  0495                     	;# 
  2070  0495                     	;# 
  2071  0496                     	;# 
  2072  0496                     	;# 
  2073  0497                     	;# 
  2074  0497                     	;# 
  2075  0595                     	;# 
  2076  0596                     	;# 
  2077  0597                     	;# 
  2078  059C                     	;# 
  2079  059D                     	;# 
  2080  059E                     	;# 
  2081  0611                     	;# 
  2082  0611                     	;# 
  2083  0612                     	;# 
  2084  0613                     	;# 
  2085  0614                     	;# 
  2086  0614                     	;# 
  2087  0615                     	;# 
  2088  0616                     	;# 
  2089  0617                     	;# 
  2090  0617                     	;# 
  2091  0618                     	;# 
  2092  0619                     	;# 
  2093  061A                     	;# 
  2094  061A                     	;# 
  2095  061B                     	;# 
  2096  061C                     	;# 
  2097  061D                     	;# 
  2098  061D                     	;# 
  2099  061E                     	;# 
  2100  061F                     	;# 
  2101  0FE4                     	;# 
  2102  0FE5                     	;# 
  2103  0FE6                     	;# 
  2104  0FE7                     	;# 
  2105  0FE8                     	;# 
  2106  0FE9                     	;# 
  2107  0FEA                     	;# 
  2108  0FEB                     	;# 
  2109  0FED                     	;# 
  2110  0FEE                     	;# 
  2111  0FEF                     	;# 
  2112  0000                     	;# 
  2113  0001                     	;# 
  2114  0002                     	;# 
  2115  0003                     	;# 
  2116  0004                     	;# 
  2117  0005                     	;# 
  2118  0006                     	;# 
  2119  0007                     	;# 
  2120  0008                     	;# 
  2121  0009                     	;# 
  2122  000A                     	;# 
  2123  000B                     	;# 
  2124  000C                     	;# 
  2125  000D                     	;# 
  2126  000E                     	;# 
  2127  000F                     	;# 
  2128  0010                     	;# 
  2129  0011                     	;# 
  2130  0012                     	;# 
  2131  0013                     	;# 
  2132  0014                     	;# 
  2133  0015                     	;# 
  2134  0016                     	;# 
  2135  0016                     	;# 
  2136  0017                     	;# 
  2137  0018                     	;# 
  2138  0019                     	;# 
  2139  001A                     	;# 
  2140  001B                     	;# 
  2141  001C                     	;# 
  2142  008C                     	;# 
  2143  008D                     	;# 
  2144  008E                     	;# 
  2145  008F                     	;# 
  2146  0090                     	;# 
  2147  0091                     	;# 
  2148  0092                     	;# 
  2149  0093                     	;# 
  2150  0094                     	;# 
  2151  0095                     	;# 
  2152  0096                     	;# 
  2153  0097                     	;# 
  2154  0099                     	;# 
  2155  009A                     	;# 
  2156  009B                     	;# 
  2157  009B                     	;# 
  2158  009C                     	;# 
  2159  009D                     	;# 
  2160  009E                     	;# 
  2161  010C                     	;# 
  2162  010D                     	;# 
  2163  010E                     	;# 
  2164  010F                     	;# 
  2165  0110                     	;# 
  2166  0116                     	;# 
  2167  0117                     	;# 
  2168  011D                     	;# 
  2169  018C                     	;# 
  2170  018D                     	;# 
  2171  018F                     	;# 
  2172  0190                     	;# 
  2173  0191                     	;# 
  2174  0191                     	;# 
  2175  0192                     	;# 
  2176  0193                     	;# 
  2177  0193                     	;# 
  2178  0194                     	;# 
  2179  0195                     	;# 
  2180  0196                     	;# 
  2181  0197                     	;# 
  2182  0199                     	;# 
  2183  0199                     	;# 
  2184  0199                     	;# 
  2185  019A                     	;# 
  2186  019A                     	;# 
  2187  019A                     	;# 
  2188  019B                     	;# 
  2189  019B                     	;# 
  2190  019B                     	;# 
  2191  019B                     	;# 
  2192  019B                     	;# 
  2193  019C                     	;# 
  2194  019C                     	;# 
  2195  019C                     	;# 
  2196  019D                     	;# 
  2197  019D                     	;# 
  2198  019D                     	;# 
  2199  019E                     	;# 
  2200  019E                     	;# 
  2201  019E                     	;# 
  2202  019F                     	;# 
  2203  019F                     	;# 
  2204  019F                     	;# 
  2205  020D                     	;# 
  2206  020F                     	;# 
  2207  0210                     	;# 
  2208  0211                     	;# 
  2209  0211                     	;# 
  2210  0212                     	;# 
  2211  0212                     	;# 
  2212  0213                     	;# 
  2213  0213                     	;# 
  2214  0214                     	;# 
  2215  0214                     	;# 
  2216  0215                     	;# 
  2217  0215                     	;# 
  2218  0215                     	;# 
  2219  0216                     	;# 
  2220  0216                     	;# 
  2221  0217                     	;# 
  2222  0217                     	;# 
  2223  0219                     	;# 
  2224  021A                     	;# 
  2225  021B                     	;# 
  2226  021C                     	;# 
  2227  021D                     	;# 
  2228  021E                     	;# 
  2229  021F                     	;# 
  2230  028C                     	;# 
  2231  028D                     	;# 
  2232  0291                     	;# 
  2233  0291                     	;# 
  2234  0292                     	;# 
  2235  0293                     	;# 
  2236  0298                     	;# 
  2237  0298                     	;# 
  2238  0299                     	;# 
  2239  029A                     	;# 
  2240  029D                     	;# 
  2241  029E                     	;# 
  2242  029F                     	;# 
  2243  030C                     	;# 
  2244  030D                     	;# 
  2245  0311                     	;# 
  2246  0311                     	;# 
  2247  0312                     	;# 
  2248  0313                     	;# 
  2249  0318                     	;# 
  2250  0318                     	;# 
  2251  0319                     	;# 
  2252  031A                     	;# 
  2253  031C                     	;# 
  2254  031C                     	;# 
  2255  031D                     	;# 
  2256  031E                     	;# 
  2257  038C                     	;# 
  2258  038D                     	;# 
  2259  0394                     	;# 
  2260  0395                     	;# 
  2261  0396                     	;# 
  2262  040C                     	;# 
  2263  040D                     	;# 
  2264  0411                     	;# 
  2265  0411                     	;# 
  2266  0412                     	;# 
  2267  0413                     	;# 
  2268  0414                     	;# 
  2269  0415                     	;# 
  2270  0416                     	;# 
  2271  0417                     	;# 
  2272  0418                     	;# 
  2273  0418                     	;# 
  2274  0419                     	;# 
  2275  041A                     	;# 
  2276  041B                     	;# 
  2277  041C                     	;# 
  2278  041D                     	;# 
  2279  041E                     	;# 
  2280  048D                     	;# 
  2281  0491                     	;# 
  2282  0491                     	;# 
  2283  0492                     	;# 
  2284  0492                     	;# 
  2285  0493                     	;# 
  2286  0493                     	;# 
  2287  0493                     	;# 
  2288  0494                     	;# 
  2289  0494                     	;# 
  2290  0495                     	;# 
  2291  0495                     	;# 
  2292  0496                     	;# 
  2293  0496                     	;# 
  2294  0497                     	;# 
  2295  0497                     	;# 
  2296  0595                     	;# 
  2297  0596                     	;# 
  2298  0597                     	;# 
  2299  059C                     	;# 
  2300  059D                     	;# 
  2301  059E                     	;# 
  2302  0611                     	;# 
  2303  0611                     	;# 
  2304  0612                     	;# 
  2305  0613                     	;# 
  2306  0614                     	;# 
  2307  0614                     	;# 
  2308  0615                     	;# 
  2309  0616                     	;# 
  2310  0617                     	;# 
  2311  0617                     	;# 
  2312  0618                     	;# 
  2313  0619                     	;# 
  2314  061A                     	;# 
  2315  061A                     	;# 
  2316  061B                     	;# 
  2317  061C                     	;# 
  2318  061D                     	;# 
  2319  061D                     	;# 
  2320  061E                     	;# 
  2321  061F                     	;# 
  2322  0FE4                     	;# 
  2323  0FE5                     	;# 
  2324  0FE6                     	;# 
  2325  0FE7                     	;# 
  2326  0FE8                     	;# 
  2327  0FE9                     	;# 
  2328  0FEA                     	;# 
  2329  0FEB                     	;# 
  2330  0FED                     	;# 
  2331  0FEE                     	;# 
  2332  0FEF                     	;# 
  2333  0000                     	;# 
  2334  0001                     	;# 
  2335  0002                     	;# 
  2336  0003                     	;# 
  2337  0004                     	;# 
  2338  0005                     	;# 
  2339  0006                     	;# 
  2340  0007                     	;# 
  2341  0008                     	;# 
  2342  0009                     	;# 
  2343  000A                     	;# 
  2344  000B                     	;# 
  2345  000C                     	;# 
  2346  000D                     	;# 
  2347  000E                     	;# 
  2348  000F                     	;# 
  2349  0010                     	;# 
  2350  0011                     	;# 
  2351  0012                     	;# 
  2352  0013                     	;# 
  2353  0014                     	;# 
  2354  0015                     	;# 
  2355  0016                     	;# 
  2356  0016                     	;# 
  2357  0017                     	;# 
  2358  0018                     	;# 
  2359  0019                     	;# 
  2360  001A                     	;# 
  2361  001B                     	;# 
  2362  001C                     	;# 
  2363  008C                     	;# 
  2364  008D                     	;# 
  2365  008E                     	;# 
  2366  008F                     	;# 
  2367  0090                     	;# 
  2368  0091                     	;# 
  2369  0092                     	;# 
  2370  0093                     	;# 
  2371  0094                     	;# 
  2372  0095                     	;# 
  2373  0096                     	;# 
  2374  0097                     	;# 
  2375  0099                     	;# 
  2376  009A                     	;# 
  2377  009B                     	;# 
  2378  009B                     	;# 
  2379  009C                     	;# 
  2380  009D                     	;# 
  2381  009E                     	;# 
  2382  010C                     	;# 
  2383  010D                     	;# 
  2384  010E                     	;# 
  2385  010F                     	;# 
  2386  0110                     	;# 
  2387  0116                     	;# 
  2388  0117                     	;# 
  2389  011D                     	;# 
  2390  018C                     	;# 
  2391  018D                     	;# 
  2392  018F                     	;# 
  2393  0190                     	;# 
  2394  0191                     	;# 
  2395  0191                     	;# 
  2396  0192                     	;# 
  2397  0193                     	;# 
  2398  0193                     	;# 
  2399  0194                     	;# 
  2400  0195                     	;# 
  2401  0196                     	;# 
  2402  0197                     	;# 
  2403  0199                     	;# 
  2404  0199                     	;# 
  2405  0199                     	;# 
  2406  019A                     	;# 
  2407  019A                     	;# 
  2408  019A                     	;# 
  2409  019B                     	;# 
  2410  019B                     	;# 
  2411  019B                     	;# 
  2412  019B                     	;# 
  2413  019B                     	;# 
  2414  019C                     	;# 
  2415  019C                     	;# 
  2416  019C                     	;# 
  2417  019D                     	;# 
  2418  019D                     	;# 
  2419  019D                     	;# 
  2420  019E                     	;# 
  2421  019E                     	;# 
  2422  019E                     	;# 
  2423  019F                     	;# 
  2424  019F                     	;# 
  2425  019F                     	;# 
  2426  020D                     	;# 
  2427  020F                     	;# 
  2428  0210                     	;# 
  2429  0211                     	;# 
  2430  0211                     	;# 
  2431  0212                     	;# 
  2432  0212                     	;# 
  2433  0213                     	;# 
  2434  0213                     	;# 
  2435  0214                     	;# 
  2436  0214                     	;# 
  2437  0215                     	;# 
  2438  0215                     	;# 
  2439  0215                     	;# 
  2440  0216                     	;# 
  2441  0216                     	;# 
  2442  0217                     	;# 
  2443  0217                     	;# 
  2444  0219                     	;# 
  2445  021A                     	;# 
  2446  021B                     	;# 
  2447  021C                     	;# 
  2448  021D                     	;# 
  2449  021E                     	;# 
  2450  021F                     	;# 
  2451  028C                     	;# 
  2452  028D                     	;# 
  2453  0291                     	;# 
  2454  0291                     	;# 
  2455  0292                     	;# 
  2456  0293                     	;# 
  2457  0298                     	;# 
  2458  0298                     	;# 
  2459  0299                     	;# 
  2460  029A                     	;# 
  2461  029D                     	;# 
  2462  029E                     	;# 
  2463  029F                     	;# 
  2464  030C                     	;# 
  2465  030D                     	;# 
  2466  0311                     	;# 
  2467  0311                     	;# 
  2468  0312                     	;# 
  2469  0313                     	;# 
  2470  0318                     	;# 
  2471  0318                     	;# 
  2472  0319                     	;# 
  2473  031A                     	;# 
  2474  031C                     	;# 
  2475  031C                     	;# 
  2476  031D                     	;# 
  2477  031E                     	;# 
  2478  038C                     	;# 
  2479  038D                     	;# 
  2480  0394                     	;# 
  2481  0395                     	;# 
  2482  0396                     	;# 
  2483  040C                     	;# 
  2484  040D                     	;# 
  2485  0411                     	;# 
  2486  0411                     	;# 
  2487  0412                     	;# 
  2488  0413                     	;# 
  2489  0414                     	;# 
  2490  0415                     	;# 
  2491  0416                     	;# 
  2492  0417                     	;# 
  2493  0418                     	;# 
  2494  0418                     	;# 
  2495  0419                     	;# 
  2496  041A                     	;# 
  2497  041B                     	;# 
  2498  041C                     	;# 
  2499  041D                     	;# 
  2500  041E                     	;# 
  2501  048D                     	;# 
  2502  0491                     	;# 
  2503  0491                     	;# 
  2504  0492                     	;# 
  2505  0492                     	;# 
  2506  0493                     	;# 
  2507  0493                     	;# 
  2508  0493                     	;# 
  2509  0494                     	;# 
  2510  0494                     	;# 
  2511  0495                     	;# 
  2512  0495                     	;# 
  2513  0496                     	;# 
  2514  0496                     	;# 
  2515  0497                     	;# 
  2516  0497                     	;# 
  2517  0595                     	;# 
  2518  0596                     	;# 
  2519  0597                     	;# 
  2520  059C                     	;# 
  2521  059D                     	;# 
  2522  059E                     	;# 
  2523  0611                     	;# 
  2524  0611                     	;# 
  2525  0612                     	;# 
  2526  0613                     	;# 
  2527  0614                     	;# 
  2528  0614                     	;# 
  2529  0615                     	;# 
  2530  0616                     	;# 
  2531  0617                     	;# 
  2532  0617                     	;# 
  2533  0618                     	;# 
  2534  0619                     	;# 
  2535  061A                     	;# 
  2536  061A                     	;# 
  2537  061B                     	;# 
  2538  061C                     	;# 
  2539  061D                     	;# 
  2540  061D                     	;# 
  2541  061E                     	;# 
  2542  061F                     	;# 
  2543  0FE4                     	;# 
  2544  0FE5                     	;# 
  2545  0FE6                     	;# 
  2546  0FE7                     	;# 
  2547  0FE8                     	;# 
  2548  0FE9                     	;# 
  2549  0FEA                     	;# 
  2550  0FEB                     	;# 
  2551  0FED                     	;# 
  2552  0FEE                     	;# 
  2553  0FEF                     	;# 
  2554  0000                     	;# 
  2555  0001                     	;# 
  2556  0002                     	;# 
  2557  0003                     	;# 
  2558  0004                     	;# 
  2559  0005                     	;# 
  2560  0006                     	;# 
  2561  0007                     	;# 
  2562  0008                     	;# 
  2563  0009                     	;# 
  2564  000A                     	;# 
  2565  000B                     	;# 
  2566  000C                     	;# 
  2567  000D                     	;# 
  2568  000E                     	;# 
  2569  000F                     	;# 
  2570  0010                     	;# 
  2571  0011                     	;# 
  2572  0012                     	;# 
  2573  0013                     	;# 
  2574  0014                     	;# 
  2575  0015                     	;# 
  2576  0016                     	;# 
  2577  0016                     	;# 
  2578  0017                     	;# 
  2579  0018                     	;# 
  2580  0019                     	;# 
  2581  001A                     	;# 
  2582  001B                     	;# 
  2583  001C                     	;# 
  2584  008C                     	;# 
  2585  008D                     	;# 
  2586  008E                     	;# 
  2587  008F                     	;# 
  2588  0090                     	;# 
  2589  0091                     	;# 
  2590  0092                     	;# 
  2591  0093                     	;# 
  2592  0094                     	;# 
  2593  0095                     	;# 
  2594  0096                     	;# 
  2595  0097                     	;# 
  2596  0099                     	;# 
  2597  009A                     	;# 
  2598  009B                     	;# 
  2599  009B                     	;# 
  2600  009C                     	;# 
  2601  009D                     	;# 
  2602  009E                     	;# 
  2603  010C                     	;# 
  2604  010D                     	;# 
  2605  010E                     	;# 
  2606  010F                     	;# 
  2607  0110                     	;# 
  2608  0116                     	;# 
  2609  0117                     	;# 
  2610  011D                     	;# 
  2611  018C                     	;# 
  2612  018D                     	;# 
  2613  018F                     	;# 
  2614  0190                     	;# 
  2615  0191                     	;# 
  2616  0191                     	;# 
  2617  0192                     	;# 
  2618  0193                     	;# 
  2619  0193                     	;# 
  2620  0194                     	;# 
  2621  0195                     	;# 
  2622  0196                     	;# 
  2623  0197                     	;# 
  2624  0199                     	;# 
  2625  0199                     	;# 
  2626  0199                     	;# 
  2627  019A                     	;# 
  2628  019A                     	;# 
  2629  019A                     	;# 
  2630  019B                     	;# 
  2631  019B                     	;# 
  2632  019B                     	;# 
  2633  019B                     	;# 
  2634  019B                     	;# 
  2635  019C                     	;# 
  2636  019C                     	;# 
  2637  019C                     	;# 
  2638  019D                     	;# 
  2639  019D                     	;# 
  2640  019D                     	;# 
  2641  019E                     	;# 
  2642  019E                     	;# 
  2643  019E                     	;# 
  2644  019F                     	;# 
  2645  019F                     	;# 
  2646  019F                     	;# 
  2647  020D                     	;# 
  2648  020F                     	;# 
  2649  0210                     	;# 
  2650  0211                     	;# 
  2651  0211                     	;# 
  2652  0212                     	;# 
  2653  0212                     	;# 
  2654  0213                     	;# 
  2655  0213                     	;# 
  2656  0214                     	;# 
  2657  0214                     	;# 
  2658  0215                     	;# 
  2659  0215                     	;# 
  2660  0215                     	;# 
  2661  0216                     	;# 
  2662  0216                     	;# 
  2663  0217                     	;# 
  2664  0217                     	;# 
  2665  0219                     	;# 
  2666  021A                     	;# 
  2667  021B                     	;# 
  2668  021C                     	;# 
  2669  021D                     	;# 
  2670  021E                     	;# 
  2671  021F                     	;# 
  2672  028C                     	;# 
  2673  028D                     	;# 
  2674  0291                     	;# 
  2675  0291                     	;# 
  2676  0292                     	;# 
  2677  0293                     	;# 
  2678  0298                     	;# 
  2679  0298                     	;# 
  2680  0299                     	;# 
  2681  029A                     	;# 
  2682  029D                     	;# 
  2683  029E                     	;# 
  2684  029F                     	;# 
  2685  030C                     	;# 
  2686  030D                     	;# 
  2687  0311                     	;# 
  2688  0311                     	;# 
  2689  0312                     	;# 
  2690  0313                     	;# 
  2691  0318                     	;# 
  2692  0318                     	;# 
  2693  0319                     	;# 
  2694  031A                     	;# 
  2695  031C                     	;# 
  2696  031C                     	;# 
  2697  031D                     	;# 
  2698  031E                     	;# 
  2699  038C                     	;# 
  2700  038D                     	;# 
  2701  0394                     	;# 
  2702  0395                     	;# 
  2703  0396                     	;# 
  2704  040C                     	;# 
  2705  040D                     	;# 
  2706  0411                     	;# 
  2707  0411                     	;# 
  2708  0412                     	;# 
  2709  0413                     	;# 
  2710  0414                     	;# 
  2711  0415                     	;# 
  2712  0416                     	;# 
  2713  0417                     	;# 
  2714  0418                     	;# 
  2715  0418                     	;# 
  2716  0419                     	;# 
  2717  041A                     	;# 
  2718  041B                     	;# 
  2719  041C                     	;# 
  2720  041D                     	;# 
  2721  041E                     	;# 
  2722  048D                     	;# 
  2723  0491                     	;# 
  2724  0491                     	;# 
  2725  0492                     	;# 
  2726  0492                     	;# 
  2727  0493                     	;# 
  2728  0493                     	;# 
  2729  0493                     	;# 
  2730  0494                     	;# 
  2731  0494                     	;# 
  2732  0495                     	;# 
  2733  0495                     	;# 
  2734  0496                     	;# 
  2735  0496                     	;# 
  2736  0497                     	;# 
  2737  0497                     	;# 
  2738  0595                     	;# 
  2739  0596                     	;# 
  2740  0597                     	;# 
  2741  059C                     	;# 
  2742  059D                     	;# 
  2743  059E                     	;# 
  2744  0611                     	;# 
  2745  0611                     	;# 
  2746  0612                     	;# 
  2747  0613                     	;# 
  2748  0614                     	;# 
  2749  0614                     	;# 
  2750  0615                     	;# 
  2751  0616                     	;# 
  2752  0617                     	;# 
  2753  0617                     	;# 
  2754  0618                     	;# 
  2755  0619                     	;# 
  2756  061A                     	;# 
  2757  061A                     	;# 
  2758  061B                     	;# 
  2759  061C                     	;# 
  2760  061D                     	;# 
  2761  061D                     	;# 
  2762  061E                     	;# 
  2763  061F                     	;# 
  2764  0FE4                     	;# 
  2765  0FE5                     	;# 
  2766  0FE6                     	;# 
  2767  0FE7                     	;# 
  2768  0FE8                     	;# 
  2769  0FE9                     	;# 
  2770  0FEA                     	;# 
  2771  0FEB                     	;# 
  2772  0FED                     	;# 
  2773  0FEE                     	;# 
  2774  0FEF                     	;# 
  2775  0000                     	;# 
  2776  0001                     	;# 
  2777  0002                     	;# 
  2778  0003                     	;# 
  2779  0004                     	;# 
  2780  0005                     	;# 
  2781  0006                     	;# 
  2782  0007                     	;# 
  2783  0008                     	;# 
  2784  0009                     	;# 
  2785  000A                     	;# 
  2786  000B                     	;# 
  2787  000C                     	;# 
  2788  000D                     	;# 
  2789  000E                     	;# 
  2790  000F                     	;# 
  2791  0010                     	;# 
  2792  0011                     	;# 
  2793  0012                     	;# 
  2794  0013                     	;# 
  2795  0014                     	;# 
  2796  0015                     	;# 
  2797  0016                     	;# 
  2798  0016                     	;# 
  2799  0017                     	;# 
  2800  0018                     	;# 
  2801  0019                     	;# 
  2802  001A                     	;# 
  2803  001B                     	;# 
  2804  001C                     	;# 
  2805  008C                     	;# 
  2806  008D                     	;# 
  2807  008E                     	;# 
  2808  008F                     	;# 
  2809  0090                     	;# 
  2810  0091                     	;# 
  2811  0092                     	;# 
  2812  0093                     	;# 
  2813  0094                     	;# 
  2814  0095                     	;# 
  2815  0096                     	;# 
  2816  0097                     	;# 
  2817  0099                     	;# 
  2818  009A                     	;# 
  2819  009B                     	;# 
  2820  009B                     	;# 
  2821  009C                     	;# 
  2822  009D                     	;# 
  2823  009E                     	;# 
  2824  010C                     	;# 
  2825  010D                     	;# 
  2826  010E                     	;# 
  2827  010F                     	;# 
  2828  0110                     	;# 
  2829  0116                     	;# 
  2830  0117                     	;# 
  2831  011D                     	;# 
  2832  018C                     	;# 
  2833  018D                     	;# 
  2834  018F                     	;# 
  2835  0190                     	;# 
  2836  0191                     	;# 
  2837  0191                     	;# 
  2838  0192                     	;# 
  2839  0193                     	;# 
  2840  0193                     	;# 
  2841  0194                     	;# 
  2842  0195                     	;# 
  2843  0196                     	;# 
  2844  0197                     	;# 
  2845  0199                     	;# 
  2846  0199                     	;# 
  2847  0199                     	;# 
  2848  019A                     	;# 
  2849  019A                     	;# 
  2850  019A                     	;# 
  2851  019B                     	;# 
  2852  019B                     	;# 
  2853  019B                     	;# 
  2854  019B                     	;# 
  2855  019B                     	;# 
  2856  019C                     	;# 
  2857  019C                     	;# 
  2858  019C                     	;# 
  2859  019D                     	;# 
  2860  019D                     	;# 
  2861  019D                     	;# 
  2862  019E                     	;# 
  2863  019E                     	;# 
  2864  019E                     	;# 
  2865  019F                     	;# 
  2866  019F                     	;# 
  2867  019F                     	;# 
  2868  020D                     	;# 
  2869  020F                     	;# 
  2870  0210                     	;# 
  2871  0211                     	;# 
  2872  0211                     	;# 
  2873  0212                     	;# 
  2874  0212                     	;# 
  2875  0213                     	;# 
  2876  0213                     	;# 
  2877  0214                     	;# 
  2878  0214                     	;# 
  2879  0215                     	;# 
  2880  0215                     	;# 
  2881  0215                     	;# 
  2882  0216                     	;# 
  2883  0216                     	;# 
  2884  0217                     	;# 
  2885  0217                     	;# 
  2886  0219                     	;# 
  2887  021A                     	;# 
  2888  021B                     	;# 
  2889  021C                     	;# 
  2890  021D                     	;# 
  2891  021E                     	;# 
  2892  021F                     	;# 
  2893  028C                     	;# 
  2894  028D                     	;# 
  2895  0291                     	;# 
  2896  0291                     	;# 
  2897  0292                     	;# 
  2898  0293                     	;# 
  2899  0298                     	;# 
  2900  0298                     	;# 
  2901  0299                     	;# 
  2902  029A                     	;# 
  2903  029D                     	;# 
  2904  029E                     	;# 
  2905  029F                     	;# 
  2906  030C                     	;# 
  2907  030D                     	;# 
  2908  0311                     	;# 
  2909  0311                     	;# 
  2910  0312                     	;# 
  2911  0313                     	;# 
  2912  0318                     	;# 
  2913  0318                     	;# 
  2914  0319                     	;# 
  2915  031A                     	;# 
  2916  031C                     	;# 
  2917  031C                     	;# 
  2918  031D                     	;# 
  2919  031E                     	;# 
  2920  038C                     	;# 
  2921  038D                     	;# 
  2922  0394                     	;# 
  2923  0395                     	;# 
  2924  0396                     	;# 
  2925  040C                     	;# 
  2926  040D                     	;# 
  2927  0411                     	;# 
  2928  0411                     	;# 
  2929  0412                     	;# 
  2930  0413                     	;# 
  2931  0414                     	;# 
  2932  0415                     	;# 
  2933  0416                     	;# 
  2934  0417                     	;# 
  2935  0418                     	;# 
  2936  0418                     	;# 
  2937  0419                     	;# 
  2938  041A                     	;# 
  2939  041B                     	;# 
  2940  041C                     	;# 
  2941  041D                     	;# 
  2942  041E                     	;# 
  2943  048D                     	;# 
  2944  0491                     	;# 
  2945  0491                     	;# 
  2946  0492                     	;# 
  2947  0492                     	;# 
  2948  0493                     	;# 
  2949  0493                     	;# 
  2950  0493                     	;# 
  2951  0494                     	;# 
  2952  0494                     	;# 
  2953  0495                     	;# 
  2954  0495                     	;# 
  2955  0496                     	;# 
  2956  0496                     	;# 
  2957  0497                     	;# 
  2958  0497                     	;# 
  2959  0595                     	;# 
  2960  0596                     	;# 
  2961  0597                     	;# 
  2962  059C                     	;# 
  2963  059D                     	;# 
  2964  059E                     	;# 
  2965  0611                     	;# 
  2966  0611                     	;# 
  2967  0612                     	;# 
  2968  0613                     	;# 
  2969  0614                     	;# 
  2970  0614                     	;# 
  2971  0615                     	;# 
  2972  0616                     	;# 
  2973  0617                     	;# 
  2974  0617                     	;# 
  2975  0618                     	;# 
  2976  0619                     	;# 
  2977  061A                     	;# 
  2978  061A                     	;# 
  2979  061B                     	;# 
  2980  061C                     	;# 
  2981  061D                     	;# 
  2982  061D                     	;# 
  2983  061E                     	;# 
  2984  061F                     	;# 
  2985  0FE4                     	;# 
  2986  0FE5                     	;# 
  2987  0FE6                     	;# 
  2988  0FE7                     	;# 
  2989  0FE8                     	;# 
  2990  0FE9                     	;# 
  2991  0FEA                     	;# 
  2992  0FEB                     	;# 
  2993  0FED                     	;# 
  2994  0FEE                     	;# 
  2995  0FEF                     	;# 
  2996  0000                     	;# 
  2997  0001                     	;# 
  2998  0002                     	;# 
  2999  0003                     	;# 
  3000  0004                     	;# 
  3001  0005                     	;# 
  3002  0006                     	;# 
  3003  0007                     	;# 
  3004  0008                     	;# 
  3005  0009                     	;# 
  3006  000A                     	;# 
  3007  000B                     	;# 
  3008  000C                     	;# 
  3009  000D                     	;# 
  3010  000E                     	;# 
  3011  000F                     	;# 
  3012  0010                     	;# 
  3013  0011                     	;# 
  3014  0012                     	;# 
  3015  0013                     	;# 
  3016  0014                     	;# 
  3017  0015                     	;# 
  3018  0016                     	;# 
  3019  0016                     	;# 
  3020  0017                     	;# 
  3021  0018                     	;# 
  3022  0019                     	;# 
  3023  001A                     	;# 
  3024  001B                     	;# 
  3025  001C                     	;# 
  3026  008C                     	;# 
  3027  008D                     	;# 
  3028  008E                     	;# 
  3029  008F                     	;# 
  3030  0090                     	;# 
  3031  0091                     	;# 
  3032  0092                     	;# 
  3033  0093                     	;# 
  3034  0094                     	;# 
  3035  0095                     	;# 
  3036  0096                     	;# 
  3037  0097                     	;# 
  3038  0099                     	;# 
  3039  009A                     	;# 
  3040  009B                     	;# 
  3041  009B                     	;# 
  3042  009C                     	;# 
  3043  009D                     	;# 
  3044  009E                     	;# 
  3045  010C                     	;# 
  3046  010D                     	;# 
  3047  010E                     	;# 
  3048  010F                     	;# 
  3049  0110                     	;# 
  3050  0116                     	;# 
  3051  0117                     	;# 
  3052  011D                     	;# 
  3053  018C                     	;# 
  3054  018D                     	;# 
  3055  018F                     	;# 
  3056  0190                     	;# 
  3057  0191                     	;# 
  3058  0191                     	;# 
  3059  0192                     	;# 
  3060  0193                     	;# 
  3061  0193                     	;# 
  3062  0194                     	;# 
  3063  0195                     	;# 
  3064  0196                     	;# 
  3065  0197                     	;# 
  3066  0199                     	;# 
  3067  0199                     	;# 
  3068  0199                     	;# 
  3069  019A                     	;# 
  3070  019A                     	;# 
  3071  019A                     	;# 
  3072  019B                     	;# 
  3073  019B                     	;# 
  3074  019B                     	;# 
  3075  019B                     	;# 
  3076  019B                     	;# 
  3077  019C                     	;# 
  3078  019C                     	;# 
  3079  019C                     	;# 
  3080  019D                     	;# 
  3081  019D                     	;# 
  3082  019D                     	;# 
  3083  019E                     	;# 
  3084  019E                     	;# 
  3085  019E                     	;# 
  3086  019F                     	;# 
  3087  019F                     	;# 
  3088  019F                     	;# 
  3089  020D                     	;# 
  3090  020F                     	;# 
  3091  0210                     	;# 
  3092  0211                     	;# 
  3093  0211                     	;# 
  3094  0212                     	;# 
  3095  0212                     	;# 
  3096  0213                     	;# 
  3097  0213                     	;# 
  3098  0214                     	;# 
  3099  0214                     	;# 
  3100  0215                     	;# 
  3101  0215                     	;# 
  3102  0215                     	;# 
  3103  0216                     	;# 
  3104  0216                     	;# 
  3105  0217                     	;# 
  3106  0217                     	;# 
  3107  0219                     	;# 
  3108  021A                     	;# 
  3109  021B                     	;# 
  3110  021C                     	;# 
  3111  021D                     	;# 
  3112  021E                     	;# 
  3113  021F                     	;# 
  3114  028C                     	;# 
  3115  028D                     	;# 
  3116  0291                     	;# 
  3117  0291                     	;# 
  3118  0292                     	;# 
  3119  0293                     	;# 
  3120  0298                     	;# 
  3121  0298                     	;# 
  3122  0299                     	;# 
  3123  029A                     	;# 
  3124  029D                     	;# 
  3125  029E                     	;# 
  3126  029F                     	;# 
  3127  030C                     	;# 
  3128  030D                     	;# 
  3129  0311                     	;# 
  3130  0311                     	;# 
  3131  0312                     	;# 
  3132  0313                     	;# 
  3133  0318                     	;# 
  3134  0318                     	;# 
  3135  0319                     	;# 
  3136  031A                     	;# 
  3137  031C                     	;# 
  3138  031C                     	;# 
  3139  031D                     	;# 
  3140  031E                     	;# 
  3141  038C                     	;# 
  3142  038D                     	;# 
  3143  0394                     	;# 
  3144  0395                     	;# 
  3145  0396                     	;# 
  3146  040C                     	;# 
  3147  040D                     	;# 
  3148  0411                     	;# 
  3149  0411                     	;# 
  3150  0412                     	;# 
  3151  0413                     	;# 
  3152  0414                     	;# 
  3153  0415                     	;# 
  3154  0416                     	;# 
  3155  0417                     	;# 
  3156  0418                     	;# 
  3157  0418                     	;# 
  3158  0419                     	;# 
  3159  041A                     	;# 
  3160  041B                     	;# 
  3161  041C                     	;# 
  3162  041D                     	;# 
  3163  041E                     	;# 
  3164  048D                     	;# 
  3165  0491                     	;# 
  3166  0491                     	;# 
  3167  0492                     	;# 
  3168  0492                     	;# 
  3169  0493                     	;# 
  3170  0493                     	;# 
  3171  0493                     	;# 
  3172  0494                     	;# 
  3173  0494                     	;# 
  3174  0495                     	;# 
  3175  0495                     	;# 
  3176  0496                     	;# 
  3177  0496                     	;# 
  3178  0497                     	;# 
  3179  0497                     	;# 
  3180  0595                     	;# 
  3181  0596                     	;# 
  3182  0597                     	;# 
  3183  059C                     	;# 
  3184  059D                     	;# 
  3185  059E                     	;# 
  3186  0611                     	;# 
  3187  0611                     	;# 
  3188  0612                     	;# 
  3189  0613                     	;# 
  3190  0614                     	;# 
  3191  0614                     	;# 
  3192  0615                     	;# 
  3193  0616                     	;# 
  3194  0617                     	;# 
  3195  0617                     	;# 
  3196  0618                     	;# 
  3197  0619                     	;# 
  3198  061A                     	;# 
  3199  061A                     	;# 
  3200  061B                     	;# 
  3201  061C                     	;# 
  3202  061D                     	;# 
  3203  061D                     	;# 
  3204  061E                     	;# 
  3205  061F                     	;# 
  3206  0FE4                     	;# 
  3207  0FE5                     	;# 
  3208  0FE6                     	;# 
  3209  0FE7                     	;# 
  3210  0FE8                     	;# 
  3211  0FE9                     	;# 
  3212  0FEA                     	;# 
  3213  0FEB                     	;# 
  3214  0FED                     	;# 
  3215  0FEE                     	;# 
  3216  0FEF                     	;# 
  3217  0000                     	;# 
  3218  0001                     	;# 
  3219  0002                     	;# 
  3220  0003                     	;# 
  3221  0004                     	;# 
  3222  0005                     	;# 
  3223  0006                     	;# 
  3224  0007                     	;# 
  3225  0008                     	;# 
  3226  0009                     	;# 
  3227  000A                     	;# 
  3228  000B                     	;# 
  3229  000C                     	;# 
  3230  000D                     	;# 
  3231  000E                     	;# 
  3232  000F                     	;# 
  3233  0010                     	;# 
  3234  0011                     	;# 
  3235  0012                     	;# 
  3236  0013                     	;# 
  3237  0014                     	;# 
  3238  0015                     	;# 
  3239  0016                     	;# 
  3240  0016                     	;# 
  3241  0017                     	;# 
  3242  0018                     	;# 
  3243  0019                     	;# 
  3244  001A                     	;# 
  3245  001B                     	;# 
  3246  001C                     	;# 
  3247  008C                     	;# 
  3248  008D                     	;# 
  3249  008E                     	;# 
  3250  008F                     	;# 
  3251  0090                     	;# 
  3252  0091                     	;# 
  3253  0092                     	;# 
  3254  0093                     	;# 
  3255  0094                     	;# 
  3256  0095                     	;# 
  3257  0096                     	;# 
  3258  0097                     	;# 
  3259  0099                     	;# 
  3260  009A                     	;# 
  3261  009B                     	;# 
  3262  009B                     	;# 
  3263  009C                     	;# 
  3264  009D                     	;# 
  3265  009E                     	;# 
  3266  010C                     	;# 
  3267  010D                     	;# 
  3268  010E                     	;# 
  3269  010F                     	;# 
  3270  0110                     	;# 
  3271  0116                     	;# 
  3272  0117                     	;# 
  3273  011D                     	;# 
  3274  018C                     	;# 
  3275  018D                     	;# 
  3276  018F                     	;# 
  3277  0190                     	;# 
  3278  0191                     	;# 
  3279  0191                     	;# 
  3280  0192                     	;# 
  3281  0193                     	;# 
  3282  0193                     	;# 
  3283  0194                     	;# 
  3284  0195                     	;# 
  3285  0196                     	;# 
  3286  0197                     	;# 
  3287  0199                     	;# 
  3288  0199                     	;# 
  3289  0199                     	;# 
  3290  019A                     	;# 
  3291  019A                     	;# 
  3292  019A                     	;# 
  3293  019B                     	;# 
  3294  019B                     	;# 
  3295  019B                     	;# 
  3296  019B                     	;# 
  3297  019B                     	;# 
  3298  019C                     	;# 
  3299  019C                     	;# 
  3300  019C                     	;# 
  3301  019D                     	;# 
  3302  019D                     	;# 
  3303  019D                     	;# 
  3304  019E                     	;# 
  3305  019E                     	;# 
  3306  019E                     	;# 
  3307  019F                     	;# 
  3308  019F                     	;# 
  3309  019F                     	;# 
  3310  020D                     	;# 
  3311  020F                     	;# 
  3312  0210                     	;# 
  3313  0211                     	;# 
  3314  0211                     	;# 
  3315  0212                     	;# 
  3316  0212                     	;# 
  3317  0213                     	;# 
  3318  0213                     	;# 
  3319  0214                     	;# 
  3320  0214                     	;# 
  3321  0215                     	;# 
  3322  0215                     	;# 
  3323  0215                     	;# 
  3324  0216                     	;# 
  3325  0216                     	;# 
  3326  0217                     	;# 
  3327  0217                     	;# 
  3328  0219                     	;# 
  3329  021A                     	;# 
  3330  021B                     	;# 
  3331  021C                     	;# 
  3332  021D                     	;# 
  3333  021E                     	;# 
  3334  021F                     	;# 
  3335  028C                     	;# 
  3336  028D                     	;# 
  3337  0291                     	;# 
  3338  0291                     	;# 
  3339  0292                     	;# 
  3340  0293                     	;# 
  3341  0298                     	;# 
  3342  0298                     	;# 
  3343  0299                     	;# 
  3344  029A                     	;# 
  3345  029D                     	;# 
  3346  029E                     	;# 
  3347  029F                     	;# 
  3348  030C                     	;# 
  3349  030D                     	;# 
  3350  0311                     	;# 
  3351  0311                     	;# 
  3352  0312                     	;# 
  3353  0313                     	;# 
  3354  0318                     	;# 
  3355  0318                     	;# 
  3356  0319                     	;# 
  3357  031A                     	;# 
  3358  031C                     	;# 
  3359  031C                     	;# 
  3360  031D                     	;# 
  3361  031E                     	;# 
  3362  038C                     	;# 
  3363  038D                     	;# 
  3364  0394                     	;# 
  3365  0395                     	;# 
  3366  0396                     	;# 
  3367  040C                     	;# 
  3368  040D                     	;# 
  3369  0411                     	;# 
  3370  0411                     	;# 
  3371  0412                     	;# 
  3372  0413                     	;# 
  3373  0414                     	;# 
  3374  0415                     	;# 
  3375  0416                     	;# 
  3376  0417                     	;# 
  3377  0418                     	;# 
  3378  0418                     	;# 
  3379  0419                     	;# 
  3380  041A                     	;# 
  3381  041B                     	;# 
  3382  041C                     	;# 
  3383  041D                     	;# 
  3384  041E                     	;# 
  3385  048D                     	;# 
  3386  0491                     	;# 
  3387  0491                     	;# 
  3388  0492                     	;# 
  3389  0492                     	;# 
  3390  0493                     	;# 
  3391  0493                     	;# 
  3392  0493                     	;# 
  3393  0494                     	;# 
  3394  0494                     	;# 
  3395  0495                     	;# 
  3396  0495                     	;# 
  3397  0496                     	;# 
  3398  0496                     	;# 
  3399  0497                     	;# 
  3400  0497                     	;# 
  3401  0595                     	;# 
  3402  0596                     	;# 
  3403  0597                     	;# 
  3404  059C                     	;# 
  3405  059D                     	;# 
  3406  059E                     	;# 
  3407  0611                     	;# 
  3408  0611                     	;# 
  3409  0612                     	;# 
  3410  0613                     	;# 
  3411  0614                     	;# 
  3412  0614                     	;# 
  3413  0615                     	;# 
  3414  0616                     	;# 
  3415  0617                     	;# 
  3416  0617                     	;# 
  3417  0618                     	;# 
  3418  0619                     	;# 
  3419  061A                     	;# 
  3420  061A                     	;# 
  3421  061B                     	;# 
  3422  061C                     	;# 
  3423  061D                     	;# 
  3424  061D                     	;# 
  3425  061E                     	;# 
  3426  061F                     	;# 
  3427  0FE4                     	;# 
  3428  0FE5                     	;# 
  3429  0FE6                     	;# 
  3430  0FE7                     	;# 
  3431  0FE8                     	;# 
  3432  0FE9                     	;# 
  3433  0FEA                     	;# 
  3434  0FEB                     	;# 
  3435  0FED                     	;# 
  3436  0FEE                     	;# 
  3437  0FEF                     	;_modArray
  3438                           
  3439                           	psect	idataBANK0
  3440  2CD1                     __pidataBANK0:	
  3441                           
  3442                           ;initializer for _baseline_mod_time
  3443  2CD1  34D0               	retlw	208
  3444  2CD2  3407               	retlw	7
  3445  2CD3  3400               	retlw	0
  3446  2CD4  3400               	retlw	0
  3447                           
  3448                           ;initializer for _delay_time
  3449  2CD5  34D0               	retlw	208
  3450  2CD6  3407               	retlw	7
  3451  2CD7  3400               	retlw	0
  3452  2CD8  3400               	retlw	0
  3453                           
  3454                           ;initializer for _bottom_push_state
  3455  2CD9  3401               	retlw	1
  3456  2CDA  3400               	retlw	0
  3457                           
  3458                           ;initializer for _long_press_limit
  3459  2CDB  34E8               	retlw	232
  3460  2CDC  3403               	retlw	3
  3461                           
  3462                           ;initializer for _top_push_state
  3463  2CDD  3406               	retlw	6
  3464  2CDE  3400               	retlw	0
  3465                           
  3466                           ;initializer for _blink_rate
  3467  2CDF  3414               	retlw	20
  3468                           
  3469                           ;initializer for _longTap_state
  3470  2CE0  34FF               	retlw	255
  3471                           
  3472                           ;initializer for _num_taps
  3473  2CE1  3404               	retlw	4
  3474                           
  3475                           ;initializer for _switchBypass_state
  3476  2CE2  34FF               	retlw	255
  3477                           
  3478                           	psect	idataBANK2
  3479  07FF                     __pidataBANK2:	
  3480                           
  3481                           ;initializer for _presetChannel
  3482  07FF  3401               	retlw	1
  3483                           
  3484                           	psect	idataBANK3
  3485  2D56                     __pidataBANK3:	
  3486                           
  3487                           ;initializer for _knob1_prev
  3488  2D56  34D0               	retlw	208
  3489  2D57  3407               	retlw	7
  3490                           
  3491                           ;initializer for _knob2_prev
  3492  2D58  34D0               	retlw	208
  3493  2D59  3407               	retlw	7
  3494                           
  3495                           ;initializer for _knob3_prev
  3496  2D5A  34D0               	retlw	208
  3497  2D5B  3407               	retlw	7
  3498                           
  3499                           ;initializer for _knob4_prev
  3500  2D5C  34D0               	retlw	208
  3501  2D5D  3407               	retlw	7
  3502                           
  3503                           ;initializer for _knob5_prev
  3504  2D5E  34D0               	retlw	208
  3505  2D5F  3407               	retlw	7
  3506                           
  3507                           ;initializer for _mod_counter
  3508  2D60  3401               	retlw	1
  3509  2D61  3400               	retlw	0
  3510                           
  3511                           ;initializer for _mod_delay_time
  3512  2D62  34D0               	retlw	208
  3513  2D63  3407               	retlw	7
  3514                           
  3515                           ;initializer for _symmetry
  3516  2D64  34B4               	retlw	180
  3517  2D65  3400               	retlw	0
  3518                           
  3519                           ;initializer for _tap_iteration
  3520  2D66  3401               	retlw	1
  3521  2D67  3400               	retlw	0
  3522                           
  3523                           ;initializer for _blink_state
  3524  2D68  3401               	retlw	1
  3525                           
  3526                           ;initializer for _currentBypassState
  3527  2D69  34FF               	retlw	255
  3528                           
  3529                           ;initializer for _expSwitchState
  3530  2D6A  34FF               	retlw	255
  3531                           
  3532                           ;initializer for _expressModeCnst
  3533  2D6B  3402               	retlw	2
  3534                           
  3535                           ;initializer for _expressionChannel
  3536  2D6C  3401               	retlw	1
  3537                           
  3538                           ;initializer for _mod_time_changed
  3539  2D6D  3401               	retlw	1
  3540                           
  3541                           ;initializer for _presetModeCnst
  3542  2D6E  3401               	retlw	1
  3543                           
  3544                           ;initializer for _switchTap_state
  3545  2D6F  34FF               	retlw	255
  3546                           
  3547                           	psect	idataBANK4
  3548  2C8A                     __pidataBANK4:	
  3549                           
  3550                           ;initializer for _blink_delay
  3551  2C8A  3464               	retlw	100
  3552  2C8B  3400               	retlw	0
  3553                           
  3554                           ;initializer for _switchBypass_up
  3555  2C8C  3401               	retlw	1
  3556  2C8D  3400               	retlw	0
  3557                           
  3558                           	psect	stringtext
  3559  2800                     __pstringtext:	
  3560  2800                     exp@coeff:	
  3561  2800  3400               	retlw	0
  3562  2801  3480               	retlw	128
  3563  2802  343F               	retlw	63
  3564  2803  3472               	retlw	114
  3565  2804  3431               	retlw	49
  3566  2805  343F               	retlw	63
  3567  2806  34FE               	retlw	254
  3568  2807  3475               	retlw	117
  3569  2808  343E               	retlw	62
  3570  2809  3458               	retlw	88
  3571  280A  3463               	retlw	99
  3572  280B  343D               	retlw	61
  3573  280C  3495               	retlw	149
  3574  280D  341D               	retlw	29
  3575  280E  343C               	retlw	60
  3576  280F  34C5               	retlw	197
  3577  2810  34AE               	retlw	174
  3578  2811  343A               	retlw	58
  3579  2812  3479               	retlw	121
  3580  2813  3421               	retlw	33
  3581  2814  3439               	retlw	57
  3582  2815  3494               	retlw	148
  3583  2816  3480               	retlw	128
  3584  2817  3437               	retlw	55
  3585  2818  3493               	retlw	147
  3586  2819  34A7               	retlw	167
  3587  281A  3435               	retlw	53
  3588  281B  3456               	retlw	86
  3589  281C  3415               	retlw	21
  3590  281D  3434               	retlw	52
  3591  281E                     __end_ofexp@coeff:	
  3592  281E                     log@coeff:	
  3593  281E  3400               	retlw	0
  3594  281F  3400               	retlw	0
  3595  2820  3400               	retlw	0
  3596  2821  3400               	retlw	0
  3597  2822  3480               	retlw	128
  3598  2823  343F               	retlw	63
  3599  2824  34F0               	retlw	240
  3600  2825  34FF               	retlw	255
  3601  2826  34BE               	retlw	190
  3602  2827  34E2               	retlw	226
  3603  2828  34A9               	retlw	169
  3604  2829  343E               	retlw	62
  3605  282A  3483               	retlw	131
  3606  282B  3476               	retlw	118
  3607  282C  34BE               	retlw	190
  3608  282D  34AE               	retlw	174
  3609  282E  342B               	retlw	43
  3610  282F  343E               	retlw	62
  3611  2830  343C               	retlw	60
  3612  2831  34C3               	retlw	195
  3613  2832  34BD               	retlw	189
  3614  2833  34D2               	retlw	210
  3615  2834  3413               	retlw	19
  3616  2835  343D               	retlw	61
  3617  2836  3478               	retlw	120
  3618  2837  34D3               	retlw	211
  3619  2838  34BB               	retlw	187
  3620  2839                     __end_oflog@coeff:	
  3621  2839                     sin@coeff_a:	
  3622  2839  34F4               	retlw	244
  3623  283A  344A               	retlw	74
  3624  283B  3448               	retlw	72
  3625  283C  3495               	retlw	149
  3626  283D  3495               	retlw	149
  3627  283E  34C7               	retlw	199
  3628  283F  34C1               	retlw	193
  3629  2840  34DC               	retlw	220
  3630  2841  3445               	retlw	69
  3631  2842  34DC               	retlw	220
  3632  2843  346D               	retlw	109
  3633  2844  34C3               	retlw	195
  3634  2845  34B3               	retlw	179
  3635  2846  3433               	retlw	51
  3636  2847  3440               	retlw	64
  3637  2848                     __end_ofsin@coeff_a:	
  3638  2848                     sin@coeff_b:	
  3639  2848  3434               	retlw	52
  3640  2849  3401               	retlw	1
  3641  284A  3448               	retlw	72
  3642  284B  349D               	retlw	157
  3643  284C  34B0               	retlw	176
  3644  284D  3445               	retlw	69
  3645  284E  3400               	retlw	0
  3646  284F  34DA               	retlw	218
  3647  2850  3442               	retlw	66
  3648  2851  3400               	retlw	0
  3649  2852  3480               	retlw	128
  3650  2853  343F               	retlw	63
  3651  2854                     __end_ofsin@coeff_b:	
  3652  000B                     _INTCONbits	set	11
  3653  0011                     _PIR1bits	set	17
  3654  000C                     _PORTAbits	set	12
  3655  000E                     _PORTCbits	set	14
  3656  000F                     _PORTDbits	set	15
  3657  0010                     _PORTEbits	set	16
  3658  001B                     _PR2	set	27
  3659  001C                     _T2CONbits	set	28
  3660  005F                     _GIE	set	95
  3661  005E                     _PEIE	set	94
  3662  0069                     _RB1	set	105
  3663  009D                     _ADCON0bits	set	157
  3664  009E                     _ADCON1bits	set	158
  3665  009C                     _ADRESH	set	156
  3666  009B                     _ADRESL	set	155
  3667  0095                     _OPTION_REGbits	set	149
  3668  0099                     _OSCCONbits	set	153
  3669  008D                     _TRISBbits	set	141
  3670  008E                     _TRISCbits	set	142
  3671  008F                     _TRISDbits	set	143
  3672  0090                     _TRISEbits	set	144
  3673  048D                     _RCIE	set	1165
  3674  011D                     _APFCONbits	set	285
  3675  010D                     _LATBbits	set	269
  3676  010F                     _LATDbits	set	271
  3677  0190                     _ANSELEbits	set	400
  3678  0192                     _PMADRH	set	402
  3679  0191                     _PMADRL	set	401
  3680  0195                     _PMCON1bits	set	405
  3681  0196                     _PMCON2	set	406
  3682  0194                     _PMDATH	set	404
  3683  0193                     _PMDATL	set	403
  3684  0199                     _RCREG	set	409
  3685  019D                     _RCSTAbits	set	413
  3686  019B                     _SPBRG	set	411
  3687  019A                     _TXREG	set	410
  3688  019E                     _TXSTAbits	set	414
  3689  0291                     _CCPR1	set	657
  3690  0298                     _CCPR2	set	664
  3691  0293                     _CCP1CONbits	set	659
  3692  029A                     _CCP2CONbits	set	666
  3693  029D                     _CCPTMRS0	set	669
  3694  029E                     _CCPTMRS1	set	670
  3695  029F                     _CCPTMRS2	set	671
  3696  0311                     _CCPR3	set	785
  3697  0318                     _CCPR4	set	792
  3698  031C                     _CCPR5	set	796
  3699  0313                     _CCP3CONbits	set	787
  3700  031A                     _CCP4CONbits	set	794
  3701  031E                     _CCP5CONbits	set	798
  3702  030C                     _TRISFbits	set	780
  3703  030D                     _TRISGbits	set	781
  3704  038C                     _LATFbits	set	908
  3705  038D                     _LATGbits	set	909
  3706  040C                     _ANSELFbits	set	1036
  3707  061F                     _CCP10CONbits	set	1567
  3708  0613                     _CCP6CONbits	set	1555
  3709  0616                     _CCP7CONbits	set	1558
  3710  0619                     _CCP8CONbits	set	1561
  3711  061C                     _CCP9CONbits	set	1564
  3712                           
  3713                           ; #config settings
  3714  0000                     
  3715                           	psect	cinit
  3716  031A                     start_initialization:	
  3717  031A                     __initialization:		;BIGRAM
  3718                           
  3719                           ; Clear objects allocated to BIGRAM
  3720  031A  308A               	movlw	low (0+9098)
  3721  031B  0084               	movwf	4
  3722  031C  3023               	movlw	high (0+9098)
  3723  031D  0085               	movwf	5
  3724  031E  3066               	movlw	102
  3725  031F  00FE               	movwf	btemp
  3726  0320  3002               	movlw	2
  3727  0321  00FF               	movwf	btemp+1
  3728  0322  31AC  24B6  3183   	fcall	clear_ram0
  3729                           
  3730                           ; Clear objects allocated to BANK0
  3731  0325  3052               	movlw	low __pbssBANK0
  3732  0326  0084               	movwf	4
  3733  0327  3000               	movlw	high __pbssBANK0
  3734  0328  0085               	movwf	5
  3735  0329  300E               	movlw	14
  3736  032A  00FE               	movwf	btemp
  3737  032B  3000               	movlw	0
  3738  032C  00FF               	movwf	btemp+1
  3739  032D  31AC  24B6  3183   	fcall	clear_ram0
  3740                           
  3741                           ; Clear objects allocated to BANK2
  3742  0330  0022               	movlb	2	; select bank2
  3743  0331  01EA               	clrf	__pbssBANK2& (0+127)
  3744  0332  01EB               	clrf	(__pbssBANK2+1)& (0+127)
  3745                           
  3746                           ; Clear objects allocated to BANK3
  3747  0333  30A0               	movlw	low __pbssBANK3
  3748  0334  0084               	movwf	4
  3749  0335  3001               	movlw	high __pbssBANK3
  3750  0336  0085               	movwf	5
  3751  0337  302D               	movlw	45
  3752  0338  00FE               	movwf	btemp
  3753  0339  3000               	movlw	0
  3754  033A  00FF               	movwf	btemp+1
  3755  033B  31AC  24B6  3183   	fcall	clear_ram0
  3756                           
  3757                           ; Clear objects allocated to BANK4
  3758  033E  3020               	movlw	low __pbssBANK4
  3759  033F  0084               	movwf	4
  3760  0340  3002               	movlw	high __pbssBANK4
  3761  0341  0085               	movwf	5
  3762  0342  303E               	movlw	62
  3763  0343  00FE               	movwf	btemp
  3764  0344  3000               	movlw	0
  3765  0345  00FF               	movwf	btemp+1
  3766  0346  31AC  24B6  3183   	fcall	clear_ram0
  3767                           
  3768                           ; Clear objects allocated to BANK5
  3769  0349  30A0               	movlw	low __pbssBANK5
  3770  034A  0084               	movwf	4
  3771  034B  3002               	movlw	high __pbssBANK5
  3772  034C  0085               	movwf	5
  3773  034D  302C               	movlw	44
  3774  034E  00FE               	movwf	btemp
  3775  034F  3000               	movlw	0
  3776  0350  00FF               	movwf	btemp+1
  3777  0351  31AC  24B6  3183   	fcall	clear_ram0
  3778                           
  3779                           ; Clear objects allocated to BANK6
  3780  0354  3020               	movlw	low __pbssBANK6
  3781  0355  0084               	movwf	4
  3782  0356  3003               	movlw	high __pbssBANK6
  3783  0357  0085               	movwf	5
  3784  0358  3040               	movlw	64
  3785  0359  00FE               	movwf	btemp
  3786  035A  3000               	movlw	0
  3787  035B  00FF               	movwf	btemp+1
  3788  035C  31AC  24B6  3183   	fcall	clear_ram0
  3789                           
  3790                           ; Clear objects allocated to BANK7
  3791  035F  30A0               	movlw	low __pbssBANK7
  3792  0360  0084               	movwf	4
  3793  0361  3003               	movlw	high __pbssBANK7
  3794  0362  0085               	movwf	5
  3795  0363  3040               	movlw	64
  3796  0364  00FE               	movwf	btemp
  3797  0365  3000               	movlw	0
  3798  0366  00FF               	movwf	btemp+1
  3799  0367  31AC  24B6  3183   	fcall	clear_ram0
  3800                           
  3801                           ; Initialize objects allocated to BANK0
  3802  036A  30D1               	movlw	low __pidataBANK0
  3803  036B  0084               	movwf	4
  3804  036C  30AC               	movlw	(high __pidataBANK0)| (0+128)
  3805  036D  0085               	movwf	5
  3806  036E  3040               	movlw	low __pdataBANK0
  3807  036F  0086               	movwf	6
  3808  0370  3000               	movlw	high __pdataBANK0
  3809  0371  0087               	movwf	7
  3810  0372  3000               	movlw	0
  3811  0373  00FF               	movwf	btemp+1
  3812  0374  3012               	movlw	18
  3813  0375  31AC  24AA  3183   	fcall	init_ram
  3814                           
  3815                           ; Initialize objects allocated to BANK2
  3816  0378  3187  27FF  3183   	fcall	__pidataBANK2	;fetch initializer
  3817  037B  00EC               	movwf	__pdataBANK2& (0+127)
  3818                           
  3819                           ; Initialize objects allocated to BANK3
  3820  037C  3056               	movlw	low __pidataBANK3
  3821  037D  0084               	movwf	4
  3822  037E  30AD               	movlw	(high __pidataBANK3)| (0+128)
  3823  037F  0085               	movwf	5
  3824  0380  30CD               	movlw	low __pdataBANK3
  3825  0381  0086               	movwf	6
  3826  0382  3001               	movlw	high __pdataBANK3
  3827  0383  0087               	movwf	7
  3828  0384  3000               	movlw	0
  3829  0385  00FF               	movwf	btemp+1
  3830  0386  301A               	movlw	26
  3831  0387  31AC  24AA  3183   	fcall	init_ram
  3832                           
  3833                           ; Initialize objects allocated to BANK4
  3834  038A  308A               	movlw	low __pidataBANK4
  3835  038B  0084               	movwf	4
  3836  038C  30AC               	movlw	(high __pidataBANK4)| (0+128)
  3837  038D  0085               	movwf	5
  3838  038E  3066               	movlw	low __pdataBANK4
  3839  038F  0086               	movwf	6
  3840  0390  3002               	movlw	high __pdataBANK4
  3841  0391  0087               	movwf	7
  3842  0392  3000               	movlw	0
  3843  0393  00FF               	movwf	btemp+1
  3844  0394  3004               	movlw	4
  3845  0395  31AC  24AA         	fcall	init_ram
  3846  0397                     end_of_initialization:	
  3847                           ;End of C runtime variable initialization code
  3848                           
  3849  0397                     __end_of__initialization:	
  3850  0397  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3851  0398  0020               	movlb	0
  3852  0399  318B  2B7D         	ljmp	_main	;jump to C main() function
  3853                           
  3854                           	psect	bssBANK0
  3855  0052                     __pbssBANK0:	
  3856  0052                     _tap_timer:	
  3857  0052                     	ds	4
  3858  0056                     _timer:	
  3859  0056                     	ds	4
  3860  005A                     _UQEnd:	
  3861  005A                     	ds	1
  3862  005B                     _UQFront:	
  3863  005B                     	ds	1
  3864  005C                     _doubleTap_state:	
  3865  005C                     	ds	1
  3866  005D                     _longBypass_state:	
  3867  005D                     	ds	1
  3868  005E                     _mode2_state:	
  3869  005E                     	ds	1
  3870  005F                     _presetSaveMode:	
  3871  005F                     	ds	1
  3872                           
  3873                           	psect	dataBANK0
  3874  0040                     __pdataBANK0:	
  3875  0040                     _baseline_mod_time:	
  3876  0040                     	ds	4
  3877  0044                     _delay_time:	
  3878  0044                     	ds	4
  3879  0048                     _bottom_push_state:	
  3880  0048                     	ds	2
  3881  004A                     _long_press_limit:	
  3882  004A                     	ds	2
  3883  004C                     _top_push_state:	
  3884  004C                     	ds	2
  3885  004E                     _blink_rate:	
  3886  004E                     	ds	1
  3887  004F                     _longTap_state:	
  3888  004F                     	ds	1
  3889  0050                     _num_taps:	
  3890  0050                     	ds	1
  3891  0051                     _switchBypass_state:	
  3892  0051                     	ds	1
  3893                           
  3894                           	psect	bssBANK2
  3895  016A                     __pbssBANK2:	
  3896  016A                     _suspend_blink:	
  3897  016A                     	ds	1
  3898  016B                     _switchTap_pressed:	
  3899  016B                     	ds	1
  3900                           
  3901                           	psect	dataBANK2
  3902  016C                     __pdataBANK2:	
  3903  016C                     _presetChannel:	
  3904  016C                     	ds	1
  3905                           
  3906                           	psect	bssBANK3
  3907  01A0                     __pbssBANK3:	
  3908  01A0                     _double_timer:	
  3909  01A0                     	ds	4
  3910  01A4                     _mod_timer:	
  3911  01A4                     	ds	4
  3912  01A8                     _sub_timer:	
  3913  01A8                     	ds	4
  3914  01AC                     _knob_1_pos:	
  3915  01AC                     	ds	2
  3916  01AE                     _knob_2_pos:	
  3917  01AE                     	ds	2
  3918  01B0                     _knob_3_pos:	
  3919  01B0                     	ds	2
  3920  01B2                     _knob_4_pos:	
  3921  01B2                     	ds	2
  3922  01B4                     _knob_5_pos:	
  3923  01B4                     	ds	2
  3924  01B6                     _longBypass_timer:	
  3925  01B6                     	ds	2
  3926  01B8                     _longTap_timer:	
  3927  01B8                     	ds	2
  3928  01BA                     _switchBypass_pressed:	
  3929  01BA                     	ds	2
  3930  01BC                     _tmpModDelay:	
  3931  01BC                     	ds	2
  3932  01BE                     _adjust_mod_delay:	
  3933  01BE                     	ds	1
  3934  01BF                     _bottomTactile_pressed:	
  3935  01BF                     	ds	1
  3936  01C0                     _bypass_turning_on:	
  3937  01C0                     	ds	1
  3938  01C1                     _isInitialized:	
  3939  01C1                     	ds	1
  3940  01C2                     _longBypass_down:	
  3941  01C2                     	ds	1
  3942  01C3                     _longBypass_save:	
  3943  01C3                     	ds	1
  3944  01C4                     _longBypass_start:	
  3945  01C4                     	ds	1
  3946  01C5                     _longTap_start:	
  3947  01C5                     	ds	1
  3948  01C6                     _mode1_state:	
  3949  01C6                     	ds	1
  3950  01C7                     _modulation_changed:	
  3951  01C7                     	ds	1
  3952  01C8                     _preset_blink:	
  3953  01C8                     	ds	1
  3954  01C9                     _preset_programmning_on:	
  3955  01C9                     	ds	1
  3956  01CA                     _reset_sub_delay:	
  3957  01CA                     	ds	1
  3958  01CB                     _switchTap_down:	
  3959  01CB                     	ds	1
  3960  01CC                     _topTactile_pressed:	
  3961  01CC                     	ds	1
  3962                           
  3963                           	psect	dataBANK3
  3964  01CD                     __pdataBANK3:	
  3965  01CD                     _knob1_prev:	
  3966  01CD                     	ds	2
  3967  01CF                     _knob2_prev:	
  3968  01CF                     	ds	2
  3969  01D1                     _knob3_prev:	
  3970  01D1                     	ds	2
  3971  01D3                     _knob4_prev:	
  3972  01D3                     	ds	2
  3973  01D5                     _knob5_prev:	
  3974  01D5                     	ds	2
  3975  01D7                     _mod_counter:	
  3976  01D7                     	ds	2
  3977  01D9                     _mod_delay_time:	
  3978  01D9                     	ds	2
  3979  01DB                     _symmetry:	
  3980  01DB                     	ds	2
  3981  01DD                     _tap_iteration:	
  3982  01DD                     	ds	2
  3983  01DF                     _blink_state:	
  3984  01DF                     	ds	1
  3985  01E0                     _currentBypassState:	
  3986  01E0                     	ds	1
  3987  01E1                     _expSwitchState:	
  3988  01E1                     	ds	1
  3989  01E2                     _expressModeCnst:	
  3990  01E2                     	ds	1
  3991  01E3                     _expressionChannel:	
  3992  01E3                     	ds	1
  3993  01E4                     _mod_time_changed:	
  3994  01E4                     	ds	1
  3995  01E5                     _presetModeCnst:	
  3996  01E5                     	ds	1
  3997  01E6                     _switchTap_state:	
  3998  01E6                     	ds	1
  3999                           
  4000                           	psect	bssBANK4
  4001  0220                     __pbssBANK4:	
  4002  0220                     _tap_history:	
  4003  0220                     	ds	20
  4004  0234                     USARTWriteInt@F3536:	
  4005  0234                     	ds	5
  4006  0239                     _ledState:	
  4007  0239                     	ds	4
  4008  023D                     _tap_total:	
  4009  023D                     	ds	4
  4010  0241                     _test_timer:	
  4011  0241                     	ds	4
  4012  0245                     _adjusted_pot_value:	
  4013  0245                     	ds	2
  4014  0247                     _debounce_bypass:	
  4015  0247                     	ds	2
  4016  0249                     _debounce_count:	
  4017  0249                     	ds	2
  4018  024B                     _debounce_mode1:	
  4019  024B                     	ds	2
  4020  024D                     _debounce_mode2:	
  4021  024D                     	ds	2
  4022  024F                     _delayfound:	
  4023  024F                     	ds	2
  4024  0251                     _errno:	
  4025  0251                     	ds	2
  4026  0253                     _mod_value:	
  4027  0253                     	ds	2
  4028  0255                     _oldBaseTime:	
  4029  0255                     	ds	2
  4030  0257                     _oldSymmetry:	
  4031  0257                     	ds	2
  4032  0259                     _switchBypass_toggle:	
  4033  0259                     	ds	2
  4034  025B                     _tmpVal:	
  4035  025B                     	ds	2
  4036  025D                     _iCnt:	
  4037  025D                     	ds	1
  4038                           
  4039                           	psect	dataBANK4
  4040  0266                     __pdataBANK4:	
  4041  0266                     _blink_delay:	
  4042  0266                     	ds	2
  4043  0268                     _switchBypass_up:	
  4044  0268                     	ds	2
  4045                           
  4046                           	psect	bssBANK5
  4047  02A0                     __pbssBANK5:	
  4048  02A0                     _tap:	
  4049  02A0                     	ds	44
  4050                           
  4051                           	psect	bssBANK6
  4052  0320                     __pbssBANK6:	
  4053  0320                     _URBuff:	
  4054  0320                     	ds	64
  4055                           
  4056                           	psect	bssBANK7
  4057  03A0                     __pbssBANK7:	
  4058  03A0                     _myBuf:	
  4059  03A0                     	ds	64
  4060                           
  4061                           	psect	clrtext
  4062  2CB6                     clear_ram0:	
  4063                           ;	Called with FSR0 containing the base address, and
  4064                           ;	btemp/btemp+1 has the size to clear
  4065                           
  4066  2CB6  0064               	clrwdt	;clear the watchdog before getting into this loop
  4067  2CB7                     clrloop0:	
  4068  2CB7  0180               	clrf	0	;clear RAM location pointed to by FSR
  4069  2CB8  3101               	addfsr 0,1
  4070  2CB9  3001               	movlw	1
  4071  2CBA  02FE               	subwf	126,f
  4072  2CBB  3000               	movlw	0
  4073  2CBC  3BFF               	subwfb	127,f
  4074  2CBD  087F               	movf	127,w
  4075  2CBE  047E               	iorwf	126,w
  4076  2CBF  1903               	btfsc	3,2
  4077  2CC0  3400               	retlw	0	;all done for this memory range, return
  4078  2CC1  2CB7               	goto	clrloop0	;have we reached the end yet?
  4079                           
  4080                           	psect	inittext
  4081  2CAA                     init_ram:	
  4082  2CAA  00FE               	movwf	126
  4083  2CAB                     initloop:	
  4084  2CAB  0012               	moviw fsr0++
  4085  2CAC  001E               	movwi fsr1++
  4086  2CAD  3001               	movlw	1
  4087  2CAE  02FE               	subwf	126,f
  4088  2CAF  3000               	movlw	0
  4089  2CB0  3BFF               	subwfb	127,f
  4090  2CB1  087F               	movf	127,w
  4091  2CB2  047E               	iorwf	126,w
  4092  2CB3  1903               	btfsc	3,2
  4093  2CB4  3400               	retlw	0
  4094  2CB5  2CAB               	goto	initloop
  4095                           
  4096                           	psect	cstackBANK5
  4097  02CC                     __pcstackBANK5:	
  4098  02CC                     _main$2899:	
  4099                           
  4100                           ; 3 bytes @ 0x0
  4101  02CC                     	ds	3
  4102  02CF                     _main$2900:	
  4103                           
  4104                           ; 3 bytes @ 0x3
  4105  02CF                     	ds	3
  4106  02D2                     _main$2901:	
  4107                           
  4108                           ; 3 bytes @ 0x6
  4109  02D2                     	ds	3
  4110                           
  4111                           	psect	cstackBANK4
  4112  025E                     __pcstackBANK4:	
  4113  025E                     ??_main:	
  4114                           
  4115                           ; 1 bytes @ 0x0
  4116  025E                     	ds	8
  4117                           
  4118                           	psect	cstackBANK3
  4119  01E7                     __pcstackBANK3:	
  4120  01E7                     scaleA100kPot@pwm:	
  4121  01E7                     scaleA10kPot@pwm:	
  4122                           ; 3 bytes @ 0x0
  4123                           
  4124  01E7                     scaleiA10kPot@pwm:	
  4125                           ; 3 bytes @ 0x0
  4126                           
  4127                           
  4128                           ; 3 bytes @ 0x0
  4129  01E7                     	ds	3
  4130  01EA                     _scaleA100kPot$2904:	
  4131  01EA                     _scaleA10kPot$2908:	
  4132                           ; 3 bytes @ 0x3
  4133                           
  4134  01EA                     _scaleiA10kPot$2910:	
  4135                           ; 3 bytes @ 0x3
  4136                           
  4137                           
  4138                           ; 3 bytes @ 0x3
  4139  01EA                     	ds	3
  4140  01ED                     _scaleA100kPot$2905:	
  4141  01ED                     _scaleA10kPot$2909:	
  4142                           ; 3 bytes @ 0x6
  4143                           
  4144  01ED                     _scaleiA10kPot$2911:	
  4145                           ; 3 bytes @ 0x6
  4146                           
  4147                           
  4148                           ; 3 bytes @ 0x6
  4149  01ED                     	ds	3
  4150                           
  4151                           	psect	cstackBANK2
  4152  0120                     __pcstackBANK2:	
  4153  0120                     ?___fttol:	
  4154  0120                     ___fttol@f1:	
  4155                           ; 4 bytes @ 0x0
  4156                           
  4157                           
  4158                           ; 3 bytes @ 0x0
  4159  0120                     	ds	4
  4160  0124                     ??___fttol:	
  4161                           
  4162                           ; 1 bytes @ 0x4
  4163  0124                     	ds	4
  4164  0128                     ___fttol@sign1:	
  4165                           
  4166                           ; 1 bytes @ 0x8
  4167  0128                     	ds	1
  4168  0129                     ___fttol@lval:	
  4169                           
  4170                           ; 4 bytes @ 0x9
  4171  0129                     	ds	4
  4172  012D                     ___fttol@exp1:	
  4173                           
  4174                           ; 1 bytes @ 0xD
  4175  012D                     	ds	1
  4176  012E                     ?_set_subdivision:	
  4177  012E                     ?_modTri:	
  4178                           ; 2 bytes @ 0xE
  4179                           
  4180  012E                     ?_modSaw:	
  4181                           ; 2 bytes @ 0xE
  4182                           
  4183  012E                     ?___wmul:	
  4184                           ; 2 bytes @ 0xE
  4185                           
  4186  012E                     ?_floor:	
  4187                           ; 2 bytes @ 0xE
  4188                           
  4189  012E                     set_subdivision@x:	
  4190                           ; 3 bytes @ 0xE
  4191                           
  4192  012E                     getModulationDelayTime@subDiv:	
  4193                           ; 2 bytes @ 0xE
  4194                           
  4195  012E                     ___wmul@multiplier:	
  4196                           ; 2 bytes @ 0xE
  4197                           
  4198  012E                     modTri@angle:	
  4199                           ; 2 bytes @ 0xE
  4200                           
  4201  012E                     modSaw@angle:	
  4202                           ; 3 bytes @ 0xE
  4203                           
  4204  012E                     floor@x:	
  4205                           ; 3 bytes @ 0xE
  4206                           
  4207                           
  4208                           ; 3 bytes @ 0xE
  4209  012E                     	ds	2
  4210  0130                     set_subdivision@y:	
  4211  0130                     ___wmul@multiplicand:	
  4212                           ; 2 bytes @ 0x10
  4213                           
  4214                           
  4215                           ; 2 bytes @ 0x10
  4216  0130                     	ds	1
  4217  0131                     ??_floor:	
  4218  0131                     modTri@inflection:	
  4219                           ; 1 bytes @ 0x11
  4220                           
  4221  0131                     modSaw@inflection:	
  4222                           ; 3 bytes @ 0x11
  4223                           
  4224                           
  4225                           ; 3 bytes @ 0x11
  4226  0131                     	ds	1
  4227  0132                     ___wmul@product:	
  4228  0132                     set_subdivision@scalar:	
  4229                           ; 2 bytes @ 0x12
  4230                           
  4231  0132                     floor@i:	
  4232                           ; 3 bytes @ 0x12
  4233                           
  4234                           
  4235                           ; 3 bytes @ 0x12
  4236  0132                     	ds	2
  4237  0134                     ?_modCos:	
  4238  0134                     ?_eval_poly:	
  4239                           ; 2 bytes @ 0x14
  4240                           
  4241  0134                     modCos@angle:	
  4242                           ; 3 bytes @ 0x14
  4243                           
  4244  0134                     eval_poly@x:	
  4245                           ; 3 bytes @ 0x14
  4246                           
  4247  0134                     _modTri$2913:	
  4248                           ; 3 bytes @ 0x14
  4249                           
  4250  0134                     _modSaw$2914:	
  4251                           ; 3 bytes @ 0x14
  4252                           
  4253                           
  4254                           ; 3 bytes @ 0x14
  4255  0134                     	ds	1
  4256  0135                     set_subdivision@tmpX:	
  4257  0135                     floor@expon:	
  4258                           ; 2 bytes @ 0x15
  4259                           
  4260                           
  4261                           ; 2 bytes @ 0x15
  4262  0135                     	ds	2
  4263  0137                     ?___ftsub:	
  4264  0137                     eval_poly@d:	
  4265                           ; 3 bytes @ 0x17
  4266                           
  4267  0137                     modCos@inflection:	
  4268                           ; 2 bytes @ 0x17
  4269                           
  4270  0137                     modTri@shift:	
  4271                           ; 3 bytes @ 0x17
  4272                           
  4273  0137                     ___ftsub@f2:	
  4274                           ; 3 bytes @ 0x17
  4275                           
  4276  0137                     _modSaw$2915:	
  4277                           ; 3 bytes @ 0x17
  4278                           
  4279                           
  4280                           ; 3 bytes @ 0x17
  4281  0137                     	ds	2
  4282  0139                     eval_poly@n:	
  4283                           
  4284                           ; 2 bytes @ 0x19
  4285  0139                     	ds	1
  4286  013A                     ??_modCos:	
  4287  013A                     modSaw@mod:	
  4288                           ; 1 bytes @ 0x1A
  4289                           
  4290  013A                     modTri@period:	
  4291                           ; 2 bytes @ 0x1A
  4292                           
  4293  013A                     ___ftsub@f1:	
  4294                           ; 3 bytes @ 0x1A
  4295                           
  4296                           
  4297                           ; 3 bytes @ 0x1A
  4298  013A                     	ds	1
  4299  013B                     eval_poly@res:	
  4300                           
  4301                           ; 3 bytes @ 0x1B
  4302  013B                     	ds	1
  4303  013C                     modSaw@shift:	
  4304  013C                     _modCos$2912:	
  4305                           ; 3 bytes @ 0x1C
  4306                           
  4307                           
  4308                           ; 3 bytes @ 0x1C
  4309  013C                     	ds	1
  4310  013D                     modTri@tmpVal:	
  4311                           
  4312                           ; 3 bytes @ 0x1D
  4313  013D                     	ds	1
  4314  013E                     ?_sin:	
  4315  013E                     ?_log:	
  4316                           ; 3 bytes @ 0x1E
  4317                           
  4318  013E                     ?_ldexp:	
  4319                           ; 3 bytes @ 0x1E
  4320                           
  4321  013E                     sin@f:	
  4322                           ; 3 bytes @ 0x1E
  4323                           
  4324  013E                     ldexp@value:	
  4325                           ; 3 bytes @ 0x1E
  4326                           
  4327  013E                     log@x:	
  4328                           ; 3 bytes @ 0x1E
  4329                           
  4330                           
  4331                           ; 3 bytes @ 0x1E
  4332  013E                     	ds	1
  4333  013F                     modCos@shift:	
  4334  013F                     modSaw@period:	
  4335                           ; 3 bytes @ 0x1F
  4336                           
  4337                           
  4338                           ; 3 bytes @ 0x1F
  4339  013F                     	ds	2
  4340  0141                     ??_sin:	
  4341  0141                     ??_log:	
  4342                           ; 1 bytes @ 0x21
  4343                           
  4344  0141                     ldexp@newexp:	
  4345                           ; 1 bytes @ 0x21
  4346                           
  4347                           
  4348                           ; 2 bytes @ 0x21
  4349  0141                     	ds	1
  4350  0142                     ?_modSawRev:	
  4351  0142                     log@exponent:	
  4352                           ; 2 bytes @ 0x22
  4353                           
  4354  0142                     modCos@period:	
  4355                           ; 2 bytes @ 0x22
  4356                           
  4357  0142                     modSawRev@angle:	
  4358                           ; 3 bytes @ 0x22
  4359                           
  4360  0142                     sin@y:	
  4361                           ; 3 bytes @ 0x22
  4362                           
  4363                           
  4364                           ; 3 bytes @ 0x22
  4365  0142                     	ds	1
  4366  0143                     ??_ldexp:	
  4367                           
  4368                           ; 1 bytes @ 0x23
  4369  0143                     	ds	2
  4370  0145                     modCos@tmpVal:	
  4371  0145                     modSawRev@inflection:	
  4372                           ; 3 bytes @ 0x25
  4373                           
  4374  0145                     _ldexp$2708:	
  4375                           ; 3 bytes @ 0x25
  4376                           
  4377  0145                     _sin$2919:	
  4378                           ; 3 bytes @ 0x25
  4379                           
  4380                           
  4381                           ; 3 bytes @ 0x25
  4382  0145                     	ds	3
  4383  0148                     ??_modSawRev:	
  4384  0148                     ?_modSquare:	
  4385                           ; 1 bytes @ 0x28
  4386                           
  4387  0148                     ?_exp:	
  4388                           ; 2 bytes @ 0x28
  4389                           
  4390  0148                     modSquare@angle:	
  4391                           ; 3 bytes @ 0x28
  4392                           
  4393  0148                     sin@x2:	
  4394                           ; 3 bytes @ 0x28
  4395                           
  4396  0148                     exp@x:	
  4397                           ; 3 bytes @ 0x28
  4398                           
  4399                           
  4400                           ; 3 bytes @ 0x28
  4401  0148                     	ds	3
  4402  014B                     ??_exp:	
  4403  014B                     sin@sgn:	
  4404                           ; 1 bytes @ 0x2B
  4405                           
  4406  014B                     modSquare@inflection:	
  4407                           ; 1 bytes @ 0x2B
  4408                           
  4409                           
  4410                           ; 3 bytes @ 0x2B
  4411  014B                     	ds	1
  4412  014C                     ?_cos:	
  4413  014C                     cos@f:	
  4414                           ; 3 bytes @ 0x2C
  4415                           
  4416  014C                     _exp$2920:	
  4417                           ; 3 bytes @ 0x2C
  4418                           
  4419                           
  4420                           ; 3 bytes @ 0x2C
  4421  014C                     	ds	2
  4422  014E                     modSquare@tmpVal:	
  4423                           
  4424                           ; 2 bytes @ 0x2E
  4425  014E                     	ds	1
  4426  014F                     _exp$2671:	
  4427  014F                     _cos$2916:	
  4428                           ; 3 bytes @ 0x2F
  4429                           
  4430                           
  4431                           ; 3 bytes @ 0x2F
  4432  014F                     	ds	1
  4433  0150                     ??_updateModulationArray:	
  4434                           
  4435                           ; 1 bytes @ 0x30
  4436  0150                     	ds	2
  4437  0152                     ??_calcCosArray:	
  4438  0152                     exp@exponent:	
  4439                           ; 1 bytes @ 0x32
  4440                           
  4441                           
  4442                           ; 2 bytes @ 0x32
  4443  0152                     	ds	2
  4444  0154                     exp@sign:	
  4445  0154                     updateModulationArray@angleFactor:	
  4446                           ; 1 bytes @ 0x34
  4447                           
  4448                           
  4449                           ; 2 bytes @ 0x34
  4450  0154                     	ds	1
  4451  0155                     ?_pow:	
  4452  0155                     pow@x:	
  4453                           ; 3 bytes @ 0x35
  4454                           
  4455                           
  4456                           ; 3 bytes @ 0x35
  4457  0155                     	ds	1
  4458  0156                     updateModulationArray@iAngle_2407:	
  4459  0156                     calcCosArray@tmpVal:	
  4460                           ; 1 bytes @ 0x36
  4461                           
  4462                           
  4463                           ; 3 bytes @ 0x36
  4464  0156                     	ds	1
  4465  0157                     updateModulationArray@thisAngle:	
  4466                           
  4467                           ; 2 bytes @ 0x37
  4468  0157                     	ds	1
  4469  0158                     pow@y:	
  4470                           
  4471                           ; 3 bytes @ 0x38
  4472  0158                     	ds	1
  4473  0159                     calcCosArray@iAngle:	
  4474  0159                     updateModulationArray@subDiv:	
  4475                           ; 1 bytes @ 0x39
  4476                           
  4477                           
  4478                           ; 2 bytes @ 0x39
  4479  0159                     	ds	2
  4480  015B                     ??_pow:	
  4481  015B                     updateModulationArray@iAngle:	
  4482                           ; 1 bytes @ 0x3B
  4483                           
  4484                           
  4485                           ; 1 bytes @ 0x3B
  4486  015B                     	ds	1
  4487  015C                     _pow$2917:	
  4488                           
  4489                           ; 3 bytes @ 0x3C
  4490  015C                     	ds	3
  4491  015F                     _pow$2918:	
  4492                           
  4493                           ; 3 bytes @ 0x3F
  4494  015F                     	ds	3
  4495  0162                     pow@sign:	
  4496                           
  4497                           ; 1 bytes @ 0x42
  4498  0162                     	ds	1
  4499  0163                     pow@yi:	
  4500                           
  4501                           ; 4 bytes @ 0x43
  4502  0163                     	ds	4
  4503  0167                     ?_scaleA10kPot:	
  4504  0167                     ?_scaleiA10kPot:	
  4505                           ; 2 bytes @ 0x47
  4506                           
  4507  0167                     ?_scaleA100kPot:	
  4508                           ; 2 bytes @ 0x47
  4509                           
  4510  0167                     scaleA100kPot@input:	
  4511                           ; 2 bytes @ 0x47
  4512                           
  4513  0167                     scaleA10kPot@input:	
  4514                           ; 3 bytes @ 0x47
  4515                           
  4516  0167                     scaleiA10kPot@input:	
  4517                           ; 3 bytes @ 0x47
  4518                           
  4519                           
  4520                           ; 3 bytes @ 0x47
  4521  0167                     	ds	3
  4522                           
  4523                           	psect	cstackBANK1
  4524  00A0                     __pcstackBANK1:	
  4525  00A0                     ?___ftge:	
  4526  00A0                     ?_set_leds_top:	
  4527                           ; 1 bit 
  4528                           
  4529  00A0                     ?_USARTInit:	
  4530                           ; 1 bytes @ 0x0
  4531                           
  4532  00A0                     ??_ConfigureOscillator:	
  4533                           ; 1 bytes @ 0x0
  4534                           
  4535  00A0                     ??_InitApp:	
  4536                           ; 1 bytes @ 0x0
  4537                           
  4538  00A0                     ??_InitializeTaps:	
  4539                           ; 1 bytes @ 0x0
  4540                           
  4541  00A0                     ??_init_adc:	
  4542                           ; 1 bytes @ 0x0
  4543                           
  4544  00A0                     ??_init_pwm:	
  4545                           ; 1 bytes @ 0x0
  4546                           
  4547  00A0                     ??_init_timer2:	
  4548                           ; 1 bytes @ 0x0
  4549                           
  4550  00A0                     ??_init_timer0:	
  4551                           ; 1 bytes @ 0x0
  4552                           
  4553  00A0                     ?_set_leds_bottom:	
  4554                           ; 1 bytes @ 0x0
  4555                           
  4556  00A0                     ?_setLongBypassState:	
  4557                           ; 1 bytes @ 0x0
  4558                           
  4559  00A0                     ?_setLongTapState:	
  4560                           ; 1 bytes @ 0x0
  4561                           
  4562  00A0                     ?_updateSwitchBypassState:	
  4563                           ; 1 bytes @ 0x0
  4564                           
  4565  00A0                     ?_getModulationSubdivision:	
  4566                           ; 1 bytes @ 0x0
  4567                           
  4568  00A0                     ?_adc_convert:	
  4569                           ; 2 bytes @ 0x0
  4570                           
  4571  00A0                     ?_FLASH_ReadWord:	
  4572                           ; 2 bytes @ 0x0
  4573                           
  4574  00A0                     ?_getSwitchBypassState:	
  4575                           ; 2 bytes @ 0x0
  4576                           
  4577  00A0                     ?___awdiv:	
  4578                           ; 2 bytes @ 0x0
  4579                           
  4580  00A0                     ?___ftpack:	
  4581                           ; 2 bytes @ 0x0
  4582                           
  4583  00A0                     ?_frexp:	
  4584                           ; 3 bytes @ 0x0
  4585                           
  4586  00A0                     ?___lmul:	
  4587                           ; 3 bytes @ 0x0
  4588                           
  4589  00A0                     ?___aldiv:	
  4590                           ; 4 bytes @ 0x0
  4591                           
  4592  00A0                     FLASH_ReadWord@flashAddr:	
  4593                           ; 4 bytes @ 0x0
  4594                           
  4595  00A0                     set_leds_top@x:	
  4596                           ; 2 bytes @ 0x0
  4597                           
  4598  00A0                     set_leds_bottom@x:	
  4599                           ; 2 bytes @ 0x0
  4600                           
  4601  00A0                     updateSwitchBypassState@state:	
  4602                           ; 2 bytes @ 0x0
  4603                           
  4604  00A0                     setLongBypassState@f_state:	
  4605                           ; 2 bytes @ 0x0
  4606                           
  4607  00A0                     setLongTapState@f_state:	
  4608                           ; 2 bytes @ 0x0
  4609                           
  4610  00A0                     USARTInit@baud_rate:	
  4611                           ; 2 bytes @ 0x0
  4612                           
  4613  00A0                     ___awdiv@divisor:	
  4614                           ; 2 bytes @ 0x0
  4615                           
  4616  00A0                     ___ftpack@arg:	
  4617                           ; 2 bytes @ 0x0
  4618                           
  4619  00A0                     ___ftge@ff1:	
  4620                           ; 3 bytes @ 0x0
  4621                           
  4622  00A0                     frexp@value:	
  4623                           ; 3 bytes @ 0x0
  4624                           
  4625  00A0                     ___lmul@multiplier:	
  4626                           ; 3 bytes @ 0x0
  4627                           
  4628  00A0                     ___aldiv@divisor:	
  4629                           ; 4 bytes @ 0x0
  4630                           
  4631                           
  4632                           ; 4 bytes @ 0x0
  4633  00A0                     	ds	1
  4634  00A1                     InitializeTaps@itap:	
  4635                           
  4636                           ; 2 bytes @ 0x1
  4637  00A1                     	ds	1
  4638  00A2                     ??_getModulationSubdivision:	
  4639  00A2                     ??_USARTInit:	
  4640                           ; 1 bytes @ 0x2
  4641                           
  4642  00A2                     ??_adc_convert:	
  4643                           ; 1 bytes @ 0x2
  4644                           
  4645  00A2                     ??_FLASH_ReadWord:	
  4646                           ; 1 bytes @ 0x2
  4647                           
  4648  00A2                     ??_set_leds_bottom:	
  4649                           ; 1 bytes @ 0x2
  4650                           
  4651  00A2                     ??_setLongBypassState:	
  4652                           ; 1 bytes @ 0x2
  4653                           
  4654  00A2                     ??_setLongTapState:	
  4655                           ; 1 bytes @ 0x2
  4656                           
  4657  00A2                     ??_updateSwitchBypassState:	
  4658                           ; 1 bytes @ 0x2
  4659                           
  4660  00A2                     ??_getSwitchBypassState:	
  4661                           ; 1 bytes @ 0x2
  4662                           
  4663  00A2                     FLASH_ReadWord@GIEBitValue:	
  4664                           ; 1 bytes @ 0x2
  4665                           
  4666  00A2                     set_leds_top@ledState:	
  4667                           ; 1 bytes @ 0x2
  4668                           
  4669  00A2                     ___awdiv@dividend:	
  4670                           ; 2 bytes @ 0x2
  4671                           
  4672                           
  4673                           ; 2 bytes @ 0x2
  4674  00A2                     	ds	1
  4675  00A3                     adc_convert@channel:	
  4676  00A3                     ___ftpack@exp:	
  4677                           ; 1 bytes @ 0x3
  4678                           
  4679  00A3                     frexp@eptr:	
  4680                           ; 1 bytes @ 0x3
  4681                           
  4682  00A3                     ___ftge@ff2:	
  4683                           ; 1 bytes @ 0x3
  4684                           
  4685                           
  4686                           ; 3 bytes @ 0x3
  4687  00A3                     	ds	1
  4688  00A4                     ??_set_leds_top:	
  4689  00A4                     ??_ReadSavedSettings:	
  4690                           ; 1 bytes @ 0x4
  4691                           
  4692  00A4                     ??_resetRingLEDs:	
  4693                           ; 1 bytes @ 0x4
  4694                           
  4695  00A4                     ??_setPresetDisplay:	
  4696                           ; 1 bytes @ 0x4
  4697                           
  4698  00A4                     ??_setExpressionDisplay:	
  4699                           ; 1 bytes @ 0x4
  4700                           
  4701  00A4                     ??_frexp:	
  4702                           ; 1 bytes @ 0x4
  4703                           
  4704  00A4                     ??___awdiv:	
  4705                           ; 1 bytes @ 0x4
  4706                           
  4707  00A4                     ___ftpack@sign:	
  4708                           ; 1 bytes @ 0x4
  4709                           
  4710  00A4                     ___lmul@multiplicand:	
  4711                           ; 1 bytes @ 0x4
  4712                           
  4713  00A4                     ___aldiv@dividend:	
  4714                           ; 4 bytes @ 0x4
  4715                           
  4716                           
  4717                           ; 4 bytes @ 0x4
  4718  00A4                     	ds	1
  4719  00A5                     ??___ftpack:	
  4720  00A5                     ___awdiv@counter:	
  4721                           ; 1 bytes @ 0x5
  4722                           
  4723                           
  4724                           ; 1 bytes @ 0x5
  4725  00A5                     	ds	1
  4726  00A6                     ??___ftge:	
  4727  00A6                     setPresetDisplay@ledChannel:	
  4728                           ; 1 bytes @ 0x6
  4729                           
  4730  00A6                     setExpressionDisplay@ledChannel:	
  4731                           ; 1 bytes @ 0x6
  4732                           
  4733  00A6                     ___awdiv@sign:	
  4734                           ; 1 bytes @ 0x6
  4735                           
  4736                           
  4737                           ; 1 bytes @ 0x6
  4738  00A6                     	ds	1
  4739  00A7                     ??_update_mode:	
  4740  00A7                     ??_update_selectMode:	
  4741                           ; 1 bytes @ 0x7
  4742                           
  4743  00A7                     ??_setPedalMode:	
  4744                           ; 1 bytes @ 0x7
  4745                           
  4746  00A7                     ___awdiv@quotient:	
  4747                           ; 1 bytes @ 0x7
  4748                           
  4749                           
  4750                           ; 2 bytes @ 0x7
  4751  00A7                     	ds	1
  4752  00A8                     ??___lmul:	
  4753  00A8                     ??___aldiv:	
  4754                           ; 1 bytes @ 0x8
  4755                           
  4756  00A8                     ?___altoft:	
  4757                           ; 1 bytes @ 0x8
  4758                           
  4759  00A8                     ?___awtoft:	
  4760                           ; 3 bytes @ 0x8
  4761                           
  4762  00A8                     ?___lltoft:	
  4763                           ; 3 bytes @ 0x8
  4764                           
  4765  00A8                     ___awtoft@c:	
  4766                           ; 3 bytes @ 0x8
  4767                           
  4768  00A8                     ___lmul@product:	
  4769                           ; 2 bytes @ 0x8
  4770                           
  4771  00A8                     ___altoft@c:	
  4772                           ; 4 bytes @ 0x8
  4773                           
  4774  00A8                     ___lltoft@c:	
  4775                           ; 4 bytes @ 0x8
  4776                           
  4777                           
  4778                           ; 4 bytes @ 0x8
  4779  00A8                     	ds	1
  4780  00A9                     ___aldiv@counter:	
  4781                           
  4782                           ; 1 bytes @ 0x9
  4783  00A9                     	ds	1
  4784  00AA                     ___aldiv@sign:	
  4785                           
  4786                           ; 1 bytes @ 0xA
  4787  00AA                     	ds	1
  4788  00AB                     ??___awtoft:	
  4789  00AB                     ___aldiv@quotient:	
  4790                           ; 1 bytes @ 0xB
  4791                           
  4792                           
  4793                           ; 4 bytes @ 0xB
  4794  00AB                     	ds	1
  4795  00AC                     ?_wait_ms:	
  4796  00AC                     ??___altoft:	
  4797                           ; 1 bytes @ 0xC
  4798                           
  4799  00AC                     ??___lltoft:	
  4800                           ; 1 bytes @ 0xC
  4801                           
  4802  00AC                     wait_ms@timeSec:	
  4803                           ; 1 bytes @ 0xC
  4804                           
  4805                           
  4806                           ; 2 bytes @ 0xC
  4807  00AC                     	ds	1
  4808  00AD                     ___awtoft@sign:	
  4809  00AD                     ___lltoft@exp:	
  4810                           ; 1 bytes @ 0xD
  4811                           
  4812                           
  4813                           ; 1 bytes @ 0xD
  4814  00AD                     	ds	1
  4815  00AE                     ??_wait_ms:	
  4816  00AE                     ?___ftmul:	
  4817                           ; 1 bytes @ 0xE
  4818                           
  4819  00AE                     ___altoft@exp:	
  4820                           ; 3 bytes @ 0xE
  4821                           
  4822  00AE                     ___ftmul@f1:	
  4823                           ; 1 bytes @ 0xE
  4824                           
  4825  00AE                     wait_ms@timemsl:	
  4826                           ; 3 bytes @ 0xE
  4827                           
  4828                           
  4829                           ; 4 bytes @ 0xE
  4830  00AE                     	ds	1
  4831  00AF                     ___altoft@sign:	
  4832                           
  4833                           ; 1 bytes @ 0xF
  4834  00AF                     	ds	2
  4835  00B1                     ___ftmul@f2:	
  4836                           
  4837                           ; 3 bytes @ 0x11
  4838  00B1                     	ds	1
  4839  00B2                     ??_read_bottom_tactile:	
  4840  00B2                     ??_read_top_tactile:	
  4841                           ; 1 bytes @ 0x12
  4842                           
  4843  00B2                     ??_solidring_tactiles:	
  4844                           ; 1 bytes @ 0x12
  4845                           
  4846  00B2                     ??_ring_tactiles:	
  4847                           ; 1 bytes @ 0x12
  4848                           
  4849  00B2                     ?_setSwitchBypassRelays:	
  4850                           ; 1 bytes @ 0x12
  4851                           
  4852  00B2                     setSwitchBypassRelays@f_state:	
  4853                           ; 1 bytes @ 0x12
  4854                           
  4855                           
  4856                           ; 2 bytes @ 0x12
  4857  00B2                     	ds	1
  4858  00B3                     ring_tactiles@iLed:	
  4859                           
  4860                           ; 2 bytes @ 0x13
  4861  00B3                     	ds	1
  4862  00B4                     ??_setSwitchBypassRelays:	
  4863  00B4                     ??___ftmul:	
  4864                           ; 1 bytes @ 0x14
  4865                           
  4866  00B4                     solidring_tactiles@ring_delay:	
  4867                           ; 1 bytes @ 0x14
  4868                           
  4869                           
  4870                           ; 1 bytes @ 0x14
  4871  00B4                     	ds	1
  4872  00B5                     ring_tactiles@iLed_1568:	
  4873                           
  4874                           ; 2 bytes @ 0x15
  4875  00B5                     	ds	1
  4876  00B6                     ?_setSwitchBypassState:	
  4877  00B6                     setSwitchBypassState@f_state:	
  4878                           ; 1 bytes @ 0x16
  4879                           
  4880                           
  4881                           ; 2 bytes @ 0x16
  4882  00B6                     	ds	1
  4883  00B7                     ??_showSave:	
  4884                           
  4885                           ; 1 bytes @ 0x17
  4886  00B7                     	ds	1
  4887  00B8                     ??_setSwitchBypassState:	
  4888  00B8                     ?_setDoublePressState:	
  4889                           ; 1 bytes @ 0x18
  4890                           
  4891  00B8                     ___ftmul@exp:	
  4892                           ; 1 bytes @ 0x18
  4893                           
  4894  00B8                     setDoublePressState@f_state:	
  4895                           ; 1 bytes @ 0x18
  4896                           
  4897                           
  4898                           ; 2 bytes @ 0x18
  4899  00B8                     	ds	1
  4900  00B9                     ___ftmul@f3_as_product:	
  4901                           
  4902                           ; 3 bytes @ 0x19
  4903  00B9                     	ds	1
  4904  00BA                     ??_initSwitchBypass:	
  4905  00BA                     ??_setDoublePressState:	
  4906                           ; 1 bytes @ 0x1A
  4907                           
  4908  00BA                     initSwitchBypass@initState:	
  4909                           ; 1 bytes @ 0x1A
  4910                           
  4911                           
  4912                           ; 2 bytes @ 0x1A
  4913  00BA                     	ds	2
  4914  00BC                     ??_updateSwitchBypass:	
  4915  00BC                     ??_updateSwitchTap:	
  4916                           ; 1 bytes @ 0x1C
  4917                           
  4918  00BC                     ___ftmul@cntr:	
  4919                           ; 1 bytes @ 0x1C
  4920                           
  4921                           
  4922                           ; 1 bytes @ 0x1C
  4923  00BC                     	ds	1
  4924  00BD                     ___ftmul@sign:	
  4925                           
  4926                           ; 1 bytes @ 0x1D
  4927  00BD                     	ds	1
  4928  00BE                     ?___ftneg:	
  4929  00BE                     ___ftneg@f1:	
  4930                           ; 3 bytes @ 0x1E
  4931                           
  4932                           
  4933                           ; 3 bytes @ 0x1E
  4934  00BE                     	ds	3
  4935  00C1                     ??___ftneg:	
  4936  00C1                     ?___ftadd:	
  4937                           ; 1 bytes @ 0x21
  4938                           
  4939  00C1                     ___ftadd@f1:	
  4940                           ; 3 bytes @ 0x21
  4941                           
  4942                           
  4943                           ; 3 bytes @ 0x21
  4944  00C1                     	ds	1
  4945  00C2                     updateSwitchTap@tapCntDivisor:	
  4946                           
  4947                           ; 2 bytes @ 0x22
  4948  00C2                     	ds	2
  4949  00C4                     updateSwitchTap@iCnt:	
  4950  00C4                     ___ftadd@f2:	
  4951                           ; 1 bytes @ 0x24
  4952                           
  4953                           
  4954                           ; 3 bytes @ 0x24
  4955  00C4                     	ds	3
  4956  00C7                     ??___ftadd:	
  4957                           
  4958                           ; 1 bytes @ 0x27
  4959  00C7                     	ds	4
  4960  00CB                     ___ftadd@sign:	
  4961                           
  4962                           ; 1 bytes @ 0x2B
  4963  00CB                     	ds	1
  4964  00CC                     ___ftadd@exp2:	
  4965                           
  4966                           ; 1 bytes @ 0x2C
  4967  00CC                     	ds	1
  4968  00CD                     ___ftadd@exp1:	
  4969                           
  4970                           ; 1 bytes @ 0x2D
  4971  00CD                     	ds	1
  4972  00CE                     ?___ftdiv:	
  4973  00CE                     ___ftdiv@f2:	
  4974                           ; 3 bytes @ 0x2E
  4975                           
  4976                           
  4977                           ; 3 bytes @ 0x2E
  4978  00CE                     	ds	3
  4979  00D1                     ___ftdiv@f1:	
  4980                           
  4981                           ; 3 bytes @ 0x31
  4982  00D1                     	ds	3
  4983  00D4                     ??___ftdiv:	
  4984                           
  4985                           ; 1 bytes @ 0x34
  4986  00D4                     	ds	4
  4987  00D8                     ___ftdiv@cntr:	
  4988                           
  4989                           ; 1 bytes @ 0x38
  4990  00D8                     	ds	1
  4991  00D9                     ___ftdiv@f3:	
  4992                           
  4993                           ; 3 bytes @ 0x39
  4994  00D9                     	ds	3
  4995  00DC                     ___ftdiv@exp:	
  4996                           
  4997                           ; 1 bytes @ 0x3C
  4998  00DC                     	ds	1
  4999  00DD                     ___ftdiv@sign:	
  5000                           
  5001                           ; 1 bytes @ 0x3D
  5002  00DD                     	ds	1
  5003  00DE                     ?_map:	
  5004  00DE                     map@x:	
  5005                           ; 3 bytes @ 0x3E
  5006                           
  5007                           
  5008                           ; 3 bytes @ 0x3E
  5009  00DE                     	ds	3
  5010  00E1                     map@in_min:	
  5011                           
  5012                           ; 3 bytes @ 0x41
  5013  00E1                     	ds	3
  5014  00E4                     map@in_max:	
  5015                           
  5016                           ; 3 bytes @ 0x44
  5017  00E4                     	ds	3
  5018  00E7                     map@out_min:	
  5019                           
  5020                           ; 3 bytes @ 0x47
  5021  00E7                     	ds	3
  5022  00EA                     map@out_max:	
  5023                           
  5024                           ; 3 bytes @ 0x4A
  5025  00EA                     	ds	3
  5026  00ED                     ??_map:	
  5027  00ED                     _map$2902:	
  5028                           ; 1 bytes @ 0x4D
  5029                           
  5030                           
  5031                           ; 3 bytes @ 0x4D
  5032  00ED                     	ds	3
  5033  00F0                     ??_scaleA10kPot:	
  5034  00F0                     ??_scaleiA10kPot:	
  5035                           ; 1 bytes @ 0x50
  5036                           
  5037  00F0                     ??_scaleA100kPot:	
  5038                           ; 1 bytes @ 0x50
  5039                           
  5040  00F0                     ??_set_subdivision:	
  5041                           ; 1 bytes @ 0x50
  5042                           
  5043  00F0                     ??_getModulationDelayTime:	
  5044                           ; 1 bytes @ 0x50
  5045                           
  5046  00F0                     ??_cos:	
  5047                           ; 1 bytes @ 0x50
  5048                           
  5049  00F0                     ??_modTri:	
  5050                           ; 1 bytes @ 0x50
  5051                           
  5052  00F0                     ??_modSquare:	
  5053                           ; 1 bytes @ 0x50
  5054                           
  5055  00F0                     ??_modSaw:	
  5056                           ; 1 bytes @ 0x50
  5057                           
  5058  00F0                     ??_eval_poly:	
  5059                           ; 1 bytes @ 0x50
  5060                           
  5061  00F0                     ??___wmul:	
  5062                           ; 1 bytes @ 0x50
  5063                           
  5064  00F0                     ??___ftsub:	
  5065                           ; 1 bytes @ 0x50
  5066                           
  5067                           
  5068                           	psect	cstackCOMMON
  5069  0070                     __pcstackCOMMON:	
  5070                           ; 1 bytes @ 0x50
  5071                           
  5072  0070                     ?_calcCosArray:	
  5073  0070                     ?_ConfigureOscillator:	
  5074                           ; 1 bytes @ 0x0
  5075                           
  5076  0070                     ?_InitApp:	
  5077                           ; 1 bytes @ 0x0
  5078                           
  5079  0070                     ?_InitializeTaps:	
  5080                           ; 1 bytes @ 0x0
  5081                           
  5082  0070                     ?_initSwitchBypass:	
  5083                           ; 1 bytes @ 0x0
  5084                           
  5085  0070                     ?_ReadSavedSettings:	
  5086                           ; 1 bytes @ 0x0
  5087                           
  5088  0070                     ?_update_mode:	
  5089                           ; 1 bytes @ 0x0
  5090                           
  5091  0070                     ?_update_selectMode:	
  5092                           ; 1 bytes @ 0x0
  5093                           
  5094  0070                     ?_updateSwitchBypass:	
  5095                           ; 1 bytes @ 0x0
  5096                           
  5097  0070                     ?_updateSwitchTap:	
  5098                           ; 1 bytes @ 0x0
  5099                           
  5100  0070                     ?_read_bottom_tactile:	
  5101                           ; 1 bytes @ 0x0
  5102                           
  5103  0070                     ?_read_top_tactile:	
  5104                           ; 1 bytes @ 0x0
  5105                           
  5106  0070                     ?_getModulationDelayTime:	
  5107                           ; 1 bytes @ 0x0
  5108                           
  5109  0070                     ?_updateModulationArray:	
  5110                           ; 1 bytes @ 0x0
  5111                           
  5112  0070                     ?_init_adc:	
  5113                           ; 1 bytes @ 0x0
  5114                           
  5115  0070                     ?_init_pwm:	
  5116                           ; 1 bytes @ 0x0
  5117                           
  5118  0070                     ?_init_timer2:	
  5119                           ; 1 bytes @ 0x0
  5120                           
  5121  0070                     ?_init_timer0:	
  5122                           ; 1 bytes @ 0x0
  5123                           
  5124  0070                     ?_solidring_tactiles:	
  5125                           ; 1 bytes @ 0x0
  5126                           
  5127  0070                     ?_ring_tactiles:	
  5128                           ; 1 bytes @ 0x0
  5129                           
  5130  0070                     ?_resetRingLEDs:	
  5131                           ; 1 bytes @ 0x0
  5132                           
  5133  0070                     ?_setPedalMode:	
  5134                           ; 1 bytes @ 0x0
  5135                           
  5136  0070                     ?_setPresetDisplay:	
  5137                           ; 1 bytes @ 0x0
  5138                           
  5139  0070                     ?_setExpressionDisplay:	
  5140                           ; 1 bytes @ 0x0
  5141                           
  5142  0070                     ?_isr:	
  5143                           ; 1 bytes @ 0x0
  5144                           
  5145  0070                     ?_main:	
  5146                           ; 1 bytes @ 0x0
  5147                           
  5148  0070                     ?_showSave:	
  5149                           ; 1 bytes @ 0x0
  5150                           
  5151  0070                     ?i1_set_leds_top:	
  5152                           ; 1 bytes @ 0x0
  5153                           
  5154  0070                     ?i1_getModulationSubdivision:	
  5155                           ; 1 bytes @ 0x0
  5156                           
  5157  0070                     ?i1___awdiv:	
  5158                           ; 2 bytes @ 0x0
  5159                           
  5160  0070                     ?i1___lmul:	
  5161                           ; 2 bytes @ 0x0
  5162                           
  5163  0070                     i1set_leds_top@x:	
  5164                           ; 4 bytes @ 0x0
  5165                           
  5166  0070                     i1___awdiv@divisor:	
  5167                           ; 2 bytes @ 0x0
  5168                           
  5169  0070                     i1___lmul@multiplier:	
  5170                           ; 2 bytes @ 0x0
  5171                           
  5172                           
  5173                           ; 4 bytes @ 0x0
  5174  0070                     	ds	2
  5175  0072                     ??i1_getModulationSubdivision:	
  5176  0072                     i1set_leds_top@ledState:	
  5177                           ; 1 bytes @ 0x2
  5178                           
  5179  0072                     i1___awdiv@dividend:	
  5180                           ; 2 bytes @ 0x2
  5181                           
  5182                           
  5183                           ; 2 bytes @ 0x2
  5184  0072                     	ds	2
  5185  0074                     ??i1_set_leds_top:	
  5186  0074                     ??i1___awdiv:	
  5187                           ; 1 bytes @ 0x4
  5188                           
  5189  0074                     i1___lmul@multiplicand:	
  5190                           ; 1 bytes @ 0x4
  5191                           
  5192                           
  5193                           ; 4 bytes @ 0x4
  5194  0074                     	ds	1
  5195  0075                     i1___awdiv@counter:	
  5196                           
  5197                           ; 1 bytes @ 0x5
  5198  0075                     	ds	1
  5199  0076                     i1___awdiv@sign:	
  5200                           
  5201                           ; 1 bytes @ 0x6
  5202  0076                     	ds	1
  5203  0077                     i1___awdiv@quotient:	
  5204                           
  5205                           ; 2 bytes @ 0x7
  5206  0077                     	ds	1
  5207  0078                     ??i1___lmul:	
  5208  0078                     i1___lmul@product:	
  5209                           ; 1 bytes @ 0x8
  5210                           
  5211                           
  5212                           ; 4 bytes @ 0x8
  5213  0078                     	ds	4
  5214  007C                     ??i1___aldiv:	
  5215                           
  5216                           ; 1 bytes @ 0xC
  5217  007C                     	ds	1
  5218  007D                     isr@subDiv:	
  5219                           
  5220                           ; 1 bytes @ 0xD
  5221  007D                     	ds	1
  5222                           
  5223                           	psect	cstackBANK0
  5224  0020                     __pcstackBANK0:	
  5225  0020                     ?i1___aldiv:	
  5226  0020                     i1___aldiv@divisor:	
  5227                           ; 4 bytes @ 0x0
  5228                           
  5229                           
  5230                           ; 4 bytes @ 0x0
  5231  0020                     	ds	4
  5232  0024                     i1___aldiv@dividend:	
  5233                           
  5234                           ; 4 bytes @ 0x4
  5235  0024                     	ds	4
  5236  0028                     i1___aldiv@counter:	
  5237                           
  5238                           ; 1 bytes @ 0x8
  5239  0028                     	ds	1
  5240  0029                     i1___aldiv@sign:	
  5241                           
  5242                           ; 1 bytes @ 0x9
  5243  0029                     	ds	1
  5244  002A                     i1___aldiv@quotient:	
  5245                           
  5246                           ; 4 bytes @ 0xA
  5247  002A                     	ds	4
  5248  002E                     ?_modulation:	
  5249  002E                     modulation@x:	
  5250                           ; 4 bytes @ 0xE
  5251                           
  5252                           
  5253                           ; 4 bytes @ 0xE
  5254  002E                     	ds	4
  5255  0032                     modulation@y:	
  5256                           
  5257                           ; 4 bytes @ 0x12
  5258  0032                     	ds	4
  5259  0036                     ??_modulation:	
  5260                           
  5261                           ; 1 bytes @ 0x16
  5262  0036                     	ds	4
  5263  003A                     ??_isr:	
  5264                           
  5265                           ; 1 bytes @ 0x1A
  5266  003A                     	ds	6
  5267                           
  5268                           	psect	maintext
  5269  0B7D                     __pmaintext:	
  5270 ;;
  5271 ;;Main: autosize = 0, tempsize = 8, incstack = 0, save=0
  5272 ;;
  5273 ;; *************** function _main *****************
  5274 ;; Defined at:
  5275 ;;		line 69 in file "main.c"
  5276 ;; Parameters:    Size  Location     Type
  5277 ;;		None
  5278 ;; Auto vars:     Size  Location     Type
  5279 ;;		None
  5280 ;; Return value:  Size  Location     Type
  5281 ;;                  1    wreg      void 
  5282 ;; Registers used:
  5283 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5284 ;; Tracked objects:
  5285 ;;		On entry : B1F/0
  5286 ;;		On exit  : 0/0
  5287 ;;		Unchanged: 0/0
  5288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  5289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5290 ;;      Locals:         0       0       0       0       0       0       9       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5291 ;;      Temps:          0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5292 ;;      Totals:         0       0       0       0       0       8       9       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5293 ;;Total ram usage:       17 bytes
  5294 ;; Hardware stack levels required when called:    9
  5295 ;; This function calls:
  5296 ;;		_ConfigureOscillator
  5297 ;;		_InitApp
  5298 ;;		_InitializeTaps
  5299 ;;		_ReadSavedSettings
  5300 ;;		_USARTInit
  5301 ;;		___awtoft
  5302 ;;		___fttol
  5303 ;;		_adc_convert
  5304 ;;		_calcCosArray
  5305 ;;		_getModulationDelayTime
  5306 ;;		_initSwitchBypass
  5307 ;;		_map
  5308 ;;		_read_bottom_tactile
  5309 ;;		_read_top_tactile
  5310 ;;		_scaleA100kPot
  5311 ;;		_scaleA10kPot
  5312 ;;		_scaleiA10kPot
  5313 ;;		_set_subdivision
  5314 ;;		_updateModulationArray
  5315 ;;		_updateSwitchBypass
  5316 ;;		_updateSwitchTap
  5317 ;;		_update_mode
  5318 ;;		_update_selectMode
  5319 ;; This function is called by:
  5320 ;;		Startup code after reset
  5321 ;; This function uses a non-reentrant model
  5322 ;;
  5323                           
  5324                           
  5325                           ;psect for function _main
  5326  0B7D                     _main:	
  5327                           
  5328                           ;main.c: 71: calcCosArray();
  5329                           
  5330                           ;incstack = 0
  5331                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5332  0B7D  31A7  277F  318B   	fcall	_calcCosArray
  5333                           
  5334                           ;main.c: 79: USARTInit(31250);
  5335  0B80  3012               	movlw	18
  5336  0B81  0021               	movlb	1	; select bank1
  5337  0B82  00A0               	movwf	USARTInit@baud_rate^(0+128)
  5338  0B83  307A               	movlw	122
  5339  0B84  00A1               	movwf	(USARTInit@baud_rate^(0+128)+1)
  5340  0B85  31A2  229F  318B   	fcall	_USARTInit
  5341                           
  5342                           ;main.c: 80: ConfigureOscillator();
  5343  0B88  31AC  2482  318B   	fcall	_ConfigureOscillator
  5344                           
  5345                           ;main.c: 81: InitApp();
  5346  0B8B  31AF  2702  318B   	fcall	_InitApp
  5347                           
  5348                           ;main.c: 83: PORTEbits.RE0 = 1;
  5349  0B8E  0020               	movlb	0	; select bank0
  5350  0B8F  1410               	bsf	16,0	;volatile
  5351                           
  5352                           ;main.c: 84: PORTEbits.RE1 = 1;
  5353  0B90  1490               	bsf	16,1	;volatile
  5354                           
  5355                           ;main.c: 85: PORTDbits.RD6 = 1;
  5356  0B91  170F               	bsf	15,6	;volatile
  5357                           
  5358                           ;main.c: 86: PORTDbits.RD5 = 1;
  5359  0B92  168F               	bsf	15,5	;volatile
  5360                           
  5361                           ;main.c: 87: PORTCbits.RC0 = 1;
  5362  0B93  140E               	bsf	14,0	;volatile
  5363                           
  5364                           ;main.c: 88: PORTDbits.RD7 = 1;
  5365  0B94  178F               	bsf	15,7	;volatile
  5366                           
  5367                           ;main.c: 90: InitializeTaps();
  5368  0B95  31AE  2629  318B   	fcall	_InitializeTaps
  5369                           
  5370                           ;main.c: 91: initSwitchBypass();
  5371  0B98  31AC  24C2  318B   	fcall	_initSwitchBypass
  5372                           
  5373                           ;main.c: 94: ReadSavedSettings();
  5374  0B9B  31A6  268D  318B   	fcall	_ReadSavedSettings
  5375  0B9E                     l9370:	
  5376                           ;main.c: 96: while (1) {
  5377                           
  5378                           
  5379                           ;main.c: 99: update_mode();
  5380  0B9E  31AF  27C8  318B   	fcall	_update_mode
  5381                           
  5382                           ;main.c: 100: update_selectMode();
  5383  0BA1  31A5  255D  318B   	fcall	_update_selectMode
  5384                           
  5385                           ;main.c: 103: updateSwitchBypass();
  5386  0BA4  3192  2208  318B   	fcall	_updateSwitchBypass
  5387                           
  5388                           ;main.c: 104: if (presetSaveMode != 1) {
  5389  0BA7  0020               	movlb	0	; select bank0
  5390  0BA8  035F               	decf	_presetSaveMode,w
  5391  0BA9  1903               	btfsc	3,2
  5392  0BAA  2BAE               	goto	l9380
  5393                           
  5394                           ;main.c: 105: updateSwitchTap();
  5395  0BAB  3186  2610  318B   	fcall	_updateSwitchTap
  5396  0BAE                     l9380:	
  5397                           
  5398                           ;main.c: 106: }
  5399                           ;main.c: 108: if (presetSaveMode != 1 && mode2_state != presetModeCnst) {
  5400  0BAE  0020               	movlb	0	; select bank0
  5401  0BAF  035F               	decf	_presetSaveMode,w
  5402  0BB0  1903               	btfsc	3,2
  5403  0BB1  2BBD               	goto	l9386
  5404  0BB2  085E               	movf	_mode2_state,w
  5405  0BB3  0023               	movlb	3	; select bank3
  5406  0BB4  0665               	xorwf	_presetModeCnst^(0+384),w
  5407  0BB5  1903               	skipnz
  5408  0BB6  2BBD               	goto	l9386
  5409                           
  5410                           ;main.c: 109: read_bottom_tactile();
  5411  0BB7  31A3  232B  318B   	fcall	_read_bottom_tactile
  5412                           
  5413                           ;main.c: 110: read_top_tactile();
  5414  0BBA  31A3  2375  318B   	fcall	_read_top_tactile
  5415  0BBD                     l9386:	
  5416                           
  5417                           ;main.c: 111: }
  5418                           ;main.c: 114: knob_1_pos = adc_convert(0);
  5419  0BBD  3000               	movlw	0
  5420  0BBE  31AC  24E3  318B   	fcall	_adc_convert
  5421  0BC1  0021               	movlb	1	; select bank1
  5422  0BC2  0821               	movf	(?_adc_convert+1)^(0+128),w
  5423  0BC3  0023               	movlb	3	; select bank3
  5424  0BC4  00AD               	movwf	(_knob_1_pos+1)^(0+384)
  5425  0BC5  0021               	movlb	1	; select bank1
  5426  0BC6  0820               	movf	?_adc_convert^(0+128),w
  5427  0BC7  0023               	movlb	3	; select bank3
  5428  0BC8  00AC               	movwf	_knob_1_pos^(0+384)
  5429                           
  5430                           ;main.c: 115: knob_2_pos = adc_convert(1);
  5431  0BC9  3001               	movlw	1
  5432  0BCA  31AC  24E3  318B   	fcall	_adc_convert
  5433  0BCD  0021               	movlb	1	; select bank1
  5434  0BCE  0821               	movf	(?_adc_convert+1)^(0+128),w
  5435  0BCF  0023               	movlb	3	; select bank3
  5436  0BD0  00AF               	movwf	(_knob_2_pos+1)^(0+384)
  5437  0BD1  0021               	movlb	1	; select bank1
  5438  0BD2  0820               	movf	?_adc_convert^(0+128),w
  5439  0BD3  0023               	movlb	3	; select bank3
  5440  0BD4  00AE               	movwf	_knob_2_pos^(0+384)
  5441                           
  5442                           ;main.c: 116: knob_3_pos = adc_convert(2);
  5443  0BD5  3002               	movlw	2
  5444  0BD6  31AC  24E3  318B   	fcall	_adc_convert
  5445  0BD9  0021               	movlb	1	; select bank1
  5446  0BDA  0821               	movf	(?_adc_convert+1)^(0+128),w
  5447  0BDB  0023               	movlb	3	; select bank3
  5448  0BDC  00B1               	movwf	(_knob_3_pos+1)^(0+384)
  5449  0BDD  0021               	movlb	1	; select bank1
  5450  0BDE  0820               	movf	?_adc_convert^(0+128),w
  5451  0BDF  0023               	movlb	3	; select bank3
  5452  0BE0  00B0               	movwf	_knob_3_pos^(0+384)
  5453                           
  5454                           ;main.c: 117: knob_4_pos = adc_convert(3);
  5455  0BE1  3003               	movlw	3
  5456  0BE2  31AC  24E3  318B   	fcall	_adc_convert
  5457  0BE5  0021               	movlb	1	; select bank1
  5458  0BE6  0821               	movf	(?_adc_convert+1)^(0+128),w
  5459  0BE7  0023               	movlb	3	; select bank3
  5460  0BE8  00B3               	movwf	(_knob_4_pos+1)^(0+384)
  5461  0BE9  0021               	movlb	1	; select bank1
  5462  0BEA  0820               	movf	?_adc_convert^(0+128),w
  5463  0BEB  0023               	movlb	3	; select bank3
  5464  0BEC  00B2               	movwf	_knob_4_pos^(0+384)
  5465                           
  5466                           ;main.c: 118: knob_5_pos = adc_convert(4);
  5467  0BED  3004               	movlw	4
  5468  0BEE  31AC  24E3  318B   	fcall	_adc_convert
  5469  0BF1  0021               	movlb	1	; select bank1
  5470  0BF2  0821               	movf	(?_adc_convert+1)^(0+128),w
  5471  0BF3  0023               	movlb	3	; select bank3
  5472  0BF4  00B5               	movwf	(_knob_5_pos+1)^(0+384)
  5473  0BF5  0021               	movlb	1	; select bank1
  5474  0BF6  0820               	movf	?_adc_convert^(0+128),w
  5475  0BF7  0023               	movlb	3	; select bank3
  5476  0BF8  00B4               	movwf	_knob_5_pos^(0+384)
  5477                           
  5478                           ;main.c: 122: if ((knob_1_pos - knob1_prev) >= 4 || (knob_1_pos - knob1_prev) <= -4) {
  5479  0BF9  094D               	comf	_knob1_prev^(0+384),w	;volatile
  5480  0BFA  0024               	movlb	4	; select bank4
  5481  0BFB  00DE               	movwf	??_main^(0+512)
  5482  0BFC  0023               	movlb	3	; select bank3
  5483  0BFD  094E               	comf	(_knob1_prev+1)^(0+384),w	;volatile
  5484  0BFE  0024               	movlb	4	; select bank4
  5485  0BFF  00DF               	movwf	(??_main^(0+512)+1)
  5486  0C00  0ADE               	incf	??_main^(0+512),f
  5487  0C01  1903               	skipnz
  5488  0C02  0ADF               	incf	(??_main^(0+512)+1),f
  5489  0C03  0023               	movlb	3	; select bank3
  5490  0C04  082C               	movf	_knob_1_pos^(0+384),w
  5491  0C05  0024               	movlb	4	; select bank4
  5492  0C06  075E               	addwf	??_main^(0+512),w
  5493  0C07  00E0               	movwf	(??_main+2)^(0+512)
  5494  0C08  0023               	movlb	3	; select bank3
  5495  0C09  082D               	movf	(_knob_1_pos+1)^(0+384),w
  5496  0C0A  0024               	movlb	4	; select bank4
  5497  0C0B  3D5F               	addwfc	(??_main+1)^(0+512),w
  5498  0C0C  00E1               	movwf	(??_main+3)^(0+512)
  5499  0C0D  0861               	movf	(??_main+3)^(0+512),w
  5500  0C0E  3A80               	xorlw	128
  5501  0C0F  00E2               	movwf	(??_main+4)^(0+512)
  5502  0C10  3080               	movlw	128
  5503  0C11  0262               	subwf	(??_main+4)^(0+512),w
  5504  0C12  1D03               	skipz
  5505  0C13  2C16               	goto	u10405
  5506  0C14  3004               	movlw	4
  5507  0C15  0260               	subwf	(??_main+2)^(0+512),w
  5508  0C16                     u10405:	
  5509  0C16  1803               	skipnc
  5510  0C17  2C38               	goto	l9400
  5511  0C18  0023               	movlb	3	; select bank3
  5512  0C19  094D               	comf	_knob1_prev^(0+384),w	;volatile
  5513  0C1A  0024               	movlb	4	; select bank4
  5514  0C1B  00DE               	movwf	??_main^(0+512)
  5515  0C1C  0023               	movlb	3	; select bank3
  5516  0C1D  094E               	comf	(_knob1_prev+1)^(0+384),w	;volatile
  5517  0C1E  0024               	movlb	4	; select bank4
  5518  0C1F  00DF               	movwf	(??_main^(0+512)+1)
  5519  0C20  0ADE               	incf	??_main^(0+512),f
  5520  0C21  1903               	skipnz
  5521  0C22  0ADF               	incf	(??_main^(0+512)+1),f
  5522  0C23  0023               	movlb	3	; select bank3
  5523  0C24  082C               	movf	_knob_1_pos^(0+384),w
  5524  0C25  0024               	movlb	4	; select bank4
  5525  0C26  075E               	addwf	??_main^(0+512),w
  5526  0C27  00E0               	movwf	(??_main+2)^(0+512)
  5527  0C28  0023               	movlb	3	; select bank3
  5528  0C29  082D               	movf	(_knob_1_pos+1)^(0+384),w
  5529  0C2A  0024               	movlb	4	; select bank4
  5530  0C2B  3D5F               	addwfc	(??_main+1)^(0+512),w
  5531  0C2C  00E1               	movwf	(??_main+3)^(0+512)
  5532  0C2D  0861               	movf	(??_main+3)^(0+512),w
  5533  0C2E  3A80               	xorlw	128
  5534  0C2F  00E2               	movwf	(??_main+4)^(0+512)
  5535  0C30  307F               	movlw	127
  5536  0C31  0262               	subwf	(??_main+4)^(0+512),w
  5537  0C32  1D03               	skipz
  5538  0C33  2C36               	goto	u10415
  5539  0C34  30FD               	movlw	253
  5540  0C35  0260               	subwf	(??_main+2)^(0+512),w
  5541  0C36                     u10415:	
  5542  0C36  1803               	skipnc
  5543  0C37  2C96               	goto	l9410
  5544  0C38                     l9400:	
  5545                           
  5546                           ;main.c: 123: knob1_prev = knob_1_pos;
  5547  0C38  0023               	movlb	3	; select bank3
  5548  0C39  082D               	movf	(_knob_1_pos+1)^(0+384),w
  5549  0C3A  00CE               	movwf	(_knob1_prev+1)^(0+384)	;volatile
  5550  0C3B  082C               	movf	_knob_1_pos^(0+384),w
  5551  0C3C  00CD               	movwf	_knob1_prev^(0+384)	;volatile
  5552                           
  5553                           ;main.c: 124: CCPR4 = scaleA10kPot(knob1_prev);
  5554  0C3D  084E               	movf	(_knob1_prev+1)^(0+384),w	;volatile
  5555  0C3E  0021               	movlb	1	; select bank1
  5556  0C3F  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5557  0C40  0023               	movlb	3	; select bank3
  5558  0C41  084D               	movf	_knob1_prev^(0+384),w	;volatile
  5559  0C42  0021               	movlb	1	; select bank1
  5560  0C43  00A8               	movwf	___awtoft@c^(0+128)
  5561  0C44  31AD  25E4  318B   	fcall	___awtoft
  5562  0C47  0021               	movlb	1	; select bank1
  5563  0C48  0828               	movf	?___awtoft^(0+128),w
  5564  0C49  0025               	movlb	5	; select bank5
  5565  0C4A  00CC               	movwf	_main$2899^(0+640)
  5566  0C4B  0021               	movlb	1	; select bank1
  5567  0C4C  0829               	movf	(?___awtoft+1)^(0+128),w
  5568  0C4D  0025               	movlb	5	; select bank5
  5569  0C4E  00CD               	movwf	(_main$2899+1)^(0+640)
  5570  0C4F  0021               	movlb	1	; select bank1
  5571  0C50  082A               	movf	(?___awtoft+2)^(0+128),w
  5572  0C51  0025               	movlb	5	; select bank5
  5573  0C52  00CE               	movwf	(_main$2899+2)^(0+640)
  5574                           
  5575                           ;main.c: 124: CCPR4 = scaleA10kPot(knob1_prev);
  5576  0C53  084C               	movf	_main$2899^(0+640),w
  5577  0C54  0022               	movlb	2	; select bank2
  5578  0C55  00E7               	movwf	scaleA10kPot@input^(0+256)
  5579  0C56  0025               	movlb	5	; select bank5
  5580  0C57  084D               	movf	(_main$2899+1)^(0+640),w
  5581  0C58  0022               	movlb	2	; select bank2
  5582  0C59  00E8               	movwf	(scaleA10kPot@input+1)^(0+256)
  5583  0C5A  0025               	movlb	5	; select bank5
  5584  0C5B  084E               	movf	(_main$2899+2)^(0+640),w
  5585  0C5C  0022               	movlb	2	; select bank2
  5586  0C5D  00E9               	movwf	(scaleA10kPot@input+2)^(0+256)
  5587  0C5E  319B  2327  318B   	fcall	_scaleA10kPot
  5588  0C61  0022               	movlb	2	; select bank2
  5589  0C62  0868               	movf	(?_scaleA10kPot+1)^(0+256),w
  5590  0C63  0026               	movlb	6	; select bank6
  5591  0C64  0099               	movwf	25	;volatile
  5592  0C65  0022               	movlb	2	; select bank2
  5593  0C66  0867               	movf	?_scaleA10kPot^(0+256),w
  5594  0C67  0026               	movlb	6	; select bank6
  5595  0C68  0098               	movwf	24	;volatile
  5596                           
  5597                           ;main.c: 125: CCPR5 = scaleiA10kPot(knob1_prev);
  5598  0C69  0023               	movlb	3	; select bank3
  5599  0C6A  084E               	movf	(_knob1_prev+1)^(0+384),w	;volatile
  5600  0C6B  0021               	movlb	1	; select bank1
  5601  0C6C  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5602  0C6D  0023               	movlb	3	; select bank3
  5603  0C6E  084D               	movf	_knob1_prev^(0+384),w	;volatile
  5604  0C6F  0021               	movlb	1	; select bank1
  5605  0C70  00A8               	movwf	___awtoft@c^(0+128)
  5606  0C71  31AD  25E4  318B   	fcall	___awtoft
  5607  0C74  0021               	movlb	1	; select bank1
  5608  0C75  0828               	movf	?___awtoft^(0+128),w
  5609  0C76  0025               	movlb	5	; select bank5
  5610  0C77  00CF               	movwf	_main$2900^(0+640)
  5611  0C78  0021               	movlb	1	; select bank1
  5612  0C79  0829               	movf	(?___awtoft+1)^(0+128),w
  5613  0C7A  0025               	movlb	5	; select bank5
  5614  0C7B  00D0               	movwf	(_main$2900+1)^(0+640)
  5615  0C7C  0021               	movlb	1	; select bank1
  5616  0C7D  082A               	movf	(?___awtoft+2)^(0+128),w
  5617  0C7E  0025               	movlb	5	; select bank5
  5618  0C7F  00D1               	movwf	(_main$2900+2)^(0+640)
  5619                           
  5620                           ;main.c: 125: CCPR5 = scaleiA10kPot(knob1_prev);
  5621  0C80  084F               	movf	_main$2900^(0+640),w
  5622  0C81  0022               	movlb	2	; select bank2
  5623  0C82  00E7               	movwf	scaleiA10kPot@input^(0+256)
  5624  0C83  0025               	movlb	5	; select bank5
  5625  0C84  0850               	movf	(_main$2900+1)^(0+640),w
  5626  0C85  0022               	movlb	2	; select bank2
  5627  0C86  00E8               	movwf	(scaleiA10kPot@input+1)^(0+256)
  5628  0C87  0025               	movlb	5	; select bank5
  5629  0C88  0851               	movf	(_main$2900+2)^(0+640),w
  5630  0C89  0022               	movlb	2	; select bank2
  5631  0C8A  00E9               	movwf	(scaleiA10kPot@input+2)^(0+256)
  5632  0C8B  319C  24F8  318B   	fcall	_scaleiA10kPot
  5633  0C8E  0022               	movlb	2	; select bank2
  5634  0C8F  0868               	movf	(?_scaleiA10kPot+1)^(0+256),w
  5635  0C90  0026               	movlb	6	; select bank6
  5636  0C91  009D               	movwf	29	;volatile
  5637  0C92  0022               	movlb	2	; select bank2
  5638  0C93  0867               	movf	?_scaleiA10kPot^(0+256),w
  5639  0C94  0026               	movlb	6	; select bank6
  5640  0C95  009C               	movwf	28	;volatile
  5641  0C96                     l9410:	
  5642                           
  5643                           ;main.c: 127: }
  5644                           ;main.c: 131: if (knob_2_pos - knob2_prev >= 4 || knob_2_pos - knob2_prev <= -4) {
  5645  0C96  0023               	movlb	3	; select bank3
  5646  0C97  094F               	comf	_knob2_prev^(0+384),w	;volatile
  5647  0C98  0024               	movlb	4	; select bank4
  5648  0C99  00DE               	movwf	??_main^(0+512)
  5649  0C9A  0023               	movlb	3	; select bank3
  5650  0C9B  0950               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5651  0C9C  0024               	movlb	4	; select bank4
  5652  0C9D  00DF               	movwf	(??_main^(0+512)+1)
  5653  0C9E  0ADE               	incf	??_main^(0+512),f
  5654  0C9F  1903               	skipnz
  5655  0CA0  0ADF               	incf	(??_main^(0+512)+1),f
  5656  0CA1  0023               	movlb	3	; select bank3
  5657  0CA2  082E               	movf	_knob_2_pos^(0+384),w
  5658  0CA3  0024               	movlb	4	; select bank4
  5659  0CA4  075E               	addwf	??_main^(0+512),w
  5660  0CA5  00E0               	movwf	(??_main+2)^(0+512)
  5661  0CA6  0023               	movlb	3	; select bank3
  5662  0CA7  082F               	movf	(_knob_2_pos+1)^(0+384),w
  5663  0CA8  0024               	movlb	4	; select bank4
  5664  0CA9  3D5F               	addwfc	(??_main+1)^(0+512),w
  5665  0CAA  00E1               	movwf	(??_main+3)^(0+512)
  5666  0CAB  0861               	movf	(??_main+3)^(0+512),w
  5667  0CAC  3A80               	xorlw	128
  5668  0CAD  00E2               	movwf	(??_main+4)^(0+512)
  5669  0CAE  3080               	movlw	128
  5670  0CAF  0262               	subwf	(??_main+4)^(0+512),w
  5671  0CB0  1D03               	skipz
  5672  0CB1  2CB4               	goto	u10425
  5673  0CB2  3004               	movlw	4
  5674  0CB3  0260               	subwf	(??_main+2)^(0+512),w
  5675  0CB4                     u10425:	
  5676  0CB4  1803               	skipnc
  5677  0CB5  2CD6               	goto	l9414
  5678  0CB6  0023               	movlb	3	; select bank3
  5679  0CB7  094F               	comf	_knob2_prev^(0+384),w	;volatile
  5680  0CB8  0024               	movlb	4	; select bank4
  5681  0CB9  00DE               	movwf	??_main^(0+512)
  5682  0CBA  0023               	movlb	3	; select bank3
  5683  0CBB  0950               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5684  0CBC  0024               	movlb	4	; select bank4
  5685  0CBD  00DF               	movwf	(??_main^(0+512)+1)
  5686  0CBE  0ADE               	incf	??_main^(0+512),f
  5687  0CBF  1903               	skipnz
  5688  0CC0  0ADF               	incf	(??_main^(0+512)+1),f
  5689  0CC1  0023               	movlb	3	; select bank3
  5690  0CC2  082E               	movf	_knob_2_pos^(0+384),w
  5691  0CC3  0024               	movlb	4	; select bank4
  5692  0CC4  075E               	addwf	??_main^(0+512),w
  5693  0CC5  00E0               	movwf	(??_main+2)^(0+512)
  5694  0CC6  0023               	movlb	3	; select bank3
  5695  0CC7  082F               	movf	(_knob_2_pos+1)^(0+384),w
  5696  0CC8  0024               	movlb	4	; select bank4
  5697  0CC9  3D5F               	addwfc	(??_main+1)^(0+512),w
  5698  0CCA  00E1               	movwf	(??_main+3)^(0+512)
  5699  0CCB  0861               	movf	(??_main+3)^(0+512),w
  5700  0CCC  3A80               	xorlw	128
  5701  0CCD  00E2               	movwf	(??_main+4)^(0+512)
  5702  0CCE  307F               	movlw	127
  5703  0CCF  0262               	subwf	(??_main+4)^(0+512),w
  5704  0CD0  1D03               	skipz
  5705  0CD1  2CD4               	goto	u10435
  5706  0CD2  30FD               	movlw	253
  5707  0CD3  0260               	subwf	(??_main+2)^(0+512),w
  5708  0CD4                     u10435:	
  5709  0CD4  1803               	skipnc
  5710  0CD5  2D4C               	goto	l371
  5711  0CD6                     l9414:	
  5712                           
  5713                           ;main.c: 132: knob2_prev = knob_2_pos;
  5714  0CD6  0023               	movlb	3	; select bank3
  5715  0CD7  082F               	movf	(_knob_2_pos+1)^(0+384),w
  5716  0CD8  00D0               	movwf	(_knob2_prev+1)^(0+384)	;volatile
  5717  0CD9  082E               	movf	_knob_2_pos^(0+384),w
  5718  0CDA  00CF               	movwf	_knob2_prev^(0+384)	;volatile
  5719                           
  5720                           ;main.c: 133: CCPR1 = scaleA100kPot(1023-knob2_prev);
  5721  0CDB  094F               	comf	_knob2_prev^(0+384),w	;volatile
  5722  0CDC  0024               	movlb	4	; select bank4
  5723  0CDD  00DE               	movwf	??_main^(0+512)
  5724  0CDE  0023               	movlb	3	; select bank3
  5725  0CDF  0950               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5726  0CE0  0024               	movlb	4	; select bank4
  5727  0CE1  00DF               	movwf	(??_main^(0+512)+1)
  5728  0CE2  0ADE               	incf	??_main^(0+512),f
  5729  0CE3  1903               	skipnz
  5730  0CE4  0ADF               	incf	(??_main^(0+512)+1),f
  5731  0CE5  085E               	movf	??_main^(0+512),w
  5732  0CE6  3EFF               	addlw	255
  5733  0CE7  0021               	movlb	1	; select bank1
  5734  0CE8  00A8               	movwf	___awtoft@c^(0+128)
  5735  0CE9  3003               	movlw	3
  5736  0CEA  0024               	movlb	4	; select bank4
  5737  0CEB  3D5F               	addwfc	(??_main+1)^(0+512),w
  5738  0CEC  0021               	movlb	1	; select bank1
  5739  0CED  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5740  0CEE  31AD  25E4  318B   	fcall	___awtoft
  5741  0CF1  0021               	movlb	1	; select bank1
  5742  0CF2  0828               	movf	?___awtoft^(0+128),w
  5743  0CF3  0025               	movlb	5	; select bank5
  5744  0CF4  00D2               	movwf	_main$2901^(0+640)
  5745  0CF5  0021               	movlb	1	; select bank1
  5746  0CF6  0829               	movf	(?___awtoft+1)^(0+128),w
  5747  0CF7  0025               	movlb	5	; select bank5
  5748  0CF8  00D3               	movwf	(_main$2901+1)^(0+640)
  5749  0CF9  0021               	movlb	1	; select bank1
  5750  0CFA  082A               	movf	(?___awtoft+2)^(0+128),w
  5751  0CFB  0025               	movlb	5	; select bank5
  5752  0CFC  00D4               	movwf	(_main$2901+2)^(0+640)
  5753                           
  5754                           ;main.c: 133: CCPR1 = scaleA100kPot(1023-knob2_prev);
  5755  0CFD  0852               	movf	_main$2901^(0+640),w
  5756  0CFE  0022               	movlb	2	; select bank2
  5757  0CFF  00E7               	movwf	scaleA100kPot@input^(0+256)
  5758  0D00  0025               	movlb	5	; select bank5
  5759  0D01  0853               	movf	(_main$2901+1)^(0+640),w
  5760  0D02  0022               	movlb	2	; select bank2
  5761  0D03  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
  5762  0D04  0025               	movlb	5	; select bank5
  5763  0D05  0854               	movf	(_main$2901+2)^(0+640),w
  5764  0D06  0022               	movlb	2	; select bank2
  5765  0D07  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
  5766  0D08  3199  2105  318B   	fcall	_scaleA100kPot
  5767  0D0B  0022               	movlb	2	; select bank2
  5768  0D0C  0868               	movf	(?_scaleA100kPot+1)^(0+256),w
  5769  0D0D  0025               	movlb	5	; select bank5
  5770  0D0E  0092               	movwf	18	;volatile
  5771  0D0F  0022               	movlb	2	; select bank2
  5772  0D10  0867               	movf	?_scaleA100kPot^(0+256),w
  5773  0D11  0025               	movlb	5	; select bank5
  5774  0D12  0091               	movwf	17	;volatile
  5775                           
  5776                           ;main.c: 134: CCPR2 = scaleA100kPot(1023-knob2_prev);
  5777  0D13  0023               	movlb	3	; select bank3
  5778  0D14  094F               	comf	_knob2_prev^(0+384),w	;volatile
  5779  0D15  0024               	movlb	4	; select bank4
  5780  0D16  00DE               	movwf	??_main^(0+512)
  5781  0D17  0023               	movlb	3	; select bank3
  5782  0D18  0950               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5783  0D19  0024               	movlb	4	; select bank4
  5784  0D1A  00DF               	movwf	(??_main^(0+512)+1)
  5785  0D1B  0ADE               	incf	??_main^(0+512),f
  5786  0D1C  1903               	skipnz
  5787  0D1D  0ADF               	incf	(??_main^(0+512)+1),f
  5788  0D1E  085E               	movf	??_main^(0+512),w
  5789  0D1F  3EFF               	addlw	255
  5790  0D20  0021               	movlb	1	; select bank1
  5791  0D21  00A8               	movwf	___awtoft@c^(0+128)
  5792  0D22  3003               	movlw	3
  5793  0D23  0024               	movlb	4	; select bank4
  5794  0D24  3D5F               	addwfc	(??_main+1)^(0+512),w
  5795  0D25  0021               	movlb	1	; select bank1
  5796  0D26  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5797  0D27  31AD  25E4  318B   	fcall	___awtoft
  5798  0D2A  0021               	movlb	1	; select bank1
  5799  0D2B  0828               	movf	?___awtoft^(0+128),w
  5800  0D2C  0025               	movlb	5	; select bank5
  5801  0D2D  00D2               	movwf	_main$2901^(0+640)
  5802  0D2E  0021               	movlb	1	; select bank1
  5803  0D2F  0829               	movf	(?___awtoft+1)^(0+128),w
  5804  0D30  0025               	movlb	5	; select bank5
  5805  0D31  00D3               	movwf	(_main$2901+1)^(0+640)
  5806  0D32  0021               	movlb	1	; select bank1
  5807  0D33  082A               	movf	(?___awtoft+2)^(0+128),w
  5808  0D34  0025               	movlb	5	; select bank5
  5809  0D35  00D4               	movwf	(_main$2901+2)^(0+640)
  5810                           
  5811                           ;main.c: 134: CCPR2 = scaleA100kPot(1023-knob2_prev);
  5812  0D36  0852               	movf	_main$2901^(0+640),w
  5813  0D37  0022               	movlb	2	; select bank2
  5814  0D38  00E7               	movwf	scaleA100kPot@input^(0+256)
  5815  0D39  0025               	movlb	5	; select bank5
  5816  0D3A  0853               	movf	(_main$2901+1)^(0+640),w
  5817  0D3B  0022               	movlb	2	; select bank2
  5818  0D3C  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
  5819  0D3D  0025               	movlb	5	; select bank5
  5820  0D3E  0854               	movf	(_main$2901+2)^(0+640),w
  5821  0D3F  0022               	movlb	2	; select bank2
  5822  0D40  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
  5823  0D41  3199  2105  318B   	fcall	_scaleA100kPot
  5824  0D44  0022               	movlb	2	; select bank2
  5825  0D45  0868               	movf	(?_scaleA100kPot+1)^(0+256),w
  5826  0D46  0025               	movlb	5	; select bank5
  5827  0D47  0099               	movwf	25	;volatile
  5828  0D48  0022               	movlb	2	; select bank2
  5829  0D49  0867               	movf	?_scaleA100kPot^(0+256),w
  5830  0D4A  0025               	movlb	5	; select bank5
  5831  0D4B  0098               	movwf	24	;volatile
  5832  0D4C                     l371:	
  5833                           
  5834                           ;main.c: 135: }
  5835                           ;main.c: 145: oldSymmetry = symmetry;
  5836  0D4C  0023               	movlb	3	; select bank3
  5837  0D4D  085C               	movf	(_symmetry+1)^(0+384),w
  5838  0D4E  0024               	movlb	4	; select bank4
  5839  0D4F  00D8               	movwf	(_oldSymmetry+1)^(0+512)
  5840  0D50  0023               	movlb	3	; select bank3
  5841  0D51  085B               	movf	_symmetry^(0+384),w
  5842  0D52  0024               	movlb	4	; select bank4
  5843  0D53  00D7               	movwf	_oldSymmetry^(0+512)
  5844                           
  5845                           ;main.c: 146: if (knob_3_pos - knob3_prev >= 4 || knob_3_pos - knob3_prev <= -4) {
  5846  0D54  0023               	movlb	3	; select bank3
  5847  0D55  0951               	comf	_knob3_prev^(0+384),w	;volatile
  5848  0D56  0024               	movlb	4	; select bank4
  5849  0D57  00DE               	movwf	??_main^(0+512)
  5850  0D58  0023               	movlb	3	; select bank3
  5851  0D59  0952               	comf	(_knob3_prev+1)^(0+384),w	;volatile
  5852  0D5A  0024               	movlb	4	; select bank4
  5853  0D5B  00DF               	movwf	(??_main^(0+512)+1)
  5854  0D5C  0ADE               	incf	??_main^(0+512),f
  5855  0D5D  1903               	skipnz
  5856  0D5E  0ADF               	incf	(??_main^(0+512)+1),f
  5857  0D5F  0023               	movlb	3	; select bank3
  5858  0D60  0830               	movf	_knob_3_pos^(0+384),w
  5859  0D61  0024               	movlb	4	; select bank4
  5860  0D62  075E               	addwf	??_main^(0+512),w
  5861  0D63  00E0               	movwf	(??_main+2)^(0+512)
  5862  0D64  0023               	movlb	3	; select bank3
  5863  0D65  0831               	movf	(_knob_3_pos+1)^(0+384),w
  5864  0D66  0024               	movlb	4	; select bank4
  5865  0D67  3D5F               	addwfc	(??_main+1)^(0+512),w
  5866  0D68  00E1               	movwf	(??_main+3)^(0+512)
  5867  0D69  0861               	movf	(??_main+3)^(0+512),w
  5868  0D6A  3A80               	xorlw	128
  5869  0D6B  00E2               	movwf	(??_main+4)^(0+512)
  5870  0D6C  3080               	movlw	128
  5871  0D6D  0262               	subwf	(??_main+4)^(0+512),w
  5872  0D6E  1D03               	skipz
  5873  0D6F  2D72               	goto	u10445
  5874  0D70  3004               	movlw	4
  5875  0D71  0260               	subwf	(??_main+2)^(0+512),w
  5876  0D72                     u10445:	
  5877  0D72  1803               	skipnc
  5878  0D73  2D94               	goto	l9428
  5879  0D74  0023               	movlb	3	; select bank3
  5880  0D75  0951               	comf	_knob3_prev^(0+384),w	;volatile
  5881  0D76  0024               	movlb	4	; select bank4
  5882  0D77  00DE               	movwf	??_main^(0+512)
  5883  0D78  0023               	movlb	3	; select bank3
  5884  0D79  0952               	comf	(_knob3_prev+1)^(0+384),w	;volatile
  5885  0D7A  0024               	movlb	4	; select bank4
  5886  0D7B  00DF               	movwf	(??_main^(0+512)+1)
  5887  0D7C  0ADE               	incf	??_main^(0+512),f
  5888  0D7D  1903               	skipnz
  5889  0D7E  0ADF               	incf	(??_main^(0+512)+1),f
  5890  0D7F  0023               	movlb	3	; select bank3
  5891  0D80  0830               	movf	_knob_3_pos^(0+384),w
  5892  0D81  0024               	movlb	4	; select bank4
  5893  0D82  075E               	addwf	??_main^(0+512),w
  5894  0D83  00E0               	movwf	(??_main+2)^(0+512)
  5895  0D84  0023               	movlb	3	; select bank3
  5896  0D85  0831               	movf	(_knob_3_pos+1)^(0+384),w
  5897  0D86  0024               	movlb	4	; select bank4
  5898  0D87  3D5F               	addwfc	(??_main+1)^(0+512),w
  5899  0D88  00E1               	movwf	(??_main+3)^(0+512)
  5900  0D89  0861               	movf	(??_main+3)^(0+512),w
  5901  0D8A  3A80               	xorlw	128
  5902  0D8B  00E2               	movwf	(??_main+4)^(0+512)
  5903  0D8C  307F               	movlw	127
  5904  0D8D  0262               	subwf	(??_main+4)^(0+512),w
  5905  0D8E  1D03               	skipz
  5906  0D8F  2D92               	goto	u10455
  5907  0D90  30FD               	movlw	253
  5908  0D91  0260               	subwf	(??_main+2)^(0+512),w
  5909  0D92                     u10455:	
  5910  0D92  1803               	skipnc
  5911  0D93  2DFE               	goto	l9438
  5912  0D94                     l9428:	
  5913                           
  5914                           ;main.c: 147: knob3_prev = knob_3_pos;
  5915  0D94  0023               	movlb	3	; select bank3
  5916  0D95  0831               	movf	(_knob_3_pos+1)^(0+384),w
  5917  0D96  00D2               	movwf	(_knob3_prev+1)^(0+384)	;volatile
  5918  0D97  0830               	movf	_knob_3_pos^(0+384),w
  5919  0D98  00D1               	movwf	_knob3_prev^(0+384)	;volatile
  5920                           
  5921                           ;main.c: 148: symmetry = (int) map(knob3_prev, 0, 1023, 45, 315);
  5922  0D99  3080               	movlw	128
  5923  0D9A  0021               	movlb	1	; select bank1
  5924  0D9B  00EA               	movwf	map@out_max^(0+128)
  5925  0D9C  309D               	movlw	157
  5926  0D9D  00EB               	movwf	(map@out_max+1)^(0+128)
  5927  0D9E  3043               	movlw	67
  5928  0D9F  00EC               	movwf	(map@out_max+2)^(0+128)
  5929  0DA0  3000               	movlw	0
  5930  0DA1  00E7               	movwf	map@out_min^(0+128)
  5931  0DA2  3034               	movlw	52
  5932  0DA3  00E8               	movwf	(map@out_min+1)^(0+128)
  5933  0DA4  3042               	movlw	66
  5934  0DA5  00E9               	movwf	(map@out_min+2)^(0+128)
  5935  0DA6  30C0               	movlw	192
  5936  0DA7  00E4               	movwf	map@in_max^(0+128)
  5937  0DA8  307F               	movlw	127
  5938  0DA9  00E5               	movwf	(map@in_max+1)^(0+128)
  5939  0DAA  3044               	movlw	68
  5940  0DAB  00E6               	movwf	(map@in_max+2)^(0+128)
  5941  0DAC  3000               	movlw	0
  5942  0DAD  00E1               	movwf	map@in_min^(0+128)
  5943  0DAE  3000               	movlw	0
  5944  0DAF  00E2               	movwf	(map@in_min+1)^(0+128)
  5945  0DB0  3000               	movlw	0
  5946  0DB1  00E3               	movwf	(map@in_min+2)^(0+128)
  5947  0DB2  0023               	movlb	3	; select bank3
  5948  0DB3  0852               	movf	(_knob3_prev+1)^(0+384),w	;volatile
  5949  0DB4  0021               	movlb	1	; select bank1
  5950  0DB5  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5951  0DB6  0023               	movlb	3	; select bank3
  5952  0DB7  0851               	movf	_knob3_prev^(0+384),w	;volatile
  5953  0DB8  0021               	movlb	1	; select bank1
  5954  0DB9  00A8               	movwf	___awtoft@c^(0+128)
  5955  0DBA  31AD  25E4  318B   	fcall	___awtoft
  5956  0DBD  0021               	movlb	1	; select bank1
  5957  0DBE  0828               	movf	?___awtoft^(0+128),w
  5958  0DBF  00DE               	movwf	map@x^(0+128)
  5959  0DC0  0829               	movf	(?___awtoft+1)^(0+128),w
  5960  0DC1  00DF               	movwf	(map@x+1)^(0+128)
  5961  0DC2  082A               	movf	(?___awtoft+2)^(0+128),w
  5962  0DC3  00E0               	movwf	(map@x+2)^(0+128)
  5963  0DC4  319A  2211  318B   	fcall	_map
  5964  0DC7  0021               	movlb	1	; select bank1
  5965  0DC8  085E               	movf	?_map^(0+128),w
  5966  0DC9  0022               	movlb	2	; select bank2
  5967  0DCA  00A0               	movwf	___fttol@f1^(0+256)
  5968  0DCB  0021               	movlb	1	; select bank1
  5969  0DCC  085F               	movf	(?_map+1)^(0+128),w
  5970  0DCD  0022               	movlb	2	; select bank2
  5971  0DCE  00A1               	movwf	(___fttol@f1+1)^(0+256)
  5972  0DCF  0021               	movlb	1	; select bank1
  5973  0DD0  0860               	movf	(?_map+2)^(0+128),w
  5974  0DD1  0022               	movlb	2	; select bank2
  5975  0DD2  00A2               	movwf	(___fttol@f1+2)^(0+256)
  5976  0DD3  3199  218A  318B   	fcall	___fttol
  5977  0DD6  0022               	movlb	2	; select bank2
  5978  0DD7  0821               	movf	(?___fttol^(0+256)+1),w
  5979  0DD8  0023               	movlb	3	; select bank3
  5980  0DD9  00DC               	movwf	(_symmetry+1)^(0+384)
  5981  0DDA  0022               	movlb	2	; select bank2
  5982  0DDB  0820               	movf	?___fttol^(0+256),w
  5983  0DDC  0023               	movlb	3	; select bank3
  5984  0DDD  00DB               	movwf	_symmetry^(0+384)
  5985                           
  5986                           ;main.c: 150: if (symmetry > 174 && symmetry < 185) {
  5987  0DDE  085C               	movf	(_symmetry+1)^(0+384),w
  5988  0DDF  3A80               	xorlw	128
  5989  0DE0  0024               	movlb	4	; select bank4
  5990  0DE1  00DE               	movwf	??_main^(0+512)
  5991  0DE2  3080               	movlw	128
  5992  0DE3  025E               	subwf	??_main^(0+512),w
  5993  0DE4  1D03               	skipz
  5994  0DE5  2DE9               	goto	u10465
  5995  0DE6  30AF               	movlw	175
  5996  0DE7  0023               	movlb	3	; select bank3
  5997  0DE8  025B               	subwf	_symmetry^(0+384),w
  5998  0DE9                     u10465:	
  5999  0DE9  1C03               	skipc
  6000  0DEA  2DFC               	goto	l377
  6001  0DEB  0023               	movlb	3	; select bank3
  6002  0DEC  085C               	movf	(_symmetry+1)^(0+384),w
  6003  0DED  3A80               	xorlw	128
  6004  0DEE  0024               	movlb	4	; select bank4
  6005  0DEF  00DE               	movwf	??_main^(0+512)
  6006  0DF0  3080               	movlw	128
  6007  0DF1  025E               	subwf	??_main^(0+512),w
  6008  0DF2  1D03               	skipz
  6009  0DF3  2DF7               	goto	u10475
  6010  0DF4  30B9               	movlw	185
  6011  0DF5  0023               	movlb	3	; select bank3
  6012  0DF6  025B               	subwf	_symmetry^(0+384),w
  6013  0DF7                     u10475:	
  6014  0DF7  1803               	skipnc
  6015  0DF8  2DFC               	goto	l377
  6016                           
  6017                           ;main.c: 151: LATBbits.LATB1 = 1;
  6018  0DF9  0022               	movlb	2	; select bank2
  6019  0DFA  148D               	bsf	13,1	;volatile
  6020                           
  6021                           ;main.c: 152: } else {
  6022  0DFB  2DFE               	goto	l9438
  6023  0DFC                     l377:	
  6024                           
  6025                           ;main.c: 153: LATBbits.LATB1 = 0;
  6026  0DFC  0022               	movlb	2	; select bank2
  6027  0DFD  108D               	bcf	13,1	;volatile
  6028  0DFE                     l9438:	
  6029                           
  6030                           ;main.c: 154: }
  6031                           ;main.c: 155: }
  6032                           ;main.c: 157: if (oldSymmetry - symmetry >= 2 || oldSymmetry - symmetry <= -2) {
  6033  0DFE  0023               	movlb	3	; select bank3
  6034  0DFF  095B               	comf	_symmetry^(0+384),w
  6035  0E00  0024               	movlb	4	; select bank4
  6036  0E01  00DE               	movwf	??_main^(0+512)
  6037  0E02  0023               	movlb	3	; select bank3
  6038  0E03  095C               	comf	(_symmetry+1)^(0+384),w
  6039  0E04  0024               	movlb	4	; select bank4
  6040  0E05  00DF               	movwf	(??_main^(0+512)+1)
  6041  0E06  0ADE               	incf	??_main^(0+512),f
  6042  0E07  1903               	skipnz
  6043  0E08  0ADF               	incf	(??_main^(0+512)+1),f
  6044  0E09  0857               	movf	_oldSymmetry^(0+512),w
  6045  0E0A  075E               	addwf	??_main^(0+512),w
  6046  0E0B  00E0               	movwf	(??_main+2)^(0+512)
  6047  0E0C  0858               	movf	(_oldSymmetry+1)^(0+512),w
  6048  0E0D  3D5F               	addwfc	(??_main+1)^(0+512),w
  6049  0E0E  00E1               	movwf	(??_main+3)^(0+512)
  6050  0E0F  0861               	movf	(??_main+3)^(0+512),w
  6051  0E10  3A80               	xorlw	128
  6052  0E11  00E2               	movwf	(??_main+4)^(0+512)
  6053  0E12  3080               	movlw	128
  6054  0E13  0262               	subwf	(??_main+4)^(0+512),w
  6055  0E14  1D03               	skipz
  6056  0E15  2E18               	goto	u10485
  6057  0E16  3002               	movlw	2
  6058  0E17  0260               	subwf	(??_main+2)^(0+512),w
  6059  0E18                     u10485:	
  6060  0E18  1803               	skipnc
  6061  0E19  2E36               	goto	l381
  6062  0E1A  0023               	movlb	3	; select bank3
  6063  0E1B  095B               	comf	_symmetry^(0+384),w
  6064  0E1C  0024               	movlb	4	; select bank4
  6065  0E1D  00DE               	movwf	??_main^(0+512)
  6066  0E1E  0023               	movlb	3	; select bank3
  6067  0E1F  095C               	comf	(_symmetry+1)^(0+384),w
  6068  0E20  0024               	movlb	4	; select bank4
  6069  0E21  00DF               	movwf	(??_main^(0+512)+1)
  6070  0E22  0ADE               	incf	??_main^(0+512),f
  6071  0E23  1903               	skipnz
  6072  0E24  0ADF               	incf	(??_main^(0+512)+1),f
  6073  0E25  0857               	movf	_oldSymmetry^(0+512),w
  6074  0E26  075E               	addwf	??_main^(0+512),w
  6075  0E27  00E0               	movwf	(??_main+2)^(0+512)
  6076  0E28  0858               	movf	(_oldSymmetry+1)^(0+512),w
  6077  0E29  3D5F               	addwfc	(??_main+1)^(0+512),w
  6078  0E2A  00E1               	movwf	(??_main+3)^(0+512)
  6079  0E2B  0861               	movf	(??_main+3)^(0+512),w
  6080  0E2C  3A80               	xorlw	128
  6081  0E2D  00E2               	movwf	(??_main+4)^(0+512)
  6082  0E2E  307F               	movlw	127
  6083  0E2F  0262               	subwf	(??_main+4)^(0+512),w
  6084  0E30  1D03               	skipz
  6085  0E31  2E34               	goto	u10495
  6086  0E32  30FF               	movlw	255
  6087  0E33  0260               	subwf	(??_main+2)^(0+512),w
  6088  0E34                     u10495:	
  6089  0E34  1803               	skipnc
  6090  0E35  2E3C               	goto	l379
  6091  0E36                     l381:	
  6092                           
  6093                           ;main.c: 159: modulation_changed = 1;
  6094  0E36  0023               	movlb	3	; select bank3
  6095  0E37  01C7               	clrf	_modulation_changed^(0+384)
  6096  0E38  0AC7               	incf	_modulation_changed^(0+384),f
  6097                           
  6098                           ;main.c: 160: LATDbits.LATD1 = 1;
  6099  0E39  0022               	movlb	2	; select bank2
  6100  0E3A  148F               	bsf	15,1	;volatile
  6101                           
  6102                           ;main.c: 161: } else {
  6103  0E3B  2E3E               	goto	l9442
  6104  0E3C                     l379:	
  6105                           
  6106                           ;main.c: 162: LATDbits.LATD1 = 0;
  6107  0E3C  0022               	movlb	2	; select bank2
  6108  0E3D  108F               	bcf	15,1	;volatile
  6109  0E3E                     l9442:	
  6110                           
  6111                           ;main.c: 163: }
  6112                           ;main.c: 172: oldBaseTime = baseline_mod_time;
  6113  0E3E  0020               	movlb	0	; select bank0
  6114  0E3F  0841               	movf	_baseline_mod_time+1,w	;volatile
  6115  0E40  0024               	movlb	4	; select bank4
  6116  0E41  00D6               	movwf	(_oldBaseTime+1)^(0+512)
  6117  0E42  0020               	movlb	0	; select bank0
  6118  0E43  0840               	movf	_baseline_mod_time,w	;volatile
  6119  0E44  0024               	movlb	4	; select bank4
  6120  0E45  00D5               	movwf	_oldBaseTime^(0+512)
  6121                           
  6122                           ;main.c: 173: if (knob_4_pos - knob4_prev >= 4 || knob_4_pos - knob4_prev <= -4) {
  6123  0E46  0023               	movlb	3	; select bank3
  6124  0E47  0953               	comf	_knob4_prev^(0+384),w	;volatile
  6125  0E48  0024               	movlb	4	; select bank4
  6126  0E49  00DE               	movwf	??_main^(0+512)
  6127  0E4A  0023               	movlb	3	; select bank3
  6128  0E4B  0954               	comf	(_knob4_prev+1)^(0+384),w	;volatile
  6129  0E4C  0024               	movlb	4	; select bank4
  6130  0E4D  00DF               	movwf	(??_main^(0+512)+1)
  6131  0E4E  0ADE               	incf	??_main^(0+512),f
  6132  0E4F  1903               	skipnz
  6133  0E50  0ADF               	incf	(??_main^(0+512)+1),f
  6134  0E51  0023               	movlb	3	; select bank3
  6135  0E52  0832               	movf	_knob_4_pos^(0+384),w
  6136  0E53  0024               	movlb	4	; select bank4
  6137  0E54  075E               	addwf	??_main^(0+512),w
  6138  0E55  00E0               	movwf	(??_main+2)^(0+512)
  6139  0E56  0023               	movlb	3	; select bank3
  6140  0E57  0833               	movf	(_knob_4_pos+1)^(0+384),w
  6141  0E58  0024               	movlb	4	; select bank4
  6142  0E59  3D5F               	addwfc	(??_main+1)^(0+512),w
  6143  0E5A  00E1               	movwf	(??_main+3)^(0+512)
  6144  0E5B  0861               	movf	(??_main+3)^(0+512),w
  6145  0E5C  3A80               	xorlw	128
  6146  0E5D  00E2               	movwf	(??_main+4)^(0+512)
  6147  0E5E  3080               	movlw	128
  6148  0E5F  0262               	subwf	(??_main+4)^(0+512),w
  6149  0E60  1D03               	skipz
  6150  0E61  2E64               	goto	u10505
  6151  0E62  3004               	movlw	4
  6152  0E63  0260               	subwf	(??_main+2)^(0+512),w
  6153  0E64                     u10505:	
  6154  0E64  1803               	skipnc
  6155  0E65  2E86               	goto	l9448
  6156  0E66  0023               	movlb	3	; select bank3
  6157  0E67  0953               	comf	_knob4_prev^(0+384),w	;volatile
  6158  0E68  0024               	movlb	4	; select bank4
  6159  0E69  00DE               	movwf	??_main^(0+512)
  6160  0E6A  0023               	movlb	3	; select bank3
  6161  0E6B  0954               	comf	(_knob4_prev+1)^(0+384),w	;volatile
  6162  0E6C  0024               	movlb	4	; select bank4
  6163  0E6D  00DF               	movwf	(??_main^(0+512)+1)
  6164  0E6E  0ADE               	incf	??_main^(0+512),f
  6165  0E6F  1903               	skipnz
  6166  0E70  0ADF               	incf	(??_main^(0+512)+1),f
  6167  0E71  0023               	movlb	3	; select bank3
  6168  0E72  0832               	movf	_knob_4_pos^(0+384),w
  6169  0E73  0024               	movlb	4	; select bank4
  6170  0E74  075E               	addwf	??_main^(0+512),w
  6171  0E75  00E0               	movwf	(??_main+2)^(0+512)
  6172  0E76  0023               	movlb	3	; select bank3
  6173  0E77  0833               	movf	(_knob_4_pos+1)^(0+384),w
  6174  0E78  0024               	movlb	4	; select bank4
  6175  0E79  3D5F               	addwfc	(??_main+1)^(0+512),w
  6176  0E7A  00E1               	movwf	(??_main+3)^(0+512)
  6177  0E7B  0861               	movf	(??_main+3)^(0+512),w
  6178  0E7C  3A80               	xorlw	128
  6179  0E7D  00E2               	movwf	(??_main+4)^(0+512)
  6180  0E7E  307F               	movlw	127
  6181  0E7F  0262               	subwf	(??_main+4)^(0+512),w
  6182  0E80  1D03               	skipz
  6183  0E81  2E84               	goto	u10515
  6184  0E82  30FD               	movlw	253
  6185  0E83  0260               	subwf	(??_main+2)^(0+512),w
  6186  0E84                     u10515:	
  6187  0E84  1803               	skipnc
  6188  0E85  2ED5               	goto	l9452
  6189  0E86                     l9448:	
  6190                           
  6191                           ;main.c: 174: knob4_prev = knob_4_pos;
  6192  0E86  0023               	movlb	3	; select bank3
  6193  0E87  0833               	movf	(_knob_4_pos+1)^(0+384),w
  6194  0E88  00D4               	movwf	(_knob4_prev+1)^(0+384)	;volatile
  6195  0E89  0832               	movf	_knob_4_pos^(0+384),w
  6196  0E8A  00D3               	movwf	_knob4_prev^(0+384)	;volatile
  6197                           
  6198                           ;main.c: 175: baseline_mod_time = (int)map(knob4_prev, 0, 1023, 180, 2820);
  6199  0E8B  3040               	movlw	64
  6200  0E8C  0021               	movlb	1	; select bank1
  6201  0E8D  00EA               	movwf	map@out_max^(0+128)
  6202  0E8E  3030               	movlw	48
  6203  0E8F  00EB               	movwf	(map@out_max+1)^(0+128)
  6204  0E90  3045               	movlw	69
  6205  0E91  00EC               	movwf	(map@out_max+2)^(0+128)
  6206  0E92  3000               	movlw	0
  6207  0E93  00E7               	movwf	map@out_min^(0+128)
  6208  0E94  3034               	movlw	52
  6209  0E95  00E8               	movwf	(map@out_min+1)^(0+128)
  6210  0E96  3043               	movlw	67
  6211  0E97  00E9               	movwf	(map@out_min+2)^(0+128)
  6212  0E98  30C0               	movlw	192
  6213  0E99  00E4               	movwf	map@in_max^(0+128)
  6214  0E9A  307F               	movlw	127
  6215  0E9B  00E5               	movwf	(map@in_max+1)^(0+128)
  6216  0E9C  3044               	movlw	68
  6217  0E9D  00E6               	movwf	(map@in_max+2)^(0+128)
  6218  0E9E  3000               	movlw	0
  6219  0E9F  00E1               	movwf	map@in_min^(0+128)
  6220  0EA0  3000               	movlw	0
  6221  0EA1  00E2               	movwf	(map@in_min+1)^(0+128)
  6222  0EA2  3000               	movlw	0
  6223  0EA3  00E3               	movwf	(map@in_min+2)^(0+128)
  6224  0EA4  0023               	movlb	3	; select bank3
  6225  0EA5  0854               	movf	(_knob4_prev+1)^(0+384),w	;volatile
  6226  0EA6  0021               	movlb	1	; select bank1
  6227  0EA7  00A9               	movwf	(___awtoft@c+1)^(0+128)
  6228  0EA8  0023               	movlb	3	; select bank3
  6229  0EA9  0853               	movf	_knob4_prev^(0+384),w	;volatile
  6230  0EAA  0021               	movlb	1	; select bank1
  6231  0EAB  00A8               	movwf	___awtoft@c^(0+128)
  6232  0EAC  31AD  25E4  318B   	fcall	___awtoft
  6233  0EAF  0021               	movlb	1	; select bank1
  6234  0EB0  0828               	movf	?___awtoft^(0+128),w
  6235  0EB1  00DE               	movwf	map@x^(0+128)
  6236  0EB2  0829               	movf	(?___awtoft+1)^(0+128),w
  6237  0EB3  00DF               	movwf	(map@x+1)^(0+128)
  6238  0EB4  082A               	movf	(?___awtoft+2)^(0+128),w
  6239  0EB5  00E0               	movwf	(map@x+2)^(0+128)
  6240  0EB6  319A  2211  318B   	fcall	_map
  6241  0EB9  0021               	movlb	1	; select bank1
  6242  0EBA  085E               	movf	?_map^(0+128),w
  6243  0EBB  0022               	movlb	2	; select bank2
  6244  0EBC  00A0               	movwf	___fttol@f1^(0+256)
  6245  0EBD  0021               	movlb	1	; select bank1
  6246  0EBE  085F               	movf	(?_map+1)^(0+128),w
  6247  0EBF  0022               	movlb	2	; select bank2
  6248  0EC0  00A1               	movwf	(___fttol@f1+1)^(0+256)
  6249  0EC1  0021               	movlb	1	; select bank1
  6250  0EC2  0860               	movf	(?_map+2)^(0+128),w
  6251  0EC3  0022               	movlb	2	; select bank2
  6252  0EC4  00A2               	movwf	(___fttol@f1+2)^(0+256)
  6253  0EC5  3199  218A  318B   	fcall	___fttol
  6254  0EC8  0022               	movlb	2	; select bank2
  6255  0EC9  0820               	movf	?___fttol^(0+256),w
  6256  0ECA  0020               	movlb	0	; select bank0
  6257  0ECB  00C0               	movwf	_baseline_mod_time	;volatile
  6258  0ECC  0022               	movlb	2	; select bank2
  6259  0ECD  0821               	movf	(?___fttol^(0+256)+1),w
  6260  0ECE  0020               	movlb	0	; select bank0
  6261  0ECF  00C1               	movwf	_baseline_mod_time+1	;volatile
  6262  0ED0  0D89               	rlf	9,f
  6263  0ED1  3B89               	subwfb	9,f
  6264  0ED2  0989               	comf	9,f
  6265  0ED3  00C2               	movwf	_baseline_mod_time+2	;volatile
  6266  0ED4  00C3               	movwf	_baseline_mod_time+3	;volatile
  6267  0ED5                     l9452:	
  6268                           
  6269                           ;main.c: 176: }
  6270                           ;main.c: 178: if (oldBaseTime - baseline_mod_time >= 1 || oldBaseTime - baseline_mod_tim
      +                          e <= -1) {
  6271  0ED5  0020               	movlb	0	; select bank0
  6272  0ED6  0940               	comf	_baseline_mod_time,w	;volatile
  6273  0ED7  0024               	movlb	4	; select bank4
  6274  0ED8  00DE               	movwf	??_main^(0+512)
  6275  0ED9  0020               	movlb	0	; select bank0
  6276  0EDA  0941               	comf	_baseline_mod_time+1,w	;volatile
  6277  0EDB  0024               	movlb	4	; select bank4
  6278  0EDC  00DF               	movwf	(??_main^(0+512)+1)
  6279  0EDD  0020               	movlb	0	; select bank0
  6280  0EDE  0942               	comf	_baseline_mod_time+2,w	;volatile
  6281  0EDF  0024               	movlb	4	; select bank4
  6282  0EE0  00E0               	movwf	(??_main^(0+512)+2)
  6283  0EE1  0020               	movlb	0	; select bank0
  6284  0EE2  0943               	comf	_baseline_mod_time+3,w	;volatile
  6285  0EE3  0024               	movlb	4	; select bank4
  6286  0EE4  00E1               	movwf	(??_main^(0+512)+3)
  6287  0EE5  0ADE               	incf	??_main^(0+512),f
  6288  0EE6  1903               	skipnz
  6289  0EE7  0ADF               	incf	(??_main^(0+512)+1),f
  6290  0EE8  1903               	skipnz
  6291  0EE9  0AE0               	incf	(??_main^(0+512)+2),f
  6292  0EEA  1903               	skipnz
  6293  0EEB  0AE1               	incf	(??_main^(0+512)+3),f
  6294  0EEC  0855               	movf	_oldBaseTime^(0+512),w
  6295  0EED  00E2               	movwf	(??_main+4)^(0+512)
  6296  0EEE  0856               	movf	(_oldBaseTime+1)^(0+512),w
  6297  0EEF  00E3               	movwf	((??_main+4)^(0+512)+1)
  6298  0EF0  3000               	movlw	0
  6299  0EF1  1BE3               	btfsc	((??_main+4)^(0+512)+1),7
  6300  0EF2  30FF               	movlw	255
  6301  0EF3  00E4               	movwf	((??_main+4)^(0+512)+2)
  6302  0EF4  00E5               	movwf	((??_main+4)^(0+512)+3)
  6303  0EF5  0862               	movf	(??_main+4)^(0+512),w
  6304  0EF6  07DE               	addwf	??_main^(0+512),f
  6305  0EF7  0863               	movf	(??_main+5)^(0+512),w
  6306  0EF8  3DDF               	addwfc	(??_main^(0+512)+1),f
  6307  0EF9  0864               	movf	(??_main+6)^(0+512),w
  6308  0EFA  3DE0               	addwfc	(??_main^(0+512)+2),f
  6309  0EFB  0865               	movf	(??_main+7)^(0+512),w
  6310  0EFC  3DE1               	addwfc	(??_main^(0+512)+3),f
  6311  0EFD  1BE1               	btfsc	(??_main^(0+512)+3),7
  6312  0EFE  2F0C               	goto	l9454
  6313  0EFF  0861               	movf	(??_main^(0+512)+3),w
  6314  0F00  1D03               	btfss	3,2
  6315  0F01  2F36               	goto	l388
  6316  0F02  0860               	movf	(??_main^(0+512)+2),w
  6317  0F03  1D03               	btfss	3,2
  6318  0F04  2F36               	goto	l388
  6319  0F05  085F               	movf	(??_main^(0+512)+1),w
  6320  0F06  1D03               	btfss	3,2
  6321  0F07  2F36               	goto	l388
  6322  0F08  3001               	movlw	1
  6323  0F09  025E               	subwf	??_main^(0+512),w
  6324  0F0A  1803               	btfsc	3,0
  6325  0F0B  2F36               	goto	l388
  6326  0F0C                     l9454:	
  6327  0F0C  0020               	movlb	0	; select bank0
  6328  0F0D  0940               	comf	_baseline_mod_time,w	;volatile
  6329  0F0E  0024               	movlb	4	; select bank4
  6330  0F0F  00DE               	movwf	??_main^(0+512)
  6331  0F10  0020               	movlb	0	; select bank0
  6332  0F11  0941               	comf	_baseline_mod_time+1,w	;volatile
  6333  0F12  0024               	movlb	4	; select bank4
  6334  0F13  00DF               	movwf	(??_main^(0+512)+1)
  6335  0F14  0020               	movlb	0	; select bank0
  6336  0F15  0942               	comf	_baseline_mod_time+2,w	;volatile
  6337  0F16  0024               	movlb	4	; select bank4
  6338  0F17  00E0               	movwf	(??_main^(0+512)+2)
  6339  0F18  0020               	movlb	0	; select bank0
  6340  0F19  0943               	comf	_baseline_mod_time+3,w	;volatile
  6341  0F1A  0024               	movlb	4	; select bank4
  6342  0F1B  00E1               	movwf	(??_main^(0+512)+3)
  6343  0F1C  0ADE               	incf	??_main^(0+512),f
  6344  0F1D  1903               	skipnz
  6345  0F1E  0ADF               	incf	(??_main^(0+512)+1),f
  6346  0F1F  1903               	skipnz
  6347  0F20  0AE0               	incf	(??_main^(0+512)+2),f
  6348  0F21  1903               	skipnz
  6349  0F22  0AE1               	incf	(??_main^(0+512)+3),f
  6350  0F23  0855               	movf	_oldBaseTime^(0+512),w
  6351  0F24  00E2               	movwf	(??_main+4)^(0+512)
  6352  0F25  0856               	movf	(_oldBaseTime+1)^(0+512),w
  6353  0F26  00E3               	movwf	((??_main+4)^(0+512)+1)
  6354  0F27  3000               	movlw	0
  6355  0F28  1BE3               	btfsc	((??_main+4)^(0+512)+1),7
  6356  0F29  30FF               	movlw	255
  6357  0F2A  00E4               	movwf	((??_main+4)^(0+512)+2)
  6358  0F2B  00E5               	movwf	((??_main+4)^(0+512)+3)
  6359  0F2C  0862               	movf	(??_main+4)^(0+512),w
  6360  0F2D  07DE               	addwf	??_main^(0+512),f
  6361  0F2E  0863               	movf	(??_main+5)^(0+512),w
  6362  0F2F  3DDF               	addwfc	(??_main^(0+512)+1),f
  6363  0F30  0864               	movf	(??_main+6)^(0+512),w
  6364  0F31  3DE0               	addwfc	(??_main^(0+512)+2),f
  6365  0F32  0865               	movf	(??_main+7)^(0+512),w
  6366  0F33  3DE1               	addwfc	(??_main^(0+512)+3),f
  6367  0F34  1FE1               	btfss	(??_main+3)^(0+512),7
  6368  0F35  2F39               	goto	l9456
  6369  0F36                     l388:	
  6370                           
  6371                           ;main.c: 180: mod_time_changed = 1;
  6372  0F36  0023               	movlb	3	; select bank3
  6373  0F37  01E4               	clrf	_mod_time_changed^(0+384)
  6374  0F38  0AE4               	incf	_mod_time_changed^(0+384),f
  6375  0F39                     l9456:	
  6376                           
  6377                           ;main.c: 182: }
  6378                           ;main.c: 185: if (knob_5_pos - knob5_prev >= 4 || knob_5_pos - knob5_prev <= -4) {
  6379  0F39  0023               	movlb	3	; select bank3
  6380  0F3A  0955               	comf	_knob5_prev^(0+384),w	;volatile
  6381  0F3B  0024               	movlb	4	; select bank4
  6382  0F3C  00DE               	movwf	??_main^(0+512)
  6383  0F3D  0023               	movlb	3	; select bank3
  6384  0F3E  0956               	comf	(_knob5_prev+1)^(0+384),w	;volatile
  6385  0F3F  0024               	movlb	4	; select bank4
  6386  0F40  00DF               	movwf	(??_main^(0+512)+1)
  6387  0F41  0ADE               	incf	??_main^(0+512),f
  6388  0F42  1903               	skipnz
  6389  0F43  0ADF               	incf	(??_main^(0+512)+1),f
  6390  0F44  0023               	movlb	3	; select bank3
  6391  0F45  0834               	movf	_knob_5_pos^(0+384),w
  6392  0F46  0024               	movlb	4	; select bank4
  6393  0F47  075E               	addwf	??_main^(0+512),w
  6394  0F48  00E0               	movwf	(??_main+2)^(0+512)
  6395  0F49  0023               	movlb	3	; select bank3
  6396  0F4A  0835               	movf	(_knob_5_pos+1)^(0+384),w
  6397  0F4B  0024               	movlb	4	; select bank4
  6398  0F4C  3D5F               	addwfc	(??_main+1)^(0+512),w
  6399  0F4D  00E1               	movwf	(??_main+3)^(0+512)
  6400  0F4E  0861               	movf	(??_main+3)^(0+512),w
  6401  0F4F  3A80               	xorlw	128
  6402  0F50  00E2               	movwf	(??_main+4)^(0+512)
  6403  0F51  3080               	movlw	128
  6404  0F52  0262               	subwf	(??_main+4)^(0+512),w
  6405  0F53  1D03               	skipz
  6406  0F54  2F57               	goto	u10545
  6407  0F55  3004               	movlw	4
  6408  0F56  0260               	subwf	(??_main+2)^(0+512),w
  6409  0F57                     u10545:	
  6410  0F57  1803               	skipnc
  6411  0F58  2F79               	goto	l9460
  6412  0F59  0023               	movlb	3	; select bank3
  6413  0F5A  0955               	comf	_knob5_prev^(0+384),w	;volatile
  6414  0F5B  0024               	movlb	4	; select bank4
  6415  0F5C  00DE               	movwf	??_main^(0+512)
  6416  0F5D  0023               	movlb	3	; select bank3
  6417  0F5E  0956               	comf	(_knob5_prev+1)^(0+384),w	;volatile
  6418  0F5F  0024               	movlb	4	; select bank4
  6419  0F60  00DF               	movwf	(??_main^(0+512)+1)
  6420  0F61  0ADE               	incf	??_main^(0+512),f
  6421  0F62  1903               	skipnz
  6422  0F63  0ADF               	incf	(??_main^(0+512)+1),f
  6423  0F64  0023               	movlb	3	; select bank3
  6424  0F65  0834               	movf	_knob_5_pos^(0+384),w
  6425  0F66  0024               	movlb	4	; select bank4
  6426  0F67  075E               	addwf	??_main^(0+512),w
  6427  0F68  00E0               	movwf	(??_main+2)^(0+512)
  6428  0F69  0023               	movlb	3	; select bank3
  6429  0F6A  0835               	movf	(_knob_5_pos+1)^(0+384),w
  6430  0F6B  0024               	movlb	4	; select bank4
  6431  0F6C  3D5F               	addwfc	(??_main+1)^(0+512),w
  6432  0F6D  00E1               	movwf	(??_main+3)^(0+512)
  6433  0F6E  0861               	movf	(??_main+3)^(0+512),w
  6434  0F6F  3A80               	xorlw	128
  6435  0F70  00E2               	movwf	(??_main+4)^(0+512)
  6436  0F71  307F               	movlw	127
  6437  0F72  0262               	subwf	(??_main+4)^(0+512),w
  6438  0F73  1D03               	skipz
  6439  0F74  2F77               	goto	u10555
  6440  0F75  30FD               	movlw	253
  6441  0F76  0260               	subwf	(??_main+2)^(0+512),w
  6442  0F77                     u10555:	
  6443  0F77  1803               	skipnc
  6444  0F78  2FC3               	goto	l9464
  6445  0F79                     l9460:	
  6446                           
  6447                           ;main.c: 186: knob5_prev = knob_5_pos;
  6448  0F79  0023               	movlb	3	; select bank3
  6449  0F7A  0835               	movf	(_knob_5_pos+1)^(0+384),w
  6450  0F7B  00D6               	movwf	(_knob5_prev+1)^(0+384)	;volatile
  6451  0F7C  0834               	movf	_knob_5_pos^(0+384),w
  6452  0F7D  00D5               	movwf	_knob5_prev^(0+384)	;volatile
  6453                           
  6454                           ;main.c: 187: adjusted_pot_value = (int)map(knob5_prev, 0, 1023, 1275, 0);
  6455  0F7E  3000               	movlw	0
  6456  0F7F  0021               	movlb	1	; select bank1
  6457  0F80  00EA               	movwf	map@out_max^(0+128)
  6458  0F81  3000               	movlw	0
  6459  0F82  00EB               	movwf	(map@out_max+1)^(0+128)
  6460  0F83  3000               	movlw	0
  6461  0F84  00EC               	movwf	(map@out_max+2)^(0+128)
  6462  0F85  3060               	movlw	96
  6463  0F86  00E7               	movwf	map@out_min^(0+128)
  6464  0F87  309F               	movlw	159
  6465  0F88  00E8               	movwf	(map@out_min+1)^(0+128)
  6466  0F89  3044               	movlw	68
  6467  0F8A  00E9               	movwf	(map@out_min+2)^(0+128)
  6468  0F8B  30C0               	movlw	192
  6469  0F8C  00E4               	movwf	map@in_max^(0+128)
  6470  0F8D  307F               	movlw	127
  6471  0F8E  00E5               	movwf	(map@in_max+1)^(0+128)
  6472  0F8F  3044               	movlw	68
  6473  0F90  00E6               	movwf	(map@in_max+2)^(0+128)
  6474  0F91  3000               	movlw	0
  6475  0F92  00E1               	movwf	map@in_min^(0+128)
  6476  0F93  3000               	movlw	0
  6477  0F94  00E2               	movwf	(map@in_min+1)^(0+128)
  6478  0F95  3000               	movlw	0
  6479  0F96  00E3               	movwf	(map@in_min+2)^(0+128)
  6480  0F97  0023               	movlb	3	; select bank3
  6481  0F98  0856               	movf	(_knob5_prev+1)^(0+384),w	;volatile
  6482  0F99  0021               	movlb	1	; select bank1
  6483  0F9A  00A9               	movwf	(___awtoft@c+1)^(0+128)
  6484  0F9B  0023               	movlb	3	; select bank3
  6485  0F9C  0855               	movf	_knob5_prev^(0+384),w	;volatile
  6486  0F9D  0021               	movlb	1	; select bank1
  6487  0F9E  00A8               	movwf	___awtoft@c^(0+128)
  6488  0F9F  31AD  25E4  318B   	fcall	___awtoft
  6489  0FA2  0021               	movlb	1	; select bank1
  6490  0FA3  0828               	movf	?___awtoft^(0+128),w
  6491  0FA4  00DE               	movwf	map@x^(0+128)
  6492  0FA5  0829               	movf	(?___awtoft+1)^(0+128),w
  6493  0FA6  00DF               	movwf	(map@x+1)^(0+128)
  6494  0FA7  082A               	movf	(?___awtoft+2)^(0+128),w
  6495  0FA8  00E0               	movwf	(map@x+2)^(0+128)
  6496  0FA9  319A  2211  318B   	fcall	_map
  6497  0FAC  0021               	movlb	1	; select bank1
  6498  0FAD  085E               	movf	?_map^(0+128),w
  6499  0FAE  0022               	movlb	2	; select bank2
  6500  0FAF  00A0               	movwf	___fttol@f1^(0+256)
  6501  0FB0  0021               	movlb	1	; select bank1
  6502  0FB1  085F               	movf	(?_map+1)^(0+128),w
  6503  0FB2  0022               	movlb	2	; select bank2
  6504  0FB3  00A1               	movwf	(___fttol@f1+1)^(0+256)
  6505  0FB4  0021               	movlb	1	; select bank1
  6506  0FB5  0860               	movf	(?_map+2)^(0+128),w
  6507  0FB6  0022               	movlb	2	; select bank2
  6508  0FB7  00A2               	movwf	(___fttol@f1+2)^(0+256)
  6509  0FB8  3199  218A  318B   	fcall	___fttol
  6510  0FBB  0022               	movlb	2	; select bank2
  6511  0FBC  0821               	movf	(?___fttol^(0+256)+1),w
  6512  0FBD  0024               	movlb	4	; select bank4
  6513  0FBE  00C6               	movwf	(_adjusted_pot_value+1)^(0+512)
  6514  0FBF  0022               	movlb	2	; select bank2
  6515  0FC0  0820               	movf	?___fttol^(0+256),w
  6516  0FC1  0024               	movlb	4	; select bank4
  6517  0FC2  00C5               	movwf	_adjusted_pot_value^(0+512)
  6518  0FC3                     l9464:	
  6519                           
  6520                           ;main.c: 188: }
  6521                           ;main.c: 193: if (mod_time_changed == 1) {
  6522  0FC3  0023               	movlb	3	; select bank3
  6523  0FC4  0364               	decf	_mod_time_changed^(0+384),w
  6524  0FC5  1D03               	btfss	3,2
  6525  0FC6  2FF6               	goto	l9476
  6526                           
  6527                           ;main.c: 195: delay_time = baseline_mod_time;
  6528  0FC7  0020               	movlb	0	; select bank0
  6529  0FC8  0843               	movf	_baseline_mod_time+3,w	;volatile
  6530  0FC9  00C7               	movwf	_delay_time+3	;volatile
  6531  0FCA  0842               	movf	_baseline_mod_time+2,w	;volatile
  6532  0FCB  00C6               	movwf	_delay_time+2	;volatile
  6533  0FCC  0841               	movf	_baseline_mod_time+1,w	;volatile
  6534  0FCD  00C5               	movwf	_delay_time+1	;volatile
  6535  0FCE  0840               	movf	_baseline_mod_time,w	;volatile
  6536  0FCF  00C4               	movwf	_delay_time	;volatile
  6537                           
  6538                           ;main.c: 196: delay_time = set_subdivision(baseline_mod_time, top_push_state);
  6539  0FD0  0841               	movf	_baseline_mod_time+1,w	;volatile
  6540  0FD1  0022               	movlb	2	; select bank2
  6541  0FD2  00AF               	movwf	(set_subdivision@x+1)^(0+256)
  6542  0FD3  0020               	movlb	0	; select bank0
  6543  0FD4  0840               	movf	_baseline_mod_time,w	;volatile
  6544  0FD5  0022               	movlb	2	; select bank2
  6545  0FD6  00AE               	movwf	set_subdivision@x^(0+256)
  6546  0FD7  0020               	movlb	0	; select bank0
  6547  0FD8  084D               	movf	_top_push_state+1,w
  6548  0FD9  0022               	movlb	2	; select bank2
  6549  0FDA  00B1               	movwf	(set_subdivision@y+1)^(0+256)
  6550  0FDB  0020               	movlb	0	; select bank0
  6551  0FDC  084C               	movf	_top_push_state,w
  6552  0FDD  0022               	movlb	2	; select bank2
  6553  0FDE  00B0               	movwf	set_subdivision@y^(0+256)
  6554  0FDF  319A  229C  318B   	fcall	_set_subdivision
  6555  0FE2  0022               	movlb	2	; select bank2
  6556  0FE3  082E               	movf	?_set_subdivision^(0+256),w
  6557  0FE4  0020               	movlb	0	; select bank0
  6558  0FE5  00C4               	movwf	_delay_time	;volatile
  6559  0FE6  0022               	movlb	2	; select bank2
  6560  0FE7  082F               	movf	(?_set_subdivision+1)^(0+256),w
  6561  0FE8  0020               	movlb	0	; select bank0
  6562  0FE9  00C5               	movwf	_delay_time+1	;volatile
  6563  0FEA  0D89               	rlf	9,f
  6564  0FEB  3B89               	subwfb	9,f
  6565  0FEC  0989               	comf	9,f
  6566  0FED  00C6               	movwf	_delay_time+2	;volatile
  6567  0FEE  00C7               	movwf	_delay_time+3	;volatile
  6568                           
  6569                           ;main.c: 197: getModulationDelayTime();
  6570  0FEF  31A4  24B6  318B   	fcall	_getModulationDelayTime
  6571                           
  6572                           ;main.c: 198: modulation_changed = 1;
  6573  0FF2  0023               	movlb	3	; select bank3
  6574  0FF3  01C7               	clrf	_modulation_changed^(0+384)
  6575  0FF4  0AC7               	incf	_modulation_changed^(0+384),f
  6576                           
  6577                           ;main.c: 199: mod_time_changed = 0;
  6578  0FF5  01E4               	clrf	_mod_time_changed^(0+384)
  6579  0FF6                     l9476:	
  6580                           
  6581                           ;main.c: 201: }
  6582                           ;main.c: 204: if (modulation_changed == 1) {
  6583  0FF6  0347               	decf	_modulation_changed^(0+384),w
  6584  0FF7  1D03               	btfss	3,2
  6585  0FF8  2B9E               	goto	l9370
  6586                           
  6587                           ;main.c: 205: updateModulationArray();
  6588  0FF9  3183  239B  318B   	fcall	_updateModulationArray
  6589                           
  6590                           ;main.c: 206: isInitialized = 1;
  6591  0FFC  0023               	movlb	3	; select bank3
  6592  0FFD  01C1               	clrf	_isInitialized^(0+384)
  6593  0FFE  0AC1               	incf	_isInitialized^(0+384),f
  6594  0FFF  2B9E               	goto	l9370
  6595  1000                     __end_of_main:	
  6596                           
  6597                           	psect	text1
  6598  255D                     __ptext1:	
  6599 ;; *************** function _update_selectMode *****************
  6600 ;; Defined at:
  6601 ;;		line 139 in file "tactiles.c"
  6602 ;; Parameters:    Size  Location     Type
  6603 ;;		None
  6604 ;; Auto vars:     Size  Location     Type
  6605 ;;		None
  6606 ;; Return value:  Size  Location     Type
  6607 ;;                  1    wreg      void 
  6608 ;; Registers used:
  6609 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6610 ;; Tracked objects:
  6611 ;;		On entry : 0/0
  6612 ;;		On exit  : 0/0
  6613 ;;		Unchanged: 0/0
  6614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6616 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6617 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6618 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6619 ;;Total ram usage:        1 bytes
  6620 ;; Hardware stack levels used:    1
  6621 ;; Hardware stack levels required when called:    5
  6622 ;; This function calls:
  6623 ;;		_setExpressionDisplay
  6624 ;;		_setPresetDisplay
  6625 ;; This function is called by:
  6626 ;;		_main
  6627 ;; This function uses a non-reentrant model
  6628 ;;
  6629                           
  6630                           
  6631                           ;psect for function _update_selectMode
  6632  255D                     _update_selectMode:	
  6633                           
  6634                           ;tactiles.c: 140: if (mode2_state == 0 && presetSaveMode != 1) {
  6635                           
  6636                           ;incstack = 0
  6637                           ; Regs used in _update_selectMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6638  255D  0020               	movlb	0	; select bank0
  6639  255E  085E               	movf	_mode2_state,w
  6640  255F  1D03               	btfss	3,2
  6641  2560  2D64               	goto	l1030
  6642  2561  035F               	decf	_presetSaveMode,w
  6643  2562  1D03               	btfss	3,2
  6644  2563  0008               	return
  6645  2564                     l1030:	
  6646                           ;tactiles.c: 142: return;
  6647                           
  6648                           
  6649                           ;tactiles.c: 143: }
  6650                           ;tactiles.c: 144: if (PORTDbits.RD7 == 0) {
  6651  2564  1B8F               	btfsc	15,7	;volatile
  6652  2565  2DB2               	goto	l8906
  6653                           
  6654                           ;tactiles.c: 145: debounce_mode1++;
  6655  2566  3001               	movlw	1
  6656  2567  0024               	movlb	4	; select bank4
  6657  2568  07CB               	addwf	_debounce_mode1^(0+512),f
  6658  2569  3000               	movlw	0
  6659  256A  3DCC               	addwfc	(_debounce_mode1+1)^(0+512),f
  6660                           
  6661                           ;tactiles.c: 146: if (debounce_mode1 > 25) {
  6662  256B  084C               	movf	(_debounce_mode1+1)^(0+512),w
  6663  256C  3A80               	xorlw	128
  6664  256D  0021               	movlb	1	; select bank1
  6665  256E  00A7               	movwf	??_update_selectMode^(0+128)
  6666  256F  3080               	movlw	128
  6667  2570  0227               	subwf	??_update_selectMode^(0+128),w
  6668  2571  1D03               	skipz
  6669  2572  2D76               	goto	u9545
  6670  2573  301A               	movlw	26
  6671  2574  0024               	movlb	4	; select bank4
  6672  2575  024B               	subwf	_debounce_mode1^(0+512),w
  6673  2576                     u9545:	
  6674  2576  1C03               	skipc
  6675  2577  0008               	return
  6676                           
  6677                           ;tactiles.c: 147: debounce_mode1 = 25;
  6678  2578  3019               	movlw	25
  6679  2579  0024               	movlb	4	; select bank4
  6680  257A  00CB               	movwf	_debounce_mode1^(0+512)
  6681  257B  3000               	movlw	0
  6682  257C  00CC               	movwf	(_debounce_mode1^(0+512)+1)
  6683                           
  6684                           ;tactiles.c: 148: if (mode2_state == presetModeCnst || presetSaveMode == 1) {
  6685  257D  0020               	movlb	0	; select bank0
  6686  257E  085E               	movf	_mode2_state,w
  6687  257F  0023               	movlb	3	; select bank3
  6688  2580  0665               	xorwf	_presetModeCnst^(0+384),w
  6689  2581  1903               	skipnz
  6690  2582  2D87               	goto	l8888
  6691  2583  0020               	movlb	0	; select bank0
  6692  2584  035F               	decf	_presetSaveMode,w
  6693  2585  1D03               	btfss	3,2
  6694  2586  2D98               	goto	l8896
  6695  2587                     l8888:	
  6696                           
  6697                           ;tactiles.c: 149: presetChannel++;
  6698  2587  3001               	movlw	1
  6699  2588  0021               	movlb	1	; select bank1
  6700  2589  00A7               	movwf	??_update_selectMode^(0+128)
  6701  258A  0827               	movf	??_update_selectMode^(0+128),w
  6702  258B  0022               	movlb	2	; select bank2
  6703  258C  07EC               	addwf	_presetChannel^(0+256),f
  6704                           
  6705                           ;tactiles.c: 150: if (presetChannel > 10) {
  6706  258D  300B               	movlw	11
  6707  258E  026C               	subwf	_presetChannel^(0+256),w
  6708  258F  1C03               	skipc
  6709  2590  2D93               	goto	l8894
  6710                           
  6711                           ;tactiles.c: 151: presetChannel = 1;
  6712  2591  01EC               	clrf	_presetChannel^(0+256)
  6713  2592  0AEC               	incf	_presetChannel^(0+256),f
  6714  2593                     l8894:	
  6715                           
  6716                           ;tactiles.c: 152: }
  6717                           ;tactiles.c: 153: setPresetDisplay(presetChannel);
  6718  2593  086C               	movf	_presetChannel^(0+256),w
  6719  2594  31A0  2035  31A5   	fcall	_setPresetDisplay
  6720                           
  6721                           ;tactiles.c: 154: } else if (mode2_state == expressModeCnst) {
  6722  2597  2DAE               	goto	l1041
  6723  2598                     l8896:	
  6724  2598  0020               	movlb	0	; select bank0
  6725  2599  085E               	movf	_mode2_state,w
  6726  259A  0023               	movlb	3	; select bank3
  6727  259B  0662               	xorwf	_expressModeCnst^(0+384),w
  6728  259C  1D03               	skipz
  6729  259D  2DAE               	goto	l1041
  6730                           
  6731                           ;tactiles.c: 155: expressionChannel++;
  6732  259E  3001               	movlw	1
  6733  259F  0021               	movlb	1	; select bank1
  6734  25A0  00A7               	movwf	??_update_selectMode^(0+128)
  6735  25A1  0827               	movf	??_update_selectMode^(0+128),w
  6736  25A2  0023               	movlb	3	; select bank3
  6737  25A3  07E3               	addwf	_expressionChannel^(0+384),f
  6738                           
  6739                           ;tactiles.c: 156: if (expressionChannel > 5) {
  6740  25A4  3006               	movlw	6
  6741  25A5  0263               	subwf	_expressionChannel^(0+384),w
  6742  25A6  1C03               	skipc
  6743  25A7  2DAA               	goto	l8904
  6744                           
  6745                           ;tactiles.c: 157: expressionChannel = 1;
  6746  25A8  01E3               	clrf	_expressionChannel^(0+384)
  6747  25A9  0AE3               	incf	_expressionChannel^(0+384),f
  6748  25AA                     l8904:	
  6749                           
  6750                           ;tactiles.c: 158: }
  6751                           ;tactiles.c: 159: setExpressionDisplay(expressionChannel);
  6752  25AA  0863               	movf	_expressionChannel^(0+384),w
  6753  25AB  31AD  250A  31A5   	fcall	_setExpressionDisplay
  6754  25AE                     l1041:	
  6755                           ;tactiles.c: 160: }
  6756                           ;tactiles.c: 167: while (PORTDbits.RD7 == 0) {
  6757                           
  6758  25AE  0020               	movlb	0	; select bank0
  6759  25AF  1B8F               	btfsc	15,7	;volatile
  6760  25B0  0008               	return
  6761  25B1  2DAE               	goto	l1041
  6762  25B2                     l8906:	
  6763                           ;tactiles.c: 168: }
  6764                           ;tactiles.c: 169: }
  6765                           ;tactiles.c: 170: } else {
  6766                           
  6767                           
  6768                           ;tactiles.c: 171: debounce_mode1 = 0;
  6769  25B2  0024               	movlb	4	; select bank4
  6770  25B3  01CB               	clrf	_debounce_mode1^(0+512)
  6771  25B4  01CC               	clrf	(_debounce_mode1+1)^(0+512)
  6772  25B5  0008               	return
  6773  25B6                     __end_of_update_selectMode:	
  6774                           
  6775                           	psect	text2
  6776  2FC8                     __ptext2:	
  6777 ;; *************** function _update_mode *****************
  6778 ;; Defined at:
  6779 ;;		line 87 in file "tactiles.c"
  6780 ;; Parameters:    Size  Location     Type
  6781 ;;		None
  6782 ;; Auto vars:     Size  Location     Type
  6783 ;;		None
  6784 ;; Return value:  Size  Location     Type
  6785 ;;                  1    wreg      void 
  6786 ;; Registers used:
  6787 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6788 ;; Tracked objects:
  6789 ;;		On entry : 0/0
  6790 ;;		On exit  : 0/0
  6791 ;;		Unchanged: 0/0
  6792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6795 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6796 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6797 ;;Total ram usage:        1 bytes
  6798 ;; Hardware stack levels used:    1
  6799 ;; Hardware stack levels required when called:    6
  6800 ;; This function calls:
  6801 ;;		_resetRingLEDs
  6802 ;;		_setPedalMode
  6803 ;; This function is called by:
  6804 ;;		_main
  6805 ;; This function uses a non-reentrant model
  6806 ;;
  6807                           
  6808                           
  6809                           ;psect for function _update_mode
  6810  2FC8                     _update_mode:	
  6811                           
  6812                           ;tactiles.c: 92: if (PORTCbits.RC0 == 0) {
  6813                           
  6814                           ;incstack = 0
  6815                           ; Regs used in _update_mode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6816  2FC8  0020               	movlb	0	; select bank0
  6817  2FC9  180E               	btfsc	14,0	;volatile
  6818  2FCA  2FFC               	goto	l8874
  6819                           
  6820                           ;tactiles.c: 95: debounce_mode2++;
  6821  2FCB  3001               	movlw	1
  6822  2FCC  0024               	movlb	4	; select bank4
  6823  2FCD  07CD               	addwf	_debounce_mode2^(0+512),f
  6824  2FCE  3000               	movlw	0
  6825  2FCF  3DCE               	addwfc	(_debounce_mode2+1)^(0+512),f
  6826                           
  6827                           ;tactiles.c: 96: if (debounce_mode2 > 25) {
  6828  2FD0  084E               	movf	(_debounce_mode2+1)^(0+512),w
  6829  2FD1  3A80               	xorlw	128
  6830  2FD2  0021               	movlb	1	; select bank1
  6831  2FD3  00A7               	movwf	??_update_mode^(0+128)
  6832  2FD4  3080               	movlw	128
  6833  2FD5  0227               	subwf	??_update_mode^(0+128),w
  6834  2FD6  1D03               	skipz
  6835  2FD7  2FDB               	goto	u9475
  6836  2FD8  301A               	movlw	26
  6837  2FD9  0024               	movlb	4	; select bank4
  6838  2FDA  024D               	subwf	_debounce_mode2^(0+512),w
  6839  2FDB                     u9475:	
  6840  2FDB  1C03               	skipc
  6841  2FDC  0008               	return
  6842                           
  6843                           ;tactiles.c: 97: debounce_mode2 = 25;
  6844  2FDD  3019               	movlw	25
  6845  2FDE  0024               	movlb	4	; select bank4
  6846  2FDF  00CD               	movwf	_debounce_mode2^(0+512)
  6847  2FE0  3000               	movlw	0
  6848  2FE1  00CE               	movwf	(_debounce_mode2^(0+512)+1)
  6849                           
  6850                           ;tactiles.c: 99: if (presetSaveMode == 1) {
  6851  2FE2  0020               	movlb	0	; select bank0
  6852  2FE3  035F               	decf	_presetSaveMode,w
  6853  2FE4  1D03               	btfss	3,2
  6854  2FE5  2FEB               	goto	l8866
  6855                           
  6856                           ;tactiles.c: 100: presetSaveMode = 0;
  6857  2FE6  01DF               	clrf	_presetSaveMode
  6858                           
  6859                           ;tactiles.c: 101: resetRingLEDs();
  6860  2FE7  31AD  2522  31AF   	fcall	_resetRingLEDs
  6861                           
  6862                           ;tactiles.c: 102: } else {
  6863  2FEA  2FF5               	goto	l8872
  6864  2FEB                     l8866:	
  6865                           
  6866                           ;tactiles.c: 103: mode2_state++;
  6867  2FEB  3001               	movlw	1
  6868  2FEC  0021               	movlb	1	; select bank1
  6869  2FED  00A7               	movwf	??_update_mode^(0+128)
  6870  2FEE  0827               	movf	??_update_mode^(0+128),w
  6871  2FEF  0020               	movlb	0	; select bank0
  6872  2FF0  07DE               	addwf	_mode2_state,f
  6873                           
  6874                           ;tactiles.c: 104: if (mode2_state > 2) {
  6875  2FF1  3003               	movlw	3
  6876  2FF2  025E               	subwf	_mode2_state,w
  6877  2FF3  1803               	btfsc	3,0
  6878                           
  6879                           ;tactiles.c: 105: mode2_state = 0;
  6880  2FF4  01DE               	clrf	_mode2_state
  6881  2FF5                     l8872:	
  6882                           
  6883                           ;tactiles.c: 106: }
  6884                           ;tactiles.c: 107: }
  6885                           ;tactiles.c: 109: setPedalMode();
  6886  2FF5  31AE  2606  31AF   	fcall	_setPedalMode
  6887  2FF8                     l1015:	
  6888                           ;tactiles.c: 110: while (PORTCbits.RC0 == 0) {
  6889                           
  6890  2FF8  0020               	movlb	0	; select bank0
  6891  2FF9  180E               	btfsc	14,0	;volatile
  6892  2FFA  0008               	return
  6893  2FFB  2FF8               	goto	l1015
  6894  2FFC                     l8874:	
  6895                           ;tactiles.c: 111: }
  6896                           ;tactiles.c: 112: }
  6897                           ;tactiles.c: 113: } else {
  6898                           
  6899                           
  6900                           ;tactiles.c: 114: debounce_mode2 = 0;
  6901  2FFC  0024               	movlb	4	; select bank4
  6902  2FFD  01CD               	clrf	_debounce_mode2^(0+512)
  6903  2FFE  01CE               	clrf	(_debounce_mode2+1)^(0+512)
  6904  2FFF  0008               	return
  6905  3000                     __end_of_update_mode:	
  6906                           
  6907                           	psect	text3
  6908  0610                     __ptext3:	
  6909 ;; *************** function _updateSwitchTap *****************
  6910 ;; Defined at:
  6911 ;;		line 48 in file "SwitchTap.c"
  6912 ;; Parameters:    Size  Location     Type
  6913 ;;		None
  6914 ;; Auto vars:     Size  Location     Type
  6915 ;;  tapCntDiviso    2   34[BANK1 ] int 
  6916 ;;  iCnt            1   36[BANK1 ] unsigned char 
  6917 ;; Return value:  Size  Location     Type
  6918 ;;                  1    wreg      void 
  6919 ;; Registers used:
  6920 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6921 ;; Tracked objects:
  6922 ;;		On entry : 0/0
  6923 ;;		On exit  : 0/0
  6924 ;;		Unchanged: 0/0
  6925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6927 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6928 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6929 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6930 ;;Total ram usage:        9 bytes
  6931 ;; Hardware stack levels used:    1
  6932 ;; Hardware stack levels required when called:    8
  6933 ;; This function calls:
  6934 ;;		___aldiv
  6935 ;;		_setDoublePressState
  6936 ;;		_setLongTapState
  6937 ;; This function is called by:
  6938 ;;		_main
  6939 ;; This function uses a non-reentrant model
  6940 ;;
  6941                           
  6942                           
  6943                           ;psect for function _updateSwitchTap
  6944  0610                     _updateSwitchTap:	
  6945                           
  6946                           ;SwitchTap.c: 49: uint8_t iCnt = 0;
  6947                           
  6948                           ;incstack = 0
  6949                           ; Regs used in _updateSwitchTap: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6950  0610  0021               	movlb	1	; select bank1
  6951  0611  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  6952                           
  6953                           ;SwitchTap.c: 57: if (PORTEbits.RE0 == 0) {
  6954  0612  0020               	movlb	0	; select bank0
  6955  0613  1810               	btfsc	16,0	;volatile
  6956  0614  2E1C               	goto	l9030
  6957                           
  6958                           ;SwitchTap.c: 58: if (switchTap_pressed > 0) {
  6959  0615  0022               	movlb	2	; select bank2
  6960  0616  086B               	movf	_switchTap_pressed^(0+256),w
  6961  0617  1903               	btfsc	3,2
  6962  0618  2E27               	goto	l1450
  6963                           
  6964                           ;SwitchTap.c: 59: switchTap_pressed--;
  6965  0619  3001               	movlw	1
  6966  061A  02EB               	subwf	_switchTap_pressed^(0+256),f
  6967                           
  6968                           ;SwitchTap.c: 60: }
  6969                           ;SwitchTap.c: 61: } else if (switchTap_pressed < 25) {
  6970  061B  2E27               	goto	l1450
  6971  061C                     l9030:	
  6972  061C  3019               	movlw	25
  6973  061D  0022               	movlb	2	; select bank2
  6974  061E  026B               	subwf	_switchTap_pressed^(0+256),w
  6975  061F  1803               	skipnc
  6976  0620  2E27               	goto	l1450
  6977                           
  6978                           ;SwitchTap.c: 62: switchTap_pressed++;
  6979  0621  3001               	movlw	1
  6980  0622  0021               	movlb	1	; select bank1
  6981  0623  00BC               	movwf	??_updateSwitchTap^(0+128)
  6982  0624  083C               	movf	??_updateSwitchTap^(0+128),w
  6983  0625  0022               	movlb	2	; select bank2
  6984  0626  07EB               	addwf	_switchTap_pressed^(0+256),f
  6985  0627                     l1450:	
  6986                           
  6987                           ;SwitchTap.c: 63: }
  6988                           ;SwitchTap.c: 69: if (switchTap_pressed == 0) {
  6989  0627  086B               	movf	_switchTap_pressed^(0+256),w
  6990  0628  1D03               	btfss	3,2
  6991  0629  2FDF               	goto	l9114
  6992                           
  6993                           ;SwitchTap.c: 73: if (tap_timer >= 1563) {
  6994  062A  0020               	movlb	0	; select bank0
  6995  062B  1BD5               	btfsc	_tap_timer+3,7	;volatile
  6996  062C  2EB3               	goto	l9074
  6997  062D  0855               	movf	_tap_timer+3,w	;volatile
  6998  062E  1D03               	btfss	3,2
  6999  062F  2E39               	goto	l9036
  7000  0630  0854               	movf	_tap_timer+2,w	;volatile
  7001  0631  1D03               	btfss	3,2
  7002  0632  2E39               	goto	l9036
  7003  0633  301B               	movlw	27
  7004  0634  0252               	subwf	_tap_timer,w	;volatile
  7005  0635  3006               	movlw	6
  7006  0636  3B53               	subwfb	_tap_timer+1,w	;volatile
  7007  0637  1C03               	btfss	3,0
  7008  0638  2EB3               	goto	l9074
  7009  0639                     l9036:	
  7010                           
  7011                           ;SwitchTap.c: 76: if (switchTap_down != 1) {
  7012  0639  0023               	movlb	3	; select bank3
  7013  063A  034B               	decf	_switchTap_down^(0+384),w
  7014  063B  1903               	btfsc	3,2
  7015  063C  2E78               	goto	l9052
  7016                           
  7017                           ;SwitchTap.c: 78: switchTap_down = 1;
  7018  063D  01CB               	clrf	_switchTap_down^(0+384)
  7019  063E  0ACB               	incf	_switchTap_down^(0+384),f
  7020                           
  7021                           ;SwitchTap.c: 79: tap_timer = 0;
  7022  063F  3000               	movlw	0
  7023  0640  0020               	movlb	0	; select bank0
  7024  0641  00D5               	movwf	_tap_timer+3	;volatile
  7025  0642  3000               	movlw	0
  7026  0643  00D4               	movwf	_tap_timer+2	;volatile
  7027  0644  3000               	movlw	0
  7028  0645  00D3               	movwf	_tap_timer+1	;volatile
  7029  0646  3000               	movlw	0
  7030  0647  00D2               	movwf	_tap_timer	;volatile
  7031                           
  7032                           ;SwitchTap.c: 80: tap_iteration = 1;
  7033  0648  3001               	movlw	1
  7034  0649  0023               	movlb	3	; select bank3
  7035  064A  00DD               	movwf	_tap_iteration^(0+384)
  7036  064B  3000               	movlw	0
  7037  064C  00DE               	movwf	(_tap_iteration^(0+384)+1)
  7038                           
  7039                           ;SwitchTap.c: 81: tap_total = 0;
  7040  064D  3000               	movlw	0
  7041  064E  0024               	movlb	4	; select bank4
  7042  064F  00C0               	movwf	(_tap_total+3)^(0+512)
  7043  0650  3000               	movlw	0
  7044  0651  00BF               	movwf	(_tap_total+2)^(0+512)
  7045  0652  3000               	movlw	0
  7046  0653  00BE               	movwf	(_tap_total+1)^(0+512)
  7047  0654  3000               	movlw	0
  7048  0655  00BD               	movwf	_tap_total^(0+512)
  7049                           
  7050                           ;SwitchTap.c: 82: mod_time_changed = 0;
  7051  0656  0023               	movlb	3	; select bank3
  7052  0657  01E4               	clrf	_mod_time_changed^(0+384)
  7053                           
  7054                           ;SwitchTap.c: 84: for (iCnt = 1; iCnt <= num_taps; iCnt++) {
  7055  0658  0021               	movlb	1	; select bank1
  7056  0659  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  7057  065A  0AC4               	incf	updateSwitchTap@iCnt^(0+128),f
  7058  065B                     l9050:	
  7059  065B  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7060  065C  0020               	movlb	0	; select bank0
  7061  065D  0250               	subwf	_num_taps,w
  7062  065E  1C03               	btfss	3,0
  7063  065F  2E78               	goto	l9052
  7064                           
  7065                           ;SwitchTap.c: 85: tap_history[iCnt] = 0;
  7066  0660  0021               	movlb	1	; select bank1
  7067  0661  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7068  0662  00BC               	movwf	??_updateSwitchTap^(0+128)
  7069  0663  3001               	movlw	1
  7070  0664                     u9915:	
  7071  0664  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7072  0665  3EFF               	addlw	-1
  7073  0666  1D03               	skipz
  7074  0667  2E64               	goto	u9915
  7075  0668  353C               	lslf	??_updateSwitchTap^(0+128),w
  7076  0669  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7077  066A  0086               	movwf	6
  7078  066B  3002               	movlw	2	; select bank4/5
  7079  066C  0087               	movwf	7
  7080  066D  3000               	movlw	0
  7081  066E  3FC0               	movwi [0]fsr1
  7082  066F  3000               	movlw	0
  7083  0670  3FC1               	movwi [1]fsr1
  7084  0671  3FC2               	movwi [2]fsr1
  7085  0672  3FC3               	movwi [3]fsr1
  7086  0673  3001               	movlw	1
  7087  0674  00BC               	movwf	??_updateSwitchTap^(0+128)
  7088  0675  083C               	movf	??_updateSwitchTap^(0+128),w
  7089  0676  07C4               	addwf	updateSwitchTap@iCnt^(0+128),f
  7090  0677  2E5B               	goto	l9050
  7091  0678                     l9052:	
  7092                           
  7093                           ;SwitchTap.c: 86: }
  7094                           ;SwitchTap.c: 87: }
  7095                           ;SwitchTap.c: 90: if (longTap_start == 0) {
  7096  0678  0023               	movlb	3	; select bank3
  7097  0679  0845               	movf	_longTap_start^(0+384),w
  7098  067A  1D03               	btfss	3,2
  7099  067B  2E83               	goto	l9058
  7100                           
  7101                           ;SwitchTap.c: 91: longTap_start = 1;
  7102  067C  01C5               	clrf	_longTap_start^(0+384)
  7103  067D  0AC5               	incf	_longTap_start^(0+384),f
  7104                           
  7105                           ;SwitchTap.c: 92: longTap_state = 0;
  7106  067E  0020               	movlb	0	; select bank0
  7107  067F  01CF               	clrf	_longTap_state	;volatile
  7108                           
  7109                           ;SwitchTap.c: 93: longTap_timer = 0;
  7110  0680  0023               	movlb	3	; select bank3
  7111  0681  01B8               	clrf	_longTap_timer^(0+384)	;volatile
  7112  0682  01B9               	clrf	(_longTap_timer+1)^(0+384)	;volatile
  7113  0683                     l9058:	
  7114                           
  7115                           ;SwitchTap.c: 94: }
  7116                           ;SwitchTap.c: 98: if (longTap_timer >= long_press_limit && longTap_state == 0 && doubleT
      +                          ap_state == 0) {
  7117  0683  0020               	movlb	0	; select bank0
  7118  0684  084B               	movf	_long_press_limit+1,w
  7119  0685  0023               	movlb	3	; select bank3
  7120  0686  0239               	subwf	(_longTap_timer+1)^(0+384),w	;volatile
  7121  0687  1D03               	skipz
  7122  0688  2E8D               	goto	u9945
  7123  0689  0020               	movlb	0	; select bank0
  7124  068A  084A               	movf	_long_press_limit,w
  7125  068B  0023               	movlb	3	; select bank3
  7126  068C  0238               	subwf	_longTap_timer^(0+384),w	;volatile
  7127  068D                     u9945:	
  7128  068D  1C03               	skipc
  7129  068E  0008               	return
  7130  068F  0020               	movlb	0	; select bank0
  7131  0690  084F               	movf	_longTap_state,w	;volatile
  7132  0691  1D03               	btfss	3,2
  7133  0692  0008               	return
  7134  0693  085C               	movf	_doubleTap_state,w	;volatile
  7135  0694  1D03               	btfss	3,2
  7136  0695  0008               	return
  7137                           
  7138                           ;SwitchTap.c: 100: longTap_timer = long_press_limit;
  7139  0696  084B               	movf	_long_press_limit+1,w
  7140  0697  0023               	movlb	3	; select bank3
  7141  0698  00B9               	movwf	(_longTap_timer+1)^(0+384)	;volatile
  7142  0699  0020               	movlb	0	; select bank0
  7143  069A  084A               	movf	_long_press_limit,w
  7144  069B  0023               	movlb	3	; select bank3
  7145  069C  00B8               	movwf	_longTap_timer^(0+384)	;volatile
  7146                           
  7147                           ;SwitchTap.c: 102: LATBbits.LATB4 = 0;
  7148  069D  0022               	movlb	2	; select bank2
  7149  069E  120D               	bcf	13,4	;volatile
  7150                           
  7151                           ;SwitchTap.c: 103: if (longBypass_start != 1) {
  7152  069F  0023               	movlb	3	; select bank3
  7153  06A0  0344               	decf	_longBypass_start^(0+384),w
  7154  06A1  1903               	btfsc	3,2
  7155  06A2  2EAB               	goto	l9072
  7156                           
  7157                           ;SwitchTap.c: 104: setLongTapState(1);
  7158  06A3  3001               	movlw	1
  7159  06A4  0021               	movlb	1	; select bank1
  7160  06A5  00A0               	movwf	setLongTapState@f_state^(0+128)
  7161  06A6  3000               	movlw	0
  7162  06A7  00A1               	movwf	(setLongTapState@f_state^(0+128)+1)
  7163  06A8  31AD  253C         	fcall	_setLongTapState
  7164                           
  7165                           ;SwitchTap.c: 105: } else {
  7166  06AA  0008               	return
  7167  06AB                     l9072:	
  7168                           
  7169                           ;SwitchTap.c: 106: setDoublePressState(1);
  7170  06AB  3001               	movlw	1
  7171  06AC  0021               	movlb	1	; select bank1
  7172  06AD  00B8               	movwf	setDoublePressState@f_state^(0+128)
  7173  06AE  3000               	movlw	0
  7174  06AF  00B9               	movwf	(setDoublePressState@f_state^(0+128)+1)
  7175  06B0  31A1  2160         	fcall	_setDoublePressState
  7176                           
  7177                           ;SwitchTap.c: 107: }
  7178                           ;SwitchTap.c: 108: }
  7179                           ;SwitchTap.c: 110: } else if (tap_timer < 1563 && longTap_state == 0 && switchTap_down !
      +                          = 1) {
  7180  06B2  0008               	return
  7181  06B3                     l9074:	
  7182  06B3  0020               	movlb	0	; select bank0
  7183  06B4  1BD5               	btfsc	_tap_timer+3,7	;volatile
  7184  06B5  2EC2               	goto	l9076
  7185  06B6  0855               	movf	_tap_timer+3,w	;volatile
  7186  06B7  1D03               	btfss	3,2
  7187  06B8  0008               	return
  7188  06B9  0854               	movf	_tap_timer+2,w	;volatile
  7189  06BA  1D03               	btfss	3,2
  7190  06BB  0008               	return
  7191  06BC  301B               	movlw	27
  7192  06BD  0252               	subwf	_tap_timer,w	;volatile
  7193  06BE  3006               	movlw	6
  7194  06BF  3B53               	subwfb	_tap_timer+1,w	;volatile
  7195  06C0  1803               	btfsc	3,0
  7196  06C1  0008               	return
  7197  06C2                     l9076:	
  7198  06C2  084F               	movf	_longTap_state,w	;volatile
  7199  06C3  1D03               	btfss	3,2
  7200  06C4  0008               	return
  7201  06C5  0023               	movlb	3	; select bank3
  7202  06C6  034B               	decf	_switchTap_down^(0+384),w
  7203  06C7  1903               	btfsc	3,2
  7204  06C8  0008               	return
  7205                           
  7206                           ;SwitchTap.c: 112: switchTap_down = 1;
  7207  06C9  01CB               	clrf	_switchTap_down^(0+384)
  7208  06CA  0ACB               	incf	_switchTap_down^(0+384),f
  7209                           
  7210                           ;SwitchTap.c: 113: if (tap_timer >= 1172) {
  7211  06CB  0020               	movlb	0	; select bank0
  7212  06CC  1BD5               	btfsc	_tap_timer+3,7	;volatile
  7213  06CD  2EE2               	goto	l1464
  7214  06CE  0855               	movf	_tap_timer+3,w	;volatile
  7215  06CF  1D03               	btfss	3,2
  7216  06D0  2EDA               	goto	l9084
  7217  06D1  0854               	movf	_tap_timer+2,w	;volatile
  7218  06D2  1D03               	btfss	3,2
  7219  06D3  2EDA               	goto	l9084
  7220  06D4  3094               	movlw	148
  7221  06D5  0252               	subwf	_tap_timer,w	;volatile
  7222  06D6  3004               	movlw	4
  7223  06D7  3B53               	subwfb	_tap_timer+1,w	;volatile
  7224  06D8  1C03               	btfss	3,0
  7225  06D9  2EE2               	goto	l1464
  7226  06DA                     l9084:	
  7227                           
  7228                           ;SwitchTap.c: 114: tap_timer = 1172;
  7229  06DA  3000               	movlw	0
  7230  06DB  00D5               	movwf	_tap_timer+3	;volatile
  7231  06DC  3000               	movlw	0
  7232  06DD  00D4               	movwf	_tap_timer+2	;volatile
  7233  06DE  3004               	movlw	4
  7234  06DF  00D3               	movwf	_tap_timer+1	;volatile
  7235  06E0  3094               	movlw	148
  7236  06E1  00D2               	movwf	_tap_timer	;volatile
  7237  06E2                     l1464:	
  7238                           
  7239                           ;SwitchTap.c: 115: }
  7240                           ;SwitchTap.c: 117: int tapCntDivisor = num_taps;
  7241  06E2  0850               	movf	_num_taps,w
  7242  06E3  0021               	movlb	1	; select bank1
  7243  06E4  00BC               	movwf	??_updateSwitchTap^(0+128)
  7244  06E5  01BD               	clrf	(??_updateSwitchTap^(0+128)+1)
  7245  06E6  083C               	movf	??_updateSwitchTap^(0+128),w
  7246  06E7  00C2               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  7247  06E8  083D               	movf	(??_updateSwitchTap+1)^(0+128),w
  7248  06E9  00C3               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  7249                           
  7250                           ;SwitchTap.c: 118: if (tap_iteration <= num_taps) {
  7251  06EA  0023               	movlb	3	; select bank3
  7252  06EB  085E               	movf	(_tap_iteration+1)^(0+384),w
  7253  06EC  3A80               	xorlw	128
  7254  06ED  3C80               	sublw	128
  7255  06EE  1D03               	skipz
  7256  06EF  2EF3               	goto	u10025
  7257  06F0  085D               	movf	_tap_iteration^(0+384),w
  7258  06F1  0020               	movlb	0	; select bank0
  7259  06F2  0250               	subwf	_num_taps,w
  7260  06F3                     u10025:	
  7261  06F3  1C03               	skipc
  7262  06F4  2F25               	goto	l9092
  7263                           
  7264                           ;SwitchTap.c: 119: tap_total += tap_timer;
  7265  06F5  0020               	movlb	0	; select bank0
  7266  06F6  0852               	movf	_tap_timer,w	;volatile
  7267  06F7  0024               	movlb	4	; select bank4
  7268  06F8  07BD               	addwf	_tap_total^(0+512),f
  7269  06F9  0020               	movlb	0	; select bank0
  7270  06FA  0853               	movf	_tap_timer+1,w	;volatile
  7271  06FB  0024               	movlb	4	; select bank4
  7272  06FC  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  7273  06FD  0020               	movlb	0	; select bank0
  7274  06FE  0854               	movf	_tap_timer+2,w	;volatile
  7275  06FF  0024               	movlb	4	; select bank4
  7276  0700  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  7277  0701  0020               	movlb	0	; select bank0
  7278  0702  0855               	movf	_tap_timer+3,w	;volatile
  7279  0703  0024               	movlb	4	; select bank4
  7280  0704  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  7281                           
  7282                           ;SwitchTap.c: 120: tap_history[tap_iteration] = tap_timer;
  7283  0705  0023               	movlb	3	; select bank3
  7284  0706  085D               	movf	_tap_iteration^(0+384),w
  7285  0707  0021               	movlb	1	; select bank1
  7286  0708  00BC               	movwf	??_updateSwitchTap^(0+128)
  7287  0709  3001               	movlw	1
  7288  070A                     u10035:	
  7289  070A  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7290  070B  3EFF               	addlw	-1
  7291  070C  1D03               	skipz
  7292  070D  2F0A               	goto	u10035
  7293  070E  353C               	lslf	??_updateSwitchTap^(0+128),w
  7294  070F  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7295  0710  0086               	movwf	6
  7296  0711  3002               	movlw	2	; select bank4/5
  7297  0712  0087               	movwf	7
  7298  0713  0020               	movlb	0	; select bank0
  7299  0714  0852               	movf	_tap_timer,w	;volatile
  7300  0715  3FC0               	movwi [0]fsr1
  7301  0716  0853               	movf	_tap_timer+1,w	;volatile
  7302  0717  3FC1               	movwi [1]fsr1
  7303  0718  0854               	movf	_tap_timer+2,w	;volatile
  7304  0719  3FC2               	movwi [2]fsr1
  7305  071A  0855               	movf	_tap_timer+3,w	;volatile
  7306  071B  3FC3               	movwi [3]fsr1
  7307                           
  7308                           ;SwitchTap.c: 121: tapCntDivisor = tap_iteration;
  7309  071C  0023               	movlb	3	; select bank3
  7310  071D  085E               	movf	(_tap_iteration+1)^(0+384),w
  7311  071E  0021               	movlb	1	; select bank1
  7312  071F  00C3               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  7313  0720  0023               	movlb	3	; select bank3
  7314  0721  085D               	movf	_tap_iteration^(0+384),w
  7315  0722  0021               	movlb	1	; select bank1
  7316  0723  00C2               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  7317                           
  7318                           ;SwitchTap.c: 122: } else {
  7319  0724  2FA1               	goto	l9106
  7320  0725                     l9092:	
  7321                           
  7322                           ;SwitchTap.c: 123: tap_total = 0;
  7323  0725  3000               	movlw	0
  7324  0726  0024               	movlb	4	; select bank4
  7325  0727  00C0               	movwf	(_tap_total+3)^(0+512)
  7326  0728  3000               	movlw	0
  7327  0729  00BF               	movwf	(_tap_total+2)^(0+512)
  7328  072A  3000               	movlw	0
  7329  072B  00BE               	movwf	(_tap_total+1)^(0+512)
  7330  072C  3000               	movlw	0
  7331  072D  00BD               	movwf	_tap_total^(0+512)
  7332                           
  7333                           ;SwitchTap.c: 124: for (iCnt = 1; iCnt < num_taps; iCnt++) {
  7334  072E  0021               	movlb	1	; select bank1
  7335  072F  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  7336  0730  0AC4               	incf	updateSwitchTap@iCnt^(0+128),f
  7337  0731                     l9100:	
  7338  0731  0020               	movlb	0	; select bank0
  7339  0732  0850               	movf	_num_taps,w
  7340  0733  0021               	movlb	1	; select bank1
  7341  0734  0244               	subwf	updateSwitchTap@iCnt^(0+128),w
  7342  0735  1803               	btfsc	3,0
  7343  0736  2F7B               	goto	l9102
  7344                           
  7345                           ;SwitchTap.c: 125: tap_history[iCnt] = tap_history[iCnt + 1];
  7346  0737  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7347  0738  00BC               	movwf	??_updateSwitchTap^(0+128)
  7348  0739  3001               	movlw	1
  7349  073A                     u10045:	
  7350  073A  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7351  073B  3EFF               	addlw	-1
  7352  073C  1D03               	skipz
  7353  073D  2F3A               	goto	u10045
  7354  073E  353C               	lslf	??_updateSwitchTap^(0+128),w
  7355  073F  3E04               	addlw	4
  7356  0740  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7357  0741  0086               	movwf	6
  7358  0742  3002               	movlw	2	; select bank4/5
  7359  0743  0087               	movwf	7
  7360  0744  3F40               	moviw [0]fsr1
  7361  0745  00BD               	movwf	(??_updateSwitchTap+1)^(0+128)
  7362  0746  3F41               	moviw [1]fsr1
  7363  0747  00BE               	movwf	((??_updateSwitchTap+1)^(0+128)+1)
  7364  0748  3F42               	moviw [2]fsr1
  7365  0749  00BF               	movwf	((??_updateSwitchTap+1)^(0+128)+2)
  7366  074A  3F43               	moviw [3]fsr1
  7367  074B  00C0               	movwf	((??_updateSwitchTap+1)^(0+128)+3)
  7368  074C  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7369  074D  00C1               	movwf	(??_updateSwitchTap+5)^(0+128)
  7370  074E  3001               	movlw	1
  7371  074F                     u10055:	
  7372  074F  35C1               	lslf	(??_updateSwitchTap+5)^(0+128),f
  7373  0750  3EFF               	addlw	-1
  7374  0751  1D03               	skipz
  7375  0752  2F4F               	goto	u10055
  7376  0753  3541               	lslf	(??_updateSwitchTap+5)^(0+128),w
  7377  0754  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7378  0755  0086               	movwf	6
  7379  0756  3002               	movlw	2	; select bank4/5
  7380  0757  0087               	movwf	7
  7381  0758  083D               	movf	(??_updateSwitchTap+1)^(0+128),w
  7382  0759  3FC0               	movwi [0]fsr1
  7383  075A  083E               	movf	(??_updateSwitchTap+2)^(0+128),w
  7384  075B  3FC1               	movwi [1]fsr1
  7385  075C  083F               	movf	(??_updateSwitchTap+3)^(0+128),w
  7386  075D  3FC2               	movwi [2]fsr1
  7387  075E  0840               	movf	(??_updateSwitchTap+4)^(0+128),w
  7388  075F  3FC3               	movwi [3]fsr1
  7389                           
  7390                           ;SwitchTap.c: 126: tap_total += tap_history[iCnt];
  7391  0760  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7392  0761  00BC               	movwf	??_updateSwitchTap^(0+128)
  7393  0762  3001               	movlw	1
  7394  0763                     u10065:	
  7395  0763  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7396  0764  3EFF               	addlw	-1
  7397  0765  1D03               	skipz
  7398  0766  2F63               	goto	u10065
  7399  0767  353C               	lslf	??_updateSwitchTap^(0+128),w
  7400  0768  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7401  0769  0086               	movwf	6
  7402  076A  3002               	movlw	2	; select bank4/5
  7403  076B  0087               	movwf	7
  7404  076C  3F40               	moviw [0]fsr1
  7405  076D  0024               	movlb	4	; select bank4
  7406  076E  07BD               	addwf	_tap_total^(0+512),f
  7407  076F  3F41               	moviw [1]fsr1
  7408  0770  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  7409  0771  3F42               	moviw [2]fsr1
  7410  0772  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  7411  0773  3F43               	moviw [3]fsr1
  7412  0774  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  7413  0775  3001               	movlw	1
  7414  0776  0021               	movlb	1	; select bank1
  7415  0777  00BC               	movwf	??_updateSwitchTap^(0+128)
  7416  0778  083C               	movf	??_updateSwitchTap^(0+128),w
  7417  0779  07C4               	addwf	updateSwitchTap@iCnt^(0+128),f
  7418  077A  2F31               	goto	l9100
  7419  077B                     l9102:	
  7420                           
  7421                           ;SwitchTap.c: 127: }
  7422                           ;SwitchTap.c: 128: tap_history[num_taps] = tap_timer;
  7423  077B  0020               	movlb	0	; select bank0
  7424  077C  0850               	movf	_num_taps,w
  7425  077D  0021               	movlb	1	; select bank1
  7426  077E  00BC               	movwf	??_updateSwitchTap^(0+128)
  7427  077F  3001               	movlw	1
  7428  0780                     u10085:	
  7429  0780  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7430  0781  3EFF               	addlw	-1
  7431  0782  1D03               	skipz
  7432  0783  2F80               	goto	u10085
  7433  0784  353C               	lslf	??_updateSwitchTap^(0+128),w
  7434  0785  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7435  0786  0086               	movwf	6
  7436  0787  3002               	movlw	2	; select bank4/5
  7437  0788  0087               	movwf	7
  7438  0789  0020               	movlb	0	; select bank0
  7439  078A  0852               	movf	_tap_timer,w	;volatile
  7440  078B  3FC0               	movwi [0]fsr1
  7441  078C  0853               	movf	_tap_timer+1,w	;volatile
  7442  078D  3FC1               	movwi [1]fsr1
  7443  078E  0854               	movf	_tap_timer+2,w	;volatile
  7444  078F  3FC2               	movwi [2]fsr1
  7445  0790  0855               	movf	_tap_timer+3,w	;volatile
  7446  0791  3FC3               	movwi [3]fsr1
  7447                           
  7448                           ;SwitchTap.c: 129: tap_total += tap_timer;
  7449  0792  0852               	movf	_tap_timer,w	;volatile
  7450  0793  0024               	movlb	4	; select bank4
  7451  0794  07BD               	addwf	_tap_total^(0+512),f
  7452  0795  0020               	movlb	0	; select bank0
  7453  0796  0853               	movf	_tap_timer+1,w	;volatile
  7454  0797  0024               	movlb	4	; select bank4
  7455  0798  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  7456  0799  0020               	movlb	0	; select bank0
  7457  079A  0854               	movf	_tap_timer+2,w	;volatile
  7458  079B  0024               	movlb	4	; select bank4
  7459  079C  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  7460  079D  0020               	movlb	0	; select bank0
  7461  079E  0855               	movf	_tap_timer+3,w	;volatile
  7462  079F  0024               	movlb	4	; select bank4
  7463  07A0  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  7464  07A1                     l9106:	
  7465                           
  7466                           ;SwitchTap.c: 130: }
  7467                           ;SwitchTap.c: 132: baseline_mod_time = tap_total / tapCntDivisor;
  7468  07A1  0021               	movlb	1	; select bank1
  7469  07A2  0842               	movf	updateSwitchTap@tapCntDivisor^(0+128),w
  7470  07A3  00A0               	movwf	___aldiv@divisor^(0+128)
  7471  07A4  0843               	movf	(updateSwitchTap@tapCntDivisor+1)^(0+128),w
  7472  07A5  00A1               	movwf	(___aldiv@divisor+1)^(0+128)
  7473  07A6  0D89               	rlf	9,f
  7474  07A7  3B89               	subwfb	9,f
  7475  07A8  0989               	comf	9,f
  7476  07A9  00A2               	movwf	(___aldiv@divisor+2)^(0+128)
  7477  07AA  00A3               	movwf	(___aldiv@divisor+3)^(0+128)
  7478  07AB  0024               	movlb	4	; select bank4
  7479  07AC  0840               	movf	(_tap_total+3)^(0+512),w
  7480  07AD  0021               	movlb	1	; select bank1
  7481  07AE  00A7               	movwf	(___aldiv@dividend+3)^(0+128)
  7482  07AF  0024               	movlb	4	; select bank4
  7483  07B0  083F               	movf	(_tap_total+2)^(0+512),w
  7484  07B1  0021               	movlb	1	; select bank1
  7485  07B2  00A6               	movwf	(___aldiv@dividend+2)^(0+128)
  7486  07B3  0024               	movlb	4	; select bank4
  7487  07B4  083E               	movf	(_tap_total+1)^(0+512),w
  7488  07B5  0021               	movlb	1	; select bank1
  7489  07B6  00A5               	movwf	(___aldiv@dividend+1)^(0+128)
  7490  07B7  0024               	movlb	4	; select bank4
  7491  07B8  083D               	movf	_tap_total^(0+512),w
  7492  07B9  0021               	movlb	1	; select bank1
  7493  07BA  00A4               	movwf	___aldiv@dividend^(0+128)
  7494  07BB  3198  2083         	fcall	___aldiv
  7495  07BD  0021               	movlb	1	; select bank1
  7496  07BE  0823               	movf	(?___aldiv+3)^(0+128),w
  7497  07BF  0020               	movlb	0	; select bank0
  7498  07C0  00C3               	movwf	_baseline_mod_time+3	;volatile
  7499  07C1  0021               	movlb	1	; select bank1
  7500  07C2  0822               	movf	(?___aldiv+2)^(0+128),w
  7501  07C3  0020               	movlb	0	; select bank0
  7502  07C4  00C2               	movwf	_baseline_mod_time+2	;volatile
  7503  07C5  0021               	movlb	1	; select bank1
  7504  07C6  0821               	movf	(?___aldiv+1)^(0+128),w
  7505  07C7  0020               	movlb	0	; select bank0
  7506  07C8  00C1               	movwf	_baseline_mod_time+1	;volatile
  7507  07C9  0021               	movlb	1	; select bank1
  7508  07CA  0820               	movf	?___aldiv^(0+128),w
  7509  07CB  0020               	movlb	0	; select bank0
  7510  07CC  00C0               	movwf	_baseline_mod_time	;volatile
  7511                           
  7512                           ;SwitchTap.c: 133: mod_time_changed = 1;
  7513  07CD  0023               	movlb	3	; select bank3
  7514  07CE  01E4               	clrf	_mod_time_changed^(0+384)
  7515  07CF  0AE4               	incf	_mod_time_changed^(0+384),f
  7516                           
  7517                           ;SwitchTap.c: 134: tap_timer = 0;
  7518  07D0  3000               	movlw	0
  7519  07D1  0020               	movlb	0	; select bank0
  7520  07D2  00D5               	movwf	_tap_timer+3	;volatile
  7521  07D3  3000               	movlw	0
  7522  07D4  00D4               	movwf	_tap_timer+2	;volatile
  7523  07D5  3000               	movlw	0
  7524  07D6  00D3               	movwf	_tap_timer+1	;volatile
  7525  07D7  3000               	movlw	0
  7526  07D8  00D2               	movwf	_tap_timer	;volatile
  7527                           
  7528                           ;SwitchTap.c: 136: tap_iteration++;
  7529  07D9  3001               	movlw	1
  7530  07DA  0023               	movlb	3	; select bank3
  7531  07DB  07DD               	addwf	_tap_iteration^(0+384),f
  7532  07DC  3000               	movlw	0
  7533  07DD  3DDE               	addwfc	(_tap_iteration+1)^(0+384),f
  7534                           
  7535                           ;SwitchTap.c: 137: }
  7536                           ;SwitchTap.c: 139: } else if (switchTap_pressed >= 25) {
  7537  07DE  0008               	return
  7538  07DF                     l9114:	
  7539  07DF  3019               	movlw	25
  7540  07E0  0022               	movlb	2	; select bank2
  7541  07E1  026B               	subwf	_switchTap_pressed^(0+256),w
  7542  07E2  1C03               	skipc
  7543  07E3  0008               	return
  7544                           
  7545                           ;SwitchTap.c: 140: switchTap_down = 0;
  7546  07E4  0023               	movlb	3	; select bank3
  7547  07E5  01CB               	clrf	_switchTap_down^(0+384)
  7548                           
  7549                           ;SwitchTap.c: 141: switchTap_state = 0;
  7550  07E6  01E6               	clrf	_switchTap_state^(0+384)
  7551                           
  7552                           ;SwitchTap.c: 147: setLongTapState(0);
  7553  07E7  3000               	movlw	0
  7554  07E8  0021               	movlb	1	; select bank1
  7555  07E9  00A0               	movwf	setLongTapState@f_state^(0+128)
  7556  07EA  00A1               	movwf	(setLongTapState@f_state+1)^(0+128)
  7557  07EB  31AD  253C         	fcall	_setLongTapState
  7558                           
  7559                           ;SwitchTap.c: 149: longTap_timer = 0;
  7560  07ED  0023               	movlb	3	; select bank3
  7561  07EE  01B8               	clrf	_longTap_timer^(0+384)	;volatile
  7562  07EF  01B9               	clrf	(_longTap_timer+1)^(0+384)	;volatile
  7563                           
  7564                           ;SwitchTap.c: 150: longTap_start = 0;
  7565  07F0  01C5               	clrf	_longTap_start^(0+384)
  7566                           
  7567                           ;SwitchTap.c: 152: switchTap_pressed = 25;
  7568  07F1  3019               	movlw	25
  7569  07F2  0021               	movlb	1	; select bank1
  7570  07F3  00BC               	movwf	??_updateSwitchTap^(0+128)
  7571  07F4  083C               	movf	??_updateSwitchTap^(0+128),w
  7572  07F5  0022               	movlb	2	; select bank2
  7573  07F6  00EB               	movwf	_switchTap_pressed^(0+256)
  7574  07F7  0008               	return
  7575  07F8                     __end_of_updateSwitchTap:	
  7576                           
  7577                           	psect	text4
  7578  2D3C                     __ptext4:	
  7579 ;; *************** function _setLongTapState *****************
  7580 ;; Defined at:
  7581 ;;		line 167 in file "SwitchTap.c"
  7582 ;; Parameters:    Size  Location     Type
  7583 ;;  f_state         2    0[BANK1 ] int 
  7584 ;; Auto vars:     Size  Location     Type
  7585 ;;		None
  7586 ;; Return value:  Size  Location     Type
  7587 ;;                  1    wreg      void 
  7588 ;; Registers used:
  7589 ;;		wreg, status,0
  7590 ;; Tracked objects:
  7591 ;;		On entry : 0/0
  7592 ;;		On exit  : 0/0
  7593 ;;		Unchanged: 0/0
  7594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7595 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7597 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7598 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7599 ;;Total ram usage:        4 bytes
  7600 ;; Hardware stack levels used:    1
  7601 ;; Hardware stack levels required when called:    3
  7602 ;; This function calls:
  7603 ;;		Nothing
  7604 ;; This function is called by:
  7605 ;;		_updateSwitchTap
  7606 ;; This function uses a non-reentrant model
  7607 ;;
  7608                           
  7609                           
  7610                           ;psect for function _setLongTapState
  7611  2D3C                     _setLongTapState:	
  7612                           
  7613                           ;SwitchTap.c: 168: if (longTap_state == f_state) {return;}
  7614                           
  7615                           ;incstack = 0
  7616                           ; Regs used in _setLongTapState: [wreg+status,0]
  7617  2D3C  0020               	movlb	0	; select bank0
  7618  2D3D  084F               	movf	_longTap_state,w	;volatile
  7619  2D3E  0021               	movlb	1	; select bank1
  7620  2D3F  00A2               	movwf	??_setLongTapState^(0+128)
  7621  2D40  01A3               	clrf	(??_setLongTapState^(0+128)+1)
  7622  2D41  0821               	movf	(setLongTapState@f_state+1)^(0+128),w
  7623  2D42  0623               	xorwf	(??_setLongTapState+1)^(0+128),w
  7624  2D43  1D03               	skipz
  7625  2D44  2D47               	goto	u9125
  7626  2D45  0820               	movf	setLongTapState@f_state^(0+128),w
  7627  2D46  0622               	xorwf	??_setLongTapState^(0+128),w
  7628  2D47                     u9125:	
  7629  2D47  1903               	btfsc	3,2
  7630  2D48  0008               	return
  7631                           
  7632                           ;SwitchTap.c: 169: longTap_state = f_state;
  7633  2D49  0820               	movf	setLongTapState@f_state^(0+128),w
  7634  2D4A  00A2               	movwf	??_setLongTapState^(0+128)
  7635  2D4B  0822               	movf	??_setLongTapState^(0+128),w
  7636  2D4C  0020               	movlb	0	; select bank0
  7637  2D4D  00CF               	movwf	_longTap_state	;volatile
  7638                           
  7639                           ;SwitchTap.c: 170: LATBbits.LATB5 = f_state;
  7640  2D4E  0021               	movlb	1	; select bank1
  7641  2D4F  0C20               	rrf	setLongTapState@f_state^(0+128),w
  7642  2D50  0022               	movlb	2	; select bank2
  7643  2D51  1C03               	skipc
  7644  2D52  128D               	bcf	13,5	;volatile
  7645  2D53  1803               	skipnc
  7646  2D54  168D               	bsf	13,5	;volatile
  7647  2D55  0008               	return
  7648  2D56                     __end_of_setLongTapState:	
  7649                           
  7650                           	psect	text5
  7651  1883                     __ptext5:	
  7652 ;; *************** function ___aldiv *****************
  7653 ;; Defined at:
  7654 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
  7655 ;; Parameters:    Size  Location     Type
  7656 ;;  divisor         4    0[BANK1 ] long 
  7657 ;;  dividend        4    4[BANK1 ] long 
  7658 ;; Auto vars:     Size  Location     Type
  7659 ;;  quotient        4   11[BANK1 ] long 
  7660 ;;  sign            1   10[BANK1 ] unsigned char 
  7661 ;;  counter         1    9[BANK1 ] unsigned char 
  7662 ;; Return value:  Size  Location     Type
  7663 ;;                  4    0[BANK1 ] long 
  7664 ;; Registers used:
  7665 ;;		wreg, status,2, status,0
  7666 ;; Tracked objects:
  7667 ;;		On entry : 0/0
  7668 ;;		On exit  : 0/0
  7669 ;;		Unchanged: 0/0
  7670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7671 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7672 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7673 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7674 ;;      Totals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7675 ;;Total ram usage:       15 bytes
  7676 ;; Hardware stack levels used:    1
  7677 ;; Hardware stack levels required when called:    3
  7678 ;; This function calls:
  7679 ;;		Nothing
  7680 ;; This function is called by:
  7681 ;;		_updateSwitchTap
  7682 ;; This function uses a non-reentrant model
  7683 ;;
  7684                           
  7685                           
  7686                           ;psect for function ___aldiv
  7687  1883                     ___aldiv:	
  7688                           
  7689                           ;incstack = 0
  7690                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  7691  1883  0021               	movlb	1	; select bank1
  7692  1884  01AA               	clrf	___aldiv@sign^(0+128)
  7693  1885  1FA3               	btfss	(___aldiv@divisor+3)^(0+128),7
  7694  1886  2894               	goto	l2057
  7695  1887  09A0               	comf	___aldiv@divisor^(0+128),f
  7696  1888  09A1               	comf	(___aldiv@divisor+1)^(0+128),f
  7697  1889  09A2               	comf	(___aldiv@divisor+2)^(0+128),f
  7698  188A  09A3               	comf	(___aldiv@divisor+3)^(0+128),f
  7699  188B  0AA0               	incf	___aldiv@divisor^(0+128),f
  7700  188C  1903               	skipnz
  7701  188D  0AA1               	incf	(___aldiv@divisor+1)^(0+128),f
  7702  188E  1903               	skipnz
  7703  188F  0AA2               	incf	(___aldiv@divisor+2)^(0+128),f
  7704  1890  1903               	skipnz
  7705  1891  0AA3               	incf	(___aldiv@divisor+3)^(0+128),f
  7706  1892  01AA               	clrf	___aldiv@sign^(0+128)
  7707  1893  0AAA               	incf	___aldiv@sign^(0+128),f
  7708  1894                     l2057:	
  7709  1894  1FA7               	btfss	(___aldiv@dividend+3)^(0+128),7
  7710  1895  28A5               	goto	l8678
  7711  1896  09A4               	comf	___aldiv@dividend^(0+128),f
  7712  1897  09A5               	comf	(___aldiv@dividend+1)^(0+128),f
  7713  1898  09A6               	comf	(___aldiv@dividend+2)^(0+128),f
  7714  1899  09A7               	comf	(___aldiv@dividend+3)^(0+128),f
  7715  189A  0AA4               	incf	___aldiv@dividend^(0+128),f
  7716  189B  1903               	skipnz
  7717  189C  0AA5               	incf	(___aldiv@dividend+1)^(0+128),f
  7718  189D  1903               	skipnz
  7719  189E  0AA6               	incf	(___aldiv@dividend+2)^(0+128),f
  7720  189F  1903               	skipnz
  7721  18A0  0AA7               	incf	(___aldiv@dividend+3)^(0+128),f
  7722  18A1  3001               	movlw	1
  7723  18A2  00A8               	movwf	??___aldiv^(0+128)
  7724  18A3  0828               	movf	??___aldiv^(0+128),w
  7725  18A4  06AA               	xorwf	___aldiv@sign^(0+128),f
  7726  18A5                     l8678:	
  7727  18A5  3000               	movlw	0
  7728  18A6  00AE               	movwf	(___aldiv@quotient+3)^(0+128)
  7729  18A7  3000               	movlw	0
  7730  18A8  00AD               	movwf	(___aldiv@quotient+2)^(0+128)
  7731  18A9  3000               	movlw	0
  7732  18AA  00AC               	movwf	(___aldiv@quotient+1)^(0+128)
  7733  18AB  3000               	movlw	0
  7734  18AC  00AB               	movwf	___aldiv@quotient^(0+128)
  7735  18AD  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7736  18AE  0422               	iorwf	(___aldiv@divisor+2)^(0+128),w
  7737  18AF  0421               	iorwf	(___aldiv@divisor+1)^(0+128),w
  7738  18B0  0420               	iorwf	___aldiv@divisor^(0+128),w
  7739  18B1  1903               	skipnz
  7740  18B2  28EE               	goto	l8700
  7741  18B3  01A9               	clrf	___aldiv@counter^(0+128)
  7742  18B4  0AA9               	incf	___aldiv@counter^(0+128),f
  7743  18B5                     l8686:	
  7744  18B5  1BA3               	btfsc	(___aldiv@divisor+3)^(0+128),7
  7745  18B6  28C3               	goto	l8688
  7746  18B7  3001               	movlw	1
  7747  18B8                     u9205:	
  7748  18B8  35A0               	lslf	___aldiv@divisor^(0+128),f
  7749  18B9  0DA1               	rlf	(___aldiv@divisor+1)^(0+128),f
  7750  18BA  0DA2               	rlf	(___aldiv@divisor+2)^(0+128),f
  7751  18BB  0DA3               	rlf	(___aldiv@divisor+3)^(0+128),f
  7752  18BC  0B89               	decfsz	9,f
  7753  18BD  28B8               	goto	u9205
  7754  18BE  3001               	movlw	1
  7755  18BF  00A8               	movwf	??___aldiv^(0+128)
  7756  18C0  0828               	movf	??___aldiv^(0+128),w
  7757  18C1  07A9               	addwf	___aldiv@counter^(0+128),f
  7758  18C2  28B5               	goto	l8686
  7759  18C3                     l8688:	
  7760  18C3  3001               	movlw	1
  7761  18C4                     u9225:	
  7762  18C4  35AB               	lslf	___aldiv@quotient^(0+128),f
  7763  18C5  0DAC               	rlf	(___aldiv@quotient+1)^(0+128),f
  7764  18C6  0DAD               	rlf	(___aldiv@quotient+2)^(0+128),f
  7765  18C7  0DAE               	rlf	(___aldiv@quotient+3)^(0+128),f
  7766  18C8  0B89               	decfsz	9,f
  7767  18C9  28C4               	goto	u9225
  7768  18CA  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7769  18CB  0227               	subwf	(___aldiv@dividend+3)^(0+128),w
  7770  18CC  1D03               	skipz
  7771  18CD  28D8               	goto	u9235
  7772  18CE  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7773  18CF  0226               	subwf	(___aldiv@dividend+2)^(0+128),w
  7774  18D0  1D03               	skipz
  7775  18D1  28D8               	goto	u9235
  7776  18D2  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  7777  18D3  0225               	subwf	(___aldiv@dividend+1)^(0+128),w
  7778  18D4  1D03               	skipz
  7779  18D5  28D8               	goto	u9235
  7780  18D6  0820               	movf	___aldiv@divisor^(0+128),w
  7781  18D7  0224               	subwf	___aldiv@dividend^(0+128),w
  7782  18D8                     u9235:	
  7783  18D8  1C03               	skipc
  7784  18D9  28E3               	goto	l8696
  7785  18DA  0820               	movf	___aldiv@divisor^(0+128),w
  7786  18DB  02A4               	subwf	___aldiv@dividend^(0+128),f
  7787  18DC  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  7788  18DD  3BA5               	subwfb	(___aldiv@dividend+1)^(0+128),f
  7789  18DE  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7790  18DF  3BA6               	subwfb	(___aldiv@dividend+2)^(0+128),f
  7791  18E0  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7792  18E1  3BA7               	subwfb	(___aldiv@dividend+3)^(0+128),f
  7793  18E2  142B               	bsf	___aldiv@quotient^(0+128),0
  7794  18E3                     l8696:	
  7795  18E3  3001               	movlw	1
  7796  18E4                     u9245:	
  7797  18E4  36A3               	lsrf	(___aldiv@divisor+3)^(0+128),f
  7798  18E5  0CA2               	rrf	(___aldiv@divisor+2)^(0+128),f
  7799  18E6  0CA1               	rrf	(___aldiv@divisor+1)^(0+128),f
  7800  18E7  0CA0               	rrf	___aldiv@divisor^(0+128),f
  7801  18E8  0B89               	decfsz	9,f
  7802  18E9  28E4               	goto	u9245
  7803  18EA  3001               	movlw	1
  7804  18EB  02A9               	subwf	___aldiv@counter^(0+128),f
  7805  18EC  1D03               	btfss	3,2
  7806  18ED  28C3               	goto	l8688
  7807  18EE                     l8700:	
  7808  18EE  082A               	movf	___aldiv@sign^(0+128),w
  7809  18EF  1903               	btfsc	3,2
  7810  18F0  28FC               	goto	l8704
  7811  18F1  09AB               	comf	___aldiv@quotient^(0+128),f
  7812  18F2  09AC               	comf	(___aldiv@quotient+1)^(0+128),f
  7813  18F3  09AD               	comf	(___aldiv@quotient+2)^(0+128),f
  7814  18F4  09AE               	comf	(___aldiv@quotient+3)^(0+128),f
  7815  18F5  0AAB               	incf	___aldiv@quotient^(0+128),f
  7816  18F6  1903               	skipnz
  7817  18F7  0AAC               	incf	(___aldiv@quotient+1)^(0+128),f
  7818  18F8  1903               	skipnz
  7819  18F9  0AAD               	incf	(___aldiv@quotient+2)^(0+128),f
  7820  18FA  1903               	skipnz
  7821  18FB  0AAE               	incf	(___aldiv@quotient+3)^(0+128),f
  7822  18FC                     l8704:	
  7823  18FC  082E               	movf	(___aldiv@quotient+3)^(0+128),w
  7824  18FD  00A3               	movwf	(?___aldiv+3)^(0+128)
  7825  18FE  082D               	movf	(___aldiv@quotient+2)^(0+128),w
  7826  18FF  00A2               	movwf	(?___aldiv+2)^(0+128)
  7827  1900  082C               	movf	(___aldiv@quotient+1)^(0+128),w
  7828  1901  00A1               	movwf	(?___aldiv+1)^(0+128)
  7829  1902  082B               	movf	___aldiv@quotient^(0+128),w
  7830  1903  00A0               	movwf	?___aldiv^(0+128)
  7831  1904  0008               	return
  7832  1905                     __end_of___aldiv:	
  7833                           
  7834                           	psect	text6
  7835  1208                     __ptext6:	
  7836 ;; *************** function _updateSwitchBypass *****************
  7837 ;; Defined at:
  7838 ;;		line 34 in file "SwitchBypass.c"
  7839 ;; Parameters:    Size  Location     Type
  7840 ;;		None
  7841 ;; Auto vars:     Size  Location     Type
  7842 ;;		None
  7843 ;; Return value:  Size  Location     Type
  7844 ;;                  1    wreg      void 
  7845 ;; Registers used:
  7846 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7847 ;; Tracked objects:
  7848 ;;		On entry : 0/0
  7849 ;;		On exit  : 0/0
  7850 ;;		Unchanged: 0/0
  7851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7854 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7855 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7856 ;;Total ram usage:        2 bytes
  7857 ;; Hardware stack levels used:    1
  7858 ;; Hardware stack levels required when called:    8
  7859 ;; This function calls:
  7860 ;;		_setDoublePressState
  7861 ;;		_setLongBypassState
  7862 ;;		_setSwitchBypassRelays
  7863 ;;		_setSwitchBypassState
  7864 ;; This function is called by:
  7865 ;;		_main
  7866 ;; This function uses a non-reentrant model
  7867 ;;
  7868                           
  7869                           
  7870                           ;psect for function _updateSwitchBypass
  7871  1208                     _updateSwitchBypass:	
  7872                           
  7873                           ;SwitchBypass.c: 41: if (PORTEbits.RE1 == 0) {
  7874                           
  7875                           ;incstack = 0
  7876                           ; Regs used in _updateSwitchBypass: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7877  1208  0020               	movlb	0	; select bank0
  7878  1209  1890               	btfsc	16,1	;volatile
  7879  120A  2A1E               	goto	l8914
  7880                           
  7881                           ;SwitchBypass.c: 42: if (switchBypass_pressed > 0) {
  7882  120B  0023               	movlb	3	; select bank3
  7883  120C  083B               	movf	(_switchBypass_pressed+1)^(0+384),w
  7884  120D  3A80               	xorlw	128
  7885  120E  0021               	movlb	1	; select bank1
  7886  120F  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7887  1210  3080               	movlw	128
  7888  1211  023C               	subwf	??_updateSwitchBypass^(0+128),w
  7889  1212  1D03               	skipz
  7890  1213  2A17               	goto	u9625
  7891  1214  3001               	movlw	1
  7892  1215  0023               	movlb	3	; select bank3
  7893  1216  023A               	subwf	_switchBypass_pressed^(0+384),w
  7894  1217                     u9625:	
  7895  1217  1C03               	skipc
  7896  1218  2A31               	goto	l8918
  7897                           
  7898                           ;SwitchBypass.c: 43: switchBypass_pressed--;
  7899  1219  30FF               	movlw	255
  7900  121A  0023               	movlb	3	; select bank3
  7901  121B  07BA               	addwf	_switchBypass_pressed^(0+384),f
  7902  121C  30FF               	movlw	255
  7903  121D  2A30               	goto	L1
  7904  121E                     l8914:	
  7905                           ;SwitchBypass.c: 44: }
  7906                           ;SwitchBypass.c: 45: } else if (switchBypass_pressed < 25) {
  7907                           
  7908  121E  0023               	movlb	3	; select bank3
  7909  121F  083B               	movf	(_switchBypass_pressed+1)^(0+384),w
  7910  1220  3A80               	xorlw	128
  7911  1221  0021               	movlb	1	; select bank1
  7912  1222  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7913  1223  3080               	movlw	128
  7914  1224  023C               	subwf	??_updateSwitchBypass^(0+128),w
  7915  1225  1D03               	skipz
  7916  1226  2A2A               	goto	u9635
  7917  1227  3019               	movlw	25
  7918  1228  0023               	movlb	3	; select bank3
  7919  1229  023A               	subwf	_switchBypass_pressed^(0+384),w
  7920  122A                     u9635:	
  7921  122A  1803               	skipnc
  7922  122B  2A31               	goto	l8918
  7923                           
  7924                           ;SwitchBypass.c: 46: switchBypass_pressed++;
  7925  122C  3001               	movlw	1
  7926  122D  0023               	movlb	3	; select bank3
  7927  122E  07BA               	addwf	_switchBypass_pressed^(0+384),f
  7928  122F  3000               	movlw	0
  7929  1230                     L1:	
  7930  1230  3DBB               	addwfc	(_switchBypass_pressed+1)^(0+384),f
  7931  1231                     l8918:	
  7932                           
  7933                           ;SwitchBypass.c: 47: }
  7934                           ;SwitchBypass.c: 53: if (switchBypass_pressed == 0) {
  7935  1231  0023               	movlb	3	; select bank3
  7936  1232  083A               	movf	_switchBypass_pressed^(0+384),w
  7937  1233  043B               	iorwf	(_switchBypass_pressed+1)^(0+384),w
  7938  1234  1D03               	btfss	3,2
  7939  1235  2ABB               	goto	l8980
  7940                           
  7941                           ;SwitchBypass.c: 56: if (longBypass_start == 0) {
  7942  1236  0844               	movf	_longBypass_start^(0+384),w
  7943  1237  1D03               	btfss	3,2
  7944  1238  2A3D               	goto	l8926
  7945                           
  7946                           ;SwitchBypass.c: 57: longBypass_start = 1;
  7947  1239  01C4               	clrf	_longBypass_start^(0+384)
  7948  123A  0AC4               	incf	_longBypass_start^(0+384),f
  7949                           
  7950                           ;SwitchBypass.c: 58: longBypass_timer = 0;
  7951  123B  01B6               	clrf	_longBypass_timer^(0+384)	;volatile
  7952  123C  01B7               	clrf	(_longBypass_timer+1)^(0+384)	;volatile
  7953  123D                     l8926:	
  7954                           
  7955                           ;SwitchBypass.c: 59: }
  7956                           ;SwitchBypass.c: 61: if (longBypass_timer >= long_press_limit && longBypass_down == 0 &&
      +                           doubleTap_state == 0) {
  7957  123D  0020               	movlb	0	; select bank0
  7958  123E  084B               	movf	_long_press_limit+1,w
  7959  123F  0023               	movlb	3	; select bank3
  7960  1240  0237               	subwf	(_longBypass_timer+1)^(0+384),w	;volatile
  7961  1241  1D03               	skipz
  7962  1242  2A47               	goto	u9665
  7963  1243  0020               	movlb	0	; select bank0
  7964  1244  084A               	movf	_long_press_limit,w
  7965  1245  0023               	movlb	3	; select bank3
  7966  1246  0236               	subwf	_longBypass_timer^(0+384),w	;volatile
  7967  1247                     u9665:	
  7968  1247  1C03               	skipc
  7969  1248  2A86               	goto	l8952
  7970  1249  0842               	movf	_longBypass_down^(0+384),w
  7971  124A  1D03               	btfss	3,2
  7972  124B  2A86               	goto	l8952
  7973  124C  0020               	movlb	0	; select bank0
  7974  124D  085C               	movf	_doubleTap_state,w	;volatile
  7975  124E  1D03               	btfss	3,2
  7976  124F  2A86               	goto	l8952
  7977                           
  7978                           ;SwitchBypass.c: 64: LATBbits.LATB2 = 0;
  7979  1250  0022               	movlb	2	; select bank2
  7980  1251  110D               	bcf	13,2	;volatile
  7981                           
  7982                           ;SwitchBypass.c: 65: if (longTap_start != 1 ) {
  7983  1252  0023               	movlb	3	; select bank3
  7984  1253  0345               	decf	_longTap_start^(0+384),w
  7985  1254  1903               	btfsc	3,2
  7986  1255  2A7E               	goto	l8950
  7987                           
  7988                           ;SwitchBypass.c: 66: if (switchBypass_state == 1) {
  7989  1256  0020               	movlb	0	; select bank0
  7990  1257  0351               	decf	_switchBypass_state,w
  7991  1258  1D03               	btfss	3,2
  7992  1259  2A86               	goto	l8952
  7993                           
  7994                           ;SwitchBypass.c: 67: longBypass_down = 1;
  7995  125A  0023               	movlb	3	; select bank3
  7996  125B  01C2               	clrf	_longBypass_down^(0+384)
  7997  125C  0AC2               	incf	_longBypass_down^(0+384),f
  7998                           
  7999                           ;SwitchBypass.c: 68: if (longBypass_state == 0) {
  8000  125D  0020               	movlb	0	; select bank0
  8001  125E  085D               	movf	_longBypass_state,w	;volatile
  8002  125F  1D03               	btfss	3,2
  8003  1260  2A6C               	goto	l8946
  8004                           
  8005                           ;SwitchBypass.c: 69: LATBbits.LATB2 = 0;
  8006  1261  0022               	movlb	2	; select bank2
  8007  1262  110D               	bcf	13,2	;volatile
  8008                           
  8009                           ;SwitchBypass.c: 70: setLongBypassState(1);
  8010  1263  3001               	movlw	1
  8011  1264  0021               	movlb	1	; select bank1
  8012  1265  00A0               	movwf	setLongBypassState@f_state^(0+128)
  8013  1266  3000               	movlw	0
  8014  1267  00A1               	movwf	(setLongBypassState@f_state^(0+128)+1)
  8015  1268  3190  2000  3192   	fcall	_setLongBypassState
  8016                           
  8017                           ;SwitchBypass.c: 71: } else {
  8018  126B  2A86               	goto	l8952
  8019  126C                     l8946:	
  8020                           
  8021                           ;SwitchBypass.c: 72: setSwitchBypassState(1);
  8022  126C  3001               	movlw	1
  8023  126D  0021               	movlb	1	; select bank1
  8024  126E  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  8025  126F  3000               	movlw	0
  8026  1270  00B7               	movwf	(setSwitchBypassState@f_state^(0+128)+1)
  8027  1271  31AD  258C  3192   	fcall	_setSwitchBypassState
  8028                           
  8029                           ;SwitchBypass.c: 73: setLongBypassState(0);
  8030  1274  3000               	movlw	0
  8031  1275  0021               	movlb	1	; select bank1
  8032  1276  00A0               	movwf	setLongBypassState@f_state^(0+128)
  8033  1277  00A1               	movwf	(setLongBypassState@f_state+1)^(0+128)
  8034  1278  3190  2000  3192   	fcall	_setLongBypassState
  8035                           
  8036                           ;SwitchBypass.c: 74: LATBbits.LATB2 = 1;
  8037  127B  0022               	movlb	2	; select bank2
  8038  127C  150D               	bsf	13,2	;volatile
  8039                           
  8040                           ;SwitchBypass.c: 75: }
  8041                           ;SwitchBypass.c: 76: }
  8042                           ;SwitchBypass.c: 77: } else {
  8043  127D  2A86               	goto	l8952
  8044  127E                     l8950:	
  8045                           
  8046                           ;SwitchBypass.c: 78: setDoublePressState(1);
  8047  127E  3001               	movlw	1
  8048  127F  0021               	movlb	1	; select bank1
  8049  1280  00B8               	movwf	setDoublePressState@f_state^(0+128)
  8050  1281  3000               	movlw	0
  8051  1282  00B9               	movwf	(setDoublePressState@f_state^(0+128)+1)
  8052  1283  31A1  2160  3192   	fcall	_setDoublePressState
  8053  1286                     l8952:	
  8054                           
  8055                           ;SwitchBypass.c: 79: }
  8056                           ;SwitchBypass.c: 80: }
  8057                           ;SwitchBypass.c: 81: LATDbits.LATD4 = 0;
  8058  1286  0022               	movlb	2	; select bank2
  8059  1287  120F               	bcf	15,4	;volatile
  8060                           
  8061                           ;SwitchBypass.c: 82: if (doubleTap_state == 0 && longBypass_down == 0) {
  8062  1288  0020               	movlb	0	; select bank0
  8063  1289  085C               	movf	_doubleTap_state,w	;volatile
  8064  128A  1D03               	btfss	3,2
  8065  128B  2AB7               	goto	l8978
  8066  128C  0023               	movlb	3	; select bank3
  8067  128D  0842               	movf	_longBypass_down^(0+384),w
  8068  128E  1D03               	btfss	3,2
  8069  128F  2AB7               	goto	l8978
  8070                           
  8071                           ;SwitchBypass.c: 83: if (switchBypass_state == 1) {
  8072  1290  0020               	movlb	0	; select bank0
  8073  1291  0351               	decf	_switchBypass_state,w
  8074  1292  1D03               	btfss	3,2
  8075  1293  2AA2               	goto	l8966
  8076                           
  8077                           ;SwitchBypass.c: 85: if (switchBypass_up == 1) {
  8078  1294  0024               	movlb	4	; select bank4
  8079  1295  0368               	decf	_switchBypass_up^(0+512),w
  8080  1296  0469               	iorwf	(_switchBypass_up+1)^(0+512),w
  8081  1297  1D03               	btfss	3,2
  8082  1298  2AB7               	goto	l8978
  8083                           
  8084                           ;SwitchBypass.c: 86: currentBypassState = 1;
  8085  1299  0023               	movlb	3	; select bank3
  8086  129A  01E0               	clrf	_currentBypassState^(0+384)
  8087  129B  0AE0               	incf	_currentBypassState^(0+384),f
  8088                           
  8089                           ;SwitchBypass.c: 87: switchBypass_toggle = 1;
  8090  129C  3001               	movlw	1
  8091  129D  0024               	movlb	4	; select bank4
  8092  129E  00D9               	movwf	_switchBypass_toggle^(0+512)
  8093  129F  3000               	movlw	0
  8094  12A0  00DA               	movwf	(_switchBypass_toggle^(0+512)+1)
  8095                           
  8096                           ;SwitchBypass.c: 88: }
  8097                           ;SwitchBypass.c: 89: } else {
  8098  12A1  2AB7               	goto	l8978
  8099  12A2                     l8966:	
  8100                           
  8101                           ;SwitchBypass.c: 90: if (bypass_turning_on != 1) {
  8102  12A2  0023               	movlb	3	; select bank3
  8103  12A3  0340               	decf	_bypass_turning_on^(0+384),w
  8104  12A4  1903               	btfsc	3,2
  8105  12A5  2AB7               	goto	l8978
  8106                           
  8107                           ;SwitchBypass.c: 92: currentBypassState = 0;
  8108  12A6  01E0               	clrf	_currentBypassState^(0+384)
  8109                           
  8110                           ;SwitchBypass.c: 94: bypass_turning_on = 1;
  8111  12A7  01C0               	clrf	_bypass_turning_on^(0+384)
  8112  12A8  0AC0               	incf	_bypass_turning_on^(0+384),f
  8113                           
  8114                           ;SwitchBypass.c: 95: switchBypass_toggle = 0;
  8115  12A9  0024               	movlb	4	; select bank4
  8116  12AA  01D9               	clrf	_switchBypass_toggle^(0+512)
  8117  12AB  01DA               	clrf	(_switchBypass_toggle+1)^(0+512)
  8118                           
  8119                           ;SwitchBypass.c: 97: longBypass_save = longBypass_state;
  8120  12AC  0020               	movlb	0	; select bank0
  8121  12AD  085D               	movf	_longBypass_state,w	;volatile
  8122  12AE  0021               	movlb	1	; select bank1
  8123  12AF  00BC               	movwf	??_updateSwitchBypass^(0+128)
  8124  12B0  083C               	movf	??_updateSwitchBypass^(0+128),w
  8125  12B1  0023               	movlb	3	; select bank3
  8126  12B2  00C3               	movwf	_longBypass_save^(0+384)
  8127                           
  8128                           ;SwitchBypass.c: 98: longBypass_state = 0;
  8129  12B3  0020               	movlb	0	; select bank0
  8130  12B4  01DD               	clrf	_longBypass_state	;volatile
  8131                           
  8132                           ;SwitchBypass.c: 99: longBypass_start = 0;
  8133  12B5  0023               	movlb	3	; select bank3
  8134  12B6  01C4               	clrf	_longBypass_start^(0+384)
  8135  12B7                     l8978:	
  8136                           
  8137                           ;SwitchBypass.c: 100: }
  8138                           ;SwitchBypass.c: 101: }
  8139                           ;SwitchBypass.c: 103: }
  8140                           ;SwitchBypass.c: 104: switchBypass_up = 0;
  8141  12B7  0024               	movlb	4	; select bank4
  8142  12B8  01E8               	clrf	_switchBypass_up^(0+512)
  8143  12B9  01E9               	clrf	(_switchBypass_up+1)^(0+512)
  8144                           
  8145                           ;SwitchBypass.c: 105: } else if (switchBypass_pressed >= 25) {
  8146  12BA  0008               	return
  8147  12BB                     l8980:	
  8148  12BB  0023               	movlb	3	; select bank3
  8149  12BC  083B               	movf	(_switchBypass_pressed+1)^(0+384),w
  8150  12BD  3A80               	xorlw	128
  8151  12BE  0021               	movlb	1	; select bank1
  8152  12BF  00BC               	movwf	??_updateSwitchBypass^(0+128)
  8153  12C0  3080               	movlw	128
  8154  12C1  023C               	subwf	??_updateSwitchBypass^(0+128),w
  8155  12C2  1D03               	skipz
  8156  12C3  2AC7               	goto	u9775
  8157  12C4  3019               	movlw	25
  8158  12C5  0023               	movlb	3	; select bank3
  8159  12C6  023A               	subwf	_switchBypass_pressed^(0+384),w
  8160  12C7                     u9775:	
  8161  12C7  1C03               	skipc
  8162  12C8  0008               	return
  8163                           
  8164                           ;SwitchBypass.c: 106: if (doubleTap_state == 1) {
  8165  12C9  0020               	movlb	0	; select bank0
  8166  12CA  035C               	decf	_doubleTap_state,w	;volatile
  8167  12CB  1D03               	btfss	3,2
  8168  12CC  2AD6               	goto	l8986
  8169                           
  8170                           ;SwitchBypass.c: 107: setSwitchBypassState(currentBypassState);
  8171  12CD  0023               	movlb	3	; select bank3
  8172  12CE  0860               	movf	_currentBypassState^(0+384),w
  8173  12CF  0021               	movlb	1	; select bank1
  8174  12D0  00BC               	movwf	??_updateSwitchBypass^(0+128)
  8175  12D1  01BD               	clrf	(??_updateSwitchBypass^(0+128)+1)
  8176  12D2  083C               	movf	??_updateSwitchBypass^(0+128),w
  8177  12D3  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  8178  12D4  083D               	movf	(??_updateSwitchBypass+1)^(0+128),w
  8179  12D5  2B06               	goto	L2
  8180  12D6                     l8986:	
  8181                           ;SwitchBypass.c: 108: } else if (bypass_turning_on == 1) {
  8182                           
  8183  12D6  0023               	movlb	3	; select bank3
  8184  12D7  0340               	decf	_bypass_turning_on^(0+384),w
  8185  12D8  1D03               	btfss	3,2
  8186  12D9  2AF6               	goto	l8996
  8187                           
  8188                           ;SwitchBypass.c: 110: if (longBypass_save == 1) {
  8189  12DA  0343               	decf	_longBypass_save^(0+384),w
  8190  12DB  1D03               	btfss	3,2
  8191  12DC  2AF0               	goto	l8994
  8192                           
  8193                           ;SwitchBypass.c: 111: LATBbits.LATB2 = 0;
  8194  12DD  0022               	movlb	2	; select bank2
  8195  12DE  110D               	bcf	13,2	;volatile
  8196                           
  8197                           ;SwitchBypass.c: 112: setLongBypassState(1);
  8198  12DF  3001               	movlw	1
  8199  12E0  0021               	movlb	1	; select bank1
  8200  12E1  00A0               	movwf	setLongBypassState@f_state^(0+128)
  8201  12E2  3000               	movlw	0
  8202  12E3  00A1               	movwf	(setLongBypassState@f_state^(0+128)+1)
  8203  12E4  3190  2000  3192   	fcall	_setLongBypassState
  8204                           
  8205                           ;SwitchBypass.c: 113: setSwitchBypassRelays(1);
  8206  12E7  3001               	movlw	1
  8207  12E8  0021               	movlb	1	; select bank1
  8208  12E9  00B2               	movwf	setSwitchBypassRelays@f_state^(0+128)
  8209  12EA  3000               	movlw	0
  8210  12EB  00B3               	movwf	(setSwitchBypassRelays@f_state^(0+128)+1)
  8211  12EC  31AF  2792  3192   	fcall	_setSwitchBypassRelays
  8212                           
  8213                           ;SwitchBypass.c: 114: } else {
  8214  12EF  2B0A               	goto	l9004
  8215  12F0                     l8994:	
  8216                           
  8217                           ;SwitchBypass.c: 115: setSwitchBypassState(1);
  8218  12F0  3001               	movlw	1
  8219  12F1  0021               	movlb	1	; select bank1
  8220  12F2  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  8221  12F3  3000               	movlw	0
  8222  12F4  00B7               	movwf	(setSwitchBypassState@f_state^(0+128)+1)
  8223  12F5  2B07               	goto	L3
  8224  12F6                     l8996:	
  8225                           ;SwitchBypass.c: 116: }
  8226                           ;SwitchBypass.c: 118: } else if (switchBypass_toggle == 1 && longBypass_down == 0 && dou
      +                          bleTap_state == 0) {
  8227                           
  8228  12F6  0024               	movlb	4	; select bank4
  8229  12F7  0359               	decf	_switchBypass_toggle^(0+512),w
  8230  12F8  045A               	iorwf	(_switchBypass_toggle+1)^(0+512),w
  8231  12F9  1D03               	btfss	3,2
  8232  12FA  2B0A               	goto	l9004
  8233  12FB  0023               	movlb	3	; select bank3
  8234  12FC  0842               	movf	_longBypass_down^(0+384),w
  8235  12FD  1D03               	btfss	3,2
  8236  12FE  2B0A               	goto	l9004
  8237  12FF  0020               	movlb	0	; select bank0
  8238  1300  085C               	movf	_doubleTap_state,w	;volatile
  8239  1301  1D03               	btfss	3,2
  8240  1302  2B0A               	goto	l9004
  8241                           
  8242                           ;SwitchBypass.c: 119: setSwitchBypassState(0);
  8243  1303  3000               	movlw	0
  8244  1304  0021               	movlb	1	; select bank1
  8245  1305  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  8246  1306                     L2:	
  8247  1306  00B7               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
  8248  1307                     L3:	
  8249  1307  31AD  258C  3192   	fcall	_setSwitchBypassState
  8250  130A                     l9004:	
  8251                           
  8252                           ;SwitchBypass.c: 120: }
  8253                           ;SwitchBypass.c: 122: longBypass_down = 0;
  8254  130A  0023               	movlb	3	; select bank3
  8255  130B  01C2               	clrf	_longBypass_down^(0+384)
  8256                           
  8257                           ;SwitchBypass.c: 123: if (longBypass_state == 0) {
  8258  130C  0020               	movlb	0	; select bank0
  8259  130D  085D               	movf	_longBypass_state,w	;volatile
  8260  130E  1D03               	btfss	3,2
  8261  130F  2B16               	goto	l9010
  8262                           
  8263                           ;SwitchBypass.c: 124: LATBbits.LATB2 = switchBypass_state;
  8264  1310  0C51               	rrf	_switchBypass_state,w
  8265  1311  0022               	movlb	2	; select bank2
  8266  1312  1C03               	skipc
  8267  1313  110D               	bcf	13,2	;volatile
  8268  1314  1803               	skipnc
  8269  1315  150D               	bsf	13,2	;volatile
  8270  1316                     l9010:	
  8271                           
  8272                           ;SwitchBypass.c: 125: }
  8273                           ;SwitchBypass.c: 127: setDoublePressState(0);
  8274  1316  3000               	movlw	0
  8275  1317  0021               	movlb	1	; select bank1
  8276  1318  00B8               	movwf	setDoublePressState@f_state^(0+128)
  8277  1319  00B9               	movwf	(setDoublePressState@f_state+1)^(0+128)
  8278  131A  31A1  2160         	fcall	_setDoublePressState
  8279                           
  8280                           ;SwitchBypass.c: 128: longBypass_start = 0;
  8281  131C  0023               	movlb	3	; select bank3
  8282  131D  01C4               	clrf	_longBypass_start^(0+384)
  8283                           
  8284                           ;SwitchBypass.c: 129: bypass_turning_on = 0;
  8285  131E  01C0               	clrf	_bypass_turning_on^(0+384)
  8286                           
  8287                           ;SwitchBypass.c: 130: switchBypass_toggle = 0;
  8288  131F  0024               	movlb	4	; select bank4
  8289  1320  01D9               	clrf	_switchBypass_toggle^(0+512)
  8290  1321  01DA               	clrf	(_switchBypass_toggle+1)^(0+512)
  8291                           
  8292                           ;SwitchBypass.c: 131: switchBypass_up = 1;
  8293  1322  3001               	movlw	1
  8294  1323  00E8               	movwf	_switchBypass_up^(0+512)
  8295  1324  3000               	movlw	0
  8296  1325  00E9               	movwf	(_switchBypass_up^(0+512)+1)
  8297                           
  8298                           ;SwitchBypass.c: 133: switchBypass_pressed = 25;
  8299  1326  3019               	movlw	25
  8300  1327  0023               	movlb	3	; select bank3
  8301  1328  00BA               	movwf	_switchBypass_pressed^(0+384)
  8302  1329  3000               	movlw	0
  8303  132A  00BB               	movwf	(_switchBypass_pressed^(0+384)+1)
  8304  132B  0008               	return
  8305  132C                     __end_of_updateSwitchBypass:	
  8306                           
  8307                           	psect	text7
  8308  1000                     __ptext7:	
  8309 ;; *************** function _setLongBypassState *****************
  8310 ;; Defined at:
  8311 ;;		line 163 in file "SwitchBypass.c"
  8312 ;; Parameters:    Size  Location     Type
  8313 ;;  f_state         2    0[BANK1 ] int 
  8314 ;; Auto vars:     Size  Location     Type
  8315 ;;		None
  8316 ;; Return value:  Size  Location     Type
  8317 ;;                  1    wreg      void 
  8318 ;; Registers used:
  8319 ;;		wreg, status,0
  8320 ;; Tracked objects:
  8321 ;;		On entry : 0/0
  8322 ;;		On exit  : 0/0
  8323 ;;		Unchanged: 0/0
  8324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8325 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8327 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8328 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8329 ;;Total ram usage:        4 bytes
  8330 ;; Hardware stack levels used:    1
  8331 ;; Hardware stack levels required when called:    3
  8332 ;; This function calls:
  8333 ;;		Nothing
  8334 ;; This function is called by:
  8335 ;;		_updateSwitchBypass
  8336 ;; This function uses a non-reentrant model
  8337 ;;
  8338                           
  8339                           
  8340                           ;psect for function _setLongBypassState
  8341  1000                     _setLongBypassState:	
  8342                           
  8343                           ;SwitchBypass.c: 164: if (longBypass_state == f_state) {return;}
  8344                           
  8345                           ;incstack = 0
  8346                           ; Regs used in _setLongBypassState: [wreg+status,0]
  8347  1000  0020               	movlb	0	; select bank0
  8348  1001  085D               	movf	_longBypass_state,w	;volatile
  8349  1002  0021               	movlb	1	; select bank1
  8350  1003  00A2               	movwf	??_setLongBypassState^(0+128)
  8351  1004  01A3               	clrf	(??_setLongBypassState^(0+128)+1)
  8352  1005  0821               	movf	(setLongBypassState@f_state+1)^(0+128),w
  8353  1006  0623               	xorwf	(??_setLongBypassState+1)^(0+128),w
  8354  1007  1D03               	skipz
  8355  1008  280B               	goto	u9075
  8356  1009  0820               	movf	setLongBypassState@f_state^(0+128),w
  8357  100A  0622               	xorwf	??_setLongBypassState^(0+128),w
  8358  100B                     u9075:	
  8359  100B  1903               	btfsc	3,2
  8360  100C  0008               	return
  8361                           
  8362                           ;SwitchBypass.c: 165: longBypass_state = f_state;
  8363  100D  0820               	movf	setLongBypassState@f_state^(0+128),w
  8364  100E  00A2               	movwf	??_setLongBypassState^(0+128)
  8365  100F  0822               	movf	??_setLongBypassState^(0+128),w
  8366  1010  0020               	movlb	0	; select bank0
  8367  1011  00DD               	movwf	_longBypass_state	;volatile
  8368                           
  8369                           ;SwitchBypass.c: 166: LATBbits.LATB3 = f_state;
  8370  1012  0021               	movlb	1	; select bank1
  8371  1013  0C20               	rrf	setLongBypassState@f_state^(0+128),w
  8372  1014  0022               	movlb	2	; select bank2
  8373  1015  1C03               	skipc
  8374  1016  118D               	bcf	13,3	;volatile
  8375  1017  1803               	skipnc
  8376  1018  158D               	bsf	13,3	;volatile
  8377                           
  8378                           ;SwitchBypass.c: 167: PORTCbits.RC4 = f_state;
  8379  1019  0021               	movlb	1	; select bank1
  8380  101A  0C20               	rrf	setLongBypassState@f_state^(0+128),w
  8381  101B  0020               	movlb	0	; select bank0
  8382  101C  1C03               	skipc
  8383  101D  120E               	bcf	14,4	;volatile
  8384  101E  1803               	skipnc
  8385  101F  160E               	bsf	14,4	;volatile
  8386  1020  0008               	return
  8387  1021                     __end_of_setLongBypassState:	
  8388                           
  8389                           	psect	text8
  8390  2160                     __ptext8:	
  8391 ;; *************** function _setDoublePressState *****************
  8392 ;; Defined at:
  8393 ;;		line 21 in file "preset_programming.c"
  8394 ;; Parameters:    Size  Location     Type
  8395 ;;  f_state         2   24[BANK1 ] int 
  8396 ;; Auto vars:     Size  Location     Type
  8397 ;;		None
  8398 ;; Return value:  Size  Location     Type
  8399 ;;                  1    wreg      void 
  8400 ;; Registers used:
  8401 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8402 ;; Tracked objects:
  8403 ;;		On entry : 0/0
  8404 ;;		On exit  : 0/0
  8405 ;;		Unchanged: 0/0
  8406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8407 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8408 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8409 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8410 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8411 ;;Total ram usage:        4 bytes
  8412 ;; Hardware stack levels used:    1
  8413 ;; Hardware stack levels required when called:    7
  8414 ;; This function calls:
  8415 ;;		_resetRingLEDs
  8416 ;;		_setPedalMode
  8417 ;;		_setPresetDisplay
  8418 ;;		_showSave
  8419 ;;		_wait_ms
  8420 ;; This function is called by:
  8421 ;;		_updateSwitchBypass
  8422 ;;		_updateSwitchTap
  8423 ;; This function uses a non-reentrant model
  8424 ;;
  8425                           
  8426                           
  8427                           ;psect for function _setDoublePressState
  8428  2160                     _setDoublePressState:	
  8429                           
  8430                           ;preset_programming.c: 22: if (doubleTap_state == f_state) {return;}
  8431                           
  8432                           ;incstack = 0
  8433                           ; Regs used in _setDoublePressState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8434  2160  0020               	movlb	0	; select bank0
  8435  2161  085C               	movf	_doubleTap_state,w	;volatile
  8436  2162  0021               	movlb	1	; select bank1
  8437  2163  00BA               	movwf	??_setDoublePressState^(0+128)
  8438  2164  01BB               	clrf	(??_setDoublePressState^(0+128)+1)
  8439  2165  0839               	movf	(setDoublePressState@f_state+1)^(0+128),w
  8440  2166  063B               	xorwf	(??_setDoublePressState+1)^(0+128),w
  8441  2167  1D03               	skipz
  8442  2168  296B               	goto	u9085
  8443  2169  0838               	movf	setDoublePressState@f_state^(0+128),w
  8444  216A  063A               	xorwf	??_setDoublePressState^(0+128),w
  8445  216B                     u9085:	
  8446  216B  1903               	btfsc	3,2
  8447  216C  0008               	return
  8448                           
  8449                           ;preset_programming.c: 23: doubleTap_state = f_state;
  8450  216D  0838               	movf	setDoublePressState@f_state^(0+128),w
  8451  216E  00BA               	movwf	??_setDoublePressState^(0+128)
  8452  216F  083A               	movf	??_setDoublePressState^(0+128),w
  8453  2170  0020               	movlb	0	; select bank0
  8454  2171  00DC               	movwf	_doubleTap_state	;volatile
  8455                           
  8456                           ;preset_programming.c: 24: if (f_state == 1) {
  8457  2172  0021               	movlb	1	; select bank1
  8458  2173  0338               	decf	setDoublePressState@f_state^(0+128),w
  8459  2174  0439               	iorwf	(setDoublePressState@f_state+1)^(0+128),w
  8460  2175  1D03               	btfss	3,2
  8461  2176  297A               	goto	l8600
  8462                           
  8463                           ;preset_programming.c: 25: LATBbits.LATB4 = 0;
  8464  2177  0022               	movlb	2	; select bank2
  8465  2178  120D               	bcf	13,4	;volatile
  8466                           
  8467                           ;preset_programming.c: 27: LATBbits.LATB5 = 0;
  8468  2179  128D               	bcf	13,5	;volatile
  8469  217A                     l8600:	
  8470                           
  8471                           ;preset_programming.c: 30: }
  8472                           ;preset_programming.c: 32: if (doubleTap_state == 1) {
  8473  217A  0020               	movlb	0	; select bank0
  8474  217B  035C               	decf	_doubleTap_state,w	;volatile
  8475  217C  1D03               	btfss	3,2
  8476  217D  2995               	goto	l8616
  8477                           
  8478                           ;preset_programming.c: 33: if (presetSaveMode == 0) {
  8479  217E  085F               	movf	_presetSaveMode,w
  8480  217F  1D03               	btfss	3,2
  8481  2180  298A               	goto	l8608
  8482                           
  8483                           ;preset_programming.c: 34: presetSaveMode = 1;
  8484  2181  01DF               	clrf	_presetSaveMode
  8485  2182  0ADF               	incf	_presetSaveMode,f
  8486                           
  8487                           ;preset_programming.c: 35: LATBbits.LATB1 = 0;
  8488  2183  0022               	movlb	2	; select bank2
  8489  2184  108D               	bcf	13,1	;volatile
  8490                           
  8491                           ;preset_programming.c: 36: setPresetDisplay(presetChannel);
  8492  2185  086C               	movf	_presetChannel^(0+256),w
  8493  2186  31A0  2035  31A1   	fcall	_setPresetDisplay
  8494                           
  8495                           ;preset_programming.c: 37: } else {
  8496  2189  2995               	goto	l8616
  8497  218A                     l8608:	
  8498                           
  8499                           ;preset_programming.c: 39: presetSaveMode = 0;
  8500  218A  0020               	movlb	0	; select bank0
  8501  218B  01DF               	clrf	_presetSaveMode
  8502                           
  8503                           ;preset_programming.c: 40: setPedalMode();
  8504  218C  31AE  2606  31A1   	fcall	_setPedalMode
  8505                           
  8506                           ;preset_programming.c: 41: resetRingLEDs();
  8507  218F  31AD  2522  31A1   	fcall	_resetRingLEDs
  8508                           
  8509                           ;preset_programming.c: 42: showSave();
  8510  2192  31AC  24F6  31A1   	fcall	_showSave
  8511  2195                     l8616:	
  8512                           
  8513                           ;preset_programming.c: 44: }
  8514                           ;preset_programming.c: 45: }
  8515                           ;preset_programming.c: 47: wait_ms(20);
  8516  2195  3014               	movlw	20
  8517  2196  0021               	movlb	1	; select bank1
  8518  2197  00AC               	movwf	wait_ms@timeSec^(0+128)
  8519  2198  3000               	movlw	0
  8520  2199  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8521  219A  31A0  2003         	fcall	_wait_ms
  8522  219C  0008               	return
  8523  219D                     __end_of_setDoublePressState:	
  8524                           
  8525                           	psect	text9
  8526  2CF6                     __ptext9:	
  8527 ;; *************** function _showSave *****************
  8528 ;; Defined at:
  8529 ;;		line 112 in file "LEDs.c"
  8530 ;; Parameters:    Size  Location     Type
  8531 ;;		None
  8532 ;; Auto vars:     Size  Location     Type
  8533 ;;		None
  8534 ;; Return value:  Size  Location     Type
  8535 ;;                  1    wreg      void 
  8536 ;; Registers used:
  8537 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8538 ;; Tracked objects:
  8539 ;;		On entry : 0/0
  8540 ;;		On exit  : 0/0
  8541 ;;		Unchanged: 0/0
  8542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8545 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8546 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8547 ;;Total ram usage:        1 bytes
  8548 ;; Hardware stack levels used:    1
  8549 ;; Hardware stack levels required when called:    6
  8550 ;; This function calls:
  8551 ;;		_ring_tactiles
  8552 ;;		_solidring_tactiles
  8553 ;; This function is called by:
  8554 ;;		_setDoublePressState
  8555 ;; This function uses a non-reentrant model
  8556 ;;
  8557                           
  8558                           
  8559                           ;psect for function _showSave
  8560  2CF6                     _showSave:	
  8561                           
  8562                           ;LEDs.c: 113: suspend_blink = 1;
  8563                           
  8564                           ;incstack = 0
  8565                           ; Regs used in _showSave: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8566  2CF6  3001               	movlw	1
  8567  2CF7  0021               	movlb	1	; select bank1
  8568  2CF8  00B7               	movwf	??_showSave^(0+128)
  8569  2CF9  0837               	movf	??_showSave^(0+128),w
  8570  2CFA  0022               	movlb	2	; select bank2
  8571  2CFB  00EA               	movwf	_suspend_blink^(0+256)	;volatile
  8572                           
  8573                           ;LEDs.c: 114: ring_tactiles();
  8574  2CFC  31A3  23C3  31AC   	fcall	_ring_tactiles
  8575                           
  8576                           ;LEDs.c: 115: ring_tactiles();
  8577  2CFF  31A3  23C3  31AC   	fcall	_ring_tactiles
  8578                           
  8579                           ;LEDs.c: 116: solidring_tactiles();
  8580  2D02  31A1  21DD  31AC   	fcall	_solidring_tactiles
  8581                           
  8582                           ;LEDs.c: 117: solidring_tactiles();
  8583  2D05  31A1  21DD         	fcall	_solidring_tactiles
  8584                           
  8585                           ;LEDs.c: 118: suspend_blink = 0;
  8586  2D07  0022               	movlb	2	; select bank2
  8587  2D08  01EA               	clrf	_suspend_blink^(0+256)	;volatile
  8588  2D09  0008               	return
  8589  2D0A                     __end_of_showSave:	
  8590                           
  8591                           	psect	text10
  8592  21DD                     __ptext10:	
  8593 ;; *************** function _solidring_tactiles *****************
  8594 ;; Defined at:
  8595 ;;		line 208 in file "LEDs.c"
  8596 ;; Parameters:    Size  Location     Type
  8597 ;;		None
  8598 ;; Auto vars:     Size  Location     Type
  8599 ;;  ring_delay      1   20[BANK1 ] unsigned char 
  8600 ;; Return value:  Size  Location     Type
  8601 ;;                  1    wreg      void 
  8602 ;; Registers used:
  8603 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8604 ;; Tracked objects:
  8605 ;;		On entry : 0/0
  8606 ;;		On exit  : 0/0
  8607 ;;		Unchanged: 0/0
  8608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8610 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8611 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8612 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8613 ;;Total ram usage:        3 bytes
  8614 ;; Hardware stack levels used:    1
  8615 ;; Hardware stack levels required when called:    5
  8616 ;; This function calls:
  8617 ;;		_set_leds_bottom
  8618 ;;		_set_leds_top
  8619 ;;		_wait_ms
  8620 ;; This function is called by:
  8621 ;;		_showSave
  8622 ;;		_showBootSequence
  8623 ;; This function uses a non-reentrant model
  8624 ;;
  8625                           
  8626                           
  8627                           ;psect for function _solidring_tactiles
  8628  21DD                     _solidring_tactiles:	
  8629                           
  8630                           ;LEDs.c: 209: uint8_t ring_delay = 30;
  8631                           
  8632                           ;incstack = 0
  8633                           ; Regs used in _solidring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8634  21DD  301E               	movlw	30
  8635  21DE  0021               	movlb	1	; select bank1
  8636  21DF  00B2               	movwf	??_solidring_tactiles^(0+128)
  8637  21E0  0832               	movf	??_solidring_tactiles^(0+128),w
  8638  21E1  00B4               	movwf	solidring_tactiles@ring_delay^(0+128)
  8639                           
  8640                           ;LEDs.c: 210: set_leds_top(100, 1);
  8641  21E2  3064               	movlw	100
  8642  21E3  00A0               	movwf	set_leds_top@x^(0+128)
  8643  21E4  3000               	movlw	0
  8644  21E5  00A1               	movwf	(set_leds_top@x^(0+128)+1)
  8645  21E6  3001               	movlw	1
  8646  21E7  00A2               	movwf	set_leds_top@ledState^(0+128)
  8647  21E8  3000               	movlw	0
  8648  21E9  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8649  21EA  31A5  2509  31A1   	fcall	_set_leds_top
  8650                           
  8651                           ;LEDs.c: 211: set_leds_bottom(100);
  8652  21ED  3064               	movlw	100
  8653  21EE  0021               	movlb	1	; select bank1
  8654  21EF  00A0               	movwf	set_leds_bottom@x^(0+128)
  8655  21F0  3000               	movlw	0
  8656  21F1  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8657  21F2  31A0  206F  31A1   	fcall	_set_leds_bottom
  8658                           
  8659                           ;LEDs.c: 212: wait_ms(ring_delay);
  8660  21F5  0021               	movlb	1	; select bank1
  8661  21F6  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8662  21F7  00B2               	movwf	??_solidring_tactiles^(0+128)
  8663  21F8  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8664  21F9  0832               	movf	??_solidring_tactiles^(0+128),w
  8665  21FA  00AC               	movwf	wait_ms@timeSec^(0+128)
  8666  21FB  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8667  21FC  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8668  21FD  31A0  2003  31A1   	fcall	_wait_ms
  8669                           
  8670                           ;LEDs.c: 214: set_leds_top(0, 1);
  8671  2200  3000               	movlw	0
  8672  2201  0021               	movlb	1	; select bank1
  8673  2202  00A0               	movwf	set_leds_top@x^(0+128)
  8674  2203  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8675  2204  3001               	movlw	1
  8676  2205  00A2               	movwf	set_leds_top@ledState^(0+128)
  8677  2206  3000               	movlw	0
  8678  2207  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8679  2208  31A5  2509  31A1   	fcall	_set_leds_top
  8680                           
  8681                           ;LEDs.c: 215: set_leds_bottom(0);
  8682  220B  3000               	movlw	0
  8683  220C  0021               	movlb	1	; select bank1
  8684  220D  00A0               	movwf	set_leds_bottom@x^(0+128)
  8685  220E  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8686  220F  31A0  206F  31A1   	fcall	_set_leds_bottom
  8687                           
  8688                           ;LEDs.c: 216: wait_ms(ring_delay);
  8689  2212  0021               	movlb	1	; select bank1
  8690  2213  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8691  2214  00B2               	movwf	??_solidring_tactiles^(0+128)
  8692  2215  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8693  2216  0832               	movf	??_solidring_tactiles^(0+128),w
  8694  2217  00AC               	movwf	wait_ms@timeSec^(0+128)
  8695  2218  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8696  2219  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8697  221A  31A0  2003         	fcall	_wait_ms
  8698  221C  0008               	return
  8699  221D                     __end_of_solidring_tactiles:	
  8700                           
  8701                           	psect	text11
  8702  23C3                     __ptext11:	
  8703 ;; *************** function _ring_tactiles *****************
  8704 ;; Defined at:
  8705 ;;		line 196 in file "LEDs.c"
  8706 ;; Parameters:    Size  Location     Type
  8707 ;;		None
  8708 ;; Auto vars:     Size  Location     Type
  8709 ;;  iLed            2   21[BANK1 ] int 
  8710 ;;  iLed            2   19[BANK1 ] int 
  8711 ;; Return value:  Size  Location     Type
  8712 ;;                  1    wreg      void 
  8713 ;; Registers used:
  8714 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8715 ;; Tracked objects:
  8716 ;;		On entry : 0/0
  8717 ;;		On exit  : 0/0
  8718 ;;		Unchanged: 0/0
  8719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8721 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8722 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8723 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8724 ;;Total ram usage:        5 bytes
  8725 ;; Hardware stack levels used:    1
  8726 ;; Hardware stack levels required when called:    5
  8727 ;; This function calls:
  8728 ;;		_set_leds_bottom
  8729 ;;		_set_leds_top
  8730 ;;		_wait_ms
  8731 ;; This function is called by:
  8732 ;;		_showSave
  8733 ;; This function uses a non-reentrant model
  8734 ;;
  8735                           
  8736                           
  8737                           ;psect for function _ring_tactiles
  8738  23C3                     _ring_tactiles:	
  8739                           
  8740                           ;LEDs.c: 197: for (int iLed = 1; iLed < 7; iLed++) {
  8741                           
  8742                           ;incstack = 0
  8743                           ; Regs used in _ring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8744  23C3  3001               	movlw	1
  8745  23C4  0021               	movlb	1	; select bank1
  8746  23C5  00B3               	movwf	ring_tactiles@iLed^(0+128)
  8747  23C6  3000               	movlw	0
  8748  23C7  00B4               	movwf	(ring_tactiles@iLed^(0+128)+1)
  8749  23C8  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8750  23C9  3A80               	xorlw	128
  8751  23CA  00B2               	movwf	??_ring_tactiles^(0+128)
  8752  23CB  3080               	movlw	128
  8753  23CC  0232               	subwf	??_ring_tactiles^(0+128),w
  8754  23CD  1D03               	skipz
  8755  23CE  2BD1               	goto	u8525
  8756  23CF  3007               	movlw	7
  8757  23D0  0233               	subwf	ring_tactiles@iLed^(0+128),w
  8758  23D1                     u8525:	
  8759  23D1  1803               	btfsc	3,0
  8760  23D2  2BF7               	goto	l8092
  8761  23D3                     l8084:	
  8762                           
  8763                           ;LEDs.c: 198: set_leds_top(iLed, 1);
  8764  23D3  0021               	movlb	1	; select bank1
  8765  23D4  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8766  23D5  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8767  23D6  0833               	movf	ring_tactiles@iLed^(0+128),w
  8768  23D7  00A0               	movwf	set_leds_top@x^(0+128)
  8769  23D8  3001               	movlw	1
  8770  23D9  00A2               	movwf	set_leds_top@ledState^(0+128)
  8771  23DA  3000               	movlw	0
  8772  23DB  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8773  23DC  31A5  2509  31A3   	fcall	_set_leds_top
  8774                           
  8775                           ;LEDs.c: 199: wait_ms(5);
  8776  23DF  3005               	movlw	5
  8777  23E0  0021               	movlb	1	; select bank1
  8778  23E1  00AC               	movwf	wait_ms@timeSec^(0+128)
  8779  23E2  3000               	movlw	0
  8780  23E3  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8781  23E4  31A0  2003  31A3   	fcall	_wait_ms
  8782  23E7  3001               	movlw	1
  8783  23E8  0021               	movlb	1	; select bank1
  8784  23E9  07B3               	addwf	ring_tactiles@iLed^(0+128),f
  8785  23EA  3000               	movlw	0
  8786  23EB  3DB4               	addwfc	(ring_tactiles@iLed+1)^(0+128),f
  8787  23EC  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8788  23ED  3A80               	xorlw	128
  8789  23EE  00B2               	movwf	??_ring_tactiles^(0+128)
  8790  23EF  3080               	movlw	128
  8791  23F0  0232               	subwf	??_ring_tactiles^(0+128),w
  8792  23F1  1D03               	skipz
  8793  23F2  2BF5               	goto	u8535
  8794  23F3  3007               	movlw	7
  8795  23F4  0233               	subwf	ring_tactiles@iLed^(0+128),w
  8796  23F5                     u8535:	
  8797  23F5  1C03               	skipc
  8798  23F6  2BD3               	goto	l8084
  8799  23F7                     l8092:	
  8800                           
  8801                           ;LEDs.c: 200: }
  8802                           ;LEDs.c: 201: for (int iLed = 5; iLed > -1; iLed--) {
  8803  23F7  3005               	movlw	5
  8804  23F8  0021               	movlb	1	; select bank1
  8805  23F9  00B5               	movwf	ring_tactiles@iLed_1568^(0+128)
  8806  23FA  3000               	movlw	0
  8807  23FB  00B6               	movwf	(ring_tactiles@iLed_1568^(0+128)+1)
  8808  23FC                     L4:	
  8809  23FC  1BB6               	btfsc	(ring_tactiles@iLed_1568+1)^(0+128),7
  8810  23FD  0008               	return
  8811                           
  8812                           ;LEDs.c: 202: set_leds_bottom(iLed);
  8813  23FE  0836               	movf	(ring_tactiles@iLed_1568+1)^(0+128),w
  8814  23FF  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8815  2400  0835               	movf	ring_tactiles@iLed_1568^(0+128),w
  8816  2401  00A0               	movwf	set_leds_bottom@x^(0+128)
  8817  2402  31A0  206F  31A3   	fcall	_set_leds_bottom
  8818                           
  8819                           ;LEDs.c: 203: wait_ms(5);
  8820  2405  3005               	movlw	5
  8821  2406  0021               	movlb	1	; select bank1
  8822  2407  00AC               	movwf	wait_ms@timeSec^(0+128)
  8823  2408  3000               	movlw	0
  8824  2409  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8825  240A  31A0  2003  31A3   	fcall	_wait_ms
  8826  240D  30FF               	movlw	255
  8827  240E  0021               	movlb	1	; select bank1
  8828  240F  07B5               	addwf	ring_tactiles@iLed_1568^(0+128),f
  8829  2410  30FF               	movlw	255
  8830  2411  3DB6               	addwfc	(ring_tactiles@iLed_1568+1)^(0+128),f
  8831  2412  2BFC               	goto	L4
  8832  2413                     __end_of_ring_tactiles:	
  8833                           
  8834                           	psect	text12
  8835  2E06                     __ptext12:	
  8836 ;; *************** function _setPedalMode *****************
  8837 ;; Defined at:
  8838 ;;		line 119 in file "tactiles.c"
  8839 ;; Parameters:    Size  Location     Type
  8840 ;;		None
  8841 ;; Auto vars:     Size  Location     Type
  8842 ;;		None
  8843 ;; Return value:  Size  Location     Type
  8844 ;;                  1    wreg      void 
  8845 ;; Registers used:
  8846 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8847 ;; Tracked objects:
  8848 ;;		On entry : 0/0
  8849 ;;		On exit  : 0/0
  8850 ;;		Unchanged: 0/0
  8851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8855 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8856 ;;Total ram usage:        0 bytes
  8857 ;; Hardware stack levels used:    1
  8858 ;; Hardware stack levels required when called:    5
  8859 ;; This function calls:
  8860 ;;		_resetRingLEDs
  8861 ;;		_setExpressionDisplay
  8862 ;;		_setPresetDisplay
  8863 ;; This function is called by:
  8864 ;;		_update_mode
  8865 ;;		_setDoublePressState
  8866 ;; This function uses a non-reentrant model
  8867 ;;
  8868                           
  8869                           
  8870                           ;psect for function _setPedalMode
  8871  2E06                     _setPedalMode:	
  8872                           
  8873                           ;tactiles.c: 120: switch (mode2_state) {
  8874                           
  8875                           ;incstack = 0
  8876                           ; Regs used in _setPedalMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8877  2E06  2E1C               	goto	l8292
  8878  2E07                     l1023:	
  8879                           ;tactiles.c: 121: case 0:
  8880                           
  8881                           
  8882                           ;tactiles.c: 122: LATBbits.LATB1 = 0;
  8883  2E07  0022               	movlb	2	; select bank2
  8884  2E08  108D               	bcf	13,1	;volatile
  8885                           
  8886                           ;tactiles.c: 123: LATBbits.LATB0 = 0;
  8887  2E09  100D               	bcf	13,0	;volatile
  8888                           
  8889                           ;tactiles.c: 124: resetRingLEDs();
  8890  2E0A  31AD  2522         	fcall	_resetRingLEDs
  8891                           
  8892                           ;tactiles.c: 125: break;
  8893  2E0C  0008               	return
  8894  2E0D                     l1025:	
  8895                           ;tactiles.c: 126: case 1:
  8896                           
  8897                           
  8898                           ;tactiles.c: 127: LATBbits.LATB1 = 0;
  8899  2E0D  0022               	movlb	2	; select bank2
  8900  2E0E  108D               	bcf	13,1	;volatile
  8901                           
  8902                           ;tactiles.c: 128: LATBbits.LATB0 = 1;
  8903  2E0F  140D               	bsf	13,0	;volatile
  8904                           
  8905                           ;tactiles.c: 129: setPresetDisplay(presetChannel);
  8906  2E10  086C               	movf	_presetChannel^(0+256),w
  8907  2E11  31A0  2035         	fcall	_setPresetDisplay
  8908                           
  8909                           ;tactiles.c: 130: break;
  8910  2E13  0008               	return
  8911  2E14                     l1026:	
  8912                           ;tactiles.c: 131: case 2:
  8913                           
  8914                           
  8915                           ;tactiles.c: 132: LATBbits.LATB1 = 1;
  8916  2E14  0022               	movlb	2	; select bank2
  8917  2E15  148D               	bsf	13,1	;volatile
  8918                           
  8919                           ;tactiles.c: 133: LATBbits.LATB0 = 0;
  8920  2E16  100D               	bcf	13,0	;volatile
  8921                           
  8922                           ;tactiles.c: 134: setExpressionDisplay(expressionChannel);
  8923  2E17  0023               	movlb	3	; select bank3
  8924  2E18  0863               	movf	_expressionChannel^(0+384),w
  8925  2E19  31AD  250A         	fcall	_setExpressionDisplay
  8926                           
  8927                           ;tactiles.c: 136: }
  8928                           
  8929                           ;tactiles.c: 135: break;
  8930  2E1B  0008               	return
  8931  2E1C                     l8292:	
  8932  2E1C  0020               	movlb	0	; select bank0
  8933  2E1D  085E               	movf	_mode2_state,w
  8934                           
  8935                           ; Switch size 1, requested type "space"
  8936                           ; Number of cases is 3, Range of values is 0 to 2
  8937                           ; switch strategies available:
  8938                           ; Name         Instructions Cycles
  8939                           ; simple_byte           10     6 (average)
  8940                           ; direct_byte           12     6 (fixed)
  8941                           ; jumptable            260     6 (fixed)
  8942                           ;	Chosen strategy is simple_byte
  8943  2E1E  3A00               	xorlw	0	; case 0
  8944  2E1F  1903               	skipnz
  8945  2E20  2E07               	goto	l1023
  8946  2E21  3A01               	xorlw	1	; case 1
  8947  2E22  1903               	skipnz
  8948  2E23  2E0D               	goto	l1025
  8949  2E24  3A03               	xorlw	3	; case 2
  8950  2E25  1903               	skipnz
  8951  2E26  2E14               	goto	l1026
  8952  2E27  2E28               	goto	l1027
  8953  2E28                     l1027:	
  8954  2E28  0008               	return
  8955  2E29                     __end_of_setPedalMode:	
  8956                           
  8957                           	psect	text13
  8958  2035                     __ptext13:	
  8959 ;; *************** function _setPresetDisplay *****************
  8960 ;; Defined at:
  8961 ;;		line 51 in file "preset_programming.c"
  8962 ;; Parameters:    Size  Location     Type
  8963 ;;  ledChannel      1    wreg     unsigned char 
  8964 ;; Auto vars:     Size  Location     Type
  8965 ;;  ledChannel      1    6[BANK1 ] unsigned char 
  8966 ;; Return value:  Size  Location     Type
  8967 ;;                  1    wreg      void 
  8968 ;; Registers used:
  8969 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8970 ;; Tracked objects:
  8971 ;;		On entry : 0/0
  8972 ;;		On exit  : 0/0
  8973 ;;		Unchanged: 0/0
  8974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8976 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8977 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8978 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8979 ;;Total ram usage:        3 bytes
  8980 ;; Hardware stack levels used:    1
  8981 ;; Hardware stack levels required when called:    4
  8982 ;; This function calls:
  8983 ;;		_set_leds_bottom
  8984 ;;		_set_leds_top
  8985 ;; This function is called by:
  8986 ;;		_setPedalMode
  8987 ;;		_update_selectMode
  8988 ;;		_setDoublePressState
  8989 ;; This function uses a non-reentrant model
  8990 ;;
  8991                           
  8992                           
  8993                           ;psect for function _setPresetDisplay
  8994  2035                     _setPresetDisplay:	
  8995                           
  8996                           ;incstack = 0
  8997                           ; Regs used in _setPresetDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8998                           ;setPresetDisplay@ledChannel stored from wreg
  8999  2035  0021               	movlb	1	; select bank1
  9000  2036  00A6               	movwf	setPresetDisplay@ledChannel^(0+128)
  9001                           
  9002                           ;preset_programming.c: 52: if (ledChannel < 6) {
  9003  2037  3006               	movlw	6
  9004  2038  0226               	subwf	setPresetDisplay@ledChannel^(0+128),w
  9005  2039  1803               	skipnc
  9006  203A  2851               	goto	l8112
  9007                           
  9008                           ;preset_programming.c: 53: set_leds_top(ledChannel, 1);
  9009  203B  0826               	movf	setPresetDisplay@ledChannel^(0+128),w
  9010  203C  00A4               	movwf	??_setPresetDisplay^(0+128)
  9011  203D  01A5               	clrf	(??_setPresetDisplay^(0+128)+1)
  9012  203E  0824               	movf	??_setPresetDisplay^(0+128),w
  9013  203F  00A0               	movwf	set_leds_top@x^(0+128)
  9014  2040  0825               	movf	(??_setPresetDisplay+1)^(0+128),w
  9015  2041  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  9016  2042  3001               	movlw	1
  9017  2043  00A2               	movwf	set_leds_top@ledState^(0+128)
  9018  2044  3000               	movlw	0
  9019  2045  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  9020  2046  31A5  2509  31A0   	fcall	_set_leds_top
  9021                           
  9022                           ;preset_programming.c: 54: set_leds_bottom(6);
  9023  2049  3006               	movlw	6
  9024  204A  0021               	movlb	1	; select bank1
  9025  204B  00A0               	movwf	set_leds_bottom@x^(0+128)
  9026  204C  3000               	movlw	0
  9027  204D  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  9028  204E  31A0  206F         	fcall	_set_leds_bottom
  9029                           
  9030                           ;preset_programming.c: 55: } else {
  9031  2050  0008               	return
  9032  2051                     l8112:	
  9033                           
  9034                           ;preset_programming.c: 56: set_leds_top(6, 1);
  9035  2051  3006               	movlw	6
  9036  2052  0021               	movlb	1	; select bank1
  9037  2053  00A0               	movwf	set_leds_top@x^(0+128)
  9038  2054  3000               	movlw	0
  9039  2055  00A1               	movwf	(set_leds_top@x^(0+128)+1)
  9040  2056  3001               	movlw	1
  9041  2057  00A2               	movwf	set_leds_top@ledState^(0+128)
  9042  2058  3000               	movlw	0
  9043  2059  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  9044  205A  31A5  2509  31A0   	fcall	_set_leds_top
  9045                           
  9046                           ;preset_programming.c: 57: set_leds_bottom(10 - ledChannel + 1);
  9047  205D  0021               	movlb	1	; select bank1
  9048  205E  0826               	movf	setPresetDisplay@ledChannel^(0+128),w
  9049  205F  00A4               	movwf	??_setPresetDisplay^(0+128)
  9050  2060  01A5               	clrf	(??_setPresetDisplay^(0+128)+1)
  9051  2061  09A4               	comf	??_setPresetDisplay^(0+128),f
  9052  2062  09A5               	comf	(??_setPresetDisplay^(0+128)+1),f
  9053  2063  0AA4               	incf	??_setPresetDisplay^(0+128),f
  9054  2064  1903               	skipnz
  9055  2065  0AA5               	incf	(??_setPresetDisplay^(0+128)+1),f
  9056  2066  0824               	movf	??_setPresetDisplay^(0+128),w
  9057  2067  3E0B               	addlw	11
  9058  2068  00A0               	movwf	set_leds_bottom@x^(0+128)
  9059  2069  3000               	movlw	0
  9060  206A  3D25               	addwfc	(??_setPresetDisplay+1)^(0+128),w
  9061  206B  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  9062  206C  31A0  206F         	fcall	_set_leds_bottom
  9063  206E  0008               	return
  9064  206F                     __end_of_setPresetDisplay:	
  9065                           
  9066                           	psect	text14
  9067  2D0A                     __ptext14:	
  9068 ;; *************** function _setExpressionDisplay *****************
  9069 ;; Defined at:
  9070 ;;		line 66 in file "preset_programming.c"
  9071 ;; Parameters:    Size  Location     Type
  9072 ;;  ledChannel      1    wreg     unsigned char 
  9073 ;; Auto vars:     Size  Location     Type
  9074 ;;  ledChannel      1    6[BANK1 ] unsigned char 
  9075 ;; Return value:  Size  Location     Type
  9076 ;;                  1    wreg      void 
  9077 ;; Registers used:
  9078 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9079 ;; Tracked objects:
  9080 ;;		On entry : 0/0
  9081 ;;		On exit  : 0/0
  9082 ;;		Unchanged: 0/0
  9083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9085 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9086 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9087 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9088 ;;Total ram usage:        3 bytes
  9089 ;; Hardware stack levels used:    1
  9090 ;; Hardware stack levels required when called:    4
  9091 ;; This function calls:
  9092 ;;		_set_leds_bottom
  9093 ;;		_set_leds_top
  9094 ;; This function is called by:
  9095 ;;		_setPedalMode
  9096 ;;		_update_selectMode
  9097 ;; This function uses a non-reentrant model
  9098 ;;
  9099                           
  9100                           
  9101                           ;psect for function _setExpressionDisplay
  9102  2D0A                     _setExpressionDisplay:	
  9103                           
  9104                           ;incstack = 0
  9105                           ; Regs used in _setExpressionDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9106                           ;setExpressionDisplay@ledChannel stored from wreg
  9107  2D0A  0021               	movlb	1	; select bank1
  9108  2D0B  00A6               	movwf	setExpressionDisplay@ledChannel^(0+128)
  9109                           
  9110                           ;preset_programming.c: 67: set_leds_top(ledChannel, 1);
  9111  2D0C  0826               	movf	setExpressionDisplay@ledChannel^(0+128),w
  9112  2D0D  00A4               	movwf	??_setExpressionDisplay^(0+128)
  9113  2D0E  01A5               	clrf	(??_setExpressionDisplay^(0+128)+1)
  9114  2D0F  0824               	movf	??_setExpressionDisplay^(0+128),w
  9115  2D10  00A0               	movwf	set_leds_top@x^(0+128)
  9116  2D11  0825               	movf	(??_setExpressionDisplay+1)^(0+128),w
  9117  2D12  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  9118  2D13  3001               	movlw	1
  9119  2D14  00A2               	movwf	set_leds_top@ledState^(0+128)
  9120  2D15  3000               	movlw	0
  9121  2D16  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  9122  2D17  31A5  2509  31AD   	fcall	_set_leds_top
  9123                           
  9124                           ;preset_programming.c: 68: set_leds_bottom(6);
  9125  2D1A  3006               	movlw	6
  9126  2D1B  0021               	movlb	1	; select bank1
  9127  2D1C  00A0               	movwf	set_leds_bottom@x^(0+128)
  9128  2D1D  3000               	movlw	0
  9129  2D1E  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  9130  2D1F  31A0  206F         	fcall	_set_leds_bottom
  9131  2D21  0008               	return
  9132  2D22                     __end_of_setExpressionDisplay:	
  9133                           
  9134                           	psect	text15
  9135  2D22                     __ptext15:	
  9136 ;; *************** function _resetRingLEDs *****************
  9137 ;; Defined at:
  9138 ;;		line 61 in file "preset_programming.c"
  9139 ;; Parameters:    Size  Location     Type
  9140 ;;		None
  9141 ;; Auto vars:     Size  Location     Type
  9142 ;;		None
  9143 ;; Return value:  Size  Location     Type
  9144 ;;                  1    wreg      void 
  9145 ;; Registers used:
  9146 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9147 ;; Tracked objects:
  9148 ;;		On entry : 0/0
  9149 ;;		On exit  : 0/0
  9150 ;;		Unchanged: 0/0
  9151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9153 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9155 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9156 ;;Total ram usage:        0 bytes
  9157 ;; Hardware stack levels used:    1
  9158 ;; Hardware stack levels required when called:    4
  9159 ;; This function calls:
  9160 ;;		_set_leds_bottom
  9161 ;;		_set_leds_top
  9162 ;; This function is called by:
  9163 ;;		_update_mode
  9164 ;;		_setPedalMode
  9165 ;;		_setDoublePressState
  9166 ;; This function uses a non-reentrant model
  9167 ;;
  9168                           
  9169                           
  9170                           ;psect for function _resetRingLEDs
  9171  2D22                     _resetRingLEDs:	
  9172                           
  9173                           ;preset_programming.c: 62: set_leds_top(top_push_state, 1);
  9174                           
  9175                           ;incstack = 0
  9176                           ; Regs used in _resetRingLEDs: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9177  2D22  0020               	movlb	0	; select bank0
  9178  2D23  084D               	movf	_top_push_state+1,w
  9179  2D24  0021               	movlb	1	; select bank1
  9180  2D25  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  9181  2D26  0020               	movlb	0	; select bank0
  9182  2D27  084C               	movf	_top_push_state,w
  9183  2D28  0021               	movlb	1	; select bank1
  9184  2D29  00A0               	movwf	set_leds_top@x^(0+128)
  9185  2D2A  3001               	movlw	1
  9186  2D2B  00A2               	movwf	set_leds_top@ledState^(0+128)
  9187  2D2C  3000               	movlw	0
  9188  2D2D  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  9189  2D2E  31A5  2509  31AD   	fcall	_set_leds_top
  9190                           
  9191                           ;preset_programming.c: 63: set_leds_bottom(bottom_push_state);
  9192  2D31  0020               	movlb	0	; select bank0
  9193  2D32  0849               	movf	_bottom_push_state+1,w
  9194  2D33  0021               	movlb	1	; select bank1
  9195  2D34  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  9196  2D35  0020               	movlb	0	; select bank0
  9197  2D36  0848               	movf	_bottom_push_state,w
  9198  2D37  0021               	movlb	1	; select bank1
  9199  2D38  00A0               	movwf	set_leds_bottom@x^(0+128)
  9200  2D39  31A0  206F         	fcall	_set_leds_bottom
  9201  2D3B  0008               	return
  9202  2D3C                     __end_of_resetRingLEDs:	
  9203                           
  9204                           	psect	text16
  9205  039B                     __ptext16:	
  9206 ;; *************** function _updateModulationArray *****************
  9207 ;; Defined at:
  9208 ;;		line 44 in file "modulation.c"
  9209 ;; Parameters:    Size  Location     Type
  9210 ;;		None
  9211 ;; Auto vars:     Size  Location     Type
  9212 ;;  thisAngle       2   55[BANK2 ] int 
  9213 ;;  iAngle          1   54[BANK2 ] unsigned char 
  9214 ;;  iAngle          1   59[BANK2 ] unsigned char 
  9215 ;;  subDiv          2   57[BANK2 ] int 
  9216 ;;  angleFactor     2   52[BANK2 ] int 
  9217 ;; Return value:  Size  Location     Type
  9218 ;;                  1    wreg      void 
  9219 ;; Registers used:
  9220 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9221 ;; Tracked objects:
  9222 ;;		On entry : 0/0
  9223 ;;		On exit  : 0/0
  9224 ;;		Unchanged: 0/0
  9225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9227 ;;      Locals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9228 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9229 ;;      Totals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9230 ;;Total ram usage:       12 bytes
  9231 ;; Hardware stack levels used:    1
  9232 ;; Hardware stack levels required when called:    7
  9233 ;; This function calls:
  9234 ;;		___awdiv
  9235 ;;		___awtoft
  9236 ;;		___wmul
  9237 ;;		_getModulationSubdivision
  9238 ;;		_modCos
  9239 ;;		_modSaw
  9240 ;;		_modSawRev
  9241 ;;		_modSquare
  9242 ;;		_modTri
  9243 ;; This function is called by:
  9244 ;;		_main
  9245 ;; This function uses a non-reentrant model
  9246 ;;
  9247                           
  9248                           
  9249                           ;psect for function _updateModulationArray
  9250  039B                     _updateModulationArray:	
  9251                           
  9252                           ;modulation.c: 45: int subDiv = getModulationSubdivision();
  9253                           
  9254                           ;incstack = 0
  9255                           ; Regs used in _updateModulationArray: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9256  039B  31AF  2732  3183   	fcall	_getModulationSubdivision
  9257  039E  0021               	movlb	1	; select bank1
  9258  039F  0821               	movf	(?_getModulationSubdivision+1)^(0+128),w
  9259  03A0  0022               	movlb	2	; select bank2
  9260  03A1  00DA               	movwf	(updateModulationArray@subDiv+1)^(0+256)
  9261  03A2  0021               	movlb	1	; select bank1
  9262  03A3  0820               	movf	?_getModulationSubdivision^(0+128),w
  9263  03A4  0022               	movlb	2	; select bank2
  9264  03A5  00D9               	movwf	updateModulationArray@subDiv^(0+256)
  9265                           
  9266                           ;modulation.c: 46: if (modArray[120] == bottom_push_state && modArray[121] == symmetry &
      +                          & modArray[122] == subDiv) {
  9267  03A6  307A               	movlw	122
  9268  03A7  0086               	movwf	6
  9269  03A8  3024               	movlw	36
  9270  03A9  0087               	movwf	7
  9271  03AA  3F40               	moviw [0]fsr1
  9272  03AB  00D0               	movwf	??_updateModulationArray^(0+256)
  9273  03AC  3F41               	moviw [1]fsr1
  9274  03AD  00D1               	movwf	(??_updateModulationArray^(0+256)+1)
  9275  03AE  0020               	movlb	0	; select bank0
  9276  03AF  0849               	movf	_bottom_push_state+1,w
  9277  03B0  0022               	movlb	2	; select bank2
  9278  03B1  0651               	xorwf	(??_updateModulationArray+1)^(0+256),w
  9279  03B2  1D03               	skipz
  9280  03B3  2BB8               	goto	u10295
  9281  03B4  0020               	movlb	0	; select bank0
  9282  03B5  0848               	movf	_bottom_push_state,w
  9283  03B6  0022               	movlb	2	; select bank2
  9284  03B7  0650               	xorwf	??_updateModulationArray^(0+256),w
  9285  03B8                     u10295:	
  9286  03B8  1D03               	skipz
  9287  03B9  2BDE               	goto	l9292
  9288  03BA  307C               	movlw	124
  9289  03BB  0086               	movwf	6
  9290  03BC  3024               	movlw	36
  9291  03BD  0087               	movwf	7
  9292  03BE  3F40               	moviw [0]fsr1
  9293  03BF  00D0               	movwf	??_updateModulationArray^(0+256)
  9294  03C0  3F41               	moviw [1]fsr1
  9295  03C1  00D1               	movwf	(??_updateModulationArray^(0+256)+1)
  9296  03C2  0023               	movlb	3	; select bank3
  9297  03C3  085C               	movf	(_symmetry+1)^(0+384),w
  9298  03C4  0022               	movlb	2	; select bank2
  9299  03C5  0651               	xorwf	(??_updateModulationArray+1)^(0+256),w
  9300  03C6  1D03               	skipz
  9301  03C7  2BCC               	goto	u10305
  9302  03C8  0023               	movlb	3	; select bank3
  9303  03C9  085B               	movf	_symmetry^(0+384),w
  9304  03CA  0022               	movlb	2	; select bank2
  9305  03CB  0650               	xorwf	??_updateModulationArray^(0+256),w
  9306  03CC                     u10305:	
  9307  03CC  1D03               	skipz
  9308  03CD  2BDE               	goto	l9292
  9309  03CE  307E               	movlw	126
  9310  03CF  0086               	movwf	6
  9311  03D0  3024               	movlw	36
  9312  03D1  0087               	movwf	7
  9313  03D2  3F40               	moviw [0]fsr1
  9314  03D3  00D0               	movwf	??_updateModulationArray^(0+256)
  9315  03D4  3F41               	moviw [1]fsr1
  9316  03D5  00D1               	movwf	(??_updateModulationArray^(0+256)+1)
  9317  03D6  085A               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9318  03D7  0651               	xorwf	(??_updateModulationArray+1)^(0+256),w
  9319  03D8  1D03               	skipz
  9320  03D9  2BDC               	goto	u10315
  9321  03DA  0859               	movf	updateModulationArray@subDiv^(0+256),w
  9322  03DB  0650               	xorwf	??_updateModulationArray^(0+256),w
  9323  03DC                     u10315:	
  9324  03DC  1903               	btfsc	3,2
  9325  03DD  0008               	return
  9326  03DE                     l9292:	
  9327                           ;modulation.c: 48: return;
  9328                           
  9329                           
  9330                           ;modulation.c: 49: }
  9331                           ;modulation.c: 50: test_timer = 0;
  9332  03DE  3000               	movlw	0
  9333  03DF  0024               	movlb	4	; select bank4
  9334  03E0  00C4               	movwf	(_test_timer+3)^(0+512)	;volatile
  9335  03E1  3000               	movlw	0
  9336  03E2  00C3               	movwf	(_test_timer+2)^(0+512)	;volatile
  9337  03E3  3000               	movlw	0
  9338  03E4  00C2               	movwf	(_test_timer+1)^(0+512)	;volatile
  9339  03E5  3000               	movlw	0
  9340  03E6  00C1               	movwf	_test_timer^(0+512)	;volatile
  9341                           
  9342                           ;modulation.c: 51: if (modArray[121] != symmetry) {
  9343  03E7  307C               	movlw	124
  9344  03E8  0086               	movwf	6
  9345  03E9  3024               	movlw	36
  9346  03EA  0087               	movwf	7
  9347  03EB  3F40               	moviw [0]fsr1
  9348  03EC  0022               	movlb	2	; select bank2
  9349  03ED  00D0               	movwf	??_updateModulationArray^(0+256)
  9350  03EE  3F41               	moviw [1]fsr1
  9351  03EF  00D1               	movwf	(??_updateModulationArray^(0+256)+1)
  9352  03F0  0023               	movlb	3	; select bank3
  9353  03F1  085C               	movf	(_symmetry+1)^(0+384),w
  9354  03F2  0022               	movlb	2	; select bank2
  9355  03F3  0651               	xorwf	(??_updateModulationArray+1)^(0+256),w
  9356  03F4  1D03               	skipz
  9357  03F5  2BFA               	goto	u10325
  9358  03F6  0023               	movlb	3	; select bank3
  9359  03F7  085B               	movf	_symmetry^(0+384),w
  9360  03F8  0022               	movlb	2	; select bank2
  9361  03F9  0650               	xorwf	??_updateModulationArray^(0+256),w
  9362  03FA                     u10325:	
  9363  03FA  1D03               	btfss	3,2
  9364                           
  9365                           ;modulation.c: 52: LATDbits.LATD3 = 1;
  9366  03FB  158F               	bsf	15,3	;volatile
  9367                           
  9368                           ;modulation.c: 53: }
  9369                           ;modulation.c: 54: if (modArray[122] != subDiv) {
  9370  03FC  307E               	movlw	126
  9371  03FD  0086               	movwf	6
  9372  03FE  3024               	movlw	36
  9373  03FF  0087               	movwf	7
  9374  0400  3F40               	moviw [0]fsr1
  9375  0401  00D0               	movwf	??_updateModulationArray^(0+256)
  9376  0402  3F41               	moviw [1]fsr1
  9377  0403  00D1               	movwf	(??_updateModulationArray^(0+256)+1)
  9378  0404  085A               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9379  0405  0651               	xorwf	(??_updateModulationArray+1)^(0+256),w
  9380  0406  1D03               	skipz
  9381  0407  2C0A               	goto	u10335
  9382  0408  0859               	movf	updateModulationArray@subDiv^(0+256),w
  9383  0409  0650               	xorwf	??_updateModulationArray^(0+256),w
  9384  040A                     u10335:	
  9385  040A  1D03               	btfss	3,2
  9386                           
  9387                           ;modulation.c: 55: LATDbits.LATD2 = 1;
  9388  040B  150F               	bsf	15,2	;volatile
  9389                           
  9390                           ;modulation.c: 56: }
  9391                           ;modulation.c: 57: int angleFactor = 360/subDiv;
  9392  040C  085A               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9393  040D  0021               	movlb	1	; select bank1
  9394  040E  00A1               	movwf	(___awdiv@divisor+1)^(0+128)
  9395  040F  0022               	movlb	2	; select bank2
  9396  0410  0859               	movf	updateModulationArray@subDiv^(0+256),w
  9397  0411  0021               	movlb	1	; select bank1
  9398  0412  00A0               	movwf	___awdiv@divisor^(0+128)
  9399  0413  3068               	movlw	104
  9400  0414  00A2               	movwf	___awdiv@dividend^(0+128)
  9401  0415  3001               	movlw	1
  9402  0416  00A3               	movwf	(___awdiv@dividend^(0+128)+1)
  9403  0417  31A4  2464  3183   	fcall	___awdiv
  9404  041A  0021               	movlb	1	; select bank1
  9405  041B  0821               	movf	(?___awdiv+1)^(0+128),w
  9406  041C  0022               	movlb	2	; select bank2
  9407  041D  00D5               	movwf	(updateModulationArray@angleFactor+1)^(0+256)
  9408  041E  0021               	movlb	1	; select bank1
  9409  041F  0820               	movf	?___awdiv^(0+128),w
  9410  0420  0022               	movlb	2	; select bank2
  9411  0421  00D4               	movwf	updateModulationArray@angleFactor^(0+256)
  9412                           
  9413                           ;modulation.c: 58: for (char iAngle = 0; iAngle < subDiv; iAngle++) {
  9414  0422  01DB               	clrf	updateModulationArray@iAngle^(0+256)
  9415  0423                     l9326:	
  9416  0423  085A               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9417  0424  3A80               	xorlw	128
  9418  0425  3C80               	sublw	128
  9419  0426  1D03               	skipz
  9420  0427  2C2A               	goto	u10345
  9421  0428  0859               	movf	updateModulationArray@subDiv^(0+256),w
  9422  0429  025B               	subwf	updateModulationArray@iAngle^(0+256),w
  9423  042A                     u10345:	
  9424  042A  1803               	btfsc	3,0
  9425  042B  2DD0               	goto	l9328
  9426                           
  9427                           ;modulation.c: 59: int thisAngle = angleFactor * iAngle;
  9428  042C  0022               	movlb	2	; select bank2
  9429  042D  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9430  042E  00D0               	movwf	??_updateModulationArray^(0+256)
  9431  042F  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9432  0430  0850               	movf	??_updateModulationArray^(0+256),w
  9433  0431  00AE               	movwf	___wmul@multiplier^(0+256)
  9434  0432  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9435  0433  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
  9436  0434  0855               	movf	(updateModulationArray@angleFactor+1)^(0+256),w
  9437  0435  00B1               	movwf	(___wmul@multiplicand+1)^(0+256)
  9438  0436  0854               	movf	updateModulationArray@angleFactor^(0+256),w
  9439  0437  00B0               	movwf	___wmul@multiplicand^(0+256)
  9440  0438  31AD  2570  3183   	fcall	___wmul
  9441  043B  0022               	movlb	2	; select bank2
  9442  043C  082F               	movf	(?___wmul+1)^(0+256),w
  9443  043D  00D8               	movwf	(updateModulationArray@thisAngle+1)^(0+256)
  9444  043E  082E               	movf	?___wmul^(0+256),w
  9445  043F  00D7               	movwf	updateModulationArray@thisAngle^(0+256)
  9446                           
  9447                           ;modulation.c: 60: switch (bottom_push_state) {
  9448  0440  2DB3               	goto	l9322
  9449  0441                     l9308:	
  9450                           ;modulation.c: 61: case 1:
  9451                           
  9452                           
  9453                           ;modulation.c: 62: modArray[iAngle] = modCos(thisAngle, symmetry);
  9454  0441  0022               	movlb	2	; select bank2
  9455  0442  0858               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9456  0443  0021               	movlb	1	; select bank1
  9457  0444  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9458  0445  0022               	movlb	2	; select bank2
  9459  0446  0857               	movf	updateModulationArray@thisAngle^(0+256),w
  9460  0447  0021               	movlb	1	; select bank1
  9461  0448  00A8               	movwf	___awtoft@c^(0+128)
  9462  0449  31AD  25E4  3183   	fcall	___awtoft
  9463  044C  0021               	movlb	1	; select bank1
  9464  044D  0828               	movf	?___awtoft^(0+128),w
  9465  044E  0022               	movlb	2	; select bank2
  9466  044F  00B4               	movwf	modCos@angle^(0+256)
  9467  0450  0021               	movlb	1	; select bank1
  9468  0451  0829               	movf	(?___awtoft+1)^(0+128),w
  9469  0452  0022               	movlb	2	; select bank2
  9470  0453  00B5               	movwf	(modCos@angle+1)^(0+256)
  9471  0454  0021               	movlb	1	; select bank1
  9472  0455  082A               	movf	(?___awtoft+2)^(0+128),w
  9473  0456  0022               	movlb	2	; select bank2
  9474  0457  00B6               	movwf	(modCos@angle+2)^(0+256)
  9475  0458  0023               	movlb	3	; select bank3
  9476  0459  085C               	movf	(_symmetry+1)^(0+384),w
  9477  045A  0021               	movlb	1	; select bank1
  9478  045B  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9479  045C  0023               	movlb	3	; select bank3
  9480  045D  085B               	movf	_symmetry^(0+384),w
  9481  045E  0021               	movlb	1	; select bank1
  9482  045F  00A8               	movwf	___awtoft@c^(0+128)
  9483  0460  31AD  25E4  3183   	fcall	___awtoft
  9484  0463  0021               	movlb	1	; select bank1
  9485  0464  0828               	movf	?___awtoft^(0+128),w
  9486  0465  0022               	movlb	2	; select bank2
  9487  0466  00B7               	movwf	modCos@inflection^(0+256)
  9488  0467  0021               	movlb	1	; select bank1
  9489  0468  0829               	movf	(?___awtoft+1)^(0+128),w
  9490  0469  0022               	movlb	2	; select bank2
  9491  046A  00B8               	movwf	(modCos@inflection+1)^(0+256)
  9492  046B  0021               	movlb	1	; select bank1
  9493  046C  082A               	movf	(?___awtoft+2)^(0+128),w
  9494  046D  0022               	movlb	2	; select bank2
  9495  046E  00B9               	movwf	(modCos@inflection+2)^(0+256)
  9496  046F  3194  2485  3183   	fcall	_modCos
  9497  0472  0022               	movlb	2	; select bank2
  9498  0473  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9499  0474  00D0               	movwf	??_updateModulationArray^(0+256)
  9500  0475  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9501  0476  35D0               	lslf	??_updateModulationArray^(0+256),f
  9502  0477  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9503  0478  308A               	movlw	138
  9504  0479  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9505  047A  3023               	movlw	35
  9506  047B  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9507  047C  0850               	movf	??_updateModulationArray^(0+256),w
  9508  047D  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9509  047E  0086               	movwf	6
  9510  047F  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9511  0480  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9512  0481  0087               	movwf	7
  9513  0482  0834               	movf	?_modCos^(0+256),w
  9514  0483  3FC0               	movwi [0]fsr1
  9515  0484  0835               	movf	(?_modCos+1)^(0+256),w
  9516  0485  3FC1               	movwi [1]fsr1
  9517                           
  9518                           ;modulation.c: 63: break;
  9519  0486  2DCA               	goto	l9324
  9520  0487                     l9310:	
  9521                           ;modulation.c: 64: case 2:
  9522                           
  9523                           
  9524                           ;modulation.c: 65: modArray[iAngle] = modTri(thisAngle, symmetry);
  9525  0487  0022               	movlb	2	; select bank2
  9526  0488  0858               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9527  0489  0021               	movlb	1	; select bank1
  9528  048A  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9529  048B  0022               	movlb	2	; select bank2
  9530  048C  0857               	movf	updateModulationArray@thisAngle^(0+256),w
  9531  048D  0021               	movlb	1	; select bank1
  9532  048E  00A8               	movwf	___awtoft@c^(0+128)
  9533  048F  31AD  25E4  3183   	fcall	___awtoft
  9534  0492  0021               	movlb	1	; select bank1
  9535  0493  0828               	movf	?___awtoft^(0+128),w
  9536  0494  0022               	movlb	2	; select bank2
  9537  0495  00AE               	movwf	modTri@angle^(0+256)
  9538  0496  0021               	movlb	1	; select bank1
  9539  0497  0829               	movf	(?___awtoft+1)^(0+128),w
  9540  0498  0022               	movlb	2	; select bank2
  9541  0499  00AF               	movwf	(modTri@angle+1)^(0+256)
  9542  049A  0021               	movlb	1	; select bank1
  9543  049B  082A               	movf	(?___awtoft+2)^(0+128),w
  9544  049C  0022               	movlb	2	; select bank2
  9545  049D  00B0               	movwf	(modTri@angle+2)^(0+256)
  9546  049E  0023               	movlb	3	; select bank3
  9547  049F  085C               	movf	(_symmetry+1)^(0+384),w
  9548  04A0  0021               	movlb	1	; select bank1
  9549  04A1  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9550  04A2  0023               	movlb	3	; select bank3
  9551  04A3  085B               	movf	_symmetry^(0+384),w
  9552  04A4  0021               	movlb	1	; select bank1
  9553  04A5  00A8               	movwf	___awtoft@c^(0+128)
  9554  04A6  31AD  25E4  3183   	fcall	___awtoft
  9555  04A9  0021               	movlb	1	; select bank1
  9556  04AA  0828               	movf	?___awtoft^(0+128),w
  9557  04AB  0022               	movlb	2	; select bank2
  9558  04AC  00B1               	movwf	modTri@inflection^(0+256)
  9559  04AD  0021               	movlb	1	; select bank1
  9560  04AE  0829               	movf	(?___awtoft+1)^(0+128),w
  9561  04AF  0022               	movlb	2	; select bank2
  9562  04B0  00B2               	movwf	(modTri@inflection+1)^(0+256)
  9563  04B1  0021               	movlb	1	; select bank1
  9564  04B2  082A               	movf	(?___awtoft+2)^(0+128),w
  9565  04B3  0022               	movlb	2	; select bank2
  9566  04B4  00B3               	movwf	(modTri@inflection+2)^(0+256)
  9567  04B5  3189  219A  3183   	fcall	_modTri
  9568  04B8  0022               	movlb	2	; select bank2
  9569  04B9  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9570  04BA  00D0               	movwf	??_updateModulationArray^(0+256)
  9571  04BB  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9572  04BC  35D0               	lslf	??_updateModulationArray^(0+256),f
  9573  04BD  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9574  04BE  308A               	movlw	138
  9575  04BF  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9576  04C0  3023               	movlw	35
  9577  04C1  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9578  04C2  0850               	movf	??_updateModulationArray^(0+256),w
  9579  04C3  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9580  04C4  0086               	movwf	6
  9581  04C5  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9582  04C6  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9583  04C7  0087               	movwf	7
  9584  04C8  082E               	movf	?_modTri^(0+256),w
  9585  04C9  3FC0               	movwi [0]fsr1
  9586  04CA  082F               	movf	(?_modTri+1)^(0+256),w
  9587  04CB  3FC1               	movwi [1]fsr1
  9588                           
  9589                           ;modulation.c: 66: break;
  9590  04CC  2DCA               	goto	l9324
  9591  04CD                     l9312:	
  9592                           ;modulation.c: 67: case 3:
  9593                           
  9594                           
  9595                           ;modulation.c: 68: modArray[iAngle] = modSquare(thisAngle, symmetry);
  9596  04CD  0022               	movlb	2	; select bank2
  9597  04CE  0858               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9598  04CF  0021               	movlb	1	; select bank1
  9599  04D0  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9600  04D1  0022               	movlb	2	; select bank2
  9601  04D2  0857               	movf	updateModulationArray@thisAngle^(0+256),w
  9602  04D3  0021               	movlb	1	; select bank1
  9603  04D4  00A8               	movwf	___awtoft@c^(0+128)
  9604  04D5  31AD  25E4  3183   	fcall	___awtoft
  9605  04D8  0021               	movlb	1	; select bank1
  9606  04D9  0828               	movf	?___awtoft^(0+128),w
  9607  04DA  0022               	movlb	2	; select bank2
  9608  04DB  00C8               	movwf	modSquare@angle^(0+256)
  9609  04DC  0021               	movlb	1	; select bank1
  9610  04DD  0829               	movf	(?___awtoft+1)^(0+128),w
  9611  04DE  0022               	movlb	2	; select bank2
  9612  04DF  00C9               	movwf	(modSquare@angle+1)^(0+256)
  9613  04E0  0021               	movlb	1	; select bank1
  9614  04E1  082A               	movf	(?___awtoft+2)^(0+128),w
  9615  04E2  0022               	movlb	2	; select bank2
  9616  04E3  00CA               	movwf	(modSquare@angle+2)^(0+256)
  9617  04E4  0023               	movlb	3	; select bank3
  9618  04E5  085C               	movf	(_symmetry+1)^(0+384),w
  9619  04E6  0021               	movlb	1	; select bank1
  9620  04E7  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9621  04E8  0023               	movlb	3	; select bank3
  9622  04E9  085B               	movf	_symmetry^(0+384),w
  9623  04EA  0021               	movlb	1	; select bank1
  9624  04EB  00A8               	movwf	___awtoft@c^(0+128)
  9625  04EC  31AD  25E4  3183   	fcall	___awtoft
  9626  04EF  0021               	movlb	1	; select bank1
  9627  04F0  0828               	movf	?___awtoft^(0+128),w
  9628  04F1  0022               	movlb	2	; select bank2
  9629  04F2  00CB               	movwf	modSquare@inflection^(0+256)
  9630  04F3  0021               	movlb	1	; select bank1
  9631  04F4  0829               	movf	(?___awtoft+1)^(0+128),w
  9632  04F5  0022               	movlb	2	; select bank2
  9633  04F6  00CC               	movwf	(modSquare@inflection+1)^(0+256)
  9634  04F7  0021               	movlb	1	; select bank1
  9635  04F8  082A               	movf	(?___awtoft+2)^(0+128),w
  9636  04F9  0022               	movlb	2	; select bank2
  9637  04FA  00CD               	movwf	(modSquare@inflection+2)^(0+256)
  9638  04FB  31A1  2123  3183   	fcall	_modSquare
  9639  04FE  0022               	movlb	2	; select bank2
  9640  04FF  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9641  0500  00D0               	movwf	??_updateModulationArray^(0+256)
  9642  0501  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9643  0502  35D0               	lslf	??_updateModulationArray^(0+256),f
  9644  0503  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9645  0504  308A               	movlw	138
  9646  0505  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9647  0506  3023               	movlw	35
  9648  0507  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9649  0508  0850               	movf	??_updateModulationArray^(0+256),w
  9650  0509  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9651  050A  0086               	movwf	6
  9652  050B  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9653  050C  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9654  050D  0087               	movwf	7
  9655  050E  0848               	movf	?_modSquare^(0+256),w
  9656  050F  3FC0               	movwi [0]fsr1
  9657  0510  0849               	movf	(?_modSquare+1)^(0+256),w
  9658  0511  3FC1               	movwi [1]fsr1
  9659                           
  9660                           ;modulation.c: 69: break;
  9661  0512  2DCA               	goto	l9324
  9662  0513                     l9314:	
  9663                           ;modulation.c: 70: case 4:
  9664                           
  9665                           
  9666                           ;modulation.c: 71: modArray[iAngle] = modSawRev(thisAngle, symmetry);
  9667  0513  0022               	movlb	2	; select bank2
  9668  0514  0858               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9669  0515  0021               	movlb	1	; select bank1
  9670  0516  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9671  0517  0022               	movlb	2	; select bank2
  9672  0518  0857               	movf	updateModulationArray@thisAngle^(0+256),w
  9673  0519  0021               	movlb	1	; select bank1
  9674  051A  00A8               	movwf	___awtoft@c^(0+128)
  9675  051B  31AD  25E4  3183   	fcall	___awtoft
  9676  051E  0021               	movlb	1	; select bank1
  9677  051F  0828               	movf	?___awtoft^(0+128),w
  9678  0520  0022               	movlb	2	; select bank2
  9679  0521  00C2               	movwf	modSawRev@angle^(0+256)
  9680  0522  0021               	movlb	1	; select bank1
  9681  0523  0829               	movf	(?___awtoft+1)^(0+128),w
  9682  0524  0022               	movlb	2	; select bank2
  9683  0525  00C3               	movwf	(modSawRev@angle+1)^(0+256)
  9684  0526  0021               	movlb	1	; select bank1
  9685  0527  082A               	movf	(?___awtoft+2)^(0+128),w
  9686  0528  0022               	movlb	2	; select bank2
  9687  0529  00C4               	movwf	(modSawRev@angle+2)^(0+256)
  9688  052A  0023               	movlb	3	; select bank3
  9689  052B  085C               	movf	(_symmetry+1)^(0+384),w
  9690  052C  0021               	movlb	1	; select bank1
  9691  052D  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9692  052E  0023               	movlb	3	; select bank3
  9693  052F  085B               	movf	_symmetry^(0+384),w
  9694  0530  0021               	movlb	1	; select bank1
  9695  0531  00A8               	movwf	___awtoft@c^(0+128)
  9696  0532  31AD  25E4  3183   	fcall	___awtoft
  9697  0535  0021               	movlb	1	; select bank1
  9698  0536  0828               	movf	?___awtoft^(0+128),w
  9699  0537  0022               	movlb	2	; select bank2
  9700  0538  00C5               	movwf	modSawRev@inflection^(0+256)
  9701  0539  0021               	movlb	1	; select bank1
  9702  053A  0829               	movf	(?___awtoft+1)^(0+128),w
  9703  053B  0022               	movlb	2	; select bank2
  9704  053C  00C6               	movwf	(modSawRev@inflection+1)^(0+256)
  9705  053D  0021               	movlb	1	; select bank1
  9706  053E  082A               	movf	(?___awtoft+2)^(0+128),w
  9707  053F  0022               	movlb	2	; select bank2
  9708  0540  00C7               	movwf	(modSawRev@inflection+2)^(0+256)
  9709  0541  31AD  25A8  3183   	fcall	_modSawRev
  9710  0544  0022               	movlb	2	; select bank2
  9711  0545  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9712  0546  00D0               	movwf	??_updateModulationArray^(0+256)
  9713  0547  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9714  0548  35D0               	lslf	??_updateModulationArray^(0+256),f
  9715  0549  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9716  054A  308A               	movlw	138
  9717  054B  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9718  054C  3023               	movlw	35
  9719  054D  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9720  054E  0850               	movf	??_updateModulationArray^(0+256),w
  9721  054F  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9722  0550  0086               	movwf	6
  9723  0551  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9724  0552  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9725  0553  0087               	movwf	7
  9726  0554  0842               	movf	?_modSawRev^(0+256),w
  9727  0555  3FC0               	movwi [0]fsr1
  9728  0556  0843               	movf	(?_modSawRev+1)^(0+256),w
  9729  0557  3FC1               	movwi [1]fsr1
  9730                           
  9731                           ;modulation.c: 72: break;
  9732  0558  2DCA               	goto	l9324
  9733  0559                     l9316:	
  9734                           ;modulation.c: 73: case 5:
  9735                           
  9736                           
  9737                           ;modulation.c: 74: modArray[iAngle] = modSaw(thisAngle, symmetry);
  9738  0559  0022               	movlb	2	; select bank2
  9739  055A  0858               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9740  055B  0021               	movlb	1	; select bank1
  9741  055C  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9742  055D  0022               	movlb	2	; select bank2
  9743  055E  0857               	movf	updateModulationArray@thisAngle^(0+256),w
  9744  055F  0021               	movlb	1	; select bank1
  9745  0560  00A8               	movwf	___awtoft@c^(0+128)
  9746  0561  31AD  25E4  3183   	fcall	___awtoft
  9747  0564  0021               	movlb	1	; select bank1
  9748  0565  0828               	movf	?___awtoft^(0+128),w
  9749  0566  0022               	movlb	2	; select bank2
  9750  0567  00AE               	movwf	modSaw@angle^(0+256)
  9751  0568  0021               	movlb	1	; select bank1
  9752  0569  0829               	movf	(?___awtoft+1)^(0+128),w
  9753  056A  0022               	movlb	2	; select bank2
  9754  056B  00AF               	movwf	(modSaw@angle+1)^(0+256)
  9755  056C  0021               	movlb	1	; select bank1
  9756  056D  082A               	movf	(?___awtoft+2)^(0+128),w
  9757  056E  0022               	movlb	2	; select bank2
  9758  056F  00B0               	movwf	(modSaw@angle+2)^(0+256)
  9759  0570  0023               	movlb	3	; select bank3
  9760  0571  085C               	movf	(_symmetry+1)^(0+384),w
  9761  0572  0021               	movlb	1	; select bank1
  9762  0573  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9763  0574  0023               	movlb	3	; select bank3
  9764  0575  085B               	movf	_symmetry^(0+384),w
  9765  0576  0021               	movlb	1	; select bank1
  9766  0577  00A8               	movwf	___awtoft@c^(0+128)
  9767  0578  31AD  25E4  3183   	fcall	___awtoft
  9768  057B  0021               	movlb	1	; select bank1
  9769  057C  0828               	movf	?___awtoft^(0+128),w
  9770  057D  0022               	movlb	2	; select bank2
  9771  057E  00B1               	movwf	modSaw@inflection^(0+256)
  9772  057F  0021               	movlb	1	; select bank1
  9773  0580  0829               	movf	(?___awtoft+1)^(0+128),w
  9774  0581  0022               	movlb	2	; select bank2
  9775  0582  00B2               	movwf	(modSaw@inflection+1)^(0+256)
  9776  0583  0021               	movlb	1	; select bank1
  9777  0584  082A               	movf	(?___awtoft+2)^(0+128),w
  9778  0585  0022               	movlb	2	; select bank2
  9779  0586  00B3               	movwf	(modSaw@inflection+2)^(0+256)
  9780  0587  3188  2002  3183   	fcall	_modSaw
  9781  058A  0022               	movlb	2	; select bank2
  9782  058B  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9783  058C  00D0               	movwf	??_updateModulationArray^(0+256)
  9784  058D  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9785  058E  35D0               	lslf	??_updateModulationArray^(0+256),f
  9786  058F  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9787  0590  308A               	movlw	138
  9788  0591  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9789  0592  3023               	movlw	35
  9790  0593  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9791  0594  0850               	movf	??_updateModulationArray^(0+256),w
  9792  0595  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9793  0596  0086               	movwf	6
  9794  0597  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9795  0598  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9796  0599  0087               	movwf	7
  9797  059A  082E               	movf	?_modSaw^(0+256),w
  9798  059B  3FC0               	movwi [0]fsr1
  9799  059C  082F               	movf	(?_modSaw+1)^(0+256),w
  9800  059D  3FC1               	movwi [1]fsr1
  9801                           
  9802                           ;modulation.c: 75: break;
  9803  059E  2DCA               	goto	l9324
  9804  059F                     l9318:	
  9805                           ;modulation.c: 76: default:
  9806                           
  9807                           
  9808                           ;modulation.c: 77: modArray[iAngle] = 0;
  9809  059F  0022               	movlb	2	; select bank2
  9810  05A0  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9811  05A1  00D0               	movwf	??_updateModulationArray^(0+256)
  9812  05A2  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9813  05A3  35D0               	lslf	??_updateModulationArray^(0+256),f
  9814  05A4  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9815  05A5  308A               	movlw	138
  9816  05A6  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9817  05A7  3023               	movlw	35
  9818  05A8  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9819  05A9  0850               	movf	??_updateModulationArray^(0+256),w
  9820  05AA  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9821  05AB  0086               	movwf	6
  9822  05AC  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9823  05AD  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9824  05AE  0087               	movwf	7
  9825  05AF  3000               	movlw	0
  9826  05B0  3FC0               	movwi [0]fsr1
  9827  05B1  3FC1               	movwi [1]fsr1
  9828                           
  9829                           ;modulation.c: 79: }
  9830                           
  9831                           ;modulation.c: 78: break;
  9832  05B2  2DCA               	goto	l9324
  9833  05B3                     l9322:	
  9834                           
  9835                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9836                           ; Switch size 1, requested type "space"
  9837                           ; Number of cases is 1, Range of values is 0 to 0
  9838                           ; switch strategies available:
  9839                           ; Name         Instructions Cycles
  9840                           ; simple_byte            4     3 (average)
  9841                           ; direct_byte            8     6 (fixed)
  9842                           ; jumptable            260     6 (fixed)
  9843                           ;	Chosen strategy is simple_byte
  9844  05B3  0020               	movlb	0	; select bank0
  9845  05B4  0849               	movf	_bottom_push_state+1,w
  9846  05B5  3A00               	xorlw	0	; case 0
  9847  05B6  1903               	skipnz
  9848  05B7  2DB9               	goto	l9906
  9849  05B8  2D9F               	goto	l9318
  9850  05B9                     l9906:	
  9851                           
  9852                           ; Switch size 1, requested type "space"
  9853                           ; Number of cases is 5, Range of values is 1 to 5
  9854                           ; switch strategies available:
  9855                           ; Name         Instructions Cycles
  9856                           ; simple_byte           16     9 (average)
  9857                           ; direct_byte           19     9 (fixed)
  9858                           ; jumptable            263     9 (fixed)
  9859                           ;	Chosen strategy is simple_byte
  9860  05B9  0848               	movf	_bottom_push_state,w
  9861  05BA  3A01               	xorlw	1	; case 1
  9862  05BB  1903               	skipnz
  9863  05BC  2C41               	goto	l9308
  9864  05BD  3A03               	xorlw	3	; case 2
  9865  05BE  1903               	skipnz
  9866  05BF  2C87               	goto	l9310
  9867  05C0  3A01               	xorlw	1	; case 3
  9868  05C1  1903               	skipnz
  9869  05C2  2CCD               	goto	l9312
  9870  05C3  3A07               	xorlw	7	; case 4
  9871  05C4  1903               	skipnz
  9872  05C5  2D13               	goto	l9314
  9873  05C6  3A01               	xorlw	1	; case 5
  9874  05C7  1903               	skipnz
  9875  05C8  2D59               	goto	l9316
  9876  05C9  2D9F               	goto	l9318
  9877  05CA                     l9324:	
  9878  05CA  3001               	movlw	1
  9879  05CB  0022               	movlb	2	; select bank2
  9880  05CC  00D0               	movwf	??_updateModulationArray^(0+256)
  9881  05CD  0850               	movf	??_updateModulationArray^(0+256),w
  9882  05CE  07DB               	addwf	updateModulationArray@iAngle^(0+256),f
  9883  05CF  2C23               	goto	l9326
  9884  05D0                     l9328:	
  9885                           
  9886                           ;modulation.c: 80: }
  9887                           ;modulation.c: 81: for (char iAngle = subDiv; iAngle < 120; iAngle++) {
  9888  05D0  0022               	movlb	2	; select bank2
  9889  05D1  0859               	movf	updateModulationArray@subDiv^(0+256),w
  9890  05D2  00D0               	movwf	??_updateModulationArray^(0+256)
  9891  05D3  0850               	movf	??_updateModulationArray^(0+256),w
  9892  05D4  00D6               	movwf	updateModulationArray@iAngle_2407^(0+256)
  9893  05D5  3078               	movlw	120
  9894  05D6  0256               	subwf	updateModulationArray@iAngle_2407^(0+256),w
  9895  05D7  1803               	btfsc	3,0
  9896  05D8  2DF3               	goto	l9338
  9897  05D9                     l9332:	
  9898                           
  9899                           ;modulation.c: 82: modArray[iAngle] = 0 ;
  9900  05D9  0856               	movf	updateModulationArray@iAngle_2407^(0+256),w
  9901  05DA  00D0               	movwf	??_updateModulationArray^(0+256)
  9902  05DB  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9903  05DC  35D0               	lslf	??_updateModulationArray^(0+256),f
  9904  05DD  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9905  05DE  308A               	movlw	138
  9906  05DF  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9907  05E0  3023               	movlw	35
  9908  05E1  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9909  05E2  0850               	movf	??_updateModulationArray^(0+256),w
  9910  05E3  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9911  05E4  0086               	movwf	6
  9912  05E5  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9913  05E6  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9914  05E7  0087               	movwf	7
  9915  05E8  3000               	movlw	0
  9916  05E9  3FC0               	movwi [0]fsr1
  9917  05EA  3FC1               	movwi [1]fsr1
  9918  05EB  3001               	movlw	1
  9919  05EC  00D0               	movwf	??_updateModulationArray^(0+256)
  9920  05ED  0850               	movf	??_updateModulationArray^(0+256),w
  9921  05EE  07D6               	addwf	updateModulationArray@iAngle_2407^(0+256),f
  9922  05EF  3078               	movlw	120
  9923  05F0  0256               	subwf	updateModulationArray@iAngle_2407^(0+256),w
  9924  05F1  1C03               	skipc
  9925  05F2  2DD9               	goto	l9332
  9926  05F3                     l9338:	
  9927                           
  9928                           ;modulation.c: 83: }
  9929                           ;modulation.c: 84: modArray[120] = bottom_push_state;
  9930  05F3  307A               	movlw	122
  9931  05F4  0086               	movwf	6
  9932  05F5  3024               	movlw	36
  9933  05F6  0087               	movwf	7
  9934  05F7  0020               	movlb	0	; select bank0
  9935  05F8  0848               	movf	_bottom_push_state,w
  9936  05F9  3FC0               	movwi [0]fsr1
  9937  05FA  0849               	movf	_bottom_push_state+1,w
  9938  05FB  3FC1               	movwi [1]fsr1
  9939                           
  9940                           ;modulation.c: 85: modArray[121] = symmetry;
  9941  05FC  307C               	movlw	124
  9942  05FD  0086               	movwf	6
  9943  05FE  3024               	movlw	36
  9944  05FF  0087               	movwf	7
  9945  0600  0023               	movlb	3	; select bank3
  9946  0601  085B               	movf	_symmetry^(0+384),w
  9947  0602  3FC0               	movwi [0]fsr1
  9948  0603  085C               	movf	(_symmetry+1)^(0+384),w
  9949  0604  3FC1               	movwi [1]fsr1
  9950                           
  9951                           ;modulation.c: 86: modArray[122] = subDiv;
  9952  0605  307E               	movlw	126
  9953  0606  0086               	movwf	6
  9954  0607  3024               	movlw	36
  9955  0608  0087               	movwf	7
  9956  0609  0022               	movlb	2	; select bank2
  9957  060A  0859               	movf	updateModulationArray@subDiv^(0+256),w
  9958  060B  3FC0               	movwi [0]fsr1
  9959  060C  085A               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9960  060D  3FC1               	movwi [1]fsr1
  9961                           
  9962                           ;modulation.c: 89: LATDbits.LATD4 = 1;
  9963  060E  160F               	bsf	15,4	;volatile
  9964  060F  0008               	return
  9965  0610                     __end_of_updateModulationArray:	
  9966                           
  9967                           	psect	text17
  9968  099A                     __ptext17:	
  9969 ;; *************** function _modTri *****************
  9970 ;; Defined at:
  9971 ;;		line 108 in file "modulation.c"
  9972 ;; Parameters:    Size  Location     Type
  9973 ;;  angle           3   14[BANK2 ] void 
  9974 ;;  inflection      3   17[BANK2 ] void 
  9975 ;; Auto vars:     Size  Location     Type
  9976 ;;  tmpVal          3   29[BANK2 ] void 
  9977 ;;  period          3   26[BANK2 ] void 
  9978 ;;  shift           3   23[BANK2 ] void 
  9979 ;; Return value:  Size  Location     Type
  9980 ;;                  2   14[BANK2 ] int 
  9981 ;; Registers used:
  9982 ;;		wreg, status,2, status,0, pclath, cstack
  9983 ;; Tracked objects:
  9984 ;;		On entry : 0/0
  9985 ;;		On exit  : 0/0
  9986 ;;		Unchanged: 0/0
  9987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9988 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9989 ;;      Locals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9991 ;;      Totals:         0       0       0      18       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9992 ;;Total ram usage:       18 bytes
  9993 ;; Hardware stack levels used:    1
  9994 ;; Hardware stack levels required when called:    5
  9995 ;; This function calls:
  9996 ;;		___ftadd
  9997 ;;		___ftdiv
  9998 ;;		___ftge
  9999 ;;		___ftmul
 10000 ;;		___ftneg
 10001 ;;		___fttol
 10002 ;; This function is called by:
 10003 ;;		_updateModulationArray
 10004 ;; This function uses a non-reentrant model
 10005 ;;
 10006                           
 10007                           
 10008                           ;psect for function _modTri
 10009  099A                     _modTri:	
 10010                           
 10011                           ;modulation.c: 109: double period = 1.0;
 10012                           
 10013                           ;incstack = 0
 10014                           ; Regs used in _modTri: [wreg+status,2+status,0+pclath+cstack]
 10015  099A  3000               	movlw	0
 10016  099B  0022               	movlb	2	; select bank2
 10017  099C  00BA               	movwf	modTri@period^(0+256)
 10018  099D  3080               	movlw	128
 10019  099E  00BB               	movwf	(modTri@period+1)^(0+256)
 10020  099F  303F               	movlw	63
 10021  09A0  00BC               	movwf	(modTri@period+2)^(0+256)
 10022                           
 10023                           ;modulation.c: 110: double shift = 0;
 10024  09A1  3000               	movlw	0
 10025  09A2  00B7               	movwf	modTri@shift^(0+256)
 10026  09A3  3000               	movlw	0
 10027  09A4  00B8               	movwf	(modTri@shift+1)^(0+256)
 10028  09A5  3000               	movlw	0
 10029  09A6  00B9               	movwf	(modTri@shift+2)^(0+256)
 10030                           
 10031                           ;modulation.c: 112: if(angle<=inflection) {
 10032  09A7  0831               	movf	modTri@inflection^(0+256),w
 10033  09A8  0021               	movlb	1	; select bank1
 10034  09A9  00A0               	movwf	___ftge@ff1^(0+128)
 10035  09AA  0022               	movlb	2	; select bank2
 10036  09AB  0832               	movf	(modTri@inflection+1)^(0+256),w
 10037  09AC  0021               	movlb	1	; select bank1
 10038  09AD  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10039  09AE  0022               	movlb	2	; select bank2
 10040  09AF  0833               	movf	(modTri@inflection+2)^(0+256),w
 10041  09B0  0021               	movlb	1	; select bank1
 10042  09B1  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10043  09B2  0022               	movlb	2	; select bank2
 10044  09B3  082E               	movf	modTri@angle^(0+256),w
 10045  09B4  0021               	movlb	1	; select bank1
 10046  09B5  00A3               	movwf	___ftge@ff2^(0+128)
 10047  09B6  0022               	movlb	2	; select bank2
 10048  09B7  082F               	movf	(modTri@angle+1)^(0+256),w
 10049  09B8  0021               	movlb	1	; select bank1
 10050  09B9  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10051  09BA  0022               	movlb	2	; select bank2
 10052  09BB  0830               	movf	(modTri@angle+2)^(0+256),w
 10053  09BC  0021               	movlb	1	; select bank1
 10054  09BD  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10055  09BE  31A0  20AA  3189   	fcall	___ftge
 10056  09C1  1C03               	btfss	3,0
 10057  09C2  29CF               	goto	l8646
 10058                           
 10059                           ;modulation.c: 113: period = 180.0/inflection;
 10060  09C3  0022               	movlb	2	; select bank2
 10061  09C4  0831               	movf	modTri@inflection^(0+256),w
 10062  09C5  0021               	movlb	1	; select bank1
 10063  09C6  00CE               	movwf	___ftdiv@f2^(0+128)
 10064  09C7  0022               	movlb	2	; select bank2
 10065  09C8  0832               	movf	(modTri@inflection+1)^(0+256),w
 10066  09C9  0021               	movlb	1	; select bank1
 10067  09CA  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10068  09CB  0022               	movlb	2	; select bank2
 10069  09CC  0833               	movf	(modTri@inflection+2)^(0+256),w
 10070  09CD  0021               	movlb	1	; select bank1
 10071  09CE  2A8A               	goto	L5
 10072  09CF                     l8646:	
 10073                           ;modulation.c: 114: } else {
 10074                           
 10075                           
 10076                           ;modulation.c: 115: shift = -(360-inflection*2)*(180/(360-inflection));
 10077  09CF  0022               	movlb	2	; select bank2
 10078  09D0  0831               	movf	modTri@inflection^(0+256),w
 10079  09D1  0021               	movlb	1	; select bank1
 10080  09D2  00B1               	movwf	___ftmul@f2^(0+128)
 10081  09D3  0022               	movlb	2	; select bank2
 10082  09D4  0832               	movf	(modTri@inflection+1)^(0+256),w
 10083  09D5  0021               	movlb	1	; select bank1
 10084  09D6  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10085  09D7  0022               	movlb	2	; select bank2
 10086  09D8  0833               	movf	(modTri@inflection+2)^(0+256),w
 10087  09D9  0021               	movlb	1	; select bank1
 10088  09DA  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10089  09DB  3000               	movlw	0
 10090  09DC  00AE               	movwf	___ftmul@f1^(0+128)
 10091  09DD  3000               	movlw	0
 10092  09DE  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10093  09DF  3040               	movlw	64
 10094  09E0  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10095  09E1  319E  2656  3189   	fcall	___ftmul
 10096  09E4  0021               	movlb	1	; select bank1
 10097  09E5  082E               	movf	?___ftmul^(0+128),w
 10098  09E6  00BE               	movwf	___ftneg@f1^(0+128)
 10099  09E7  082F               	movf	(?___ftmul+1)^(0+128),w
 10100  09E8  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10101  09E9  0830               	movf	(?___ftmul+2)^(0+128),w
 10102  09EA  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10103  09EB  31AC  2497  3189   	fcall	___ftneg
 10104  09EE  0021               	movlb	1	; select bank1
 10105  09EF  083E               	movf	?___ftneg^(0+128),w
 10106  09F0  00C4               	movwf	___ftadd@f2^(0+128)
 10107  09F1  083F               	movf	(?___ftneg+1)^(0+128),w
 10108  09F2  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10109  09F3  0840               	movf	(?___ftneg+2)^(0+128),w
 10110  09F4  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10111  09F5  3000               	movlw	0
 10112  09F6  00C1               	movwf	___ftadd@f1^(0+128)
 10113  09F7  30B4               	movlw	180
 10114  09F8  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10115  09F9  3043               	movlw	67
 10116  09FA  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10117  09FB  319F  270A  3189   	fcall	___ftadd
 10118  09FE  0021               	movlb	1	; select bank1
 10119  09FF  0841               	movf	?___ftadd^(0+128),w
 10120  0A00  0022               	movlb	2	; select bank2
 10121  0A01  00B4               	movwf	_modTri$2913^(0+256)
 10122  0A02  0021               	movlb	1	; select bank1
 10123  0A03  0842               	movf	(?___ftadd+1)^(0+128),w
 10124  0A04  0022               	movlb	2	; select bank2
 10125  0A05  00B5               	movwf	(_modTri$2913+1)^(0+256)
 10126  0A06  0021               	movlb	1	; select bank1
 10127  0A07  0843               	movf	(?___ftadd+2)^(0+128),w
 10128  0A08  0022               	movlb	2	; select bank2
 10129  0A09  00B6               	movwf	(_modTri$2913+2)^(0+256)
 10130                           
 10131                           ;modulation.c: 115: shift = -(360-inflection*2)*(180/(360-inflection));
 10132  0A0A  0834               	movf	_modTri$2913^(0+256),w
 10133  0A0B  0021               	movlb	1	; select bank1
 10134  0A0C  00BE               	movwf	___ftneg@f1^(0+128)
 10135  0A0D  0022               	movlb	2	; select bank2
 10136  0A0E  0835               	movf	(_modTri$2913+1)^(0+256),w
 10137  0A0F  0021               	movlb	1	; select bank1
 10138  0A10  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10139  0A11  0022               	movlb	2	; select bank2
 10140  0A12  0836               	movf	(_modTri$2913+2)^(0+256),w
 10141  0A13  0021               	movlb	1	; select bank1
 10142  0A14  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10143  0A15  31AC  2497  3189   	fcall	___ftneg
 10144  0A18  0021               	movlb	1	; select bank1
 10145  0A19  083E               	movf	?___ftneg^(0+128),w
 10146  0A1A  00AE               	movwf	___ftmul@f1^(0+128)
 10147  0A1B  083F               	movf	(?___ftneg+1)^(0+128),w
 10148  0A1C  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10149  0A1D  0840               	movf	(?___ftneg+2)^(0+128),w
 10150  0A1E  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10151  0A1F  3000               	movlw	0
 10152  0A20  00C1               	movwf	___ftadd@f1^(0+128)
 10153  0A21  30B4               	movlw	180
 10154  0A22  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10155  0A23  3043               	movlw	67
 10156  0A24  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10157  0A25  0022               	movlb	2	; select bank2
 10158  0A26  0831               	movf	modTri@inflection^(0+256),w
 10159  0A27  0021               	movlb	1	; select bank1
 10160  0A28  00BE               	movwf	___ftneg@f1^(0+128)
 10161  0A29  0022               	movlb	2	; select bank2
 10162  0A2A  0832               	movf	(modTri@inflection+1)^(0+256),w
 10163  0A2B  0021               	movlb	1	; select bank1
 10164  0A2C  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10165  0A2D  0022               	movlb	2	; select bank2
 10166  0A2E  0833               	movf	(modTri@inflection+2)^(0+256),w
 10167  0A2F  0021               	movlb	1	; select bank1
 10168  0A30  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10169  0A31  31AC  2497  3189   	fcall	___ftneg
 10170  0A34  0021               	movlb	1	; select bank1
 10171  0A35  083E               	movf	?___ftneg^(0+128),w
 10172  0A36  00C4               	movwf	___ftadd@f2^(0+128)
 10173  0A37  083F               	movf	(?___ftneg+1)^(0+128),w
 10174  0A38  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10175  0A39  0840               	movf	(?___ftneg+2)^(0+128),w
 10176  0A3A  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10177  0A3B  319F  270A  3189   	fcall	___ftadd
 10178  0A3E  0021               	movlb	1	; select bank1
 10179  0A3F  0841               	movf	?___ftadd^(0+128),w
 10180  0A40  00CE               	movwf	___ftdiv@f2^(0+128)
 10181  0A41  0842               	movf	(?___ftadd+1)^(0+128),w
 10182  0A42  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10183  0A43  0843               	movf	(?___ftadd+2)^(0+128),w
 10184  0A44  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10185  0A45  3000               	movlw	0
 10186  0A46  00D1               	movwf	___ftdiv@f1^(0+128)
 10187  0A47  3034               	movlw	52
 10188  0A48  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10189  0A49  3043               	movlw	67
 10190  0A4A  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10191  0A4B  319C  244F  3189   	fcall	___ftdiv
 10192  0A4E  0021               	movlb	1	; select bank1
 10193  0A4F  084E               	movf	?___ftdiv^(0+128),w
 10194  0A50  00B1               	movwf	___ftmul@f2^(0+128)
 10195  0A51  084F               	movf	(?___ftdiv+1)^(0+128),w
 10196  0A52  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10197  0A53  0850               	movf	(?___ftdiv+2)^(0+128),w
 10198  0A54  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10199  0A55  319E  2656  3189   	fcall	___ftmul
 10200  0A58  0021               	movlb	1	; select bank1
 10201  0A59  082E               	movf	?___ftmul^(0+128),w
 10202  0A5A  0022               	movlb	2	; select bank2
 10203  0A5B  00B7               	movwf	modTri@shift^(0+256)
 10204  0A5C  0021               	movlb	1	; select bank1
 10205  0A5D  082F               	movf	(?___ftmul+1)^(0+128),w
 10206  0A5E  0022               	movlb	2	; select bank2
 10207  0A5F  00B8               	movwf	(modTri@shift+1)^(0+256)
 10208  0A60  0021               	movlb	1	; select bank1
 10209  0A61  0830               	movf	(?___ftmul+2)^(0+128),w
 10210  0A62  0022               	movlb	2	; select bank2
 10211  0A63  00B9               	movwf	(modTri@shift+2)^(0+256)
 10212                           
 10213                           ;modulation.c: 116: period = 180/(360-inflection);
 10214  0A64  3000               	movlw	0
 10215  0A65  0021               	movlb	1	; select bank1
 10216  0A66  00C1               	movwf	___ftadd@f1^(0+128)
 10217  0A67  30B4               	movlw	180
 10218  0A68  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10219  0A69  3043               	movlw	67
 10220  0A6A  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10221  0A6B  0022               	movlb	2	; select bank2
 10222  0A6C  0831               	movf	modTri@inflection^(0+256),w
 10223  0A6D  0021               	movlb	1	; select bank1
 10224  0A6E  00BE               	movwf	___ftneg@f1^(0+128)
 10225  0A6F  0022               	movlb	2	; select bank2
 10226  0A70  0832               	movf	(modTri@inflection+1)^(0+256),w
 10227  0A71  0021               	movlb	1	; select bank1
 10228  0A72  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10229  0A73  0022               	movlb	2	; select bank2
 10230  0A74  0833               	movf	(modTri@inflection+2)^(0+256),w
 10231  0A75  0021               	movlb	1	; select bank1
 10232  0A76  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10233  0A77  31AC  2497  3189   	fcall	___ftneg
 10234  0A7A  0021               	movlb	1	; select bank1
 10235  0A7B  083E               	movf	?___ftneg^(0+128),w
 10236  0A7C  00C4               	movwf	___ftadd@f2^(0+128)
 10237  0A7D  083F               	movf	(?___ftneg+1)^(0+128),w
 10238  0A7E  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10239  0A7F  0840               	movf	(?___ftneg+2)^(0+128),w
 10240  0A80  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10241  0A81  319F  270A  3189   	fcall	___ftadd
 10242  0A84  0021               	movlb	1	; select bank1
 10243  0A85  0841               	movf	?___ftadd^(0+128),w
 10244  0A86  00CE               	movwf	___ftdiv@f2^(0+128)
 10245  0A87  0842               	movf	(?___ftadd+1)^(0+128),w
 10246  0A88  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10247  0A89  0843               	movf	(?___ftadd+2)^(0+128),w
 10248  0A8A                     L5:	
 10249  0A8A  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10250  0A8B  3000               	movlw	0
 10251  0A8C  00D1               	movwf	___ftdiv@f1^(0+128)
 10252  0A8D  3034               	movlw	52
 10253  0A8E  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10254  0A8F  3043               	movlw	67
 10255  0A90  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10256  0A91  319C  244F  3189   	fcall	___ftdiv
 10257  0A94  0021               	movlb	1	; select bank1
 10258  0A95  084E               	movf	?___ftdiv^(0+128),w
 10259  0A96  0022               	movlb	2	; select bank2
 10260  0A97  00BA               	movwf	modTri@period^(0+256)
 10261  0A98  0021               	movlb	1	; select bank1
 10262  0A99  084F               	movf	(?___ftdiv+1)^(0+128),w
 10263  0A9A  0022               	movlb	2	; select bank2
 10264  0A9B  00BB               	movwf	(modTri@period+1)^(0+256)
 10265  0A9C  0021               	movlb	1	; select bank1
 10266  0A9D  0850               	movf	(?___ftdiv+2)^(0+128),w
 10267  0A9E  0022               	movlb	2	; select bank2
 10268  0A9F  00BC               	movwf	(modTri@period+2)^(0+256)
 10269                           
 10270                           ;modulation.c: 118: }
 10271                           ;modulation.c: 119: double tmpVal = (period*angle-shift) ;
 10272  0AA0  0837               	movf	modTri@shift^(0+256),w
 10273  0AA1  0021               	movlb	1	; select bank1
 10274  0AA2  00BE               	movwf	___ftneg@f1^(0+128)
 10275  0AA3  0022               	movlb	2	; select bank2
 10276  0AA4  0838               	movf	(modTri@shift+1)^(0+256),w
 10277  0AA5  0021               	movlb	1	; select bank1
 10278  0AA6  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10279  0AA7  0022               	movlb	2	; select bank2
 10280  0AA8  0839               	movf	(modTri@shift+2)^(0+256),w
 10281  0AA9  0021               	movlb	1	; select bank1
 10282  0AAA  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10283  0AAB  31AC  2497  3189   	fcall	___ftneg
 10284  0AAE  0021               	movlb	1	; select bank1
 10285  0AAF  083E               	movf	?___ftneg^(0+128),w
 10286  0AB0  00C1               	movwf	___ftadd@f1^(0+128)
 10287  0AB1  083F               	movf	(?___ftneg+1)^(0+128),w
 10288  0AB2  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10289  0AB3  0840               	movf	(?___ftneg+2)^(0+128),w
 10290  0AB4  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10291  0AB5  0022               	movlb	2	; select bank2
 10292  0AB6  082E               	movf	modTri@angle^(0+256),w
 10293  0AB7  0021               	movlb	1	; select bank1
 10294  0AB8  00AE               	movwf	___ftmul@f1^(0+128)
 10295  0AB9  0022               	movlb	2	; select bank2
 10296  0ABA  082F               	movf	(modTri@angle+1)^(0+256),w
 10297  0ABB  0021               	movlb	1	; select bank1
 10298  0ABC  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10299  0ABD  0022               	movlb	2	; select bank2
 10300  0ABE  0830               	movf	(modTri@angle+2)^(0+256),w
 10301  0ABF  0021               	movlb	1	; select bank1
 10302  0AC0  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10303  0AC1  0022               	movlb	2	; select bank2
 10304  0AC2  083A               	movf	modTri@period^(0+256),w
 10305  0AC3  0021               	movlb	1	; select bank1
 10306  0AC4  00B1               	movwf	___ftmul@f2^(0+128)
 10307  0AC5  0022               	movlb	2	; select bank2
 10308  0AC6  083B               	movf	(modTri@period+1)^(0+256),w
 10309  0AC7  0021               	movlb	1	; select bank1
 10310  0AC8  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10311  0AC9  0022               	movlb	2	; select bank2
 10312  0ACA  083C               	movf	(modTri@period+2)^(0+256),w
 10313  0ACB  0021               	movlb	1	; select bank1
 10314  0ACC  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10315  0ACD  319E  2656  3189   	fcall	___ftmul
 10316  0AD0  0021               	movlb	1	; select bank1
 10317  0AD1  082E               	movf	?___ftmul^(0+128),w
 10318  0AD2  00C4               	movwf	___ftadd@f2^(0+128)
 10319  0AD3  082F               	movf	(?___ftmul+1)^(0+128),w
 10320  0AD4  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10321  0AD5  0830               	movf	(?___ftmul+2)^(0+128),w
 10322  0AD6  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10323  0AD7  319F  270A  3189   	fcall	___ftadd
 10324  0ADA  0021               	movlb	1	; select bank1
 10325  0ADB  0841               	movf	?___ftadd^(0+128),w
 10326  0ADC  0022               	movlb	2	; select bank2
 10327  0ADD  00BD               	movwf	modTri@tmpVal^(0+256)
 10328  0ADE  0021               	movlb	1	; select bank1
 10329  0ADF  0842               	movf	(?___ftadd+1)^(0+128),w
 10330  0AE0  0022               	movlb	2	; select bank2
 10331  0AE1  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
 10332  0AE2  0021               	movlb	1	; select bank1
 10333  0AE3  0843               	movf	(?___ftadd+2)^(0+128),w
 10334  0AE4  0022               	movlb	2	; select bank2
 10335  0AE5  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
 10336                           
 10337                           ;modulation.c: 120: if (tmpVal > 180) {
 10338  0AE6  3000               	movlw	0
 10339  0AE7  0021               	movlb	1	; select bank1
 10340  0AE8  00A0               	movwf	___ftge@ff1^(0+128)
 10341  0AE9  3034               	movlw	52
 10342  0AEA  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10343  0AEB  3043               	movlw	67
 10344  0AEC  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10345  0AED  0022               	movlb	2	; select bank2
 10346  0AEE  083D               	movf	modTri@tmpVal^(0+256),w
 10347  0AEF  0021               	movlb	1	; select bank1
 10348  0AF0  00A3               	movwf	___ftge@ff2^(0+128)
 10349  0AF1  0022               	movlb	2	; select bank2
 10350  0AF2  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10351  0AF3  0021               	movlb	1	; select bank1
 10352  0AF4  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10353  0AF5  0022               	movlb	2	; select bank2
 10354  0AF6  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10355  0AF7  0021               	movlb	1	; select bank1
 10356  0AF8  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10357  0AF9  31A0  20AA  3189   	fcall	___ftge
 10358  0AFC  1803               	btfsc	3,0
 10359  0AFD  2B11               	goto	l8650
 10360                           
 10361                           ;modulation.c: 121: tmpVal = tmpVal - 270.0;
 10362  0AFE  3000               	movlw	0
 10363  0AFF  0021               	movlb	1	; select bank1
 10364  0B00  00C1               	movwf	___ftadd@f1^(0+128)
 10365  0B01  3087               	movlw	135
 10366  0B02  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10367  0B03  30C3               	movlw	195
 10368  0B04  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10369  0B05  0022               	movlb	2	; select bank2
 10370  0B06  083D               	movf	modTri@tmpVal^(0+256),w
 10371  0B07  0021               	movlb	1	; select bank1
 10372  0B08  00C4               	movwf	___ftadd@f2^(0+128)
 10373  0B09  0022               	movlb	2	; select bank2
 10374  0B0A  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10375  0B0B  0021               	movlb	1	; select bank1
 10376  0B0C  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10377  0B0D  0022               	movlb	2	; select bank2
 10378  0B0E  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10379  0B0F  0021               	movlb	1	; select bank1
 10380  0B10  2B2D               	goto	L6
 10381  0B11                     l8650:	
 10382                           ;modulation.c: 122: } else {
 10383                           
 10384                           
 10385                           ;modulation.c: 123: tmpVal = 90 - tmpVal;
 10386  0B11  3000               	movlw	0
 10387  0B12  0021               	movlb	1	; select bank1
 10388  0B13  00C1               	movwf	___ftadd@f1^(0+128)
 10389  0B14  30B4               	movlw	180
 10390  0B15  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10391  0B16  3042               	movlw	66
 10392  0B17  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10393  0B18  0022               	movlb	2	; select bank2
 10394  0B19  083D               	movf	modTri@tmpVal^(0+256),w
 10395  0B1A  0021               	movlb	1	; select bank1
 10396  0B1B  00BE               	movwf	___ftneg@f1^(0+128)
 10397  0B1C  0022               	movlb	2	; select bank2
 10398  0B1D  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10399  0B1E  0021               	movlb	1	; select bank1
 10400  0B1F  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10401  0B20  0022               	movlb	2	; select bank2
 10402  0B21  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10403  0B22  0021               	movlb	1	; select bank1
 10404  0B23  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10405  0B24  31AC  2497  3189   	fcall	___ftneg
 10406  0B27  0021               	movlb	1	; select bank1
 10407  0B28  083E               	movf	?___ftneg^(0+128),w
 10408  0B29  00C4               	movwf	___ftadd@f2^(0+128)
 10409  0B2A  083F               	movf	(?___ftneg+1)^(0+128),w
 10410  0B2B  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10411  0B2C  0840               	movf	(?___ftneg+2)^(0+128),w
 10412  0B2D                     L6:	
 10413  0B2D  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10414  0B2E  319F  270A  3189   	fcall	___ftadd
 10415  0B31  0021               	movlb	1	; select bank1
 10416  0B32  0841               	movf	?___ftadd^(0+128),w
 10417  0B33  0022               	movlb	2	; select bank2
 10418  0B34  00BD               	movwf	modTri@tmpVal^(0+256)
 10419  0B35  0021               	movlb	1	; select bank1
 10420  0B36  0842               	movf	(?___ftadd+1)^(0+128),w
 10421  0B37  0022               	movlb	2	; select bank2
 10422  0B38  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
 10423  0B39  0021               	movlb	1	; select bank1
 10424  0B3A  0843               	movf	(?___ftadd+2)^(0+128),w
 10425  0B3B  0022               	movlb	2	; select bank2
 10426  0B3C  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
 10427                           
 10428                           ;modulation.c: 124: }
 10429                           ;modulation.c: 125: tmpVal = tmpVal * -10/9;
 10430  0B3D  3000               	movlw	0
 10431  0B3E  0021               	movlb	1	; select bank1
 10432  0B3F  00CE               	movwf	___ftdiv@f2^(0+128)
 10433  0B40  3010               	movlw	16
 10434  0B41  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10435  0B42  3041               	movlw	65
 10436  0B43  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10437  0B44  3000               	movlw	0
 10438  0B45  00AE               	movwf	___ftmul@f1^(0+128)
 10439  0B46  3020               	movlw	32
 10440  0B47  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10441  0B48  30C1               	movlw	193
 10442  0B49  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10443  0B4A  0022               	movlb	2	; select bank2
 10444  0B4B  083D               	movf	modTri@tmpVal^(0+256),w
 10445  0B4C  0021               	movlb	1	; select bank1
 10446  0B4D  00B1               	movwf	___ftmul@f2^(0+128)
 10447  0B4E  0022               	movlb	2	; select bank2
 10448  0B4F  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10449  0B50  0021               	movlb	1	; select bank1
 10450  0B51  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10451  0B52  0022               	movlb	2	; select bank2
 10452  0B53  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10453  0B54  0021               	movlb	1	; select bank1
 10454  0B55  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10455  0B56  319E  2656  3189   	fcall	___ftmul
 10456  0B59  0021               	movlb	1	; select bank1
 10457  0B5A  082E               	movf	?___ftmul^(0+128),w
 10458  0B5B  00D1               	movwf	___ftdiv@f1^(0+128)
 10459  0B5C  082F               	movf	(?___ftmul+1)^(0+128),w
 10460  0B5D  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10461  0B5E  0830               	movf	(?___ftmul+2)^(0+128),w
 10462  0B5F  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10463  0B60  319C  244F  3189   	fcall	___ftdiv
 10464  0B63  0021               	movlb	1	; select bank1
 10465  0B64  084E               	movf	?___ftdiv^(0+128),w
 10466  0B65  0022               	movlb	2	; select bank2
 10467  0B66  00BD               	movwf	modTri@tmpVal^(0+256)
 10468  0B67  0021               	movlb	1	; select bank1
 10469  0B68  084F               	movf	(?___ftdiv+1)^(0+128),w
 10470  0B69  0022               	movlb	2	; select bank2
 10471  0B6A  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
 10472  0B6B  0021               	movlb	1	; select bank1
 10473  0B6C  0850               	movf	(?___ftdiv+2)^(0+128),w
 10474  0B6D  0022               	movlb	2	; select bank2
 10475  0B6E  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
 10476                           
 10477                           ;modulation.c: 127: return (int)(tmpVal);
 10478  0B6F  083D               	movf	modTri@tmpVal^(0+256),w
 10479  0B70  00A0               	movwf	___fttol@f1^(0+256)
 10480  0B71  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10481  0B72  00A1               	movwf	(___fttol@f1+1)^(0+256)
 10482  0B73  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10483  0B74  00A2               	movwf	(___fttol@f1+2)^(0+256)
 10484  0B75  3199  218A         	fcall	___fttol
 10485  0B77  0022               	movlb	2	; select bank2
 10486  0B78  0821               	movf	(?___fttol^(0+256)+1),w
 10487  0B79  00AF               	movwf	(?_modTri+1)^(0+256)
 10488  0B7A  0820               	movf	?___fttol^(0+256),w
 10489  0B7B  00AE               	movwf	?_modTri^(0+256)
 10490  0B7C  0008               	return
 10491  0B7D                     __end_of_modTri:	
 10492                           
 10493                           	psect	text18
 10494  2123                     __ptext18:	
 10495 ;; *************** function _modSquare *****************
 10496 ;; Defined at:
 10497 ;;		line 151 in file "modulation.c"
 10498 ;; Parameters:    Size  Location     Type
 10499 ;;  angle           3   40[BANK2 ] int 
 10500 ;;  inflection      3   43[BANK2 ] int 
 10501 ;; Auto vars:     Size  Location     Type
 10502 ;;  tmpVal          2   46[BANK2 ] int 
 10503 ;; Return value:  Size  Location     Type
 10504 ;;                  2   40[BANK2 ] int 
 10505 ;; Registers used:
 10506 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10507 ;; Tracked objects:
 10508 ;;		On entry : 0/0
 10509 ;;		On exit  : 0/0
 10510 ;;		Unchanged: 0/0
 10511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10512 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10513 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10515 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10516 ;;Total ram usage:        8 bytes
 10517 ;; Hardware stack levels used:    1
 10518 ;; Hardware stack levels required when called:    6
 10519 ;; This function calls:
 10520 ;;		___ftge
 10521 ;;		_modCos
 10522 ;; This function is called by:
 10523 ;;		_updateModulationArray
 10524 ;; This function uses a non-reentrant model
 10525 ;;
 10526                           
 10527                           
 10528                           ;psect for function _modSquare
 10529  2123                     _modSquare:	
 10530                           
 10531                           ;modulation.c: 152: int tmpVal = modCos(angle, inflection);
 10532                           
 10533                           ;incstack = 0
 10534                           ; Regs used in _modSquare: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10535  2123  0022               	movlb	2	; select bank2
 10536  2124  0848               	movf	modSquare@angle^(0+256),w
 10537  2125  00B4               	movwf	modCos@angle^(0+256)
 10538  2126  0849               	movf	(modSquare@angle+1)^(0+256),w
 10539  2127  00B5               	movwf	(modCos@angle+1)^(0+256)
 10540  2128  084A               	movf	(modSquare@angle+2)^(0+256),w
 10541  2129  00B6               	movwf	(modCos@angle+2)^(0+256)
 10542  212A  084B               	movf	modSquare@inflection^(0+256),w
 10543  212B  00B7               	movwf	modCos@inflection^(0+256)
 10544  212C  084C               	movf	(modSquare@inflection+1)^(0+256),w
 10545  212D  00B8               	movwf	(modCos@inflection+1)^(0+256)
 10546  212E  084D               	movf	(modSquare@inflection+2)^(0+256),w
 10547  212F  00B9               	movwf	(modCos@inflection+2)^(0+256)
 10548  2130  3194  2485  31A1   	fcall	_modCos
 10549  2133  0022               	movlb	2	; select bank2
 10550  2134  0835               	movf	(?_modCos+1)^(0+256),w
 10551  2135  00CF               	movwf	(modSquare@tmpVal+1)^(0+256)
 10552  2136  0834               	movf	?_modCos^(0+256),w
 10553  2137  00CE               	movwf	modSquare@tmpVal^(0+256)
 10554                           
 10555                           ;modulation.c: 153: return (angle <= inflection) ? -100 : 100;
 10556  2138  084B               	movf	modSquare@inflection^(0+256),w
 10557  2139  0021               	movlb	1	; select bank1
 10558  213A  00A0               	movwf	___ftge@ff1^(0+128)
 10559  213B  0022               	movlb	2	; select bank2
 10560  213C  084C               	movf	(modSquare@inflection+1)^(0+256),w
 10561  213D  0021               	movlb	1	; select bank1
 10562  213E  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10563  213F  0022               	movlb	2	; select bank2
 10564  2140  084D               	movf	(modSquare@inflection+2)^(0+256),w
 10565  2141  0021               	movlb	1	; select bank1
 10566  2142  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10567  2143  0022               	movlb	2	; select bank2
 10568  2144  0848               	movf	modSquare@angle^(0+256),w
 10569  2145  0021               	movlb	1	; select bank1
 10570  2146  00A3               	movwf	___ftge@ff2^(0+128)
 10571  2147  0022               	movlb	2	; select bank2
 10572  2148  0849               	movf	(modSquare@angle+1)^(0+256),w
 10573  2149  0021               	movlb	1	; select bank1
 10574  214A  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10575  214B  0022               	movlb	2	; select bank2
 10576  214C  084A               	movf	(modSquare@angle+2)^(0+256),w
 10577  214D  0021               	movlb	1	; select bank1
 10578  214E  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10579  214F  31A0  20AA  31A1   	fcall	___ftge
 10580  2152  1803               	btfsc	3,0
 10581  2153  295A               	goto	l8660
 10582  2154  3064               	movlw	100
 10583  2155  0022               	movlb	2	; select bank2
 10584  2156  00C8               	movwf	?_modSquare^(0+256)
 10585  2157  3000               	movlw	0
 10586  2158  00C9               	movwf	(?_modSquare^(0+256)+1)
 10587  2159  0008               	return
 10588  215A                     l8660:	
 10589  215A  309C               	movlw	156
 10590  215B  0022               	movlb	2	; select bank2
 10591  215C  00C8               	movwf	?_modSquare^(0+256)
 10592  215D  30FF               	movlw	255
 10593  215E  00C9               	movwf	(?_modSquare^(0+256)+1)
 10594  215F  0008               	return
 10595  2160                     __end_of_modSquare:	
 10596                           
 10597                           	psect	text19
 10598  1485                     __ptext19:	
 10599 ;; *************** function _modCos *****************
 10600 ;; Defined at:
 10601 ;;		line 92 in file "modulation.c"
 10602 ;; Parameters:    Size  Location     Type
 10603 ;;  angle           3   20[BANK2 ] int 
 10604 ;;  inflection      3   23[BANK2 ] int 
 10605 ;; Auto vars:     Size  Location     Type
 10606 ;;  tmpVal          3   37[BANK2 ] int 
 10607 ;;  period          3   34[BANK2 ] int 
 10608 ;;  shift           3   31[BANK2 ] int 
 10609 ;; Return value:  Size  Location     Type
 10610 ;;                  2   20[BANK2 ] int 
 10611 ;; Registers used:
 10612 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10613 ;; Tracked objects:
 10614 ;;		On entry : 0/0
 10615 ;;		On exit  : 0/0
 10616 ;;		Unchanged: 0/0
 10617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10618 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10619 ;;      Locals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10620 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10621 ;;      Totals:         0       0       0      20       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10622 ;;Total ram usage:       20 bytes
 10623 ;; Hardware stack levels used:    1
 10624 ;; Hardware stack levels required when called:    5
 10625 ;; This function calls:
 10626 ;;		___ftadd
 10627 ;;		___ftdiv
 10628 ;;		___ftge
 10629 ;;		___ftmul
 10630 ;;		___ftneg
 10631 ;;		___fttol
 10632 ;;		___wmul
 10633 ;; This function is called by:
 10634 ;;		_updateModulationArray
 10635 ;;		_modSquare
 10636 ;; This function uses a non-reentrant model
 10637 ;;
 10638                           
 10639                           
 10640                           ;psect for function _modCos
 10641  1485                     _modCos:	
 10642                           
 10643                           ;modulation.c: 93: double period = 1.0;
 10644                           
 10645                           ;incstack = 0
 10646                           ; Regs used in _modCos: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10647  1485  3000               	movlw	0
 10648  1486  0022               	movlb	2	; select bank2
 10649  1487  00C2               	movwf	modCos@period^(0+256)
 10650  1488  3080               	movlw	128
 10651  1489  00C3               	movwf	(modCos@period+1)^(0+256)
 10652  148A  303F               	movlw	63
 10653  148B  00C4               	movwf	(modCos@period+2)^(0+256)
 10654                           
 10655                           ;modulation.c: 94: double shift = 0.0;
 10656  148C  3000               	movlw	0
 10657  148D  00BF               	movwf	modCos@shift^(0+256)
 10658  148E  3000               	movlw	0
 10659  148F  00C0               	movwf	(modCos@shift+1)^(0+256)
 10660  1490  3000               	movlw	0
 10661  1491  00C1               	movwf	(modCos@shift+2)^(0+256)
 10662                           
 10663                           ;modulation.c: 96: if(angle<=inflection) {
 10664  1492  0837               	movf	modCos@inflection^(0+256),w
 10665  1493  0021               	movlb	1	; select bank1
 10666  1494  00A0               	movwf	___ftge@ff1^(0+128)
 10667  1495  0022               	movlb	2	; select bank2
 10668  1496  0838               	movf	(modCos@inflection+1)^(0+256),w
 10669  1497  0021               	movlb	1	; select bank1
 10670  1498  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10671  1499  0022               	movlb	2	; select bank2
 10672  149A  0839               	movf	(modCos@inflection+2)^(0+256),w
 10673  149B  0021               	movlb	1	; select bank1
 10674  149C  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10675  149D  0022               	movlb	2	; select bank2
 10676  149E  0834               	movf	modCos@angle^(0+256),w
 10677  149F  0021               	movlb	1	; select bank1
 10678  14A0  00A3               	movwf	___ftge@ff2^(0+128)
 10679  14A1  0022               	movlb	2	; select bank2
 10680  14A2  0835               	movf	(modCos@angle+1)^(0+256),w
 10681  14A3  0021               	movlb	1	; select bank1
 10682  14A4  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10683  14A5  0022               	movlb	2	; select bank2
 10684  14A6  0836               	movf	(modCos@angle+2)^(0+256),w
 10685  14A7  0021               	movlb	1	; select bank1
 10686  14A8  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10687  14A9  31A0  20AA  3194   	fcall	___ftge
 10688  14AC  1C03               	btfss	3,0
 10689  14AD  2CBA               	goto	l8316
 10690                           
 10691                           ;modulation.c: 97: period = 180.0/inflection;
 10692  14AE  0022               	movlb	2	; select bank2
 10693  14AF  0837               	movf	modCos@inflection^(0+256),w
 10694  14B0  0021               	movlb	1	; select bank1
 10695  14B1  00CE               	movwf	___ftdiv@f2^(0+128)
 10696  14B2  0022               	movlb	2	; select bank2
 10697  14B3  0838               	movf	(modCos@inflection+1)^(0+256),w
 10698  14B4  0021               	movlb	1	; select bank1
 10699  14B5  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10700  14B6  0022               	movlb	2	; select bank2
 10701  14B7  0839               	movf	(modCos@inflection+2)^(0+256),w
 10702  14B8  0021               	movlb	1	; select bank1
 10703  14B9  2D75               	goto	L7
 10704  14BA                     l8316:	
 10705                           ;modulation.c: 98: } else {
 10706                           
 10707                           
 10708                           ;modulation.c: 99: shift = -(360-inflection*2)*(180/(360-inflection));
 10709  14BA  0022               	movlb	2	; select bank2
 10710  14BB  0837               	movf	modCos@inflection^(0+256),w
 10711  14BC  0021               	movlb	1	; select bank1
 10712  14BD  00B1               	movwf	___ftmul@f2^(0+128)
 10713  14BE  0022               	movlb	2	; select bank2
 10714  14BF  0838               	movf	(modCos@inflection+1)^(0+256),w
 10715  14C0  0021               	movlb	1	; select bank1
 10716  14C1  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10717  14C2  0022               	movlb	2	; select bank2
 10718  14C3  0839               	movf	(modCos@inflection+2)^(0+256),w
 10719  14C4  0021               	movlb	1	; select bank1
 10720  14C5  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10721  14C6  3000               	movlw	0
 10722  14C7  00AE               	movwf	___ftmul@f1^(0+128)
 10723  14C8  3000               	movlw	0
 10724  14C9  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10725  14CA  3040               	movlw	64
 10726  14CB  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10727  14CC  319E  2656  3194   	fcall	___ftmul
 10728  14CF  0021               	movlb	1	; select bank1
 10729  14D0  082E               	movf	?___ftmul^(0+128),w
 10730  14D1  00BE               	movwf	___ftneg@f1^(0+128)
 10731  14D2  082F               	movf	(?___ftmul+1)^(0+128),w
 10732  14D3  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10733  14D4  0830               	movf	(?___ftmul+2)^(0+128),w
 10734  14D5  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10735  14D6  31AC  2497  3194   	fcall	___ftneg
 10736  14D9  0021               	movlb	1	; select bank1
 10737  14DA  083E               	movf	?___ftneg^(0+128),w
 10738  14DB  00C4               	movwf	___ftadd@f2^(0+128)
 10739  14DC  083F               	movf	(?___ftneg+1)^(0+128),w
 10740  14DD  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10741  14DE  0840               	movf	(?___ftneg+2)^(0+128),w
 10742  14DF  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10743  14E0  3000               	movlw	0
 10744  14E1  00C1               	movwf	___ftadd@f1^(0+128)
 10745  14E2  30B4               	movlw	180
 10746  14E3  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10747  14E4  3043               	movlw	67
 10748  14E5  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10749  14E6  319F  270A  3194   	fcall	___ftadd
 10750  14E9  0021               	movlb	1	; select bank1
 10751  14EA  0841               	movf	?___ftadd^(0+128),w
 10752  14EB  0022               	movlb	2	; select bank2
 10753  14EC  00BC               	movwf	_modCos$2912^(0+256)
 10754  14ED  0021               	movlb	1	; select bank1
 10755  14EE  0842               	movf	(?___ftadd+1)^(0+128),w
 10756  14EF  0022               	movlb	2	; select bank2
 10757  14F0  00BD               	movwf	(_modCos$2912+1)^(0+256)
 10758  14F1  0021               	movlb	1	; select bank1
 10759  14F2  0843               	movf	(?___ftadd+2)^(0+128),w
 10760  14F3  0022               	movlb	2	; select bank2
 10761  14F4  00BE               	movwf	(_modCos$2912+2)^(0+256)
 10762                           
 10763                           ;modulation.c: 99: shift = -(360-inflection*2)*(180/(360-inflection));
 10764  14F5  083C               	movf	_modCos$2912^(0+256),w
 10765  14F6  0021               	movlb	1	; select bank1
 10766  14F7  00BE               	movwf	___ftneg@f1^(0+128)
 10767  14F8  0022               	movlb	2	; select bank2
 10768  14F9  083D               	movf	(_modCos$2912+1)^(0+256),w
 10769  14FA  0021               	movlb	1	; select bank1
 10770  14FB  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10771  14FC  0022               	movlb	2	; select bank2
 10772  14FD  083E               	movf	(_modCos$2912+2)^(0+256),w
 10773  14FE  0021               	movlb	1	; select bank1
 10774  14FF  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10775  1500  31AC  2497  3194   	fcall	___ftneg
 10776  1503  0021               	movlb	1	; select bank1
 10777  1504  083E               	movf	?___ftneg^(0+128),w
 10778  1505  00AE               	movwf	___ftmul@f1^(0+128)
 10779  1506  083F               	movf	(?___ftneg+1)^(0+128),w
 10780  1507  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10781  1508  0840               	movf	(?___ftneg+2)^(0+128),w
 10782  1509  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10783  150A  3000               	movlw	0
 10784  150B  00C1               	movwf	___ftadd@f1^(0+128)
 10785  150C  30B4               	movlw	180
 10786  150D  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10787  150E  3043               	movlw	67
 10788  150F  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10789  1510  0022               	movlb	2	; select bank2
 10790  1511  0837               	movf	modCos@inflection^(0+256),w
 10791  1512  0021               	movlb	1	; select bank1
 10792  1513  00BE               	movwf	___ftneg@f1^(0+128)
 10793  1514  0022               	movlb	2	; select bank2
 10794  1515  0838               	movf	(modCos@inflection+1)^(0+256),w
 10795  1516  0021               	movlb	1	; select bank1
 10796  1517  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10797  1518  0022               	movlb	2	; select bank2
 10798  1519  0839               	movf	(modCos@inflection+2)^(0+256),w
 10799  151A  0021               	movlb	1	; select bank1
 10800  151B  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10801  151C  31AC  2497  3194   	fcall	___ftneg
 10802  151F  0021               	movlb	1	; select bank1
 10803  1520  083E               	movf	?___ftneg^(0+128),w
 10804  1521  00C4               	movwf	___ftadd@f2^(0+128)
 10805  1522  083F               	movf	(?___ftneg+1)^(0+128),w
 10806  1523  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10807  1524  0840               	movf	(?___ftneg+2)^(0+128),w
 10808  1525  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10809  1526  319F  270A  3194   	fcall	___ftadd
 10810  1529  0021               	movlb	1	; select bank1
 10811  152A  0841               	movf	?___ftadd^(0+128),w
 10812  152B  00CE               	movwf	___ftdiv@f2^(0+128)
 10813  152C  0842               	movf	(?___ftadd+1)^(0+128),w
 10814  152D  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10815  152E  0843               	movf	(?___ftadd+2)^(0+128),w
 10816  152F  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10817  1530  3000               	movlw	0
 10818  1531  00D1               	movwf	___ftdiv@f1^(0+128)
 10819  1532  3034               	movlw	52
 10820  1533  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10821  1534  3043               	movlw	67
 10822  1535  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10823  1536  319C  244F  3194   	fcall	___ftdiv
 10824  1539  0021               	movlb	1	; select bank1
 10825  153A  084E               	movf	?___ftdiv^(0+128),w
 10826  153B  00B1               	movwf	___ftmul@f2^(0+128)
 10827  153C  084F               	movf	(?___ftdiv+1)^(0+128),w
 10828  153D  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10829  153E  0850               	movf	(?___ftdiv+2)^(0+128),w
 10830  153F  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10831  1540  319E  2656  3194   	fcall	___ftmul
 10832  1543  0021               	movlb	1	; select bank1
 10833  1544  082E               	movf	?___ftmul^(0+128),w
 10834  1545  0022               	movlb	2	; select bank2
 10835  1546  00BF               	movwf	modCos@shift^(0+256)
 10836  1547  0021               	movlb	1	; select bank1
 10837  1548  082F               	movf	(?___ftmul+1)^(0+128),w
 10838  1549  0022               	movlb	2	; select bank2
 10839  154A  00C0               	movwf	(modCos@shift+1)^(0+256)
 10840  154B  0021               	movlb	1	; select bank1
 10841  154C  0830               	movf	(?___ftmul+2)^(0+128),w
 10842  154D  0022               	movlb	2	; select bank2
 10843  154E  00C1               	movwf	(modCos@shift+2)^(0+256)
 10844                           
 10845                           ;modulation.c: 100: period = 180/(360-inflection);
 10846  154F  3000               	movlw	0
 10847  1550  0021               	movlb	1	; select bank1
 10848  1551  00C1               	movwf	___ftadd@f1^(0+128)
 10849  1552  30B4               	movlw	180
 10850  1553  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10851  1554  3043               	movlw	67
 10852  1555  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10853  1556  0022               	movlb	2	; select bank2
 10854  1557  0837               	movf	modCos@inflection^(0+256),w
 10855  1558  0021               	movlb	1	; select bank1
 10856  1559  00BE               	movwf	___ftneg@f1^(0+128)
 10857  155A  0022               	movlb	2	; select bank2
 10858  155B  0838               	movf	(modCos@inflection+1)^(0+256),w
 10859  155C  0021               	movlb	1	; select bank1
 10860  155D  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10861  155E  0022               	movlb	2	; select bank2
 10862  155F  0839               	movf	(modCos@inflection+2)^(0+256),w
 10863  1560  0021               	movlb	1	; select bank1
 10864  1561  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10865  1562  31AC  2497  3194   	fcall	___ftneg
 10866  1565  0021               	movlb	1	; select bank1
 10867  1566  083E               	movf	?___ftneg^(0+128),w
 10868  1567  00C4               	movwf	___ftadd@f2^(0+128)
 10869  1568  083F               	movf	(?___ftneg+1)^(0+128),w
 10870  1569  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10871  156A  0840               	movf	(?___ftneg+2)^(0+128),w
 10872  156B  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10873  156C  319F  270A  3194   	fcall	___ftadd
 10874  156F  0021               	movlb	1	; select bank1
 10875  1570  0841               	movf	?___ftadd^(0+128),w
 10876  1571  00CE               	movwf	___ftdiv@f2^(0+128)
 10877  1572  0842               	movf	(?___ftadd+1)^(0+128),w
 10878  1573  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10879  1574  0843               	movf	(?___ftadd+2)^(0+128),w
 10880  1575                     L7:	
 10881  1575  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10882  1576  3000               	movlw	0
 10883  1577  00D1               	movwf	___ftdiv@f1^(0+128)
 10884  1578  3034               	movlw	52
 10885  1579  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10886  157A  3043               	movlw	67
 10887  157B  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10888  157C  319C  244F  3194   	fcall	___ftdiv
 10889  157F  0021               	movlb	1	; select bank1
 10890  1580  084E               	movf	?___ftdiv^(0+128),w
 10891  1581  0022               	movlb	2	; select bank2
 10892  1582  00C2               	movwf	modCos@period^(0+256)
 10893  1583  0021               	movlb	1	; select bank1
 10894  1584  084F               	movf	(?___ftdiv+1)^(0+128),w
 10895  1585  0022               	movlb	2	; select bank2
 10896  1586  00C3               	movwf	(modCos@period+1)^(0+256)
 10897  1587  0021               	movlb	1	; select bank1
 10898  1588  0850               	movf	(?___ftdiv+2)^(0+128),w
 10899  1589  0022               	movlb	2	; select bank2
 10900  158A  00C4               	movwf	(modCos@period+2)^(0+256)
 10901                           
 10902                           ;modulation.c: 102: }
 10903                           ;modulation.c: 103: double tmpVal = (period*angle-shift) /3;
 10904  158B  3000               	movlw	0
 10905  158C  0021               	movlb	1	; select bank1
 10906  158D  00CE               	movwf	___ftdiv@f2^(0+128)
 10907  158E  3040               	movlw	64
 10908  158F  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10909  1590  3040               	movlw	64
 10910  1591  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10911  1592  0022               	movlb	2	; select bank2
 10912  1593  083F               	movf	modCos@shift^(0+256),w
 10913  1594  0021               	movlb	1	; select bank1
 10914  1595  00BE               	movwf	___ftneg@f1^(0+128)
 10915  1596  0022               	movlb	2	; select bank2
 10916  1597  0840               	movf	(modCos@shift+1)^(0+256),w
 10917  1598  0021               	movlb	1	; select bank1
 10918  1599  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10919  159A  0022               	movlb	2	; select bank2
 10920  159B  0841               	movf	(modCos@shift+2)^(0+256),w
 10921  159C  0021               	movlb	1	; select bank1
 10922  159D  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10923  159E  31AC  2497  3194   	fcall	___ftneg
 10924  15A1  0021               	movlb	1	; select bank1
 10925  15A2  083E               	movf	?___ftneg^(0+128),w
 10926  15A3  00C1               	movwf	___ftadd@f1^(0+128)
 10927  15A4  083F               	movf	(?___ftneg+1)^(0+128),w
 10928  15A5  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10929  15A6  0840               	movf	(?___ftneg+2)^(0+128),w
 10930  15A7  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10931  15A8  0022               	movlb	2	; select bank2
 10932  15A9  0834               	movf	modCos@angle^(0+256),w
 10933  15AA  0021               	movlb	1	; select bank1
 10934  15AB  00AE               	movwf	___ftmul@f1^(0+128)
 10935  15AC  0022               	movlb	2	; select bank2
 10936  15AD  0835               	movf	(modCos@angle+1)^(0+256),w
 10937  15AE  0021               	movlb	1	; select bank1
 10938  15AF  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10939  15B0  0022               	movlb	2	; select bank2
 10940  15B1  0836               	movf	(modCos@angle+2)^(0+256),w
 10941  15B2  0021               	movlb	1	; select bank1
 10942  15B3  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10943  15B4  0022               	movlb	2	; select bank2
 10944  15B5  0842               	movf	modCos@period^(0+256),w
 10945  15B6  0021               	movlb	1	; select bank1
 10946  15B7  00B1               	movwf	___ftmul@f2^(0+128)
 10947  15B8  0022               	movlb	2	; select bank2
 10948  15B9  0843               	movf	(modCos@period+1)^(0+256),w
 10949  15BA  0021               	movlb	1	; select bank1
 10950  15BB  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10951  15BC  0022               	movlb	2	; select bank2
 10952  15BD  0844               	movf	(modCos@period+2)^(0+256),w
 10953  15BE  0021               	movlb	1	; select bank1
 10954  15BF  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10955  15C0  319E  2656  3194   	fcall	___ftmul
 10956  15C3  0021               	movlb	1	; select bank1
 10957  15C4  082E               	movf	?___ftmul^(0+128),w
 10958  15C5  00C4               	movwf	___ftadd@f2^(0+128)
 10959  15C6  082F               	movf	(?___ftmul+1)^(0+128),w
 10960  15C7  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10961  15C8  0830               	movf	(?___ftmul+2)^(0+128),w
 10962  15C9  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10963  15CA  319F  270A  3194   	fcall	___ftadd
 10964  15CD  0021               	movlb	1	; select bank1
 10965  15CE  0841               	movf	?___ftadd^(0+128),w
 10966  15CF  00D1               	movwf	___ftdiv@f1^(0+128)
 10967  15D0  0842               	movf	(?___ftadd+1)^(0+128),w
 10968  15D1  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10969  15D2  0843               	movf	(?___ftadd+2)^(0+128),w
 10970  15D3  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10971  15D4  319C  244F  3194   	fcall	___ftdiv
 10972  15D7  0021               	movlb	1	; select bank1
 10973  15D8  084E               	movf	?___ftdiv^(0+128),w
 10974  15D9  0022               	movlb	2	; select bank2
 10975  15DA  00C5               	movwf	modCos@tmpVal^(0+256)
 10976  15DB  0021               	movlb	1	; select bank1
 10977  15DC  084F               	movf	(?___ftdiv+1)^(0+128),w
 10978  15DD  0022               	movlb	2	; select bank2
 10979  15DE  00C6               	movwf	(modCos@tmpVal+1)^(0+256)
 10980  15DF  0021               	movlb	1	; select bank1
 10981  15E0  0850               	movf	(?___ftdiv+2)^(0+128),w
 10982  15E1  0022               	movlb	2	; select bank2
 10983  15E2  00C7               	movwf	(modCos@tmpVal+2)^(0+256)
 10984                           
 10985                           ;modulation.c: 104: tmpVal = cosArray[(int)(tmpVal)];
 10986  15E3  0845               	movf	modCos@tmpVal^(0+256),w
 10987  15E4  00A0               	movwf	___fttol@f1^(0+256)
 10988  15E5  0846               	movf	(modCos@tmpVal+1)^(0+256),w
 10989  15E6  00A1               	movwf	(___fttol@f1+1)^(0+256)
 10990  15E7  0847               	movf	(modCos@tmpVal+2)^(0+256),w
 10991  15E8  00A2               	movwf	(___fttol@f1+2)^(0+256)
 10992  15E9  3199  218A  3194   	fcall	___fttol
 10993  15EC  0022               	movlb	2	; select bank2
 10994  15ED  0821               	movf	(?___fttol^(0+256)+1),w
 10995  15EE  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 10996  15EF  0820               	movf	?___fttol^(0+256),w
 10997  15F0  00AE               	movwf	___wmul@multiplier^(0+256)
 10998  15F1  3003               	movlw	3
 10999  15F2  00B0               	movwf	___wmul@multiplicand^(0+256)
 11000  15F3  3000               	movlw	0
 11001  15F4  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 11002  15F5  31AD  2570  3194   	fcall	___wmul
 11003  15F8  3082               	movlw	130
 11004  15F9  0022               	movlb	2	; select bank2
 11005  15FA  00BA               	movwf	??_modCos^(0+256)
 11006  15FB  3024               	movlw	36
 11007  15FC  00BB               	movwf	(??_modCos^(0+256)+1)
 11008  15FD  082E               	movf	?___wmul^(0+256),w
 11009  15FE  073A               	addwf	??_modCos^(0+256),w
 11010  15FF  0086               	movwf	6
 11011  1600  082F               	movf	(?___wmul+1)^(0+256),w
 11012  1601  3D3B               	addwfc	(??_modCos+1)^(0+256),w
 11013  1602  0087               	movwf	7
 11014  1603  3F40               	moviw [0]fsr1
 11015  1604  00C5               	movwf	modCos@tmpVal^(0+256)
 11016  1605  3F41               	moviw [1]fsr1
 11017  1606  00C6               	movwf	(modCos@tmpVal+1)^(0+256)
 11018  1607  3F42               	moviw [2]fsr1
 11019  1608  00C7               	movwf	(modCos@tmpVal+2)^(0+256)
 11020                           
 11021                           ;modulation.c: 105: return (int)(-100.0 * tmpVal);
 11022  1609  0845               	movf	modCos@tmpVal^(0+256),w
 11023  160A  0021               	movlb	1	; select bank1
 11024  160B  00B1               	movwf	___ftmul@f2^(0+128)
 11025  160C  0022               	movlb	2	; select bank2
 11026  160D  0846               	movf	(modCos@tmpVal+1)^(0+256),w
 11027  160E  0021               	movlb	1	; select bank1
 11028  160F  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11029  1610  0022               	movlb	2	; select bank2
 11030  1611  0847               	movf	(modCos@tmpVal+2)^(0+256),w
 11031  1612  0021               	movlb	1	; select bank1
 11032  1613  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11033  1614  3000               	movlw	0
 11034  1615  00AE               	movwf	___ftmul@f1^(0+128)
 11035  1616  30C8               	movlw	200
 11036  1617  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11037  1618  30C2               	movlw	194
 11038  1619  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11039  161A  319E  2656  3194   	fcall	___ftmul
 11040  161D  0021               	movlb	1	; select bank1
 11041  161E  082E               	movf	?___ftmul^(0+128),w
 11042  161F  0022               	movlb	2	; select bank2
 11043  1620  00A0               	movwf	___fttol@f1^(0+256)
 11044  1621  0021               	movlb	1	; select bank1
 11045  1622  082F               	movf	(?___ftmul+1)^(0+128),w
 11046  1623  0022               	movlb	2	; select bank2
 11047  1624  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11048  1625  0021               	movlb	1	; select bank1
 11049  1626  0830               	movf	(?___ftmul+2)^(0+128),w
 11050  1627  0022               	movlb	2	; select bank2
 11051  1628  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11052  1629  3199  218A         	fcall	___fttol
 11053  162B  0022               	movlb	2	; select bank2
 11054  162C  0821               	movf	(?___fttol^(0+256)+1),w
 11055  162D  00B5               	movwf	(?_modCos+1)^(0+256)
 11056  162E  0820               	movf	?___fttol^(0+256),w
 11057  162F  00B4               	movwf	?_modCos^(0+256)
 11058  1630  0008               	return
 11059  1631                     __end_of_modCos:	
 11060                           
 11061                           	psect	text20
 11062  2DA8                     __ptext20:	
 11063 ;; *************** function _modSawRev *****************
 11064 ;; Defined at:
 11065 ;;		line 146 in file "modulation.c"
 11066 ;; Parameters:    Size  Location     Type
 11067 ;;  angle           3   34[BANK2 ] int 
 11068 ;;  inflection      3   37[BANK2 ] int 
 11069 ;; Auto vars:     Size  Location     Type
 11070 ;;		None
 11071 ;; Return value:  Size  Location     Type
 11072 ;;                  2   34[BANK2 ] int 
 11073 ;; Registers used:
 11074 ;;		wreg, status,2, status,0, pclath, cstack
 11075 ;; Tracked objects:
 11076 ;;		On entry : 0/0
 11077 ;;		On exit  : 0/0
 11078 ;;		Unchanged: 0/0
 11079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11080 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11082 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11083 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11084 ;;Total ram usage:        8 bytes
 11085 ;; Hardware stack levels used:    1
 11086 ;; Hardware stack levels required when called:    6
 11087 ;; This function calls:
 11088 ;;		_modSaw
 11089 ;; This function is called by:
 11090 ;;		_updateModulationArray
 11091 ;; This function uses a non-reentrant model
 11092 ;;
 11093                           
 11094                           
 11095                           ;psect for function _modSawRev
 11096  2DA8                     _modSawRev:	
 11097                           
 11098                           ;modulation.c: 147: return -1 * modSaw(angle, inflection);
 11099                           
 11100                           ;incstack = 0
 11101                           ; Regs used in _modSawRev: [wreg+status,2+status,0+pclath+cstack]
 11102  2DA8  0022               	movlb	2	; select bank2
 11103  2DA9  0842               	movf	modSawRev@angle^(0+256),w
 11104  2DAA  00AE               	movwf	modSaw@angle^(0+256)
 11105  2DAB  0843               	movf	(modSawRev@angle+1)^(0+256),w
 11106  2DAC  00AF               	movwf	(modSaw@angle+1)^(0+256)
 11107  2DAD  0844               	movf	(modSawRev@angle+2)^(0+256),w
 11108  2DAE  00B0               	movwf	(modSaw@angle+2)^(0+256)
 11109  2DAF  0845               	movf	modSawRev@inflection^(0+256),w
 11110  2DB0  00B1               	movwf	modSaw@inflection^(0+256)
 11111  2DB1  0846               	movf	(modSawRev@inflection+1)^(0+256),w
 11112  2DB2  00B2               	movwf	(modSaw@inflection+1)^(0+256)
 11113  2DB3  0847               	movf	(modSawRev@inflection+2)^(0+256),w
 11114  2DB4  00B3               	movwf	(modSaw@inflection+2)^(0+256)
 11115  2DB5  3188  2002         	fcall	_modSaw
 11116  2DB7  0022               	movlb	2	; select bank2
 11117  2DB8  092E               	comf	?_modSaw^(0+256),w
 11118  2DB9  00C8               	movwf	??_modSawRev^(0+256)
 11119  2DBA  092F               	comf	(?_modSaw+1)^(0+256),w
 11120  2DBB  00C9               	movwf	(??_modSawRev^(0+256)+1)
 11121  2DBC  0AC8               	incf	??_modSawRev^(0+256),f
 11122  2DBD  1903               	skipnz
 11123  2DBE  0AC9               	incf	(??_modSawRev^(0+256)+1),f
 11124  2DBF  0848               	movf	??_modSawRev^(0+256),w
 11125  2DC0  00C2               	movwf	?_modSawRev^(0+256)
 11126  2DC1  0849               	movf	(??_modSawRev+1)^(0+256),w
 11127  2DC2  00C3               	movwf	(?_modSawRev+1)^(0+256)
 11128  2DC3  0008               	return
 11129  2DC4                     __end_of_modSawRev:	
 11130                           
 11131                           	psect	text21
 11132  0802                     __ptext21:	
 11133 ;; *************** function _modSaw *****************
 11134 ;; Defined at:
 11135 ;;		line 131 in file "modulation.c"
 11136 ;; Parameters:    Size  Location     Type
 11137 ;;  angle           3   14[BANK2 ] int 
 11138 ;;  inflection      3   17[BANK2 ] int 
 11139 ;; Auto vars:     Size  Location     Type
 11140 ;;  period          3   31[BANK2 ] int 
 11141 ;;  shift           3   28[BANK2 ] int 
 11142 ;;  mod             2   26[BANK2 ] int 
 11143 ;; Return value:  Size  Location     Type
 11144 ;;                  2   14[BANK2 ] int 
 11145 ;; Registers used:
 11146 ;;		wreg, status,2, status,0, pclath, cstack
 11147 ;; Tracked objects:
 11148 ;;		On entry : 0/0
 11149 ;;		On exit  : 0/0
 11150 ;;		Unchanged: 0/0
 11151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11152 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11153 ;;      Locals:         0       0       0      14       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11155 ;;      Totals:         0       0       0      20       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11156 ;;Total ram usage:       20 bytes
 11157 ;; Hardware stack levels used:    1
 11158 ;; Hardware stack levels required when called:    5
 11159 ;; This function calls:
 11160 ;;		___ftadd
 11161 ;;		___ftdiv
 11162 ;;		___ftge
 11163 ;;		___ftmul
 11164 ;;		___ftneg
 11165 ;;		___fttol
 11166 ;; This function is called by:
 11167 ;;		_updateModulationArray
 11168 ;;		_modSawRev
 11169 ;; This function uses a non-reentrant model
 11170 ;;
 11171                           
 11172                           
 11173                           ;psect for function _modSaw
 11174  0802                     _modSaw:	
 11175                           
 11176                           ;modulation.c: 132: double period = 1.0;
 11177                           
 11178                           ;incstack = 0
 11179                           ; Regs used in _modSaw: [wreg+status,2+status,0+pclath+cstack]
 11180  0802  3000               	movlw	0
 11181  0803  0022               	movlb	2	; select bank2
 11182  0804  00BF               	movwf	modSaw@period^(0+256)
 11183  0805  3080               	movlw	128
 11184  0806  00C0               	movwf	(modSaw@period+1)^(0+256)
 11185  0807  303F               	movlw	63
 11186  0808  00C1               	movwf	(modSaw@period+2)^(0+256)
 11187                           
 11188                           ;modulation.c: 133: double shift = 0;
 11189  0809  3000               	movlw	0
 11190  080A  00BC               	movwf	modSaw@shift^(0+256)
 11191  080B  3000               	movlw	0
 11192  080C  00BD               	movwf	(modSaw@shift+1)^(0+256)
 11193  080D  3000               	movlw	0
 11194  080E  00BE               	movwf	(modSaw@shift+2)^(0+256)
 11195                           
 11196                           ;modulation.c: 135: if(angle<=inflection) {
 11197  080F  0831               	movf	modSaw@inflection^(0+256),w
 11198  0810  0021               	movlb	1	; select bank1
 11199  0811  00A0               	movwf	___ftge@ff1^(0+128)
 11200  0812  0022               	movlb	2	; select bank2
 11201  0813  0832               	movf	(modSaw@inflection+1)^(0+256),w
 11202  0814  0021               	movlb	1	; select bank1
 11203  0815  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 11204  0816  0022               	movlb	2	; select bank2
 11205  0817  0833               	movf	(modSaw@inflection+2)^(0+256),w
 11206  0818  0021               	movlb	1	; select bank1
 11207  0819  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 11208  081A  0022               	movlb	2	; select bank2
 11209  081B  082E               	movf	modSaw@angle^(0+256),w
 11210  081C  0021               	movlb	1	; select bank1
 11211  081D  00A3               	movwf	___ftge@ff2^(0+128)
 11212  081E  0022               	movlb	2	; select bank2
 11213  081F  082F               	movf	(modSaw@angle+1)^(0+256),w
 11214  0820  0021               	movlb	1	; select bank1
 11215  0821  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 11216  0822  0022               	movlb	2	; select bank2
 11217  0823  0830               	movf	(modSaw@angle+2)^(0+256),w
 11218  0824  0021               	movlb	1	; select bank1
 11219  0825  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 11220  0826  31A0  20AA  3188   	fcall	___ftge
 11221  0829  1C03               	btfss	3,0
 11222  082A  2837               	goto	l8330
 11223                           
 11224                           ;modulation.c: 136: period = 180.0/inflection;
 11225  082B  0022               	movlb	2	; select bank2
 11226  082C  0831               	movf	modSaw@inflection^(0+256),w
 11227  082D  0021               	movlb	1	; select bank1
 11228  082E  00CE               	movwf	___ftdiv@f2^(0+128)
 11229  082F  0022               	movlb	2	; select bank2
 11230  0830  0832               	movf	(modSaw@inflection+1)^(0+256),w
 11231  0831  0021               	movlb	1	; select bank1
 11232  0832  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11233  0833  0022               	movlb	2	; select bank2
 11234  0834  0833               	movf	(modSaw@inflection+2)^(0+256),w
 11235  0835  0021               	movlb	1	; select bank1
 11236  0836  28F2               	goto	L8
 11237  0837                     l8330:	
 11238                           ;modulation.c: 137: } else {
 11239                           
 11240                           
 11241                           ;modulation.c: 138: shift = -(360-inflection*2)*(180/(360-inflection));
 11242  0837  0022               	movlb	2	; select bank2
 11243  0838  0831               	movf	modSaw@inflection^(0+256),w
 11244  0839  0021               	movlb	1	; select bank1
 11245  083A  00B1               	movwf	___ftmul@f2^(0+128)
 11246  083B  0022               	movlb	2	; select bank2
 11247  083C  0832               	movf	(modSaw@inflection+1)^(0+256),w
 11248  083D  0021               	movlb	1	; select bank1
 11249  083E  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11250  083F  0022               	movlb	2	; select bank2
 11251  0840  0833               	movf	(modSaw@inflection+2)^(0+256),w
 11252  0841  0021               	movlb	1	; select bank1
 11253  0842  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11254  0843  3000               	movlw	0
 11255  0844  00AE               	movwf	___ftmul@f1^(0+128)
 11256  0845  3000               	movlw	0
 11257  0846  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11258  0847  3040               	movlw	64
 11259  0848  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11260  0849  319E  2656  3188   	fcall	___ftmul
 11261  084C  0021               	movlb	1	; select bank1
 11262  084D  082E               	movf	?___ftmul^(0+128),w
 11263  084E  00BE               	movwf	___ftneg@f1^(0+128)
 11264  084F  082F               	movf	(?___ftmul+1)^(0+128),w
 11265  0850  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11266  0851  0830               	movf	(?___ftmul+2)^(0+128),w
 11267  0852  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11268  0853  31AC  2497  3188   	fcall	___ftneg
 11269  0856  0021               	movlb	1	; select bank1
 11270  0857  083E               	movf	?___ftneg^(0+128),w
 11271  0858  00C4               	movwf	___ftadd@f2^(0+128)
 11272  0859  083F               	movf	(?___ftneg+1)^(0+128),w
 11273  085A  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11274  085B  0840               	movf	(?___ftneg+2)^(0+128),w
 11275  085C  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11276  085D  3000               	movlw	0
 11277  085E  00C1               	movwf	___ftadd@f1^(0+128)
 11278  085F  30B4               	movlw	180
 11279  0860  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11280  0861  3043               	movlw	67
 11281  0862  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11282  0863  319F  270A  3188   	fcall	___ftadd
 11283  0866  0021               	movlb	1	; select bank1
 11284  0867  0841               	movf	?___ftadd^(0+128),w
 11285  0868  0022               	movlb	2	; select bank2
 11286  0869  00B4               	movwf	_modSaw$2914^(0+256)
 11287  086A  0021               	movlb	1	; select bank1
 11288  086B  0842               	movf	(?___ftadd+1)^(0+128),w
 11289  086C  0022               	movlb	2	; select bank2
 11290  086D  00B5               	movwf	(_modSaw$2914+1)^(0+256)
 11291  086E  0021               	movlb	1	; select bank1
 11292  086F  0843               	movf	(?___ftadd+2)^(0+128),w
 11293  0870  0022               	movlb	2	; select bank2
 11294  0871  00B6               	movwf	(_modSaw$2914+2)^(0+256)
 11295                           
 11296                           ;modulation.c: 138: shift = -(360-inflection*2)*(180/(360-inflection));
 11297  0872  0834               	movf	_modSaw$2914^(0+256),w
 11298  0873  0021               	movlb	1	; select bank1
 11299  0874  00BE               	movwf	___ftneg@f1^(0+128)
 11300  0875  0022               	movlb	2	; select bank2
 11301  0876  0835               	movf	(_modSaw$2914+1)^(0+256),w
 11302  0877  0021               	movlb	1	; select bank1
 11303  0878  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11304  0879  0022               	movlb	2	; select bank2
 11305  087A  0836               	movf	(_modSaw$2914+2)^(0+256),w
 11306  087B  0021               	movlb	1	; select bank1
 11307  087C  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11308  087D  31AC  2497  3188   	fcall	___ftneg
 11309  0880  0021               	movlb	1	; select bank1
 11310  0881  083E               	movf	?___ftneg^(0+128),w
 11311  0882  00AE               	movwf	___ftmul@f1^(0+128)
 11312  0883  083F               	movf	(?___ftneg+1)^(0+128),w
 11313  0884  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11314  0885  0840               	movf	(?___ftneg+2)^(0+128),w
 11315  0886  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11316  0887  3000               	movlw	0
 11317  0888  00C1               	movwf	___ftadd@f1^(0+128)
 11318  0889  30B4               	movlw	180
 11319  088A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11320  088B  3043               	movlw	67
 11321  088C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11322  088D  0022               	movlb	2	; select bank2
 11323  088E  0831               	movf	modSaw@inflection^(0+256),w
 11324  088F  0021               	movlb	1	; select bank1
 11325  0890  00BE               	movwf	___ftneg@f1^(0+128)
 11326  0891  0022               	movlb	2	; select bank2
 11327  0892  0832               	movf	(modSaw@inflection+1)^(0+256),w
 11328  0893  0021               	movlb	1	; select bank1
 11329  0894  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11330  0895  0022               	movlb	2	; select bank2
 11331  0896  0833               	movf	(modSaw@inflection+2)^(0+256),w
 11332  0897  0021               	movlb	1	; select bank1
 11333  0898  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11334  0899  31AC  2497  3188   	fcall	___ftneg
 11335  089C  0021               	movlb	1	; select bank1
 11336  089D  083E               	movf	?___ftneg^(0+128),w
 11337  089E  00C4               	movwf	___ftadd@f2^(0+128)
 11338  089F  083F               	movf	(?___ftneg+1)^(0+128),w
 11339  08A0  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11340  08A1  0840               	movf	(?___ftneg+2)^(0+128),w
 11341  08A2  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11342  08A3  319F  270A  3188   	fcall	___ftadd
 11343  08A6  0021               	movlb	1	; select bank1
 11344  08A7  0841               	movf	?___ftadd^(0+128),w
 11345  08A8  00CE               	movwf	___ftdiv@f2^(0+128)
 11346  08A9  0842               	movf	(?___ftadd+1)^(0+128),w
 11347  08AA  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11348  08AB  0843               	movf	(?___ftadd+2)^(0+128),w
 11349  08AC  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11350  08AD  3000               	movlw	0
 11351  08AE  00D1               	movwf	___ftdiv@f1^(0+128)
 11352  08AF  3034               	movlw	52
 11353  08B0  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11354  08B1  3043               	movlw	67
 11355  08B2  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11356  08B3  319C  244F  3188   	fcall	___ftdiv
 11357  08B6  0021               	movlb	1	; select bank1
 11358  08B7  084E               	movf	?___ftdiv^(0+128),w
 11359  08B8  00B1               	movwf	___ftmul@f2^(0+128)
 11360  08B9  084F               	movf	(?___ftdiv+1)^(0+128),w
 11361  08BA  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11362  08BB  0850               	movf	(?___ftdiv+2)^(0+128),w
 11363  08BC  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11364  08BD  319E  2656  3188   	fcall	___ftmul
 11365  08C0  0021               	movlb	1	; select bank1
 11366  08C1  082E               	movf	?___ftmul^(0+128),w
 11367  08C2  0022               	movlb	2	; select bank2
 11368  08C3  00BC               	movwf	modSaw@shift^(0+256)
 11369  08C4  0021               	movlb	1	; select bank1
 11370  08C5  082F               	movf	(?___ftmul+1)^(0+128),w
 11371  08C6  0022               	movlb	2	; select bank2
 11372  08C7  00BD               	movwf	(modSaw@shift+1)^(0+256)
 11373  08C8  0021               	movlb	1	; select bank1
 11374  08C9  0830               	movf	(?___ftmul+2)^(0+128),w
 11375  08CA  0022               	movlb	2	; select bank2
 11376  08CB  00BE               	movwf	(modSaw@shift+2)^(0+256)
 11377                           
 11378                           ;modulation.c: 139: period = 180/(360-inflection);
 11379  08CC  3000               	movlw	0
 11380  08CD  0021               	movlb	1	; select bank1
 11381  08CE  00C1               	movwf	___ftadd@f1^(0+128)
 11382  08CF  30B4               	movlw	180
 11383  08D0  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11384  08D1  3043               	movlw	67
 11385  08D2  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11386  08D3  0022               	movlb	2	; select bank2
 11387  08D4  0831               	movf	modSaw@inflection^(0+256),w
 11388  08D5  0021               	movlb	1	; select bank1
 11389  08D6  00BE               	movwf	___ftneg@f1^(0+128)
 11390  08D7  0022               	movlb	2	; select bank2
 11391  08D8  0832               	movf	(modSaw@inflection+1)^(0+256),w
 11392  08D9  0021               	movlb	1	; select bank1
 11393  08DA  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11394  08DB  0022               	movlb	2	; select bank2
 11395  08DC  0833               	movf	(modSaw@inflection+2)^(0+256),w
 11396  08DD  0021               	movlb	1	; select bank1
 11397  08DE  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11398  08DF  31AC  2497  3188   	fcall	___ftneg
 11399  08E2  0021               	movlb	1	; select bank1
 11400  08E3  083E               	movf	?___ftneg^(0+128),w
 11401  08E4  00C4               	movwf	___ftadd@f2^(0+128)
 11402  08E5  083F               	movf	(?___ftneg+1)^(0+128),w
 11403  08E6  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11404  08E7  0840               	movf	(?___ftneg+2)^(0+128),w
 11405  08E8  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11406  08E9  319F  270A  3188   	fcall	___ftadd
 11407  08EC  0021               	movlb	1	; select bank1
 11408  08ED  0841               	movf	?___ftadd^(0+128),w
 11409  08EE  00CE               	movwf	___ftdiv@f2^(0+128)
 11410  08EF  0842               	movf	(?___ftadd+1)^(0+128),w
 11411  08F0  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11412  08F1  0843               	movf	(?___ftadd+2)^(0+128),w
 11413  08F2                     L8:	
 11414  08F2  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11415  08F3  3000               	movlw	0
 11416  08F4  00D1               	movwf	___ftdiv@f1^(0+128)
 11417  08F5  3034               	movlw	52
 11418  08F6  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11419  08F7  3043               	movlw	67
 11420  08F8  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11421  08F9  319C  244F  3188   	fcall	___ftdiv
 11422  08FC  0021               	movlb	1	; select bank1
 11423  08FD  084E               	movf	?___ftdiv^(0+128),w
 11424  08FE  0022               	movlb	2	; select bank2
 11425  08FF  00BF               	movwf	modSaw@period^(0+256)
 11426  0900  0021               	movlb	1	; select bank1
 11427  0901  084F               	movf	(?___ftdiv+1)^(0+128),w
 11428  0902  0022               	movlb	2	; select bank2
 11429  0903  00C0               	movwf	(modSaw@period+1)^(0+256)
 11430  0904  0021               	movlb	1	; select bank1
 11431  0905  0850               	movf	(?___ftdiv+2)^(0+128),w
 11432  0906  0022               	movlb	2	; select bank2
 11433  0907  00C1               	movwf	(modSaw@period+2)^(0+256)
 11434                           
 11435                           ;modulation.c: 140: }
 11436                           ;modulation.c: 142: int mod = (int)((period*angle-shift-180)*5/9);
 11437  0908  083F               	movf	modSaw@period^(0+256),w
 11438  0909  0021               	movlb	1	; select bank1
 11439  090A  00B1               	movwf	___ftmul@f2^(0+128)
 11440  090B  0022               	movlb	2	; select bank2
 11441  090C  0840               	movf	(modSaw@period+1)^(0+256),w
 11442  090D  0021               	movlb	1	; select bank1
 11443  090E  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11444  090F  0022               	movlb	2	; select bank2
 11445  0910  0841               	movf	(modSaw@period+2)^(0+256),w
 11446  0911  0021               	movlb	1	; select bank1
 11447  0912  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11448  0913  0022               	movlb	2	; select bank2
 11449  0914  082E               	movf	modSaw@angle^(0+256),w
 11450  0915  0021               	movlb	1	; select bank1
 11451  0916  00AE               	movwf	___ftmul@f1^(0+128)
 11452  0917  0022               	movlb	2	; select bank2
 11453  0918  082F               	movf	(modSaw@angle+1)^(0+256),w
 11454  0919  0021               	movlb	1	; select bank1
 11455  091A  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11456  091B  0022               	movlb	2	; select bank2
 11457  091C  0830               	movf	(modSaw@angle+2)^(0+256),w
 11458  091D  0021               	movlb	1	; select bank1
 11459  091E  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11460  091F  319E  2656  3188   	fcall	___ftmul
 11461  0922  0021               	movlb	1	; select bank1
 11462  0923  082E               	movf	?___ftmul^(0+128),w
 11463  0924  00C4               	movwf	___ftadd@f2^(0+128)
 11464  0925  082F               	movf	(?___ftmul+1)^(0+128),w
 11465  0926  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11466  0927  0830               	movf	(?___ftmul+2)^(0+128),w
 11467  0928  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11468  0929  0022               	movlb	2	; select bank2
 11469  092A  083C               	movf	modSaw@shift^(0+256),w
 11470  092B  0021               	movlb	1	; select bank1
 11471  092C  00BE               	movwf	___ftneg@f1^(0+128)
 11472  092D  0022               	movlb	2	; select bank2
 11473  092E  083D               	movf	(modSaw@shift+1)^(0+256),w
 11474  092F  0021               	movlb	1	; select bank1
 11475  0930  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11476  0931  0022               	movlb	2	; select bank2
 11477  0932  083E               	movf	(modSaw@shift+2)^(0+256),w
 11478  0933  0021               	movlb	1	; select bank1
 11479  0934  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11480  0935  31AC  2497  3188   	fcall	___ftneg
 11481  0938  0021               	movlb	1	; select bank1
 11482  0939  083E               	movf	?___ftneg^(0+128),w
 11483  093A  00C1               	movwf	___ftadd@f1^(0+128)
 11484  093B  083F               	movf	(?___ftneg+1)^(0+128),w
 11485  093C  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11486  093D  0840               	movf	(?___ftneg+2)^(0+128),w
 11487  093E  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11488  093F  319F  270A  3188   	fcall	___ftadd
 11489  0942  0021               	movlb	1	; select bank1
 11490  0943  0841               	movf	?___ftadd^(0+128),w
 11491  0944  0022               	movlb	2	; select bank2
 11492  0945  00B7               	movwf	_modSaw$2915^(0+256)
 11493  0946  0021               	movlb	1	; select bank1
 11494  0947  0842               	movf	(?___ftadd+1)^(0+128),w
 11495  0948  0022               	movlb	2	; select bank2
 11496  0949  00B8               	movwf	(_modSaw$2915+1)^(0+256)
 11497  094A  0021               	movlb	1	; select bank1
 11498  094B  0843               	movf	(?___ftadd+2)^(0+128),w
 11499  094C  0022               	movlb	2	; select bank2
 11500  094D  00B9               	movwf	(_modSaw$2915+2)^(0+256)
 11501                           
 11502                           ;modulation.c: 140: }
 11503                           ;modulation.c: 142: int mod = (int)((period*angle-shift-180)*5/9);
 11504  094E  0837               	movf	_modSaw$2915^(0+256),w
 11505  094F  0021               	movlb	1	; select bank1
 11506  0950  00C4               	movwf	___ftadd@f2^(0+128)
 11507  0951  0022               	movlb	2	; select bank2
 11508  0952  0838               	movf	(_modSaw$2915+1)^(0+256),w
 11509  0953  0021               	movlb	1	; select bank1
 11510  0954  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11511  0955  0022               	movlb	2	; select bank2
 11512  0956  0839               	movf	(_modSaw$2915+2)^(0+256),w
 11513  0957  0021               	movlb	1	; select bank1
 11514  0958  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11515  0959  3000               	movlw	0
 11516  095A  00C1               	movwf	___ftadd@f1^(0+128)
 11517  095B  3034               	movlw	52
 11518  095C  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11519  095D  30C3               	movlw	195
 11520  095E  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11521  095F  319F  270A  3188   	fcall	___ftadd
 11522  0962  0021               	movlb	1	; select bank1
 11523  0963  0841               	movf	?___ftadd^(0+128),w
 11524  0964  00B1               	movwf	___ftmul@f2^(0+128)
 11525  0965  0842               	movf	(?___ftadd+1)^(0+128),w
 11526  0966  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11527  0967  0843               	movf	(?___ftadd+2)^(0+128),w
 11528  0968  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11529  0969  3000               	movlw	0
 11530  096A  00AE               	movwf	___ftmul@f1^(0+128)
 11531  096B  30A0               	movlw	160
 11532  096C  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11533  096D  3040               	movlw	64
 11534  096E  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11535  096F  319E  2656  3188   	fcall	___ftmul
 11536  0972  0021               	movlb	1	; select bank1
 11537  0973  082E               	movf	?___ftmul^(0+128),w
 11538  0974  00D1               	movwf	___ftdiv@f1^(0+128)
 11539  0975  082F               	movf	(?___ftmul+1)^(0+128),w
 11540  0976  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11541  0977  0830               	movf	(?___ftmul+2)^(0+128),w
 11542  0978  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11543  0979  3000               	movlw	0
 11544  097A  00CE               	movwf	___ftdiv@f2^(0+128)
 11545  097B  3010               	movlw	16
 11546  097C  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11547  097D  3041               	movlw	65
 11548  097E  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11549  097F  319C  244F  3188   	fcall	___ftdiv
 11550  0982  0021               	movlb	1	; select bank1
 11551  0983  084E               	movf	?___ftdiv^(0+128),w
 11552  0984  0022               	movlb	2	; select bank2
 11553  0985  00A0               	movwf	___fttol@f1^(0+256)
 11554  0986  0021               	movlb	1	; select bank1
 11555  0987  084F               	movf	(?___ftdiv+1)^(0+128),w
 11556  0988  0022               	movlb	2	; select bank2
 11557  0989  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11558  098A  0021               	movlb	1	; select bank1
 11559  098B  0850               	movf	(?___ftdiv+2)^(0+128),w
 11560  098C  0022               	movlb	2	; select bank2
 11561  098D  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11562  098E  3199  218A         	fcall	___fttol
 11563  0990  0022               	movlb	2	; select bank2
 11564  0991  0821               	movf	(?___fttol^(0+256)+1),w
 11565  0992  00BB               	movwf	(modSaw@mod+1)^(0+256)
 11566  0993  0820               	movf	?___fttol^(0+256),w
 11567  0994  00BA               	movwf	modSaw@mod^(0+256)
 11568                           
 11569                           ;modulation.c: 143: return mod;
 11570  0995  083B               	movf	(modSaw@mod+1)^(0+256),w
 11571  0996  00AF               	movwf	(?_modSaw+1)^(0+256)
 11572  0997  083A               	movf	modSaw@mod^(0+256),w
 11573  0998  00AE               	movwf	?_modSaw^(0+256)
 11574  0999  0008               	return
 11575  099A                     __end_of_modSaw:	
 11576                           
 11577                           	psect	text22
 11578  2464                     __ptext22:	
 11579 ;; *************** function ___awdiv *****************
 11580 ;; Defined at:
 11581 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 11582 ;; Parameters:    Size  Location     Type
 11583 ;;  divisor         2    0[BANK1 ] int 
 11584 ;;  dividend        2    2[BANK1 ] int 
 11585 ;; Auto vars:     Size  Location     Type
 11586 ;;  quotient        2    7[BANK1 ] int 
 11587 ;;  sign            1    6[BANK1 ] unsigned char 
 11588 ;;  counter         1    5[BANK1 ] unsigned char 
 11589 ;; Return value:  Size  Location     Type
 11590 ;;                  2    0[BANK1 ] int 
 11591 ;; Registers used:
 11592 ;;		wreg, status,2, status,0
 11593 ;; Tracked objects:
 11594 ;;		On entry : 0/0
 11595 ;;		On exit  : 0/0
 11596 ;;		Unchanged: 0/0
 11597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11598 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11599 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11600 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11601 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11602 ;;Total ram usage:        9 bytes
 11603 ;; Hardware stack levels used:    1
 11604 ;; Hardware stack levels required when called:    3
 11605 ;; This function calls:
 11606 ;;		Nothing
 11607 ;; This function is called by:
 11608 ;;		_updateModulationArray
 11609 ;;		_USARTWriteInt
 11610 ;; This function uses a non-reentrant model
 11611 ;;
 11612                           
 11613                           
 11614                           ;psect for function ___awdiv
 11615  2464                     ___awdiv:	
 11616                           
 11617                           ;incstack = 0
 11618                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 11619  2464  0021               	movlb	1	; select bank1
 11620  2465  01A6               	clrf	___awdiv@sign^(0+128)
 11621  2466  1FA1               	btfss	(___awdiv@divisor+1)^(0+128),7
 11622  2467  2C6F               	goto	l8716
 11623  2468  09A0               	comf	___awdiv@divisor^(0+128),f
 11624  2469  09A1               	comf	(___awdiv@divisor+1)^(0+128),f
 11625  246A  0AA0               	incf	___awdiv@divisor^(0+128),f
 11626  246B  1903               	skipnz
 11627  246C  0AA1               	incf	(___awdiv@divisor+1)^(0+128),f
 11628  246D  01A6               	clrf	___awdiv@sign^(0+128)
 11629  246E  0AA6               	incf	___awdiv@sign^(0+128),f
 11630  246F                     l8716:	
 11631  246F  1FA3               	btfss	(___awdiv@dividend+1)^(0+128),7
 11632  2470  2C7A               	goto	l8722
 11633  2471  09A2               	comf	___awdiv@dividend^(0+128),f
 11634  2472  09A3               	comf	(___awdiv@dividend+1)^(0+128),f
 11635  2473  0AA2               	incf	___awdiv@dividend^(0+128),f
 11636  2474  1903               	skipnz
 11637  2475  0AA3               	incf	(___awdiv@dividend+1)^(0+128),f
 11638  2476  3001               	movlw	1
 11639  2477  00A4               	movwf	??___awdiv^(0+128)
 11640  2478  0824               	movf	??___awdiv^(0+128),w
 11641  2479  06A6               	xorwf	___awdiv@sign^(0+128),f
 11642  247A                     l8722:	
 11643  247A  01A7               	clrf	___awdiv@quotient^(0+128)
 11644  247B  01A8               	clrf	(___awdiv@quotient+1)^(0+128)
 11645  247C  0820               	movf	___awdiv@divisor^(0+128),w
 11646  247D  0421               	iorwf	(___awdiv@divisor+1)^(0+128),w
 11647  247E  1903               	btfsc	3,2
 11648  247F  2CA9               	goto	l8744
 11649  2480  01A5               	clrf	___awdiv@counter^(0+128)
 11650  2481  0AA5               	incf	___awdiv@counter^(0+128),f
 11651  2482                     l8732:	
 11652  2482  1BA1               	btfsc	(___awdiv@divisor+1)^(0+128),7
 11653  2483  2C8E               	goto	l8734
 11654  2484  3001               	movlw	1
 11655  2485                     u9305:	
 11656  2485  35A0               	lslf	___awdiv@divisor^(0+128),f
 11657  2486  0DA1               	rlf	(___awdiv@divisor+1)^(0+128),f
 11658  2487  0B89               	decfsz	9,f
 11659  2488  2C85               	goto	u9305
 11660  2489  3001               	movlw	1
 11661  248A  00A4               	movwf	??___awdiv^(0+128)
 11662  248B  0824               	movf	??___awdiv^(0+128),w
 11663  248C  07A5               	addwf	___awdiv@counter^(0+128),f
 11664  248D  2C82               	goto	l8732
 11665  248E                     l8734:	
 11666  248E  3001               	movlw	1
 11667  248F                     u9325:	
 11668  248F  35A7               	lslf	___awdiv@quotient^(0+128),f
 11669  2490  0DA8               	rlf	(___awdiv@quotient+1)^(0+128),f
 11670  2491  0B89               	decfsz	9,f
 11671  2492  2C8F               	goto	u9325
 11672  2493  0821               	movf	(___awdiv@divisor+1)^(0+128),w
 11673  2494  0223               	subwf	(___awdiv@dividend+1)^(0+128),w
 11674  2495  1D03               	skipz
 11675  2496  2C99               	goto	u9335
 11676  2497  0820               	movf	___awdiv@divisor^(0+128),w
 11677  2498  0222               	subwf	___awdiv@dividend^(0+128),w
 11678  2499                     u9335:	
 11679  2499  1C03               	skipc
 11680  249A  2CA0               	goto	l8740
 11681  249B  0820               	movf	___awdiv@divisor^(0+128),w
 11682  249C  02A2               	subwf	___awdiv@dividend^(0+128),f
 11683  249D  0821               	movf	(___awdiv@divisor+1)^(0+128),w
 11684  249E  3BA3               	subwfb	(___awdiv@dividend+1)^(0+128),f
 11685  249F  1427               	bsf	___awdiv@quotient^(0+128),0
 11686  24A0                     l8740:	
 11687  24A0  3001               	movlw	1
 11688  24A1                     u9345:	
 11689  24A1  36A1               	lsrf	(___awdiv@divisor+1)^(0+128),f
 11690  24A2  0CA0               	rrf	___awdiv@divisor^(0+128),f
 11691  24A3  0B89               	decfsz	9,f
 11692  24A4  2CA1               	goto	u9345
 11693  24A5  3001               	movlw	1
 11694  24A6  02A5               	subwf	___awdiv@counter^(0+128),f
 11695  24A7  1D03               	btfss	3,2
 11696  24A8  2C8E               	goto	l8734
 11697  24A9                     l8744:	
 11698  24A9  0826               	movf	___awdiv@sign^(0+128),w
 11699  24AA  1903               	btfsc	3,2
 11700  24AB  2CB1               	goto	l8748
 11701  24AC  09A7               	comf	___awdiv@quotient^(0+128),f
 11702  24AD  09A8               	comf	(___awdiv@quotient+1)^(0+128),f
 11703  24AE  0AA7               	incf	___awdiv@quotient^(0+128),f
 11704  24AF  1903               	skipnz
 11705  24B0  0AA8               	incf	(___awdiv@quotient+1)^(0+128),f
 11706  24B1                     l8748:	
 11707  24B1  0828               	movf	(___awdiv@quotient+1)^(0+128),w
 11708  24B2  00A1               	movwf	(?___awdiv+1)^(0+128)
 11709  24B3  0827               	movf	___awdiv@quotient^(0+128),w
 11710  24B4  00A0               	movwf	?___awdiv^(0+128)
 11711  24B5  0008               	return
 11712  24B6                     __end_of___awdiv:	
 11713                           
 11714                           	psect	text23
 11715  1A9C                     __ptext23:	
 11716 ;; *************** function _set_subdivision *****************
 11717 ;; Defined at:
 11718 ;;		line 77 in file "user.c"
 11719 ;; Parameters:    Size  Location     Type
 11720 ;;  x               2   14[BANK2 ] int 
 11721 ;;  y               2   16[BANK2 ] int 
 11722 ;; Auto vars:     Size  Location     Type
 11723 ;;  scalar          3   18[BANK2 ] float 
 11724 ;;  tmpX            2   21[BANK2 ] int 
 11725 ;; Return value:  Size  Location     Type
 11726 ;;                  2   14[BANK2 ] int 
 11727 ;; Registers used:
 11728 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11729 ;; Tracked objects:
 11730 ;;		On entry : 0/0
 11731 ;;		On exit  : 0/0
 11732 ;;		Unchanged: 0/0
 11733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11734 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11735 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11737 ;;      Totals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11738 ;;Total ram usage:        9 bytes
 11739 ;; Hardware stack levels used:    1
 11740 ;; Hardware stack levels required when called:    5
 11741 ;; This function calls:
 11742 ;;		___awtoft
 11743 ;;		___ftmul
 11744 ;;		___fttol
 11745 ;; This function is called by:
 11746 ;;		_main
 11747 ;; This function uses a non-reentrant model
 11748 ;;
 11749                           
 11750                           
 11751                           ;psect for function _set_subdivision
 11752  1A9C                     _set_subdivision:	
 11753                           
 11754                           ;user.c: 81: adjust_mod_delay = 0;
 11755                           
 11756                           ;incstack = 0
 11757                           ; Regs used in _set_subdivision: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11758  1A9C  0023               	movlb	3	; select bank3
 11759  1A9D  01BE               	clrf	_adjust_mod_delay^(0+384)
 11760                           
 11761                           ;user.c: 82: int tmpX = x;
 11762  1A9E  0022               	movlb	2	; select bank2
 11763  1A9F  082F               	movf	(set_subdivision@x+1)^(0+256),w
 11764  1AA0  00B6               	movwf	(set_subdivision@tmpX+1)^(0+256)
 11765  1AA1  082E               	movf	set_subdivision@x^(0+256),w
 11766  1AA2  00B5               	movwf	set_subdivision@tmpX^(0+256)
 11767                           
 11768                           ;user.c: 83: float scalar = 1.0;
 11769  1AA3  3000               	movlw	0
 11770  1AA4  00B2               	movwf	set_subdivision@scalar^(0+256)
 11771  1AA5  3080               	movlw	128
 11772  1AA6  00B3               	movwf	(set_subdivision@scalar+1)^(0+256)
 11773  1AA7  303F               	movlw	63
 11774  1AA8  00B4               	movwf	(set_subdivision@scalar+2)^(0+256)
 11775                           
 11776                           ;user.c: 85: switch (y) {
 11777  1AA9  2AC9               	goto	l9260
 11778  1AAA                     l9246:	
 11779                           ;user.c: 86: case 1:
 11780                           
 11781                           
 11782                           ;user.c: 87: scalar = 2.0;
 11783  1AAA  3000               	movlw	0
 11784  1AAB  00B2               	movwf	set_subdivision@scalar^(0+256)
 11785  1AAC  3000               	movlw	0
 11786  1AAD  00B3               	movwf	(set_subdivision@scalar+1)^(0+256)
 11787  1AAE  3040               	movlw	64
 11788  1AAF  2AC7               	goto	L13
 11789  1AB0                     l9248:	
 11790                           ;user.c: 89: case 2:
 11791                           
 11792                           ;user.c: 88: break;
 11793                           
 11794                           
 11795                           ;user.c: 90: scalar = 0.6666;
 11796  1AB0  30A6               	movlw	166
 11797  1AB1  00B2               	movwf	set_subdivision@scalar^(0+256)
 11798  1AB2  302A               	movlw	42
 11799  1AB3  2AC5               	goto	L14
 11800  1AB4                     l9250:	
 11801                           ;user.c: 92: case 3:
 11802                           
 11803                           ;user.c: 91: break;
 11804                           
 11805                           
 11806                           ;user.c: 93: scalar = .5;
 11807  1AB4  3000               	movlw	0
 11808  1AB5  00B2               	movwf	set_subdivision@scalar^(0+256)
 11809  1AB6  3000               	movlw	0
 11810  1AB7  2AC5               	goto	L14
 11811  1AB8                     l9252:	
 11812                           ;user.c: 95: case 4:
 11813                           
 11814                           ;user.c: 94: break;
 11815                           
 11816                           
 11817                           ;user.c: 96: scalar = 0.3333;
 11818  1AB8  30A6               	movlw	166
 11819  1AB9  00B2               	movwf	set_subdivision@scalar^(0+256)
 11820  1ABA  30AA               	movlw	170
 11821  1ABB  2ABF               	goto	L15
 11822  1ABC                     l9254:	
 11823                           ;user.c: 98: case 5:
 11824                           
 11825                           ;user.c: 97: break;
 11826                           
 11827                           
 11828                           ;user.c: 99: scalar = 0.25;
 11829  1ABC  3000               	movlw	0
 11830  1ABD  00B2               	movwf	set_subdivision@scalar^(0+256)
 11831  1ABE  3080               	movlw	128
 11832  1ABF                     L15:	
 11833  1ABF  00B3               	movwf	(set_subdivision@scalar+1)^(0+256)
 11834  1AC0  303E               	movlw	62
 11835  1AC1  2AC7               	goto	L13
 11836  1AC2                     l9256:	
 11837                           ;user.c: 101: case 6:
 11838                           
 11839                           ;user.c: 100: break;
 11840                           
 11841                           
 11842                           ;user.c: 102: scalar = 1.0;
 11843  1AC2  3000               	movlw	0
 11844  1AC3  00B2               	movwf	set_subdivision@scalar^(0+256)
 11845  1AC4  3080               	movlw	128
 11846  1AC5                     L14:	
 11847  1AC5  00B3               	movwf	(set_subdivision@scalar+1)^(0+256)
 11848  1AC6  303F               	movlw	63
 11849  1AC7                     L13:	
 11850  1AC7  00B4               	movwf	(set_subdivision@scalar+2)^(0+256)
 11851                           
 11852                           ;user.c: 104: }
 11853                           
 11854                           ;user.c: 103: break;
 11855  1AC8  2AE2               	goto	l9262
 11856  1AC9                     l9260:	
 11857                           
 11858                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11859                           ; Switch size 1, requested type "space"
 11860                           ; Number of cases is 1, Range of values is 0 to 0
 11861                           ; switch strategies available:
 11862                           ; Name         Instructions Cycles
 11863                           ; simple_byte            4     3 (average)
 11864                           ; direct_byte            8     6 (fixed)
 11865                           ; jumptable            260     6 (fixed)
 11866                           ;	Chosen strategy is simple_byte
 11867  1AC9  0831               	movf	(set_subdivision@y+1)^(0+256),w
 11868  1ACA  3A00               	xorlw	0	; case 0
 11869  1ACB  1903               	skipnz
 11870  1ACC  2ACE               	goto	l9908
 11871  1ACD  2AE2               	goto	l9262
 11872  1ACE                     l9908:	
 11873                           
 11874                           ; Switch size 1, requested type "space"
 11875                           ; Number of cases is 6, Range of values is 1 to 6
 11876                           ; switch strategies available:
 11877                           ; Name         Instructions Cycles
 11878                           ; simple_byte           19    10 (average)
 11879                           ; direct_byte           21     9 (fixed)
 11880                           ; jumptable            263     9 (fixed)
 11881                           ;	Chosen strategy is simple_byte
 11882  1ACE  0830               	movf	set_subdivision@y^(0+256),w
 11883  1ACF  3A01               	xorlw	1	; case 1
 11884  1AD0  1903               	skipnz
 11885  1AD1  2AAA               	goto	l9246
 11886  1AD2  3A03               	xorlw	3	; case 2
 11887  1AD3  1903               	skipnz
 11888  1AD4  2AB0               	goto	l9248
 11889  1AD5  3A01               	xorlw	1	; case 3
 11890  1AD6  1903               	skipnz
 11891  1AD7  2AB4               	goto	l9250
 11892  1AD8  3A07               	xorlw	7	; case 4
 11893  1AD9  1903               	skipnz
 11894  1ADA  2AB8               	goto	l9252
 11895  1ADB  3A01               	xorlw	1	; case 5
 11896  1ADC  1903               	skipnz
 11897  1ADD  2ABC               	goto	l9254
 11898  1ADE  3A03               	xorlw	3	; case 6
 11899  1ADF  1903               	skipnz
 11900  1AE0  2AC2               	goto	l9256
 11901  1AE1  2AE2               	goto	l9262
 11902  1AE2                     l9262:	
 11903                           
 11904                           ;user.c: 106: tmpX = (int)((float)tmpX * scalar);
 11905  1AE2  0836               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11906  1AE3  0021               	movlb	1	; select bank1
 11907  1AE4  00A9               	movwf	(___awtoft@c+1)^(0+128)
 11908  1AE5  0022               	movlb	2	; select bank2
 11909  1AE6  0835               	movf	set_subdivision@tmpX^(0+256),w
 11910  1AE7  0021               	movlb	1	; select bank1
 11911  1AE8  00A8               	movwf	___awtoft@c^(0+128)
 11912  1AE9  31AD  25E4  319A   	fcall	___awtoft
 11913  1AEC  0021               	movlb	1	; select bank1
 11914  1AED  0828               	movf	?___awtoft^(0+128),w
 11915  1AEE  00B1               	movwf	___ftmul@f2^(0+128)
 11916  1AEF  0829               	movf	(?___awtoft+1)^(0+128),w
 11917  1AF0  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11918  1AF1  082A               	movf	(?___awtoft+2)^(0+128),w
 11919  1AF2  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11920  1AF3  0022               	movlb	2	; select bank2
 11921  1AF4  0832               	movf	set_subdivision@scalar^(0+256),w
 11922  1AF5  0021               	movlb	1	; select bank1
 11923  1AF6  00AE               	movwf	___ftmul@f1^(0+128)
 11924  1AF7  0022               	movlb	2	; select bank2
 11925  1AF8  0833               	movf	(set_subdivision@scalar+1)^(0+256),w
 11926  1AF9  0021               	movlb	1	; select bank1
 11927  1AFA  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11928  1AFB  0022               	movlb	2	; select bank2
 11929  1AFC  0834               	movf	(set_subdivision@scalar+2)^(0+256),w
 11930  1AFD  0021               	movlb	1	; select bank1
 11931  1AFE  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11932  1AFF  319E  2656  319A   	fcall	___ftmul
 11933  1B02  0021               	movlb	1	; select bank1
 11934  1B03  082E               	movf	?___ftmul^(0+128),w
 11935  1B04  0022               	movlb	2	; select bank2
 11936  1B05  00A0               	movwf	___fttol@f1^(0+256)
 11937  1B06  0021               	movlb	1	; select bank1
 11938  1B07  082F               	movf	(?___ftmul+1)^(0+128),w
 11939  1B08  0022               	movlb	2	; select bank2
 11940  1B09  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11941  1B0A  0021               	movlb	1	; select bank1
 11942  1B0B  0830               	movf	(?___ftmul+2)^(0+128),w
 11943  1B0C  0022               	movlb	2	; select bank2
 11944  1B0D  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11945  1B0E  3199  218A  319A   	fcall	___fttol
 11946  1B11  0022               	movlb	2	; select bank2
 11947  1B12  0821               	movf	(?___fttol^(0+256)+1),w
 11948  1B13  00B6               	movwf	(set_subdivision@tmpX+1)^(0+256)
 11949  1B14  0820               	movf	?___fttol^(0+256),w
 11950  1B15  00B5               	movwf	set_subdivision@tmpX^(0+256)
 11951                           
 11952                           ;user.c: 108: if ((int)(tmpX) != tmpX) {
 11953  1B16  0836               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11954  1B17  0636               	xorwf	(set_subdivision@tmpX+1)^(0+256),w
 11955  1B18  1D03               	skipz
 11956  1B19  2B1C               	goto	u10285
 11957  1B1A  0835               	movf	set_subdivision@tmpX^(0+256),w
 11958  1B1B  0635               	xorwf	set_subdivision@tmpX^(0+256),w
 11959  1B1C                     u10285:	
 11960  1B1C  1903               	skipnz
 11961  1B1D  2B21               	goto	l9268
 11962                           
 11963                           ;user.c: 109: adjust_mod_delay = 1;
 11964  1B1E  0023               	movlb	3	; select bank3
 11965  1B1F  01BE               	clrf	_adjust_mod_delay^(0+384)
 11966  1B20  0ABE               	incf	_adjust_mod_delay^(0+384),f
 11967  1B21                     l9268:	
 11968                           
 11969                           ;user.c: 110: }
 11970                           ;user.c: 112: return tmpX;
 11971  1B21  0022               	movlb	2	; select bank2
 11972  1B22  0836               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11973  1B23  00AF               	movwf	(?_set_subdivision+1)^(0+256)
 11974  1B24  0835               	movf	set_subdivision@tmpX^(0+256),w
 11975  1B25  00AE               	movwf	?_set_subdivision^(0+256)
 11976  1B26  0008               	return
 11977  1B27                     __end_of_set_subdivision:	
 11978                           
 11979                           	psect	text24
 11980  1CF8                     __ptext24:	
 11981 ;; *************** function _scaleiA10kPot *****************
 11982 ;; Defined at:
 11983 ;;		line 211 in file "user.c"
 11984 ;; Parameters:    Size  Location     Type
 11985 ;;  input           3   71[BANK2 ] int 
 11986 ;; Auto vars:     Size  Location     Type
 11987 ;;  pwm             3    0[BANK3 ] float 
 11988 ;; Return value:  Size  Location     Type
 11989 ;;                  2   71[BANK2 ] int 
 11990 ;; Registers used:
 11991 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11992 ;; Tracked objects:
 11993 ;;		On entry : 0/0
 11994 ;;		On exit  : 0/0
 11995 ;;		Unchanged: 0/0
 11996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11997 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11998 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12000 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12001 ;;Total ram usage:       12 bytes
 12002 ;; Hardware stack levels used:    1
 12003 ;; Hardware stack levels required when called:    8
 12004 ;; This function calls:
 12005 ;;		___ftadd
 12006 ;;		___ftdiv
 12007 ;;		___ftmul
 12008 ;;		___ftneg
 12009 ;;		___fttol
 12010 ;;		_pow
 12011 ;; This function is called by:
 12012 ;;		_main
 12013 ;; This function uses a non-reentrant model
 12014 ;;
 12015                           
 12016                           
 12017                           ;psect for function _scaleiA10kPot
 12018  1CF8                     _scaleiA10kPot:	
 12019                           
 12020                           ;user.c: 214: if (input == 0.0) {return 0;}
 12021                           
 12022                           ;incstack = 0
 12023                           ; Regs used in _scaleiA10kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12024  1CF8  0022               	movlb	2	; select bank2
 12025  1CF9  0869               	movf	(scaleiA10kPot@input+2)^(0+256),w
 12026  1CFA  0468               	iorwf	(scaleiA10kPot@input+1)^(0+256),w
 12027  1CFB  0467               	iorwf	scaleiA10kPot@input^(0+256),w
 12028  1CFC  1D03               	skipz
 12029  1CFD  2D01               	goto	l9206
 12030  1CFE  01E7               	clrf	?_scaleiA10kPot^(0+256)
 12031  1CFF  01E8               	clrf	(?_scaleiA10kPot+1)^(0+256)
 12032  1D00  0008               	return
 12033  1D01                     l9206:	
 12034                           
 12035                           ;user.c: 216: if (input == 1023.0) {return 255;}
 12036  1D01  30C0               	movlw	192
 12037  1D02  0667               	xorwf	scaleiA10kPot@input^(0+256),w
 12038  1D03  307F               	movlw	127
 12039  1D04  1903               	skipnz
 12040  1D05  0668               	xorwf	(scaleiA10kPot@input+1)^(0+256),w
 12041  1D06  3044               	movlw	68
 12042  1D07  1903               	skipnz
 12043  1D08  0669               	xorwf	(scaleiA10kPot@input+2)^(0+256),w
 12044  1D09  1D03               	btfss	3,2
 12045  1D0A  2D10               	goto	l9212
 12046  1D0B  30FF               	movlw	255
 12047  1D0C  00E7               	movwf	?_scaleiA10kPot^(0+256)
 12048  1D0D  3000               	movlw	0
 12049  1D0E  00E8               	movwf	(?_scaleiA10kPot^(0+256)+1)
 12050  1D0F  0008               	return
 12051  1D10                     l9212:	
 12052                           
 12053                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 12054  1D10  3000               	movlw	0
 12055  1D11  0021               	movlb	1	; select bank1
 12056  1D12  00C1               	movwf	___ftadd@f1^(0+128)
 12057  1D13  3080               	movlw	128
 12058  1D14  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 12059  1D15  303F               	movlw	63
 12060  1D16  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 12061  1D17  0022               	movlb	2	; select bank2
 12062  1D18  0867               	movf	scaleiA10kPot@input^(0+256),w
 12063  1D19  0021               	movlb	1	; select bank1
 12064  1D1A  00D1               	movwf	___ftdiv@f1^(0+128)
 12065  1D1B  0022               	movlb	2	; select bank2
 12066  1D1C  0868               	movf	(scaleiA10kPot@input+1)^(0+256),w
 12067  1D1D  0021               	movlb	1	; select bank1
 12068  1D1E  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 12069  1D1F  0022               	movlb	2	; select bank2
 12070  1D20  0869               	movf	(scaleiA10kPot@input+2)^(0+256),w
 12071  1D21  0021               	movlb	1	; select bank1
 12072  1D22  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 12073  1D23  30C0               	movlw	192
 12074  1D24  00CE               	movwf	___ftdiv@f2^(0+128)
 12075  1D25  307F               	movlw	127
 12076  1D26  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 12077  1D27  3044               	movlw	68
 12078  1D28  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 12079  1D29  319C  244F  319C   	fcall	___ftdiv
 12080  1D2C  0021               	movlb	1	; select bank1
 12081  1D2D  084E               	movf	?___ftdiv^(0+128),w
 12082  1D2E  00BE               	movwf	___ftneg@f1^(0+128)
 12083  1D2F  084F               	movf	(?___ftdiv+1)^(0+128),w
 12084  1D30  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12085  1D31  0850               	movf	(?___ftdiv+2)^(0+128),w
 12086  1D32  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12087  1D33  31AC  2497  319C   	fcall	___ftneg
 12088  1D36  0021               	movlb	1	; select bank1
 12089  1D37  083E               	movf	?___ftneg^(0+128),w
 12090  1D38  00C4               	movwf	___ftadd@f2^(0+128)
 12091  1D39  083F               	movf	(?___ftneg+1)^(0+128),w
 12092  1D3A  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 12093  1D3B  0840               	movf	(?___ftneg+2)^(0+128),w
 12094  1D3C  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 12095  1D3D  319F  270A  319C   	fcall	___ftadd
 12096  1D40  0021               	movlb	1	; select bank1
 12097  1D41  0841               	movf	?___ftadd^(0+128),w
 12098  1D42  0023               	movlb	3	; select bank3
 12099  1D43  00EA               	movwf	_scaleiA10kPot$2910^(0+384)
 12100  1D44  0021               	movlb	1	; select bank1
 12101  1D45  0842               	movf	(?___ftadd+1)^(0+128),w
 12102  1D46  0023               	movlb	3	; select bank3
 12103  1D47  00EB               	movwf	(_scaleiA10kPot$2910+1)^(0+384)
 12104  1D48  0021               	movlb	1	; select bank1
 12105  1D49  0843               	movf	(?___ftadd+2)^(0+128),w
 12106  1D4A  0023               	movlb	3	; select bank3
 12107  1D4B  00EC               	movwf	(_scaleiA10kPot$2910+2)^(0+384)
 12108                           
 12109                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 12110  1D4C  306A               	movlw	106
 12111  1D4D  0022               	movlb	2	; select bank2
 12112  1D4E  00D8               	movwf	pow@y^(0+256)
 12113  1D4F  309C               	movlw	156
 12114  1D50  00D9               	movwf	(pow@y+1)^(0+256)
 12115  1D51  30BF               	movlw	191
 12116  1D52  00DA               	movwf	(pow@y+2)^(0+256)
 12117  1D53  0023               	movlb	3	; select bank3
 12118  1D54  086A               	movf	_scaleiA10kPot$2910^(0+384),w
 12119  1D55  0022               	movlb	2	; select bank2
 12120  1D56  00D5               	movwf	pow@x^(0+256)
 12121  1D57  0023               	movlb	3	; select bank3
 12122  1D58  086B               	movf	(_scaleiA10kPot$2910+1)^(0+384),w
 12123  1D59  0022               	movlb	2	; select bank2
 12124  1D5A  00D6               	movwf	(pow@x+1)^(0+256)
 12125  1D5B  0023               	movlb	3	; select bank3
 12126  1D5C  086C               	movf	(_scaleiA10kPot$2910+2)^(0+384),w
 12127  1D5D  0022               	movlb	2	; select bank2
 12128  1D5E  00D7               	movwf	(pow@x+2)^(0+256)
 12129  1D5F  3190  20F2  319C   	fcall	_pow
 12130  1D62  0022               	movlb	2	; select bank2
 12131  1D63  0855               	movf	?_pow^(0+256),w
 12132  1D64  0023               	movlb	3	; select bank3
 12133  1D65  00ED               	movwf	_scaleiA10kPot$2911^(0+384)
 12134  1D66  0022               	movlb	2	; select bank2
 12135  1D67  0856               	movf	(?_pow+1)^(0+256),w
 12136  1D68  0023               	movlb	3	; select bank3
 12137  1D69  00EE               	movwf	(_scaleiA10kPot$2911+1)^(0+384)
 12138  1D6A  0022               	movlb	2	; select bank2
 12139  1D6B  0857               	movf	(?_pow+2)^(0+256),w
 12140  1D6C  0023               	movlb	3	; select bank3
 12141  1D6D  00EF               	movwf	(_scaleiA10kPot$2911+2)^(0+384)
 12142                           
 12143                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 12144  1D6E  30E3               	movlw	227
 12145  1D6F  0021               	movlb	1	; select bank1
 12146  1D70  00AE               	movwf	___ftmul@f1^(0+128)
 12147  1D71  300B               	movlw	11
 12148  1D72  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12149  1D73  3041               	movlw	65
 12150  1D74  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12151  1D75  0023               	movlb	3	; select bank3
 12152  1D76  086D               	movf	_scaleiA10kPot$2911^(0+384),w
 12153  1D77  0021               	movlb	1	; select bank1
 12154  1D78  00B1               	movwf	___ftmul@f2^(0+128)
 12155  1D79  0023               	movlb	3	; select bank3
 12156  1D7A  086E               	movf	(_scaleiA10kPot$2911+1)^(0+384),w
 12157  1D7B  0021               	movlb	1	; select bank1
 12158  1D7C  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12159  1D7D  0023               	movlb	3	; select bank3
 12160  1D7E  086F               	movf	(_scaleiA10kPot$2911+2)^(0+384),w
 12161  1D7F  0021               	movlb	1	; select bank1
 12162  1D80  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12163  1D81  319E  2656  319C   	fcall	___ftmul
 12164  1D84  0021               	movlb	1	; select bank1
 12165  1D85  082E               	movf	?___ftmul^(0+128),w
 12166  1D86  0023               	movlb	3	; select bank3
 12167  1D87  00E7               	movwf	scaleiA10kPot@pwm^(0+384)
 12168  1D88  0021               	movlb	1	; select bank1
 12169  1D89  082F               	movf	(?___ftmul+1)^(0+128),w
 12170  1D8A  0023               	movlb	3	; select bank3
 12171  1D8B  00E8               	movwf	(scaleiA10kPot@pwm+1)^(0+384)
 12172  1D8C  0021               	movlb	1	; select bank1
 12173  1D8D  0830               	movf	(?___ftmul+2)^(0+128),w
 12174  1D8E  0023               	movlb	3	; select bank3
 12175  1D8F  00E9               	movwf	(scaleiA10kPot@pwm+2)^(0+384)
 12176                           
 12177                           ;user.c: 219: return (int)(pwm);
 12178  1D90  0867               	movf	scaleiA10kPot@pwm^(0+384),w
 12179  1D91  0022               	movlb	2	; select bank2
 12180  1D92  00A0               	movwf	___fttol@f1^(0+256)
 12181  1D93  0023               	movlb	3	; select bank3
 12182  1D94  0868               	movf	(scaleiA10kPot@pwm+1)^(0+384),w
 12183  1D95  0022               	movlb	2	; select bank2
 12184  1D96  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12185  1D97  0023               	movlb	3	; select bank3
 12186  1D98  0869               	movf	(scaleiA10kPot@pwm+2)^(0+384),w
 12187  1D99  0022               	movlb	2	; select bank2
 12188  1D9A  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12189  1D9B  3199  218A         	fcall	___fttol
 12190  1D9D  0022               	movlb	2	; select bank2
 12191  1D9E  0821               	movf	(?___fttol^(0+256)+1),w
 12192  1D9F  00E8               	movwf	(?_scaleiA10kPot+1)^(0+256)
 12193  1DA0  0820               	movf	?___fttol^(0+256),w
 12194  1DA1  00E7               	movwf	?_scaleiA10kPot^(0+256)
 12195  1DA2  0008               	return
 12196  1DA3                     __end_of_scaleiA10kPot:	
 12197                           
 12198                           	psect	text25
 12199  1B27                     __ptext25:	
 12200 ;; *************** function _scaleA10kPot *****************
 12201 ;; Defined at:
 12202 ;;		line 202 in file "user.c"
 12203 ;; Parameters:    Size  Location     Type
 12204 ;;  input           3   71[BANK2 ] int 
 12205 ;; Auto vars:     Size  Location     Type
 12206 ;;  pwm             3    0[BANK3 ] float 
 12207 ;; Return value:  Size  Location     Type
 12208 ;;                  2   71[BANK2 ] int 
 12209 ;; Registers used:
 12210 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12211 ;; Tracked objects:
 12212 ;;		On entry : 0/0
 12213 ;;		On exit  : 0/0
 12214 ;;		Unchanged: 0/0
 12215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12216 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12217 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12219 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12220 ;;Total ram usage:       12 bytes
 12221 ;; Hardware stack levels used:    1
 12222 ;; Hardware stack levels required when called:    8
 12223 ;; This function calls:
 12224 ;;		___ftdiv
 12225 ;;		___ftmul
 12226 ;;		___fttol
 12227 ;;		_pow
 12228 ;; This function is called by:
 12229 ;;		_main
 12230 ;; This function uses a non-reentrant model
 12231 ;;
 12232                           
 12233                           
 12234                           ;psect for function _scaleA10kPot
 12235  1B27                     _scaleA10kPot:	
 12236                           
 12237                           ;user.c: 204: if (input == 0.0) {return 255;}
 12238                           
 12239                           ;incstack = 0
 12240                           ; Regs used in _scaleA10kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12241  1B27  0022               	movlb	2	; select bank2
 12242  1B28  0869               	movf	(scaleA10kPot@input+2)^(0+256),w
 12243  1B29  0468               	iorwf	(scaleA10kPot@input+1)^(0+256),w
 12244  1B2A  0467               	iorwf	scaleA10kPot@input^(0+256),w
 12245  1B2B  1D03               	skipz
 12246  1B2C  2B32               	goto	l9184
 12247  1B2D  30FF               	movlw	255
 12248  1B2E  00E7               	movwf	?_scaleA10kPot^(0+256)
 12249  1B2F  3000               	movlw	0
 12250  1B30  00E8               	movwf	(?_scaleA10kPot^(0+256)+1)
 12251  1B31  0008               	return
 12252  1B32                     l9184:	
 12253                           
 12254                           ;user.c: 205: if (input == 1023.0) {return 0;}
 12255  1B32  30C0               	movlw	192
 12256  1B33  0667               	xorwf	scaleA10kPot@input^(0+256),w
 12257  1B34  307F               	movlw	127
 12258  1B35  1903               	skipnz
 12259  1B36  0668               	xorwf	(scaleA10kPot@input+1)^(0+256),w
 12260  1B37  3044               	movlw	68
 12261  1B38  1903               	skipnz
 12262  1B39  0669               	xorwf	(scaleA10kPot@input+2)^(0+256),w
 12263  1B3A  1D03               	btfss	3,2
 12264  1B3B  2B3F               	goto	l9190
 12265  1B3C  01E7               	clrf	?_scaleA10kPot^(0+256)
 12266  1B3D  01E8               	clrf	(?_scaleA10kPot+1)^(0+256)
 12267  1B3E  0008               	return
 12268  1B3F                     l9190:	
 12269                           
 12270                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 12271  1B3F  30C0               	movlw	192
 12272  1B40  0021               	movlb	1	; select bank1
 12273  1B41  00CE               	movwf	___ftdiv@f2^(0+128)
 12274  1B42  307F               	movlw	127
 12275  1B43  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 12276  1B44  3044               	movlw	68
 12277  1B45  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 12278  1B46  0022               	movlb	2	; select bank2
 12279  1B47  0867               	movf	scaleA10kPot@input^(0+256),w
 12280  1B48  0021               	movlb	1	; select bank1
 12281  1B49  00D1               	movwf	___ftdiv@f1^(0+128)
 12282  1B4A  0022               	movlb	2	; select bank2
 12283  1B4B  0868               	movf	(scaleA10kPot@input+1)^(0+256),w
 12284  1B4C  0021               	movlb	1	; select bank1
 12285  1B4D  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 12286  1B4E  0022               	movlb	2	; select bank2
 12287  1B4F  0869               	movf	(scaleA10kPot@input+2)^(0+256),w
 12288  1B50  0021               	movlb	1	; select bank1
 12289  1B51  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 12290  1B52  319C  244F  319B   	fcall	___ftdiv
 12291  1B55  0021               	movlb	1	; select bank1
 12292  1B56  084E               	movf	?___ftdiv^(0+128),w
 12293  1B57  0023               	movlb	3	; select bank3
 12294  1B58  00EA               	movwf	_scaleA10kPot$2908^(0+384)
 12295  1B59  0021               	movlb	1	; select bank1
 12296  1B5A  084F               	movf	(?___ftdiv+1)^(0+128),w
 12297  1B5B  0023               	movlb	3	; select bank3
 12298  1B5C  00EB               	movwf	(_scaleA10kPot$2908+1)^(0+384)
 12299  1B5D  0021               	movlb	1	; select bank1
 12300  1B5E  0850               	movf	(?___ftdiv+2)^(0+128),w
 12301  1B5F  0023               	movlb	3	; select bank3
 12302  1B60  00EC               	movwf	(_scaleA10kPot$2908+2)^(0+384)
 12303                           
 12304                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 12305  1B61  306A               	movlw	106
 12306  1B62  0022               	movlb	2	; select bank2
 12307  1B63  00D8               	movwf	pow@y^(0+256)
 12308  1B64  309C               	movlw	156
 12309  1B65  00D9               	movwf	(pow@y+1)^(0+256)
 12310  1B66  30BF               	movlw	191
 12311  1B67  00DA               	movwf	(pow@y+2)^(0+256)
 12312  1B68  0023               	movlb	3	; select bank3
 12313  1B69  086A               	movf	_scaleA10kPot$2908^(0+384),w
 12314  1B6A  0022               	movlb	2	; select bank2
 12315  1B6B  00D5               	movwf	pow@x^(0+256)
 12316  1B6C  0023               	movlb	3	; select bank3
 12317  1B6D  086B               	movf	(_scaleA10kPot$2908+1)^(0+384),w
 12318  1B6E  0022               	movlb	2	; select bank2
 12319  1B6F  00D6               	movwf	(pow@x+1)^(0+256)
 12320  1B70  0023               	movlb	3	; select bank3
 12321  1B71  086C               	movf	(_scaleA10kPot$2908+2)^(0+384),w
 12322  1B72  0022               	movlb	2	; select bank2
 12323  1B73  00D7               	movwf	(pow@x+2)^(0+256)
 12324  1B74  3190  20F2  319B   	fcall	_pow
 12325  1B77  0022               	movlb	2	; select bank2
 12326  1B78  0855               	movf	?_pow^(0+256),w
 12327  1B79  0023               	movlb	3	; select bank3
 12328  1B7A  00ED               	movwf	_scaleA10kPot$2909^(0+384)
 12329  1B7B  0022               	movlb	2	; select bank2
 12330  1B7C  0856               	movf	(?_pow+1)^(0+256),w
 12331  1B7D  0023               	movlb	3	; select bank3
 12332  1B7E  00EE               	movwf	(_scaleA10kPot$2909+1)^(0+384)
 12333  1B7F  0022               	movlb	2	; select bank2
 12334  1B80  0857               	movf	(?_pow+2)^(0+256),w
 12335  1B81  0023               	movlb	3	; select bank3
 12336  1B82  00EF               	movwf	(_scaleA10kPot$2909+2)^(0+384)
 12337                           
 12338                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 12339  1B83  30E3               	movlw	227
 12340  1B84  0021               	movlb	1	; select bank1
 12341  1B85  00AE               	movwf	___ftmul@f1^(0+128)
 12342  1B86  300B               	movlw	11
 12343  1B87  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12344  1B88  3041               	movlw	65
 12345  1B89  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12346  1B8A  0023               	movlb	3	; select bank3
 12347  1B8B  086D               	movf	_scaleA10kPot$2909^(0+384),w
 12348  1B8C  0021               	movlb	1	; select bank1
 12349  1B8D  00B1               	movwf	___ftmul@f2^(0+128)
 12350  1B8E  0023               	movlb	3	; select bank3
 12351  1B8F  086E               	movf	(_scaleA10kPot$2909+1)^(0+384),w
 12352  1B90  0021               	movlb	1	; select bank1
 12353  1B91  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12354  1B92  0023               	movlb	3	; select bank3
 12355  1B93  086F               	movf	(_scaleA10kPot$2909+2)^(0+384),w
 12356  1B94  0021               	movlb	1	; select bank1
 12357  1B95  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12358  1B96  319E  2656  319B   	fcall	___ftmul
 12359  1B99  0021               	movlb	1	; select bank1
 12360  1B9A  082E               	movf	?___ftmul^(0+128),w
 12361  1B9B  0023               	movlb	3	; select bank3
 12362  1B9C  00E7               	movwf	scaleA10kPot@pwm^(0+384)
 12363  1B9D  0021               	movlb	1	; select bank1
 12364  1B9E  082F               	movf	(?___ftmul+1)^(0+128),w
 12365  1B9F  0023               	movlb	3	; select bank3
 12366  1BA0  00E8               	movwf	(scaleA10kPot@pwm+1)^(0+384)
 12367  1BA1  0021               	movlb	1	; select bank1
 12368  1BA2  0830               	movf	(?___ftmul+2)^(0+128),w
 12369  1BA3  0023               	movlb	3	; select bank3
 12370  1BA4  00E9               	movwf	(scaleA10kPot@pwm+2)^(0+384)
 12371                           
 12372                           ;user.c: 207: return (int)(pwm);
 12373  1BA5  0867               	movf	scaleA10kPot@pwm^(0+384),w
 12374  1BA6  0022               	movlb	2	; select bank2
 12375  1BA7  00A0               	movwf	___fttol@f1^(0+256)
 12376  1BA8  0023               	movlb	3	; select bank3
 12377  1BA9  0868               	movf	(scaleA10kPot@pwm+1)^(0+384),w
 12378  1BAA  0022               	movlb	2	; select bank2
 12379  1BAB  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12380  1BAC  0023               	movlb	3	; select bank3
 12381  1BAD  0869               	movf	(scaleA10kPot@pwm+2)^(0+384),w
 12382  1BAE  0022               	movlb	2	; select bank2
 12383  1BAF  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12384  1BB0  3199  218A         	fcall	___fttol
 12385  1BB2  0022               	movlb	2	; select bank2
 12386  1BB3  0821               	movf	(?___fttol^(0+256)+1),w
 12387  1BB4  00E8               	movwf	(?_scaleA10kPot+1)^(0+256)
 12388  1BB5  0820               	movf	?___fttol^(0+256),w
 12389  1BB6  00E7               	movwf	?_scaleA10kPot^(0+256)
 12390  1BB7  0008               	return
 12391  1BB8                     __end_of_scaleA10kPot:	
 12392                           
 12393                           	psect	text26
 12394  1905                     __ptext26:	
 12395 ;; *************** function _scaleA100kPot *****************
 12396 ;; Defined at:
 12397 ;;		line 188 in file "user.c"
 12398 ;; Parameters:    Size  Location     Type
 12399 ;;  input           3   71[BANK2 ] int 
 12400 ;; Auto vars:     Size  Location     Type
 12401 ;;  pwm             3    0[BANK3 ] float 
 12402 ;; Return value:  Size  Location     Type
 12403 ;;                  2   71[BANK2 ] int 
 12404 ;; Registers used:
 12405 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12406 ;; Tracked objects:
 12407 ;;		On entry : 0/0
 12408 ;;		On exit  : 0/0
 12409 ;;		Unchanged: 0/0
 12410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12411 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12412 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12414 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12415 ;;Total ram usage:       12 bytes
 12416 ;; Hardware stack levels used:    1
 12417 ;; Hardware stack levels required when called:    8
 12418 ;; This function calls:
 12419 ;;		___ftdiv
 12420 ;;		___ftmul
 12421 ;;		___fttol
 12422 ;;		_pow
 12423 ;; This function is called by:
 12424 ;;		_main
 12425 ;; This function uses a non-reentrant model
 12426 ;;
 12427                           
 12428                           
 12429                           ;psect for function _scaleA100kPot
 12430  1905                     _scaleA100kPot:	
 12431                           
 12432                           ;user.c: 190: if (input == 0.0) {input = 1.0;}
 12433                           
 12434                           ;incstack = 0
 12435                           ; Regs used in _scaleA100kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12436  1905  0022               	movlb	2	; select bank2
 12437  1906  0869               	movf	(scaleA100kPot@input+2)^(0+256),w
 12438  1907  0468               	iorwf	(scaleA100kPot@input+1)^(0+256),w
 12439  1908  0467               	iorwf	scaleA100kPot@input^(0+256),w
 12440  1909  1D03               	skipz
 12441  190A  2911               	goto	l9226
 12442  190B  3000               	movlw	0
 12443  190C  00E7               	movwf	scaleA100kPot@input^(0+256)
 12444  190D  3080               	movlw	128
 12445  190E  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
 12446  190F  303F               	movlw	63
 12447  1910  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
 12448  1911                     l9226:	
 12449                           
 12450                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 12451  1911  30C0               	movlw	192
 12452  1912  0021               	movlb	1	; select bank1
 12453  1913  00CE               	movwf	___ftdiv@f2^(0+128)
 12454  1914  307F               	movlw	127
 12455  1915  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 12456  1916  3044               	movlw	68
 12457  1917  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 12458  1918  0022               	movlb	2	; select bank2
 12459  1919  0867               	movf	scaleA100kPot@input^(0+256),w
 12460  191A  0021               	movlb	1	; select bank1
 12461  191B  00D1               	movwf	___ftdiv@f1^(0+128)
 12462  191C  0022               	movlb	2	; select bank2
 12463  191D  0868               	movf	(scaleA100kPot@input+1)^(0+256),w
 12464  191E  0021               	movlb	1	; select bank1
 12465  191F  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 12466  1920  0022               	movlb	2	; select bank2
 12467  1921  0869               	movf	(scaleA100kPot@input+2)^(0+256),w
 12468  1922  0021               	movlb	1	; select bank1
 12469  1923  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 12470  1924  319C  244F  3199   	fcall	___ftdiv
 12471  1927  0021               	movlb	1	; select bank1
 12472  1928  084E               	movf	?___ftdiv^(0+128),w
 12473  1929  0023               	movlb	3	; select bank3
 12474  192A  00EA               	movwf	_scaleA100kPot$2904^(0+384)
 12475  192B  0021               	movlb	1	; select bank1
 12476  192C  084F               	movf	(?___ftdiv+1)^(0+128),w
 12477  192D  0023               	movlb	3	; select bank3
 12478  192E  00EB               	movwf	(_scaleA100kPot$2904+1)^(0+384)
 12479  192F  0021               	movlb	1	; select bank1
 12480  1930  0850               	movf	(?___ftdiv+2)^(0+128),w
 12481  1931  0023               	movlb	3	; select bank3
 12482  1932  00EC               	movwf	(_scaleA100kPot$2904+2)^(0+384)
 12483                           
 12484                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 12485  1933  3056               	movlw	86
 12486  1934  0022               	movlb	2	; select bank2
 12487  1935  00D8               	movwf	pow@y^(0+256)
 12488  1936  308E               	movlw	142
 12489  1937  00D9               	movwf	(pow@y+1)^(0+256)
 12490  1938  30BF               	movlw	191
 12491  1939  00DA               	movwf	(pow@y+2)^(0+256)
 12492  193A  0023               	movlb	3	; select bank3
 12493  193B  086A               	movf	_scaleA100kPot$2904^(0+384),w
 12494  193C  0022               	movlb	2	; select bank2
 12495  193D  00D5               	movwf	pow@x^(0+256)
 12496  193E  0023               	movlb	3	; select bank3
 12497  193F  086B               	movf	(_scaleA100kPot$2904+1)^(0+384),w
 12498  1940  0022               	movlb	2	; select bank2
 12499  1941  00D6               	movwf	(pow@x+1)^(0+256)
 12500  1942  0023               	movlb	3	; select bank3
 12501  1943  086C               	movf	(_scaleA100kPot$2904+2)^(0+384),w
 12502  1944  0022               	movlb	2	; select bank2
 12503  1945  00D7               	movwf	(pow@x+2)^(0+256)
 12504  1946  3190  20F2  3199   	fcall	_pow
 12505  1949  0022               	movlb	2	; select bank2
 12506  194A  0855               	movf	?_pow^(0+256),w
 12507  194B  0023               	movlb	3	; select bank3
 12508  194C  00ED               	movwf	_scaleA100kPot$2905^(0+384)
 12509  194D  0022               	movlb	2	; select bank2
 12510  194E  0856               	movf	(?_pow+1)^(0+256),w
 12511  194F  0023               	movlb	3	; select bank3
 12512  1950  00EE               	movwf	(_scaleA100kPot$2905+1)^(0+384)
 12513  1951  0022               	movlb	2	; select bank2
 12514  1952  0857               	movf	(?_pow+2)^(0+256),w
 12515  1953  0023               	movlb	3	; select bank3
 12516  1954  00EF               	movwf	(_scaleA100kPot$2905+2)^(0+384)
 12517                           
 12518                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 12519  1955  309F               	movlw	159
 12520  1956  0021               	movlb	1	; select bank1
 12521  1957  00AE               	movwf	___ftmul@f1^(0+128)
 12522  1958  3068               	movlw	104
 12523  1959  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12524  195A  3040               	movlw	64
 12525  195B  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12526  195C  0023               	movlb	3	; select bank3
 12527  195D  086D               	movf	_scaleA100kPot$2905^(0+384),w
 12528  195E  0021               	movlb	1	; select bank1
 12529  195F  00B1               	movwf	___ftmul@f2^(0+128)
 12530  1960  0023               	movlb	3	; select bank3
 12531  1961  086E               	movf	(_scaleA100kPot$2905+1)^(0+384),w
 12532  1962  0021               	movlb	1	; select bank1
 12533  1963  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12534  1964  0023               	movlb	3	; select bank3
 12535  1965  086F               	movf	(_scaleA100kPot$2905+2)^(0+384),w
 12536  1966  0021               	movlb	1	; select bank1
 12537  1967  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12538  1968  319E  2656  3199   	fcall	___ftmul
 12539  196B  0021               	movlb	1	; select bank1
 12540  196C  082E               	movf	?___ftmul^(0+128),w
 12541  196D  0023               	movlb	3	; select bank3
 12542  196E  00E7               	movwf	scaleA100kPot@pwm^(0+384)
 12543  196F  0021               	movlb	1	; select bank1
 12544  1970  082F               	movf	(?___ftmul+1)^(0+128),w
 12545  1971  0023               	movlb	3	; select bank3
 12546  1972  00E8               	movwf	(scaleA100kPot@pwm+1)^(0+384)
 12547  1973  0021               	movlb	1	; select bank1
 12548  1974  0830               	movf	(?___ftmul+2)^(0+128),w
 12549  1975  0023               	movlb	3	; select bank3
 12550  1976  00E9               	movwf	(scaleA100kPot@pwm+2)^(0+384)
 12551                           
 12552                           ;user.c: 192: return (int)(pwm);
 12553  1977  0867               	movf	scaleA100kPot@pwm^(0+384),w
 12554  1978  0022               	movlb	2	; select bank2
 12555  1979  00A0               	movwf	___fttol@f1^(0+256)
 12556  197A  0023               	movlb	3	; select bank3
 12557  197B  0868               	movf	(scaleA100kPot@pwm+1)^(0+384),w
 12558  197C  0022               	movlb	2	; select bank2
 12559  197D  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12560  197E  0023               	movlb	3	; select bank3
 12561  197F  0869               	movf	(scaleA100kPot@pwm+2)^(0+384),w
 12562  1980  0022               	movlb	2	; select bank2
 12563  1981  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12564  1982  3199  218A         	fcall	___fttol
 12565  1984  0022               	movlb	2	; select bank2
 12566  1985  0821               	movf	(?___fttol^(0+256)+1),w
 12567  1986  00E8               	movwf	(?_scaleA100kPot+1)^(0+256)
 12568  1987  0820               	movf	?___fttol^(0+256),w
 12569  1988  00E7               	movwf	?_scaleA100kPot^(0+256)
 12570  1989  0008               	return
 12571  198A                     __end_of_scaleA100kPot:	
 12572                           
 12573                           	psect	text27
 12574  10F2                     __ptext27:	
 12575 ;; *************** function _pow *****************
 12576 ;; Defined at:
 12577 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\pow.c"
 12578 ;; Parameters:    Size  Location     Type
 12579 ;;  x               3   53[BANK2 ] int 
 12580 ;;  y               3   56[BANK2 ] int 
 12581 ;; Auto vars:     Size  Location     Type
 12582 ;;  yi              4   67[BANK2 ] unsigned long 
 12583 ;;  sign            1   66[BANK2 ] unsigned char 
 12584 ;; Return value:  Size  Location     Type
 12585 ;;                  3   53[BANK2 ] unsigned char 
 12586 ;; Registers used:
 12587 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12588 ;; Tracked objects:
 12589 ;;		On entry : 0/0
 12590 ;;		On exit  : 0/0
 12591 ;;		Unchanged: 0/0
 12592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12593 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12594 ;;      Locals:         0       0       0      11       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12595 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12596 ;;      Totals:         0       0       0      18       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12597 ;;Total ram usage:       18 bytes
 12598 ;; Hardware stack levels used:    1
 12599 ;; Hardware stack levels required when called:    7
 12600 ;; This function calls:
 12601 ;;		___ftge
 12602 ;;		___ftmul
 12603 ;;		___ftneg
 12604 ;;		___fttol
 12605 ;;		___lltoft
 12606 ;;		_exp
 12607 ;;		_log
 12608 ;; This function is called by:
 12609 ;;		_scaleA100kPot
 12610 ;;		_scaleA10kPot
 12611 ;;		_scaleiA10kPot
 12612 ;;		_scaleiA100kPot
 12613 ;; This function uses a non-reentrant model
 12614 ;;
 12615                           
 12616                           
 12617                           ;psect for function _pow
 12618  10F2                     _pow:	
 12619                           
 12620                           ;incstack = 0
 12621                           ; Regs used in _pow: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12622  10F2  0022               	movlb	2	; select bank2
 12623  10F3  01E2               	clrf	pow@sign^(0+256)
 12624  10F4  0857               	movf	(pow@x+2)^(0+256),w
 12625  10F5  0456               	iorwf	(pow@x+1)^(0+256),w
 12626  10F6  0455               	iorwf	pow@x^(0+256),w
 12627  10F7  1D03               	skipz
 12628  10F8  291E               	goto	l8514
 12629  10F9  3000               	movlw	0
 12630  10FA  0021               	movlb	1	; select bank1
 12631  10FB  00A0               	movwf	___ftge@ff1^(0+128)
 12632  10FC  3000               	movlw	0
 12633  10FD  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12634  10FE  3000               	movlw	0
 12635  10FF  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12636  1100  0022               	movlb	2	; select bank2
 12637  1101  0858               	movf	pow@y^(0+256),w
 12638  1102  0021               	movlb	1	; select bank1
 12639  1103  00A3               	movwf	___ftge@ff2^(0+128)
 12640  1104  0022               	movlb	2	; select bank2
 12641  1105  0859               	movf	(pow@y+1)^(0+256),w
 12642  1106  0021               	movlb	1	; select bank1
 12643  1107  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12644  1108  0022               	movlb	2	; select bank2
 12645  1109  085A               	movf	(pow@y+2)^(0+256),w
 12646  110A  0021               	movlb	1	; select bank1
 12647  110B  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12648  110C  31A0  20AA  3190   	fcall	___ftge
 12649  110F  1C03               	btfss	3,0
 12650  1110  2916               	goto	l2372
 12651  1111  3021               	movlw	33
 12652  1112  0024               	movlb	4	; select bank4
 12653  1113  00D1               	movwf	_errno^(0+512)
 12654  1114  3000               	movlw	0
 12655  1115  00D2               	movwf	(_errno^(0+512)+1)
 12656  1116                     l2372:	
 12657  1116  3000               	movlw	0
 12658  1117  0022               	movlb	2	; select bank2
 12659  1118  00D5               	movwf	?_pow^(0+256)
 12660  1119  3000               	movlw	0
 12661  111A  00D6               	movwf	(?_pow+1)^(0+256)
 12662  111B  3000               	movlw	0
 12663  111C  00D7               	movwf	(?_pow+2)^(0+256)
 12664  111D  0008               	return
 12665  111E                     l8514:	
 12666  111E  085A               	movf	(pow@y+2)^(0+256),w
 12667  111F  0459               	iorwf	(pow@y+1)^(0+256),w
 12668  1120  0458               	iorwf	pow@y^(0+256),w
 12669  1121  1D03               	skipz
 12670  1122  292A               	goto	l8520
 12671  1123  3000               	movlw	0
 12672  1124  00D5               	movwf	?_pow^(0+256)
 12673  1125  3080               	movlw	128
 12674  1126  00D6               	movwf	(?_pow+1)^(0+256)
 12675  1127  303F               	movlw	63
 12676  1128  00D7               	movwf	(?_pow+2)^(0+256)
 12677  1129  0008               	return
 12678  112A                     l8520:	
 12679  112A  0855               	movf	pow@x^(0+256),w
 12680  112B  0021               	movlb	1	; select bank1
 12681  112C  00A0               	movwf	___ftge@ff1^(0+128)
 12682  112D  0022               	movlb	2	; select bank2
 12683  112E  0856               	movf	(pow@x+1)^(0+256),w
 12684  112F  0021               	movlb	1	; select bank1
 12685  1130  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12686  1131  0022               	movlb	2	; select bank2
 12687  1132  0857               	movf	(pow@x+2)^(0+256),w
 12688  1133  0021               	movlb	1	; select bank1
 12689  1134  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12690  1135  3000               	movlw	0
 12691  1136  00A3               	movwf	___ftge@ff2^(0+128)
 12692  1137  3000               	movlw	0
 12693  1138  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12694  1139  3000               	movlw	0
 12695  113A  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12696  113B  31A0  20AA  3190   	fcall	___ftge
 12697  113E  1803               	btfsc	3,0
 12698  113F  29A4               	goto	l8532
 12699  1140  0022               	movlb	2	; select bank2
 12700  1141  0858               	movf	pow@y^(0+256),w
 12701  1142  00A0               	movwf	___fttol@f1^(0+256)
 12702  1143  0859               	movf	(pow@y+1)^(0+256),w
 12703  1144  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12704  1145  085A               	movf	(pow@y+2)^(0+256),w
 12705  1146  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12706  1147  3199  218A  3190   	fcall	___fttol
 12707  114A  0022               	movlb	2	; select bank2
 12708  114B  0823               	movf	(?___fttol+3)^(0+256),w
 12709  114C  00E6               	movwf	(pow@yi+3)^(0+256)
 12710  114D  0822               	movf	(?___fttol+2)^(0+256),w
 12711  114E  00E5               	movwf	(pow@yi+2)^(0+256)
 12712  114F  0821               	movf	(?___fttol+1)^(0+256),w
 12713  1150  00E4               	movwf	(pow@yi+1)^(0+256)
 12714  1151  0820               	movf	?___fttol^(0+256),w
 12715  1152  00E3               	movwf	pow@yi^(0+256)
 12716  1153  0866               	movf	(pow@yi+3)^(0+256),w
 12717  1154  0021               	movlb	1	; select bank1
 12718  1155  00AB               	movwf	(___lltoft@c+3)^(0+128)
 12719  1156  0022               	movlb	2	; select bank2
 12720  1157  0865               	movf	(pow@yi+2)^(0+256),w
 12721  1158  0021               	movlb	1	; select bank1
 12722  1159  00AA               	movwf	(___lltoft@c+2)^(0+128)
 12723  115A  0022               	movlb	2	; select bank2
 12724  115B  0864               	movf	(pow@yi+1)^(0+256),w
 12725  115C  0021               	movlb	1	; select bank1
 12726  115D  00A9               	movwf	(___lltoft@c+1)^(0+128)
 12727  115E  0022               	movlb	2	; select bank2
 12728  115F  0863               	movf	pow@yi^(0+256),w
 12729  1160  0021               	movlb	1	; select bank1
 12730  1161  00A8               	movwf	___lltoft@c^(0+128)
 12731  1162  31AE  264F  3190   	fcall	___lltoft
 12732  1165  0022               	movlb	2	; select bank2
 12733  1166  085A               	movf	(pow@y+2)^(0+256),w
 12734  1167  0021               	movlb	1	; select bank1
 12735  1168  062A               	xorwf	(?___lltoft+2)^(0+128),w
 12736  1169  1D03               	skipz
 12737  116A  2975               	goto	u9045
 12738  116B  0022               	movlb	2	; select bank2
 12739  116C  0859               	movf	(pow@y+1)^(0+256),w
 12740  116D  0021               	movlb	1	; select bank1
 12741  116E  0629               	xorwf	(?___lltoft+1)^(0+128),w
 12742  116F  1D03               	skipz
 12743  1170  2975               	goto	u9045
 12744  1171  0022               	movlb	2	; select bank2
 12745  1172  0858               	movf	pow@y^(0+256),w
 12746  1173  0021               	movlb	1	; select bank1
 12747  1174  0628               	xorwf	?___lltoft^(0+128),w
 12748  1175                     u9045:	
 12749  1175  1903               	skipnz
 12750  1176  2984               	goto	l8528
 12751  1177  3021               	movlw	33
 12752  1178  0024               	movlb	4	; select bank4
 12753  1179  00D1               	movwf	_errno^(0+512)
 12754  117A  3000               	movlw	0
 12755  117B  00D2               	movwf	(_errno^(0+512)+1)
 12756  117C  3000               	movlw	0
 12757  117D  0022               	movlb	2	; select bank2
 12758  117E  00D5               	movwf	?_pow^(0+256)
 12759  117F  3000               	movlw	0
 12760  1180  00D6               	movwf	(?_pow+1)^(0+256)
 12761  1181  3000               	movlw	0
 12762  1182  00D7               	movwf	(?_pow+2)^(0+256)
 12763  1183  0008               	return
 12764  1184                     l8528:	
 12765  1184  0022               	movlb	2	; select bank2
 12766  1185  0863               	movf	pow@yi^(0+256),w
 12767  1186  3901               	andlw	1
 12768  1187  00DB               	movwf	??_pow^(0+256)
 12769  1188  085B               	movf	??_pow^(0+256),w
 12770  1189  00E2               	movwf	pow@sign^(0+256)
 12771  118A  0855               	movf	pow@x^(0+256),w
 12772  118B  0021               	movlb	1	; select bank1
 12773  118C  00BE               	movwf	___ftneg@f1^(0+128)
 12774  118D  0022               	movlb	2	; select bank2
 12775  118E  0856               	movf	(pow@x+1)^(0+256),w
 12776  118F  0021               	movlb	1	; select bank1
 12777  1190  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12778  1191  0022               	movlb	2	; select bank2
 12779  1192  0857               	movf	(pow@x+2)^(0+256),w
 12780  1193  0021               	movlb	1	; select bank1
 12781  1194  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12782  1195  31AC  2497  3190   	fcall	___ftneg
 12783  1198  0021               	movlb	1	; select bank1
 12784  1199  083E               	movf	?___ftneg^(0+128),w
 12785  119A  0022               	movlb	2	; select bank2
 12786  119B  00D5               	movwf	pow@x^(0+256)
 12787  119C  0021               	movlb	1	; select bank1
 12788  119D  083F               	movf	(?___ftneg+1)^(0+128),w
 12789  119E  0022               	movlb	2	; select bank2
 12790  119F  00D6               	movwf	(pow@x+1)^(0+256)
 12791  11A0  0021               	movlb	1	; select bank1
 12792  11A1  0840               	movf	(?___ftneg+2)^(0+128),w
 12793  11A2  0022               	movlb	2	; select bank2
 12794  11A3  00D7               	movwf	(pow@x+2)^(0+256)
 12795  11A4                     l8532:	
 12796  11A4  0022               	movlb	2	; select bank2
 12797  11A5  0855               	movf	pow@x^(0+256),w
 12798  11A6  00BE               	movwf	log@x^(0+256)
 12799  11A7  0856               	movf	(pow@x+1)^(0+256),w
 12800  11A8  00BF               	movwf	(log@x+1)^(0+256)
 12801  11A9  0857               	movf	(pow@x+2)^(0+256),w
 12802  11AA  00C0               	movwf	(log@x+2)^(0+256)
 12803  11AB  3190  2021  3190   	fcall	_log
 12804  11AE  0022               	movlb	2	; select bank2
 12805  11AF  083E               	movf	?_log^(0+256),w
 12806  11B0  00DC               	movwf	_pow$2917^(0+256)
 12807  11B1  083F               	movf	(?_log+1)^(0+256),w
 12808  11B2  00DD               	movwf	(_pow$2917+1)^(0+256)
 12809  11B3  0840               	movf	(?_log+2)^(0+256),w
 12810  11B4  00DE               	movwf	(_pow$2917+2)^(0+256)
 12811  11B5  0858               	movf	pow@y^(0+256),w
 12812  11B6  0021               	movlb	1	; select bank1
 12813  11B7  00AE               	movwf	___ftmul@f1^(0+128)
 12814  11B8  0022               	movlb	2	; select bank2
 12815  11B9  0859               	movf	(pow@y+1)^(0+256),w
 12816  11BA  0021               	movlb	1	; select bank1
 12817  11BB  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12818  11BC  0022               	movlb	2	; select bank2
 12819  11BD  085A               	movf	(pow@y+2)^(0+256),w
 12820  11BE  0021               	movlb	1	; select bank1
 12821  11BF  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12822  11C0  0022               	movlb	2	; select bank2
 12823  11C1  085C               	movf	_pow$2917^(0+256),w
 12824  11C2  0021               	movlb	1	; select bank1
 12825  11C3  00B1               	movwf	___ftmul@f2^(0+128)
 12826  11C4  0022               	movlb	2	; select bank2
 12827  11C5  085D               	movf	(_pow$2917+1)^(0+256),w
 12828  11C6  0021               	movlb	1	; select bank1
 12829  11C7  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12830  11C8  0022               	movlb	2	; select bank2
 12831  11C9  085E               	movf	(_pow$2917+2)^(0+256),w
 12832  11CA  0021               	movlb	1	; select bank1
 12833  11CB  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12834  11CC  319E  2656  3190   	fcall	___ftmul
 12835  11CF  0021               	movlb	1	; select bank1
 12836  11D0  082E               	movf	?___ftmul^(0+128),w
 12837  11D1  0022               	movlb	2	; select bank2
 12838  11D2  00DF               	movwf	_pow$2918^(0+256)
 12839  11D3  0021               	movlb	1	; select bank1
 12840  11D4  082F               	movf	(?___ftmul+1)^(0+128),w
 12841  11D5  0022               	movlb	2	; select bank2
 12842  11D6  00E0               	movwf	(_pow$2918+1)^(0+256)
 12843  11D7  0021               	movlb	1	; select bank1
 12844  11D8  0830               	movf	(?___ftmul+2)^(0+128),w
 12845  11D9  0022               	movlb	2	; select bank2
 12846  11DA  00E1               	movwf	(_pow$2918+2)^(0+256)
 12847  11DB  085F               	movf	_pow$2918^(0+256),w
 12848  11DC  00C8               	movwf	exp@x^(0+256)
 12849  11DD  0860               	movf	(_pow$2918+1)^(0+256),w
 12850  11DE  00C9               	movwf	(exp@x+1)^(0+256)
 12851  11DF  0861               	movf	(_pow$2918+2)^(0+256),w
 12852  11E0  00CA               	movwf	(exp@x+2)^(0+256)
 12853  11E1  3193  232C  3190   	fcall	_exp
 12854  11E4  0022               	movlb	2	; select bank2
 12855  11E5  0848               	movf	?_exp^(0+256),w
 12856  11E6  00D5               	movwf	pow@x^(0+256)
 12857  11E7  0849               	movf	(?_exp+1)^(0+256),w
 12858  11E8  00D6               	movwf	(pow@x+1)^(0+256)
 12859  11E9  084A               	movf	(?_exp+2)^(0+256),w
 12860  11EA  00D7               	movwf	(pow@x+2)^(0+256)
 12861  11EB  0862               	movf	pow@sign^(0+256),w
 12862  11EC  1903               	btfsc	3,2
 12863  11ED  0008               	return
 12864  11EE  0855               	movf	pow@x^(0+256),w
 12865  11EF  0021               	movlb	1	; select bank1
 12866  11F0  00BE               	movwf	___ftneg@f1^(0+128)
 12867  11F1  0022               	movlb	2	; select bank2
 12868  11F2  0856               	movf	(pow@x+1)^(0+256),w
 12869  11F3  0021               	movlb	1	; select bank1
 12870  11F4  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12871  11F5  0022               	movlb	2	; select bank2
 12872  11F6  0857               	movf	(pow@x+2)^(0+256),w
 12873  11F7  0021               	movlb	1	; select bank1
 12874  11F8  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12875  11F9  31AC  2497         	fcall	___ftneg
 12876  11FB  0021               	movlb	1	; select bank1
 12877  11FC  083E               	movf	?___ftneg^(0+128),w
 12878  11FD  0022               	movlb	2	; select bank2
 12879  11FE  00D5               	movwf	?_pow^(0+256)
 12880  11FF  0021               	movlb	1	; select bank1
 12881  1200  083F               	movf	(?___ftneg+1)^(0+128),w
 12882  1201  0022               	movlb	2	; select bank2
 12883  1202  00D6               	movwf	(?_pow+1)^(0+256)
 12884  1203  0021               	movlb	1	; select bank1
 12885  1204  0840               	movf	(?___ftneg+2)^(0+128),w
 12886  1205  0022               	movlb	2	; select bank2
 12887  1206  00D7               	movwf	(?_pow+2)^(0+256)
 12888  1207  0008               	return
 12889  1208                     __end_of_pow:	
 12890                           
 12891                           	psect	text28
 12892  1021                     __ptext28:	
 12893 ;; *************** function _log *****************
 12894 ;; Defined at:
 12895 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\log.c"
 12896 ;; Parameters:    Size  Location     Type
 12897 ;;  x               3   30[BANK2 ] unsigned char 
 12898 ;; Auto vars:     Size  Location     Type
 12899 ;;  exponent        2   34[BANK2 ] int 
 12900 ;; Return value:  Size  Location     Type
 12901 ;;                  3   30[BANK2 ] int 
 12902 ;; Registers used:
 12903 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12904 ;; Tracked objects:
 12905 ;;		On entry : 0/0
 12906 ;;		On exit  : 0/0
 12907 ;;		Unchanged: 0/0
 12908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12909 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12910 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12911 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12912 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12913 ;;Total ram usage:        6 bytes
 12914 ;; Hardware stack levels used:    1
 12915 ;; Hardware stack levels required when called:    6
 12916 ;; This function calls:
 12917 ;;		___awtoft
 12918 ;;		___ftadd
 12919 ;;		___ftge
 12920 ;;		___ftmul
 12921 ;;		_eval_poly
 12922 ;;		_frexp
 12923 ;; This function is called by:
 12924 ;;		_pow
 12925 ;; This function uses a non-reentrant model
 12926 ;;
 12927                           
 12928                           
 12929                           ;psect for function _log
 12930  1021                     _log:	
 12931                           
 12932                           ;incstack = 0
 12933                           ; Regs used in _log: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12934  1021  0022               	movlb	2	; select bank2
 12935  1022  083E               	movf	log@x^(0+256),w
 12936  1023  0021               	movlb	1	; select bank1
 12937  1024  00A0               	movwf	___ftge@ff1^(0+128)
 12938  1025  0022               	movlb	2	; select bank2
 12939  1026  083F               	movf	(log@x+1)^(0+256),w
 12940  1027  0021               	movlb	1	; select bank1
 12941  1028  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12942  1029  0022               	movlb	2	; select bank2
 12943  102A  0840               	movf	(log@x+2)^(0+256),w
 12944  102B  0021               	movlb	1	; select bank1
 12945  102C  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12946  102D  3000               	movlw	0
 12947  102E  00A3               	movwf	___ftge@ff2^(0+128)
 12948  102F  3000               	movlw	0
 12949  1030  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12950  1031  3000               	movlw	0
 12951  1032  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12952  1033  31A0  20AA  3190   	fcall	___ftge
 12953  1036  1803               	btfsc	3,0
 12954  1037  2845               	goto	l8386
 12955  1038  3021               	movlw	33
 12956  1039  0024               	movlb	4	; select bank4
 12957  103A  00D1               	movwf	_errno^(0+512)
 12958  103B  3000               	movlw	0
 12959  103C  00D2               	movwf	(_errno^(0+512)+1)
 12960  103D  3000               	movlw	0
 12961  103E  0022               	movlb	2	; select bank2
 12962  103F  00BE               	movwf	?_log^(0+256)
 12963  1040  3000               	movlw	0
 12964  1041  00BF               	movwf	(?_log+1)^(0+256)
 12965  1042  3000               	movlw	0
 12966  1043  00C0               	movwf	(?_log+2)^(0+256)
 12967  1044  0008               	return
 12968  1045                     l8386:	
 12969  1045  0022               	movlb	2	; select bank2
 12970  1046  0840               	movf	(log@x+2)^(0+256),w
 12971  1047  043F               	iorwf	(log@x+1)^(0+256),w
 12972  1048  043E               	iorwf	log@x^(0+256),w
 12973  1049  1D03               	skipz
 12974  104A  2858               	goto	l8392
 12975  104B  3022               	movlw	34
 12976  104C  0024               	movlb	4	; select bank4
 12977  104D  00D1               	movwf	_errno^(0+512)
 12978  104E  3000               	movlw	0
 12979  104F  00D2               	movwf	(_errno^(0+512)+1)
 12980  1050  3000               	movlw	0
 12981  1051  0022               	movlb	2	; select bank2
 12982  1052  00BE               	movwf	?_log^(0+256)
 12983  1053  3000               	movlw	0
 12984  1054  00BF               	movwf	(?_log+1)^(0+256)
 12985  1055  3000               	movlw	0
 12986  1056  00C0               	movwf	(?_log+2)^(0+256)
 12987  1057  0008               	return
 12988  1058                     l8392:	
 12989  1058  3000               	movlw	0
 12990  1059  0021               	movlb	1	; select bank1
 12991  105A  00C1               	movwf	___ftadd@f1^(0+128)
 12992  105B  3080               	movlw	128
 12993  105C  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 12994  105D  30BF               	movlw	191
 12995  105E  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 12996  105F  3000               	movlw	0
 12997  1060  00AE               	movwf	___ftmul@f1^(0+128)
 12998  1061  3000               	movlw	0
 12999  1062  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 13000  1063  3040               	movlw	64
 13001  1064  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 13002  1065  3042               	movlw	(low (log@exponent| (0+256)))& (0+255)
 13003  1066  0022               	movlb	2	; select bank2
 13004  1067  00C1               	movwf	??_log^(0+256)
 13005  1068  0841               	movf	??_log^(0+256),w
 13006  1069  0021               	movlb	1	; select bank1
 13007  106A  00A3               	movwf	frexp@eptr^(0+128)
 13008  106B  0022               	movlb	2	; select bank2
 13009  106C  083E               	movf	log@x^(0+256),w
 13010  106D  0021               	movlb	1	; select bank1
 13011  106E  00A0               	movwf	frexp@value^(0+128)
 13012  106F  0022               	movlb	2	; select bank2
 13013  1070  083F               	movf	(log@x+1)^(0+256),w
 13014  1071  0021               	movlb	1	; select bank1
 13015  1072  00A1               	movwf	(frexp@value+1)^(0+128)
 13016  1073  0022               	movlb	2	; select bank2
 13017  1074  0840               	movf	(log@x+2)^(0+256),w
 13018  1075  0021               	movlb	1	; select bank1
 13019  1076  00A2               	movwf	(frexp@value+2)^(0+128)
 13020  1077  31A1  219D  3190   	fcall	_frexp
 13021  107A  0021               	movlb	1	; select bank1
 13022  107B  0820               	movf	?_frexp^(0+128),w
 13023  107C  00B1               	movwf	___ftmul@f2^(0+128)
 13024  107D  0821               	movf	(?_frexp+1)^(0+128),w
 13025  107E  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 13026  107F  0822               	movf	(?_frexp+2)^(0+128),w
 13027  1080  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 13028  1081  319E  2656  3190   	fcall	___ftmul
 13029  1084  0021               	movlb	1	; select bank1
 13030  1085  082E               	movf	?___ftmul^(0+128),w
 13031  1086  00C4               	movwf	___ftadd@f2^(0+128)
 13032  1087  082F               	movf	(?___ftmul+1)^(0+128),w
 13033  1088  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 13034  1089  0830               	movf	(?___ftmul+2)^(0+128),w
 13035  108A  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 13036  108B  319F  270A  3190   	fcall	___ftadd
 13037  108E  0021               	movlb	1	; select bank1
 13038  108F  0841               	movf	?___ftadd^(0+128),w
 13039  1090  0022               	movlb	2	; select bank2
 13040  1091  00BE               	movwf	log@x^(0+256)
 13041  1092  0021               	movlb	1	; select bank1
 13042  1093  0842               	movf	(?___ftadd+1)^(0+128),w
 13043  1094  0022               	movlb	2	; select bank2
 13044  1095  00BF               	movwf	(log@x+1)^(0+256)
 13045  1096  0021               	movlb	1	; select bank1
 13046  1097  0843               	movf	(?___ftadd+2)^(0+128),w
 13047  1098  0022               	movlb	2	; select bank2
 13048  1099  00C0               	movwf	(log@x+2)^(0+256)
 13049  109A  30FF               	movlw	255
 13050  109B  07C2               	addwf	log@exponent^(0+256),f
 13051  109C  30FF               	movlw	255
 13052  109D  3DC3               	addwfc	(log@exponent+1)^(0+256),f
 13053  109E  083E               	movf	log@x^(0+256),w
 13054  109F  00B4               	movwf	eval_poly@x^(0+256)
 13055  10A0  083F               	movf	(log@x+1)^(0+256),w
 13056  10A1  00B5               	movwf	(eval_poly@x+1)^(0+256)
 13057  10A2  0840               	movf	(log@x+2)^(0+256),w
 13058  10A3  00B6               	movwf	(eval_poly@x+2)^(0+256)
 13059  10A4  301E               	movlw	low (log@coeff| (0+32768))
 13060  10A5  00B7               	movwf	eval_poly@d^(0+256)
 13061  10A6  30A8               	movlw	high (log@coeff| (0+32768))
 13062  10A7  00B8               	movwf	(eval_poly@d^(0+256)+1)
 13063  10A8  3008               	movlw	8
 13064  10A9  00B9               	movwf	eval_poly@n^(0+256)
 13065  10AA  3000               	movlw	0
 13066  10AB  00BA               	movwf	(eval_poly@n^(0+256)+1)
 13067  10AC  31A6  261B  3190   	fcall	_eval_poly
 13068  10AF  0022               	movlb	2	; select bank2
 13069  10B0  0834               	movf	?_eval_poly^(0+256),w
 13070  10B1  00BE               	movwf	log@x^(0+256)
 13071  10B2  0835               	movf	(?_eval_poly+1)^(0+256),w
 13072  10B3  00BF               	movwf	(log@x+1)^(0+256)
 13073  10B4  0836               	movf	(?_eval_poly+2)^(0+256),w
 13074  10B5  00C0               	movwf	(log@x+2)^(0+256)
 13075  10B6  083E               	movf	log@x^(0+256),w
 13076  10B7  0021               	movlb	1	; select bank1
 13077  10B8  00C1               	movwf	___ftadd@f1^(0+128)
 13078  10B9  0022               	movlb	2	; select bank2
 13079  10BA  083F               	movf	(log@x+1)^(0+256),w
 13080  10BB  0021               	movlb	1	; select bank1
 13081  10BC  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 13082  10BD  0022               	movlb	2	; select bank2
 13083  10BE  0840               	movf	(log@x+2)^(0+256),w
 13084  10BF  0021               	movlb	1	; select bank1
 13085  10C0  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 13086  10C1  3072               	movlw	114
 13087  10C2  00AE               	movwf	___ftmul@f1^(0+128)
 13088  10C3  3031               	movlw	49
 13089  10C4  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 13090  10C5  303F               	movlw	63
 13091  10C6  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 13092  10C7  0022               	movlb	2	; select bank2
 13093  10C8  0843               	movf	(log@exponent+1)^(0+256),w
 13094  10C9  0021               	movlb	1	; select bank1
 13095  10CA  00A9               	movwf	(___awtoft@c+1)^(0+128)
 13096  10CB  0022               	movlb	2	; select bank2
 13097  10CC  0842               	movf	log@exponent^(0+256),w
 13098  10CD  0021               	movlb	1	; select bank1
 13099  10CE  00A8               	movwf	___awtoft@c^(0+128)
 13100  10CF  31AD  25E4  3190   	fcall	___awtoft
 13101  10D2  0021               	movlb	1	; select bank1
 13102  10D3  0828               	movf	?___awtoft^(0+128),w
 13103  10D4  00B1               	movwf	___ftmul@f2^(0+128)
 13104  10D5  0829               	movf	(?___awtoft+1)^(0+128),w
 13105  10D6  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 13106  10D7  082A               	movf	(?___awtoft+2)^(0+128),w
 13107  10D8  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 13108  10D9  319E  2656  3190   	fcall	___ftmul
 13109  10DC  0021               	movlb	1	; select bank1
 13110  10DD  082E               	movf	?___ftmul^(0+128),w
 13111  10DE  00C4               	movwf	___ftadd@f2^(0+128)
 13112  10DF  082F               	movf	(?___ftmul+1)^(0+128),w
 13113  10E0  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 13114  10E1  0830               	movf	(?___ftmul+2)^(0+128),w
 13115  10E2  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 13116  10E3  319F  270A         	fcall	___ftadd
 13117  10E5  0021               	movlb	1	; select bank1
 13118  10E6  0841               	movf	?___ftadd^(0+128),w
 13119  10E7  0022               	movlb	2	; select bank2
 13120  10E8  00BE               	movwf	?_log^(0+256)
 13121  10E9  0021               	movlb	1	; select bank1
 13122  10EA  0842               	movf	(?___ftadd+1)^(0+128),w
 13123  10EB  0022               	movlb	2	; select bank2
 13124  10EC  00BF               	movwf	(?_log+1)^(0+256)
 13125  10ED  0021               	movlb	1	; select bank1
 13126  10EE  0843               	movf	(?___ftadd+2)^(0+128),w
 13127  10EF  0022               	movlb	2	; select bank2
 13128  10F0  00C0               	movwf	(?_log+2)^(0+256)
 13129  10F1  0008               	return
 13130  10F2                     __end_of_log:	
 13131                           
 13132                           	psect	text29
 13133  132C                     __ptext29:	
 13134 ;; *************** function _exp *****************
 13135 ;; Defined at:
 13136 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\exp.c"
 13137 ;; Parameters:    Size  Location     Type
 13138 ;;  x               3   40[BANK2 ] int 
 13139 ;; Auto vars:     Size  Location     Type
 13140 ;;  exponent        2   50[BANK2 ] int 
 13141 ;;  sign            1   52[BANK2 ] unsigned char 
 13142 ;; Return value:  Size  Location     Type
 13143 ;;                  3   40[BANK2 ] unsigned char 
 13144 ;; Registers used:
 13145 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13146 ;; Tracked objects:
 13147 ;;		On entry : 0/0
 13148 ;;		On exit  : 0/0
 13149 ;;		Unchanged: 0/0
 13150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13151 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13152 ;;      Locals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13153 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13154 ;;      Totals:         0       0       0      13       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13155 ;;Total ram usage:       13 bytes
 13156 ;; Hardware stack levels used:    1
 13157 ;; Hardware stack levels required when called:    6
 13158 ;; This function calls:
 13159 ;;		___awtoft
 13160 ;;		___ftdiv
 13161 ;;		___ftge
 13162 ;;		___ftmul
 13163 ;;		___ftneg
 13164 ;;		___ftsub
 13165 ;;		___fttol
 13166 ;;		_eval_poly
 13167 ;;		_floor
 13168 ;;		_ldexp
 13169 ;; This function is called by:
 13170 ;;		_pow
 13171 ;; This function uses a non-reentrant model
 13172 ;;
 13173                           
 13174                           
 13175                           ;psect for function _exp
 13176  132C                     _exp:	
 13177                           
 13178                           ;incstack = 0
 13179                           ; Regs used in _exp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13180  132C  0022               	movlb	2	; select bank2
 13181  132D  084A               	movf	(exp@x+2)^(0+256),w
 13182  132E  0449               	iorwf	(exp@x+1)^(0+256),w
 13183  132F  0448               	iorwf	exp@x^(0+256),w
 13184  1330  1D03               	skipz
 13185  1331  2B39               	goto	l8408
 13186  1332  3000               	movlw	0
 13187  1333  00C8               	movwf	?_exp^(0+256)
 13188  1334  3080               	movlw	128
 13189  1335  00C9               	movwf	(?_exp+1)^(0+256)
 13190  1336  303F               	movlw	63
 13191  1337  00CA               	movwf	(?_exp+2)^(0+256)
 13192  1338  0008               	return
 13193  1339                     l8408:	
 13194  1339  3072               	movlw	114
 13195  133A  0021               	movlb	1	; select bank1
 13196  133B  00A0               	movwf	___ftge@ff1^(0+128)
 13197  133C  3031               	movlw	49
 13198  133D  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13199  133E  3044               	movlw	68
 13200  133F  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13201  1340  0022               	movlb	2	; select bank2
 13202  1341  0848               	movf	exp@x^(0+256),w
 13203  1342  0021               	movlb	1	; select bank1
 13204  1343  00A3               	movwf	___ftge@ff2^(0+128)
 13205  1344  0022               	movlb	2	; select bank2
 13206  1345  0849               	movf	(exp@x+1)^(0+256),w
 13207  1346  0021               	movlb	1	; select bank1
 13208  1347  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13209  1348  0022               	movlb	2	; select bank2
 13210  1349  084A               	movf	(exp@x+2)^(0+256),w
 13211  134A  0021               	movlb	1	; select bank1
 13212  134B  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13213  134C  31A0  20AA  3193   	fcall	___ftge
 13214  134F  1803               	btfsc	3,0
 13215  1350  2B5E               	goto	l8418
 13216  1351  3022               	movlw	34
 13217  1352  0024               	movlb	4	; select bank4
 13218  1353  00D1               	movwf	_errno^(0+512)
 13219  1354  3000               	movlw	0
 13220  1355  00D2               	movwf	(_errno^(0+512)+1)
 13221  1356  30FF               	movlw	255
 13222  1357  0022               	movlb	2	; select bank2
 13223  1358  00C8               	movwf	?_exp^(0+256)
 13224  1359  307F               	movlw	127
 13225  135A  00C9               	movwf	(?_exp+1)^(0+256)
 13226  135B  307F               	movlw	127
 13227  135C  00CA               	movwf	(?_exp+2)^(0+256)
 13228  135D  0008               	return
 13229  135E                     l8418:	
 13230  135E  0022               	movlb	2	; select bank2
 13231  135F  0848               	movf	exp@x^(0+256),w
 13232  1360  0021               	movlb	1	; select bank1
 13233  1361  00A0               	movwf	___ftge@ff1^(0+128)
 13234  1362  0022               	movlb	2	; select bank2
 13235  1363  0849               	movf	(exp@x+1)^(0+256),w
 13236  1364  0021               	movlb	1	; select bank1
 13237  1365  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13238  1366  0022               	movlb	2	; select bank2
 13239  1367  084A               	movf	(exp@x+2)^(0+256),w
 13240  1368  0021               	movlb	1	; select bank1
 13241  1369  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13242  136A  3049               	movlw	73
 13243  136B  00A3               	movwf	___ftge@ff2^(0+128)
 13244  136C  303A               	movlw	58
 13245  136D  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13246  136E  30C4               	movlw	196
 13247  136F  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13248  1370  31A0  20AA  3193   	fcall	___ftge
 13249  1373  1803               	btfsc	3,0
 13250  1374  2B82               	goto	l8424
 13251  1375  3022               	movlw	34
 13252  1376  0024               	movlb	4	; select bank4
 13253  1377  00D1               	movwf	_errno^(0+512)
 13254  1378  3000               	movlw	0
 13255  1379  00D2               	movwf	(_errno^(0+512)+1)
 13256  137A  3000               	movlw	0
 13257  137B  0022               	movlb	2	; select bank2
 13258  137C  00C8               	movwf	?_exp^(0+256)
 13259  137D  3000               	movlw	0
 13260  137E  00C9               	movwf	(?_exp+1)^(0+256)
 13261  137F  3000               	movlw	0
 13262  1380  00CA               	movwf	(?_exp+2)^(0+256)
 13263  1381  0008               	return
 13264  1382                     l8424:	
 13265  1382  0022               	movlb	2	; select bank2
 13266  1383  0848               	movf	exp@x^(0+256),w
 13267  1384  0021               	movlb	1	; select bank1
 13268  1385  00A0               	movwf	___ftge@ff1^(0+128)
 13269  1386  0022               	movlb	2	; select bank2
 13270  1387  0849               	movf	(exp@x+1)^(0+256),w
 13271  1388  0021               	movlb	1	; select bank1
 13272  1389  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13273  138A  0022               	movlb	2	; select bank2
 13274  138B  084A               	movf	(exp@x+2)^(0+256),w
 13275  138C  0021               	movlb	1	; select bank1
 13276  138D  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13277  138E  3000               	movlw	0
 13278  138F  00A3               	movwf	___ftge@ff2^(0+128)
 13279  1390  3000               	movlw	0
 13280  1391  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13281  1392  3000               	movlw	0
 13282  1393  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13283  1394  31A0  20AA  3193   	fcall	___ftge
 13284  1397  1803               	btfsc	3,0
 13285  1398  2B9B               	goto	u8930
 13286  1399  3001               	movlw	1
 13287  139A  2B9C               	goto	u8940
 13288  139B                     u8930:	
 13289  139B  3000               	movlw	0
 13290  139C                     u8940:	
 13291  139C  0022               	movlb	2	; select bank2
 13292  139D  00CB               	movwf	??_exp^(0+256)
 13293  139E  084B               	movf	??_exp^(0+256),w
 13294  139F  00D4               	movwf	exp@sign^(0+256)
 13295  13A0  0854               	movf	exp@sign^(0+256),w
 13296  13A1  1903               	btfsc	3,2
 13297  13A2  2BBD               	goto	l8430
 13298  13A3  0848               	movf	exp@x^(0+256),w
 13299  13A4  0021               	movlb	1	; select bank1
 13300  13A5  00BE               	movwf	___ftneg@f1^(0+128)
 13301  13A6  0022               	movlb	2	; select bank2
 13302  13A7  0849               	movf	(exp@x+1)^(0+256),w
 13303  13A8  0021               	movlb	1	; select bank1
 13304  13A9  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13305  13AA  0022               	movlb	2	; select bank2
 13306  13AB  084A               	movf	(exp@x+2)^(0+256),w
 13307  13AC  0021               	movlb	1	; select bank1
 13308  13AD  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13309  13AE  31AC  2497  3193   	fcall	___ftneg
 13310  13B1  0021               	movlb	1	; select bank1
 13311  13B2  083E               	movf	?___ftneg^(0+128),w
 13312  13B3  0022               	movlb	2	; select bank2
 13313  13B4  00C8               	movwf	exp@x^(0+256)
 13314  13B5  0021               	movlb	1	; select bank1
 13315  13B6  083F               	movf	(?___ftneg+1)^(0+128),w
 13316  13B7  0022               	movlb	2	; select bank2
 13317  13B8  00C9               	movwf	(exp@x+1)^(0+256)
 13318  13B9  0021               	movlb	1	; select bank1
 13319  13BA  0840               	movf	(?___ftneg+2)^(0+128),w
 13320  13BB  0022               	movlb	2	; select bank2
 13321  13BC  00CA               	movwf	(exp@x+2)^(0+256)
 13322  13BD                     l8430:	
 13323  13BD  30AA               	movlw	170
 13324  13BE  0021               	movlb	1	; select bank1
 13325  13BF  00AE               	movwf	___ftmul@f1^(0+128)
 13326  13C0  30B8               	movlw	184
 13327  13C1  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 13328  13C2  303F               	movlw	63
 13329  13C3  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 13330  13C4  0022               	movlb	2	; select bank2
 13331  13C5  0848               	movf	exp@x^(0+256),w
 13332  13C6  0021               	movlb	1	; select bank1
 13333  13C7  00B1               	movwf	___ftmul@f2^(0+128)
 13334  13C8  0022               	movlb	2	; select bank2
 13335  13C9  0849               	movf	(exp@x+1)^(0+256),w
 13336  13CA  0021               	movlb	1	; select bank1
 13337  13CB  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 13338  13CC  0022               	movlb	2	; select bank2
 13339  13CD  084A               	movf	(exp@x+2)^(0+256),w
 13340  13CE  0021               	movlb	1	; select bank1
 13341  13CF  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 13342  13D0  319E  2656  3193   	fcall	___ftmul
 13343  13D3  0021               	movlb	1	; select bank1
 13344  13D4  082E               	movf	?___ftmul^(0+128),w
 13345  13D5  0022               	movlb	2	; select bank2
 13346  13D6  00C8               	movwf	exp@x^(0+256)
 13347  13D7  0021               	movlb	1	; select bank1
 13348  13D8  082F               	movf	(?___ftmul+1)^(0+128),w
 13349  13D9  0022               	movlb	2	; select bank2
 13350  13DA  00C9               	movwf	(exp@x+1)^(0+256)
 13351  13DB  0021               	movlb	1	; select bank1
 13352  13DC  0830               	movf	(?___ftmul+2)^(0+128),w
 13353  13DD  0022               	movlb	2	; select bank2
 13354  13DE  00CA               	movwf	(exp@x+2)^(0+256)
 13355  13DF  0848               	movf	exp@x^(0+256),w
 13356  13E0  00AE               	movwf	floor@x^(0+256)
 13357  13E1  0849               	movf	(exp@x+1)^(0+256),w
 13358  13E2  00AF               	movwf	(floor@x+1)^(0+256)
 13359  13E3  084A               	movf	(exp@x+2)^(0+256),w
 13360  13E4  00B0               	movwf	(floor@x+2)^(0+256)
 13361  13E5  319D  25A3  3193   	fcall	_floor
 13362  13E8  0022               	movlb	2	; select bank2
 13363  13E9  082E               	movf	?_floor^(0+256),w
 13364  13EA  00CC               	movwf	_exp$2920^(0+256)
 13365  13EB  082F               	movf	(?_floor+1)^(0+256),w
 13366  13EC  00CD               	movwf	(_exp$2920+1)^(0+256)
 13367  13ED  0830               	movf	(?_floor+2)^(0+256),w
 13368  13EE  00CE               	movwf	(_exp$2920+2)^(0+256)
 13369  13EF  084C               	movf	_exp$2920^(0+256),w
 13370  13F0  00A0               	movwf	___fttol@f1^(0+256)
 13371  13F1  084D               	movf	(_exp$2920+1)^(0+256),w
 13372  13F2  00A1               	movwf	(___fttol@f1+1)^(0+256)
 13373  13F3  084E               	movf	(_exp$2920+2)^(0+256),w
 13374  13F4  00A2               	movwf	(___fttol@f1+2)^(0+256)
 13375  13F5  3199  218A  3193   	fcall	___fttol
 13376  13F8  0022               	movlb	2	; select bank2
 13377  13F9  0821               	movf	(?___fttol^(0+256)+1),w
 13378  13FA  00D3               	movwf	(exp@exponent+1)^(0+256)
 13379  13FB  0820               	movf	?___fttol^(0+256),w
 13380  13FC  00D2               	movwf	exp@exponent^(0+256)
 13381  13FD  0853               	movf	(exp@exponent+1)^(0+256),w
 13382  13FE  0021               	movlb	1	; select bank1
 13383  13FF  00A9               	movwf	(___awtoft@c+1)^(0+128)
 13384  1400  0022               	movlb	2	; select bank2
 13385  1401  0852               	movf	exp@exponent^(0+256),w
 13386  1402  0021               	movlb	1	; select bank1
 13387  1403  00A8               	movwf	___awtoft@c^(0+128)
 13388  1404  31AD  25E4  3193   	fcall	___awtoft
 13389  1407  0021               	movlb	1	; select bank1
 13390  1408  0828               	movf	?___awtoft^(0+128),w
 13391  1409  0022               	movlb	2	; select bank2
 13392  140A  00B7               	movwf	___ftsub@f2^(0+256)
 13393  140B  0021               	movlb	1	; select bank1
 13394  140C  0829               	movf	(?___awtoft+1)^(0+128),w
 13395  140D  0022               	movlb	2	; select bank2
 13396  140E  00B8               	movwf	(___ftsub@f2+1)^(0+256)
 13397  140F  0021               	movlb	1	; select bank1
 13398  1410  082A               	movf	(?___awtoft+2)^(0+128),w
 13399  1411  0022               	movlb	2	; select bank2
 13400  1412  00B9               	movwf	(___ftsub@f2+2)^(0+256)
 13401  1413  0848               	movf	exp@x^(0+256),w
 13402  1414  00BA               	movwf	___ftsub@f1^(0+256)
 13403  1415  0849               	movf	(exp@x+1)^(0+256),w
 13404  1416  00BB               	movwf	(___ftsub@f1+1)^(0+256)
 13405  1417  084A               	movf	(exp@x+2)^(0+256),w
 13406  1418  00BC               	movwf	(___ftsub@f1+2)^(0+256)
 13407  1419  31AE  26A5  3193   	fcall	___ftsub
 13408  141C  0022               	movlb	2	; select bank2
 13409  141D  0837               	movf	?___ftsub^(0+256),w
 13410  141E  00C8               	movwf	exp@x^(0+256)
 13411  141F  0838               	movf	(?___ftsub+1)^(0+256),w
 13412  1420  00C9               	movwf	(exp@x+1)^(0+256)
 13413  1421  0839               	movf	(?___ftsub+2)^(0+256),w
 13414  1422  00CA               	movwf	(exp@x+2)^(0+256)
 13415  1423  0848               	movf	exp@x^(0+256),w
 13416  1424  00B4               	movwf	eval_poly@x^(0+256)
 13417  1425  0849               	movf	(exp@x+1)^(0+256),w
 13418  1426  00B5               	movwf	(eval_poly@x+1)^(0+256)
 13419  1427  084A               	movf	(exp@x+2)^(0+256),w
 13420  1428  00B6               	movwf	(eval_poly@x+2)^(0+256)
 13421  1429  3000               	movlw	low (exp@coeff| (0+32768))
 13422  142A  00B7               	movwf	eval_poly@d^(0+256)
 13423  142B  30A8               	movlw	high (exp@coeff| (0+32768))
 13424  142C  00B8               	movwf	(eval_poly@d^(0+256)+1)
 13425  142D  3009               	movlw	9
 13426  142E  00B9               	movwf	eval_poly@n^(0+256)
 13427  142F  3000               	movlw	0
 13428  1430  00BA               	movwf	(eval_poly@n^(0+256)+1)
 13429  1431  31A6  261B  3193   	fcall	_eval_poly
 13430  1434  0022               	movlb	2	; select bank2
 13431  1435  0834               	movf	?_eval_poly^(0+256),w
 13432  1436  00BE               	movwf	ldexp@value^(0+256)
 13433  1437  0835               	movf	(?_eval_poly+1)^(0+256),w
 13434  1438  00BF               	movwf	(ldexp@value+1)^(0+256)
 13435  1439  0836               	movf	(?_eval_poly+2)^(0+256),w
 13436  143A  00C0               	movwf	(ldexp@value+2)^(0+256)
 13437  143B  0853               	movf	(exp@exponent+1)^(0+256),w
 13438  143C  00C2               	movwf	(ldexp@newexp+1)^(0+256)
 13439  143D  0852               	movf	exp@exponent^(0+256),w
 13440  143E  00C1               	movwf	ldexp@newexp^(0+256)
 13441  143F  319B  23B8  3193   	fcall	_ldexp
 13442  1442  0022               	movlb	2	; select bank2
 13443  1443  083E               	movf	?_ldexp^(0+256),w
 13444  1444  00C8               	movwf	exp@x^(0+256)
 13445  1445  083F               	movf	(?_ldexp+1)^(0+256),w
 13446  1446  00C9               	movwf	(exp@x+1)^(0+256)
 13447  1447  0840               	movf	(?_ldexp+2)^(0+256),w
 13448  1448  00CA               	movwf	(exp@x+2)^(0+256)
 13449  1449  0854               	movf	exp@sign^(0+256),w
 13450  144A  1903               	btfsc	3,2
 13451  144B  0008               	return
 13452  144C  30FF               	movlw	255
 13453  144D  00CF               	movwf	_exp$2671^(0+256)
 13454  144E  307F               	movlw	127
 13455  144F  00D0               	movwf	(_exp$2671+1)^(0+256)
 13456  1450  307F               	movlw	127
 13457  1451  00D1               	movwf	(_exp$2671+2)^(0+256)
 13458  1452  084A               	movf	(exp@x+2)^(0+256),w
 13459  1453  0651               	xorwf	(_exp$2671+2)^(0+256),w
 13460  1454  1D03               	skipz
 13461  1455  2C5C               	goto	u8975
 13462  1456  0849               	movf	(exp@x+1)^(0+256),w
 13463  1457  0650               	xorwf	(_exp$2671+1)^(0+256),w
 13464  1458  1D03               	skipz
 13465  1459  2C5C               	goto	u8975
 13466  145A  0848               	movf	exp@x^(0+256),w
 13467  145B  064F               	xorwf	_exp$2671^(0+256),w
 13468  145C                     u8975:	
 13469  145C  1D03               	skipz
 13470  145D  2C65               	goto	l8452
 13471  145E  3000               	movlw	0
 13472  145F  00C8               	movwf	?_exp^(0+256)
 13473  1460  3000               	movlw	0
 13474  1461  00C9               	movwf	(?_exp+1)^(0+256)
 13475  1462  3000               	movlw	0
 13476  1463  00CA               	movwf	(?_exp+2)^(0+256)
 13477  1464  0008               	return
 13478  1465                     l8452:	
 13479  1465  0848               	movf	exp@x^(0+256),w
 13480  1466  0021               	movlb	1	; select bank1
 13481  1467  00CE               	movwf	___ftdiv@f2^(0+128)
 13482  1468  0022               	movlb	2	; select bank2
 13483  1469  0849               	movf	(exp@x+1)^(0+256),w
 13484  146A  0021               	movlb	1	; select bank1
 13485  146B  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 13486  146C  0022               	movlb	2	; select bank2
 13487  146D  084A               	movf	(exp@x+2)^(0+256),w
 13488  146E  0021               	movlb	1	; select bank1
 13489  146F  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 13490  1470  3000               	movlw	0
 13491  1471  00D1               	movwf	___ftdiv@f1^(0+128)
 13492  1472  3080               	movlw	128
 13493  1473  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 13494  1474  303F               	movlw	63
 13495  1475  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 13496  1476  319C  244F         	fcall	___ftdiv
 13497  1478  0021               	movlb	1	; select bank1
 13498  1479  084E               	movf	?___ftdiv^(0+128),w
 13499  147A  0022               	movlb	2	; select bank2
 13500  147B  00C8               	movwf	?_exp^(0+256)
 13501  147C  0021               	movlb	1	; select bank1
 13502  147D  084F               	movf	(?___ftdiv+1)^(0+128),w
 13503  147E  0022               	movlb	2	; select bank2
 13504  147F  00C9               	movwf	(?_exp+1)^(0+256)
 13505  1480  0021               	movlb	1	; select bank1
 13506  1481  0850               	movf	(?___ftdiv+2)^(0+128),w
 13507  1482  0022               	movlb	2	; select bank2
 13508  1483  00CA               	movwf	(?_exp+2)^(0+256)
 13509  1484  0008               	return
 13510  1485                     __end_of_exp:	
 13511                           
 13512                           	psect	text30
 13513  1BB8                     __ptext30:	
 13514 ;; *************** function _ldexp *****************
 13515 ;; Defined at:
 13516 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
 13517 ;; Parameters:    Size  Location     Type
 13518 ;;  value           3   30[BANK2 ] unsigned char 
 13519 ;;  newexp          2   33[BANK2 ] int 
 13520 ;; Auto vars:     Size  Location     Type
 13521 ;;		None
 13522 ;; Return value:  Size  Location     Type
 13523 ;;                  3   30[BANK2 ] int 
 13524 ;; Registers used:
 13525 ;;		wreg, status,2, status,0, pclath, cstack
 13526 ;; Tracked objects:
 13527 ;;		On entry : 0/0
 13528 ;;		On exit  : 0/0
 13529 ;;		Unchanged: 0/0
 13530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13531 ;;      Params:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13532 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13533 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13534 ;;      Totals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13535 ;;Total ram usage:       10 bytes
 13536 ;; Hardware stack levels used:    1
 13537 ;; Hardware stack levels required when called:    4
 13538 ;; This function calls:
 13539 ;;		___ftge
 13540 ;;		___ftneg
 13541 ;; This function is called by:
 13542 ;;		_exp
 13543 ;; This function uses a non-reentrant model
 13544 ;;
 13545                           
 13546                           
 13547                           ;psect for function _ldexp
 13548  1BB8                     _ldexp:	
 13549                           
 13550                           ;incstack = 0
 13551                           ; Regs used in _ldexp: [wreg+status,2+status,0+pclath+cstack]
 13552  1BB8  0022               	movlb	2	; select bank2
 13553  1BB9  0840               	movf	(ldexp@value+2)^(0+256),w
 13554  1BBA  043F               	iorwf	(ldexp@value+1)^(0+256),w
 13555  1BBB  043E               	iorwf	ldexp@value^(0+256),w
 13556  1BBC  1D03               	skipz
 13557  1BBD  2BC5               	goto	l8222
 13558  1BBE  3000               	movlw	0
 13559  1BBF  00BE               	movwf	?_ldexp^(0+256)
 13560  1BC0  3000               	movlw	0
 13561  1BC1  00BF               	movwf	(?_ldexp+1)^(0+256)
 13562  1BC2  3000               	movlw	0
 13563  1BC3  00C0               	movwf	(?_ldexp+2)^(0+256)
 13564  1BC4  0008               	return
 13565  1BC5                     l8222:	
 13566  1BC5  0840               	movf	(ldexp@value^(0+256)+2),w
 13567  1BC6  397F               	andlw	127
 13568  1BC7  00C3               	movwf	??_ldexp^(0+256)
 13569  1BC8  01C4               	clrf	(??_ldexp^(0+256)+1)
 13570  1BC9  35C3               	lslf	??_ldexp^(0+256),f
 13571  1BCA  0DC4               	rlf	(??_ldexp^(0+256)+1),f
 13572  1BCB  0843               	movf	??_ldexp^(0+256),w
 13573  1BCC  07C1               	addwf	ldexp@newexp^(0+256),f
 13574  1BCD  0844               	movf	(??_ldexp+1)^(0+256),w
 13575  1BCE  3DC2               	addwfc	(ldexp@newexp+1)^(0+256),f
 13576  1BCF  0D3F               	rlf	(ldexp@value^(0+256)+1),w
 13577  1BD0  0D3F               	rlf	(ldexp@value^(0+256)+1),w
 13578  1BD1  3901               	andlw	1
 13579  1BD2  00C3               	movwf	??_ldexp^(0+256)
 13580  1BD3  01C4               	clrf	(??_ldexp^(0+256)+1)
 13581  1BD4  0843               	movf	??_ldexp^(0+256),w
 13582  1BD5  07C1               	addwf	ldexp@newexp^(0+256),f
 13583  1BD6  0844               	movf	(??_ldexp+1)^(0+256),w
 13584  1BD7  3DC2               	addwfc	(ldexp@newexp+1)^(0+256),f
 13585  1BD8  1FC2               	btfss	(ldexp@newexp+1)^(0+256),7
 13586  1BD9  2BE7               	goto	l8232
 13587  1BDA  3022               	movlw	34
 13588  1BDB  0024               	movlb	4	; select bank4
 13589  1BDC  00D1               	movwf	_errno^(0+512)
 13590  1BDD  3000               	movlw	0
 13591  1BDE  00D2               	movwf	(_errno^(0+512)+1)
 13592  1BDF  3000               	movlw	0
 13593  1BE0  0022               	movlb	2	; select bank2
 13594  1BE1  00BE               	movwf	?_ldexp^(0+256)
 13595  1BE2  3000               	movlw	0
 13596  1BE3  00BF               	movwf	(?_ldexp+1)^(0+256)
 13597  1BE4  3000               	movlw	0
 13598  1BE5  00C0               	movwf	(?_ldexp+2)^(0+256)
 13599  1BE6  0008               	return
 13600  1BE7                     l8232:	
 13601  1BE7  0842               	movf	(ldexp@newexp+1)^(0+256),w
 13602  1BE8  3A80               	xorlw	128
 13603  1BE9  00C3               	movwf	??_ldexp^(0+256)
 13604  1BEA  3081               	movlw	129
 13605  1BEB  0243               	subwf	??_ldexp^(0+256),w
 13606  1BEC  1D03               	skipz
 13607  1BED  2BF0               	goto	u8745
 13608  1BEE  3000               	movlw	0
 13609  1BEF  0241               	subwf	ldexp@newexp^(0+256),w
 13610  1BF0                     u8745:	
 13611  1BF0  1C03               	skipc
 13612  1BF1  2C37               	goto	l8256
 13613  1BF2  3022               	movlw	34
 13614  1BF3  0024               	movlb	4	; select bank4
 13615  1BF4  00D1               	movwf	_errno^(0+512)
 13616  1BF5  3000               	movlw	0
 13617  1BF6  00D2               	movwf	(_errno^(0+512)+1)
 13618  1BF7  0022               	movlb	2	; select bank2
 13619  1BF8  083E               	movf	ldexp@value^(0+256),w
 13620  1BF9  0021               	movlb	1	; select bank1
 13621  1BFA  00A0               	movwf	___ftge@ff1^(0+128)
 13622  1BFB  0022               	movlb	2	; select bank2
 13623  1BFC  083F               	movf	(ldexp@value+1)^(0+256),w
 13624  1BFD  0021               	movlb	1	; select bank1
 13625  1BFE  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13626  1BFF  0022               	movlb	2	; select bank2
 13627  1C00  0840               	movf	(ldexp@value+2)^(0+256),w
 13628  1C01  0021               	movlb	1	; select bank1
 13629  1C02  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13630  1C03  3000               	movlw	0
 13631  1C04  00A3               	movwf	___ftge@ff2^(0+128)
 13632  1C05  3000               	movlw	0
 13633  1C06  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13634  1C07  3000               	movlw	0
 13635  1C08  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13636  1C09  31A0  20AA  319B   	fcall	___ftge
 13637  1C0C  1803               	btfsc	3,0
 13638  1C0D  2C2F               	goto	l8252
 13639  1C0E  30FF               	movlw	255
 13640  1C0F  0022               	movlb	2	; select bank2
 13641  1C10  00C5               	movwf	_ldexp$2708^(0+256)
 13642  1C11  307F               	movlw	127
 13643  1C12  00C6               	movwf	(_ldexp$2708+1)^(0+256)
 13644  1C13  307F               	movlw	127
 13645  1C14  00C7               	movwf	(_ldexp$2708+2)^(0+256)
 13646  1C15  0845               	movf	_ldexp$2708^(0+256),w
 13647  1C16  0021               	movlb	1	; select bank1
 13648  1C17  00BE               	movwf	___ftneg@f1^(0+128)
 13649  1C18  0022               	movlb	2	; select bank2
 13650  1C19  0846               	movf	(_ldexp$2708+1)^(0+256),w
 13651  1C1A  0021               	movlb	1	; select bank1
 13652  1C1B  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13653  1C1C  0022               	movlb	2	; select bank2
 13654  1C1D  0847               	movf	(_ldexp$2708+2)^(0+256),w
 13655  1C1E  0021               	movlb	1	; select bank1
 13656  1C1F  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13657  1C20  31AC  2497         	fcall	___ftneg
 13658  1C22  0021               	movlb	1	; select bank1
 13659  1C23  083E               	movf	?___ftneg^(0+128),w
 13660  1C24  0022               	movlb	2	; select bank2
 13661  1C25  00BE               	movwf	?_ldexp^(0+256)
 13662  1C26  0021               	movlb	1	; select bank1
 13663  1C27  083F               	movf	(?___ftneg+1)^(0+128),w
 13664  1C28  0022               	movlb	2	; select bank2
 13665  1C29  00BF               	movwf	(?_ldexp+1)^(0+256)
 13666  1C2A  0021               	movlb	1	; select bank1
 13667  1C2B  0840               	movf	(?___ftneg+2)^(0+128),w
 13668  1C2C  0022               	movlb	2	; select bank2
 13669  1C2D  00C0               	movwf	(?_ldexp+2)^(0+256)
 13670  1C2E  0008               	return
 13671  1C2F                     l8252:	
 13672  1C2F  30FF               	movlw	255
 13673  1C30  0022               	movlb	2	; select bank2
 13674  1C31  00BE               	movwf	?_ldexp^(0+256)
 13675  1C32  307F               	movlw	127
 13676  1C33  00BF               	movwf	(?_ldexp+1)^(0+256)
 13677  1C34  307F               	movlw	127
 13678  1C35  00C0               	movwf	(?_ldexp+2)^(0+256)
 13679  1C36  0008               	return
 13680  1C37                     l8256:	
 13681  1C37  0022               	movlb	2	; select bank2
 13682  1C38  0842               	movf	(ldexp@newexp+1)^(0+256),w
 13683  1C39  00C4               	movwf	(??_ldexp^(0+256)+1)
 13684  1C3A  0841               	movf	ldexp@newexp^(0+256),w
 13685  1C3B  00C3               	movwf	??_ldexp^(0+256)
 13686  1C3C  0D44               	rlf	(??_ldexp^(0+256)+1),w
 13687  1C3D  0CC4               	rrf	(??_ldexp^(0+256)+1),f
 13688  1C3E  0CC3               	rrf	??_ldexp^(0+256),f
 13689  1C3F  0840               	movf	(ldexp@value^(0+256)+2),w
 13690  1C40  0643               	xorwf	??_ldexp^(0+256),w
 13691  1C41  3980               	andlw	-128
 13692  1C42  0643               	xorwf	??_ldexp^(0+256),w
 13693  1C43  00C0               	movwf	(ldexp@value^(0+256)+2)
 13694  1C44  0841               	movf	ldexp@newexp^(0+256),w
 13695  1C45  3901               	andlw	1
 13696  1C46  00C3               	movwf	??_ldexp^(0+256)
 13697  1C47  0CC3               	rrf	??_ldexp^(0+256),f
 13698  1C48  0CC3               	rrf	??_ldexp^(0+256),f
 13699  1C49  083F               	movf	(ldexp@value^(0+256)+1),w
 13700  1C4A  0643               	xorwf	??_ldexp^(0+256),w
 13701  1C4B  397F               	andlw	-129
 13702  1C4C  0643               	xorwf	??_ldexp^(0+256),w
 13703  1C4D  00BF               	movwf	(ldexp@value^(0+256)+1)
 13704  1C4E  0008               	return
 13705  1C4F                     __end_of_ldexp:	
 13706                           
 13707                           	psect	text31
 13708  2E4F                     __ptext31:	
 13709 ;; *************** function ___lltoft *****************
 13710 ;; Defined at:
 13711 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lltoft.c"
 13712 ;; Parameters:    Size  Location     Type
 13713 ;;  c               4    8[BANK1 ] unsigned long 
 13714 ;; Auto vars:     Size  Location     Type
 13715 ;;  exp             1   13[BANK1 ] unsigned char 
 13716 ;; Return value:  Size  Location     Type
 13717 ;;                  3    8[BANK1 ] float 
 13718 ;; Registers used:
 13719 ;;		wreg, status,2, status,0, pclath, cstack
 13720 ;; Tracked objects:
 13721 ;;		On entry : 0/0
 13722 ;;		On exit  : 0/0
 13723 ;;		Unchanged: 0/0
 13724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13725 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13726 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13727 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13728 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13729 ;;Total ram usage:        6 bytes
 13730 ;; Hardware stack levels used:    1
 13731 ;; Hardware stack levels required when called:    4
 13732 ;; This function calls:
 13733 ;;		___ftpack
 13734 ;; This function is called by:
 13735 ;;		_pow
 13736 ;; This function uses a non-reentrant model
 13737 ;;
 13738                           
 13739                           
 13740                           ;psect for function ___lltoft
 13741  2E4F                     ___lltoft:	
 13742                           
 13743                           ;incstack = 0
 13744                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
 13745  2E4F  308E               	movlw	142
 13746  2E50  0021               	movlb	1	; select bank1
 13747  2E51  00AC               	movwf	??___lltoft^(0+128)
 13748  2E52  082C               	movf	??___lltoft^(0+128),w
 13749  2E53  00AD               	movwf	___lltoft@exp^(0+128)
 13750  2E54                     l8374:	
 13751  2E54  30FF               	movlw	255
 13752  2E55  052B               	andwf	(___lltoft@c+3)^(0+128),w
 13753  2E56  1903               	btfsc	3,2
 13754  2E57  2E64               	goto	l8376
 13755  2E58  3001               	movlw	1
 13756  2E59                     u8865:	
 13757  2E59  36AB               	lsrf	(___lltoft@c+3)^(0+128),f
 13758  2E5A  0CAA               	rrf	(___lltoft@c+2)^(0+128),f
 13759  2E5B  0CA9               	rrf	(___lltoft@c+1)^(0+128),f
 13760  2E5C  0CA8               	rrf	___lltoft@c^(0+128),f
 13761  2E5D  0B89               	decfsz	9,f
 13762  2E5E  2E59               	goto	u8865
 13763  2E5F  3001               	movlw	1
 13764  2E60  00AC               	movwf	??___lltoft^(0+128)
 13765  2E61  082C               	movf	??___lltoft^(0+128),w
 13766  2E62  07AD               	addwf	___lltoft@exp^(0+128),f
 13767  2E63  2E54               	goto	l8374
 13768  2E64                     l8376:	
 13769  2E64  0828               	movf	___lltoft@c^(0+128),w
 13770  2E65  00A0               	movwf	___ftpack@arg^(0+128)
 13771  2E66  0829               	movf	(___lltoft@c+1)^(0+128),w
 13772  2E67  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 13773  2E68  082A               	movf	(___lltoft@c+2)^(0+128),w
 13774  2E69  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 13775  2E6A  082D               	movf	___lltoft@exp^(0+128),w
 13776  2E6B  00AC               	movwf	??___lltoft^(0+128)
 13777  2E6C  082C               	movf	??___lltoft^(0+128),w
 13778  2E6D  00A3               	movwf	___ftpack@exp^(0+128)
 13779  2E6E  01A4               	clrf	___ftpack@sign^(0+128)
 13780  2E6F  31A5  25B6         	fcall	___ftpack
 13781  2E71  0021               	movlb	1	; select bank1
 13782  2E72  0820               	movf	?___ftpack^(0+128),w
 13783  2E73  00A8               	movwf	?___lltoft^(0+128)
 13784  2E74  0821               	movf	(?___ftpack+1)^(0+128),w
 13785  2E75  00A9               	movwf	(?___lltoft+1)^(0+128)
 13786  2E76  0822               	movf	(?___ftpack+2)^(0+128),w
 13787  2E77  00AA               	movwf	(?___lltoft+2)^(0+128)
 13788  2E78  0008               	return
 13789  2E79                     __end_of___lltoft:	
 13790                           
 13791                           	psect	text32
 13792  2375                     __ptext32:	
 13793 ;; *************** function _read_top_tactile *****************
 13794 ;; Defined at:
 13795 ;;		line 50 in file "tactiles.c"
 13796 ;; Parameters:    Size  Location     Type
 13797 ;;		None
 13798 ;; Auto vars:     Size  Location     Type
 13799 ;;		None
 13800 ;; Return value:  Size  Location     Type
 13801 ;;                  1    wreg      void 
 13802 ;; Registers used:
 13803 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13804 ;; Tracked objects:
 13805 ;;		On entry : 0/0
 13806 ;;		On exit  : 0/0
 13807 ;;		Unchanged: 0/0
 13808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13811 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13812 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13813 ;;Total ram usage:        1 bytes
 13814 ;; Hardware stack levels used:    1
 13815 ;; Hardware stack levels required when called:    5
 13816 ;; This function calls:
 13817 ;;		_set_leds_top
 13818 ;;		_wait_ms
 13819 ;; This function is called by:
 13820 ;;		_main
 13821 ;; This function uses a non-reentrant model
 13822 ;;
 13823                           
 13824                           
 13825                           ;psect for function _read_top_tactile
 13826  2375                     _read_top_tactile:	
 13827                           
 13828                           ;tactiles.c: 60: if (PORTDbits.RD5 == 0) {
 13829                           
 13830                           ;incstack = 0
 13831                           ; Regs used in _read_top_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13832  2375  0020               	movlb	0	; select bank0
 13833  2376  1A8F               	btfsc	15,5	;volatile
 13834  2377  2B7F               	goto	l9154
 13835                           
 13836                           ;tactiles.c: 61: if (topTactile_pressed > 0) {
 13837  2378  0023               	movlb	3	; select bank3
 13838  2379  084C               	movf	_topTactile_pressed^(0+384),w
 13839  237A  1903               	btfsc	3,2
 13840  237B  2B8A               	goto	l1000
 13841                           
 13842                           ;tactiles.c: 62: topTactile_pressed--;
 13843  237C  3001               	movlw	1
 13844  237D  02CC               	subwf	_topTactile_pressed^(0+384),f
 13845                           
 13846                           ;tactiles.c: 63: }
 13847                           ;tactiles.c: 64: } else if (topTactile_pressed < 25*5) {
 13848  237E  2B8A               	goto	l1000
 13849  237F                     l9154:	
 13850  237F  307D               	movlw	125
 13851  2380  0023               	movlb	3	; select bank3
 13852  2381  024C               	subwf	_topTactile_pressed^(0+384),w
 13853  2382  1803               	skipnc
 13854  2383  2B8A               	goto	l1000
 13855                           
 13856                           ;tactiles.c: 65: topTactile_pressed++;
 13857  2384  3001               	movlw	1
 13858  2385  0021               	movlb	1	; select bank1
 13859  2386  00B2               	movwf	??_read_top_tactile^(0+128)
 13860  2387  0832               	movf	??_read_top_tactile^(0+128),w
 13861  2388  0023               	movlb	3	; select bank3
 13862  2389  07CC               	addwf	_topTactile_pressed^(0+384),f
 13863  238A                     l1000:	
 13864                           
 13865                           ;tactiles.c: 66: }
 13866                           ;tactiles.c: 71: if (topTactile_pressed == 0) {
 13867  238A  084C               	movf	_topTactile_pressed^(0+384),w
 13868  238B  1D03               	btfss	3,2
 13869  238C  0008               	return
 13870                           
 13871                           ;tactiles.c: 73: top_push_state = top_push_state + 1;
 13872  238D  0020               	movlb	0	; select bank0
 13873  238E  084C               	movf	_top_push_state,w
 13874  238F  3E01               	addlw	1
 13875  2390  00CC               	movwf	_top_push_state
 13876  2391  3000               	movlw	0
 13877  2392  3D4D               	addwfc	_top_push_state+1,w
 13878  2393  00CD               	movwf	_top_push_state+1
 13879                           
 13880                           ;tactiles.c: 74: if (top_push_state >= 7) {
 13881  2394  084D               	movf	_top_push_state+1,w
 13882  2395  3A80               	xorlw	128
 13883  2396  0021               	movlb	1	; select bank1
 13884  2397  00B2               	movwf	??_read_top_tactile^(0+128)
 13885  2398  3080               	movlw	128
 13886  2399  0232               	subwf	??_read_top_tactile^(0+128),w
 13887  239A  1D03               	skipz
 13888  239B  2B9F               	goto	u10205
 13889  239C  3007               	movlw	7
 13890  239D  0020               	movlb	0	; select bank0
 13891  239E  024C               	subwf	_top_push_state,w
 13892  239F                     u10205:	
 13893  239F  1C03               	skipc
 13894  23A0  2BA6               	goto	l9164
 13895                           
 13896                           ;tactiles.c: 75: top_push_state = 1;
 13897  23A1  3001               	movlw	1
 13898  23A2  0020               	movlb	0	; select bank0
 13899  23A3  00CC               	movwf	_top_push_state
 13900  23A4  3000               	movlw	0
 13901  23A5  00CD               	movwf	_top_push_state+1
 13902  23A6                     l9164:	
 13903                           
 13904                           ;tactiles.c: 76: }
 13905                           ;tactiles.c: 77: set_leds_top(top_push_state, 1);
 13906  23A6  0020               	movlb	0	; select bank0
 13907  23A7  084D               	movf	_top_push_state+1,w
 13908  23A8  0021               	movlb	1	; select bank1
 13909  23A9  00A1               	movwf	(set_leds_top@x+1)^(0+128)
 13910  23AA  0020               	movlb	0	; select bank0
 13911  23AB  084C               	movf	_top_push_state,w
 13912  23AC  0021               	movlb	1	; select bank1
 13913  23AD  00A0               	movwf	set_leds_top@x^(0+128)
 13914  23AE  3001               	movlw	1
 13915  23AF  00A2               	movwf	set_leds_top@ledState^(0+128)
 13916  23B0  3000               	movlw	0
 13917  23B1  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
 13918  23B2  31A5  2509  31A3   	fcall	_set_leds_top
 13919                           
 13920                           ;tactiles.c: 78: mod_time_changed = 1;
 13921  23B5  0023               	movlb	3	; select bank3
 13922  23B6  01E4               	clrf	_mod_time_changed^(0+384)
 13923  23B7  0AE4               	incf	_mod_time_changed^(0+384),f
 13924  23B8                     l1004:	
 13925                           ;tactiles.c: 81: while (PORTDbits.RD5 == 0) {
 13926                           
 13927  23B8  0020               	movlb	0	; select bank0
 13928  23B9  1E8F               	btfss	15,5	;volatile
 13929  23BA  2BB8               	goto	l1004
 13930                           
 13931                           ;tactiles.c: 82: }
 13932                           ;tactiles.c: 83: wait_ms(20);
 13933  23BB  3014               	movlw	20
 13934  23BC  0021               	movlb	1	; select bank1
 13935  23BD  00AC               	movwf	wait_ms@timeSec^(0+128)
 13936  23BE  3000               	movlw	0
 13937  23BF  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 13938  23C0  31A0  2003         	fcall	_wait_ms
 13939  23C2  0008               	return
 13940  23C3                     __end_of_read_top_tactile:	
 13941                           
 13942                           	psect	text33
 13943  232B                     __ptext33:	
 13944 ;; *************** function _read_bottom_tactile *****************
 13945 ;; Defined at:
 13946 ;;		line 18 in file "tactiles.c"
 13947 ;; Parameters:    Size  Location     Type
 13948 ;;		None
 13949 ;; Auto vars:     Size  Location     Type
 13950 ;;		None
 13951 ;; Return value:  Size  Location     Type
 13952 ;;                  1    wreg      void 
 13953 ;; Registers used:
 13954 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13955 ;; Tracked objects:
 13956 ;;		On entry : 0/0
 13957 ;;		On exit  : 0/0
 13958 ;;		Unchanged: 0/0
 13959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13961 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13962 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13963 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13964 ;;Total ram usage:        1 bytes
 13965 ;; Hardware stack levels used:    1
 13966 ;; Hardware stack levels required when called:    5
 13967 ;; This function calls:
 13968 ;;		_set_leds_bottom
 13969 ;;		_wait_ms
 13970 ;; This function is called by:
 13971 ;;		_main
 13972 ;; This function uses a non-reentrant model
 13973 ;;
 13974                           
 13975                           
 13976                           ;psect for function _read_bottom_tactile
 13977  232B                     _read_bottom_tactile:	
 13978                           
 13979                           ;tactiles.c: 27: if (PORTDbits.RD6 == 0) {
 13980                           
 13981                           ;incstack = 0
 13982                           ; Regs used in _read_bottom_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13983  232B  0020               	movlb	0	; select bank0
 13984  232C  1B0F               	btfsc	15,6	;volatile
 13985  232D  2B35               	goto	l9132
 13986                           
 13987                           ;tactiles.c: 28: if (bottomTactile_pressed > 0) {
 13988  232E  0023               	movlb	3	; select bank3
 13989  232F  083F               	movf	_bottomTactile_pressed^(0+384),w
 13990  2330  1903               	btfsc	3,2
 13991  2331  2B40               	goto	l988
 13992                           
 13993                           ;tactiles.c: 29: bottomTactile_pressed--;
 13994  2332  3001               	movlw	1
 13995  2333  02BF               	subwf	_bottomTactile_pressed^(0+384),f
 13996                           
 13997                           ;tactiles.c: 30: }
 13998                           ;tactiles.c: 31: } else if (bottomTactile_pressed < 25*5) {
 13999  2334  2B40               	goto	l988
 14000  2335                     l9132:	
 14001  2335  307D               	movlw	125
 14002  2336  0023               	movlb	3	; select bank3
 14003  2337  023F               	subwf	_bottomTactile_pressed^(0+384),w
 14004  2338  1803               	skipnc
 14005  2339  2B40               	goto	l988
 14006                           
 14007                           ;tactiles.c: 32: bottomTactile_pressed++;
 14008  233A  3001               	movlw	1
 14009  233B  0021               	movlb	1	; select bank1
 14010  233C  00B2               	movwf	??_read_bottom_tactile^(0+128)
 14011  233D  0832               	movf	??_read_bottom_tactile^(0+128),w
 14012  233E  0023               	movlb	3	; select bank3
 14013  233F  07BF               	addwf	_bottomTactile_pressed^(0+384),f
 14014  2340                     l988:	
 14015                           
 14016                           ;tactiles.c: 33: }
 14017                           ;tactiles.c: 36: if (bottomTactile_pressed == 0) {
 14018  2340  083F               	movf	_bottomTactile_pressed^(0+384),w
 14019  2341  1D03               	btfss	3,2
 14020  2342  0008               	return
 14021                           
 14022                           ;tactiles.c: 37: bottom_push_state = bottom_push_state + 1;
 14023  2343  0020               	movlb	0	; select bank0
 14024  2344  0848               	movf	_bottom_push_state,w
 14025  2345  3E01               	addlw	1
 14026  2346  00C8               	movwf	_bottom_push_state
 14027  2347  3000               	movlw	0
 14028  2348  3D49               	addwfc	_bottom_push_state+1,w
 14029  2349  00C9               	movwf	_bottom_push_state+1
 14030                           
 14031                           ;tactiles.c: 38: if (bottom_push_state > 5) {
 14032  234A  0849               	movf	_bottom_push_state+1,w
 14033  234B  3A80               	xorlw	128
 14034  234C  0021               	movlb	1	; select bank1
 14035  234D  00B2               	movwf	??_read_bottom_tactile^(0+128)
 14036  234E  3080               	movlw	128
 14037  234F  0232               	subwf	??_read_bottom_tactile^(0+128),w
 14038  2350  1D03               	skipz
 14039  2351  2B55               	goto	u10145
 14040  2352  3006               	movlw	6
 14041  2353  0020               	movlb	0	; select bank0
 14042  2354  0248               	subwf	_bottom_push_state,w
 14043  2355                     u10145:	
 14044  2355  1C03               	skipc
 14045  2356  2B5C               	goto	l9142
 14046                           
 14047                           ;tactiles.c: 39: bottom_push_state = 1;
 14048  2357  3001               	movlw	1
 14049  2358  0020               	movlb	0	; select bank0
 14050  2359  00C8               	movwf	_bottom_push_state
 14051  235A  3000               	movlw	0
 14052  235B  00C9               	movwf	_bottom_push_state+1
 14053  235C                     l9142:	
 14054                           
 14055                           ;tactiles.c: 40: }
 14056                           ;tactiles.c: 41: modulation_changed = 1;
 14057  235C  0023               	movlb	3	; select bank3
 14058  235D  01C7               	clrf	_modulation_changed^(0+384)
 14059  235E  0AC7               	incf	_modulation_changed^(0+384),f
 14060                           
 14061                           ;tactiles.c: 42: set_leds_bottom(bottom_push_state);
 14062  235F  0020               	movlb	0	; select bank0
 14063  2360  0849               	movf	_bottom_push_state+1,w
 14064  2361  0021               	movlb	1	; select bank1
 14065  2362  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
 14066  2363  0020               	movlb	0	; select bank0
 14067  2364  0848               	movf	_bottom_push_state,w
 14068  2365  0021               	movlb	1	; select bank1
 14069  2366  00A0               	movwf	set_leds_bottom@x^(0+128)
 14070  2367  31A0  206F  31A3   	fcall	_set_leds_bottom
 14071  236A                     l992:	
 14072                           ;tactiles.c: 44: while (PORTDbits.RD6 == 0) {
 14073                           
 14074  236A  0020               	movlb	0	; select bank0
 14075  236B  1F0F               	btfss	15,6	;volatile
 14076  236C  2B6A               	goto	l992
 14077                           
 14078                           ;tactiles.c: 45: }
 14079                           ;tactiles.c: 46: wait_ms(20);
 14080  236D  3014               	movlw	20
 14081  236E  0021               	movlb	1	; select bank1
 14082  236F  00AC               	movwf	wait_ms@timeSec^(0+128)
 14083  2370  3000               	movlw	0
 14084  2371  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 14085  2372  31A0  2003         	fcall	_wait_ms
 14086  2374  0008               	return
 14087  2375                     __end_of_read_bottom_tactile:	
 14088                           
 14089                           	psect	text34
 14090  1A11                     __ptext34:	
 14091 ;; *************** function _map *****************
 14092 ;; Defined at:
 14093 ;;		line 177 in file "user.c"
 14094 ;; Parameters:    Size  Location     Type
 14095 ;;  x               3   62[BANK1 ] float 
 14096 ;;  in_min          3   65[BANK1 ] float 
 14097 ;;  in_max          3   68[BANK1 ] float 
 14098 ;;  out_min         3   71[BANK1 ] float 
 14099 ;;  out_max         3   74[BANK1 ] float 
 14100 ;; Auto vars:     Size  Location     Type
 14101 ;;		None
 14102 ;; Return value:  Size  Location     Type
 14103 ;;                  3   62[BANK1 ] float 
 14104 ;; Registers used:
 14105 ;;		wreg, status,2, status,0, pclath, cstack
 14106 ;; Tracked objects:
 14107 ;;		On entry : 0/0
 14108 ;;		On exit  : 0/0
 14109 ;;		Unchanged: 0/0
 14110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14111 ;;      Params:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14112 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14114 ;;      Totals:         0       0      18       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14115 ;;Total ram usage:       18 bytes
 14116 ;; Hardware stack levels used:    1
 14117 ;; Hardware stack levels required when called:    5
 14118 ;; This function calls:
 14119 ;;		___ftadd
 14120 ;;		___ftdiv
 14121 ;;		___ftmul
 14122 ;;		___ftneg
 14123 ;; This function is called by:
 14124 ;;		_main
 14125 ;; This function uses a non-reentrant model
 14126 ;;
 14127                           
 14128                           
 14129                           ;psect for function _map
 14130  1A11                     _map:	
 14131                           
 14132                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 14133                           
 14134                           ;incstack = 0
 14135                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
 14136  1A11  0021               	movlb	1	; select bank1
 14137  1A12  0864               	movf	map@in_max^(0+128),w
 14138  1A13  00C1               	movwf	___ftadd@f1^(0+128)
 14139  1A14  0865               	movf	(map@in_max+1)^(0+128),w
 14140  1A15  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 14141  1A16  0866               	movf	(map@in_max+2)^(0+128),w
 14142  1A17  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 14143  1A18  0861               	movf	map@in_min^(0+128),w
 14144  1A19  00BE               	movwf	___ftneg@f1^(0+128)
 14145  1A1A  0862               	movf	(map@in_min+1)^(0+128),w
 14146  1A1B  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 14147  1A1C  0863               	movf	(map@in_min+2)^(0+128),w
 14148  1A1D  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 14149  1A1E  31AC  2497  319A   	fcall	___ftneg
 14150  1A21  0021               	movlb	1	; select bank1
 14151  1A22  083E               	movf	?___ftneg^(0+128),w
 14152  1A23  00C4               	movwf	___ftadd@f2^(0+128)
 14153  1A24  083F               	movf	(?___ftneg+1)^(0+128),w
 14154  1A25  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 14155  1A26  0840               	movf	(?___ftneg+2)^(0+128),w
 14156  1A27  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 14157  1A28  319F  270A  319A   	fcall	___ftadd
 14158  1A2B  0021               	movlb	1	; select bank1
 14159  1A2C  0841               	movf	?___ftadd^(0+128),w
 14160  1A2D  00CE               	movwf	___ftdiv@f2^(0+128)
 14161  1A2E  0842               	movf	(?___ftadd+1)^(0+128),w
 14162  1A2F  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 14163  1A30  0843               	movf	(?___ftadd+2)^(0+128),w
 14164  1A31  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 14165  1A32  086A               	movf	map@out_max^(0+128),w
 14166  1A33  00C1               	movwf	___ftadd@f1^(0+128)
 14167  1A34  086B               	movf	(map@out_max+1)^(0+128),w
 14168  1A35  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 14169  1A36  086C               	movf	(map@out_max+2)^(0+128),w
 14170  1A37  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 14171  1A38  0867               	movf	map@out_min^(0+128),w
 14172  1A39  00BE               	movwf	___ftneg@f1^(0+128)
 14173  1A3A  0868               	movf	(map@out_min+1)^(0+128),w
 14174  1A3B  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 14175  1A3C  0869               	movf	(map@out_min+2)^(0+128),w
 14176  1A3D  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 14177  1A3E  31AC  2497  319A   	fcall	___ftneg
 14178  1A41  0021               	movlb	1	; select bank1
 14179  1A42  083E               	movf	?___ftneg^(0+128),w
 14180  1A43  00C4               	movwf	___ftadd@f2^(0+128)
 14181  1A44  083F               	movf	(?___ftneg+1)^(0+128),w
 14182  1A45  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 14183  1A46  0840               	movf	(?___ftneg+2)^(0+128),w
 14184  1A47  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 14185  1A48  319F  270A  319A   	fcall	___ftadd
 14186  1A4B  0021               	movlb	1	; select bank1
 14187  1A4C  0841               	movf	?___ftadd^(0+128),w
 14188  1A4D  00AE               	movwf	___ftmul@f1^(0+128)
 14189  1A4E  0842               	movf	(?___ftadd+1)^(0+128),w
 14190  1A4F  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 14191  1A50  0843               	movf	(?___ftadd+2)^(0+128),w
 14192  1A51  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 14193  1A52  085E               	movf	map@x^(0+128),w
 14194  1A53  00C1               	movwf	___ftadd@f1^(0+128)
 14195  1A54  085F               	movf	(map@x+1)^(0+128),w
 14196  1A55  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 14197  1A56  0860               	movf	(map@x+2)^(0+128),w
 14198  1A57  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 14199  1A58  0861               	movf	map@in_min^(0+128),w
 14200  1A59  00BE               	movwf	___ftneg@f1^(0+128)
 14201  1A5A  0862               	movf	(map@in_min+1)^(0+128),w
 14202  1A5B  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 14203  1A5C  0863               	movf	(map@in_min+2)^(0+128),w
 14204  1A5D  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 14205  1A5E  31AC  2497  319A   	fcall	___ftneg
 14206  1A61  0021               	movlb	1	; select bank1
 14207  1A62  083E               	movf	?___ftneg^(0+128),w
 14208  1A63  00C4               	movwf	___ftadd@f2^(0+128)
 14209  1A64  083F               	movf	(?___ftneg+1)^(0+128),w
 14210  1A65  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 14211  1A66  0840               	movf	(?___ftneg+2)^(0+128),w
 14212  1A67  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 14213  1A68  319F  270A  319A   	fcall	___ftadd
 14214  1A6B  0021               	movlb	1	; select bank1
 14215  1A6C  0841               	movf	?___ftadd^(0+128),w
 14216  1A6D  00B1               	movwf	___ftmul@f2^(0+128)
 14217  1A6E  0842               	movf	(?___ftadd+1)^(0+128),w
 14218  1A6F  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 14219  1A70  0843               	movf	(?___ftadd+2)^(0+128),w
 14220  1A71  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 14221  1A72  319E  2656  319A   	fcall	___ftmul
 14222  1A75  0021               	movlb	1	; select bank1
 14223  1A76  082E               	movf	?___ftmul^(0+128),w
 14224  1A77  00D1               	movwf	___ftdiv@f1^(0+128)
 14225  1A78  082F               	movf	(?___ftmul+1)^(0+128),w
 14226  1A79  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 14227  1A7A  0830               	movf	(?___ftmul+2)^(0+128),w
 14228  1A7B  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 14229  1A7C  319C  244F  319A   	fcall	___ftdiv
 14230  1A7F  0021               	movlb	1	; select bank1
 14231  1A80  084E               	movf	?___ftdiv^(0+128),w
 14232  1A81  00ED               	movwf	_map$2902^(0+128)
 14233  1A82  084F               	movf	(?___ftdiv+1)^(0+128),w
 14234  1A83  00EE               	movwf	(_map$2902+1)^(0+128)
 14235  1A84  0850               	movf	(?___ftdiv+2)^(0+128),w
 14236  1A85  00EF               	movwf	(_map$2902+2)^(0+128)
 14237                           
 14238                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 14239  1A86  0867               	movf	map@out_min^(0+128),w
 14240  1A87  00C1               	movwf	___ftadd@f1^(0+128)
 14241  1A88  0868               	movf	(map@out_min+1)^(0+128),w
 14242  1A89  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 14243  1A8A  0869               	movf	(map@out_min+2)^(0+128),w
 14244  1A8B  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 14245  1A8C  086D               	movf	_map$2902^(0+128),w
 14246  1A8D  00C4               	movwf	___ftadd@f2^(0+128)
 14247  1A8E  086E               	movf	(_map$2902+1)^(0+128),w
 14248  1A8F  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 14249  1A90  086F               	movf	(_map$2902+2)^(0+128),w
 14250  1A91  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 14251  1A92  319F  270A         	fcall	___ftadd
 14252  1A94  0021               	movlb	1	; select bank1
 14253  1A95  0841               	movf	?___ftadd^(0+128),w
 14254  1A96  00DE               	movwf	?_map^(0+128)
 14255  1A97  0842               	movf	(?___ftadd+1)^(0+128),w
 14256  1A98  00DF               	movwf	(?_map+1)^(0+128)
 14257  1A99  0843               	movf	(?___ftadd+2)^(0+128),w
 14258  1A9A  00E0               	movwf	(?_map+2)^(0+128)
 14259  1A9B  0008               	return
 14260  1A9C                     __end_of_map:	
 14261                           
 14262                           	psect	text35
 14263  2CC2                     __ptext35:	
 14264 ;; *************** function _initSwitchBypass *****************
 14265 ;; Defined at:
 14266 ;;		line 29 in file "SwitchBypass.c"
 14267 ;; Parameters:    Size  Location     Type
 14268 ;;		None
 14269 ;; Auto vars:     Size  Location     Type
 14270 ;;  initState       2   26[BANK1 ] int 
 14271 ;; Return value:  Size  Location     Type
 14272 ;;                  1    wreg      void 
 14273 ;; Registers used:
 14274 ;;		wreg, status,2, status,0, pclath, cstack
 14275 ;; Tracked objects:
 14276 ;;		On entry : 0/0
 14277 ;;		On exit  : 0/0
 14278 ;;		Unchanged: 0/0
 14279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14281 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14283 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14284 ;;Total ram usage:        2 bytes
 14285 ;; Hardware stack levels used:    1
 14286 ;; Hardware stack levels required when called:    7
 14287 ;; This function calls:
 14288 ;;		_getSwitchBypassState
 14289 ;;		_setSwitchBypassState
 14290 ;; This function is called by:
 14291 ;;		_main
 14292 ;; This function uses a non-reentrant model
 14293 ;;
 14294                           
 14295                           
 14296                           ;psect for function _initSwitchBypass
 14297  2CC2                     _initSwitchBypass:	
 14298                           
 14299                           ;SwitchBypass.c: 30: int initState = getSwitchBypassState();
 14300                           
 14301                           ;incstack = 0
 14302                           ; Regs used in _initSwitchBypass: [wreg+status,2+status,0+pclath+cstack]
 14303  2CC2  31AC  2486  31AC   	fcall	_getSwitchBypassState
 14304  2CC5  0021               	movlb	1	; select bank1
 14305  2CC6  0821               	movf	(?_getSwitchBypassState+1)^(0+128),w
 14306  2CC7  00BB               	movwf	(initSwitchBypass@initState+1)^(0+128)
 14307  2CC8  0820               	movf	?_getSwitchBypassState^(0+128),w
 14308  2CC9  00BA               	movwf	initSwitchBypass@initState^(0+128)
 14309                           
 14310                           ;SwitchBypass.c: 31: setSwitchBypassState(initState);
 14311  2CCA  083B               	movf	(initSwitchBypass@initState+1)^(0+128),w
 14312  2CCB  00B7               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
 14313  2CCC  083A               	movf	initSwitchBypass@initState^(0+128),w
 14314  2CCD  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
 14315  2CCE  31AD  258C         	fcall	_setSwitchBypassState
 14316  2CD0  0008               	return
 14317  2CD1                     __end_of_initSwitchBypass:	
 14318                           
 14319                           	psect	text36
 14320  2D8C                     __ptext36:	
 14321 ;; *************** function _setSwitchBypassState *****************
 14322 ;; Defined at:
 14323 ;;		line 140 in file "SwitchBypass.c"
 14324 ;; Parameters:    Size  Location     Type
 14325 ;;  f_state         2   22[BANK1 ] int 
 14326 ;; Auto vars:     Size  Location     Type
 14327 ;;		None
 14328 ;; Return value:  Size  Location     Type
 14329 ;;                  1    wreg      void 
 14330 ;; Registers used:
 14331 ;;		wreg, status,2, status,0, pclath, cstack
 14332 ;; Tracked objects:
 14333 ;;		On entry : 0/0
 14334 ;;		On exit  : 0/0
 14335 ;;		Unchanged: 0/0
 14336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14337 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14338 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14339 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14340 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14341 ;;Total ram usage:        4 bytes
 14342 ;; Hardware stack levels used:    1
 14343 ;; Hardware stack levels required when called:    6
 14344 ;; This function calls:
 14345 ;;		_setSwitchBypassRelays
 14346 ;; This function is called by:
 14347 ;;		_initSwitchBypass
 14348 ;;		_updateSwitchBypass
 14349 ;; This function uses a non-reentrant model
 14350 ;;
 14351                           
 14352                           
 14353                           ;psect for function _setSwitchBypassState
 14354  2D8C                     _setSwitchBypassState:	
 14355                           
 14356                           ;SwitchBypass.c: 141: if (switchBypass_state == f_state) {return;}
 14357                           
 14358                           ;incstack = 0
 14359                           ; Regs used in _setSwitchBypassState: [wreg+status,2+status,0+pclath+cstack]
 14360  2D8C  0020               	movlb	0	; select bank0
 14361  2D8D  0851               	movf	_switchBypass_state,w
 14362  2D8E  0021               	movlb	1	; select bank1
 14363  2D8F  00B8               	movwf	??_setSwitchBypassState^(0+128)
 14364  2D90  01B9               	clrf	(??_setSwitchBypassState^(0+128)+1)
 14365  2D91  0837               	movf	(setSwitchBypassState@f_state+1)^(0+128),w
 14366  2D92  0639               	xorwf	(??_setSwitchBypassState+1)^(0+128),w
 14367  2D93  1D03               	skipz
 14368  2D94  2D97               	goto	u9065
 14369  2D95  0836               	movf	setSwitchBypassState@f_state^(0+128),w
 14370  2D96  0638               	xorwf	??_setSwitchBypassState^(0+128),w
 14371  2D97                     u9065:	
 14372  2D97  1903               	btfsc	3,2
 14373  2D98  0008               	return
 14374                           
 14375                           ;SwitchBypass.c: 143: LATBbits.LATB2 = f_state;
 14376  2D99  0C36               	rrf	setSwitchBypassState@f_state^(0+128),w
 14377  2D9A  0022               	movlb	2	; select bank2
 14378  2D9B  1C03               	skipc
 14379  2D9C  110D               	bcf	13,2	;volatile
 14380  2D9D  1803               	skipnc
 14381  2D9E  150D               	bsf	13,2	;volatile
 14382                           
 14383                           ;SwitchBypass.c: 144: LATBbits.LATB3 = 0;
 14384  2D9F  118D               	bcf	13,3	;volatile
 14385                           
 14386                           ;SwitchBypass.c: 145: setSwitchBypassRelays(f_state);
 14387  2DA0  0021               	movlb	1	; select bank1
 14388  2DA1  0837               	movf	(setSwitchBypassState@f_state+1)^(0+128),w
 14389  2DA2  00B3               	movwf	(setSwitchBypassRelays@f_state+1)^(0+128)
 14390  2DA3  0836               	movf	setSwitchBypassState@f_state^(0+128),w
 14391  2DA4  00B2               	movwf	setSwitchBypassRelays@f_state^(0+128)
 14392  2DA5  31AF  2792         	fcall	_setSwitchBypassRelays
 14393  2DA7  0008               	return
 14394  2DA8                     __end_of_setSwitchBypassState:	
 14395                           
 14396                           	psect	text37
 14397  2F92                     __ptext37:	
 14398 ;; *************** function _setSwitchBypassRelays *****************
 14399 ;; Defined at:
 14400 ;;		line 148 in file "SwitchBypass.c"
 14401 ;; Parameters:    Size  Location     Type
 14402 ;;  f_state         2   18[BANK1 ] int 
 14403 ;; Auto vars:     Size  Location     Type
 14404 ;;		None
 14405 ;; Return value:  Size  Location     Type
 14406 ;;                  1    wreg      void 
 14407 ;; Registers used:
 14408 ;;		wreg, status,2, status,0, pclath, cstack
 14409 ;; Tracked objects:
 14410 ;;		On entry : 0/0
 14411 ;;		On exit  : 0/0
 14412 ;;		Unchanged: 0/0
 14413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14414 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14415 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14416 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14417 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14418 ;;Total ram usage:        4 bytes
 14419 ;; Hardware stack levels used:    1
 14420 ;; Hardware stack levels required when called:    5
 14421 ;; This function calls:
 14422 ;;		_updateSwitchBypassState
 14423 ;;		_wait_ms
 14424 ;; This function is called by:
 14425 ;;		_updateSwitchBypass
 14426 ;;		_setSwitchBypassState
 14427 ;; This function uses a non-reentrant model
 14428 ;;
 14429                           
 14430                           
 14431                           ;psect for function _setSwitchBypassRelays
 14432  2F92                     _setSwitchBypassRelays:	
 14433                           
 14434                           ;SwitchBypass.c: 149: switchBypass_state = f_state;
 14435                           
 14436                           ;incstack = 0
 14437                           ; Regs used in _setSwitchBypassRelays: [wreg+status,2+status,0+pclath+cstack]
 14438  2F92  0021               	movlb	1	; select bank1
 14439  2F93  0832               	movf	setSwitchBypassRelays@f_state^(0+128),w
 14440  2F94  00B4               	movwf	??_setSwitchBypassRelays^(0+128)
 14441  2F95  0834               	movf	??_setSwitchBypassRelays^(0+128),w
 14442  2F96  0020               	movlb	0	; select bank0
 14443  2F97  00D1               	movwf	_switchBypass_state
 14444                           
 14445                           ;SwitchBypass.c: 150: LATGbits.LATG2 = f_state;
 14446  2F98  0021               	movlb	1	; select bank1
 14447  2F99  0C32               	rrf	setSwitchBypassRelays@f_state^(0+128),w
 14448  2F9A  0027               	movlb	7	; select bank7
 14449  2F9B  1C03               	skipc
 14450  2F9C  110D               	bcf	13,2	;volatile
 14451  2F9D  1803               	skipnc
 14452  2F9E  150D               	bsf	13,2	;volatile
 14453                           
 14454                           ;SwitchBypass.c: 151: LATGbits.LATG1 = !f_state;
 14455  2F9F  0021               	movlb	1	; select bank1
 14456  2FA0  0832               	movf	setSwitchBypassRelays@f_state^(0+128),w
 14457  2FA1  0433               	iorwf	(setSwitchBypassRelays@f_state+1)^(0+128),w
 14458  2FA2  1D03               	btfss	3,2
 14459  2FA3  2FA7               	goto	u8760
 14460  2FA4  0027               	movlb	7	; select bank7
 14461  2FA5  148D               	bsf	13,1	;volatile
 14462  2FA6  2FA9               	goto	l8300
 14463  2FA7                     u8760:	
 14464  2FA7  0027               	movlb	7	; select bank7
 14465  2FA8  108D               	bcf	13,1	;volatile
 14466  2FA9                     l8300:	
 14467                           
 14468                           ;SwitchBypass.c: 153: wait_ms(20);
 14469  2FA9  3014               	movlw	20
 14470  2FAA  0021               	movlb	1	; select bank1
 14471  2FAB  00AC               	movwf	wait_ms@timeSec^(0+128)
 14472  2FAC  3000               	movlw	0
 14473  2FAD  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 14474  2FAE  31A0  2003  31AF   	fcall	_wait_ms
 14475                           
 14476                           ;SwitchBypass.c: 155: LATGbits.LATG2 = 0;
 14477  2FB1  0027               	movlb	7	; select bank7
 14478  2FB2  110D               	bcf	13,2	;volatile
 14479                           
 14480                           ;SwitchBypass.c: 156: LATGbits.LATG1 = 0;
 14481  2FB3  108D               	bcf	13,1	;volatile
 14482                           
 14483                           ;SwitchBypass.c: 158: updateSwitchBypassState(switchBypass_state);
 14484  2FB4  0020               	movlb	0	; select bank0
 14485  2FB5  0851               	movf	_switchBypass_state,w
 14486  2FB6  0021               	movlb	1	; select bank1
 14487  2FB7  00B4               	movwf	??_setSwitchBypassRelays^(0+128)
 14488  2FB8  01B5               	clrf	(??_setSwitchBypassRelays^(0+128)+1)
 14489  2FB9  0834               	movf	??_setSwitchBypassRelays^(0+128),w
 14490  2FBA  00A0               	movwf	updateSwitchBypassState@state^(0+128)
 14491  2FBB  0835               	movf	(??_setSwitchBypassRelays+1)^(0+128),w
 14492  2FBC  00A1               	movwf	(updateSwitchBypassState@state+1)^(0+128)
 14493  2FBD  3180  2003  31AF   	fcall	_updateSwitchBypassState
 14494                           
 14495                           ;SwitchBypass.c: 159: wait_ms(20);
 14496  2FC0  3014               	movlw	20
 14497  2FC1  0021               	movlb	1	; select bank1
 14498  2FC2  00AC               	movwf	wait_ms@timeSec^(0+128)
 14499  2FC3  3000               	movlw	0
 14500  2FC4  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 14501  2FC5  31A0  2003         	fcall	_wait_ms
 14502  2FC7  0008               	return
 14503  2FC8                     __end_of_setSwitchBypassRelays:	
 14504                           
 14505                           	psect	text38
 14506  2003                     __ptext38:	
 14507 ;; *************** function _wait_ms *****************
 14508 ;; Defined at:
 14509 ;;		line 23 in file "system.c"
 14510 ;; Parameters:    Size  Location     Type
 14511 ;;  timeSec         2   12[BANK1 ] unsigned int 
 14512 ;; Auto vars:     Size  Location     Type
 14513 ;;  timemsl         4   14[BANK1 ] long 
 14514 ;; Return value:  Size  Location     Type
 14515 ;;                  1    wreg      void 
 14516 ;; Registers used:
 14517 ;;		wreg, status,2, status,0, pclath, cstack
 14518 ;; Tracked objects:
 14519 ;;		On entry : 0/0
 14520 ;;		On exit  : 0/0
 14521 ;;		Unchanged: 0/0
 14522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14523 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14524 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14526 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14527 ;;Total ram usage:        6 bytes
 14528 ;; Hardware stack levels used:    1
 14529 ;; Hardware stack levels required when called:    4
 14530 ;; This function calls:
 14531 ;;		___lmul
 14532 ;; This function is called by:
 14533 ;;		_ring_tactiles
 14534 ;;		_solidring_tactiles
 14535 ;;		_read_bottom_tactile
 14536 ;;		_read_top_tactile
 14537 ;;		_setSwitchBypassRelays
 14538 ;;		_setDoublePressState
 14539 ;;		_showError_Alternating
 14540 ;;		_show_error
 14541 ;;		_show_cancel
 14542 ;;		_star_tactiles
 14543 ;;		_initExpModeState
 14544 ;; This function uses a non-reentrant model
 14545 ;;
 14546                           
 14547                           
 14548                           ;psect for function _wait_ms
 14549  2003                     _wait_ms:	
 14550                           
 14551                           ;system.c: 25: long timemsl = 0;
 14552                           
 14553                           ;incstack = 0
 14554                           ; Regs used in _wait_ms: [wreg+status,2+status,0+pclath+cstack]
 14555  2003  3000               	movlw	0
 14556  2004  0021               	movlb	1	; select bank1
 14557  2005  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 14558  2006  3000               	movlw	0
 14559  2007  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 14560  2008  3000               	movlw	0
 14561  2009  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 14562  200A  3000               	movlw	0
 14563  200B  00AE               	movwf	wait_ms@timemsl^(0+128)
 14564                           
 14565                           ;system.c: 26: timemsl = timeSec * 1000l;
 14566  200C  082C               	movf	wait_ms@timeSec^(0+128),w
 14567  200D  00A0               	movwf	___lmul@multiplier^(0+128)
 14568  200E  082D               	movf	(wait_ms@timeSec+1)^(0+128),w
 14569  200F  00A1               	movwf	(___lmul@multiplier^(0+128)+1)
 14570  2010  01A2               	clrf	(___lmul@multiplier^(0+128)+2)
 14571  2011  01A3               	clrf	(___lmul@multiplier^(0+128)+3)
 14572  2012  3000               	movlw	0
 14573  2013  00A7               	movwf	(___lmul@multiplicand+3)^(0+128)
 14574  2014  3000               	movlw	0
 14575  2015  00A6               	movwf	(___lmul@multiplicand+2)^(0+128)
 14576  2016  3003               	movlw	3
 14577  2017  00A5               	movwf	(___lmul@multiplicand+1)^(0+128)
 14578  2018  30E8               	movlw	232
 14579  2019  00A4               	movwf	___lmul@multiplicand^(0+128)
 14580  201A  31AF  2762  31A0   	fcall	___lmul
 14581  201D  0021               	movlb	1	; select bank1
 14582  201E  0823               	movf	(?___lmul+3)^(0+128),w
 14583  201F  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 14584  2020  0822               	movf	(?___lmul+2)^(0+128),w
 14585  2021  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 14586  2022  0821               	movf	(?___lmul+1)^(0+128),w
 14587  2023  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 14588  2024  0820               	movf	?___lmul^(0+128),w
 14589  2025  00AE               	movwf	wait_ms@timemsl^(0+128)
 14590  2026                     l404:	
 14591                           ;system.c: 27: for( ; timemsl; timemsl--);
 14592                           
 14593  2026  0831               	movf	(wait_ms@timemsl+3)^(0+128),w
 14594  2027  0430               	iorwf	(wait_ms@timemsl+2)^(0+128),w
 14595  2028  042F               	iorwf	(wait_ms@timemsl+1)^(0+128),w
 14596  2029  042E               	iorwf	wait_ms@timemsl^(0+128),w
 14597  202A  1903               	btfsc	3,2
 14598  202B  0008               	return
 14599  202C  30FF               	movlw	255
 14600  202D  07AE               	addwf	wait_ms@timemsl^(0+128),f
 14601  202E  30FF               	movlw	255
 14602  202F  3DAF               	addwfc	(wait_ms@timemsl+1)^(0+128),f
 14603  2030  30FF               	movlw	255
 14604  2031  3DB0               	addwfc	(wait_ms@timemsl+2)^(0+128),f
 14605  2032  30FF               	movlw	255
 14606  2033  3DB1               	addwfc	(wait_ms@timemsl+3)^(0+128),f
 14607  2034  2826               	goto	l404
 14608  2035                     __end_of_wait_ms:	
 14609                           
 14610                           	psect	text39
 14611  2F62                     __ptext39:	
 14612 ;; *************** function ___lmul *****************
 14613 ;; Defined at:
 14614 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 14615 ;; Parameters:    Size  Location     Type
 14616 ;;  multiplier      4    0[BANK1 ] unsigned long 
 14617 ;;  multiplicand    4    4[BANK1 ] unsigned long 
 14618 ;; Auto vars:     Size  Location     Type
 14619 ;;  product         4    8[BANK1 ] unsigned long 
 14620 ;; Return value:  Size  Location     Type
 14621 ;;                  4    0[BANK1 ] unsigned long 
 14622 ;; Registers used:
 14623 ;;		wreg, status,2, status,0
 14624 ;; Tracked objects:
 14625 ;;		On entry : 0/0
 14626 ;;		On exit  : 0/0
 14627 ;;		Unchanged: 0/0
 14628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14629 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14630 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14632 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14633 ;;Total ram usage:       12 bytes
 14634 ;; Hardware stack levels used:    1
 14635 ;; Hardware stack levels required when called:    3
 14636 ;; This function calls:
 14637 ;;		Nothing
 14638 ;; This function is called by:
 14639 ;;		_wait_ms
 14640 ;; This function uses a non-reentrant model
 14641 ;;
 14642                           
 14643                           
 14644                           ;psect for function ___lmul
 14645  2F62                     ___lmul:	
 14646                           
 14647                           ;incstack = 0
 14648                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 14649  2F62  3000               	movlw	0
 14650  2F63  0021               	movlb	1	; select bank1
 14651  2F64  00AB               	movwf	(___lmul@product+3)^(0+128)
 14652  2F65  3000               	movlw	0
 14653  2F66  00AA               	movwf	(___lmul@product+2)^(0+128)
 14654  2F67  3000               	movlw	0
 14655  2F68  00A9               	movwf	(___lmul@product+1)^(0+128)
 14656  2F69  3000               	movlw	0
 14657  2F6A  00A8               	movwf	___lmul@product^(0+128)
 14658  2F6B                     l7746:	
 14659  2F6B  1C20               	btfss	___lmul@multiplier^(0+128),0
 14660  2F6C  2F75               	goto	l7750
 14661  2F6D  0824               	movf	___lmul@multiplicand^(0+128),w
 14662  2F6E  07A8               	addwf	___lmul@product^(0+128),f
 14663  2F6F  0825               	movf	(___lmul@multiplicand+1)^(0+128),w
 14664  2F70  3DA9               	addwfc	(___lmul@product+1)^(0+128),f
 14665  2F71  0826               	movf	(___lmul@multiplicand+2)^(0+128),w
 14666  2F72  3DAA               	addwfc	(___lmul@product+2)^(0+128),f
 14667  2F73  0827               	movf	(___lmul@multiplicand+3)^(0+128),w
 14668  2F74  3DAB               	addwfc	(___lmul@product+3)^(0+128),f
 14669  2F75                     l7750:	
 14670  2F75  3001               	movlw	1
 14671  2F76                     u7795:	
 14672  2F76  35A4               	lslf	___lmul@multiplicand^(0+128),f
 14673  2F77  0DA5               	rlf	(___lmul@multiplicand+1)^(0+128),f
 14674  2F78  0DA6               	rlf	(___lmul@multiplicand+2)^(0+128),f
 14675  2F79  0DA7               	rlf	(___lmul@multiplicand+3)^(0+128),f
 14676  2F7A  0B89               	decfsz	9,f
 14677  2F7B  2F76               	goto	u7795
 14678  2F7C  3001               	movlw	1
 14679  2F7D                     u7805:	
 14680  2F7D  36A3               	lsrf	(___lmul@multiplier+3)^(0+128),f
 14681  2F7E  0CA2               	rrf	(___lmul@multiplier+2)^(0+128),f
 14682  2F7F  0CA1               	rrf	(___lmul@multiplier+1)^(0+128),f
 14683  2F80  0CA0               	rrf	___lmul@multiplier^(0+128),f
 14684  2F81  0B89               	decfsz	9,f
 14685  2F82  2F7D               	goto	u7805
 14686  2F83  0823               	movf	(___lmul@multiplier+3)^(0+128),w
 14687  2F84  0422               	iorwf	(___lmul@multiplier+2)^(0+128),w
 14688  2F85  0421               	iorwf	(___lmul@multiplier+1)^(0+128),w
 14689  2F86  0420               	iorwf	___lmul@multiplier^(0+128),w
 14690  2F87  1D03               	skipz
 14691  2F88  2F6B               	goto	l7746
 14692  2F89  082B               	movf	(___lmul@product+3)^(0+128),w
 14693  2F8A  00A3               	movwf	(?___lmul+3)^(0+128)
 14694  2F8B  082A               	movf	(___lmul@product+2)^(0+128),w
 14695  2F8C  00A2               	movwf	(?___lmul+2)^(0+128)
 14696  2F8D  0829               	movf	(___lmul@product+1)^(0+128),w
 14697  2F8E  00A1               	movwf	(?___lmul+1)^(0+128)
 14698  2F8F  0828               	movf	___lmul@product^(0+128),w
 14699  2F90  00A0               	movwf	?___lmul^(0+128)
 14700  2F91  0008               	return
 14701  2F92                     __end_of___lmul:	
 14702                           
 14703                           	psect	text40
 14704  0003                     __ptext40:	
 14705 ;; *************** function _updateSwitchBypassState *****************
 14706 ;; Defined at:
 14707 ;;		line 96 in file "state_manager.c"
 14708 ;; Parameters:    Size  Location     Type
 14709 ;;  state           2    0[BANK1 ] int 
 14710 ;; Auto vars:     Size  Location     Type
 14711 ;;		None
 14712 ;; Return value:  Size  Location     Type
 14713 ;;                  1    wreg      void 
 14714 ;; Registers used:
 14715 ;;		None
 14716 ;; Tracked objects:
 14717 ;;		On entry : 0/0
 14718 ;;		On exit  : 0/0
 14719 ;;		Unchanged: 0/0
 14720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14721 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14724 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14725 ;;Total ram usage:        2 bytes
 14726 ;; Hardware stack levels used:    1
 14727 ;; Hardware stack levels required when called:    3
 14728 ;; This function calls:
 14729 ;;		Nothing
 14730 ;; This function is called by:
 14731 ;;		_setSwitchBypassRelays
 14732 ;; This function uses a non-reentrant model
 14733 ;;
 14734                           
 14735                           
 14736                           ;psect for function _updateSwitchBypassState
 14737  0003                     _updateSwitchBypassState:	
 14738                           
 14739                           ;incstack = 0
 14740                           ; Regs used in _updateSwitchBypassState: []
 14741  0003  0008               	return
 14742  0004                     __end_of_updateSwitchBypassState:	
 14743                           
 14744                           	psect	text41
 14745  2C86                     __ptext41:	
 14746 ;; *************** function _getSwitchBypassState *****************
 14747 ;; Defined at:
 14748 ;;		line 103 in file "state_manager.c"
 14749 ;; Parameters:    Size  Location     Type
 14750 ;;		None
 14751 ;; Auto vars:     Size  Location     Type
 14752 ;;		None
 14753 ;; Return value:  Size  Location     Type
 14754 ;;                  2    0[BANK1 ] int 
 14755 ;; Registers used:
 14756 ;;		status,2
 14757 ;; Tracked objects:
 14758 ;;		On entry : 0/0
 14759 ;;		On exit  : 0/0
 14760 ;;		Unchanged: 0/0
 14761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14762 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14765 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14766 ;;Total ram usage:        2 bytes
 14767 ;; Hardware stack levels used:    1
 14768 ;; Hardware stack levels required when called:    3
 14769 ;; This function calls:
 14770 ;;		Nothing
 14771 ;; This function is called by:
 14772 ;;		_initSwitchBypass
 14773 ;; This function uses a non-reentrant model
 14774 ;;
 14775                           
 14776                           
 14777                           ;psect for function _getSwitchBypassState
 14778  2C86                     _getSwitchBypassState:	
 14779                           
 14780                           ;state_manager.c: 108: return 0;
 14781                           
 14782                           ;incstack = 0
 14783                           ; Regs used in _getSwitchBypassState: [status,2]
 14784  2C86  0021               	movlb	1	; select bank1
 14785  2C87  01A0               	clrf	?_getSwitchBypassState^(0+128)
 14786  2C88  01A1               	clrf	(?_getSwitchBypassState+1)^(0+128)
 14787  2C89  0008               	return
 14788  2C8A                     __end_of_getSwitchBypassState:	
 14789                           
 14790                           	psect	text42
 14791  24B6                     __ptext42:	
 14792 ;; *************** function _getModulationDelayTime *****************
 14793 ;; Defined at:
 14794 ;;		line 35 in file "modulation.c"
 14795 ;; Parameters:    Size  Location     Type
 14796 ;;		None
 14797 ;; Auto vars:     Size  Location     Type
 14798 ;;  subDiv          2   14[BANK2 ] int 
 14799 ;; Return value:  Size  Location     Type
 14800 ;;                  1    wreg      void 
 14801 ;; Registers used:
 14802 ;;		wreg, status,2, status,0, pclath, cstack
 14803 ;; Tracked objects:
 14804 ;;		On entry : 0/0
 14805 ;;		On exit  : 0/0
 14806 ;;		Unchanged: 0/0
 14807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14809 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14811 ;;      Totals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14812 ;;Total ram usage:        2 bytes
 14813 ;; Hardware stack levels used:    1
 14814 ;; Hardware stack levels required when called:    5
 14815 ;; This function calls:
 14816 ;;		___altoft
 14817 ;;		___awtoft
 14818 ;;		___ftdiv
 14819 ;;		___fttol
 14820 ;;		_getModulationSubdivision
 14821 ;; This function is called by:
 14822 ;;		_main
 14823 ;; This function uses a non-reentrant model
 14824 ;;
 14825                           
 14826                           
 14827                           ;psect for function _getModulationDelayTime
 14828  24B6                     _getModulationDelayTime:	
 14829                           
 14830                           ;modulation.c: 36: adjust_mod_delay = 0;
 14831                           
 14832                           ;incstack = 0
 14833                           ; Regs used in _getModulationDelayTime: [wreg+status,2+status,0+pclath+cstack]
 14834  24B6  0023               	movlb	3	; select bank3
 14835  24B7  01BE               	clrf	_adjust_mod_delay^(0+384)
 14836                           
 14837                           ;modulation.c: 37: int subDiv = getModulationSubdivision();
 14838  24B8  31AF  2732  31A4   	fcall	_getModulationSubdivision
 14839  24BB  0021               	movlb	1	; select bank1
 14840  24BC  0821               	movf	(?_getModulationSubdivision+1)^(0+128),w
 14841  24BD  0022               	movlb	2	; select bank2
 14842  24BE  00AF               	movwf	(getModulationDelayTime@subDiv+1)^(0+256)
 14843  24BF  0021               	movlb	1	; select bank1
 14844  24C0  0820               	movf	?_getModulationSubdivision^(0+128),w
 14845  24C1  0022               	movlb	2	; select bank2
 14846  24C2  00AE               	movwf	getModulationDelayTime@subDiv^(0+256)
 14847                           
 14848                           ;modulation.c: 38: mod_delay_time = (int)((float)delay_time/(float)subDiv);
 14849  24C3  0020               	movlb	0	; select bank0
 14850  24C4  0847               	movf	_delay_time+3,w	;volatile
 14851  24C5  0021               	movlb	1	; select bank1
 14852  24C6  00AB               	movwf	(___altoft@c+3)^(0+128)
 14853  24C7  0020               	movlb	0	; select bank0
 14854  24C8  0846               	movf	_delay_time+2,w	;volatile
 14855  24C9  0021               	movlb	1	; select bank1
 14856  24CA  00AA               	movwf	(___altoft@c+2)^(0+128)
 14857  24CB  0020               	movlb	0	; select bank0
 14858  24CC  0845               	movf	_delay_time+1,w	;volatile
 14859  24CD  0021               	movlb	1	; select bank1
 14860  24CE  00A9               	movwf	(___altoft@c+1)^(0+128)
 14861  24CF  0020               	movlb	0	; select bank0
 14862  24D0  0844               	movf	_delay_time,w	;volatile
 14863  24D1  0021               	movlb	1	; select bank1
 14864  24D2  00A8               	movwf	___altoft@c^(0+128)
 14865  24D3  31A0  20E6  31A4   	fcall	___altoft
 14866  24D6  0021               	movlb	1	; select bank1
 14867  24D7  0828               	movf	?___altoft^(0+128),w
 14868  24D8  00D1               	movwf	___ftdiv@f1^(0+128)
 14869  24D9  0829               	movf	(?___altoft+1)^(0+128),w
 14870  24DA  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 14871  24DB  082A               	movf	(?___altoft+2)^(0+128),w
 14872  24DC  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 14873  24DD  0022               	movlb	2	; select bank2
 14874  24DE  082F               	movf	(getModulationDelayTime@subDiv+1)^(0+256),w
 14875  24DF  0021               	movlb	1	; select bank1
 14876  24E0  00A9               	movwf	(___awtoft@c+1)^(0+128)
 14877  24E1  0022               	movlb	2	; select bank2
 14878  24E2  082E               	movf	getModulationDelayTime@subDiv^(0+256),w
 14879  24E3  0021               	movlb	1	; select bank1
 14880  24E4  00A8               	movwf	___awtoft@c^(0+128)
 14881  24E5  31AD  25E4  31A4   	fcall	___awtoft
 14882  24E8  0021               	movlb	1	; select bank1
 14883  24E9  0828               	movf	?___awtoft^(0+128),w
 14884  24EA  00CE               	movwf	___ftdiv@f2^(0+128)
 14885  24EB  0829               	movf	(?___awtoft+1)^(0+128),w
 14886  24EC  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 14887  24ED  082A               	movf	(?___awtoft+2)^(0+128),w
 14888  24EE  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 14889  24EF  319C  244F  31A4   	fcall	___ftdiv
 14890  24F2  0021               	movlb	1	; select bank1
 14891  24F3  084E               	movf	?___ftdiv^(0+128),w
 14892  24F4  0022               	movlb	2	; select bank2
 14893  24F5  00A0               	movwf	___fttol@f1^(0+256)
 14894  24F6  0021               	movlb	1	; select bank1
 14895  24F7  084F               	movf	(?___ftdiv+1)^(0+128),w
 14896  24F8  0022               	movlb	2	; select bank2
 14897  24F9  00A1               	movwf	(___fttol@f1+1)^(0+256)
 14898  24FA  0021               	movlb	1	; select bank1
 14899  24FB  0850               	movf	(?___ftdiv+2)^(0+128),w
 14900  24FC  0022               	movlb	2	; select bank2
 14901  24FD  00A2               	movwf	(___fttol@f1+2)^(0+256)
 14902  24FE  3199  218A         	fcall	___fttol
 14903  2500  0022               	movlb	2	; select bank2
 14904  2501  0821               	movf	(?___fttol^(0+256)+1),w
 14905  2502  0023               	movlb	3	; select bank3
 14906  2503  00DA               	movwf	(_mod_delay_time+1)^(0+384)
 14907  2504  0022               	movlb	2	; select bank2
 14908  2505  0820               	movf	?___fttol^(0+256),w
 14909  2506  0023               	movlb	3	; select bank3
 14910  2507  00D9               	movwf	_mod_delay_time^(0+384)
 14911  2508  0008               	return
 14912  2509                     __end_of_getModulationDelayTime:	
 14913                           
 14914                           	psect	text43
 14915  2F32                     __ptext43:	
 14916 ;; *************** function _getModulationSubdivision *****************
 14917 ;; Defined at:
 14918 ;;		line 26 in file "modulation.c"
 14919 ;; Parameters:    Size  Location     Type
 14920 ;;		None
 14921 ;; Auto vars:     Size  Location     Type
 14922 ;;		None
 14923 ;; Return value:  Size  Location     Type
 14924 ;;                  2    0[BANK1 ] int 
 14925 ;; Registers used:
 14926 ;;		wreg, status,2, status,0
 14927 ;; Tracked objects:
 14928 ;;		On entry : 0/0
 14929 ;;		On exit  : 0/0
 14930 ;;		Unchanged: 0/0
 14931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14932 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14935 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14936 ;;Total ram usage:        2 bytes
 14937 ;; Hardware stack levels used:    1
 14938 ;; Hardware stack levels required when called:    3
 14939 ;; This function calls:
 14940 ;;		Nothing
 14941 ;; This function is called by:
 14942 ;;		_getModulationDelayTime
 14943 ;;		_updateModulationArray
 14944 ;; This function uses a non-reentrant model
 14945 ;;
 14946                           
 14947                           
 14948                           ;psect for function _getModulationSubdivision
 14949  2F32                     _getModulationSubdivision:	
 14950                           
 14951                           ;modulation.c: 27: if (delay_time >= 2400) {
 14952                           
 14953                           ;incstack = 0
 14954                           ; Regs used in _getModulationSubdivision: [wreg+status,2+status,0]
 14955  2F32  0020               	movlb	0	; select bank0
 14956  2F33  1BC7               	btfsc	_delay_time+3,7	;volatile
 14957  2F34  2F47               	goto	l8464
 14958  2F35  0847               	movf	_delay_time+3,w	;volatile
 14959  2F36  1D03               	btfss	3,2
 14960  2F37  2F41               	goto	l8458
 14961  2F38  0846               	movf	_delay_time+2,w	;volatile
 14962  2F39  1D03               	btfss	3,2
 14963  2F3A  2F41               	goto	l8458
 14964  2F3B  3060               	movlw	96
 14965  2F3C  0244               	subwf	_delay_time,w	;volatile
 14966  2F3D  3009               	movlw	9
 14967  2F3E  3B45               	subwfb	_delay_time+1,w	;volatile
 14968  2F3F  1C03               	btfss	3,0
 14969  2F40  2F47               	goto	l8464
 14970  2F41                     l8458:	
 14971                           
 14972                           ;modulation.c: 28: return 120;
 14973  2F41  3078               	movlw	120
 14974  2F42  0021               	movlb	1	; select bank1
 14975  2F43  00A0               	movwf	?_getModulationSubdivision^(0+128)
 14976  2F44  3000               	movlw	0
 14977  2F45  00A1               	movwf	(?_getModulationSubdivision^(0+128)+1)
 14978                           
 14979                           ;modulation.c: 29: } else if (delay_time >= 600) {
 14980  2F46  0008               	return
 14981  2F47                     l8464:	
 14982  2F47  0020               	movlb	0	; select bank0
 14983  2F48  1BC7               	btfsc	_delay_time+3,7	;volatile
 14984  2F49  2F5C               	goto	l8472
 14985  2F4A  0847               	movf	_delay_time+3,w	;volatile
 14986  2F4B  1D03               	btfss	3,2
 14987  2F4C  2F56               	goto	l8466
 14988  2F4D  0846               	movf	_delay_time+2,w	;volatile
 14989  2F4E  1D03               	btfss	3,2
 14990  2F4F  2F56               	goto	l8466
 14991  2F50  3058               	movlw	88
 14992  2F51  0244               	subwf	_delay_time,w	;volatile
 14993  2F52  3002               	movlw	2
 14994  2F53  3B45               	subwfb	_delay_time+1,w	;volatile
 14995  2F54  1C03               	btfss	3,0
 14996  2F55  2F5C               	goto	l8472
 14997  2F56                     l8466:	
 14998                           
 14999                           ;modulation.c: 30: return 60;
 15000  2F56  303C               	movlw	60
 15001  2F57  0021               	movlb	1	; select bank1
 15002  2F58  00A0               	movwf	?_getModulationSubdivision^(0+128)
 15003  2F59  3000               	movlw	0
 15004  2F5A  00A1               	movwf	(?_getModulationSubdivision^(0+128)+1)
 15005                           
 15006                           ;modulation.c: 31: } else {
 15007  2F5B  0008               	return
 15008  2F5C                     l8472:	
 15009                           
 15010                           ;modulation.c: 32: return 30;
 15011  2F5C  301E               	movlw	30
 15012  2F5D  0021               	movlb	1	; select bank1
 15013  2F5E  00A0               	movwf	?_getModulationSubdivision^(0+128)
 15014  2F5F  3000               	movlw	0
 15015  2F60  00A1               	movwf	(?_getModulationSubdivision^(0+128)+1)
 15016  2F61  0008               	return
 15017  2F62                     __end_of_getModulationSubdivision:	
 15018                           
 15019                           	psect	text44
 15020  277F                     __ptext44:	
 15021 ;; *************** function _calcCosArray *****************
 15022 ;; Defined at:
 15023 ;;		line 18 in file "modulation.c"
 15024 ;; Parameters:    Size  Location     Type
 15025 ;;		None
 15026 ;; Auto vars:     Size  Location     Type
 15027 ;;  tmpVal          3   54[BANK2 ] int 
 15028 ;;  iAngle          1   57[BANK2 ] unsigned char 
 15029 ;; Return value:  Size  Location     Type
 15030 ;;                  1    wreg      void 
 15031 ;; Registers used:
 15032 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15033 ;; Tracked objects:
 15034 ;;		On entry : 0/0
 15035 ;;		On exit  : 0/0
 15036 ;;		Unchanged: 0/0
 15037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15039 ;;      Locals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15040 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15041 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15042 ;;Total ram usage:        8 bytes
 15043 ;; Hardware stack levels used:    1
 15044 ;; Hardware stack levels required when called:    8
 15045 ;; This function calls:
 15046 ;;		___awtoft
 15047 ;;		___ftdiv
 15048 ;;		___ftmul
 15049 ;;		___wmul
 15050 ;;		_cos
 15051 ;; This function is called by:
 15052 ;;		_main
 15053 ;; This function uses a non-reentrant model
 15054 ;;
 15055                           
 15056                           
 15057                           ;psect for function _calcCosArray
 15058  277F                     _calcCosArray:	
 15059                           
 15060                           ;modulation.c: 19: for (char iAngle = 0; iAngle < 120; iAngle++) {
 15061                           
 15062                           ;incstack = 0
 15063                           ; Regs used in _calcCosArray: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15064  277F  0022               	movlb	2	; select bank2
 15065  2780  01D9               	clrf	calcCosArray@iAngle^(0+256)
 15066  2781                     L17:	
 15067  2781  3078               	movlw	120
 15068  2782  0259               	subwf	calcCosArray@iAngle^(0+256),w
 15069  2783  1803               	btfsc	3,0
 15070  2784  0008               	return
 15071                           
 15072                           ;modulation.c: 20: double tmpVal = 3 * iAngle * 3.14159265358979323846/180.0;
 15073  2785  3000               	movlw	0
 15074  2786  0021               	movlb	1	; select bank1
 15075  2787  00CE               	movwf	___ftdiv@f2^(0+128)
 15076  2788  3034               	movlw	52
 15077  2789  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 15078  278A  3043               	movlw	67
 15079  278B  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 15080  278C  3010               	movlw	16
 15081  278D  00AE               	movwf	___ftmul@f1^(0+128)
 15082  278E  3049               	movlw	73
 15083  278F  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15084  2790  3040               	movlw	64
 15085  2791  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15086  2792  0022               	movlb	2	; select bank2
 15087  2793  0859               	movf	calcCosArray@iAngle^(0+256),w
 15088  2794  00D2               	movwf	??_calcCosArray^(0+256)
 15089  2795  01D3               	clrf	(??_calcCosArray^(0+256)+1)
 15090  2796  0852               	movf	??_calcCosArray^(0+256),w
 15091  2797  00AE               	movwf	___wmul@multiplier^(0+256)
 15092  2798  0853               	movf	(??_calcCosArray+1)^(0+256),w
 15093  2799  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 15094  279A  3003               	movlw	3
 15095  279B  00B0               	movwf	___wmul@multiplicand^(0+256)
 15096  279C  3000               	movlw	0
 15097  279D  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 15098  279E  31AD  2570  31A7   	fcall	___wmul
 15099  27A1  0022               	movlb	2	; select bank2
 15100  27A2  082F               	movf	(?___wmul+1)^(0+256),w
 15101  27A3  0021               	movlb	1	; select bank1
 15102  27A4  00A9               	movwf	(___awtoft@c+1)^(0+128)
 15103  27A5  0022               	movlb	2	; select bank2
 15104  27A6  082E               	movf	?___wmul^(0+256),w
 15105  27A7  0021               	movlb	1	; select bank1
 15106  27A8  00A8               	movwf	___awtoft@c^(0+128)
 15107  27A9  31AD  25E4  31A7   	fcall	___awtoft
 15108  27AC  0021               	movlb	1	; select bank1
 15109  27AD  0828               	movf	?___awtoft^(0+128),w
 15110  27AE  00B1               	movwf	___ftmul@f2^(0+128)
 15111  27AF  0829               	movf	(?___awtoft+1)^(0+128),w
 15112  27B0  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15113  27B1  082A               	movf	(?___awtoft+2)^(0+128),w
 15114  27B2  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15115  27B3  319E  2656  31A7   	fcall	___ftmul
 15116  27B6  0021               	movlb	1	; select bank1
 15117  27B7  082E               	movf	?___ftmul^(0+128),w
 15118  27B8  00D1               	movwf	___ftdiv@f1^(0+128)
 15119  27B9  082F               	movf	(?___ftmul+1)^(0+128),w
 15120  27BA  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 15121  27BB  0830               	movf	(?___ftmul+2)^(0+128),w
 15122  27BC  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 15123  27BD  319C  244F  31A7   	fcall	___ftdiv
 15124  27C0  0021               	movlb	1	; select bank1
 15125  27C1  084E               	movf	?___ftdiv^(0+128),w
 15126  27C2  0022               	movlb	2	; select bank2
 15127  27C3  00D6               	movwf	calcCosArray@tmpVal^(0+256)
 15128  27C4  0021               	movlb	1	; select bank1
 15129  27C5  084F               	movf	(?___ftdiv+1)^(0+128),w
 15130  27C6  0022               	movlb	2	; select bank2
 15131  27C7  00D7               	movwf	(calcCosArray@tmpVal+1)^(0+256)
 15132  27C8  0021               	movlb	1	; select bank1
 15133  27C9  0850               	movf	(?___ftdiv+2)^(0+128),w
 15134  27CA  0022               	movlb	2	; select bank2
 15135  27CB  00D8               	movwf	(calcCosArray@tmpVal+2)^(0+256)
 15136                           
 15137                           ;modulation.c: 21: tmpVal = cos(tmpVal);
 15138  27CC  0856               	movf	calcCosArray@tmpVal^(0+256),w
 15139  27CD  00CC               	movwf	cos@f^(0+256)
 15140  27CE  0857               	movf	(calcCosArray@tmpVal+1)^(0+256),w
 15141  27CF  00CD               	movwf	(cos@f+1)^(0+256)
 15142  27D0  0858               	movf	(calcCosArray@tmpVal+2)^(0+256),w
 15143  27D1  00CE               	movwf	(cos@f+2)^(0+256)
 15144  27D2  31A7  2703  31A7   	fcall	_cos
 15145  27D5  0022               	movlb	2	; select bank2
 15146  27D6  084C               	movf	?_cos^(0+256),w
 15147  27D7  00D6               	movwf	calcCosArray@tmpVal^(0+256)
 15148  27D8  084D               	movf	(?_cos+1)^(0+256),w
 15149  27D9  00D7               	movwf	(calcCosArray@tmpVal+1)^(0+256)
 15150  27DA  084E               	movf	(?_cos+2)^(0+256),w
 15151  27DB  00D8               	movwf	(calcCosArray@tmpVal+2)^(0+256)
 15152                           
 15153                           ;modulation.c: 22: cosArray[iAngle] = tmpVal;
 15154  27DC  0859               	movf	calcCosArray@iAngle^(0+256),w
 15155  27DD  00D2               	movwf	??_calcCosArray^(0+256)
 15156  27DE  01D3               	clrf	(??_calcCosArray^(0+256)+1)
 15157  27DF  0852               	movf	??_calcCosArray^(0+256),w
 15158  27E0  00AE               	movwf	___wmul@multiplier^(0+256)
 15159  27E1  0853               	movf	(??_calcCosArray+1)^(0+256),w
 15160  27E2  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 15161  27E3  3003               	movlw	3
 15162  27E4  00B0               	movwf	___wmul@multiplicand^(0+256)
 15163  27E5  3000               	movlw	0
 15164  27E6  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 15165  27E7  31AD  2570  31A7   	fcall	___wmul
 15166  27EA  3082               	movlw	130
 15167  27EB  0022               	movlb	2	; select bank2
 15168  27EC  00D4               	movwf	(??_calcCosArray+2)^(0+256)
 15169  27ED  3024               	movlw	36
 15170  27EE  00D5               	movwf	((??_calcCosArray+2)^(0+256)+1)
 15171  27EF  082E               	movf	?___wmul^(0+256),w
 15172  27F0  0754               	addwf	(??_calcCosArray+2)^(0+256),w
 15173  27F1  0086               	movwf	6
 15174  27F2  082F               	movf	(?___wmul+1)^(0+256),w
 15175  27F3  3D55               	addwfc	(??_calcCosArray+3)^(0+256),w
 15176  27F4  0087               	movwf	7
 15177  27F5  0856               	movf	calcCosArray@tmpVal^(0+256),w
 15178  27F6  3FC0               	movwi [0]fsr1
 15179  27F7  0857               	movf	(calcCosArray@tmpVal+1)^(0+256),w
 15180  27F8  3FC1               	movwi [1]fsr1
 15181  27F9  0858               	movf	(calcCosArray@tmpVal+2)^(0+256),w
 15182  27FA  3FC2               	movwi [2]fsr1
 15183  27FB  3001               	movlw	1
 15184  27FC  00D2               	movwf	??_calcCosArray^(0+256)
 15185  27FD  0852               	movf	??_calcCosArray^(0+256),w
 15186  27FE  07D9               	addwf	calcCosArray@iAngle^(0+256),f
 15187  27FF  2F81               	goto	L17
 15188  2800                     __end_of_calcCosArray:	
 15189                           
 15190                           	psect	text45
 15191  2703                     __ptext45:	
 15192 ;; *************** function _cos *****************
 15193 ;; Defined at:
 15194 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\cos.c"
 15195 ;; Parameters:    Size  Location     Type
 15196 ;;  f               3   44[BANK2 ] void 
 15197 ;; Auto vars:     Size  Location     Type
 15198 ;;		None
 15199 ;; Return value:  Size  Location     Type
 15200 ;;                  3   44[BANK2 ] void 
 15201 ;; Registers used:
 15202 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15203 ;; Tracked objects:
 15204 ;;		On entry : 0/0
 15205 ;;		On exit  : 0/0
 15206 ;;		Unchanged: 0/0
 15207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15208 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15209 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15211 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15212 ;;Total ram usage:        6 bytes
 15213 ;; Hardware stack levels used:    1
 15214 ;; Hardware stack levels required when called:    7
 15215 ;; This function calls:
 15216 ;;		___ftadd
 15217 ;;		___ftge
 15218 ;;		_sin
 15219 ;; This function is called by:
 15220 ;;		_calcCosArray
 15221 ;; This function uses a non-reentrant model
 15222 ;;
 15223                           
 15224                           
 15225                           ;psect for function _cos
 15226  2703                     _cos:	
 15227                           
 15228                           ;incstack = 0
 15229                           ; Regs used in _cos: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15230  2703  3010               	movlw	16
 15231  2704  0021               	movlb	1	; select bank1
 15232  2705  00A0               	movwf	___ftge@ff1^(0+128)
 15233  2706  3049               	movlw	73
 15234  2707  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15235  2708  3040               	movlw	64
 15236  2709  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15237  270A  0022               	movlb	2	; select bank2
 15238  270B  084C               	movf	cos@f^(0+256),w
 15239  270C  0021               	movlb	1	; select bank1
 15240  270D  00A3               	movwf	___ftge@ff2^(0+128)
 15241  270E  0022               	movlb	2	; select bank2
 15242  270F  084D               	movf	(cos@f+1)^(0+256),w
 15243  2710  0021               	movlb	1	; select bank1
 15244  2711  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15245  2712  0022               	movlb	2	; select bank2
 15246  2713  084E               	movf	(cos@f+2)^(0+256),w
 15247  2714  0021               	movlb	1	; select bank1
 15248  2715  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15249  2716  31A0  20AA  31A7   	fcall	___ftge
 15250  2719  1803               	btfsc	3,0
 15251  271A  2F4D               	goto	l8634
 15252  271B  30CC               	movlw	204
 15253  271C  0021               	movlb	1	; select bank1
 15254  271D  00C1               	movwf	___ftadd@f1^(0+128)
 15255  271E  3096               	movlw	150
 15256  271F  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 15257  2720  30C0               	movlw	192
 15258  2721  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 15259  2722  0022               	movlb	2	; select bank2
 15260  2723  084C               	movf	cos@f^(0+256),w
 15261  2724  0021               	movlb	1	; select bank1
 15262  2725  00C4               	movwf	___ftadd@f2^(0+128)
 15263  2726  0022               	movlb	2	; select bank2
 15264  2727  084D               	movf	(cos@f+1)^(0+256),w
 15265  2728  0021               	movlb	1	; select bank1
 15266  2729  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 15267  272A  0022               	movlb	2	; select bank2
 15268  272B  084E               	movf	(cos@f+2)^(0+256),w
 15269  272C  0021               	movlb	1	; select bank1
 15270  272D  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 15271  272E  319F  270A  31A7   	fcall	___ftadd
 15272  2731  0021               	movlb	1	; select bank1
 15273  2732  0841               	movf	?___ftadd^(0+128),w
 15274  2733  0022               	movlb	2	; select bank2
 15275  2734  00CF               	movwf	_cos$2916^(0+256)
 15276  2735  0021               	movlb	1	; select bank1
 15277  2736  0842               	movf	(?___ftadd+1)^(0+128),w
 15278  2737  0022               	movlb	2	; select bank2
 15279  2738  00D0               	movwf	(_cos$2916+1)^(0+256)
 15280  2739  0021               	movlb	1	; select bank1
 15281  273A  0843               	movf	(?___ftadd+2)^(0+128),w
 15282  273B  0022               	movlb	2	; select bank2
 15283  273C  00D1               	movwf	(_cos$2916+2)^(0+256)
 15284  273D  084F               	movf	_cos$2916^(0+256),w
 15285  273E  00BE               	movwf	sin@f^(0+256)
 15286  273F  0850               	movf	(_cos$2916+1)^(0+256),w
 15287  2740  00BF               	movwf	(sin@f+1)^(0+256)
 15288  2741  0851               	movf	(_cos$2916+2)^(0+256),w
 15289  2742  00C0               	movwf	(sin@f+2)^(0+256)
 15290  2743  3196  2631         	fcall	_sin
 15291  2745  0022               	movlb	2	; select bank2
 15292  2746  083E               	movf	?_sin^(0+256),w
 15293  2747  00CC               	movwf	?_cos^(0+256)
 15294  2748  083F               	movf	(?_sin+1)^(0+256),w
 15295  2749  00CD               	movwf	(?_cos+1)^(0+256)
 15296  274A  0840               	movf	(?_sin+2)^(0+256),w
 15297  274B  00CE               	movwf	(?_cos+2)^(0+256)
 15298  274C  0008               	return
 15299  274D                     l8634:	
 15300  274D  3010               	movlw	16
 15301  274E  0021               	movlb	1	; select bank1
 15302  274F  00C1               	movwf	___ftadd@f1^(0+128)
 15303  2750  30C9               	movlw	201
 15304  2751  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 15305  2752  303F               	movlw	63
 15306  2753  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 15307  2754  0022               	movlb	2	; select bank2
 15308  2755  084C               	movf	cos@f^(0+256),w
 15309  2756  0021               	movlb	1	; select bank1
 15310  2757  00C4               	movwf	___ftadd@f2^(0+128)
 15311  2758  0022               	movlb	2	; select bank2
 15312  2759  084D               	movf	(cos@f+1)^(0+256),w
 15313  275A  0021               	movlb	1	; select bank1
 15314  275B  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 15315  275C  0022               	movlb	2	; select bank2
 15316  275D  084E               	movf	(cos@f+2)^(0+256),w
 15317  275E  0021               	movlb	1	; select bank1
 15318  275F  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 15319  2760  319F  270A  31A7   	fcall	___ftadd
 15320  2763  0021               	movlb	1	; select bank1
 15321  2764  0841               	movf	?___ftadd^(0+128),w
 15322  2765  0022               	movlb	2	; select bank2
 15323  2766  00CF               	movwf	_cos$2916^(0+256)
 15324  2767  0021               	movlb	1	; select bank1
 15325  2768  0842               	movf	(?___ftadd+1)^(0+128),w
 15326  2769  0022               	movlb	2	; select bank2
 15327  276A  00D0               	movwf	(_cos$2916+1)^(0+256)
 15328  276B  0021               	movlb	1	; select bank1
 15329  276C  0843               	movf	(?___ftadd+2)^(0+128),w
 15330  276D  0022               	movlb	2	; select bank2
 15331  276E  00D1               	movwf	(_cos$2916+2)^(0+256)
 15332  276F  084F               	movf	_cos$2916^(0+256),w
 15333  2770  00BE               	movwf	sin@f^(0+256)
 15334  2771  0850               	movf	(_cos$2916+1)^(0+256),w
 15335  2772  00BF               	movwf	(sin@f+1)^(0+256)
 15336  2773  0851               	movf	(_cos$2916+2)^(0+256),w
 15337  2774  00C0               	movwf	(sin@f+2)^(0+256)
 15338  2775  3196  2631         	fcall	_sin
 15339  2777  0022               	movlb	2	; select bank2
 15340  2778  083E               	movf	?_sin^(0+256),w
 15341  2779  00CC               	movwf	?_cos^(0+256)
 15342  277A  083F               	movf	(?_sin+1)^(0+256),w
 15343  277B  00CD               	movwf	(?_cos+1)^(0+256)
 15344  277C  0840               	movf	(?_sin+2)^(0+256),w
 15345  277D  00CE               	movwf	(?_cos+2)^(0+256)
 15346  277E  0008               	return
 15347  277F                     __end_of_cos:	
 15348                           
 15349                           	psect	text46
 15350  1631                     __ptext46:	
 15351 ;; *************** function _sin *****************
 15352 ;; Defined at:
 15353 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\sin.c"
 15354 ;; Parameters:    Size  Location     Type
 15355 ;;  f               3   30[BANK2 ] void 
 15356 ;; Auto vars:     Size  Location     Type
 15357 ;;  x2              3   40[BANK2 ] void 
 15358 ;;  y               3   34[BANK2 ] void 
 15359 ;;  sgn             1   43[BANK2 ] unsigned char 
 15360 ;; Return value:  Size  Location     Type
 15361 ;;                  3   30[BANK2 ] unsigned char 
 15362 ;; Registers used:
 15363 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15364 ;; Tracked objects:
 15365 ;;		On entry : 0/0
 15366 ;;		On exit  : 0/0
 15367 ;;		Unchanged: 0/0
 15368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15369 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15370 ;;      Locals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15371 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15372 ;;      Totals:         0       0       0      14       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15373 ;;Total ram usage:       14 bytes
 15374 ;; Hardware stack levels used:    1
 15375 ;; Hardware stack levels required when called:    6
 15376 ;; This function calls:
 15377 ;;		___ftadd
 15378 ;;		___ftdiv
 15379 ;;		___ftge
 15380 ;;		___ftmul
 15381 ;;		___ftneg
 15382 ;;		___ftsub
 15383 ;;		_eval_poly
 15384 ;;		_floor
 15385 ;; This function is called by:
 15386 ;;		_cos
 15387 ;; This function uses a non-reentrant model
 15388 ;;
 15389                           
 15390                           
 15391                           ;psect for function _sin
 15392  1631                     _sin:	
 15393                           
 15394                           ;incstack = 0
 15395                           ; Regs used in _sin: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15396  1631  0022               	movlb	2	; select bank2
 15397  1632  01CB               	clrf	sin@sgn^(0+256)
 15398  1633  083E               	movf	sin@f^(0+256),w
 15399  1634  0021               	movlb	1	; select bank1
 15400  1635  00A0               	movwf	___ftge@ff1^(0+128)
 15401  1636  0022               	movlb	2	; select bank2
 15402  1637  083F               	movf	(sin@f+1)^(0+256),w
 15403  1638  0021               	movlb	1	; select bank1
 15404  1639  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15405  163A  0022               	movlb	2	; select bank2
 15406  163B  0840               	movf	(sin@f+2)^(0+256),w
 15407  163C  0021               	movlb	1	; select bank1
 15408  163D  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15409  163E  3000               	movlw	0
 15410  163F  00A3               	movwf	___ftge@ff2^(0+128)
 15411  1640  3000               	movlw	0
 15412  1641  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15413  1642  3000               	movlw	0
 15414  1643  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15415  1644  31A0  20AA  3196   	fcall	___ftge
 15416  1647  1803               	btfsc	3,0
 15417  1648  2E66               	goto	l8344
 15418  1649  0022               	movlb	2	; select bank2
 15419  164A  083E               	movf	sin@f^(0+256),w
 15420  164B  0021               	movlb	1	; select bank1
 15421  164C  00BE               	movwf	___ftneg@f1^(0+128)
 15422  164D  0022               	movlb	2	; select bank2
 15423  164E  083F               	movf	(sin@f+1)^(0+256),w
 15424  164F  0021               	movlb	1	; select bank1
 15425  1650  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 15426  1651  0022               	movlb	2	; select bank2
 15427  1652  0840               	movf	(sin@f+2)^(0+256),w
 15428  1653  0021               	movlb	1	; select bank1
 15429  1654  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 15430  1655  31AC  2497  3196   	fcall	___ftneg
 15431  1658  0021               	movlb	1	; select bank1
 15432  1659  083E               	movf	?___ftneg^(0+128),w
 15433  165A  0022               	movlb	2	; select bank2
 15434  165B  00BE               	movwf	sin@f^(0+256)
 15435  165C  0021               	movlb	1	; select bank1
 15436  165D  083F               	movf	(?___ftneg+1)^(0+128),w
 15437  165E  0022               	movlb	2	; select bank2
 15438  165F  00BF               	movwf	(sin@f+1)^(0+256)
 15439  1660  0021               	movlb	1	; select bank1
 15440  1661  0840               	movf	(?___ftneg+2)^(0+128),w
 15441  1662  0022               	movlb	2	; select bank2
 15442  1663  00C0               	movwf	(sin@f+2)^(0+256)
 15443  1664  01CB               	clrf	sin@sgn^(0+256)
 15444  1665  0ACB               	incf	sin@sgn^(0+256),f
 15445  1666                     l8344:	
 15446  1666  30FA               	movlw	250
 15447  1667  0021               	movlb	1	; select bank1
 15448  1668  00AE               	movwf	___ftmul@f1^(0+128)
 15449  1669  3022               	movlw	34
 15450  166A  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15451  166B  303E               	movlw	62
 15452  166C  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15453  166D  0022               	movlb	2	; select bank2
 15454  166E  083E               	movf	sin@f^(0+256),w
 15455  166F  0021               	movlb	1	; select bank1
 15456  1670  00B1               	movwf	___ftmul@f2^(0+128)
 15457  1671  0022               	movlb	2	; select bank2
 15458  1672  083F               	movf	(sin@f+1)^(0+256),w
 15459  1673  0021               	movlb	1	; select bank1
 15460  1674  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15461  1675  0022               	movlb	2	; select bank2
 15462  1676  0840               	movf	(sin@f+2)^(0+256),w
 15463  1677  0021               	movlb	1	; select bank1
 15464  1678  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15465  1679  319E  2656  3196   	fcall	___ftmul
 15466  167C  0021               	movlb	1	; select bank1
 15467  167D  082E               	movf	?___ftmul^(0+128),w
 15468  167E  0022               	movlb	2	; select bank2
 15469  167F  00BE               	movwf	sin@f^(0+256)
 15470  1680  0021               	movlb	1	; select bank1
 15471  1681  082F               	movf	(?___ftmul+1)^(0+128),w
 15472  1682  0022               	movlb	2	; select bank2
 15473  1683  00BF               	movwf	(sin@f+1)^(0+256)
 15474  1684  0021               	movlb	1	; select bank1
 15475  1685  0830               	movf	(?___ftmul+2)^(0+128),w
 15476  1686  0022               	movlb	2	; select bank2
 15477  1687  00C0               	movwf	(sin@f+2)^(0+256)
 15478  1688  083E               	movf	sin@f^(0+256),w
 15479  1689  00AE               	movwf	floor@x^(0+256)
 15480  168A  083F               	movf	(sin@f+1)^(0+256),w
 15481  168B  00AF               	movwf	(floor@x+1)^(0+256)
 15482  168C  0840               	movf	(sin@f+2)^(0+256),w
 15483  168D  00B0               	movwf	(floor@x+2)^(0+256)
 15484  168E  319D  25A3  3196   	fcall	_floor
 15485  1691  0022               	movlb	2	; select bank2
 15486  1692  082E               	movf	?_floor^(0+256),w
 15487  1693  00B7               	movwf	___ftsub@f2^(0+256)
 15488  1694  082F               	movf	(?_floor+1)^(0+256),w
 15489  1695  00B8               	movwf	(___ftsub@f2+1)^(0+256)
 15490  1696  0830               	movf	(?_floor+2)^(0+256),w
 15491  1697  00B9               	movwf	(___ftsub@f2+2)^(0+256)
 15492  1698  083E               	movf	sin@f^(0+256),w
 15493  1699  00BA               	movwf	___ftsub@f1^(0+256)
 15494  169A  083F               	movf	(sin@f+1)^(0+256),w
 15495  169B  00BB               	movwf	(___ftsub@f1+1)^(0+256)
 15496  169C  0840               	movf	(sin@f+2)^(0+256),w
 15497  169D  00BC               	movwf	(___ftsub@f1+2)^(0+256)
 15498  169E  31AE  26A5  3196   	fcall	___ftsub
 15499  16A1  0022               	movlb	2	; select bank2
 15500  16A2  0837               	movf	?___ftsub^(0+256),w
 15501  16A3  00BE               	movwf	sin@f^(0+256)
 15502  16A4  0838               	movf	(?___ftsub+1)^(0+256),w
 15503  16A5  00BF               	movwf	(sin@f+1)^(0+256)
 15504  16A6  0839               	movf	(?___ftsub+2)^(0+256),w
 15505  16A7  00C0               	movwf	(sin@f+2)^(0+256)
 15506  16A8  3000               	movlw	0
 15507  16A9  0021               	movlb	1	; select bank1
 15508  16AA  00AE               	movwf	___ftmul@f1^(0+128)
 15509  16AB  3080               	movlw	128
 15510  16AC  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15511  16AD  3040               	movlw	64
 15512  16AE  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15513  16AF  0022               	movlb	2	; select bank2
 15514  16B0  083E               	movf	sin@f^(0+256),w
 15515  16B1  0021               	movlb	1	; select bank1
 15516  16B2  00B1               	movwf	___ftmul@f2^(0+128)
 15517  16B3  0022               	movlb	2	; select bank2
 15518  16B4  083F               	movf	(sin@f+1)^(0+256),w
 15519  16B5  0021               	movlb	1	; select bank1
 15520  16B6  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15521  16B7  0022               	movlb	2	; select bank2
 15522  16B8  0840               	movf	(sin@f+2)^(0+256),w
 15523  16B9  0021               	movlb	1	; select bank1
 15524  16BA  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15525  16BB  319E  2656  3196   	fcall	___ftmul
 15526  16BE  0021               	movlb	1	; select bank1
 15527  16BF  082E               	movf	?___ftmul^(0+128),w
 15528  16C0  0022               	movlb	2	; select bank2
 15529  16C1  00BE               	movwf	sin@f^(0+256)
 15530  16C2  0021               	movlb	1	; select bank1
 15531  16C3  082F               	movf	(?___ftmul+1)^(0+128),w
 15532  16C4  0022               	movlb	2	; select bank2
 15533  16C5  00BF               	movwf	(sin@f+1)^(0+256)
 15534  16C6  0021               	movlb	1	; select bank1
 15535  16C7  0830               	movf	(?___ftmul+2)^(0+128),w
 15536  16C8  0022               	movlb	2	; select bank2
 15537  16C9  00C0               	movwf	(sin@f+2)^(0+256)
 15538  16CA  3000               	movlw	0
 15539  16CB  0021               	movlb	1	; select bank1
 15540  16CC  00A0               	movwf	___ftge@ff1^(0+128)
 15541  16CD  3000               	movlw	0
 15542  16CE  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15543  16CF  3040               	movlw	64
 15544  16D0  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15545  16D1  0022               	movlb	2	; select bank2
 15546  16D2  083E               	movf	sin@f^(0+256),w
 15547  16D3  0021               	movlb	1	; select bank1
 15548  16D4  00A3               	movwf	___ftge@ff2^(0+128)
 15549  16D5  0022               	movlb	2	; select bank2
 15550  16D6  083F               	movf	(sin@f+1)^(0+256),w
 15551  16D7  0021               	movlb	1	; select bank1
 15552  16D8  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15553  16D9  0022               	movlb	2	; select bank2
 15554  16DA  0840               	movf	(sin@f+2)^(0+256),w
 15555  16DB  0021               	movlb	1	; select bank1
 15556  16DC  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15557  16DD  31A0  20AA  3196   	fcall	___ftge
 15558  16E0  1803               	btfsc	3,0
 15559  16E1  2F02               	goto	l8356
 15560  16E2  3000               	movlw	0
 15561  16E3  0022               	movlb	2	; select bank2
 15562  16E4  00B7               	movwf	___ftsub@f2^(0+256)
 15563  16E5  3000               	movlw	0
 15564  16E6  00B8               	movwf	(___ftsub@f2+1)^(0+256)
 15565  16E7  3040               	movlw	64
 15566  16E8  00B9               	movwf	(___ftsub@f2+2)^(0+256)
 15567  16E9  083E               	movf	sin@f^(0+256),w
 15568  16EA  00BA               	movwf	___ftsub@f1^(0+256)
 15569  16EB  083F               	movf	(sin@f+1)^(0+256),w
 15570  16EC  00BB               	movwf	(___ftsub@f1+1)^(0+256)
 15571  16ED  0840               	movf	(sin@f+2)^(0+256),w
 15572  16EE  00BC               	movwf	(___ftsub@f1+2)^(0+256)
 15573  16EF  31AE  26A5  3196   	fcall	___ftsub
 15574  16F2  0022               	movlb	2	; select bank2
 15575  16F3  0837               	movf	?___ftsub^(0+256),w
 15576  16F4  00BE               	movwf	sin@f^(0+256)
 15577  16F5  0838               	movf	(?___ftsub+1)^(0+256),w
 15578  16F6  00BF               	movwf	(sin@f+1)^(0+256)
 15579  16F7  0839               	movf	(?___ftsub+2)^(0+256),w
 15580  16F8  00C0               	movwf	(sin@f+2)^(0+256)
 15581  16F9  084B               	movf	sin@sgn^(0+256),w
 15582  16FA  1D03               	btfss	3,2
 15583  16FB  2EFE               	goto	u8820
 15584  16FC  3001               	movlw	1
 15585  16FD  2EFF               	goto	u8830
 15586  16FE                     u8820:	
 15587  16FE  3000               	movlw	0
 15588  16FF                     u8830:	
 15589  16FF  00C1               	movwf	??_sin^(0+256)
 15590  1700  0841               	movf	??_sin^(0+256),w
 15591  1701  00CB               	movwf	sin@sgn^(0+256)
 15592  1702                     l8356:	
 15593  1702  3000               	movlw	0
 15594  1703  0021               	movlb	1	; select bank1
 15595  1704  00A0               	movwf	___ftge@ff1^(0+128)
 15596  1705  3080               	movlw	128
 15597  1706  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15598  1707  303F               	movlw	63
 15599  1708  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15600  1709  0022               	movlb	2	; select bank2
 15601  170A  083E               	movf	sin@f^(0+256),w
 15602  170B  0021               	movlb	1	; select bank1
 15603  170C  00A3               	movwf	___ftge@ff2^(0+128)
 15604  170D  0022               	movlb	2	; select bank2
 15605  170E  083F               	movf	(sin@f+1)^(0+256),w
 15606  170F  0021               	movlb	1	; select bank1
 15607  1710  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15608  1711  0022               	movlb	2	; select bank2
 15609  1712  0840               	movf	(sin@f+2)^(0+256),w
 15610  1713  0021               	movlb	1	; select bank1
 15611  1714  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15612  1715  31A0  20AA  3196   	fcall	___ftge
 15613  1718  1803               	btfsc	3,0
 15614  1719  2F46               	goto	l2390
 15615  171A  3000               	movlw	0
 15616  171B  0021               	movlb	1	; select bank1
 15617  171C  00C1               	movwf	___ftadd@f1^(0+128)
 15618  171D  3000               	movlw	0
 15619  171E  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 15620  171F  3040               	movlw	64
 15621  1720  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 15622  1721  0022               	movlb	2	; select bank2
 15623  1722  083E               	movf	sin@f^(0+256),w
 15624  1723  0021               	movlb	1	; select bank1
 15625  1724  00BE               	movwf	___ftneg@f1^(0+128)
 15626  1725  0022               	movlb	2	; select bank2
 15627  1726  083F               	movf	(sin@f+1)^(0+256),w
 15628  1727  0021               	movlb	1	; select bank1
 15629  1728  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 15630  1729  0022               	movlb	2	; select bank2
 15631  172A  0840               	movf	(sin@f+2)^(0+256),w
 15632  172B  0021               	movlb	1	; select bank1
 15633  172C  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 15634  172D  31AC  2497  3196   	fcall	___ftneg
 15635  1730  0021               	movlb	1	; select bank1
 15636  1731  083E               	movf	?___ftneg^(0+128),w
 15637  1732  00C4               	movwf	___ftadd@f2^(0+128)
 15638  1733  083F               	movf	(?___ftneg+1)^(0+128),w
 15639  1734  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 15640  1735  0840               	movf	(?___ftneg+2)^(0+128),w
 15641  1736  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 15642  1737  319F  270A  3196   	fcall	___ftadd
 15643  173A  0021               	movlb	1	; select bank1
 15644  173B  0841               	movf	?___ftadd^(0+128),w
 15645  173C  0022               	movlb	2	; select bank2
 15646  173D  00BE               	movwf	sin@f^(0+256)
 15647  173E  0021               	movlb	1	; select bank1
 15648  173F  0842               	movf	(?___ftadd+1)^(0+128),w
 15649  1740  0022               	movlb	2	; select bank2
 15650  1741  00BF               	movwf	(sin@f+1)^(0+256)
 15651  1742  0021               	movlb	1	; select bank1
 15652  1743  0843               	movf	(?___ftadd+2)^(0+128),w
 15653  1744  0022               	movlb	2	; select bank2
 15654  1745  00C0               	movwf	(sin@f+2)^(0+256)
 15655  1746                     l2390:	
 15656  1746  0022               	movlb	2	; select bank2
 15657  1747  083E               	movf	sin@f^(0+256),w
 15658  1748  0021               	movlb	1	; select bank1
 15659  1749  00AE               	movwf	___ftmul@f1^(0+128)
 15660  174A  0022               	movlb	2	; select bank2
 15661  174B  083F               	movf	(sin@f+1)^(0+256),w
 15662  174C  0021               	movlb	1	; select bank1
 15663  174D  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15664  174E  0022               	movlb	2	; select bank2
 15665  174F  0840               	movf	(sin@f+2)^(0+256),w
 15666  1750  0021               	movlb	1	; select bank1
 15667  1751  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15668  1752  0022               	movlb	2	; select bank2
 15669  1753  083E               	movf	sin@f^(0+256),w
 15670  1754  0021               	movlb	1	; select bank1
 15671  1755  00B1               	movwf	___ftmul@f2^(0+128)
 15672  1756  0022               	movlb	2	; select bank2
 15673  1757  083F               	movf	(sin@f+1)^(0+256),w
 15674  1758  0021               	movlb	1	; select bank1
 15675  1759  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15676  175A  0022               	movlb	2	; select bank2
 15677  175B  0840               	movf	(sin@f+2)^(0+256),w
 15678  175C  0021               	movlb	1	; select bank1
 15679  175D  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15680  175E  319E  2656  3196   	fcall	___ftmul
 15681  1761  0021               	movlb	1	; select bank1
 15682  1762  082E               	movf	?___ftmul^(0+128),w
 15683  1763  0022               	movlb	2	; select bank2
 15684  1764  00C8               	movwf	sin@x2^(0+256)
 15685  1765  0021               	movlb	1	; select bank1
 15686  1766  082F               	movf	(?___ftmul+1)^(0+128),w
 15687  1767  0022               	movlb	2	; select bank2
 15688  1768  00C9               	movwf	(sin@x2+1)^(0+256)
 15689  1769  0021               	movlb	1	; select bank1
 15690  176A  0830               	movf	(?___ftmul+2)^(0+128),w
 15691  176B  0022               	movlb	2	; select bank2
 15692  176C  00CA               	movwf	(sin@x2+2)^(0+256)
 15693  176D  0848               	movf	sin@x2^(0+256),w
 15694  176E  00B4               	movwf	eval_poly@x^(0+256)
 15695  176F  0849               	movf	(sin@x2+1)^(0+256),w
 15696  1770  00B5               	movwf	(eval_poly@x+1)^(0+256)
 15697  1771  084A               	movf	(sin@x2+2)^(0+256),w
 15698  1772  00B6               	movwf	(eval_poly@x+2)^(0+256)
 15699  1773  3048               	movlw	low (sin@coeff_b| (0+32768))
 15700  1774  00B7               	movwf	eval_poly@d^(0+256)
 15701  1775  30A8               	movlw	high (sin@coeff_b| (0+32768))
 15702  1776  00B8               	movwf	(eval_poly@d^(0+256)+1)
 15703  1777  3003               	movlw	3
 15704  1778  00B9               	movwf	eval_poly@n^(0+256)
 15705  1779  3000               	movlw	0
 15706  177A  00BA               	movwf	(eval_poly@n^(0+256)+1)
 15707  177B  31A6  261B  3196   	fcall	_eval_poly
 15708  177E  0022               	movlb	2	; select bank2
 15709  177F  0834               	movf	?_eval_poly^(0+256),w
 15710  1780  00C2               	movwf	sin@y^(0+256)
 15711  1781  0835               	movf	(?_eval_poly+1)^(0+256),w
 15712  1782  00C3               	movwf	(sin@y+1)^(0+256)
 15713  1783  0836               	movf	(?_eval_poly+2)^(0+256),w
 15714  1784  00C4               	movwf	(sin@y+2)^(0+256)
 15715  1785  3004               	movlw	4
 15716  1786  00B9               	movwf	eval_poly@n^(0+256)
 15717  1787  3000               	movlw	0
 15718  1788  00BA               	movwf	(eval_poly@n^(0+256)+1)
 15719  1789  3039               	movlw	low (sin@coeff_a| (0+32768))
 15720  178A  00B7               	movwf	eval_poly@d^(0+256)
 15721  178B  30A8               	movlw	high (sin@coeff_a| (0+32768))
 15722  178C  00B8               	movwf	(eval_poly@d^(0+256)+1)
 15723  178D  0848               	movf	sin@x2^(0+256),w
 15724  178E  00B4               	movwf	eval_poly@x^(0+256)
 15725  178F  0849               	movf	(sin@x2+1)^(0+256),w
 15726  1790  00B5               	movwf	(eval_poly@x+1)^(0+256)
 15727  1791  084A               	movf	(sin@x2+2)^(0+256),w
 15728  1792  00B6               	movwf	(eval_poly@x+2)^(0+256)
 15729  1793  31A6  261B  3196   	fcall	_eval_poly
 15730  1796  0022               	movlb	2	; select bank2
 15731  1797  0834               	movf	?_eval_poly^(0+256),w
 15732  1798  0021               	movlb	1	; select bank1
 15733  1799  00D1               	movwf	___ftdiv@f1^(0+128)
 15734  179A  0022               	movlb	2	; select bank2
 15735  179B  0835               	movf	(?_eval_poly+1)^(0+256),w
 15736  179C  0021               	movlb	1	; select bank1
 15737  179D  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 15738  179E  0022               	movlb	2	; select bank2
 15739  179F  0836               	movf	(?_eval_poly+2)^(0+256),w
 15740  17A0  0021               	movlb	1	; select bank1
 15741  17A1  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 15742  17A2  0022               	movlb	2	; select bank2
 15743  17A3  0842               	movf	sin@y^(0+256),w
 15744  17A4  0021               	movlb	1	; select bank1
 15745  17A5  00CE               	movwf	___ftdiv@f2^(0+128)
 15746  17A6  0022               	movlb	2	; select bank2
 15747  17A7  0843               	movf	(sin@y+1)^(0+256),w
 15748  17A8  0021               	movlb	1	; select bank1
 15749  17A9  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 15750  17AA  0022               	movlb	2	; select bank2
 15751  17AB  0844               	movf	(sin@y+2)^(0+256),w
 15752  17AC  0021               	movlb	1	; select bank1
 15753  17AD  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 15754  17AE  319C  244F  3196   	fcall	___ftdiv
 15755  17B1  0021               	movlb	1	; select bank1
 15756  17B2  084E               	movf	?___ftdiv^(0+128),w
 15757  17B3  0022               	movlb	2	; select bank2
 15758  17B4  00C5               	movwf	_sin$2919^(0+256)
 15759  17B5  0021               	movlb	1	; select bank1
 15760  17B6  084F               	movf	(?___ftdiv+1)^(0+128),w
 15761  17B7  0022               	movlb	2	; select bank2
 15762  17B8  00C6               	movwf	(_sin$2919+1)^(0+256)
 15763  17B9  0021               	movlb	1	; select bank1
 15764  17BA  0850               	movf	(?___ftdiv+2)^(0+128),w
 15765  17BB  0022               	movlb	2	; select bank2
 15766  17BC  00C7               	movwf	(_sin$2919+2)^(0+256)
 15767  17BD  0845               	movf	_sin$2919^(0+256),w
 15768  17BE  0021               	movlb	1	; select bank1
 15769  17BF  00AE               	movwf	___ftmul@f1^(0+128)
 15770  17C0  0022               	movlb	2	; select bank2
 15771  17C1  0846               	movf	(_sin$2919+1)^(0+256),w
 15772  17C2  0021               	movlb	1	; select bank1
 15773  17C3  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15774  17C4  0022               	movlb	2	; select bank2
 15775  17C5  0847               	movf	(_sin$2919+2)^(0+256),w
 15776  17C6  0021               	movlb	1	; select bank1
 15777  17C7  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15778  17C8  0022               	movlb	2	; select bank2
 15779  17C9  083E               	movf	sin@f^(0+256),w
 15780  17CA  0021               	movlb	1	; select bank1
 15781  17CB  00B1               	movwf	___ftmul@f2^(0+128)
 15782  17CC  0022               	movlb	2	; select bank2
 15783  17CD  083F               	movf	(sin@f+1)^(0+256),w
 15784  17CE  0021               	movlb	1	; select bank1
 15785  17CF  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15786  17D0  0022               	movlb	2	; select bank2
 15787  17D1  0840               	movf	(sin@f+2)^(0+256),w
 15788  17D2  0021               	movlb	1	; select bank1
 15789  17D3  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15790  17D4  319E  2656  3196   	fcall	___ftmul
 15791  17D7  0021               	movlb	1	; select bank1
 15792  17D8  082E               	movf	?___ftmul^(0+128),w
 15793  17D9  0022               	movlb	2	; select bank2
 15794  17DA  00BE               	movwf	sin@f^(0+256)
 15795  17DB  0021               	movlb	1	; select bank1
 15796  17DC  082F               	movf	(?___ftmul+1)^(0+128),w
 15797  17DD  0022               	movlb	2	; select bank2
 15798  17DE  00BF               	movwf	(sin@f+1)^(0+256)
 15799  17DF  0021               	movlb	1	; select bank1
 15800  17E0  0830               	movf	(?___ftmul+2)^(0+128),w
 15801  17E1  0022               	movlb	2	; select bank2
 15802  17E2  00C0               	movwf	(sin@f+2)^(0+256)
 15803  17E3  084B               	movf	sin@sgn^(0+256),w
 15804  17E4  1903               	btfsc	3,2
 15805  17E5  0008               	return
 15806  17E6  083E               	movf	sin@f^(0+256),w
 15807  17E7  0021               	movlb	1	; select bank1
 15808  17E8  00BE               	movwf	___ftneg@f1^(0+128)
 15809  17E9  0022               	movlb	2	; select bank2
 15810  17EA  083F               	movf	(sin@f+1)^(0+256),w
 15811  17EB  0021               	movlb	1	; select bank1
 15812  17EC  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 15813  17ED  0022               	movlb	2	; select bank2
 15814  17EE  0840               	movf	(sin@f+2)^(0+256),w
 15815  17EF  0021               	movlb	1	; select bank1
 15816  17F0  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 15817  17F1  31AC  2497         	fcall	___ftneg
 15818  17F3  0021               	movlb	1	; select bank1
 15819  17F4  083E               	movf	?___ftneg^(0+128),w
 15820  17F5  0022               	movlb	2	; select bank2
 15821  17F6  00BE               	movwf	?_sin^(0+256)
 15822  17F7  0021               	movlb	1	; select bank1
 15823  17F8  083F               	movf	(?___ftneg+1)^(0+128),w
 15824  17F9  0022               	movlb	2	; select bank2
 15825  17FA  00BF               	movwf	(?_sin+1)^(0+256)
 15826  17FB  0021               	movlb	1	; select bank1
 15827  17FC  0840               	movf	(?___ftneg+2)^(0+128),w
 15828  17FD  0022               	movlb	2	; select bank2
 15829  17FE  00C0               	movwf	(?_sin+2)^(0+256)
 15830  17FF  0008               	return
 15831  1800                     __end_of_sin:	
 15832                           
 15833                           	psect	text47
 15834  1DA3                     __ptext47:	
 15835 ;; *************** function _floor *****************
 15836 ;; Defined at:
 15837 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\floor.c"
 15838 ;; Parameters:    Size  Location     Type
 15839 ;;  x               3   14[BANK2 ] unsigned char 
 15840 ;; Auto vars:     Size  Location     Type
 15841 ;;  i               3   18[BANK2 ] unsigned char 
 15842 ;;  expon           2   21[BANK2 ] int 
 15843 ;; Return value:  Size  Location     Type
 15844 ;;                  3   14[BANK2 ] int 
 15845 ;; Registers used:
 15846 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15847 ;; Tracked objects:
 15848 ;;		On entry : 0/0
 15849 ;;		On exit  : 0/0
 15850 ;;		Unchanged: 0/0
 15851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15852 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15853 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15854 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15855 ;;      Totals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15856 ;;Total ram usage:        9 bytes
 15857 ;; Hardware stack levels used:    1
 15858 ;; Hardware stack levels required when called:    5
 15859 ;; This function calls:
 15860 ;;		___altoft
 15861 ;;		___ftadd
 15862 ;;		___ftge
 15863 ;;		___fttol
 15864 ;;		_frexp
 15865 ;; This function is called by:
 15866 ;;		_sin
 15867 ;;		_exp
 15868 ;; This function uses a non-reentrant model
 15869 ;;
 15870                           
 15871                           
 15872                           ;psect for function _floor
 15873  1DA3                     _floor:	
 15874                           
 15875                           ;incstack = 0
 15876                           ; Regs used in _floor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15877  1DA3  0022               	movlb	2	; select bank2
 15878  1DA4  082E               	movf	floor@x^(0+256),w
 15879  1DA5  0021               	movlb	1	; select bank1
 15880  1DA6  00A0               	movwf	frexp@value^(0+128)
 15881  1DA7  0022               	movlb	2	; select bank2
 15882  1DA8  082F               	movf	(floor@x+1)^(0+256),w
 15883  1DA9  0021               	movlb	1	; select bank1
 15884  1DAA  00A1               	movwf	(frexp@value+1)^(0+128)
 15885  1DAB  0022               	movlb	2	; select bank2
 15886  1DAC  0830               	movf	(floor@x+2)^(0+256),w
 15887  1DAD  0021               	movlb	1	; select bank1
 15888  1DAE  00A2               	movwf	(frexp@value+2)^(0+128)
 15889  1DAF  3035               	movlw	(low (floor@expon| (0+256)))& (0+255)
 15890  1DB0  0022               	movlb	2	; select bank2
 15891  1DB1  00B1               	movwf	??_floor^(0+256)
 15892  1DB2  0831               	movf	??_floor^(0+256),w
 15893  1DB3  0021               	movlb	1	; select bank1
 15894  1DB4  00A3               	movwf	frexp@eptr^(0+128)
 15895  1DB5  31A1  219D  319D   	fcall	_frexp
 15896  1DB8  0022               	movlb	2	; select bank2
 15897  1DB9  1FB6               	btfss	(floor@expon+1)^(0+256),7
 15898  1DBA  2DE1               	goto	l8192
 15899  1DBB  082E               	movf	floor@x^(0+256),w
 15900  1DBC  0021               	movlb	1	; select bank1
 15901  1DBD  00A0               	movwf	___ftge@ff1^(0+128)
 15902  1DBE  0022               	movlb	2	; select bank2
 15903  1DBF  082F               	movf	(floor@x+1)^(0+256),w
 15904  1DC0  0021               	movlb	1	; select bank1
 15905  1DC1  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15906  1DC2  0022               	movlb	2	; select bank2
 15907  1DC3  0830               	movf	(floor@x+2)^(0+256),w
 15908  1DC4  0021               	movlb	1	; select bank1
 15909  1DC5  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15910  1DC6  3000               	movlw	0
 15911  1DC7  00A3               	movwf	___ftge@ff2^(0+128)
 15912  1DC8  3000               	movlw	0
 15913  1DC9  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15914  1DCA  3000               	movlw	0
 15915  1DCB  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15916  1DCC  31A0  20AA  319D   	fcall	___ftge
 15917  1DCF  1803               	btfsc	3,0
 15918  1DD0  2DD9               	goto	l8188
 15919  1DD1  3000               	movlw	0
 15920  1DD2  0022               	movlb	2	; select bank2
 15921  1DD3  00AE               	movwf	?_floor^(0+256)
 15922  1DD4  3080               	movlw	128
 15923  1DD5  00AF               	movwf	(?_floor+1)^(0+256)
 15924  1DD6  30BF               	movlw	191
 15925  1DD7  00B0               	movwf	(?_floor+2)^(0+256)
 15926  1DD8  0008               	return
 15927  1DD9                     l8188:	
 15928  1DD9  3000               	movlw	0
 15929  1DDA  0022               	movlb	2	; select bank2
 15930  1DDB  00AE               	movwf	?_floor^(0+256)
 15931  1DDC  3000               	movlw	0
 15932  1DDD  00AF               	movwf	(?_floor+1)^(0+256)
 15933  1DDE  3000               	movlw	0
 15934  1DDF  00B0               	movwf	(?_floor+2)^(0+256)
 15935  1DE0  0008               	return
 15936  1DE1                     l8192:	
 15937  1DE1  3000               	movlw	0
 15938  1DE2  0236               	subwf	(floor@expon+1)^(0+256),w
 15939  1DE3  3015               	movlw	21
 15940  1DE4  1903               	skipnz
 15941  1DE5  0235               	subwf	floor@expon^(0+256),w
 15942  1DE6  1803               	btfsc	3,0
 15943  1DE7  0008               	return
 15944  1DE8  082E               	movf	floor@x^(0+256),w
 15945  1DE9  00A0               	movwf	___fttol@f1^(0+256)
 15946  1DEA  082F               	movf	(floor@x+1)^(0+256),w
 15947  1DEB  00A1               	movwf	(___fttol@f1+1)^(0+256)
 15948  1DEC  0830               	movf	(floor@x+2)^(0+256),w
 15949  1DED  00A2               	movwf	(___fttol@f1+2)^(0+256)
 15950  1DEE  3199  218A  319D   	fcall	___fttol
 15951  1DF1  0022               	movlb	2	; select bank2
 15952  1DF2  0823               	movf	(?___fttol+3)^(0+256),w
 15953  1DF3  0021               	movlb	1	; select bank1
 15954  1DF4  00AB               	movwf	(___altoft@c+3)^(0+128)
 15955  1DF5  0022               	movlb	2	; select bank2
 15956  1DF6  0822               	movf	(?___fttol+2)^(0+256),w
 15957  1DF7  0021               	movlb	1	; select bank1
 15958  1DF8  00AA               	movwf	(___altoft@c+2)^(0+128)
 15959  1DF9  0022               	movlb	2	; select bank2
 15960  1DFA  0821               	movf	(?___fttol+1)^(0+256),w
 15961  1DFB  0021               	movlb	1	; select bank1
 15962  1DFC  00A9               	movwf	(___altoft@c+1)^(0+128)
 15963  1DFD  0022               	movlb	2	; select bank2
 15964  1DFE  0820               	movf	?___fttol^(0+256),w
 15965  1DFF  0021               	movlb	1	; select bank1
 15966  1E00  00A8               	movwf	___altoft@c^(0+128)
 15967  1E01  31A0  20E6  319D   	fcall	___altoft
 15968  1E04  0021               	movlb	1	; select bank1
 15969  1E05  0828               	movf	?___altoft^(0+128),w
 15970  1E06  0022               	movlb	2	; select bank2
 15971  1E07  00B2               	movwf	floor@i^(0+256)
 15972  1E08  0021               	movlb	1	; select bank1
 15973  1E09  0829               	movf	(?___altoft+1)^(0+128),w
 15974  1E0A  0022               	movlb	2	; select bank2
 15975  1E0B  00B3               	movwf	(floor@i+1)^(0+256)
 15976  1E0C  0021               	movlb	1	; select bank1
 15977  1E0D  082A               	movf	(?___altoft+2)^(0+128),w
 15978  1E0E  0022               	movlb	2	; select bank2
 15979  1E0F  00B4               	movwf	(floor@i+2)^(0+256)
 15980  1E10  082E               	movf	floor@x^(0+256),w
 15981  1E11  0021               	movlb	1	; select bank1
 15982  1E12  00A0               	movwf	___ftge@ff1^(0+128)
 15983  1E13  0022               	movlb	2	; select bank2
 15984  1E14  082F               	movf	(floor@x+1)^(0+256),w
 15985  1E15  0021               	movlb	1	; select bank1
 15986  1E16  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15987  1E17  0022               	movlb	2	; select bank2
 15988  1E18  0830               	movf	(floor@x+2)^(0+256),w
 15989  1E19  0021               	movlb	1	; select bank1
 15990  1E1A  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15991  1E1B  0022               	movlb	2	; select bank2
 15992  1E1C  0832               	movf	floor@i^(0+256),w
 15993  1E1D  0021               	movlb	1	; select bank1
 15994  1E1E  00A3               	movwf	___ftge@ff2^(0+128)
 15995  1E1F  0022               	movlb	2	; select bank2
 15996  1E20  0833               	movf	(floor@i+1)^(0+256),w
 15997  1E21  0021               	movlb	1	; select bank1
 15998  1E22  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15999  1E23  0022               	movlb	2	; select bank2
 16000  1E24  0834               	movf	(floor@i+2)^(0+256),w
 16001  1E25  0021               	movlb	1	; select bank1
 16002  1E26  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 16003  1E27  31A0  20AA  319D   	fcall	___ftge
 16004  1E2A  1803               	btfsc	3,0
 16005  1E2B  2E4E               	goto	l8202
 16006  1E2C  3000               	movlw	0
 16007  1E2D  0021               	movlb	1	; select bank1
 16008  1E2E  00C1               	movwf	___ftadd@f1^(0+128)
 16009  1E2F  3080               	movlw	128
 16010  1E30  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 16011  1E31  30BF               	movlw	191
 16012  1E32  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 16013  1E33  0022               	movlb	2	; select bank2
 16014  1E34  0832               	movf	floor@i^(0+256),w
 16015  1E35  0021               	movlb	1	; select bank1
 16016  1E36  00C4               	movwf	___ftadd@f2^(0+128)
 16017  1E37  0022               	movlb	2	; select bank2
 16018  1E38  0833               	movf	(floor@i+1)^(0+256),w
 16019  1E39  0021               	movlb	1	; select bank1
 16020  1E3A  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 16021  1E3B  0022               	movlb	2	; select bank2
 16022  1E3C  0834               	movf	(floor@i+2)^(0+256),w
 16023  1E3D  0021               	movlb	1	; select bank1
 16024  1E3E  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 16025  1E3F  319F  270A         	fcall	___ftadd
 16026  1E41  0021               	movlb	1	; select bank1
 16027  1E42  0841               	movf	?___ftadd^(0+128),w
 16028  1E43  0022               	movlb	2	; select bank2
 16029  1E44  00AE               	movwf	?_floor^(0+256)
 16030  1E45  0021               	movlb	1	; select bank1
 16031  1E46  0842               	movf	(?___ftadd+1)^(0+128),w
 16032  1E47  0022               	movlb	2	; select bank2
 16033  1E48  00AF               	movwf	(?_floor+1)^(0+256)
 16034  1E49  0021               	movlb	1	; select bank1
 16035  1E4A  0843               	movf	(?___ftadd+2)^(0+128),w
 16036  1E4B  0022               	movlb	2	; select bank2
 16037  1E4C  00B0               	movwf	(?_floor+2)^(0+256)
 16038  1E4D  0008               	return
 16039  1E4E                     l8202:	
 16040  1E4E  0022               	movlb	2	; select bank2
 16041  1E4F  0832               	movf	floor@i^(0+256),w
 16042  1E50  00AE               	movwf	?_floor^(0+256)
 16043  1E51  0833               	movf	(floor@i+1)^(0+256),w
 16044  1E52  00AF               	movwf	(?_floor+1)^(0+256)
 16045  1E53  0834               	movf	(floor@i+2)^(0+256),w
 16046  1E54  00B0               	movwf	(?_floor+2)^(0+256)
 16047  1E55  0008               	return
 16048  1E56                     __end_of_floor:	
 16049                           
 16050                           	psect	text48
 16051  219D                     __ptext48:	
 16052 ;; *************** function _frexp *****************
 16053 ;; Defined at:
 16054 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
 16055 ;; Parameters:    Size  Location     Type
 16056 ;;  value           3    0[BANK1 ] int 
 16057 ;;  eptr            1    3[BANK1 ] PTR int 
 16058 ;;		 -> log@exponent(2), floor@expon(2), 
 16059 ;; Auto vars:     Size  Location     Type
 16060 ;;		None
 16061 ;; Return value:  Size  Location     Type
 16062 ;;                  3    0[BANK1 ] PTR int 
 16063 ;; Registers used:
 16064 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16065 ;; Tracked objects:
 16066 ;;		On entry : 0/0
 16067 ;;		On exit  : 0/0
 16068 ;;		Unchanged: 0/0
 16069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16070 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16071 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16072 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16073 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16074 ;;Total ram usage:        6 bytes
 16075 ;; Hardware stack levels used:    1
 16076 ;; Hardware stack levels required when called:    3
 16077 ;; This function calls:
 16078 ;;		Nothing
 16079 ;; This function is called by:
 16080 ;;		_floor
 16081 ;;		_log
 16082 ;; This function uses a non-reentrant model
 16083 ;;
 16084                           
 16085                           
 16086                           ;psect for function _frexp
 16087  219D                     _frexp:	
 16088                           
 16089                           ;incstack = 0
 16090                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
 16091  219D  0021               	movlb	1	; select bank1
 16092  219E  0822               	movf	(frexp@value+2)^(0+128),w
 16093  219F  0421               	iorwf	(frexp@value+1)^(0+128),w
 16094  21A0  0420               	iorwf	frexp@value^(0+128),w
 16095  21A1  1D03               	skipz
 16096  21A2  29B1               	goto	l8054
 16097  21A3  0823               	movf	frexp@eptr^(0+128),w
 16098  21A4  0086               	movwf	6
 16099  21A5  3001               	movlw	1	; select bank2/3
 16100  21A6  0087               	movwf	7
 16101  21A7  3000               	movlw	0
 16102  21A8  3FC0               	movwi [0]fsr1
 16103  21A9  3FC1               	movwi [1]fsr1
 16104  21AA  3000               	movlw	0
 16105  21AB  00A0               	movwf	?_frexp^(0+128)
 16106  21AC  3000               	movlw	0
 16107  21AD  00A1               	movwf	(?_frexp+1)^(0+128)
 16108  21AE  3000               	movlw	0
 16109  21AF  00A2               	movwf	(?_frexp+2)^(0+128)
 16110  21B0  0008               	return
 16111  21B1                     l8054:	
 16112  21B1  0822               	movf	(frexp@value^(0+128)+2),w
 16113  21B2  397F               	andlw	127
 16114  21B3  00A4               	movwf	??_frexp^(0+128)
 16115  21B4  01A5               	clrf	(??_frexp^(0+128)+1)
 16116  21B5  35A4               	lslf	??_frexp^(0+128),f
 16117  21B6  0DA5               	rlf	(??_frexp^(0+128)+1),f
 16118  21B7  0823               	movf	frexp@eptr^(0+128),w
 16119  21B8  0086               	movwf	6
 16120  21B9  3001               	movlw	1	; select bank2/3
 16121  21BA  0087               	movwf	7
 16122  21BB  0824               	movf	??_frexp^(0+128),w
 16123  21BC  3FC0               	movwi [0]fsr1
 16124  21BD  0825               	movf	(??_frexp+1)^(0+128),w
 16125  21BE  3FC1               	movwi [1]fsr1
 16126  21BF  0D21               	rlf	(frexp@value^(0+128)+1),w
 16127  21C0  0D21               	rlf	(frexp@value^(0+128)+1),w
 16128  21C1  3901               	andlw	1
 16129  21C2  00A4               	movwf	??_frexp^(0+128)
 16130  21C3  01A5               	clrf	(??_frexp^(0+128)+1)
 16131  21C4  0823               	movf	frexp@eptr^(0+128),w
 16132  21C5  0086               	movwf	6
 16133  21C6  3001               	movlw	1	; select bank2/3
 16134  21C7  0087               	movwf	7
 16135  21C8  0824               	movf	??_frexp^(0+128),w
 16136  21C9  0481               	iorwf	1,f
 16137  21CA  3141               	addfsr 1,1
 16138  21CB  0825               	movf	(??_frexp+1)^(0+128),w
 16139  21CC  0481               	iorwf	1,f
 16140  21CD  0823               	movf	frexp@eptr^(0+128),w
 16141  21CE  0086               	movwf	6
 16142  21CF  3001               	movlw	1	; select bank2/3
 16143  21D0  0087               	movwf	7
 16144  21D1  3082               	movlw	130
 16145  21D2  0781               	addwf	1,f
 16146  21D3  3141               	addfsr 1,1
 16147  21D4  30FF               	movlw	255
 16148  21D5  3D81               	addwfc	1,f
 16149  21D6  317F               	addfsr 1,-1
 16150  21D7  0822               	movf	(frexp@value^(0+128)+2),w
 16151  21D8  3980               	andlw	-128
 16152  21D9  383F               	iorlw	63
 16153  21DA  00A2               	movwf	(frexp@value^(0+128)+2)
 16154  21DB  13A1               	bcf	(frexp@value^(0+128)+1),7
 16155  21DC  0008               	return
 16156  21DD                     __end_of_frexp:	
 16157                           
 16158                           	psect	text49
 16159  198A                     __ptext49:	
 16160 ;; *************** function ___fttol *****************
 16161 ;; Defined at:
 16162 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
 16163 ;; Parameters:    Size  Location     Type
 16164 ;;  f1              3    0[BANK2 ] float 
 16165 ;; Auto vars:     Size  Location     Type
 16166 ;;  lval            4    9[BANK2 ] unsigned long 
 16167 ;;  exp1            1   13[BANK2 ] unsigned char 
 16168 ;;  sign1           1    8[BANK2 ] unsigned char 
 16169 ;; Return value:  Size  Location     Type
 16170 ;;                  4    0[BANK2 ] long 
 16171 ;; Registers used:
 16172 ;;		wreg, status,2, status,0
 16173 ;; Tracked objects:
 16174 ;;		On entry : 0/0
 16175 ;;		On exit  : 0/0
 16176 ;;		Unchanged: 0/0
 16177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16178 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16179 ;;      Locals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16180 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16181 ;;      Totals:         0       0       0      14       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16182 ;;Total ram usage:       14 bytes
 16183 ;; Hardware stack levels used:    1
 16184 ;; Hardware stack levels required when called:    3
 16185 ;; This function calls:
 16186 ;;		Nothing
 16187 ;; This function is called by:
 16188 ;;		_main
 16189 ;;		_set_subdivision
 16190 ;;		_scaleA100kPot
 16191 ;;		_scaleA10kPot
 16192 ;;		_scaleiA10kPot
 16193 ;;		_getModulationDelayTime
 16194 ;;		_modCos
 16195 ;;		_modTri
 16196 ;;		_modSaw
 16197 ;;		_pow
 16198 ;;		_exp
 16199 ;;		_floor
 16200 ;;		_scaleiA100kPot
 16201 ;; This function uses a non-reentrant model
 16202 ;;
 16203                           
 16204                           
 16205                           ;psect for function ___fttol
 16206  198A                     ___fttol:	
 16207                           
 16208                           ;incstack = 0
 16209                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 16210  198A  0022               	movlb	2	; select bank2
 16211  198B  0820               	movf	___fttol@f1^(0+256),w
 16212  198C  00A4               	movwf	??___fttol^(0+256)
 16213  198D  0821               	movf	(___fttol@f1+1)^(0+256),w
 16214  198E  00A5               	movwf	(??___fttol^(0+256)+1)
 16215  198F  0822               	movf	(___fttol@f1+2)^(0+256),w
 16216  1990  00A6               	movwf	(??___fttol^(0+256)+2)
 16217  1991  1003               	clrc
 16218  1992  0D25               	rlf	(??___fttol^(0+256)+1),w
 16219  1993  0D26               	rlf	(??___fttol^(0+256)+2),w
 16220  1994  00A7               	movwf	(??___fttol+3)^(0+256)
 16221  1995  0827               	movf	(??___fttol+3)^(0+256),w
 16222  1996  00AD               	movwf	___fttol@exp1^(0+256)
 16223  1997  082D               	movf	___fttol@exp1^(0+256),w
 16224  1998  1D03               	btfss	3,2
 16225  1999  29A3               	goto	l8010
 16226  199A  3000               	movlw	0
 16227  199B  00A3               	movwf	(?___fttol+3)^(0+256)
 16228  199C  3000               	movlw	0
 16229  199D  00A2               	movwf	(?___fttol+2)^(0+256)
 16230  199E  3000               	movlw	0
 16231  199F  00A1               	movwf	(?___fttol+1)^(0+256)
 16232  19A0  3000               	movlw	0
 16233  19A1  00A0               	movwf	?___fttol^(0+256)
 16234  19A2  0008               	return
 16235  19A3                     l8010:	
 16236  19A3  0820               	movf	___fttol@f1^(0+256),w
 16237  19A4  00A4               	movwf	??___fttol^(0+256)
 16238  19A5  0821               	movf	(___fttol@f1+1)^(0+256),w
 16239  19A6  00A5               	movwf	(??___fttol^(0+256)+1)
 16240  19A7  0822               	movf	(___fttol@f1+2)^(0+256),w
 16241  19A8  00A6               	movwf	(??___fttol^(0+256)+2)
 16242  19A9  3017               	movlw	23
 16243  19AA                     u8425:	
 16244  19AA  36A6               	lsrf	(??___fttol^(0+256)+2),f
 16245  19AB  0CA5               	rrf	(??___fttol^(0+256)+1),f
 16246  19AC  0CA4               	rrf	??___fttol^(0+256),f
 16247  19AD  0B89               	decfsz	9,f
 16248  19AE  29AA               	goto	u8425
 16249  19AF  0824               	movf	??___fttol^(0+256),w
 16250  19B0  00A7               	movwf	(??___fttol+3)^(0+256)
 16251  19B1  0827               	movf	(??___fttol+3)^(0+256),w
 16252  19B2  00A8               	movwf	___fttol@sign1^(0+256)
 16253  19B3  17A1               	bsf	(___fttol@f1^(0+256)+1),7
 16254  19B4  30FF               	movlw	255
 16255  19B5  05A0               	andwf	___fttol@f1^(0+256),f
 16256  19B6  30FF               	movlw	255
 16257  19B7  05A1               	andwf	(___fttol@f1+1)^(0+256),f
 16258  19B8  3000               	movlw	0
 16259  19B9  05A2               	andwf	(___fttol@f1+2)^(0+256),f
 16260  19BA  0820               	movf	___fttol@f1^(0+256),w
 16261  19BB  00A9               	movwf	___fttol@lval^(0+256)
 16262  19BC  0821               	movf	(___fttol@f1+1)^(0+256),w
 16263  19BD  00AA               	movwf	(___fttol@lval^(0+256)+1)
 16264  19BE  0822               	movf	(___fttol@f1+2)^(0+256),w
 16265  19BF  00AB               	movwf	(___fttol@lval^(0+256)+2)
 16266  19C0  01AC               	clrf	(___fttol@lval^(0+256)+3)
 16267  19C1  308E               	movlw	142
 16268  19C2  02AD               	subwf	___fttol@exp1^(0+256),f
 16269  19C3  1FAD               	btfss	___fttol@exp1^(0+256),7
 16270  19C4  29E1               	goto	l8030
 16271  19C5  082D               	movf	___fttol@exp1^(0+256),w
 16272  19C6  3A80               	xorlw	128
 16273  19C7  3E8F               	addlw	143
 16274  19C8  1803               	skipnc
 16275  19C9  29D3               	goto	l8028
 16276  19CA  3000               	movlw	0
 16277  19CB  00A3               	movwf	(?___fttol+3)^(0+256)
 16278  19CC  3000               	movlw	0
 16279  19CD  00A2               	movwf	(?___fttol+2)^(0+256)
 16280  19CE  3000               	movlw	0
 16281  19CF  00A1               	movwf	(?___fttol+1)^(0+256)
 16282  19D0  3000               	movlw	0
 16283  19D1  00A0               	movwf	?___fttol^(0+256)
 16284  19D2  0008               	return
 16285  19D3                     l8028:	
 16286  19D3  3001               	movlw	1
 16287  19D4                     u8455:	
 16288  19D4  36AC               	lsrf	(___fttol@lval+3)^(0+256),f
 16289  19D5  0CAB               	rrf	(___fttol@lval+2)^(0+256),f
 16290  19D6  0CAA               	rrf	(___fttol@lval+1)^(0+256),f
 16291  19D7  0CA9               	rrf	___fttol@lval^(0+256),f
 16292  19D8  0B89               	decfsz	9,f
 16293  19D9  29D4               	goto	u8455
 16294  19DA  3001               	movlw	1
 16295  19DB  00A4               	movwf	??___fttol^(0+256)
 16296  19DC  0824               	movf	??___fttol^(0+256),w
 16297  19DD  07AD               	addwf	___fttol@exp1^(0+256),f
 16298  19DE  1903               	btfsc	3,2
 16299  19DF  29FA               	goto	l8038
 16300  19E0  29D3               	goto	l8028
 16301  19E1                     l8030:	
 16302  19E1  3018               	movlw	24
 16303  19E2  022D               	subwf	___fttol@exp1^(0+256),w
 16304  19E3  1C03               	skipc
 16305  19E4  29F7               	goto	l2260
 16306  19E5  3000               	movlw	0
 16307  19E6  00A3               	movwf	(?___fttol+3)^(0+256)
 16308  19E7  3000               	movlw	0
 16309  19E8  00A2               	movwf	(?___fttol+2)^(0+256)
 16310  19E9  3000               	movlw	0
 16311  19EA  00A1               	movwf	(?___fttol+1)^(0+256)
 16312  19EB  3000               	movlw	0
 16313  19EC  00A0               	movwf	?___fttol^(0+256)
 16314  19ED  0008               	return
 16315  19EE                     l8036:	
 16316  19EE  3001               	movlw	1
 16317  19EF                     u8485:	
 16318  19EF  35A9               	lslf	___fttol@lval^(0+256),f
 16319  19F0  0DAA               	rlf	(___fttol@lval+1)^(0+256),f
 16320  19F1  0DAB               	rlf	(___fttol@lval+2)^(0+256),f
 16321  19F2  0DAC               	rlf	(___fttol@lval+3)^(0+256),f
 16322  19F3  0B89               	decfsz	9,f
 16323  19F4  29EF               	goto	u8485
 16324  19F5  3001               	movlw	1
 16325  19F6  02AD               	subwf	___fttol@exp1^(0+256),f
 16326  19F7                     l2260:	
 16327  19F7  082D               	movf	___fttol@exp1^(0+256),w
 16328  19F8  1D03               	btfss	3,2
 16329  19F9  29EE               	goto	l8036
 16330  19FA                     l8038:	
 16331  19FA  0828               	movf	___fttol@sign1^(0+256),w
 16332  19FB  1903               	btfsc	3,2
 16333  19FC  2A08               	goto	l8042
 16334  19FD  09A9               	comf	___fttol@lval^(0+256),f
 16335  19FE  09AA               	comf	(___fttol@lval+1)^(0+256),f
 16336  19FF  09AB               	comf	(___fttol@lval+2)^(0+256),f
 16337  1A00  09AC               	comf	(___fttol@lval+3)^(0+256),f
 16338  1A01  0AA9               	incf	___fttol@lval^(0+256),f
 16339  1A02  1903               	skipnz
 16340  1A03  0AAA               	incf	(___fttol@lval+1)^(0+256),f
 16341  1A04  1903               	skipnz
 16342  1A05  0AAB               	incf	(___fttol@lval+2)^(0+256),f
 16343  1A06  1903               	skipnz
 16344  1A07  0AAC               	incf	(___fttol@lval+3)^(0+256),f
 16345  1A08                     l8042:	
 16346  1A08  082C               	movf	(___fttol@lval+3)^(0+256),w
 16347  1A09  00A3               	movwf	(?___fttol+3)^(0+256)
 16348  1A0A  082B               	movf	(___fttol@lval+2)^(0+256),w
 16349  1A0B  00A2               	movwf	(?___fttol+2)^(0+256)
 16350  1A0C  082A               	movf	(___fttol@lval+1)^(0+256),w
 16351  1A0D  00A1               	movwf	(?___fttol+1)^(0+256)
 16352  1A0E  0829               	movf	___fttol@lval^(0+256),w
 16353  1A0F  00A0               	movwf	?___fttol^(0+256)
 16354  1A10  0008               	return
 16355  1A11                     __end_of___fttol:	
 16356                           
 16357                           	psect	text50
 16358  20AA                     __ptext50:	
 16359 ;; *************** function ___ftge *****************
 16360 ;; Defined at:
 16361 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftge.c"
 16362 ;; Parameters:    Size  Location     Type
 16363 ;;  ff1             3    0[BANK1 ] float 
 16364 ;;  ff2             3    3[BANK1 ] float 
 16365 ;; Auto vars:     Size  Location     Type
 16366 ;;		None
 16367 ;; Return value:  Size  Location     Type
 16368 ;;		None               void
 16369 ;; Registers used:
 16370 ;;		wreg, status,2, status,0
 16371 ;; Tracked objects:
 16372 ;;		On entry : 0/0
 16373 ;;		On exit  : 0/0
 16374 ;;		Unchanged: 0/0
 16375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16376 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16377 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16378 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16379 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16380 ;;Total ram usage:        9 bytes
 16381 ;; Hardware stack levels used:    1
 16382 ;; Hardware stack levels required when called:    3
 16383 ;; This function calls:
 16384 ;;		Nothing
 16385 ;; This function is called by:
 16386 ;;		_modCos
 16387 ;;		_modTri
 16388 ;;		_modSaw
 16389 ;;		_modSquare
 16390 ;;		_cos
 16391 ;;		_pow
 16392 ;;		_sin
 16393 ;;		_exp
 16394 ;;		_floor
 16395 ;;		_ldexp
 16396 ;;		_log
 16397 ;; This function uses a non-reentrant model
 16398 ;;
 16399                           
 16400                           
 16401                           ;psect for function ___ftge
 16402  20AA                     ___ftge:	
 16403                           
 16404                           ;incstack = 0
 16405                           ; Regs used in ___ftge: [wreg+status,2+status,0]
 16406  20AA  0021               	movlb	1	; select bank1
 16407  20AB  1FA2               	btfss	(___ftge@ff1+2)^(0+128),7
 16408  20AC  28C1               	goto	l7930
 16409  20AD  0920               	comf	___ftge@ff1^(0+128),w
 16410  20AE  00A6               	movwf	??___ftge^(0+128)
 16411  20AF  0921               	comf	(___ftge@ff1+1)^(0+128),w
 16412  20B0  00A7               	movwf	(??___ftge^(0+128)+1)
 16413  20B1  0922               	comf	(___ftge@ff1+2)^(0+128),w
 16414  20B2  00A8               	movwf	(??___ftge^(0+128)+2)
 16415  20B3  0AA6               	incf	??___ftge^(0+128),f
 16416  20B4  1903               	skipnz
 16417  20B5  0AA7               	incf	(??___ftge^(0+128)+1),f
 16418  20B6  1903               	skipnz
 16419  20B7  0AA8               	incf	(??___ftge^(0+128)+2),f
 16420  20B8  3000               	movlw	0
 16421  20B9  0726               	addwf	??___ftge^(0+128),w
 16422  20BA  00A0               	movwf	___ftge@ff1^(0+128)
 16423  20BB  3000               	movlw	0
 16424  20BC  3D27               	addwfc	(??___ftge+1)^(0+128),w
 16425  20BD  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 16426  20BE  3080               	movlw	128
 16427  20BF  3D28               	addwfc	(??___ftge+2)^(0+128),w
 16428  20C0  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 16429  20C1                     l7930:	
 16430  20C1  1FA5               	btfss	(___ftge@ff2+2)^(0+128),7
 16431  20C2  28D7               	goto	l7934
 16432  20C3  0923               	comf	___ftge@ff2^(0+128),w
 16433  20C4  00A6               	movwf	??___ftge^(0+128)
 16434  20C5  0924               	comf	(___ftge@ff2+1)^(0+128),w
 16435  20C6  00A7               	movwf	(??___ftge^(0+128)+1)
 16436  20C7  0925               	comf	(___ftge@ff2+2)^(0+128),w
 16437  20C8  00A8               	movwf	(??___ftge^(0+128)+2)
 16438  20C9  0AA6               	incf	??___ftge^(0+128),f
 16439  20CA  1903               	skipnz
 16440  20CB  0AA7               	incf	(??___ftge^(0+128)+1),f
 16441  20CC  1903               	skipnz
 16442  20CD  0AA8               	incf	(??___ftge^(0+128)+2),f
 16443  20CE  3000               	movlw	0
 16444  20CF  0726               	addwf	??___ftge^(0+128),w
 16445  20D0  00A3               	movwf	___ftge@ff2^(0+128)
 16446  20D1  3000               	movlw	0
 16447  20D2  3D27               	addwfc	(??___ftge+1)^(0+128),w
 16448  20D3  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 16449  20D4  3080               	movlw	128
 16450  20D5  3D28               	addwfc	(??___ftge+2)^(0+128),w
 16451  20D6  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 16452  20D7                     l7934:	
 16453  20D7  3080               	movlw	128
 16454  20D8  06A2               	xorwf	(___ftge@ff1+2)^(0+128),f
 16455  20D9  3080               	movlw	128
 16456  20DA  06A5               	xorwf	(___ftge@ff2+2)^(0+128),f
 16457  20DB  0825               	movf	(___ftge@ff2+2)^(0+128),w
 16458  20DC  0222               	subwf	(___ftge@ff1+2)^(0+128),w
 16459  20DD  1D03               	skipz
 16460  20DE  0008               	return
 16461  20DF  0824               	movf	(___ftge@ff2+1)^(0+128),w
 16462  20E0  0221               	subwf	(___ftge@ff1+1)^(0+128),w
 16463  20E1  1D03               	skipz
 16464  20E2  0008               	return
 16465  20E3  0823               	movf	___ftge@ff2^(0+128),w
 16466  20E4  0220               	subwf	___ftge@ff1^(0+128),w
 16467  20E5  0008               	return
 16468  20E6                     __end_of___ftge:	
 16469                           
 16470                           	psect	text51
 16471  20E6                     __ptext51:	
 16472 ;; *************** function ___altoft *****************
 16473 ;; Defined at:
 16474 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\altoft.c"
 16475 ;; Parameters:    Size  Location     Type
 16476 ;;  c               4    8[BANK1 ] long 
 16477 ;; Auto vars:     Size  Location     Type
 16478 ;;  sign            1   15[BANK1 ] unsigned char 
 16479 ;;  exp             1   14[BANK1 ] unsigned char 
 16480 ;; Return value:  Size  Location     Type
 16481 ;;                  3    8[BANK1 ] float 
 16482 ;; Registers used:
 16483 ;;		wreg, status,2, status,0, pclath, cstack
 16484 ;; Tracked objects:
 16485 ;;		On entry : 0/0
 16486 ;;		On exit  : 0/0
 16487 ;;		Unchanged: 0/0
 16488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16489 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16490 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16491 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16492 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16493 ;;Total ram usage:        8 bytes
 16494 ;; Hardware stack levels used:    1
 16495 ;; Hardware stack levels required when called:    4
 16496 ;; This function calls:
 16497 ;;		___ftpack
 16498 ;; This function is called by:
 16499 ;;		_getModulationDelayTime
 16500 ;;		_floor
 16501 ;; This function uses a non-reentrant model
 16502 ;;
 16503                           
 16504                           
 16505                           ;psect for function ___altoft
 16506  20E6                     ___altoft:	
 16507                           
 16508                           ;incstack = 0
 16509                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
 16510  20E6  0021               	movlb	1	; select bank1
 16511  20E7  01AF               	clrf	___altoft@sign^(0+128)
 16512  20E8  308E               	movlw	142
 16513  20E9  00AC               	movwf	??___altoft^(0+128)
 16514  20EA  082C               	movf	??___altoft^(0+128),w
 16515  20EB  00AE               	movwf	___altoft@exp^(0+128)
 16516  20EC  1FAB               	btfss	(___altoft@c+3)^(0+128),7
 16517  20ED  28FB               	goto	l7850
 16518  20EE  09A8               	comf	___altoft@c^(0+128),f
 16519  20EF  09A9               	comf	(___altoft@c+1)^(0+128),f
 16520  20F0  09AA               	comf	(___altoft@c+2)^(0+128),f
 16521  20F1  09AB               	comf	(___altoft@c+3)^(0+128),f
 16522  20F2  0AA8               	incf	___altoft@c^(0+128),f
 16523  20F3  1903               	skipnz
 16524  20F4  0AA9               	incf	(___altoft@c+1)^(0+128),f
 16525  20F5  1903               	skipnz
 16526  20F6  0AAA               	incf	(___altoft@c+2)^(0+128),f
 16527  20F7  1903               	skipnz
 16528  20F8  0AAB               	incf	(___altoft@c+3)^(0+128),f
 16529  20F9  01AF               	clrf	___altoft@sign^(0+128)
 16530  20FA  0AAF               	incf	___altoft@sign^(0+128),f
 16531  20FB                     l7850:	
 16532  20FB  30FF               	movlw	255
 16533  20FC  052B               	andwf	(___altoft@c+3)^(0+128),w
 16534  20FD  1903               	btfsc	3,2
 16535  20FE  290B               	goto	l7852
 16536  20FF  3001               	movlw	1
 16537  2100                     u8005:	
 16538  2100  36AB               	lsrf	(___altoft@c+3)^(0+128),f
 16539  2101  0CAA               	rrf	(___altoft@c+2)^(0+128),f
 16540  2102  0CA9               	rrf	(___altoft@c+1)^(0+128),f
 16541  2103  0CA8               	rrf	___altoft@c^(0+128),f
 16542  2104  0B89               	decfsz	9,f
 16543  2105  2900               	goto	u8005
 16544  2106  3001               	movlw	1
 16545  2107  00AC               	movwf	??___altoft^(0+128)
 16546  2108  082C               	movf	??___altoft^(0+128),w
 16547  2109  07AE               	addwf	___altoft@exp^(0+128),f
 16548  210A  28FB               	goto	l7850
 16549  210B                     l7852:	
 16550  210B  0828               	movf	___altoft@c^(0+128),w
 16551  210C  00A0               	movwf	___ftpack@arg^(0+128)
 16552  210D  0829               	movf	(___altoft@c+1)^(0+128),w
 16553  210E  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 16554  210F  082A               	movf	(___altoft@c+2)^(0+128),w
 16555  2110  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 16556  2111  082E               	movf	___altoft@exp^(0+128),w
 16557  2112  00AC               	movwf	??___altoft^(0+128)
 16558  2113  082C               	movf	??___altoft^(0+128),w
 16559  2114  00A3               	movwf	___ftpack@exp^(0+128)
 16560  2115  082F               	movf	___altoft@sign^(0+128),w
 16561  2116  00AD               	movwf	(??___altoft+1)^(0+128)
 16562  2117  082D               	movf	(??___altoft+1)^(0+128),w
 16563  2118  00A4               	movwf	___ftpack@sign^(0+128)
 16564  2119  31A5  25B6         	fcall	___ftpack
 16565  211B  0021               	movlb	1	; select bank1
 16566  211C  0820               	movf	?___ftpack^(0+128),w
 16567  211D  00A8               	movwf	?___altoft^(0+128)
 16568  211E  0821               	movf	(?___ftpack+1)^(0+128),w
 16569  211F  00A9               	movwf	(?___altoft+1)^(0+128)
 16570  2120  0822               	movf	(?___ftpack+2)^(0+128),w
 16571  2121  00AA               	movwf	(?___altoft+2)^(0+128)
 16572  2122  0008               	return
 16573  2123                     __end_of___altoft:	
 16574                           
 16575                           	psect	text52
 16576  261B                     __ptext52:	
 16577 ;; *************** function _eval_poly *****************
 16578 ;; Defined at:
 16579 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\evalpoly.c"
 16580 ;; Parameters:    Size  Location     Type
 16581 ;;  x               3   20[BANK2 ] float 
 16582 ;;  d               2   23[BANK2 ] PTR const 
 16583 ;;		 -> log@coeff(27), exp@coeff(30), sin@coeff_a(15), sin@coeff_b(12), 
 16584 ;;  n               2   25[BANK2 ] int 
 16585 ;; Auto vars:     Size  Location     Type
 16586 ;;  res             3   27[BANK2 ] int 
 16587 ;; Return value:  Size  Location     Type
 16588 ;;                  3   20[BANK2 ] int 
 16589 ;; Registers used:
 16590 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 16591 ;; Tracked objects:
 16592 ;;		On entry : 0/0
 16593 ;;		On exit  : 0/0
 16594 ;;		Unchanged: 0/0
 16595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16596 ;;      Params:         0       0       0       7       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16597 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16599 ;;      Totals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16600 ;;Total ram usage:       10 bytes
 16601 ;; Hardware stack levels used:    1
 16602 ;; Hardware stack levels required when called:    5
 16603 ;; This function calls:
 16604 ;;		___ftadd
 16605 ;;		___ftmul
 16606 ;;		___wmul
 16607 ;; This function is called by:
 16608 ;;		_sin
 16609 ;;		_exp
 16610 ;;		_log
 16611 ;; This function uses a non-reentrant model
 16612 ;;
 16613                           
 16614                           
 16615                           ;psect for function _eval_poly
 16616  261B                     _eval_poly:	
 16617                           
 16618                           ;incstack = 0
 16619                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 16620  261B  0022               	movlb	2	; select bank2
 16621  261C  083A               	movf	(eval_poly@n+1)^(0+256),w
 16622  261D  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 16623  261E  0839               	movf	eval_poly@n^(0+256),w
 16624  261F  00AE               	movwf	___wmul@multiplier^(0+256)
 16625  2620  3003               	movlw	3
 16626  2621  00B0               	movwf	___wmul@multiplicand^(0+256)
 16627  2622  3000               	movlw	0
 16628  2623  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 16629  2624  31AD  2570  31A6   	fcall	___wmul
 16630  2627  0022               	movlb	2	; select bank2
 16631  2628  0837               	movf	eval_poly@d^(0+256),w
 16632  2629  072E               	addwf	?___wmul^(0+256),w
 16633  262A  0084               	movwf	4
 16634  262B  0838               	movf	(eval_poly@d+1)^(0+256),w
 16635  262C  3D2F               	addwfc	(?___wmul+1)^(0+256),w
 16636  262D  0085               	movwf	5
 16637  262E  3F00               	moviw [0]fsr0
 16638  262F  00BB               	movwf	eval_poly@res^(0+256)
 16639  2630  3F01               	moviw [1]fsr0
 16640  2631  00BC               	movwf	(eval_poly@res+1)^(0+256)
 16641  2632  3F02               	moviw [2]fsr0
 16642  2633                     L19:	
 16643  2633  00BD               	movwf	(eval_poly@res+2)^(0+256)
 16644  2634  0839               	movf	eval_poly@n^(0+256),w
 16645  2635  043A               	iorwf	(eval_poly@n+1)^(0+256),w
 16646  2636  1903               	btfsc	3,2
 16647  2637  2E86               	goto	l8212
 16648  2638  30FF               	movlw	255
 16649  2639  07B9               	addwf	eval_poly@n^(0+256),f
 16650  263A  30FF               	movlw	255
 16651  263B  3DBA               	addwfc	(eval_poly@n+1)^(0+256),f
 16652  263C  083A               	movf	(eval_poly@n+1)^(0+256),w
 16653  263D  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 16654  263E  0839               	movf	eval_poly@n^(0+256),w
 16655  263F  00AE               	movwf	___wmul@multiplier^(0+256)
 16656  2640  3003               	movlw	3
 16657  2641  00B0               	movwf	___wmul@multiplicand^(0+256)
 16658  2642  3000               	movlw	0
 16659  2643  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 16660  2644  31AD  2570  31A6   	fcall	___wmul
 16661  2647  0022               	movlb	2	; select bank2
 16662  2648  0837               	movf	eval_poly@d^(0+256),w
 16663  2649  072E               	addwf	?___wmul^(0+256),w
 16664  264A  0084               	movwf	4
 16665  264B  0838               	movf	(eval_poly@d+1)^(0+256),w
 16666  264C  3D2F               	addwfc	(?___wmul+1)^(0+256),w
 16667  264D  0085               	movwf	5
 16668  264E  3F00               	moviw [0]fsr0
 16669  264F  0021               	movlb	1	; select bank1
 16670  2650  00C1               	movwf	___ftadd@f1^(0+128)
 16671  2651  3F01               	moviw [1]fsr0
 16672  2652  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 16673  2653  3F02               	moviw [2]fsr0
 16674  2654  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 16675  2655  0022               	movlb	2	; select bank2
 16676  2656  083B               	movf	eval_poly@res^(0+256),w
 16677  2657  0021               	movlb	1	; select bank1
 16678  2658  00AE               	movwf	___ftmul@f1^(0+128)
 16679  2659  0022               	movlb	2	; select bank2
 16680  265A  083C               	movf	(eval_poly@res+1)^(0+256),w
 16681  265B  0021               	movlb	1	; select bank1
 16682  265C  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 16683  265D  0022               	movlb	2	; select bank2
 16684  265E  083D               	movf	(eval_poly@res+2)^(0+256),w
 16685  265F  0021               	movlb	1	; select bank1
 16686  2660  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 16687  2661  0022               	movlb	2	; select bank2
 16688  2662  0834               	movf	eval_poly@x^(0+256),w
 16689  2663  0021               	movlb	1	; select bank1
 16690  2664  00B1               	movwf	___ftmul@f2^(0+128)
 16691  2665  0022               	movlb	2	; select bank2
 16692  2666  0835               	movf	(eval_poly@x+1)^(0+256),w
 16693  2667  0021               	movlb	1	; select bank1
 16694  2668  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 16695  2669  0022               	movlb	2	; select bank2
 16696  266A  0836               	movf	(eval_poly@x+2)^(0+256),w
 16697  266B  0021               	movlb	1	; select bank1
 16698  266C  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 16699  266D  319E  2656  31A6   	fcall	___ftmul
 16700  2670  0021               	movlb	1	; select bank1
 16701  2671  082E               	movf	?___ftmul^(0+128),w
 16702  2672  00C4               	movwf	___ftadd@f2^(0+128)
 16703  2673  082F               	movf	(?___ftmul+1)^(0+128),w
 16704  2674  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 16705  2675  0830               	movf	(?___ftmul+2)^(0+128),w
 16706  2676  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 16707  2677  319F  270A  31A6   	fcall	___ftadd
 16708  267A  0021               	movlb	1	; select bank1
 16709  267B  0841               	movf	?___ftadd^(0+128),w
 16710  267C  0022               	movlb	2	; select bank2
 16711  267D  00BB               	movwf	eval_poly@res^(0+256)
 16712  267E  0021               	movlb	1	; select bank1
 16713  267F  0842               	movf	(?___ftadd+1)^(0+128),w
 16714  2680  0022               	movlb	2	; select bank2
 16715  2681  00BC               	movwf	(eval_poly@res+1)^(0+256)
 16716  2682  0021               	movlb	1	; select bank1
 16717  2683  0843               	movf	(?___ftadd+2)^(0+128),w
 16718  2684  0022               	movlb	2	; select bank2
 16719  2685  2E33               	goto	L19
 16720  2686                     l8212:	
 16721  2686  083B               	movf	eval_poly@res^(0+256),w
 16722  2687  00B4               	movwf	?_eval_poly^(0+256)
 16723  2688  083C               	movf	(eval_poly@res+1)^(0+256),w
 16724  2689  00B5               	movwf	(?_eval_poly+1)^(0+256)
 16725  268A  083D               	movf	(eval_poly@res+2)^(0+256),w
 16726  268B  00B6               	movwf	(?_eval_poly+2)^(0+256)
 16727  268C  0008               	return
 16728  268D                     __end_of_eval_poly:	
 16729                           
 16730                           	psect	text53
 16731  2D70                     __ptext53:	
 16732 ;; *************** function ___wmul *****************
 16733 ;; Defined at:
 16734 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
 16735 ;; Parameters:    Size  Location     Type
 16736 ;;  multiplier      2   14[BANK2 ] unsigned int 
 16737 ;;  multiplicand    2   16[BANK2 ] unsigned int 
 16738 ;; Auto vars:     Size  Location     Type
 16739 ;;  product         2   18[BANK2 ] unsigned int 
 16740 ;; Return value:  Size  Location     Type
 16741 ;;                  2   14[BANK2 ] unsigned int 
 16742 ;; Registers used:
 16743 ;;		wreg, status,2, status,0
 16744 ;; Tracked objects:
 16745 ;;		On entry : 0/0
 16746 ;;		On exit  : 0/0
 16747 ;;		Unchanged: 0/0
 16748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16749 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16750 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16752 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16753 ;;Total ram usage:        6 bytes
 16754 ;; Hardware stack levels used:    1
 16755 ;; Hardware stack levels required when called:    3
 16756 ;; This function calls:
 16757 ;;		Nothing
 16758 ;; This function is called by:
 16759 ;;		_calcCosArray
 16760 ;;		_updateModulationArray
 16761 ;;		_modCos
 16762 ;;		_eval_poly
 16763 ;; This function uses a non-reentrant model
 16764 ;;
 16765                           
 16766                           
 16767                           ;psect for function ___wmul
 16768  2D70                     ___wmul:	
 16769                           
 16770                           ;incstack = 0
 16771                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 16772  2D70  0022               	movlb	2	; select bank2
 16773  2D71  01B2               	clrf	___wmul@product^(0+256)
 16774  2D72  01B3               	clrf	(___wmul@product+1)^(0+256)
 16775  2D73                     l7828:	
 16776  2D73  1C2E               	btfss	___wmul@multiplier^(0+256),0
 16777  2D74  2D79               	goto	l2002
 16778  2D75  0830               	movf	___wmul@multiplicand^(0+256),w
 16779  2D76  07B2               	addwf	___wmul@product^(0+256),f
 16780  2D77  0831               	movf	(___wmul@multiplicand+1)^(0+256),w
 16781  2D78  3DB3               	addwfc	(___wmul@product+1)^(0+256),f
 16782  2D79                     l2002:	
 16783  2D79  3001               	movlw	1
 16784  2D7A                     u7965:	
 16785  2D7A  35B0               	lslf	___wmul@multiplicand^(0+256),f
 16786  2D7B  0DB1               	rlf	(___wmul@multiplicand+1)^(0+256),f
 16787  2D7C  0B89               	decfsz	9,f
 16788  2D7D  2D7A               	goto	u7965
 16789  2D7E  3001               	movlw	1
 16790  2D7F                     u7975:	
 16791  2D7F  36AF               	lsrf	(___wmul@multiplier+1)^(0+256),f
 16792  2D80  0CAE               	rrf	___wmul@multiplier^(0+256),f
 16793  2D81  0B89               	decfsz	9,f
 16794  2D82  2D7F               	goto	u7975
 16795  2D83  082E               	movf	___wmul@multiplier^(0+256),w
 16796  2D84  042F               	iorwf	(___wmul@multiplier+1)^(0+256),w
 16797  2D85  1D03               	btfss	3,2
 16798  2D86  2D73               	goto	l7828
 16799  2D87  0833               	movf	(___wmul@product+1)^(0+256),w
 16800  2D88  00AF               	movwf	(?___wmul+1)^(0+256)
 16801  2D89  0832               	movf	___wmul@product^(0+256),w
 16802  2D8A  00AE               	movwf	?___wmul^(0+256)
 16803  2D8B  0008               	return
 16804  2D8C                     __end_of___wmul:	
 16805                           
 16806                           	psect	text54
 16807  1E56                     __ptext54:	
 16808 ;; *************** function ___ftmul *****************
 16809 ;; Defined at:
 16810 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
 16811 ;; Parameters:    Size  Location     Type
 16812 ;;  f1              3   14[BANK1 ] float 
 16813 ;;  f2              3   17[BANK1 ] float 
 16814 ;; Auto vars:     Size  Location     Type
 16815 ;;  f3_as_produc    3   25[BANK1 ] unsigned um
 16816 ;;  sign            1   29[BANK1 ] unsigned char 
 16817 ;;  cntr            1   28[BANK1 ] unsigned char 
 16818 ;;  exp             1   24[BANK1 ] unsigned char 
 16819 ;; Return value:  Size  Location     Type
 16820 ;;                  3   14[BANK1 ] float 
 16821 ;; Registers used:
 16822 ;;		wreg, status,2, status,0, pclath, cstack
 16823 ;; Tracked objects:
 16824 ;;		On entry : 0/0
 16825 ;;		On exit  : 0/0
 16826 ;;		Unchanged: 0/0
 16827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16828 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16829 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16830 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16831 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16832 ;;Total ram usage:       16 bytes
 16833 ;; Hardware stack levels used:    1
 16834 ;; Hardware stack levels required when called:    4
 16835 ;; This function calls:
 16836 ;;		___ftpack
 16837 ;; This function is called by:
 16838 ;;		_set_subdivision
 16839 ;;		_map
 16840 ;;		_scaleA100kPot
 16841 ;;		_scaleA10kPot
 16842 ;;		_scaleiA10kPot
 16843 ;;		_calcCosArray
 16844 ;;		_modCos
 16845 ;;		_modTri
 16846 ;;		_modSaw
 16847 ;;		_pow
 16848 ;;		_sin
 16849 ;;		_eval_poly
 16850 ;;		_exp
 16851 ;;		_log
 16852 ;;		_scalePotValue
 16853 ;;		_scaleiA100kPot
 16854 ;; This function uses a non-reentrant model
 16855 ;;
 16856                           
 16857                           
 16858                           ;psect for function ___ftmul
 16859  1E56                     ___ftmul:	
 16860                           
 16861                           ;incstack = 0
 16862                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 16863  1E56  0021               	movlb	1	; select bank1
 16864  1E57  082E               	movf	___ftmul@f1^(0+128),w
 16865  1E58  00B4               	movwf	??___ftmul^(0+128)
 16866  1E59  082F               	movf	(___ftmul@f1+1)^(0+128),w
 16867  1E5A  00B5               	movwf	(??___ftmul^(0+128)+1)
 16868  1E5B  0830               	movf	(___ftmul@f1+2)^(0+128),w
 16869  1E5C  00B6               	movwf	(??___ftmul^(0+128)+2)
 16870  1E5D  1003               	clrc
 16871  1E5E  0D35               	rlf	(??___ftmul^(0+128)+1),w
 16872  1E5F  0D36               	rlf	(??___ftmul^(0+128)+2),w
 16873  1E60  00B7               	movwf	(??___ftmul+3)^(0+128)
 16874  1E61  0837               	movf	(??___ftmul+3)^(0+128),w
 16875  1E62  00B8               	movwf	___ftmul@exp^(0+128)
 16876  1E63  0838               	movf	___ftmul@exp^(0+128),w
 16877  1E64  1D03               	btfss	3,2
 16878  1E65  2E6D               	goto	l7952
 16879  1E66  3000               	movlw	0
 16880  1E67  00AE               	movwf	?___ftmul^(0+128)
 16881  1E68  3000               	movlw	0
 16882  1E69  00AF               	movwf	(?___ftmul+1)^(0+128)
 16883  1E6A  3000               	movlw	0
 16884  1E6B  00B0               	movwf	(?___ftmul+2)^(0+128)
 16885  1E6C  0008               	return
 16886  1E6D                     l7952:	
 16887  1E6D  0831               	movf	___ftmul@f2^(0+128),w
 16888  1E6E  00B4               	movwf	??___ftmul^(0+128)
 16889  1E6F  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16890  1E70  00B5               	movwf	(??___ftmul^(0+128)+1)
 16891  1E71  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16892  1E72  00B6               	movwf	(??___ftmul^(0+128)+2)
 16893  1E73  1003               	clrc
 16894  1E74  0D35               	rlf	(??___ftmul^(0+128)+1),w
 16895  1E75  0D36               	rlf	(??___ftmul^(0+128)+2),w
 16896  1E76  00B7               	movwf	(??___ftmul+3)^(0+128)
 16897  1E77  0837               	movf	(??___ftmul+3)^(0+128),w
 16898  1E78  00BD               	movwf	___ftmul@sign^(0+128)
 16899  1E79  083D               	movf	___ftmul@sign^(0+128),w
 16900  1E7A  1D03               	btfss	3,2
 16901  1E7B  2E83               	goto	l7958
 16902  1E7C  3000               	movlw	0
 16903  1E7D  00AE               	movwf	?___ftmul^(0+128)
 16904  1E7E  3000               	movlw	0
 16905  1E7F  00AF               	movwf	(?___ftmul+1)^(0+128)
 16906  1E80  3000               	movlw	0
 16907  1E81  00B0               	movwf	(?___ftmul+2)^(0+128)
 16908  1E82  0008               	return
 16909  1E83                     l7958:	
 16910  1E83  083D               	movf	___ftmul@sign^(0+128),w
 16911  1E84  3E7B               	addlw	123
 16912  1E85  00B4               	movwf	??___ftmul^(0+128)
 16913  1E86  0834               	movf	??___ftmul^(0+128),w
 16914  1E87  07B8               	addwf	___ftmul@exp^(0+128),f
 16915  1E88  082E               	movf	___ftmul@f1^(0+128),w
 16916  1E89  00B4               	movwf	??___ftmul^(0+128)
 16917  1E8A  082F               	movf	(___ftmul@f1+1)^(0+128),w
 16918  1E8B  00B5               	movwf	(??___ftmul^(0+128)+1)
 16919  1E8C  0830               	movf	(___ftmul@f1+2)^(0+128),w
 16920  1E8D  00B6               	movwf	(??___ftmul^(0+128)+2)
 16921  1E8E  3010               	movlw	16
 16922  1E8F                     u8305:	
 16923  1E8F  36B6               	lsrf	(??___ftmul^(0+128)+2),f
 16924  1E90  0CB5               	rrf	(??___ftmul^(0+128)+1),f
 16925  1E91  0CB4               	rrf	??___ftmul^(0+128),f
 16926  1E92  0B89               	decfsz	9,f
 16927  1E93  2E8F               	goto	u8305
 16928  1E94  0834               	movf	??___ftmul^(0+128),w
 16929  1E95  00B7               	movwf	(??___ftmul+3)^(0+128)
 16930  1E96  0837               	movf	(??___ftmul+3)^(0+128),w
 16931  1E97  00BD               	movwf	___ftmul@sign^(0+128)
 16932  1E98  0831               	movf	___ftmul@f2^(0+128),w
 16933  1E99  00B4               	movwf	??___ftmul^(0+128)
 16934  1E9A  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16935  1E9B  00B5               	movwf	(??___ftmul^(0+128)+1)
 16936  1E9C  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16937  1E9D  00B6               	movwf	(??___ftmul^(0+128)+2)
 16938  1E9E  3010               	movlw	16
 16939  1E9F                     u8315:	
 16940  1E9F  36B6               	lsrf	(??___ftmul^(0+128)+2),f
 16941  1EA0  0CB5               	rrf	(??___ftmul^(0+128)+1),f
 16942  1EA1  0CB4               	rrf	??___ftmul^(0+128),f
 16943  1EA2  0B89               	decfsz	9,f
 16944  1EA3  2E9F               	goto	u8315
 16945  1EA4  0834               	movf	??___ftmul^(0+128),w
 16946  1EA5  00B7               	movwf	(??___ftmul+3)^(0+128)
 16947  1EA6  0837               	movf	(??___ftmul+3)^(0+128),w
 16948  1EA7  06BD               	xorwf	___ftmul@sign^(0+128),f
 16949  1EA8  3080               	movlw	128
 16950  1EA9  00B4               	movwf	??___ftmul^(0+128)
 16951  1EAA  0834               	movf	??___ftmul^(0+128),w
 16952  1EAB  05BD               	andwf	___ftmul@sign^(0+128),f
 16953  1EAC  17AF               	bsf	(___ftmul@f1^(0+128)+1),7
 16954  1EAD  17B2               	bsf	(___ftmul@f2^(0+128)+1),7
 16955  1EAE  30FF               	movlw	255
 16956  1EAF  05B1               	andwf	___ftmul@f2^(0+128),f
 16957  1EB0  30FF               	movlw	255
 16958  1EB1  05B2               	andwf	(___ftmul@f2+1)^(0+128),f
 16959  1EB2  3000               	movlw	0
 16960  1EB3  05B3               	andwf	(___ftmul@f2+2)^(0+128),f
 16961  1EB4  3000               	movlw	0
 16962  1EB5  00B9               	movwf	___ftmul@f3_as_product^(0+128)
 16963  1EB6  3000               	movlw	0
 16964  1EB7  00BA               	movwf	(___ftmul@f3_as_product+1)^(0+128)
 16965  1EB8  3000               	movlw	0
 16966  1EB9  00BB               	movwf	(___ftmul@f3_as_product+2)^(0+128)
 16967  1EBA  3007               	movlw	7
 16968  1EBB  00B4               	movwf	??___ftmul^(0+128)
 16969  1EBC  0834               	movf	??___ftmul^(0+128),w
 16970  1EBD  00BC               	movwf	___ftmul@cntr^(0+128)
 16971  1EBE                     l7970:	
 16972  1EBE  1C2E               	btfss	___ftmul@f1^(0+128),0
 16973  1EBF  2EC6               	goto	l7974
 16974  1EC0  0831               	movf	___ftmul@f2^(0+128),w
 16975  1EC1  07B9               	addwf	___ftmul@f3_as_product^(0+128),f
 16976  1EC2  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16977  1EC3  3DBA               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
 16978  1EC4  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16979  1EC5  3DBB               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
 16980  1EC6                     l7974:	
 16981  1EC6  3001               	movlw	1
 16982  1EC7                     u8335:	
 16983  1EC7  36B0               	lsrf	(___ftmul@f1+2)^(0+128),f
 16984  1EC8  0CAF               	rrf	(___ftmul@f1+1)^(0+128),f
 16985  1EC9  0CAE               	rrf	___ftmul@f1^(0+128),f
 16986  1ECA  0B89               	decfsz	9,f
 16987  1ECB  2EC7               	goto	u8335
 16988  1ECC  3001               	movlw	1
 16989  1ECD                     u8345:	
 16990  1ECD  35B1               	lslf	___ftmul@f2^(0+128),f
 16991  1ECE  0DB2               	rlf	(___ftmul@f2+1)^(0+128),f
 16992  1ECF  0DB3               	rlf	(___ftmul@f2+2)^(0+128),f
 16993  1ED0  0B89               	decfsz	9,f
 16994  1ED1  2ECD               	goto	u8345
 16995  1ED2  3001               	movlw	1
 16996  1ED3  02BC               	subwf	___ftmul@cntr^(0+128),f
 16997  1ED4  1D03               	btfss	3,2
 16998  1ED5  2EBE               	goto	l7970
 16999  1ED6  3009               	movlw	9
 17000  1ED7  00B4               	movwf	??___ftmul^(0+128)
 17001  1ED8  0834               	movf	??___ftmul^(0+128),w
 17002  1ED9  00BC               	movwf	___ftmul@cntr^(0+128)
 17003  1EDA                     l7982:	
 17004  1EDA  1C2E               	btfss	___ftmul@f1^(0+128),0
 17005  1EDB  2EE2               	goto	l7986
 17006  1EDC  0831               	movf	___ftmul@f2^(0+128),w
 17007  1EDD  07B9               	addwf	___ftmul@f3_as_product^(0+128),f
 17008  1EDE  0832               	movf	(___ftmul@f2+1)^(0+128),w
 17009  1EDF  3DBA               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
 17010  1EE0  0833               	movf	(___ftmul@f2+2)^(0+128),w
 17011  1EE1  3DBB               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
 17012  1EE2                     l7986:	
 17013  1EE2  3001               	movlw	1
 17014  1EE3                     u8375:	
 17015  1EE3  36B0               	lsrf	(___ftmul@f1+2)^(0+128),f
 17016  1EE4  0CAF               	rrf	(___ftmul@f1+1)^(0+128),f
 17017  1EE5  0CAE               	rrf	___ftmul@f1^(0+128),f
 17018  1EE6  0B89               	decfsz	9,f
 17019  1EE7  2EE3               	goto	u8375
 17020  1EE8  3001               	movlw	1
 17021  1EE9                     u8385:	
 17022  1EE9  36BB               	lsrf	(___ftmul@f3_as_product+2)^(0+128),f
 17023  1EEA  0CBA               	rrf	(___ftmul@f3_as_product+1)^(0+128),f
 17024  1EEB  0CB9               	rrf	___ftmul@f3_as_product^(0+128),f
 17025  1EEC  0B89               	decfsz	9,f
 17026  1EED  2EE9               	goto	u8385
 17027  1EEE  3001               	movlw	1
 17028  1EEF  02BC               	subwf	___ftmul@cntr^(0+128),f
 17029  1EF0  1D03               	btfss	3,2
 17030  1EF1  2EDA               	goto	l7982
 17031  1EF2  0839               	movf	___ftmul@f3_as_product^(0+128),w
 17032  1EF3  00A0               	movwf	___ftpack@arg^(0+128)
 17033  1EF4  083A               	movf	(___ftmul@f3_as_product+1)^(0+128),w
 17034  1EF5  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 17035  1EF6  083B               	movf	(___ftmul@f3_as_product+2)^(0+128),w
 17036  1EF7  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 17037  1EF8  0838               	movf	___ftmul@exp^(0+128),w
 17038  1EF9  00B4               	movwf	??___ftmul^(0+128)
 17039  1EFA  0834               	movf	??___ftmul^(0+128),w
 17040  1EFB  00A3               	movwf	___ftpack@exp^(0+128)
 17041  1EFC  083D               	movf	___ftmul@sign^(0+128),w
 17042  1EFD  00B5               	movwf	(??___ftmul+1)^(0+128)
 17043  1EFE  0835               	movf	(??___ftmul+1)^(0+128),w
 17044  1EFF  00A4               	movwf	___ftpack@sign^(0+128)
 17045  1F00  31A5  25B6         	fcall	___ftpack
 17046  1F02  0021               	movlb	1	; select bank1
 17047  1F03  0820               	movf	?___ftpack^(0+128),w
 17048  1F04  00AE               	movwf	?___ftmul^(0+128)
 17049  1F05  0821               	movf	(?___ftpack+1)^(0+128),w
 17050  1F06  00AF               	movwf	(?___ftmul+1)^(0+128)
 17051  1F07  0822               	movf	(?___ftpack+2)^(0+128),w
 17052  1F08  00B0               	movwf	(?___ftmul+2)^(0+128)
 17053  1F09  0008               	return
 17054  1F0A                     __end_of___ftmul:	
 17055                           
 17056                           	psect	text55
 17057  2EA5                     __ptext55:	
 17058 ;; *************** function ___ftsub *****************
 17059 ;; Defined at:
 17060 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftsub.c"
 17061 ;; Parameters:    Size  Location     Type
 17062 ;;  f2              3   23[BANK2 ] float 
 17063 ;;  f1              3   26[BANK2 ] float 
 17064 ;; Auto vars:     Size  Location     Type
 17065 ;;		None
 17066 ;; Return value:  Size  Location     Type
 17067 ;;                  3   23[BANK2 ] float 
 17068 ;; Registers used:
 17069 ;;		wreg, status,2, status,0, pclath, cstack
 17070 ;; Tracked objects:
 17071 ;;		On entry : 0/0
 17072 ;;		On exit  : 0/0
 17073 ;;		Unchanged: 0/0
 17074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17075 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17076 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17078 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17079 ;;Total ram usage:        6 bytes
 17080 ;; Hardware stack levels used:    1
 17081 ;; Hardware stack levels required when called:    5
 17082 ;; This function calls:
 17083 ;;		___ftadd
 17084 ;; This function is called by:
 17085 ;;		_sin
 17086 ;;		_exp
 17087 ;; This function uses a non-reentrant model
 17088 ;;
 17089                           
 17090                           
 17091                           ;psect for function ___ftsub
 17092  2EA5                     ___ftsub:	
 17093                           
 17094                           ;incstack = 0
 17095                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
 17096  2EA5  0022               	movlb	2	; select bank2
 17097  2EA6  0839               	movf	(___ftsub@f2+2)^(0+256),w
 17098  2EA7  0438               	iorwf	(___ftsub@f2+1)^(0+256),w
 17099  2EA8  0437               	iorwf	___ftsub@f2^(0+256),w
 17100  2EA9  1903               	skipnz
 17101  2EAA  2EAD               	goto	l8174
 17102  2EAB  3080               	movlw	128
 17103  2EAC  06B9               	xorwf	(___ftsub@f2+2)^(0+256),f
 17104  2EAD                     l8174:	
 17105  2EAD  083A               	movf	___ftsub@f1^(0+256),w
 17106  2EAE  0021               	movlb	1	; select bank1
 17107  2EAF  00C1               	movwf	___ftadd@f1^(0+128)
 17108  2EB0  0022               	movlb	2	; select bank2
 17109  2EB1  083B               	movf	(___ftsub@f1+1)^(0+256),w
 17110  2EB2  0021               	movlb	1	; select bank1
 17111  2EB3  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 17112  2EB4  0022               	movlb	2	; select bank2
 17113  2EB5  083C               	movf	(___ftsub@f1+2)^(0+256),w
 17114  2EB6  0021               	movlb	1	; select bank1
 17115  2EB7  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 17116  2EB8  0022               	movlb	2	; select bank2
 17117  2EB9  0837               	movf	___ftsub@f2^(0+256),w
 17118  2EBA  0021               	movlb	1	; select bank1
 17119  2EBB  00C4               	movwf	___ftadd@f2^(0+128)
 17120  2EBC  0022               	movlb	2	; select bank2
 17121  2EBD  0838               	movf	(___ftsub@f2+1)^(0+256),w
 17122  2EBE  0021               	movlb	1	; select bank1
 17123  2EBF  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 17124  2EC0  0022               	movlb	2	; select bank2
 17125  2EC1  0839               	movf	(___ftsub@f2+2)^(0+256),w
 17126  2EC2  0021               	movlb	1	; select bank1
 17127  2EC3  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 17128  2EC4  319F  270A         	fcall	___ftadd
 17129  2EC6  0021               	movlb	1	; select bank1
 17130  2EC7  0841               	movf	?___ftadd^(0+128),w
 17131  2EC8  0022               	movlb	2	; select bank2
 17132  2EC9  00B7               	movwf	?___ftsub^(0+256)
 17133  2ECA  0021               	movlb	1	; select bank1
 17134  2ECB  0842               	movf	(?___ftadd+1)^(0+128),w
 17135  2ECC  0022               	movlb	2	; select bank2
 17136  2ECD  00B8               	movwf	(?___ftsub+1)^(0+256)
 17137  2ECE  0021               	movlb	1	; select bank1
 17138  2ECF  0843               	movf	(?___ftadd+2)^(0+128),w
 17139  2ED0  0022               	movlb	2	; select bank2
 17140  2ED1  00B9               	movwf	(?___ftsub+2)^(0+256)
 17141  2ED2  0008               	return
 17142  2ED3                     __end_of___ftsub:	
 17143                           
 17144                           	psect	text56
 17145  1F0A                     __ptext56:	
 17146 ;; *************** function ___ftadd *****************
 17147 ;; Defined at:
 17148 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
 17149 ;; Parameters:    Size  Location     Type
 17150 ;;  f1              3   33[BANK1 ] float 
 17151 ;;  f2              3   36[BANK1 ] float 
 17152 ;; Auto vars:     Size  Location     Type
 17153 ;;  exp1            1   45[BANK1 ] unsigned char 
 17154 ;;  exp2            1   44[BANK1 ] unsigned char 
 17155 ;;  sign            1   43[BANK1 ] unsigned char 
 17156 ;; Return value:  Size  Location     Type
 17157 ;;                  3   33[BANK1 ] float 
 17158 ;; Registers used:
 17159 ;;		wreg, status,2, status,0, pclath, cstack
 17160 ;; Tracked objects:
 17161 ;;		On entry : 0/0
 17162 ;;		On exit  : 0/0
 17163 ;;		Unchanged: 0/0
 17164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17165 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17166 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17167 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17168 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17169 ;;Total ram usage:       13 bytes
 17170 ;; Hardware stack levels used:    1
 17171 ;; Hardware stack levels required when called:    4
 17172 ;; This function calls:
 17173 ;;		___ftpack
 17174 ;; This function is called by:
 17175 ;;		_map
 17176 ;;		_scaleiA10kPot
 17177 ;;		_modCos
 17178 ;;		_modTri
 17179 ;;		_modSaw
 17180 ;;		_cos
 17181 ;;		___ftsub
 17182 ;;		_sin
 17183 ;;		_eval_poly
 17184 ;;		_floor
 17185 ;;		_log
 17186 ;;		_scalePotValue
 17187 ;; This function uses a non-reentrant model
 17188 ;;
 17189                           
 17190                           
 17191                           ;psect for function ___ftadd
 17192  1F0A                     ___ftadd:	
 17193                           
 17194                           ;incstack = 0
 17195                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 17196  1F0A  0021               	movlb	1	; select bank1
 17197  1F0B  0841               	movf	___ftadd@f1^(0+128),w
 17198  1F0C  00C7               	movwf	??___ftadd^(0+128)
 17199  1F0D  0842               	movf	(___ftadd@f1+1)^(0+128),w
 17200  1F0E  00C8               	movwf	(??___ftadd^(0+128)+1)
 17201  1F0F  0843               	movf	(___ftadd@f1+2)^(0+128),w
 17202  1F10  00C9               	movwf	(??___ftadd^(0+128)+2)
 17203  1F11  1003               	clrc
 17204  1F12  0D48               	rlf	(??___ftadd^(0+128)+1),w
 17205  1F13  0D49               	rlf	(??___ftadd^(0+128)+2),w
 17206  1F14  00CA               	movwf	(??___ftadd+3)^(0+128)
 17207  1F15  084A               	movf	(??___ftadd+3)^(0+128),w
 17208  1F16  00CD               	movwf	___ftadd@exp1^(0+128)
 17209  1F17  0844               	movf	___ftadd@f2^(0+128),w
 17210  1F18  00C7               	movwf	??___ftadd^(0+128)
 17211  1F19  0845               	movf	(___ftadd@f2+1)^(0+128),w
 17212  1F1A  00C8               	movwf	(??___ftadd^(0+128)+1)
 17213  1F1B  0846               	movf	(___ftadd@f2+2)^(0+128),w
 17214  1F1C  00C9               	movwf	(??___ftadd^(0+128)+2)
 17215  1F1D  1003               	clrc
 17216  1F1E  0D48               	rlf	(??___ftadd^(0+128)+1),w
 17217  1F1F  0D49               	rlf	(??___ftadd^(0+128)+2),w
 17218  1F20  00CA               	movwf	(??___ftadd+3)^(0+128)
 17219  1F21  084A               	movf	(??___ftadd+3)^(0+128),w
 17220  1F22  00CC               	movwf	___ftadd@exp2^(0+128)
 17221  1F23  084D               	movf	___ftadd@exp1^(0+128),w
 17222  1F24  1903               	btfsc	3,2
 17223  1F25  2F32               	goto	l7862
 17224  1F26  084C               	movf	___ftadd@exp2^(0+128),w
 17225  1F27  024D               	subwf	___ftadd@exp1^(0+128),w
 17226  1F28  1803               	skipnc
 17227  1F29  2F39               	goto	l7866
 17228  1F2A  034D               	decf	___ftadd@exp1^(0+128),w
 17229  1F2B  3AFF               	xorlw	255
 17230  1F2C  074C               	addwf	___ftadd@exp2^(0+128),w
 17231  1F2D  00C7               	movwf	??___ftadd^(0+128)
 17232  1F2E  3019               	movlw	25
 17233  1F2F  0247               	subwf	??___ftadd^(0+128),w
 17234  1F30  1C03               	skipc
 17235  1F31  2F39               	goto	l7866
 17236  1F32                     l7862:	
 17237  1F32  0844               	movf	___ftadd@f2^(0+128),w
 17238  1F33  00C1               	movwf	?___ftadd^(0+128)
 17239  1F34  0845               	movf	(___ftadd@f2+1)^(0+128),w
 17240  1F35  00C2               	movwf	(?___ftadd+1)^(0+128)
 17241  1F36  0846               	movf	(___ftadd@f2+2)^(0+128),w
 17242  1F37  00C3               	movwf	(?___ftadd+2)^(0+128)
 17243  1F38  0008               	return
 17244  1F39                     l7866:	
 17245  1F39  084C               	movf	___ftadd@exp2^(0+128),w
 17246  1F3A  1903               	btfsc	3,2
 17247  1F3B  0008               	return
 17248  1F3C  084D               	movf	___ftadd@exp1^(0+128),w
 17249  1F3D  024C               	subwf	___ftadd@exp2^(0+128),w
 17250  1F3E  1803               	skipnc
 17251  1F3F  2F48               	goto	l7872
 17252  1F40  034C               	decf	___ftadd@exp2^(0+128),w
 17253  1F41  3AFF               	xorlw	255
 17254  1F42  074D               	addwf	___ftadd@exp1^(0+128),w
 17255  1F43  00C7               	movwf	??___ftadd^(0+128)
 17256  1F44  3019               	movlw	25
 17257  1F45  0247               	subwf	??___ftadd^(0+128),w
 17258  1F46  1803               	btfsc	3,0
 17259  1F47  0008               	return
 17260  1F48                     l7872:	
 17261  1F48  3006               	movlw	6
 17262  1F49  00C7               	movwf	??___ftadd^(0+128)
 17263  1F4A  0847               	movf	??___ftadd^(0+128),w
 17264  1F4B  00CB               	movwf	___ftadd@sign^(0+128)
 17265  1F4C  1BC3               	btfsc	(___ftadd@f1+2)^(0+128),7
 17266  1F4D  17CB               	bsf	___ftadd@sign^(0+128),7
 17267  1F4E  1BC6               	btfsc	(___ftadd@f2+2)^(0+128),7
 17268  1F4F  174B               	bsf	___ftadd@sign^(0+128),6
 17269  1F50  17C2               	bsf	(___ftadd@f1^(0+128)+1),7
 17270  1F51  30FF               	movlw	255
 17271  1F52  05C1               	andwf	___ftadd@f1^(0+128),f
 17272  1F53  30FF               	movlw	255
 17273  1F54  05C2               	andwf	(___ftadd@f1+1)^(0+128),f
 17274  1F55  3000               	movlw	0
 17275  1F56  05C3               	andwf	(___ftadd@f1+2)^(0+128),f
 17276  1F57  17C5               	bsf	(___ftadd@f2^(0+128)+1),7
 17277  1F58  30FF               	movlw	255
 17278  1F59  05C4               	andwf	___ftadd@f2^(0+128),f
 17279  1F5A  30FF               	movlw	255
 17280  1F5B  05C5               	andwf	(___ftadd@f2+1)^(0+128),f
 17281  1F5C  3000               	movlw	0
 17282  1F5D  05C6               	andwf	(___ftadd@f2+2)^(0+128),f
 17283  1F5E  084C               	movf	___ftadd@exp2^(0+128),w
 17284  1F5F  024D               	subwf	___ftadd@exp1^(0+128),w
 17285  1F60  1803               	skipnc
 17286  1F61  2F84               	goto	l7894
 17287  1F62                     l7884:	
 17288  1F62  3001               	movlw	1
 17289  1F63                     u8115:	
 17290  1F63  35C4               	lslf	___ftadd@f2^(0+128),f
 17291  1F64  0DC5               	rlf	(___ftadd@f2+1)^(0+128),f
 17292  1F65  0DC6               	rlf	(___ftadd@f2+2)^(0+128),f
 17293  1F66  0B89               	decfsz	9,f
 17294  1F67  2F63               	goto	u8115
 17295  1F68  3001               	movlw	1
 17296  1F69  02CC               	subwf	___ftadd@exp2^(0+128),f
 17297  1F6A  084C               	movf	___ftadd@exp2^(0+128),w
 17298  1F6B  064D               	xorwf	___ftadd@exp1^(0+128),w
 17299  1F6C  1903               	skipnz
 17300  1F6D  2F7F               	goto	l7892
 17301  1F6E  3001               	movlw	1
 17302  1F6F  02CB               	subwf	___ftadd@sign^(0+128),f
 17303  1F70  084B               	movf	___ftadd@sign^(0+128),w
 17304  1F71  3907               	andlw	7
 17305  1F72  1903               	btfsc	3,2
 17306  1F73  2F7F               	goto	l7892
 17307  1F74  2F62               	goto	l7884
 17308  1F75                     l7890:	
 17309  1F75  3001               	movlw	1
 17310  1F76                     u8145:	
 17311  1F76  36C3               	lsrf	(___ftadd@f1+2)^(0+128),f
 17312  1F77  0CC2               	rrf	(___ftadd@f1+1)^(0+128),f
 17313  1F78  0CC1               	rrf	___ftadd@f1^(0+128),f
 17314  1F79  0B89               	decfsz	9,f
 17315  1F7A  2F76               	goto	u8145
 17316  1F7B  3001               	movlw	1
 17317  1F7C  00C7               	movwf	??___ftadd^(0+128)
 17318  1F7D  0847               	movf	??___ftadd^(0+128),w
 17319  1F7E  07CD               	addwf	___ftadd@exp1^(0+128),f
 17320  1F7F                     l7892:	
 17321  1F7F  084D               	movf	___ftadd@exp1^(0+128),w
 17322  1F80  064C               	xorwf	___ftadd@exp2^(0+128),w
 17323  1F81  1903               	btfsc	3,2
 17324  1F82  2FA9               	goto	l2200
 17325  1F83  2F75               	goto	l7890
 17326  1F84                     l7894:	
 17327  1F84  084D               	movf	___ftadd@exp1^(0+128),w
 17328  1F85  024C               	subwf	___ftadd@exp2^(0+128),w
 17329  1F86  1803               	skipnc
 17330  1F87  2FA9               	goto	l2200
 17331  1F88                     l7896:	
 17332  1F88  3001               	movlw	1
 17333  1F89                     u8175:	
 17334  1F89  35C1               	lslf	___ftadd@f1^(0+128),f
 17335  1F8A  0DC2               	rlf	(___ftadd@f1+1)^(0+128),f
 17336  1F8B  0DC3               	rlf	(___ftadd@f1+2)^(0+128),f
 17337  1F8C  0B89               	decfsz	9,f
 17338  1F8D  2F89               	goto	u8175
 17339  1F8E  3001               	movlw	1
 17340  1F8F  02CD               	subwf	___ftadd@exp1^(0+128),f
 17341  1F90  084C               	movf	___ftadd@exp2^(0+128),w
 17342  1F91  064D               	xorwf	___ftadd@exp1^(0+128),w
 17343  1F92  1903               	skipnz
 17344  1F93  2FA5               	goto	l7904
 17345  1F94  3001               	movlw	1
 17346  1F95  02CB               	subwf	___ftadd@sign^(0+128),f
 17347  1F96  084B               	movf	___ftadd@sign^(0+128),w
 17348  1F97  3907               	andlw	7
 17349  1F98  1903               	btfsc	3,2
 17350  1F99  2FA5               	goto	l7904
 17351  1F9A  2F88               	goto	l7896
 17352  1F9B                     l7902:	
 17353  1F9B  3001               	movlw	1
 17354  1F9C                     u8205:	
 17355  1F9C  36C6               	lsrf	(___ftadd@f2+2)^(0+128),f
 17356  1F9D  0CC5               	rrf	(___ftadd@f2+1)^(0+128),f
 17357  1F9E  0CC4               	rrf	___ftadd@f2^(0+128),f
 17358  1F9F  0B89               	decfsz	9,f
 17359  1FA0  2F9C               	goto	u8205
 17360  1FA1  3001               	movlw	1
 17361  1FA2  00C7               	movwf	??___ftadd^(0+128)
 17362  1FA3  0847               	movf	??___ftadd^(0+128),w
 17363  1FA4  07CC               	addwf	___ftadd@exp2^(0+128),f
 17364  1FA5                     l7904:	
 17365  1FA5  084D               	movf	___ftadd@exp1^(0+128),w
 17366  1FA6  064C               	xorwf	___ftadd@exp2^(0+128),w
 17367  1FA7  1D03               	skipz
 17368  1FA8  2F9B               	goto	l7902
 17369  1FA9                     l2200:	
 17370  1FA9  1FCB               	btfss	___ftadd@sign^(0+128),7
 17371  1FAA  2FBB               	goto	l7908
 17372  1FAB  30FF               	movlw	255
 17373  1FAC  06C1               	xorwf	___ftadd@f1^(0+128),f
 17374  1FAD  30FF               	movlw	255
 17375  1FAE  06C2               	xorwf	(___ftadd@f1+1)^(0+128),f
 17376  1FAF  30FF               	movlw	255
 17377  1FB0  06C3               	xorwf	(___ftadd@f1+2)^(0+128),f
 17378  1FB1  3001               	movlw	1
 17379  1FB2  07C1               	addwf	___ftadd@f1^(0+128),f
 17380  1FB3  3000               	movlw	0
 17381  1FB4  1803               	skipnc
 17382  1FB5  3001               	movlw	1
 17383  1FB6  07C2               	addwf	(___ftadd@f1+1)^(0+128),f
 17384  1FB7  3000               	movlw	0
 17385  1FB8  1803               	skipnc
 17386  1FB9  3001               	movlw	1
 17387  1FBA  07C3               	addwf	(___ftadd@f1+2)^(0+128),f
 17388  1FBB                     l7908:	
 17389  1FBB  1F4B               	btfss	___ftadd@sign^(0+128),6
 17390  1FBC  2FCD               	goto	l7912
 17391  1FBD  30FF               	movlw	255
 17392  1FBE  06C4               	xorwf	___ftadd@f2^(0+128),f
 17393  1FBF  30FF               	movlw	255
 17394  1FC0  06C5               	xorwf	(___ftadd@f2+1)^(0+128),f
 17395  1FC1  30FF               	movlw	255
 17396  1FC2  06C6               	xorwf	(___ftadd@f2+2)^(0+128),f
 17397  1FC3  3001               	movlw	1
 17398  1FC4  07C4               	addwf	___ftadd@f2^(0+128),f
 17399  1FC5  3000               	movlw	0
 17400  1FC6  1803               	skipnc
 17401  1FC7  3001               	movlw	1
 17402  1FC8  07C5               	addwf	(___ftadd@f2+1)^(0+128),f
 17403  1FC9  3000               	movlw	0
 17404  1FCA  1803               	skipnc
 17405  1FCB  3001               	movlw	1
 17406  1FCC  07C6               	addwf	(___ftadd@f2+2)^(0+128),f
 17407  1FCD                     l7912:	
 17408  1FCD  01CB               	clrf	___ftadd@sign^(0+128)
 17409  1FCE  0841               	movf	___ftadd@f1^(0+128),w
 17410  1FCF  07C4               	addwf	___ftadd@f2^(0+128),f
 17411  1FD0  0842               	movf	(___ftadd@f1+1)^(0+128),w
 17412  1FD1  3DC5               	addwfc	(___ftadd@f2+1)^(0+128),f
 17413  1FD2  0843               	movf	(___ftadd@f1+2)^(0+128),w
 17414  1FD3  3DC6               	addwfc	(___ftadd@f2+2)^(0+128),f
 17415  1FD4  1FC6               	btfss	(___ftadd@f2+2)^(0+128),7
 17416  1FD5  2FE8               	goto	l7922
 17417  1FD6  30FF               	movlw	255
 17418  1FD7  06C4               	xorwf	___ftadd@f2^(0+128),f
 17419  1FD8  30FF               	movlw	255
 17420  1FD9  06C5               	xorwf	(___ftadd@f2+1)^(0+128),f
 17421  1FDA  30FF               	movlw	255
 17422  1FDB  06C6               	xorwf	(___ftadd@f2+2)^(0+128),f
 17423  1FDC  3001               	movlw	1
 17424  1FDD  07C4               	addwf	___ftadd@f2^(0+128),f
 17425  1FDE  3000               	movlw	0
 17426  1FDF  1803               	skipnc
 17427  1FE0  3001               	movlw	1
 17428  1FE1  07C5               	addwf	(___ftadd@f2+1)^(0+128),f
 17429  1FE2  3000               	movlw	0
 17430  1FE3  1803               	skipnc
 17431  1FE4  3001               	movlw	1
 17432  1FE5  07C6               	addwf	(___ftadd@f2+2)^(0+128),f
 17433  1FE6  01CB               	clrf	___ftadd@sign^(0+128)
 17434  1FE7  0ACB               	incf	___ftadd@sign^(0+128),f
 17435  1FE8                     l7922:	
 17436  1FE8  0844               	movf	___ftadd@f2^(0+128),w
 17437  1FE9  00A0               	movwf	___ftpack@arg^(0+128)
 17438  1FEA  0845               	movf	(___ftadd@f2+1)^(0+128),w
 17439  1FEB  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 17440  1FEC  0846               	movf	(___ftadd@f2+2)^(0+128),w
 17441  1FED  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 17442  1FEE  084D               	movf	___ftadd@exp1^(0+128),w
 17443  1FEF  00C7               	movwf	??___ftadd^(0+128)
 17444  1FF0  0847               	movf	??___ftadd^(0+128),w
 17445  1FF1  00A3               	movwf	___ftpack@exp^(0+128)
 17446  1FF2  084B               	movf	___ftadd@sign^(0+128),w
 17447  1FF3  00C8               	movwf	(??___ftadd+1)^(0+128)
 17448  1FF4  0848               	movf	(??___ftadd+1)^(0+128),w
 17449  1FF5  00A4               	movwf	___ftpack@sign^(0+128)
 17450  1FF6  31A5  25B6         	fcall	___ftpack
 17451  1FF8  0021               	movlb	1	; select bank1
 17452  1FF9  0820               	movf	?___ftpack^(0+128),w
 17453  1FFA  00C1               	movwf	?___ftadd^(0+128)
 17454  1FFB  0821               	movf	(?___ftpack+1)^(0+128),w
 17455  1FFC  00C2               	movwf	(?___ftadd+1)^(0+128)
 17456  1FFD  0822               	movf	(?___ftpack+2)^(0+128),w
 17457  1FFE  00C3               	movwf	(?___ftadd+2)^(0+128)
 17458  1FFF  0008               	return
 17459  2000                     __end_of___ftadd:	
 17460                           
 17461                           	psect	text57
 17462  2C97                     __ptext57:	
 17463 ;; *************** function ___ftneg *****************
 17464 ;; Defined at:
 17465 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
 17466 ;; Parameters:    Size  Location     Type
 17467 ;;  f1              3   30[BANK1 ] float 
 17468 ;; Auto vars:     Size  Location     Type
 17469 ;;		None
 17470 ;; Return value:  Size  Location     Type
 17471 ;;                  3   30[BANK1 ] float 
 17472 ;; Registers used:
 17473 ;;		wreg
 17474 ;; Tracked objects:
 17475 ;;		On entry : 0/0
 17476 ;;		On exit  : 0/0
 17477 ;;		Unchanged: 0/0
 17478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17479 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17482 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17483 ;;Total ram usage:        3 bytes
 17484 ;; Hardware stack levels used:    1
 17485 ;; Hardware stack levels required when called:    3
 17486 ;; This function calls:
 17487 ;;		Nothing
 17488 ;; This function is called by:
 17489 ;;		_map
 17490 ;;		_scaleiA10kPot
 17491 ;;		_modCos
 17492 ;;		_modTri
 17493 ;;		_modSaw
 17494 ;;		_pow
 17495 ;;		_sin
 17496 ;;		_exp
 17497 ;;		_ldexp
 17498 ;;		_scalePotValue
 17499 ;; This function uses a non-reentrant model
 17500 ;;
 17501                           
 17502                           
 17503                           ;psect for function ___ftneg
 17504  2C97                     ___ftneg:	
 17505                           
 17506                           ;incstack = 0
 17507                           ; Regs used in ___ftneg: [wreg]
 17508  2C97  0021               	movlb	1	; select bank1
 17509  2C98  0840               	movf	(___ftneg@f1+2)^(0+128),w
 17510  2C99  043F               	iorwf	(___ftneg@f1+1)^(0+128),w
 17511  2C9A  043E               	iorwf	___ftneg@f1^(0+128),w
 17512  2C9B  1903               	skipnz
 17513  2C9C  0008               	return
 17514  2C9D  3080               	movlw	128
 17515  2C9E  06C0               	xorwf	(___ftneg@f1+2)^(0+128),f
 17516  2C9F  0008               	return
 17517  2CA0                     __end_of___ftneg:	
 17518                           
 17519                           	psect	text58
 17520  1C4F                     __ptext58:	
 17521 ;; *************** function ___ftdiv *****************
 17522 ;; Defined at:
 17523 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
 17524 ;; Parameters:    Size  Location     Type
 17525 ;;  f2              3   46[BANK1 ] float 
 17526 ;;  f1              3   49[BANK1 ] float 
 17527 ;; Auto vars:     Size  Location     Type
 17528 ;;  f3              3   57[BANK1 ] float 
 17529 ;;  sign            1   61[BANK1 ] unsigned char 
 17530 ;;  exp             1   60[BANK1 ] unsigned char 
 17531 ;;  cntr            1   56[BANK1 ] unsigned char 
 17532 ;; Return value:  Size  Location     Type
 17533 ;;                  3   46[BANK1 ] float 
 17534 ;; Registers used:
 17535 ;;		wreg, status,2, status,0, pclath, cstack
 17536 ;; Tracked objects:
 17537 ;;		On entry : 0/0
 17538 ;;		On exit  : 0/0
 17539 ;;		Unchanged: 0/0
 17540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17541 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17542 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17543 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17544 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17545 ;;Total ram usage:       16 bytes
 17546 ;; Hardware stack levels used:    1
 17547 ;; Hardware stack levels required when called:    4
 17548 ;; This function calls:
 17549 ;;		___ftpack
 17550 ;; This function is called by:
 17551 ;;		_map
 17552 ;;		_scaleA100kPot
 17553 ;;		_scaleA10kPot
 17554 ;;		_scaleiA10kPot
 17555 ;;		_calcCosArray
 17556 ;;		_getModulationDelayTime
 17557 ;;		_modCos
 17558 ;;		_modTri
 17559 ;;		_modSaw
 17560 ;;		_sin
 17561 ;;		_exp
 17562 ;;		_scalePotValue
 17563 ;;		_scaleiA100kPot
 17564 ;; This function uses a non-reentrant model
 17565 ;;
 17566                           
 17567                           
 17568                           ;psect for function ___ftdiv
 17569  1C4F                     ___ftdiv:	
 17570                           
 17571                           ;incstack = 0
 17572                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 17573  1C4F  0021               	movlb	1	; select bank1
 17574  1C50  0851               	movf	___ftdiv@f1^(0+128),w
 17575  1C51  00D4               	movwf	??___ftdiv^(0+128)
 17576  1C52  0852               	movf	(___ftdiv@f1+1)^(0+128),w
 17577  1C53  00D5               	movwf	(??___ftdiv^(0+128)+1)
 17578  1C54  0853               	movf	(___ftdiv@f1+2)^(0+128),w
 17579  1C55  00D6               	movwf	(??___ftdiv^(0+128)+2)
 17580  1C56  1003               	clrc
 17581  1C57  0D55               	rlf	(??___ftdiv^(0+128)+1),w
 17582  1C58  0D56               	rlf	(??___ftdiv^(0+128)+2),w
 17583  1C59  00D7               	movwf	(??___ftdiv+3)^(0+128)
 17584  1C5A  0857               	movf	(??___ftdiv+3)^(0+128),w
 17585  1C5B  00DC               	movwf	___ftdiv@exp^(0+128)
 17586  1C5C  085C               	movf	___ftdiv@exp^(0+128),w
 17587  1C5D  1D03               	btfss	3,2
 17588  1C5E  2C66               	goto	l8134
 17589  1C5F  3000               	movlw	0
 17590  1C60  00CE               	movwf	?___ftdiv^(0+128)
 17591  1C61  3000               	movlw	0
 17592  1C62  00CF               	movwf	(?___ftdiv+1)^(0+128)
 17593  1C63  3000               	movlw	0
 17594  1C64  00D0               	movwf	(?___ftdiv+2)^(0+128)
 17595  1C65  0008               	return
 17596  1C66                     l8134:	
 17597  1C66  084E               	movf	___ftdiv@f2^(0+128),w
 17598  1C67  00D4               	movwf	??___ftdiv^(0+128)
 17599  1C68  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 17600  1C69  00D5               	movwf	(??___ftdiv^(0+128)+1)
 17601  1C6A  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 17602  1C6B  00D6               	movwf	(??___ftdiv^(0+128)+2)
 17603  1C6C  1003               	clrc
 17604  1C6D  0D55               	rlf	(??___ftdiv^(0+128)+1),w
 17605  1C6E  0D56               	rlf	(??___ftdiv^(0+128)+2),w
 17606  1C6F  00D7               	movwf	(??___ftdiv+3)^(0+128)
 17607  1C70  0857               	movf	(??___ftdiv+3)^(0+128),w
 17608  1C71  00DD               	movwf	___ftdiv@sign^(0+128)
 17609  1C72  085D               	movf	___ftdiv@sign^(0+128),w
 17610  1C73  1D03               	btfss	3,2
 17611  1C74  2C7C               	goto	l8140
 17612  1C75  3000               	movlw	0
 17613  1C76  00CE               	movwf	?___ftdiv^(0+128)
 17614  1C77  3000               	movlw	0
 17615  1C78  00CF               	movwf	(?___ftdiv+1)^(0+128)
 17616  1C79  3000               	movlw	0
 17617  1C7A  00D0               	movwf	(?___ftdiv+2)^(0+128)
 17618  1C7B  0008               	return
 17619  1C7C                     l8140:	
 17620  1C7C  3000               	movlw	0
 17621  1C7D  00D9               	movwf	___ftdiv@f3^(0+128)
 17622  1C7E  3000               	movlw	0
 17623  1C7F  00DA               	movwf	(___ftdiv@f3+1)^(0+128)
 17624  1C80  3000               	movlw	0
 17625  1C81  00DB               	movwf	(___ftdiv@f3+2)^(0+128)
 17626  1C82  3089               	movlw	137
 17627  1C83  075D               	addwf	___ftdiv@sign^(0+128),w
 17628  1C84  00D4               	movwf	??___ftdiv^(0+128)
 17629  1C85  0854               	movf	??___ftdiv^(0+128),w
 17630  1C86  02DC               	subwf	___ftdiv@exp^(0+128),f
 17631  1C87  0851               	movf	___ftdiv@f1^(0+128),w
 17632  1C88  00D4               	movwf	??___ftdiv^(0+128)
 17633  1C89  0852               	movf	(___ftdiv@f1+1)^(0+128),w
 17634  1C8A  00D5               	movwf	(??___ftdiv^(0+128)+1)
 17635  1C8B  0853               	movf	(___ftdiv@f1+2)^(0+128),w
 17636  1C8C  00D6               	movwf	(??___ftdiv^(0+128)+2)
 17637  1C8D  3010               	movlw	16
 17638  1C8E                     u8605:	
 17639  1C8E  36D6               	lsrf	(??___ftdiv^(0+128)+2),f
 17640  1C8F  0CD5               	rrf	(??___ftdiv^(0+128)+1),f
 17641  1C90  0CD4               	rrf	??___ftdiv^(0+128),f
 17642  1C91  0B89               	decfsz	9,f
 17643  1C92  2C8E               	goto	u8605
 17644  1C93  0854               	movf	??___ftdiv^(0+128),w
 17645  1C94  00D7               	movwf	(??___ftdiv+3)^(0+128)
 17646  1C95  0857               	movf	(??___ftdiv+3)^(0+128),w
 17647  1C96  00DD               	movwf	___ftdiv@sign^(0+128)
 17648  1C97  084E               	movf	___ftdiv@f2^(0+128),w
 17649  1C98  00D4               	movwf	??___ftdiv^(0+128)
 17650  1C99  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 17651  1C9A  00D5               	movwf	(??___ftdiv^(0+128)+1)
 17652  1C9B  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 17653  1C9C  00D6               	movwf	(??___ftdiv^(0+128)+2)
 17654  1C9D  3010               	movlw	16
 17655  1C9E                     u8615:	
 17656  1C9E  36D6               	lsrf	(??___ftdiv^(0+128)+2),f
 17657  1C9F  0CD5               	rrf	(??___ftdiv^(0+128)+1),f
 17658  1CA0  0CD4               	rrf	??___ftdiv^(0+128),f
 17659  1CA1  0B89               	decfsz	9,f
 17660  1CA2  2C9E               	goto	u8615
 17661  1CA3  0854               	movf	??___ftdiv^(0+128),w
 17662  1CA4  00D7               	movwf	(??___ftdiv+3)^(0+128)
 17663  1CA5  0857               	movf	(??___ftdiv+3)^(0+128),w
 17664  1CA6  06DD               	xorwf	___ftdiv@sign^(0+128),f
 17665  1CA7  3080               	movlw	128
 17666  1CA8  00D4               	movwf	??___ftdiv^(0+128)
 17667  1CA9  0854               	movf	??___ftdiv^(0+128),w
 17668  1CAA  05DD               	andwf	___ftdiv@sign^(0+128),f
 17669  1CAB  17D2               	bsf	(___ftdiv@f1^(0+128)+1),7
 17670  1CAC  30FF               	movlw	255
 17671  1CAD  05D1               	andwf	___ftdiv@f1^(0+128),f
 17672  1CAE  30FF               	movlw	255
 17673  1CAF  05D2               	andwf	(___ftdiv@f1+1)^(0+128),f
 17674  1CB0  3000               	movlw	0
 17675  1CB1  05D3               	andwf	(___ftdiv@f1+2)^(0+128),f
 17676  1CB2  17CF               	bsf	(___ftdiv@f2^(0+128)+1),7
 17677  1CB3  30FF               	movlw	255
 17678  1CB4  05CE               	andwf	___ftdiv@f2^(0+128),f
 17679  1CB5  30FF               	movlw	255
 17680  1CB6  05CF               	andwf	(___ftdiv@f2+1)^(0+128),f
 17681  1CB7  3000               	movlw	0
 17682  1CB8  05D0               	andwf	(___ftdiv@f2+2)^(0+128),f
 17683  1CB9  3018               	movlw	24
 17684  1CBA  00D4               	movwf	??___ftdiv^(0+128)
 17685  1CBB  0854               	movf	??___ftdiv^(0+128),w
 17686  1CBC  00D8               	movwf	___ftdiv@cntr^(0+128)
 17687  1CBD                     l8154:	
 17688  1CBD  3001               	movlw	1
 17689  1CBE                     u8625:	
 17690  1CBE  35D9               	lslf	___ftdiv@f3^(0+128),f
 17691  1CBF  0DDA               	rlf	(___ftdiv@f3+1)^(0+128),f
 17692  1CC0  0DDB               	rlf	(___ftdiv@f3+2)^(0+128),f
 17693  1CC1  0B89               	decfsz	9,f
 17694  1CC2  2CBE               	goto	u8625
 17695  1CC3  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 17696  1CC4  0253               	subwf	(___ftdiv@f1+2)^(0+128),w
 17697  1CC5  1D03               	skipz
 17698  1CC6  2CCD               	goto	u8635
 17699  1CC7  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 17700  1CC8  0252               	subwf	(___ftdiv@f1+1)^(0+128),w
 17701  1CC9  1D03               	skipz
 17702  1CCA  2CCD               	goto	u8635
 17703  1CCB  084E               	movf	___ftdiv@f2^(0+128),w
 17704  1CCC  0251               	subwf	___ftdiv@f1^(0+128),w
 17705  1CCD                     u8635:	
 17706  1CCD  1C03               	skipc
 17707  1CCE  2CD6               	goto	l8162
 17708  1CCF  084E               	movf	___ftdiv@f2^(0+128),w
 17709  1CD0  02D1               	subwf	___ftdiv@f1^(0+128),f
 17710  1CD1  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 17711  1CD2  3BD2               	subwfb	(___ftdiv@f1+1)^(0+128),f
 17712  1CD3  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 17713  1CD4  3BD3               	subwfb	(___ftdiv@f1+2)^(0+128),f
 17714  1CD5  1459               	bsf	___ftdiv@f3^(0+128),0
 17715  1CD6                     l8162:	
 17716  1CD6  3001               	movlw	1
 17717  1CD7                     u8645:	
 17718  1CD7  35D1               	lslf	___ftdiv@f1^(0+128),f
 17719  1CD8  0DD2               	rlf	(___ftdiv@f1+1)^(0+128),f
 17720  1CD9  0DD3               	rlf	(___ftdiv@f1+2)^(0+128),f
 17721  1CDA  0B89               	decfsz	9,f
 17722  1CDB  2CD7               	goto	u8645
 17723  1CDC  3001               	movlw	1
 17724  1CDD  02D8               	subwf	___ftdiv@cntr^(0+128),f
 17725  1CDE  1D03               	btfss	3,2
 17726  1CDF  2CBD               	goto	l8154
 17727  1CE0  0859               	movf	___ftdiv@f3^(0+128),w
 17728  1CE1  00A0               	movwf	___ftpack@arg^(0+128)
 17729  1CE2  085A               	movf	(___ftdiv@f3+1)^(0+128),w
 17730  1CE3  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 17731  1CE4  085B               	movf	(___ftdiv@f3+2)^(0+128),w
 17732  1CE5  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 17733  1CE6  085C               	movf	___ftdiv@exp^(0+128),w
 17734  1CE7  00D4               	movwf	??___ftdiv^(0+128)
 17735  1CE8  0854               	movf	??___ftdiv^(0+128),w
 17736  1CE9  00A3               	movwf	___ftpack@exp^(0+128)
 17737  1CEA  085D               	movf	___ftdiv@sign^(0+128),w
 17738  1CEB  00D5               	movwf	(??___ftdiv+1)^(0+128)
 17739  1CEC  0855               	movf	(??___ftdiv+1)^(0+128),w
 17740  1CED  00A4               	movwf	___ftpack@sign^(0+128)
 17741  1CEE  31A5  25B6         	fcall	___ftpack
 17742  1CF0  0021               	movlb	1	; select bank1
 17743  1CF1  0820               	movf	?___ftpack^(0+128),w
 17744  1CF2  00CE               	movwf	?___ftdiv^(0+128)
 17745  1CF3  0821               	movf	(?___ftpack+1)^(0+128),w
 17746  1CF4  00CF               	movwf	(?___ftdiv+1)^(0+128)
 17747  1CF5  0822               	movf	(?___ftpack+2)^(0+128),w
 17748  1CF6  00D0               	movwf	(?___ftdiv+2)^(0+128)
 17749  1CF7  0008               	return
 17750  1CF8                     __end_of___ftdiv:	
 17751                           
 17752                           	psect	text59
 17753  2DE4                     __ptext59:	
 17754 ;; *************** function ___awtoft *****************
 17755 ;; Defined at:
 17756 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awtoft.c"
 17757 ;; Parameters:    Size  Location     Type
 17758 ;;  c               2    8[BANK1 ] int 
 17759 ;; Auto vars:     Size  Location     Type
 17760 ;;  sign            1   13[BANK1 ] unsigned char 
 17761 ;; Return value:  Size  Location     Type
 17762 ;;                  3    8[BANK1 ] float 
 17763 ;; Registers used:
 17764 ;;		wreg, status,2, status,0, pclath, cstack
 17765 ;; Tracked objects:
 17766 ;;		On entry : 0/0
 17767 ;;		On exit  : 0/0
 17768 ;;		Unchanged: 0/0
 17769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17770 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17771 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17772 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17773 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17774 ;;Total ram usage:        6 bytes
 17775 ;; Hardware stack levels used:    1
 17776 ;; Hardware stack levels required when called:    4
 17777 ;; This function calls:
 17778 ;;		___ftpack
 17779 ;; This function is called by:
 17780 ;;		_main
 17781 ;;		_set_subdivision
 17782 ;;		_calcCosArray
 17783 ;;		_getModulationDelayTime
 17784 ;;		_updateModulationArray
 17785 ;;		_exp
 17786 ;;		_log
 17787 ;; This function uses a non-reentrant model
 17788 ;;
 17789                           
 17790                           
 17791                           ;psect for function ___awtoft
 17792  2DE4                     ___awtoft:	
 17793                           
 17794                           ;incstack = 0
 17795                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 17796  2DE4  0021               	movlb	1	; select bank1
 17797  2DE5  01AD               	clrf	___awtoft@sign^(0+128)
 17798  2DE6  1FA9               	btfss	(___awtoft@c+1)^(0+128),7
 17799  2DE7  2DEF               	goto	l8124
 17800  2DE8  09A8               	comf	___awtoft@c^(0+128),f
 17801  2DE9  09A9               	comf	(___awtoft@c+1)^(0+128),f
 17802  2DEA  0AA8               	incf	___awtoft@c^(0+128),f
 17803  2DEB  1903               	skipnz
 17804  2DEC  0AA9               	incf	(___awtoft@c+1)^(0+128),f
 17805  2DED  01AD               	clrf	___awtoft@sign^(0+128)
 17806  2DEE  0AAD               	incf	___awtoft@sign^(0+128),f
 17807  2DEF                     l8124:	
 17808  2DEF  0828               	movf	___awtoft@c^(0+128),w
 17809  2DF0  00A0               	movwf	___ftpack@arg^(0+128)
 17810  2DF1  0829               	movf	(___awtoft@c+1)^(0+128),w
 17811  2DF2  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 17812  2DF3  01A2               	clrf	(___ftpack@arg+2)^(0+128)
 17813  2DF4  308E               	movlw	142
 17814  2DF5  00AB               	movwf	??___awtoft^(0+128)
 17815  2DF6  082B               	movf	??___awtoft^(0+128),w
 17816  2DF7  00A3               	movwf	___ftpack@exp^(0+128)
 17817  2DF8  082D               	movf	___awtoft@sign^(0+128),w
 17818  2DF9  00AC               	movwf	(??___awtoft+1)^(0+128)
 17819  2DFA  082C               	movf	(??___awtoft+1)^(0+128),w
 17820  2DFB  00A4               	movwf	___ftpack@sign^(0+128)
 17821  2DFC  31A5  25B6         	fcall	___ftpack
 17822  2DFE  0021               	movlb	1	; select bank1
 17823  2DFF  0820               	movf	?___ftpack^(0+128),w
 17824  2E00  00A8               	movwf	?___awtoft^(0+128)
 17825  2E01  0821               	movf	(?___ftpack+1)^(0+128),w
 17826  2E02  00A9               	movwf	(?___awtoft+1)^(0+128)
 17827  2E03  0822               	movf	(?___ftpack+2)^(0+128),w
 17828  2E04  00AA               	movwf	(?___awtoft+2)^(0+128)
 17829  2E05  0008               	return
 17830  2E06                     __end_of___awtoft:	
 17831                           
 17832                           	psect	text60
 17833  25B6                     __ptext60:	
 17834 ;; *************** function ___ftpack *****************
 17835 ;; Defined at:
 17836 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
 17837 ;; Parameters:    Size  Location     Type
 17838 ;;  arg             3    0[BANK1 ] unsigned um
 17839 ;;  exp             1    3[BANK1 ] unsigned char 
 17840 ;;  sign            1    4[BANK1 ] unsigned char 
 17841 ;; Auto vars:     Size  Location     Type
 17842 ;;		None
 17843 ;; Return value:  Size  Location     Type
 17844 ;;                  3    0[BANK1 ] float 
 17845 ;; Registers used:
 17846 ;;		wreg, status,2, status,0
 17847 ;; Tracked objects:
 17848 ;;		On entry : 0/0
 17849 ;;		On exit  : 0/0
 17850 ;;		Unchanged: 0/0
 17851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17852 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17854 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17855 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17856 ;;Total ram usage:        8 bytes
 17857 ;; Hardware stack levels used:    1
 17858 ;; Hardware stack levels required when called:    3
 17859 ;; This function calls:
 17860 ;;		Nothing
 17861 ;; This function is called by:
 17862 ;;		___altoft
 17863 ;;		___awtoft
 17864 ;;		___ftadd
 17865 ;;		___ftdiv
 17866 ;;		___ftmul
 17867 ;;		___lltoft
 17868 ;; This function uses a non-reentrant model
 17869 ;;
 17870                           
 17871                           
 17872                           ;psect for function ___ftpack
 17873  25B6                     ___ftpack:	
 17874                           
 17875                           ;incstack = 0
 17876                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 17877  25B6  0021               	movlb	1	; select bank1
 17878  25B7  0823               	movf	___ftpack@exp^(0+128),w
 17879  25B8  1903               	btfsc	3,2
 17880  25B9  2DBF               	goto	l7762
 17881  25BA  0822               	movf	(___ftpack@arg+2)^(0+128),w
 17882  25BB  0421               	iorwf	(___ftpack@arg+1)^(0+128),w
 17883  25BC  0420               	iorwf	___ftpack@arg^(0+128),w
 17884  25BD  1D03               	skipz
 17885  25BE  2DD0               	goto	l7768
 17886  25BF                     l7762:	
 17887  25BF  3000               	movlw	0
 17888  25C0  00A0               	movwf	?___ftpack^(0+128)
 17889  25C1  3000               	movlw	0
 17890  25C2  00A1               	movwf	(?___ftpack+1)^(0+128)
 17891  25C3  3000               	movlw	0
 17892  25C4  00A2               	movwf	(?___ftpack+2)^(0+128)
 17893  25C5  0008               	return
 17894  25C6                     l7766:	
 17895  25C6  3001               	movlw	1
 17896  25C7  00A5               	movwf	??___ftpack^(0+128)
 17897  25C8  0825               	movf	??___ftpack^(0+128),w
 17898  25C9  07A3               	addwf	___ftpack@exp^(0+128),f
 17899  25CA  3001               	movlw	1
 17900  25CB                     u7845:	
 17901  25CB  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 17902  25CC  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 17903  25CD  0CA0               	rrf	___ftpack@arg^(0+128),f
 17904  25CE  0B89               	decfsz	9,f
 17905  25CF  2DCB               	goto	u7845
 17906  25D0                     l7768:	
 17907  25D0  30FE               	movlw	254
 17908  25D1  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 17909  25D2  1903               	btfsc	3,2
 17910  25D3  2DE9               	goto	l2169
 17911  25D4  2DC6               	goto	l7766
 17912  25D5                     l7770:	
 17913  25D5  3001               	movlw	1
 17914  25D6  00A5               	movwf	??___ftpack^(0+128)
 17915  25D7  0825               	movf	??___ftpack^(0+128),w
 17916  25D8  07A3               	addwf	___ftpack@exp^(0+128),f
 17917  25D9  3001               	movlw	1
 17918  25DA  07A0               	addwf	___ftpack@arg^(0+128),f
 17919  25DB  3000               	movlw	0
 17920  25DC  1803               	skipnc
 17921  25DD  3001               	movlw	1
 17922  25DE  07A1               	addwf	(___ftpack@arg+1)^(0+128),f
 17923  25DF  3000               	movlw	0
 17924  25E0  1803               	skipnc
 17925  25E1  3001               	movlw	1
 17926  25E2  07A2               	addwf	(___ftpack@arg+2)^(0+128),f
 17927  25E3  3001               	movlw	1
 17928  25E4                     u7865:	
 17929  25E4  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 17930  25E5  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 17931  25E6  0CA0               	rrf	___ftpack@arg^(0+128),f
 17932  25E7  0B89               	decfsz	9,f
 17933  25E8  2DE4               	goto	u7865
 17934  25E9                     l2169:	
 17935  25E9  30FF               	movlw	255
 17936  25EA  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 17937  25EB  1903               	btfsc	3,2
 17938  25EC  2DF6               	goto	l7778
 17939  25ED  2DD5               	goto	l7770
 17940  25EE                     l7776:	
 17941  25EE  3001               	movlw	1
 17942  25EF  02A3               	subwf	___ftpack@exp^(0+128),f
 17943  25F0  3001               	movlw	1
 17944  25F1                     u7885:	
 17945  25F1  35A0               	lslf	___ftpack@arg^(0+128),f
 17946  25F2  0DA1               	rlf	(___ftpack@arg+1)^(0+128),f
 17947  25F3  0DA2               	rlf	(___ftpack@arg+2)^(0+128),f
 17948  25F4  0B89               	decfsz	9,f
 17949  25F5  2DF1               	goto	u7885
 17950  25F6                     l7778:	
 17951  25F6  1BA1               	btfsc	(___ftpack@arg+1)^(0+128),7
 17952  25F7  2DFC               	goto	l2176
 17953  25F8  3002               	movlw	2
 17954  25F9  0223               	subwf	___ftpack@exp^(0+128),w
 17955  25FA  1803               	skipnc
 17956  25FB  2DEE               	goto	l7776
 17957  25FC                     l2176:	
 17958  25FC  1823               	btfsc	___ftpack@exp^(0+128),0
 17959  25FD  2E04               	goto	l2177
 17960  25FE  30FF               	movlw	255
 17961  25FF  05A0               	andwf	___ftpack@arg^(0+128),f
 17962  2600  307F               	movlw	127
 17963  2601  05A1               	andwf	(___ftpack@arg+1)^(0+128),f
 17964  2602  30FF               	movlw	255
 17965  2603  05A2               	andwf	(___ftpack@arg+2)^(0+128),f
 17966  2604                     l2177:	
 17967  2604  1003               	clrc
 17968  2605  0CA3               	rrf	___ftpack@exp^(0+128),f
 17969  2606  0823               	movf	___ftpack@exp^(0+128),w
 17970  2607  00A5               	movwf	??___ftpack^(0+128)
 17971  2608  01A6               	clrf	(??___ftpack^(0+128)+1)
 17972  2609  01A7               	clrf	(??___ftpack^(0+128)+2)
 17973  260A  3010               	movlw	16
 17974  260B                     u7925:	
 17975  260B  35A5               	lslf	??___ftpack^(0+128),f
 17976  260C  0DA6               	rlf	(??___ftpack^(0+128)+1),f
 17977  260D  0DA7               	rlf	(??___ftpack^(0+128)+2),f
 17978  260E  0B89               	decfsz	9,f
 17979  260F  2E0B               	goto	u7925
 17980  2610  0825               	movf	??___ftpack^(0+128),w
 17981  2611  04A0               	iorwf	___ftpack@arg^(0+128),f
 17982  2612  0826               	movf	(??___ftpack+1)^(0+128),w
 17983  2613  04A1               	iorwf	(___ftpack@arg+1)^(0+128),f
 17984  2614  0827               	movf	(??___ftpack+2)^(0+128),w
 17985  2615  04A2               	iorwf	(___ftpack@arg+2)^(0+128),f
 17986  2616  0824               	movf	___ftpack@sign^(0+128),w
 17987  2617  1903               	btfsc	3,2
 17988  2618  0008               	return
 17989  2619  17A2               	bsf	(___ftpack@arg^(0+128)+2),7
 17990  261A  0008               	return
 17991  261B                     __end_of___ftpack:	
 17992                           
 17993                           	psect	text61
 17994  2CE3                     __ptext61:	
 17995 ;; *************** function _adc_convert *****************
 17996 ;; Defined at:
 17997 ;;		line 122 in file "user.c"
 17998 ;; Parameters:    Size  Location     Type
 17999 ;;  channel         1    wreg     unsigned char 
 18000 ;; Auto vars:     Size  Location     Type
 18001 ;;  channel         1    3[BANK1 ] unsigned char 
 18002 ;; Return value:  Size  Location     Type
 18003 ;;                  2    0[BANK1 ] unsigned int 
 18004 ;; Registers used:
 18005 ;;		wreg, status,2, status,0
 18006 ;; Tracked objects:
 18007 ;;		On entry : 0/0
 18008 ;;		On exit  : 0/0
 18009 ;;		Unchanged: 0/0
 18010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18011 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18012 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18013 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18014 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18015 ;;Total ram usage:        4 bytes
 18016 ;; Hardware stack levels used:    1
 18017 ;; Hardware stack levels required when called:    3
 18018 ;; This function calls:
 18019 ;;		Nothing
 18020 ;; This function is called by:
 18021 ;;		_main
 18022 ;; This function uses a non-reentrant model
 18023 ;;
 18024                           
 18025                           
 18026                           ;psect for function _adc_convert
 18027  2CE3                     _adc_convert:	
 18028                           
 18029                           ;incstack = 0
 18030                           ; Regs used in _adc_convert: [wreg+status,2+status,0]
 18031                           ;adc_convert@channel stored from wreg
 18032  2CE3  0021               	movlb	1	; select bank1
 18033  2CE4  00A3               	movwf	adc_convert@channel^(0+128)
 18034                           
 18035                           ;user.c: 123: ADCON0bits.CHS = channel;
 18036  2CE5  0823               	movf	adc_convert@channel^(0+128),w
 18037  2CE6  00A2               	movwf	??_adc_convert^(0+128)
 18038  2CE7  0DA2               	rlf	??_adc_convert^(0+128),f
 18039  2CE8  0DA2               	rlf	??_adc_convert^(0+128),f
 18040  2CE9  081D               	movf	29,w	;volatile
 18041  2CEA  0622               	xorwf	??_adc_convert^(0+128),w
 18042  2CEB  3983               	andlw	-125
 18043  2CEC  0622               	xorwf	??_adc_convert^(0+128),w
 18044  2CED  009D               	movwf	29	;volatile
 18045                           
 18046                           ;user.c: 124: ADCON0bits.GO = 0b1;
 18047  2CEE  149D               	bsf	29,1	;volatile
 18048  2CEF                     l608:	
 18049                           ;user.c: 125: while (ADCON0bits.GO_nDONE);
 18050                           
 18051  2CEF  189D               	btfsc	29,1	;volatile
 18052  2CF0  2CEF               	goto	l608
 18053                           
 18054                           ;user.c: 126: return (ADRESH << 8) | ADRESL;
 18055  2CF1  081C               	movf	28,w	;volatile
 18056  2CF2  00A1               	movwf	(?_adc_convert+1)^(0+128)
 18057  2CF3  081B               	movf	27,w	;volatile
 18058  2CF4  00A0               	movwf	?_adc_convert^(0+128)
 18059  2CF5  0008               	return
 18060  2CF6                     __end_of_adc_convert:	
 18061                           
 18062                           	psect	text62
 18063  229F                     __ptext62:	
 18064 ;; *************** function _USARTInit *****************
 18065 ;; Defined at:
 18066 ;;		line 31 in file "usart_pic16.c"
 18067 ;; Parameters:    Size  Location     Type
 18068 ;;  baud_rate       2    0[BANK1 ] unsigned int 
 18069 ;; Auto vars:     Size  Location     Type
 18070 ;;		None
 18071 ;; Return value:  Size  Location     Type
 18072 ;;                  1    wreg      void 
 18073 ;; Registers used:
 18074 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 18075 ;; Tracked objects:
 18076 ;;		On entry : 0/0
 18077 ;;		On exit  : 0/0
 18078 ;;		Unchanged: 0/0
 18079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18080 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18082 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18083 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18084 ;;Total ram usage:        3 bytes
 18085 ;; Hardware stack levels used:    1
 18086 ;; Hardware stack levels required when called:    3
 18087 ;; This function calls:
 18088 ;;		Nothing
 18089 ;; This function is called by:
 18090 ;;		_main
 18091 ;; This function uses a non-reentrant model
 18092 ;;
 18093                           
 18094                           
 18095                           ;psect for function _USARTInit
 18096  229F                     _USARTInit:	
 18097                           
 18098                           ;usart_pic16.c: 34: UQFront=UQEnd=-1;
 18099                           
 18100                           ;incstack = 0
 18101                           ; Regs used in _USARTInit: [wreg-fsr0h+status,2+status,0]
 18102  229F  30FF               	movlw	255
 18103  22A0  0020               	movlb	0	; select bank0
 18104  22A1  00DA               	movwf	_UQEnd	;volatile
 18105  22A2  0021               	movlb	1	; select bank1
 18106  22A3  00A2               	movwf	??_USARTInit^(0+128)
 18107  22A4  0822               	movf	??_USARTInit^(0+128),w
 18108  22A5  0020               	movlb	0	; select bank0
 18109  22A6  00DB               	movwf	_UQFront	;volatile
 18110                           
 18111                           ;usart_pic16.c: 37: switch(baud_rate)
 18112  22A7  2AB2               	goto	l8780
 18113  22A8                     l8770:	
 18114                           ;usart_pic16.c: 38: {
 18115                           ;usart_pic16.c: 39: case 9600:
 18116                           
 18117                           
 18118                           ;usart_pic16.c: 40: SPBRG=103;
 18119  22A8  3067               	movlw	103
 18120  22A9  2AAF               	goto	L22
 18121  22AA                     l8772:	
 18122                           ;usart_pic16.c: 42: case 19200:
 18123                           
 18124                           ;usart_pic16.c: 41: break;
 18125                           
 18126                           
 18127                           ;usart_pic16.c: 43: SPBRG=51;
 18128  22AA  3033               	movlw	51
 18129  22AB  2AAF               	goto	L22
 18130  22AC                     l8774:	
 18131                           ;usart_pic16.c: 45: case 31250:
 18132                           
 18133                           ;usart_pic16.c: 44: break;
 18134                           
 18135                           
 18136                           ;usart_pic16.c: 46: SPBRG = 31;
 18137  22AC  301F               	movlw	31
 18138  22AD  2AAF               	goto	L22
 18139  22AE                     l8776:	
 18140                           ;usart_pic16.c: 48: case 38400:
 18141                           
 18142                           ;usart_pic16.c: 47: break;
 18143                           
 18144                           
 18145                           ;usart_pic16.c: 49: SPBRG=25;
 18146  22AE  3019               	movlw	25
 18147  22AF                     L22:	
 18148  22AF  0023               	movlb	3	; select bank3
 18149  22B0  009B               	movwf	27	;volatile
 18150                           
 18151                           ;usart_pic16.c: 51: }
 18152                           
 18153                           ;usart_pic16.c: 50: break;
 18154  22B1  2AD5               	goto	l1748
 18155  22B2                     l8780:	
 18156                           
 18157                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 18158                           ; Switch size 1, requested type "space"
 18159                           ; Number of cases is 4, Range of values is 37 to 150
 18160                           ; switch strategies available:
 18161                           ; Name         Instructions Cycles
 18162                           ; simple_byte           13     7 (average)
 18163                           ; direct_byte          237     9 (fixed)
 18164                           ; jumptable            263     9 (fixed)
 18165                           ;	Chosen strategy is simple_byte
 18166  22B2  0021               	movlb	1	; select bank1
 18167  22B3  0821               	movf	(USARTInit@baud_rate+1)^(0+128),w
 18168  22B4  3A25               	xorlw	37	; case 37
 18169  22B5  1903               	skipnz
 18170  22B6  2AC1               	goto	l9910
 18171  22B7  3A6E               	xorlw	110	; case 75
 18172  22B8  1903               	skipnz
 18173  22B9  2AC6               	goto	l9912
 18174  22BA  3A31               	xorlw	49	; case 122
 18175  22BB  1903               	skipnz
 18176  22BC  2ACB               	goto	l9914
 18177  22BD  3AEC               	xorlw	236	; case 150
 18178  22BE  1903               	skipnz
 18179  22BF  2AD0               	goto	l9916
 18180  22C0  2AD5               	goto	l1748
 18181  22C1                     l9910:	
 18182                           
 18183                           ; Switch size 1, requested type "space"
 18184                           ; Number of cases is 1, Range of values is 128 to 128
 18185                           ; switch strategies available:
 18186                           ; Name         Instructions Cycles
 18187                           ; simple_byte            4     3 (average)
 18188                           ; direct_byte           11     9 (fixed)
 18189                           ; jumptable            263     9 (fixed)
 18190                           ;	Chosen strategy is simple_byte
 18191  22C1  0820               	movf	USARTInit@baud_rate^(0+128),w
 18192  22C2  3A80               	xorlw	128	; case 128
 18193  22C3  1903               	skipnz
 18194  22C4  2AA8               	goto	l8770
 18195  22C5  2AD5               	goto	l1748
 18196  22C6                     l9912:	
 18197                           
 18198                           ; Switch size 1, requested type "space"
 18199                           ; Number of cases is 1, Range of values is 0 to 0
 18200                           ; switch strategies available:
 18201                           ; Name         Instructions Cycles
 18202                           ; simple_byte            4     3 (average)
 18203                           ; direct_byte            8     6 (fixed)
 18204                           ; jumptable            260     6 (fixed)
 18205                           ;	Chosen strategy is simple_byte
 18206  22C6  0820               	movf	USARTInit@baud_rate^(0+128),w
 18207  22C7  3A00               	xorlw	0	; case 0
 18208  22C8  1903               	skipnz
 18209  22C9  2AAA               	goto	l8772
 18210  22CA  2AD5               	goto	l1748
 18211  22CB                     l9914:	
 18212                           
 18213                           ; Switch size 1, requested type "space"
 18214                           ; Number of cases is 1, Range of values is 18 to 18
 18215                           ; switch strategies available:
 18216                           ; Name         Instructions Cycles
 18217                           ; simple_byte            4     3 (average)
 18218                           ; direct_byte           11     9 (fixed)
 18219                           ; jumptable            263     9 (fixed)
 18220                           ;	Chosen strategy is simple_byte
 18221  22CB  0820               	movf	USARTInit@baud_rate^(0+128),w
 18222  22CC  3A12               	xorlw	18	; case 18
 18223  22CD  1903               	skipnz
 18224  22CE  2AAC               	goto	l8774
 18225  22CF  2AD5               	goto	l1748
 18226  22D0                     l9916:	
 18227                           
 18228                           ; Switch size 1, requested type "space"
 18229                           ; Number of cases is 1, Range of values is 0 to 0
 18230                           ; switch strategies available:
 18231                           ; Name         Instructions Cycles
 18232                           ; simple_byte            4     3 (average)
 18233                           ; direct_byte            8     6 (fixed)
 18234                           ; jumptable            260     6 (fixed)
 18235                           ;	Chosen strategy is simple_byte
 18236  22D0  0820               	movf	USARTInit@baud_rate^(0+128),w
 18237  22D1  3A00               	xorlw	0	; case 0
 18238  22D2  1903               	skipnz
 18239  22D3  2AAE               	goto	l8776
 18240  22D4  2AD5               	goto	l1748
 18241  22D5                     l1748:	
 18242                           
 18243                           ;usart_pic16.c: 53: TXSTAbits.TX9=0;
 18244  22D5  0023               	movlb	3	; select bank3
 18245  22D6  131E               	bcf	30,6	;volatile
 18246                           
 18247                           ;usart_pic16.c: 54: TXSTAbits.TXEN=1;
 18248  22D7  169E               	bsf	30,5	;volatile
 18249                           
 18250                           ;usart_pic16.c: 55: TXSTAbits.SYNC=0;
 18251  22D8  121E               	bcf	30,4	;volatile
 18252                           
 18253                           ;usart_pic16.c: 56: TXSTAbits.BRGH=1;
 18254  22D9  151E               	bsf	30,2	;volatile
 18255                           
 18256                           ;usart_pic16.c: 59: RCSTAbits.SPEN=1;
 18257  22DA  179D               	bsf	29,7	;volatile
 18258                           
 18259                           ;usart_pic16.c: 60: RCSTAbits.RX9=0;
 18260  22DB  131D               	bcf	29,6	;volatile
 18261                           
 18262                           ;usart_pic16.c: 61: RCSTAbits.CREN=1;
 18263  22DC  161D               	bsf	29,4	;volatile
 18264                           
 18265                           ;usart_pic16.c: 62: RCSTAbits.ADDEN=0;
 18266  22DD  119D               	bcf	29,3	;volatile
 18267                           
 18268                           ;usart_pic16.c: 65: RCIE=1;
 18269  22DE  0021               	movlb	1	; select bank1
 18270  22DF  1691               	bsf	17,5	;volatile
 18271                           
 18272                           ;usart_pic16.c: 66: PEIE=1;
 18273  22E0  170B               	bsf	11,6	;volatile
 18274                           
 18275                           ;usart_pic16.c: 68: (GIE = 1);
 18276  22E1  178B               	bsf	11,7	;volatile
 18277  22E2  0008               	return
 18278  22E3                     __end_of_USARTInit:	
 18279                           
 18280                           	psect	text63
 18281  268D                     __ptext63:	
 18282 ;; *************** function _ReadSavedSettings *****************
 18283 ;; Defined at:
 18284 ;;		line 234 in file "user.c"
 18285 ;; Parameters:    Size  Location     Type
 18286 ;;		None
 18287 ;; Auto vars:     Size  Location     Type
 18288 ;;		None
 18289 ;; Return value:  Size  Location     Type
 18290 ;;                  1    wreg      void 
 18291 ;; Registers used:
 18292 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 18293 ;; Tracked objects:
 18294 ;;		On entry : 0/0
 18295 ;;		On exit  : 0/0
 18296 ;;		Unchanged: 0/0
 18297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18300 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18301 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18302 ;;Total ram usage:        1 bytes
 18303 ;; Hardware stack levels used:    1
 18304 ;; Hardware stack levels required when called:    4
 18305 ;; This function calls:
 18306 ;;		_FLASH_ReadWord
 18307 ;;		_set_leds_bottom
 18308 ;;		_set_leds_top
 18309 ;; This function is called by:
 18310 ;;		_main
 18311 ;; This function uses a non-reentrant model
 18312 ;;
 18313                           
 18314                           
 18315                           ;psect for function _ReadSavedSettings
 18316  268D                     _ReadSavedSettings:	
 18317                           
 18318                           ;user.c: 236: top_push_state = FLASH_ReadWord(0x1F81);
 18319                           
 18320                           ;incstack = 0
 18321                           ; Regs used in _ReadSavedSettings: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 18322  268D  3081               	movlw	129
 18323  268E  0021               	movlb	1	; select bank1
 18324  268F  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 18325  2690  301F               	movlw	31
 18326  2691  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
 18327  2692  31AD  25C4  31A6   	fcall	_FLASH_ReadWord
 18328  2695  0021               	movlb	1	; select bank1
 18329  2696  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
 18330  2697  0020               	movlb	0	; select bank0
 18331  2698  00CD               	movwf	_top_push_state+1
 18332  2699  0021               	movlb	1	; select bank1
 18333  269A  0820               	movf	?_FLASH_ReadWord^(0+128),w
 18334  269B  0020               	movlb	0	; select bank0
 18335  269C  00CC               	movwf	_top_push_state
 18336                           
 18337                           ;user.c: 237: bottom_push_state = FLASH_ReadWord(0x1F82);
 18338  269D  3082               	movlw	130
 18339  269E  0021               	movlb	1	; select bank1
 18340  269F  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 18341  26A0  301F               	movlw	31
 18342  26A1  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
 18343  26A2  31AD  25C4  31A6   	fcall	_FLASH_ReadWord
 18344  26A5  0021               	movlb	1	; select bank1
 18345  26A6  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
 18346  26A7  0020               	movlb	0	; select bank0
 18347  26A8  00C9               	movwf	_bottom_push_state+1
 18348  26A9  0021               	movlb	1	; select bank1
 18349  26AA  0820               	movf	?_FLASH_ReadWord^(0+128),w
 18350  26AB  0020               	movlb	0	; select bank0
 18351  26AC  00C8               	movwf	_bottom_push_state
 18352                           
 18353                           ;user.c: 239: if (top_push_state > 6) {
 18354  26AD  084D               	movf	_top_push_state+1,w
 18355  26AE  3A80               	xorlw	128
 18356  26AF  0021               	movlb	1	; select bank1
 18357  26B0  00A4               	movwf	??_ReadSavedSettings^(0+128)
 18358  26B1  3080               	movlw	128
 18359  26B2  0224               	subwf	??_ReadSavedSettings^(0+128),w
 18360  26B3  1D03               	skipz
 18361  26B4  2EB8               	goto	u9425
 18362  26B5  3007               	movlw	7
 18363  26B6  0020               	movlb	0	; select bank0
 18364  26B7  024C               	subwf	_top_push_state,w
 18365  26B8                     u9425:	
 18366  26B8  1C03               	skipc
 18367  26B9  2EBF               	goto	l655
 18368                           
 18369                           ;user.c: 241: top_push_state = 6;
 18370  26BA  3006               	movlw	6
 18371  26BB  0020               	movlb	0	; select bank0
 18372  26BC  00CC               	movwf	_top_push_state
 18373  26BD  3000               	movlw	0
 18374  26BE  00CD               	movwf	_top_push_state+1
 18375  26BF                     l655:	
 18376                           
 18377                           ;user.c: 242: }
 18378                           ;user.c: 243: if (bottom_push_state > 5) {
 18379  26BF  0020               	movlb	0	; select bank0
 18380  26C0  0849               	movf	_bottom_push_state+1,w
 18381  26C1  3A80               	xorlw	128
 18382  26C2  0021               	movlb	1	; select bank1
 18383  26C3  00A4               	movwf	??_ReadSavedSettings^(0+128)
 18384  26C4  3080               	movlw	128
 18385  26C5  0224               	subwf	??_ReadSavedSettings^(0+128),w
 18386  26C6  1D03               	skipz
 18387  26C7  2ECB               	goto	u9435
 18388  26C8  3006               	movlw	6
 18389  26C9  0020               	movlb	0	; select bank0
 18390  26CA  0248               	subwf	_bottom_push_state,w
 18391  26CB                     u9435:	
 18392  26CB  1C03               	skipc
 18393  26CC  2ED2               	goto	l8834
 18394                           
 18395                           ;user.c: 245: bottom_push_state = 1;
 18396  26CD  3001               	movlw	1
 18397  26CE  0020               	movlb	0	; select bank0
 18398  26CF  00C8               	movwf	_bottom_push_state
 18399  26D0  3000               	movlw	0
 18400  26D1  00C9               	movwf	_bottom_push_state+1
 18401  26D2                     l8834:	
 18402                           
 18403                           ;user.c: 246: }
 18404                           ;user.c: 249: LATGbits.LATG1 = !switchBypass_state;
 18405  26D2  0020               	movlb	0	; select bank0
 18406  26D3  0851               	movf	_switchBypass_state,w
 18407  26D4  1D03               	btfss	3,2
 18408  26D5  2ED9               	goto	u9440
 18409  26D6  0027               	movlb	7	; select bank7
 18410  26D7  148D               	bsf	13,1	;volatile
 18411  26D8  2EDB               	goto	l8836
 18412  26D9                     u9440:	
 18413  26D9  0027               	movlb	7	; select bank7
 18414  26DA  108D               	bcf	13,1	;volatile
 18415  26DB                     l8836:	
 18416                           
 18417                           ;user.c: 250: LATGbits.LATG2 = switchBypass_state;
 18418  26DB  0020               	movlb	0	; select bank0
 18419  26DC  0C51               	rrf	_switchBypass_state,w
 18420  26DD  0027               	movlb	7	; select bank7
 18421  26DE  1C03               	skipc
 18422  26DF  110D               	bcf	13,2	;volatile
 18423  26E0  1803               	skipnc
 18424  26E1  150D               	bsf	13,2	;volatile
 18425                           
 18426                           ;user.c: 251: LATBbits.LATB2 = 0;
 18427  26E2  0022               	movlb	2	; select bank2
 18428  26E3  110D               	bcf	13,2	;volatile
 18429                           
 18430                           ;user.c: 252: LATBbits.LATB3 = 0;
 18431  26E4  118D               	bcf	13,3	;volatile
 18432                           
 18433                           ;user.c: 254: LATBbits.LATB4 = 0;
 18434  26E5  120D               	bcf	13,4	;volatile
 18435                           
 18436                           ;user.c: 255: LATBbits.LATB5 = 0;
 18437  26E6  128D               	bcf	13,5	;volatile
 18438                           
 18439                           ;user.c: 257: LATBbits.LATB1 = 0;
 18440  26E7  108D               	bcf	13,1	;volatile
 18441                           
 18442                           ;user.c: 258: LATBbits.LATB0 = 0;
 18443  26E8  100D               	bcf	13,0	;volatile
 18444                           
 18445                           ;user.c: 261: set_leds_top(top_push_state, 1);
 18446  26E9  0020               	movlb	0	; select bank0
 18447  26EA  084D               	movf	_top_push_state+1,w
 18448  26EB  0021               	movlb	1	; select bank1
 18449  26EC  00A1               	movwf	(set_leds_top@x+1)^(0+128)
 18450  26ED  0020               	movlb	0	; select bank0
 18451  26EE  084C               	movf	_top_push_state,w
 18452  26EF  0021               	movlb	1	; select bank1
 18453  26F0  00A0               	movwf	set_leds_top@x^(0+128)
 18454  26F1  3001               	movlw	1
 18455  26F2  00A2               	movwf	set_leds_top@ledState^(0+128)
 18456  26F3  3000               	movlw	0
 18457  26F4  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
 18458  26F5  31A5  2509  31A6   	fcall	_set_leds_top
 18459                           
 18460                           ;user.c: 262: set_leds_bottom(bottom_push_state);
 18461  26F8  0020               	movlb	0	; select bank0
 18462  26F9  0849               	movf	_bottom_push_state+1,w
 18463  26FA  0021               	movlb	1	; select bank1
 18464  26FB  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
 18465  26FC  0020               	movlb	0	; select bank0
 18466  26FD  0848               	movf	_bottom_push_state,w
 18467  26FE  0021               	movlb	1	; select bank1
 18468  26FF  00A0               	movwf	set_leds_bottom@x^(0+128)
 18469  2700  31A0  206F         	fcall	_set_leds_bottom
 18470  2702  0008               	return
 18471  2703                     __end_of_ReadSavedSettings:	
 18472                           
 18473                           	psect	text64
 18474  2509                     __ptext64:	
 18475 ;; *************** function _set_leds_top *****************
 18476 ;; Defined at:
 18477 ;;		line 16 in file "LEDs.c"
 18478 ;; Parameters:    Size  Location     Type
 18479 ;;  x               2    0[BANK1 ] int 
 18480 ;;  ledState        2    2[BANK1 ] int 
 18481 ;; Auto vars:     Size  Location     Type
 18482 ;;		None
 18483 ;; Return value:  Size  Location     Type
 18484 ;;                  1    wreg      void 
 18485 ;; Registers used:
 18486 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 18487 ;; Tracked objects:
 18488 ;;		On entry : 0/0
 18489 ;;		On exit  : 0/0
 18490 ;;		Unchanged: 0/0
 18491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18492 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18493 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18495 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18496 ;;Total ram usage:        4 bytes
 18497 ;; Hardware stack levels used:    1
 18498 ;; Hardware stack levels required when called:    3
 18499 ;; This function calls:
 18500 ;;		Nothing
 18501 ;; This function is called by:
 18502 ;;		_ReadSavedSettings
 18503 ;;		_ring_tactiles
 18504 ;;		_solidring_tactiles
 18505 ;;		_read_top_tactile
 18506 ;;		_setPresetDisplay
 18507 ;;		_resetRingLEDs
 18508 ;;		_setExpressionDisplay
 18509 ;;		_star_tactiles
 18510 ;; This function uses a non-reentrant model
 18511 ;;
 18512                           
 18513                           
 18514                           ;psect for function _set_leds_top
 18515  2509                     _set_leds_top:	
 18516                           
 18517                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 18518                           
 18519                           ;incstack = 0
 18520                           ; Regs used in _set_leds_top: [wreg-fsr0h+status,2+status,0]
 18521  2509  0027               	movlb	7	; select bank7
 18522  250A  100C               	bcf	12,0	;volatile
 18523                           
 18524                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 18525  250B  108C               	bcf	12,1	;volatile
 18526                           
 18527                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 18528  250C  110C               	bcf	12,2	;volatile
 18529                           
 18530                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 18531  250D  118C               	bcf	12,3	;volatile
 18532                           
 18533                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 18534  250E  120C               	bcf	12,4	;volatile
 18535                           
 18536                           ;LEDs.c: 22: switch (x) {
 18537  250F  2D3F               	goto	l7804
 18538  2510                     l7792:	
 18539                           ;LEDs.c: 23: case 1:
 18540                           
 18541                           
 18542                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 18543  2510  0021               	movlb	1	; select bank1
 18544  2511  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18545  2512  0027               	movlb	7	; select bank7
 18546  2513  1C03               	skipc
 18547  2514  100C               	bcf	12,0	;volatile
 18548  2515  1803               	skipnc
 18549  2516  140C               	bsf	12,0	;volatile
 18550                           
 18551                           ;LEDs.c: 25: break;
 18552  2517  0008               	return
 18553  2518                     l7794:	
 18554                           ;LEDs.c: 26: case 2:
 18555                           
 18556                           
 18557                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 18558  2518  0021               	movlb	1	; select bank1
 18559  2519  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18560  251A  0027               	movlb	7	; select bank7
 18561  251B  1C03               	skipc
 18562  251C  108C               	bcf	12,1	;volatile
 18563  251D  1803               	skipnc
 18564  251E  148C               	bsf	12,1	;volatile
 18565                           
 18566                           ;LEDs.c: 28: break;
 18567  251F  0008               	return
 18568  2520                     l7796:	
 18569                           ;LEDs.c: 29: case 3:
 18570                           
 18571                           
 18572                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 18573  2520  0021               	movlb	1	; select bank1
 18574  2521  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18575  2522  0027               	movlb	7	; select bank7
 18576  2523  1C03               	skipc
 18577  2524  110C               	bcf	12,2	;volatile
 18578  2525  1803               	skipnc
 18579  2526  150C               	bsf	12,2	;volatile
 18580                           
 18581                           ;LEDs.c: 31: break;
 18582  2527  0008               	return
 18583  2528                     l7798:	
 18584                           ;LEDs.c: 32: case 4:
 18585                           
 18586                           
 18587                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 18588  2528  0021               	movlb	1	; select bank1
 18589  2529  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18590  252A  0027               	movlb	7	; select bank7
 18591  252B  1C03               	skipc
 18592  252C  118C               	bcf	12,3	;volatile
 18593  252D  1803               	skipnc
 18594  252E  158C               	bsf	12,3	;volatile
 18595                           
 18596                           ;LEDs.c: 34: break;
 18597  252F  0008               	return
 18598  2530                     l7800:	
 18599                           ;LEDs.c: 35: case 5:
 18600                           
 18601                           
 18602                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 18603  2530  0021               	movlb	1	; select bank1
 18604  2531  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18605  2532  0027               	movlb	7	; select bank7
 18606  2533  1C03               	skipc
 18607  2534  120C               	bcf	12,4	;volatile
 18608  2535  1803               	skipnc
 18609  2536  160C               	bsf	12,4	;volatile
 18610                           
 18611                           ;LEDs.c: 39: break;
 18612                           
 18613                           ;LEDs.c: 38: case 6:
 18614                           
 18615                           ;LEDs.c: 37: break;
 18616  2537  0008               	return
 18617  2538                     l816:	
 18618                           ;LEDs.c: 40: case 100:
 18619                           
 18620                           
 18621                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 18622  2538  0027               	movlb	7	; select bank7
 18623  2539  140C               	bsf	12,0	;volatile
 18624                           
 18625                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 18626  253A  148C               	bsf	12,1	;volatile
 18627                           
 18628                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 18629  253B  150C               	bsf	12,2	;volatile
 18630                           
 18631                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 18632  253C  158C               	bsf	12,3	;volatile
 18633                           
 18634                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 18635  253D  160C               	bsf	12,4	;volatile
 18636                           
 18637                           ;LEDs.c: 47: }
 18638                           
 18639                           ;LEDs.c: 46: break;
 18640  253E  0008               	return
 18641  253F                     l7804:	
 18642                           
 18643                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18644                           ; Switch size 1, requested type "space"
 18645                           ; Number of cases is 1, Range of values is 0 to 0
 18646                           ; switch strategies available:
 18647                           ; Name         Instructions Cycles
 18648                           ; simple_byte            4     3 (average)
 18649                           ; direct_byte            8     6 (fixed)
 18650                           ; jumptable            260     6 (fixed)
 18651                           ;	Chosen strategy is simple_byte
 18652  253F  0021               	movlb	1	; select bank1
 18653  2540  0821               	movf	(set_leds_top@x+1)^(0+128),w
 18654  2541  3A00               	xorlw	0	; case 0
 18655  2542  1903               	skipnz
 18656  2543  2D45               	goto	l9918
 18657  2544  2D5C               	goto	l817
 18658  2545                     l9918:	
 18659                           
 18660                           ; Switch size 1, requested type "space"
 18661                           ; Number of cases is 7, Range of values is 1 to 100
 18662                           ; switch strategies available:
 18663                           ; Name         Instructions Cycles
 18664                           ; simple_byte           22    12 (average)
 18665                           ; direct_byte          209     9 (fixed)
 18666                           ; jumptable            263     9 (fixed)
 18667                           ;	Chosen strategy is simple_byte
 18668  2545  0820               	movf	set_leds_top@x^(0+128),w
 18669  2546  3A01               	xorlw	1	; case 1
 18670  2547  1903               	skipnz
 18671  2548  2D10               	goto	l7792
 18672  2549  3A03               	xorlw	3	; case 2
 18673  254A  1903               	skipnz
 18674  254B  2D18               	goto	l7794
 18675  254C  3A01               	xorlw	1	; case 3
 18676  254D  1903               	skipnz
 18677  254E  2D20               	goto	l7796
 18678  254F  3A07               	xorlw	7	; case 4
 18679  2550  1903               	skipnz
 18680  2551  2D28               	goto	l7798
 18681  2552  3A01               	xorlw	1	; case 5
 18682  2553  1903               	skipnz
 18683  2554  2D30               	goto	l7800
 18684  2555  3A03               	xorlw	3	; case 6
 18685  2556  1903               	skipnz
 18686  2557  2D5C               	goto	l817
 18687  2558  3A62               	xorlw	98	; case 100
 18688  2559  1903               	skipnz
 18689  255A  2D38               	goto	l816
 18690  255B  2D5C               	goto	l817
 18691  255C                     l817:	
 18692  255C  0008               	return
 18693  255D                     __end_of_set_leds_top:	
 18694                           
 18695                           	psect	text65
 18696  206F                     __ptext65:	
 18697 ;; *************** function _set_leds_bottom *****************
 18698 ;; Defined at:
 18699 ;;		line 51 in file "LEDs.c"
 18700 ;; Parameters:    Size  Location     Type
 18701 ;;  x               2    0[BANK1 ] int 
 18702 ;; Auto vars:     Size  Location     Type
 18703 ;;		None
 18704 ;; Return value:  Size  Location     Type
 18705 ;;                  1    wreg      void 
 18706 ;; Registers used:
 18707 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 18708 ;; Tracked objects:
 18709 ;;		On entry : 0/0
 18710 ;;		On exit  : 0/0
 18711 ;;		Unchanged: 0/0
 18712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18713 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18714 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18716 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18717 ;;Total ram usage:        2 bytes
 18718 ;; Hardware stack levels used:    1
 18719 ;; Hardware stack levels required when called:    3
 18720 ;; This function calls:
 18721 ;;		Nothing
 18722 ;; This function is called by:
 18723 ;;		_ReadSavedSettings
 18724 ;;		_ring_tactiles
 18725 ;;		_solidring_tactiles
 18726 ;;		_read_bottom_tactile
 18727 ;;		_setPresetDisplay
 18728 ;;		_resetRingLEDs
 18729 ;;		_setExpressionDisplay
 18730 ;;		_star_tactiles
 18731 ;; This function uses a non-reentrant model
 18732 ;;
 18733                           
 18734                           
 18735                           ;psect for function _set_leds_bottom
 18736  206F                     _set_leds_bottom:	
 18737                           
 18738                           ;LEDs.c: 52: LATDbits.LATD0 = 0;
 18739                           
 18740                           ;incstack = 0
 18741                           ; Regs used in _set_leds_bottom: [wreg-fsr0h+status,2+status,0]
 18742  206F  0022               	movlb	2	; select bank2
 18743  2070  100F               	bcf	15,0	;volatile
 18744                           
 18745                           ;LEDs.c: 53: LATDbits.LATD1 = 0;
 18746  2071  108F               	bcf	15,1	;volatile
 18747                           
 18748                           ;LEDs.c: 54: LATDbits.LATD2 = 0;
 18749  2072  110F               	bcf	15,2	;volatile
 18750                           
 18751                           ;LEDs.c: 55: LATDbits.LATD3 = 0;
 18752  2073  118F               	bcf	15,3	;volatile
 18753                           
 18754                           ;LEDs.c: 56: LATDbits.LATD4 = 0;
 18755  2074  120F               	bcf	15,4	;volatile
 18756                           
 18757                           ;LEDs.c: 57: switch (x) {
 18758  2075  288C               	goto	l7820
 18759  2076                     l821:	
 18760                           ;LEDs.c: 58: case 1:
 18761                           
 18762                           
 18763                           ;LEDs.c: 59: LATDbits.LATD0 = 1;
 18764  2076  0022               	movlb	2	; select bank2
 18765  2077  140F               	bsf	15,0	;volatile
 18766                           
 18767                           ;LEDs.c: 60: break;
 18768  2078  0008               	return
 18769  2079                     l823:	
 18770                           ;LEDs.c: 61: case 2:
 18771                           
 18772                           
 18773                           ;LEDs.c: 62: LATDbits.LATD1 = 1;
 18774  2079  0022               	movlb	2	; select bank2
 18775  207A  148F               	bsf	15,1	;volatile
 18776                           
 18777                           ;LEDs.c: 63: break;
 18778  207B  0008               	return
 18779  207C                     l824:	
 18780                           ;LEDs.c: 64: case 3:
 18781                           
 18782                           
 18783                           ;LEDs.c: 65: LATDbits.LATD2 = 1;
 18784  207C  0022               	movlb	2	; select bank2
 18785  207D  150F               	bsf	15,2	;volatile
 18786                           
 18787                           ;LEDs.c: 66: break;
 18788  207E  0008               	return
 18789  207F                     l825:	
 18790                           ;LEDs.c: 67: case 4:
 18791                           
 18792                           
 18793                           ;LEDs.c: 68: LATDbits.LATD3 = 1;
 18794  207F  0022               	movlb	2	; select bank2
 18795  2080  158F               	bsf	15,3	;volatile
 18796                           
 18797                           ;LEDs.c: 69: break;
 18798  2081  0008               	return
 18799  2082                     l826:	
 18800                           ;LEDs.c: 70: case 5:
 18801                           
 18802                           
 18803                           ;LEDs.c: 71: LATDbits.LATD4 = 1;
 18804  2082  0022               	movlb	2	; select bank2
 18805  2083  160F               	bsf	15,4	;volatile
 18806                           
 18807                           ;LEDs.c: 74: break;
 18808                           
 18809                           ;LEDs.c: 73: case 6:
 18810                           
 18811                           ;LEDs.c: 72: break;
 18812  2084  0008               	return
 18813  2085                     l828:	
 18814                           ;LEDs.c: 75: case 100:
 18815                           
 18816                           
 18817                           ;LEDs.c: 76: LATDbits.LATD0 = 1;
 18818  2085  0022               	movlb	2	; select bank2
 18819  2086  140F               	bsf	15,0	;volatile
 18820                           
 18821                           ;LEDs.c: 77: LATDbits.LATD1 = 1;
 18822  2087  148F               	bsf	15,1	;volatile
 18823                           
 18824                           ;LEDs.c: 78: LATDbits.LATD2 = 1;
 18825  2088  150F               	bsf	15,2	;volatile
 18826                           
 18827                           ;LEDs.c: 79: LATDbits.LATD3 = 1;
 18828  2089  158F               	bsf	15,3	;volatile
 18829                           
 18830                           ;LEDs.c: 80: LATDbits.LATD4 = 1;
 18831  208A  160F               	bsf	15,4	;volatile
 18832                           
 18833                           ;LEDs.c: 82: }
 18834                           
 18835                           ;LEDs.c: 81: break;
 18836  208B  0008               	return
 18837  208C                     l7820:	
 18838                           
 18839                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18840                           ; Switch size 1, requested type "space"
 18841                           ; Number of cases is 1, Range of values is 0 to 0
 18842                           ; switch strategies available:
 18843                           ; Name         Instructions Cycles
 18844                           ; simple_byte            4     3 (average)
 18845                           ; direct_byte            8     6 (fixed)
 18846                           ; jumptable            260     6 (fixed)
 18847                           ;	Chosen strategy is simple_byte
 18848  208C  0021               	movlb	1	; select bank1
 18849  208D  0821               	movf	(set_leds_bottom@x+1)^(0+128),w
 18850  208E  3A00               	xorlw	0	; case 0
 18851  208F  1903               	skipnz
 18852  2090  2892               	goto	l9920
 18853  2091  28A9               	goto	l829
 18854  2092                     l9920:	
 18855                           
 18856                           ; Switch size 1, requested type "space"
 18857                           ; Number of cases is 7, Range of values is 1 to 100
 18858                           ; switch strategies available:
 18859                           ; Name         Instructions Cycles
 18860                           ; simple_byte           22    12 (average)
 18861                           ; direct_byte          209     9 (fixed)
 18862                           ; jumptable            263     9 (fixed)
 18863                           ;	Chosen strategy is simple_byte
 18864  2092  0820               	movf	set_leds_bottom@x^(0+128),w
 18865  2093  3A01               	xorlw	1	; case 1
 18866  2094  1903               	skipnz
 18867  2095  2876               	goto	l821
 18868  2096  3A03               	xorlw	3	; case 2
 18869  2097  1903               	skipnz
 18870  2098  2879               	goto	l823
 18871  2099  3A01               	xorlw	1	; case 3
 18872  209A  1903               	skipnz
 18873  209B  287C               	goto	l824
 18874  209C  3A07               	xorlw	7	; case 4
 18875  209D  1903               	skipnz
 18876  209E  287F               	goto	l825
 18877  209F  3A01               	xorlw	1	; case 5
 18878  20A0  1903               	skipnz
 18879  20A1  2882               	goto	l826
 18880  20A2  3A03               	xorlw	3	; case 6
 18881  20A3  1903               	skipnz
 18882  20A4  28A9               	goto	l829
 18883  20A5  3A62               	xorlw	98	; case 100
 18884  20A6  1903               	skipnz
 18885  20A7  2885               	goto	l828
 18886  20A8  28A9               	goto	l829
 18887  20A9                     l829:	
 18888  20A9  0008               	return
 18889  20AA                     __end_of_set_leds_bottom:	
 18890                           
 18891                           	psect	text66
 18892  2DC4                     __ptext66:	
 18893 ;; *************** function _FLASH_ReadWord *****************
 18894 ;; Defined at:
 18895 ;;		line 58 in file "memory.c"
 18896 ;; Parameters:    Size  Location     Type
 18897 ;;  flashAddr       2    0[BANK1 ] unsigned int 
 18898 ;; Auto vars:     Size  Location     Type
 18899 ;;  GIEBitValue     1    2[BANK1 ] unsigned char 
 18900 ;; Return value:  Size  Location     Type
 18901 ;;                  2    0[BANK1 ] unsigned int 
 18902 ;; Registers used:
 18903 ;;		wreg, status,2, status,0
 18904 ;; Tracked objects:
 18905 ;;		On entry : 0/0
 18906 ;;		On exit  : 0/0
 18907 ;;		Unchanged: 0/0
 18908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18909 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18910 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18912 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18913 ;;Total ram usage:        3 bytes
 18914 ;; Hardware stack levels used:    1
 18915 ;; Hardware stack levels required when called:    3
 18916 ;; This function calls:
 18917 ;;		Nothing
 18918 ;; This function is called by:
 18919 ;;		_ReadSavedSettings
 18920 ;;		_FLASH_WriteWord
 18921 ;; This function uses a non-reentrant model
 18922 ;;
 18923                           
 18924                           
 18925                           ;psect for function _FLASH_ReadWord
 18926  2DC4                     _FLASH_ReadWord:	
 18927                           
 18928                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
 18929                           
 18930                           ;incstack = 0
 18931                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
 18932  2DC4  3000               	movlw	0
 18933  2DC5  1B8B               	btfsc	11,7	;volatile
 18934  2DC6  3001               	movlw	1
 18935  2DC7  0021               	movlb	1	; select bank1
 18936  2DC8  00A2               	movwf	FLASH_ReadWord@GIEBitValue^(0+128)
 18937                           
 18938                           ;memory.c: 61: INTCONbits.GIE = 0;
 18939  2DC9  138B               	bcf	11,7	;volatile
 18940                           
 18941                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
 18942  2DCA  0820               	movf	FLASH_ReadWord@flashAddr^(0+128),w
 18943  2DCB  0023               	movlb	3	; select bank3
 18944  2DCC  0091               	movwf	17	;volatile
 18945                           
 18946                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
 18947  2DCD  0021               	movlb	1	; select bank1
 18948  2DCE  0821               	movf	(FLASH_ReadWord@flashAddr+1)^(0+128),w
 18949  2DCF  0023               	movlb	3	; select bank3
 18950  2DD0  0092               	movwf	18	;volatile
 18951                           
 18952                           ;memory.c: 65: PMCON1bits.CFGS = 0;
 18953  2DD1  1315               	bcf	21,6	;volatile
 18954                           
 18955                           ;memory.c: 66: PMCON1bits.RD = 1;
 18956  2DD2  1415               	bsf	21,0	;volatile
 18957                           
 18958                           ;memory.c: 67: __nop();
 18959  2DD3  0000               	nop
 18960                           
 18961                           ;memory.c: 68: __nop();
 18962  2DD4  0000               	nop
 18963                           
 18964                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
 18965  2DD5  0021               	movlb	1	; select bank1
 18966  2DD6  0C22               	rrf	FLASH_ReadWord@GIEBitValue^(0+128),w
 18967  2DD7  1C03               	skipc
 18968  2DD8  138B               	bcf	11,7	;volatile
 18969  2DD9  1803               	skipnc
 18970  2DDA  178B               	bsf	11,7	;volatile
 18971                           
 18972                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
 18973  2DDB  0023               	movlb	3	; select bank3
 18974  2DDC  0814               	movf	20,w	;volatile
 18975  2DDD  0021               	movlb	1	; select bank1
 18976  2DDE  00A1               	movwf	(?_FLASH_ReadWord+1)^(0+128)
 18977  2DDF  0023               	movlb	3	; select bank3
 18978  2DE0  0813               	movf	19,w	;volatile
 18979  2DE1  0021               	movlb	1	; select bank1
 18980  2DE2  00A0               	movwf	?_FLASH_ReadWord^(0+128)
 18981  2DE3  0008               	return
 18982  2DE4                     __end_of_FLASH_ReadWord:	
 18983                           
 18984                           	psect	text67
 18985  2E29                     __ptext67:	
 18986 ;; *************** function _InitializeTaps *****************
 18987 ;; Defined at:
 18988 ;;		line 228 in file "user.c"
 18989 ;; Parameters:    Size  Location     Type
 18990 ;;		None
 18991 ;; Auto vars:     Size  Location     Type
 18992 ;;  itap            2    1[BANK1 ] int 
 18993 ;; Return value:  Size  Location     Type
 18994 ;;                  1    wreg      void 
 18995 ;; Registers used:
 18996 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18997 ;; Tracked objects:
 18998 ;;		On entry : 0/0
 18999 ;;		On exit  : 0/0
 19000 ;;		Unchanged: 0/0
 19001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19003 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19004 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19005 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19006 ;;Total ram usage:        3 bytes
 19007 ;; Hardware stack levels used:    1
 19008 ;; Hardware stack levels required when called:    3
 19009 ;; This function calls:
 19010 ;;		Nothing
 19011 ;; This function is called by:
 19012 ;;		_main
 19013 ;; This function uses a non-reentrant model
 19014 ;;
 19015                           
 19016                           
 19017                           ;psect for function _InitializeTaps
 19018  2E29                     _InitializeTaps:	
 19019                           
 19020                           ;user.c: 229: for (int itap = 0; itap < 12; itap++) {
 19021                           
 19022                           ;incstack = 0
 19023                           ; Regs used in _InitializeTaps: [wreg+fsr1l+fsr1h+status,2+status,0]
 19024  2E29  0021               	movlb	1	; select bank1
 19025  2E2A  01A1               	clrf	InitializeTaps@itap^(0+128)
 19026  2E2B  01A2               	clrf	(InitializeTaps@itap+1)^(0+128)
 19027  2E2C                     L23:	
 19028  2E2C  0822               	movf	(InitializeTaps@itap+1)^(0+128),w
 19029  2E2D  3A80               	xorlw	128
 19030  2E2E  00A0               	movwf	??_InitializeTaps^(0+128)
 19031  2E2F  3080               	movlw	128
 19032  2E30  0220               	subwf	??_InitializeTaps^(0+128),w
 19033  2E31  1D03               	skipz
 19034  2E32  2E35               	goto	u9395
 19035  2E33  300C               	movlw	12
 19036  2E34  0221               	subwf	InitializeTaps@itap^(0+128),w
 19037  2E35                     u9395:	
 19038  2E35  1803               	btfsc	3,0
 19039  2E36  0008               	return
 19040                           
 19041                           ;user.c: 230: tap[itap] = 0;
 19042  2E37  0021               	movlb	1	; select bank1
 19043  2E38  0821               	movf	InitializeTaps@itap^(0+128),w
 19044  2E39  00A0               	movwf	??_InitializeTaps^(0+128)
 19045  2E3A  3001               	movlw	1
 19046  2E3B                     u9405:	
 19047  2E3B  35A0               	lslf	??_InitializeTaps^(0+128),f
 19048  2E3C  3EFF               	addlw	-1
 19049  2E3D  1D03               	skipz
 19050  2E3E  2E3B               	goto	u9405
 19051  2E3F  3520               	lslf	??_InitializeTaps^(0+128),w
 19052  2E40  3EA0               	addlw	(low (_tap| (0+512)))& (0+255)
 19053  2E41  0086               	movwf	6
 19054  2E42  3002               	movlw	2	; select bank5/6
 19055  2E43  0087               	movwf	7
 19056  2E44  3000               	movlw	0
 19057  2E45  3FC0               	movwi [0]fsr1
 19058  2E46  3000               	movlw	0
 19059  2E47  3FC1               	movwi [1]fsr1
 19060  2E48  3FC2               	movwi [2]fsr1
 19061  2E49  3FC3               	movwi [3]fsr1
 19062  2E4A  3001               	movlw	1
 19063  2E4B  07A1               	addwf	InitializeTaps@itap^(0+128),f
 19064  2E4C  3000               	movlw	0
 19065  2E4D  3DA2               	addwfc	(InitializeTaps@itap+1)^(0+128),f
 19066  2E4E  2E2C               	goto	L23
 19067  2E4F                     __end_of_InitializeTaps:	
 19068                           
 19069                           	psect	text68
 19070  2F02                     __ptext68:	
 19071 ;; *************** function _InitApp *****************
 19072 ;; Defined at:
 19073 ;;		line 23 in file "user.c"
 19074 ;; Parameters:    Size  Location     Type
 19075 ;;		None
 19076 ;; Auto vars:     Size  Location     Type
 19077 ;;		None
 19078 ;; Return value:  Size  Location     Type
 19079 ;;                  1    wreg      void 
 19080 ;; Registers used:
 19081 ;;		wreg, status,2, status,0, pclath, cstack
 19082 ;; Tracked objects:
 19083 ;;		On entry : 0/0
 19084 ;;		On exit  : 0/0
 19085 ;;		Unchanged: 0/0
 19086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19088 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19090 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19091 ;;Total ram usage:        0 bytes
 19092 ;; Hardware stack levels used:    1
 19093 ;; Hardware stack levels required when called:    5
 19094 ;; This function calls:
 19095 ;;		_init_adc
 19096 ;;		_init_pwm
 19097 ;; This function is called by:
 19098 ;;		_main
 19099 ;; This function uses a non-reentrant model
 19100 ;;
 19101                           
 19102                           
 19103                           ;psect for function _InitApp
 19104  2F02                     _InitApp:	
 19105                           
 19106                           ;user.c: 24: TRISBbits.TRISB0 = 0;
 19107                           
 19108                           ;incstack = 0
 19109                           ; Regs used in _InitApp: [wreg+status,2+status,0+pclath+cstack]
 19110  2F02  0021               	movlb	1	; select bank1
 19111  2F03  100D               	bcf	13,0	;volatile
 19112                           
 19113                           ;user.c: 25: TRISBbits.TRISB1 = 0;
 19114  2F04  108D               	bcf	13,1	;volatile
 19115                           
 19116                           ;user.c: 26: TRISBbits.TRISB2 = 0;
 19117  2F05  110D               	bcf	13,2	;volatile
 19118                           
 19119                           ;user.c: 27: TRISBbits.TRISB3 = 0;
 19120  2F06  118D               	bcf	13,3	;volatile
 19121                           
 19122                           ;user.c: 28: TRISBbits.TRISB4 = 0;
 19123  2F07  120D               	bcf	13,4	;volatile
 19124                           
 19125                           ;user.c: 29: TRISBbits.TRISB5 = 0;
 19126  2F08  128D               	bcf	13,5	;volatile
 19127                           
 19128                           ;user.c: 31: TRISCbits.TRISC0 = 1;
 19129  2F09  140E               	bsf	14,0	;volatile
 19130                           
 19131                           ;user.c: 32: TRISCbits.TRISC4 = 0;
 19132  2F0A  120E               	bcf	14,4	;volatile
 19133                           
 19134                           ;user.c: 33: TRISCbits.TRISC5 = 0;
 19135  2F0B  128E               	bcf	14,5	;volatile
 19136                           
 19137                           ;user.c: 36: TRISDbits.TRISD0 = 0;
 19138  2F0C  100F               	bcf	15,0	;volatile
 19139                           
 19140                           ;user.c: 37: TRISDbits.TRISD1 = 0;
 19141  2F0D  108F               	bcf	15,1	;volatile
 19142                           
 19143                           ;user.c: 38: TRISDbits.TRISD2 = 0;
 19144  2F0E  110F               	bcf	15,2	;volatile
 19145                           
 19146                           ;user.c: 39: TRISDbits.TRISD3 = 0;
 19147  2F0F  118F               	bcf	15,3	;volatile
 19148                           
 19149                           ;user.c: 40: TRISDbits.TRISD4 = 0;
 19150  2F10  120F               	bcf	15,4	;volatile
 19151                           
 19152                           ;user.c: 41: TRISDbits.TRISD5 = 1;
 19153  2F11  168F               	bsf	15,5	;volatile
 19154                           
 19155                           ;user.c: 42: TRISDbits.TRISD6 = 1;
 19156  2F12  170F               	bsf	15,6	;volatile
 19157                           
 19158                           ;user.c: 43: TRISDbits.TRISD7 = 1;
 19159  2F13  178F               	bsf	15,7	;volatile
 19160                           
 19161                           ;user.c: 49: TRISEbits.TRISE0 = 1;
 19162  2F14  1410               	bsf	16,0	;volatile
 19163                           
 19164                           ;user.c: 50: TRISEbits.TRISE1 = 1;
 19165  2F15  1490               	bsf	16,1	;volatile
 19166                           
 19167                           ;user.c: 51: ANSELEbits.ANSE0 = 0;
 19168  2F16  0023               	movlb	3	; select bank3
 19169  2F17  1010               	bcf	16,0	;volatile
 19170                           
 19171                           ;user.c: 52: ANSELEbits.ANSE1 = 0;
 19172  2F18  1090               	bcf	16,1	;volatile
 19173                           
 19174                           ;user.c: 53: PORTEbits.RE0 = 0;
 19175  2F19  0020               	movlb	0	; select bank0
 19176  2F1A  1010               	bcf	16,0	;volatile
 19177                           
 19178                           ;user.c: 54: PORTEbits.RE1 = 0;
 19179  2F1B  1090               	bcf	16,1	;volatile
 19180                           
 19181                           ;user.c: 56: TRISFbits.TRISF0 = 0;
 19182  2F1C  0026               	movlb	6	; select bank6
 19183  2F1D  100C               	bcf	12,0	;volatile
 19184                           
 19185                           ;user.c: 57: TRISFbits.TRISF1 = 0;
 19186  2F1E  108C               	bcf	12,1	;volatile
 19187                           
 19188                           ;user.c: 58: TRISFbits.TRISF2 = 0;
 19189  2F1F  110C               	bcf	12,2	;volatile
 19190                           
 19191                           ;user.c: 59: TRISFbits.TRISF3 = 0;
 19192  2F20  118C               	bcf	12,3	;volatile
 19193                           
 19194                           ;user.c: 60: TRISFbits.TRISF4 = 0;
 19195  2F21  120C               	bcf	12,4	;volatile
 19196                           
 19197                           ;user.c: 61: TRISFbits.TRISF5 = 0;
 19198  2F22  128C               	bcf	12,5	;volatile
 19199                           
 19200                           ;user.c: 62: TRISFbits.TRISF6 = 1;
 19201  2F23  170C               	bsf	12,6	;volatile
 19202                           
 19203                           ;user.c: 63: ANSELFbits.ANSF6 = 0;
 19204  2F24  0028               	movlb	8	; select bank8
 19205  2F25  130C               	bcf	12,6	;volatile
 19206                           
 19207                           ;user.c: 65: TRISGbits.TRISG1 = 0;
 19208  2F26  0026               	movlb	6	; select bank6
 19209  2F27  108D               	bcf	13,1	;volatile
 19210                           
 19211                           ;user.c: 66: TRISGbits.TRISG2 = 0;
 19212  2F28  110D               	bcf	13,2	;volatile
 19213                           
 19214                           ;user.c: 68: init_adc();
 19215  2F29  31AC  24A0  31AF   	fcall	_init_adc
 19216                           
 19217                           ;user.c: 69: init_pwm();
 19218  2F2C  31A2  225E         	fcall	_init_pwm
 19219                           
 19220                           ;user.c: 71: INTCONbits.GIE = 0b1;
 19221  2F2E  178B               	bsf	11,7	;volatile
 19222                           
 19223                           ;user.c: 72: INTCONbits.TMR0IE = 0b1;
 19224  2F2F  168B               	bsf	11,5	;volatile
 19225                           
 19226                           ;user.c: 73: INTCONbits.TMR0IF = 0b0;
 19227  2F30  110B               	bcf	11,2	;volatile
 19228  2F31  0008               	return
 19229  2F32                     __end_of_InitApp:	
 19230                           
 19231                           	psect	text69
 19232  225E                     __ptext69:	
 19233 ;; *************** function _init_pwm *****************
 19234 ;; Defined at:
 19235 ;;		line 129 in file "user.c"
 19236 ;; Parameters:    Size  Location     Type
 19237 ;;		None
 19238 ;; Auto vars:     Size  Location     Type
 19239 ;;		None
 19240 ;; Return value:  Size  Location     Type
 19241 ;;                  1    wreg      void 
 19242 ;; Registers used:
 19243 ;;		wreg, status,2, status,0, pclath, cstack
 19244 ;; Tracked objects:
 19245 ;;		On entry : 0/0
 19246 ;;		On exit  : 0/0
 19247 ;;		Unchanged: 0/0
 19248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19252 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19253 ;;Total ram usage:        0 bytes
 19254 ;; Hardware stack levels used:    1
 19255 ;; Hardware stack levels required when called:    4
 19256 ;; This function calls:
 19257 ;;		_init_timer0
 19258 ;;		_init_timer2
 19259 ;; This function is called by:
 19260 ;;		_InitApp
 19261 ;; This function uses a non-reentrant model
 19262 ;;
 19263                           
 19264                           
 19265                           ;psect for function _init_pwm
 19266  225E                     _init_pwm:	
 19267                           
 19268                           ;user.c: 130: APFCONbits.CCP2SEL = 0;
 19269                           
 19270                           ;incstack = 0
 19271                           ; Regs used in _init_pwm: [wreg+status,2+status,0+pclath+cstack]
 19272  225E  0022               	movlb	2	; select bank2
 19273  225F  101D               	bcf	29,0	;volatile
 19274                           
 19275                           ;user.c: 131: TRISCbits.TRISC2 = 0;
 19276  2260  0021               	movlb	1	; select bank1
 19277  2261  110E               	bcf	14,2	;volatile
 19278                           
 19279                           ;user.c: 132: TRISCbits.TRISC1 = 0;
 19280  2262  108E               	bcf	14,1	;volatile
 19281                           
 19282                           ;user.c: 133: TRISGbits.TRISG0 = 0;
 19283  2263  0026               	movlb	6	; select bank6
 19284  2264  100D               	bcf	13,0	;volatile
 19285                           
 19286                           ;user.c: 134: TRISGbits.TRISG3 = 0;
 19287  2265  118D               	bcf	13,3	;volatile
 19288                           
 19289                           ;user.c: 135: TRISGbits.TRISG4 = 0;
 19290  2266  120D               	bcf	13,4	;volatile
 19291                           
 19292                           ;user.c: 136: TRISEbits.TRISE6 = 0;
 19293  2267  0021               	movlb	1	; select bank1
 19294  2268  1310               	bcf	16,6	;volatile
 19295                           
 19296                           ;user.c: 137: TRISEbits.TRISE5 = 0;
 19297  2269  1290               	bcf	16,5	;volatile
 19298                           
 19299                           ;user.c: 138: TRISEbits.TRISE4 = 0;
 19300  226A  1210               	bcf	16,4	;volatile
 19301                           
 19302                           ;user.c: 139: TRISEbits.TRISE3 = 0;
 19303  226B  1190               	bcf	16,3	;volatile
 19304                           
 19305                           ;user.c: 140: TRISEbits.TRISE2 = 0;
 19306  226C  1110               	bcf	16,2	;volatile
 19307                           
 19308                           ;user.c: 141: CCP1CONbits.CCP1M = 0b1111;
 19309  226D  300F               	movlw	15
 19310  226E  0025               	movlb	5	; select bank5
 19311  226F  0493               	iorwf	19,f	;volatile
 19312                           
 19313                           ;user.c: 142: CCP2CONbits.CCP2M = 0b1111;
 19314  2270  300F               	movlw	15
 19315  2271  049A               	iorwf	26,f	;volatile
 19316                           
 19317                           ;user.c: 143: CCP3CONbits.CCP3M = 0b1111;
 19318  2272  300F               	movlw	15
 19319  2273  0026               	movlb	6	; select bank6
 19320  2274  0493               	iorwf	19,f	;volatile
 19321                           
 19322                           ;user.c: 144: CCP4CONbits.CCP4M = 0b1111;
 19323  2275  300F               	movlw	15
 19324  2276  049A               	iorwf	26,f	;volatile
 19325                           
 19326                           ;user.c: 145: CCP5CONbits.CCP5M = 0b1111;
 19327  2277  300F               	movlw	15
 19328  2278  049E               	iorwf	30,f	;volatile
 19329                           
 19330                           ;user.c: 146: CCP6CONbits.CCP6M = 0b1111;
 19331  2279  300F               	movlw	15
 19332  227A  002C               	movlb	12	; select bank12
 19333  227B  0493               	iorwf	19,f	;volatile
 19334                           
 19335                           ;user.c: 147: CCP7CONbits.CCP7M = 0b1111;
 19336  227C  300F               	movlw	15
 19337  227D  0496               	iorwf	22,f	;volatile
 19338                           
 19339                           ;user.c: 148: CCP8CONbits.CCP8M = 0b1111;
 19340  227E  300F               	movlw	15
 19341  227F  0499               	iorwf	25,f	;volatile
 19342                           
 19343                           ;user.c: 149: CCP9CONbits.CCP9M = 0b1111;
 19344  2280  300F               	movlw	15
 19345  2281  049C               	iorwf	28,f	;volatile
 19346                           
 19347                           ;user.c: 150: CCP10CONbits.CCP10M = 0b1111;
 19348  2282  300F               	movlw	15
 19349  2283  049F               	iorwf	31,f	;volatile
 19350                           
 19351                           ;user.c: 151: CCPTMRS0 = 0b00000000;
 19352  2284  0025               	movlb	5	; select bank5
 19353  2285  019D               	clrf	29	;volatile
 19354                           
 19355                           ;user.c: 152: CCPTMRS1 = 0b00000000;
 19356  2286  019E               	clrf	30	;volatile
 19357                           
 19358                           ;user.c: 153: CCPTMRS2 = 0b00000000;
 19359  2287  019F               	clrf	31	;volatile
 19360                           
 19361                           ;user.c: 154: CCPR1 = 50;
 19362  2288  3000               	movlw	0
 19363  2289  0092               	movwf	18	;volatile
 19364  228A  3032               	movlw	50
 19365  228B  0091               	movwf	17	;volatile
 19366                           
 19367                           ;user.c: 155: CCPR2 = 100;
 19368  228C  3000               	movlw	0
 19369  228D  0099               	movwf	25	;volatile
 19370  228E  3064               	movlw	100
 19371  228F  0098               	movwf	24	;volatile
 19372                           
 19373                           ;user.c: 156: CCPR3 = 150;
 19374  2290  3000               	movlw	0
 19375  2291  0026               	movlb	6	; select bank6
 19376  2292  0092               	movwf	18	;volatile
 19377  2293  3096               	movlw	150
 19378  2294  0091               	movwf	17	;volatile
 19379                           
 19380                           ;user.c: 157: CCPR4 = 200;
 19381  2295  3000               	movlw	0
 19382  2296  0099               	movwf	25	;volatile
 19383  2297  30C8               	movlw	200
 19384  2298  0098               	movwf	24	;volatile
 19385                           
 19386                           ;user.c: 158: init_timer2();
 19387  2299  31AC  248E  31A2   	fcall	_init_timer2
 19388                           
 19389                           ;user.c: 159: init_timer0();
 19390  229C  3187  27F8         	fcall	_init_timer0
 19391  229E  0008               	return
 19392  229F                     __end_of_init_pwm:	
 19393                           
 19394                           	psect	text70
 19395  2C8E                     __ptext70:	
 19396 ;; *************** function _init_timer2 *****************
 19397 ;; Defined at:
 19398 ;;		line 162 in file "user.c"
 19399 ;; Parameters:    Size  Location     Type
 19400 ;;		None
 19401 ;; Auto vars:     Size  Location     Type
 19402 ;;		None
 19403 ;; Return value:  Size  Location     Type
 19404 ;;                  1    wreg      void 
 19405 ;; Registers used:
 19406 ;;		wreg, status,2, status,0
 19407 ;; Tracked objects:
 19408 ;;		On entry : 0/0
 19409 ;;		On exit  : 0/0
 19410 ;;		Unchanged: 0/0
 19411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19415 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19416 ;;Total ram usage:        0 bytes
 19417 ;; Hardware stack levels used:    1
 19418 ;; Hardware stack levels required when called:    3
 19419 ;; This function calls:
 19420 ;;		Nothing
 19421 ;; This function is called by:
 19422 ;;		_init_pwm
 19423 ;; This function uses a non-reentrant model
 19424 ;;
 19425                           
 19426                           
 19427                           ;psect for function _init_timer2
 19428  2C8E                     _init_timer2:	
 19429                           
 19430                           ;user.c: 163: T2CONbits.T2OUTPS = 0b0000;
 19431                           
 19432                           ;incstack = 0
 19433                           ; Regs used in _init_timer2: [wreg+status,2+status,0]
 19434  2C8E  3087               	movlw	-121
 19435  2C8F  0020               	movlb	0	; select bank0
 19436  2C90  059C               	andwf	28,f	;volatile
 19437                           
 19438                           ;user.c: 164: T2CONbits.T2CKPS = 0b00;
 19439  2C91  30FC               	movlw	-4
 19440  2C92  059C               	andwf	28,f	;volatile
 19441                           
 19442                           ;user.c: 165: PR2 = 0xFF;
 19443  2C93  30FF               	movlw	255
 19444  2C94  009B               	movwf	27	;volatile
 19445                           
 19446                           ;user.c: 166: T2CONbits.TMR2ON = 1;
 19447  2C95  151C               	bsf	28,2	;volatile
 19448  2C96  0008               	return
 19449  2C97                     __end_of_init_timer2:	
 19450                           
 19451                           	psect	text71
 19452  07F8                     __ptext71:	
 19453 ;; *************** function _init_timer0 *****************
 19454 ;; Defined at:
 19455 ;;		line 169 in file "user.c"
 19456 ;; Parameters:    Size  Location     Type
 19457 ;;		None
 19458 ;; Auto vars:     Size  Location     Type
 19459 ;;		None
 19460 ;; Return value:  Size  Location     Type
 19461 ;;                  1    wreg      void 
 19462 ;; Registers used:
 19463 ;;		None
 19464 ;; Tracked objects:
 19465 ;;		On entry : 0/0
 19466 ;;		On exit  : 0/0
 19467 ;;		Unchanged: 0/0
 19468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19472 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19473 ;;Total ram usage:        0 bytes
 19474 ;; Hardware stack levels used:    1
 19475 ;; Hardware stack levels required when called:    3
 19476 ;; This function calls:
 19477 ;;		Nothing
 19478 ;; This function is called by:
 19479 ;;		_init_pwm
 19480 ;; This function uses a non-reentrant model
 19481 ;;
 19482                           
 19483                           
 19484                           ;psect for function _init_timer0
 19485  07F8                     _init_timer0:	
 19486                           
 19487                           ;user.c: 170: OPTION_REGbits.TMR0CS = 0b0;
 19488                           
 19489                           ;incstack = 0
 19490                           ; Regs used in _init_timer0: []
 19491  07F8  0021               	movlb	1	; select bank1
 19492  07F9  1295               	bcf	21,5	;volatile
 19493                           
 19494                           ;user.c: 171: OPTION_REGbits.PSA = 0b0;
 19495  07FA  1195               	bcf	21,3	;volatile
 19496                           
 19497                           ;user.c: 172: OPTION_REGbits.PS0 = 0b0;
 19498  07FB  1015               	bcf	21,0	;volatile
 19499                           
 19500                           ;user.c: 173: OPTION_REGbits.PS1 = 0b1;
 19501  07FC  1495               	bsf	21,1	;volatile
 19502                           
 19503                           ;user.c: 174: OPTION_REGbits.PS2 = 0b0;
 19504  07FD  1115               	bcf	21,2	;volatile
 19505  07FE  0008               	return
 19506  07FF                     __end_of_init_timer0:	
 19507                           
 19508                           	psect	text72
 19509  2CA0                     __ptext72:	
 19510 ;; *************** function _init_adc *****************
 19511 ;; Defined at:
 19512 ;;		line 115 in file "user.c"
 19513 ;; Parameters:    Size  Location     Type
 19514 ;;		None
 19515 ;; Auto vars:     Size  Location     Type
 19516 ;;		None
 19517 ;; Return value:  Size  Location     Type
 19518 ;;                  1    wreg      void 
 19519 ;; Registers used:
 19520 ;;		wreg, status,2, status,0
 19521 ;; Tracked objects:
 19522 ;;		On entry : 0/0
 19523 ;;		On exit  : 0/0
 19524 ;;		Unchanged: 0/0
 19525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19527 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19529 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19530 ;;Total ram usage:        0 bytes
 19531 ;; Hardware stack levels used:    1
 19532 ;; Hardware stack levels required when called:    3
 19533 ;; This function calls:
 19534 ;;		Nothing
 19535 ;; This function is called by:
 19536 ;;		_InitApp
 19537 ;; This function uses a non-reentrant model
 19538 ;;
 19539                           
 19540                           
 19541                           ;psect for function _init_adc
 19542  2CA0                     _init_adc:	
 19543                           
 19544                           ;user.c: 116: ADCON1bits.ADFM = 0b1;
 19545                           
 19546                           ;incstack = 0
 19547                           ; Regs used in _init_adc: [wreg+status,2+status,0]
 19548  2CA0  0021               	movlb	1	; select bank1
 19549  2CA1  179E               	bsf	30,7	;volatile
 19550                           
 19551                           ;user.c: 117: ADCON1bits.ADCS = 0b110;
 19552  2CA2  081E               	movf	30,w	;volatile
 19553  2CA3  398F               	andlw	-113
 19554  2CA4  3860               	iorlw	96
 19555  2CA5  009E               	movwf	30	;volatile
 19556                           
 19557                           ;user.c: 118: ADCON1bits.ADPREF = 0b00;
 19558  2CA6  30FC               	movlw	-4
 19559  2CA7  059E               	andwf	30,f	;volatile
 19560                           
 19561                           ;user.c: 119: ADCON0bits.ADON = 0b1;
 19562  2CA8  141D               	bsf	29,0	;volatile
 19563  2CA9  0008               	return
 19564  2CAA                     __end_of_init_adc:	
 19565                           
 19566                           	psect	text73
 19567  2C82                     __ptext73:	
 19568 ;; *************** function _ConfigureOscillator *****************
 19569 ;; Defined at:
 19570 ;;		line 18 in file "system.c"
 19571 ;; Parameters:    Size  Location     Type
 19572 ;;		None
 19573 ;; Auto vars:     Size  Location     Type
 19574 ;;		None
 19575 ;; Return value:  Size  Location     Type
 19576 ;;                  1    wreg      void 
 19577 ;; Registers used:
 19578 ;;		wreg, status,2, status,0
 19579 ;; Tracked objects:
 19580 ;;		On entry : 0/0
 19581 ;;		On exit  : 0/0
 19582 ;;		Unchanged: 0/0
 19583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19587 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19588 ;;Total ram usage:        0 bytes
 19589 ;; Hardware stack levels used:    1
 19590 ;; Hardware stack levels required when called:    3
 19591 ;; This function calls:
 19592 ;;		Nothing
 19593 ;; This function is called by:
 19594 ;;		_main
 19595 ;; This function uses a non-reentrant model
 19596 ;;
 19597                           
 19598                           
 19599                           ;psect for function _ConfigureOscillator
 19600  2C82                     _ConfigureOscillator:	
 19601                           
 19602                           ;system.c: 20: OSCCONbits.SCS = 0b00;
 19603                           
 19604                           ;incstack = 0
 19605                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
 19606  2C82  30FC               	movlw	-4
 19607  2C83  0021               	movlb	1	; select bank1
 19608  2C84  0599               	andwf	25,f	;volatile
 19609  2C85  0008               	return
 19610  2C86                     __end_of_ConfigureOscillator:	
 19611                           
 19612                           	psect	intentry
 19613  0004                     __pintentry:	
 19614 ;; *************** function _isr *****************
 19615 ;; Defined at:
 19616 ;;		line 28 in file "interrupts.c"
 19617 ;; Parameters:    Size  Location     Type
 19618 ;;		None
 19619 ;; Auto vars:     Size  Location     Type
 19620 ;;  subDiv          1   13[COMMON] unsigned char 
 19621 ;; Return value:  Size  Location     Type
 19622 ;;                  1    wreg      void 
 19623 ;; Registers used:
 19624 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19625 ;; Tracked objects:
 19626 ;;		On entry : 0/0
 19627 ;;		On exit  : 0/0
 19628 ;;		Unchanged: 0/0
 19629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19631 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19632 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19633 ;;      Totals:         1       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19634 ;;Total ram usage:        7 bytes
 19635 ;; Hardware stack levels used:    1
 19636 ;; Hardware stack levels required when called:    2
 19637 ;; This function calls:
 19638 ;;		_modulation
 19639 ;;		i1___awdiv
 19640 ;;		i1_getModulationSubdivision
 19641 ;;		i1_set_leds_top
 19642 ;; This function is called by:
 19643 ;;		Interrupt level 1
 19644 ;; This function uses a non-reentrant model
 19645 ;;
 19646                           
 19647  0004                     _isr:	
 19648                           
 19649                           ;incstack = 0
 19650                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19651  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 19652  0005  3180               	pagesel	$
 19653  0006  0020               	movlb	0	; select bank0
 19654  0007  087F               	movf	127,w
 19655  0008  00BF               	movwf	??_isr+5
 19656                           
 19657                           ;interrupts.c: 31: extern char isInitialized;
 19658                           ;interrupts.c: 32: extern volatile long timer;
 19659                           ;interrupts.c: 33: extern volatile long sub_timer;
 19660                           ;interrupts.c: 34: extern volatile long tap_timer;
 19661                           ;interrupts.c: 35: extern signed int adjusted_pot_value;
 19662                           ;interrupts.c: 36: extern int mod_delay_time;
 19663                           ;interrupts.c: 40: extern int top_push_state;
 19664                           ;interrupts.c: 41: extern uint8_t longBypass_start;
 19665                           ;interrupts.c: 42: extern volatile long mod_timer;
 19666                           ;interrupts.c: 43: extern volatile long delay_time;
 19667                           ;interrupts.c: 46: if (INTCONbits.TMR0IF == 1) {
 19668  0009  1D0B               	btfss	11,2	;volatile
 19669  000A  2B13               	goto	i1l139
 19670                           
 19671                           ;interrupts.c: 47: if (isInitialized == 0) {
 19672  000B  0023               	movlb	3	; select bank3
 19673  000C  0841               	movf	_isInitialized^(0+384),w
 19674  000D  1903               	btfsc	3,2
 19675  000E  2B12               	goto	i1l7078
 19676                           
 19677                           ;interrupts.c: 52: }
 19678                           ;interrupts.c: 63: if (timer == 0) {
 19679                           
 19680                           ;interrupts.c: 51: return;
 19681                           
 19682                           ;interrupts.c: 50: INTCONbits.TMR0IF = 0;
 19683  000F  0020               	movlb	0	; select bank0
 19684  0010  0859               	movf	_timer+3,w	;volatile
 19685  0011  0458               	iorwf	_timer+2,w	;volatile
 19686  0012  0457               	iorwf	_timer+1,w	;volatile
 19687  0013  0456               	iorwf	_timer,w	;volatile
 19688  0014  1D03               	skipz
 19689  0015  281B               	goto	i1l140
 19690                           
 19691                           ;interrupts.c: 64: tmpModDelay = mod_delay_time;
 19692  0016  0023               	movlb	3	; select bank3
 19693  0017  085A               	movf	(_mod_delay_time+1)^(0+384),w
 19694  0018  00BD               	movwf	(_tmpModDelay+1)^(0+384)
 19695  0019  0859               	movf	_mod_delay_time^(0+384),w
 19696  001A  00BC               	movwf	_tmpModDelay^(0+384)
 19697  001B                     i1l140:	
 19698                           
 19699                           ;interrupts.c: 65: }
 19700                           ;interrupts.c: 70: timer = timer + 1;
 19701  001B  3001               	movlw	1
 19702  001C  0020               	movlb	0	; select bank0
 19703  001D  00BA               	movwf	??_isr
 19704  001E  3000               	movlw	0
 19705  001F  00BB               	movwf	??_isr+1
 19706  0020  3000               	movlw	0
 19707  0021  00BC               	movwf	??_isr+2
 19708  0022  3000               	movlw	0
 19709  0023  00BD               	movwf	??_isr+3
 19710  0024  0856               	movf	_timer,w	;volatile
 19711  0025  07BA               	addwf	??_isr,f
 19712  0026  0857               	movf	_timer+1,w	;volatile
 19713  0027  3DBB               	addwfc	??_isr+1,f
 19714  0028  0858               	movf	_timer+2,w	;volatile
 19715  0029  3DBC               	addwfc	??_isr+2,f
 19716  002A  0859               	movf	_timer+3,w	;volatile
 19717  002B  3DBD               	addwfc	??_isr+3,f
 19718  002C  083D               	movf	??_isr+3,w
 19719  002D  00D9               	movwf	_timer+3	;volatile
 19720  002E  083C               	movf	??_isr+2,w
 19721  002F  00D8               	movwf	_timer+2	;volatile
 19722  0030  083B               	movf	??_isr+1,w
 19723  0031  00D7               	movwf	_timer+1	;volatile
 19724  0032  083A               	movf	??_isr,w
 19725  0033  00D6               	movwf	_timer	;volatile
 19726                           
 19727                           ;interrupts.c: 71: sub_timer = sub_timer + 1;
 19728  0034  3001               	movlw	1
 19729  0035  00BA               	movwf	??_isr
 19730  0036  3000               	movlw	0
 19731  0037  00BB               	movwf	??_isr+1
 19732  0038  3000               	movlw	0
 19733  0039  00BC               	movwf	??_isr+2
 19734  003A  3000               	movlw	0
 19735  003B  00BD               	movwf	??_isr+3
 19736  003C  0023               	movlb	3	; select bank3
 19737  003D  0828               	movf	_sub_timer^(0+384),w	;volatile
 19738  003E  0020               	movlb	0	; select bank0
 19739  003F  07BA               	addwf	??_isr,f
 19740  0040  0023               	movlb	3	; select bank3
 19741  0041  0829               	movf	(_sub_timer+1)^(0+384),w	;volatile
 19742  0042  0020               	movlb	0	; select bank0
 19743  0043  3DBB               	addwfc	??_isr+1,f
 19744  0044  0023               	movlb	3	; select bank3
 19745  0045  082A               	movf	(_sub_timer+2)^(0+384),w	;volatile
 19746  0046  0020               	movlb	0	; select bank0
 19747  0047  3DBC               	addwfc	??_isr+2,f
 19748  0048  0023               	movlb	3	; select bank3
 19749  0049  082B               	movf	(_sub_timer+3)^(0+384),w	;volatile
 19750  004A  0020               	movlb	0	; select bank0
 19751  004B  3DBD               	addwfc	??_isr+3,f
 19752  004C  083D               	movf	??_isr+3,w
 19753  004D  0023               	movlb	3	; select bank3
 19754  004E  00AB               	movwf	(_sub_timer+3)^(0+384)	;volatile
 19755  004F  0020               	movlb	0	; select bank0
 19756  0050  083C               	movf	??_isr+2,w
 19757  0051  0023               	movlb	3	; select bank3
 19758  0052  00AA               	movwf	(_sub_timer+2)^(0+384)	;volatile
 19759  0053  0020               	movlb	0	; select bank0
 19760  0054  083B               	movf	??_isr+1,w
 19761  0055  0023               	movlb	3	; select bank3
 19762  0056  00A9               	movwf	(_sub_timer+1)^(0+384)	;volatile
 19763  0057  0020               	movlb	0	; select bank0
 19764  0058  083A               	movf	??_isr,w
 19765  0059  0023               	movlb	3	; select bank3
 19766  005A  00A8               	movwf	_sub_timer^(0+384)	;volatile
 19767                           
 19768                           ;interrupts.c: 72: tap_timer = tap_timer + 1;
 19769  005B  3001               	movlw	1
 19770  005C  0020               	movlb	0	; select bank0
 19771  005D  00BA               	movwf	??_isr
 19772  005E  3000               	movlw	0
 19773  005F  00BB               	movwf	??_isr+1
 19774  0060  3000               	movlw	0
 19775  0061  00BC               	movwf	??_isr+2
 19776  0062  3000               	movlw	0
 19777  0063  00BD               	movwf	??_isr+3
 19778  0064  0852               	movf	_tap_timer,w	;volatile
 19779  0065  07BA               	addwf	??_isr,f
 19780  0066  0853               	movf	_tap_timer+1,w	;volatile
 19781  0067  3DBB               	addwfc	??_isr+1,f
 19782  0068  0854               	movf	_tap_timer+2,w	;volatile
 19783  0069  3DBC               	addwfc	??_isr+2,f
 19784  006A  0855               	movf	_tap_timer+3,w	;volatile
 19785  006B  3DBD               	addwfc	??_isr+3,f
 19786  006C  083D               	movf	??_isr+3,w
 19787  006D  00D5               	movwf	_tap_timer+3	;volatile
 19788  006E  083C               	movf	??_isr+2,w
 19789  006F  00D4               	movwf	_tap_timer+2	;volatile
 19790  0070  083B               	movf	??_isr+1,w
 19791  0071  00D3               	movwf	_tap_timer+1	;volatile
 19792  0072  083A               	movf	??_isr,w
 19793  0073  00D2               	movwf	_tap_timer	;volatile
 19794                           
 19795                           ;interrupts.c: 73: mod_timer = mod_timer + 1;
 19796  0074  3001               	movlw	1
 19797  0075  00BA               	movwf	??_isr
 19798  0076  3000               	movlw	0
 19799  0077  00BB               	movwf	??_isr+1
 19800  0078  3000               	movlw	0
 19801  0079  00BC               	movwf	??_isr+2
 19802  007A  3000               	movlw	0
 19803  007B  00BD               	movwf	??_isr+3
 19804  007C  0023               	movlb	3	; select bank3
 19805  007D  0824               	movf	_mod_timer^(0+384),w	;volatile
 19806  007E  0020               	movlb	0	; select bank0
 19807  007F  07BA               	addwf	??_isr,f
 19808  0080  0023               	movlb	3	; select bank3
 19809  0081  0825               	movf	(_mod_timer+1)^(0+384),w	;volatile
 19810  0082  0020               	movlb	0	; select bank0
 19811  0083  3DBB               	addwfc	??_isr+1,f
 19812  0084  0023               	movlb	3	; select bank3
 19813  0085  0826               	movf	(_mod_timer+2)^(0+384),w	;volatile
 19814  0086  0020               	movlb	0	; select bank0
 19815  0087  3DBC               	addwfc	??_isr+2,f
 19816  0088  0023               	movlb	3	; select bank3
 19817  0089  0827               	movf	(_mod_timer+3)^(0+384),w	;volatile
 19818  008A  0020               	movlb	0	; select bank0
 19819  008B  3DBD               	addwfc	??_isr+3,f
 19820  008C  083D               	movf	??_isr+3,w
 19821  008D  0023               	movlb	3	; select bank3
 19822  008E  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 19823  008F  0020               	movlb	0	; select bank0
 19824  0090  083C               	movf	??_isr+2,w
 19825  0091  0023               	movlb	3	; select bank3
 19826  0092  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 19827  0093  0020               	movlb	0	; select bank0
 19828  0094  083B               	movf	??_isr+1,w
 19829  0095  0023               	movlb	3	; select bank3
 19830  0096  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 19831  0097  0020               	movlb	0	; select bank0
 19832  0098  083A               	movf	??_isr,w
 19833  0099  0023               	movlb	3	; select bank3
 19834  009A  00A4               	movwf	_mod_timer^(0+384)	;volatile
 19835                           
 19836                           ;interrupts.c: 74: double_timer++;
 19837  009B  3001               	movlw	1
 19838  009C  07A0               	addwf	_double_timer^(0+384),f	;volatile
 19839  009D  3000               	movlw	0
 19840  009E  3DA1               	addwfc	(_double_timer+1)^(0+384),f	;volatile
 19841  009F  3000               	movlw	0
 19842  00A0  3DA2               	addwfc	(_double_timer+2)^(0+384),f	;volatile
 19843  00A1  3000               	movlw	0
 19844  00A2  3DA3               	addwfc	(_double_timer+3)^(0+384),f	;volatile
 19845                           
 19846                           ;interrupts.c: 75: test_timer++;
 19847  00A3  3001               	movlw	1
 19848  00A4  0024               	movlb	4	; select bank4
 19849  00A5  07C1               	addwf	_test_timer^(0+512),f	;volatile
 19850  00A6  3000               	movlw	0
 19851  00A7  3DC2               	addwfc	(_test_timer+1)^(0+512),f	;volatile
 19852  00A8  3000               	movlw	0
 19853  00A9  3DC3               	addwfc	(_test_timer+2)^(0+512),f	;volatile
 19854  00AA  3000               	movlw	0
 19855  00AB  3DC4               	addwfc	(_test_timer+3)^(0+512),f	;volatile
 19856                           
 19857                           ;interrupts.c: 79: if (test_timer > 30) {
 19858  00AC  1BC4               	btfsc	(_test_timer+3)^(0+512),7	;volatile
 19859  00AD  28C8               	goto	i1l6968
 19860  00AE  0844               	movf	(_test_timer+3)^(0+512),w	;volatile
 19861  00AF  1D03               	btfss	3,2
 19862  00B0  28BB               	goto	i1l6964
 19863  00B1  0843               	movf	(_test_timer+2)^(0+512),w	;volatile
 19864  00B2  1D03               	btfss	3,2
 19865  00B3  28BB               	goto	i1l6964
 19866  00B4  0842               	movf	(_test_timer+1)^(0+512),w	;volatile
 19867  00B5  1D03               	btfss	3,2
 19868  00B6  28BB               	goto	i1l6964
 19869  00B7  301F               	movlw	31
 19870  00B8  0241               	subwf	_test_timer^(0+512),w	;volatile
 19871  00B9  1C03               	btfss	3,0
 19872  00BA  28C8               	goto	i1l6968
 19873  00BB                     i1l6964:	
 19874                           
 19875                           ;interrupts.c: 80: LATDbits.LATD4 = 0;
 19876  00BB  0022               	movlb	2	; select bank2
 19877  00BC  120F               	bcf	15,4	;volatile
 19878                           
 19879                           ;interrupts.c: 81: LATDbits.LATD3 = 0;
 19880  00BD  118F               	bcf	15,3	;volatile
 19881                           
 19882                           ;interrupts.c: 82: LATDbits.LATD2 = 0;
 19883  00BE  110F               	bcf	15,2	;volatile
 19884                           
 19885                           ;interrupts.c: 83: test_timer = 1;
 19886  00BF  3000               	movlw	0
 19887  00C0  0024               	movlb	4	; select bank4
 19888  00C1  00C4               	movwf	(_test_timer+3)^(0+512)	;volatile
 19889  00C2  3000               	movlw	0
 19890  00C3  00C3               	movwf	(_test_timer+2)^(0+512)	;volatile
 19891  00C4  3000               	movlw	0
 19892  00C5  00C2               	movwf	(_test_timer+1)^(0+512)	;volatile
 19893  00C6  3001               	movlw	1
 19894  00C7  00C1               	movwf	_test_timer^(0+512)	;volatile
 19895  00C8                     i1l6968:	
 19896                           
 19897                           ;interrupts.c: 84: }
 19898                           ;interrupts.c: 86: char subDiv = getModulationSubdivision();
 19899  00C8  31AE  2679  3180   	fcall	i1_getModulationSubdivision
 19900  00CB  0870               	movf	?i1_getModulationSubdivision,w
 19901  00CC  0020               	movlb	0	; select bank0
 19902  00CD  00BA               	movwf	??_isr
 19903  00CE  083A               	movf	??_isr,w
 19904  00CF  00FD               	movwf	isr@subDiv
 19905                           
 19906                           ;interrupts.c: 91: if ((mod_timer >= tmpModDelay) && (mod_counter == subDiv) && (tmpModD
      +                          elay == mod_delay_time)) {
 19907  00D0  0023               	movlb	3	; select bank3
 19908  00D1  083C               	movf	_tmpModDelay^(0+384),w
 19909  00D2  0020               	movlb	0	; select bank0
 19910  00D3  00BA               	movwf	??_isr
 19911  00D4  0023               	movlb	3	; select bank3
 19912  00D5  083D               	movf	(_tmpModDelay+1)^(0+384),w
 19913  00D6  0020               	movlb	0	; select bank0
 19914  00D7  00BB               	movwf	??_isr+1
 19915  00D8  3000               	movlw	0
 19916  00D9  1BBB               	btfsc	??_isr+1,7
 19917  00DA  30FF               	movlw	255
 19918  00DB  00BC               	movwf	??_isr+2
 19919  00DC  00BD               	movwf	??_isr+3
 19920  00DD  0023               	movlb	3	; select bank3
 19921  00DE  0827               	movf	(_mod_timer+3)^(0+384),w	;volatile
 19922  00DF  3A80               	xorlw	128
 19923  00E0  0020               	movlb	0	; select bank0
 19924  00E1  00BE               	movwf	??_isr+4
 19925  00E2  083D               	movf	??_isr+3,w
 19926  00E3  3A80               	xorlw	128
 19927  00E4  023E               	subwf	??_isr+4,w
 19928  00E5  0023               	movlb	3	; select bank3
 19929  00E6  1D03               	skipz
 19930  00E7  28F8               	goto	u684_23
 19931  00E8  0020               	movlb	0	; select bank0
 19932  00E9  083C               	movf	??_isr+2,w
 19933  00EA  0023               	movlb	3	; select bank3
 19934  00EB  0226               	subwf	(_mod_timer+2)^(0+384),w	;volatile
 19935  00EC  1D03               	skipz
 19936  00ED  28F8               	goto	u684_23
 19937  00EE  0020               	movlb	0	; select bank0
 19938  00EF  083B               	movf	??_isr+1,w
 19939  00F0  0023               	movlb	3	; select bank3
 19940  00F1  0225               	subwf	(_mod_timer+1)^(0+384),w	;volatile
 19941  00F2  1D03               	skipz
 19942  00F3  28F8               	goto	u684_23
 19943  00F4  0020               	movlb	0	; select bank0
 19944  00F5  083A               	movf	??_isr,w
 19945  00F6  0023               	movlb	3	; select bank3
 19946  00F7  0224               	subwf	_mod_timer^(0+384),w	;volatile
 19947  00F8                     u684_23:	
 19948  00F8  1C03               	skipc
 19949  00F9  2926               	goto	i1l142
 19950  00FA  087D               	movf	isr@subDiv,w
 19951  00FB  0020               	movlb	0	; select bank0
 19952  00FC  00BA               	movwf	??_isr
 19953  00FD  01BB               	clrf	??_isr+1
 19954  00FE  0023               	movlb	3	; select bank3
 19955  00FF  0858               	movf	(_mod_counter+1)^(0+384),w
 19956  0100  0020               	movlb	0	; select bank0
 19957  0101  063B               	xorwf	??_isr+1,w
 19958  0102  1D03               	skipz
 19959  0103  2908               	goto	u685_25
 19960  0104  0023               	movlb	3	; select bank3
 19961  0105  0857               	movf	_mod_counter^(0+384),w
 19962  0106  0020               	movlb	0	; select bank0
 19963  0107  063A               	xorwf	??_isr,w
 19964  0108                     u685_25:	
 19965  0108  1D03               	skipz
 19966  0109  2926               	goto	i1l142
 19967  010A  0023               	movlb	3	; select bank3
 19968  010B  085A               	movf	(_mod_delay_time+1)^(0+384),w
 19969  010C  063D               	xorwf	(_tmpModDelay+1)^(0+384),w
 19970  010D  1D03               	skipz
 19971  010E  2911               	goto	u686_25
 19972  010F  0859               	movf	_mod_delay_time^(0+384),w
 19973  0110  063C               	xorwf	_tmpModDelay^(0+384),w
 19974  0111                     u686_25:	
 19975  0111  1D03               	skipz
 19976  0112  2926               	goto	i1l142
 19977                           
 19978                           ;interrupts.c: 92: tmpModDelay = (delay_time - sub_timer);
 19979  0113  0928               	comf	_sub_timer^(0+384),w	;volatile
 19980  0114  0020               	movlb	0	; select bank0
 19981  0115  00BA               	movwf	??_isr
 19982  0116  0023               	movlb	3	; select bank3
 19983  0117  0929               	comf	(_sub_timer+1)^(0+384),w	;volatile
 19984  0118  0020               	movlb	0	; select bank0
 19985  0119  00BB               	movwf	??_isr+1
 19986  011A  0ABA               	incf	??_isr,f
 19987  011B  1903               	skipnz
 19988  011C  0ABB               	incf	??_isr+1,f
 19989  011D  0844               	movf	_delay_time,w	;volatile
 19990  011E  073A               	addwf	??_isr,w
 19991  011F  0023               	movlb	3	; select bank3
 19992  0120  00BC               	movwf	_tmpModDelay^(0+384)
 19993  0121  0020               	movlb	0	; select bank0
 19994  0122  0845               	movf	_delay_time+1,w	;volatile
 19995  0123  3D3B               	addwfc	??_isr+1,w
 19996  0124  0023               	movlb	3	; select bank3
 19997  0125  00BD               	movwf	(_tmpModDelay+1)^(0+384)
 19998  0126                     i1l142:	
 19999                           
 20000                           ;interrupts.c: 93: }
 20001                           ;interrupts.c: 95: if (longBypass_start == 1) {
 20002  0126  0023               	movlb	3	; select bank3
 20003  0127  0344               	decf	_longBypass_start^(0+384),w
 20004  0128  1D03               	btfss	3,2
 20005  0129  2940               	goto	i1l6982
 20006                           
 20007                           ;interrupts.c: 96: longBypass_timer++;
 20008  012A  3001               	movlw	1
 20009  012B  07B6               	addwf	_longBypass_timer^(0+384),f	;volatile
 20010  012C  3000               	movlw	0
 20011  012D  3DB7               	addwfc	(_longBypass_timer+1)^(0+384),f	;volatile
 20012                           
 20013                           ;interrupts.c: 97: if (longBypass_timer > long_press_limit) {longBypass_timer = long_pre
      +                          ss_limit;}
 20014  012E  0837               	movf	(_longBypass_timer+1)^(0+384),w	;volatile
 20015  012F  0020               	movlb	0	; select bank0
 20016  0130  024B               	subwf	_long_press_limit+1,w
 20017  0131  1D03               	skipz
 20018  0132  2937               	goto	u688_25
 20019  0133  0023               	movlb	3	; select bank3
 20020  0134  0836               	movf	_longBypass_timer^(0+384),w	;volatile
 20021  0135  0020               	movlb	0	; select bank0
 20022  0136  024A               	subwf	_long_press_limit,w
 20023  0137                     u688_25:	
 20024  0137  1803               	skipnc
 20025  0138  2940               	goto	i1l6982
 20026  0139  084B               	movf	_long_press_limit+1,w
 20027  013A  0023               	movlb	3	; select bank3
 20028  013B  00B7               	movwf	(_longBypass_timer+1)^(0+384)	;volatile
 20029  013C  0020               	movlb	0	; select bank0
 20030  013D  084A               	movf	_long_press_limit,w
 20031  013E  0023               	movlb	3	; select bank3
 20032  013F  00B6               	movwf	_longBypass_timer^(0+384)	;volatile
 20033  0140                     i1l6982:	
 20034                           
 20035                           ;interrupts.c: 98: }
 20036                           ;interrupts.c: 99: if (longTap_start == 1) {
 20037  0140  0023               	movlb	3	; select bank3
 20038  0141  0345               	decf	_longTap_start^(0+384),w
 20039  0142  1D03               	btfss	3,2
 20040  0143  295A               	goto	i1l6988
 20041                           
 20042                           ;interrupts.c: 100: longTap_timer++;
 20043  0144  3001               	movlw	1
 20044  0145  07B8               	addwf	_longTap_timer^(0+384),f	;volatile
 20045  0146  3000               	movlw	0
 20046  0147  3DB9               	addwfc	(_longTap_timer+1)^(0+384),f	;volatile
 20047                           
 20048                           ;interrupts.c: 101: if (longTap_timer > long_press_limit) {
 20049  0148  0839               	movf	(_longTap_timer+1)^(0+384),w	;volatile
 20050  0149  0020               	movlb	0	; select bank0
 20051  014A  024B               	subwf	_long_press_limit+1,w
 20052  014B  1D03               	skipz
 20053  014C  2951               	goto	u690_25
 20054  014D  0023               	movlb	3	; select bank3
 20055  014E  0838               	movf	_longTap_timer^(0+384),w	;volatile
 20056  014F  0020               	movlb	0	; select bank0
 20057  0150  024A               	subwf	_long_press_limit,w
 20058  0151                     u690_25:	
 20059  0151  1803               	skipnc
 20060  0152  295A               	goto	i1l6988
 20061                           
 20062                           ;interrupts.c: 102: longTap_timer = long_press_limit;
 20063  0153  084B               	movf	_long_press_limit+1,w
 20064  0154  0023               	movlb	3	; select bank3
 20065  0155  00B9               	movwf	(_longTap_timer+1)^(0+384)	;volatile
 20066  0156  0020               	movlb	0	; select bank0
 20067  0157  084A               	movf	_long_press_limit,w
 20068  0158  0023               	movlb	3	; select bank3
 20069  0159  00B8               	movwf	_longTap_timer^(0+384)	;volatile
 20070  015A                     i1l6988:	
 20071                           
 20072                           ;interrupts.c: 103: }
 20073                           ;interrupts.c: 104: }
 20074                           ;interrupts.c: 106: if (longTap_state < 1 && doubleTap_state < 1 && presetSaveMode < 1) 
      +                          {
 20075  015A  0020               	movlb	0	; select bank0
 20076  015B  084F               	movf	_longTap_state,w	;volatile
 20077  015C  1D03               	btfss	3,2
 20078  015D  29B8               	goto	i1l7014
 20079  015E  085C               	movf	_doubleTap_state,w	;volatile
 20080  015F  1D03               	btfss	3,2
 20081  0160  29B8               	goto	i1l7014
 20082  0161  085F               	movf	_presetSaveMode,w
 20083  0162  1D03               	btfss	3,2
 20084  0163  29B8               	goto	i1l7014
 20085                           
 20086                           ;interrupts.c: 108: if (timer >= baseline_mod_time) {
 20087  0164  0859               	movf	_timer+3,w	;volatile
 20088  0165  3A80               	xorlw	128
 20089  0166  00BA               	movwf	??_isr
 20090  0167  0843               	movf	_baseline_mod_time+3,w	;volatile
 20091  0168  3A80               	xorlw	128
 20092  0169  023A               	subwf	??_isr,w
 20093  016A  1D03               	skipz
 20094  016B  2976               	goto	u694_23
 20095  016C  0842               	movf	_baseline_mod_time+2,w	;volatile
 20096  016D  0258               	subwf	_timer+2,w	;volatile
 20097  016E  1D03               	skipz
 20098  016F  2976               	goto	u694_23
 20099  0170  0841               	movf	_baseline_mod_time+1,w	;volatile
 20100  0171  0257               	subwf	_timer+1,w	;volatile
 20101  0172  1D03               	skipz
 20102  0173  2976               	goto	u694_23
 20103  0174  0840               	movf	_baseline_mod_time,w	;volatile
 20104  0175  0256               	subwf	_timer,w	;volatile
 20105  0176                     u694_23:	
 20106  0176  1C03               	skipc
 20107  0177  29A6               	goto	i1l7010
 20108                           
 20109                           ;interrupts.c: 111: LATBbits.LATB4 = 1;
 20110  0178  0022               	movlb	2	; select bank2
 20111  0179  160D               	bsf	13,4	;volatile
 20112                           
 20113                           ;interrupts.c: 113: timer = 0;
 20114  017A  3000               	movlw	0
 20115  017B  0020               	movlb	0	; select bank0
 20116  017C  00D9               	movwf	_timer+3	;volatile
 20117  017D  3000               	movlw	0
 20118  017E  00D8               	movwf	_timer+2	;volatile
 20119  017F  3000               	movlw	0
 20120  0180  00D7               	movwf	_timer+1	;volatile
 20121  0181  3000               	movlw	0
 20122  0182  00D6               	movwf	_timer	;volatile
 20123                           
 20124                           ;interrupts.c: 115: if (modulation_changed == 1) {
 20125  0183  0023               	movlb	3	; select bank3
 20126  0184  0347               	decf	_modulation_changed^(0+384),w
 20127  0185  1D03               	btfss	3,2
 20128  0186  29A6               	goto	i1l7010
 20129                           
 20130                           ;interrupts.c: 118: modulation_changed = 0;
 20131  0187  01C7               	clrf	_modulation_changed^(0+384)
 20132                           
 20133                           ;interrupts.c: 119: mod_time_changed = 0;
 20134  0188  01E4               	clrf	_mod_time_changed^(0+384)
 20135                           
 20136                           ;interrupts.c: 120: sub_timer = delay_time;
 20137  0189  0020               	movlb	0	; select bank0
 20138  018A  0847               	movf	_delay_time+3,w	;volatile
 20139  018B  0023               	movlb	3	; select bank3
 20140  018C  00AB               	movwf	(_sub_timer+3)^(0+384)	;volatile
 20141  018D  0020               	movlb	0	; select bank0
 20142  018E  0846               	movf	_delay_time+2,w	;volatile
 20143  018F  0023               	movlb	3	; select bank3
 20144  0190  00AA               	movwf	(_sub_timer+2)^(0+384)	;volatile
 20145  0191  0020               	movlb	0	; select bank0
 20146  0192  0845               	movf	_delay_time+1,w	;volatile
 20147  0193  0023               	movlb	3	; select bank3
 20148  0194  00A9               	movwf	(_sub_timer+1)^(0+384)	;volatile
 20149  0195  0020               	movlb	0	; select bank0
 20150  0196  0844               	movf	_delay_time,w	;volatile
 20151  0197  0023               	movlb	3	; select bank3
 20152  0198  00A8               	movwf	_sub_timer^(0+384)	;volatile
 20153                           
 20154                           ;interrupts.c: 121: tmpModDelay = mod_delay_time;
 20155  0199  085A               	movf	(_mod_delay_time+1)^(0+384),w
 20156  019A  00BD               	movwf	(_tmpModDelay+1)^(0+384)
 20157  019B  0859               	movf	_mod_delay_time^(0+384),w
 20158  019C  00BC               	movwf	_tmpModDelay^(0+384)
 20159                           
 20160                           ;interrupts.c: 122: mod_timer = tmpModDelay;
 20161  019D  083C               	movf	_tmpModDelay^(0+384),w
 20162  019E  00A4               	movwf	_mod_timer^(0+384)	;volatile
 20163  019F  083D               	movf	(_tmpModDelay+1)^(0+384),w
 20164  01A0  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 20165  01A1  0D89               	rlf	9,f
 20166  01A2  3B89               	subwfb	9,f
 20167  01A3  0989               	comf	9,f
 20168  01A4  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 20169  01A5  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 20170  01A6                     i1l7010:	
 20171                           
 20172                           ;interrupts.c: 130: }
 20173                           ;interrupts.c: 131: }
 20174                           ;interrupts.c: 133: if (timer >= 30) {
 20175  01A6  0020               	movlb	0	; select bank0
 20176  01A7  1BD9               	btfsc	_timer+3,7	;volatile
 20177  01A8  29B8               	goto	i1l7014
 20178  01A9  0859               	movf	_timer+3,w	;volatile
 20179  01AA  1D03               	btfss	3,2
 20180  01AB  29B6               	goto	i1l7012
 20181  01AC  0858               	movf	_timer+2,w	;volatile
 20182  01AD  1D03               	btfss	3,2
 20183  01AE  29B6               	goto	i1l7012
 20184  01AF  0857               	movf	_timer+1,w	;volatile
 20185  01B0  1D03               	btfss	3,2
 20186  01B1  29B6               	goto	i1l7012
 20187  01B2  301E               	movlw	30
 20188  01B3  0256               	subwf	_timer,w	;volatile
 20189  01B4  1C03               	btfss	3,0
 20190  01B5  29B8               	goto	i1l7014
 20191  01B6                     i1l7012:	
 20192                           
 20193                           ;interrupts.c: 135: LATBbits.LATB4 = 0;
 20194  01B6  0022               	movlb	2	; select bank2
 20195  01B7  120D               	bcf	13,4	;volatile
 20196  01B8                     i1l7014:	
 20197                           
 20198                           ;interrupts.c: 137: }
 20199                           ;interrupts.c: 138: }
 20200                           ;interrupts.c: 147: if (presetSaveMode < 1 && mode2_state == 0) {
 20201  01B8  0020               	movlb	0	; select bank0
 20202  01B9  085F               	movf	_presetSaveMode,w
 20203  01BA  1D03               	btfss	3,2
 20204  01BB  2A13               	goto	i1l7032
 20205  01BC  085E               	movf	_mode2_state,w
 20206  01BD  1D03               	btfss	3,2
 20207  01BE  2A13               	goto	i1l7032
 20208                           
 20209                           ;interrupts.c: 148: if (sub_timer >= delay_time ) {
 20210  01BF  0023               	movlb	3	; select bank3
 20211  01C0  082B               	movf	(_sub_timer+3)^(0+384),w	;volatile
 20212  01C1  3A80               	xorlw	128
 20213  01C2  0020               	movlb	0	; select bank0
 20214  01C3  00BA               	movwf	??_isr
 20215  01C4  0847               	movf	_delay_time+3,w	;volatile
 20216  01C5  3A80               	xorlw	128
 20217  01C6  023A               	subwf	??_isr,w
 20218  01C7  0023               	movlb	3	; select bank3
 20219  01C8  1D03               	skipz
 20220  01C9  29DA               	goto	u699_23
 20221  01CA  0020               	movlb	0	; select bank0
 20222  01CB  0846               	movf	_delay_time+2,w	;volatile
 20223  01CC  0023               	movlb	3	; select bank3
 20224  01CD  022A               	subwf	(_sub_timer+2)^(0+384),w	;volatile
 20225  01CE  1D03               	skipz
 20226  01CF  29DA               	goto	u699_23
 20227  01D0  0020               	movlb	0	; select bank0
 20228  01D1  0845               	movf	_delay_time+1,w	;volatile
 20229  01D2  0023               	movlb	3	; select bank3
 20230  01D3  0229               	subwf	(_sub_timer+1)^(0+384),w	;volatile
 20231  01D4  1D03               	skipz
 20232  01D5  29DA               	goto	u699_23
 20233  01D6  0020               	movlb	0	; select bank0
 20234  01D7  0844               	movf	_delay_time,w	;volatile
 20235  01D8  0023               	movlb	3	; select bank3
 20236  01D9  0228               	subwf	_sub_timer^(0+384),w	;volatile
 20237  01DA                     u699_23:	
 20238  01DA  1C03               	skipc
 20239  01DB  29F5               	goto	i1l7026
 20240                           
 20241                           ;interrupts.c: 149: if (suspend_blink == 0) {
 20242  01DC  0022               	movlb	2	; select bank2
 20243  01DD  086A               	movf	_suspend_blink^(0+256),w	;volatile
 20244  01DE  1D03               	btfss	3,2
 20245  01DF  29EC               	goto	i1l7024
 20246                           
 20247                           ;interrupts.c: 150: set_leds_top(top_push_state, 1);
 20248  01E0  0020               	movlb	0	; select bank0
 20249  01E1  084D               	movf	_top_push_state+1,w
 20250  01E2  00F1               	movwf	i1set_leds_top@x+1
 20251  01E3  084C               	movf	_top_push_state,w
 20252  01E4  00F0               	movwf	i1set_leds_top@x
 20253  01E5  3001               	movlw	1
 20254  01E6  00F2               	movwf	i1set_leds_top@ledState
 20255  01E7  3000               	movlw	0
 20256  01E8  00F3               	movwf	i1set_leds_top@ledState+1
 20257  01E9  31A2  22E3  3180   	fcall	i1_set_leds_top
 20258  01EC                     i1l7024:	
 20259                           
 20260                           ;interrupts.c: 151: }
 20261                           ;interrupts.c: 153: sub_timer = 0;
 20262  01EC  3000               	movlw	0
 20263  01ED  0023               	movlb	3	; select bank3
 20264  01EE  00AB               	movwf	(_sub_timer+3)^(0+384)	;volatile
 20265  01EF  3000               	movlw	0
 20266  01F0  00AA               	movwf	(_sub_timer+2)^(0+384)	;volatile
 20267  01F1  3000               	movlw	0
 20268  01F2  00A9               	movwf	(_sub_timer+1)^(0+384)	;volatile
 20269  01F3  3000               	movlw	0
 20270  01F4  00A8               	movwf	_sub_timer^(0+384)	;volatile
 20271  01F5                     i1l7026:	
 20272                           
 20273                           ;interrupts.c: 154: }
 20274                           ;interrupts.c: 156: if (sub_timer >= 20) {
 20275  01F5  1BAB               	btfsc	(_sub_timer+3)^(0+384),7	;volatile
 20276  01F6  2A13               	goto	i1l7032
 20277  01F7  082B               	movf	(_sub_timer+3)^(0+384),w	;volatile
 20278  01F8  1D03               	btfss	3,2
 20279  01F9  2A04               	goto	i1l7028
 20280  01FA  082A               	movf	(_sub_timer+2)^(0+384),w	;volatile
 20281  01FB  1D03               	btfss	3,2
 20282  01FC  2A04               	goto	i1l7028
 20283  01FD  0829               	movf	(_sub_timer+1)^(0+384),w	;volatile
 20284  01FE  1D03               	btfss	3,2
 20285  01FF  2A04               	goto	i1l7028
 20286  0200  3014               	movlw	20
 20287  0201  0228               	subwf	_sub_timer^(0+384),w	;volatile
 20288  0202  1C03               	btfss	3,0
 20289  0203  2A13               	goto	i1l7032
 20290  0204                     i1l7028:	
 20291                           
 20292                           ;interrupts.c: 157: if (suspend_blink == 0) {
 20293  0204  0022               	movlb	2	; select bank2
 20294  0205  086A               	movf	_suspend_blink^(0+256),w	;volatile
 20295  0206  1D03               	btfss	3,2
 20296  0207  2A13               	goto	i1l7032
 20297                           
 20298                           ;interrupts.c: 158: set_leds_top(top_push_state, 0);
 20299  0208  0020               	movlb	0	; select bank0
 20300  0209  084D               	movf	_top_push_state+1,w
 20301  020A  00F1               	movwf	i1set_leds_top@x+1
 20302  020B  084C               	movf	_top_push_state,w
 20303  020C  00F0               	movwf	i1set_leds_top@x
 20304  020D  3000               	movlw	0
 20305  020E  00F2               	movwf	i1set_leds_top@ledState
 20306  020F  00F3               	movwf	i1set_leds_top@ledState+1
 20307  0210  31A2  22E3  3180   	fcall	i1_set_leds_top
 20308  0213                     i1l7032:	
 20309                           
 20310                           ;interrupts.c: 159: }
 20311                           ;interrupts.c: 160: }
 20312                           ;interrupts.c: 161: }
 20313                           ;interrupts.c: 166: if (presetSaveMode == 1) {
 20314  0213  0020               	movlb	0	; select bank0
 20315  0214  035F               	decf	_presetSaveMode,w
 20316  0215  1D03               	btfss	3,2
 20317  0216  2A43               	goto	i1l7044
 20318                           
 20319                           ;interrupts.c: 167: if (double_timer >= 250) {
 20320  0217  0023               	movlb	3	; select bank3
 20321  0218  1BA3               	btfsc	(_double_timer+3)^(0+384),7	;volatile
 20322  0219  2A32               	goto	i1l7040
 20323  021A  0823               	movf	(_double_timer+3)^(0+384),w	;volatile
 20324  021B  1D03               	btfss	3,2
 20325  021C  2A27               	goto	i1l7036
 20326  021D  0822               	movf	(_double_timer+2)^(0+384),w	;volatile
 20327  021E  1D03               	btfss	3,2
 20328  021F  2A27               	goto	i1l7036
 20329  0220  0821               	movf	(_double_timer+1)^(0+384),w	;volatile
 20330  0221  1D03               	btfss	3,2
 20331  0222  2A27               	goto	i1l7036
 20332  0223  30FA               	movlw	250
 20333  0224  0220               	subwf	_double_timer^(0+384),w	;volatile
 20334  0225  1C03               	btfss	3,0
 20335  0226  2A32               	goto	i1l7040
 20336  0227                     i1l7036:	
 20337                           
 20338                           ;interrupts.c: 168: LATBbits.LATB0 = 1;
 20339  0227  0022               	movlb	2	; select bank2
 20340  0228  140D               	bsf	13,0	;volatile
 20341                           
 20342                           ;interrupts.c: 169: double_timer = 0;
 20343  0229  3000               	movlw	0
 20344  022A  0023               	movlb	3	; select bank3
 20345  022B  00A3               	movwf	(_double_timer+3)^(0+384)	;volatile
 20346  022C  3000               	movlw	0
 20347  022D  00A2               	movwf	(_double_timer+2)^(0+384)	;volatile
 20348  022E  3000               	movlw	0
 20349  022F  00A1               	movwf	(_double_timer+1)^(0+384)	;volatile
 20350  0230  3000               	movlw	0
 20351  0231  00A0               	movwf	_double_timer^(0+384)	;volatile
 20352  0232                     i1l7040:	
 20353                           
 20354                           ;interrupts.c: 170: }
 20355                           ;interrupts.c: 171: if (double_timer >= 30) {
 20356  0232  1BA3               	btfsc	(_double_timer+3)^(0+384),7	;volatile
 20357  0233  2A43               	goto	i1l7044
 20358  0234  0823               	movf	(_double_timer+3)^(0+384),w	;volatile
 20359  0235  1D03               	btfss	3,2
 20360  0236  2A41               	goto	i1l7042
 20361  0237  0822               	movf	(_double_timer+2)^(0+384),w	;volatile
 20362  0238  1D03               	btfss	3,2
 20363  0239  2A41               	goto	i1l7042
 20364  023A  0821               	movf	(_double_timer+1)^(0+384),w	;volatile
 20365  023B  1D03               	btfss	3,2
 20366  023C  2A41               	goto	i1l7042
 20367  023D  301E               	movlw	30
 20368  023E  0220               	subwf	_double_timer^(0+384),w	;volatile
 20369  023F  1C03               	btfss	3,0
 20370  0240  2A43               	goto	i1l7044
 20371  0241                     i1l7042:	
 20372                           
 20373                           ;interrupts.c: 172: LATBbits.LATB0 = 0;
 20374  0241  0022               	movlb	2	; select bank2
 20375  0242  100D               	bcf	13,0	;volatile
 20376  0243                     i1l7044:	
 20377                           
 20378                           ;interrupts.c: 173: }
 20379                           ;interrupts.c: 174: }
 20380                           ;interrupts.c: 193: if (mod_timer >= tmpModDelay) {
 20381  0243  0023               	movlb	3	; select bank3
 20382  0244  083C               	movf	_tmpModDelay^(0+384),w
 20383  0245  0020               	movlb	0	; select bank0
 20384  0246  00BA               	movwf	??_isr
 20385  0247  0023               	movlb	3	; select bank3
 20386  0248  083D               	movf	(_tmpModDelay+1)^(0+384),w
 20387  0249  0020               	movlb	0	; select bank0
 20388  024A  00BB               	movwf	??_isr+1
 20389  024B  3000               	movlw	0
 20390  024C  1BBB               	btfsc	??_isr+1,7
 20391  024D  30FF               	movlw	255
 20392  024E  00BC               	movwf	??_isr+2
 20393  024F  00BD               	movwf	??_isr+3
 20394  0250  0023               	movlb	3	; select bank3
 20395  0251  0827               	movf	(_mod_timer+3)^(0+384),w	;volatile
 20396  0252  3A80               	xorlw	128
 20397  0253  0020               	movlb	0	; select bank0
 20398  0254  00BE               	movwf	??_isr+4
 20399  0255  083D               	movf	??_isr+3,w
 20400  0256  3A80               	xorlw	128
 20401  0257  023E               	subwf	??_isr+4,w
 20402  0258  0023               	movlb	3	; select bank3
 20403  0259  1D03               	skipz
 20404  025A  2A6B               	goto	u706_23
 20405  025B  0020               	movlb	0	; select bank0
 20406  025C  083C               	movf	??_isr+2,w
 20407  025D  0023               	movlb	3	; select bank3
 20408  025E  0226               	subwf	(_mod_timer+2)^(0+384),w	;volatile
 20409  025F  1D03               	skipz
 20410  0260  2A6B               	goto	u706_23
 20411  0261  0020               	movlb	0	; select bank0
 20412  0262  083B               	movf	??_isr+1,w
 20413  0263  0023               	movlb	3	; select bank3
 20414  0264  0225               	subwf	(_mod_timer+1)^(0+384),w	;volatile
 20415  0265  1D03               	skipz
 20416  0266  2A6B               	goto	u706_23
 20417  0267  0020               	movlb	0	; select bank0
 20418  0268  083A               	movf	??_isr,w
 20419  0269  0023               	movlb	3	; select bank3
 20420  026A  0224               	subwf	_mod_timer^(0+384),w	;volatile
 20421  026B                     u706_23:	
 20422  026B  1C03               	skipc
 20423  026C  2ADB               	goto	i1l7060
 20424                           
 20425                           ;interrupts.c: 194: mod_timer = 0;
 20426  026D  3000               	movlw	0
 20427  026E  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 20428  026F  3000               	movlw	0
 20429  0270  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 20430  0271  3000               	movlw	0
 20431  0272  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 20432  0273  3000               	movlw	0
 20433  0274  00A4               	movwf	_mod_timer^(0+384)	;volatile
 20434                           
 20435                           ;interrupts.c: 196: if (mod_counter >= subDiv) {
 20436  0275  0858               	movf	(_mod_counter+1)^(0+384),w
 20437  0276  3A80               	xorlw	128
 20438  0277  0020               	movlb	0	; select bank0
 20439  0278  00BA               	movwf	??_isr
 20440  0279  3080               	movlw	128
 20441  027A  023A               	subwf	??_isr,w
 20442  027B  1D03               	skipz
 20443  027C  2A80               	goto	u707_25
 20444  027D  087D               	movf	isr@subDiv,w
 20445  027E  0023               	movlb	3	; select bank3
 20446  027F  0257               	subwf	_mod_counter^(0+384),w
 20447  0280                     u707_25:	
 20448  0280  1C03               	skipc
 20449  0281  2A89               	goto	i1l7052
 20450                           
 20451                           ;interrupts.c: 197: mod_counter = 0;
 20452  0282  0023               	movlb	3	; select bank3
 20453  0283  01D7               	clrf	_mod_counter^(0+384)
 20454  0284  01D8               	clrf	(_mod_counter+1)^(0+384)
 20455                           
 20456                           ;interrupts.c: 198: tmpModDelay = mod_delay_time;
 20457  0285  085A               	movf	(_mod_delay_time+1)^(0+384),w
 20458  0286  00BD               	movwf	(_tmpModDelay+1)^(0+384)
 20459  0287  0859               	movf	_mod_delay_time^(0+384),w
 20460  0288  00BC               	movwf	_tmpModDelay^(0+384)
 20461  0289                     i1l7052:	
 20462                           
 20463                           ;interrupts.c: 202: }
 20464                           ;interrupts.c: 206: mod_value = modArray[mod_counter];
 20465  0289  0023               	movlb	3	; select bank3
 20466  028A  0858               	movf	(_mod_counter+1)^(0+384),w
 20467  028B  0020               	movlb	0	; select bank0
 20468  028C  00BB               	movwf	??_isr+1
 20469  028D  0023               	movlb	3	; select bank3
 20470  028E  0857               	movf	_mod_counter^(0+384),w
 20471  028F  0020               	movlb	0	; select bank0
 20472  0290  00BA               	movwf	??_isr
 20473  0291  35BA               	lslf	??_isr,f
 20474  0292  0DBB               	rlf	??_isr+1,f
 20475  0293  308A               	movlw	138
 20476  0294  00BC               	movwf	??_isr+2
 20477  0295  3023               	movlw	35
 20478  0296  00BD               	movwf	??_isr+3
 20479  0297  083A               	movf	??_isr,w
 20480  0298  073C               	addwf	??_isr+2,w
 20481  0299  0086               	movwf	6
 20482  029A  083B               	movf	??_isr+1,w
 20483  029B  3D3D               	addwfc	??_isr+3,w
 20484  029C  0087               	movwf	7
 20485  029D  3F40               	moviw [0]fsr1
 20486  029E  0024               	movlb	4	; select bank4
 20487  029F  00D3               	movwf	_mod_value^(0+512)
 20488  02A0  3F41               	moviw [1]fsr1
 20489  02A1  00D4               	movwf	(_mod_value+1)^(0+512)
 20490                           
 20491                           ;interrupts.c: 213: mod_value = modulation(mod_value, adjusted_pot_value);
 20492  02A2  0853               	movf	_mod_value^(0+512),w
 20493  02A3  0020               	movlb	0	; select bank0
 20494  02A4  00AE               	movwf	modulation@x
 20495  02A5  0024               	movlb	4	; select bank4
 20496  02A6  0854               	movf	(_mod_value+1)^(0+512),w
 20497  02A7  0020               	movlb	0	; select bank0
 20498  02A8  00AF               	movwf	modulation@x+1
 20499  02A9  0D89               	rlf	9,f
 20500  02AA  3B89               	subwfb	9,f
 20501  02AB  0989               	comf	9,f
 20502  02AC  00B0               	movwf	modulation@x+2
 20503  02AD  00B1               	movwf	modulation@x+3
 20504  02AE  0024               	movlb	4	; select bank4
 20505  02AF  0845               	movf	_adjusted_pot_value^(0+512),w
 20506  02B0  0020               	movlb	0	; select bank0
 20507  02B1  00B2               	movwf	modulation@y
 20508  02B2  0024               	movlb	4	; select bank4
 20509  02B3  0846               	movf	(_adjusted_pot_value+1)^(0+512),w
 20510  02B4  0020               	movlb	0	; select bank0
 20511  02B5  00B3               	movwf	modulation@y+1
 20512  02B6  0D89               	rlf	9,f
 20513  02B7  3B89               	subwfb	9,f
 20514  02B8  0989               	comf	9,f
 20515  02B9  00B4               	movwf	modulation@y+2
 20516  02BA  00B5               	movwf	modulation@y+3
 20517  02BB  31A2  221D  3180   	fcall	_modulation
 20518  02BE  0020               	movlb	0	; select bank0
 20519  02BF  082F               	movf	?_modulation+1,w
 20520  02C0  0024               	movlb	4	; select bank4
 20521  02C1  00D4               	movwf	(_mod_value+1)^(0+512)
 20522  02C2  0020               	movlb	0	; select bank0
 20523  02C3  082E               	movf	?_modulation,w
 20524  02C4  0024               	movlb	4	; select bank4
 20525  02C5  00D3               	movwf	_mod_value^(0+512)
 20526                           
 20527                           ;interrupts.c: 214: CCPR3 = mod_value / 2;
 20528  02C6  3002               	movlw	2
 20529  02C7  00F0               	movwf	i1___awdiv@divisor
 20530  02C8  3000               	movlw	0
 20531  02C9  00F1               	movwf	i1___awdiv@divisor+1
 20532  02CA  0854               	movf	(_mod_value+1)^(0+512),w
 20533  02CB  00F3               	movwf	i1___awdiv@dividend+1
 20534  02CC  0853               	movf	_mod_value^(0+512),w
 20535  02CD  00F2               	movwf	i1___awdiv@dividend
 20536  02CE  31A4  2413  3180   	fcall	i1___awdiv
 20537  02D1  0871               	movf	?i1___awdiv+1,w
 20538  02D2  0026               	movlb	6	; select bank6
 20539  02D3  0092               	movwf	18	;volatile
 20540  02D4  0870               	movf	?i1___awdiv,w
 20541  02D5  0091               	movwf	17	;volatile
 20542                           
 20543                           ;interrupts.c: 215: mod_counter++;
 20544  02D6  3001               	movlw	1
 20545  02D7  0023               	movlb	3	; select bank3
 20546  02D8  07D7               	addwf	_mod_counter^(0+384),f
 20547  02D9  3000               	movlw	0
 20548  02DA  3DD8               	addwfc	(_mod_counter+1)^(0+384),f
 20549  02DB                     i1l7060:	
 20550                           
 20551                           ;interrupts.c: 217: }
 20552                           ;interrupts.c: 219: if (preset_programmning_on == 1) {
 20553  02DB  0349               	decf	_preset_programmning_on^(0+384),w
 20554  02DC  1D03               	btfss	3,2
 20555  02DD  2B0B               	goto	i1l7072
 20556                           
 20557                           ;interrupts.c: 220: preset_blink++;
 20558  02DE  3001               	movlw	1
 20559  02DF  0020               	movlb	0	; select bank0
 20560  02E0  00BA               	movwf	??_isr
 20561  02E1  083A               	movf	??_isr,w
 20562  02E2  0023               	movlb	3	; select bank3
 20563  02E3  07C8               	addwf	_preset_blink^(0+384),f
 20564                           
 20565                           ;interrupts.c: 222: if (preset_blink >= blink_delay) {
 20566  02E4  0024               	movlb	4	; select bank4
 20567  02E5  0867               	movf	(_blink_delay+1)^(0+512),w
 20568  02E6  3A80               	xorlw	128
 20569  02E7  3C80               	sublw	128
 20570  02E8  1D03               	skipz
 20571  02E9  2AED               	goto	u709_25
 20572  02EA  0866               	movf	_blink_delay^(0+512),w
 20573  02EB  0023               	movlb	3	; select bank3
 20574  02EC  0248               	subwf	_preset_blink^(0+384),w
 20575  02ED                     u709_25:	
 20576  02ED  1C03               	skipc
 20577  02EE  2B10               	goto	i1l7076
 20578                           
 20579                           ;interrupts.c: 223: LATBbits.LATB1 = 1;
 20580  02EF  0022               	movlb	2	; select bank2
 20581  02F0  148D               	bsf	13,1	;volatile
 20582                           
 20583                           ;interrupts.c: 224: if (preset_blink > blink_delay*2) {
 20584  02F1  0024               	movlb	4	; select bank4
 20585  02F2  0867               	movf	(_blink_delay+1)^(0+512),w
 20586  02F3  0020               	movlb	0	; select bank0
 20587  02F4  00BB               	movwf	??_isr+1
 20588  02F5  0024               	movlb	4	; select bank4
 20589  02F6  0866               	movf	_blink_delay^(0+512),w
 20590  02F7  0020               	movlb	0	; select bank0
 20591  02F8  00BA               	movwf	??_isr
 20592  02F9  35BA               	lslf	??_isr,f
 20593  02FA  0DBB               	rlf	??_isr+1,f
 20594  02FB  083B               	movf	??_isr+1,w
 20595  02FC  3A80               	xorlw	128
 20596  02FD  00BC               	movwf	??_isr+2
 20597  02FE  3080               	movlw	128
 20598  02FF  023C               	subwf	??_isr+2,w
 20599  0300  1D03               	skipz
 20600  0301  2B06               	goto	u710_25
 20601  0302  0023               	movlb	3	; select bank3
 20602  0303  0848               	movf	_preset_blink^(0+384),w
 20603  0304  0020               	movlb	0	; select bank0
 20604  0305  023A               	subwf	??_isr,w
 20605  0306                     u710_25:	
 20606  0306  1803               	skipnc
 20607  0307  2B12               	goto	i1l7078
 20608                           
 20609                           ;interrupts.c: 225: preset_blink = 0;
 20610  0308  0023               	movlb	3	; select bank3
 20611  0309  01C8               	clrf	_preset_blink^(0+384)
 20612                           
 20613                           ;interrupts.c: 226: }
 20614                           ;interrupts.c: 228: } else {
 20615  030A  2B12               	goto	i1l7078
 20616  030B                     i1l7072:	
 20617                           ;interrupts.c: 230: }
 20618                           ;interrupts.c: 232: } else {
 20619                           
 20620                           ;interrupts.c: 229: LATBbits.LATB1 = 0;
 20621                           
 20622                           
 20623                           ;interrupts.c: 233: if (preset_blink > 0) {
 20624  030B  0023               	movlb	3	; select bank3
 20625  030C  0848               	movf	_preset_blink^(0+384),w
 20626  030D  1903               	btfsc	3,2
 20627  030E  2B12               	goto	i1l7078
 20628                           
 20629                           ;interrupts.c: 234: preset_blink = 0;
 20630  030F  01C8               	clrf	_preset_blink^(0+384)
 20631  0310                     i1l7076:	
 20632                           
 20633                           ;interrupts.c: 235: LATBbits.LATB1 = 0;
 20634  0310  0022               	movlb	2	; select bank2
 20635  0311  108D               	bcf	13,1	;volatile
 20636  0312                     i1l7078:	
 20637                           
 20638                           ;interrupts.c: 236: }
 20639                           ;interrupts.c: 237: }
 20640                           ;interrupts.c: 241: INTCONbits.TMR0IF = 0;
 20641  0312  110B               	bcf	11,2	;volatile
 20642  0313                     i1l139:	
 20643  0313  0020               	movlb	0	; select bank0
 20644  0314  083F               	movf	??_isr+5,w
 20645  0315  00FF               	movwf	127
 20646  0316  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 20647  0317  0009               	retfie
 20648  0318                     __end_of_isr:	
 20649                           
 20650                           	psect	text75
 20651  22E3                     __ptext75:	
 20652 ;; *************** function i1_set_leds_top *****************
 20653 ;; Defined at:
 20654 ;;		line 16 in file "LEDs.c"
 20655 ;; Parameters:    Size  Location     Type
 20656 ;;  x               2    0[COMMON] int 
 20657 ;;  ledState        2    2[COMMON] int 
 20658 ;; Auto vars:     Size  Location     Type
 20659 ;;		None
 20660 ;; Return value:  Size  Location     Type
 20661 ;;                  1    wreg      void 
 20662 ;; Registers used:
 20663 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 20664 ;; Tracked objects:
 20665 ;;		On entry : 0/0
 20666 ;;		On exit  : 0/0
 20667 ;;		Unchanged: 0/0
 20668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20669 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20670 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20672 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20673 ;;Total ram usage:        4 bytes
 20674 ;; Hardware stack levels used:    1
 20675 ;; This function calls:
 20676 ;;		Nothing
 20677 ;; This function is called by:
 20678 ;;		_isr
 20679 ;; This function uses a non-reentrant model
 20680 ;;
 20681                           
 20682                           
 20683                           ;psect for function i1_set_leds_top
 20684  22E3                     i1_set_leds_top:	
 20685                           
 20686                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 20687                           
 20688                           ;incstack = 0
 20689                           ; Regs used in i1_set_leds_top: [wreg-fsr0h+status,2+status,0]
 20690  22E3  0027               	movlb	7	; select bank7
 20691  22E4  100C               	bcf	12,0	;volatile
 20692                           
 20693                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 20694  22E5  108C               	bcf	12,1	;volatile
 20695                           
 20696                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 20697  22E6  110C               	bcf	12,2	;volatile
 20698                           
 20699                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 20700  22E7  118C               	bcf	12,3	;volatile
 20701                           
 20702                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 20703  22E8  120C               	bcf	12,4	;volatile
 20704                           
 20705                           ;LEDs.c: 22: switch (x) {
 20706  22E9  2B0E               	goto	i1l6882
 20707  22EA                     i1l6870:	
 20708                           ;LEDs.c: 23: case 1:
 20709                           
 20710                           
 20711                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 20712  22EA  0C72               	rrf	i1set_leds_top@ledState,w
 20713  22EB  1C03               	skipc
 20714  22EC  100C               	bcf	12,0	;volatile
 20715  22ED  1803               	skipnc
 20716  22EE  140C               	bsf	12,0	;volatile
 20717                           
 20718                           ;LEDs.c: 25: break;
 20719  22EF  0008               	return
 20720  22F0                     i1l6872:	
 20721                           ;LEDs.c: 26: case 2:
 20722                           
 20723                           
 20724                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 20725  22F0  0C72               	rrf	i1set_leds_top@ledState,w
 20726  22F1  1C03               	skipc
 20727  22F2  108C               	bcf	12,1	;volatile
 20728  22F3  1803               	skipnc
 20729  22F4  148C               	bsf	12,1	;volatile
 20730                           
 20731                           ;LEDs.c: 28: break;
 20732  22F5  0008               	return
 20733  22F6                     i1l6874:	
 20734                           ;LEDs.c: 29: case 3:
 20735                           
 20736                           
 20737                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 20738  22F6  0C72               	rrf	i1set_leds_top@ledState,w
 20739  22F7  1C03               	skipc
 20740  22F8  110C               	bcf	12,2	;volatile
 20741  22F9  1803               	skipnc
 20742  22FA  150C               	bsf	12,2	;volatile
 20743                           
 20744                           ;LEDs.c: 31: break;
 20745  22FB  0008               	return
 20746  22FC                     i1l6876:	
 20747                           ;LEDs.c: 32: case 4:
 20748                           
 20749                           
 20750                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 20751  22FC  0C72               	rrf	i1set_leds_top@ledState,w
 20752  22FD  1C03               	skipc
 20753  22FE  118C               	bcf	12,3	;volatile
 20754  22FF  1803               	skipnc
 20755  2300  158C               	bsf	12,3	;volatile
 20756                           
 20757                           ;LEDs.c: 34: break;
 20758  2301  0008               	return
 20759  2302                     i1l6878:	
 20760                           ;LEDs.c: 35: case 5:
 20761                           
 20762                           
 20763                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 20764  2302  0C72               	rrf	i1set_leds_top@ledState,w
 20765  2303  1C03               	skipc
 20766  2304  120C               	bcf	12,4	;volatile
 20767  2305  1803               	skipnc
 20768  2306  160C               	bsf	12,4	;volatile
 20769                           
 20770                           ;LEDs.c: 39: break;
 20771                           
 20772                           ;LEDs.c: 38: case 6:
 20773                           
 20774                           ;LEDs.c: 37: break;
 20775  2307  0008               	return
 20776  2308                     i1l816:	
 20777                           ;LEDs.c: 40: case 100:
 20778                           
 20779                           
 20780                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 20781  2308  140C               	bsf	12,0	;volatile
 20782                           
 20783                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 20784  2309  148C               	bsf	12,1	;volatile
 20785                           
 20786                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 20787  230A  150C               	bsf	12,2	;volatile
 20788                           
 20789                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 20790  230B  158C               	bsf	12,3	;volatile
 20791                           
 20792                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 20793  230C  160C               	bsf	12,4	;volatile
 20794                           
 20795                           ;LEDs.c: 47: }
 20796                           
 20797                           ;LEDs.c: 46: break;
 20798  230D  0008               	return
 20799  230E                     i1l6882:	
 20800                           
 20801                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20802                           ; Switch size 1, requested type "space"
 20803                           ; Number of cases is 1, Range of values is 0 to 0
 20804                           ; switch strategies available:
 20805                           ; Name         Instructions Cycles
 20806                           ; simple_byte            4     3 (average)
 20807                           ; direct_byte            8     6 (fixed)
 20808                           ; jumptable            260     6 (fixed)
 20809                           ;	Chosen strategy is simple_byte
 20810  230E  0871               	movf	i1set_leds_top@x+1,w
 20811  230F  3A00               	xorlw	0	; case 0
 20812  2310  1903               	skipnz
 20813  2311  2B13               	goto	i1l9922
 20814  2312  2B2A               	goto	i1l817
 20815  2313                     i1l9922:	
 20816                           
 20817                           ; Switch size 1, requested type "space"
 20818                           ; Number of cases is 7, Range of values is 1 to 100
 20819                           ; switch strategies available:
 20820                           ; Name         Instructions Cycles
 20821                           ; simple_byte           22    12 (average)
 20822                           ; direct_byte          209     9 (fixed)
 20823                           ; jumptable            263     9 (fixed)
 20824                           ;	Chosen strategy is simple_byte
 20825  2313  0870               	movf	i1set_leds_top@x,w
 20826  2314  3A01               	xorlw	1	; case 1
 20827  2315  1903               	skipnz
 20828  2316  2AEA               	goto	i1l6870
 20829  2317  3A03               	xorlw	3	; case 2
 20830  2318  1903               	skipnz
 20831  2319  2AF0               	goto	i1l6872
 20832  231A  3A01               	xorlw	1	; case 3
 20833  231B  1903               	skipnz
 20834  231C  2AF6               	goto	i1l6874
 20835  231D  3A07               	xorlw	7	; case 4
 20836  231E  1903               	skipnz
 20837  231F  2AFC               	goto	i1l6876
 20838  2320  3A01               	xorlw	1	; case 5
 20839  2321  1903               	skipnz
 20840  2322  2B02               	goto	i1l6878
 20841  2323  3A03               	xorlw	3	; case 6
 20842  2324  1903               	skipnz
 20843  2325  2B2A               	goto	i1l817
 20844  2326  3A62               	xorlw	98	; case 100
 20845  2327  1903               	skipnz
 20846  2328  2B08               	goto	i1l816
 20847  2329  2B2A               	goto	i1l817
 20848  232A                     i1l817:	
 20849  232A  0008               	return
 20850  232B                     __end_ofi1_set_leds_top:	
 20851                           
 20852                           	psect	text76
 20853  2E79                     __ptext76:	
 20854 ;; *************** function i1_getModulationSubdivision *****************
 20855 ;; Defined at:
 20856 ;;		line 26 in file "modulation.c"
 20857 ;; Parameters:    Size  Location     Type
 20858 ;;		None
 20859 ;; Auto vars:     Size  Location     Type
 20860 ;;		None
 20861 ;; Return value:  Size  Location     Type
 20862 ;;                  2    0[COMMON] int 
 20863 ;; Registers used:
 20864 ;;		wreg, status,2, status,0
 20865 ;; Tracked objects:
 20866 ;;		On entry : 0/0
 20867 ;;		On exit  : 0/0
 20868 ;;		Unchanged: 0/0
 20869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20870 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20873 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20874 ;;Total ram usage:        2 bytes
 20875 ;; Hardware stack levels used:    1
 20876 ;; This function calls:
 20877 ;;		Nothing
 20878 ;; This function is called by:
 20879 ;;		_isr
 20880 ;; This function uses a non-reentrant model
 20881 ;;
 20882                           
 20883                           
 20884                           ;psect for function i1_getModulationSubdivision
 20885  2E79                     i1_getModulationSubdivision:	
 20886                           
 20887                           ;modulation.c: 27: if (delay_time >= 2400) {
 20888                           
 20889                           ;incstack = 0
 20890                           ; Regs used in i1_getModulationSubdivision: [wreg+status,2+status,0]
 20891  2E79  0020               	movlb	0	; select bank0
 20892  2E7A  1BC7               	btfsc	_delay_time+3,7	;volatile
 20893  2E7B  2E8D               	goto	i1l6896
 20894  2E7C  0847               	movf	_delay_time+3,w	;volatile
 20895  2E7D  1D03               	btfss	3,2
 20896  2E7E  2E88               	goto	i1l6890
 20897  2E7F  0846               	movf	_delay_time+2,w	;volatile
 20898  2E80  1D03               	btfss	3,2
 20899  2E81  2E88               	goto	i1l6890
 20900  2E82  3060               	movlw	96
 20901  2E83  0244               	subwf	_delay_time,w	;volatile
 20902  2E84  3009               	movlw	9
 20903  2E85  3B45               	subwfb	_delay_time+1,w	;volatile
 20904  2E86  1C03               	btfss	3,0
 20905  2E87  2E8D               	goto	i1l6896
 20906  2E88                     i1l6890:	
 20907                           
 20908                           ;modulation.c: 28: return 120;
 20909  2E88  3078               	movlw	120
 20910  2E89  00F0               	movwf	?i1_getModulationSubdivision
 20911  2E8A  3000               	movlw	0
 20912  2E8B  00F1               	movwf	?i1_getModulationSubdivision+1
 20913                           
 20914                           ;modulation.c: 29: } else if (delay_time >= 600) {
 20915  2E8C  0008               	return
 20916  2E8D                     i1l6896:	
 20917  2E8D  1BC7               	btfsc	_delay_time+3,7	;volatile
 20918  2E8E  2EA0               	goto	i1l6904
 20919  2E8F  0847               	movf	_delay_time+3,w	;volatile
 20920  2E90  1D03               	btfss	3,2
 20921  2E91  2E9B               	goto	i1l6898
 20922  2E92  0846               	movf	_delay_time+2,w	;volatile
 20923  2E93  1D03               	btfss	3,2
 20924  2E94  2E9B               	goto	i1l6898
 20925  2E95  3058               	movlw	88
 20926  2E96  0244               	subwf	_delay_time,w	;volatile
 20927  2E97  3002               	movlw	2
 20928  2E98  3B45               	subwfb	_delay_time+1,w	;volatile
 20929  2E99  1C03               	btfss	3,0
 20930  2E9A  2EA0               	goto	i1l6904
 20931  2E9B                     i1l6898:	
 20932                           
 20933                           ;modulation.c: 30: return 60;
 20934  2E9B  303C               	movlw	60
 20935  2E9C  00F0               	movwf	?i1_getModulationSubdivision
 20936  2E9D  3000               	movlw	0
 20937  2E9E  00F1               	movwf	?i1_getModulationSubdivision+1
 20938                           
 20939                           ;modulation.c: 31: } else {
 20940  2E9F  0008               	return
 20941  2EA0                     i1l6904:	
 20942                           
 20943                           ;modulation.c: 32: return 30;
 20944  2EA0  301E               	movlw	30
 20945  2EA1  00F0               	movwf	?i1_getModulationSubdivision
 20946  2EA2  3000               	movlw	0
 20947  2EA3  00F1               	movwf	?i1_getModulationSubdivision+1
 20948  2EA4  0008               	return
 20949  2EA5                     __end_ofi1_getModulationSubdivision:	
 20950                           
 20951                           	psect	text77
 20952  2413                     __ptext77:	
 20953 ;; *************** function i1___awdiv *****************
 20954 ;; Defined at:
 20955 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 20956 ;; Parameters:    Size  Location     Type
 20957 ;;  divisor         2    0[COMMON] int 
 20958 ;;  dividend        2    2[COMMON] int 
 20959 ;; Auto vars:     Size  Location     Type
 20960 ;;  __awdiv         2    7[COMMON] int 
 20961 ;;  __awdiv         1    6[COMMON] unsigned char 
 20962 ;;  __awdiv         1    5[COMMON] unsigned char 
 20963 ;; Return value:  Size  Location     Type
 20964 ;;                  2    0[COMMON] int 
 20965 ;; Registers used:
 20966 ;;		wreg, status,2, status,0
 20967 ;; Tracked objects:
 20968 ;;		On entry : 0/0
 20969 ;;		On exit  : 0/0
 20970 ;;		Unchanged: 0/0
 20971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20972 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20973 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20974 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20975 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20976 ;;Total ram usage:        9 bytes
 20977 ;; Hardware stack levels used:    1
 20978 ;; This function calls:
 20979 ;;		Nothing
 20980 ;; This function is called by:
 20981 ;;		_isr
 20982 ;; This function uses a non-reentrant model
 20983 ;;
 20984                           
 20985                           
 20986                           ;psect for function i1___awdiv
 20987  2413                     i1___awdiv:	
 20988                           
 20989                           ;incstack = 0
 20990                           ; Regs used in i1___awdiv: [wreg+status,2+status,0]
 20991  2413  01F6               	clrf	i1___awdiv@sign
 20992  2414  1FF1               	btfss	i1___awdiv@divisor+1,7
 20993  2415  2C1D               	goto	i1l6916
 20994  2416  09F0               	comf	i1___awdiv@divisor,f
 20995  2417  09F1               	comf	i1___awdiv@divisor+1,f
 20996  2418  0AF0               	incf	i1___awdiv@divisor,f
 20997  2419  1903               	skipnz
 20998  241A  0AF1               	incf	i1___awdiv@divisor+1,f
 20999  241B  01F6               	clrf	i1___awdiv@sign
 21000  241C  0AF6               	incf	i1___awdiv@sign,f
 21001  241D                     i1l6916:	
 21002  241D  1FF3               	btfss	i1___awdiv@dividend+1,7
 21003  241E  2C28               	goto	i1l6922
 21004  241F  09F2               	comf	i1___awdiv@dividend,f
 21005  2420  09F3               	comf	i1___awdiv@dividend+1,f
 21006  2421  0AF2               	incf	i1___awdiv@dividend,f
 21007  2422  1903               	skipnz
 21008  2423  0AF3               	incf	i1___awdiv@dividend+1,f
 21009  2424  3001               	movlw	1
 21010  2425  00F4               	movwf	??i1___awdiv
 21011  2426  0874               	movf	??i1___awdiv,w
 21012  2427  06F6               	xorwf	i1___awdiv@sign,f
 21013  2428                     i1l6922:	
 21014  2428  01F7               	clrf	i1___awdiv@quotient
 21015  2429  01F8               	clrf	i1___awdiv@quotient+1
 21016  242A  0870               	movf	i1___awdiv@divisor,w
 21017  242B  0471               	iorwf	i1___awdiv@divisor+1,w
 21018  242C  1903               	btfsc	3,2
 21019  242D  2C57               	goto	i1l6944
 21020  242E  01F5               	clrf	i1___awdiv@counter
 21021  242F  0AF5               	incf	i1___awdiv@counter,f
 21022  2430                     i1l6932:	
 21023  2430  1BF1               	btfsc	i1___awdiv@divisor+1,7
 21024  2431  2C3C               	goto	i1l6934
 21025  2432  3001               	movlw	1
 21026  2433                     u673_25:	
 21027  2433  35F0               	lslf	i1___awdiv@divisor,f
 21028  2434  0DF1               	rlf	i1___awdiv@divisor+1,f
 21029  2435  0B89               	decfsz	9,f
 21030  2436  2C33               	goto	u673_25
 21031  2437  3001               	movlw	1
 21032  2438  00F4               	movwf	??i1___awdiv
 21033  2439  0874               	movf	??i1___awdiv,w
 21034  243A  07F5               	addwf	i1___awdiv@counter,f
 21035  243B  2C30               	goto	i1l6932
 21036  243C                     i1l6934:	
 21037  243C  3001               	movlw	1
 21038  243D                     u675_25:	
 21039  243D  35F7               	lslf	i1___awdiv@quotient,f
 21040  243E  0DF8               	rlf	i1___awdiv@quotient+1,f
 21041  243F  0B89               	decfsz	9,f
 21042  2440  2C3D               	goto	u675_25
 21043  2441  0871               	movf	i1___awdiv@divisor+1,w
 21044  2442  0273               	subwf	i1___awdiv@dividend+1,w
 21045  2443  1D03               	skipz
 21046  2444  2C47               	goto	u676_25
 21047  2445  0870               	movf	i1___awdiv@divisor,w
 21048  2446  0272               	subwf	i1___awdiv@dividend,w
 21049  2447                     u676_25:	
 21050  2447  1C03               	skipc
 21051  2448  2C4E               	goto	i1l6940
 21052  2449  0870               	movf	i1___awdiv@divisor,w
 21053  244A  02F2               	subwf	i1___awdiv@dividend,f
 21054  244B  0871               	movf	i1___awdiv@divisor+1,w
 21055  244C  3BF3               	subwfb	i1___awdiv@dividend+1,f
 21056  244D  1477               	bsf	i1___awdiv@quotient,0
 21057  244E                     i1l6940:	
 21058  244E  3001               	movlw	1
 21059  244F                     u677_25:	
 21060  244F  36F1               	lsrf	i1___awdiv@divisor+1,f
 21061  2450  0CF0               	rrf	i1___awdiv@divisor,f
 21062  2451  0B89               	decfsz	9,f
 21063  2452  2C4F               	goto	u677_25
 21064  2453  3001               	movlw	1
 21065  2454  02F5               	subwf	i1___awdiv@counter,f
 21066  2455  1D03               	btfss	3,2
 21067  2456  2C3C               	goto	i1l6934
 21068  2457                     i1l6944:	
 21069  2457  0876               	movf	i1___awdiv@sign,w
 21070  2458  1903               	btfsc	3,2
 21071  2459  2C5F               	goto	i1l6948
 21072  245A  09F7               	comf	i1___awdiv@quotient,f
 21073  245B  09F8               	comf	i1___awdiv@quotient+1,f
 21074  245C  0AF7               	incf	i1___awdiv@quotient,f
 21075  245D  1903               	skipnz
 21076  245E  0AF8               	incf	i1___awdiv@quotient+1,f
 21077  245F                     i1l6948:	
 21078  245F  0878               	movf	i1___awdiv@quotient+1,w
 21079  2460  00F1               	movwf	?i1___awdiv+1
 21080  2461  0877               	movf	i1___awdiv@quotient,w
 21081  2462  00F0               	movwf	?i1___awdiv
 21082  2463  0008               	return
 21083  2464                     __end_ofi1___awdiv:	
 21084                           
 21085                           	psect	text78
 21086  221D                     __ptext78:	
 21087 ;; *************** function _modulation *****************
 21088 ;; Defined at:
 21089 ;;		line 222 in file "user.c"
 21090 ;; Parameters:    Size  Location     Type
 21091 ;;  x               4   14[BANK0 ] long 
 21092 ;;  y               4   18[BANK0 ] long 
 21093 ;; Auto vars:     Size  Location     Type
 21094 ;;		None
 21095 ;; Return value:  Size  Location     Type
 21096 ;;                  4   14[BANK0 ] long 
 21097 ;; Registers used:
 21098 ;;		wreg, status,2, status,0, pclath, cstack
 21099 ;; Tracked objects:
 21100 ;;		On entry : 0/0
 21101 ;;		On exit  : 0/0
 21102 ;;		Unchanged: 0/0
 21103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 21104 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21106 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21107 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21108 ;;Total ram usage:       12 bytes
 21109 ;; Hardware stack levels used:    1
 21110 ;; Hardware stack levels required when called:    1
 21111 ;; This function calls:
 21112 ;;		i1___aldiv
 21113 ;;		i1___lmul
 21114 ;; This function is called by:
 21115 ;;		_isr
 21116 ;; This function uses a non-reentrant model
 21117 ;;
 21118                           
 21119                           
 21120                           ;psect for function _modulation
 21121  221D                     _modulation:	
 21122                           
 21123                           ;user.c: 225: return (127500 + (y * x)) / 1000;
 21124                           
 21125                           ;incstack = 0
 21126                           ; Regs used in _modulation: [wreg+status,2+status,0+pclath+cstack]
 21127  221D  3000               	movlw	0
 21128  221E  0020               	movlb	0	; select bank0
 21129  221F  00A3               	movwf	i1___aldiv@divisor+3
 21130  2220  3000               	movlw	0
 21131  2221  00A2               	movwf	i1___aldiv@divisor+2
 21132  2222  3003               	movlw	3
 21133  2223  00A1               	movwf	i1___aldiv@divisor+1
 21134  2224  30E8               	movlw	232
 21135  2225  00A0               	movwf	i1___aldiv@divisor
 21136  2226  300C               	movlw	12
 21137  2227  00B6               	movwf	??_modulation
 21138  2228  30F2               	movlw	242
 21139  2229  00B7               	movwf	??_modulation+1
 21140  222A  3001               	movlw	1
 21141  222B  00B8               	movwf	??_modulation+2
 21142  222C  3000               	movlw	0
 21143  222D  00B9               	movwf	??_modulation+3
 21144  222E  0835               	movf	modulation@y+3,w
 21145  222F  00F3               	movwf	i1___lmul@multiplier+3
 21146  2230  0834               	movf	modulation@y+2,w
 21147  2231  00F2               	movwf	i1___lmul@multiplier+2
 21148  2232  0833               	movf	modulation@y+1,w
 21149  2233  00F1               	movwf	i1___lmul@multiplier+1
 21150  2234  0832               	movf	modulation@y,w
 21151  2235  00F0               	movwf	i1___lmul@multiplier
 21152  2236  0831               	movf	modulation@x+3,w
 21153  2237  00F7               	movwf	i1___lmul@multiplicand+3
 21154  2238  0830               	movf	modulation@x+2,w
 21155  2239  00F6               	movwf	i1___lmul@multiplicand+2
 21156  223A  082F               	movf	modulation@x+1,w
 21157  223B  00F5               	movwf	i1___lmul@multiplicand+1
 21158  223C  082E               	movf	modulation@x,w
 21159  223D  00F4               	movwf	i1___lmul@multiplicand
 21160  223E  31AE  26D3  31A2   	fcall	i1___lmul
 21161  2241  0870               	movf	?i1___lmul,w
 21162  2242  0020               	movlb	0	; select bank0
 21163  2243  07B6               	addwf	??_modulation,f
 21164  2244  0871               	movf	?i1___lmul+1,w
 21165  2245  3DB7               	addwfc	??_modulation+1,f
 21166  2246  0872               	movf	?i1___lmul+2,w
 21167  2247  3DB8               	addwfc	??_modulation+2,f
 21168  2248  0873               	movf	?i1___lmul+3,w
 21169  2249  3DB9               	addwfc	??_modulation+3,f
 21170  224A  0839               	movf	??_modulation+3,w
 21171  224B  00A7               	movwf	i1___aldiv@dividend+3
 21172  224C  0838               	movf	??_modulation+2,w
 21173  224D  00A6               	movwf	i1___aldiv@dividend+2
 21174  224E  0837               	movf	??_modulation+1,w
 21175  224F  00A5               	movwf	i1___aldiv@dividend+1
 21176  2250  0836               	movf	??_modulation,w
 21177  2251  00A4               	movwf	i1___aldiv@dividend
 21178  2252  3198  2001         	fcall	i1___aldiv
 21179  2254  0020               	movlb	0	; select bank0
 21180  2255  0823               	movf	?i1___aldiv+3,w
 21181  2256  00B1               	movwf	?_modulation+3
 21182  2257  0822               	movf	?i1___aldiv+2,w
 21183  2258  00B0               	movwf	?_modulation+2
 21184  2259  0821               	movf	?i1___aldiv+1,w
 21185  225A  00AF               	movwf	?_modulation+1
 21186  225B  0820               	movf	?i1___aldiv,w
 21187  225C  00AE               	movwf	?_modulation
 21188  225D  0008               	return
 21189  225E                     __end_of_modulation:	
 21190                           
 21191                           	psect	text79
 21192  2ED3                     __ptext79:	
 21193 ;; *************** function i1___lmul *****************
 21194 ;; Defined at:
 21195 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 21196 ;; Parameters:    Size  Location     Type
 21197 ;;  multiplier      4    0[COMMON] unsigned long 
 21198 ;;  multiplicand    4    4[COMMON] unsigned long 
 21199 ;; Auto vars:     Size  Location     Type
 21200 ;;  __lmul          4    8[COMMON] unsigned long 
 21201 ;; Return value:  Size  Location     Type
 21202 ;;                  4    0[COMMON] unsigned long 
 21203 ;; Registers used:
 21204 ;;		wreg, status,2, status,0
 21205 ;; Tracked objects:
 21206 ;;		On entry : 0/0
 21207 ;;		On exit  : 0/0
 21208 ;;		Unchanged: 0/0
 21209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 21210 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21211 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21213 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21214 ;;Total ram usage:       12 bytes
 21215 ;; Hardware stack levels used:    1
 21216 ;; This function calls:
 21217 ;;		Nothing
 21218 ;; This function is called by:
 21219 ;;		_modulation
 21220 ;; This function uses a non-reentrant model
 21221 ;;
 21222                           
 21223                           
 21224                           ;psect for function i1___lmul
 21225  2ED3                     i1___lmul:	
 21226                           
 21227                           ;incstack = 0
 21228                           ; Regs used in i1___lmul: [wreg+status,2+status,0]
 21229  2ED3  3000               	movlw	0
 21230  2ED4  00FB               	movwf	i1___lmul@product+3
 21231  2ED5  3000               	movlw	0
 21232  2ED6  00FA               	movwf	i1___lmul@product+2
 21233  2ED7  3000               	movlw	0
 21234  2ED8  00F9               	movwf	i1___lmul@product+1
 21235  2ED9  3000               	movlw	0
 21236  2EDA  00F8               	movwf	i1___lmul@product
 21237  2EDB                     i1l6160:	
 21238  2EDB  1C70               	btfss	i1___lmul@multiplier,0
 21239  2EDC  2EE5               	goto	i1l6164
 21240  2EDD  0874               	movf	i1___lmul@multiplicand,w
 21241  2EDE  07F8               	addwf	i1___lmul@product,f
 21242  2EDF  0875               	movf	i1___lmul@multiplicand+1,w
 21243  2EE0  3DF9               	addwfc	i1___lmul@product+1,f
 21244  2EE1  0876               	movf	i1___lmul@multiplicand+2,w
 21245  2EE2  3DFA               	addwfc	i1___lmul@product+2,f
 21246  2EE3  0877               	movf	i1___lmul@multiplicand+3,w
 21247  2EE4  3DFB               	addwfc	i1___lmul@product+3,f
 21248  2EE5                     i1l6164:	
 21249  2EE5  3001               	movlw	1
 21250  2EE6                     u547_25:	
 21251  2EE6  35F4               	lslf	i1___lmul@multiplicand,f
 21252  2EE7  0DF5               	rlf	i1___lmul@multiplicand+1,f
 21253  2EE8  0DF6               	rlf	i1___lmul@multiplicand+2,f
 21254  2EE9  0DF7               	rlf	i1___lmul@multiplicand+3,f
 21255  2EEA  0B89               	decfsz	9,f
 21256  2EEB  2EE6               	goto	u547_25
 21257  2EEC  3001               	movlw	1
 21258  2EED                     u548_25:	
 21259  2EED  36F3               	lsrf	i1___lmul@multiplier+3,f
 21260  2EEE  0CF2               	rrf	i1___lmul@multiplier+2,f
 21261  2EEF  0CF1               	rrf	i1___lmul@multiplier+1,f
 21262  2EF0  0CF0               	rrf	i1___lmul@multiplier,f
 21263  2EF1  0B89               	decfsz	9,f
 21264  2EF2  2EED               	goto	u548_25
 21265  2EF3  0873               	movf	i1___lmul@multiplier+3,w
 21266  2EF4  0472               	iorwf	i1___lmul@multiplier+2,w
 21267  2EF5  0471               	iorwf	i1___lmul@multiplier+1,w
 21268  2EF6  0470               	iorwf	i1___lmul@multiplier,w
 21269  2EF7  1D03               	skipz
 21270  2EF8  2EDB               	goto	i1l6160
 21271  2EF9  087B               	movf	i1___lmul@product+3,w
 21272  2EFA  00F3               	movwf	?i1___lmul+3
 21273  2EFB  087A               	movf	i1___lmul@product+2,w
 21274  2EFC  00F2               	movwf	?i1___lmul+2
 21275  2EFD  0879               	movf	i1___lmul@product+1,w
 21276  2EFE  00F1               	movwf	?i1___lmul+1
 21277  2EFF  0878               	movf	i1___lmul@product,w
 21278  2F00  00F0               	movwf	?i1___lmul
 21279  2F01  0008               	return
 21280  2F02                     __end_ofi1___lmul:	
 21281                           
 21282                           	psect	text80
 21283  1801                     __ptext80:	
 21284 ;; *************** function i1___aldiv *****************
 21285 ;; Defined at:
 21286 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
 21287 ;; Parameters:    Size  Location     Type
 21288 ;;  divisor         4    0[BANK0 ] long 
 21289 ;;  dividend        4    4[BANK0 ] long 
 21290 ;; Auto vars:     Size  Location     Type
 21291 ;;  __aldiv         4   10[BANK0 ] long 
 21292 ;;  __aldiv         1    9[BANK0 ] unsigned char 
 21293 ;;  __aldiv         1    8[BANK0 ] unsigned char 
 21294 ;; Return value:  Size  Location     Type
 21295 ;;                  4    0[BANK0 ] long 
 21296 ;; Registers used:
 21297 ;;		wreg, status,2, status,0
 21298 ;; Tracked objects:
 21299 ;;		On entry : 0/0
 21300 ;;		On exit  : 0/0
 21301 ;;		Unchanged: 0/0
 21302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 21303 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21304 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21305 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21306 ;;      Totals:         1      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21307 ;;Total ram usage:       15 bytes
 21308 ;; Hardware stack levels used:    1
 21309 ;; This function calls:
 21310 ;;		Nothing
 21311 ;; This function is called by:
 21312 ;;		_modulation
 21313 ;; This function uses a non-reentrant model
 21314 ;;
 21315                           
 21316                           
 21317                           ;psect for function i1___aldiv
 21318  1801                     i1___aldiv:	
 21319                           
 21320                           ;incstack = 0
 21321                           ; Regs used in i1___aldiv: [wreg+status,2+status,0]
 21322  1801  0020               	movlb	0	; select bank0
 21323  1802  01A9               	clrf	i1___aldiv@sign
 21324  1803  1FA3               	btfss	i1___aldiv@divisor+3,7
 21325  1804  2812               	goto	i1l2057
 21326  1805  09A0               	comf	i1___aldiv@divisor,f
 21327  1806  09A1               	comf	i1___aldiv@divisor+1,f
 21328  1807  09A2               	comf	i1___aldiv@divisor+2,f
 21329  1808  09A3               	comf	i1___aldiv@divisor+3,f
 21330  1809  0AA0               	incf	i1___aldiv@divisor,f
 21331  180A  1903               	skipnz
 21332  180B  0AA1               	incf	i1___aldiv@divisor+1,f
 21333  180C  1903               	skipnz
 21334  180D  0AA2               	incf	i1___aldiv@divisor+2,f
 21335  180E  1903               	skipnz
 21336  180F  0AA3               	incf	i1___aldiv@divisor+3,f
 21337  1810  01A9               	clrf	i1___aldiv@sign
 21338  1811  0AA9               	incf	i1___aldiv@sign,f
 21339  1812                     i1l2057:	
 21340  1812  1FA7               	btfss	i1___aldiv@dividend+3,7
 21341  1813  2823               	goto	i1l6182
 21342  1814  09A4               	comf	i1___aldiv@dividend,f
 21343  1815  09A5               	comf	i1___aldiv@dividend+1,f
 21344  1816  09A6               	comf	i1___aldiv@dividend+2,f
 21345  1817  09A7               	comf	i1___aldiv@dividend+3,f
 21346  1818  0AA4               	incf	i1___aldiv@dividend,f
 21347  1819  1903               	skipnz
 21348  181A  0AA5               	incf	i1___aldiv@dividend+1,f
 21349  181B  1903               	skipnz
 21350  181C  0AA6               	incf	i1___aldiv@dividend+2,f
 21351  181D  1903               	skipnz
 21352  181E  0AA7               	incf	i1___aldiv@dividend+3,f
 21353  181F  3001               	movlw	1
 21354  1820  00FC               	movwf	??i1___aldiv
 21355  1821  087C               	movf	??i1___aldiv,w
 21356  1822  06A9               	xorwf	i1___aldiv@sign,f
 21357  1823                     i1l6182:	
 21358  1823  3000               	movlw	0
 21359  1824  00AD               	movwf	i1___aldiv@quotient+3
 21360  1825  3000               	movlw	0
 21361  1826  00AC               	movwf	i1___aldiv@quotient+2
 21362  1827  3000               	movlw	0
 21363  1828  00AB               	movwf	i1___aldiv@quotient+1
 21364  1829  3000               	movlw	0
 21365  182A  00AA               	movwf	i1___aldiv@quotient
 21366  182B  0823               	movf	i1___aldiv@divisor+3,w
 21367  182C  0422               	iorwf	i1___aldiv@divisor+2,w
 21368  182D  0421               	iorwf	i1___aldiv@divisor+1,w
 21369  182E  0420               	iorwf	i1___aldiv@divisor,w
 21370  182F  1903               	skipnz
 21371  1830  286C               	goto	i1l6204
 21372  1831  01A8               	clrf	i1___aldiv@counter
 21373  1832  0AA8               	incf	i1___aldiv@counter,f
 21374  1833                     i1l6190:	
 21375  1833  1BA3               	btfsc	i1___aldiv@divisor+3,7
 21376  1834  2841               	goto	i1l6192
 21377  1835  3001               	movlw	1
 21378  1836                     u553_25:	
 21379  1836  35A0               	lslf	i1___aldiv@divisor,f
 21380  1837  0DA1               	rlf	i1___aldiv@divisor+1,f
 21381  1838  0DA2               	rlf	i1___aldiv@divisor+2,f
 21382  1839  0DA3               	rlf	i1___aldiv@divisor+3,f
 21383  183A  0B89               	decfsz	9,f
 21384  183B  2836               	goto	u553_25
 21385  183C  3001               	movlw	1
 21386  183D  00FC               	movwf	??i1___aldiv
 21387  183E  087C               	movf	??i1___aldiv,w
 21388  183F  07A8               	addwf	i1___aldiv@counter,f
 21389  1840  2833               	goto	i1l6190
 21390  1841                     i1l6192:	
 21391  1841  3001               	movlw	1
 21392  1842                     u555_25:	
 21393  1842  35AA               	lslf	i1___aldiv@quotient,f
 21394  1843  0DAB               	rlf	i1___aldiv@quotient+1,f
 21395  1844  0DAC               	rlf	i1___aldiv@quotient+2,f
 21396  1845  0DAD               	rlf	i1___aldiv@quotient+3,f
 21397  1846  0B89               	decfsz	9,f
 21398  1847  2842               	goto	u555_25
 21399  1848  0823               	movf	i1___aldiv@divisor+3,w
 21400  1849  0227               	subwf	i1___aldiv@dividend+3,w
 21401  184A  1D03               	skipz
 21402  184B  2856               	goto	u556_25
 21403  184C  0822               	movf	i1___aldiv@divisor+2,w
 21404  184D  0226               	subwf	i1___aldiv@dividend+2,w
 21405  184E  1D03               	skipz
 21406  184F  2856               	goto	u556_25
 21407  1850  0821               	movf	i1___aldiv@divisor+1,w
 21408  1851  0225               	subwf	i1___aldiv@dividend+1,w
 21409  1852  1D03               	skipz
 21410  1853  2856               	goto	u556_25
 21411  1854  0820               	movf	i1___aldiv@divisor,w
 21412  1855  0224               	subwf	i1___aldiv@dividend,w
 21413  1856                     u556_25:	
 21414  1856  1C03               	skipc
 21415  1857  2861               	goto	i1l6200
 21416  1858  0820               	movf	i1___aldiv@divisor,w
 21417  1859  02A4               	subwf	i1___aldiv@dividend,f
 21418  185A  0821               	movf	i1___aldiv@divisor+1,w
 21419  185B  3BA5               	subwfb	i1___aldiv@dividend+1,f
 21420  185C  0822               	movf	i1___aldiv@divisor+2,w
 21421  185D  3BA6               	subwfb	i1___aldiv@dividend+2,f
 21422  185E  0823               	movf	i1___aldiv@divisor+3,w
 21423  185F  3BA7               	subwfb	i1___aldiv@dividend+3,f
 21424  1860  142A               	bsf	i1___aldiv@quotient,0
 21425  1861                     i1l6200:	
 21426  1861  3001               	movlw	1
 21427  1862                     u557_25:	
 21428  1862  36A3               	lsrf	i1___aldiv@divisor+3,f
 21429  1863  0CA2               	rrf	i1___aldiv@divisor+2,f
 21430  1864  0CA1               	rrf	i1___aldiv@divisor+1,f
 21431  1865  0CA0               	rrf	i1___aldiv@divisor,f
 21432  1866  0B89               	decfsz	9,f
 21433  1867  2862               	goto	u557_25
 21434  1868  3001               	movlw	1
 21435  1869  02A8               	subwf	i1___aldiv@counter,f
 21436  186A  1D03               	btfss	3,2
 21437  186B  2841               	goto	i1l6192
 21438  186C                     i1l6204:	
 21439  186C  0829               	movf	i1___aldiv@sign,w
 21440  186D  1903               	btfsc	3,2
 21441  186E  287A               	goto	i1l6208
 21442  186F  09AA               	comf	i1___aldiv@quotient,f
 21443  1870  09AB               	comf	i1___aldiv@quotient+1,f
 21444  1871  09AC               	comf	i1___aldiv@quotient+2,f
 21445  1872  09AD               	comf	i1___aldiv@quotient+3,f
 21446  1873  0AAA               	incf	i1___aldiv@quotient,f
 21447  1874  1903               	skipnz
 21448  1875  0AAB               	incf	i1___aldiv@quotient+1,f
 21449  1876  1903               	skipnz
 21450  1877  0AAC               	incf	i1___aldiv@quotient+2,f
 21451  1878  1903               	skipnz
 21452  1879  0AAD               	incf	i1___aldiv@quotient+3,f
 21453  187A                     i1l6208:	
 21454  187A  082D               	movf	i1___aldiv@quotient+3,w
 21455  187B  00A3               	movwf	?i1___aldiv+3
 21456  187C  082C               	movf	i1___aldiv@quotient+2,w
 21457  187D  00A2               	movwf	?i1___aldiv+2
 21458  187E  082B               	movf	i1___aldiv@quotient+1,w
 21459  187F  00A1               	movwf	?i1___aldiv+1
 21460  1880  082A               	movf	i1___aldiv@quotient,w
 21461  1881  00A0               	movwf	?i1___aldiv
 21462  1882  0008               	return
 21463  1883                     __end_ofi1___aldiv:	
 21464  007E                     btemp	set	126	;btemp
 21465  007E                     int$flags	set	126
 21466  007E                     wtemp	set	126
 21467  007E                     wtemp0	set	126
 21468  0080                     wtemp1	set	128
 21469  0082                     wtemp2	set	130
 21470  0084                     wtemp3	set	132
 21471  0086                     wtemp4	set	134
 21472  0088                     wtemp5	set	136
 21473  007F                     wtemp6	set	127
 21474  007E                     ttemp	set	126
 21475  007E                     ttemp0	set	126
 21476  0081                     ttemp1	set	129
 21477  0084                     ttemp2	set	132
 21478  0087                     ttemp3	set	135
 21479  007F                     ttemp4	set	127
 21480  007E                     ltemp	set	126
 21481  007E                     ltemp0	set	126
 21482  0082                     ltemp1	set	130
 21483  0086                     ltemp2	set	134
 21484  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    84
    Data        49
    BSS         295
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     32      64
    BANK1            80     80      80
    BANK2            80     74      77
    BANK3            80      9      80
    BANK4            80      8      74
    BANK5            80      9      53
    BANK6            80      0      64
    BANK7            80      0      64
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           26      0       0
    BANK12            0      0       0
    BANK13            0      0       0
    BANK14            0      0       0
    BANK15            0      0       0
    BANK16            0      0       0
    BANK17            0      0       0
    BANK18            0      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK2[2]), floor@expon(BANK2[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), sin@coeff_a(CODE[15]), sin@coeff_b(CODE[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _modulation->i1___aldiv
    i1___aldiv->i1___lmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _isr->_modulation
    _modulation->i1___aldiv

Critical Paths under _main in BANK1

    _main->_map
    _update_selectMode->_setExpressionDisplay
    _update_selectMode->_setPresetDisplay
    _updateSwitchTap->_setDoublePressState
    _updateSwitchBypass->_setDoublePressState
    _setDoublePressState->_showSave
    _showSave->_ring_tactiles
    _solidring_tactiles->_wait_ms
    _ring_tactiles->_wait_ms
    _setPedalMode->_setExpressionDisplay
    _setPedalMode->_setPresetDisplay
    _setPresetDisplay->_set_leds_top
    _setExpressionDisplay->_set_leds_top
    _resetRingLEDs->_set_leds_top
    ___lltoft->___ftpack
    _read_top_tactile->_wait_ms
    _read_bottom_tactile->_wait_ms
    _map->___ftdiv
    _initSwitchBypass->_setSwitchBypassState
    _setSwitchBypassState->_setSwitchBypassRelays
    _setSwitchBypassRelays->_wait_ms
    _wait_ms->___lmul
    ___fttol->_map
    ___altoft->___ftpack
    ___ftmul->___awtoft
    ___ftadd->___ftneg
    ___ftneg->___ftmul
    ___ftdiv->___ftadd
    ___awtoft->___ftpack
    _ReadSavedSettings->_set_leds_top

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_scaleA100kPot
    _main->_scaleA10kPot
    _main->_scaleiA10kPot
    _updateModulationArray->_modSquare
    _modTri->___fttol
    _modSquare->_modCos
    _modCos->___wmul
    _modSawRev->_modSaw
    _modSaw->___fttol
    _set_subdivision->___fttol
    _scaleiA10kPot->_pow
    _scaleA10kPot->_pow
    _scaleA100kPot->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _getModulationDelayTime->___fttol
    _calcCosArray->_cos
    _cos->_sin
    _sin->_eval_poly
    _floor->___fttol
    _eval_poly->___wmul
    ___wmul->___fttol
    ___ftsub->_floor

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_scaleA100kPot
    _main->_scaleA10kPot
    _main->_scaleiA10kPot

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _isr in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _isr in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _isr in BANK18

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                20    20      0  888969
                                              0 BANK4      8     8      0
                                              0 BANK5      9     9      0
                _ConfigureOscillator
                            _InitApp
                     _InitializeTaps
                  _ReadSavedSettings
                          _USARTInit
                           ___awtoft
                            ___fttol
                        _adc_convert
                       _calcCosArray
             _getModulationDelayTime
                   _initSwitchBypass
                                _map
                _read_bottom_tactile
                   _read_top_tactile
                      _scaleA100kPot
                       _scaleA10kPot
                      _scaleiA10kPot
                    _set_subdivision
              _updateModulationArray
                 _updateSwitchBypass
                    _updateSwitchTap
                        _update_mode
                  _update_selectMode
 ---------------------------------------------------------------------------------
 (1) _update_selectMode                                    1     1      0    5976
                                              7 BANK1      1     1      0
               _setExpressionDisplay
                   _setPresetDisplay
 ---------------------------------------------------------------------------------
 (1) _update_mode                                          1     1      0   11828
                                              7 BANK1      1     1      0
                      _resetRingLEDs
                       _setPedalMode
 ---------------------------------------------------------------------------------
 (1) _updateSwitchTap                                      9     9      0   27947
                                             28 BANK1      9     9      0
                            ___aldiv
                _setDoublePressState
                    _setLongTapState
 ---------------------------------------------------------------------------------
 (2) _setLongTapState                                      4     2      2     247
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     683
                                              0 BANK1     15     7      8
 ---------------------------------------------------------------------------------
 (1) _updateSwitchBypass                                   2     2      0   31922
                                             28 BANK1      2     2      0
                _setDoublePressState
                 _setLongBypassState
              _setSwitchBypassRelays
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setLongBypassState                                   4     2      2     355
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) _setDoublePressState                                  4     2      2   26779
                                             24 BANK1      4     2      2
                      _resetRingLEDs
                       _setPedalMode
                   _setPresetDisplay
                           _showSave
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _showSave                                             1     1      0    9777
                                             23 BANK1      1     1      0
                      _ring_tactiles
                 _solidring_tactiles
 ---------------------------------------------------------------------------------
 (4) _solidring_tactiles                                   3     3      0    4822
                                             18 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (4) _ring_tactiles                                        5     5      0    4955
                                             18 BANK1      5     5      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _setPedalMode                                         0     0      0    8902
                      _resetRingLEDs
               _setExpressionDisplay
                   _setPresetDisplay
 ---------------------------------------------------------------------------------
 (2) _setPresetDisplay                                     3     3      0    3019
                                              4 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (2) _setExpressionDisplay                                 3     3      0    2957
                                              4 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _resetRingLEDs                                        0     0      0    2926
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (1) _updateModulationArray                               12    12      0  162429
                                             48 BANK2     12    12      0
                            ___awdiv
                           ___awtoft
                             ___wmul
           _getModulationSubdivision
                             _modCos
                             _modSaw
                          _modSawRev
                          _modSquare
                             _modTri
 ---------------------------------------------------------------------------------
 (2) _modTri                                              18    12      6   29916
                                             14 BANK2     18    12      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) _modSquare                                            8     2      6   34282
                                             40 BANK2      8     2      6
                           ___awtoft (ARG)
                             ___ftge
                             _modCos
 ---------------------------------------------------------------------------------
 (3) _modCos                                              20    14      6   31031
                                             20 BANK2     20    14      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _modSawRev                                            8     2      6   30187
                                             34 BANK2      8     2      6
                           ___awtoft (ARG)
                             _modSaw
 ---------------------------------------------------------------------------------
 (3) _modSaw                                              20    14      6   29971
                                             14 BANK2     20    14      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     837
                                              0 BANK1      9     5      4
 ---------------------------------------------------------------------------------
 (1) _set_subdivision                                      9     5      4   14064
                                             14 BANK2      9     5      4
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _scaleiA10kPot                                       12     9      3  163760
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (1) _scaleA10kPot                                        12     9      3  153110
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (1) _scaleA100kPot                                       12     9      3  153159
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (2) _pow                                                 18    12      6  137191
                                             53 BANK2     18    12      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  6     3      3   42795
                                             30 BANK2      6     3      3
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                 13    10      3   76054
                                             40 BANK2     13    10      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                               10     5      5    5741
                                             30 BANK2     10     5      5
                             ___ftge
                            ___ftneg
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    2763
                                              8 BANK1      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _read_top_tactile                                     1     1      0    3879
                                             18 BANK1      1     1      0
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _read_bottom_tactile                                  1     1      0    2709
                                             18 BANK1      1     1      0
                    _set_leds_bottom
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _map                                                 18     3     15   26100
                                             62 BANK1     18     3     15
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (1) _initSwitchBypass                                     2     2      0    2667
                                             26 BANK1      2     2      0
               _getSwitchBypassState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setSwitchBypassState                                 4     2      2    2633
                                             22 BANK1      4     2      2
              _setSwitchBypassRelays
 ---------------------------------------------------------------------------------
 (3) _setSwitchBypassRelays                                4     2      2    2155
                                             18 BANK1      4     2      2
            _updateSwitchBypassState
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _wait_ms                                              6     4      2    1831
                                             12 BANK1      6     4      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     374
                                              0 BANK1     12     4      8
 ---------------------------------------------------------------------------------
 (4) _updateSwitchBypassState                              2     0      2      77
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _getSwitchBypassState                                 2     0      2       0
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _getModulationDelayTime                               2     2      0   15382
                                             14 BANK2      2     2      0
                           ___altoft
                           ___awtoft
                            ___ftdiv
                            ___fttol
           _getModulationSubdivision
 ---------------------------------------------------------------------------------
 (2) _getModulationSubdivision                             2     0      2       0
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _calcCosArray                                         8     8      0  104328
                                             50 BANK2      8     8      0
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                             ___wmul
                                _cos
 ---------------------------------------------------------------------------------
 (2) _cos                                                  9     6      3   84615
                                             44 BANK2      6     3      3
                            ___ftadd
                             ___ftge
                                _sin
 ---------------------------------------------------------------------------------
 (3) _sin                                                 14    11      3   72910
                                             30 BANK2     14    11      3
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                          _eval_poly
                              _floor
 ---------------------------------------------------------------------------------
 (4) _floor                                                9     6      3   17096
                                             14 BANK2      9     6      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                6     2      4     630
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4    1603
                                              0 BANK2     14    10      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                                _map (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    2970
                                              0 BANK1      9     3      6
 ---------------------------------------------------------------------------------
 (5) ___altoft                                             8     4      4    2942
                                              8 BANK1      8     4      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           10     3      7   18319
                                             20 BANK2     10     3      7
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1060
                                             14 BANK2      6     2      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    7652
                                             14 BANK1     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    8987
                                             23 BANK2      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
                              _floor (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    8429
                                             33 BANK1     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3    2221
                                             30 BANK1      3     0      3
                            ___ftmul (ARG)
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    6392
                                             46 BANK1     16    10      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    4411
                                              8 BANK1      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2584
                                              0 BANK1      8     3      5
 ---------------------------------------------------------------------------------
 (1) _adc_convert                                          4     2      2      31
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (1) _USARTInit                                            3     1      2     108
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (1) _ReadSavedSettings                                    1     1      0    3253
                                              4 BANK1      1     1      0
                     _FLASH_ReadWord
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _set_leds_top                                         4     0      4    2048
                                              0 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 (3) _set_leds_bottom                                      2     0      2     878
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadWord                                       3     1      2     327
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (1) _InitializeTaps                                       3     3      0      99
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
                           _init_adc
                           _init_pwm
 ---------------------------------------------------------------------------------
 (2) _init_pwm                                             0     0      0       0
                        _init_timer0
                        _init_timer2
 ---------------------------------------------------------------------------------
 (3) _init_timer2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                  7     7      0    1301
                                             13 COMMON     1     1      0
                                             26 BANK0      6     6      0
                         _modulation
                          i1___awdiv
         i1_getModulationSubdivision
                     i1_set_leds_top
 ---------------------------------------------------------------------------------
 (8) i1_set_leds_top                                       4     0      4     236
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (8) i1_getModulationSubdivision                           2     0      2       0
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (8) i1___awdiv                                            9     5      4     352
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (8) _modulation                                          12     4      8     668
                                             14 BANK0     12     4      8
                          i1___aldiv
                           i1___lmul
 ---------------------------------------------------------------------------------
 (9) i1___lmul                                            12     4      8     144
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (9) i1___aldiv                                           15     7      8     352
                                             12 COMMON     1     1      0
                                              0 BANK0     14     6      8
                           i1___lmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _init_adc
     _init_pwm
       _init_timer0
       _init_timer2
   _InitializeTaps
   _ReadSavedSettings
     _FLASH_ReadWord
     _set_leds_bottom
     _set_leds_top
   _USARTInit
   ___awtoft
     ___ftpack
   ___fttol
     ___altoft (ARG)
       ___ftpack
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     _map (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
   _adc_convert
   _calcCosArray
     ___awtoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___wmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _cos
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftge
       _sin
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
   _getModulationDelayTime
     ___altoft
       ___ftpack
     ___awtoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _getModulationSubdivision
   _initSwitchBypass
     _getSwitchBypassState
     _setSwitchBypassState
       _setSwitchBypassRelays
         _updateSwitchBypassState
         _wait_ms
           ___lmul
   _map
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
   _read_bottom_tactile
     _set_leds_bottom
     _wait_ms
       ___lmul
   _read_top_tactile
     _set_leds_top
     _wait_ms
       ___lmul
   _scaleA100kPot
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _frexp
   _scaleA10kPot
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _frexp
   _scaleiA10kPot
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _frexp
   _set_subdivision
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
   _updateModulationArray
     ___awdiv
     ___awtoft
       ___ftpack
     ___wmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _getModulationSubdivision
     _modCos
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___wmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
     _modSaw
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _modSawRev
       ___awtoft (ARG)
         ___ftpack
       _modSaw (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
     _modSquare
       ___awtoft (ARG)
         ___ftpack
       ___ftge (ARG)
       _modCos (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
     _modTri
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
   _updateSwitchBypass
     _setDoublePressState
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setPedalMode
         _resetRingLEDs
           _set_leds_bottom
           _set_leds_top
         _setExpressionDisplay
           _set_leds_bottom
           _set_leds_top
         _setPresetDisplay
           _set_leds_bottom
           _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
       _showSave
         _ring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
         _solidring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
       _wait_ms
         ___lmul
     _setLongBypassState
     _setSwitchBypassRelays
       _updateSwitchBypassState
       _wait_ms
         ___lmul
     _setSwitchBypassState
       _setSwitchBypassRelays
         _updateSwitchBypassState
         _wait_ms
           ___lmul
   _updateSwitchTap
     ___aldiv
     _setDoublePressState
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setPedalMode
         _resetRingLEDs
           _set_leds_bottom
           _set_leds_top
         _setExpressionDisplay
           _set_leds_bottom
           _set_leds_top
         _setPresetDisplay
           _set_leds_bottom
           _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
       _showSave
         _ring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
         _solidring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
       _wait_ms
         ___lmul
     _setLongTapState
   _update_mode
     _resetRingLEDs
       _set_leds_bottom
       _set_leds_top
     _setPedalMode
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setExpressionDisplay
         _set_leds_bottom
         _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
   _update_selectMode
     _setExpressionDisplay
       _set_leds_bottom
       _set_leds_top
     _setPresetDisplay
       _set_leds_bottom
       _set_leds_top

 _isr (ROOT)
   _modulation
     i1___aldiv
       i1___lmul (ARG)
     i1___lmul
   i1___awdiv
   i1_getModulationSubdivision
   i1_set_leds_top

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     20      40       5       80.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     50      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     4A      4D       9       96.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      9      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      8      4A      13       92.5%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      9      35      15       66.3%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
ABS                  0      0     23A      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      40      18       80.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0      40      20       80.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
DATA                 0      0     23A      28        0.0%
BANK11              1A      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITBANK12           50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BANK12               0      0       0      31        0.0%
BITBANK13           50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BANK13               0      0       0      33        0.0%
BITBANK14           50      0       0      34        0.0%
BANK14               0      0       0      35        0.0%
BITBANK15           50      0       0      36        0.0%
BANK15               0      0       0      37        0.0%
BITBANK16           50      0       0      38        0.0%
BANK16               0      0       0      39        0.0%
BITBANK17           50      0       0      40        0.0%
BANK17               0      0       0      41        0.0%
BITBANK18           50      0       0      42        0.0%
BANK18               0      0       0      43        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sun Jan 15 19:31:27 2017

                        _update_mode 2FC8                         ___altoft@exp 00AE  
                        __CFG_CP$OFF 0000                        ___altoft@sign 00AF  
                   modSaw@inflection 0131                     scaleA100kPot@pwm 01E7  
                       ___awdiv@sign 00A6                   _topTactile_pressed 01CC  
         setDoublePressState@f_state 00B8                  ___wmul@multiplicand 0130  
                 USARTInit@baud_rate 00A0                      _updateSwitchTap 0610  
                       ___ftadd@exp1 00CD                         ___ftadd@exp2 00CC  
                       ___ftadd@sign 00CB                                  l404 2026  
                                l371 0D4C                                  l381 0E36  
                                l608 2CEF                                  l377 0DFC  
               __size_of_adc_convert 0013                                  l379 0E3C  
                                l388 0F36                                  l821 2076  
                                l823 2079                                  l655 26BF  
                                l824 207C                                  l816 2538  
                                l825 207F                                  l817 255C  
                                l826 2082                                  l828 2085  
                                l829 20A9                                  l992 236A  
                                _GIE 005F                                  l988 2340  
                                _RB1 0069                                  _PR2 001B  
       solidring_tactiles@ring_delay 00B4                                  _cos 2703  
                                _map 1A11                                  _exp 132C  
                                _log 1021                                  _isr 0004  
                                _tap 02A0                                  _sin 1631  
                                _pow 10F2                         __CFG_BORV$LO 0000  
                                wreg 0009                         __CFG_IESO$ON 0000  
                       __CFG_FOSC$HS 0000                  set_subdivision@tmpX 0135  
            __end_of_set_leds_bottom 20AA                         __CFG_LVP$OFF 0000  
                     i1___aldiv@sign 0029                         ___ftdiv@cntr 00D8  
                       ___ftdiv@sign 00DD                                 l1000 238A  
                               l1004 23B8                                 l1030 2564  
                               l1023 2E07                                 l1015 2FF8  
                               l1025 2E0D                                 l1041 25AE  
                               l2002 2D79                                 l1026 2E14  
                               l1027 2E28                                 l2200 1FA9  
                               l2057 1894                                 l1450 0627  
                               l2260 19F7                                 l2176 25FC  
                               l1464 06E2                                 l2177 2604  
                               l2169 25E9                                 l2372 1116  
                               l2390 1746                                 l1748 22D5  
                               ?_cos 014C                                 ?_map 00DE  
                               l8010 19A3                                 l8030 19E1  
                               l8112 2051                                 l8042 1A08  
                               l8202 1E4E                                 l9010 1316  
                               l8124 2DEF                                 l8140 1C7C  
                               l8212 2686                                 l8036 19EE  
                               l8028 19D3                                 l8300 2FA9  
                               l9004 130A                                 l9100 0731  
                               ?_exp 0148                                 ?_log 013E  
                               l8134 1C66                                 l8038 19FA  
                               l8054 21B1                                 l8222 1BC5  
                               l9102 077B                                 l9030 061C  
                               l8232 1BE7                                 l8162 1CD6  
                               l8154 1CBD                                 l8330 0837  
                               l9106 07A1                                 l9050 065B  
                               l9114 07DF                                 l9132 2335  
                               l8252 1C2F                                 l9212 1D10  
                               l8316 14BA                                 l8092 23F7  
                               l8084 23D3                                 l9052 0678  
                               l9036 0639                                 ?_isr 0070  
                               l8174 2EAD                                 l9142 235C  
                               l8430 13BD                                 l9206 1D01  
                               l9310 0487                                 l7800 2530  
                               l8192 1DE1                                 l8344 1666  
                               l8256 1C37                                 l8424 1382  
                               l8408 1339                                 l8520 112A  
                               l9312 04CD                                 l8600 217A  
                               l9072 06AB                                 l9400 0C38  
                               l9154 237F                                 l8418 135E  
                               l8514 111E                                 l9226 1911  
                               l9250 1AB4                                 l9314 0513  
                               l9322 05B3                                 l9058 0683  
                               l9074 06B3                                 l9410 0C96  
                               l7820 208C                                 l7804 253F  
                               l8188 1DD9                                 l8356 1702  
                               l9164 23A6                                 l8452 1465  
                               l8532 11A4                                 l9252 1AB8  
                               l9260 1AC9                                 l9332 05D9  
                               l9316 0559                                 l9324 05CA  
                               l9308 0441                                 l8292 2E1C  
                               l8700 18EE                                 l9092 0725  
                               l9084 06DA                                 l9076 06C2  
                               l7902 1F9B                                 l7750 2F75  
                               l8374 2E54                                 l9190 1B3F  
                               l9254 1ABC                                 l9262 1AE2  
                               l9246 1AAA                                 l9318 059F  
                               l9326 0423                                 l9414 0CD6  
                               l7912 1FCD                                 l7904 1FA5  
                               l8472 2F5C                                 l8464 2F47  
                               l8376 2E64                                 l8392 1058  
                               l8528 1184                                 l9184 1B32  
                               l9256 1AC2                                 l9248 1AB0  
                               l9328 05D0                                 l8608 218A  
                               l8616 2195                                 l8704 18FC  
                               l7770 25D5                                 l7762 25BF  
                               l7922 1FE8                                 l7850 20FB  
                               l7930 20C1                                 l8634 274D  
                               l8466 2F56                                 l8458 2F41  
                               l7746 2F6B                                 l8386 1045  
                               l8722 247A                                 l8650 0B11  
                               l9338 05F3                                 l9442 0E3E  
                               l9370 0B9E                                 l7908 1FBB  
                               l7828 2D73                                 l7852 210B  
                               l9268 1B21                                 l8740 24A0  
                               l8732 2482                                 l8716 246F  
                               l8660 215A                                 l9292 03DE  
                               l9460 0F79                                 l9452 0ED5  
                               l9428 0D94                                 l9380 0BAE  
                               ?_sin 013E                                 l7766 25C6  
                               l7862 1F32                                 l7934 20D7  
                               l8734 248E                                 l8646 09CF  
                               l9454 0F0C                                 l9438 0DFE  
                               l7792 2510                                 l7776 25EE  
                               l7768 25D0                                 l7872 1F48  
                               l7952 1E6D                                 l8744 24A9  
                               l8904 25AA                                 l9464 0FC3  
                               l9456 0F39                                 l9448 0E86  
                               l7794 2518                                 l8834 26D2  
                               l8770 22A8                                 l7778 25F6  
                               l7890 1F75                                 l7866 1F39  
                               l7970 1EBE                                 l8914 121E  
                               l8906 25B2                                 l9386 0BBD  
                               l7796 2520                                 l8836 26DB  
                               l8772 22AA                                 l8780 22B2  
                               l7892 1F7F                                 l7884 1F62  
                               l8748 24B1                                 l9476 0FF6  
                               ?_pow 0155                                 l7798 2528  
                               l9910 22C1                                 l8774 22AC  
                               l7894 1F84                                 l7982 1EDA  
                               l7974 1EC6                                 l7958 1E83  
                               l8950 127E                                 l8926 123D  
                               l8918 1231                                 l8686 18B5  
                               l8678 18A5                                 l9920 2092  
                               l9912 22C6                                 l8776 22AE  
                               l7896 1F88                                 l8952 1286  
                               l8696 18E3                                 l8688 18C3  
                               l8872 2FF5                                 l9914 22CB  
                               l7986 1EE2                                 l9906 05B9  
                               l8946 126C                                 l8866 2FEB  
                               l8874 2FFC                                 l9916 22D0  
                               l9908 1ACE                                 l8980 12BB  
                               l9918 2545                                 l8966 12A2  
                               l8894 2593                                 l8896 2598  
                               l8888 2587                                 l8994 12F0  
                               l8986 12D6                                 l8978 12B7  
                               l8996 12F6                                 _PEIE 005E  
                               _RCIE 048D                                 u8005 2100  
                               u8115 1F63                                 u8205 1F9C  
                               u8145 1F76                                 u8305 1E8F  
                               u8315 1E9F                                 u9045 1175  
                               u9205 18B8                                 u9125 2D47  
                               u8175 1F89                                 u8335 1EC7  
                               u8345 1ECD                                 u8425 19AA  
                               u9065 2D97                                 u9305 2485  
                               u9225 18C4                                 u9075 100B  
                               u9235 18D8                                 u9405 2E3B  
                               u8605 1C8E                                 u7805 2F7D  
                               u9325 248F                                 u8525 23D1  
                               u9085 216B                                 u9245 18E4  
                               u8615 1C9E                                 u8375 1EE3  
                               u8455 19D4                                 u9335 2499  
                               u8535 23F5                                 u9440 26D9  
                               u9425 26B8                                 u8625 1CBE  
                               u8385 1EE9                                 u9345 24A1  
                               u9435 26CB                                 u8635 1CCD  
                               u8820 16FE                                 u7925 260B  
                               u7845 25CB                                 u8645 1CD7  
                               u8485 19EF                                 u8830 16FF  
                               u8760 2FA7                                 u7865 25E4  
                               u8745 1BF0                                 u9625 1217  
                               u9545 2576                                 u8930 139B  
                               u9395 2E35                                 u7795 2F76  
                               u9635 122A                                 u9475 2FDB  
                               u8940 139C                                 u7885 25F1  
                               u7965 2D7A                                 u7975 2D7F  
                               u8865 2E59                                 u9665 1247  
                               u9915 0664                                 u8975 145C  
                               u9775 12C7                                 u9945 068D  
                 scaleA100kPot@input 0167                         __CFG_WRT$OFF 0000  
                      __CFG_FCMEN$ON 0000                    _scaleA10kPot$2908 01EA  
                  _scaleA10kPot$2909 01ED                                 _iCnt 025D  
                               _main 0B7D                         ___ftpack@arg 00A0  
                               cos@f 014C                         ___ftpack@exp 00A3  
                               fsr0h 0005                                 fsr1h 0007  
                               fsr0l 0004                                 indf0 0000  
                               indf1 0001                                 fsr1l 0006  
                               map@x 00DE                                 btemp 007E  
                               exp@x 0148                                 log@x 013E  
                      __CFG_BOREN$ON 0000                                 sin@f 013E  
                               sin@y 0142                                 ltemp 007E  
                               pow@x 0155                                 pow@y 0158  
                               start 0318                                 ttemp 007E  
                               wtemp 007E         __end_of_getSwitchBypassState 2C8A  
                    _expressModeCnst 01E2         updateSwitchTap@tapCntDivisor 00C2  
       __end_of_setSwitchBypassState 2DA8                      ?i1_set_leds_top 0070  
                      __CFG_MCLRE$ON 0000                         ___ftmul@cntr 00BC  
                       ___ftmul@sign 00BD                      __end_of_InitApp 2F32  
                       ___fttol@exp1 012D                                ??_cos 00F0  
                              ??_map 00ED                __size_of_calcCosArray 0081  
                              ??_exp 014B                                ??_log 0141  
                       ___fttol@lval 0129                                ??_isr 003A  
                              ??_sin 0141                                ??_pow 015B  
                    _switchBypass_up 0268            __size_of_initSwitchBypass 000F  
                    __end_of___aldiv 1905                                ?_main 0070  
                     i1___awdiv@sign 0076         getModulationDelayTime@subDiv 012E  
                    __end_of___awdiv 24B6                      __end_of___ftadd 2000  
                              _CCPR1 0291                                _CCPR2 0298  
                              _CCPR3 0311                                _CCPR4 0318  
                              _CCPR5 031C                        __CFG_WDTE$OFF 0000  
                    __end_of___ftdiv 1CF8                      __end_of___ftneg 2CA0  
                              u10025 06F3                                u10035 070A  
                              u10205 239F                                u10045 073A  
                              u10055 074F                                u10145 2355  
                              u10305 03CC                                u10065 0763  
                              u10315 03DC                      __end_of___ftmul 1F0A  
                              u10325 03FA                                u10085 0780  
                              u10405 0C16                                u10335 040A  
                              u10415 0C36                                u10345 042A  
                              u10505 0E64                                u10425 0CB4  
                              u10515 0E84                                u10435 0CD4  
                    ___awdiv@divisor 00A0                                u10285 1B1C  
                              u10445 0D72                                u10295 03B8  
                              u10455 0D92                                u10545 0F57  
                              u10465 0DE9                      __end_of___ftsub 2ED3  
                              u10555 0F77                                u10475 0DF7  
                    __end_of___fttol 1A11                                u10485 0E18  
                              u10495 0E34                                i1l140 001B  
                              i1l142 0126                                i1l139 0313  
                              i1l816 2308                                i1l817 232A  
                    ___awdiv@counter 00A5                                _RCREG 0199  
                              _SPBRG 019B                   __end_ofsin@coeff_a 2848  
                 __end_ofsin@coeff_b 2854                                _TXREG 019A  
                              _UQEnd 005A                  _ConfigureOscillator 2C82  
        __size_of_setLongBypassState 0021                     _setPresetDisplay 2035  
                       ?_init_timer0 0070                         ?_init_timer2 0070  
                ___lmul@multiplicand 00A4                         ___lltoft@exp 00AD  
                    _switchTap_state 01E6                    ??_setLongTapState 00A2  
                      ___awtoft@sign 00AD                                _floor 1DA3  
                              _ldexp 1BB8                                _frexp 219D  
                              _myBuf 03A0                                _errno 0251  
           _getModulationSubdivision 2F32                        ___ftpack@sign 00A4  
                              _timer 0056                     __end_ofi1___lmul 2F02  
                              sin@x2 0148                                ltemp0 007E  
                              ltemp1 0082                                ltemp2 0086  
                              ltemp3 0080                      __end_of_wait_ms 2035  
                              pow@yi 0163                      scaleA10kPot@pwm 01E7  
                 __size_of_USARTInit 0044                                ttemp0 007E  
                              ttemp1 0081                                ttemp2 0084  
                              ttemp3 0087                                ttemp4 007F  
                              status 0003          __end_of_read_bottom_tactile 2375  
                 __size_ofi1___aldiv 0082                                wtemp0 007E  
                              wtemp1 0080                                wtemp2 0082  
                              wtemp3 0084                                wtemp4 0086  
                              wtemp5 0088                                wtemp6 007F  
                 __size_ofi1___awdiv 0051                set_subdivision@scalar 0132  
     __size_of_setSwitchBypassRelays 0036        __end_of_setSwitchBypassRelays 2FC8  
                       _calcCosArray 277F                          exp@exponent 0152  
               ?_ConfigureOscillator 0070                   _updateSwitchBypass 1208  
                        ldexp@newexp 0141              __end_of_updateSwitchTap 07F8  
                    __initialization 031A                          log@exponent 0142  
        updateModulationArray@iAngle 015B              _updateSwitchBypassState 0003  
                       __end_of_main 1000              __size_of_InitializeTaps 0026  
                i1___lmul@multiplier 0070               __size_of_scaleA100kPot 0085  
                        modCos@angle 0134                  ?_updateSwitchBypass 0070  
                     __CFG_LPBOR$OFF 0000               ring_tactiles@iLed_1568 00B5  
                        modCos@shift 013F                      _set_subdivision 1A9C  
        updateModulationArray@subDiv 0159                               ??_main 025E  
                      ___fttol@sign1 0128   __end_ofi1_getModulationSubdivision 2EA5  
         i1_getModulationSubdivision 2E79                        ?_scaleA10kPot 0167  
            __size_of_FLASH_ReadWord 0020            setLongBypassState@f_state 00A0  
         __end_of_solidring_tactiles 221D                     ?_set_leds_bottom 00A0  
                             ?_floor 012E                               ?_ldexp 013E  
                             ?_frexp 00A0                     __end_of___altoft 2123  
                             _ADRESH 009C                               _ADRESL 009B  
                   ___awdiv@dividend 00A2                     __end_of___awtoft 2E06  
                   __end_of___ftpack 261B                 ??_updateSwitchBypass 00BC  
                   __end_of___lltoft 2E79                               i1l2057 1812  
                             i1l6200 1861                               i1l7010 01A6  
                             i1l6204 186C                               i1l7012 01B6  
                             i1l7014 01B8                               i1l6208 187A  
                             i1l6160 2EDB                               i1l7040 0232  
                             i1l7024 01EC                               i1l7032 0213  
                             i1l7042 0241                               i1l7026 01F5  
                             i1l6164 2EE5                               i1l7052 0289  
                             i1l7060 02DB                               i1l7036 0227  
                             i1l7044 0243                               i1l7028 0204  
                             i1l6190 1833                               i1l6182 1823  
                             i1l6192 1841                               i1l7072 030B  
                             i1l7076 0310                               i1l7078 0312  
                             i1l6904 2EA0                               i1l6922 2428  
                             i1l6940 244E                               i1l6932 2430  
                             i1l6916 241D                               i1l6934 243C  
                             i1l6870 22EA                               i1l6944 2457  
                             i1l6872 22F0                               i1l6890 2E88  
                             i1l6874 22F6                               i1l6882 230E  
                             i1l6948 245F                               i1l6876 22FC  
                             i1l6964 00BB                               i1l6878 2302  
                             i1l6982 0140                               i1l6896 2E8D  
                             i1l6968 00C8                               i1l6898 2E9B  
                             i1l6988 015A                               i1l9922 2313  
                             _PMADRH 0192                               _PMADRL 0191  
                             _PMDATH 0194                               _PMDATL 0193  
                             _PMCON2 0196                               u710_25 0306  
                             u553_25 1836                               u706_23 026B  
                             u555_25 1842                               u547_25 2EE6  
                             u707_25 0280                               u556_25 1856  
                             u548_25 2EED                               u557_25 1862  
                             u709_25 02ED                               u673_25 2433  
                             u690_25 0151                               u675_25 243D  
                             u684_23 00F8                               u676_25 2447  
                             u677_25 244F                               u685_25 0108  
                             u694_23 0176                               u686_25 0111  
                             u688_25 0137                               u699_23 01DA  
                     _debounce_count 0249                          modSaw@angle 012E  
                     _debounce_mode1 024B                       _debounce_mode2 024D  
                        modSaw@shift 013C                               _URBuff 0320  
                          ??_InitApp 00A0                ??_ConfigureOscillator 00A0  
           __end_of_read_top_tactile 23C3              ?_getModulationDelayTime 0070  
                     __CFG_PWRTE$OFF 0000                               ___ftge 20AA  
                             ___lmul 2F62                            ??___aldiv 00A8  
                             ___wmul 2D70                    _update_selectMode 255D  
                          ??___awdiv 00A4                            ??___ftadd 00C7  
                     __CFG_STVREN$ON 0000                            ??___ftdiv 00D4  
                          ??___ftneg 00C1                            ??___ftmul 00B4  
                          ??___ftsub 00F0                            ??___fttol 0124  
                        modTri@angle 012E                               _modCos 1485  
                   __end_of_init_adc 2CAA                               _modSaw 0802  
                             _modTri 099A                     __end_of_init_pwm 229F  
                 ?_update_selectMode 0070                          modTri@shift 0137  
                   ___awdiv@quotient 00A7                __end_of_resetRingLEDs 2D3C  
                             _tmpVal 025B                    __end_of_USARTInit 22E3  
                     ??_scaleA10kPot 00F0                    __end_ofi1___aldiv 1883  
                             floor@i 0132                               floor@x 012E  
              ___ftmul@f3_as_product 00B9                    __end_ofi1___awdiv 2464  
            FLASH_ReadWord@flashAddr 00A0                               sin@sgn 014B  
                   __end_of_showSave 2D0A                  ??_update_selectMode 00A7  
               _getSwitchBypassState 2C86                            ??_wait_ms 00AE  
               _setSwitchBypassState 2D8C                        _scaleA100kPot 1905  
       __end_of_setExpressionDisplay 2D22               __size_of_scaleiA10kPot 00AB  
             setLongTapState@f_state 00A0                     __end_ofexp@coeff 281E  
                   __end_oflog@coeff 2839              __end_of__initialization 0397  
                         ___altoft@c 00A8       __end_of_getModulationDelayTime 2509  
                         ___ftadd@f1 00C1                           ___ftadd@f2 00C4  
                         ___ftge@ff1 00A0                           ___ftge@ff2 00A3  
                  _bypass_turning_on 01C0                         eval_poly@res 013B  
                         ___ftdiv@f1 00D1                           ___ftdiv@f2 00CE  
                         ___ftdiv@f3 00D9                       _top_push_state 004C  
          ??_updateSwitchBypassState 00A2                           ___ftneg@f1 00BE  
                _switchBypass_toggle 0259                           ___awtoft@c 00A8  
              __end_of_ring_tactiles 2413            __end_of_update_selectMode 25B6  
            __end_of_set_subdivision 1B27                           ___ftmul@f1 00AE  
                         ___ftmul@f2 00B1                           ___ftsub@f1 013A  
                         ___ftsub@f2 0137                           ___fttol@f1 0120  
                   ?_updateSwitchTap 0070                         ?_update_mode 0070  
                     __pcstackCOMMON 0070                         __pidataBANK0 2CD1  
                       __pidataBANK2 07FF                         __pidataBANK3 2D56  
                       __pidataBANK4 2C8A                           ___lltoft@c 00A8  
                      __end_of_floor 1E56                        __end_of_ldexp 1C4F  
                      __end_of_frexp 21DD                     _initSwitchBypass 2CC2  
                          ?i1___lmul 0070                _updateModulationArray 039B  
                    _doubleTap_state 005C                       _OPTION_REGbits 0095  
                       modCos@period 0142                         modCos@tmpVal 0145  
              ?_getSwitchBypassState 00A0                ?_setSwitchBypassState 00B6  
                     ?_scaleA100kPot 0167                              ??_floor 0131  
                            ??_ldexp 0143                              ??_frexp 00A4  
               __size_of_init_timer0 0007                 __size_of_init_timer2 0009  
                  i1___aldiv@divisor 0020                    i1___aldiv@counter 0028  
                      ?_setPedalMode 0070                           __pbssBANK0 0052  
                         __pbssBANK2 016A                           __pbssBANK3 01A0  
                         __pbssBANK4 0220                           __pbssBANK5 02A0  
                         __pbssBANK6 0320                           __pbssBANK7 03A0  
                 __size_of_eval_poly 0072                     ??i1_set_leds_top 0074  
                    __CFG_VCAPEN$OFF 0000                   __size_of_modSawRev 001C  
                 __size_of_modSquare 003D             __end_of_setPresetDisplay 206F  
                         _delay_time 0044                     _long_press_limit 004A  
       __size_of_setDoublePressState 003D                           _delayfound 024F  
                         __pmaintext 0B7D                       _InitializeTaps 2E29  
                            ?___ftge 00A0                              ?___lmul 00A0  
                            ?___wmul 012E       updateModulationArray@thisAngle 0157  
                         __pintentry 0004                        _scaleiA10kPot 1CF8  
                         _blink_rate 004E                        ??_adc_convert 00A2  
                            ?_modCos 0134                            ?___altoft 00A8  
                            ?_modSaw 012E                              ?_modTri 012E  
                     ___lmul@product 00A8                      _setLongTapState 2D3C  
                          ?___awtoft 00A8                            ?___ftpack 00A0  
                modSquare@inflection 014B                            ?___lltoft 00A8  
                         ??i1___lmul 0078           ??_getModulationSubdivision 00A2  
                     _FLASH_ReadWord 2DC4                   i1___awdiv@dividend 0072  
    __end_of_updateSwitchBypassState 0004                          modulation@x 002E  
                        modulation@y 0032                           _ldexp$2708 0145  
                    _debounce_bypass 0247                       ??_setPedalMode 00A7  
                 USARTWriteInt@F3536 0234                        _suspend_blink 016A  
       setSwitchBypassRelays@f_state 00B2                         modSaw@period 013F  
                            _UQFront 005B                            ?_init_adc 0070  
                          ?_init_pwm 0070                     _adjust_mod_delay 01BE  
                            _InitApp 2F02                 __end_of_scaleA10kPot 1BB8  
             __end_of_InitializeTaps 2E4F                        ?_set_leds_top 00A0  
                         _knob1_prev 01CD           __size_of_update_selectMode 0059  
                 i1___awdiv@quotient 0077                           _knob2_prev 01CF  
                         _knob3_prev 01D1                           _knob4_prev 01D3  
                         _knob5_prev 01D5                     ?_set_subdivision 012E  
                          ?_showSave 0070                              ___aldiv 1883  
                     ?_scaleiA10kPot 0167                      __size_of___ftge 003C  
                            ___awdiv 2464                      __size_of___lmul 0030  
                            ___ftadd 1F0A                              ___ftdiv 1C4F  
                            ___ftneg 2C97                           _knob_1_pos 01AC  
                         _knob_2_pos 01AE                      __size_of___wmul 001C  
                            ___ftmul 1E56                           _knob_3_pos 01B0  
                            ___ftsub 2EA5                              ___fttol 198A  
                         _knob_4_pos 01B2                           _knob_5_pos 01B4  
                  _switchTap_pressed 016B                           ??___altoft 00AC  
               _setExpressionDisplay 2D0A               ?_updateModulationArray 0070  
                    __size_of_modCos 01AC               __end_of_FLASH_ReadWord 2DE4  
                    __size_of_modSaw 0198                           ??___awtoft 00AB  
                         ??___ftpack 00A5                      __size_of_modTri 01E3  
                  __end_of_eval_poly 268D                   InitializeTaps@itap 00A1  
                         ??___lltoft 00AC                              __ptext1 255D  
                            __ptext2 2FC8                              __ptext3 0610  
                            __ptext4 2D3C                              __ptext5 1883  
                            __ptext6 1208                              __ptext7 1000  
                            __ptext8 2160                              __ptext9 2CF6  
         __end_of_setLongBypassState 1021          ?i1_getModulationSubdivision 0070  
             ??_getSwitchBypassState 00A2                    __end_of_modSawRev 2DC4  
                          _T2CONbits 001C                         __size_of_cos 007C  
                       __size_of_map 008B                         __size_of_exp 0159  
                       __size_of_log 00D1                         __size_of_isr 0314  
             ??_setSwitchBypassState 00B8                         __size_of_sin 01CF  
                       __size_of_pow 0116                  __end_of_adc_convert 2CF6  
                       modTri@period 013A                    __end_of_modSquare 2160  
                    ??_scaleA100kPot 00F0                     ___aldiv@dividend 00A4  
                       modTri@tmpVal 013D                              _wait_ms 2003  
                            clrloop0 2CB7                 end_of_initialization 0397  
                            exp@sign 0154                           _modulation 221D  
                            init_ram 2CAA                           ??_init_adc 00A0  
                            initloop 2CAB                           ??_init_pwm 00A0  
       updateSwitchBypassState@state 00A0                   _solidring_tactiles 21DD  
                      _longTap_timer 01B8                        _longTap_state 004F  
                      _longTap_start 01C5                       ??_set_leds_top 00A4  
                  ?_read_top_tactile 0070                      ?_InitializeTaps 0070  
                            pow@sign 0162                    scaleA10kPot@input 0167  
            __end_of_setLongTapState 2D56                _setSwitchBypassRelays 2F92  
             i1set_leds_top@ledState 0072                   ??_read_top_tactile 00B2  
                          _RCSTAbits 019D                           ??_showSave 00B7  
                   _mod_time_changed 01E4                     _longBypass_timer 01B6  
                   ___aldiv@quotient 00AB                     _longBypass_state 005D  
                   _longBypass_start 01C4         __size_of_read_bottom_tactile 004A  
                ?_solidring_tactiles 0070                         __pstringtext 2800  
          FLASH_ReadWord@GIEBitValue 00A2                ?_setExpressionDisplay 0070  
               __size_of_update_mode 0038                      ?_FLASH_ReadWord 00A0  
                  _expressionChannel 01E3                            _PORTAbits 000C  
                          _PORTCbits 000E                            _PORTDbits 000F  
                          _PORTEbits 0010                           _test_timer 0241  
                          _USARTInit 229F                            _TRISBbits 008D  
                          _TRISCbits 008E                            _TRISDbits 008F  
                          _TRISEbits 0090                            _TRISFbits 030C  
                          _TRISGbits 030D                            i1___aldiv 1801  
                          i1___awdiv 2413                 ??_solidring_tactiles 00B2  
        __end_of_ConfigureOscillator 2C86                           map@out_max 00EA  
                         map@out_min 00E7          __size_of_updateSwitchBypass 0124  
           __end_of_initSwitchBypass 2CD1                          _CCP1CONbits 0293  
                        ___ftdiv@exp 00DC             __size_of_set_leds_bottom 003B  
                        _CCP2CONbits 029A                            _TXSTAbits 019E  
               _switchBypass_pressed 01BA                          _CCP3CONbits 0313  
                        _CCP4CONbits 031A                          _CCP5CONbits 031E  
                        _CCP6CONbits 0613                      ??_scaleiA10kPot 00F0  
                        _CCP7CONbits 0616                          ___ftmul@exp 00B8  
                 adc_convert@channel 00A3                          _CCP8CONbits 0619  
                        _CCP9CONbits 061C                 set_leds_top@ledState 00A2  
                     __end_of___ftge 20E6                 __end_of_setPedalMode 2E29  
                     __end_of___lmul 2F92                       __end_of___wmul 2D8C  
                       _double_timer 01A0                          _adc_convert 2CE3  
   __end_of_getModulationSubdivision 2F62                       _switchTap_down 01CB  
                     __end_of_modCos 1631                       __end_of_modSaw 099A  
                     __end_of_modTri 0B7D                       modSawRev@angle 0142  
                         floor@expon 0135                i1___lmul@multiplicand 0074  
                  __size_ofi1___lmul 002F                  start_initialization 031A  
                         ?_USARTInit 00A0                           eval_poly@d 0137  
                         eval_poly@n 0139                           eval_poly@x 0134  
              _bottomTactile_pressed 01BF                  _setDoublePressState 2160  
                         ldexp@value 013E                           ?i1___aldiv 0020  
                        __end_of_cos 277F                          __end_of_map 1A9C  
                        __end_of_exp 1485                          __end_of_log 10F2  
                        __end_of_isr 0318                           ?i1___awdiv 0070  
                        __end_of_sin 1800                          __end_of_pow 1208  
              __size_of_scaleA10kPot 0091                   _adjusted_pot_value 0245  
                        ?_modulation 002E                   scaleiA10kPot@input 0167  
                         frexp@value 00A0               __size_of_resetRingLEDs 001A  
             ?_setSwitchBypassRelays 00B2                 ?_setDoublePressState 00B8  
__size_ofi1_getModulationSubdivision 002C                     ?_setLongTapState 00A0  
                  ?_setPresetDisplay 0070                             ??___ftge 00A6  
                           ??___lmul 00A8               ??_setExpressionDisplay 00A4  
                           ??___wmul 00F0                   ??_setPresetDisplay 00A4  
                        __pdataBANK0 0040                          __pdataBANK2 016C  
                        __pdataBANK3 01CD                          __pdataBANK4 0266  
                           ??_modCos 013A                             ??_modSaw 00F0  
                 i1___aldiv@dividend 0024                             ??_modTri 00F0  
                      _tap_iteration 01DD             __size_of_updateSwitchTap 01E8  
                  __size_of___altoft 003D                    __size_of___awtoft 0022  
                  __size_of___ftpack 0065                          __pbssBIGRAM 238A  
                       _scaleA10kPot 1B27                    __size_of___lltoft 002A  
                      ??_init_timer0 00A0                        ??_init_timer2 00A0  
               __end_of_set_leds_top 255D                            ___latbits 0003  
     setExpressionDisplay@ledChannel 00A6                   _switchBypass_state 0051  
                      __pcstackBANK0 0020                        __pcstackBANK1 00A0  
                      __pcstackBANK2 0120                        __pcstackBANK3 01E7  
                      __pcstackBANK4 025E                        __pcstackBANK5 02CC  
             __size_of_ring_tactiles 0050                       _expSwitchState 01E1  
   updateModulationArray@iAngle_2407 0156                     i1___lmul@product 0078  
                   scaleiA10kPot@pwm 01E7             ?_updateSwitchBypassState 00A0  
                         sin@coeff_a 2839                           sin@coeff_b 2848  
                 i1___aldiv@quotient 002A                     modCos@inflection 0137  
                      ?_calcCosArray 0070                             ?_InitApp 0070  
              ??_setDoublePressState 00BA                    __size_of_init_adc 000A  
                  __size_of_init_pwm 0041                            _main$2900 02CF  
                          _main$2901 02D2                            _main$2899 02CC  
            ??_updateModulationArray 0150                             ?___aldiv 00A0  
                  ??_set_leds_bottom 00A2                   _currentBypassState 01E0  
                           ?___awdiv 00A0                             ?___ftadd 00C1  
                           ?___ftdiv 00CE                             ?___ftneg 00BE  
                           ?___ftmul 00AE                             ?___ftsub 0137  
                           ?___fttol 0120                    __size_of_showSave 0014  
                 _modulation_changed 01C7                    i1___awdiv@divisor 0070  
                 _scaleA100kPot$2904 01EA                   _scaleA100kPot$2905 01ED  
                  i1___awdiv@counter 0075                          _blink_delay 0266  
                __size_of_modulation 0041                        _resetRingLEDs 2D22  
                        _blink_state 01DF                            _eval_poly 261B  
                        ??_USARTInit 00A2                             _CCPTMRS0 029D  
                           _CCPTMRS1 029E                             _CCPTMRS2 029F  
                        ??i1___aldiv 007C                             ?_wait_ms 00AC  
                        ??i1___awdiv 0074                            _modSawRev 2DA8  
           ??_getModulationDelayTime 00F0                  _read_bottom_tactile 232B  
                     __size_of_floor 00B3                       __size_of_ldexp 0097  
                     __size_of_frexp 0040                            _modSquare 2123  
                 calcCosArray@iAngle 0159                       _presetModeCnst 01E5  
                 _setLongBypassState 1000                  __end_of_init_timer0 07FF  
                __end_of_init_timer2 2C97                            _mod_value 0253  
                          _mod_timer 01A4                     ??_InitializeTaps 00A0  
                    ___aldiv@divisor 00A0    __size_of_getModulationSubdivision 0030  
                    ___aldiv@counter 00A9            ?_getModulationSubdivision 00A0  
                     _presetSaveMode 005F                       ___wmul@product 0132  
                     ??_calcCosArray 0152                             _LATBbits 010D  
                           _LATDbits 010F                             _LATFbits 038C  
                           _LATGbits 038D                       _mod_delay_time 01D9  
                          clear_ram0 2CB6                   calcCosArray@tmpVal 0156  
                          _tap_timer 0052                  ?_setLongBypassState 00A0  
                          _tap_total 023D                __size_of_setPedalMode 0023  
                      set_leds_top@x 00A0                             _PIR1bits 0011  
                      _ring_tactiles 23C3                      _longBypass_down 01C2  
                   ??_FLASH_ReadWord 00A2                      _longBypass_save 01C3  
               ?_read_bottom_tactile 0070              __size_ofi1_set_leds_top 0048  
          initSwitchBypass@initState 00BA                            map@in_max 00E4  
                          map@in_min 00E1                       ?_resetRingLEDs 0070  
                          _sub_timer 01A8                           _ADCON0bits 009D  
                           i1___lmul 2ED3                           _ADCON1bits 009E  
           __size_of_set_subdivision 008B                    ___wmul@multiplier 012E  
                   set_subdivision@x 012E                     set_subdivision@y 0130  
          __size_of_read_top_tactile 004E                 ??_setLongBypassState 00A2  
                         ?_eval_poly 0134        __size_of_getSwitchBypassState 0004  
                        _modCos$2912 013C        __size_of_setSwitchBypassState 001C  
                         ?_modSawRev 0142                __end_of_scaleA100kPot 198A  
                  ??_updateSwitchTap 00BC                    ___lmul@multiplier 00A0  
                         ?_modSquare 0148                      modSquare@tmpVal 014E  
                       _setPedalMode 2E06                    _ReadSavedSettings 268D  
                  ?_initSwitchBypass 0070                    ring_tactiles@iLed 00B3  
                        _oldBaseTime 0255                       wait_ms@timeSec 00AC  
                 ?_ReadSavedSettings 0070                          _modSaw$2914 0134  
                        _modSaw$2915 0137                       wait_ms@timemsl 00AE  
                          frexp@eptr 00A3          setSwitchBypassState@f_state 00B6  
                 ??_initSwitchBypass 00BA                     __size_of_InitApp 0030  
                     ?_ring_tactiles 0070                            modSaw@mod 013A  
                        _mode1_state 01C6                        ??_update_mode 00A7  
                        _mode2_state 005E                            isr@subDiv 007D  
              ??_read_bottom_tactile 00B2                          _modTri$2913 0134  
                updateSwitchTap@iCnt 00C4                  ??_ReadSavedSettings 00A4  
                         _APFCONbits 011D                     __size_of___aldiv 0082  
                   __size_of___awdiv 0052                     __size_of___ftadd 00F6  
                   __size_of___ftdiv 00A9                         ?_adc_convert 00A0  
                   __size_of___ftneg 0009                             ___altoft 20E6  
                   __size_of___ftmul 00B4                     __size_of___ftsub 002E  
                   __size_of___fttol 0087                             _cos$2916 014F  
                           ___awtoft 2DE4                __size_of_set_leds_top 0054  
                           ___ftpack 25B6                    _baseline_mod_time 0040  
                           _map$2902 00ED                             ___lltoft 2E4F  
             _preset_programmning_on 01C9                           _ANSELEbits 0190  
                         _ANSELFbits 040C                     modTri@inflection 0131  
                   set_leds_bottom@x 00A0                             _exp$2671 014F  
                           _exp$2920 014C                          _init_timer0 07F8  
                        _init_timer2 2C8E                             _cosArray 2482  
         __end_of_updateSwitchBypass 132C                             __ptext10 21DD  
                           __ptext11 23C3                             __ptext20 2DA8  
                           __ptext12 2E06                             __ptext21 0802  
                           __ptext13 2035                             __ptext30 1BB8  
                           __ptext22 2464                             __ptext14 2D0A  
                           __ptext31 2E4F                             __ptext23 1A9C  
                           __ptext15 2D22                             __ptext40 0003  
                           __ptext32 2375                             __ptext24 1CF8  
                           __ptext16 039B                             __ptext41 2C86  
                           __ptext33 232B                             __ptext25 1B27  
                           __ptext17 099A                             __ptext50 20AA  
                           __ptext42 24B6                             __ptext34 1A11  
                           __ptext26 1905                             __ptext18 2123  
                           __ptext51 20E6                             __ptext43 2F32  
                           __ptext35 2CC2                             __ptext27 10F2  
                           __ptext19 1485                             __ptext60 25B6  
                           __ptext52 261B                             __ptext44 277F  
                           __ptext36 2D8C                             __ptext28 1021  
                           __ptext61 2CE3                             __ptext53 2D70  
                           __ptext45 2703                             __ptext37 2F92  
                           __ptext29 132C                             __ptext70 2C8E  
                           __ptext62 229F                             __ptext54 1E56  
                           __ptext46 1631                             __ptext38 2003  
                           __ptext71 07F8                             __ptext63 268D  
                           __ptext55 2EA5                             __ptext47 1DA3  
                           __ptext39 2F62                             __ptext80 1801  
                           __ptext72 2CA0                             __ptext64 2509  
                           __ptext56 1F0A                             __ptext48 219D  
                           __ptext73 2C82                             __ptext65 206F  
                           __ptext57 2C97                             __ptext49 198A  
                           __ptext66 2DC4                             __ptext58 1C4F  
                           __ptext75 22E3                             __ptext67 2E29  
                           __ptext59 2DE4                             __ptext76 2E79  
                           __ptext68 2F02                             __ptext77 2413  
                           __ptext69 225E                             __ptext78 221D  
                           __ptext79 2ED3                             _sin$2919 0145  
          __end_of_ReadSavedSettings 2703                     __size_of_wait_ms 0032  
        __size_of_solidring_tactiles 0040      __size_of_getModulationDelayTime 0053  
                           _ledState 0239                             _pow$2917 015C  
                           _pow$2918 015F                        _presetChannel 016C  
                       ??_modulation 0036                          _mod_counter 01D7  
                           _modArray 238A                          _oldSymmetry 0257  
            ??_setSwitchBypassRelays 00B4                             _init_adc 2CA0  
                      __size_of_main 0483                             _init_pwm 225E  
   updateModulationArray@angleFactor 0154         __size_of_ConfigureOscillator 0004  
                       _set_leds_top 2509                             _showSave 2CF6  
                           _num_taps 0050                __end_of_scaleiA10kPot 1DA3  
                           int$flags 007E                      ??_resetRingLEDs 00A4  
                    i1set_leds_top@x 0070                       modSquare@angle 0148  
                __end_of_update_mode 3000                             exp@coeff 2800  
                           _symmetry 01DB                  modSawRev@inflection 0145  
                           log@coeff 281E                   __end_of_modulation 225E  
               __end_of_calcCosArray 2800                           _INTCONbits 000B  
                        ??_eval_poly 00F0            __size_of_setPresetDisplay 003A  
                        _tap_history 0220                          ??_modSawRev 0148  
                  ??_set_subdivision 00F0                          ??_modSquare 00F0  
                           intlevel1 0000                      _set_leds_bottom 206F  
                         _PMCON1bits 0195                      ??_ring_tactiles 00B2  
                  __CFG_CLKOUTEN$OFF 0000                      _reset_sub_delay 01CA  
                         _OSCCONbits 0099                         _preset_blink 01C8  
             _getModulationDelayTime 24B6                       i1_set_leds_top 22E3  
     __size_of_updateModulationArray 0275     __size_of_updateSwitchBypassState 0001  
      __end_of_updateModulationArray 0610                        _isInitialized 01C1  
      __size_of_setExpressionDisplay 0018                   _scaleiA10kPot$2910 01EA  
                 _scaleiA10kPot$2911 01ED             __size_of_setLongTapState 001A  
                        _tmpModDelay 01BC                     _read_top_tactile 2375  
       ??i1_getModulationSubdivision 0072                         ___aldiv@sign 00AA  
         __size_of_ReadSavedSettings 0076          __end_of_setDoublePressState 219D  
                       _CCP10CONbits 061F                    _bottom_push_state 0048  
         setPresetDisplay@ledChannel 00A6               __end_ofi1_set_leds_top 232B  
