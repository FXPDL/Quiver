

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Fri Jan 06 22:50:41 2017

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1527
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	idataBANK4,global,class=CODE,delta=2
     8                           	psect	idataBANK7,global,class=CODE,delta=2
     9                           	psect	idataBANK8,global,class=CODE,delta=2
    10                           	psect	idataBANK9,global,class=CODE,delta=2
    11                           	psect	idataBANK10,global,class=CODE,delta=2
    12                           	psect	idataBIGRAM,global,class=CODE,delta=2
    13                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	cinit,global,class=CODE,merge=1,delta=2
    17                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    20                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    21                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    22                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    23                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    24                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    25                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    26                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    27                           	psect	dataBANK7,global,class=BANK7,space=1,delta=1
    28                           	psect	dataBANK8,global,class=BANK8,space=1,delta=1
    29                           	psect	dataBANK9,global,class=BANK9,space=1,delta=1
    30                           	psect	dataBANK10,global,class=BANK10,space=1,delta=1
    31                           	psect	bssBANK11,global,class=BANK11,space=1,delta=1
    32                           	psect	clrtext,global,class=CODE,delta=2
    33                           	psect	inittext,global,class=CODE,delta=2
    34                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    35                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    36                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    37                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    38                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    39                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    40                           	psect	text1,local,class=CODE,merge=1,delta=2
    41                           	psect	text2,local,class=CODE,merge=1,delta=2
    42                           	psect	text3,local,class=CODE,merge=1,delta=2
    43                           	psect	text4,local,class=CODE,merge=1,delta=2
    44                           	psect	text5,local,class=CODE,merge=1,delta=2
    45                           	psect	text6,local,class=CODE,merge=1,delta=2
    46                           	psect	text7,local,class=CODE,merge=1,delta=2
    47                           	psect	text8,local,class=CODE,merge=1,delta=2
    48                           	psect	text9,local,class=CODE,merge=1,delta=2
    49                           	psect	text10,local,class=CODE,merge=1,delta=2
    50                           	psect	text11,local,class=CODE,merge=1,delta=2
    51                           	psect	text12,local,class=CODE,merge=1,delta=2
    52                           	psect	text13,local,class=CODE,merge=1,delta=2
    53                           	psect	text14,local,class=CODE,merge=1,delta=2
    54                           	psect	text15,local,class=CODE,merge=1,delta=2
    55                           	psect	text16,local,class=CODE,merge=1,delta=2
    56                           	psect	text17,local,class=CODE,merge=1,delta=2
    57                           	psect	text18,local,class=CODE,merge=1,delta=2
    58                           	psect	text19,local,class=CODE,merge=1,delta=2
    59                           	psect	text20,local,class=CODE,merge=1,delta=2
    60                           	psect	text21,local,class=CODE,merge=1,delta=2
    61                           	psect	text22,local,class=CODE,merge=1,delta=2
    62                           	psect	text23,local,class=CODE,merge=1,delta=2
    63                           	psect	text24,local,class=CODE,merge=1,delta=2
    64                           	psect	text25,local,class=CODE,merge=1,delta=2
    65                           	psect	text26,local,class=CODE,merge=1,delta=2
    66                           	psect	text27,local,class=CODE,merge=1,delta=2
    67                           	psect	text28,local,class=CODE,merge=1,delta=2
    68                           	psect	text29,local,class=CODE,merge=1,delta=2
    69                           	psect	text30,local,class=CODE,merge=1,delta=2
    70                           	psect	text31,local,class=CODE,merge=1,delta=2
    71                           	psect	text32,local,class=CODE,merge=1,delta=2
    72                           	psect	text33,local,class=CODE,merge=1,delta=2
    73                           	psect	text34,local,class=CODE,merge=1,delta=2
    74                           	psect	text35,local,class=CODE,merge=1,delta=2
    75                           	psect	text36,local,class=CODE,merge=1,delta=2
    76                           	psect	text37,local,class=CODE,merge=1,delta=2
    77                           	psect	text38,local,class=CODE,merge=1,delta=2
    78                           	psect	text39,local,class=CODE,merge=1,delta=2
    79                           	psect	text40,local,class=CODE,merge=1,delta=2
    80                           	psect	text41,local,class=CODE,merge=1,delta=2
    81                           	psect	text42,local,class=CODE,merge=1,delta=2
    82                           	psect	text43,local,class=CODE,merge=1,delta=2
    83                           	psect	text44,local,class=CODE,merge=1,delta=2
    84                           	psect	text45,local,class=CODE,merge=1,delta=2
    85                           	psect	text46,local,class=CODE,merge=1,delta=2
    86                           	psect	text47,local,class=CODE,merge=1,delta=2
    87                           	psect	text48,local,class=CODE,merge=1,delta=2
    88                           	psect	intentry,global,class=CODE,delta=2
    89                           	psect	text50,local,class=CODE,merge=1,delta=2
    90                           	psect	text51,local,class=CODE,merge=1,delta=2
    91                           	psect	text52,local,class=CODE,merge=1,delta=2
    92                           	psect	text53,local,class=CODE,merge=1,delta=2
    93                           	psect	text54,local,class=CODE,merge=1,delta=2
    94                           	dabs	1,0x920,80
    95                           	dabs	1,0x8A0,80
    96                           	dabs	1,0x820,80
    97                           	dabs	1,0x7A0,80
    98                           	dabs	1,0x720,80
    99                           	dabs	1,0x6A0,80
   100                           	dabs	1,0x648,40
   101                           	dabs	1,0x23E8,0,_delayArray
   102                           	dabs	1,0x7E,2
   103  0000                     	;# 
   104  0001                     	;# 
   105  0002                     	;# 
   106  0003                     	;# 
   107  0004                     	;# 
   108  0005                     	;# 
   109  0006                     	;# 
   110  0007                     	;# 
   111  0008                     	;# 
   112  0009                     	;# 
   113  000A                     	;# 
   114  000B                     	;# 
   115  000C                     	;# 
   116  000D                     	;# 
   117  000E                     	;# 
   118  000F                     	;# 
   119  0010                     	;# 
   120  0011                     	;# 
   121  0012                     	;# 
   122  0013                     	;# 
   123  0014                     	;# 
   124  0015                     	;# 
   125  0016                     	;# 
   126  0016                     	;# 
   127  0017                     	;# 
   128  0018                     	;# 
   129  0019                     	;# 
   130  001A                     	;# 
   131  001B                     	;# 
   132  001C                     	;# 
   133  008C                     	;# 
   134  008D                     	;# 
   135  008E                     	;# 
   136  008F                     	;# 
   137  0090                     	;# 
   138  0091                     	;# 
   139  0092                     	;# 
   140  0093                     	;# 
   141  0094                     	;# 
   142  0095                     	;# 
   143  0096                     	;# 
   144  0097                     	;# 
   145  0099                     	;# 
   146  009A                     	;# 
   147  009B                     	;# 
   148  009B                     	;# 
   149  009C                     	;# 
   150  009D                     	;# 
   151  009E                     	;# 
   152  010C                     	;# 
   153  010D                     	;# 
   154  010E                     	;# 
   155  010F                     	;# 
   156  0110                     	;# 
   157  0116                     	;# 
   158  0117                     	;# 
   159  011D                     	;# 
   160  018C                     	;# 
   161  018D                     	;# 
   162  018F                     	;# 
   163  0190                     	;# 
   164  0191                     	;# 
   165  0191                     	;# 
   166  0192                     	;# 
   167  0193                     	;# 
   168  0193                     	;# 
   169  0194                     	;# 
   170  0195                     	;# 
   171  0196                     	;# 
   172  0197                     	;# 
   173  0199                     	;# 
   174  0199                     	;# 
   175  0199                     	;# 
   176  019A                     	;# 
   177  019A                     	;# 
   178  019A                     	;# 
   179  019B                     	;# 
   180  019B                     	;# 
   181  019B                     	;# 
   182  019B                     	;# 
   183  019B                     	;# 
   184  019C                     	;# 
   185  019C                     	;# 
   186  019C                     	;# 
   187  019D                     	;# 
   188  019D                     	;# 
   189  019D                     	;# 
   190  019E                     	;# 
   191  019E                     	;# 
   192  019E                     	;# 
   193  019F                     	;# 
   194  019F                     	;# 
   195  019F                     	;# 
   196  020D                     	;# 
   197  020F                     	;# 
   198  0210                     	;# 
   199  0211                     	;# 
   200  0211                     	;# 
   201  0212                     	;# 
   202  0212                     	;# 
   203  0213                     	;# 
   204  0213                     	;# 
   205  0214                     	;# 
   206  0214                     	;# 
   207  0215                     	;# 
   208  0215                     	;# 
   209  0215                     	;# 
   210  0216                     	;# 
   211  0216                     	;# 
   212  0217                     	;# 
   213  0217                     	;# 
   214  0219                     	;# 
   215  021A                     	;# 
   216  021B                     	;# 
   217  021C                     	;# 
   218  021D                     	;# 
   219  021E                     	;# 
   220  021F                     	;# 
   221  028C                     	;# 
   222  028D                     	;# 
   223  0291                     	;# 
   224  0291                     	;# 
   225  0292                     	;# 
   226  0293                     	;# 
   227  0298                     	;# 
   228  0298                     	;# 
   229  0299                     	;# 
   230  029A                     	;# 
   231  029D                     	;# 
   232  029E                     	;# 
   233  029F                     	;# 
   234  030C                     	;# 
   235  030D                     	;# 
   236  0311                     	;# 
   237  0311                     	;# 
   238  0312                     	;# 
   239  0313                     	;# 
   240  0318                     	;# 
   241  0318                     	;# 
   242  0319                     	;# 
   243  031A                     	;# 
   244  031C                     	;# 
   245  031C                     	;# 
   246  031D                     	;# 
   247  031E                     	;# 
   248  038C                     	;# 
   249  038D                     	;# 
   250  0394                     	;# 
   251  0395                     	;# 
   252  0396                     	;# 
   253  040C                     	;# 
   254  040D                     	;# 
   255  0411                     	;# 
   256  0411                     	;# 
   257  0412                     	;# 
   258  0413                     	;# 
   259  0414                     	;# 
   260  0415                     	;# 
   261  0416                     	;# 
   262  0417                     	;# 
   263  0418                     	;# 
   264  0418                     	;# 
   265  0419                     	;# 
   266  041A                     	;# 
   267  041B                     	;# 
   268  041C                     	;# 
   269  041D                     	;# 
   270  041E                     	;# 
   271  048D                     	;# 
   272  0491                     	;# 
   273  0491                     	;# 
   274  0492                     	;# 
   275  0492                     	;# 
   276  0493                     	;# 
   277  0493                     	;# 
   278  0493                     	;# 
   279  0494                     	;# 
   280  0494                     	;# 
   281  0495                     	;# 
   282  0495                     	;# 
   283  0496                     	;# 
   284  0496                     	;# 
   285  0497                     	;# 
   286  0497                     	;# 
   287  0595                     	;# 
   288  0596                     	;# 
   289  0597                     	;# 
   290  059C                     	;# 
   291  059D                     	;# 
   292  059E                     	;# 
   293  0611                     	;# 
   294  0611                     	;# 
   295  0612                     	;# 
   296  0613                     	;# 
   297  0614                     	;# 
   298  0614                     	;# 
   299  0615                     	;# 
   300  0616                     	;# 
   301  0617                     	;# 
   302  0617                     	;# 
   303  0618                     	;# 
   304  0619                     	;# 
   305  061A                     	;# 
   306  061A                     	;# 
   307  061B                     	;# 
   308  061C                     	;# 
   309  061D                     	;# 
   310  061D                     	;# 
   311  061E                     	;# 
   312  061F                     	;# 
   313  0FE4                     	;# 
   314  0FE5                     	;# 
   315  0FE6                     	;# 
   316  0FE7                     	;# 
   317  0FE8                     	;# 
   318  0FE9                     	;# 
   319  0FEA                     	;# 
   320  0FEB                     	;# 
   321  0FED                     	;# 
   322  0FEE                     	;# 
   323  0FEF                     	;# 
   324  0000                     	;# 
   325  0001                     	;# 
   326  0002                     	;# 
   327  0003                     	;# 
   328  0004                     	;# 
   329  0005                     	;# 
   330  0006                     	;# 
   331  0007                     	;# 
   332  0008                     	;# 
   333  0009                     	;# 
   334  000A                     	;# 
   335  000B                     	;# 
   336  000C                     	;# 
   337  000D                     	;# 
   338  000E                     	;# 
   339  000F                     	;# 
   340  0010                     	;# 
   341  0011                     	;# 
   342  0012                     	;# 
   343  0013                     	;# 
   344  0014                     	;# 
   345  0015                     	;# 
   346  0016                     	;# 
   347  0016                     	;# 
   348  0017                     	;# 
   349  0018                     	;# 
   350  0019                     	;# 
   351  001A                     	;# 
   352  001B                     	;# 
   353  001C                     	;# 
   354  008C                     	;# 
   355  008D                     	;# 
   356  008E                     	;# 
   357  008F                     	;# 
   358  0090                     	;# 
   359  0091                     	;# 
   360  0092                     	;# 
   361  0093                     	;# 
   362  0094                     	;# 
   363  0095                     	;# 
   364  0096                     	;# 
   365  0097                     	;# 
   366  0099                     	;# 
   367  009A                     	;# 
   368  009B                     	;# 
   369  009B                     	;# 
   370  009C                     	;# 
   371  009D                     	;# 
   372  009E                     	;# 
   373  010C                     	;# 
   374  010D                     	;# 
   375  010E                     	;# 
   376  010F                     	;# 
   377  0110                     	;# 
   378  0116                     	;# 
   379  0117                     	;# 
   380  011D                     	;# 
   381  018C                     	;# 
   382  018D                     	;# 
   383  018F                     	;# 
   384  0190                     	;# 
   385  0191                     	;# 
   386  0191                     	;# 
   387  0192                     	;# 
   388  0193                     	;# 
   389  0193                     	;# 
   390  0194                     	;# 
   391  0195                     	;# 
   392  0196                     	;# 
   393  0197                     	;# 
   394  0199                     	;# 
   395  0199                     	;# 
   396  0199                     	;# 
   397  019A                     	;# 
   398  019A                     	;# 
   399  019A                     	;# 
   400  019B                     	;# 
   401  019B                     	;# 
   402  019B                     	;# 
   403  019B                     	;# 
   404  019B                     	;# 
   405  019C                     	;# 
   406  019C                     	;# 
   407  019C                     	;# 
   408  019D                     	;# 
   409  019D                     	;# 
   410  019D                     	;# 
   411  019E                     	;# 
   412  019E                     	;# 
   413  019E                     	;# 
   414  019F                     	;# 
   415  019F                     	;# 
   416  019F                     	;# 
   417  020D                     	;# 
   418  020F                     	;# 
   419  0210                     	;# 
   420  0211                     	;# 
   421  0211                     	;# 
   422  0212                     	;# 
   423  0212                     	;# 
   424  0213                     	;# 
   425  0213                     	;# 
   426  0214                     	;# 
   427  0214                     	;# 
   428  0215                     	;# 
   429  0215                     	;# 
   430  0215                     	;# 
   431  0216                     	;# 
   432  0216                     	;# 
   433  0217                     	;# 
   434  0217                     	;# 
   435  0219                     	;# 
   436  021A                     	;# 
   437  021B                     	;# 
   438  021C                     	;# 
   439  021D                     	;# 
   440  021E                     	;# 
   441  021F                     	;# 
   442  028C                     	;# 
   443  028D                     	;# 
   444  0291                     	;# 
   445  0291                     	;# 
   446  0292                     	;# 
   447  0293                     	;# 
   448  0298                     	;# 
   449  0298                     	;# 
   450  0299                     	;# 
   451  029A                     	;# 
   452  029D                     	;# 
   453  029E                     	;# 
   454  029F                     	;# 
   455  030C                     	;# 
   456  030D                     	;# 
   457  0311                     	;# 
   458  0311                     	;# 
   459  0312                     	;# 
   460  0313                     	;# 
   461  0318                     	;# 
   462  0318                     	;# 
   463  0319                     	;# 
   464  031A                     	;# 
   465  031C                     	;# 
   466  031C                     	;# 
   467  031D                     	;# 
   468  031E                     	;# 
   469  038C                     	;# 
   470  038D                     	;# 
   471  0394                     	;# 
   472  0395                     	;# 
   473  0396                     	;# 
   474  040C                     	;# 
   475  040D                     	;# 
   476  0411                     	;# 
   477  0411                     	;# 
   478  0412                     	;# 
   479  0413                     	;# 
   480  0414                     	;# 
   481  0415                     	;# 
   482  0416                     	;# 
   483  0417                     	;# 
   484  0418                     	;# 
   485  0418                     	;# 
   486  0419                     	;# 
   487  041A                     	;# 
   488  041B                     	;# 
   489  041C                     	;# 
   490  041D                     	;# 
   491  041E                     	;# 
   492  048D                     	;# 
   493  0491                     	;# 
   494  0491                     	;# 
   495  0492                     	;# 
   496  0492                     	;# 
   497  0493                     	;# 
   498  0493                     	;# 
   499  0493                     	;# 
   500  0494                     	;# 
   501  0494                     	;# 
   502  0495                     	;# 
   503  0495                     	;# 
   504  0496                     	;# 
   505  0496                     	;# 
   506  0497                     	;# 
   507  0497                     	;# 
   508  0595                     	;# 
   509  0596                     	;# 
   510  0597                     	;# 
   511  059C                     	;# 
   512  059D                     	;# 
   513  059E                     	;# 
   514  0611                     	;# 
   515  0611                     	;# 
   516  0612                     	;# 
   517  0613                     	;# 
   518  0614                     	;# 
   519  0614                     	;# 
   520  0615                     	;# 
   521  0616                     	;# 
   522  0617                     	;# 
   523  0617                     	;# 
   524  0618                     	;# 
   525  0619                     	;# 
   526  061A                     	;# 
   527  061A                     	;# 
   528  061B                     	;# 
   529  061C                     	;# 
   530  061D                     	;# 
   531  061D                     	;# 
   532  061E                     	;# 
   533  061F                     	;# 
   534  0FE4                     	;# 
   535  0FE5                     	;# 
   536  0FE6                     	;# 
   537  0FE7                     	;# 
   538  0FE8                     	;# 
   539  0FE9                     	;# 
   540  0FEA                     	;# 
   541  0FEB                     	;# 
   542  0FED                     	;# 
   543  0FEE                     	;# 
   544  0FEF                     	;# 
   545  0000                     	;# 
   546  0001                     	;# 
   547  0002                     	;# 
   548  0003                     	;# 
   549  0004                     	;# 
   550  0005                     	;# 
   551  0006                     	;# 
   552  0007                     	;# 
   553  0008                     	;# 
   554  0009                     	;# 
   555  000A                     	;# 
   556  000B                     	;# 
   557  000C                     	;# 
   558  000D                     	;# 
   559  000E                     	;# 
   560  000F                     	;# 
   561  0010                     	;# 
   562  0011                     	;# 
   563  0012                     	;# 
   564  0013                     	;# 
   565  0014                     	;# 
   566  0015                     	;# 
   567  0016                     	;# 
   568  0016                     	;# 
   569  0017                     	;# 
   570  0018                     	;# 
   571  0019                     	;# 
   572  001A                     	;# 
   573  001B                     	;# 
   574  001C                     	;# 
   575  008C                     	;# 
   576  008D                     	;# 
   577  008E                     	;# 
   578  008F                     	;# 
   579  0090                     	;# 
   580  0091                     	;# 
   581  0092                     	;# 
   582  0093                     	;# 
   583  0094                     	;# 
   584  0095                     	;# 
   585  0096                     	;# 
   586  0097                     	;# 
   587  0099                     	;# 
   588  009A                     	;# 
   589  009B                     	;# 
   590  009B                     	;# 
   591  009C                     	;# 
   592  009D                     	;# 
   593  009E                     	;# 
   594  010C                     	;# 
   595  010D                     	;# 
   596  010E                     	;# 
   597  010F                     	;# 
   598  0110                     	;# 
   599  0116                     	;# 
   600  0117                     	;# 
   601  011D                     	;# 
   602  018C                     	;# 
   603  018D                     	;# 
   604  018F                     	;# 
   605  0190                     	;# 
   606  0191                     	;# 
   607  0191                     	;# 
   608  0192                     	;# 
   609  0193                     	;# 
   610  0193                     	;# 
   611  0194                     	;# 
   612  0195                     	;# 
   613  0196                     	;# 
   614  0197                     	;# 
   615  0199                     	;# 
   616  0199                     	;# 
   617  0199                     	;# 
   618  019A                     	;# 
   619  019A                     	;# 
   620  019A                     	;# 
   621  019B                     	;# 
   622  019B                     	;# 
   623  019B                     	;# 
   624  019B                     	;# 
   625  019B                     	;# 
   626  019C                     	;# 
   627  019C                     	;# 
   628  019C                     	;# 
   629  019D                     	;# 
   630  019D                     	;# 
   631  019D                     	;# 
   632  019E                     	;# 
   633  019E                     	;# 
   634  019E                     	;# 
   635  019F                     	;# 
   636  019F                     	;# 
   637  019F                     	;# 
   638  020D                     	;# 
   639  020F                     	;# 
   640  0210                     	;# 
   641  0211                     	;# 
   642  0211                     	;# 
   643  0212                     	;# 
   644  0212                     	;# 
   645  0213                     	;# 
   646  0213                     	;# 
   647  0214                     	;# 
   648  0214                     	;# 
   649  0215                     	;# 
   650  0215                     	;# 
   651  0215                     	;# 
   652  0216                     	;# 
   653  0216                     	;# 
   654  0217                     	;# 
   655  0217                     	;# 
   656  0219                     	;# 
   657  021A                     	;# 
   658  021B                     	;# 
   659  021C                     	;# 
   660  021D                     	;# 
   661  021E                     	;# 
   662  021F                     	;# 
   663  028C                     	;# 
   664  028D                     	;# 
   665  0291                     	;# 
   666  0291                     	;# 
   667  0292                     	;# 
   668  0293                     	;# 
   669  0298                     	;# 
   670  0298                     	;# 
   671  0299                     	;# 
   672  029A                     	;# 
   673  029D                     	;# 
   674  029E                     	;# 
   675  029F                     	;# 
   676  030C                     	;# 
   677  030D                     	;# 
   678  0311                     	;# 
   679  0311                     	;# 
   680  0312                     	;# 
   681  0313                     	;# 
   682  0318                     	;# 
   683  0318                     	;# 
   684  0319                     	;# 
   685  031A                     	;# 
   686  031C                     	;# 
   687  031C                     	;# 
   688  031D                     	;# 
   689  031E                     	;# 
   690  038C                     	;# 
   691  038D                     	;# 
   692  0394                     	;# 
   693  0395                     	;# 
   694  0396                     	;# 
   695  040C                     	;# 
   696  040D                     	;# 
   697  0411                     	;# 
   698  0411                     	;# 
   699  0412                     	;# 
   700  0413                     	;# 
   701  0414                     	;# 
   702  0415                     	;# 
   703  0416                     	;# 
   704  0417                     	;# 
   705  0418                     	;# 
   706  0418                     	;# 
   707  0419                     	;# 
   708  041A                     	;# 
   709  041B                     	;# 
   710  041C                     	;# 
   711  041D                     	;# 
   712  041E                     	;# 
   713  048D                     	;# 
   714  0491                     	;# 
   715  0491                     	;# 
   716  0492                     	;# 
   717  0492                     	;# 
   718  0493                     	;# 
   719  0493                     	;# 
   720  0493                     	;# 
   721  0494                     	;# 
   722  0494                     	;# 
   723  0495                     	;# 
   724  0495                     	;# 
   725  0496                     	;# 
   726  0496                     	;# 
   727  0497                     	;# 
   728  0497                     	;# 
   729  0595                     	;# 
   730  0596                     	;# 
   731  0597                     	;# 
   732  059C                     	;# 
   733  059D                     	;# 
   734  059E                     	;# 
   735  0611                     	;# 
   736  0611                     	;# 
   737  0612                     	;# 
   738  0613                     	;# 
   739  0614                     	;# 
   740  0614                     	;# 
   741  0615                     	;# 
   742  0616                     	;# 
   743  0617                     	;# 
   744  0617                     	;# 
   745  0618                     	;# 
   746  0619                     	;# 
   747  061A                     	;# 
   748  061A                     	;# 
   749  061B                     	;# 
   750  061C                     	;# 
   751  061D                     	;# 
   752  061D                     	;# 
   753  061E                     	;# 
   754  061F                     	;# 
   755  0FE4                     	;# 
   756  0FE5                     	;# 
   757  0FE6                     	;# 
   758  0FE7                     	;# 
   759  0FE8                     	;# 
   760  0FE9                     	;# 
   761  0FEA                     	;# 
   762  0FEB                     	;# 
   763  0FED                     	;# 
   764  0FEE                     	;# 
   765  0FEF                     	;# 
   766  0000                     	;# 
   767  0001                     	;# 
   768  0002                     	;# 
   769  0003                     	;# 
   770  0004                     	;# 
   771  0005                     	;# 
   772  0006                     	;# 
   773  0007                     	;# 
   774  0008                     	;# 
   775  0009                     	;# 
   776  000A                     	;# 
   777  000B                     	;# 
   778  000C                     	;# 
   779  000D                     	;# 
   780  000E                     	;# 
   781  000F                     	;# 
   782  0010                     	;# 
   783  0011                     	;# 
   784  0012                     	;# 
   785  0013                     	;# 
   786  0014                     	;# 
   787  0015                     	;# 
   788  0016                     	;# 
   789  0016                     	;# 
   790  0017                     	;# 
   791  0018                     	;# 
   792  0019                     	;# 
   793  001A                     	;# 
   794  001B                     	;# 
   795  001C                     	;# 
   796  008C                     	;# 
   797  008D                     	;# 
   798  008E                     	;# 
   799  008F                     	;# 
   800  0090                     	;# 
   801  0091                     	;# 
   802  0092                     	;# 
   803  0093                     	;# 
   804  0094                     	;# 
   805  0095                     	;# 
   806  0096                     	;# 
   807  0097                     	;# 
   808  0099                     	;# 
   809  009A                     	;# 
   810  009B                     	;# 
   811  009B                     	;# 
   812  009C                     	;# 
   813  009D                     	;# 
   814  009E                     	;# 
   815  010C                     	;# 
   816  010D                     	;# 
   817  010E                     	;# 
   818  010F                     	;# 
   819  0110                     	;# 
   820  0116                     	;# 
   821  0117                     	;# 
   822  011D                     	;# 
   823  018C                     	;# 
   824  018D                     	;# 
   825  018F                     	;# 
   826  0190                     	;# 
   827  0191                     	;# 
   828  0191                     	;# 
   829  0192                     	;# 
   830  0193                     	;# 
   831  0193                     	;# 
   832  0194                     	;# 
   833  0195                     	;# 
   834  0196                     	;# 
   835  0197                     	;# 
   836  0199                     	;# 
   837  0199                     	;# 
   838  0199                     	;# 
   839  019A                     	;# 
   840  019A                     	;# 
   841  019A                     	;# 
   842  019B                     	;# 
   843  019B                     	;# 
   844  019B                     	;# 
   845  019B                     	;# 
   846  019B                     	;# 
   847  019C                     	;# 
   848  019C                     	;# 
   849  019C                     	;# 
   850  019D                     	;# 
   851  019D                     	;# 
   852  019D                     	;# 
   853  019E                     	;# 
   854  019E                     	;# 
   855  019E                     	;# 
   856  019F                     	;# 
   857  019F                     	;# 
   858  019F                     	;# 
   859  020D                     	;# 
   860  020F                     	;# 
   861  0210                     	;# 
   862  0211                     	;# 
   863  0211                     	;# 
   864  0212                     	;# 
   865  0212                     	;# 
   866  0213                     	;# 
   867  0213                     	;# 
   868  0214                     	;# 
   869  0214                     	;# 
   870  0215                     	;# 
   871  0215                     	;# 
   872  0215                     	;# 
   873  0216                     	;# 
   874  0216                     	;# 
   875  0217                     	;# 
   876  0217                     	;# 
   877  0219                     	;# 
   878  021A                     	;# 
   879  021B                     	;# 
   880  021C                     	;# 
   881  021D                     	;# 
   882  021E                     	;# 
   883  021F                     	;# 
   884  028C                     	;# 
   885  028D                     	;# 
   886  0291                     	;# 
   887  0291                     	;# 
   888  0292                     	;# 
   889  0293                     	;# 
   890  0298                     	;# 
   891  0298                     	;# 
   892  0299                     	;# 
   893  029A                     	;# 
   894  029D                     	;# 
   895  029E                     	;# 
   896  029F                     	;# 
   897  030C                     	;# 
   898  030D                     	;# 
   899  0311                     	;# 
   900  0311                     	;# 
   901  0312                     	;# 
   902  0313                     	;# 
   903  0318                     	;# 
   904  0318                     	;# 
   905  0319                     	;# 
   906  031A                     	;# 
   907  031C                     	;# 
   908  031C                     	;# 
   909  031D                     	;# 
   910  031E                     	;# 
   911  038C                     	;# 
   912  038D                     	;# 
   913  0394                     	;# 
   914  0395                     	;# 
   915  0396                     	;# 
   916  040C                     	;# 
   917  040D                     	;# 
   918  0411                     	;# 
   919  0411                     	;# 
   920  0412                     	;# 
   921  0413                     	;# 
   922  0414                     	;# 
   923  0415                     	;# 
   924  0416                     	;# 
   925  0417                     	;# 
   926  0418                     	;# 
   927  0418                     	;# 
   928  0419                     	;# 
   929  041A                     	;# 
   930  041B                     	;# 
   931  041C                     	;# 
   932  041D                     	;# 
   933  041E                     	;# 
   934  048D                     	;# 
   935  0491                     	;# 
   936  0491                     	;# 
   937  0492                     	;# 
   938  0492                     	;# 
   939  0493                     	;# 
   940  0493                     	;# 
   941  0493                     	;# 
   942  0494                     	;# 
   943  0494                     	;# 
   944  0495                     	;# 
   945  0495                     	;# 
   946  0496                     	;# 
   947  0496                     	;# 
   948  0497                     	;# 
   949  0497                     	;# 
   950  0595                     	;# 
   951  0596                     	;# 
   952  0597                     	;# 
   953  059C                     	;# 
   954  059D                     	;# 
   955  059E                     	;# 
   956  0611                     	;# 
   957  0611                     	;# 
   958  0612                     	;# 
   959  0613                     	;# 
   960  0614                     	;# 
   961  0614                     	;# 
   962  0615                     	;# 
   963  0616                     	;# 
   964  0617                     	;# 
   965  0617                     	;# 
   966  0618                     	;# 
   967  0619                     	;# 
   968  061A                     	;# 
   969  061A                     	;# 
   970  061B                     	;# 
   971  061C                     	;# 
   972  061D                     	;# 
   973  061D                     	;# 
   974  061E                     	;# 
   975  061F                     	;# 
   976  0FE4                     	;# 
   977  0FE5                     	;# 
   978  0FE6                     	;# 
   979  0FE7                     	;# 
   980  0FE8                     	;# 
   981  0FE9                     	;# 
   982  0FEA                     	;# 
   983  0FEB                     	;# 
   984  0FED                     	;# 
   985  0FEE                     	;# 
   986  0FEF                     	;# 
   987  0000                     	;# 
   988  0001                     	;# 
   989  0002                     	;# 
   990  0003                     	;# 
   991  0004                     	;# 
   992  0005                     	;# 
   993  0006                     	;# 
   994  0007                     	;# 
   995  0008                     	;# 
   996  0009                     	;# 
   997  000A                     	;# 
   998  000B                     	;# 
   999  000C                     	;# 
  1000  000D                     	;# 
  1001  000E                     	;# 
  1002  000F                     	;# 
  1003  0010                     	;# 
  1004  0011                     	;# 
  1005  0012                     	;# 
  1006  0013                     	;# 
  1007  0014                     	;# 
  1008  0015                     	;# 
  1009  0016                     	;# 
  1010  0016                     	;# 
  1011  0017                     	;# 
  1012  0018                     	;# 
  1013  0019                     	;# 
  1014  001A                     	;# 
  1015  001B                     	;# 
  1016  001C                     	;# 
  1017  008C                     	;# 
  1018  008D                     	;# 
  1019  008E                     	;# 
  1020  008F                     	;# 
  1021  0090                     	;# 
  1022  0091                     	;# 
  1023  0092                     	;# 
  1024  0093                     	;# 
  1025  0094                     	;# 
  1026  0095                     	;# 
  1027  0096                     	;# 
  1028  0097                     	;# 
  1029  0099                     	;# 
  1030  009A                     	;# 
  1031  009B                     	;# 
  1032  009B                     	;# 
  1033  009C                     	;# 
  1034  009D                     	;# 
  1035  009E                     	;# 
  1036  010C                     	;# 
  1037  010D                     	;# 
  1038  010E                     	;# 
  1039  010F                     	;# 
  1040  0110                     	;# 
  1041  0116                     	;# 
  1042  0117                     	;# 
  1043  011D                     	;# 
  1044  018C                     	;# 
  1045  018D                     	;# 
  1046  018F                     	;# 
  1047  0190                     	;# 
  1048  0191                     	;# 
  1049  0191                     	;# 
  1050  0192                     	;# 
  1051  0193                     	;# 
  1052  0193                     	;# 
  1053  0194                     	;# 
  1054  0195                     	;# 
  1055  0196                     	;# 
  1056  0197                     	;# 
  1057  0199                     	;# 
  1058  0199                     	;# 
  1059  0199                     	;# 
  1060  019A                     	;# 
  1061  019A                     	;# 
  1062  019A                     	;# 
  1063  019B                     	;# 
  1064  019B                     	;# 
  1065  019B                     	;# 
  1066  019B                     	;# 
  1067  019B                     	;# 
  1068  019C                     	;# 
  1069  019C                     	;# 
  1070  019C                     	;# 
  1071  019D                     	;# 
  1072  019D                     	;# 
  1073  019D                     	;# 
  1074  019E                     	;# 
  1075  019E                     	;# 
  1076  019E                     	;# 
  1077  019F                     	;# 
  1078  019F                     	;# 
  1079  019F                     	;# 
  1080  020D                     	;# 
  1081  020F                     	;# 
  1082  0210                     	;# 
  1083  0211                     	;# 
  1084  0211                     	;# 
  1085  0212                     	;# 
  1086  0212                     	;# 
  1087  0213                     	;# 
  1088  0213                     	;# 
  1089  0214                     	;# 
  1090  0214                     	;# 
  1091  0215                     	;# 
  1092  0215                     	;# 
  1093  0215                     	;# 
  1094  0216                     	;# 
  1095  0216                     	;# 
  1096  0217                     	;# 
  1097  0217                     	;# 
  1098  0219                     	;# 
  1099  021A                     	;# 
  1100  021B                     	;# 
  1101  021C                     	;# 
  1102  021D                     	;# 
  1103  021E                     	;# 
  1104  021F                     	;# 
  1105  028C                     	;# 
  1106  028D                     	;# 
  1107  0291                     	;# 
  1108  0291                     	;# 
  1109  0292                     	;# 
  1110  0293                     	;# 
  1111  0298                     	;# 
  1112  0298                     	;# 
  1113  0299                     	;# 
  1114  029A                     	;# 
  1115  029D                     	;# 
  1116  029E                     	;# 
  1117  029F                     	;# 
  1118  030C                     	;# 
  1119  030D                     	;# 
  1120  0311                     	;# 
  1121  0311                     	;# 
  1122  0312                     	;# 
  1123  0313                     	;# 
  1124  0318                     	;# 
  1125  0318                     	;# 
  1126  0319                     	;# 
  1127  031A                     	;# 
  1128  031C                     	;# 
  1129  031C                     	;# 
  1130  031D                     	;# 
  1131  031E                     	;# 
  1132  038C                     	;# 
  1133  038D                     	;# 
  1134  0394                     	;# 
  1135  0395                     	;# 
  1136  0396                     	;# 
  1137  040C                     	;# 
  1138  040D                     	;# 
  1139  0411                     	;# 
  1140  0411                     	;# 
  1141  0412                     	;# 
  1142  0413                     	;# 
  1143  0414                     	;# 
  1144  0415                     	;# 
  1145  0416                     	;# 
  1146  0417                     	;# 
  1147  0418                     	;# 
  1148  0418                     	;# 
  1149  0419                     	;# 
  1150  041A                     	;# 
  1151  041B                     	;# 
  1152  041C                     	;# 
  1153  041D                     	;# 
  1154  041E                     	;# 
  1155  048D                     	;# 
  1156  0491                     	;# 
  1157  0491                     	;# 
  1158  0492                     	;# 
  1159  0492                     	;# 
  1160  0493                     	;# 
  1161  0493                     	;# 
  1162  0493                     	;# 
  1163  0494                     	;# 
  1164  0494                     	;# 
  1165  0495                     	;# 
  1166  0495                     	;# 
  1167  0496                     	;# 
  1168  0496                     	;# 
  1169  0497                     	;# 
  1170  0497                     	;# 
  1171  0595                     	;# 
  1172  0596                     	;# 
  1173  0597                     	;# 
  1174  059C                     	;# 
  1175  059D                     	;# 
  1176  059E                     	;# 
  1177  0611                     	;# 
  1178  0611                     	;# 
  1179  0612                     	;# 
  1180  0613                     	;# 
  1181  0614                     	;# 
  1182  0614                     	;# 
  1183  0615                     	;# 
  1184  0616                     	;# 
  1185  0617                     	;# 
  1186  0617                     	;# 
  1187  0618                     	;# 
  1188  0619                     	;# 
  1189  061A                     	;# 
  1190  061A                     	;# 
  1191  061B                     	;# 
  1192  061C                     	;# 
  1193  061D                     	;# 
  1194  061D                     	;# 
  1195  061E                     	;# 
  1196  061F                     	;# 
  1197  0FE4                     	;# 
  1198  0FE5                     	;# 
  1199  0FE6                     	;# 
  1200  0FE7                     	;# 
  1201  0FE8                     	;# 
  1202  0FE9                     	;# 
  1203  0FEA                     	;# 
  1204  0FEB                     	;# 
  1205  0FED                     	;# 
  1206  0FEE                     	;# 
  1207  0FEF                     	;# 
  1208  0000                     	;# 
  1209  0001                     	;# 
  1210  0002                     	;# 
  1211  0003                     	;# 
  1212  0004                     	;# 
  1213  0005                     	;# 
  1214  0006                     	;# 
  1215  0007                     	;# 
  1216  0008                     	;# 
  1217  0009                     	;# 
  1218  000A                     	;# 
  1219  000B                     	;# 
  1220  000C                     	;# 
  1221  000D                     	;# 
  1222  000E                     	;# 
  1223  000F                     	;# 
  1224  0010                     	;# 
  1225  0011                     	;# 
  1226  0012                     	;# 
  1227  0013                     	;# 
  1228  0014                     	;# 
  1229  0015                     	;# 
  1230  0016                     	;# 
  1231  0016                     	;# 
  1232  0017                     	;# 
  1233  0018                     	;# 
  1234  0019                     	;# 
  1235  001A                     	;# 
  1236  001B                     	;# 
  1237  001C                     	;# 
  1238  008C                     	;# 
  1239  008D                     	;# 
  1240  008E                     	;# 
  1241  008F                     	;# 
  1242  0090                     	;# 
  1243  0091                     	;# 
  1244  0092                     	;# 
  1245  0093                     	;# 
  1246  0094                     	;# 
  1247  0095                     	;# 
  1248  0096                     	;# 
  1249  0097                     	;# 
  1250  0099                     	;# 
  1251  009A                     	;# 
  1252  009B                     	;# 
  1253  009B                     	;# 
  1254  009C                     	;# 
  1255  009D                     	;# 
  1256  009E                     	;# 
  1257  010C                     	;# 
  1258  010D                     	;# 
  1259  010E                     	;# 
  1260  010F                     	;# 
  1261  0110                     	;# 
  1262  0116                     	;# 
  1263  0117                     	;# 
  1264  011D                     	;# 
  1265  018C                     	;# 
  1266  018D                     	;# 
  1267  018F                     	;# 
  1268  0190                     	;# 
  1269  0191                     	;# 
  1270  0191                     	;# 
  1271  0192                     	;# 
  1272  0193                     	;# 
  1273  0193                     	;# 
  1274  0194                     	;# 
  1275  0195                     	;# 
  1276  0196                     	;# 
  1277  0197                     	;# 
  1278  0199                     	;# 
  1279  0199                     	;# 
  1280  0199                     	;# 
  1281  019A                     	;# 
  1282  019A                     	;# 
  1283  019A                     	;# 
  1284  019B                     	;# 
  1285  019B                     	;# 
  1286  019B                     	;# 
  1287  019B                     	;# 
  1288  019B                     	;# 
  1289  019C                     	;# 
  1290  019C                     	;# 
  1291  019C                     	;# 
  1292  019D                     	;# 
  1293  019D                     	;# 
  1294  019D                     	;# 
  1295  019E                     	;# 
  1296  019E                     	;# 
  1297  019E                     	;# 
  1298  019F                     	;# 
  1299  019F                     	;# 
  1300  019F                     	;# 
  1301  020D                     	;# 
  1302  020F                     	;# 
  1303  0210                     	;# 
  1304  0211                     	;# 
  1305  0211                     	;# 
  1306  0212                     	;# 
  1307  0212                     	;# 
  1308  0213                     	;# 
  1309  0213                     	;# 
  1310  0214                     	;# 
  1311  0214                     	;# 
  1312  0215                     	;# 
  1313  0215                     	;# 
  1314  0215                     	;# 
  1315  0216                     	;# 
  1316  0216                     	;# 
  1317  0217                     	;# 
  1318  0217                     	;# 
  1319  0219                     	;# 
  1320  021A                     	;# 
  1321  021B                     	;# 
  1322  021C                     	;# 
  1323  021D                     	;# 
  1324  021E                     	;# 
  1325  021F                     	;# 
  1326  028C                     	;# 
  1327  028D                     	;# 
  1328  0291                     	;# 
  1329  0291                     	;# 
  1330  0292                     	;# 
  1331  0293                     	;# 
  1332  0298                     	;# 
  1333  0298                     	;# 
  1334  0299                     	;# 
  1335  029A                     	;# 
  1336  029D                     	;# 
  1337  029E                     	;# 
  1338  029F                     	;# 
  1339  030C                     	;# 
  1340  030D                     	;# 
  1341  0311                     	;# 
  1342  0311                     	;# 
  1343  0312                     	;# 
  1344  0313                     	;# 
  1345  0318                     	;# 
  1346  0318                     	;# 
  1347  0319                     	;# 
  1348  031A                     	;# 
  1349  031C                     	;# 
  1350  031C                     	;# 
  1351  031D                     	;# 
  1352  031E                     	;# 
  1353  038C                     	;# 
  1354  038D                     	;# 
  1355  0394                     	;# 
  1356  0395                     	;# 
  1357  0396                     	;# 
  1358  040C                     	;# 
  1359  040D                     	;# 
  1360  0411                     	;# 
  1361  0411                     	;# 
  1362  0412                     	;# 
  1363  0413                     	;# 
  1364  0414                     	;# 
  1365  0415                     	;# 
  1366  0416                     	;# 
  1367  0417                     	;# 
  1368  0418                     	;# 
  1369  0418                     	;# 
  1370  0419                     	;# 
  1371  041A                     	;# 
  1372  041B                     	;# 
  1373  041C                     	;# 
  1374  041D                     	;# 
  1375  041E                     	;# 
  1376  048D                     	;# 
  1377  0491                     	;# 
  1378  0491                     	;# 
  1379  0492                     	;# 
  1380  0492                     	;# 
  1381  0493                     	;# 
  1382  0493                     	;# 
  1383  0493                     	;# 
  1384  0494                     	;# 
  1385  0494                     	;# 
  1386  0495                     	;# 
  1387  0495                     	;# 
  1388  0496                     	;# 
  1389  0496                     	;# 
  1390  0497                     	;# 
  1391  0497                     	;# 
  1392  0595                     	;# 
  1393  0596                     	;# 
  1394  0597                     	;# 
  1395  059C                     	;# 
  1396  059D                     	;# 
  1397  059E                     	;# 
  1398  0611                     	;# 
  1399  0611                     	;# 
  1400  0612                     	;# 
  1401  0613                     	;# 
  1402  0614                     	;# 
  1403  0614                     	;# 
  1404  0615                     	;# 
  1405  0616                     	;# 
  1406  0617                     	;# 
  1407  0617                     	;# 
  1408  0618                     	;# 
  1409  0619                     	;# 
  1410  061A                     	;# 
  1411  061A                     	;# 
  1412  061B                     	;# 
  1413  061C                     	;# 
  1414  061D                     	;# 
  1415  061D                     	;# 
  1416  061E                     	;# 
  1417  061F                     	;# 
  1418  0FE4                     	;# 
  1419  0FE5                     	;# 
  1420  0FE6                     	;# 
  1421  0FE7                     	;# 
  1422  0FE8                     	;# 
  1423  0FE9                     	;# 
  1424  0FEA                     	;# 
  1425  0FEB                     	;# 
  1426  0FED                     	;# 
  1427  0FEE                     	;# 
  1428  0FEF                     	;# 
  1429  0000                     	;# 
  1430  0001                     	;# 
  1431  0002                     	;# 
  1432  0003                     	;# 
  1433  0004                     	;# 
  1434  0005                     	;# 
  1435  0006                     	;# 
  1436  0007                     	;# 
  1437  0008                     	;# 
  1438  0009                     	;# 
  1439  000A                     	;# 
  1440  000B                     	;# 
  1441  000C                     	;# 
  1442  000D                     	;# 
  1443  000E                     	;# 
  1444  000F                     	;# 
  1445  0010                     	;# 
  1446  0011                     	;# 
  1447  0012                     	;# 
  1448  0013                     	;# 
  1449  0014                     	;# 
  1450  0015                     	;# 
  1451  0016                     	;# 
  1452  0016                     	;# 
  1453  0017                     	;# 
  1454  0018                     	;# 
  1455  0019                     	;# 
  1456  001A                     	;# 
  1457  001B                     	;# 
  1458  001C                     	;# 
  1459  008C                     	;# 
  1460  008D                     	;# 
  1461  008E                     	;# 
  1462  008F                     	;# 
  1463  0090                     	;# 
  1464  0091                     	;# 
  1465  0092                     	;# 
  1466  0093                     	;# 
  1467  0094                     	;# 
  1468  0095                     	;# 
  1469  0096                     	;# 
  1470  0097                     	;# 
  1471  0099                     	;# 
  1472  009A                     	;# 
  1473  009B                     	;# 
  1474  009B                     	;# 
  1475  009C                     	;# 
  1476  009D                     	;# 
  1477  009E                     	;# 
  1478  010C                     	;# 
  1479  010D                     	;# 
  1480  010E                     	;# 
  1481  010F                     	;# 
  1482  0110                     	;# 
  1483  0116                     	;# 
  1484  0117                     	;# 
  1485  011D                     	;# 
  1486  018C                     	;# 
  1487  018D                     	;# 
  1488  018F                     	;# 
  1489  0190                     	;# 
  1490  0191                     	;# 
  1491  0191                     	;# 
  1492  0192                     	;# 
  1493  0193                     	;# 
  1494  0193                     	;# 
  1495  0194                     	;# 
  1496  0195                     	;# 
  1497  0196                     	;# 
  1498  0197                     	;# 
  1499  0199                     	;# 
  1500  0199                     	;# 
  1501  0199                     	;# 
  1502  019A                     	;# 
  1503  019A                     	;# 
  1504  019A                     	;# 
  1505  019B                     	;# 
  1506  019B                     	;# 
  1507  019B                     	;# 
  1508  019B                     	;# 
  1509  019B                     	;# 
  1510  019C                     	;# 
  1511  019C                     	;# 
  1512  019C                     	;# 
  1513  019D                     	;# 
  1514  019D                     	;# 
  1515  019D                     	;# 
  1516  019E                     	;# 
  1517  019E                     	;# 
  1518  019E                     	;# 
  1519  019F                     	;# 
  1520  019F                     	;# 
  1521  019F                     	;# 
  1522  020D                     	;# 
  1523  020F                     	;# 
  1524  0210                     	;# 
  1525  0211                     	;# 
  1526  0211                     	;# 
  1527  0212                     	;# 
  1528  0212                     	;# 
  1529  0213                     	;# 
  1530  0213                     	;# 
  1531  0214                     	;# 
  1532  0214                     	;# 
  1533  0215                     	;# 
  1534  0215                     	;# 
  1535  0215                     	;# 
  1536  0216                     	;# 
  1537  0216                     	;# 
  1538  0217                     	;# 
  1539  0217                     	;# 
  1540  0219                     	;# 
  1541  021A                     	;# 
  1542  021B                     	;# 
  1543  021C                     	;# 
  1544  021D                     	;# 
  1545  021E                     	;# 
  1546  021F                     	;# 
  1547  028C                     	;# 
  1548  028D                     	;# 
  1549  0291                     	;# 
  1550  0291                     	;# 
  1551  0292                     	;# 
  1552  0293                     	;# 
  1553  0298                     	;# 
  1554  0298                     	;# 
  1555  0299                     	;# 
  1556  029A                     	;# 
  1557  029D                     	;# 
  1558  029E                     	;# 
  1559  029F                     	;# 
  1560  030C                     	;# 
  1561  030D                     	;# 
  1562  0311                     	;# 
  1563  0311                     	;# 
  1564  0312                     	;# 
  1565  0313                     	;# 
  1566  0318                     	;# 
  1567  0318                     	;# 
  1568  0319                     	;# 
  1569  031A                     	;# 
  1570  031C                     	;# 
  1571  031C                     	;# 
  1572  031D                     	;# 
  1573  031E                     	;# 
  1574  038C                     	;# 
  1575  038D                     	;# 
  1576  0394                     	;# 
  1577  0395                     	;# 
  1578  0396                     	;# 
  1579  040C                     	;# 
  1580  040D                     	;# 
  1581  0411                     	;# 
  1582  0411                     	;# 
  1583  0412                     	;# 
  1584  0413                     	;# 
  1585  0414                     	;# 
  1586  0415                     	;# 
  1587  0416                     	;# 
  1588  0417                     	;# 
  1589  0418                     	;# 
  1590  0418                     	;# 
  1591  0419                     	;# 
  1592  041A                     	;# 
  1593  041B                     	;# 
  1594  041C                     	;# 
  1595  041D                     	;# 
  1596  041E                     	;# 
  1597  048D                     	;# 
  1598  0491                     	;# 
  1599  0491                     	;# 
  1600  0492                     	;# 
  1601  0492                     	;# 
  1602  0493                     	;# 
  1603  0493                     	;# 
  1604  0493                     	;# 
  1605  0494                     	;# 
  1606  0494                     	;# 
  1607  0495                     	;# 
  1608  0495                     	;# 
  1609  0496                     	;# 
  1610  0496                     	;# 
  1611  0497                     	;# 
  1612  0497                     	;# 
  1613  0595                     	;# 
  1614  0596                     	;# 
  1615  0597                     	;# 
  1616  059C                     	;# 
  1617  059D                     	;# 
  1618  059E                     	;# 
  1619  0611                     	;# 
  1620  0611                     	;# 
  1621  0612                     	;# 
  1622  0613                     	;# 
  1623  0614                     	;# 
  1624  0614                     	;# 
  1625  0615                     	;# 
  1626  0616                     	;# 
  1627  0617                     	;# 
  1628  0617                     	;# 
  1629  0618                     	;# 
  1630  0619                     	;# 
  1631  061A                     	;# 
  1632  061A                     	;# 
  1633  061B                     	;# 
  1634  061C                     	;# 
  1635  061D                     	;# 
  1636  061D                     	;# 
  1637  061E                     	;# 
  1638  061F                     	;# 
  1639  0FE4                     	;# 
  1640  0FE5                     	;# 
  1641  0FE6                     	;# 
  1642  0FE7                     	;# 
  1643  0FE8                     	;# 
  1644  0FE9                     	;# 
  1645  0FEA                     	;# 
  1646  0FEB                     	;# 
  1647  0FED                     	;# 
  1648  0FEE                     	;# 
  1649  0FEF                     	;# 
  1650  0000                     	;# 
  1651  0001                     	;# 
  1652  0002                     	;# 
  1653  0003                     	;# 
  1654  0004                     	;# 
  1655  0005                     	;# 
  1656  0006                     	;# 
  1657  0007                     	;# 
  1658  0008                     	;# 
  1659  0009                     	;# 
  1660  000A                     	;# 
  1661  000B                     	;# 
  1662  000C                     	;# 
  1663  000D                     	;# 
  1664  000E                     	;# 
  1665  000F                     	;# 
  1666  0010                     	;# 
  1667  0011                     	;# 
  1668  0012                     	;# 
  1669  0013                     	;# 
  1670  0014                     	;# 
  1671  0015                     	;# 
  1672  0016                     	;# 
  1673  0016                     	;# 
  1674  0017                     	;# 
  1675  0018                     	;# 
  1676  0019                     	;# 
  1677  001A                     	;# 
  1678  001B                     	;# 
  1679  001C                     	;# 
  1680  008C                     	;# 
  1681  008D                     	;# 
  1682  008E                     	;# 
  1683  008F                     	;# 
  1684  0090                     	;# 
  1685  0091                     	;# 
  1686  0092                     	;# 
  1687  0093                     	;# 
  1688  0094                     	;# 
  1689  0095                     	;# 
  1690  0096                     	;# 
  1691  0097                     	;# 
  1692  0099                     	;# 
  1693  009A                     	;# 
  1694  009B                     	;# 
  1695  009B                     	;# 
  1696  009C                     	;# 
  1697  009D                     	;# 
  1698  009E                     	;# 
  1699  010C                     	;# 
  1700  010D                     	;# 
  1701  010E                     	;# 
  1702  010F                     	;# 
  1703  0110                     	;# 
  1704  0116                     	;# 
  1705  0117                     	;# 
  1706  011D                     	;# 
  1707  018C                     	;# 
  1708  018D                     	;# 
  1709  018F                     	;# 
  1710  0190                     	;# 
  1711  0191                     	;# 
  1712  0191                     	;# 
  1713  0192                     	;# 
  1714  0193                     	;# 
  1715  0193                     	;# 
  1716  0194                     	;# 
  1717  0195                     	;# 
  1718  0196                     	;# 
  1719  0197                     	;# 
  1720  0199                     	;# 
  1721  0199                     	;# 
  1722  0199                     	;# 
  1723  019A                     	;# 
  1724  019A                     	;# 
  1725  019A                     	;# 
  1726  019B                     	;# 
  1727  019B                     	;# 
  1728  019B                     	;# 
  1729  019B                     	;# 
  1730  019B                     	;# 
  1731  019C                     	;# 
  1732  019C                     	;# 
  1733  019C                     	;# 
  1734  019D                     	;# 
  1735  019D                     	;# 
  1736  019D                     	;# 
  1737  019E                     	;# 
  1738  019E                     	;# 
  1739  019E                     	;# 
  1740  019F                     	;# 
  1741  019F                     	;# 
  1742  019F                     	;# 
  1743  020D                     	;# 
  1744  020F                     	;# 
  1745  0210                     	;# 
  1746  0211                     	;# 
  1747  0211                     	;# 
  1748  0212                     	;# 
  1749  0212                     	;# 
  1750  0213                     	;# 
  1751  0213                     	;# 
  1752  0214                     	;# 
  1753  0214                     	;# 
  1754  0215                     	;# 
  1755  0215                     	;# 
  1756  0215                     	;# 
  1757  0216                     	;# 
  1758  0216                     	;# 
  1759  0217                     	;# 
  1760  0217                     	;# 
  1761  0219                     	;# 
  1762  021A                     	;# 
  1763  021B                     	;# 
  1764  021C                     	;# 
  1765  021D                     	;# 
  1766  021E                     	;# 
  1767  021F                     	;# 
  1768  028C                     	;# 
  1769  028D                     	;# 
  1770  0291                     	;# 
  1771  0291                     	;# 
  1772  0292                     	;# 
  1773  0293                     	;# 
  1774  0298                     	;# 
  1775  0298                     	;# 
  1776  0299                     	;# 
  1777  029A                     	;# 
  1778  029D                     	;# 
  1779  029E                     	;# 
  1780  029F                     	;# 
  1781  030C                     	;# 
  1782  030D                     	;# 
  1783  0311                     	;# 
  1784  0311                     	;# 
  1785  0312                     	;# 
  1786  0313                     	;# 
  1787  0318                     	;# 
  1788  0318                     	;# 
  1789  0319                     	;# 
  1790  031A                     	;# 
  1791  031C                     	;# 
  1792  031C                     	;# 
  1793  031D                     	;# 
  1794  031E                     	;# 
  1795  038C                     	;# 
  1796  038D                     	;# 
  1797  0394                     	;# 
  1798  0395                     	;# 
  1799  0396                     	;# 
  1800  040C                     	;# 
  1801  040D                     	;# 
  1802  0411                     	;# 
  1803  0411                     	;# 
  1804  0412                     	;# 
  1805  0413                     	;# 
  1806  0414                     	;# 
  1807  0415                     	;# 
  1808  0416                     	;# 
  1809  0417                     	;# 
  1810  0418                     	;# 
  1811  0418                     	;# 
  1812  0419                     	;# 
  1813  041A                     	;# 
  1814  041B                     	;# 
  1815  041C                     	;# 
  1816  041D                     	;# 
  1817  041E                     	;# 
  1818  048D                     	;# 
  1819  0491                     	;# 
  1820  0491                     	;# 
  1821  0492                     	;# 
  1822  0492                     	;# 
  1823  0493                     	;# 
  1824  0493                     	;# 
  1825  0493                     	;# 
  1826  0494                     	;# 
  1827  0494                     	;# 
  1828  0495                     	;# 
  1829  0495                     	;# 
  1830  0496                     	;# 
  1831  0496                     	;# 
  1832  0497                     	;# 
  1833  0497                     	;# 
  1834  0595                     	;# 
  1835  0596                     	;# 
  1836  0597                     	;# 
  1837  059C                     	;# 
  1838  059D                     	;# 
  1839  059E                     	;# 
  1840  0611                     	;# 
  1841  0611                     	;# 
  1842  0612                     	;# 
  1843  0613                     	;# 
  1844  0614                     	;# 
  1845  0614                     	;# 
  1846  0615                     	;# 
  1847  0616                     	;# 
  1848  0617                     	;# 
  1849  0617                     	;# 
  1850  0618                     	;# 
  1851  0619                     	;# 
  1852  061A                     	;# 
  1853  061A                     	;# 
  1854  061B                     	;# 
  1855  061C                     	;# 
  1856  061D                     	;# 
  1857  061D                     	;# 
  1858  061E                     	;# 
  1859  061F                     	;# 
  1860  0FE4                     	;# 
  1861  0FE5                     	;# 
  1862  0FE6                     	;# 
  1863  0FE7                     	;# 
  1864  0FE8                     	;# 
  1865  0FE9                     	;# 
  1866  0FEA                     	;# 
  1867  0FEB                     	;# 
  1868  0FED                     	;# 
  1869  0FEE                     	;# 
  1870  0FEF                     	;# 
  1871  0000                     	;# 
  1872  0001                     	;# 
  1873  0002                     	;# 
  1874  0003                     	;# 
  1875  0004                     	;# 
  1876  0005                     	;# 
  1877  0006                     	;# 
  1878  0007                     	;# 
  1879  0008                     	;# 
  1880  0009                     	;# 
  1881  000A                     	;# 
  1882  000B                     	;# 
  1883  000C                     	;# 
  1884  000D                     	;# 
  1885  000E                     	;# 
  1886  000F                     	;# 
  1887  0010                     	;# 
  1888  0011                     	;# 
  1889  0012                     	;# 
  1890  0013                     	;# 
  1891  0014                     	;# 
  1892  0015                     	;# 
  1893  0016                     	;# 
  1894  0016                     	;# 
  1895  0017                     	;# 
  1896  0018                     	;# 
  1897  0019                     	;# 
  1898  001A                     	;# 
  1899  001B                     	;# 
  1900  001C                     	;# 
  1901  008C                     	;# 
  1902  008D                     	;# 
  1903  008E                     	;# 
  1904  008F                     	;# 
  1905  0090                     	;# 
  1906  0091                     	;# 
  1907  0092                     	;# 
  1908  0093                     	;# 
  1909  0094                     	;# 
  1910  0095                     	;# 
  1911  0096                     	;# 
  1912  0097                     	;# 
  1913  0099                     	;# 
  1914  009A                     	;# 
  1915  009B                     	;# 
  1916  009B                     	;# 
  1917  009C                     	;# 
  1918  009D                     	;# 
  1919  009E                     	;# 
  1920  010C                     	;# 
  1921  010D                     	;# 
  1922  010E                     	;# 
  1923  010F                     	;# 
  1924  0110                     	;# 
  1925  0116                     	;# 
  1926  0117                     	;# 
  1927  011D                     	;# 
  1928  018C                     	;# 
  1929  018D                     	;# 
  1930  018F                     	;# 
  1931  0190                     	;# 
  1932  0191                     	;# 
  1933  0191                     	;# 
  1934  0192                     	;# 
  1935  0193                     	;# 
  1936  0193                     	;# 
  1937  0194                     	;# 
  1938  0195                     	;# 
  1939  0196                     	;# 
  1940  0197                     	;# 
  1941  0199                     	;# 
  1942  0199                     	;# 
  1943  0199                     	;# 
  1944  019A                     	;# 
  1945  019A                     	;# 
  1946  019A                     	;# 
  1947  019B                     	;# 
  1948  019B                     	;# 
  1949  019B                     	;# 
  1950  019B                     	;# 
  1951  019B                     	;# 
  1952  019C                     	;# 
  1953  019C                     	;# 
  1954  019C                     	;# 
  1955  019D                     	;# 
  1956  019D                     	;# 
  1957  019D                     	;# 
  1958  019E                     	;# 
  1959  019E                     	;# 
  1960  019E                     	;# 
  1961  019F                     	;# 
  1962  019F                     	;# 
  1963  019F                     	;# 
  1964  020D                     	;# 
  1965  020F                     	;# 
  1966  0210                     	;# 
  1967  0211                     	;# 
  1968  0211                     	;# 
  1969  0212                     	;# 
  1970  0212                     	;# 
  1971  0213                     	;# 
  1972  0213                     	;# 
  1973  0214                     	;# 
  1974  0214                     	;# 
  1975  0215                     	;# 
  1976  0215                     	;# 
  1977  0215                     	;# 
  1978  0216                     	;# 
  1979  0216                     	;# 
  1980  0217                     	;# 
  1981  0217                     	;# 
  1982  0219                     	;# 
  1983  021A                     	;# 
  1984  021B                     	;# 
  1985  021C                     	;# 
  1986  021D                     	;# 
  1987  021E                     	;# 
  1988  021F                     	;# 
  1989  028C                     	;# 
  1990  028D                     	;# 
  1991  0291                     	;# 
  1992  0291                     	;# 
  1993  0292                     	;# 
  1994  0293                     	;# 
  1995  0298                     	;# 
  1996  0298                     	;# 
  1997  0299                     	;# 
  1998  029A                     	;# 
  1999  029D                     	;# 
  2000  029E                     	;# 
  2001  029F                     	;# 
  2002  030C                     	;# 
  2003  030D                     	;# 
  2004  0311                     	;# 
  2005  0311                     	;# 
  2006  0312                     	;# 
  2007  0313                     	;# 
  2008  0318                     	;# 
  2009  0318                     	;# 
  2010  0319                     	;# 
  2011  031A                     	;# 
  2012  031C                     	;# 
  2013  031C                     	;# 
  2014  031D                     	;# 
  2015  031E                     	;# 
  2016  038C                     	;# 
  2017  038D                     	;# 
  2018  0394                     	;# 
  2019  0395                     	;# 
  2020  0396                     	;# 
  2021  040C                     	;# 
  2022  040D                     	;# 
  2023  0411                     	;# 
  2024  0411                     	;# 
  2025  0412                     	;# 
  2026  0413                     	;# 
  2027  0414                     	;# 
  2028  0415                     	;# 
  2029  0416                     	;# 
  2030  0417                     	;# 
  2031  0418                     	;# 
  2032  0418                     	;# 
  2033  0419                     	;# 
  2034  041A                     	;# 
  2035  041B                     	;# 
  2036  041C                     	;# 
  2037  041D                     	;# 
  2038  041E                     	;# 
  2039  048D                     	;# 
  2040  0491                     	;# 
  2041  0491                     	;# 
  2042  0492                     	;# 
  2043  0492                     	;# 
  2044  0493                     	;# 
  2045  0493                     	;# 
  2046  0493                     	;# 
  2047  0494                     	;# 
  2048  0494                     	;# 
  2049  0495                     	;# 
  2050  0495                     	;# 
  2051  0496                     	;# 
  2052  0496                     	;# 
  2053  0497                     	;# 
  2054  0497                     	;# 
  2055  0595                     	;# 
  2056  0596                     	;# 
  2057  0597                     	;# 
  2058  059C                     	;# 
  2059  059D                     	;# 
  2060  059E                     	;# 
  2061  0611                     	;# 
  2062  0611                     	;# 
  2063  0612                     	;# 
  2064  0613                     	;# 
  2065  0614                     	;# 
  2066  0614                     	;# 
  2067  0615                     	;# 
  2068  0616                     	;# 
  2069  0617                     	;# 
  2070  0617                     	;# 
  2071  0618                     	;# 
  2072  0619                     	;# 
  2073  061A                     	;# 
  2074  061A                     	;# 
  2075  061B                     	;# 
  2076  061C                     	;# 
  2077  061D                     	;# 
  2078  061D                     	;# 
  2079  061E                     	;# 
  2080  061F                     	;# 
  2081  0FE4                     	;# 
  2082  0FE5                     	;# 
  2083  0FE6                     	;# 
  2084  0FE7                     	;# 
  2085  0FE8                     	;# 
  2086  0FE9                     	;# 
  2087  0FEA                     	;# 
  2088  0FEB                     	;# 
  2089  0FED                     	;# 
  2090  0FEE                     	;# 
  2091  0FEF                     	;# 
  2092  0000                     	;# 
  2093  0001                     	;# 
  2094  0002                     	;# 
  2095  0003                     	;# 
  2096  0004                     	;# 
  2097  0005                     	;# 
  2098  0006                     	;# 
  2099  0007                     	;# 
  2100  0008                     	;# 
  2101  0009                     	;# 
  2102  000A                     	;# 
  2103  000B                     	;# 
  2104  000C                     	;# 
  2105  000D                     	;# 
  2106  000E                     	;# 
  2107  000F                     	;# 
  2108  0010                     	;# 
  2109  0011                     	;# 
  2110  0012                     	;# 
  2111  0013                     	;# 
  2112  0014                     	;# 
  2113  0015                     	;# 
  2114  0016                     	;# 
  2115  0016                     	;# 
  2116  0017                     	;# 
  2117  0018                     	;# 
  2118  0019                     	;# 
  2119  001A                     	;# 
  2120  001B                     	;# 
  2121  001C                     	;# 
  2122  008C                     	;# 
  2123  008D                     	;# 
  2124  008E                     	;# 
  2125  008F                     	;# 
  2126  0090                     	;# 
  2127  0091                     	;# 
  2128  0092                     	;# 
  2129  0093                     	;# 
  2130  0094                     	;# 
  2131  0095                     	;# 
  2132  0096                     	;# 
  2133  0097                     	;# 
  2134  0099                     	;# 
  2135  009A                     	;# 
  2136  009B                     	;# 
  2137  009B                     	;# 
  2138  009C                     	;# 
  2139  009D                     	;# 
  2140  009E                     	;# 
  2141  010C                     	;# 
  2142  010D                     	;# 
  2143  010E                     	;# 
  2144  010F                     	;# 
  2145  0110                     	;# 
  2146  0116                     	;# 
  2147  0117                     	;# 
  2148  011D                     	;# 
  2149  018C                     	;# 
  2150  018D                     	;# 
  2151  018F                     	;# 
  2152  0190                     	;# 
  2153  0191                     	;# 
  2154  0191                     	;# 
  2155  0192                     	;# 
  2156  0193                     	;# 
  2157  0193                     	;# 
  2158  0194                     	;# 
  2159  0195                     	;# 
  2160  0196                     	;# 
  2161  0197                     	;# 
  2162  0199                     	;# 
  2163  0199                     	;# 
  2164  0199                     	;# 
  2165  019A                     	;# 
  2166  019A                     	;# 
  2167  019A                     	;# 
  2168  019B                     	;# 
  2169  019B                     	;# 
  2170  019B                     	;# 
  2171  019B                     	;# 
  2172  019B                     	;# 
  2173  019C                     	;# 
  2174  019C                     	;# 
  2175  019C                     	;# 
  2176  019D                     	;# 
  2177  019D                     	;# 
  2178  019D                     	;# 
  2179  019E                     	;# 
  2180  019E                     	;# 
  2181  019E                     	;# 
  2182  019F                     	;# 
  2183  019F                     	;# 
  2184  019F                     	;# 
  2185  020D                     	;# 
  2186  020F                     	;# 
  2187  0210                     	;# 
  2188  0211                     	;# 
  2189  0211                     	;# 
  2190  0212                     	;# 
  2191  0212                     	;# 
  2192  0213                     	;# 
  2193  0213                     	;# 
  2194  0214                     	;# 
  2195  0214                     	;# 
  2196  0215                     	;# 
  2197  0215                     	;# 
  2198  0215                     	;# 
  2199  0216                     	;# 
  2200  0216                     	;# 
  2201  0217                     	;# 
  2202  0217                     	;# 
  2203  0219                     	;# 
  2204  021A                     	;# 
  2205  021B                     	;# 
  2206  021C                     	;# 
  2207  021D                     	;# 
  2208  021E                     	;# 
  2209  021F                     	;# 
  2210  028C                     	;# 
  2211  028D                     	;# 
  2212  0291                     	;# 
  2213  0291                     	;# 
  2214  0292                     	;# 
  2215  0293                     	;# 
  2216  0298                     	;# 
  2217  0298                     	;# 
  2218  0299                     	;# 
  2219  029A                     	;# 
  2220  029D                     	;# 
  2221  029E                     	;# 
  2222  029F                     	;# 
  2223  030C                     	;# 
  2224  030D                     	;# 
  2225  0311                     	;# 
  2226  0311                     	;# 
  2227  0312                     	;# 
  2228  0313                     	;# 
  2229  0318                     	;# 
  2230  0318                     	;# 
  2231  0319                     	;# 
  2232  031A                     	;# 
  2233  031C                     	;# 
  2234  031C                     	;# 
  2235  031D                     	;# 
  2236  031E                     	;# 
  2237  038C                     	;# 
  2238  038D                     	;# 
  2239  0394                     	;# 
  2240  0395                     	;# 
  2241  0396                     	;# 
  2242  040C                     	;# 
  2243  040D                     	;# 
  2244  0411                     	;# 
  2245  0411                     	;# 
  2246  0412                     	;# 
  2247  0413                     	;# 
  2248  0414                     	;# 
  2249  0415                     	;# 
  2250  0416                     	;# 
  2251  0417                     	;# 
  2252  0418                     	;# 
  2253  0418                     	;# 
  2254  0419                     	;# 
  2255  041A                     	;# 
  2256  041B                     	;# 
  2257  041C                     	;# 
  2258  041D                     	;# 
  2259  041E                     	;# 
  2260  048D                     	;# 
  2261  0491                     	;# 
  2262  0491                     	;# 
  2263  0492                     	;# 
  2264  0492                     	;# 
  2265  0493                     	;# 
  2266  0493                     	;# 
  2267  0493                     	;# 
  2268  0494                     	;# 
  2269  0494                     	;# 
  2270  0495                     	;# 
  2271  0495                     	;# 
  2272  0496                     	;# 
  2273  0496                     	;# 
  2274  0497                     	;# 
  2275  0497                     	;# 
  2276  0595                     	;# 
  2277  0596                     	;# 
  2278  0597                     	;# 
  2279  059C                     	;# 
  2280  059D                     	;# 
  2281  059E                     	;# 
  2282  0611                     	;# 
  2283  0611                     	;# 
  2284  0612                     	;# 
  2285  0613                     	;# 
  2286  0614                     	;# 
  2287  0614                     	;# 
  2288  0615                     	;# 
  2289  0616                     	;# 
  2290  0617                     	;# 
  2291  0617                     	;# 
  2292  0618                     	;# 
  2293  0619                     	;# 
  2294  061A                     	;# 
  2295  061A                     	;# 
  2296  061B                     	;# 
  2297  061C                     	;# 
  2298  061D                     	;# 
  2299  061D                     	;# 
  2300  061E                     	;# 
  2301  061F                     	;# 
  2302  0FE4                     	;# 
  2303  0FE5                     	;# 
  2304  0FE6                     	;# 
  2305  0FE7                     	;# 
  2306  0FE8                     	;# 
  2307  0FE9                     	;# 
  2308  0FEA                     	;# 
  2309  0FEB                     	;# 
  2310  0FED                     	;# 
  2311  0FEE                     	;# 
  2312  0FEF                     	;# 
  2313  0000                     	;# 
  2314  0001                     	;# 
  2315  0002                     	;# 
  2316  0003                     	;# 
  2317  0004                     	;# 
  2318  0005                     	;# 
  2319  0006                     	;# 
  2320  0007                     	;# 
  2321  0008                     	;# 
  2322  0009                     	;# 
  2323  000A                     	;# 
  2324  000B                     	;# 
  2325  000C                     	;# 
  2326  000D                     	;# 
  2327  000E                     	;# 
  2328  000F                     	;# 
  2329  0010                     	;# 
  2330  0011                     	;# 
  2331  0012                     	;# 
  2332  0013                     	;# 
  2333  0014                     	;# 
  2334  0015                     	;# 
  2335  0016                     	;# 
  2336  0016                     	;# 
  2337  0017                     	;# 
  2338  0018                     	;# 
  2339  0019                     	;# 
  2340  001A                     	;# 
  2341  001B                     	;# 
  2342  001C                     	;# 
  2343  008C                     	;# 
  2344  008D                     	;# 
  2345  008E                     	;# 
  2346  008F                     	;# 
  2347  0090                     	;# 
  2348  0091                     	;# 
  2349  0092                     	;# 
  2350  0093                     	;# 
  2351  0094                     	;# 
  2352  0095                     	;# 
  2353  0096                     	;# 
  2354  0097                     	;# 
  2355  0099                     	;# 
  2356  009A                     	;# 
  2357  009B                     	;# 
  2358  009B                     	;# 
  2359  009C                     	;# 
  2360  009D                     	;# 
  2361  009E                     	;# 
  2362  010C                     	;# 
  2363  010D                     	;# 
  2364  010E                     	;# 
  2365  010F                     	;# 
  2366  0110                     	;# 
  2367  0116                     	;# 
  2368  0117                     	;# 
  2369  011D                     	;# 
  2370  018C                     	;# 
  2371  018D                     	;# 
  2372  018F                     	;# 
  2373  0190                     	;# 
  2374  0191                     	;# 
  2375  0191                     	;# 
  2376  0192                     	;# 
  2377  0193                     	;# 
  2378  0193                     	;# 
  2379  0194                     	;# 
  2380  0195                     	;# 
  2381  0196                     	;# 
  2382  0197                     	;# 
  2383  0199                     	;# 
  2384  0199                     	;# 
  2385  0199                     	;# 
  2386  019A                     	;# 
  2387  019A                     	;# 
  2388  019A                     	;# 
  2389  019B                     	;# 
  2390  019B                     	;# 
  2391  019B                     	;# 
  2392  019B                     	;# 
  2393  019B                     	;# 
  2394  019C                     	;# 
  2395  019C                     	;# 
  2396  019C                     	;# 
  2397  019D                     	;# 
  2398  019D                     	;# 
  2399  019D                     	;# 
  2400  019E                     	;# 
  2401  019E                     	;# 
  2402  019E                     	;# 
  2403  019F                     	;# 
  2404  019F                     	;# 
  2405  019F                     	;# 
  2406  020D                     	;# 
  2407  020F                     	;# 
  2408  0210                     	;# 
  2409  0211                     	;# 
  2410  0211                     	;# 
  2411  0212                     	;# 
  2412  0212                     	;# 
  2413  0213                     	;# 
  2414  0213                     	;# 
  2415  0214                     	;# 
  2416  0214                     	;# 
  2417  0215                     	;# 
  2418  0215                     	;# 
  2419  0215                     	;# 
  2420  0216                     	;# 
  2421  0216                     	;# 
  2422  0217                     	;# 
  2423  0217                     	;# 
  2424  0219                     	;# 
  2425  021A                     	;# 
  2426  021B                     	;# 
  2427  021C                     	;# 
  2428  021D                     	;# 
  2429  021E                     	;# 
  2430  021F                     	;# 
  2431  028C                     	;# 
  2432  028D                     	;# 
  2433  0291                     	;# 
  2434  0291                     	;# 
  2435  0292                     	;# 
  2436  0293                     	;# 
  2437  0298                     	;# 
  2438  0298                     	;# 
  2439  0299                     	;# 
  2440  029A                     	;# 
  2441  029D                     	;# 
  2442  029E                     	;# 
  2443  029F                     	;# 
  2444  030C                     	;# 
  2445  030D                     	;# 
  2446  0311                     	;# 
  2447  0311                     	;# 
  2448  0312                     	;# 
  2449  0313                     	;# 
  2450  0318                     	;# 
  2451  0318                     	;# 
  2452  0319                     	;# 
  2453  031A                     	;# 
  2454  031C                     	;# 
  2455  031C                     	;# 
  2456  031D                     	;# 
  2457  031E                     	;# 
  2458  038C                     	;# 
  2459  038D                     	;# 
  2460  0394                     	;# 
  2461  0395                     	;# 
  2462  0396                     	;# 
  2463  040C                     	;# 
  2464  040D                     	;# 
  2465  0411                     	;# 
  2466  0411                     	;# 
  2467  0412                     	;# 
  2468  0413                     	;# 
  2469  0414                     	;# 
  2470  0415                     	;# 
  2471  0416                     	;# 
  2472  0417                     	;# 
  2473  0418                     	;# 
  2474  0418                     	;# 
  2475  0419                     	;# 
  2476  041A                     	;# 
  2477  041B                     	;# 
  2478  041C                     	;# 
  2479  041D                     	;# 
  2480  041E                     	;# 
  2481  048D                     	;# 
  2482  0491                     	;# 
  2483  0491                     	;# 
  2484  0492                     	;# 
  2485  0492                     	;# 
  2486  0493                     	;# 
  2487  0493                     	;# 
  2488  0493                     	;# 
  2489  0494                     	;# 
  2490  0494                     	;# 
  2491  0495                     	;# 
  2492  0495                     	;# 
  2493  0496                     	;# 
  2494  0496                     	;# 
  2495  0497                     	;# 
  2496  0497                     	;# 
  2497  0595                     	;# 
  2498  0596                     	;# 
  2499  0597                     	;# 
  2500  059C                     	;# 
  2501  059D                     	;# 
  2502  059E                     	;# 
  2503  0611                     	;# 
  2504  0611                     	;# 
  2505  0612                     	;# 
  2506  0613                     	;# 
  2507  0614                     	;# 
  2508  0614                     	;# 
  2509  0615                     	;# 
  2510  0616                     	;# 
  2511  0617                     	;# 
  2512  0617                     	;# 
  2513  0618                     	;# 
  2514  0619                     	;# 
  2515  061A                     	;# 
  2516  061A                     	;# 
  2517  061B                     	;# 
  2518  061C                     	;# 
  2519  061D                     	;# 
  2520  061D                     	;# 
  2521  061E                     	;# 
  2522  061F                     	;# 
  2523  0FE4                     	;# 
  2524  0FE5                     	;# 
  2525  0FE6                     	;# 
  2526  0FE7                     	;# 
  2527  0FE8                     	;# 
  2528  0FE9                     	;# 
  2529  0FEA                     	;# 
  2530  0FEB                     	;# 
  2531  0FED                     	;# 
  2532  0FEE                     	;# 
  2533  0FEF                     	;# 
  2534  0000                     	;# 
  2535  0001                     	;# 
  2536  0002                     	;# 
  2537  0003                     	;# 
  2538  0004                     	;# 
  2539  0005                     	;# 
  2540  0006                     	;# 
  2541  0007                     	;# 
  2542  0008                     	;# 
  2543  0009                     	;# 
  2544  000A                     	;# 
  2545  000B                     	;# 
  2546  000C                     	;# 
  2547  000D                     	;# 
  2548  000E                     	;# 
  2549  000F                     	;# 
  2550  0010                     	;# 
  2551  0011                     	;# 
  2552  0012                     	;# 
  2553  0013                     	;# 
  2554  0014                     	;# 
  2555  0015                     	;# 
  2556  0016                     	;# 
  2557  0016                     	;# 
  2558  0017                     	;# 
  2559  0018                     	;# 
  2560  0019                     	;# 
  2561  001A                     	;# 
  2562  001B                     	;# 
  2563  001C                     	;# 
  2564  008C                     	;# 
  2565  008D                     	;# 
  2566  008E                     	;# 
  2567  008F                     	;# 
  2568  0090                     	;# 
  2569  0091                     	;# 
  2570  0092                     	;# 
  2571  0093                     	;# 
  2572  0094                     	;# 
  2573  0095                     	;# 
  2574  0096                     	;# 
  2575  0097                     	;# 
  2576  0099                     	;# 
  2577  009A                     	;# 
  2578  009B                     	;# 
  2579  009B                     	;# 
  2580  009C                     	;# 
  2581  009D                     	;# 
  2582  009E                     	;# 
  2583  010C                     	;# 
  2584  010D                     	;# 
  2585  010E                     	;# 
  2586  010F                     	;# 
  2587  0110                     	;# 
  2588  0116                     	;# 
  2589  0117                     	;# 
  2590  011D                     	;# 
  2591  018C                     	;# 
  2592  018D                     	;# 
  2593  018F                     	;# 
  2594  0190                     	;# 
  2595  0191                     	;# 
  2596  0191                     	;# 
  2597  0192                     	;# 
  2598  0193                     	;# 
  2599  0193                     	;# 
  2600  0194                     	;# 
  2601  0195                     	;# 
  2602  0196                     	;# 
  2603  0197                     	;# 
  2604  0199                     	;# 
  2605  0199                     	;# 
  2606  0199                     	;# 
  2607  019A                     	;# 
  2608  019A                     	;# 
  2609  019A                     	;# 
  2610  019B                     	;# 
  2611  019B                     	;# 
  2612  019B                     	;# 
  2613  019B                     	;# 
  2614  019B                     	;# 
  2615  019C                     	;# 
  2616  019C                     	;# 
  2617  019C                     	;# 
  2618  019D                     	;# 
  2619  019D                     	;# 
  2620  019D                     	;# 
  2621  019E                     	;# 
  2622  019E                     	;# 
  2623  019E                     	;# 
  2624  019F                     	;# 
  2625  019F                     	;# 
  2626  019F                     	;# 
  2627  020D                     	;# 
  2628  020F                     	;# 
  2629  0210                     	;# 
  2630  0211                     	;# 
  2631  0211                     	;# 
  2632  0212                     	;# 
  2633  0212                     	;# 
  2634  0213                     	;# 
  2635  0213                     	;# 
  2636  0214                     	;# 
  2637  0214                     	;# 
  2638  0215                     	;# 
  2639  0215                     	;# 
  2640  0215                     	;# 
  2641  0216                     	;# 
  2642  0216                     	;# 
  2643  0217                     	;# 
  2644  0217                     	;# 
  2645  0219                     	;# 
  2646  021A                     	;# 
  2647  021B                     	;# 
  2648  021C                     	;# 
  2649  021D                     	;# 
  2650  021E                     	;# 
  2651  021F                     	;# 
  2652  028C                     	;# 
  2653  028D                     	;# 
  2654  0291                     	;# 
  2655  0291                     	;# 
  2656  0292                     	;# 
  2657  0293                     	;# 
  2658  0298                     	;# 
  2659  0298                     	;# 
  2660  0299                     	;# 
  2661  029A                     	;# 
  2662  029D                     	;# 
  2663  029E                     	;# 
  2664  029F                     	;# 
  2665  030C                     	;# 
  2666  030D                     	;# 
  2667  0311                     	;# 
  2668  0311                     	;# 
  2669  0312                     	;# 
  2670  0313                     	;# 
  2671  0318                     	;# 
  2672  0318                     	;# 
  2673  0319                     	;# 
  2674  031A                     	;# 
  2675  031C                     	;# 
  2676  031C                     	;# 
  2677  031D                     	;# 
  2678  031E                     	;# 
  2679  038C                     	;# 
  2680  038D                     	;# 
  2681  0394                     	;# 
  2682  0395                     	;# 
  2683  0396                     	;# 
  2684  040C                     	;# 
  2685  040D                     	;# 
  2686  0411                     	;# 
  2687  0411                     	;# 
  2688  0412                     	;# 
  2689  0413                     	;# 
  2690  0414                     	;# 
  2691  0415                     	;# 
  2692  0416                     	;# 
  2693  0417                     	;# 
  2694  0418                     	;# 
  2695  0418                     	;# 
  2696  0419                     	;# 
  2697  041A                     	;# 
  2698  041B                     	;# 
  2699  041C                     	;# 
  2700  041D                     	;# 
  2701  041E                     	;# 
  2702  048D                     	;# 
  2703  0491                     	;# 
  2704  0491                     	;# 
  2705  0492                     	;# 
  2706  0492                     	;# 
  2707  0493                     	;# 
  2708  0493                     	;# 
  2709  0493                     	;# 
  2710  0494                     	;# 
  2711  0494                     	;# 
  2712  0495                     	;# 
  2713  0495                     	;# 
  2714  0496                     	;# 
  2715  0496                     	;# 
  2716  0497                     	;# 
  2717  0497                     	;# 
  2718  0595                     	;# 
  2719  0596                     	;# 
  2720  0597                     	;# 
  2721  059C                     	;# 
  2722  059D                     	;# 
  2723  059E                     	;# 
  2724  0611                     	;# 
  2725  0611                     	;# 
  2726  0612                     	;# 
  2727  0613                     	;# 
  2728  0614                     	;# 
  2729  0614                     	;# 
  2730  0615                     	;# 
  2731  0616                     	;# 
  2732  0617                     	;# 
  2733  0617                     	;# 
  2734  0618                     	;# 
  2735  0619                     	;# 
  2736  061A                     	;# 
  2737  061A                     	;# 
  2738  061B                     	;# 
  2739  061C                     	;# 
  2740  061D                     	;# 
  2741  061D                     	;# 
  2742  061E                     	;# 
  2743  061F                     	;# 
  2744  0FE4                     	;# 
  2745  0FE5                     	;# 
  2746  0FE6                     	;# 
  2747  0FE7                     	;# 
  2748  0FE8                     	;# 
  2749  0FE9                     	;# 
  2750  0FEA                     	;# 
  2751  0FEB                     	;# 
  2752  0FED                     	;# 
  2753  0FEE                     	;# 
  2754  0FEF                     	;# 
  2755  0000                     	;# 
  2756  0001                     	;# 
  2757  0002                     	;# 
  2758  0003                     	;# 
  2759  0004                     	;# 
  2760  0005                     	;# 
  2761  0006                     	;# 
  2762  0007                     	;# 
  2763  0008                     	;# 
  2764  0009                     	;# 
  2765  000A                     	;# 
  2766  000B                     	;# 
  2767  000C                     	;# 
  2768  000D                     	;# 
  2769  000E                     	;# 
  2770  000F                     	;# 
  2771  0010                     	;# 
  2772  0011                     	;# 
  2773  0012                     	;# 
  2774  0013                     	;# 
  2775  0014                     	;# 
  2776  0015                     	;# 
  2777  0016                     	;# 
  2778  0016                     	;# 
  2779  0017                     	;# 
  2780  0018                     	;# 
  2781  0019                     	;# 
  2782  001A                     	;# 
  2783  001B                     	;# 
  2784  001C                     	;# 
  2785  008C                     	;# 
  2786  008D                     	;# 
  2787  008E                     	;# 
  2788  008F                     	;# 
  2789  0090                     	;# 
  2790  0091                     	;# 
  2791  0092                     	;# 
  2792  0093                     	;# 
  2793  0094                     	;# 
  2794  0095                     	;# 
  2795  0096                     	;# 
  2796  0097                     	;# 
  2797  0099                     	;# 
  2798  009A                     	;# 
  2799  009B                     	;# 
  2800  009B                     	;# 
  2801  009C                     	;# 
  2802  009D                     	;# 
  2803  009E                     	;# 
  2804  010C                     	;# 
  2805  010D                     	;# 
  2806  010E                     	;# 
  2807  010F                     	;# 
  2808  0110                     	;# 
  2809  0116                     	;# 
  2810  0117                     	;# 
  2811  011D                     	;# 
  2812  018C                     	;# 
  2813  018D                     	;# 
  2814  018F                     	;# 
  2815  0190                     	;# 
  2816  0191                     	;# 
  2817  0191                     	;# 
  2818  0192                     	;# 
  2819  0193                     	;# 
  2820  0193                     	;# 
  2821  0194                     	;# 
  2822  0195                     	;# 
  2823  0196                     	;# 
  2824  0197                     	;# 
  2825  0199                     	;# 
  2826  0199                     	;# 
  2827  0199                     	;# 
  2828  019A                     	;# 
  2829  019A                     	;# 
  2830  019A                     	;# 
  2831  019B                     	;# 
  2832  019B                     	;# 
  2833  019B                     	;# 
  2834  019B                     	;# 
  2835  019B                     	;# 
  2836  019C                     	;# 
  2837  019C                     	;# 
  2838  019C                     	;# 
  2839  019D                     	;# 
  2840  019D                     	;# 
  2841  019D                     	;# 
  2842  019E                     	;# 
  2843  019E                     	;# 
  2844  019E                     	;# 
  2845  019F                     	;# 
  2846  019F                     	;# 
  2847  019F                     	;# 
  2848  020D                     	;# 
  2849  020F                     	;# 
  2850  0210                     	;# 
  2851  0211                     	;# 
  2852  0211                     	;# 
  2853  0212                     	;# 
  2854  0212                     	;# 
  2855  0213                     	;# 
  2856  0213                     	;# 
  2857  0214                     	;# 
  2858  0214                     	;# 
  2859  0215                     	;# 
  2860  0215                     	;# 
  2861  0215                     	;# 
  2862  0216                     	;# 
  2863  0216                     	;# 
  2864  0217                     	;# 
  2865  0217                     	;# 
  2866  0219                     	;# 
  2867  021A                     	;# 
  2868  021B                     	;# 
  2869  021C                     	;# 
  2870  021D                     	;# 
  2871  021E                     	;# 
  2872  021F                     	;# 
  2873  028C                     	;# 
  2874  028D                     	;# 
  2875  0291                     	;# 
  2876  0291                     	;# 
  2877  0292                     	;# 
  2878  0293                     	;# 
  2879  0298                     	;# 
  2880  0298                     	;# 
  2881  0299                     	;# 
  2882  029A                     	;# 
  2883  029D                     	;# 
  2884  029E                     	;# 
  2885  029F                     	;# 
  2886  030C                     	;# 
  2887  030D                     	;# 
  2888  0311                     	;# 
  2889  0311                     	;# 
  2890  0312                     	;# 
  2891  0313                     	;# 
  2892  0318                     	;# 
  2893  0318                     	;# 
  2894  0319                     	;# 
  2895  031A                     	;# 
  2896  031C                     	;# 
  2897  031C                     	;# 
  2898  031D                     	;# 
  2899  031E                     	;# 
  2900  038C                     	;# 
  2901  038D                     	;# 
  2902  0394                     	;# 
  2903  0395                     	;# 
  2904  0396                     	;# 
  2905  040C                     	;# 
  2906  040D                     	;# 
  2907  0411                     	;# 
  2908  0411                     	;# 
  2909  0412                     	;# 
  2910  0413                     	;# 
  2911  0414                     	;# 
  2912  0415                     	;# 
  2913  0416                     	;# 
  2914  0417                     	;# 
  2915  0418                     	;# 
  2916  0418                     	;# 
  2917  0419                     	;# 
  2918  041A                     	;# 
  2919  041B                     	;# 
  2920  041C                     	;# 
  2921  041D                     	;# 
  2922  041E                     	;# 
  2923  048D                     	;# 
  2924  0491                     	;# 
  2925  0491                     	;# 
  2926  0492                     	;# 
  2927  0492                     	;# 
  2928  0493                     	;# 
  2929  0493                     	;# 
  2930  0493                     	;# 
  2931  0494                     	;# 
  2932  0494                     	;# 
  2933  0495                     	;# 
  2934  0495                     	;# 
  2935  0496                     	;# 
  2936  0496                     	;# 
  2937  0497                     	;# 
  2938  0497                     	;# 
  2939  0595                     	;# 
  2940  0596                     	;# 
  2941  0597                     	;# 
  2942  059C                     	;# 
  2943  059D                     	;# 
  2944  059E                     	;# 
  2945  0611                     	;# 
  2946  0611                     	;# 
  2947  0612                     	;# 
  2948  0613                     	;# 
  2949  0614                     	;# 
  2950  0614                     	;# 
  2951  0615                     	;# 
  2952  0616                     	;# 
  2953  0617                     	;# 
  2954  0617                     	;# 
  2955  0618                     	;# 
  2956  0619                     	;# 
  2957  061A                     	;# 
  2958  061A                     	;# 
  2959  061B                     	;# 
  2960  061C                     	;# 
  2961  061D                     	;# 
  2962  061D                     	;# 
  2963  061E                     	;# 
  2964  061F                     	;# 
  2965  0FE4                     	;# 
  2966  0FE5                     	;# 
  2967  0FE6                     	;# 
  2968  0FE7                     	;# 
  2969  0FE8                     	;# 
  2970  0FE9                     	;# 
  2971  0FEA                     	;# 
  2972  0FEB                     	;# 
  2973  0FED                     	;# 
  2974  0FEE                     	;# 
  2975  0FEF                     	;# 
  2976  0000                     	;# 
  2977  0001                     	;# 
  2978  0002                     	;# 
  2979  0003                     	;# 
  2980  0004                     	;# 
  2981  0005                     	;# 
  2982  0006                     	;# 
  2983  0007                     	;# 
  2984  0008                     	;# 
  2985  0009                     	;# 
  2986  000A                     	;# 
  2987  000B                     	;# 
  2988  000C                     	;# 
  2989  000D                     	;# 
  2990  000E                     	;# 
  2991  000F                     	;# 
  2992  0010                     	;# 
  2993  0011                     	;# 
  2994  0012                     	;# 
  2995  0013                     	;# 
  2996  0014                     	;# 
  2997  0015                     	;# 
  2998  0016                     	;# 
  2999  0016                     	;# 
  3000  0017                     	;# 
  3001  0018                     	;# 
  3002  0019                     	;# 
  3003  001A                     	;# 
  3004  001B                     	;# 
  3005  001C                     	;# 
  3006  008C                     	;# 
  3007  008D                     	;# 
  3008  008E                     	;# 
  3009  008F                     	;# 
  3010  0090                     	;# 
  3011  0091                     	;# 
  3012  0092                     	;# 
  3013  0093                     	;# 
  3014  0094                     	;# 
  3015  0095                     	;# 
  3016  0096                     	;# 
  3017  0097                     	;# 
  3018  0099                     	;# 
  3019  009A                     	;# 
  3020  009B                     	;# 
  3021  009B                     	;# 
  3022  009C                     	;# 
  3023  009D                     	;# 
  3024  009E                     	;# 
  3025  010C                     	;# 
  3026  010D                     	;# 
  3027  010E                     	;# 
  3028  010F                     	;# 
  3029  0110                     	;# 
  3030  0116                     	;# 
  3031  0117                     	;# 
  3032  011D                     	;# 
  3033  018C                     	;# 
  3034  018D                     	;# 
  3035  018F                     	;# 
  3036  0190                     	;# 
  3037  0191                     	;# 
  3038  0191                     	;# 
  3039  0192                     	;# 
  3040  0193                     	;# 
  3041  0193                     	;# 
  3042  0194                     	;# 
  3043  0195                     	;# 
  3044  0196                     	;# 
  3045  0197                     	;# 
  3046  0199                     	;# 
  3047  0199                     	;# 
  3048  0199                     	;# 
  3049  019A                     	;# 
  3050  019A                     	;# 
  3051  019A                     	;# 
  3052  019B                     	;# 
  3053  019B                     	;# 
  3054  019B                     	;# 
  3055  019B                     	;# 
  3056  019B                     	;# 
  3057  019C                     	;# 
  3058  019C                     	;# 
  3059  019C                     	;# 
  3060  019D                     	;# 
  3061  019D                     	;# 
  3062  019D                     	;# 
  3063  019E                     	;# 
  3064  019E                     	;# 
  3065  019E                     	;# 
  3066  019F                     	;# 
  3067  019F                     	;# 
  3068  019F                     	;# 
  3069  020D                     	;# 
  3070  020F                     	;# 
  3071  0210                     	;# 
  3072  0211                     	;# 
  3073  0211                     	;# 
  3074  0212                     	;# 
  3075  0212                     	;# 
  3076  0213                     	;# 
  3077  0213                     	;# 
  3078  0214                     	;# 
  3079  0214                     	;# 
  3080  0215                     	;# 
  3081  0215                     	;# 
  3082  0215                     	;# 
  3083  0216                     	;# 
  3084  0216                     	;# 
  3085  0217                     	;# 
  3086  0217                     	;# 
  3087  0219                     	;# 
  3088  021A                     	;# 
  3089  021B                     	;# 
  3090  021C                     	;# 
  3091  021D                     	;# 
  3092  021E                     	;# 
  3093  021F                     	;# 
  3094  028C                     	;# 
  3095  028D                     	;# 
  3096  0291                     	;# 
  3097  0291                     	;# 
  3098  0292                     	;# 
  3099  0293                     	;# 
  3100  0298                     	;# 
  3101  0298                     	;# 
  3102  0299                     	;# 
  3103  029A                     	;# 
  3104  029D                     	;# 
  3105  029E                     	;# 
  3106  029F                     	;# 
  3107  030C                     	;# 
  3108  030D                     	;# 
  3109  0311                     	;# 
  3110  0311                     	;# 
  3111  0312                     	;# 
  3112  0313                     	;# 
  3113  0318                     	;# 
  3114  0318                     	;# 
  3115  0319                     	;# 
  3116  031A                     	;# 
  3117  031C                     	;# 
  3118  031C                     	;# 
  3119  031D                     	;# 
  3120  031E                     	;# 
  3121  038C                     	;# 
  3122  038D                     	;# 
  3123  0394                     	;# 
  3124  0395                     	;# 
  3125  0396                     	;# 
  3126  040C                     	;# 
  3127  040D                     	;# 
  3128  0411                     	;# 
  3129  0411                     	;# 
  3130  0412                     	;# 
  3131  0413                     	;# 
  3132  0414                     	;# 
  3133  0415                     	;# 
  3134  0416                     	;# 
  3135  0417                     	;# 
  3136  0418                     	;# 
  3137  0418                     	;# 
  3138  0419                     	;# 
  3139  041A                     	;# 
  3140  041B                     	;# 
  3141  041C                     	;# 
  3142  041D                     	;# 
  3143  041E                     	;# 
  3144  048D                     	;# 
  3145  0491                     	;# 
  3146  0491                     	;# 
  3147  0492                     	;# 
  3148  0492                     	;# 
  3149  0493                     	;# 
  3150  0493                     	;# 
  3151  0493                     	;# 
  3152  0494                     	;# 
  3153  0494                     	;# 
  3154  0495                     	;# 
  3155  0495                     	;# 
  3156  0496                     	;# 
  3157  0496                     	;# 
  3158  0497                     	;# 
  3159  0497                     	;# 
  3160  0595                     	;# 
  3161  0596                     	;# 
  3162  0597                     	;# 
  3163  059C                     	;# 
  3164  059D                     	;# 
  3165  059E                     	;# 
  3166  0611                     	;# 
  3167  0611                     	;# 
  3168  0612                     	;# 
  3169  0613                     	;# 
  3170  0614                     	;# 
  3171  0614                     	;# 
  3172  0615                     	;# 
  3173  0616                     	;# 
  3174  0617                     	;# 
  3175  0617                     	;# 
  3176  0618                     	;# 
  3177  0619                     	;# 
  3178  061A                     	;# 
  3179  061A                     	;# 
  3180  061B                     	;# 
  3181  061C                     	;# 
  3182  061D                     	;# 
  3183  061D                     	;# 
  3184  061E                     	;# 
  3185  061F                     	;# 
  3186  0FE4                     	;# 
  3187  0FE5                     	;# 
  3188  0FE6                     	;# 
  3189  0FE7                     	;# 
  3190  0FE8                     	;# 
  3191  0FE9                     	;# 
  3192  0FEA                     	;# 
  3193  0FEB                     	;# 
  3194  0FED                     	;# 
  3195  0FEE                     	;# 
  3196  0FEF                     	;_delayArray
  3197                           
  3198                           	psect	idataBANK0
  3199  1000                     __pidataBANK0:	
  3200                           
  3201                           ;initializer for _baseline_delay_time
  3202  1000  34D0               	retlw	208
  3203  1001  3407               	retlw	7
  3204  1002  3400               	retlw	0
  3205  1003  3400               	retlw	0
  3206                           
  3207                           ;initializer for _delay_time
  3208  1004  34D0               	retlw	208
  3209  1005  3407               	retlw	7
  3210  1006  3400               	retlw	0
  3211  1007  3400               	retlw	0
  3212                           
  3213                           ;initializer for _bottom_push_state
  3214  1008  3406               	retlw	6
  3215  1009  3400               	retlw	0
  3216                           
  3217                           ;initializer for _long_press_limit
  3218  100A  34E8               	retlw	232
  3219  100B  3403               	retlw	3
  3220                           
  3221                           ;initializer for _top_push_state
  3222  100C  3406               	retlw	6
  3223  100D  3400               	retlw	0
  3224                           
  3225                           ;initializer for _blink_rate
  3226  100E  3414               	retlw	20
  3227                           
  3228                           ;initializer for _longTap_state
  3229  100F  34FF               	retlw	255
  3230                           
  3231                           ;initializer for _num_taps
  3232  1010  3404               	retlw	4
  3233                           
  3234                           ;initializer for _presetChannel
  3235  1011  3401               	retlw	1
  3236                           
  3237                           ;initializer for _switchBypass_state
  3238  1012  34FF               	retlw	255
  3239                           
  3240                           	psect	idataBANK2
  3241  1C67                     __pidataBANK2:	
  3242                           
  3243                           ;initializer for _knob1_prev
  3244  1C67  34D0               	retlw	208
  3245  1C68  3407               	retlw	7
  3246                           
  3247                           ;initializer for _knob2_prev
  3248  1C69  34D0               	retlw	208
  3249  1C6A  3407               	retlw	7
  3250                           
  3251                           ;initializer for _knob3_prev
  3252  1C6B  34D0               	retlw	208
  3253  1C6C  3407               	retlw	7
  3254                           
  3255                           ;initializer for _knob4_prev
  3256  1C6D  34D0               	retlw	208
  3257  1C6E  3407               	retlw	7
  3258                           
  3259                           ;initializer for _knob5_prev
  3260  1C6F  34D0               	retlw	208
  3261  1C70  3407               	retlw	7
  3262                           
  3263                           ;initializer for _expressionChannel
  3264  1C71  3401               	retlw	1
  3265                           
  3266                           ;initializer for _feedback_state
  3267  1C72  34FF               	retlw	255
  3268                           
  3269                           ;initializer for _presetModeCnst
  3270  1C73  3401               	retlw	1
  3271                           
  3272                           ;initializer for _switchTap_state
  3273  1C74  34FF               	retlw	255
  3274                           
  3275                           	psect	idataBANK3
  3276  1C59                     __pidataBANK3:	
  3277                           
  3278                           ;initializer for _blink_delay
  3279  1C59  3464               	retlw	100
  3280  1C5A  3400               	retlw	0
  3281                           
  3282                           ;initializer for _delay_time_changed
  3283  1C5B  3401               	retlw	1
  3284  1C5C  3400               	retlw	0
  3285                           
  3286                           ;initializer for _mod_delay_time
  3287  1C5D  34D0               	retlw	208
  3288  1C5E  3407               	retlw	7
  3289                           
  3290                           ;initializer for _switchBypass_up
  3291  1C5F  3401               	retlw	1
  3292  1C60  3400               	retlw	0
  3293                           
  3294                           ;initializer for _tap_iteration
  3295  1C61  3401               	retlw	1
  3296  1C62  3400               	retlw	0
  3297                           
  3298                           ;initializer for _blink_state
  3299  1C63  3401               	retlw	1
  3300                           
  3301                           ;initializer for _currentBypassState
  3302  1C64  34FF               	retlw	255
  3303                           
  3304                           ;initializer for _expSwitchState
  3305  1C65  34FF               	retlw	255
  3306                           
  3307                           ;initializer for _expressModeCnst
  3308  1C66  3402               	retlw	2
  3309                           
  3310                           	psect	idataBANK4
  3311  1D79                     __pidataBANK4:	
  3312                           
  3313                           ;initializer for _B25k
  3314  1D79  34FF               	retlw	255
  3315  1D7A  34FF               	retlw	255
  3316  1D7B  34FF               	retlw	255
  3317  1D7C  34DF               	retlw	223
  3318  1D7D  34AE               	retlw	174
  3319  1D7E  348E               	retlw	142
  3320  1D7F  3478               	retlw	120
  3321  1D80  3467               	retlw	103
  3322  1D81  345B               	retlw	91
  3323  1D82  3450               	retlw	80
  3324  1D83  3448               	retlw	72
  3325  1D84  3442               	retlw	66
  3326  1D85  343C               	retlw	60
  3327  1D86  3437               	retlw	55
  3328  1D87  3433               	retlw	51
  3329  1D88  3430               	retlw	48
  3330  1D89  342D               	retlw	45
  3331  1D8A  342A               	retlw	42
  3332  1D8B  3427               	retlw	39
  3333  1D8C  3425               	retlw	37
  3334  1D8D  3423               	retlw	35
  3335  1D8E  3421               	retlw	33
  3336  1D8F  3420               	retlw	32
  3337  1D90  341E               	retlw	30
  3338  1D91  341D               	retlw	29
  3339  1D92  341C               	retlw	28
  3340  1D93  341B               	retlw	27
  3341  1D94  341A               	retlw	26
  3342  1D95  3419               	retlw	25
  3343  1D96  3418               	retlw	24
  3344  1D97  3417               	retlw	23
  3345  1D98  3416               	retlw	22
  3346  1D99  3415               	retlw	21
  3347  1D9A  3415               	retlw	21
  3348  1D9B  3414               	retlw	20
  3349  1D9C  3413               	retlw	19
  3350  1D9D  340F               	retlw	15
  3351  1D9E  340B               	retlw	11
  3352  1D9F  3407               	retlw	7
  3353  1DA0  3407               	retlw	7
  3354                           
  3355                           	psect	idataBANK7
  3356  1013                     __pidataBANK7:	
  3357                           
  3358                           ;initializer for _modSin
  3359  1013  3400               	retlw	0
  3360  1014  340A               	retlw	10
  3361  1015  3414               	retlw	20
  3362  1016  341E               	retlw	30
  3363  1017  3428               	retlw	40
  3364  1018  3432               	retlw	50
  3365  1019  343A               	retlw	58
  3366  101A  3442               	retlw	66
  3367  101B  344A               	retlw	74
  3368  101C  3450               	retlw	80
  3369  101D  3456               	retlw	86
  3370  101E  345B               	retlw	91
  3371  101F  345F               	retlw	95
  3372  1020  3461               	retlw	97
  3373  1021  3463               	retlw	99
  3374  1022  3464               	retlw	100
  3375  1023  3463               	retlw	99
  3376  1024  3461               	retlw	97
  3377  1025  345F               	retlw	95
  3378  1026  345B               	retlw	91
  3379  1027  3456               	retlw	86
  3380  1028  3450               	retlw	80
  3381  1029  344A               	retlw	74
  3382  102A  3442               	retlw	66
  3383  102B  343A               	retlw	58
  3384  102C  3432               	retlw	50
  3385  102D  3428               	retlw	40
  3386  102E  341E               	retlw	30
  3387  102F  3414               	retlw	20
  3388  1030  340A               	retlw	10
  3389  1031  3400               	retlw	0
  3390  1032  34F6               	retlw	-10
  3391  1033  34EC               	retlw	-20
  3392  1034  34E2               	retlw	-30
  3393  1035  34D8               	retlw	-40
  3394  1036  34CE               	retlw	-50
  3395  1037  34C6               	retlw	-58
  3396  1038  34BE               	retlw	-66
  3397  1039  34B6               	retlw	-74
  3398  103A  34B0               	retlw	-80
  3399  103B  34AA               	retlw	-86
  3400  103C  34A5               	retlw	-91
  3401  103D  34A1               	retlw	-95
  3402  103E  349F               	retlw	-97
  3403  103F  349D               	retlw	-99
  3404  1040  349C               	retlw	-100
  3405  1041  349D               	retlw	-99
  3406  1042  349F               	retlw	-97
  3407  1043  34A1               	retlw	-95
  3408  1044  34A5               	retlw	-91
  3409  1045  34AA               	retlw	-86
  3410  1046  34B0               	retlw	-80
  3411  1047  34B6               	retlw	-74
  3412  1048  34BE               	retlw	-66
  3413  1049  34C6               	retlw	-58
  3414  104A  34CE               	retlw	-50
  3415  104B  34D8               	retlw	-40
  3416  104C  34E2               	retlw	-30
  3417  104D  34EC               	retlw	-20
  3418  104E  34F6               	retlw	-10
  3419  104F  3400               	retlw	0
  3420                           
  3421                           	psect	idataBANK8
  3422  1FC3                     __pidataBANK8:	
  3423                           
  3424                           ;initializer for _modTri
  3425  1FC3  3400               	retlw	0
  3426  1FC4  3407               	retlw	7
  3427  1FC5  340D               	retlw	13
  3428  1FC6  3414               	retlw	20
  3429  1FC7  341B               	retlw	27
  3430  1FC8  3421               	retlw	33
  3431  1FC9  3428               	retlw	40
  3432  1FCA  342F               	retlw	47
  3433  1FCB  3435               	retlw	53
  3434  1FCC  343C               	retlw	60
  3435  1FCD  3443               	retlw	67
  3436  1FCE  3449               	retlw	73
  3437  1FCF  3450               	retlw	80
  3438  1FD0  3457               	retlw	87
  3439  1FD1  345D               	retlw	93
  3440  1FD2  3464               	retlw	100
  3441  1FD3  345D               	retlw	93
  3442  1FD4  3457               	retlw	87
  3443  1FD5  3450               	retlw	80
  3444  1FD6  3449               	retlw	73
  3445  1FD7  3443               	retlw	67
  3446  1FD8  343C               	retlw	60
  3447  1FD9  3435               	retlw	53
  3448  1FDA  342F               	retlw	47
  3449  1FDB  3428               	retlw	40
  3450  1FDC  3421               	retlw	33
  3451  1FDD  341B               	retlw	27
  3452  1FDE  3414               	retlw	20
  3453  1FDF  340D               	retlw	13
  3454  1FE0  3407               	retlw	7
  3455  1FE1  3400               	retlw	0
  3456  1FE2  34F9               	retlw	-7
  3457  1FE3  34F3               	retlw	-13
  3458  1FE4  34EC               	retlw	-20
  3459  1FE5  34E5               	retlw	-27
  3460  1FE6  34DF               	retlw	-33
  3461  1FE7  34D8               	retlw	-40
  3462  1FE8  34D1               	retlw	-47
  3463  1FE9  34CB               	retlw	-53
  3464  1FEA  34C4               	retlw	-60
  3465  1FEB  34BD               	retlw	-67
  3466  1FEC  34B7               	retlw	-73
  3467  1FED  34B0               	retlw	-80
  3468  1FEE  34A9               	retlw	-87
  3469  1FEF  34A3               	retlw	-93
  3470  1FF0  349C               	retlw	-100
  3471  1FF1  34A3               	retlw	-93
  3472  1FF2  34A9               	retlw	-87
  3473  1FF3  34B0               	retlw	-80
  3474  1FF4  34B7               	retlw	-73
  3475  1FF5  34BD               	retlw	-67
  3476  1FF6  34C4               	retlw	-60
  3477  1FF7  34CB               	retlw	-53
  3478  1FF8  34D1               	retlw	-47
  3479  1FF9  34D8               	retlw	-40
  3480  1FFA  34DF               	retlw	-33
  3481  1FFB  34E5               	retlw	-27
  3482  1FFC  34EC               	retlw	-20
  3483  1FFD  34F3               	retlw	-13
  3484  1FFE  34F9               	retlw	-7
  3485  1FFF  3400               	retlw	0
  3486                           
  3487                           	psect	idataBANK9
  3488  1F86                     __pidataBANK9:	
  3489                           
  3490                           ;initializer for _modRevSaw
  3491  1F86  3400               	retlw	0
  3492  1F87  34FD               	retlw	-3
  3493  1F88  34F9               	retlw	-7
  3494  1F89  34F6               	retlw	-10
  3495  1F8A  34F3               	retlw	-13
  3496  1F8B  34EF               	retlw	-17
  3497  1F8C  34EC               	retlw	-20
  3498  1F8D  34E9               	retlw	-23
  3499  1F8E  34E5               	retlw	-27
  3500  1F8F  34E2               	retlw	-30
  3501  1F90  34DF               	retlw	-33
  3502  1F91  34DB               	retlw	-37
  3503  1F92  34D8               	retlw	-40
  3504  1F93  34D5               	retlw	-43
  3505  1F94  34D1               	retlw	-47
  3506  1F95  34CE               	retlw	-50
  3507  1F96  34CB               	retlw	-53
  3508  1F97  34C7               	retlw	-57
  3509  1F98  34C4               	retlw	-60
  3510  1F99  34C1               	retlw	-63
  3511  1F9A  34BD               	retlw	-67
  3512  1F9B  34BA               	retlw	-70
  3513  1F9C  34B7               	retlw	-73
  3514  1F9D  34B3               	retlw	-77
  3515  1F9E  34B0               	retlw	-80
  3516  1F9F  34AD               	retlw	-83
  3517  1FA0  34A9               	retlw	-87
  3518  1FA1  34A6               	retlw	-90
  3519  1FA2  34A3               	retlw	-93
  3520  1FA3  349F               	retlw	-97
  3521  1FA4  349C               	retlw	-100
  3522  1FA5  3461               	retlw	97
  3523  1FA6  345D               	retlw	93
  3524  1FA7  345A               	retlw	90
  3525  1FA8  3457               	retlw	87
  3526  1FA9  3453               	retlw	83
  3527  1FAA  3450               	retlw	80
  3528  1FAB  344D               	retlw	77
  3529  1FAC  3449               	retlw	73
  3530  1FAD  3446               	retlw	70
  3531  1FAE  3443               	retlw	67
  3532  1FAF  343F               	retlw	63
  3533  1FB0  343C               	retlw	60
  3534  1FB1  3439               	retlw	57
  3535  1FB2  3435               	retlw	53
  3536  1FB3  3432               	retlw	50
  3537  1FB4  342F               	retlw	47
  3538  1FB5  342B               	retlw	43
  3539  1FB6  3428               	retlw	40
  3540  1FB7  3425               	retlw	37
  3541  1FB8  3421               	retlw	33
  3542  1FB9  341E               	retlw	30
  3543  1FBA  341B               	retlw	27
  3544  1FBB  3417               	retlw	23
  3545  1FBC  3414               	retlw	20
  3546  1FBD  3411               	retlw	17
  3547  1FBE  340D               	retlw	13
  3548  1FBF  340A               	retlw	10
  3549  1FC0  3407               	retlw	7
  3550  1FC1  3403               	retlw	3
  3551  1FC2  3400               	retlw	0
  3552                           
  3553                           	psect	idataBANK10
  3554  1F49                     __pidataBANK10:	
  3555                           
  3556                           ;initializer for _modSaw
  3557  1F49  3400               	retlw	0
  3558  1F4A  3403               	retlw	3
  3559  1F4B  3407               	retlw	7
  3560  1F4C  340A               	retlw	10
  3561  1F4D  340D               	retlw	13
  3562  1F4E  3411               	retlw	17
  3563  1F4F  3414               	retlw	20
  3564  1F50  3417               	retlw	23
  3565  1F51  341B               	retlw	27
  3566  1F52  341E               	retlw	30
  3567  1F53  3421               	retlw	33
  3568  1F54  3425               	retlw	37
  3569  1F55  3428               	retlw	40
  3570  1F56  342B               	retlw	43
  3571  1F57  342F               	retlw	47
  3572  1F58  3432               	retlw	50
  3573  1F59  3435               	retlw	53
  3574  1F5A  3439               	retlw	57
  3575  1F5B  343C               	retlw	60
  3576  1F5C  343F               	retlw	63
  3577  1F5D  3443               	retlw	67
  3578  1F5E  3446               	retlw	70
  3579  1F5F  3449               	retlw	73
  3580  1F60  344D               	retlw	77
  3581  1F61  3450               	retlw	80
  3582  1F62  3453               	retlw	83
  3583  1F63  3457               	retlw	87
  3584  1F64  345A               	retlw	90
  3585  1F65  345D               	retlw	93
  3586  1F66  3461               	retlw	97
  3587  1F67  3464               	retlw	100
  3588  1F68  349F               	retlw	-97
  3589  1F69  34A3               	retlw	-93
  3590  1F6A  34A6               	retlw	-90
  3591  1F6B  34A9               	retlw	-87
  3592  1F6C  34AD               	retlw	-83
  3593  1F6D  34B0               	retlw	-80
  3594  1F6E  34B3               	retlw	-77
  3595  1F6F  34B7               	retlw	-73
  3596  1F70  34BA               	retlw	-70
  3597  1F71  34BD               	retlw	-67
  3598  1F72  34C1               	retlw	-63
  3599  1F73  34C4               	retlw	-60
  3600  1F74  34C7               	retlw	-57
  3601  1F75  34CB               	retlw	-53
  3602  1F76  34CE               	retlw	-50
  3603  1F77  34D1               	retlw	-47
  3604  1F78  34D5               	retlw	-43
  3605  1F79  34D8               	retlw	-40
  3606  1F7A  34DB               	retlw	-37
  3607  1F7B  34DF               	retlw	-33
  3608  1F7C  34E2               	retlw	-30
  3609  1F7D  34E5               	retlw	-27
  3610  1F7E  34E9               	retlw	-23
  3611  1F7F  34EC               	retlw	-20
  3612  1F80  34EF               	retlw	-17
  3613  1F81  34F3               	retlw	-13
  3614  1F82  34F6               	retlw	-10
  3615  1F83  34F9               	retlw	-7
  3616  1F84  34FD               	retlw	-3
  3617  1F85  3400               	retlw	0
  3618                           
  3619                           	psect	idataBIGRAM
  3620  03F0                     __pidataBIGRAM:	
  3621                           
  3622                           ;initializer for _delayArray
  3623  03F0  3422               	retlw	34
  3624  03F1  3408               	retlw	8
  3625  03F2  34FC               	retlw	252
  3626  03F3  3407               	retlw	7
  3627  03F4  34D8               	retlw	216
  3628  03F5  3407               	retlw	7
  3629  03F6  34B5               	retlw	181
  3630  03F7  3407               	retlw	7
  3631  03F8  3493               	retlw	147
  3632  03F9  3407               	retlw	7
  3633  03FA  3472               	retlw	114
  3634  03FB  3407               	retlw	7
  3635  03FC  3452               	retlw	82
  3636  03FD  3407               	retlw	7
  3637  03FE  3434               	retlw	52
  3638  03FF  3407               	retlw	7
  3639  0400  3416               	retlw	22
  3640  0401  3407               	retlw	7
  3641  0402  34F9               	retlw	249
  3642  0403  3406               	retlw	6
  3643  0404  34DD               	retlw	221
  3644  0405  3406               	retlw	6
  3645  0406  34C2               	retlw	194
  3646  0407  3406               	retlw	6
  3647  0408  34A8               	retlw	168
  3648  0409  3406               	retlw	6
  3649  040A  348F               	retlw	143
  3650  040B  3406               	retlw	6
  3651  040C  3476               	retlw	118
  3652  040D  3406               	retlw	6
  3653  040E  345E               	retlw	94
  3654  040F  3406               	retlw	6
  3655  0410  3447               	retlw	71
  3656  0411  3406               	retlw	6
  3657  0412  3430               	retlw	48
  3658  0413  3406               	retlw	6
  3659  0414  341A               	retlw	26
  3660  0415  3406               	retlw	6
  3661  0416  3405               	retlw	5
  3662  0417  3406               	retlw	6
  3663  0418  34F0               	retlw	240
  3664  0419  3405               	retlw	5
  3665  041A  34DC               	retlw	220
  3666  041B  3405               	retlw	5
  3667  041C  34C8               	retlw	200
  3668  041D  3405               	retlw	5
  3669  041E  34B5               	retlw	181
  3670  041F  3405               	retlw	5
  3671  0420  34A3               	retlw	163
  3672  0421  3405               	retlw	5
  3673  0422  3490               	retlw	144
  3674  0423  3405               	retlw	5
  3675  0424  347F               	retlw	127
  3676  0425  3405               	retlw	5
  3677  0426  346D               	retlw	109
  3678  0427  3405               	retlw	5
  3679  0428  345C               	retlw	92
  3680  0429  3405               	retlw	5
  3681  042A  344C               	retlw	76
  3682  042B  3405               	retlw	5
  3683  042C  343C               	retlw	60
  3684  042D  3405               	retlw	5
  3685  042E  342C               	retlw	44
  3686  042F  3405               	retlw	5
  3687  0430  341D               	retlw	29
  3688  0431  3405               	retlw	5
  3689  0432  340E               	retlw	14
  3690  0433  3405               	retlw	5
  3691  0434  34FF               	retlw	255
  3692  0435  3404               	retlw	4
  3693  0436  34F1               	retlw	241
  3694  0437  3404               	retlw	4
  3695  0438  34E2               	retlw	226
  3696  0439  3404               	retlw	4
  3697  043A  34D5               	retlw	213
  3698  043B  3404               	retlw	4
  3699  043C  34C7               	retlw	199
  3700  043D  3404               	retlw	4
  3701  043E  34BA               	retlw	186
  3702  043F  3404               	retlw	4
  3703  0440  34AD               	retlw	173
  3704  0441  3404               	retlw	4
  3705  0442  34A1               	retlw	161
  3706  0443  3404               	retlw	4
  3707  0444  3494               	retlw	148
  3708  0445  3404               	retlw	4
  3709  0446  3488               	retlw	136
  3710  0447  3404               	retlw	4
  3711  0448  347D               	retlw	125
  3712  0449  3404               	retlw	4
  3713  044A  3471               	retlw	113
  3714  044B  3404               	retlw	4
  3715  044C  3466               	retlw	102
  3716  044D  3404               	retlw	4
  3717  044E  345A               	retlw	90
  3718  044F  3404               	retlw	4
  3719  0450  3450               	retlw	80
  3720  0451  3404               	retlw	4
  3721  0452  3445               	retlw	69
  3722  0453  3404               	retlw	4
  3723  0454  343A               	retlw	58
  3724  0455  3404               	retlw	4
  3725  0456  3430               	retlw	48
  3726  0457  3404               	retlw	4
  3727  0458  3426               	retlw	38
  3728  0459  3404               	retlw	4
  3729  045A  341C               	retlw	28
  3730  045B  3404               	retlw	4
  3731  045C  3412               	retlw	18
  3732  045D  3404               	retlw	4
  3733  045E  3409               	retlw	9
  3734  045F  3404               	retlw	4
  3735  0460  34FF               	retlw	255
  3736  0461  3403               	retlw	3
  3737  0462  34F6               	retlw	246
  3738  0463  3403               	retlw	3
  3739  0464  34ED               	retlw	237
  3740  0465  3403               	retlw	3
  3741  0466  34E4               	retlw	228
  3742  0467  3403               	retlw	3
  3743  0468  34DC               	retlw	220
  3744  0469  3403               	retlw	3
  3745  046A  34D3               	retlw	211
  3746  046B  3403               	retlw	3
  3747  046C  34CB               	retlw	203
  3748  046D  3403               	retlw	3
  3749  046E  34C2               	retlw	194
  3750  046F  3403               	retlw	3
  3751  0470  34BA               	retlw	186
  3752  0471  3403               	retlw	3
  3753  0472  34B2               	retlw	178
  3754  0473  3403               	retlw	3
  3755  0474  34AA               	retlw	170
  3756  0475  3403               	retlw	3
  3757  0476  34A2               	retlw	162
  3758  0477  3403               	retlw	3
  3759  0478  349B               	retlw	155
  3760  0479  3403               	retlw	3
  3761  047A  3493               	retlw	147
  3762  047B  3403               	retlw	3
  3763  047C  348C               	retlw	140
  3764  047D  3403               	retlw	3
  3765  047E  3485               	retlw	133
  3766  047F  3403               	retlw	3
  3767  0480  347E               	retlw	126
  3768  0481  3403               	retlw	3
  3769  0482  3477               	retlw	119
  3770  0483  3403               	retlw	3
  3771  0484  3470               	retlw	112
  3772  0485  3403               	retlw	3
  3773  0486  3469               	retlw	105
  3774  0487  3403               	retlw	3
  3775  0488  3462               	retlw	98
  3776  0489  3403               	retlw	3
  3777  048A  345C               	retlw	92
  3778  048B  3403               	retlw	3
  3779  048C  3455               	retlw	85
  3780  048D  3403               	retlw	3
  3781  048E  344F               	retlw	79
  3782  048F  3403               	retlw	3
  3783  0490  3448               	retlw	72
  3784  0491  3403               	retlw	3
  3785  0492  3442               	retlw	66
  3786  0493  3403               	retlw	3
  3787  0494  343C               	retlw	60
  3788  0495  3403               	retlw	3
  3789  0496  3436               	retlw	54
  3790  0497  3403               	retlw	3
  3791  0498  3430               	retlw	48
  3792  0499  3403               	retlw	3
  3793  049A  342A               	retlw	42
  3794  049B  3403               	retlw	3
  3795  049C  3424               	retlw	36
  3796  049D  3403               	retlw	3
  3797  049E  341F               	retlw	31
  3798  049F  3403               	retlw	3
  3799  04A0  3419               	retlw	25
  3800  04A1  3403               	retlw	3
  3801  04A2  3413               	retlw	19
  3802  04A3  3403               	retlw	3
  3803  04A4  340E               	retlw	14
  3804  04A5  3403               	retlw	3
  3805  04A6  3409               	retlw	9
  3806  04A7  3403               	retlw	3
  3807  04A8  3403               	retlw	3
  3808  04A9  3403               	retlw	3
  3809  04AA  34FE               	retlw	254
  3810  04AB  3402               	retlw	2
  3811  04AC  34F9               	retlw	249
  3812  04AD  3402               	retlw	2
  3813  04AE  34F4               	retlw	244
  3814  04AF  3402               	retlw	2
  3815  04B0  34EF               	retlw	239
  3816  04B1  3402               	retlw	2
  3817  04B2  34EA               	retlw	234
  3818  04B3  3402               	retlw	2
  3819  04B4  34E5               	retlw	229
  3820  04B5  3402               	retlw	2
  3821  04B6  34E0               	retlw	224
  3822  04B7  3402               	retlw	2
  3823  04B8  34DB               	retlw	219
  3824  04B9  3402               	retlw	2
  3825  04BA  34D7               	retlw	215
  3826  04BB  3402               	retlw	2
  3827  04BC  34D2               	retlw	210
  3828  04BD  3402               	retlw	2
  3829  04BE  34CD               	retlw	205
  3830  04BF  3402               	retlw	2
  3831  04C0  34C9               	retlw	201
  3832  04C1  3402               	retlw	2
  3833  04C2  34C4               	retlw	196
  3834  04C3  3402               	retlw	2
  3835  04C4  34C0               	retlw	192
  3836  04C5  3402               	retlw	2
  3837  04C6  34BC               	retlw	188
  3838  04C7  3402               	retlw	2
  3839  04C8  34B7               	retlw	183
  3840  04C9  3402               	retlw	2
  3841  04CA  34B3               	retlw	179
  3842  04CB  3402               	retlw	2
  3843  04CC  34AF               	retlw	175
  3844  04CD  3402               	retlw	2
  3845  04CE  34AB               	retlw	171
  3846  04CF  3402               	retlw	2
  3847  04D0  34A6               	retlw	166
  3848  04D1  3402               	retlw	2
  3849  04D2  34A2               	retlw	162
  3850  04D3  3402               	retlw	2
  3851  04D4  349E               	retlw	158
  3852  04D5  3402               	retlw	2
  3853  04D6  349A               	retlw	154
  3854  04D7  3402               	retlw	2
  3855  04D8  3497               	retlw	151
  3856  04D9  3402               	retlw	2
  3857  04DA  3493               	retlw	147
  3858  04DB  3402               	retlw	2
  3859  04DC  348F               	retlw	143
  3860  04DD  3402               	retlw	2
  3861  04DE  348B               	retlw	139
  3862  04DF  3402               	retlw	2
  3863  04E0  3487               	retlw	135
  3864  04E1  3402               	retlw	2
  3865  04E2  3484               	retlw	132
  3866  04E3  3402               	retlw	2
  3867  04E4  3480               	retlw	128
  3868  04E5  3402               	retlw	2
  3869  04E6  347C               	retlw	124
  3870  04E7  3402               	retlw	2
  3871  04E8  3479               	retlw	121
  3872  04E9  3402               	retlw	2
  3873  04EA  3475               	retlw	117
  3874  04EB  3402               	retlw	2
  3875  04EC  3472               	retlw	114
  3876  04ED  3402               	retlw	2
  3877  04EE  346E               	retlw	110
  3878  04EF  3402               	retlw	2
  3879  04F0  346B               	retlw	107
  3880  04F1  3402               	retlw	2
  3881  04F2  3467               	retlw	103
  3882  04F3  3402               	retlw	2
  3883  04F4  3464               	retlw	100
  3884  04F5  3402               	retlw	2
  3885  04F6  3461               	retlw	97
  3886  04F7  3402               	retlw	2
  3887  04F8  345E               	retlw	94
  3888  04F9  3402               	retlw	2
  3889  04FA  345A               	retlw	90
  3890  04FB  3402               	retlw	2
  3891  04FC  3457               	retlw	87
  3892  04FD  3402               	retlw	2
  3893  04FE  3454               	retlw	84
  3894  04FF  3402               	retlw	2
  3895  0500  3451               	retlw	81
  3896  0501  3402               	retlw	2
  3897  0502  344E               	retlw	78
  3898  0503  3402               	retlw	2
  3899  0504  344B               	retlw	75
  3900  0505  3402               	retlw	2
  3901  0506  3448               	retlw	72
  3902  0507  3402               	retlw	2
  3903  0508  3445               	retlw	69
  3904  0509  3402               	retlw	2
  3905  050A  3442               	retlw	66
  3906  050B  3402               	retlw	2
  3907  050C  343F               	retlw	63
  3908  050D  3402               	retlw	2
  3909  050E  343C               	retlw	60
  3910  050F  3402               	retlw	2
  3911  0510  3439               	retlw	57
  3912  0511  3402               	retlw	2
  3913  0512  3436               	retlw	54
  3914  0513  3402               	retlw	2
  3915  0514  3433               	retlw	51
  3916  0515  3402               	retlw	2
  3917  0516  3430               	retlw	48
  3918  0517  3402               	retlw	2
  3919  0518  342E               	retlw	46
  3920  0519  3402               	retlw	2
  3921  051A  342B               	retlw	43
  3922  051B  3402               	retlw	2
  3923  051C  3428               	retlw	40
  3924  051D  3402               	retlw	2
  3925  051E  3425               	retlw	37
  3926  051F  3402               	retlw	2
  3927  0520  3423               	retlw	35
  3928  0521  3402               	retlw	2
  3929  0522  3420               	retlw	32
  3930  0523  3402               	retlw	2
  3931  0524  341E               	retlw	30
  3932  0525  3402               	retlw	2
  3933  0526  341B               	retlw	27
  3934  0527  3402               	retlw	2
  3935  0528  3418               	retlw	24
  3936  0529  3402               	retlw	2
  3937  052A  3416               	retlw	22
  3938  052B  3402               	retlw	2
  3939  052C  3413               	retlw	19
  3940  052D  3402               	retlw	2
  3941  052E  3411               	retlw	17
  3942  052F  3402               	retlw	2
  3943  0530  340E               	retlw	14
  3944  0531  3402               	retlw	2
  3945  0532  340C               	retlw	12
  3946  0533  3402               	retlw	2
  3947  0534  340A               	retlw	10
  3948  0535  3402               	retlw	2
  3949  0536  3407               	retlw	7
  3950  0537  3402               	retlw	2
  3951  0538  3405               	retlw	5
  3952  0539  3402               	retlw	2
  3953  053A  3402               	retlw	2
  3954  053B  3402               	retlw	2
  3955  053C  3400               	retlw	0
  3956  053D  3402               	retlw	2
  3957  053E  34FE               	retlw	254
  3958  053F  3401               	retlw	1
  3959  0540  34FB               	retlw	251
  3960  0541  3401               	retlw	1
  3961  0542  34F9               	retlw	249
  3962  0543  3401               	retlw	1
  3963  0544  34F7               	retlw	247
  3964  0545  3401               	retlw	1
  3965  0546  34F5               	retlw	245
  3966  0547  3401               	retlw	1
  3967  0548  34F2               	retlw	242
  3968  0549  3401               	retlw	1
  3969  054A  34F0               	retlw	240
  3970  054B  3401               	retlw	1
  3971  054C  34EE               	retlw	238
  3972  054D  3401               	retlw	1
  3973  054E  34EC               	retlw	236
  3974  054F  3401               	retlw	1
  3975  0550  34EA               	retlw	234
  3976  0551  3401               	retlw	1
  3977  0552  34E8               	retlw	232
  3978  0553  3401               	retlw	1
  3979  0554  34E6               	retlw	230
  3980  0555  3401               	retlw	1
  3981  0556  34E3               	retlw	227
  3982  0557  3401               	retlw	1
  3983  0558  34E1               	retlw	225
  3984  0559  3401               	retlw	1
  3985  055A  34DF               	retlw	223
  3986  055B  3401               	retlw	1
  3987  055C  34DD               	retlw	221
  3988  055D  3401               	retlw	1
  3989  055E  34DB               	retlw	219
  3990  055F  3401               	retlw	1
  3991  0560  34D9               	retlw	217
  3992  0561  3401               	retlw	1
  3993  0562  34D7               	retlw	215
  3994  0563  3401               	retlw	1
  3995  0564  34D5               	retlw	213
  3996  0565  3401               	retlw	1
  3997  0566  34D3               	retlw	211
  3998  0567  3401               	retlw	1
  3999  0568  34D2               	retlw	210
  4000  0569  3401               	retlw	1
  4001  056A  34D0               	retlw	208
  4002  056B  3401               	retlw	1
  4003  056C  34CE               	retlw	206
  4004  056D  3401               	retlw	1
  4005  056E  34CC               	retlw	204
  4006  056F  3401               	retlw	1
  4007  0570  34CA               	retlw	202
  4008  0571  3401               	retlw	1
  4009  0572  34C8               	retlw	200
  4010  0573  3401               	retlw	1
  4011  0574  34C6               	retlw	198
  4012  0575  3401               	retlw	1
  4013  0576  34C4               	retlw	196
  4014  0577  3401               	retlw	1
  4015  0578  34C3               	retlw	195
  4016  0579  3401               	retlw	1
  4017  057A  34C1               	retlw	193
  4018  057B  3401               	retlw	1
  4019  057C  34BF               	retlw	191
  4020  057D  3401               	retlw	1
  4021  057E  34BD               	retlw	189
  4022  057F  3401               	retlw	1
  4023  0580  34BC               	retlw	188
  4024  0581  3401               	retlw	1
  4025  0582  34BA               	retlw	186
  4026  0583  3401               	retlw	1
  4027  0584  34B8               	retlw	184
  4028  0585  3401               	retlw	1
  4029  0586  34B6               	retlw	182
  4030  0587  3401               	retlw	1
  4031  0588  34B5               	retlw	181
  4032  0589  3401               	retlw	1
  4033  058A  34B3               	retlw	179
  4034  058B  3401               	retlw	1
  4035  058C  34B1               	retlw	177
  4036  058D  3401               	retlw	1
  4037  058E  34B0               	retlw	176
  4038  058F  3401               	retlw	1
  4039  0590  34AE               	retlw	174
  4040  0591  3401               	retlw	1
  4041  0592  34AC               	retlw	172
  4042  0593  3401               	retlw	1
  4043  0594  34AB               	retlw	171
  4044  0595  3401               	retlw	1
  4045  0596  34A9               	retlw	169
  4046  0597  3401               	retlw	1
  4047  0598  34A8               	retlw	168
  4048  0599  3401               	retlw	1
  4049  059A  34A6               	retlw	166
  4050  059B  3401               	retlw	1
  4051  059C  34A4               	retlw	164
  4052  059D  3401               	retlw	1
  4053  059E  34A3               	retlw	163
  4054  059F  3401               	retlw	1
  4055  05A0  34A1               	retlw	161
  4056  05A1  3401               	retlw	1
  4057  05A2  34A0               	retlw	160
  4058  05A3  3401               	retlw	1
  4059  05A4  349E               	retlw	158
  4060  05A5  3401               	retlw	1
  4061  05A6  349D               	retlw	157
  4062  05A7  3401               	retlw	1
  4063  05A8  349B               	retlw	155
  4064  05A9  3401               	retlw	1
  4065  05AA  349A               	retlw	154
  4066  05AB  3401               	retlw	1
  4067  05AC  3498               	retlw	152
  4068  05AD  3401               	retlw	1
  4069  05AE  3497               	retlw	151
  4070  05AF  3401               	retlw	1
  4071  05B0  3495               	retlw	149
  4072  05B1  3401               	retlw	1
  4073  05B2  3494               	retlw	148
  4074  05B3  3401               	retlw	1
  4075  05B4  3492               	retlw	146
  4076  05B5  3401               	retlw	1
  4077  05B6  3491               	retlw	145
  4078  05B7  3401               	retlw	1
  4079  05B8  3490               	retlw	144
  4080  05B9  3401               	retlw	1
  4081  05BA  348E               	retlw	142
  4082  05BB  3401               	retlw	1
  4083  05BC  348D               	retlw	141
  4084  05BD  3401               	retlw	1
  4085  05BE  348B               	retlw	139
  4086  05BF  3401               	retlw	1
  4087  05C0  348A               	retlw	138
  4088  05C1  3401               	retlw	1
  4089  05C2  3489               	retlw	137
  4090  05C3  3401               	retlw	1
  4091  05C4  3487               	retlw	135
  4092  05C5  3401               	retlw	1
  4093  05C6  3486               	retlw	134
  4094  05C7  3401               	retlw	1
  4095  05C8  3485               	retlw	133
  4096  05C9  3401               	retlw	1
  4097  05CA  3483               	retlw	131
  4098  05CB  3401               	retlw	1
  4099  05CC  3482               	retlw	130
  4100  05CD  3401               	retlw	1
  4101  05CE  3481               	retlw	129
  4102  05CF  3401               	retlw	1
  4103  05D0  347F               	retlw	127
  4104  05D1  3401               	retlw	1
  4105  05D2  347E               	retlw	126
  4106  05D3  3401               	retlw	1
  4107  05D4  347D               	retlw	125
  4108  05D5  3401               	retlw	1
  4109  05D6  347B               	retlw	123
  4110  05D7  3401               	retlw	1
  4111  05D8  347A               	retlw	122
  4112  05D9  3401               	retlw	1
  4113  05DA  3479               	retlw	121
  4114  05DB  3401               	retlw	1
  4115  05DC  3478               	retlw	120
  4116  05DD  3401               	retlw	1
  4117  05DE  3476               	retlw	118
  4118  05DF  3401               	retlw	1
  4119  05E0  3475               	retlw	117
  4120  05E1  3401               	retlw	1
  4121  05E2  3474               	retlw	116
  4122  05E3  3401               	retlw	1
  4123  05E4  3473               	retlw	115
  4124  05E5  3401               	retlw	1
  4125  05E6  3471               	retlw	113
  4126  05E7  3401               	retlw	1
  4127  05E8  3470               	retlw	112
  4128  05E9  3401               	retlw	1
  4129  05EA  346F               	retlw	111
  4130  05EB  3401               	retlw	1
  4131  05EC  346E               	retlw	110
  4132  05ED  3401               	retlw	1
  4133  05EE  3400               	retlw	0
  4134  05EF  3400               	retlw	0
  4135  05F0  3400               	retlw	0
  4136  05F1  3400               	retlw	0
  4137  05F2  3400               	retlw	0
  4138  05F3  3400               	retlw	0
  4139  05F4  3400               	retlw	0
  4140  05F5  3400               	retlw	0
  4141  05F6  3400               	retlw	0
  4142  05F7  3400               	retlw	0
  4143                           
  4144                           	psect	nvCOMMON
  4145  007D                     __pnvCOMMON:	
  4146  007D                     _UQFront:	
  4147  007D                     	ds	1
  4148                           
  4149                           	psect	nvBANK0
  4150  0069                     __pnvBANK0:	
  4151  0069                     _UQEnd:	
  4152  0069                     	ds	1
  4153                           
  4154                           	psect	nvBANK3
  4155  01EC                     __pnvBANK3:	
  4156  01EC                     _B25kLength:	
  4157  01EC                     	ds	2
  4158  000B                     _INTCONbits	set	11
  4159  0011                     _PIR1bits	set	17
  4160  000C                     _PORTAbits	set	12
  4161  000E                     _PORTCbits	set	14
  4162  000F                     _PORTDbits	set	15
  4163  0010                     _PORTEbits	set	16
  4164  001B                     _PR2	set	27
  4165  001C                     _T2CONbits	set	28
  4166  005F                     _GIE	set	95
  4167  005E                     _PEIE	set	94
  4168  0069                     _RB1	set	105
  4169  009D                     _ADCON0bits	set	157
  4170  009E                     _ADCON1bits	set	158
  4171  009C                     _ADRESH	set	156
  4172  009B                     _ADRESL	set	155
  4173  0095                     _OPTION_REGbits	set	149
  4174  0099                     _OSCCONbits	set	153
  4175  008D                     _TRISBbits	set	141
  4176  008E                     _TRISCbits	set	142
  4177  008F                     _TRISDbits	set	143
  4178  0090                     _TRISEbits	set	144
  4179  048D                     _RCIE	set	1165
  4180  011D                     _APFCONbits	set	285
  4181  010D                     _LATBbits	set	269
  4182  010F                     _LATDbits	set	271
  4183  0190                     _ANSELEbits	set	400
  4184  0192                     _PMADRH	set	402
  4185  0191                     _PMADRL	set	401
  4186  0195                     _PMCON1bits	set	405
  4187  0196                     _PMCON2	set	406
  4188  0194                     _PMDATH	set	404
  4189  0193                     _PMDATL	set	403
  4190  0199                     _RCREG	set	409
  4191  019D                     _RCSTAbits	set	413
  4192  019B                     _SPBRG	set	411
  4193  019A                     _TXREG	set	410
  4194  019E                     _TXSTAbits	set	414
  4195  0291                     _CCPR1	set	657
  4196  0298                     _CCPR2	set	664
  4197  0293                     _CCP1CONbits	set	659
  4198  029A                     _CCP2CONbits	set	666
  4199  029D                     _CCPTMRS0	set	669
  4200  029E                     _CCPTMRS1	set	670
  4201  029F                     _CCPTMRS2	set	671
  4202  0311                     _CCPR3	set	785
  4203  0318                     _CCPR4	set	792
  4204  031C                     _CCPR5	set	796
  4205  0313                     _CCP3CONbits	set	787
  4206  031A                     _CCP4CONbits	set	794
  4207  031E                     _CCP5CONbits	set	798
  4208  030C                     _TRISFbits	set	780
  4209  030D                     _TRISGbits	set	781
  4210  038C                     _LATFbits	set	908
  4211  038D                     _LATGbits	set	909
  4212  040C                     _ANSELFbits	set	1036
  4213  061A                     _CCPR9	set	1562
  4214  061F                     _CCP10CONbits	set	1567
  4215  0613                     _CCP6CONbits	set	1555
  4216  0616                     _CCP7CONbits	set	1558
  4217  0619                     _CCP8CONbits	set	1561
  4218  061C                     _CCP9CONbits	set	1564
  4219                           
  4220                           ; #config settings
  4221  0000                     
  4222                           	psect	cinit
  4223  0322                     start_initialization:	
  4224  0322                     __initialization:		;BIGRAM
  4225                           
  4226                           ; Clear objects allocated to BANK0
  4227  0322  3058               	movlw	low __pbssBANK0
  4228  0323  0084               	movwf	4
  4229  0324  3000               	movlw	high __pbssBANK0
  4230  0325  0085               	movwf	5
  4231  0326  3011               	movlw	17
  4232  0327  00FE               	movwf	btemp
  4233  0328  3000               	movlw	0
  4234  0329  00FF               	movwf	btemp+1
  4235  032A  319C  244D  3183   	fcall	clear_ram0
  4236                           
  4237                           ; Clear objects allocated to BANK2
  4238  032D  3051               	movlw	low __pbssBANK2
  4239  032E  0084               	movwf	4
  4240  032F  3001               	movlw	high __pbssBANK2
  4241  0330  0085               	movwf	5
  4242  0331  3010               	movlw	16
  4243  0332  00FE               	movwf	btemp
  4244  0333  3000               	movlw	0
  4245  0334  00FF               	movwf	btemp+1
  4246  0335  319C  244D  3183   	fcall	clear_ram0
  4247                           
  4248                           ; Clear objects allocated to BANK3
  4249  0338  30A0               	movlw	low __pbssBANK3
  4250  0339  0084               	movwf	4
  4251  033A  3001               	movlw	high __pbssBANK3
  4252  033B  0085               	movwf	5
  4253  033C  303E               	movlw	62
  4254  033D  00FE               	movwf	btemp
  4255  033E  3000               	movlw	0
  4256  033F  00FF               	movwf	btemp+1
  4257  0340  319C  244D  3183   	fcall	clear_ram0
  4258                           
  4259                           ; Clear objects allocated to BANK4
  4260  0343  3048               	movlw	low __pbssBANK4
  4261  0344  0084               	movwf	4
  4262  0345  3002               	movlw	high __pbssBANK4
  4263  0346  0085               	movwf	5
  4264  0347  3014               	movlw	20
  4265  0348  00FE               	movwf	btemp
  4266  0349  3000               	movlw	0
  4267  034A  00FF               	movwf	btemp+1
  4268  034B  319C  244D  3183   	fcall	clear_ram0
  4269                           
  4270                           ; Clear objects allocated to BANK5
  4271  034E  30A0               	movlw	low __pbssBANK5
  4272  034F  0084               	movwf	4
  4273  0350  3002               	movlw	high __pbssBANK5
  4274  0351  0085               	movwf	5
  4275  0352  302C               	movlw	44
  4276  0353  00FE               	movwf	btemp
  4277  0354  3000               	movlw	0
  4278  0355  00FF               	movwf	btemp+1
  4279  0356  319C  244D  3183   	fcall	clear_ram0
  4280                           
  4281                           ; Clear objects allocated to BANK6
  4282  0359  3020               	movlw	low __pbssBANK6
  4283  035A  0084               	movwf	4
  4284  035B  3003               	movlw	high __pbssBANK6
  4285  035C  0085               	movwf	5
  4286  035D  3040               	movlw	64
  4287  035E  00FE               	movwf	btemp
  4288  035F  3000               	movlw	0
  4289  0360  00FF               	movwf	btemp+1
  4290  0361  319C  244D  3183   	fcall	clear_ram0
  4291                           
  4292                           ; Clear objects allocated to BANK11
  4293  0364  30A0               	movlw	low __pbssBANK11
  4294  0365  0084               	movwf	4
  4295  0366  3005               	movlw	high __pbssBANK11
  4296  0367  0085               	movwf	5
  4297  0368  3040               	movlw	64
  4298  0369  00FE               	movwf	btemp
  4299  036A  3000               	movlw	0
  4300  036B  00FF               	movwf	btemp+1
  4301  036C  319C  244D  3183   	fcall	clear_ram0
  4302                           
  4303                           ; Initialize objects allocated to BIGRAM
  4304  036F  30F0               	movlw	low __pidataBIGRAM
  4305  0370  0084               	movwf	4
  4306  0371  3083               	movlw	(high __pidataBIGRAM)| (0+128)
  4307  0372  0085               	movwf	5
  4308  0373  30E8               	movlw	low (0+9192)
  4309  0374  0086               	movwf	6
  4310  0375  3023               	movlw	high (0+9192)
  4311  0376  0087               	movwf	7
  4312  0377  3002               	movlw	2
  4313  0378  00FF               	movwf	btemp+1
  4314  0379  3008               	movlw	8
  4315  037A  319C  2441  3183   	fcall	init_ram
  4316                           
  4317                           ; Initialize objects allocated to BANK0
  4318  037D  3000               	movlw	low __pidataBANK0
  4319  037E  0084               	movwf	4
  4320  037F  3090               	movlw	(high __pidataBANK0)| (0+128)
  4321  0380  0085               	movwf	5
  4322  0381  3045               	movlw	low __pdataBANK0
  4323  0382  0086               	movwf	6
  4324  0383  3000               	movlw	high __pdataBANK0
  4325  0384  0087               	movwf	7
  4326  0385  3000               	movlw	0
  4327  0386  00FF               	movwf	btemp+1
  4328  0387  3013               	movlw	19
  4329  0388  319C  2441  3183   	fcall	init_ram
  4330                           
  4331                           ; Initialize objects allocated to BANK2
  4332  038B  3067               	movlw	low __pidataBANK2
  4333  038C  0084               	movwf	4
  4334  038D  309C               	movlw	(high __pidataBANK2)| (0+128)
  4335  038E  0085               	movwf	5
  4336  038F  3061               	movlw	low __pdataBANK2
  4337  0390  0086               	movwf	6
  4338  0391  3001               	movlw	high __pdataBANK2
  4339  0392  0087               	movwf	7
  4340  0393  3000               	movlw	0
  4341  0394  00FF               	movwf	btemp+1
  4342  0395  300E               	movlw	14
  4343  0396  319C  2441  3183   	fcall	init_ram
  4344                           
  4345                           ; Initialize objects allocated to BANK3
  4346  0399  3059               	movlw	low __pidataBANK3
  4347  039A  0084               	movwf	4
  4348  039B  309C               	movlw	(high __pidataBANK3)| (0+128)
  4349  039C  0085               	movwf	5
  4350  039D  30DE               	movlw	low __pdataBANK3
  4351  039E  0086               	movwf	6
  4352  039F  3001               	movlw	high __pdataBANK3
  4353  03A0  0087               	movwf	7
  4354  03A1  3000               	movlw	0
  4355  03A2  00FF               	movwf	btemp+1
  4356  03A3  300E               	movlw	14
  4357  03A4  319C  2441  3183   	fcall	init_ram
  4358                           
  4359                           ; Initialize objects allocated to BANK4
  4360  03A7  3079               	movlw	low __pidataBANK4
  4361  03A8  0084               	movwf	4
  4362  03A9  309D               	movlw	(high __pidataBANK4)| (0+128)
  4363  03AA  0085               	movwf	5
  4364  03AB  3020               	movlw	low __pdataBANK4
  4365  03AC  0086               	movwf	6
  4366  03AD  3002               	movlw	high __pdataBANK4
  4367  03AE  0087               	movwf	7
  4368  03AF  3000               	movlw	0
  4369  03B0  00FF               	movwf	btemp+1
  4370  03B1  3028               	movlw	40
  4371  03B2  319C  2441  3183   	fcall	init_ram
  4372                           
  4373                           ; Initialize objects allocated to BANK7
  4374  03B5  3013               	movlw	low __pidataBANK7
  4375  03B6  0084               	movwf	4
  4376  03B7  3090               	movlw	(high __pidataBANK7)| (0+128)
  4377  03B8  0085               	movwf	5
  4378  03B9  30A0               	movlw	low __pdataBANK7
  4379  03BA  0086               	movwf	6
  4380  03BB  3003               	movlw	high __pdataBANK7
  4381  03BC  0087               	movwf	7
  4382  03BD  3000               	movlw	0
  4383  03BE  00FF               	movwf	btemp+1
  4384  03BF  303D               	movlw	61
  4385  03C0  319C  2441  3183   	fcall	init_ram
  4386                           
  4387                           ; Initialize objects allocated to BANK8
  4388  03C3  30C3               	movlw	low __pidataBANK8
  4389  03C4  0084               	movwf	4
  4390  03C5  309F               	movlw	(high __pidataBANK8)| (0+128)
  4391  03C6  0085               	movwf	5
  4392  03C7  3020               	movlw	low __pdataBANK8
  4393  03C8  0086               	movwf	6
  4394  03C9  3004               	movlw	high __pdataBANK8
  4395  03CA  0087               	movwf	7
  4396  03CB  3000               	movlw	0
  4397  03CC  00FF               	movwf	btemp+1
  4398  03CD  303D               	movlw	61
  4399  03CE  319C  2441  3183   	fcall	init_ram
  4400                           
  4401                           ; Initialize objects allocated to BANK9
  4402  03D1  3086               	movlw	low __pidataBANK9
  4403  03D2  0084               	movwf	4
  4404  03D3  309F               	movlw	(high __pidataBANK9)| (0+128)
  4405  03D4  0085               	movwf	5
  4406  03D5  30A0               	movlw	low __pdataBANK9
  4407  03D6  0086               	movwf	6
  4408  03D7  3004               	movlw	high __pdataBANK9
  4409  03D8  0087               	movwf	7
  4410  03D9  3000               	movlw	0
  4411  03DA  00FF               	movwf	btemp+1
  4412  03DB  303D               	movlw	61
  4413  03DC  319C  2441  3183   	fcall	init_ram
  4414                           
  4415                           ; Initialize objects allocated to BANK10
  4416  03DF  3049               	movlw	low __pidataBANK10
  4417  03E0  0084               	movwf	4
  4418  03E1  309F               	movlw	(high __pidataBANK10)| (0+128)
  4419  03E2  0085               	movwf	5
  4420  03E3  3020               	movlw	low __pdataBANK10
  4421  03E4  0086               	movwf	6
  4422  03E5  3005               	movlw	high __pdataBANK10
  4423  03E6  0087               	movwf	7
  4424  03E7  3000               	movlw	0
  4425  03E8  00FF               	movwf	btemp+1
  4426  03E9  303D               	movlw	61
  4427  03EA  319C  2441         	fcall	init_ram
  4428  03EC                     end_of_initialization:	
  4429                           ;End of C runtime variable initialization code
  4430                           
  4431  03EC                     __end_of__initialization:	
  4432  03EC  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4433  03ED  0020               	movlb	0
  4434  03EE  318B  2BA5         	ljmp	_main	;jump to C main() function
  4435                           
  4436                           	psect	bssBANK0
  4437  0058                     __pbssBANK0:	
  4438  0058                     _sub_timer:	
  4439  0058                     	ds	4
  4440  005C                     _tap_timer:	
  4441  005C                     	ds	4
  4442  0060                     _timer:	
  4443  0060                     	ds	4
  4444  0064                     _doubleTap_state:	
  4445  0064                     	ds	1
  4446  0065                     _mode2_state:	
  4447  0065                     	ds	1
  4448  0066                     _presetSaveMode:	
  4449  0066                     	ds	1
  4450  0067                     _suspend_blink:	
  4451  0067                     	ds	1
  4452  0068                     _switchTap_pressed:	
  4453  0068                     	ds	1
  4454                           
  4455                           	psect	dataBANK0
  4456  0045                     __pdataBANK0:	
  4457  0045                     _baseline_delay_time:	
  4458  0045                     	ds	4
  4459  0049                     _delay_time:	
  4460  0049                     	ds	4
  4461  004D                     _bottom_push_state:	
  4462  004D                     	ds	2
  4463  004F                     _long_press_limit:	
  4464  004F                     	ds	2
  4465  0051                     _top_push_state:	
  4466  0051                     	ds	2
  4467  0053                     _blink_rate:	
  4468  0053                     	ds	1
  4469  0054                     _longTap_state:	
  4470  0054                     	ds	1
  4471  0055                     _num_taps:	
  4472  0055                     	ds	1
  4473  0056                     _presetChannel:	
  4474  0056                     	ds	1
  4475  0057                     _switchBypass_state:	
  4476  0057                     	ds	1
  4477                           
  4478                           	psect	bssBANK2
  4479  0151                     __pbssBANK2:	
  4480  0151                     _delay_counter:	
  4481  0151                     	ds	2
  4482  0153                     _feedback_timer:	
  4483  0153                     	ds	2
  4484  0155                     _longTap_timer:	
  4485  0155                     	ds	2
  4486  0157                     _mod_counter:	
  4487  0157                     	ds	2
  4488  0159                     _bottomTactile_pressed:	
  4489  0159                     	ds	1
  4490  015A                     _bypass_turning_on:	
  4491  015A                     	ds	1
  4492  015B                     _feedback_start:	
  4493  015B                     	ds	1
  4494  015C                     _longTap_start:	
  4495  015C                     	ds	1
  4496  015D                     _preset_blink:	
  4497  015D                     	ds	1
  4498  015E                     _preset_programmning_on:	
  4499  015E                     	ds	1
  4500  015F                     _switchTap_down:	
  4501  015F                     	ds	1
  4502  0160                     _topTactile_pressed:	
  4503  0160                     	ds	1
  4504                           
  4505                           	psect	dataBANK2
  4506  0161                     __pdataBANK2:	
  4507  0161                     _knob1_prev:	
  4508  0161                     	ds	2
  4509  0163                     _knob2_prev:	
  4510  0163                     	ds	2
  4511  0165                     _knob3_prev:	
  4512  0165                     	ds	2
  4513  0167                     _knob4_prev:	
  4514  0167                     	ds	2
  4515  0169                     _knob5_prev:	
  4516  0169                     	ds	2
  4517  016B                     _expressionChannel:	
  4518  016B                     	ds	1
  4519  016C                     _feedback_state:	
  4520  016C                     	ds	1
  4521  016D                     _presetModeCnst:	
  4522  016D                     	ds	1
  4523  016E                     _switchTap_state:	
  4524  016E                     	ds	1
  4525                           
  4526                           	psect	bssBANK3
  4527  01A0                     __pbssBANK3:	
  4528  01A0                     USARTWriteInt@F3536:	
  4529  01A0                     	ds	5
  4530  01A5                     _double_timer:	
  4531  01A5                     	ds	4
  4532  01A9                     _ledState:	
  4533  01A9                     	ds	4
  4534  01AD                     _mod_timer:	
  4535  01AD                     	ds	4
  4536  01B1                     _tap_total:	
  4537  01B1                     	ds	4
  4538  01B5                     _test_timer:	
  4539  01B5                     	ds	4
  4540  01B9                     _adjust_sub_delay:	
  4541  01B9                     	ds	2
  4542  01BB                     _adjusted_pot_value:	
  4543  01BB                     	ds	2
  4544  01BD                     _debounce_bypass:	
  4545  01BD                     	ds	2
  4546  01BF                     _debounce_count:	
  4547  01BF                     	ds	2
  4548  01C1                     _debounce_mode1:	
  4549  01C1                     	ds	2
  4550  01C3                     _debounce_mode2:	
  4551  01C3                     	ds	2
  4552  01C5                     _delayfound:	
  4553  01C5                     	ds	2
  4554  01C7                     _errno:	
  4555  01C7                     	ds	2
  4556  01C9                     _knob_1_pos:	
  4557  01C9                     	ds	2
  4558  01CB                     _knob_2_pos:	
  4559  01CB                     	ds	2
  4560  01CD                     _knob_3_pos:	
  4561  01CD                     	ds	2
  4562  01CF                     _knob_4_pos:	
  4563  01CF                     	ds	2
  4564  01D1                     _knob_5_pos:	
  4565  01D1                     	ds	2
  4566  01D3                     _mod_value:	
  4567  01D3                     	ds	2
  4568  01D5                     _reset_sub_delay:	
  4569  01D5                     	ds	2
  4570  01D7                     _switchBypass_pressed:	
  4571  01D7                     	ds	2
  4572  01D9                     _switchBypass_toggle:	
  4573  01D9                     	ds	2
  4574  01DB                     _feedbackTriggered:	
  4575  01DB                     	ds	1
  4576  01DC                     _iCnt:	
  4577  01DC                     	ds	1
  4578  01DD                     _mode1_state:	
  4579  01DD                     	ds	1
  4580                           
  4581                           	psect	dataBANK3
  4582  01DE                     __pdataBANK3:	
  4583  01DE                     _blink_delay:	
  4584  01DE                     	ds	2
  4585  01E0                     _delay_time_changed:	
  4586  01E0                     	ds	2
  4587  01E2                     _mod_delay_time:	
  4588  01E2                     	ds	2
  4589  01E4                     _switchBypass_up:	
  4590  01E4                     	ds	2
  4591  01E6                     _tap_iteration:	
  4592  01E6                     	ds	2
  4593  01E8                     _blink_state:	
  4594  01E8                     	ds	1
  4595  01E9                     _currentBypassState:	
  4596  01E9                     	ds	1
  4597  01EA                     _expSwitchState:	
  4598  01EA                     	ds	1
  4599  01EB                     _expressModeCnst:	
  4600  01EB                     	ds	1
  4601                           
  4602                           	psect	bssBANK4
  4603  0248                     __pbssBANK4:	
  4604  0248                     _tap_history:	
  4605  0248                     	ds	20
  4606                           
  4607                           	psect	dataBANK4
  4608  0220                     __pdataBANK4:	
  4609  0220                     _B25k:	
  4610  0220                     	ds	40
  4611                           
  4612                           	psect	bssBANK5
  4613  02A0                     __pbssBANK5:	
  4614  02A0                     _tap:	
  4615  02A0                     	ds	44
  4616                           
  4617                           	psect	bssBANK6
  4618  0320                     __pbssBANK6:	
  4619  0320                     _URBuff:	
  4620  0320                     	ds	64
  4621                           
  4622                           	psect	dataBANK7
  4623  03A0                     __pdataBANK7:	
  4624  03A0                     _modSin:	
  4625  03A0                     	ds	61
  4626                           
  4627                           	psect	dataBANK8
  4628  0420                     __pdataBANK8:	
  4629  0420                     _modTri:	
  4630  0420                     	ds	61
  4631                           
  4632                           	psect	dataBANK9
  4633  04A0                     __pdataBANK9:	
  4634  04A0                     _modRevSaw:	
  4635  04A0                     	ds	61
  4636                           
  4637                           	psect	dataBANK10
  4638  0520                     __pdataBANK10:	
  4639  0520                     _modSaw:	
  4640  0520                     	ds	61
  4641                           
  4642                           	psect	bssBANK11
  4643  05A0                     __pbssBANK11:	
  4644  05A0                     _myBuf:	
  4645  05A0                     	ds	64
  4646                           
  4647                           	psect	clrtext
  4648  1C4D                     clear_ram0:	
  4649                           ;	Called with FSR0 containing the base address, and
  4650                           ;	btemp/btemp+1 has the size to clear
  4651                           
  4652  1C4D  0064               	clrwdt	;clear the watchdog before getting into this loop
  4653  1C4E                     clrloop0:	
  4654  1C4E  0180               	clrf	0	;clear RAM location pointed to by FSR
  4655  1C4F  3101               	addfsr 0,1
  4656  1C50  3001               	movlw	1
  4657  1C51  02FE               	subwf	126,f
  4658  1C52  3000               	movlw	0
  4659  1C53  3BFF               	subwfb	127,f
  4660  1C54  087F               	movf	127,w
  4661  1C55  047E               	iorwf	126,w
  4662  1C56  1903               	btfsc	3,2
  4663  1C57  3400               	retlw	0	;all done for this memory range, return
  4664  1C58  2C4E               	goto	clrloop0	;have we reached the end yet?
  4665                           
  4666                           	psect	inittext
  4667  1C41                     init_ram:	
  4668  1C41  00FE               	movwf	126
  4669  1C42                     initloop:	
  4670  1C42  0012               	moviw fsr0++
  4671  1C43  001E               	movwi fsr1++
  4672  1C44  3001               	movlw	1
  4673  1C45  02FE               	subwf	126,f
  4674  1C46  3000               	movlw	0
  4675  1C47  3BFF               	subwfb	127,f
  4676  1C48  087F               	movf	127,w
  4677  1C49  047E               	iorwf	126,w
  4678  1C4A  1903               	btfsc	3,2
  4679  1C4B  3400               	retlw	0
  4680  1C4C  2C42               	goto	initloop
  4681                           
  4682                           	psect	cstackBANK4
  4683  025C                     __pcstackBANK4:	
  4684  025C                     main@i:	
  4685                           
  4686                           ; 2 bytes @ 0x0
  4687  025C                     	ds	2
  4688  025E                     main@i_404:	
  4689                           
  4690                           ; 2 bytes @ 0x2
  4691  025E                     	ds	2
  4692  0260                     main@i_405:	
  4693                           
  4694                           ; 2 bytes @ 0x4
  4695  0260                     	ds	2
  4696                           
  4697                           	psect	cstackBANK2
  4698  0120                     __pcstackBANK2:	
  4699  0120                     ___fttol@sign1:	
  4700                           
  4701                           ; 1 bytes @ 0x0
  4702  0120                     	ds	1
  4703  0121                     ___fttol@lval:	
  4704                           
  4705                           ; 4 bytes @ 0x1
  4706  0121                     	ds	4
  4707  0125                     ___fttol@exp1:	
  4708                           
  4709                           ; 1 bytes @ 0x5
  4710  0125                     	ds	1
  4711  0126                     ?___altoft:	
  4712  0126                     ___altoft@c:	
  4713                           ; 3 bytes @ 0x6
  4714                           
  4715                           
  4716                           ; 4 bytes @ 0x6
  4717  0126                     	ds	4
  4718  012A                     ??___altoft:	
  4719                           
  4720                           ; 1 bytes @ 0xA
  4721  012A                     	ds	2
  4722  012C                     ___altoft@exp:	
  4723                           
  4724                           ; 1 bytes @ 0xC
  4725  012C                     	ds	1
  4726  012D                     ___altoft@sign:	
  4727                           
  4728                           ; 1 bytes @ 0xD
  4729  012D                     	ds	1
  4730  012E                     ?_trunc:	
  4731  012E                     trunc@x:	
  4732                           ; 3 bytes @ 0xE
  4733                           
  4734                           
  4735                           ; 3 bytes @ 0xE
  4736  012E                     	ds	3
  4737  0131                     trunc@i:	
  4738                           
  4739                           ; 3 bytes @ 0x11
  4740  0131                     	ds	3
  4741  0134                     trunc@expon:	
  4742                           
  4743                           ; 2 bytes @ 0x14
  4744  0134                     	ds	2
  4745  0136                     ?_set_subdivision:	
  4746  0136                     set_subdivision@x:	
  4747                           ; 2 bytes @ 0x16
  4748                           
  4749                           
  4750                           ; 2 bytes @ 0x16
  4751  0136                     	ds	2
  4752  0138                     set_subdivision@y:	
  4753                           
  4754                           ; 2 bytes @ 0x18
  4755  0138                     	ds	2
  4756  013A                     ??_set_subdivision:	
  4757                           
  4758                           ; 1 bytes @ 0x1A
  4759  013A                     	ds	3
  4760  013D                     set_subdivision@scalar:	
  4761                           
  4762                           ; 3 bytes @ 0x1D
  4763  013D                     	ds	3
  4764  0140                     set_subdivision@tmpX:	
  4765                           
  4766                           ; 2 bytes @ 0x20
  4767  0140                     	ds	2
  4768  0142                     ??_main:	
  4769                           
  4770                           ; 1 bytes @ 0x22
  4771  0142                     	ds	15
  4772                           
  4773                           	psect	cstackBANK1
  4774  00A0                     __pcstackBANK1:	
  4775  00A0                     ?_set_leds_top:	
  4776  00A0                     ?_USARTInit:	
  4777                           ; 1 bytes @ 0x0
  4778                           
  4779  00A0                     ??_ConfigureOscillator:	
  4780                           ; 1 bytes @ 0x0
  4781                           
  4782  00A0                     ??_InitApp:	
  4783                           ; 1 bytes @ 0x0
  4784                           
  4785  00A0                     ??_InitializeTaps:	
  4786                           ; 1 bytes @ 0x0
  4787                           
  4788  00A0                     ??_init_adc:	
  4789                           ; 1 bytes @ 0x0
  4790                           
  4791  00A0                     ??_init_pwm:	
  4792                           ; 1 bytes @ 0x0
  4793                           
  4794  00A0                     ??_init_timer2:	
  4795                           ; 1 bytes @ 0x0
  4796                           
  4797  00A0                     ??_init_timer0:	
  4798                           ; 1 bytes @ 0x0
  4799                           
  4800  00A0                     ?_set_leds_bottom:	
  4801                           ; 1 bytes @ 0x0
  4802                           
  4803  00A0                     ?_setFeedbackState:	
  4804                           ; 1 bytes @ 0x0
  4805                           
  4806  00A0                     ?_setLongTapState:	
  4807                           ; 1 bytes @ 0x0
  4808                           
  4809  00A0                     ?_updateSwitchBypassState:	
  4810                           ; 1 bytes @ 0x0
  4811                           
  4812  00A0                     ?_adc_convert:	
  4813                           ; 1 bytes @ 0x0
  4814                           
  4815  00A0                     ?_FLASH_ReadWord:	
  4816                           ; 2 bytes @ 0x0
  4817                           
  4818  00A0                     ?_getSwitchBypassState:	
  4819                           ; 2 bytes @ 0x0
  4820                           
  4821  00A0                     ?___ftpack:	
  4822                           ; 2 bytes @ 0x0
  4823                           
  4824  00A0                     ?_frexp:	
  4825                           ; 3 bytes @ 0x0
  4826                           
  4827  00A0                     ?___ftneg:	
  4828                           ; 3 bytes @ 0x0
  4829                           
  4830  00A0                     ?___lmul:	
  4831                           ; 3 bytes @ 0x0
  4832                           
  4833  00A0                     ?___aldiv:	
  4834                           ; 4 bytes @ 0x0
  4835                           
  4836  00A0                     FLASH_ReadWord@flashAddr:	
  4837                           ; 4 bytes @ 0x0
  4838                           
  4839  00A0                     set_leds_top@x:	
  4840                           ; 2 bytes @ 0x0
  4841                           
  4842  00A0                     set_leds_bottom@x:	
  4843                           ; 2 bytes @ 0x0
  4844                           
  4845  00A0                     updateSwitchBypassState@state:	
  4846                           ; 2 bytes @ 0x0
  4847                           
  4848  00A0                     setFeedbackState@f_state:	
  4849                           ; 2 bytes @ 0x0
  4850                           
  4851  00A0                     setLongTapState@f_state:	
  4852                           ; 2 bytes @ 0x0
  4853                           
  4854  00A0                     USARTInit@baud_rate:	
  4855                           ; 2 bytes @ 0x0
  4856                           
  4857  00A0                     ___ftpack@arg:	
  4858                           ; 2 bytes @ 0x0
  4859                           
  4860  00A0                     ___ftneg@f1:	
  4861                           ; 3 bytes @ 0x0
  4862                           
  4863  00A0                     frexp@value:	
  4864                           ; 3 bytes @ 0x0
  4865                           
  4866  00A0                     ___lmul@multiplier:	
  4867                           ; 3 bytes @ 0x0
  4868                           
  4869  00A0                     ___aldiv@divisor:	
  4870                           ; 4 bytes @ 0x0
  4871                           
  4872                           
  4873                           ; 4 bytes @ 0x0
  4874  00A0                     	ds	1
  4875  00A1                     InitializeTaps@itap:	
  4876                           
  4877                           ; 2 bytes @ 0x1
  4878  00A1                     	ds	1
  4879  00A2                     ??_USARTInit:	
  4880  00A2                     ??_adc_convert:	
  4881                           ; 1 bytes @ 0x2
  4882                           
  4883  00A2                     ??_FLASH_ReadWord:	
  4884                           ; 1 bytes @ 0x2
  4885                           
  4886  00A2                     ??_set_leds_bottom:	
  4887                           ; 1 bytes @ 0x2
  4888                           
  4889  00A2                     ??_setFeedbackState:	
  4890                           ; 1 bytes @ 0x2
  4891                           
  4892  00A2                     ??_setLongTapState:	
  4893                           ; 1 bytes @ 0x2
  4894                           
  4895  00A2                     ??_updateSwitchBypassState:	
  4896                           ; 1 bytes @ 0x2
  4897                           
  4898  00A2                     ??_getSwitchBypassState:	
  4899                           ; 1 bytes @ 0x2
  4900                           
  4901  00A2                     FLASH_ReadWord@GIEBitValue:	
  4902                           ; 1 bytes @ 0x2
  4903                           
  4904  00A2                     set_leds_top@ledState:	
  4905                           ; 1 bytes @ 0x2
  4906                           
  4907                           
  4908                           ; 2 bytes @ 0x2
  4909  00A2                     	ds	1
  4910  00A3                     ??___ftneg:	
  4911  00A3                     adc_convert@channel:	
  4912                           ; 1 bytes @ 0x3
  4913                           
  4914  00A3                     ___ftpack@exp:	
  4915                           ; 1 bytes @ 0x3
  4916                           
  4917  00A3                     frexp@eptr:	
  4918                           ; 1 bytes @ 0x3
  4919                           
  4920                           
  4921                           ; 1 bytes @ 0x3
  4922  00A3                     	ds	1
  4923  00A4                     ??_set_leds_top:	
  4924  00A4                     ??_ReadSavedSettings:	
  4925                           ; 1 bytes @ 0x4
  4926                           
  4927  00A4                     ??_resetRingLEDs:	
  4928                           ; 1 bytes @ 0x4
  4929                           
  4930  00A4                     ??_setPresetDisplay:	
  4931                           ; 1 bytes @ 0x4
  4932                           
  4933  00A4                     ??_setExpressionDisplay:	
  4934                           ; 1 bytes @ 0x4
  4935                           
  4936  00A4                     ??_frexp:	
  4937                           ; 1 bytes @ 0x4
  4938                           
  4939  00A4                     ___ftpack@sign:	
  4940                           ; 1 bytes @ 0x4
  4941                           
  4942  00A4                     ___lmul@multiplicand:	
  4943                           ; 1 bytes @ 0x4
  4944                           
  4945  00A4                     ___aldiv@dividend:	
  4946                           ; 4 bytes @ 0x4
  4947                           
  4948                           
  4949                           ; 4 bytes @ 0x4
  4950  00A4                     	ds	1
  4951  00A5                     ??___ftpack:	
  4952                           
  4953                           ; 1 bytes @ 0x5
  4954  00A5                     	ds	1
  4955  00A6                     setPresetDisplay@ledChannel:	
  4956  00A6                     setExpressionDisplay@ledChannel:	
  4957                           ; 1 bytes @ 0x6
  4958                           
  4959                           
  4960                           ; 1 bytes @ 0x6
  4961  00A6                     	ds	1
  4962  00A7                     ??_update_mode:	
  4963  00A7                     ??_update_selectMode:	
  4964                           ; 1 bytes @ 0x7
  4965                           
  4966  00A7                     ??_setPedalMode:	
  4967                           ; 1 bytes @ 0x7
  4968                           
  4969                           
  4970                           ; 1 bytes @ 0x7
  4971  00A7                     	ds	1
  4972  00A8                     ??___lmul:	
  4973  00A8                     ??___aldiv:	
  4974                           ; 1 bytes @ 0x8
  4975                           
  4976  00A8                     ?___awtoft:	
  4977                           ; 1 bytes @ 0x8
  4978                           
  4979  00A8                     ?___ftadd:	
  4980                           ; 3 bytes @ 0x8
  4981                           
  4982  00A8                     ___awtoft@c:	
  4983                           ; 3 bytes @ 0x8
  4984                           
  4985  00A8                     ___ftadd@f1:	
  4986                           ; 2 bytes @ 0x8
  4987                           
  4988  00A8                     ___lmul@product:	
  4989                           ; 3 bytes @ 0x8
  4990                           
  4991                           
  4992                           ; 4 bytes @ 0x8
  4993  00A8                     	ds	1
  4994  00A9                     ___aldiv@counter:	
  4995                           
  4996                           ; 1 bytes @ 0x9
  4997  00A9                     	ds	1
  4998  00AA                     ___aldiv@sign:	
  4999                           
  5000                           ; 1 bytes @ 0xA
  5001  00AA                     	ds	1
  5002  00AB                     ??___awtoft:	
  5003  00AB                     ___ftadd@f2:	
  5004                           ; 1 bytes @ 0xB
  5005                           
  5006  00AB                     ___aldiv@quotient:	
  5007                           ; 3 bytes @ 0xB
  5008                           
  5009                           
  5010                           ; 4 bytes @ 0xB
  5011  00AB                     	ds	1
  5012  00AC                     ?_wait_ms:	
  5013  00AC                     wait_ms@timeSec:	
  5014                           ; 1 bytes @ 0xC
  5015                           
  5016                           
  5017                           ; 2 bytes @ 0xC
  5018  00AC                     	ds	1
  5019  00AD                     ___awtoft@sign:	
  5020                           
  5021                           ; 1 bytes @ 0xD
  5022  00AD                     	ds	1
  5023  00AE                     ??_wait_ms:	
  5024  00AE                     ??___ftadd:	
  5025                           ; 1 bytes @ 0xE
  5026                           
  5027  00AE                     wait_ms@timemsl:	
  5028                           ; 1 bytes @ 0xE
  5029                           
  5030                           
  5031                           ; 4 bytes @ 0xE
  5032  00AE                     	ds	4
  5033  00B2                     ??_read_bottom_tactile:	
  5034  00B2                     ??_read_top_tactile:	
  5035                           ; 1 bytes @ 0x12
  5036                           
  5037  00B2                     ??_solidring_tactiles:	
  5038                           ; 1 bytes @ 0x12
  5039                           
  5040  00B2                     ??_ring_tactiles:	
  5041                           ; 1 bytes @ 0x12
  5042                           
  5043  00B2                     ?_setSwitchBypassState:	
  5044                           ; 1 bytes @ 0x12
  5045                           
  5046  00B2                     ___ftadd@sign:	
  5047                           ; 1 bytes @ 0x12
  5048                           
  5049  00B2                     setSwitchBypassState@f_state:	
  5050                           ; 1 bytes @ 0x12
  5051                           
  5052                           
  5053                           ; 2 bytes @ 0x12
  5054  00B2                     	ds	1
  5055  00B3                     ___ftadd@exp2:	
  5056  00B3                     ring_tactiles@iLed:	
  5057                           ; 1 bytes @ 0x13
  5058                           
  5059                           
  5060                           ; 2 bytes @ 0x13
  5061  00B3                     	ds	1
  5062  00B4                     ??_setSwitchBypassState:	
  5063  00B4                     solidring_tactiles@ring_delay:	
  5064                           ; 1 bytes @ 0x14
  5065                           
  5066  00B4                     ___ftadd@exp1:	
  5067                           ; 1 bytes @ 0x14
  5068                           
  5069                           
  5070                           ; 1 bytes @ 0x14
  5071  00B4                     	ds	1
  5072  00B5                     ?___ftmul:	
  5073  00B5                     ring_tactiles@iLed_1489:	
  5074                           ; 3 bytes @ 0x15
  5075                           
  5076  00B5                     ___ftmul@f1:	
  5077                           ; 2 bytes @ 0x15
  5078                           
  5079                           
  5080                           ; 3 bytes @ 0x15
  5081  00B5                     	ds	1
  5082  00B6                     ??_initSwitchBypass:	
  5083  00B6                     initSwitchBypass@initState:	
  5084                           ; 1 bytes @ 0x16
  5085                           
  5086                           
  5087                           ; 2 bytes @ 0x16
  5088  00B6                     	ds	1
  5089  00B7                     ??_showSave:	
  5090                           
  5091                           ; 1 bytes @ 0x17
  5092  00B7                     	ds	1
  5093  00B8                     ?_setDoublePressState:	
  5094  00B8                     setDoublePressState@f_state:	
  5095                           ; 1 bytes @ 0x18
  5096                           
  5097  00B8                     ___ftmul@f2:	
  5098                           ; 2 bytes @ 0x18
  5099                           
  5100                           
  5101                           ; 3 bytes @ 0x18
  5102  00B8                     	ds	2
  5103  00BA                     ??_setDoublePressState:	
  5104                           
  5105                           ; 1 bytes @ 0x1A
  5106  00BA                     	ds	1
  5107  00BB                     ??___ftmul:	
  5108                           
  5109                           ; 1 bytes @ 0x1B
  5110  00BB                     	ds	1
  5111  00BC                     ??_updateSwitchBypass:	
  5112  00BC                     ??_updateSwitchTap:	
  5113                           ; 1 bytes @ 0x1C
  5114                           
  5115                           
  5116                           ; 1 bytes @ 0x1C
  5117  00BC                     	ds	3
  5118  00BF                     ___ftmul@exp:	
  5119                           
  5120                           ; 1 bytes @ 0x1F
  5121  00BF                     	ds	1
  5122  00C0                     ___ftmul@f3_as_product:	
  5123                           
  5124                           ; 3 bytes @ 0x20
  5125  00C0                     	ds	2
  5126  00C2                     updateSwitchTap@tapCntDivisor:	
  5127                           
  5128                           ; 2 bytes @ 0x22
  5129  00C2                     	ds	1
  5130  00C3                     ___ftmul@cntr:	
  5131                           
  5132                           ; 1 bytes @ 0x23
  5133  00C3                     	ds	1
  5134  00C4                     updateSwitchTap@iCnt:	
  5135  00C4                     ___ftmul@sign:	
  5136                           ; 1 bytes @ 0x24
  5137                           
  5138                           
  5139                           ; 1 bytes @ 0x24
  5140  00C4                     	ds	1
  5141  00C5                     ?___ftdiv:	
  5142  00C5                     ___ftdiv@f2:	
  5143                           ; 3 bytes @ 0x25
  5144                           
  5145                           
  5146                           ; 3 bytes @ 0x25
  5147  00C5                     	ds	3
  5148  00C8                     ___ftdiv@f1:	
  5149                           
  5150                           ; 3 bytes @ 0x28
  5151  00C8                     	ds	3
  5152  00CB                     ??___ftdiv:	
  5153                           
  5154                           ; 1 bytes @ 0x2B
  5155  00CB                     	ds	4
  5156  00CF                     ___ftdiv@cntr:	
  5157                           
  5158                           ; 1 bytes @ 0x2F
  5159  00CF                     	ds	1
  5160  00D0                     ___ftdiv@f3:	
  5161                           
  5162                           ; 3 bytes @ 0x30
  5163  00D0                     	ds	3
  5164  00D3                     ___ftdiv@exp:	
  5165                           
  5166                           ; 1 bytes @ 0x33
  5167  00D3                     	ds	1
  5168  00D4                     ___ftdiv@sign:	
  5169                           
  5170                           ; 1 bytes @ 0x34
  5171  00D4                     	ds	1
  5172  00D5                     ?_map:	
  5173  00D5                     map@x:	
  5174                           ; 3 bytes @ 0x35
  5175                           
  5176                           
  5177                           ; 3 bytes @ 0x35
  5178  00D5                     	ds	3
  5179  00D8                     map@in_min:	
  5180                           
  5181                           ; 3 bytes @ 0x38
  5182  00D8                     	ds	3
  5183  00DB                     map@in_max:	
  5184                           
  5185                           ; 3 bytes @ 0x3B
  5186  00DB                     	ds	3
  5187  00DE                     map@out_min:	
  5188                           
  5189                           ; 3 bytes @ 0x3E
  5190  00DE                     	ds	3
  5191  00E1                     map@out_max:	
  5192                           
  5193                           ; 3 bytes @ 0x41
  5194  00E1                     	ds	3
  5195  00E4                     ??_map:	
  5196  00E4                     _map$2558:	
  5197                           ; 1 bytes @ 0x44
  5198                           
  5199                           
  5200                           ; 3 bytes @ 0x44
  5201  00E4                     	ds	3
  5202  00E7                     ?___fttol:	
  5203  00E7                     ___fttol@f1:	
  5204                           ; 4 bytes @ 0x47
  5205                           
  5206                           
  5207                           ; 3 bytes @ 0x47
  5208  00E7                     	ds	4
  5209  00EB                     ??___fttol:	
  5210                           
  5211                           ; 1 bytes @ 0x4B
  5212  00EB                     	ds	4
  5213  00EF                     ??_trunc:	
  5214                           
  5215                           ; 1 bytes @ 0x4F
  5216  00EF                     	ds	1
  5217                           
  5218                           	psect	cstackCOMMON
  5219  0070                     __pcstackCOMMON:	
  5220  0070                     ?_ConfigureOscillator:	
  5221  0070                     ?_InitApp:	
  5222                           ; 1 bytes @ 0x0
  5223                           
  5224  0070                     ?_InitializeTaps:	
  5225                           ; 1 bytes @ 0x0
  5226                           
  5227  0070                     ?_initSwitchBypass:	
  5228                           ; 1 bytes @ 0x0
  5229                           
  5230  0070                     ?_ReadSavedSettings:	
  5231                           ; 1 bytes @ 0x0
  5232                           
  5233  0070                     ?_update_mode:	
  5234                           ; 1 bytes @ 0x0
  5235                           
  5236  0070                     ?_update_selectMode:	
  5237                           ; 1 bytes @ 0x0
  5238                           
  5239  0070                     ?_updateSwitchBypass:	
  5240                           ; 1 bytes @ 0x0
  5241                           
  5242  0070                     ?_updateSwitchTap:	
  5243                           ; 1 bytes @ 0x0
  5244                           
  5245  0070                     ?_read_bottom_tactile:	
  5246                           ; 1 bytes @ 0x0
  5247                           
  5248  0070                     ?_read_top_tactile:	
  5249                           ; 1 bytes @ 0x0
  5250                           
  5251  0070                     ?_init_adc:	
  5252                           ; 1 bytes @ 0x0
  5253                           
  5254  0070                     ?_init_pwm:	
  5255                           ; 1 bytes @ 0x0
  5256                           
  5257  0070                     ?_init_timer2:	
  5258                           ; 1 bytes @ 0x0
  5259                           
  5260  0070                     ?_init_timer0:	
  5261                           ; 1 bytes @ 0x0
  5262                           
  5263  0070                     ?_solidring_tactiles:	
  5264                           ; 1 bytes @ 0x0
  5265                           
  5266  0070                     ?_ring_tactiles:	
  5267                           ; 1 bytes @ 0x0
  5268                           
  5269  0070                     ?_resetRingLEDs:	
  5270                           ; 1 bytes @ 0x0
  5271                           
  5272  0070                     ?_setPedalMode:	
  5273                           ; 1 bytes @ 0x0
  5274                           
  5275  0070                     ?_setPresetDisplay:	
  5276                           ; 1 bytes @ 0x0
  5277                           
  5278  0070                     ?_setExpressionDisplay:	
  5279                           ; 1 bytes @ 0x0
  5280                           
  5281  0070                     ?_isr:	
  5282                           ; 1 bytes @ 0x0
  5283                           
  5284  0070                     ?_main:	
  5285                           ; 1 bytes @ 0x0
  5286                           
  5287  0070                     ?_showSave:	
  5288                           ; 1 bytes @ 0x0
  5289                           
  5290  0070                     ?i1_set_leds_top:	
  5291                           ; 1 bytes @ 0x0
  5292                           
  5293  0070                     ?___awdiv:	
  5294                           ; 1 bytes @ 0x0
  5295                           
  5296  0070                     ?i1___lmul:	
  5297                           ; 2 bytes @ 0x0
  5298                           
  5299  0070                     ___awdiv@divisor:	
  5300                           ; 4 bytes @ 0x0
  5301                           
  5302  0070                     i1set_leds_top@x:	
  5303                           ; 2 bytes @ 0x0
  5304                           
  5305  0070                     i1___lmul@multiplier:	
  5306                           ; 2 bytes @ 0x0
  5307                           
  5308                           
  5309                           ; 4 bytes @ 0x0
  5310  0070                     	ds	2
  5311  0072                     ___awdiv@dividend:	
  5312  0072                     i1set_leds_top@ledState:	
  5313                           ; 2 bytes @ 0x2
  5314                           
  5315                           
  5316                           ; 2 bytes @ 0x2
  5317  0072                     	ds	2
  5318  0074                     ??___awdiv:	
  5319  0074                     ??i1_set_leds_top:	
  5320                           ; 1 bytes @ 0x4
  5321                           
  5322  0074                     i1___lmul@multiplicand:	
  5323                           ; 1 bytes @ 0x4
  5324                           
  5325                           
  5326                           ; 4 bytes @ 0x4
  5327  0074                     	ds	1
  5328  0075                     ___awdiv@counter:	
  5329                           
  5330                           ; 1 bytes @ 0x5
  5331  0075                     	ds	1
  5332  0076                     ___awdiv@sign:	
  5333                           
  5334                           ; 1 bytes @ 0x6
  5335  0076                     	ds	1
  5336  0077                     ___awdiv@quotient:	
  5337                           
  5338                           ; 2 bytes @ 0x7
  5339  0077                     	ds	1
  5340  0078                     ??i1___lmul:	
  5341  0078                     i1___lmul@product:	
  5342                           ; 1 bytes @ 0x8
  5343                           
  5344                           
  5345                           ; 4 bytes @ 0x8
  5346  0078                     	ds	4
  5347  007C                     ??i1___aldiv:	
  5348                           
  5349                           ; 1 bytes @ 0xC
  5350  007C                     	ds	1
  5351                           
  5352                           	psect	cstackBANK0
  5353  0020                     __pcstackBANK0:	
  5354  0020                     ?i1___aldiv:	
  5355  0020                     i1___aldiv@divisor:	
  5356                           ; 4 bytes @ 0x0
  5357                           
  5358                           
  5359                           ; 4 bytes @ 0x0
  5360  0020                     	ds	4
  5361  0024                     i1___aldiv@dividend:	
  5362                           
  5363                           ; 4 bytes @ 0x4
  5364  0024                     	ds	4
  5365  0028                     i1___aldiv@counter:	
  5366                           
  5367                           ; 1 bytes @ 0x8
  5368  0028                     	ds	1
  5369  0029                     i1___aldiv@sign:	
  5370                           
  5371                           ; 1 bytes @ 0x9
  5372  0029                     	ds	1
  5373  002A                     i1___aldiv@quotient:	
  5374                           
  5375                           ; 4 bytes @ 0xA
  5376  002A                     	ds	4
  5377  002E                     ?_modulation:	
  5378  002E                     modulation@x:	
  5379                           ; 4 bytes @ 0xE
  5380                           
  5381                           
  5382                           ; 4 bytes @ 0xE
  5383  002E                     	ds	4
  5384  0032                     modulation@y:	
  5385                           
  5386                           ; 4 bytes @ 0x12
  5387  0032                     	ds	4
  5388  0036                     ??_modulation:	
  5389                           
  5390                           ; 1 bytes @ 0x16
  5391  0036                     	ds	4
  5392  003A                     ??_isr:	
  5393                           
  5394                           ; 1 bytes @ 0x1A
  5395  003A                     	ds	9
  5396  0043                     isr@tmpSubDelay:	
  5397                           
  5398                           ; 2 bytes @ 0x23
  5399  0043                     	ds	2
  5400                           
  5401                           	psect	maintext
  5402  0BA5                     __pmaintext:	
  5403 ;;
  5404 ;;Main: autosize = 0, tempsize = 15, incstack = 0, save=0
  5405 ;;
  5406 ;; *************** function _main *****************
  5407 ;; Defined at:
  5408 ;;		line 83 in file "main.c"
  5409 ;; Parameters:    Size  Location     Type
  5410 ;;		None
  5411 ;; Auto vars:     Size  Location     Type
  5412 ;;  i               2    4[BANK4 ] int 
  5413 ;;  i               2    2[BANK4 ] int 
  5414 ;;  i               2    0[BANK4 ] int 
  5415 ;; Return value:  Size  Location     Type
  5416 ;;                  1    wreg      void 
  5417 ;; Registers used:
  5418 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5419 ;; Tracked objects:
  5420 ;;		On entry : B1F/0
  5421 ;;		On exit  : 0/0
  5422 ;;		Unchanged: 0/0
  5423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  5424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5425 ;;      Locals:         0       0       0       0       0       6       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5426 ;;      Temps:          0       0       0      15       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5427 ;;      Totals:         0       0       0      15       0       6       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5428 ;;Total ram usage:       21 bytes
  5429 ;; Hardware stack levels required when called:    9
  5430 ;; This function calls:
  5431 ;;		_ConfigureOscillator
  5432 ;;		_InitApp
  5433 ;;		_InitializeTaps
  5434 ;;		_ReadSavedSettings
  5435 ;;		_USARTInit
  5436 ;;		___awtoft
  5437 ;;		___fttol
  5438 ;;		_adc_convert
  5439 ;;		_initSwitchBypass
  5440 ;;		_map
  5441 ;;		_read_bottom_tactile
  5442 ;;		_read_top_tactile
  5443 ;;		_set_subdivision
  5444 ;;		_updateSwitchBypass
  5445 ;;		_updateSwitchTap
  5446 ;;		_update_mode
  5447 ;;		_update_selectMode
  5448 ;; This function is called by:
  5449 ;;		Startup code after reset
  5450 ;; This function uses a non-reentrant model
  5451 ;;
  5452                           
  5453                           
  5454                           ;psect for function _main
  5455  0BA5                     _main:	
  5456                           
  5457                           ;main.c: 84: B25kLength = sizeof(B25k)/sizeof(B25k[0]);
  5458                           
  5459                           ;incstack = 0
  5460                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5461  0BA5  3028               	movlw	40
  5462  0BA6  0023               	movlb	3	; select bank3
  5463  0BA7  00EC               	movwf	_B25kLength^(0+384)
  5464  0BA8  3000               	movlw	0
  5465  0BA9  00ED               	movwf	(_B25kLength^(0+384)+1)
  5466                           
  5467                           ;main.c: 86: USARTInit(31250);
  5468  0BAA  3012               	movlw	18
  5469  0BAB  0021               	movlb	1	; select bank1
  5470  0BAC  00A0               	movwf	USARTInit@baud_rate^(0+128)
  5471  0BAD  307A               	movlw	122
  5472  0BAE  00A1               	movwf	(USARTInit@baud_rate^(0+128)+1)
  5473  0BAF  3191  2150  318B   	fcall	_USARTInit
  5474                           
  5475                           ;main.c: 87: ConfigureOscillator();
  5476  0BB2  319C  2416  318B   	fcall	_ConfigureOscillator
  5477                           
  5478                           ;main.c: 88: InitApp();
  5479  0BB5  319D  25D0  318B   	fcall	_InitApp
  5480                           
  5481                           ;main.c: 90: PORTEbits.RE0 = 1;
  5482  0BB8  0020               	movlb	0	; select bank0
  5483  0BB9  1410               	bsf	16,0	;volatile
  5484                           
  5485                           ;main.c: 91: PORTEbits.RE1 = 1;
  5486  0BBA  1490               	bsf	16,1	;volatile
  5487                           
  5488                           ;main.c: 92: PORTDbits.RD6 = 1;
  5489  0BBB  170F               	bsf	15,6	;volatile
  5490                           
  5491                           ;main.c: 93: PORTDbits.RD5 = 1;
  5492  0BBC  168F               	bsf	15,5	;volatile
  5493                           
  5494                           ;main.c: 94: PORTCbits.RC0 = 1;
  5495  0BBD  140E               	bsf	14,0	;volatile
  5496                           
  5497                           ;main.c: 95: PORTDbits.RD7 = 1;
  5498  0BBE  178F               	bsf	15,7	;volatile
  5499                           
  5500                           ;main.c: 97: InitializeTaps();
  5501  0BBF  319D  2553  318B   	fcall	_InitializeTaps
  5502                           
  5503                           ;main.c: 98: initSwitchBypass();
  5504  0BC2  319C  2475  318B   	fcall	_initSwitchBypass
  5505                           
  5506                           ;main.c: 101: ReadSavedSettings();
  5507  0BC5  3194  24B3  318B   	fcall	_ReadSavedSettings
  5508  0BC8                     l7223:	
  5509                           ;main.c: 103: while (1) {
  5510                           
  5511                           
  5512                           ;main.c: 106: update_mode();
  5513  0BC8  319E  2662  318B   	fcall	_update_mode
  5514                           
  5515                           ;main.c: 107: update_selectMode();
  5516  0BCB  3188  2001  318B   	fcall	_update_selectMode
  5517                           
  5518                           ;main.c: 110: updateSwitchBypass();
  5519  0BCE  3189  21C8  318B   	fcall	_updateSwitchBypass
  5520                           
  5521                           ;main.c: 111: if (presetSaveMode != 1) {
  5522  0BD1  0020               	movlb	0	; select bank0
  5523  0BD2  0366               	decf	_presetSaveMode,w
  5524  0BD3  1903               	btfsc	3,2
  5525  0BD4  2BD8               	goto	l7233
  5526                           
  5527                           ;main.c: 112: updateSwitchTap();
  5528  0BD5  3185  25F8  318B   	fcall	_updateSwitchTap
  5529  0BD8                     l7233:	
  5530                           
  5531                           ;main.c: 113: }
  5532                           ;main.c: 115: if (presetSaveMode != 1 && mode2_state != presetModeCnst) {
  5533  0BD8  0020               	movlb	0	; select bank0
  5534  0BD9  0366               	decf	_presetSaveMode,w
  5535  0BDA  1903               	btfsc	3,2
  5536  0BDB  2BE7               	goto	l7239
  5537  0BDC  0865               	movf	_mode2_state,w
  5538  0BDD  0022               	movlb	2	; select bank2
  5539  0BDE  066D               	xorwf	_presetModeCnst^(0+256),w
  5540  0BDF  1903               	skipnz
  5541  0BE0  2BE7               	goto	l7239
  5542                           
  5543                           ;main.c: 116: read_bottom_tactile();
  5544  0BE1  3191  2193  318B   	fcall	_read_bottom_tactile
  5545                           
  5546                           ;main.c: 117: read_top_tactile();
  5547  0BE4  3192  22B7  318B   	fcall	_read_top_tactile
  5548  0BE7                     l7239:	
  5549                           
  5550                           ;main.c: 118: }
  5551                           ;main.c: 121: knob_1_pos = adc_convert(0);
  5552  0BE7  3000               	movlw	0
  5553  0BE8  319C  2484  318B   	fcall	_adc_convert
  5554  0BEB  0021               	movlb	1	; select bank1
  5555  0BEC  0821               	movf	(?_adc_convert+1)^(0+128),w
  5556  0BED  0023               	movlb	3	; select bank3
  5557  0BEE  00CA               	movwf	(_knob_1_pos+1)^(0+384)
  5558  0BEF  0021               	movlb	1	; select bank1
  5559  0BF0  0820               	movf	?_adc_convert^(0+128),w
  5560  0BF1  0023               	movlb	3	; select bank3
  5561  0BF2  00C9               	movwf	_knob_1_pos^(0+384)
  5562                           
  5563                           ;main.c: 122: knob_2_pos = adc_convert(1);
  5564  0BF3  3001               	movlw	1
  5565  0BF4  319C  2484  318B   	fcall	_adc_convert
  5566  0BF7  0021               	movlb	1	; select bank1
  5567  0BF8  0821               	movf	(?_adc_convert+1)^(0+128),w
  5568  0BF9  0023               	movlb	3	; select bank3
  5569  0BFA  00CC               	movwf	(_knob_2_pos+1)^(0+384)
  5570  0BFB  0021               	movlb	1	; select bank1
  5571  0BFC  0820               	movf	?_adc_convert^(0+128),w
  5572  0BFD  0023               	movlb	3	; select bank3
  5573  0BFE  00CB               	movwf	_knob_2_pos^(0+384)
  5574                           
  5575                           ;main.c: 123: knob_3_pos = adc_convert(2);
  5576  0BFF  3002               	movlw	2
  5577  0C00  319C  2484  318B   	fcall	_adc_convert
  5578  0C03  0021               	movlb	1	; select bank1
  5579  0C04  0821               	movf	(?_adc_convert+1)^(0+128),w
  5580  0C05  0023               	movlb	3	; select bank3
  5581  0C06  00CE               	movwf	(_knob_3_pos+1)^(0+384)
  5582  0C07  0021               	movlb	1	; select bank1
  5583  0C08  0820               	movf	?_adc_convert^(0+128),w
  5584  0C09  0023               	movlb	3	; select bank3
  5585  0C0A  00CD               	movwf	_knob_3_pos^(0+384)
  5586                           
  5587                           ;main.c: 124: knob_4_pos = adc_convert(3);
  5588  0C0B  3003               	movlw	3
  5589  0C0C  319C  2484  318B   	fcall	_adc_convert
  5590  0C0F  0021               	movlb	1	; select bank1
  5591  0C10  0821               	movf	(?_adc_convert+1)^(0+128),w
  5592  0C11  0023               	movlb	3	; select bank3
  5593  0C12  00D0               	movwf	(_knob_4_pos+1)^(0+384)
  5594  0C13  0021               	movlb	1	; select bank1
  5595  0C14  0820               	movf	?_adc_convert^(0+128),w
  5596  0C15  0023               	movlb	3	; select bank3
  5597  0C16  00CF               	movwf	_knob_4_pos^(0+384)
  5598                           
  5599                           ;main.c: 125: knob_5_pos = adc_convert(4);
  5600  0C17  3004               	movlw	4
  5601  0C18  319C  2484  318B   	fcall	_adc_convert
  5602  0C1B  0021               	movlb	1	; select bank1
  5603  0C1C  0821               	movf	(?_adc_convert+1)^(0+128),w
  5604  0C1D  0023               	movlb	3	; select bank3
  5605  0C1E  00D2               	movwf	(_knob_5_pos+1)^(0+384)
  5606  0C1F  0021               	movlb	1	; select bank1
  5607  0C20  0820               	movf	?_adc_convert^(0+128),w
  5608  0C21  0023               	movlb	3	; select bank3
  5609  0C22  00D1               	movwf	_knob_5_pos^(0+384)
  5610                           
  5611                           ;main.c: 141: if ((knob_1_pos - knob1_prev) >= 4 || (knob_1_pos - knob1_prev) <= -4) {
  5612  0C23  0022               	movlb	2	; select bank2
  5613  0C24  0961               	comf	_knob1_prev^(0+256),w	;volatile
  5614  0C25  00C2               	movwf	??_main^(0+256)
  5615  0C26  0962               	comf	(_knob1_prev+1)^(0+256),w	;volatile
  5616  0C27  00C3               	movwf	(??_main^(0+256)+1)
  5617  0C28  0AC2               	incf	??_main^(0+256),f
  5618  0C29  1903               	skipnz
  5619  0C2A  0AC3               	incf	(??_main^(0+256)+1),f
  5620  0C2B  0023               	movlb	3	; select bank3
  5621  0C2C  0849               	movf	_knob_1_pos^(0+384),w
  5622  0C2D  0022               	movlb	2	; select bank2
  5623  0C2E  0742               	addwf	??_main^(0+256),w
  5624  0C2F  00C4               	movwf	(??_main+2)^(0+256)
  5625  0C30  0023               	movlb	3	; select bank3
  5626  0C31  084A               	movf	(_knob_1_pos+1)^(0+384),w
  5627  0C32  0022               	movlb	2	; select bank2
  5628  0C33  3D43               	addwfc	(??_main+1)^(0+256),w
  5629  0C34  00C5               	movwf	(??_main+3)^(0+256)
  5630  0C35  0845               	movf	(??_main+3)^(0+256),w
  5631  0C36  3A80               	xorlw	128
  5632  0C37  00C6               	movwf	(??_main+4)^(0+256)
  5633  0C38  3080               	movlw	128
  5634  0C39  0246               	subwf	(??_main+4)^(0+256),w
  5635  0C3A  1D03               	skipz
  5636  0C3B  2C3E               	goto	u8035
  5637  0C3C  3004               	movlw	4
  5638  0C3D  0244               	subwf	(??_main+2)^(0+256),w
  5639  0C3E                     u8035:	
  5640  0C3E  1803               	skipnc
  5641  0C3F  2C5D               	goto	l7253
  5642  0C40  0022               	movlb	2	; select bank2
  5643  0C41  0961               	comf	_knob1_prev^(0+256),w	;volatile
  5644  0C42  00C2               	movwf	??_main^(0+256)
  5645  0C43  0962               	comf	(_knob1_prev+1)^(0+256),w	;volatile
  5646  0C44  00C3               	movwf	(??_main^(0+256)+1)
  5647  0C45  0AC2               	incf	??_main^(0+256),f
  5648  0C46  1903               	skipnz
  5649  0C47  0AC3               	incf	(??_main^(0+256)+1),f
  5650  0C48  0023               	movlb	3	; select bank3
  5651  0C49  0849               	movf	_knob_1_pos^(0+384),w
  5652  0C4A  0022               	movlb	2	; select bank2
  5653  0C4B  0742               	addwf	??_main^(0+256),w
  5654  0C4C  00C4               	movwf	(??_main+2)^(0+256)
  5655  0C4D  0023               	movlb	3	; select bank3
  5656  0C4E  084A               	movf	(_knob_1_pos+1)^(0+384),w
  5657  0C4F  0022               	movlb	2	; select bank2
  5658  0C50  3D43               	addwfc	(??_main+1)^(0+256),w
  5659  0C51  00C5               	movwf	(??_main+3)^(0+256)
  5660  0C52  0845               	movf	(??_main+3)^(0+256),w
  5661  0C53  3A80               	xorlw	128
  5662  0C54  00C6               	movwf	(??_main+4)^(0+256)
  5663  0C55  307F               	movlw	127
  5664  0C56  0246               	subwf	(??_main+4)^(0+256),w
  5665  0C57  1D03               	skipz
  5666  0C58  2C5B               	goto	u8045
  5667  0C59  30FD               	movlw	253
  5668  0C5A  0244               	subwf	(??_main+2)^(0+256),w
  5669  0C5B                     u8045:	
  5670  0C5B  1803               	skipnc
  5671  0C5C  2CAF               	goto	l7259
  5672  0C5D                     l7253:	
  5673                           
  5674                           ;main.c: 142: knob1_prev = knob_1_pos;
  5675  0C5D  0023               	movlb	3	; select bank3
  5676  0C5E  084A               	movf	(_knob_1_pos+1)^(0+384),w
  5677  0C5F  0022               	movlb	2	; select bank2
  5678  0C60  00E2               	movwf	(_knob1_prev+1)^(0+256)	;volatile
  5679  0C61  0023               	movlb	3	; select bank3
  5680  0C62  0849               	movf	_knob_1_pos^(0+384),w
  5681  0C63  0022               	movlb	2	; select bank2
  5682  0C64  00E1               	movwf	_knob1_prev^(0+256)	;volatile
  5683                           
  5684                           ;main.c: 143: baseline_delay_time = (int)map(knob1_prev, 0, 1023, 1172, 200);
  5685  0C65  3000               	movlw	0
  5686  0C66  0021               	movlb	1	; select bank1
  5687  0C67  00E1               	movwf	map@out_max^(0+128)
  5688  0C68  3048               	movlw	72
  5689  0C69  00E2               	movwf	(map@out_max+1)^(0+128)
  5690  0C6A  3043               	movlw	67
  5691  0C6B  00E3               	movwf	(map@out_max+2)^(0+128)
  5692  0C6C  3080               	movlw	128
  5693  0C6D  00DE               	movwf	map@out_min^(0+128)
  5694  0C6E  3092               	movlw	146
  5695  0C6F  00DF               	movwf	(map@out_min+1)^(0+128)
  5696  0C70  3044               	movlw	68
  5697  0C71  00E0               	movwf	(map@out_min+2)^(0+128)
  5698  0C72  30C0               	movlw	192
  5699  0C73  00DB               	movwf	map@in_max^(0+128)
  5700  0C74  307F               	movlw	127
  5701  0C75  00DC               	movwf	(map@in_max+1)^(0+128)
  5702  0C76  3044               	movlw	68
  5703  0C77  00DD               	movwf	(map@in_max+2)^(0+128)
  5704  0C78  3000               	movlw	0
  5705  0C79  00D8               	movwf	map@in_min^(0+128)
  5706  0C7A  3000               	movlw	0
  5707  0C7B  00D9               	movwf	(map@in_min+1)^(0+128)
  5708  0C7C  3000               	movlw	0
  5709  0C7D  00DA               	movwf	(map@in_min+2)^(0+128)
  5710  0C7E  0022               	movlb	2	; select bank2
  5711  0C7F  0862               	movf	(_knob1_prev+1)^(0+256),w	;volatile
  5712  0C80  0021               	movlb	1	; select bank1
  5713  0C81  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5714  0C82  0022               	movlb	2	; select bank2
  5715  0C83  0861               	movf	_knob1_prev^(0+256),w	;volatile
  5716  0C84  0021               	movlb	1	; select bank1
  5717  0C85  00A8               	movwf	___awtoft@c^(0+128)
  5718  0C86  319D  2531  318B   	fcall	___awtoft
  5719  0C89  0021               	movlb	1	; select bank1
  5720  0C8A  0828               	movf	?___awtoft^(0+128),w
  5721  0C8B  00D5               	movwf	map@x^(0+128)
  5722  0C8C  0829               	movf	(?___awtoft+1)^(0+128),w
  5723  0C8D  00D6               	movwf	(map@x+1)^(0+128)
  5724  0C8E  082A               	movf	(?___awtoft+2)^(0+128),w
  5725  0C8F  00D7               	movwf	(map@x+2)^(0+128)
  5726  0C90  3196  262D  318B   	fcall	_map
  5727  0C93  0021               	movlb	1	; select bank1
  5728  0C94  0855               	movf	?_map^(0+128),w
  5729  0C95  00E7               	movwf	___fttol@f1^(0+128)
  5730  0C96  0856               	movf	(?_map+1)^(0+128),w
  5731  0C97  00E8               	movwf	(___fttol@f1+1)^(0+128)
  5732  0C98  0857               	movf	(?_map+2)^(0+128),w
  5733  0C99  00E9               	movwf	(___fttol@f1+2)^(0+128)
  5734  0C9A  3196  26B8  318B   	fcall	___fttol
  5735  0C9D  0021               	movlb	1	; select bank1
  5736  0C9E  0867               	movf	?___fttol^(0+128),w
  5737  0C9F  0020               	movlb	0	; select bank0
  5738  0CA0  00C5               	movwf	_baseline_delay_time	;volatile
  5739  0CA1  0021               	movlb	1	; select bank1
  5740  0CA2  0868               	movf	(?___fttol^(0+128)+1),w
  5741  0CA3  0020               	movlb	0	; select bank0
  5742  0CA4  00C6               	movwf	_baseline_delay_time+1	;volatile
  5743  0CA5  0D89               	rlf	9,f
  5744  0CA6  3B89               	subwfb	9,f
  5745  0CA7  0989               	comf	9,f
  5746  0CA8  00C7               	movwf	_baseline_delay_time+2	;volatile
  5747  0CA9  00C8               	movwf	_baseline_delay_time+3	;volatile
  5748                           
  5749                           ;main.c: 144: delay_time_changed = 1;
  5750  0CAA  3001               	movlw	1
  5751  0CAB  0023               	movlb	3	; select bank3
  5752  0CAC  00E0               	movwf	_delay_time_changed^(0+384)
  5753  0CAD  3000               	movlw	0
  5754  0CAE  00E1               	movwf	(_delay_time_changed^(0+384)+1)
  5755  0CAF                     l7259:	
  5756                           
  5757                           ;main.c: 146: }
  5758                           ;main.c: 156: if (knob_2_pos - knob2_prev >= 4 || knob_2_pos - knob2_prev <= -4) {
  5759  0CAF  0022               	movlb	2	; select bank2
  5760  0CB0  0963               	comf	_knob2_prev^(0+256),w	;volatile
  5761  0CB1  00C2               	movwf	??_main^(0+256)
  5762  0CB2  0964               	comf	(_knob2_prev+1)^(0+256),w	;volatile
  5763  0CB3  00C3               	movwf	(??_main^(0+256)+1)
  5764  0CB4  0AC2               	incf	??_main^(0+256),f
  5765  0CB5  1903               	skipnz
  5766  0CB6  0AC3               	incf	(??_main^(0+256)+1),f
  5767  0CB7  0023               	movlb	3	; select bank3
  5768  0CB8  084B               	movf	_knob_2_pos^(0+384),w
  5769  0CB9  0022               	movlb	2	; select bank2
  5770  0CBA  0742               	addwf	??_main^(0+256),w
  5771  0CBB  00C4               	movwf	(??_main+2)^(0+256)
  5772  0CBC  0023               	movlb	3	; select bank3
  5773  0CBD  084C               	movf	(_knob_2_pos+1)^(0+384),w
  5774  0CBE  0022               	movlb	2	; select bank2
  5775  0CBF  3D43               	addwfc	(??_main+1)^(0+256),w
  5776  0CC0  00C5               	movwf	(??_main+3)^(0+256)
  5777  0CC1  0845               	movf	(??_main+3)^(0+256),w
  5778  0CC2  3A80               	xorlw	128
  5779  0CC3  00C6               	movwf	(??_main+4)^(0+256)
  5780  0CC4  3080               	movlw	128
  5781  0CC5  0246               	subwf	(??_main+4)^(0+256),w
  5782  0CC6  1D03               	skipz
  5783  0CC7  2CCA               	goto	u8055
  5784  0CC8  3004               	movlw	4
  5785  0CC9  0244               	subwf	(??_main+2)^(0+256),w
  5786  0CCA                     u8055:	
  5787  0CCA  1803               	skipnc
  5788  0CCB  2CE9               	goto	l7263
  5789  0CCC  0022               	movlb	2	; select bank2
  5790  0CCD  0963               	comf	_knob2_prev^(0+256),w	;volatile
  5791  0CCE  00C2               	movwf	??_main^(0+256)
  5792  0CCF  0964               	comf	(_knob2_prev+1)^(0+256),w	;volatile
  5793  0CD0  00C3               	movwf	(??_main^(0+256)+1)
  5794  0CD1  0AC2               	incf	??_main^(0+256),f
  5795  0CD2  1903               	skipnz
  5796  0CD3  0AC3               	incf	(??_main^(0+256)+1),f
  5797  0CD4  0023               	movlb	3	; select bank3
  5798  0CD5  084B               	movf	_knob_2_pos^(0+384),w
  5799  0CD6  0022               	movlb	2	; select bank2
  5800  0CD7  0742               	addwf	??_main^(0+256),w
  5801  0CD8  00C4               	movwf	(??_main+2)^(0+256)
  5802  0CD9  0023               	movlb	3	; select bank3
  5803  0CDA  084C               	movf	(_knob_2_pos+1)^(0+384),w
  5804  0CDB  0022               	movlb	2	; select bank2
  5805  0CDC  3D43               	addwfc	(??_main+1)^(0+256),w
  5806  0CDD  00C5               	movwf	(??_main+3)^(0+256)
  5807  0CDE  0845               	movf	(??_main+3)^(0+256),w
  5808  0CDF  3A80               	xorlw	128
  5809  0CE0  00C6               	movwf	(??_main+4)^(0+256)
  5810  0CE1  307F               	movlw	127
  5811  0CE2  0246               	subwf	(??_main+4)^(0+256),w
  5812  0CE3  1D03               	skipz
  5813  0CE4  2CE7               	goto	u8065
  5814  0CE5  30FD               	movlw	253
  5815  0CE6  0244               	subwf	(??_main+2)^(0+256),w
  5816  0CE7                     u8065:	
  5817  0CE7  1803               	skipnc
  5818  0CE8  2D57               	goto	l7271
  5819  0CE9                     l7263:	
  5820                           
  5821                           ;main.c: 157: knob2_prev = knob_2_pos;
  5822  0CE9  0023               	movlb	3	; select bank3
  5823  0CEA  084C               	movf	(_knob_2_pos+1)^(0+384),w
  5824  0CEB  0022               	movlb	2	; select bank2
  5825  0CEC  00E4               	movwf	(_knob2_prev+1)^(0+256)	;volatile
  5826  0CED  0023               	movlb	3	; select bank3
  5827  0CEE  084B               	movf	_knob_2_pos^(0+384),w
  5828  0CEF  0022               	movlb	2	; select bank2
  5829  0CF0  00E3               	movwf	_knob2_prev^(0+256)	;volatile
  5830                           
  5831                           ;main.c: 158: int i = (int)map(knob2_prev, 0, 1023, 0, 39);
  5832  0CF1  3000               	movlw	0
  5833  0CF2  0021               	movlb	1	; select bank1
  5834  0CF3  00E1               	movwf	map@out_max^(0+128)
  5835  0CF4  301C               	movlw	28
  5836  0CF5  00E2               	movwf	(map@out_max+1)^(0+128)
  5837  0CF6  3042               	movlw	66
  5838  0CF7  00E3               	movwf	(map@out_max+2)^(0+128)
  5839  0CF8  3000               	movlw	0
  5840  0CF9  00DE               	movwf	map@out_min^(0+128)
  5841  0CFA  3000               	movlw	0
  5842  0CFB  00DF               	movwf	(map@out_min+1)^(0+128)
  5843  0CFC  3000               	movlw	0
  5844  0CFD  00E0               	movwf	(map@out_min+2)^(0+128)
  5845  0CFE  30C0               	movlw	192
  5846  0CFF  00DB               	movwf	map@in_max^(0+128)
  5847  0D00  307F               	movlw	127
  5848  0D01  00DC               	movwf	(map@in_max+1)^(0+128)
  5849  0D02  3044               	movlw	68
  5850  0D03  00DD               	movwf	(map@in_max+2)^(0+128)
  5851  0D04  3000               	movlw	0
  5852  0D05  00D8               	movwf	map@in_min^(0+128)
  5853  0D06  3000               	movlw	0
  5854  0D07  00D9               	movwf	(map@in_min+1)^(0+128)
  5855  0D08  3000               	movlw	0
  5856  0D09  00DA               	movwf	(map@in_min+2)^(0+128)
  5857  0D0A  0022               	movlb	2	; select bank2
  5858  0D0B  0864               	movf	(_knob2_prev+1)^(0+256),w	;volatile
  5859  0D0C  0021               	movlb	1	; select bank1
  5860  0D0D  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5861  0D0E  0022               	movlb	2	; select bank2
  5862  0D0F  0863               	movf	_knob2_prev^(0+256),w	;volatile
  5863  0D10  0021               	movlb	1	; select bank1
  5864  0D11  00A8               	movwf	___awtoft@c^(0+128)
  5865  0D12  319D  2531  318B   	fcall	___awtoft
  5866  0D15  0021               	movlb	1	; select bank1
  5867  0D16  0828               	movf	?___awtoft^(0+128),w
  5868  0D17  00D5               	movwf	map@x^(0+128)
  5869  0D18  0829               	movf	(?___awtoft+1)^(0+128),w
  5870  0D19  00D6               	movwf	(map@x+1)^(0+128)
  5871  0D1A  082A               	movf	(?___awtoft+2)^(0+128),w
  5872  0D1B  00D7               	movwf	(map@x+2)^(0+128)
  5873  0D1C  3196  262D  318B   	fcall	_map
  5874  0D1F  0021               	movlb	1	; select bank1
  5875  0D20  0855               	movf	?_map^(0+128),w
  5876  0D21  00E7               	movwf	___fttol@f1^(0+128)
  5877  0D22  0856               	movf	(?_map+1)^(0+128),w
  5878  0D23  00E8               	movwf	(___fttol@f1+1)^(0+128)
  5879  0D24  0857               	movf	(?_map+2)^(0+128),w
  5880  0D25  00E9               	movwf	(___fttol@f1+2)^(0+128)
  5881  0D26  3196  26B8  318B   	fcall	___fttol
  5882  0D29  0021               	movlb	1	; select bank1
  5883  0D2A  0868               	movf	(?___fttol^(0+128)+1),w
  5884  0D2B  0024               	movlb	4	; select bank4
  5885  0D2C  00DD               	movwf	(main@i+1)^(0+512)
  5886  0D2D  0021               	movlb	1	; select bank1
  5887  0D2E  0867               	movf	?___fttol^(0+128),w
  5888  0D2F  0024               	movlb	4	; select bank4
  5889  0D30  00DC               	movwf	main@i^(0+512)
  5890                           
  5891                           ;main.c: 159: CCPR2 = (int)B25k[B25kLength - 1 - i];
  5892  0D31  085C               	movf	main@i^(0+512),w
  5893  0D32  3E01               	addlw	1
  5894  0D33  3AFF               	xorlw	255
  5895  0D34  3E01               	addlw	1
  5896  0D35  0023               	movlb	3	; select bank3
  5897  0D36  076C               	addwf	_B25kLength^(0+384),w
  5898  0D37  3E20               	addlw	(low (_B25k| (0+512)))& (0+255)
  5899  0D38  0086               	movwf	6
  5900  0D39  3002               	movlw	2	; select bank4/5
  5901  0D3A  0087               	movwf	7
  5902  0D3B  0801               	movf	1,w
  5903  0D3C  0022               	movlb	2	; select bank2
  5904  0D3D  00C2               	movwf	??_main^(0+256)
  5905  0D3E  01C3               	clrf	(??_main^(0+256)+1)
  5906  0D3F  0842               	movf	??_main^(0+256),w
  5907  0D40  0025               	movlb	5	; select bank5
  5908  0D41  0098               	movwf	24	;volatile
  5909  0D42  0022               	movlb	2	; select bank2
  5910  0D43  0843               	movf	(??_main+1)^(0+256),w
  5911  0D44  0025               	movlb	5	; select bank5
  5912  0D45  0099               	movwf	25	;volatile
  5913                           
  5914                           ;main.c: 160: CCPR3 = (int)B25k[i];
  5915  0D46  0024               	movlb	4	; select bank4
  5916  0D47  085C               	movf	main@i^(0+512),w
  5917  0D48  3E20               	addlw	(low (_B25k| (0+512)))& (0+255)
  5918  0D49  0086               	movwf	6
  5919  0D4A  3002               	movlw	2	; select bank4/5
  5920  0D4B  0087               	movwf	7
  5921  0D4C  0801               	movf	1,w
  5922  0D4D  0022               	movlb	2	; select bank2
  5923  0D4E  00C2               	movwf	??_main^(0+256)
  5924  0D4F  01C3               	clrf	(??_main^(0+256)+1)
  5925  0D50  0842               	movf	??_main^(0+256),w
  5926  0D51  0026               	movlb	6	; select bank6
  5927  0D52  0091               	movwf	17	;volatile
  5928  0D53  0022               	movlb	2	; select bank2
  5929  0D54  0843               	movf	(??_main+1)^(0+256),w
  5930  0D55  0026               	movlb	6	; select bank6
  5931  0D56  0092               	movwf	18	;volatile
  5932  0D57                     l7271:	
  5933                           
  5934                           ;main.c: 161: }
  5935                           ;main.c: 172: if (feedback_state == 1) {
  5936  0D57  0022               	movlb	2	; select bank2
  5937  0D58  036C               	decf	_feedback_state^(0+256),w	;volatile
  5938  0D59  1D03               	btfss	3,2
  5939  0D5A  2DBC               	goto	l7285
  5940                           
  5941                           ;main.c: 173: if (knob3_prev != 0) {
  5942  0D5B  0865               	movf	_knob3_prev^(0+256),w	;volatile
  5943  0D5C  0466               	iorwf	(_knob3_prev+1)^(0+256),w	;volatile
  5944  0D5D  1903               	btfsc	3,2
  5945  0D5E  2E68               	goto	l7299
  5946                           
  5947                           ;main.c: 174: knob3_prev = 0;
  5948  0D5F  01E5               	clrf	_knob3_prev^(0+256)	;volatile
  5949  0D60  01E6               	clrf	(_knob3_prev+1)^(0+256)	;volatile
  5950                           
  5951                           ;main.c: 175: feedbackTriggered = 1;
  5952  0D61  0023               	movlb	3	; select bank3
  5953  0D62  01DB               	clrf	_feedbackTriggered^(0+384)
  5954  0D63  0ADB               	incf	_feedbackTriggered^(0+384),f
  5955                           
  5956                           ;main.c: 177: int i = (int) map(knob3_prev, 0, 1023, 25, 0);
  5957  0D64  3000               	movlw	0
  5958  0D65  0021               	movlb	1	; select bank1
  5959  0D66  00E1               	movwf	map@out_max^(0+128)
  5960  0D67  3000               	movlw	0
  5961  0D68  00E2               	movwf	(map@out_max+1)^(0+128)
  5962  0D69  3000               	movlw	0
  5963  0D6A  00E3               	movwf	(map@out_max+2)^(0+128)
  5964  0D6B  3000               	movlw	0
  5965  0D6C  00DE               	movwf	map@out_min^(0+128)
  5966  0D6D  30C8               	movlw	200
  5967  0D6E  00DF               	movwf	(map@out_min+1)^(0+128)
  5968  0D6F  3041               	movlw	65
  5969  0D70  00E0               	movwf	(map@out_min+2)^(0+128)
  5970  0D71  30C0               	movlw	192
  5971  0D72  00DB               	movwf	map@in_max^(0+128)
  5972  0D73  307F               	movlw	127
  5973  0D74  00DC               	movwf	(map@in_max+1)^(0+128)
  5974  0D75  3044               	movlw	68
  5975  0D76  00DD               	movwf	(map@in_max+2)^(0+128)
  5976  0D77  3000               	movlw	0
  5977  0D78  00D8               	movwf	map@in_min^(0+128)
  5978  0D79  3000               	movlw	0
  5979  0D7A  00D9               	movwf	(map@in_min+1)^(0+128)
  5980  0D7B  3000               	movlw	0
  5981  0D7C  00DA               	movwf	(map@in_min+2)^(0+128)
  5982  0D7D  0022               	movlb	2	; select bank2
  5983  0D7E  0866               	movf	(_knob3_prev+1)^(0+256),w	;volatile
  5984  0D7F  0021               	movlb	1	; select bank1
  5985  0D80  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5986  0D81  0022               	movlb	2	; select bank2
  5987  0D82  0865               	movf	_knob3_prev^(0+256),w	;volatile
  5988  0D83  0021               	movlb	1	; select bank1
  5989  0D84  00A8               	movwf	___awtoft@c^(0+128)
  5990  0D85  319D  2531  318B   	fcall	___awtoft
  5991  0D88  0021               	movlb	1	; select bank1
  5992  0D89  0828               	movf	?___awtoft^(0+128),w
  5993  0D8A  00D5               	movwf	map@x^(0+128)
  5994  0D8B  0829               	movf	(?___awtoft+1)^(0+128),w
  5995  0D8C  00D6               	movwf	(map@x+1)^(0+128)
  5996  0D8D  082A               	movf	(?___awtoft+2)^(0+128),w
  5997  0D8E  00D7               	movwf	(map@x+2)^(0+128)
  5998  0D8F  3196  262D  318B   	fcall	_map
  5999  0D92  0021               	movlb	1	; select bank1
  6000  0D93  0855               	movf	?_map^(0+128),w
  6001  0D94  00E7               	movwf	___fttol@f1^(0+128)
  6002  0D95  0856               	movf	(?_map+1)^(0+128),w
  6003  0D96  00E8               	movwf	(___fttol@f1+1)^(0+128)
  6004  0D97  0857               	movf	(?_map+2)^(0+128),w
  6005  0D98  00E9               	movwf	(___fttol@f1+2)^(0+128)
  6006  0D99  3196  26B8  318B   	fcall	___fttol
  6007  0D9C  0021               	movlb	1	; select bank1
  6008  0D9D  0868               	movf	(?___fttol^(0+128)+1),w
  6009  0D9E  0024               	movlb	4	; select bank4
  6010  0D9F  00DF               	movwf	(main@i_404+1)^(0+512)
  6011  0DA0  0021               	movlb	1	; select bank1
  6012  0DA1  0867               	movf	?___fttol^(0+128),w
  6013  0DA2  0024               	movlb	4	; select bank4
  6014  0DA3  00DE               	movwf	main@i_404^(0+512)
  6015                           
  6016                           ;main.c: 178: CCPR4 = (int) B25k[B25kLength - 1 - i];
  6017  0DA4  085E               	movf	main@i_404^(0+512),w
  6018  0DA5  3E01               	addlw	1
  6019  0DA6  3AFF               	xorlw	255
  6020  0DA7  3E01               	addlw	1
  6021  0DA8  0023               	movlb	3	; select bank3
  6022  0DA9  076C               	addwf	_B25kLength^(0+384),w
  6023  0DAA  3E20               	addlw	(low (_B25k| (0+512)))& (0+255)
  6024  0DAB  0086               	movwf	6
  6025  0DAC  3002               	movlw	2	; select bank4/5
  6026  0DAD  0087               	movwf	7
  6027  0DAE  0801               	movf	1,w
  6028  0DAF  0022               	movlb	2	; select bank2
  6029  0DB0  00C2               	movwf	??_main^(0+256)
  6030  0DB1  01C3               	clrf	(??_main^(0+256)+1)
  6031  0DB2  0842               	movf	??_main^(0+256),w
  6032  0DB3  0026               	movlb	6	; select bank6
  6033  0DB4  0098               	movwf	24	;volatile
  6034  0DB5  0022               	movlb	2	; select bank2
  6035  0DB6  0843               	movf	(??_main+1)^(0+256),w
  6036  0DB7  0026               	movlb	6	; select bank6
  6037  0DB8  0099               	movwf	25	;volatile
  6038                           
  6039                           ;main.c: 179: CCPR5 = (int) B25k[i];
  6040  0DB9  0024               	movlb	4	; select bank4
  6041  0DBA  085E               	movf	main@i_404^(0+512),w
  6042  0DBB  2E59               	goto	L1
  6043  0DBC                     l7285:	
  6044                           ;main.c: 180: }
  6045                           ;main.c: 181: } else {
  6046                           
  6047                           
  6048                           ;main.c: 182: if ((knob_3_pos - knob3_prev >= 4 || knob_3_pos - knob3_prev <= -4) || fee
      +                          dbackTriggered == 1) {
  6049  0DBC  0022               	movlb	2	; select bank2
  6050  0DBD  0965               	comf	_knob3_prev^(0+256),w	;volatile
  6051  0DBE  00C2               	movwf	??_main^(0+256)
  6052  0DBF  0966               	comf	(_knob3_prev+1)^(0+256),w	;volatile
  6053  0DC0  00C3               	movwf	(??_main^(0+256)+1)
  6054  0DC1  0AC2               	incf	??_main^(0+256),f
  6055  0DC2  1903               	skipnz
  6056  0DC3  0AC3               	incf	(??_main^(0+256)+1),f
  6057  0DC4  0023               	movlb	3	; select bank3
  6058  0DC5  084D               	movf	_knob_3_pos^(0+384),w
  6059  0DC6  0022               	movlb	2	; select bank2
  6060  0DC7  0742               	addwf	??_main^(0+256),w
  6061  0DC8  00C4               	movwf	(??_main+2)^(0+256)
  6062  0DC9  0023               	movlb	3	; select bank3
  6063  0DCA  084E               	movf	(_knob_3_pos+1)^(0+384),w
  6064  0DCB  0022               	movlb	2	; select bank2
  6065  0DCC  3D43               	addwfc	(??_main+1)^(0+256),w
  6066  0DCD  00C5               	movwf	(??_main+3)^(0+256)
  6067  0DCE  0845               	movf	(??_main+3)^(0+256),w
  6068  0DCF  3A80               	xorlw	128
  6069  0DD0  00C6               	movwf	(??_main+4)^(0+256)
  6070  0DD1  3080               	movlw	128
  6071  0DD2  0246               	subwf	(??_main+4)^(0+256),w
  6072  0DD3  1D03               	skipz
  6073  0DD4  2DD7               	goto	u8095
  6074  0DD5  3004               	movlw	4
  6075  0DD6  0244               	subwf	(??_main+2)^(0+256),w
  6076  0DD7                     u8095:	
  6077  0DD7  1803               	skipnc
  6078  0DD8  2DFA               	goto	l7291
  6079  0DD9  0022               	movlb	2	; select bank2
  6080  0DDA  0965               	comf	_knob3_prev^(0+256),w	;volatile
  6081  0DDB  00C2               	movwf	??_main^(0+256)
  6082  0DDC  0966               	comf	(_knob3_prev+1)^(0+256),w	;volatile
  6083  0DDD  00C3               	movwf	(??_main^(0+256)+1)
  6084  0DDE  0AC2               	incf	??_main^(0+256),f
  6085  0DDF  1903               	skipnz
  6086  0DE0  0AC3               	incf	(??_main^(0+256)+1),f
  6087  0DE1  0023               	movlb	3	; select bank3
  6088  0DE2  084D               	movf	_knob_3_pos^(0+384),w
  6089  0DE3  0022               	movlb	2	; select bank2
  6090  0DE4  0742               	addwf	??_main^(0+256),w
  6091  0DE5  00C4               	movwf	(??_main+2)^(0+256)
  6092  0DE6  0023               	movlb	3	; select bank3
  6093  0DE7  084E               	movf	(_knob_3_pos+1)^(0+384),w
  6094  0DE8  0022               	movlb	2	; select bank2
  6095  0DE9  3D43               	addwfc	(??_main+1)^(0+256),w
  6096  0DEA  00C5               	movwf	(??_main+3)^(0+256)
  6097  0DEB  0845               	movf	(??_main+3)^(0+256),w
  6098  0DEC  3A80               	xorlw	128
  6099  0DED  00C6               	movwf	(??_main+4)^(0+256)
  6100  0DEE  307F               	movlw	127
  6101  0DEF  0246               	subwf	(??_main+4)^(0+256),w
  6102  0DF0  1D03               	skipz
  6103  0DF1  2DF4               	goto	u8105
  6104  0DF2  30FD               	movlw	253
  6105  0DF3  0244               	subwf	(??_main+2)^(0+256),w
  6106  0DF4                     u8105:	
  6107  0DF4  1C03               	skipc
  6108  0DF5  2DFA               	goto	l7291
  6109  0DF6  0023               	movlb	3	; select bank3
  6110  0DF7  035B               	decf	_feedbackTriggered^(0+384),w
  6111  0DF8  1D03               	btfss	3,2
  6112  0DF9  2E68               	goto	l7299
  6113  0DFA                     l7291:	
  6114                           
  6115                           ;main.c: 183: knob3_prev = knob_3_pos;
  6116  0DFA  0023               	movlb	3	; select bank3
  6117  0DFB  084E               	movf	(_knob_3_pos+1)^(0+384),w
  6118  0DFC  0022               	movlb	2	; select bank2
  6119  0DFD  00E6               	movwf	(_knob3_prev+1)^(0+256)	;volatile
  6120  0DFE  0023               	movlb	3	; select bank3
  6121  0DFF  084D               	movf	_knob_3_pos^(0+384),w
  6122  0E00  0022               	movlb	2	; select bank2
  6123  0E01  00E5               	movwf	_knob3_prev^(0+256)	;volatile
  6124                           
  6125                           ;main.c: 184: int i = (int) map(knob3_prev, 0, 1023, 18, 0);
  6126  0E02  3000               	movlw	0
  6127  0E03  0021               	movlb	1	; select bank1
  6128  0E04  00E1               	movwf	map@out_max^(0+128)
  6129  0E05  3000               	movlw	0
  6130  0E06  00E2               	movwf	(map@out_max+1)^(0+128)
  6131  0E07  3000               	movlw	0
  6132  0E08  00E3               	movwf	(map@out_max+2)^(0+128)
  6133  0E09  3000               	movlw	0
  6134  0E0A  00DE               	movwf	map@out_min^(0+128)
  6135  0E0B  3090               	movlw	144
  6136  0E0C  00DF               	movwf	(map@out_min+1)^(0+128)
  6137  0E0D  3041               	movlw	65
  6138  0E0E  00E0               	movwf	(map@out_min+2)^(0+128)
  6139  0E0F  30C0               	movlw	192
  6140  0E10  00DB               	movwf	map@in_max^(0+128)
  6141  0E11  307F               	movlw	127
  6142  0E12  00DC               	movwf	(map@in_max+1)^(0+128)
  6143  0E13  3044               	movlw	68
  6144  0E14  00DD               	movwf	(map@in_max+2)^(0+128)
  6145  0E15  3000               	movlw	0
  6146  0E16  00D8               	movwf	map@in_min^(0+128)
  6147  0E17  3000               	movlw	0
  6148  0E18  00D9               	movwf	(map@in_min+1)^(0+128)
  6149  0E19  3000               	movlw	0
  6150  0E1A  00DA               	movwf	(map@in_min+2)^(0+128)
  6151  0E1B  0022               	movlb	2	; select bank2
  6152  0E1C  0866               	movf	(_knob3_prev+1)^(0+256),w	;volatile
  6153  0E1D  0021               	movlb	1	; select bank1
  6154  0E1E  00A9               	movwf	(___awtoft@c+1)^(0+128)
  6155  0E1F  0022               	movlb	2	; select bank2
  6156  0E20  0865               	movf	_knob3_prev^(0+256),w	;volatile
  6157  0E21  0021               	movlb	1	; select bank1
  6158  0E22  00A8               	movwf	___awtoft@c^(0+128)
  6159  0E23  319D  2531  318B   	fcall	___awtoft
  6160  0E26  0021               	movlb	1	; select bank1
  6161  0E27  0828               	movf	?___awtoft^(0+128),w
  6162  0E28  00D5               	movwf	map@x^(0+128)
  6163  0E29  0829               	movf	(?___awtoft+1)^(0+128),w
  6164  0E2A  00D6               	movwf	(map@x+1)^(0+128)
  6165  0E2B  082A               	movf	(?___awtoft+2)^(0+128),w
  6166  0E2C  00D7               	movwf	(map@x+2)^(0+128)
  6167  0E2D  3196  262D  318B   	fcall	_map
  6168  0E30  0021               	movlb	1	; select bank1
  6169  0E31  0855               	movf	?_map^(0+128),w
  6170  0E32  00E7               	movwf	___fttol@f1^(0+128)
  6171  0E33  0856               	movf	(?_map+1)^(0+128),w
  6172  0E34  00E8               	movwf	(___fttol@f1+1)^(0+128)
  6173  0E35  0857               	movf	(?_map+2)^(0+128),w
  6174  0E36  00E9               	movwf	(___fttol@f1+2)^(0+128)
  6175  0E37  3196  26B8  318B   	fcall	___fttol
  6176  0E3A  0021               	movlb	1	; select bank1
  6177  0E3B  0868               	movf	(?___fttol^(0+128)+1),w
  6178  0E3C  0024               	movlb	4	; select bank4
  6179  0E3D  00E1               	movwf	(main@i_405+1)^(0+512)
  6180  0E3E  0021               	movlb	1	; select bank1
  6181  0E3F  0867               	movf	?___fttol^(0+128),w
  6182  0E40  0024               	movlb	4	; select bank4
  6183  0E41  00E0               	movwf	main@i_405^(0+512)
  6184                           
  6185                           ;main.c: 185: CCPR4 = (int) B25k[B25kLength - 1 - i];
  6186  0E42  0860               	movf	main@i_405^(0+512),w
  6187  0E43  3E01               	addlw	1
  6188  0E44  3AFF               	xorlw	255
  6189  0E45  3E01               	addlw	1
  6190  0E46  0023               	movlb	3	; select bank3
  6191  0E47  076C               	addwf	_B25kLength^(0+384),w
  6192  0E48  3E20               	addlw	(low (_B25k| (0+512)))& (0+255)
  6193  0E49  0086               	movwf	6
  6194  0E4A  3002               	movlw	2	; select bank4/5
  6195  0E4B  0087               	movwf	7
  6196  0E4C  0801               	movf	1,w
  6197  0E4D  0022               	movlb	2	; select bank2
  6198  0E4E  00C2               	movwf	??_main^(0+256)
  6199  0E4F  01C3               	clrf	(??_main^(0+256)+1)
  6200  0E50  0842               	movf	??_main^(0+256),w
  6201  0E51  0026               	movlb	6	; select bank6
  6202  0E52  0098               	movwf	24	;volatile
  6203  0E53  0022               	movlb	2	; select bank2
  6204  0E54  0843               	movf	(??_main+1)^(0+256),w
  6205  0E55  0026               	movlb	6	; select bank6
  6206  0E56  0099               	movwf	25	;volatile
  6207                           
  6208                           ;main.c: 186: CCPR5 = (int) B25k[i];
  6209  0E57  0024               	movlb	4	; select bank4
  6210  0E58  0860               	movf	main@i_405^(0+512),w
  6211  0E59                     L1:	
  6212  0E59  3E20               	addlw	(low (_B25k| (0+512)))& (0+255)
  6213  0E5A  0086               	movwf	6
  6214  0E5B  3002               	movlw	2	; select bank4/5
  6215  0E5C  0087               	movwf	7
  6216  0E5D  0801               	movf	1,w
  6217  0E5E  0022               	movlb	2	; select bank2
  6218  0E5F  00C2               	movwf	??_main^(0+256)
  6219  0E60  01C3               	clrf	(??_main^(0+256)+1)
  6220  0E61  0842               	movf	??_main^(0+256),w
  6221  0E62  0026               	movlb	6	; select bank6
  6222  0E63  009C               	movwf	28	;volatile
  6223  0E64  0022               	movlb	2	; select bank2
  6224  0E65  0843               	movf	(??_main+1)^(0+256),w
  6225  0E66  0026               	movlb	6	; select bank6
  6226  0E67  009D               	movwf	29	;volatile
  6227  0E68                     l7299:	
  6228                           
  6229                           ;main.c: 187: }
  6230                           ;main.c: 188: }
  6231                           ;main.c: 199: if (knob_4_pos - knob4_prev >= 4 || knob_4_pos - knob4_prev <= -4) {
  6232  0E68  0022               	movlb	2	; select bank2
  6233  0E69  0967               	comf	_knob4_prev^(0+256),w	;volatile
  6234  0E6A  00C2               	movwf	??_main^(0+256)
  6235  0E6B  0968               	comf	(_knob4_prev+1)^(0+256),w	;volatile
  6236  0E6C  00C3               	movwf	(??_main^(0+256)+1)
  6237  0E6D  0AC2               	incf	??_main^(0+256),f
  6238  0E6E  1903               	skipnz
  6239  0E6F  0AC3               	incf	(??_main^(0+256)+1),f
  6240  0E70  0023               	movlb	3	; select bank3
  6241  0E71  084F               	movf	_knob_4_pos^(0+384),w
  6242  0E72  0022               	movlb	2	; select bank2
  6243  0E73  0742               	addwf	??_main^(0+256),w
  6244  0E74  00C4               	movwf	(??_main+2)^(0+256)
  6245  0E75  0023               	movlb	3	; select bank3
  6246  0E76  0850               	movf	(_knob_4_pos+1)^(0+384),w
  6247  0E77  0022               	movlb	2	; select bank2
  6248  0E78  3D43               	addwfc	(??_main+1)^(0+256),w
  6249  0E79  00C5               	movwf	(??_main+3)^(0+256)
  6250  0E7A  0845               	movf	(??_main+3)^(0+256),w
  6251  0E7B  3A80               	xorlw	128
  6252  0E7C  00C6               	movwf	(??_main+4)^(0+256)
  6253  0E7D  3080               	movlw	128
  6254  0E7E  0246               	subwf	(??_main+4)^(0+256),w
  6255  0E7F  1D03               	skipz
  6256  0E80  2E83               	goto	u8125
  6257  0E81  3004               	movlw	4
  6258  0E82  0244               	subwf	(??_main+2)^(0+256),w
  6259  0E83                     u8125:	
  6260  0E83  1803               	skipnc
  6261  0E84  2EA2               	goto	l7303
  6262  0E85  0022               	movlb	2	; select bank2
  6263  0E86  0967               	comf	_knob4_prev^(0+256),w	;volatile
  6264  0E87  00C2               	movwf	??_main^(0+256)
  6265  0E88  0968               	comf	(_knob4_prev+1)^(0+256),w	;volatile
  6266  0E89  00C3               	movwf	(??_main^(0+256)+1)
  6267  0E8A  0AC2               	incf	??_main^(0+256),f
  6268  0E8B  1903               	skipnz
  6269  0E8C  0AC3               	incf	(??_main^(0+256)+1),f
  6270  0E8D  0023               	movlb	3	; select bank3
  6271  0E8E  084F               	movf	_knob_4_pos^(0+384),w
  6272  0E8F  0022               	movlb	2	; select bank2
  6273  0E90  0742               	addwf	??_main^(0+256),w
  6274  0E91  00C4               	movwf	(??_main+2)^(0+256)
  6275  0E92  0023               	movlb	3	; select bank3
  6276  0E93  0850               	movf	(_knob_4_pos+1)^(0+384),w
  6277  0E94  0022               	movlb	2	; select bank2
  6278  0E95  3D43               	addwfc	(??_main+1)^(0+256),w
  6279  0E96  00C5               	movwf	(??_main+3)^(0+256)
  6280  0E97  0845               	movf	(??_main+3)^(0+256),w
  6281  0E98  3A80               	xorlw	128
  6282  0E99  00C6               	movwf	(??_main+4)^(0+256)
  6283  0E9A  307F               	movlw	127
  6284  0E9B  0246               	subwf	(??_main+4)^(0+256),w
  6285  0E9C  1D03               	skipz
  6286  0E9D  2EA0               	goto	u8135
  6287  0E9E  30FD               	movlw	253
  6288  0E9F  0244               	subwf	(??_main+2)^(0+256),w
  6289  0EA0                     u8135:	
  6290  0EA0  1803               	skipnc
  6291  0EA1  2EEA               	goto	l7307
  6292  0EA2                     l7303:	
  6293                           
  6294                           ;main.c: 200: knob4_prev = knob_4_pos;
  6295  0EA2  0023               	movlb	3	; select bank3
  6296  0EA3  0850               	movf	(_knob_4_pos+1)^(0+384),w
  6297  0EA4  0022               	movlb	2	; select bank2
  6298  0EA5  00E8               	movwf	(_knob4_prev+1)^(0+256)	;volatile
  6299  0EA6  0023               	movlb	3	; select bank3
  6300  0EA7  084F               	movf	_knob_4_pos^(0+384),w
  6301  0EA8  0022               	movlb	2	; select bank2
  6302  0EA9  00E7               	movwf	_knob4_prev^(0+256)	;volatile
  6303                           
  6304                           ;main.c: 202: mod_delay_time = (int)map(knob4_prev, 0, 1023, 3, 47);
  6305  0EAA  3000               	movlw	0
  6306  0EAB  0021               	movlb	1	; select bank1
  6307  0EAC  00E1               	movwf	map@out_max^(0+128)
  6308  0EAD  303C               	movlw	60
  6309  0EAE  00E2               	movwf	(map@out_max+1)^(0+128)
  6310  0EAF  3042               	movlw	66
  6311  0EB0  00E3               	movwf	(map@out_max+2)^(0+128)
  6312  0EB1  3000               	movlw	0
  6313  0EB2  00DE               	movwf	map@out_min^(0+128)
  6314  0EB3  3040               	movlw	64
  6315  0EB4  00DF               	movwf	(map@out_min+1)^(0+128)
  6316  0EB5  3040               	movlw	64
  6317  0EB6  00E0               	movwf	(map@out_min+2)^(0+128)
  6318  0EB7  30C0               	movlw	192
  6319  0EB8  00DB               	movwf	map@in_max^(0+128)
  6320  0EB9  307F               	movlw	127
  6321  0EBA  00DC               	movwf	(map@in_max+1)^(0+128)
  6322  0EBB  3044               	movlw	68
  6323  0EBC  00DD               	movwf	(map@in_max+2)^(0+128)
  6324  0EBD  3000               	movlw	0
  6325  0EBE  00D8               	movwf	map@in_min^(0+128)
  6326  0EBF  3000               	movlw	0
  6327  0EC0  00D9               	movwf	(map@in_min+1)^(0+128)
  6328  0EC1  3000               	movlw	0
  6329  0EC2  00DA               	movwf	(map@in_min+2)^(0+128)
  6330  0EC3  0022               	movlb	2	; select bank2
  6331  0EC4  0868               	movf	(_knob4_prev+1)^(0+256),w	;volatile
  6332  0EC5  0021               	movlb	1	; select bank1
  6333  0EC6  00A9               	movwf	(___awtoft@c+1)^(0+128)
  6334  0EC7  0022               	movlb	2	; select bank2
  6335  0EC8  0867               	movf	_knob4_prev^(0+256),w	;volatile
  6336  0EC9  0021               	movlb	1	; select bank1
  6337  0ECA  00A8               	movwf	___awtoft@c^(0+128)
  6338  0ECB  319D  2531  318B   	fcall	___awtoft
  6339  0ECE  0021               	movlb	1	; select bank1
  6340  0ECF  0828               	movf	?___awtoft^(0+128),w
  6341  0ED0  00D5               	movwf	map@x^(0+128)
  6342  0ED1  0829               	movf	(?___awtoft+1)^(0+128),w
  6343  0ED2  00D6               	movwf	(map@x+1)^(0+128)
  6344  0ED3  082A               	movf	(?___awtoft+2)^(0+128),w
  6345  0ED4  00D7               	movwf	(map@x+2)^(0+128)
  6346  0ED5  3196  262D  318B   	fcall	_map
  6347  0ED8  0021               	movlb	1	; select bank1
  6348  0ED9  0855               	movf	?_map^(0+128),w
  6349  0EDA  00E7               	movwf	___fttol@f1^(0+128)
  6350  0EDB  0856               	movf	(?_map+1)^(0+128),w
  6351  0EDC  00E8               	movwf	(___fttol@f1+1)^(0+128)
  6352  0EDD  0857               	movf	(?_map+2)^(0+128),w
  6353  0EDE  00E9               	movwf	(___fttol@f1+2)^(0+128)
  6354  0EDF  3196  26B8  318B   	fcall	___fttol
  6355  0EE2  0021               	movlb	1	; select bank1
  6356  0EE3  0868               	movf	(?___fttol^(0+128)+1),w
  6357  0EE4  0023               	movlb	3	; select bank3
  6358  0EE5  00E3               	movwf	(_mod_delay_time+1)^(0+384)
  6359  0EE6  0021               	movlb	1	; select bank1
  6360  0EE7  0867               	movf	?___fttol^(0+128),w
  6361  0EE8  0023               	movlb	3	; select bank3
  6362  0EE9  00E2               	movwf	_mod_delay_time^(0+384)
  6363  0EEA                     l7307:	
  6364                           
  6365                           ;main.c: 203: }
  6366                           ;main.c: 211: if (knob_5_pos - knob5_prev >= 4 || knob_5_pos - knob5_prev <= -4) {
  6367  0EEA  0022               	movlb	2	; select bank2
  6368  0EEB  0969               	comf	_knob5_prev^(0+256),w	;volatile
  6369  0EEC  00C2               	movwf	??_main^(0+256)
  6370  0EED  096A               	comf	(_knob5_prev+1)^(0+256),w	;volatile
  6371  0EEE  00C3               	movwf	(??_main^(0+256)+1)
  6372  0EEF  0AC2               	incf	??_main^(0+256),f
  6373  0EF0  1903               	skipnz
  6374  0EF1  0AC3               	incf	(??_main^(0+256)+1),f
  6375  0EF2  0023               	movlb	3	; select bank3
  6376  0EF3  0851               	movf	_knob_5_pos^(0+384),w
  6377  0EF4  0022               	movlb	2	; select bank2
  6378  0EF5  0742               	addwf	??_main^(0+256),w
  6379  0EF6  00C4               	movwf	(??_main+2)^(0+256)
  6380  0EF7  0023               	movlb	3	; select bank3
  6381  0EF8  0852               	movf	(_knob_5_pos+1)^(0+384),w
  6382  0EF9  0022               	movlb	2	; select bank2
  6383  0EFA  3D43               	addwfc	(??_main+1)^(0+256),w
  6384  0EFB  00C5               	movwf	(??_main+3)^(0+256)
  6385  0EFC  0845               	movf	(??_main+3)^(0+256),w
  6386  0EFD  3A80               	xorlw	128
  6387  0EFE  00C6               	movwf	(??_main+4)^(0+256)
  6388  0EFF  3080               	movlw	128
  6389  0F00  0246               	subwf	(??_main+4)^(0+256),w
  6390  0F01  1D03               	skipz
  6391  0F02  2F05               	goto	u8145
  6392  0F03  3004               	movlw	4
  6393  0F04  0244               	subwf	(??_main+2)^(0+256),w
  6394  0F05                     u8145:	
  6395  0F05  1803               	skipnc
  6396  0F06  2F24               	goto	l7311
  6397  0F07  0022               	movlb	2	; select bank2
  6398  0F08  0969               	comf	_knob5_prev^(0+256),w	;volatile
  6399  0F09  00C2               	movwf	??_main^(0+256)
  6400  0F0A  096A               	comf	(_knob5_prev+1)^(0+256),w	;volatile
  6401  0F0B  00C3               	movwf	(??_main^(0+256)+1)
  6402  0F0C  0AC2               	incf	??_main^(0+256),f
  6403  0F0D  1903               	skipnz
  6404  0F0E  0AC3               	incf	(??_main^(0+256)+1),f
  6405  0F0F  0023               	movlb	3	; select bank3
  6406  0F10  0851               	movf	_knob_5_pos^(0+384),w
  6407  0F11  0022               	movlb	2	; select bank2
  6408  0F12  0742               	addwf	??_main^(0+256),w
  6409  0F13  00C4               	movwf	(??_main+2)^(0+256)
  6410  0F14  0023               	movlb	3	; select bank3
  6411  0F15  0852               	movf	(_knob_5_pos+1)^(0+384),w
  6412  0F16  0022               	movlb	2	; select bank2
  6413  0F17  3D43               	addwfc	(??_main+1)^(0+256),w
  6414  0F18  00C5               	movwf	(??_main+3)^(0+256)
  6415  0F19  0845               	movf	(??_main+3)^(0+256),w
  6416  0F1A  3A80               	xorlw	128
  6417  0F1B  00C6               	movwf	(??_main+4)^(0+256)
  6418  0F1C  307F               	movlw	127
  6419  0F1D  0246               	subwf	(??_main+4)^(0+256),w
  6420  0F1E  1D03               	skipz
  6421  0F1F  2F22               	goto	u8155
  6422  0F20  30FD               	movlw	253
  6423  0F21  0244               	subwf	(??_main+2)^(0+256),w
  6424  0F22                     u8155:	
  6425  0F22  1803               	skipnc
  6426  0F23  2F6C               	goto	l7315
  6427  0F24                     l7311:	
  6428                           
  6429                           ;main.c: 212: knob5_prev = knob_5_pos;
  6430  0F24  0023               	movlb	3	; select bank3
  6431  0F25  0852               	movf	(_knob_5_pos+1)^(0+384),w
  6432  0F26  0022               	movlb	2	; select bank2
  6433  0F27  00EA               	movwf	(_knob5_prev+1)^(0+256)	;volatile
  6434  0F28  0023               	movlb	3	; select bank3
  6435  0F29  0851               	movf	_knob_5_pos^(0+384),w
  6436  0F2A  0022               	movlb	2	; select bank2
  6437  0F2B  00E9               	movwf	_knob5_prev^(0+256)	;volatile
  6438                           
  6439                           ;main.c: 213: adjusted_pot_value = (int)map(knob5_prev, 0, 1023, 1275, 0);
  6440  0F2C  3000               	movlw	0
  6441  0F2D  0021               	movlb	1	; select bank1
  6442  0F2E  00E1               	movwf	map@out_max^(0+128)
  6443  0F2F  3000               	movlw	0
  6444  0F30  00E2               	movwf	(map@out_max+1)^(0+128)
  6445  0F31  3000               	movlw	0
  6446  0F32  00E3               	movwf	(map@out_max+2)^(0+128)
  6447  0F33  3060               	movlw	96
  6448  0F34  00DE               	movwf	map@out_min^(0+128)
  6449  0F35  309F               	movlw	159
  6450  0F36  00DF               	movwf	(map@out_min+1)^(0+128)
  6451  0F37  3044               	movlw	68
  6452  0F38  00E0               	movwf	(map@out_min+2)^(0+128)
  6453  0F39  30C0               	movlw	192
  6454  0F3A  00DB               	movwf	map@in_max^(0+128)
  6455  0F3B  307F               	movlw	127
  6456  0F3C  00DC               	movwf	(map@in_max+1)^(0+128)
  6457  0F3D  3044               	movlw	68
  6458  0F3E  00DD               	movwf	(map@in_max+2)^(0+128)
  6459  0F3F  3000               	movlw	0
  6460  0F40  00D8               	movwf	map@in_min^(0+128)
  6461  0F41  3000               	movlw	0
  6462  0F42  00D9               	movwf	(map@in_min+1)^(0+128)
  6463  0F43  3000               	movlw	0
  6464  0F44  00DA               	movwf	(map@in_min+2)^(0+128)
  6465  0F45  0022               	movlb	2	; select bank2
  6466  0F46  086A               	movf	(_knob5_prev+1)^(0+256),w	;volatile
  6467  0F47  0021               	movlb	1	; select bank1
  6468  0F48  00A9               	movwf	(___awtoft@c+1)^(0+128)
  6469  0F49  0022               	movlb	2	; select bank2
  6470  0F4A  0869               	movf	_knob5_prev^(0+256),w	;volatile
  6471  0F4B  0021               	movlb	1	; select bank1
  6472  0F4C  00A8               	movwf	___awtoft@c^(0+128)
  6473  0F4D  319D  2531  318B   	fcall	___awtoft
  6474  0F50  0021               	movlb	1	; select bank1
  6475  0F51  0828               	movf	?___awtoft^(0+128),w
  6476  0F52  00D5               	movwf	map@x^(0+128)
  6477  0F53  0829               	movf	(?___awtoft+1)^(0+128),w
  6478  0F54  00D6               	movwf	(map@x+1)^(0+128)
  6479  0F55  082A               	movf	(?___awtoft+2)^(0+128),w
  6480  0F56  00D7               	movwf	(map@x+2)^(0+128)
  6481  0F57  3196  262D  318B   	fcall	_map
  6482  0F5A  0021               	movlb	1	; select bank1
  6483  0F5B  0855               	movf	?_map^(0+128),w
  6484  0F5C  00E7               	movwf	___fttol@f1^(0+128)
  6485  0F5D  0856               	movf	(?_map+1)^(0+128),w
  6486  0F5E  00E8               	movwf	(___fttol@f1+1)^(0+128)
  6487  0F5F  0857               	movf	(?_map+2)^(0+128),w
  6488  0F60  00E9               	movwf	(___fttol@f1+2)^(0+128)
  6489  0F61  3196  26B8  318B   	fcall	___fttol
  6490  0F64  0021               	movlb	1	; select bank1
  6491  0F65  0868               	movf	(?___fttol^(0+128)+1),w
  6492  0F66  0023               	movlb	3	; select bank3
  6493  0F67  00BC               	movwf	(_adjusted_pot_value+1)^(0+384)
  6494  0F68  0021               	movlb	1	; select bank1
  6495  0F69  0867               	movf	?___fttol^(0+128),w
  6496  0F6A  0023               	movlb	3	; select bank3
  6497  0F6B  00BB               	movwf	_adjusted_pot_value^(0+384)
  6498  0F6C                     l7315:	
  6499                           
  6500                           ;main.c: 215: }
  6501                           ;main.c: 218: if (delay_time_changed == 1) {
  6502  0F6C  0023               	movlb	3	; select bank3
  6503  0F6D  0360               	decf	_delay_time_changed^(0+384),w
  6504  0F6E  0461               	iorwf	(_delay_time_changed+1)^(0+384),w
  6505  0F6F  1D03               	btfss	3,2
  6506  0F70  2BC8               	goto	l7223
  6507                           
  6508                           ;main.c: 219: delay_time = baseline_delay_time;
  6509  0F71  0020               	movlb	0	; select bank0
  6510  0F72  0848               	movf	_baseline_delay_time+3,w	;volatile
  6511  0F73  00CC               	movwf	_delay_time+3	;volatile
  6512  0F74  0847               	movf	_baseline_delay_time+2,w	;volatile
  6513  0F75  00CB               	movwf	_delay_time+2	;volatile
  6514  0F76  0846               	movf	_baseline_delay_time+1,w	;volatile
  6515  0F77  00CA               	movwf	_delay_time+1	;volatile
  6516  0F78  0845               	movf	_baseline_delay_time,w	;volatile
  6517  0F79  00C9               	movwf	_delay_time	;volatile
  6518                           
  6519                           ;main.c: 220: delay_time = set_subdivision(baseline_delay_time, top_push_state);
  6520  0F7A  0846               	movf	_baseline_delay_time+1,w	;volatile
  6521  0F7B  0022               	movlb	2	; select bank2
  6522  0F7C  00B7               	movwf	(set_subdivision@x+1)^(0+256)
  6523  0F7D  0020               	movlb	0	; select bank0
  6524  0F7E  0845               	movf	_baseline_delay_time,w	;volatile
  6525  0F7F  0022               	movlb	2	; select bank2
  6526  0F80  00B6               	movwf	set_subdivision@x^(0+256)
  6527  0F81  0020               	movlb	0	; select bank0
  6528  0F82  0852               	movf	_top_push_state+1,w
  6529  0F83  0022               	movlb	2	; select bank2
  6530  0F84  00B9               	movwf	(set_subdivision@y+1)^(0+256)
  6531  0F85  0020               	movlb	0	; select bank0
  6532  0F86  0851               	movf	_top_push_state,w
  6533  0F87  0022               	movlb	2	; select bank2
  6534  0F88  00B8               	movwf	set_subdivision@y^(0+256)
  6535  0F89  3189  210E  318B   	fcall	_set_subdivision
  6536  0F8C  0022               	movlb	2	; select bank2
  6537  0F8D  0836               	movf	?_set_subdivision^(0+256),w
  6538  0F8E  0020               	movlb	0	; select bank0
  6539  0F8F  00C9               	movwf	_delay_time	;volatile
  6540  0F90  0022               	movlb	2	; select bank2
  6541  0F91  0837               	movf	(?_set_subdivision+1)^(0+256),w
  6542  0F92  0020               	movlb	0	; select bank0
  6543  0F93  00CA               	movwf	_delay_time+1	;volatile
  6544  0F94  0D89               	rlf	9,f
  6545  0F95  3B89               	subwfb	9,f
  6546  0F96  0989               	comf	9,f
  6547  0F97  00CB               	movwf	_delay_time+2	;volatile
  6548  0F98  00CC               	movwf	_delay_time+3	;volatile
  6549                           
  6550                           ;main.c: 221: reset_sub_delay = 1;
  6551  0F99  3001               	movlw	1
  6552  0F9A  0023               	movlb	3	; select bank3
  6553  0F9B  00D5               	movwf	_reset_sub_delay^(0+384)
  6554  0F9C  3000               	movlw	0
  6555  0F9D  00D6               	movwf	(_reset_sub_delay^(0+384)+1)
  6556                           
  6557                           ;main.c: 222: delayfound = 0;
  6558  0F9E  01C5               	clrf	_delayfound^(0+384)
  6559  0F9F  01C6               	clrf	(_delayfound+1)^(0+384)
  6560                           
  6561                           ;main.c: 223: delay_counter = 0;
  6562  0FA0  0022               	movlb	2	; select bank2
  6563  0FA1  01D1               	clrf	_delay_counter^(0+256)	;volatile
  6564  0FA2  01D2               	clrf	(_delay_counter+1)^(0+256)	;volatile
  6565  0FA3                     l7333:	
  6566                           ;main.c: 225: while (delayfound == 0) {
  6567                           
  6568  0FA3  0023               	movlb	3	; select bank3
  6569  0FA4  0845               	movf	_delayfound^(0+384),w
  6570  0FA5  0446               	iorwf	(_delayfound+1)^(0+384),w
  6571  0FA6  1D03               	btfss	3,2
  6572  0FA7  2FFD               	goto	l7335
  6573                           
  6574                           ;main.c: 226: if (delayArray[delay_counter] <= delay_time * 2) {
  6575  0FA8  0022               	movlb	2	; select bank2
  6576  0FA9  0852               	movf	(_delay_counter+1)^(0+256),w	;volatile
  6577  0FAA  00C3               	movwf	(??_main^(0+256)+1)
  6578  0FAB  0851               	movf	_delay_counter^(0+256),w	;volatile
  6579  0FAC  00C2               	movwf	??_main^(0+256)
  6580  0FAD  35C2               	lslf	??_main^(0+256),f
  6581  0FAE  0DC3               	rlf	(??_main^(0+256)+1),f
  6582  0FAF  30E8               	movlw	232
  6583  0FB0  00C4               	movwf	(??_main+2)^(0+256)
  6584  0FB1  3023               	movlw	35
  6585  0FB2  00C5               	movwf	((??_main+2)^(0+256)+1)
  6586  0FB3  0842               	movf	??_main^(0+256),w
  6587  0FB4  0744               	addwf	(??_main+2)^(0+256),w
  6588  0FB5  0086               	movwf	6
  6589  0FB6  0843               	movf	(??_main+1)^(0+256),w
  6590  0FB7  3D45               	addwfc	(??_main+3)^(0+256),w
  6591  0FB8  0087               	movwf	7
  6592  0FB9  3F40               	moviw [0]fsr1
  6593  0FBA  00C6               	movwf	(??_main+4)^(0+256)
  6594  0FBB  3F41               	moviw [1]fsr1
  6595  0FBC  00C7               	movwf	((??_main+4)^(0+256)+1)
  6596  0FBD  0846               	movf	(??_main+4)^(0+256),w
  6597  0FBE  00C8               	movwf	(??_main+6)^(0+256)
  6598  0FBF  0847               	movf	(??_main+5)^(0+256),w
  6599  0FC0  00C9               	movwf	((??_main+6)^(0+256)+1)
  6600  0FC1  3000               	movlw	0
  6601  0FC2  1BC9               	btfsc	((??_main+6)^(0+256)+1),7
  6602  0FC3  30FF               	movlw	255
  6603  0FC4  00CA               	movwf	((??_main+6)^(0+256)+2)
  6604  0FC5  00CB               	movwf	((??_main+6)^(0+256)+3)
  6605  0FC6  0020               	movlb	0	; select bank0
  6606  0FC7  0849               	movf	_delay_time,w	;volatile
  6607  0FC8  0022               	movlb	2	; select bank2
  6608  0FC9  00CC               	movwf	(??_main+10)^(0+256)
  6609  0FCA  0020               	movlb	0	; select bank0
  6610  0FCB  084A               	movf	_delay_time+1,w	;volatile
  6611  0FCC  0022               	movlb	2	; select bank2
  6612  0FCD  00CD               	movwf	((??_main+10)^(0+256)+1)
  6613  0FCE  0020               	movlb	0	; select bank0
  6614  0FCF  084B               	movf	_delay_time+2,w	;volatile
  6615  0FD0  0022               	movlb	2	; select bank2
  6616  0FD1  00CE               	movwf	((??_main+10)^(0+256)+2)
  6617  0FD2  0020               	movlb	0	; select bank0
  6618  0FD3  084C               	movf	_delay_time+3,w	;volatile
  6619  0FD4  0022               	movlb	2	; select bank2
  6620  0FD5  00CF               	movwf	((??_main+10)^(0+256)+3)
  6621  0FD6  3001               	movlw	1
  6622  0FD7                     u8175:	
  6623  0FD7  35CC               	lslf	(??_main+10)^(0+256),f
  6624  0FD8  0DCD               	rlf	((??_main+10)^(0+256)+1),f
  6625  0FD9  0DCE               	rlf	((??_main+10)^(0+256)+2),f
  6626  0FDA  0DCF               	rlf	((??_main+10)^(0+256)+3),f
  6627  0FDB  0B89               	decfsz	9,f
  6628  0FDC  2FD7               	goto	u8175
  6629  0FDD  084F               	movf	(??_main+13)^(0+256),w
  6630  0FDE  3A80               	xorlw	128
  6631  0FDF  00D0               	movwf	(??_main+14)^(0+256)
  6632  0FE0  084B               	movf	(??_main+9)^(0+256),w
  6633  0FE1  3A80               	xorlw	128
  6634  0FE2  0250               	subwf	(??_main+14)^(0+256),w
  6635  0FE3  1D03               	skipz
  6636  0FE4  2FEF               	goto	u8183
  6637  0FE5  084A               	movf	(??_main+8)^(0+256),w
  6638  0FE6  024E               	subwf	(??_main+12)^(0+256),w
  6639  0FE7  1D03               	skipz
  6640  0FE8  2FEF               	goto	u8183
  6641  0FE9  0849               	movf	(??_main+7)^(0+256),w
  6642  0FEA  024D               	subwf	(??_main+11)^(0+256),w
  6643  0FEB  1D03               	skipz
  6644  0FEC  2FEF               	goto	u8183
  6645  0FED  0848               	movf	(??_main+6)^(0+256),w
  6646  0FEE  024C               	subwf	(??_main+10)^(0+256),w
  6647  0FEF                     u8183:	
  6648  0FEF  1C03               	skipc
  6649  0FF0  2FF7               	goto	l7331
  6650                           
  6651                           ;main.c: 227: delayfound = 1;
  6652  0FF1  3001               	movlw	1
  6653  0FF2  0023               	movlb	3	; select bank3
  6654  0FF3  00C5               	movwf	_delayfound^(0+384)
  6655  0FF4  3000               	movlw	0
  6656  0FF5  00C6               	movwf	(_delayfound^(0+384)+1)
  6657                           
  6658                           ;main.c: 231: } else {
  6659  0FF6  2FA3               	goto	l7333
  6660  0FF7                     l7331:	
  6661                           
  6662                           ;main.c: 232: delay_counter++;
  6663  0FF7  3001               	movlw	1
  6664  0FF8  0022               	movlb	2	; select bank2
  6665  0FF9  07D1               	addwf	_delay_counter^(0+256),f	;volatile
  6666  0FFA  3000               	movlw	0
  6667  0FFB  3DD2               	addwfc	(_delay_counter+1)^(0+256),f	;volatile
  6668  0FFC  2FA3               	goto	l7333
  6669  0FFD                     l7335:	
  6670                           
  6671                           ;main.c: 234: }
  6672                           ;main.c: 235: }
  6673                           ;main.c: 237: delay_time_changed = 0;
  6674  0FFD  01E0               	clrf	_delay_time_changed^(0+384)
  6675  0FFE  01E1               	clrf	(_delay_time_changed+1)^(0+384)
  6676  0FFF  2BC8               	goto	l7223
  6677  1000                     __end_of_main:	
  6678                           
  6679                           	psect	text1
  6680  0801                     __ptext1:	
  6681 ;; *************** function _update_selectMode *****************
  6682 ;; Defined at:
  6683 ;;		line 138 in file "tactiles.c"
  6684 ;; Parameters:    Size  Location     Type
  6685 ;;		None
  6686 ;; Auto vars:     Size  Location     Type
  6687 ;;		None
  6688 ;; Return value:  Size  Location     Type
  6689 ;;                  1    wreg      void 
  6690 ;; Registers used:
  6691 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6692 ;; Tracked objects:
  6693 ;;		On entry : 0/0
  6694 ;;		On exit  : 0/0
  6695 ;;		Unchanged: 0/0
  6696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6699 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6700 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6701 ;;Total ram usage:        1 bytes
  6702 ;; Hardware stack levels used:    1
  6703 ;; Hardware stack levels required when called:    5
  6704 ;; This function calls:
  6705 ;;		_setExpressionDisplay
  6706 ;;		_setPresetDisplay
  6707 ;; This function is called by:
  6708 ;;		_main
  6709 ;; This function uses a non-reentrant model
  6710 ;;
  6711                           
  6712                           
  6713                           ;psect for function _update_selectMode
  6714  0801                     _update_selectMode:	
  6715                           
  6716                           ;tactiles.c: 139: if (mode2_state == 0 && presetSaveMode != 1) {
  6717                           
  6718                           ;incstack = 0
  6719                           ; Regs used in _update_selectMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6720  0801  0020               	movlb	0	; select bank0
  6721  0802  0865               	movf	_mode2_state,w
  6722  0803  1D03               	btfss	3,2
  6723  0804  2808               	goto	l978
  6724  0805  0366               	decf	_presetSaveMode,w
  6725  0806  1D03               	btfss	3,2
  6726  0807  0008               	return
  6727  0808                     l978:	
  6728                           ;tactiles.c: 141: return;
  6729                           
  6730                           
  6731                           ;tactiles.c: 142: }
  6732                           ;tactiles.c: 143: if (PORTDbits.RD7 == 0) {
  6733  0808  1B8F               	btfsc	15,7	;volatile
  6734  0809  2856               	goto	l6919
  6735                           
  6736                           ;tactiles.c: 144: debounce_mode1++;
  6737  080A  3001               	movlw	1
  6738  080B  0023               	movlb	3	; select bank3
  6739  080C  07C1               	addwf	_debounce_mode1^(0+384),f
  6740  080D  3000               	movlw	0
  6741  080E  3DC2               	addwfc	(_debounce_mode1+1)^(0+384),f
  6742                           
  6743                           ;tactiles.c: 145: if (debounce_mode1 > 25) {
  6744  080F  0842               	movf	(_debounce_mode1+1)^(0+384),w
  6745  0810  3A80               	xorlw	128
  6746  0811  0021               	movlb	1	; select bank1
  6747  0812  00A7               	movwf	??_update_selectMode^(0+128)
  6748  0813  3080               	movlw	128
  6749  0814  0227               	subwf	??_update_selectMode^(0+128),w
  6750  0815  1D03               	skipz
  6751  0816  281A               	goto	u7335
  6752  0817  301A               	movlw	26
  6753  0818  0023               	movlb	3	; select bank3
  6754  0819  0241               	subwf	_debounce_mode1^(0+384),w
  6755  081A                     u7335:	
  6756  081A  1C03               	skipc
  6757  081B  0008               	return
  6758                           
  6759                           ;tactiles.c: 146: debounce_mode1 = 25;
  6760  081C  3019               	movlw	25
  6761  081D  0023               	movlb	3	; select bank3
  6762  081E  00C1               	movwf	_debounce_mode1^(0+384)
  6763  081F  3000               	movlw	0
  6764  0820  00C2               	movwf	(_debounce_mode1^(0+384)+1)
  6765                           
  6766                           ;tactiles.c: 147: if (mode2_state == presetModeCnst || presetSaveMode == 1) {
  6767  0821  0020               	movlb	0	; select bank0
  6768  0822  0865               	movf	_mode2_state,w
  6769  0823  0022               	movlb	2	; select bank2
  6770  0824  066D               	xorwf	_presetModeCnst^(0+256),w
  6771  0825  1903               	skipnz
  6772  0826  282B               	goto	l6901
  6773  0827  0020               	movlb	0	; select bank0
  6774  0828  0366               	decf	_presetSaveMode,w
  6775  0829  1D03               	btfss	3,2
  6776  082A  283C               	goto	l6909
  6777  082B                     l6901:	
  6778                           
  6779                           ;tactiles.c: 148: presetChannel++;
  6780  082B  3001               	movlw	1
  6781  082C  0021               	movlb	1	; select bank1
  6782  082D  00A7               	movwf	??_update_selectMode^(0+128)
  6783  082E  0827               	movf	??_update_selectMode^(0+128),w
  6784  082F  0020               	movlb	0	; select bank0
  6785  0830  07D6               	addwf	_presetChannel,f
  6786                           
  6787                           ;tactiles.c: 149: if (presetChannel > 10) {
  6788  0831  300B               	movlw	11
  6789  0832  0256               	subwf	_presetChannel,w
  6790  0833  1C03               	skipc
  6791  0834  2837               	goto	l6907
  6792                           
  6793                           ;tactiles.c: 150: presetChannel = 1;
  6794  0835  01D6               	clrf	_presetChannel
  6795  0836  0AD6               	incf	_presetChannel,f
  6796  0837                     l6907:	
  6797                           
  6798                           ;tactiles.c: 151: }
  6799                           ;tactiles.c: 152: setPresetDisplay(presetChannel);
  6800  0837  0856               	movf	_presetChannel,w
  6801  0838  319E  26D4  3188   	fcall	_setPresetDisplay
  6802                           
  6803                           ;tactiles.c: 153: } else if (mode2_state == expressModeCnst) {
  6804  083B  2852               	goto	l989
  6805  083C                     l6909:	
  6806  083C  0020               	movlb	0	; select bank0
  6807  083D  0865               	movf	_mode2_state,w
  6808  083E  0023               	movlb	3	; select bank3
  6809  083F  066B               	xorwf	_expressModeCnst^(0+384),w
  6810  0840  1D03               	skipz
  6811  0841  2852               	goto	l989
  6812                           
  6813                           ;tactiles.c: 154: expressionChannel++;
  6814  0842  3001               	movlw	1
  6815  0843  0021               	movlb	1	; select bank1
  6816  0844  00A7               	movwf	??_update_selectMode^(0+128)
  6817  0845  0827               	movf	??_update_selectMode^(0+128),w
  6818  0846  0022               	movlb	2	; select bank2
  6819  0847  07EB               	addwf	_expressionChannel^(0+256),f
  6820                           
  6821                           ;tactiles.c: 155: if (expressionChannel > 5) {
  6822  0848  3006               	movlw	6
  6823  0849  026B               	subwf	_expressionChannel^(0+256),w
  6824  084A  1C03               	skipc
  6825  084B  284E               	goto	l6917
  6826                           
  6827                           ;tactiles.c: 156: expressionChannel = 1;
  6828  084C  01EB               	clrf	_expressionChannel^(0+256)
  6829  084D  0AEB               	incf	_expressionChannel^(0+256),f
  6830  084E                     l6917:	
  6831                           
  6832                           ;tactiles.c: 157: }
  6833                           ;tactiles.c: 158: setExpressionDisplay(expressionChannel);
  6834  084E  086B               	movf	_expressionChannel^(0+256),w
  6835  084F  319C  24AB  3188   	fcall	_setExpressionDisplay
  6836  0852                     l989:	
  6837                           ;tactiles.c: 159: }
  6838                           ;tactiles.c: 166: while (PORTDbits.RD7 == 0) {
  6839                           
  6840  0852  0020               	movlb	0	; select bank0
  6841  0853  1B8F               	btfsc	15,7	;volatile
  6842  0854  0008               	return
  6843  0855  2852               	goto	l989
  6844  0856                     l6919:	
  6845                           ;tactiles.c: 167: }
  6846                           ;tactiles.c: 168: }
  6847                           ;tactiles.c: 169: } else {
  6848                           
  6849                           
  6850                           ;tactiles.c: 170: debounce_mode1 = 0;
  6851  0856  0023               	movlb	3	; select bank3
  6852  0857  01C1               	clrf	_debounce_mode1^(0+384)
  6853  0858  01C2               	clrf	(_debounce_mode1+1)^(0+384)
  6854  0859  0008               	return
  6855  085A                     __end_of_update_selectMode:	
  6856                           
  6857                           	psect	text2
  6858  1E62                     __ptext2:	
  6859 ;; *************** function _update_mode *****************
  6860 ;; Defined at:
  6861 ;;		line 86 in file "tactiles.c"
  6862 ;; Parameters:    Size  Location     Type
  6863 ;;		None
  6864 ;; Auto vars:     Size  Location     Type
  6865 ;;		None
  6866 ;; Return value:  Size  Location     Type
  6867 ;;                  1    wreg      void 
  6868 ;; Registers used:
  6869 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6870 ;; Tracked objects:
  6871 ;;		On entry : 0/0
  6872 ;;		On exit  : 0/0
  6873 ;;		Unchanged: 0/0
  6874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6876 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6877 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6878 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6879 ;;Total ram usage:        1 bytes
  6880 ;; Hardware stack levels used:    1
  6881 ;; Hardware stack levels required when called:    6
  6882 ;; This function calls:
  6883 ;;		_resetRingLEDs
  6884 ;;		_setPedalMode
  6885 ;; This function is called by:
  6886 ;;		_main
  6887 ;; This function uses a non-reentrant model
  6888 ;;
  6889                           
  6890                           
  6891                           ;psect for function _update_mode
  6892  1E62                     _update_mode:	
  6893                           
  6894                           ;tactiles.c: 91: if (PORTCbits.RC0 == 0) {
  6895                           
  6896                           ;incstack = 0
  6897                           ; Regs used in _update_mode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6898  1E62  0020               	movlb	0	; select bank0
  6899  1E63  180E               	btfsc	14,0	;volatile
  6900  1E64  2E96               	goto	l6887
  6901                           
  6902                           ;tactiles.c: 94: debounce_mode2++;
  6903  1E65  3001               	movlw	1
  6904  1E66  0023               	movlb	3	; select bank3
  6905  1E67  07C3               	addwf	_debounce_mode2^(0+384),f
  6906  1E68  3000               	movlw	0
  6907  1E69  3DC4               	addwfc	(_debounce_mode2+1)^(0+384),f
  6908                           
  6909                           ;tactiles.c: 95: if (debounce_mode2 > 25) {
  6910  1E6A  0844               	movf	(_debounce_mode2+1)^(0+384),w
  6911  1E6B  3A80               	xorlw	128
  6912  1E6C  0021               	movlb	1	; select bank1
  6913  1E6D  00A7               	movwf	??_update_mode^(0+128)
  6914  1E6E  3080               	movlw	128
  6915  1E6F  0227               	subwf	??_update_mode^(0+128),w
  6916  1E70  1D03               	skipz
  6917  1E71  2E75               	goto	u7265
  6918  1E72  301A               	movlw	26
  6919  1E73  0023               	movlb	3	; select bank3
  6920  1E74  0243               	subwf	_debounce_mode2^(0+384),w
  6921  1E75                     u7265:	
  6922  1E75  1C03               	skipc
  6923  1E76  0008               	return
  6924                           
  6925                           ;tactiles.c: 96: debounce_mode2 = 25;
  6926  1E77  3019               	movlw	25
  6927  1E78  0023               	movlb	3	; select bank3
  6928  1E79  00C3               	movwf	_debounce_mode2^(0+384)
  6929  1E7A  3000               	movlw	0
  6930  1E7B  00C4               	movwf	(_debounce_mode2^(0+384)+1)
  6931                           
  6932                           ;tactiles.c: 98: if (presetSaveMode == 1) {
  6933  1E7C  0020               	movlb	0	; select bank0
  6934  1E7D  0366               	decf	_presetSaveMode,w
  6935  1E7E  1D03               	btfss	3,2
  6936  1E7F  2E85               	goto	l6879
  6937                           
  6938                           ;tactiles.c: 99: presetSaveMode = 0;
  6939  1E80  01E6               	clrf	_presetSaveMode
  6940                           
  6941                           ;tactiles.c: 100: resetRingLEDs();
  6942  1E81  319C  24C3  319E   	fcall	_resetRingLEDs
  6943                           
  6944                           ;tactiles.c: 101: } else {
  6945  1E84  2E8F               	goto	l6885
  6946  1E85                     l6879:	
  6947                           
  6948                           ;tactiles.c: 102: mode2_state++;
  6949  1E85  3001               	movlw	1
  6950  1E86  0021               	movlb	1	; select bank1
  6951  1E87  00A7               	movwf	??_update_mode^(0+128)
  6952  1E88  0827               	movf	??_update_mode^(0+128),w
  6953  1E89  0020               	movlb	0	; select bank0
  6954  1E8A  07E5               	addwf	_mode2_state,f
  6955                           
  6956                           ;tactiles.c: 103: if (mode2_state > 2) {
  6957  1E8B  3003               	movlw	3
  6958  1E8C  0265               	subwf	_mode2_state,w
  6959  1E8D  1803               	btfsc	3,0
  6960                           
  6961                           ;tactiles.c: 104: mode2_state = 0;
  6962  1E8E  01E5               	clrf	_mode2_state
  6963  1E8F                     l6885:	
  6964                           
  6965                           ;tactiles.c: 105: }
  6966                           ;tactiles.c: 106: }
  6967                           ;tactiles.c: 108: setPedalMode();
  6968  1E8F  3187  27DB  319E   	fcall	_setPedalMode
  6969  1E92                     l963:	
  6970                           ;tactiles.c: 109: while (PORTCbits.RC0 == 0) {
  6971                           
  6972  1E92  0020               	movlb	0	; select bank0
  6973  1E93  180E               	btfsc	14,0	;volatile
  6974  1E94  0008               	return
  6975  1E95  2E92               	goto	l963
  6976  1E96                     l6887:	
  6977                           ;tactiles.c: 110: }
  6978                           ;tactiles.c: 111: }
  6979                           ;tactiles.c: 112: } else {
  6980                           
  6981                           
  6982                           ;tactiles.c: 113: debounce_mode2 = 0;
  6983  1E96  0023               	movlb	3	; select bank3
  6984  1E97  01C3               	clrf	_debounce_mode2^(0+384)
  6985  1E98  01C4               	clrf	(_debounce_mode2+1)^(0+384)
  6986  1E99  0008               	return
  6987  1E9A                     __end_of_update_mode:	
  6988                           
  6989                           	psect	text3
  6990  05F8                     __ptext3:	
  6991 ;; *************** function _updateSwitchTap *****************
  6992 ;; Defined at:
  6993 ;;		line 48 in file "SwitchTap.c"
  6994 ;; Parameters:    Size  Location     Type
  6995 ;;		None
  6996 ;; Auto vars:     Size  Location     Type
  6997 ;;  tapCntDiviso    2   34[BANK1 ] int 
  6998 ;;  iCnt            1   36[BANK1 ] unsigned char 
  6999 ;; Return value:  Size  Location     Type
  7000 ;;                  1    wreg      void 
  7001 ;; Registers used:
  7002 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7003 ;; Tracked objects:
  7004 ;;		On entry : 0/0
  7005 ;;		On exit  : 0/0
  7006 ;;		Unchanged: 0/0
  7007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7009 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7010 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7011 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7012 ;;Total ram usage:        9 bytes
  7013 ;; Hardware stack levels used:    1
  7014 ;; Hardware stack levels required when called:    8
  7015 ;; This function calls:
  7016 ;;		___aldiv
  7017 ;;		_setDoublePressState
  7018 ;;		_setLongTapState
  7019 ;; This function is called by:
  7020 ;;		_main
  7021 ;; This function uses a non-reentrant model
  7022 ;;
  7023                           
  7024                           
  7025                           ;psect for function _updateSwitchTap
  7026  05F8                     _updateSwitchTap:	
  7027                           
  7028                           ;SwitchTap.c: 49: uint8_t iCnt = 0;
  7029                           
  7030                           ;incstack = 0
  7031                           ; Regs used in _updateSwitchTap: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7032  05F8  0021               	movlb	1	; select bank1
  7033  05F9  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  7034                           
  7035                           ;SwitchTap.c: 57: if (PORTEbits.RE0 == 0) {
  7036  05FA  0020               	movlb	0	; select bank0
  7037  05FB  1810               	btfsc	16,0	;volatile
  7038  05FC  2E03               	goto	l7015
  7039                           
  7040                           ;SwitchTap.c: 58: if (switchTap_pressed > 0) {
  7041  05FD  0868               	movf	_switchTap_pressed,w
  7042  05FE  1903               	btfsc	3,2
  7043  05FF  2E0D               	goto	l1363
  7044                           
  7045                           ;SwitchTap.c: 59: switchTap_pressed--;
  7046  0600  3001               	movlw	1
  7047  0601  02E8               	subwf	_switchTap_pressed,f
  7048                           
  7049                           ;SwitchTap.c: 60: }
  7050                           ;SwitchTap.c: 61: } else if (switchTap_pressed < 25) {
  7051  0602  2E0D               	goto	l1363
  7052  0603                     l7015:	
  7053  0603  3019               	movlw	25
  7054  0604  0268               	subwf	_switchTap_pressed,w
  7055  0605  1803               	skipnc
  7056  0606  2E0D               	goto	l1363
  7057                           
  7058                           ;SwitchTap.c: 62: switchTap_pressed++;
  7059  0607  3001               	movlw	1
  7060  0608  0021               	movlb	1	; select bank1
  7061  0609  00BC               	movwf	??_updateSwitchTap^(0+128)
  7062  060A  083C               	movf	??_updateSwitchTap^(0+128),w
  7063  060B  0020               	movlb	0	; select bank0
  7064  060C  07E8               	addwf	_switchTap_pressed,f
  7065  060D                     l1363:	
  7066                           
  7067                           ;SwitchTap.c: 63: }
  7068                           ;SwitchTap.c: 69: if (switchTap_pressed == 0) {
  7069  060D  0868               	movf	_switchTap_pressed,w
  7070  060E  1D03               	btfss	3,2
  7071  060F  2FC2               	goto	l7099
  7072                           
  7073                           ;SwitchTap.c: 73: if (tap_timer >= 1563) {
  7074  0610  1BDF               	btfsc	_tap_timer+3,7	;volatile
  7075  0611  2E95               	goto	l7059
  7076  0612  085F               	movf	_tap_timer+3,w	;volatile
  7077  0613  1D03               	btfss	3,2
  7078  0614  2E1E               	goto	l7021
  7079  0615  085E               	movf	_tap_timer+2,w	;volatile
  7080  0616  1D03               	btfss	3,2
  7081  0617  2E1E               	goto	l7021
  7082  0618  301B               	movlw	27
  7083  0619  025C               	subwf	_tap_timer,w	;volatile
  7084  061A  3006               	movlw	6
  7085  061B  3B5D               	subwfb	_tap_timer+1,w	;volatile
  7086  061C  1C03               	btfss	3,0
  7087  061D  2E95               	goto	l7059
  7088  061E                     l7021:	
  7089                           
  7090                           ;SwitchTap.c: 76: if (switchTap_down != 1) {
  7091  061E  0022               	movlb	2	; select bank2
  7092  061F  035F               	decf	_switchTap_down^(0+256),w
  7093  0620  1903               	btfsc	3,2
  7094  0621  2E5C               	goto	l7037
  7095                           
  7096                           ;SwitchTap.c: 78: switchTap_down = 1;
  7097  0622  01DF               	clrf	_switchTap_down^(0+256)
  7098  0623  0ADF               	incf	_switchTap_down^(0+256),f
  7099                           
  7100                           ;SwitchTap.c: 79: tap_timer = 0;
  7101  0624  3000               	movlw	0
  7102  0625  0020               	movlb	0	; select bank0
  7103  0626  00DF               	movwf	_tap_timer+3	;volatile
  7104  0627  3000               	movlw	0
  7105  0628  00DE               	movwf	_tap_timer+2	;volatile
  7106  0629  3000               	movlw	0
  7107  062A  00DD               	movwf	_tap_timer+1	;volatile
  7108  062B  3000               	movlw	0
  7109  062C  00DC               	movwf	_tap_timer	;volatile
  7110                           
  7111                           ;SwitchTap.c: 80: tap_iteration = 1;
  7112  062D  3001               	movlw	1
  7113  062E  0023               	movlb	3	; select bank3
  7114  062F  00E6               	movwf	_tap_iteration^(0+384)
  7115  0630  3000               	movlw	0
  7116  0631  00E7               	movwf	(_tap_iteration^(0+384)+1)
  7117                           
  7118                           ;SwitchTap.c: 81: tap_total = 0;
  7119  0632  3000               	movlw	0
  7120  0633  00B4               	movwf	(_tap_total+3)^(0+384)
  7121  0634  3000               	movlw	0
  7122  0635  00B3               	movwf	(_tap_total+2)^(0+384)
  7123  0636  3000               	movlw	0
  7124  0637  00B2               	movwf	(_tap_total+1)^(0+384)
  7125  0638  3000               	movlw	0
  7126  0639  00B1               	movwf	_tap_total^(0+384)
  7127                           
  7128                           ;SwitchTap.c: 82: delay_time_changed = 0;
  7129  063A  01E0               	clrf	_delay_time_changed^(0+384)
  7130  063B  01E1               	clrf	(_delay_time_changed+1)^(0+384)
  7131                           
  7132                           ;SwitchTap.c: 84: for (iCnt = 1; iCnt <= num_taps; iCnt++) {
  7133  063C  0021               	movlb	1	; select bank1
  7134  063D  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  7135  063E  0AC4               	incf	updateSwitchTap@iCnt^(0+128),f
  7136  063F                     l7035:	
  7137  063F  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7138  0640  0020               	movlb	0	; select bank0
  7139  0641  0255               	subwf	_num_taps,w
  7140  0642  1C03               	btfss	3,0
  7141  0643  2E5C               	goto	l7037
  7142                           
  7143                           ;SwitchTap.c: 85: tap_history[iCnt] = 0;
  7144  0644  0021               	movlb	1	; select bank1
  7145  0645  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7146  0646  00BC               	movwf	??_updateSwitchTap^(0+128)
  7147  0647  3001               	movlw	1
  7148  0648                     u7675:	
  7149  0648  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7150  0649  3EFF               	addlw	-1
  7151  064A  1D03               	skipz
  7152  064B  2E48               	goto	u7675
  7153  064C  353C               	lslf	??_updateSwitchTap^(0+128),w
  7154  064D  3E48               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7155  064E  0086               	movwf	6
  7156  064F  3002               	movlw	2	; select bank4/5
  7157  0650  0087               	movwf	7
  7158  0651  3000               	movlw	0
  7159  0652  3FC0               	movwi [0]fsr1
  7160  0653  3000               	movlw	0
  7161  0654  3FC1               	movwi [1]fsr1
  7162  0655  3FC2               	movwi [2]fsr1
  7163  0656  3FC3               	movwi [3]fsr1
  7164  0657  3001               	movlw	1
  7165  0658  00BC               	movwf	??_updateSwitchTap^(0+128)
  7166  0659  083C               	movf	??_updateSwitchTap^(0+128),w
  7167  065A  07C4               	addwf	updateSwitchTap@iCnt^(0+128),f
  7168  065B  2E3F               	goto	l7035
  7169  065C                     l7037:	
  7170                           
  7171                           ;SwitchTap.c: 86: }
  7172                           ;SwitchTap.c: 87: }
  7173                           ;SwitchTap.c: 90: if (longTap_start == 0) {
  7174  065C  0022               	movlb	2	; select bank2
  7175  065D  085C               	movf	_longTap_start^(0+256),w
  7176  065E  1D03               	btfss	3,2
  7177  065F  2E67               	goto	l7043
  7178                           
  7179                           ;SwitchTap.c: 91: longTap_start = 1;
  7180  0660  01DC               	clrf	_longTap_start^(0+256)
  7181  0661  0ADC               	incf	_longTap_start^(0+256),f
  7182                           
  7183                           ;SwitchTap.c: 92: longTap_state = 0;
  7184  0662  0020               	movlb	0	; select bank0
  7185  0663  01D4               	clrf	_longTap_state	;volatile
  7186                           
  7187                           ;SwitchTap.c: 93: longTap_timer = 0;
  7188  0664  0022               	movlb	2	; select bank2
  7189  0665  01D5               	clrf	_longTap_timer^(0+256)	;volatile
  7190  0666  01D6               	clrf	(_longTap_timer+1)^(0+256)	;volatile
  7191  0667                     l7043:	
  7192                           
  7193                           ;SwitchTap.c: 94: }
  7194                           ;SwitchTap.c: 98: if (longTap_timer >= long_press_limit && longTap_state == 0 && doubleT
      +                          ap_state == 0) {
  7195  0667  0020               	movlb	0	; select bank0
  7196  0668  0850               	movf	_long_press_limit+1,w
  7197  0669  0022               	movlb	2	; select bank2
  7198  066A  0256               	subwf	(_longTap_timer+1)^(0+256),w	;volatile
  7199  066B  1D03               	skipz
  7200  066C  2E71               	goto	u7705
  7201  066D  0020               	movlb	0	; select bank0
  7202  066E  084F               	movf	_long_press_limit,w
  7203  066F  0022               	movlb	2	; select bank2
  7204  0670  0255               	subwf	_longTap_timer^(0+256),w	;volatile
  7205  0671                     u7705:	
  7206  0671  1C03               	skipc
  7207  0672  0008               	return
  7208  0673  0020               	movlb	0	; select bank0
  7209  0674  0854               	movf	_longTap_state,w	;volatile
  7210  0675  1D03               	btfss	3,2
  7211  0676  0008               	return
  7212  0677  0864               	movf	_doubleTap_state,w	;volatile
  7213  0678  1D03               	btfss	3,2
  7214  0679  0008               	return
  7215                           
  7216                           ;SwitchTap.c: 100: longTap_timer = long_press_limit;
  7217  067A  0850               	movf	_long_press_limit+1,w
  7218  067B  0022               	movlb	2	; select bank2
  7219  067C  00D6               	movwf	(_longTap_timer+1)^(0+256)	;volatile
  7220  067D  0020               	movlb	0	; select bank0
  7221  067E  084F               	movf	_long_press_limit,w
  7222  067F  0022               	movlb	2	; select bank2
  7223  0680  00D5               	movwf	_longTap_timer^(0+256)	;volatile
  7224                           
  7225                           ;SwitchTap.c: 102: LATBbits.LATB4 = 0;
  7226  0681  120D               	bcf	13,4	;volatile
  7227                           
  7228                           ;SwitchTap.c: 103: if (feedback_start != 1) {
  7229  0682  035B               	decf	_feedback_start^(0+256),w
  7230  0683  1903               	btfsc	3,2
  7231  0684  2E8D               	goto	l7057
  7232                           
  7233                           ;SwitchTap.c: 104: setLongTapState(1);
  7234  0685  3001               	movlw	1
  7235  0686  0021               	movlb	1	; select bank1
  7236  0687  00A0               	movwf	setLongTapState@f_state^(0+128)
  7237  0688  3000               	movlw	0
  7238  0689  00A1               	movwf	(setLongTapState@f_state^(0+128)+1)
  7239  068A  319C  24F7         	fcall	_setLongTapState
  7240                           
  7241                           ;SwitchTap.c: 105: } else {
  7242  068C  0008               	return
  7243  068D                     l7057:	
  7244                           
  7245                           ;SwitchTap.c: 106: setDoublePressState(1);
  7246  068D  3001               	movlw	1
  7247  068E  0021               	movlb	1	; select bank1
  7248  068F  00B8               	movwf	setDoublePressState@f_state^(0+128)
  7249  0690  3000               	movlw	0
  7250  0691  00B9               	movwf	(setDoublePressState@f_state^(0+128)+1)
  7251  0692  3190  2050         	fcall	_setDoublePressState
  7252                           
  7253                           ;SwitchTap.c: 107: }
  7254                           ;SwitchTap.c: 108: }
  7255                           ;SwitchTap.c: 110: } else if (tap_timer < 1563 && longTap_state == 0 && switchTap_down !
      +                          = 1) {
  7256  0694  0008               	return
  7257  0695                     l7059:	
  7258  0695  0020               	movlb	0	; select bank0
  7259  0696  1BDF               	btfsc	_tap_timer+3,7	;volatile
  7260  0697  2EA4               	goto	l7061
  7261  0698  085F               	movf	_tap_timer+3,w	;volatile
  7262  0699  1D03               	btfss	3,2
  7263  069A  0008               	return
  7264  069B  085E               	movf	_tap_timer+2,w	;volatile
  7265  069C  1D03               	btfss	3,2
  7266  069D  0008               	return
  7267  069E  301B               	movlw	27
  7268  069F  025C               	subwf	_tap_timer,w	;volatile
  7269  06A0  3006               	movlw	6
  7270  06A1  3B5D               	subwfb	_tap_timer+1,w	;volatile
  7271  06A2  1803               	btfsc	3,0
  7272  06A3  0008               	return
  7273  06A4                     l7061:	
  7274  06A4  0854               	movf	_longTap_state,w	;volatile
  7275  06A5  1D03               	btfss	3,2
  7276  06A6  0008               	return
  7277  06A7  0022               	movlb	2	; select bank2
  7278  06A8  035F               	decf	_switchTap_down^(0+256),w
  7279  06A9  1903               	btfsc	3,2
  7280  06AA  0008               	return
  7281                           
  7282                           ;SwitchTap.c: 112: switchTap_down = 1;
  7283  06AB  01DF               	clrf	_switchTap_down^(0+256)
  7284  06AC  0ADF               	incf	_switchTap_down^(0+256),f
  7285                           
  7286                           ;SwitchTap.c: 113: if (tap_timer >= 1172) {
  7287  06AD  0020               	movlb	0	; select bank0
  7288  06AE  1BDF               	btfsc	_tap_timer+3,7	;volatile
  7289  06AF  2EC4               	goto	l1377
  7290  06B0  085F               	movf	_tap_timer+3,w	;volatile
  7291  06B1  1D03               	btfss	3,2
  7292  06B2  2EBC               	goto	l7069
  7293  06B3  085E               	movf	_tap_timer+2,w	;volatile
  7294  06B4  1D03               	btfss	3,2
  7295  06B5  2EBC               	goto	l7069
  7296  06B6  3094               	movlw	148
  7297  06B7  025C               	subwf	_tap_timer,w	;volatile
  7298  06B8  3004               	movlw	4
  7299  06B9  3B5D               	subwfb	_tap_timer+1,w	;volatile
  7300  06BA  1C03               	btfss	3,0
  7301  06BB  2EC4               	goto	l1377
  7302  06BC                     l7069:	
  7303                           
  7304                           ;SwitchTap.c: 114: tap_timer = 1172;
  7305  06BC  3000               	movlw	0
  7306  06BD  00DF               	movwf	_tap_timer+3	;volatile
  7307  06BE  3000               	movlw	0
  7308  06BF  00DE               	movwf	_tap_timer+2	;volatile
  7309  06C0  3004               	movlw	4
  7310  06C1  00DD               	movwf	_tap_timer+1	;volatile
  7311  06C2  3094               	movlw	148
  7312  06C3  00DC               	movwf	_tap_timer	;volatile
  7313  06C4                     l1377:	
  7314                           
  7315                           ;SwitchTap.c: 115: }
  7316                           ;SwitchTap.c: 117: int tapCntDivisor = num_taps;
  7317  06C4  0855               	movf	_num_taps,w
  7318  06C5  0021               	movlb	1	; select bank1
  7319  06C6  00BC               	movwf	??_updateSwitchTap^(0+128)
  7320  06C7  01BD               	clrf	(??_updateSwitchTap^(0+128)+1)
  7321  06C8  083C               	movf	??_updateSwitchTap^(0+128),w
  7322  06C9  00C2               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  7323  06CA  083D               	movf	(??_updateSwitchTap+1)^(0+128),w
  7324  06CB  00C3               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  7325                           
  7326                           ;SwitchTap.c: 118: if (tap_iteration <= num_taps) {
  7327  06CC  0023               	movlb	3	; select bank3
  7328  06CD  0867               	movf	(_tap_iteration+1)^(0+384),w
  7329  06CE  3A80               	xorlw	128
  7330  06CF  3C80               	sublw	128
  7331  06D0  1D03               	skipz
  7332  06D1  2ED5               	goto	u7785
  7333  06D2  0866               	movf	_tap_iteration^(0+384),w
  7334  06D3  0020               	movlb	0	; select bank0
  7335  06D4  0255               	subwf	_num_taps,w
  7336  06D5                     u7785:	
  7337  06D5  1C03               	skipc
  7338  06D6  2F06               	goto	l7077
  7339                           
  7340                           ;SwitchTap.c: 119: tap_total += tap_timer;
  7341  06D7  0020               	movlb	0	; select bank0
  7342  06D8  085C               	movf	_tap_timer,w	;volatile
  7343  06D9  0023               	movlb	3	; select bank3
  7344  06DA  07B1               	addwf	_tap_total^(0+384),f
  7345  06DB  0020               	movlb	0	; select bank0
  7346  06DC  085D               	movf	_tap_timer+1,w	;volatile
  7347  06DD  0023               	movlb	3	; select bank3
  7348  06DE  3DB2               	addwfc	(_tap_total+1)^(0+384),f
  7349  06DF  0020               	movlb	0	; select bank0
  7350  06E0  085E               	movf	_tap_timer+2,w	;volatile
  7351  06E1  0023               	movlb	3	; select bank3
  7352  06E2  3DB3               	addwfc	(_tap_total+2)^(0+384),f
  7353  06E3  0020               	movlb	0	; select bank0
  7354  06E4  085F               	movf	_tap_timer+3,w	;volatile
  7355  06E5  0023               	movlb	3	; select bank3
  7356  06E6  3DB4               	addwfc	(_tap_total+3)^(0+384),f
  7357                           
  7358                           ;SwitchTap.c: 120: tap_history[tap_iteration] = tap_timer;
  7359  06E7  0866               	movf	_tap_iteration^(0+384),w
  7360  06E8  0021               	movlb	1	; select bank1
  7361  06E9  00BC               	movwf	??_updateSwitchTap^(0+128)
  7362  06EA  3001               	movlw	1
  7363  06EB                     u7795:	
  7364  06EB  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7365  06EC  3EFF               	addlw	-1
  7366  06ED  1D03               	skipz
  7367  06EE  2EEB               	goto	u7795
  7368  06EF  353C               	lslf	??_updateSwitchTap^(0+128),w
  7369  06F0  3E48               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7370  06F1  0086               	movwf	6
  7371  06F2  3002               	movlw	2	; select bank4/5
  7372  06F3  0087               	movwf	7
  7373  06F4  0020               	movlb	0	; select bank0
  7374  06F5  085C               	movf	_tap_timer,w	;volatile
  7375  06F6  3FC0               	movwi [0]fsr1
  7376  06F7  085D               	movf	_tap_timer+1,w	;volatile
  7377  06F8  3FC1               	movwi [1]fsr1
  7378  06F9  085E               	movf	_tap_timer+2,w	;volatile
  7379  06FA  3FC2               	movwi [2]fsr1
  7380  06FB  085F               	movf	_tap_timer+3,w	;volatile
  7381  06FC  3FC3               	movwi [3]fsr1
  7382                           
  7383                           ;SwitchTap.c: 121: tapCntDivisor = tap_iteration;
  7384  06FD  0023               	movlb	3	; select bank3
  7385  06FE  0867               	movf	(_tap_iteration+1)^(0+384),w
  7386  06FF  0021               	movlb	1	; select bank1
  7387  0700  00C3               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  7388  0701  0023               	movlb	3	; select bank3
  7389  0702  0866               	movf	_tap_iteration^(0+384),w
  7390  0703  0021               	movlb	1	; select bank1
  7391  0704  00C2               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  7392                           
  7393                           ;SwitchTap.c: 122: } else {
  7394  0705  2F82               	goto	l7091
  7395  0706                     l7077:	
  7396                           
  7397                           ;SwitchTap.c: 123: tap_total = 0;
  7398  0706  3000               	movlw	0
  7399  0707  0023               	movlb	3	; select bank3
  7400  0708  00B4               	movwf	(_tap_total+3)^(0+384)
  7401  0709  3000               	movlw	0
  7402  070A  00B3               	movwf	(_tap_total+2)^(0+384)
  7403  070B  3000               	movlw	0
  7404  070C  00B2               	movwf	(_tap_total+1)^(0+384)
  7405  070D  3000               	movlw	0
  7406  070E  00B1               	movwf	_tap_total^(0+384)
  7407                           
  7408                           ;SwitchTap.c: 124: for (iCnt = 1; iCnt < num_taps; iCnt++) {
  7409  070F  0021               	movlb	1	; select bank1
  7410  0710  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  7411  0711  0AC4               	incf	updateSwitchTap@iCnt^(0+128),f
  7412  0712                     l7085:	
  7413  0712  0020               	movlb	0	; select bank0
  7414  0713  0855               	movf	_num_taps,w
  7415  0714  0021               	movlb	1	; select bank1
  7416  0715  0244               	subwf	updateSwitchTap@iCnt^(0+128),w
  7417  0716  1803               	btfsc	3,0
  7418  0717  2F5C               	goto	l7087
  7419                           
  7420                           ;SwitchTap.c: 125: tap_history[iCnt] = tap_history[iCnt + 1];
  7421  0718  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7422  0719  00BC               	movwf	??_updateSwitchTap^(0+128)
  7423  071A  3001               	movlw	1
  7424  071B                     u7805:	
  7425  071B  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7426  071C  3EFF               	addlw	-1
  7427  071D  1D03               	skipz
  7428  071E  2F1B               	goto	u7805
  7429  071F  353C               	lslf	??_updateSwitchTap^(0+128),w
  7430  0720  3E04               	addlw	4
  7431  0721  3E48               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7432  0722  0086               	movwf	6
  7433  0723  3002               	movlw	2	; select bank4/5
  7434  0724  0087               	movwf	7
  7435  0725  3F40               	moviw [0]fsr1
  7436  0726  00BD               	movwf	(??_updateSwitchTap+1)^(0+128)
  7437  0727  3F41               	moviw [1]fsr1
  7438  0728  00BE               	movwf	((??_updateSwitchTap+1)^(0+128)+1)
  7439  0729  3F42               	moviw [2]fsr1
  7440  072A  00BF               	movwf	((??_updateSwitchTap+1)^(0+128)+2)
  7441  072B  3F43               	moviw [3]fsr1
  7442  072C  00C0               	movwf	((??_updateSwitchTap+1)^(0+128)+3)
  7443  072D  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7444  072E  00C1               	movwf	(??_updateSwitchTap+5)^(0+128)
  7445  072F  3001               	movlw	1
  7446  0730                     u7815:	
  7447  0730  35C1               	lslf	(??_updateSwitchTap+5)^(0+128),f
  7448  0731  3EFF               	addlw	-1
  7449  0732  1D03               	skipz
  7450  0733  2F30               	goto	u7815
  7451  0734  3541               	lslf	(??_updateSwitchTap+5)^(0+128),w
  7452  0735  3E48               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7453  0736  0086               	movwf	6
  7454  0737  3002               	movlw	2	; select bank4/5
  7455  0738  0087               	movwf	7
  7456  0739  083D               	movf	(??_updateSwitchTap+1)^(0+128),w
  7457  073A  3FC0               	movwi [0]fsr1
  7458  073B  083E               	movf	(??_updateSwitchTap+2)^(0+128),w
  7459  073C  3FC1               	movwi [1]fsr1
  7460  073D  083F               	movf	(??_updateSwitchTap+3)^(0+128),w
  7461  073E  3FC2               	movwi [2]fsr1
  7462  073F  0840               	movf	(??_updateSwitchTap+4)^(0+128),w
  7463  0740  3FC3               	movwi [3]fsr1
  7464                           
  7465                           ;SwitchTap.c: 126: tap_total += tap_history[iCnt];
  7466  0741  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7467  0742  00BC               	movwf	??_updateSwitchTap^(0+128)
  7468  0743  3001               	movlw	1
  7469  0744                     u7825:	
  7470  0744  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7471  0745  3EFF               	addlw	-1
  7472  0746  1D03               	skipz
  7473  0747  2F44               	goto	u7825
  7474  0748  353C               	lslf	??_updateSwitchTap^(0+128),w
  7475  0749  3E48               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7476  074A  0086               	movwf	6
  7477  074B  3002               	movlw	2	; select bank4/5
  7478  074C  0087               	movwf	7
  7479  074D  3F40               	moviw [0]fsr1
  7480  074E  0023               	movlb	3	; select bank3
  7481  074F  07B1               	addwf	_tap_total^(0+384),f
  7482  0750  3F41               	moviw [1]fsr1
  7483  0751  3DB2               	addwfc	(_tap_total+1)^(0+384),f
  7484  0752  3F42               	moviw [2]fsr1
  7485  0753  3DB3               	addwfc	(_tap_total+2)^(0+384),f
  7486  0754  3F43               	moviw [3]fsr1
  7487  0755  3DB4               	addwfc	(_tap_total+3)^(0+384),f
  7488  0756  3001               	movlw	1
  7489  0757  0021               	movlb	1	; select bank1
  7490  0758  00BC               	movwf	??_updateSwitchTap^(0+128)
  7491  0759  083C               	movf	??_updateSwitchTap^(0+128),w
  7492  075A  07C4               	addwf	updateSwitchTap@iCnt^(0+128),f
  7493  075B  2F12               	goto	l7085
  7494  075C                     l7087:	
  7495                           
  7496                           ;SwitchTap.c: 127: }
  7497                           ;SwitchTap.c: 128: tap_history[num_taps] = tap_timer;
  7498  075C  0020               	movlb	0	; select bank0
  7499  075D  0855               	movf	_num_taps,w
  7500  075E  0021               	movlb	1	; select bank1
  7501  075F  00BC               	movwf	??_updateSwitchTap^(0+128)
  7502  0760  3001               	movlw	1
  7503  0761                     u7845:	
  7504  0761  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7505  0762  3EFF               	addlw	-1
  7506  0763  1D03               	skipz
  7507  0764  2F61               	goto	u7845
  7508  0765  353C               	lslf	??_updateSwitchTap^(0+128),w
  7509  0766  3E48               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7510  0767  0086               	movwf	6
  7511  0768  3002               	movlw	2	; select bank4/5
  7512  0769  0087               	movwf	7
  7513  076A  0020               	movlb	0	; select bank0
  7514  076B  085C               	movf	_tap_timer,w	;volatile
  7515  076C  3FC0               	movwi [0]fsr1
  7516  076D  085D               	movf	_tap_timer+1,w	;volatile
  7517  076E  3FC1               	movwi [1]fsr1
  7518  076F  085E               	movf	_tap_timer+2,w	;volatile
  7519  0770  3FC2               	movwi [2]fsr1
  7520  0771  085F               	movf	_tap_timer+3,w	;volatile
  7521  0772  3FC3               	movwi [3]fsr1
  7522                           
  7523                           ;SwitchTap.c: 129: tap_total += tap_timer;
  7524  0773  085C               	movf	_tap_timer,w	;volatile
  7525  0774  0023               	movlb	3	; select bank3
  7526  0775  07B1               	addwf	_tap_total^(0+384),f
  7527  0776  0020               	movlb	0	; select bank0
  7528  0777  085D               	movf	_tap_timer+1,w	;volatile
  7529  0778  0023               	movlb	3	; select bank3
  7530  0779  3DB2               	addwfc	(_tap_total+1)^(0+384),f
  7531  077A  0020               	movlb	0	; select bank0
  7532  077B  085E               	movf	_tap_timer+2,w	;volatile
  7533  077C  0023               	movlb	3	; select bank3
  7534  077D  3DB3               	addwfc	(_tap_total+2)^(0+384),f
  7535  077E  0020               	movlb	0	; select bank0
  7536  077F  085F               	movf	_tap_timer+3,w	;volatile
  7537  0780  0023               	movlb	3	; select bank3
  7538  0781  3DB4               	addwfc	(_tap_total+3)^(0+384),f
  7539  0782                     l7091:	
  7540                           
  7541                           ;SwitchTap.c: 130: }
  7542                           ;SwitchTap.c: 132: baseline_delay_time = tap_total / tapCntDivisor;
  7543  0782  0021               	movlb	1	; select bank1
  7544  0783  0842               	movf	updateSwitchTap@tapCntDivisor^(0+128),w
  7545  0784  00A0               	movwf	___aldiv@divisor^(0+128)
  7546  0785  0843               	movf	(updateSwitchTap@tapCntDivisor+1)^(0+128),w
  7547  0786  00A1               	movwf	(___aldiv@divisor+1)^(0+128)
  7548  0787  0D89               	rlf	9,f
  7549  0788  3B89               	subwfb	9,f
  7550  0789  0989               	comf	9,f
  7551  078A  00A2               	movwf	(___aldiv@divisor+2)^(0+128)
  7552  078B  00A3               	movwf	(___aldiv@divisor+3)^(0+128)
  7553  078C  0023               	movlb	3	; select bank3
  7554  078D  0834               	movf	(_tap_total+3)^(0+384),w
  7555  078E  0021               	movlb	1	; select bank1
  7556  078F  00A7               	movwf	(___aldiv@dividend+3)^(0+128)
  7557  0790  0023               	movlb	3	; select bank3
  7558  0791  0833               	movf	(_tap_total+2)^(0+384),w
  7559  0792  0021               	movlb	1	; select bank1
  7560  0793  00A6               	movwf	(___aldiv@dividend+2)^(0+128)
  7561  0794  0023               	movlb	3	; select bank3
  7562  0795  0832               	movf	(_tap_total+1)^(0+384),w
  7563  0796  0021               	movlb	1	; select bank1
  7564  0797  00A5               	movwf	(___aldiv@dividend+1)^(0+128)
  7565  0798  0023               	movlb	3	; select bank3
  7566  0799  0831               	movf	_tap_total^(0+384),w
  7567  079A  0021               	movlb	1	; select bank1
  7568  079B  00A4               	movwf	___aldiv@dividend^(0+128)
  7569  079C  3195  25AB         	fcall	___aldiv
  7570  079E  0021               	movlb	1	; select bank1
  7571  079F  0823               	movf	(?___aldiv+3)^(0+128),w
  7572  07A0  0020               	movlb	0	; select bank0
  7573  07A1  00C8               	movwf	_baseline_delay_time+3	;volatile
  7574  07A2  0021               	movlb	1	; select bank1
  7575  07A3  0822               	movf	(?___aldiv+2)^(0+128),w
  7576  07A4  0020               	movlb	0	; select bank0
  7577  07A5  00C7               	movwf	_baseline_delay_time+2	;volatile
  7578  07A6  0021               	movlb	1	; select bank1
  7579  07A7  0821               	movf	(?___aldiv+1)^(0+128),w
  7580  07A8  0020               	movlb	0	; select bank0
  7581  07A9  00C6               	movwf	_baseline_delay_time+1	;volatile
  7582  07AA  0021               	movlb	1	; select bank1
  7583  07AB  0820               	movf	?___aldiv^(0+128),w
  7584  07AC  0020               	movlb	0	; select bank0
  7585  07AD  00C5               	movwf	_baseline_delay_time	;volatile
  7586                           
  7587                           ;SwitchTap.c: 133: delay_time_changed = 1;
  7588  07AE  3001               	movlw	1
  7589  07AF  0023               	movlb	3	; select bank3
  7590  07B0  00E0               	movwf	_delay_time_changed^(0+384)
  7591  07B1  3000               	movlw	0
  7592  07B2  00E1               	movwf	(_delay_time_changed^(0+384)+1)
  7593                           
  7594                           ;SwitchTap.c: 134: tap_timer = 0;
  7595  07B3  3000               	movlw	0
  7596  07B4  0020               	movlb	0	; select bank0
  7597  07B5  00DF               	movwf	_tap_timer+3	;volatile
  7598  07B6  3000               	movlw	0
  7599  07B7  00DE               	movwf	_tap_timer+2	;volatile
  7600  07B8  3000               	movlw	0
  7601  07B9  00DD               	movwf	_tap_timer+1	;volatile
  7602  07BA  3000               	movlw	0
  7603  07BB  00DC               	movwf	_tap_timer	;volatile
  7604                           
  7605                           ;SwitchTap.c: 136: tap_iteration++;
  7606  07BC  3001               	movlw	1
  7607  07BD  0023               	movlb	3	; select bank3
  7608  07BE  07E6               	addwf	_tap_iteration^(0+384),f
  7609  07BF  3000               	movlw	0
  7610  07C0  3DE7               	addwfc	(_tap_iteration+1)^(0+384),f
  7611                           
  7612                           ;SwitchTap.c: 137: }
  7613                           ;SwitchTap.c: 139: } else if (switchTap_pressed >= 25) {
  7614  07C1  0008               	return
  7615  07C2                     l7099:	
  7616  07C2  3019               	movlw	25
  7617  07C3  0020               	movlb	0	; select bank0
  7618  07C4  0268               	subwf	_switchTap_pressed,w
  7619  07C5  1C03               	skipc
  7620  07C6  0008               	return
  7621                           
  7622                           ;SwitchTap.c: 140: switchTap_down = 0;
  7623  07C7  0022               	movlb	2	; select bank2
  7624  07C8  01DF               	clrf	_switchTap_down^(0+256)
  7625                           
  7626                           ;SwitchTap.c: 141: switchTap_state = 0;
  7627  07C9  01EE               	clrf	_switchTap_state^(0+256)
  7628                           
  7629                           ;SwitchTap.c: 147: setLongTapState(0);
  7630  07CA  3000               	movlw	0
  7631  07CB  0021               	movlb	1	; select bank1
  7632  07CC  00A0               	movwf	setLongTapState@f_state^(0+128)
  7633  07CD  00A1               	movwf	(setLongTapState@f_state+1)^(0+128)
  7634  07CE  319C  24F7         	fcall	_setLongTapState
  7635                           
  7636                           ;SwitchTap.c: 149: longTap_timer = 0;
  7637  07D0  0022               	movlb	2	; select bank2
  7638  07D1  01D5               	clrf	_longTap_timer^(0+256)	;volatile
  7639  07D2  01D6               	clrf	(_longTap_timer+1)^(0+256)	;volatile
  7640                           
  7641                           ;SwitchTap.c: 150: longTap_start = 0;
  7642  07D3  01DC               	clrf	_longTap_start^(0+256)
  7643                           
  7644                           ;SwitchTap.c: 152: switchTap_pressed = 25;
  7645  07D4  3019               	movlw	25
  7646  07D5  0021               	movlb	1	; select bank1
  7647  07D6  00BC               	movwf	??_updateSwitchTap^(0+128)
  7648  07D7  083C               	movf	??_updateSwitchTap^(0+128),w
  7649  07D8  0020               	movlb	0	; select bank0
  7650  07D9  00E8               	movwf	_switchTap_pressed
  7651  07DA  0008               	return
  7652  07DB                     __end_of_updateSwitchTap:	
  7653                           
  7654                           	psect	text4
  7655  1CF7                     __ptext4:	
  7656 ;; *************** function _setLongTapState *****************
  7657 ;; Defined at:
  7658 ;;		line 167 in file "SwitchTap.c"
  7659 ;; Parameters:    Size  Location     Type
  7660 ;;  f_state         2    0[BANK1 ] int 
  7661 ;; Auto vars:     Size  Location     Type
  7662 ;;		None
  7663 ;; Return value:  Size  Location     Type
  7664 ;;                  1    wreg      void 
  7665 ;; Registers used:
  7666 ;;		wreg, status,0
  7667 ;; Tracked objects:
  7668 ;;		On entry : 0/0
  7669 ;;		On exit  : 0/0
  7670 ;;		Unchanged: 0/0
  7671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7672 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7674 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7675 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7676 ;;Total ram usage:        4 bytes
  7677 ;; Hardware stack levels used:    1
  7678 ;; Hardware stack levels required when called:    3
  7679 ;; This function calls:
  7680 ;;		Nothing
  7681 ;; This function is called by:
  7682 ;;		_updateSwitchTap
  7683 ;; This function uses a non-reentrant model
  7684 ;;
  7685                           
  7686                           
  7687                           ;psect for function _setLongTapState
  7688  1CF7                     _setLongTapState:	
  7689                           
  7690                           ;SwitchTap.c: 168: if (longTap_state == f_state) {return;}
  7691                           
  7692                           ;incstack = 0
  7693                           ; Regs used in _setLongTapState: [wreg+status,0]
  7694  1CF7  0020               	movlb	0	; select bank0
  7695  1CF8  0854               	movf	_longTap_state,w	;volatile
  7696  1CF9  0021               	movlb	1	; select bank1
  7697  1CFA  00A2               	movwf	??_setLongTapState^(0+128)
  7698  1CFB  01A3               	clrf	(??_setLongTapState^(0+128)+1)
  7699  1CFC  0821               	movf	(setLongTapState@f_state+1)^(0+128),w
  7700  1CFD  0623               	xorwf	(??_setLongTapState+1)^(0+128),w
  7701  1CFE  1D03               	skipz
  7702  1CFF  2D02               	goto	u6625
  7703  1D00  0820               	movf	setLongTapState@f_state^(0+128),w
  7704  1D01  0622               	xorwf	??_setLongTapState^(0+128),w
  7705  1D02                     u6625:	
  7706  1D02  1903               	btfsc	3,2
  7707  1D03  0008               	return
  7708                           
  7709                           ;SwitchTap.c: 169: longTap_state = f_state;
  7710  1D04  0820               	movf	setLongTapState@f_state^(0+128),w
  7711  1D05  00A2               	movwf	??_setLongTapState^(0+128)
  7712  1D06  0822               	movf	??_setLongTapState^(0+128),w
  7713  1D07  0020               	movlb	0	; select bank0
  7714  1D08  00D4               	movwf	_longTap_state	;volatile
  7715                           
  7716                           ;SwitchTap.c: 170: LATBbits.LATB5 = f_state;
  7717  1D09  0021               	movlb	1	; select bank1
  7718  1D0A  0C20               	rrf	setLongTapState@f_state^(0+128),w
  7719  1D0B  0022               	movlb	2	; select bank2
  7720  1D0C  1C03               	skipc
  7721  1D0D  128D               	bcf	13,5	;volatile
  7722  1D0E  1803               	skipnc
  7723  1D0F  168D               	bsf	13,5	;volatile
  7724  1D10  0008               	return
  7725  1D11                     __end_of_setLongTapState:	
  7726                           
  7727                           	psect	text5
  7728  15AB                     __ptext5:	
  7729 ;; *************** function ___aldiv *****************
  7730 ;; Defined at:
  7731 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
  7732 ;; Parameters:    Size  Location     Type
  7733 ;;  divisor         4    0[BANK1 ] long 
  7734 ;;  dividend        4    4[BANK1 ] long 
  7735 ;; Auto vars:     Size  Location     Type
  7736 ;;  quotient        4   11[BANK1 ] long 
  7737 ;;  sign            1   10[BANK1 ] unsigned char 
  7738 ;;  counter         1    9[BANK1 ] unsigned char 
  7739 ;; Return value:  Size  Location     Type
  7740 ;;                  4    0[BANK1 ] long 
  7741 ;; Registers used:
  7742 ;;		wreg, status,2, status,0
  7743 ;; Tracked objects:
  7744 ;;		On entry : 0/0
  7745 ;;		On exit  : 0/0
  7746 ;;		Unchanged: 0/0
  7747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7748 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7749 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7750 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7751 ;;      Totals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7752 ;;Total ram usage:       15 bytes
  7753 ;; Hardware stack levels used:    1
  7754 ;; Hardware stack levels required when called:    3
  7755 ;; This function calls:
  7756 ;;		Nothing
  7757 ;; This function is called by:
  7758 ;;		_updateSwitchTap
  7759 ;; This function uses a non-reentrant model
  7760 ;;
  7761                           
  7762                           
  7763                           ;psect for function ___aldiv
  7764  15AB                     ___aldiv:	
  7765                           
  7766                           ;incstack = 0
  7767                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  7768  15AB  0021               	movlb	1	; select bank1
  7769  15AC  01AA               	clrf	___aldiv@sign^(0+128)
  7770  15AD  1FA3               	btfss	(___aldiv@divisor+3)^(0+128),7
  7771  15AE  2DBC               	goto	l1789
  7772  15AF  09A0               	comf	___aldiv@divisor^(0+128),f
  7773  15B0  09A1               	comf	(___aldiv@divisor+1)^(0+128),f
  7774  15B1  09A2               	comf	(___aldiv@divisor+2)^(0+128),f
  7775  15B2  09A3               	comf	(___aldiv@divisor+3)^(0+128),f
  7776  15B3  0AA0               	incf	___aldiv@divisor^(0+128),f
  7777  15B4  1903               	skipnz
  7778  15B5  0AA1               	incf	(___aldiv@divisor+1)^(0+128),f
  7779  15B6  1903               	skipnz
  7780  15B7  0AA2               	incf	(___aldiv@divisor+2)^(0+128),f
  7781  15B8  1903               	skipnz
  7782  15B9  0AA3               	incf	(___aldiv@divisor+3)^(0+128),f
  7783  15BA  01AA               	clrf	___aldiv@sign^(0+128)
  7784  15BB  0AAA               	incf	___aldiv@sign^(0+128),f
  7785  15BC                     l1789:	
  7786  15BC  1FA7               	btfss	(___aldiv@dividend+3)^(0+128),7
  7787  15BD  2DCD               	goto	l6569
  7788  15BE  09A4               	comf	___aldiv@dividend^(0+128),f
  7789  15BF  09A5               	comf	(___aldiv@dividend+1)^(0+128),f
  7790  15C0  09A6               	comf	(___aldiv@dividend+2)^(0+128),f
  7791  15C1  09A7               	comf	(___aldiv@dividend+3)^(0+128),f
  7792  15C2  0AA4               	incf	___aldiv@dividend^(0+128),f
  7793  15C3  1903               	skipnz
  7794  15C4  0AA5               	incf	(___aldiv@dividend+1)^(0+128),f
  7795  15C5  1903               	skipnz
  7796  15C6  0AA6               	incf	(___aldiv@dividend+2)^(0+128),f
  7797  15C7  1903               	skipnz
  7798  15C8  0AA7               	incf	(___aldiv@dividend+3)^(0+128),f
  7799  15C9  3001               	movlw	1
  7800  15CA  00A8               	movwf	??___aldiv^(0+128)
  7801  15CB  0828               	movf	??___aldiv^(0+128),w
  7802  15CC  06AA               	xorwf	___aldiv@sign^(0+128),f
  7803  15CD                     l6569:	
  7804  15CD  3000               	movlw	0
  7805  15CE  00AE               	movwf	(___aldiv@quotient+3)^(0+128)
  7806  15CF  3000               	movlw	0
  7807  15D0  00AD               	movwf	(___aldiv@quotient+2)^(0+128)
  7808  15D1  3000               	movlw	0
  7809  15D2  00AC               	movwf	(___aldiv@quotient+1)^(0+128)
  7810  15D3  3000               	movlw	0
  7811  15D4  00AB               	movwf	___aldiv@quotient^(0+128)
  7812  15D5  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7813  15D6  0422               	iorwf	(___aldiv@divisor+2)^(0+128),w
  7814  15D7  0421               	iorwf	(___aldiv@divisor+1)^(0+128),w
  7815  15D8  0420               	iorwf	___aldiv@divisor^(0+128),w
  7816  15D9  1903               	skipnz
  7817  15DA  2E16               	goto	l6591
  7818  15DB  01A9               	clrf	___aldiv@counter^(0+128)
  7819  15DC  0AA9               	incf	___aldiv@counter^(0+128),f
  7820  15DD                     l6577:	
  7821  15DD  1BA3               	btfsc	(___aldiv@divisor+3)^(0+128),7
  7822  15DE  2DEB               	goto	l6579
  7823  15DF  3001               	movlw	1
  7824  15E0                     u6665:	
  7825  15E0  35A0               	lslf	___aldiv@divisor^(0+128),f
  7826  15E1  0DA1               	rlf	(___aldiv@divisor+1)^(0+128),f
  7827  15E2  0DA2               	rlf	(___aldiv@divisor+2)^(0+128),f
  7828  15E3  0DA3               	rlf	(___aldiv@divisor+3)^(0+128),f
  7829  15E4  0B89               	decfsz	9,f
  7830  15E5  2DE0               	goto	u6665
  7831  15E6  3001               	movlw	1
  7832  15E7  00A8               	movwf	??___aldiv^(0+128)
  7833  15E8  0828               	movf	??___aldiv^(0+128),w
  7834  15E9  07A9               	addwf	___aldiv@counter^(0+128),f
  7835  15EA  2DDD               	goto	l6577
  7836  15EB                     l6579:	
  7837  15EB  3001               	movlw	1
  7838  15EC                     u6685:	
  7839  15EC  35AB               	lslf	___aldiv@quotient^(0+128),f
  7840  15ED  0DAC               	rlf	(___aldiv@quotient+1)^(0+128),f
  7841  15EE  0DAD               	rlf	(___aldiv@quotient+2)^(0+128),f
  7842  15EF  0DAE               	rlf	(___aldiv@quotient+3)^(0+128),f
  7843  15F0  0B89               	decfsz	9,f
  7844  15F1  2DEC               	goto	u6685
  7845  15F2  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7846  15F3  0227               	subwf	(___aldiv@dividend+3)^(0+128),w
  7847  15F4  1D03               	skipz
  7848  15F5  2E00               	goto	u6695
  7849  15F6  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7850  15F7  0226               	subwf	(___aldiv@dividend+2)^(0+128),w
  7851  15F8  1D03               	skipz
  7852  15F9  2E00               	goto	u6695
  7853  15FA  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  7854  15FB  0225               	subwf	(___aldiv@dividend+1)^(0+128),w
  7855  15FC  1D03               	skipz
  7856  15FD  2E00               	goto	u6695
  7857  15FE  0820               	movf	___aldiv@divisor^(0+128),w
  7858  15FF  0224               	subwf	___aldiv@dividend^(0+128),w
  7859  1600                     u6695:	
  7860  1600  1C03               	skipc
  7861  1601  2E0B               	goto	l6587
  7862  1602  0820               	movf	___aldiv@divisor^(0+128),w
  7863  1603  02A4               	subwf	___aldiv@dividend^(0+128),f
  7864  1604  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  7865  1605  3BA5               	subwfb	(___aldiv@dividend+1)^(0+128),f
  7866  1606  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7867  1607  3BA6               	subwfb	(___aldiv@dividend+2)^(0+128),f
  7868  1608  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7869  1609  3BA7               	subwfb	(___aldiv@dividend+3)^(0+128),f
  7870  160A  142B               	bsf	___aldiv@quotient^(0+128),0
  7871  160B                     l6587:	
  7872  160B  3001               	movlw	1
  7873  160C                     u6705:	
  7874  160C  36A3               	lsrf	(___aldiv@divisor+3)^(0+128),f
  7875  160D  0CA2               	rrf	(___aldiv@divisor+2)^(0+128),f
  7876  160E  0CA1               	rrf	(___aldiv@divisor+1)^(0+128),f
  7877  160F  0CA0               	rrf	___aldiv@divisor^(0+128),f
  7878  1610  0B89               	decfsz	9,f
  7879  1611  2E0C               	goto	u6705
  7880  1612  3001               	movlw	1
  7881  1613  02A9               	subwf	___aldiv@counter^(0+128),f
  7882  1614  1D03               	btfss	3,2
  7883  1615  2DEB               	goto	l6579
  7884  1616                     l6591:	
  7885  1616  082A               	movf	___aldiv@sign^(0+128),w
  7886  1617  1903               	btfsc	3,2
  7887  1618  2E24               	goto	l6595
  7888  1619  09AB               	comf	___aldiv@quotient^(0+128),f
  7889  161A  09AC               	comf	(___aldiv@quotient+1)^(0+128),f
  7890  161B  09AD               	comf	(___aldiv@quotient+2)^(0+128),f
  7891  161C  09AE               	comf	(___aldiv@quotient+3)^(0+128),f
  7892  161D  0AAB               	incf	___aldiv@quotient^(0+128),f
  7893  161E  1903               	skipnz
  7894  161F  0AAC               	incf	(___aldiv@quotient+1)^(0+128),f
  7895  1620  1903               	skipnz
  7896  1621  0AAD               	incf	(___aldiv@quotient+2)^(0+128),f
  7897  1622  1903               	skipnz
  7898  1623  0AAE               	incf	(___aldiv@quotient+3)^(0+128),f
  7899  1624                     l6595:	
  7900  1624  082E               	movf	(___aldiv@quotient+3)^(0+128),w
  7901  1625  00A3               	movwf	(?___aldiv+3)^(0+128)
  7902  1626  082D               	movf	(___aldiv@quotient+2)^(0+128),w
  7903  1627  00A2               	movwf	(?___aldiv+2)^(0+128)
  7904  1628  082C               	movf	(___aldiv@quotient+1)^(0+128),w
  7905  1629  00A1               	movwf	(?___aldiv+1)^(0+128)
  7906  162A  082B               	movf	___aldiv@quotient^(0+128),w
  7907  162B  00A0               	movwf	?___aldiv^(0+128)
  7908  162C  0008               	return
  7909  162D                     __end_of___aldiv:	
  7910                           
  7911                           	psect	text6
  7912  09C8                     __ptext6:	
  7913 ;; *************** function _updateSwitchBypass *****************
  7914 ;; Defined at:
  7915 ;;		line 34 in file "SwitchBypass.c"
  7916 ;; Parameters:    Size  Location     Type
  7917 ;;		None
  7918 ;; Auto vars:     Size  Location     Type
  7919 ;;		None
  7920 ;; Return value:  Size  Location     Type
  7921 ;;                  1    wreg      void 
  7922 ;; Registers used:
  7923 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7924 ;; Tracked objects:
  7925 ;;		On entry : 0/0
  7926 ;;		On exit  : 0/0
  7927 ;;		Unchanged: 0/0
  7928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7931 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7932 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7933 ;;Total ram usage:        2 bytes
  7934 ;; Hardware stack levels used:    1
  7935 ;; Hardware stack levels required when called:    8
  7936 ;; This function calls:
  7937 ;;		_setDoublePressState
  7938 ;;		_setFeedbackState
  7939 ;;		_setSwitchBypassState
  7940 ;; This function is called by:
  7941 ;;		_main
  7942 ;; This function uses a non-reentrant model
  7943 ;;
  7944                           
  7945                           
  7946                           ;psect for function _updateSwitchBypass
  7947  09C8                     _updateSwitchBypass:	
  7948                           
  7949                           ;SwitchBypass.c: 41: if (PORTEbits.RE1 == 0) {
  7950                           
  7951                           ;incstack = 0
  7952                           ; Regs used in _updateSwitchBypass: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7953  09C8  0020               	movlb	0	; select bank0
  7954  09C9  1890               	btfsc	16,1	;volatile
  7955  09CA  29DE               	goto	l6927
  7956                           
  7957                           ;SwitchBypass.c: 42: if (switchBypass_pressed > 0) {
  7958  09CB  0023               	movlb	3	; select bank3
  7959  09CC  0858               	movf	(_switchBypass_pressed+1)^(0+384),w
  7960  09CD  3A80               	xorlw	128
  7961  09CE  0021               	movlb	1	; select bank1
  7962  09CF  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7963  09D0  3080               	movlw	128
  7964  09D1  023C               	subwf	??_updateSwitchBypass^(0+128),w
  7965  09D2  1D03               	skipz
  7966  09D3  29D7               	goto	u7415
  7967  09D4  3001               	movlw	1
  7968  09D5  0023               	movlb	3	; select bank3
  7969  09D6  0257               	subwf	_switchBypass_pressed^(0+384),w
  7970  09D7                     u7415:	
  7971  09D7  1C03               	skipc
  7972  09D8  29F1               	goto	l6931
  7973                           
  7974                           ;SwitchBypass.c: 43: switchBypass_pressed--;
  7975  09D9  30FF               	movlw	255
  7976  09DA  0023               	movlb	3	; select bank3
  7977  09DB  07D7               	addwf	_switchBypass_pressed^(0+384),f
  7978  09DC  30FF               	movlw	255
  7979  09DD  29F0               	goto	L2
  7980  09DE                     l6927:	
  7981                           ;SwitchBypass.c: 44: }
  7982                           ;SwitchBypass.c: 45: } else if (switchBypass_pressed < 25) {
  7983                           
  7984  09DE  0023               	movlb	3	; select bank3
  7985  09DF  0858               	movf	(_switchBypass_pressed+1)^(0+384),w
  7986  09E0  3A80               	xorlw	128
  7987  09E1  0021               	movlb	1	; select bank1
  7988  09E2  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7989  09E3  3080               	movlw	128
  7990  09E4  023C               	subwf	??_updateSwitchBypass^(0+128),w
  7991  09E5  1D03               	skipz
  7992  09E6  29EA               	goto	u7425
  7993  09E7  3019               	movlw	25
  7994  09E8  0023               	movlb	3	; select bank3
  7995  09E9  0257               	subwf	_switchBypass_pressed^(0+384),w
  7996  09EA                     u7425:	
  7997  09EA  1803               	skipnc
  7998  09EB  29F1               	goto	l6931
  7999                           
  8000                           ;SwitchBypass.c: 46: switchBypass_pressed++;
  8001  09EC  3001               	movlw	1
  8002  09ED  0023               	movlb	3	; select bank3
  8003  09EE  07D7               	addwf	_switchBypass_pressed^(0+384),f
  8004  09EF  3000               	movlw	0
  8005  09F0                     L2:	
  8006  09F0  3DD8               	addwfc	(_switchBypass_pressed+1)^(0+384),f
  8007  09F1                     l6931:	
  8008                           
  8009                           ;SwitchBypass.c: 47: }
  8010                           ;SwitchBypass.c: 53: if (switchBypass_pressed == 0) {
  8011  09F1  0023               	movlb	3	; select bank3
  8012  09F2  0857               	movf	_switchBypass_pressed^(0+384),w
  8013  09F3  0458               	iorwf	(_switchBypass_pressed+1)^(0+384),w
  8014  09F4  1D03               	btfss	3,2
  8015  09F5  2A52               	goto	l6971
  8016                           
  8017                           ;SwitchBypass.c: 56: if (feedback_start == 0) {
  8018  09F6  0022               	movlb	2	; select bank2
  8019  09F7  085B               	movf	_feedback_start^(0+256),w
  8020  09F8  1D03               	btfss	3,2
  8021  09F9  29FE               	goto	l6939
  8022                           
  8023                           ;SwitchBypass.c: 57: feedback_start = 1;
  8024  09FA  01DB               	clrf	_feedback_start^(0+256)
  8025  09FB  0ADB               	incf	_feedback_start^(0+256),f
  8026                           
  8027                           ;SwitchBypass.c: 58: feedback_timer = 0;
  8028  09FC  01D3               	clrf	_feedback_timer^(0+256)	;volatile
  8029  09FD  01D4               	clrf	(_feedback_timer+1)^(0+256)	;volatile
  8030  09FE                     l6939:	
  8031                           
  8032                           ;SwitchBypass.c: 59: }
  8033                           ;SwitchBypass.c: 61: if (feedback_timer >= long_press_limit && feedback_state == 0 && do
      +                          ubleTap_state == 0) {
  8034  09FE  0020               	movlb	0	; select bank0
  8035  09FF  0850               	movf	_long_press_limit+1,w
  8036  0A00  0022               	movlb	2	; select bank2
  8037  0A01  0254               	subwf	(_feedback_timer+1)^(0+256),w	;volatile
  8038  0A02  1D03               	skipz
  8039  0A03  2A08               	goto	u7455
  8040  0A04  0020               	movlb	0	; select bank0
  8041  0A05  084F               	movf	_long_press_limit,w
  8042  0A06  0022               	movlb	2	; select bank2
  8043  0A07  0253               	subwf	_feedback_timer^(0+256),w	;volatile
  8044  0A08                     u7455:	
  8045  0A08  1C03               	skipc
  8046  0A09  2A27               	goto	l6953
  8047  0A0A  086C               	movf	_feedback_state^(0+256),w	;volatile
  8048  0A0B  1D03               	btfss	3,2
  8049  0A0C  2A27               	goto	l6953
  8050  0A0D  0020               	movlb	0	; select bank0
  8051  0A0E  0864               	movf	_doubleTap_state,w	;volatile
  8052  0A0F  1D03               	btfss	3,2
  8053  0A10  2A27               	goto	l6953
  8054                           
  8055                           ;SwitchBypass.c: 64: LATBbits.LATB2 = 0;
  8056  0A11  0022               	movlb	2	; select bank2
  8057  0A12  110D               	bcf	13,2	;volatile
  8058                           
  8059                           ;SwitchBypass.c: 65: if (longTap_start != 1) {
  8060  0A13  035C               	decf	_longTap_start^(0+256),w
  8061  0A14  1903               	btfsc	3,2
  8062  0A15  2A1F               	goto	l6951
  8063                           
  8064                           ;SwitchBypass.c: 66: setFeedbackState(1);
  8065  0A16  3001               	movlw	1
  8066  0A17  0021               	movlb	1	; select bank1
  8067  0A18  00A0               	movwf	setFeedbackState@f_state^(0+128)
  8068  0A19  3000               	movlw	0
  8069  0A1A  00A1               	movwf	(setFeedbackState@f_state^(0+128)+1)
  8070  0A1B  319C  24DD  3189   	fcall	_setFeedbackState
  8071                           
  8072                           ;SwitchBypass.c: 67: } else {
  8073  0A1E  2A27               	goto	l6953
  8074  0A1F                     l6951:	
  8075                           
  8076                           ;SwitchBypass.c: 68: setDoublePressState(1);
  8077  0A1F  3001               	movlw	1
  8078  0A20  0021               	movlb	1	; select bank1
  8079  0A21  00B8               	movwf	setDoublePressState@f_state^(0+128)
  8080  0A22  3000               	movlw	0
  8081  0A23  00B9               	movwf	(setDoublePressState@f_state^(0+128)+1)
  8082  0A24  3190  2050  3189   	fcall	_setDoublePressState
  8083  0A27                     l6953:	
  8084                           
  8085                           ;SwitchBypass.c: 69: }
  8086                           ;SwitchBypass.c: 70: }
  8087                           ;SwitchBypass.c: 72: if (doubleTap_state == 0 && feedback_state == 0) {
  8088  0A27  0020               	movlb	0	; select bank0
  8089  0A28  0864               	movf	_doubleTap_state,w	;volatile
  8090  0A29  1D03               	btfss	3,2
  8091  0A2A  2A4E               	goto	l1225
  8092  0A2B  0022               	movlb	2	; select bank2
  8093  0A2C  086C               	movf	_feedback_state^(0+256),w	;volatile
  8094  0A2D  1D03               	btfss	3,2
  8095  0A2E  2A4E               	goto	l1225
  8096                           
  8097                           ;SwitchBypass.c: 73: if (switchBypass_state == 1) {
  8098  0A2F  0020               	movlb	0	; select bank0
  8099  0A30  0357               	decf	_switchBypass_state,w
  8100  0A31  1D03               	btfss	3,2
  8101  0A32  2A3F               	goto	l6965
  8102                           
  8103                           ;SwitchBypass.c: 75: if (switchBypass_up == 1) {
  8104  0A33  0023               	movlb	3	; select bank3
  8105  0A34  0364               	decf	_switchBypass_up^(0+384),w
  8106  0A35  0465               	iorwf	(_switchBypass_up+1)^(0+384),w
  8107  0A36  1D03               	btfss	3,2
  8108  0A37  2A4E               	goto	l1225
  8109                           
  8110                           ;SwitchBypass.c: 76: currentBypassState = 1;
  8111  0A38  01E9               	clrf	_currentBypassState^(0+384)
  8112  0A39  0AE9               	incf	_currentBypassState^(0+384),f
  8113                           
  8114                           ;SwitchBypass.c: 77: switchBypass_toggle = 1;
  8115  0A3A  3001               	movlw	1
  8116  0A3B  00D9               	movwf	_switchBypass_toggle^(0+384)
  8117  0A3C  3000               	movlw	0
  8118  0A3D  00DA               	movwf	(_switchBypass_toggle^(0+384)+1)
  8119                           
  8120                           ;SwitchBypass.c: 78: }
  8121                           ;SwitchBypass.c: 93: } else {
  8122  0A3E  2A4E               	goto	l1225
  8123  0A3F                     l6965:	
  8124                           
  8125                           ;SwitchBypass.c: 94: if (bypass_turning_on != 1) {
  8126  0A3F  0022               	movlb	2	; select bank2
  8127  0A40  035A               	decf	_bypass_turning_on^(0+256),w
  8128  0A41  1903               	btfsc	3,2
  8129  0A42  2A4E               	goto	l1225
  8130                           
  8131                           ;SwitchBypass.c: 96: currentBypassState = 0;
  8132  0A43  0023               	movlb	3	; select bank3
  8133  0A44  01E9               	clrf	_currentBypassState^(0+384)
  8134                           
  8135                           ;SwitchBypass.c: 98: bypass_turning_on = 1;
  8136  0A45  0022               	movlb	2	; select bank2
  8137  0A46  01DA               	clrf	_bypass_turning_on^(0+256)
  8138  0A47  0ADA               	incf	_bypass_turning_on^(0+256),f
  8139                           
  8140                           ;SwitchBypass.c: 99: switchBypass_toggle = 0;
  8141  0A48  0023               	movlb	3	; select bank3
  8142  0A49  01D9               	clrf	_switchBypass_toggle^(0+384)
  8143  0A4A  01DA               	clrf	(_switchBypass_toggle+1)^(0+384)
  8144                           
  8145                           ;SwitchBypass.c: 101: feedback_state = 0;
  8146  0A4B  0022               	movlb	2	; select bank2
  8147  0A4C  01EC               	clrf	_feedback_state^(0+256)	;volatile
  8148                           
  8149                           ;SwitchBypass.c: 102: feedback_start = 0;
  8150  0A4D  01DB               	clrf	_feedback_start^(0+256)
  8151  0A4E                     l1225:	
  8152                           
  8153                           ;SwitchBypass.c: 103: }
  8154                           ;SwitchBypass.c: 104: }
  8155                           ;SwitchBypass.c: 106: }
  8156                           ;SwitchBypass.c: 107: switchBypass_up = 0;
  8157  0A4E  0023               	movlb	3	; select bank3
  8158  0A4F  01E4               	clrf	_switchBypass_up^(0+384)
  8159  0A50  01E5               	clrf	(_switchBypass_up+1)^(0+384)
  8160                           
  8161                           ;SwitchBypass.c: 108: } else if (switchBypass_pressed >= 25) {
  8162  0A51  0008               	return
  8163  0A52                     l6971:	
  8164  0A52  0858               	movf	(_switchBypass_pressed+1)^(0+384),w
  8165  0A53  3A80               	xorlw	128
  8166  0A54  0021               	movlb	1	; select bank1
  8167  0A55  00BC               	movwf	??_updateSwitchBypass^(0+128)
  8168  0A56  3080               	movlw	128
  8169  0A57  023C               	subwf	??_updateSwitchBypass^(0+128),w
  8170  0A58  1D03               	skipz
  8171  0A59  2A5D               	goto	u7545
  8172  0A5A  3019               	movlw	25
  8173  0A5B  0023               	movlb	3	; select bank3
  8174  0A5C  0257               	subwf	_switchBypass_pressed^(0+384),w
  8175  0A5D                     u7545:	
  8176  0A5D  1C03               	skipc
  8177  0A5E  0008               	return
  8178                           
  8179                           ;SwitchBypass.c: 109: if (doubleTap_state == 1) {
  8180  0A5F  0020               	movlb	0	; select bank0
  8181  0A60  0364               	decf	_doubleTap_state,w	;volatile
  8182  0A61  1D03               	btfss	3,2
  8183  0A62  2A6C               	goto	l6977
  8184                           
  8185                           ;SwitchBypass.c: 110: setSwitchBypassState(currentBypassState);
  8186  0A63  0023               	movlb	3	; select bank3
  8187  0A64  0869               	movf	_currentBypassState^(0+384),w
  8188  0A65  0021               	movlb	1	; select bank1
  8189  0A66  00BC               	movwf	??_updateSwitchBypass^(0+128)
  8190  0A67  01BD               	clrf	(??_updateSwitchBypass^(0+128)+1)
  8191  0A68  083C               	movf	??_updateSwitchBypass^(0+128),w
  8192  0A69  00B2               	movwf	setSwitchBypassState@f_state^(0+128)
  8193  0A6A  083D               	movf	(??_updateSwitchBypass+1)^(0+128),w
  8194  0A6B  2A88               	goto	L3
  8195  0A6C                     l6977:	
  8196                           ;SwitchBypass.c: 111: } else if (bypass_turning_on == 1 || feedback_state == 1) {
  8197                           
  8198  0A6C  0022               	movlb	2	; select bank2
  8199  0A6D  035A               	decf	_bypass_turning_on^(0+256),w
  8200  0A6E  1D03               	btfss	3,2
  8201  0A6F  036C               	decf	_feedback_state^(0+256),w	;volatile
  8202  0A70  1D03               	btfss	3,2
  8203  0A71  2A78               	goto	l6983
  8204                           
  8205                           ;SwitchBypass.c: 112: setSwitchBypassState(1);
  8206  0A72  3001               	movlw	1
  8207  0A73  0021               	movlb	1	; select bank1
  8208  0A74  00B2               	movwf	setSwitchBypassState@f_state^(0+128)
  8209  0A75  3000               	movlw	0
  8210  0A76  00B3               	movwf	(setSwitchBypassState@f_state^(0+128)+1)
  8211  0A77  2A89               	goto	L4
  8212  0A78                     l6983:	
  8213                           ;SwitchBypass.c: 113: } else if (switchBypass_toggle == 1 && feedback_state == 0 && doub
      +                          leTap_state == 0) {
  8214                           
  8215  0A78  0023               	movlb	3	; select bank3
  8216  0A79  0359               	decf	_switchBypass_toggle^(0+384),w
  8217  0A7A  045A               	iorwf	(_switchBypass_toggle+1)^(0+384),w
  8218  0A7B  1D03               	btfss	3,2
  8219  0A7C  2A8C               	goto	l6991
  8220  0A7D  0022               	movlb	2	; select bank2
  8221  0A7E  086C               	movf	_feedback_state^(0+256),w	;volatile
  8222  0A7F  1D03               	btfss	3,2
  8223  0A80  2A8C               	goto	l6991
  8224  0A81  0020               	movlb	0	; select bank0
  8225  0A82  0864               	movf	_doubleTap_state,w	;volatile
  8226  0A83  1D03               	btfss	3,2
  8227  0A84  2A8C               	goto	l6991
  8228                           
  8229                           ;SwitchBypass.c: 114: setSwitchBypassState(0);
  8230  0A85  3000               	movlw	0
  8231  0A86  0021               	movlb	1	; select bank1
  8232  0A87  00B2               	movwf	setSwitchBypassState@f_state^(0+128)
  8233  0A88                     L3:	
  8234  0A88  00B3               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
  8235  0A89                     L4:	
  8236  0A89  3192  2222  3189   	fcall	_setSwitchBypassState
  8237  0A8C                     l6991:	
  8238                           
  8239                           ;SwitchBypass.c: 115: }
  8240                           ;SwitchBypass.c: 118: LATBbits.LATB2 = switchBypass_state;
  8241  0A8C  0020               	movlb	0	; select bank0
  8242  0A8D  0C57               	rrf	_switchBypass_state,w
  8243  0A8E  0022               	movlb	2	; select bank2
  8244  0A8F  1C03               	skipc
  8245  0A90  110D               	bcf	13,2	;volatile
  8246  0A91  1803               	skipnc
  8247  0A92  150D               	bsf	13,2	;volatile
  8248                           
  8249                           ;SwitchBypass.c: 120: setFeedbackState(0);
  8250  0A93  3000               	movlw	0
  8251  0A94  0021               	movlb	1	; select bank1
  8252  0A95  00A0               	movwf	setFeedbackState@f_state^(0+128)
  8253  0A96  00A1               	movwf	(setFeedbackState@f_state+1)^(0+128)
  8254  0A97  319C  24DD  3189   	fcall	_setFeedbackState
  8255                           
  8256                           ;SwitchBypass.c: 121: setDoublePressState(0);
  8257  0A9A  3000               	movlw	0
  8258  0A9B  0021               	movlb	1	; select bank1
  8259  0A9C  00B8               	movwf	setDoublePressState@f_state^(0+128)
  8260  0A9D  00B9               	movwf	(setDoublePressState@f_state+1)^(0+128)
  8261  0A9E  3190  2050         	fcall	_setDoublePressState
  8262                           
  8263                           ;SwitchBypass.c: 122: feedback_start = 0;
  8264  0AA0  0022               	movlb	2	; select bank2
  8265  0AA1  01DB               	clrf	_feedback_start^(0+256)
  8266                           
  8267                           ;SwitchBypass.c: 123: bypass_turning_on = 0;
  8268  0AA2  01DA               	clrf	_bypass_turning_on^(0+256)
  8269                           
  8270                           ;SwitchBypass.c: 124: switchBypass_toggle = 0;
  8271  0AA3  0023               	movlb	3	; select bank3
  8272  0AA4  01D9               	clrf	_switchBypass_toggle^(0+384)
  8273  0AA5  01DA               	clrf	(_switchBypass_toggle+1)^(0+384)
  8274                           
  8275                           ;SwitchBypass.c: 125: switchBypass_up = 1;
  8276  0AA6  3001               	movlw	1
  8277  0AA7  00E4               	movwf	_switchBypass_up^(0+384)
  8278  0AA8  3000               	movlw	0
  8279  0AA9  00E5               	movwf	(_switchBypass_up^(0+384)+1)
  8280                           
  8281                           ;SwitchBypass.c: 127: switchBypass_pressed = 25;
  8282  0AAA  3019               	movlw	25
  8283  0AAB  00D7               	movwf	_switchBypass_pressed^(0+384)
  8284  0AAC  3000               	movlw	0
  8285  0AAD  00D8               	movwf	(_switchBypass_pressed^(0+384)+1)
  8286  0AAE  0008               	return
  8287  0AAF                     __end_of_updateSwitchBypass:	
  8288                           
  8289                           	psect	text7
  8290  1CDD                     __ptext7:	
  8291 ;; *************** function _setFeedbackState *****************
  8292 ;; Defined at:
  8293 ;;		line 151 in file "SwitchBypass.c"
  8294 ;; Parameters:    Size  Location     Type
  8295 ;;  f_state         2    0[BANK1 ] int 
  8296 ;; Auto vars:     Size  Location     Type
  8297 ;;		None
  8298 ;; Return value:  Size  Location     Type
  8299 ;;                  1    wreg      void 
  8300 ;; Registers used:
  8301 ;;		wreg, status,0
  8302 ;; Tracked objects:
  8303 ;;		On entry : 0/0
  8304 ;;		On exit  : 0/0
  8305 ;;		Unchanged: 0/0
  8306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8307 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8308 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8309 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8310 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8311 ;;Total ram usage:        4 bytes
  8312 ;; Hardware stack levels used:    1
  8313 ;; Hardware stack levels required when called:    3
  8314 ;; This function calls:
  8315 ;;		Nothing
  8316 ;; This function is called by:
  8317 ;;		_updateSwitchBypass
  8318 ;; This function uses a non-reentrant model
  8319 ;;
  8320                           
  8321                           
  8322                           ;psect for function _setFeedbackState
  8323  1CDD                     _setFeedbackState:	
  8324                           
  8325                           ;SwitchBypass.c: 152: if (feedback_state == f_state) {return;}
  8326                           
  8327                           ;incstack = 0
  8328                           ; Regs used in _setFeedbackState: [wreg+status,0]
  8329  1CDD  0022               	movlb	2	; select bank2
  8330  1CDE  086C               	movf	_feedback_state^(0+256),w	;volatile
  8331  1CDF  0021               	movlb	1	; select bank1
  8332  1CE0  00A2               	movwf	??_setFeedbackState^(0+128)
  8333  1CE1  01A3               	clrf	(??_setFeedbackState^(0+128)+1)
  8334  1CE2  0821               	movf	(setFeedbackState@f_state+1)^(0+128),w
  8335  1CE3  0623               	xorwf	(??_setFeedbackState+1)^(0+128),w
  8336  1CE4  1D03               	skipz
  8337  1CE5  2CE8               	goto	u6575
  8338  1CE6  0820               	movf	setFeedbackState@f_state^(0+128),w
  8339  1CE7  0622               	xorwf	??_setFeedbackState^(0+128),w
  8340  1CE8                     u6575:	
  8341  1CE8  1903               	btfsc	3,2
  8342  1CE9  0008               	return
  8343                           
  8344                           ;SwitchBypass.c: 153: feedback_state = f_state;
  8345  1CEA  0820               	movf	setFeedbackState@f_state^(0+128),w
  8346  1CEB  00A2               	movwf	??_setFeedbackState^(0+128)
  8347  1CEC  0822               	movf	??_setFeedbackState^(0+128),w
  8348  1CED  0022               	movlb	2	; select bank2
  8349  1CEE  00EC               	movwf	_feedback_state^(0+256)	;volatile
  8350                           
  8351                           ;SwitchBypass.c: 154: LATBbits.LATB3 = f_state;
  8352  1CEF  0021               	movlb	1	; select bank1
  8353  1CF0  0C20               	rrf	setFeedbackState@f_state^(0+128),w
  8354  1CF1  0022               	movlb	2	; select bank2
  8355  1CF2  1C03               	skipc
  8356  1CF3  118D               	bcf	13,3	;volatile
  8357  1CF4  1803               	skipnc
  8358  1CF5  158D               	bsf	13,3	;volatile
  8359  1CF6  0008               	return
  8360  1CF7                     __end_of_setFeedbackState:	
  8361                           
  8362                           	psect	text8
  8363  1050                     __ptext8:	
  8364 ;; *************** function _setDoublePressState *****************
  8365 ;; Defined at:
  8366 ;;		line 21 in file "preset_programming.c"
  8367 ;; Parameters:    Size  Location     Type
  8368 ;;  f_state         2   24[BANK1 ] int 
  8369 ;; Auto vars:     Size  Location     Type
  8370 ;;		None
  8371 ;; Return value:  Size  Location     Type
  8372 ;;                  1    wreg      void 
  8373 ;; Registers used:
  8374 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8375 ;; Tracked objects:
  8376 ;;		On entry : 0/0
  8377 ;;		On exit  : 0/0
  8378 ;;		Unchanged: 0/0
  8379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8380 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8382 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8383 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8384 ;;Total ram usage:        4 bytes
  8385 ;; Hardware stack levels used:    1
  8386 ;; Hardware stack levels required when called:    7
  8387 ;; This function calls:
  8388 ;;		_resetRingLEDs
  8389 ;;		_setPedalMode
  8390 ;;		_setPresetDisplay
  8391 ;;		_showSave
  8392 ;;		_wait_ms
  8393 ;; This function is called by:
  8394 ;;		_updateSwitchBypass
  8395 ;;		_updateSwitchTap
  8396 ;; This function uses a non-reentrant model
  8397 ;;
  8398                           
  8399                           
  8400                           ;psect for function _setDoublePressState
  8401  1050                     _setDoublePressState:	
  8402                           
  8403                           ;preset_programming.c: 22: if (doubleTap_state == f_state) {return;}
  8404                           
  8405                           ;incstack = 0
  8406                           ; Regs used in _setDoublePressState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8407  1050  0020               	movlb	0	; select bank0
  8408  1051  0864               	movf	_doubleTap_state,w	;volatile
  8409  1052  0021               	movlb	1	; select bank1
  8410  1053  00BA               	movwf	??_setDoublePressState^(0+128)
  8411  1054  01BB               	clrf	(??_setDoublePressState^(0+128)+1)
  8412  1055  0839               	movf	(setDoublePressState@f_state+1)^(0+128),w
  8413  1056  063B               	xorwf	(??_setDoublePressState+1)^(0+128),w
  8414  1057  1D03               	skipz
  8415  1058  285B               	goto	u6585
  8416  1059  0838               	movf	setDoublePressState@f_state^(0+128),w
  8417  105A  063A               	xorwf	??_setDoublePressState^(0+128),w
  8418  105B                     u6585:	
  8419  105B  1903               	btfsc	3,2
  8420  105C  0008               	return
  8421                           
  8422                           ;preset_programming.c: 23: doubleTap_state = f_state;
  8423  105D  0838               	movf	setDoublePressState@f_state^(0+128),w
  8424  105E  00BA               	movwf	??_setDoublePressState^(0+128)
  8425  105F  083A               	movf	??_setDoublePressState^(0+128),w
  8426  1060  0020               	movlb	0	; select bank0
  8427  1061  00E4               	movwf	_doubleTap_state	;volatile
  8428                           
  8429                           ;preset_programming.c: 24: if (f_state == 1) {
  8430  1062  0021               	movlb	1	; select bank1
  8431  1063  0338               	decf	setDoublePressState@f_state^(0+128),w
  8432  1064  0439               	iorwf	(setDoublePressState@f_state+1)^(0+128),w
  8433  1065  1D03               	btfss	3,2
  8434  1066  286A               	goto	l6533
  8435                           
  8436                           ;preset_programming.c: 25: LATBbits.LATB4 = 0;
  8437  1067  0022               	movlb	2	; select bank2
  8438  1068  120D               	bcf	13,4	;volatile
  8439                           
  8440                           ;preset_programming.c: 27: LATBbits.LATB5 = 0;
  8441  1069  128D               	bcf	13,5	;volatile
  8442  106A                     l6533:	
  8443                           
  8444                           ;preset_programming.c: 30: }
  8445                           ;preset_programming.c: 32: if (doubleTap_state == 1) {
  8446  106A  0020               	movlb	0	; select bank0
  8447  106B  0364               	decf	_doubleTap_state,w	;volatile
  8448  106C  1D03               	btfss	3,2
  8449  106D  2886               	goto	l6549
  8450                           
  8451                           ;preset_programming.c: 33: if (presetSaveMode == 0) {
  8452  106E  0866               	movf	_presetSaveMode,w
  8453  106F  1D03               	btfss	3,2
  8454  1070  287B               	goto	l6541
  8455                           
  8456                           ;preset_programming.c: 34: presetSaveMode = 1;
  8457  1071  01E6               	clrf	_presetSaveMode
  8458  1072  0AE6               	incf	_presetSaveMode,f
  8459                           
  8460                           ;preset_programming.c: 35: LATBbits.LATB1 = 0;
  8461  1073  0022               	movlb	2	; select bank2
  8462  1074  108D               	bcf	13,1	;volatile
  8463                           
  8464                           ;preset_programming.c: 36: setPresetDisplay(presetChannel);
  8465  1075  0020               	movlb	0	; select bank0
  8466  1076  0856               	movf	_presetChannel,w
  8467  1077  319E  26D4  3190   	fcall	_setPresetDisplay
  8468                           
  8469                           ;preset_programming.c: 37: } else {
  8470  107A  2886               	goto	l6549
  8471  107B                     l6541:	
  8472                           
  8473                           ;preset_programming.c: 39: presetSaveMode = 0;
  8474  107B  0020               	movlb	0	; select bank0
  8475  107C  01E6               	clrf	_presetSaveMode
  8476                           
  8477                           ;preset_programming.c: 40: setPedalMode();
  8478  107D  3187  27DB  3190   	fcall	_setPedalMode
  8479                           
  8480                           ;preset_programming.c: 41: resetRingLEDs();
  8481  1080  319C  24C3  3190   	fcall	_resetRingLEDs
  8482                           
  8483                           ;preset_programming.c: 42: showSave();
  8484  1083  319C  2497  3190   	fcall	_showSave
  8485  1086                     l6549:	
  8486                           
  8487                           ;preset_programming.c: 44: }
  8488                           ;preset_programming.c: 45: }
  8489                           ;preset_programming.c: 47: wait_ms(20);
  8490  1086  3014               	movlw	20
  8491  1087  0021               	movlb	1	; select bank1
  8492  1088  00AC               	movwf	wait_ms@timeSec^(0+128)
  8493  1089  3000               	movlw	0
  8494  108A  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8495  108B  319E  2630         	fcall	_wait_ms
  8496  108D  0008               	return
  8497  108E                     __end_of_setDoublePressState:	
  8498                           
  8499                           	psect	text9
  8500  1C97                     __ptext9:	
  8501 ;; *************** function _showSave *****************
  8502 ;; Defined at:
  8503 ;;		line 112 in file "LEDs.c"
  8504 ;; Parameters:    Size  Location     Type
  8505 ;;		None
  8506 ;; Auto vars:     Size  Location     Type
  8507 ;;		None
  8508 ;; Return value:  Size  Location     Type
  8509 ;;                  1    wreg      void 
  8510 ;; Registers used:
  8511 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8512 ;; Tracked objects:
  8513 ;;		On entry : 0/0
  8514 ;;		On exit  : 0/0
  8515 ;;		Unchanged: 0/0
  8516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8518 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8519 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8520 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8521 ;;Total ram usage:        1 bytes
  8522 ;; Hardware stack levels used:    1
  8523 ;; Hardware stack levels required when called:    6
  8524 ;; This function calls:
  8525 ;;		_ring_tactiles
  8526 ;;		_solidring_tactiles
  8527 ;; This function is called by:
  8528 ;;		_setDoublePressState
  8529 ;; This function uses a non-reentrant model
  8530 ;;
  8531                           
  8532                           
  8533                           ;psect for function _showSave
  8534  1C97                     _showSave:	
  8535                           
  8536                           ;LEDs.c: 113: suspend_blink = 1;
  8537                           
  8538                           ;incstack = 0
  8539                           ; Regs used in _showSave: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8540  1C97  3001               	movlw	1
  8541  1C98  0021               	movlb	1	; select bank1
  8542  1C99  00B7               	movwf	??_showSave^(0+128)
  8543  1C9A  0837               	movf	??_showSave^(0+128),w
  8544  1C9B  0020               	movlb	0	; select bank0
  8545  1C9C  00E7               	movwf	_suspend_blink	;volatile
  8546                           
  8547                           ;LEDs.c: 114: ring_tactiles();
  8548  1C9D  3193  2307  319C   	fcall	_ring_tactiles
  8549                           
  8550                           ;LEDs.c: 115: ring_tactiles();
  8551  1CA0  3193  2307  319C   	fcall	_ring_tactiles
  8552                           
  8553                           ;LEDs.c: 116: solidring_tactiles();
  8554  1CA3  3190  208E  319C   	fcall	_solidring_tactiles
  8555                           
  8556                           ;LEDs.c: 117: solidring_tactiles();
  8557  1CA6  3190  208E         	fcall	_solidring_tactiles
  8558                           
  8559                           ;LEDs.c: 118: suspend_blink = 0;
  8560  1CA8  0020               	movlb	0	; select bank0
  8561  1CA9  01E7               	clrf	_suspend_blink	;volatile
  8562  1CAA  0008               	return
  8563  1CAB                     __end_of_showSave:	
  8564                           
  8565                           	psect	text10
  8566  108E                     __ptext10:	
  8567 ;; *************** function _solidring_tactiles *****************
  8568 ;; Defined at:
  8569 ;;		line 208 in file "LEDs.c"
  8570 ;; Parameters:    Size  Location     Type
  8571 ;;		None
  8572 ;; Auto vars:     Size  Location     Type
  8573 ;;  ring_delay      1   20[BANK1 ] unsigned char 
  8574 ;; Return value:  Size  Location     Type
  8575 ;;                  1    wreg      void 
  8576 ;; Registers used:
  8577 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8578 ;; Tracked objects:
  8579 ;;		On entry : 0/0
  8580 ;;		On exit  : 0/0
  8581 ;;		Unchanged: 0/0
  8582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8584 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8585 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8586 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8587 ;;Total ram usage:        3 bytes
  8588 ;; Hardware stack levels used:    1
  8589 ;; Hardware stack levels required when called:    5
  8590 ;; This function calls:
  8591 ;;		_set_leds_bottom
  8592 ;;		_set_leds_top
  8593 ;;		_wait_ms
  8594 ;; This function is called by:
  8595 ;;		_showSave
  8596 ;;		_showBootSequence
  8597 ;; This function uses a non-reentrant model
  8598 ;;
  8599                           
  8600                           
  8601                           ;psect for function _solidring_tactiles
  8602  108E                     _solidring_tactiles:	
  8603                           
  8604                           ;LEDs.c: 209: uint8_t ring_delay = 30;
  8605                           
  8606                           ;incstack = 0
  8607                           ; Regs used in _solidring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8608  108E  301E               	movlw	30
  8609  108F  0021               	movlb	1	; select bank1
  8610  1090  00B2               	movwf	??_solidring_tactiles^(0+128)
  8611  1091  0832               	movf	??_solidring_tactiles^(0+128),w
  8612  1092  00B4               	movwf	solidring_tactiles@ring_delay^(0+128)
  8613                           
  8614                           ;LEDs.c: 210: set_leds_top(100, 1);
  8615  1093  3064               	movlw	100
  8616  1094  00A0               	movwf	set_leds_top@x^(0+128)
  8617  1095  3000               	movlw	0
  8618  1096  00A1               	movwf	(set_leds_top@x^(0+128)+1)
  8619  1097  3001               	movlw	1
  8620  1098  00A2               	movwf	set_leds_top@ledState^(0+128)
  8621  1099  3000               	movlw	0
  8622  109A  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8623  109B  3193  23FA  3190   	fcall	_set_leds_top
  8624                           
  8625                           ;LEDs.c: 211: set_leds_bottom(100);
  8626  109E  3064               	movlw	100
  8627  109F  0021               	movlb	1	; select bank1
  8628  10A0  00A0               	movwf	set_leds_bottom@x^(0+128)
  8629  10A1  3000               	movlw	0
  8630  10A2  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8631  10A3  319F  270E  3190   	fcall	_set_leds_bottom
  8632                           
  8633                           ;LEDs.c: 212: wait_ms(ring_delay);
  8634  10A6  0021               	movlb	1	; select bank1
  8635  10A7  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8636  10A8  00B2               	movwf	??_solidring_tactiles^(0+128)
  8637  10A9  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8638  10AA  0832               	movf	??_solidring_tactiles^(0+128),w
  8639  10AB  00AC               	movwf	wait_ms@timeSec^(0+128)
  8640  10AC  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8641  10AD  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8642  10AE  319E  2630  3190   	fcall	_wait_ms
  8643                           
  8644                           ;LEDs.c: 214: set_leds_top(0, 1);
  8645  10B1  3000               	movlw	0
  8646  10B2  0021               	movlb	1	; select bank1
  8647  10B3  00A0               	movwf	set_leds_top@x^(0+128)
  8648  10B4  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8649  10B5  3001               	movlw	1
  8650  10B6  00A2               	movwf	set_leds_top@ledState^(0+128)
  8651  10B7  3000               	movlw	0
  8652  10B8  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8653  10B9  3193  23FA  3190   	fcall	_set_leds_top
  8654                           
  8655                           ;LEDs.c: 215: set_leds_bottom(0);
  8656  10BC  3000               	movlw	0
  8657  10BD  0021               	movlb	1	; select bank1
  8658  10BE  00A0               	movwf	set_leds_bottom@x^(0+128)
  8659  10BF  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8660  10C0  319F  270E  3190   	fcall	_set_leds_bottom
  8661                           
  8662                           ;LEDs.c: 216: wait_ms(ring_delay);
  8663  10C3  0021               	movlb	1	; select bank1
  8664  10C4  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8665  10C5  00B2               	movwf	??_solidring_tactiles^(0+128)
  8666  10C6  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8667  10C7  0832               	movf	??_solidring_tactiles^(0+128),w
  8668  10C8  00AC               	movwf	wait_ms@timeSec^(0+128)
  8669  10C9  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8670  10CA  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8671  10CB  319E  2630         	fcall	_wait_ms
  8672  10CD  0008               	return
  8673  10CE                     __end_of_solidring_tactiles:	
  8674                           
  8675                           	psect	text11
  8676  1307                     __ptext11:	
  8677 ;; *************** function _ring_tactiles *****************
  8678 ;; Defined at:
  8679 ;;		line 196 in file "LEDs.c"
  8680 ;; Parameters:    Size  Location     Type
  8681 ;;		None
  8682 ;; Auto vars:     Size  Location     Type
  8683 ;;  iLed            2   21[BANK1 ] int 
  8684 ;;  iLed            2   19[BANK1 ] int 
  8685 ;; Return value:  Size  Location     Type
  8686 ;;                  1    wreg      void 
  8687 ;; Registers used:
  8688 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8689 ;; Tracked objects:
  8690 ;;		On entry : 0/0
  8691 ;;		On exit  : 0/0
  8692 ;;		Unchanged: 0/0
  8693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8695 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8696 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8697 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8698 ;;Total ram usage:        5 bytes
  8699 ;; Hardware stack levels used:    1
  8700 ;; Hardware stack levels required when called:    5
  8701 ;; This function calls:
  8702 ;;		_set_leds_bottom
  8703 ;;		_set_leds_top
  8704 ;;		_wait_ms
  8705 ;; This function is called by:
  8706 ;;		_showSave
  8707 ;; This function uses a non-reentrant model
  8708 ;;
  8709                           
  8710                           
  8711                           ;psect for function _ring_tactiles
  8712  1307                     _ring_tactiles:	
  8713                           
  8714                           ;LEDs.c: 197: for (int iLed = 1; iLed < 7; iLed++) {
  8715                           
  8716                           ;incstack = 0
  8717                           ; Regs used in _ring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8718  1307  3001               	movlw	1
  8719  1308  0021               	movlb	1	; select bank1
  8720  1309  00B3               	movwf	ring_tactiles@iLed^(0+128)
  8721  130A  3000               	movlw	0
  8722  130B  00B4               	movwf	(ring_tactiles@iLed^(0+128)+1)
  8723  130C  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8724  130D  3A80               	xorlw	128
  8725  130E  00B2               	movwf	??_ring_tactiles^(0+128)
  8726  130F  3080               	movlw	128
  8727  1310  0232               	subwf	??_ring_tactiles^(0+128),w
  8728  1311  1D03               	skipz
  8729  1312  2B15               	goto	u6215
  8730  1313  3007               	movlw	7
  8731  1314  0233               	subwf	ring_tactiles@iLed^(0+128),w
  8732  1315                     u6215:	
  8733  1315  1803               	btfsc	3,0
  8734  1316  2B3B               	goto	l6257
  8735  1317                     l6249:	
  8736                           
  8737                           ;LEDs.c: 198: set_leds_top(iLed, 1);
  8738  1317  0021               	movlb	1	; select bank1
  8739  1318  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8740  1319  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8741  131A  0833               	movf	ring_tactiles@iLed^(0+128),w
  8742  131B  00A0               	movwf	set_leds_top@x^(0+128)
  8743  131C  3001               	movlw	1
  8744  131D  00A2               	movwf	set_leds_top@ledState^(0+128)
  8745  131E  3000               	movlw	0
  8746  131F  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8747  1320  3193  23FA  3193   	fcall	_set_leds_top
  8748                           
  8749                           ;LEDs.c: 199: wait_ms(5);
  8750  1323  3005               	movlw	5
  8751  1324  0021               	movlb	1	; select bank1
  8752  1325  00AC               	movwf	wait_ms@timeSec^(0+128)
  8753  1326  3000               	movlw	0
  8754  1327  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8755  1328  319E  2630  3193   	fcall	_wait_ms
  8756  132B  3001               	movlw	1
  8757  132C  0021               	movlb	1	; select bank1
  8758  132D  07B3               	addwf	ring_tactiles@iLed^(0+128),f
  8759  132E  3000               	movlw	0
  8760  132F  3DB4               	addwfc	(ring_tactiles@iLed+1)^(0+128),f
  8761  1330  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8762  1331  3A80               	xorlw	128
  8763  1332  00B2               	movwf	??_ring_tactiles^(0+128)
  8764  1333  3080               	movlw	128
  8765  1334  0232               	subwf	??_ring_tactiles^(0+128),w
  8766  1335  1D03               	skipz
  8767  1336  2B39               	goto	u6225
  8768  1337  3007               	movlw	7
  8769  1338  0233               	subwf	ring_tactiles@iLed^(0+128),w
  8770  1339                     u6225:	
  8771  1339  1C03               	skipc
  8772  133A  2B17               	goto	l6249
  8773  133B                     l6257:	
  8774                           
  8775                           ;LEDs.c: 200: }
  8776                           ;LEDs.c: 201: for (int iLed = 5; iLed > -1; iLed--) {
  8777  133B  3005               	movlw	5
  8778  133C  0021               	movlb	1	; select bank1
  8779  133D  00B5               	movwf	ring_tactiles@iLed_1489^(0+128)
  8780  133E  3000               	movlw	0
  8781  133F  00B6               	movwf	(ring_tactiles@iLed_1489^(0+128)+1)
  8782  1340                     L5:	
  8783  1340  1BB6               	btfsc	(ring_tactiles@iLed_1489+1)^(0+128),7
  8784  1341  0008               	return
  8785                           
  8786                           ;LEDs.c: 202: set_leds_bottom(iLed);
  8787  1342  0836               	movf	(ring_tactiles@iLed_1489+1)^(0+128),w
  8788  1343  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8789  1344  0835               	movf	ring_tactiles@iLed_1489^(0+128),w
  8790  1345  00A0               	movwf	set_leds_bottom@x^(0+128)
  8791  1346  319F  270E  3193   	fcall	_set_leds_bottom
  8792                           
  8793                           ;LEDs.c: 203: wait_ms(5);
  8794  1349  3005               	movlw	5
  8795  134A  0021               	movlb	1	; select bank1
  8796  134B  00AC               	movwf	wait_ms@timeSec^(0+128)
  8797  134C  3000               	movlw	0
  8798  134D  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8799  134E  319E  2630  3193   	fcall	_wait_ms
  8800  1351  30FF               	movlw	255
  8801  1352  0021               	movlb	1	; select bank1
  8802  1353  07B5               	addwf	ring_tactiles@iLed_1489^(0+128),f
  8803  1354  30FF               	movlw	255
  8804  1355  3DB6               	addwfc	(ring_tactiles@iLed_1489+1)^(0+128),f
  8805  1356  2B40               	goto	L5
  8806  1357                     __end_of_ring_tactiles:	
  8807                           
  8808                           	psect	text12
  8809  07DB                     __ptext12:	
  8810 ;; *************** function _setPedalMode *****************
  8811 ;; Defined at:
  8812 ;;		line 118 in file "tactiles.c"
  8813 ;; Parameters:    Size  Location     Type
  8814 ;;		None
  8815 ;; Auto vars:     Size  Location     Type
  8816 ;;		None
  8817 ;; Return value:  Size  Location     Type
  8818 ;;                  1    wreg      void 
  8819 ;; Registers used:
  8820 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8821 ;; Tracked objects:
  8822 ;;		On entry : 0/0
  8823 ;;		On exit  : 0/0
  8824 ;;		Unchanged: 0/0
  8825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8827 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8829 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8830 ;;Total ram usage:        0 bytes
  8831 ;; Hardware stack levels used:    1
  8832 ;; Hardware stack levels required when called:    5
  8833 ;; This function calls:
  8834 ;;		_resetRingLEDs
  8835 ;;		_setExpressionDisplay
  8836 ;;		_setPresetDisplay
  8837 ;; This function is called by:
  8838 ;;		_update_mode
  8839 ;;		_setDoublePressState
  8840 ;; This function uses a non-reentrant model
  8841 ;;
  8842                           
  8843                           
  8844                           ;psect for function _setPedalMode
  8845  07DB                     _setPedalMode:	
  8846                           
  8847                           ;tactiles.c: 119: switch (mode2_state) {
  8848                           
  8849                           ;incstack = 0
  8850                           ; Regs used in _setPedalMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8851  07DB  2FF1               	goto	l6343
  8852  07DC                     l971:	
  8853                           ;tactiles.c: 120: case 0:
  8854                           
  8855                           
  8856                           ;tactiles.c: 121: LATBbits.LATB1 = 0;
  8857  07DC  0022               	movlb	2	; select bank2
  8858  07DD  108D               	bcf	13,1	;volatile
  8859                           
  8860                           ;tactiles.c: 122: LATBbits.LATB0 = 0;
  8861  07DE  100D               	bcf	13,0	;volatile
  8862                           
  8863                           ;tactiles.c: 123: resetRingLEDs();
  8864  07DF  319C  24C3         	fcall	_resetRingLEDs
  8865                           
  8866                           ;tactiles.c: 124: break;
  8867  07E1  0008               	return
  8868  07E2                     l973:	
  8869                           ;tactiles.c: 125: case 1:
  8870                           
  8871                           
  8872                           ;tactiles.c: 126: LATBbits.LATB1 = 0;
  8873  07E2  0022               	movlb	2	; select bank2
  8874  07E3  108D               	bcf	13,1	;volatile
  8875                           
  8876                           ;tactiles.c: 127: LATBbits.LATB0 = 1;
  8877  07E4  140D               	bsf	13,0	;volatile
  8878                           
  8879                           ;tactiles.c: 128: setPresetDisplay(presetChannel);
  8880  07E5  0020               	movlb	0	; select bank0
  8881  07E6  0856               	movf	_presetChannel,w
  8882  07E7  319E  26D4         	fcall	_setPresetDisplay
  8883                           
  8884                           ;tactiles.c: 129: break;
  8885  07E9  0008               	return
  8886  07EA                     l974:	
  8887                           ;tactiles.c: 130: case 2:
  8888                           
  8889                           
  8890                           ;tactiles.c: 131: LATBbits.LATB1 = 1;
  8891  07EA  0022               	movlb	2	; select bank2
  8892  07EB  148D               	bsf	13,1	;volatile
  8893                           
  8894                           ;tactiles.c: 132: LATBbits.LATB0 = 0;
  8895  07EC  100D               	bcf	13,0	;volatile
  8896                           
  8897                           ;tactiles.c: 133: setExpressionDisplay(expressionChannel);
  8898  07ED  086B               	movf	_expressionChannel^(0+256),w
  8899  07EE  319C  24AB         	fcall	_setExpressionDisplay
  8900                           
  8901                           ;tactiles.c: 135: }
  8902                           
  8903                           ;tactiles.c: 134: break;
  8904  07F0  0008               	return
  8905  07F1                     l6343:	
  8906  07F1  0020               	movlb	0	; select bank0
  8907  07F2  0865               	movf	_mode2_state,w
  8908                           
  8909                           ; Switch size 1, requested type "space"
  8910                           ; Number of cases is 3, Range of values is 0 to 2
  8911                           ; switch strategies available:
  8912                           ; Name         Instructions Cycles
  8913                           ; simple_byte           10     6 (average)
  8914                           ; direct_byte           12     6 (fixed)
  8915                           ; jumptable            260     6 (fixed)
  8916                           ;	Chosen strategy is simple_byte
  8917  07F3  3A00               	xorlw	0	; case 0
  8918  07F4  1903               	skipnz
  8919  07F5  2FDC               	goto	l971
  8920  07F6  3A01               	xorlw	1	; case 1
  8921  07F7  1903               	skipnz
  8922  07F8  2FE2               	goto	l973
  8923  07F9  3A03               	xorlw	3	; case 2
  8924  07FA  1903               	skipnz
  8925  07FB  2FEA               	goto	l974
  8926  07FC  2FFD               	goto	l975
  8927  07FD                     l975:	
  8928  07FD  0008               	return
  8929  07FE                     __end_of_setPedalMode:	
  8930                           
  8931                           	psect	text13
  8932  1ED4                     __ptext13:	
  8933 ;; *************** function _setPresetDisplay *****************
  8934 ;; Defined at:
  8935 ;;		line 51 in file "preset_programming.c"
  8936 ;; Parameters:    Size  Location     Type
  8937 ;;  ledChannel      1    wreg     unsigned char 
  8938 ;; Auto vars:     Size  Location     Type
  8939 ;;  ledChannel      1    6[BANK1 ] unsigned char 
  8940 ;; Return value:  Size  Location     Type
  8941 ;;                  1    wreg      void 
  8942 ;; Registers used:
  8943 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8944 ;; Tracked objects:
  8945 ;;		On entry : 0/0
  8946 ;;		On exit  : 0/0
  8947 ;;		Unchanged: 0/0
  8948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8950 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8951 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8952 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8953 ;;Total ram usage:        3 bytes
  8954 ;; Hardware stack levels used:    1
  8955 ;; Hardware stack levels required when called:    4
  8956 ;; This function calls:
  8957 ;;		_set_leds_bottom
  8958 ;;		_set_leds_top
  8959 ;; This function is called by:
  8960 ;;		_setPedalMode
  8961 ;;		_update_selectMode
  8962 ;;		_setDoublePressState
  8963 ;; This function uses a non-reentrant model
  8964 ;;
  8965                           
  8966                           
  8967                           ;psect for function _setPresetDisplay
  8968  1ED4                     _setPresetDisplay:	
  8969                           
  8970                           ;incstack = 0
  8971                           ; Regs used in _setPresetDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8972                           ;setPresetDisplay@ledChannel stored from wreg
  8973  1ED4  0021               	movlb	1	; select bank1
  8974  1ED5  00A6               	movwf	setPresetDisplay@ledChannel^(0+128)
  8975                           
  8976                           ;preset_programming.c: 52: if (ledChannel < 6) {
  8977  1ED6  3006               	movlw	6
  8978  1ED7  0226               	subwf	setPresetDisplay@ledChannel^(0+128),w
  8979  1ED8  1803               	skipnc
  8980  1ED9  2EF0               	goto	l6277
  8981                           
  8982                           ;preset_programming.c: 53: set_leds_top(ledChannel, 1);
  8983  1EDA  0826               	movf	setPresetDisplay@ledChannel^(0+128),w
  8984  1EDB  00A4               	movwf	??_setPresetDisplay^(0+128)
  8985  1EDC  01A5               	clrf	(??_setPresetDisplay^(0+128)+1)
  8986  1EDD  0824               	movf	??_setPresetDisplay^(0+128),w
  8987  1EDE  00A0               	movwf	set_leds_top@x^(0+128)
  8988  1EDF  0825               	movf	(??_setPresetDisplay+1)^(0+128),w
  8989  1EE0  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8990  1EE1  3001               	movlw	1
  8991  1EE2  00A2               	movwf	set_leds_top@ledState^(0+128)
  8992  1EE3  3000               	movlw	0
  8993  1EE4  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8994  1EE5  3193  23FA  319E   	fcall	_set_leds_top
  8995                           
  8996                           ;preset_programming.c: 54: set_leds_bottom(6);
  8997  1EE8  3006               	movlw	6
  8998  1EE9  0021               	movlb	1	; select bank1
  8999  1EEA  00A0               	movwf	set_leds_bottom@x^(0+128)
  9000  1EEB  3000               	movlw	0
  9001  1EEC  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  9002  1EED  319F  270E         	fcall	_set_leds_bottom
  9003                           
  9004                           ;preset_programming.c: 55: } else {
  9005  1EEF  0008               	return
  9006  1EF0                     l6277:	
  9007                           
  9008                           ;preset_programming.c: 56: set_leds_top(6, 1);
  9009  1EF0  3006               	movlw	6
  9010  1EF1  0021               	movlb	1	; select bank1
  9011  1EF2  00A0               	movwf	set_leds_top@x^(0+128)
  9012  1EF3  3000               	movlw	0
  9013  1EF4  00A1               	movwf	(set_leds_top@x^(0+128)+1)
  9014  1EF5  3001               	movlw	1
  9015  1EF6  00A2               	movwf	set_leds_top@ledState^(0+128)
  9016  1EF7  3000               	movlw	0
  9017  1EF8  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  9018  1EF9  3193  23FA  319E   	fcall	_set_leds_top
  9019                           
  9020                           ;preset_programming.c: 57: set_leds_bottom(10 - ledChannel + 1);
  9021  1EFC  0021               	movlb	1	; select bank1
  9022  1EFD  0826               	movf	setPresetDisplay@ledChannel^(0+128),w
  9023  1EFE  00A4               	movwf	??_setPresetDisplay^(0+128)
  9024  1EFF  01A5               	clrf	(??_setPresetDisplay^(0+128)+1)
  9025  1F00  09A4               	comf	??_setPresetDisplay^(0+128),f
  9026  1F01  09A5               	comf	(??_setPresetDisplay^(0+128)+1),f
  9027  1F02  0AA4               	incf	??_setPresetDisplay^(0+128),f
  9028  1F03  1903               	skipnz
  9029  1F04  0AA5               	incf	(??_setPresetDisplay^(0+128)+1),f
  9030  1F05  0824               	movf	??_setPresetDisplay^(0+128),w
  9031  1F06  3E0B               	addlw	11
  9032  1F07  00A0               	movwf	set_leds_bottom@x^(0+128)
  9033  1F08  3000               	movlw	0
  9034  1F09  3D25               	addwfc	(??_setPresetDisplay+1)^(0+128),w
  9035  1F0A  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  9036  1F0B  319F  270E         	fcall	_set_leds_bottom
  9037  1F0D  0008               	return
  9038  1F0E                     __end_of_setPresetDisplay:	
  9039                           
  9040                           	psect	text14
  9041  1CAB                     __ptext14:	
  9042 ;; *************** function _setExpressionDisplay *****************
  9043 ;; Defined at:
  9044 ;;		line 66 in file "preset_programming.c"
  9045 ;; Parameters:    Size  Location     Type
  9046 ;;  ledChannel      1    wreg     unsigned char 
  9047 ;; Auto vars:     Size  Location     Type
  9048 ;;  ledChannel      1    6[BANK1 ] unsigned char 
  9049 ;; Return value:  Size  Location     Type
  9050 ;;                  1    wreg      void 
  9051 ;; Registers used:
  9052 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9053 ;; Tracked objects:
  9054 ;;		On entry : 0/0
  9055 ;;		On exit  : 0/0
  9056 ;;		Unchanged: 0/0
  9057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9059 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9060 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9061 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9062 ;;Total ram usage:        3 bytes
  9063 ;; Hardware stack levels used:    1
  9064 ;; Hardware stack levels required when called:    4
  9065 ;; This function calls:
  9066 ;;		_set_leds_bottom
  9067 ;;		_set_leds_top
  9068 ;; This function is called by:
  9069 ;;		_setPedalMode
  9070 ;;		_update_selectMode
  9071 ;; This function uses a non-reentrant model
  9072 ;;
  9073                           
  9074                           
  9075                           ;psect for function _setExpressionDisplay
  9076  1CAB                     _setExpressionDisplay:	
  9077                           
  9078                           ;incstack = 0
  9079                           ; Regs used in _setExpressionDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9080                           ;setExpressionDisplay@ledChannel stored from wreg
  9081  1CAB  0021               	movlb	1	; select bank1
  9082  1CAC  00A6               	movwf	setExpressionDisplay@ledChannel^(0+128)
  9083                           
  9084                           ;preset_programming.c: 67: set_leds_top(ledChannel, 1);
  9085  1CAD  0826               	movf	setExpressionDisplay@ledChannel^(0+128),w
  9086  1CAE  00A4               	movwf	??_setExpressionDisplay^(0+128)
  9087  1CAF  01A5               	clrf	(??_setExpressionDisplay^(0+128)+1)
  9088  1CB0  0824               	movf	??_setExpressionDisplay^(0+128),w
  9089  1CB1  00A0               	movwf	set_leds_top@x^(0+128)
  9090  1CB2  0825               	movf	(??_setExpressionDisplay+1)^(0+128),w
  9091  1CB3  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  9092  1CB4  3001               	movlw	1
  9093  1CB5  00A2               	movwf	set_leds_top@ledState^(0+128)
  9094  1CB6  3000               	movlw	0
  9095  1CB7  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  9096  1CB8  3193  23FA  319C   	fcall	_set_leds_top
  9097                           
  9098                           ;preset_programming.c: 68: set_leds_bottom(6);
  9099  1CBB  3006               	movlw	6
  9100  1CBC  0021               	movlb	1	; select bank1
  9101  1CBD  00A0               	movwf	set_leds_bottom@x^(0+128)
  9102  1CBE  3000               	movlw	0
  9103  1CBF  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  9104  1CC0  319F  270E         	fcall	_set_leds_bottom
  9105  1CC2  0008               	return
  9106  1CC3                     __end_of_setExpressionDisplay:	
  9107                           
  9108                           	psect	text15
  9109  1CC3                     __ptext15:	
  9110 ;; *************** function _resetRingLEDs *****************
  9111 ;; Defined at:
  9112 ;;		line 61 in file "preset_programming.c"
  9113 ;; Parameters:    Size  Location     Type
  9114 ;;		None
  9115 ;; Auto vars:     Size  Location     Type
  9116 ;;		None
  9117 ;; Return value:  Size  Location     Type
  9118 ;;                  1    wreg      void 
  9119 ;; Registers used:
  9120 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9121 ;; Tracked objects:
  9122 ;;		On entry : 0/0
  9123 ;;		On exit  : 0/0
  9124 ;;		Unchanged: 0/0
  9125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9127 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9128 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9129 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9130 ;;Total ram usage:        0 bytes
  9131 ;; Hardware stack levels used:    1
  9132 ;; Hardware stack levels required when called:    4
  9133 ;; This function calls:
  9134 ;;		_set_leds_bottom
  9135 ;;		_set_leds_top
  9136 ;; This function is called by:
  9137 ;;		_update_mode
  9138 ;;		_setPedalMode
  9139 ;;		_setDoublePressState
  9140 ;; This function uses a non-reentrant model
  9141 ;;
  9142                           
  9143                           
  9144                           ;psect for function _resetRingLEDs
  9145  1CC3                     _resetRingLEDs:	
  9146                           
  9147                           ;preset_programming.c: 62: set_leds_top(top_push_state, 1);
  9148                           
  9149                           ;incstack = 0
  9150                           ; Regs used in _resetRingLEDs: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9151  1CC3  0020               	movlb	0	; select bank0
  9152  1CC4  0852               	movf	_top_push_state+1,w
  9153  1CC5  0021               	movlb	1	; select bank1
  9154  1CC6  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  9155  1CC7  0020               	movlb	0	; select bank0
  9156  1CC8  0851               	movf	_top_push_state,w
  9157  1CC9  0021               	movlb	1	; select bank1
  9158  1CCA  00A0               	movwf	set_leds_top@x^(0+128)
  9159  1CCB  3001               	movlw	1
  9160  1CCC  00A2               	movwf	set_leds_top@ledState^(0+128)
  9161  1CCD  3000               	movlw	0
  9162  1CCE  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  9163  1CCF  3193  23FA  319C   	fcall	_set_leds_top
  9164                           
  9165                           ;preset_programming.c: 63: set_leds_bottom(bottom_push_state);
  9166  1CD2  0020               	movlb	0	; select bank0
  9167  1CD3  084E               	movf	_bottom_push_state+1,w
  9168  1CD4  0021               	movlb	1	; select bank1
  9169  1CD5  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  9170  1CD6  0020               	movlb	0	; select bank0
  9171  1CD7  084D               	movf	_bottom_push_state,w
  9172  1CD8  0021               	movlb	1	; select bank1
  9173  1CD9  00A0               	movwf	set_leds_bottom@x^(0+128)
  9174  1CDA  319F  270E         	fcall	_set_leds_bottom
  9175  1CDC  0008               	return
  9176  1CDD                     __end_of_resetRingLEDs:	
  9177                           
  9178                           	psect	text16
  9179  090E                     __ptext16:	
  9180 ;; *************** function _set_subdivision *****************
  9181 ;; Defined at:
  9182 ;;		line 77 in file "user.c"
  9183 ;; Parameters:    Size  Location     Type
  9184 ;;  x               2   22[BANK2 ] int 
  9185 ;;  y               2   24[BANK2 ] int 
  9186 ;; Auto vars:     Size  Location     Type
  9187 ;;  scalar          3   29[BANK2 ] float 
  9188 ;;  tmpX            2   32[BANK2 ] int 
  9189 ;; Return value:  Size  Location     Type
  9190 ;;                  2   22[BANK2 ] int 
  9191 ;; Registers used:
  9192 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9193 ;; Tracked objects:
  9194 ;;		On entry : 0/0
  9195 ;;		On exit  : 0/0
  9196 ;;		Unchanged: 0/0
  9197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9198 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9199 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9200 ;;      Temps:          0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9201 ;;      Totals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9202 ;;Total ram usage:       12 bytes
  9203 ;; Hardware stack levels used:    1
  9204 ;; Hardware stack levels required when called:    6
  9205 ;; This function calls:
  9206 ;;		___awtoft
  9207 ;;		___ftmul
  9208 ;;		___fttol
  9209 ;;		_trunc
  9210 ;; This function is called by:
  9211 ;;		_main
  9212 ;; This function uses a non-reentrant model
  9213 ;;
  9214                           
  9215                           
  9216                           ;psect for function _set_subdivision
  9217  090E                     _set_subdivision:	
  9218                           
  9219                           ;user.c: 81: adjust_sub_delay = 0;
  9220                           
  9221                           ;incstack = 0
  9222                           ; Regs used in _set_subdivision: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9223  090E  0023               	movlb	3	; select bank3
  9224  090F  01B9               	clrf	_adjust_sub_delay^(0+384)
  9225  0910  01BA               	clrf	(_adjust_sub_delay+1)^(0+384)
  9226                           
  9227                           ;user.c: 82: int tmpX = x;
  9228  0911  0022               	movlb	2	; select bank2
  9229  0912  0837               	movf	(set_subdivision@x+1)^(0+256),w
  9230  0913  00C1               	movwf	(set_subdivision@tmpX+1)^(0+256)
  9231  0914  0836               	movf	set_subdivision@x^(0+256),w
  9232  0915  00C0               	movwf	set_subdivision@tmpX^(0+256)
  9233                           
  9234                           ;user.c: 83: float scalar = 1.0;
  9235  0916  3000               	movlw	0
  9236  0917  00BD               	movwf	set_subdivision@scalar^(0+256)
  9237  0918  3080               	movlw	128
  9238  0919  00BE               	movwf	(set_subdivision@scalar+1)^(0+256)
  9239  091A  303F               	movlw	63
  9240  091B  00BF               	movwf	(set_subdivision@scalar+2)^(0+256)
  9241                           
  9242                           ;user.c: 85: switch (y) {
  9243  091C  2936               	goto	l7183
  9244  091D                     l7171:	
  9245                           ;user.c: 86: case 1:
  9246                           
  9247                           
  9248                           ;user.c: 87: scalar = 0.75;
  9249  091D  3000               	movlw	0
  9250  091E  00BD               	movwf	set_subdivision@scalar^(0+256)
  9251  091F  3040               	movlw	64
  9252  0920  2928               	goto	L7
  9253  0921                     l7173:	
  9254                           ;user.c: 89: case 2:
  9255                           
  9256                           ;user.c: 88: break;
  9257                           
  9258                           
  9259                           ;user.c: 90: scalar = 0.6666;
  9260  0921  30A6               	movlw	166
  9261  0922  00BD               	movwf	set_subdivision@scalar^(0+256)
  9262  0923  302A               	movlw	42
  9263  0924  2928               	goto	L7
  9264  0925                     l7175:	
  9265                           ;user.c: 92: case 3:
  9266                           
  9267                           ;user.c: 91: break;
  9268                           
  9269                           
  9270                           ;user.c: 93: scalar = .5;
  9271  0925  3000               	movlw	0
  9272  0926  00BD               	movwf	set_subdivision@scalar^(0+256)
  9273  0927  3000               	movlw	0
  9274  0928                     L7:	
  9275  0928  00BE               	movwf	(set_subdivision@scalar+1)^(0+256)
  9276  0929  303F               	movlw	63
  9277  092A  2934               	goto	L9
  9278  092B                     l7177:	
  9279                           ;user.c: 95: case 4:
  9280                           
  9281                           ;user.c: 94: break;
  9282                           
  9283                           
  9284                           ;user.c: 96: scalar = 0.3333;
  9285  092B  30A6               	movlw	166
  9286  092C  00BD               	movwf	set_subdivision@scalar^(0+256)
  9287  092D  30AA               	movlw	170
  9288  092E  2932               	goto	L10
  9289  092F                     l7179:	
  9290                           ;user.c: 98: case 5:
  9291                           
  9292                           ;user.c: 97: break;
  9293                           
  9294                           
  9295                           ;user.c: 99: scalar = 0.25;
  9296  092F  3000               	movlw	0
  9297  0930  00BD               	movwf	set_subdivision@scalar^(0+256)
  9298  0931  3080               	movlw	128
  9299  0932                     L10:	
  9300  0932  00BE               	movwf	(set_subdivision@scalar+1)^(0+256)
  9301  0933  303E               	movlw	62
  9302  0934                     L9:	
  9303  0934  00BF               	movwf	(set_subdivision@scalar+2)^(0+256)
  9304                           
  9305                           ;user.c: 104: }
  9306                           
  9307                           ;user.c: 103: break;
  9308                           
  9309                           ;user.c: 101: case 6:
  9310                           
  9311                           ;user.c: 100: break;
  9312  0935  294F               	goto	l7185
  9313  0936                     l7183:	
  9314                           
  9315                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9316                           ; Switch size 1, requested type "space"
  9317                           ; Number of cases is 1, Range of values is 0 to 0
  9318                           ; switch strategies available:
  9319                           ; Name         Instructions Cycles
  9320                           ; simple_byte            4     3 (average)
  9321                           ; direct_byte            8     6 (fixed)
  9322                           ; jumptable            260     6 (fixed)
  9323                           ;	Chosen strategy is simple_byte
  9324  0936  0839               	movf	(set_subdivision@y+1)^(0+256),w
  9325  0937  3A00               	xorlw	0	; case 0
  9326  0938  1903               	skipnz
  9327  0939  293B               	goto	l7705
  9328  093A  294F               	goto	l7185
  9329  093B                     l7705:	
  9330                           
  9331                           ; Switch size 1, requested type "space"
  9332                           ; Number of cases is 6, Range of values is 1 to 6
  9333                           ; switch strategies available:
  9334                           ; Name         Instructions Cycles
  9335                           ; simple_byte           19    10 (average)
  9336                           ; direct_byte           21     9 (fixed)
  9337                           ; jumptable            263     9 (fixed)
  9338                           ;	Chosen strategy is simple_byte
  9339  093B  0838               	movf	set_subdivision@y^(0+256),w
  9340  093C  3A01               	xorlw	1	; case 1
  9341  093D  1903               	skipnz
  9342  093E  291D               	goto	l7171
  9343  093F  3A03               	xorlw	3	; case 2
  9344  0940  1903               	skipnz
  9345  0941  2921               	goto	l7173
  9346  0942  3A01               	xorlw	1	; case 3
  9347  0943  1903               	skipnz
  9348  0944  2925               	goto	l7175
  9349  0945  3A07               	xorlw	7	; case 4
  9350  0946  1903               	skipnz
  9351  0947  292B               	goto	l7177
  9352  0948  3A01               	xorlw	1	; case 5
  9353  0949  1903               	skipnz
  9354  094A  292F               	goto	l7179
  9355  094B  3A03               	xorlw	3	; case 6
  9356  094C  1903               	skipnz
  9357  094D  294F               	goto	l7185
  9358  094E  294F               	goto	l7185
  9359  094F                     l7185:	
  9360                           
  9361                           ;user.c: 106: tmpX = tmpX * scalar;
  9362  094F  0841               	movf	(set_subdivision@tmpX+1)^(0+256),w
  9363  0950  0021               	movlb	1	; select bank1
  9364  0951  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9365  0952  0022               	movlb	2	; select bank2
  9366  0953  0840               	movf	set_subdivision@tmpX^(0+256),w
  9367  0954  0021               	movlb	1	; select bank1
  9368  0955  00A8               	movwf	___awtoft@c^(0+128)
  9369  0956  319D  2531  3189   	fcall	___awtoft
  9370  0959  0021               	movlb	1	; select bank1
  9371  095A  0828               	movf	?___awtoft^(0+128),w
  9372  095B  00B8               	movwf	___ftmul@f2^(0+128)
  9373  095C  0829               	movf	(?___awtoft+1)^(0+128),w
  9374  095D  00B9               	movwf	(___ftmul@f2+1)^(0+128)
  9375  095E  082A               	movf	(?___awtoft+2)^(0+128),w
  9376  095F  00BA               	movwf	(___ftmul@f2+2)^(0+128)
  9377  0960  0022               	movlb	2	; select bank2
  9378  0961  083D               	movf	set_subdivision@scalar^(0+256),w
  9379  0962  0021               	movlb	1	; select bank1
  9380  0963  00B5               	movwf	___ftmul@f1^(0+128)
  9381  0964  0022               	movlb	2	; select bank2
  9382  0965  083E               	movf	(set_subdivision@scalar+1)^(0+256),w
  9383  0966  0021               	movlb	1	; select bank1
  9384  0967  00B6               	movwf	(___ftmul@f1+1)^(0+128)
  9385  0968  0022               	movlb	2	; select bank2
  9386  0969  083F               	movf	(set_subdivision@scalar+2)^(0+256),w
  9387  096A  0021               	movlb	1	; select bank1
  9388  096B  00B7               	movwf	(___ftmul@f1+2)^(0+128)
  9389  096C  3188  205A  3189   	fcall	___ftmul
  9390  096F  0021               	movlb	1	; select bank1
  9391  0970  0835               	movf	?___ftmul^(0+128),w
  9392  0971  00E7               	movwf	___fttol@f1^(0+128)
  9393  0972  0836               	movf	(?___ftmul+1)^(0+128),w
  9394  0973  00E8               	movwf	(___fttol@f1+1)^(0+128)
  9395  0974  0837               	movf	(?___ftmul+2)^(0+128),w
  9396  0975  00E9               	movwf	(___fttol@f1+2)^(0+128)
  9397  0976  3196  26B8  3189   	fcall	___fttol
  9398  0979  0021               	movlb	1	; select bank1
  9399  097A  0868               	movf	(?___fttol^(0+128)+1),w
  9400  097B  0022               	movlb	2	; select bank2
  9401  097C  00C1               	movwf	(set_subdivision@tmpX+1)^(0+256)
  9402  097D  0021               	movlb	1	; select bank1
  9403  097E  0867               	movf	?___fttol^(0+128),w
  9404  097F  0022               	movlb	2	; select bank2
  9405  0980  00C0               	movwf	set_subdivision@tmpX^(0+256)
  9406                           
  9407                           ;user.c: 108: if (trunc(tmpX) != tmpX) {
  9408  0981  0841               	movf	(set_subdivision@tmpX+1)^(0+256),w
  9409  0982  0021               	movlb	1	; select bank1
  9410  0983  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9411  0984  0022               	movlb	2	; select bank2
  9412  0985  0840               	movf	set_subdivision@tmpX^(0+256),w
  9413  0986  0021               	movlb	1	; select bank1
  9414  0987  00A8               	movwf	___awtoft@c^(0+128)
  9415  0988  319D  2531  3189   	fcall	___awtoft
  9416  098B  0021               	movlb	1	; select bank1
  9417  098C  0828               	movf	?___awtoft^(0+128),w
  9418  098D  0022               	movlb	2	; select bank2
  9419  098E  00AE               	movwf	trunc@x^(0+256)
  9420  098F  0021               	movlb	1	; select bank1
  9421  0990  0829               	movf	(?___awtoft+1)^(0+128),w
  9422  0991  0022               	movlb	2	; select bank2
  9423  0992  00AF               	movwf	(trunc@x+1)^(0+256)
  9424  0993  0021               	movlb	1	; select bank1
  9425  0994  082A               	movf	(?___awtoft+2)^(0+128),w
  9426  0995  0022               	movlb	2	; select bank2
  9427  0996  00B0               	movwf	(trunc@x+2)^(0+256)
  9428  0997  3193  23A8  3189   	fcall	_trunc
  9429  099A  0022               	movlb	2	; select bank2
  9430  099B  082E               	movf	?_trunc^(0+256),w
  9431  099C  00BA               	movwf	??_set_subdivision^(0+256)
  9432  099D  082F               	movf	(?_trunc+1)^(0+256),w
  9433  099E  00BB               	movwf	(??_set_subdivision^(0+256)+1)
  9434  099F  0830               	movf	(?_trunc+2)^(0+256),w
  9435  09A0  00BC               	movwf	(??_set_subdivision^(0+256)+2)
  9436  09A1  0841               	movf	(set_subdivision@tmpX+1)^(0+256),w
  9437  09A2  0021               	movlb	1	; select bank1
  9438  09A3  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9439  09A4  0022               	movlb	2	; select bank2
  9440  09A5  0840               	movf	set_subdivision@tmpX^(0+256),w
  9441  09A6  0021               	movlb	1	; select bank1
  9442  09A7  00A8               	movwf	___awtoft@c^(0+128)
  9443  09A8  319D  2531  3189   	fcall	___awtoft
  9444  09AB  0021               	movlb	1	; select bank1
  9445  09AC  082A               	movf	(?___awtoft+2)^(0+128),w
  9446  09AD  0022               	movlb	2	; select bank2
  9447  09AE  063C               	xorwf	(??_set_subdivision+2)^(0+256),w
  9448  09AF  1D03               	skipz
  9449  09B0  29BB               	goto	u7995
  9450  09B1  0021               	movlb	1	; select bank1
  9451  09B2  0829               	movf	(?___awtoft+1)^(0+128),w
  9452  09B3  0022               	movlb	2	; select bank2
  9453  09B4  063B               	xorwf	(??_set_subdivision+1)^(0+256),w
  9454  09B5  1D03               	skipz
  9455  09B6  29BB               	goto	u7995
  9456  09B7  0021               	movlb	1	; select bank1
  9457  09B8  0828               	movf	?___awtoft^(0+128),w
  9458  09B9  0022               	movlb	2	; select bank2
  9459  09BA  063A               	xorwf	??_set_subdivision^(0+256),w
  9460  09BB                     u7995:	
  9461  09BB  1903               	skipnz
  9462  09BC  29C2               	goto	l579
  9463                           
  9464                           ;user.c: 109: adjust_sub_delay = 1;
  9465  09BD  3001               	movlw	1
  9466  09BE  0023               	movlb	3	; select bank3
  9467  09BF  00B9               	movwf	_adjust_sub_delay^(0+384)
  9468  09C0  3000               	movlw	0
  9469  09C1  00BA               	movwf	(_adjust_sub_delay^(0+384)+1)
  9470  09C2                     l579:	
  9471                           
  9472                           ;user.c: 110: }
  9473                           ;user.c: 112: return tmpX;
  9474  09C2  0022               	movlb	2	; select bank2
  9475  09C3  0841               	movf	(set_subdivision@tmpX+1)^(0+256),w
  9476  09C4  00B7               	movwf	(?_set_subdivision+1)^(0+256)
  9477  09C5  0840               	movf	set_subdivision@tmpX^(0+256),w
  9478  09C6  00B6               	movwf	?_set_subdivision^(0+256)
  9479  09C7  0008               	return
  9480  09C8                     __end_of_set_subdivision:	
  9481                           
  9482                           	psect	text17
  9483  13A8                     __ptext17:	
  9484 ;; *************** function _trunc *****************
  9485 ;; Defined at:
  9486 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\trunc.c"
  9487 ;; Parameters:    Size  Location     Type
  9488 ;;  x               3   14[BANK2 ] int 
  9489 ;; Auto vars:     Size  Location     Type
  9490 ;;  i               3   17[BANK2 ] int 
  9491 ;;  expon           2   20[BANK2 ] int 
  9492 ;; Return value:  Size  Location     Type
  9493 ;;                  3   14[BANK2 ] int 
  9494 ;; Registers used:
  9495 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9496 ;; Tracked objects:
  9497 ;;		On entry : 0/0
  9498 ;;		On exit  : 0/0
  9499 ;;		Unchanged: 0/0
  9500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9501 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9502 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9503 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9504 ;;      Totals:         0       0       1       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9505 ;;Total ram usage:        9 bytes
  9506 ;; Hardware stack levels used:    1
  9507 ;; Hardware stack levels required when called:    5
  9508 ;; This function calls:
  9509 ;;		___altoft
  9510 ;;		___fttol
  9511 ;;		_frexp
  9512 ;; This function is called by:
  9513 ;;		_set_subdivision
  9514 ;; This function uses a non-reentrant model
  9515 ;;
  9516                           
  9517                           
  9518                           ;psect for function _trunc
  9519  13A8                     _trunc:	
  9520                           
  9521                           ;incstack = 0
  9522                           ; Regs used in _trunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9523  13A8  0022               	movlb	2	; select bank2
  9524  13A9  082E               	movf	trunc@x^(0+256),w
  9525  13AA  0021               	movlb	1	; select bank1
  9526  13AB  00A0               	movwf	frexp@value^(0+128)
  9527  13AC  0022               	movlb	2	; select bank2
  9528  13AD  082F               	movf	(trunc@x+1)^(0+256),w
  9529  13AE  0021               	movlb	1	; select bank1
  9530  13AF  00A1               	movwf	(frexp@value+1)^(0+128)
  9531  13B0  0022               	movlb	2	; select bank2
  9532  13B1  0830               	movf	(trunc@x+2)^(0+256),w
  9533  13B2  0021               	movlb	1	; select bank1
  9534  13B3  00A2               	movwf	(frexp@value+2)^(0+128)
  9535  13B4  3034               	movlw	(low (trunc@expon| (0+256)))& (0+255)
  9536  13B5  00EF               	movwf	??_trunc^(0+128)
  9537  13B6  086F               	movf	??_trunc^(0+128),w
  9538  13B7  00A3               	movwf	frexp@eptr^(0+128)
  9539  13B8  319E  269A  3193   	fcall	_frexp
  9540  13BB  0022               	movlb	2	; select bank2
  9541  13BC  1FB5               	btfss	(trunc@expon+1)^(0+256),7
  9542  13BD  2BC5               	goto	l6455
  9543  13BE  3000               	movlw	0
  9544  13BF  00AE               	movwf	?_trunc^(0+256)
  9545  13C0  3000               	movlw	0
  9546  13C1  00AF               	movwf	(?_trunc+1)^(0+256)
  9547  13C2  3000               	movlw	0
  9548  13C3  00B0               	movwf	(?_trunc+2)^(0+256)
  9549  13C4  0008               	return
  9550  13C5                     l6455:	
  9551  13C5  3000               	movlw	0
  9552  13C6  0235               	subwf	(trunc@expon+1)^(0+256),w
  9553  13C7  3015               	movlw	21
  9554  13C8  1903               	skipnz
  9555  13C9  0234               	subwf	trunc@expon^(0+256),w
  9556  13CA  1803               	btfsc	3,0
  9557  13CB  0008               	return
  9558  13CC  082E               	movf	trunc@x^(0+256),w
  9559  13CD  0021               	movlb	1	; select bank1
  9560  13CE  00E7               	movwf	___fttol@f1^(0+128)
  9561  13CF  0022               	movlb	2	; select bank2
  9562  13D0  082F               	movf	(trunc@x+1)^(0+256),w
  9563  13D1  0021               	movlb	1	; select bank1
  9564  13D2  00E8               	movwf	(___fttol@f1+1)^(0+128)
  9565  13D3  0022               	movlb	2	; select bank2
  9566  13D4  0830               	movf	(trunc@x+2)^(0+256),w
  9567  13D5  0021               	movlb	1	; select bank1
  9568  13D6  00E9               	movwf	(___fttol@f1+2)^(0+128)
  9569  13D7  3196  26B8  3193   	fcall	___fttol
  9570  13DA  0021               	movlb	1	; select bank1
  9571  13DB  086A               	movf	(?___fttol+3)^(0+128),w
  9572  13DC  0022               	movlb	2	; select bank2
  9573  13DD  00A9               	movwf	(___altoft@c+3)^(0+256)
  9574  13DE  0021               	movlb	1	; select bank1
  9575  13DF  0869               	movf	(?___fttol+2)^(0+128),w
  9576  13E0  0022               	movlb	2	; select bank2
  9577  13E1  00A8               	movwf	(___altoft@c+2)^(0+256)
  9578  13E2  0021               	movlb	1	; select bank1
  9579  13E3  0868               	movf	(?___fttol+1)^(0+128),w
  9580  13E4  0022               	movlb	2	; select bank2
  9581  13E5  00A7               	movwf	(___altoft@c+1)^(0+256)
  9582  13E6  0021               	movlb	1	; select bank1
  9583  13E7  0867               	movf	?___fttol^(0+128),w
  9584  13E8  0022               	movlb	2	; select bank2
  9585  13E9  00A6               	movwf	___altoft@c^(0+256)
  9586  13EA  3192  226C         	fcall	___altoft
  9587  13EC  0022               	movlb	2	; select bank2
  9588  13ED  0826               	movf	?___altoft^(0+256),w
  9589  13EE  00B1               	movwf	trunc@i^(0+256)
  9590  13EF  0827               	movf	(?___altoft+1)^(0+256),w
  9591  13F0  00B2               	movwf	(trunc@i+1)^(0+256)
  9592  13F1  0828               	movf	(?___altoft+2)^(0+256),w
  9593  13F2  00B3               	movwf	(trunc@i+2)^(0+256)
  9594  13F3  0831               	movf	trunc@i^(0+256),w
  9595  13F4  00AE               	movwf	?_trunc^(0+256)
  9596  13F5  0832               	movf	(trunc@i+1)^(0+256),w
  9597  13F6  00AF               	movwf	(?_trunc+1)^(0+256)
  9598  13F7  0833               	movf	(trunc@i+2)^(0+256),w
  9599  13F8  00B0               	movwf	(?_trunc+2)^(0+256)
  9600  13F9  0008               	return
  9601  13FA                     __end_of_trunc:	
  9602                           
  9603                           	psect	text18
  9604  1E9A                     __ptext18:	
  9605 ;; *************** function _frexp *****************
  9606 ;; Defined at:
  9607 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
  9608 ;; Parameters:    Size  Location     Type
  9609 ;;  value           3    0[BANK1 ] int 
  9610 ;;  eptr            1    3[BANK1 ] PTR int 
  9611 ;;		 -> trunc@expon(2), 
  9612 ;; Auto vars:     Size  Location     Type
  9613 ;;		None
  9614 ;; Return value:  Size  Location     Type
  9615 ;;                  3    0[BANK1 ] PTR int 
  9616 ;; Registers used:
  9617 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9618 ;; Tracked objects:
  9619 ;;		On entry : 0/0
  9620 ;;		On exit  : 0/0
  9621 ;;		Unchanged: 0/0
  9622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9623 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9625 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9626 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9627 ;;Total ram usage:        6 bytes
  9628 ;; Hardware stack levels used:    1
  9629 ;; Hardware stack levels required when called:    3
  9630 ;; This function calls:
  9631 ;;		Nothing
  9632 ;; This function is called by:
  9633 ;;		_trunc
  9634 ;; This function uses a non-reentrant model
  9635 ;;
  9636                           
  9637                           
  9638                           ;psect for function _frexp
  9639  1E9A                     _frexp:	
  9640                           
  9641                           ;incstack = 0
  9642                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
  9643  1E9A  0021               	movlb	1	; select bank1
  9644  1E9B  0822               	movf	(frexp@value+2)^(0+128),w
  9645  1E9C  0421               	iorwf	(frexp@value+1)^(0+128),w
  9646  1E9D  0420               	iorwf	frexp@value^(0+128),w
  9647  1E9E  1D03               	skipz
  9648  1E9F  2EA8               	goto	l6409
  9649  1EA0  0823               	movf	frexp@eptr^(0+128),w
  9650  1EA1  0086               	movwf	6
  9651  1EA2  3001               	movlw	1	; select bank2/3
  9652  1EA3  0087               	movwf	7
  9653  1EA4  3000               	movlw	0
  9654  1EA5  3FC0               	movwi [0]fsr1
  9655  1EA6  3FC1               	movwi [1]fsr1
  9656                           
  9657                           ;	Return value of _frexp is never used
  9658  1EA7  0008               	return
  9659  1EA8                     l6409:	
  9660  1EA8  0822               	movf	(frexp@value^(0+128)+2),w
  9661  1EA9  397F               	andlw	127
  9662  1EAA  00A4               	movwf	??_frexp^(0+128)
  9663  1EAB  01A5               	clrf	(??_frexp^(0+128)+1)
  9664  1EAC  35A4               	lslf	??_frexp^(0+128),f
  9665  1EAD  0DA5               	rlf	(??_frexp^(0+128)+1),f
  9666  1EAE  0823               	movf	frexp@eptr^(0+128),w
  9667  1EAF  0086               	movwf	6
  9668  1EB0  3001               	movlw	1	; select bank2/3
  9669  1EB1  0087               	movwf	7
  9670  1EB2  0824               	movf	??_frexp^(0+128),w
  9671  1EB3  3FC0               	movwi [0]fsr1
  9672  1EB4  0825               	movf	(??_frexp+1)^(0+128),w
  9673  1EB5  3FC1               	movwi [1]fsr1
  9674  1EB6  0D21               	rlf	(frexp@value^(0+128)+1),w
  9675  1EB7  0D21               	rlf	(frexp@value^(0+128)+1),w
  9676  1EB8  3901               	andlw	1
  9677  1EB9  00A4               	movwf	??_frexp^(0+128)
  9678  1EBA  01A5               	clrf	(??_frexp^(0+128)+1)
  9679  1EBB  0823               	movf	frexp@eptr^(0+128),w
  9680  1EBC  0086               	movwf	6
  9681  1EBD  3001               	movlw	1	; select bank2/3
  9682  1EBE  0087               	movwf	7
  9683  1EBF  0824               	movf	??_frexp^(0+128),w
  9684  1EC0  0481               	iorwf	1,f
  9685  1EC1  3141               	addfsr 1,1
  9686  1EC2  0825               	movf	(??_frexp+1)^(0+128),w
  9687  1EC3  0481               	iorwf	1,f
  9688  1EC4  0823               	movf	frexp@eptr^(0+128),w
  9689  1EC5  0086               	movwf	6
  9690  1EC6  3001               	movlw	1	; select bank2/3
  9691  1EC7  0087               	movwf	7
  9692  1EC8  3082               	movlw	130
  9693  1EC9  0781               	addwf	1,f
  9694  1ECA  3141               	addfsr 1,1
  9695  1ECB  30FF               	movlw	255
  9696  1ECC  3D81               	addwfc	1,f
  9697  1ECD  317F               	addfsr 1,-1
  9698  1ECE  0822               	movf	(frexp@value^(0+128)+2),w
  9699  1ECF  3980               	andlw	-128
  9700  1ED0  383F               	iorlw	63
  9701  1ED1  00A2               	movwf	(frexp@value^(0+128)+2)
  9702  1ED2  13A1               	bcf	(frexp@value^(0+128)+1),7
  9703  1ED3  0008               	return
  9704  1ED4                     __end_of_frexp:	
  9705                           ;	Return value of _frexp is never used
  9706                           
  9707                           
  9708                           	psect	text19
  9709  16B8                     __ptext19:	
  9710 ;; *************** function ___fttol *****************
  9711 ;; Defined at:
  9712 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
  9713 ;; Parameters:    Size  Location     Type
  9714 ;;  f1              3   71[BANK1 ] float 
  9715 ;; Auto vars:     Size  Location     Type
  9716 ;;  lval            4    1[BANK2 ] unsigned long 
  9717 ;;  exp1            1    5[BANK2 ] unsigned char 
  9718 ;;  sign1           1    0[BANK2 ] unsigned char 
  9719 ;; Return value:  Size  Location     Type
  9720 ;;                  4   71[BANK1 ] long 
  9721 ;; Registers used:
  9722 ;;		wreg, status,2, status,0
  9723 ;; Tracked objects:
  9724 ;;		On entry : 0/0
  9725 ;;		On exit  : 0/0
  9726 ;;		Unchanged: 0/0
  9727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9728 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9729 ;;      Locals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9730 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9731 ;;      Totals:         0       0       8       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9732 ;;Total ram usage:       14 bytes
  9733 ;; Hardware stack levels used:    1
  9734 ;; Hardware stack levels required when called:    3
  9735 ;; This function calls:
  9736 ;;		Nothing
  9737 ;; This function is called by:
  9738 ;;		_main
  9739 ;;		_set_subdivision
  9740 ;;		_trunc
  9741 ;; This function uses a non-reentrant model
  9742 ;;
  9743                           
  9744                           
  9745                           ;psect for function ___fttol
  9746  16B8                     ___fttol:	
  9747                           
  9748                           ;incstack = 0
  9749                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  9750  16B8  0021               	movlb	1	; select bank1
  9751  16B9  0867               	movf	___fttol@f1^(0+128),w
  9752  16BA  00EB               	movwf	??___fttol^(0+128)
  9753  16BB  0868               	movf	(___fttol@f1+1)^(0+128),w
  9754  16BC  00EC               	movwf	(??___fttol^(0+128)+1)
  9755  16BD  0869               	movf	(___fttol@f1+2)^(0+128),w
  9756  16BE  00ED               	movwf	(??___fttol^(0+128)+2)
  9757  16BF  1003               	clrc
  9758  16C0  0D6C               	rlf	(??___fttol^(0+128)+1),w
  9759  16C1  0D6D               	rlf	(??___fttol^(0+128)+2),w
  9760  16C2  00EE               	movwf	(??___fttol+3)^(0+128)
  9761  16C3  086E               	movf	(??___fttol+3)^(0+128),w
  9762  16C4  0022               	movlb	2	; select bank2
  9763  16C5  00A5               	movwf	___fttol@exp1^(0+256)
  9764  16C6  0825               	movf	___fttol@exp1^(0+256),w
  9765  16C7  1D03               	btfss	3,2
  9766  16C8  2ED3               	goto	l6367
  9767  16C9  3000               	movlw	0
  9768  16CA  0021               	movlb	1	; select bank1
  9769  16CB  00EA               	movwf	(?___fttol+3)^(0+128)
  9770  16CC  3000               	movlw	0
  9771  16CD  00E9               	movwf	(?___fttol+2)^(0+128)
  9772  16CE  3000               	movlw	0
  9773  16CF  00E8               	movwf	(?___fttol+1)^(0+128)
  9774  16D0  3000               	movlw	0
  9775  16D1  00E7               	movwf	?___fttol^(0+128)
  9776  16D2  0008               	return
  9777  16D3                     l6367:	
  9778  16D3  0021               	movlb	1	; select bank1
  9779  16D4  0867               	movf	___fttol@f1^(0+128),w
  9780  16D5  00EB               	movwf	??___fttol^(0+128)
  9781  16D6  0868               	movf	(___fttol@f1+1)^(0+128),w
  9782  16D7  00EC               	movwf	(??___fttol^(0+128)+1)
  9783  16D8  0869               	movf	(___fttol@f1+2)^(0+128),w
  9784  16D9  00ED               	movwf	(??___fttol^(0+128)+2)
  9785  16DA  3017               	movlw	23
  9786  16DB                     u6425:	
  9787  16DB  36ED               	lsrf	(??___fttol^(0+128)+2),f
  9788  16DC  0CEC               	rrf	(??___fttol^(0+128)+1),f
  9789  16DD  0CEB               	rrf	??___fttol^(0+128),f
  9790  16DE  0B89               	decfsz	9,f
  9791  16DF  2EDB               	goto	u6425
  9792  16E0  086B               	movf	??___fttol^(0+128),w
  9793  16E1  00EE               	movwf	(??___fttol+3)^(0+128)
  9794  16E2  086E               	movf	(??___fttol+3)^(0+128),w
  9795  16E3  0022               	movlb	2	; select bank2
  9796  16E4  00A0               	movwf	___fttol@sign1^(0+256)
  9797  16E5  0021               	movlb	1	; select bank1
  9798  16E6  17E8               	bsf	(___fttol@f1^(0+128)+1),7
  9799  16E7  30FF               	movlw	255
  9800  16E8  05E7               	andwf	___fttol@f1^(0+128),f
  9801  16E9  30FF               	movlw	255
  9802  16EA  05E8               	andwf	(___fttol@f1+1)^(0+128),f
  9803  16EB  3000               	movlw	0
  9804  16EC  05E9               	andwf	(___fttol@f1+2)^(0+128),f
  9805  16ED  0867               	movf	___fttol@f1^(0+128),w
  9806  16EE  0022               	movlb	2	; select bank2
  9807  16EF  00A1               	movwf	___fttol@lval^(0+256)
  9808  16F0  0021               	movlb	1	; select bank1
  9809  16F1  0868               	movf	(___fttol@f1+1)^(0+128),w
  9810  16F2  0022               	movlb	2	; select bank2
  9811  16F3  00A2               	movwf	(___fttol@lval^(0+256)+1)
  9812  16F4  0021               	movlb	1	; select bank1
  9813  16F5  0869               	movf	(___fttol@f1+2)^(0+128),w
  9814  16F6  0022               	movlb	2	; select bank2
  9815  16F7  00A3               	movwf	(___fttol@lval^(0+256)+2)
  9816  16F8  01A4               	clrf	(___fttol@lval^(0+256)+3)
  9817  16F9  308E               	movlw	142
  9818  16FA  02A5               	subwf	___fttol@exp1^(0+256),f
  9819  16FB  1FA5               	btfss	___fttol@exp1^(0+256),7
  9820  16FC  2F1D               	goto	l6387
  9821  16FD  0825               	movf	___fttol@exp1^(0+256),w
  9822  16FE  3A80               	xorlw	128
  9823  16FF  3E8F               	addlw	143
  9824  1700  1803               	skipnc
  9825  1701  2F0C               	goto	l6385
  9826  1702  3000               	movlw	0
  9827  1703  0021               	movlb	1	; select bank1
  9828  1704  00EA               	movwf	(?___fttol+3)^(0+128)
  9829  1705  3000               	movlw	0
  9830  1706  00E9               	movwf	(?___fttol+2)^(0+128)
  9831  1707  3000               	movlw	0
  9832  1708  00E8               	movwf	(?___fttol+1)^(0+128)
  9833  1709  3000               	movlw	0
  9834  170A  00E7               	movwf	?___fttol^(0+128)
  9835  170B  0008               	return
  9836  170C                     l6385:	
  9837  170C  3001               	movlw	1
  9838  170D                     u6455:	
  9839  170D  0022               	movlb	2	; select bank2
  9840  170E  36A4               	lsrf	(___fttol@lval+3)^(0+256),f
  9841  170F  0CA3               	rrf	(___fttol@lval+2)^(0+256),f
  9842  1710  0CA2               	rrf	(___fttol@lval+1)^(0+256),f
  9843  1711  0CA1               	rrf	___fttol@lval^(0+256),f
  9844  1712  0B89               	decfsz	9,f
  9845  1713  2F0D               	goto	u6455
  9846  1714  3001               	movlw	1
  9847  1715  0021               	movlb	1	; select bank1
  9848  1716  00EB               	movwf	??___fttol^(0+128)
  9849  1717  086B               	movf	??___fttol^(0+128),w
  9850  1718  0022               	movlb	2	; select bank2
  9851  1719  07A5               	addwf	___fttol@exp1^(0+256),f
  9852  171A  1903               	btfsc	3,2
  9853  171B  2F39               	goto	l6395
  9854  171C  2F0C               	goto	l6385
  9855  171D                     l6387:	
  9856  171D  3018               	movlw	24
  9857  171E  0225               	subwf	___fttol@exp1^(0+256),w
  9858  171F  1C03               	skipc
  9859  1720  2F35               	goto	l1986
  9860  1721  3000               	movlw	0
  9861  1722  0021               	movlb	1	; select bank1
  9862  1723  00EA               	movwf	(?___fttol+3)^(0+128)
  9863  1724  3000               	movlw	0
  9864  1725  00E9               	movwf	(?___fttol+2)^(0+128)
  9865  1726  3000               	movlw	0
  9866  1727  00E8               	movwf	(?___fttol+1)^(0+128)
  9867  1728  3000               	movlw	0
  9868  1729  00E7               	movwf	?___fttol^(0+128)
  9869  172A  0008               	return
  9870  172B                     l6393:	
  9871  172B  3001               	movlw	1
  9872  172C                     u6485:	
  9873  172C  0022               	movlb	2	; select bank2
  9874  172D  35A1               	lslf	___fttol@lval^(0+256),f
  9875  172E  0DA2               	rlf	(___fttol@lval+1)^(0+256),f
  9876  172F  0DA3               	rlf	(___fttol@lval+2)^(0+256),f
  9877  1730  0DA4               	rlf	(___fttol@lval+3)^(0+256),f
  9878  1731  0B89               	decfsz	9,f
  9879  1732  2F2C               	goto	u6485
  9880  1733  3001               	movlw	1
  9881  1734  02A5               	subwf	___fttol@exp1^(0+256),f
  9882  1735                     l1986:	
  9883  1735  0022               	movlb	2	; select bank2
  9884  1736  0825               	movf	___fttol@exp1^(0+256),w
  9885  1737  1D03               	btfss	3,2
  9886  1738  2F2B               	goto	l6393
  9887  1739                     l6395:	
  9888  1739  0820               	movf	___fttol@sign1^(0+256),w
  9889  173A  1903               	btfsc	3,2
  9890  173B  2F47               	goto	l6399
  9891  173C  09A1               	comf	___fttol@lval^(0+256),f
  9892  173D  09A2               	comf	(___fttol@lval+1)^(0+256),f
  9893  173E  09A3               	comf	(___fttol@lval+2)^(0+256),f
  9894  173F  09A4               	comf	(___fttol@lval+3)^(0+256),f
  9895  1740  0AA1               	incf	___fttol@lval^(0+256),f
  9896  1741  1903               	skipnz
  9897  1742  0AA2               	incf	(___fttol@lval+1)^(0+256),f
  9898  1743  1903               	skipnz
  9899  1744  0AA3               	incf	(___fttol@lval+2)^(0+256),f
  9900  1745  1903               	skipnz
  9901  1746  0AA4               	incf	(___fttol@lval+3)^(0+256),f
  9902  1747                     l6399:	
  9903  1747  0824               	movf	(___fttol@lval+3)^(0+256),w
  9904  1748  0021               	movlb	1	; select bank1
  9905  1749  00EA               	movwf	(?___fttol+3)^(0+128)
  9906  174A  0022               	movlb	2	; select bank2
  9907  174B  0823               	movf	(___fttol@lval+2)^(0+256),w
  9908  174C  0021               	movlb	1	; select bank1
  9909  174D  00E9               	movwf	(?___fttol+2)^(0+128)
  9910  174E  0022               	movlb	2	; select bank2
  9911  174F  0822               	movf	(___fttol@lval+1)^(0+256),w
  9912  1750  0021               	movlb	1	; select bank1
  9913  1751  00E8               	movwf	(?___fttol+1)^(0+128)
  9914  1752  0022               	movlb	2	; select bank2
  9915  1753  0821               	movf	___fttol@lval^(0+256),w
  9916  1754  0021               	movlb	1	; select bank1
  9917  1755  00E7               	movwf	?___fttol^(0+128)
  9918  1756  0008               	return
  9919  1757                     __end_of___fttol:	
  9920                           
  9921                           	psect	text20
  9922  126C                     __ptext20:	
  9923 ;; *************** function ___altoft *****************
  9924 ;; Defined at:
  9925 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\altoft.c"
  9926 ;; Parameters:    Size  Location     Type
  9927 ;;  c               4    6[BANK2 ] long 
  9928 ;; Auto vars:     Size  Location     Type
  9929 ;;  sign            1   13[BANK2 ] unsigned char 
  9930 ;;  exp             1   12[BANK2 ] unsigned char 
  9931 ;; Return value:  Size  Location     Type
  9932 ;;                  3    6[BANK2 ] float 
  9933 ;; Registers used:
  9934 ;;		wreg, status,2, status,0, pclath, cstack
  9935 ;; Tracked objects:
  9936 ;;		On entry : 0/0
  9937 ;;		On exit  : 0/0
  9938 ;;		Unchanged: 0/0
  9939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9940 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9941 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9942 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9943 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9944 ;;Total ram usage:        8 bytes
  9945 ;; Hardware stack levels used:    1
  9946 ;; Hardware stack levels required when called:    4
  9947 ;; This function calls:
  9948 ;;		___ftpack
  9949 ;; This function is called by:
  9950 ;;		_trunc
  9951 ;; This function uses a non-reentrant model
  9952 ;;
  9953                           
  9954                           
  9955                           ;psect for function ___altoft
  9956  126C                     ___altoft:	
  9957                           
  9958                           ;incstack = 0
  9959                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
  9960  126C  0022               	movlb	2	; select bank2
  9961  126D  01AD               	clrf	___altoft@sign^(0+256)
  9962  126E  308E               	movlw	142
  9963  126F  00AA               	movwf	??___altoft^(0+256)
  9964  1270  082A               	movf	??___altoft^(0+256),w
  9965  1271  00AC               	movwf	___altoft@exp^(0+256)
  9966  1272  1FA9               	btfss	(___altoft@c+3)^(0+256),7
  9967  1273  2A81               	goto	l6355
  9968  1274  09A6               	comf	___altoft@c^(0+256),f
  9969  1275  09A7               	comf	(___altoft@c+1)^(0+256),f
  9970  1276  09A8               	comf	(___altoft@c+2)^(0+256),f
  9971  1277  09A9               	comf	(___altoft@c+3)^(0+256),f
  9972  1278  0AA6               	incf	___altoft@c^(0+256),f
  9973  1279  1903               	skipnz
  9974  127A  0AA7               	incf	(___altoft@c+1)^(0+256),f
  9975  127B  1903               	skipnz
  9976  127C  0AA8               	incf	(___altoft@c+2)^(0+256),f
  9977  127D  1903               	skipnz
  9978  127E  0AA9               	incf	(___altoft@c+3)^(0+256),f
  9979  127F  01AD               	clrf	___altoft@sign^(0+256)
  9980  1280  0AAD               	incf	___altoft@sign^(0+256),f
  9981  1281                     l6355:	
  9982  1281  30FF               	movlw	255
  9983  1282  0529               	andwf	(___altoft@c+3)^(0+256),w
  9984  1283  1903               	btfsc	3,2
  9985  1284  2A91               	goto	l6357
  9986  1285  3001               	movlw	1
  9987  1286                     u6395:	
  9988  1286  36A9               	lsrf	(___altoft@c+3)^(0+256),f
  9989  1287  0CA8               	rrf	(___altoft@c+2)^(0+256),f
  9990  1288  0CA7               	rrf	(___altoft@c+1)^(0+256),f
  9991  1289  0CA6               	rrf	___altoft@c^(0+256),f
  9992  128A  0B89               	decfsz	9,f
  9993  128B  2A86               	goto	u6395
  9994  128C  3001               	movlw	1
  9995  128D  00AA               	movwf	??___altoft^(0+256)
  9996  128E  082A               	movf	??___altoft^(0+256),w
  9997  128F  07AC               	addwf	___altoft@exp^(0+256),f
  9998  1290  2A81               	goto	l6355
  9999  1291                     l6357:	
 10000  1291  0826               	movf	___altoft@c^(0+256),w
 10001  1292  0021               	movlb	1	; select bank1
 10002  1293  00A0               	movwf	___ftpack@arg^(0+128)
 10003  1294  0022               	movlb	2	; select bank2
 10004  1295  0827               	movf	(___altoft@c+1)^(0+256),w
 10005  1296  0021               	movlb	1	; select bank1
 10006  1297  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 10007  1298  0022               	movlb	2	; select bank2
 10008  1299  0828               	movf	(___altoft@c+2)^(0+256),w
 10009  129A  0021               	movlb	1	; select bank1
 10010  129B  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 10011  129C  0022               	movlb	2	; select bank2
 10012  129D  082C               	movf	___altoft@exp^(0+256),w
 10013  129E  00AA               	movwf	??___altoft^(0+256)
 10014  129F  082A               	movf	??___altoft^(0+256),w
 10015  12A0  0021               	movlb	1	; select bank1
 10016  12A1  00A3               	movwf	___ftpack@exp^(0+128)
 10017  12A2  0022               	movlb	2	; select bank2
 10018  12A3  082D               	movf	___altoft@sign^(0+256),w
 10019  12A4  00AB               	movwf	(??___altoft+1)^(0+256)
 10020  12A5  082B               	movf	(??___altoft+1)^(0+256),w
 10021  12A6  0021               	movlb	1	; select bank1
 10022  12A7  00A4               	movwf	___ftpack@sign^(0+128)
 10023  12A8  3194  244E         	fcall	___ftpack
 10024  12AA  0021               	movlb	1	; select bank1
 10025  12AB  0820               	movf	?___ftpack^(0+128),w
 10026  12AC  0022               	movlb	2	; select bank2
 10027  12AD  00A6               	movwf	?___altoft^(0+256)
 10028  12AE  0021               	movlb	1	; select bank1
 10029  12AF  0821               	movf	(?___ftpack+1)^(0+128),w
 10030  12B0  0022               	movlb	2	; select bank2
 10031  12B1  00A7               	movwf	(?___altoft+1)^(0+256)
 10032  12B2  0021               	movlb	1	; select bank1
 10033  12B3  0822               	movf	(?___ftpack+2)^(0+128),w
 10034  12B4  0022               	movlb	2	; select bank2
 10035  12B5  00A8               	movwf	(?___altoft+2)^(0+256)
 10036  12B6  0008               	return
 10037  12B7                     __end_of___altoft:	
 10038                           
 10039                           	psect	text21
 10040  1D31                     __ptext21:	
 10041 ;; *************** function ___awtoft *****************
 10042 ;; Defined at:
 10043 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awtoft.c"
 10044 ;; Parameters:    Size  Location     Type
 10045 ;;  c               2    8[BANK1 ] int 
 10046 ;; Auto vars:     Size  Location     Type
 10047 ;;  sign            1   13[BANK1 ] unsigned char 
 10048 ;; Return value:  Size  Location     Type
 10049 ;;                  3    8[BANK1 ] float 
 10050 ;; Registers used:
 10051 ;;		wreg, status,2, status,0, pclath, cstack
 10052 ;; Tracked objects:
 10053 ;;		On entry : 0/0
 10054 ;;		On exit  : 0/0
 10055 ;;		Unchanged: 0/0
 10056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10057 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10058 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10059 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10060 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10061 ;;Total ram usage:        6 bytes
 10062 ;; Hardware stack levels used:    1
 10063 ;; Hardware stack levels required when called:    4
 10064 ;; This function calls:
 10065 ;;		___ftpack
 10066 ;; This function is called by:
 10067 ;;		_main
 10068 ;;		_set_subdivision
 10069 ;; This function uses a non-reentrant model
 10070 ;;
 10071                           
 10072                           
 10073                           ;psect for function ___awtoft
 10074  1D31                     ___awtoft:	
 10075                           
 10076                           ;incstack = 0
 10077                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 10078  1D31  0021               	movlb	1	; select bank1
 10079  1D32  01AD               	clrf	___awtoft@sign^(0+128)
 10080  1D33  1FA9               	btfss	(___awtoft@c+1)^(0+128),7
 10081  1D34  2D3C               	goto	l6607
 10082  1D35  09A8               	comf	___awtoft@c^(0+128),f
 10083  1D36  09A9               	comf	(___awtoft@c+1)^(0+128),f
 10084  1D37  0AA8               	incf	___awtoft@c^(0+128),f
 10085  1D38  1903               	skipnz
 10086  1D39  0AA9               	incf	(___awtoft@c+1)^(0+128),f
 10087  1D3A  01AD               	clrf	___awtoft@sign^(0+128)
 10088  1D3B  0AAD               	incf	___awtoft@sign^(0+128),f
 10089  1D3C                     l6607:	
 10090  1D3C  0828               	movf	___awtoft@c^(0+128),w
 10091  1D3D  00A0               	movwf	___ftpack@arg^(0+128)
 10092  1D3E  0829               	movf	(___awtoft@c+1)^(0+128),w
 10093  1D3F  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 10094  1D40  01A2               	clrf	(___ftpack@arg+2)^(0+128)
 10095  1D41  308E               	movlw	142
 10096  1D42  00AB               	movwf	??___awtoft^(0+128)
 10097  1D43  082B               	movf	??___awtoft^(0+128),w
 10098  1D44  00A3               	movwf	___ftpack@exp^(0+128)
 10099  1D45  082D               	movf	___awtoft@sign^(0+128),w
 10100  1D46  00AC               	movwf	(??___awtoft+1)^(0+128)
 10101  1D47  082C               	movf	(??___awtoft+1)^(0+128),w
 10102  1D48  00A4               	movwf	___ftpack@sign^(0+128)
 10103  1D49  3194  244E         	fcall	___ftpack
 10104  1D4B  0021               	movlb	1	; select bank1
 10105  1D4C  0820               	movf	?___ftpack^(0+128),w
 10106  1D4D  00A8               	movwf	?___awtoft^(0+128)
 10107  1D4E  0821               	movf	(?___ftpack+1)^(0+128),w
 10108  1D4F  00A9               	movwf	(?___awtoft+1)^(0+128)
 10109  1D50  0822               	movf	(?___ftpack+2)^(0+128),w
 10110  1D51  00AA               	movwf	(?___awtoft+2)^(0+128)
 10111  1D52  0008               	return
 10112  1D53                     __end_of___awtoft:	
 10113                           
 10114                           	psect	text22
 10115  12B7                     __ptext22:	
 10116 ;; *************** function _read_top_tactile *****************
 10117 ;; Defined at:
 10118 ;;		line 49 in file "tactiles.c"
 10119 ;; Parameters:    Size  Location     Type
 10120 ;;		None
 10121 ;; Auto vars:     Size  Location     Type
 10122 ;;		None
 10123 ;; Return value:  Size  Location     Type
 10124 ;;                  1    wreg      void 
 10125 ;; Registers used:
 10126 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10127 ;; Tracked objects:
 10128 ;;		On entry : 0/0
 10129 ;;		On exit  : 0/0
 10130 ;;		Unchanged: 0/0
 10131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10133 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10134 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10135 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10136 ;;Total ram usage:        1 bytes
 10137 ;; Hardware stack levels used:    1
 10138 ;; Hardware stack levels required when called:    5
 10139 ;; This function calls:
 10140 ;;		_set_leds_top
 10141 ;;		_wait_ms
 10142 ;; This function is called by:
 10143 ;;		_main
 10144 ;; This function uses a non-reentrant model
 10145 ;;
 10146                           
 10147                           
 10148                           ;psect for function _read_top_tactile
 10149  12B7                     _read_top_tactile:	
 10150                           
 10151                           ;tactiles.c: 59: if (PORTDbits.RD5 == 0) {
 10152                           
 10153                           ;incstack = 0
 10154                           ; Regs used in _read_top_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10155  12B7  0020               	movlb	0	; select bank0
 10156  12B8  1A8F               	btfsc	15,5	;volatile
 10157  12B9  2AC1               	goto	l7137
 10158                           
 10159                           ;tactiles.c: 60: if (topTactile_pressed > 0) {
 10160  12BA  0022               	movlb	2	; select bank2
 10161  12BB  0860               	movf	_topTactile_pressed^(0+256),w
 10162  12BC  1903               	btfsc	3,2
 10163  12BD  2ACC               	goto	l948
 10164                           
 10165                           ;tactiles.c: 61: topTactile_pressed--;
 10166  12BE  3001               	movlw	1
 10167  12BF  02E0               	subwf	_topTactile_pressed^(0+256),f
 10168                           
 10169                           ;tactiles.c: 62: }
 10170                           ;tactiles.c: 63: } else if (topTactile_pressed < 25) {
 10171  12C0  2ACC               	goto	l948
 10172  12C1                     l7137:	
 10173  12C1  3019               	movlw	25
 10174  12C2  0022               	movlb	2	; select bank2
 10175  12C3  0260               	subwf	_topTactile_pressed^(0+256),w
 10176  12C4  1803               	skipnc
 10177  12C5  2ACC               	goto	l948
 10178                           
 10179                           ;tactiles.c: 64: topTactile_pressed++;
 10180  12C6  3001               	movlw	1
 10181  12C7  0021               	movlb	1	; select bank1
 10182  12C8  00B2               	movwf	??_read_top_tactile^(0+128)
 10183  12C9  0832               	movf	??_read_top_tactile^(0+128),w
 10184  12CA  0022               	movlb	2	; select bank2
 10185  12CB  07E0               	addwf	_topTactile_pressed^(0+256),f
 10186  12CC                     l948:	
 10187                           
 10188                           ;tactiles.c: 65: }
 10189                           ;tactiles.c: 70: if (topTactile_pressed == 0) {
 10190  12CC  0860               	movf	_topTactile_pressed^(0+256),w
 10191  12CD  1D03               	btfss	3,2
 10192  12CE  0008               	return
 10193                           
 10194                           ;tactiles.c: 72: top_push_state = top_push_state + 1;
 10195  12CF  0020               	movlb	0	; select bank0
 10196  12D0  0851               	movf	_top_push_state,w
 10197  12D1  3E01               	addlw	1
 10198  12D2  00D1               	movwf	_top_push_state
 10199  12D3  3000               	movlw	0
 10200  12D4  3D52               	addwfc	_top_push_state+1,w
 10201  12D5  00D2               	movwf	_top_push_state+1
 10202                           
 10203                           ;tactiles.c: 73: if (top_push_state >= 7) {
 10204  12D6  0852               	movf	_top_push_state+1,w
 10205  12D7  3A80               	xorlw	128
 10206  12D8  0021               	movlb	1	; select bank1
 10207  12D9  00B2               	movwf	??_read_top_tactile^(0+128)
 10208  12DA  3080               	movlw	128
 10209  12DB  0232               	subwf	??_read_top_tactile^(0+128),w
 10210  12DC  1D03               	skipz
 10211  12DD  2AE1               	goto	u7965
 10212  12DE  3007               	movlw	7
 10213  12DF  0020               	movlb	0	; select bank0
 10214  12E0  0251               	subwf	_top_push_state,w
 10215  12E1                     u7965:	
 10216  12E1  1C03               	skipc
 10217  12E2  2AE8               	goto	l7147
 10218                           
 10219                           ;tactiles.c: 74: top_push_state = 1;
 10220  12E3  3001               	movlw	1
 10221  12E4  0020               	movlb	0	; select bank0
 10222  12E5  00D1               	movwf	_top_push_state
 10223  12E6  3000               	movlw	0
 10224  12E7  00D2               	movwf	_top_push_state+1
 10225  12E8                     l7147:	
 10226                           
 10227                           ;tactiles.c: 75: }
 10228                           ;tactiles.c: 76: set_leds_top(top_push_state, 1);
 10229  12E8  0020               	movlb	0	; select bank0
 10230  12E9  0852               	movf	_top_push_state+1,w
 10231  12EA  0021               	movlb	1	; select bank1
 10232  12EB  00A1               	movwf	(set_leds_top@x+1)^(0+128)
 10233  12EC  0020               	movlb	0	; select bank0
 10234  12ED  0851               	movf	_top_push_state,w
 10235  12EE  0021               	movlb	1	; select bank1
 10236  12EF  00A0               	movwf	set_leds_top@x^(0+128)
 10237  12F0  3001               	movlw	1
 10238  12F1  00A2               	movwf	set_leds_top@ledState^(0+128)
 10239  12F2  3000               	movlw	0
 10240  12F3  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
 10241  12F4  3193  23FA  3192   	fcall	_set_leds_top
 10242                           
 10243                           ;tactiles.c: 77: delay_time_changed = 1;
 10244  12F7  3001               	movlw	1
 10245  12F8  0023               	movlb	3	; select bank3
 10246  12F9  00E0               	movwf	_delay_time_changed^(0+384)
 10247  12FA  3000               	movlw	0
 10248  12FB  00E1               	movwf	(_delay_time_changed^(0+384)+1)
 10249  12FC                     l952:	
 10250                           ;tactiles.c: 80: while (PORTDbits.RD5 == 0) {
 10251                           
 10252  12FC  0020               	movlb	0	; select bank0
 10253  12FD  1E8F               	btfss	15,5	;volatile
 10254  12FE  2AFC               	goto	l952
 10255                           
 10256                           ;tactiles.c: 81: }
 10257                           ;tactiles.c: 82: wait_ms(20);
 10258  12FF  3014               	movlw	20
 10259  1300  0021               	movlb	1	; select bank1
 10260  1301  00AC               	movwf	wait_ms@timeSec^(0+128)
 10261  1302  3000               	movlw	0
 10262  1303  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 10263  1304  319E  2630         	fcall	_wait_ms
 10264  1306  0008               	return
 10265  1307                     __end_of_read_top_tactile:	
 10266                           
 10267                           	psect	text23
 10268  1193                     __ptext23:	
 10269 ;; *************** function _read_bottom_tactile *****************
 10270 ;; Defined at:
 10271 ;;		line 18 in file "tactiles.c"
 10272 ;; Parameters:    Size  Location     Type
 10273 ;;		None
 10274 ;; Auto vars:     Size  Location     Type
 10275 ;;		None
 10276 ;; Return value:  Size  Location     Type
 10277 ;;                  1    wreg      void 
 10278 ;; Registers used:
 10279 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10280 ;; Tracked objects:
 10281 ;;		On entry : 0/0
 10282 ;;		On exit  : 0/0
 10283 ;;		Unchanged: 0/0
 10284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10286 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10287 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10288 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10289 ;;Total ram usage:        1 bytes
 10290 ;; Hardware stack levels used:    1
 10291 ;; Hardware stack levels required when called:    5
 10292 ;; This function calls:
 10293 ;;		_set_leds_bottom
 10294 ;;		_wait_ms
 10295 ;; This function is called by:
 10296 ;;		_main
 10297 ;; This function uses a non-reentrant model
 10298 ;;
 10299                           
 10300                           
 10301                           ;psect for function _read_bottom_tactile
 10302  1193                     _read_bottom_tactile:	
 10303                           
 10304                           ;tactiles.c: 27: if (PORTDbits.RD6 == 0) {
 10305                           
 10306                           ;incstack = 0
 10307                           ; Regs used in _read_bottom_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10308  1193  0020               	movlb	0	; select bank0
 10309  1194  1B0F               	btfsc	15,6	;volatile
 10310  1195  299D               	goto	l7117
 10311                           
 10312                           ;tactiles.c: 28: if (bottomTactile_pressed > 0) {
 10313  1196  0022               	movlb	2	; select bank2
 10314  1197  0859               	movf	_bottomTactile_pressed^(0+256),w
 10315  1198  1903               	btfsc	3,2
 10316  1199  29A8               	goto	l936
 10317                           
 10318                           ;tactiles.c: 29: bottomTactile_pressed--;
 10319  119A  3001               	movlw	1
 10320  119B  02D9               	subwf	_bottomTactile_pressed^(0+256),f
 10321                           
 10322                           ;tactiles.c: 30: }
 10323                           ;tactiles.c: 31: } else if (bottomTactile_pressed < 25) {
 10324  119C  29A8               	goto	l936
 10325  119D                     l7117:	
 10326  119D  3019               	movlw	25
 10327  119E  0022               	movlb	2	; select bank2
 10328  119F  0259               	subwf	_bottomTactile_pressed^(0+256),w
 10329  11A0  1803               	skipnc
 10330  11A1  29A8               	goto	l936
 10331                           
 10332                           ;tactiles.c: 32: bottomTactile_pressed++;
 10333  11A2  3001               	movlw	1
 10334  11A3  0021               	movlb	1	; select bank1
 10335  11A4  00B2               	movwf	??_read_bottom_tactile^(0+128)
 10336  11A5  0832               	movf	??_read_bottom_tactile^(0+128),w
 10337  11A6  0022               	movlb	2	; select bank2
 10338  11A7  07D9               	addwf	_bottomTactile_pressed^(0+256),f
 10339  11A8                     l936:	
 10340                           
 10341                           ;tactiles.c: 33: }
 10342                           ;tactiles.c: 36: if (bottomTactile_pressed == 0) {
 10343  11A8  0859               	movf	_bottomTactile_pressed^(0+256),w
 10344  11A9  1D03               	btfss	3,2
 10345  11AA  0008               	return
 10346                           
 10347                           ;tactiles.c: 37: bottom_push_state = bottom_push_state + 1;
 10348  11AB  0020               	movlb	0	; select bank0
 10349  11AC  084D               	movf	_bottom_push_state,w
 10350  11AD  3E01               	addlw	1
 10351  11AE  00CD               	movwf	_bottom_push_state
 10352  11AF  3000               	movlw	0
 10353  11B0  3D4E               	addwfc	_bottom_push_state+1,w
 10354  11B1  00CE               	movwf	_bottom_push_state+1
 10355                           
 10356                           ;tactiles.c: 38: if (bottom_push_state > 6) {
 10357  11B2  084E               	movf	_bottom_push_state+1,w
 10358  11B3  3A80               	xorlw	128
 10359  11B4  0021               	movlb	1	; select bank1
 10360  11B5  00B2               	movwf	??_read_bottom_tactile^(0+128)
 10361  11B6  3080               	movlw	128
 10362  11B7  0232               	subwf	??_read_bottom_tactile^(0+128),w
 10363  11B8  1D03               	skipz
 10364  11B9  29BD               	goto	u7905
 10365  11BA  3007               	movlw	7
 10366  11BB  0020               	movlb	0	; select bank0
 10367  11BC  024D               	subwf	_bottom_push_state,w
 10368  11BD                     u7905:	
 10369  11BD  1C03               	skipc
 10370  11BE  29C4               	goto	l7127
 10371                           
 10372                           ;tactiles.c: 39: bottom_push_state = 1;
 10373  11BF  3001               	movlw	1
 10374  11C0  0020               	movlb	0	; select bank0
 10375  11C1  00CD               	movwf	_bottom_push_state
 10376  11C2  3000               	movlw	0
 10377  11C3  00CE               	movwf	_bottom_push_state+1
 10378  11C4                     l7127:	
 10379                           
 10380                           ;tactiles.c: 40: }
 10381                           ;tactiles.c: 41: set_leds_bottom(bottom_push_state);
 10382  11C4  0020               	movlb	0	; select bank0
 10383  11C5  084E               	movf	_bottom_push_state+1,w
 10384  11C6  0021               	movlb	1	; select bank1
 10385  11C7  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
 10386  11C8  0020               	movlb	0	; select bank0
 10387  11C9  084D               	movf	_bottom_push_state,w
 10388  11CA  0021               	movlb	1	; select bank1
 10389  11CB  00A0               	movwf	set_leds_bottom@x^(0+128)
 10390  11CC  319F  270E  3191   	fcall	_set_leds_bottom
 10391  11CF                     l940:	
 10392                           ;tactiles.c: 43: while (PORTDbits.RD6 == 0) {
 10393                           
 10394  11CF  0020               	movlb	0	; select bank0
 10395  11D0  1F0F               	btfss	15,6	;volatile
 10396  11D1  29CF               	goto	l940
 10397                           
 10398                           ;tactiles.c: 44: }
 10399                           ;tactiles.c: 45: wait_ms(20);
 10400  11D2  3014               	movlw	20
 10401  11D3  0021               	movlb	1	; select bank1
 10402  11D4  00AC               	movwf	wait_ms@timeSec^(0+128)
 10403  11D5  3000               	movlw	0
 10404  11D6  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 10405  11D7  319E  2630         	fcall	_wait_ms
 10406  11D9  0008               	return
 10407  11DA                     __end_of_read_bottom_tactile:	
 10408                           
 10409                           	psect	text24
 10410  162D                     __ptext24:	
 10411 ;; *************** function _map *****************
 10412 ;; Defined at:
 10413 ;;		line 177 in file "user.c"
 10414 ;; Parameters:    Size  Location     Type
 10415 ;;  x               3   53[BANK1 ] float 
 10416 ;;  in_min          3   56[BANK1 ] float 
 10417 ;;  in_max          3   59[BANK1 ] float 
 10418 ;;  out_min         3   62[BANK1 ] float 
 10419 ;;  out_max         3   65[BANK1 ] float 
 10420 ;; Auto vars:     Size  Location     Type
 10421 ;;		None
 10422 ;; Return value:  Size  Location     Type
 10423 ;;                  3   53[BANK1 ] float 
 10424 ;; Registers used:
 10425 ;;		wreg, status,2, status,0, pclath, cstack
 10426 ;; Tracked objects:
 10427 ;;		On entry : 0/0
 10428 ;;		On exit  : 0/0
 10429 ;;		Unchanged: 0/0
 10430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10431 ;;      Params:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10432 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10434 ;;      Totals:         0       0      18       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10435 ;;Total ram usage:       18 bytes
 10436 ;; Hardware stack levels used:    1
 10437 ;; Hardware stack levels required when called:    5
 10438 ;; This function calls:
 10439 ;;		___ftadd
 10440 ;;		___ftdiv
 10441 ;;		___ftmul
 10442 ;;		___ftneg
 10443 ;; This function is called by:
 10444 ;;		_main
 10445 ;; This function uses a non-reentrant model
 10446 ;;
 10447                           
 10448                           
 10449                           ;psect for function _map
 10450  162D                     _map:	
 10451                           
 10452                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 10453                           
 10454                           ;incstack = 0
 10455                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
 10456  162D  0021               	movlb	1	; select bank1
 10457  162E  085B               	movf	map@in_max^(0+128),w
 10458  162F  00A8               	movwf	___ftadd@f1^(0+128)
 10459  1630  085C               	movf	(map@in_max+1)^(0+128),w
 10460  1631  00A9               	movwf	(___ftadd@f1+1)^(0+128)
 10461  1632  085D               	movf	(map@in_max+2)^(0+128),w
 10462  1633  00AA               	movwf	(___ftadd@f1+2)^(0+128)
 10463  1634  0858               	movf	map@in_min^(0+128),w
 10464  1635  00A0               	movwf	___ftneg@f1^(0+128)
 10465  1636  0859               	movf	(map@in_min+1)^(0+128),w
 10466  1637  00A1               	movwf	(___ftneg@f1+1)^(0+128)
 10467  1638  085A               	movf	(map@in_min+2)^(0+128),w
 10468  1639  00A2               	movwf	(___ftneg@f1+2)^(0+128)
 10469  163A  319C  242E  3196   	fcall	___ftneg
 10470  163D  0021               	movlb	1	; select bank1
 10471  163E  0820               	movf	?___ftneg^(0+128),w
 10472  163F  00AB               	movwf	___ftadd@f2^(0+128)
 10473  1640  0821               	movf	(?___ftneg+1)^(0+128),w
 10474  1641  00AC               	movwf	(___ftadd@f2+1)^(0+128)
 10475  1642  0822               	movf	(?___ftneg+2)^(0+128),w
 10476  1643  00AD               	movwf	(___ftadd@f2+2)^(0+128)
 10477  1644  318A  22AF  3196   	fcall	___ftadd
 10478  1647  0021               	movlb	1	; select bank1
 10479  1648  0828               	movf	?___ftadd^(0+128),w
 10480  1649  00C5               	movwf	___ftdiv@f2^(0+128)
 10481  164A  0829               	movf	(?___ftadd+1)^(0+128),w
 10482  164B  00C6               	movwf	(___ftdiv@f2+1)^(0+128)
 10483  164C  082A               	movf	(?___ftadd+2)^(0+128),w
 10484  164D  00C7               	movwf	(___ftdiv@f2+2)^(0+128)
 10485  164E  0861               	movf	map@out_max^(0+128),w
 10486  164F  00A8               	movwf	___ftadd@f1^(0+128)
 10487  1650  0862               	movf	(map@out_max+1)^(0+128),w
 10488  1651  00A9               	movwf	(___ftadd@f1+1)^(0+128)
 10489  1652  0863               	movf	(map@out_max+2)^(0+128),w
 10490  1653  00AA               	movwf	(___ftadd@f1+2)^(0+128)
 10491  1654  085E               	movf	map@out_min^(0+128),w
 10492  1655  00A0               	movwf	___ftneg@f1^(0+128)
 10493  1656  085F               	movf	(map@out_min+1)^(0+128),w
 10494  1657  00A1               	movwf	(___ftneg@f1+1)^(0+128)
 10495  1658  0860               	movf	(map@out_min+2)^(0+128),w
 10496  1659  00A2               	movwf	(___ftneg@f1+2)^(0+128)
 10497  165A  319C  242E  3196   	fcall	___ftneg
 10498  165D  0021               	movlb	1	; select bank1
 10499  165E  0820               	movf	?___ftneg^(0+128),w
 10500  165F  00AB               	movwf	___ftadd@f2^(0+128)
 10501  1660  0821               	movf	(?___ftneg+1)^(0+128),w
 10502  1661  00AC               	movwf	(___ftadd@f2+1)^(0+128)
 10503  1662  0822               	movf	(?___ftneg+2)^(0+128),w
 10504  1663  00AD               	movwf	(___ftadd@f2+2)^(0+128)
 10505  1664  318A  22AF  3196   	fcall	___ftadd
 10506  1667  0021               	movlb	1	; select bank1
 10507  1668  0828               	movf	?___ftadd^(0+128),w
 10508  1669  00B5               	movwf	___ftmul@f1^(0+128)
 10509  166A  0829               	movf	(?___ftadd+1)^(0+128),w
 10510  166B  00B6               	movwf	(___ftmul@f1+1)^(0+128)
 10511  166C  082A               	movf	(?___ftadd+2)^(0+128),w
 10512  166D  00B7               	movwf	(___ftmul@f1+2)^(0+128)
 10513  166E  0855               	movf	map@x^(0+128),w
 10514  166F  00A8               	movwf	___ftadd@f1^(0+128)
 10515  1670  0856               	movf	(map@x+1)^(0+128),w
 10516  1671  00A9               	movwf	(___ftadd@f1+1)^(0+128)
 10517  1672  0857               	movf	(map@x+2)^(0+128),w
 10518  1673  00AA               	movwf	(___ftadd@f1+2)^(0+128)
 10519  1674  0858               	movf	map@in_min^(0+128),w
 10520  1675  00A0               	movwf	___ftneg@f1^(0+128)
 10521  1676  0859               	movf	(map@in_min+1)^(0+128),w
 10522  1677  00A1               	movwf	(___ftneg@f1+1)^(0+128)
 10523  1678  085A               	movf	(map@in_min+2)^(0+128),w
 10524  1679  00A2               	movwf	(___ftneg@f1+2)^(0+128)
 10525  167A  319C  242E  3196   	fcall	___ftneg
 10526  167D  0021               	movlb	1	; select bank1
 10527  167E  0820               	movf	?___ftneg^(0+128),w
 10528  167F  00AB               	movwf	___ftadd@f2^(0+128)
 10529  1680  0821               	movf	(?___ftneg+1)^(0+128),w
 10530  1681  00AC               	movwf	(___ftadd@f2+1)^(0+128)
 10531  1682  0822               	movf	(?___ftneg+2)^(0+128),w
 10532  1683  00AD               	movwf	(___ftadd@f2+2)^(0+128)
 10533  1684  318A  22AF  3196   	fcall	___ftadd
 10534  1687  0021               	movlb	1	; select bank1
 10535  1688  0828               	movf	?___ftadd^(0+128),w
 10536  1689  00B8               	movwf	___ftmul@f2^(0+128)
 10537  168A  0829               	movf	(?___ftadd+1)^(0+128),w
 10538  168B  00B9               	movwf	(___ftmul@f2+1)^(0+128)
 10539  168C  082A               	movf	(?___ftadd+2)^(0+128),w
 10540  168D  00BA               	movwf	(___ftmul@f2+2)^(0+128)
 10541  168E  3188  205A  3196   	fcall	___ftmul
 10542  1691  0021               	movlb	1	; select bank1
 10543  1692  0835               	movf	?___ftmul^(0+128),w
 10544  1693  00C8               	movwf	___ftdiv@f1^(0+128)
 10545  1694  0836               	movf	(?___ftmul+1)^(0+128),w
 10546  1695  00C9               	movwf	(___ftdiv@f1+1)^(0+128)
 10547  1696  0837               	movf	(?___ftmul+2)^(0+128),w
 10548  1697  00CA               	movwf	(___ftdiv@f1+2)^(0+128)
 10549  1698  3197  2757  3196   	fcall	___ftdiv
 10550  169B  0021               	movlb	1	; select bank1
 10551  169C  0845               	movf	?___ftdiv^(0+128),w
 10552  169D  00E4               	movwf	_map$2558^(0+128)
 10553  169E  0846               	movf	(?___ftdiv+1)^(0+128),w
 10554  169F  00E5               	movwf	(_map$2558+1)^(0+128)
 10555  16A0  0847               	movf	(?___ftdiv+2)^(0+128),w
 10556  16A1  00E6               	movwf	(_map$2558+2)^(0+128)
 10557                           
 10558                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 10559  16A2  085E               	movf	map@out_min^(0+128),w
 10560  16A3  00A8               	movwf	___ftadd@f1^(0+128)
 10561  16A4  085F               	movf	(map@out_min+1)^(0+128),w
 10562  16A5  00A9               	movwf	(___ftadd@f1+1)^(0+128)
 10563  16A6  0860               	movf	(map@out_min+2)^(0+128),w
 10564  16A7  00AA               	movwf	(___ftadd@f1+2)^(0+128)
 10565  16A8  0864               	movf	_map$2558^(0+128),w
 10566  16A9  00AB               	movwf	___ftadd@f2^(0+128)
 10567  16AA  0865               	movf	(_map$2558+1)^(0+128),w
 10568  16AB  00AC               	movwf	(___ftadd@f2+1)^(0+128)
 10569  16AC  0866               	movf	(_map$2558+2)^(0+128),w
 10570  16AD  00AD               	movwf	(___ftadd@f2+2)^(0+128)
 10571  16AE  318A  22AF         	fcall	___ftadd
 10572  16B0  0021               	movlb	1	; select bank1
 10573  16B1  0828               	movf	?___ftadd^(0+128),w
 10574  16B2  00D5               	movwf	?_map^(0+128)
 10575  16B3  0829               	movf	(?___ftadd+1)^(0+128),w
 10576  16B4  00D6               	movwf	(?_map+1)^(0+128)
 10577  16B5  082A               	movf	(?___ftadd+2)^(0+128),w
 10578  16B6  00D7               	movwf	(?_map+2)^(0+128)
 10579  16B7  0008               	return
 10580  16B8                     __end_of_map:	
 10581                           
 10582                           	psect	text25
 10583  1C2E                     __ptext25:	
 10584 ;; *************** function ___ftneg *****************
 10585 ;; Defined at:
 10586 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
 10587 ;; Parameters:    Size  Location     Type
 10588 ;;  f1              3    0[BANK1 ] float 
 10589 ;; Auto vars:     Size  Location     Type
 10590 ;;		None
 10591 ;; Return value:  Size  Location     Type
 10592 ;;                  3    0[BANK1 ] float 
 10593 ;; Registers used:
 10594 ;;		wreg
 10595 ;; Tracked objects:
 10596 ;;		On entry : 0/0
 10597 ;;		On exit  : 0/0
 10598 ;;		Unchanged: 0/0
 10599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10600 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10603 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10604 ;;Total ram usage:        3 bytes
 10605 ;; Hardware stack levels used:    1
 10606 ;; Hardware stack levels required when called:    3
 10607 ;; This function calls:
 10608 ;;		Nothing
 10609 ;; This function is called by:
 10610 ;;		_map
 10611 ;;		_scalePotValue
 10612 ;; This function uses a non-reentrant model
 10613 ;;
 10614                           
 10615                           
 10616                           ;psect for function ___ftneg
 10617  1C2E                     ___ftneg:	
 10618                           
 10619                           ;incstack = 0
 10620                           ; Regs used in ___ftneg: [wreg]
 10621  1C2E  0021               	movlb	1	; select bank1
 10622  1C2F  0822               	movf	(___ftneg@f1+2)^(0+128),w
 10623  1C30  0421               	iorwf	(___ftneg@f1+1)^(0+128),w
 10624  1C31  0420               	iorwf	___ftneg@f1^(0+128),w
 10625  1C32  1903               	skipnz
 10626  1C33  0008               	return
 10627  1C34  3080               	movlw	128
 10628  1C35  06A2               	xorwf	(___ftneg@f1+2)^(0+128),f
 10629  1C36  0008               	return
 10630  1C37                     __end_of___ftneg:	
 10631                           
 10632                           	psect	text26
 10633  085A                     __ptext26:	
 10634 ;; *************** function ___ftmul *****************
 10635 ;; Defined at:
 10636 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
 10637 ;; Parameters:    Size  Location     Type
 10638 ;;  f1              3   21[BANK1 ] float 
 10639 ;;  f2              3   24[BANK1 ] float 
 10640 ;; Auto vars:     Size  Location     Type
 10641 ;;  f3_as_produc    3   32[BANK1 ] unsigned um
 10642 ;;  sign            1   36[BANK1 ] unsigned char 
 10643 ;;  cntr            1   35[BANK1 ] unsigned char 
 10644 ;;  exp             1   31[BANK1 ] unsigned char 
 10645 ;; Return value:  Size  Location     Type
 10646 ;;                  3   21[BANK1 ] float 
 10647 ;; Registers used:
 10648 ;;		wreg, status,2, status,0, pclath, cstack
 10649 ;; Tracked objects:
 10650 ;;		On entry : 0/0
 10651 ;;		On exit  : 0/0
 10652 ;;		Unchanged: 0/0
 10653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10654 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10655 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10656 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10657 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10658 ;;Total ram usage:       16 bytes
 10659 ;; Hardware stack levels used:    1
 10660 ;; Hardware stack levels required when called:    4
 10661 ;; This function calls:
 10662 ;;		___ftpack
 10663 ;; This function is called by:
 10664 ;;		_set_subdivision
 10665 ;;		_map
 10666 ;;		_scalePotValue
 10667 ;; This function uses a non-reentrant model
 10668 ;;
 10669                           
 10670                           
 10671                           ;psect for function ___ftmul
 10672  085A                     ___ftmul:	
 10673                           
 10674                           ;incstack = 0
 10675                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 10676  085A  0021               	movlb	1	; select bank1
 10677  085B  0835               	movf	___ftmul@f1^(0+128),w
 10678  085C  00BB               	movwf	??___ftmul^(0+128)
 10679  085D  0836               	movf	(___ftmul@f1+1)^(0+128),w
 10680  085E  00BC               	movwf	(??___ftmul^(0+128)+1)
 10681  085F  0837               	movf	(___ftmul@f1+2)^(0+128),w
 10682  0860  00BD               	movwf	(??___ftmul^(0+128)+2)
 10683  0861  1003               	clrc
 10684  0862  0D3C               	rlf	(??___ftmul^(0+128)+1),w
 10685  0863  0D3D               	rlf	(??___ftmul^(0+128)+2),w
 10686  0864  00BE               	movwf	(??___ftmul+3)^(0+128)
 10687  0865  083E               	movf	(??___ftmul+3)^(0+128),w
 10688  0866  00BF               	movwf	___ftmul@exp^(0+128)
 10689  0867  083F               	movf	___ftmul@exp^(0+128),w
 10690  0868  1D03               	btfss	3,2
 10691  0869  2871               	goto	l6729
 10692  086A  3000               	movlw	0
 10693  086B  00B5               	movwf	?___ftmul^(0+128)
 10694  086C  3000               	movlw	0
 10695  086D  00B6               	movwf	(?___ftmul+1)^(0+128)
 10696  086E  3000               	movlw	0
 10697  086F  00B7               	movwf	(?___ftmul+2)^(0+128)
 10698  0870  0008               	return
 10699  0871                     l6729:	
 10700  0871  0838               	movf	___ftmul@f2^(0+128),w
 10701  0872  00BB               	movwf	??___ftmul^(0+128)
 10702  0873  0839               	movf	(___ftmul@f2+1)^(0+128),w
 10703  0874  00BC               	movwf	(??___ftmul^(0+128)+1)
 10704  0875  083A               	movf	(___ftmul@f2+2)^(0+128),w
 10705  0876  00BD               	movwf	(??___ftmul^(0+128)+2)
 10706  0877  1003               	clrc
 10707  0878  0D3C               	rlf	(??___ftmul^(0+128)+1),w
 10708  0879  0D3D               	rlf	(??___ftmul^(0+128)+2),w
 10709  087A  00BE               	movwf	(??___ftmul+3)^(0+128)
 10710  087B  083E               	movf	(??___ftmul+3)^(0+128),w
 10711  087C  00C4               	movwf	___ftmul@sign^(0+128)
 10712  087D  0844               	movf	___ftmul@sign^(0+128),w
 10713  087E  1D03               	btfss	3,2
 10714  087F  2887               	goto	l6735
 10715  0880  3000               	movlw	0
 10716  0881  00B5               	movwf	?___ftmul^(0+128)
 10717  0882  3000               	movlw	0
 10718  0883  00B6               	movwf	(?___ftmul+1)^(0+128)
 10719  0884  3000               	movlw	0
 10720  0885  00B7               	movwf	(?___ftmul+2)^(0+128)
 10721  0886  0008               	return
 10722  0887                     l6735:	
 10723  0887  0844               	movf	___ftmul@sign^(0+128),w
 10724  0888  3E7B               	addlw	123
 10725  0889  00BB               	movwf	??___ftmul^(0+128)
 10726  088A  083B               	movf	??___ftmul^(0+128),w
 10727  088B  07BF               	addwf	___ftmul@exp^(0+128),f
 10728  088C  0835               	movf	___ftmul@f1^(0+128),w
 10729  088D  00BB               	movwf	??___ftmul^(0+128)
 10730  088E  0836               	movf	(___ftmul@f1+1)^(0+128),w
 10731  088F  00BC               	movwf	(??___ftmul^(0+128)+1)
 10732  0890  0837               	movf	(___ftmul@f1+2)^(0+128),w
 10733  0891  00BD               	movwf	(??___ftmul^(0+128)+2)
 10734  0892  3010               	movlw	16
 10735  0893                     u7075:	
 10736  0893  36BD               	lsrf	(??___ftmul^(0+128)+2),f
 10737  0894  0CBC               	rrf	(??___ftmul^(0+128)+1),f
 10738  0895  0CBB               	rrf	??___ftmul^(0+128),f
 10739  0896  0B89               	decfsz	9,f
 10740  0897  2893               	goto	u7075
 10741  0898  083B               	movf	??___ftmul^(0+128),w
 10742  0899  00BE               	movwf	(??___ftmul+3)^(0+128)
 10743  089A  083E               	movf	(??___ftmul+3)^(0+128),w
 10744  089B  00C4               	movwf	___ftmul@sign^(0+128)
 10745  089C  0838               	movf	___ftmul@f2^(0+128),w
 10746  089D  00BB               	movwf	??___ftmul^(0+128)
 10747  089E  0839               	movf	(___ftmul@f2+1)^(0+128),w
 10748  089F  00BC               	movwf	(??___ftmul^(0+128)+1)
 10749  08A0  083A               	movf	(___ftmul@f2+2)^(0+128),w
 10750  08A1  00BD               	movwf	(??___ftmul^(0+128)+2)
 10751  08A2  3010               	movlw	16
 10752  08A3                     u7085:	
 10753  08A3  36BD               	lsrf	(??___ftmul^(0+128)+2),f
 10754  08A4  0CBC               	rrf	(??___ftmul^(0+128)+1),f
 10755  08A5  0CBB               	rrf	??___ftmul^(0+128),f
 10756  08A6  0B89               	decfsz	9,f
 10757  08A7  28A3               	goto	u7085
 10758  08A8  083B               	movf	??___ftmul^(0+128),w
 10759  08A9  00BE               	movwf	(??___ftmul+3)^(0+128)
 10760  08AA  083E               	movf	(??___ftmul+3)^(0+128),w
 10761  08AB  06C4               	xorwf	___ftmul@sign^(0+128),f
 10762  08AC  3080               	movlw	128
 10763  08AD  00BB               	movwf	??___ftmul^(0+128)
 10764  08AE  083B               	movf	??___ftmul^(0+128),w
 10765  08AF  05C4               	andwf	___ftmul@sign^(0+128),f
 10766  08B0  17B6               	bsf	(___ftmul@f1^(0+128)+1),7
 10767  08B1  17B9               	bsf	(___ftmul@f2^(0+128)+1),7
 10768  08B2  30FF               	movlw	255
 10769  08B3  05B8               	andwf	___ftmul@f2^(0+128),f
 10770  08B4  30FF               	movlw	255
 10771  08B5  05B9               	andwf	(___ftmul@f2+1)^(0+128),f
 10772  08B6  3000               	movlw	0
 10773  08B7  05BA               	andwf	(___ftmul@f2+2)^(0+128),f
 10774  08B8  3000               	movlw	0
 10775  08B9  00C0               	movwf	___ftmul@f3_as_product^(0+128)
 10776  08BA  3000               	movlw	0
 10777  08BB  00C1               	movwf	(___ftmul@f3_as_product+1)^(0+128)
 10778  08BC  3000               	movlw	0
 10779  08BD  00C2               	movwf	(___ftmul@f3_as_product+2)^(0+128)
 10780  08BE  3007               	movlw	7
 10781  08BF  00BB               	movwf	??___ftmul^(0+128)
 10782  08C0  083B               	movf	??___ftmul^(0+128),w
 10783  08C1  00C3               	movwf	___ftmul@cntr^(0+128)
 10784  08C2                     l6747:	
 10785  08C2  1C35               	btfss	___ftmul@f1^(0+128),0
 10786  08C3  28CA               	goto	l6751
 10787  08C4  0838               	movf	___ftmul@f2^(0+128),w
 10788  08C5  07C0               	addwf	___ftmul@f3_as_product^(0+128),f
 10789  08C6  0839               	movf	(___ftmul@f2+1)^(0+128),w
 10790  08C7  3DC1               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
 10791  08C8  083A               	movf	(___ftmul@f2+2)^(0+128),w
 10792  08C9  3DC2               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
 10793  08CA                     l6751:	
 10794  08CA  3001               	movlw	1
 10795  08CB                     u7105:	
 10796  08CB  36B7               	lsrf	(___ftmul@f1+2)^(0+128),f
 10797  08CC  0CB6               	rrf	(___ftmul@f1+1)^(0+128),f
 10798  08CD  0CB5               	rrf	___ftmul@f1^(0+128),f
 10799  08CE  0B89               	decfsz	9,f
 10800  08CF  28CB               	goto	u7105
 10801  08D0  3001               	movlw	1
 10802  08D1                     u7115:	
 10803  08D1  35B8               	lslf	___ftmul@f2^(0+128),f
 10804  08D2  0DB9               	rlf	(___ftmul@f2+1)^(0+128),f
 10805  08D3  0DBA               	rlf	(___ftmul@f2+2)^(0+128),f
 10806  08D4  0B89               	decfsz	9,f
 10807  08D5  28D1               	goto	u7115
 10808  08D6  3001               	movlw	1
 10809  08D7  02C3               	subwf	___ftmul@cntr^(0+128),f
 10810  08D8  1D03               	btfss	3,2
 10811  08D9  28C2               	goto	l6747
 10812  08DA  3009               	movlw	9
 10813  08DB  00BB               	movwf	??___ftmul^(0+128)
 10814  08DC  083B               	movf	??___ftmul^(0+128),w
 10815  08DD  00C3               	movwf	___ftmul@cntr^(0+128)
 10816  08DE                     l6759:	
 10817  08DE  1C35               	btfss	___ftmul@f1^(0+128),0
 10818  08DF  28E6               	goto	l6763
 10819  08E0  0838               	movf	___ftmul@f2^(0+128),w
 10820  08E1  07C0               	addwf	___ftmul@f3_as_product^(0+128),f
 10821  08E2  0839               	movf	(___ftmul@f2+1)^(0+128),w
 10822  08E3  3DC1               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
 10823  08E4  083A               	movf	(___ftmul@f2+2)^(0+128),w
 10824  08E5  3DC2               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
 10825  08E6                     l6763:	
 10826  08E6  3001               	movlw	1
 10827  08E7                     u7145:	
 10828  08E7  36B7               	lsrf	(___ftmul@f1+2)^(0+128),f
 10829  08E8  0CB6               	rrf	(___ftmul@f1+1)^(0+128),f
 10830  08E9  0CB5               	rrf	___ftmul@f1^(0+128),f
 10831  08EA  0B89               	decfsz	9,f
 10832  08EB  28E7               	goto	u7145
 10833  08EC  3001               	movlw	1
 10834  08ED                     u7155:	
 10835  08ED  36C2               	lsrf	(___ftmul@f3_as_product+2)^(0+128),f
 10836  08EE  0CC1               	rrf	(___ftmul@f3_as_product+1)^(0+128),f
 10837  08EF  0CC0               	rrf	___ftmul@f3_as_product^(0+128),f
 10838  08F0  0B89               	decfsz	9,f
 10839  08F1  28ED               	goto	u7155
 10840  08F2  3001               	movlw	1
 10841  08F3  02C3               	subwf	___ftmul@cntr^(0+128),f
 10842  08F4  1D03               	btfss	3,2
 10843  08F5  28DE               	goto	l6759
 10844  08F6  0840               	movf	___ftmul@f3_as_product^(0+128),w
 10845  08F7  00A0               	movwf	___ftpack@arg^(0+128)
 10846  08F8  0841               	movf	(___ftmul@f3_as_product+1)^(0+128),w
 10847  08F9  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 10848  08FA  0842               	movf	(___ftmul@f3_as_product+2)^(0+128),w
 10849  08FB  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 10850  08FC  083F               	movf	___ftmul@exp^(0+128),w
 10851  08FD  00BB               	movwf	??___ftmul^(0+128)
 10852  08FE  083B               	movf	??___ftmul^(0+128),w
 10853  08FF  00A3               	movwf	___ftpack@exp^(0+128)
 10854  0900  0844               	movf	___ftmul@sign^(0+128),w
 10855  0901  00BC               	movwf	(??___ftmul+1)^(0+128)
 10856  0902  083C               	movf	(??___ftmul+1)^(0+128),w
 10857  0903  00A4               	movwf	___ftpack@sign^(0+128)
 10858  0904  3194  244E         	fcall	___ftpack
 10859  0906  0021               	movlb	1	; select bank1
 10860  0907  0820               	movf	?___ftpack^(0+128),w
 10861  0908  00B5               	movwf	?___ftmul^(0+128)
 10862  0909  0821               	movf	(?___ftpack+1)^(0+128),w
 10863  090A  00B6               	movwf	(?___ftmul+1)^(0+128)
 10864  090B  0822               	movf	(?___ftpack+2)^(0+128),w
 10865  090C  00B7               	movwf	(?___ftmul+2)^(0+128)
 10866  090D  0008               	return
 10867  090E                     __end_of___ftmul:	
 10868                           
 10869                           	psect	text27
 10870  1757                     __ptext27:	
 10871 ;; *************** function ___ftdiv *****************
 10872 ;; Defined at:
 10873 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
 10874 ;; Parameters:    Size  Location     Type
 10875 ;;  f2              3   37[BANK1 ] float 
 10876 ;;  f1              3   40[BANK1 ] float 
 10877 ;; Auto vars:     Size  Location     Type
 10878 ;;  f3              3   48[BANK1 ] float 
 10879 ;;  sign            1   52[BANK1 ] unsigned char 
 10880 ;;  exp             1   51[BANK1 ] unsigned char 
 10881 ;;  cntr            1   47[BANK1 ] unsigned char 
 10882 ;; Return value:  Size  Location     Type
 10883 ;;                  3   37[BANK1 ] float 
 10884 ;; Registers used:
 10885 ;;		wreg, status,2, status,0, pclath, cstack
 10886 ;; Tracked objects:
 10887 ;;		On entry : 0/0
 10888 ;;		On exit  : 0/0
 10889 ;;		Unchanged: 0/0
 10890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10891 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10892 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10893 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10894 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10895 ;;Total ram usage:       16 bytes
 10896 ;; Hardware stack levels used:    1
 10897 ;; Hardware stack levels required when called:    4
 10898 ;; This function calls:
 10899 ;;		___ftpack
 10900 ;; This function is called by:
 10901 ;;		_map
 10902 ;;		_scalePotValue
 10903 ;; This function uses a non-reentrant model
 10904 ;;
 10905                           
 10906                           
 10907                           ;psect for function ___ftdiv
 10908  1757                     ___ftdiv:	
 10909                           
 10910                           ;incstack = 0
 10911                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 10912  1757  0021               	movlb	1	; select bank1
 10913  1758  0848               	movf	___ftdiv@f1^(0+128),w
 10914  1759  00CB               	movwf	??___ftdiv^(0+128)
 10915  175A  0849               	movf	(___ftdiv@f1+1)^(0+128),w
 10916  175B  00CC               	movwf	(??___ftdiv^(0+128)+1)
 10917  175C  084A               	movf	(___ftdiv@f1+2)^(0+128),w
 10918  175D  00CD               	movwf	(??___ftdiv^(0+128)+2)
 10919  175E  1003               	clrc
 10920  175F  0D4C               	rlf	(??___ftdiv^(0+128)+1),w
 10921  1760  0D4D               	rlf	(??___ftdiv^(0+128)+2),w
 10922  1761  00CE               	movwf	(??___ftdiv+3)^(0+128)
 10923  1762  084E               	movf	(??___ftdiv+3)^(0+128),w
 10924  1763  00D3               	movwf	___ftdiv@exp^(0+128)
 10925  1764  0853               	movf	___ftdiv@exp^(0+128),w
 10926  1765  1D03               	btfss	3,2
 10927  1766  2F6E               	goto	l6687
 10928  1767  3000               	movlw	0
 10929  1768  00C5               	movwf	?___ftdiv^(0+128)
 10930  1769  3000               	movlw	0
 10931  176A  00C6               	movwf	(?___ftdiv+1)^(0+128)
 10932  176B  3000               	movlw	0
 10933  176C  00C7               	movwf	(?___ftdiv+2)^(0+128)
 10934  176D  0008               	return
 10935  176E                     l6687:	
 10936  176E  0845               	movf	___ftdiv@f2^(0+128),w
 10937  176F  00CB               	movwf	??___ftdiv^(0+128)
 10938  1770  0846               	movf	(___ftdiv@f2+1)^(0+128),w
 10939  1771  00CC               	movwf	(??___ftdiv^(0+128)+1)
 10940  1772  0847               	movf	(___ftdiv@f2+2)^(0+128),w
 10941  1773  00CD               	movwf	(??___ftdiv^(0+128)+2)
 10942  1774  1003               	clrc
 10943  1775  0D4C               	rlf	(??___ftdiv^(0+128)+1),w
 10944  1776  0D4D               	rlf	(??___ftdiv^(0+128)+2),w
 10945  1777  00CE               	movwf	(??___ftdiv+3)^(0+128)
 10946  1778  084E               	movf	(??___ftdiv+3)^(0+128),w
 10947  1779  00D4               	movwf	___ftdiv@sign^(0+128)
 10948  177A  0854               	movf	___ftdiv@sign^(0+128),w
 10949  177B  1D03               	btfss	3,2
 10950  177C  2F84               	goto	l6693
 10951  177D  3000               	movlw	0
 10952  177E  00C5               	movwf	?___ftdiv^(0+128)
 10953  177F  3000               	movlw	0
 10954  1780  00C6               	movwf	(?___ftdiv+1)^(0+128)
 10955  1781  3000               	movlw	0
 10956  1782  00C7               	movwf	(?___ftdiv+2)^(0+128)
 10957  1783  0008               	return
 10958  1784                     l6693:	
 10959  1784  3000               	movlw	0
 10960  1785  00D0               	movwf	___ftdiv@f3^(0+128)
 10961  1786  3000               	movlw	0
 10962  1787  00D1               	movwf	(___ftdiv@f3+1)^(0+128)
 10963  1788  3000               	movlw	0
 10964  1789  00D2               	movwf	(___ftdiv@f3+2)^(0+128)
 10965  178A  3089               	movlw	137
 10966  178B  0754               	addwf	___ftdiv@sign^(0+128),w
 10967  178C  00CB               	movwf	??___ftdiv^(0+128)
 10968  178D  084B               	movf	??___ftdiv^(0+128),w
 10969  178E  02D3               	subwf	___ftdiv@exp^(0+128),f
 10970  178F  0848               	movf	___ftdiv@f1^(0+128),w
 10971  1790  00CB               	movwf	??___ftdiv^(0+128)
 10972  1791  0849               	movf	(___ftdiv@f1+1)^(0+128),w
 10973  1792  00CC               	movwf	(??___ftdiv^(0+128)+1)
 10974  1793  084A               	movf	(___ftdiv@f1+2)^(0+128),w
 10975  1794  00CD               	movwf	(??___ftdiv^(0+128)+2)
 10976  1795  3010               	movlw	16
 10977  1796                     u6995:	
 10978  1796  36CD               	lsrf	(??___ftdiv^(0+128)+2),f
 10979  1797  0CCC               	rrf	(??___ftdiv^(0+128)+1),f
 10980  1798  0CCB               	rrf	??___ftdiv^(0+128),f
 10981  1799  0B89               	decfsz	9,f
 10982  179A  2F96               	goto	u6995
 10983  179B  084B               	movf	??___ftdiv^(0+128),w
 10984  179C  00CE               	movwf	(??___ftdiv+3)^(0+128)
 10985  179D  084E               	movf	(??___ftdiv+3)^(0+128),w
 10986  179E  00D4               	movwf	___ftdiv@sign^(0+128)
 10987  179F  0845               	movf	___ftdiv@f2^(0+128),w
 10988  17A0  00CB               	movwf	??___ftdiv^(0+128)
 10989  17A1  0846               	movf	(___ftdiv@f2+1)^(0+128),w
 10990  17A2  00CC               	movwf	(??___ftdiv^(0+128)+1)
 10991  17A3  0847               	movf	(___ftdiv@f2+2)^(0+128),w
 10992  17A4  00CD               	movwf	(??___ftdiv^(0+128)+2)
 10993  17A5  3010               	movlw	16
 10994  17A6                     u7005:	
 10995  17A6  36CD               	lsrf	(??___ftdiv^(0+128)+2),f
 10996  17A7  0CCC               	rrf	(??___ftdiv^(0+128)+1),f
 10997  17A8  0CCB               	rrf	??___ftdiv^(0+128),f
 10998  17A9  0B89               	decfsz	9,f
 10999  17AA  2FA6               	goto	u7005
 11000  17AB  084B               	movf	??___ftdiv^(0+128),w
 11001  17AC  00CE               	movwf	(??___ftdiv+3)^(0+128)
 11002  17AD  084E               	movf	(??___ftdiv+3)^(0+128),w
 11003  17AE  06D4               	xorwf	___ftdiv@sign^(0+128),f
 11004  17AF  3080               	movlw	128
 11005  17B0  00CB               	movwf	??___ftdiv^(0+128)
 11006  17B1  084B               	movf	??___ftdiv^(0+128),w
 11007  17B2  05D4               	andwf	___ftdiv@sign^(0+128),f
 11008  17B3  17C9               	bsf	(___ftdiv@f1^(0+128)+1),7
 11009  17B4  30FF               	movlw	255
 11010  17B5  05C8               	andwf	___ftdiv@f1^(0+128),f
 11011  17B6  30FF               	movlw	255
 11012  17B7  05C9               	andwf	(___ftdiv@f1+1)^(0+128),f
 11013  17B8  3000               	movlw	0
 11014  17B9  05CA               	andwf	(___ftdiv@f1+2)^(0+128),f
 11015  17BA  17C6               	bsf	(___ftdiv@f2^(0+128)+1),7
 11016  17BB  30FF               	movlw	255
 11017  17BC  05C5               	andwf	___ftdiv@f2^(0+128),f
 11018  17BD  30FF               	movlw	255
 11019  17BE  05C6               	andwf	(___ftdiv@f2+1)^(0+128),f
 11020  17BF  3000               	movlw	0
 11021  17C0  05C7               	andwf	(___ftdiv@f2+2)^(0+128),f
 11022  17C1  3018               	movlw	24
 11023  17C2  00CB               	movwf	??___ftdiv^(0+128)
 11024  17C3  084B               	movf	??___ftdiv^(0+128),w
 11025  17C4  00CF               	movwf	___ftdiv@cntr^(0+128)
 11026  17C5                     l6707:	
 11027  17C5  3001               	movlw	1
 11028  17C6                     u7015:	
 11029  17C6  35D0               	lslf	___ftdiv@f3^(0+128),f
 11030  17C7  0DD1               	rlf	(___ftdiv@f3+1)^(0+128),f
 11031  17C8  0DD2               	rlf	(___ftdiv@f3+2)^(0+128),f
 11032  17C9  0B89               	decfsz	9,f
 11033  17CA  2FC6               	goto	u7015
 11034  17CB  0847               	movf	(___ftdiv@f2+2)^(0+128),w
 11035  17CC  024A               	subwf	(___ftdiv@f1+2)^(0+128),w
 11036  17CD  1D03               	skipz
 11037  17CE  2FD5               	goto	u7025
 11038  17CF  0846               	movf	(___ftdiv@f2+1)^(0+128),w
 11039  17D0  0249               	subwf	(___ftdiv@f1+1)^(0+128),w
 11040  17D1  1D03               	skipz
 11041  17D2  2FD5               	goto	u7025
 11042  17D3  0845               	movf	___ftdiv@f2^(0+128),w
 11043  17D4  0248               	subwf	___ftdiv@f1^(0+128),w
 11044  17D5                     u7025:	
 11045  17D5  1C03               	skipc
 11046  17D6  2FDE               	goto	l6715
 11047  17D7  0845               	movf	___ftdiv@f2^(0+128),w
 11048  17D8  02C8               	subwf	___ftdiv@f1^(0+128),f
 11049  17D9  0846               	movf	(___ftdiv@f2+1)^(0+128),w
 11050  17DA  3BC9               	subwfb	(___ftdiv@f1+1)^(0+128),f
 11051  17DB  0847               	movf	(___ftdiv@f2+2)^(0+128),w
 11052  17DC  3BCA               	subwfb	(___ftdiv@f1+2)^(0+128),f
 11053  17DD  1450               	bsf	___ftdiv@f3^(0+128),0
 11054  17DE                     l6715:	
 11055  17DE  3001               	movlw	1
 11056  17DF                     u7035:	
 11057  17DF  35C8               	lslf	___ftdiv@f1^(0+128),f
 11058  17E0  0DC9               	rlf	(___ftdiv@f1+1)^(0+128),f
 11059  17E1  0DCA               	rlf	(___ftdiv@f1+2)^(0+128),f
 11060  17E2  0B89               	decfsz	9,f
 11061  17E3  2FDF               	goto	u7035
 11062  17E4  3001               	movlw	1
 11063  17E5  02CF               	subwf	___ftdiv@cntr^(0+128),f
 11064  17E6  1D03               	btfss	3,2
 11065  17E7  2FC5               	goto	l6707
 11066  17E8  0850               	movf	___ftdiv@f3^(0+128),w
 11067  17E9  00A0               	movwf	___ftpack@arg^(0+128)
 11068  17EA  0851               	movf	(___ftdiv@f3+1)^(0+128),w
 11069  17EB  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 11070  17EC  0852               	movf	(___ftdiv@f3+2)^(0+128),w
 11071  17ED  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 11072  17EE  0853               	movf	___ftdiv@exp^(0+128),w
 11073  17EF  00CB               	movwf	??___ftdiv^(0+128)
 11074  17F0  084B               	movf	??___ftdiv^(0+128),w
 11075  17F1  00A3               	movwf	___ftpack@exp^(0+128)
 11076  17F2  0854               	movf	___ftdiv@sign^(0+128),w
 11077  17F3  00CC               	movwf	(??___ftdiv+1)^(0+128)
 11078  17F4  084C               	movf	(??___ftdiv+1)^(0+128),w
 11079  17F5  00A4               	movwf	___ftpack@sign^(0+128)
 11080  17F6  3194  244E         	fcall	___ftpack
 11081  17F8  0021               	movlb	1	; select bank1
 11082  17F9  0820               	movf	?___ftpack^(0+128),w
 11083  17FA  00C5               	movwf	?___ftdiv^(0+128)
 11084  17FB  0821               	movf	(?___ftpack+1)^(0+128),w
 11085  17FC  00C6               	movwf	(?___ftdiv+1)^(0+128)
 11086  17FD  0822               	movf	(?___ftpack+2)^(0+128),w
 11087  17FE  00C7               	movwf	(?___ftdiv+2)^(0+128)
 11088  17FF  0008               	return
 11089  1800                     __end_of___ftdiv:	
 11090                           
 11091                           	psect	text28
 11092  0AAF                     __ptext28:	
 11093 ;; *************** function ___ftadd *****************
 11094 ;; Defined at:
 11095 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
 11096 ;; Parameters:    Size  Location     Type
 11097 ;;  f1              3    8[BANK1 ] float 
 11098 ;;  f2              3   11[BANK1 ] float 
 11099 ;; Auto vars:     Size  Location     Type
 11100 ;;  exp1            1   20[BANK1 ] unsigned char 
 11101 ;;  exp2            1   19[BANK1 ] unsigned char 
 11102 ;;  sign            1   18[BANK1 ] unsigned char 
 11103 ;; Return value:  Size  Location     Type
 11104 ;;                  3    8[BANK1 ] float 
 11105 ;; Registers used:
 11106 ;;		wreg, status,2, status,0, pclath, cstack
 11107 ;; Tracked objects:
 11108 ;;		On entry : 0/0
 11109 ;;		On exit  : 0/0
 11110 ;;		Unchanged: 0/0
 11111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11112 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11113 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11114 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11115 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11116 ;;Total ram usage:       13 bytes
 11117 ;; Hardware stack levels used:    1
 11118 ;; Hardware stack levels required when called:    4
 11119 ;; This function calls:
 11120 ;;		___ftpack
 11121 ;; This function is called by:
 11122 ;;		_map
 11123 ;;		_scalePotValue
 11124 ;; This function uses a non-reentrant model
 11125 ;;
 11126                           
 11127                           
 11128                           ;psect for function ___ftadd
 11129  0AAF                     ___ftadd:	
 11130                           
 11131                           ;incstack = 0
 11132                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 11133  0AAF  0021               	movlb	1	; select bank1
 11134  0AB0  0828               	movf	___ftadd@f1^(0+128),w
 11135  0AB1  00AE               	movwf	??___ftadd^(0+128)
 11136  0AB2  0829               	movf	(___ftadd@f1+1)^(0+128),w
 11137  0AB3  00AF               	movwf	(??___ftadd^(0+128)+1)
 11138  0AB4  082A               	movf	(___ftadd@f1+2)^(0+128),w
 11139  0AB5  00B0               	movwf	(??___ftadd^(0+128)+2)
 11140  0AB6  1003               	clrc
 11141  0AB7  0D2F               	rlf	(??___ftadd^(0+128)+1),w
 11142  0AB8  0D30               	rlf	(??___ftadd^(0+128)+2),w
 11143  0AB9  00B1               	movwf	(??___ftadd+3)^(0+128)
 11144  0ABA  0831               	movf	(??___ftadd+3)^(0+128),w
 11145  0ABB  00B4               	movwf	___ftadd@exp1^(0+128)
 11146  0ABC  082B               	movf	___ftadd@f2^(0+128),w
 11147  0ABD  00AE               	movwf	??___ftadd^(0+128)
 11148  0ABE  082C               	movf	(___ftadd@f2+1)^(0+128),w
 11149  0ABF  00AF               	movwf	(??___ftadd^(0+128)+1)
 11150  0AC0  082D               	movf	(___ftadd@f2+2)^(0+128),w
 11151  0AC1  00B0               	movwf	(??___ftadd^(0+128)+2)
 11152  0AC2  1003               	clrc
 11153  0AC3  0D2F               	rlf	(??___ftadd^(0+128)+1),w
 11154  0AC4  0D30               	rlf	(??___ftadd^(0+128)+2),w
 11155  0AC5  00B1               	movwf	(??___ftadd+3)^(0+128)
 11156  0AC6  0831               	movf	(??___ftadd+3)^(0+128),w
 11157  0AC7  00B3               	movwf	___ftadd@exp2^(0+128)
 11158  0AC8  0834               	movf	___ftadd@exp1^(0+128),w
 11159  0AC9  1903               	btfsc	3,2
 11160  0ACA  2AD7               	goto	l6617
 11161  0ACB  0833               	movf	___ftadd@exp2^(0+128),w
 11162  0ACC  0234               	subwf	___ftadd@exp1^(0+128),w
 11163  0ACD  1803               	skipnc
 11164  0ACE  2ADE               	goto	l6621
 11165  0ACF  0334               	decf	___ftadd@exp1^(0+128),w
 11166  0AD0  3AFF               	xorlw	255
 11167  0AD1  0733               	addwf	___ftadd@exp2^(0+128),w
 11168  0AD2  00AE               	movwf	??___ftadd^(0+128)
 11169  0AD3  3019               	movlw	25
 11170  0AD4  022E               	subwf	??___ftadd^(0+128),w
 11171  0AD5  1C03               	skipc
 11172  0AD6  2ADE               	goto	l6621
 11173  0AD7                     l6617:	
 11174  0AD7  082B               	movf	___ftadd@f2^(0+128),w
 11175  0AD8  00A8               	movwf	?___ftadd^(0+128)
 11176  0AD9  082C               	movf	(___ftadd@f2+1)^(0+128),w
 11177  0ADA  00A9               	movwf	(?___ftadd+1)^(0+128)
 11178  0ADB  082D               	movf	(___ftadd@f2+2)^(0+128),w
 11179  0ADC  00AA               	movwf	(?___ftadd+2)^(0+128)
 11180  0ADD  0008               	return
 11181  0ADE                     l6621:	
 11182  0ADE  0833               	movf	___ftadd@exp2^(0+128),w
 11183  0ADF  1903               	btfsc	3,2
 11184  0AE0  0008               	return
 11185  0AE1  0834               	movf	___ftadd@exp1^(0+128),w
 11186  0AE2  0233               	subwf	___ftadd@exp2^(0+128),w
 11187  0AE3  1803               	skipnc
 11188  0AE4  2AED               	goto	l6627
 11189  0AE5  0333               	decf	___ftadd@exp2^(0+128),w
 11190  0AE6  3AFF               	xorlw	255
 11191  0AE7  0734               	addwf	___ftadd@exp1^(0+128),w
 11192  0AE8  00AE               	movwf	??___ftadd^(0+128)
 11193  0AE9  3019               	movlw	25
 11194  0AEA  022E               	subwf	??___ftadd^(0+128),w
 11195  0AEB  1803               	btfsc	3,0
 11196  0AEC  0008               	return
 11197  0AED                     l6627:	
 11198  0AED  3006               	movlw	6
 11199  0AEE  00AE               	movwf	??___ftadd^(0+128)
 11200  0AEF  082E               	movf	??___ftadd^(0+128),w
 11201  0AF0  00B2               	movwf	___ftadd@sign^(0+128)
 11202  0AF1  1BAA               	btfsc	(___ftadd@f1+2)^(0+128),7
 11203  0AF2  17B2               	bsf	___ftadd@sign^(0+128),7
 11204  0AF3  1BAD               	btfsc	(___ftadd@f2+2)^(0+128),7
 11205  0AF4  1732               	bsf	___ftadd@sign^(0+128),6
 11206  0AF5  17A9               	bsf	(___ftadd@f1^(0+128)+1),7
 11207  0AF6  30FF               	movlw	255
 11208  0AF7  05A8               	andwf	___ftadd@f1^(0+128),f
 11209  0AF8  30FF               	movlw	255
 11210  0AF9  05A9               	andwf	(___ftadd@f1+1)^(0+128),f
 11211  0AFA  3000               	movlw	0
 11212  0AFB  05AA               	andwf	(___ftadd@f1+2)^(0+128),f
 11213  0AFC  17AC               	bsf	(___ftadd@f2^(0+128)+1),7
 11214  0AFD  30FF               	movlw	255
 11215  0AFE  05AB               	andwf	___ftadd@f2^(0+128),f
 11216  0AFF  30FF               	movlw	255
 11217  0B00  05AC               	andwf	(___ftadd@f2+1)^(0+128),f
 11218  0B01  3000               	movlw	0
 11219  0B02  05AD               	andwf	(___ftadd@f2+2)^(0+128),f
 11220  0B03  0833               	movf	___ftadd@exp2^(0+128),w
 11221  0B04  0234               	subwf	___ftadd@exp1^(0+128),w
 11222  0B05  1803               	skipnc
 11223  0B06  2B29               	goto	l6649
 11224  0B07                     l6639:	
 11225  0B07  3001               	movlw	1
 11226  0B08                     u6835:	
 11227  0B08  35AB               	lslf	___ftadd@f2^(0+128),f
 11228  0B09  0DAC               	rlf	(___ftadd@f2+1)^(0+128),f
 11229  0B0A  0DAD               	rlf	(___ftadd@f2+2)^(0+128),f
 11230  0B0B  0B89               	decfsz	9,f
 11231  0B0C  2B08               	goto	u6835
 11232  0B0D  3001               	movlw	1
 11233  0B0E  02B3               	subwf	___ftadd@exp2^(0+128),f
 11234  0B0F  0833               	movf	___ftadd@exp2^(0+128),w
 11235  0B10  0634               	xorwf	___ftadd@exp1^(0+128),w
 11236  0B11  1903               	skipnz
 11237  0B12  2B24               	goto	l6647
 11238  0B13  3001               	movlw	1
 11239  0B14  02B2               	subwf	___ftadd@sign^(0+128),f
 11240  0B15  0832               	movf	___ftadd@sign^(0+128),w
 11241  0B16  3907               	andlw	7
 11242  0B17  1903               	btfsc	3,2
 11243  0B18  2B24               	goto	l6647
 11244  0B19  2B07               	goto	l6639
 11245  0B1A                     l6645:	
 11246  0B1A  3001               	movlw	1
 11247  0B1B                     u6865:	
 11248  0B1B  36AA               	lsrf	(___ftadd@f1+2)^(0+128),f
 11249  0B1C  0CA9               	rrf	(___ftadd@f1+1)^(0+128),f
 11250  0B1D  0CA8               	rrf	___ftadd@f1^(0+128),f
 11251  0B1E  0B89               	decfsz	9,f
 11252  0B1F  2B1B               	goto	u6865
 11253  0B20  3001               	movlw	1
 11254  0B21  00AE               	movwf	??___ftadd^(0+128)
 11255  0B22  082E               	movf	??___ftadd^(0+128),w
 11256  0B23  07B4               	addwf	___ftadd@exp1^(0+128),f
 11257  0B24                     l6647:	
 11258  0B24  0834               	movf	___ftadd@exp1^(0+128),w
 11259  0B25  0633               	xorwf	___ftadd@exp2^(0+128),w
 11260  0B26  1903               	btfsc	3,2
 11261  0B27  2B4E               	goto	l1926
 11262  0B28  2B1A               	goto	l6645
 11263  0B29                     l6649:	
 11264  0B29  0834               	movf	___ftadd@exp1^(0+128),w
 11265  0B2A  0233               	subwf	___ftadd@exp2^(0+128),w
 11266  0B2B  1803               	skipnc
 11267  0B2C  2B4E               	goto	l1926
 11268  0B2D                     l6651:	
 11269  0B2D  3001               	movlw	1
 11270  0B2E                     u6895:	
 11271  0B2E  35A8               	lslf	___ftadd@f1^(0+128),f
 11272  0B2F  0DA9               	rlf	(___ftadd@f1+1)^(0+128),f
 11273  0B30  0DAA               	rlf	(___ftadd@f1+2)^(0+128),f
 11274  0B31  0B89               	decfsz	9,f
 11275  0B32  2B2E               	goto	u6895
 11276  0B33  3001               	movlw	1
 11277  0B34  02B4               	subwf	___ftadd@exp1^(0+128),f
 11278  0B35  0833               	movf	___ftadd@exp2^(0+128),w
 11279  0B36  0634               	xorwf	___ftadd@exp1^(0+128),w
 11280  0B37  1903               	skipnz
 11281  0B38  2B4A               	goto	l6659
 11282  0B39  3001               	movlw	1
 11283  0B3A  02B2               	subwf	___ftadd@sign^(0+128),f
 11284  0B3B  0832               	movf	___ftadd@sign^(0+128),w
 11285  0B3C  3907               	andlw	7
 11286  0B3D  1903               	btfsc	3,2
 11287  0B3E  2B4A               	goto	l6659
 11288  0B3F  2B2D               	goto	l6651
 11289  0B40                     l6657:	
 11290  0B40  3001               	movlw	1
 11291  0B41                     u6925:	
 11292  0B41  36AD               	lsrf	(___ftadd@f2+2)^(0+128),f
 11293  0B42  0CAC               	rrf	(___ftadd@f2+1)^(0+128),f
 11294  0B43  0CAB               	rrf	___ftadd@f2^(0+128),f
 11295  0B44  0B89               	decfsz	9,f
 11296  0B45  2B41               	goto	u6925
 11297  0B46  3001               	movlw	1
 11298  0B47  00AE               	movwf	??___ftadd^(0+128)
 11299  0B48  082E               	movf	??___ftadd^(0+128),w
 11300  0B49  07B3               	addwf	___ftadd@exp2^(0+128),f
 11301  0B4A                     l6659:	
 11302  0B4A  0834               	movf	___ftadd@exp1^(0+128),w
 11303  0B4B  0633               	xorwf	___ftadd@exp2^(0+128),w
 11304  0B4C  1D03               	skipz
 11305  0B4D  2B40               	goto	l6657
 11306  0B4E                     l1926:	
 11307  0B4E  1FB2               	btfss	___ftadd@sign^(0+128),7
 11308  0B4F  2B60               	goto	l6663
 11309  0B50  30FF               	movlw	255
 11310  0B51  06A8               	xorwf	___ftadd@f1^(0+128),f
 11311  0B52  30FF               	movlw	255
 11312  0B53  06A9               	xorwf	(___ftadd@f1+1)^(0+128),f
 11313  0B54  30FF               	movlw	255
 11314  0B55  06AA               	xorwf	(___ftadd@f1+2)^(0+128),f
 11315  0B56  3001               	movlw	1
 11316  0B57  07A8               	addwf	___ftadd@f1^(0+128),f
 11317  0B58  3000               	movlw	0
 11318  0B59  1803               	skipnc
 11319  0B5A  3001               	movlw	1
 11320  0B5B  07A9               	addwf	(___ftadd@f1+1)^(0+128),f
 11321  0B5C  3000               	movlw	0
 11322  0B5D  1803               	skipnc
 11323  0B5E  3001               	movlw	1
 11324  0B5F  07AA               	addwf	(___ftadd@f1+2)^(0+128),f
 11325  0B60                     l6663:	
 11326  0B60  1F32               	btfss	___ftadd@sign^(0+128),6
 11327  0B61  2B72               	goto	l6667
 11328  0B62  30FF               	movlw	255
 11329  0B63  06AB               	xorwf	___ftadd@f2^(0+128),f
 11330  0B64  30FF               	movlw	255
 11331  0B65  06AC               	xorwf	(___ftadd@f2+1)^(0+128),f
 11332  0B66  30FF               	movlw	255
 11333  0B67  06AD               	xorwf	(___ftadd@f2+2)^(0+128),f
 11334  0B68  3001               	movlw	1
 11335  0B69  07AB               	addwf	___ftadd@f2^(0+128),f
 11336  0B6A  3000               	movlw	0
 11337  0B6B  1803               	skipnc
 11338  0B6C  3001               	movlw	1
 11339  0B6D  07AC               	addwf	(___ftadd@f2+1)^(0+128),f
 11340  0B6E  3000               	movlw	0
 11341  0B6F  1803               	skipnc
 11342  0B70  3001               	movlw	1
 11343  0B71  07AD               	addwf	(___ftadd@f2+2)^(0+128),f
 11344  0B72                     l6667:	
 11345  0B72  01B2               	clrf	___ftadd@sign^(0+128)
 11346  0B73  0828               	movf	___ftadd@f1^(0+128),w
 11347  0B74  07AB               	addwf	___ftadd@f2^(0+128),f
 11348  0B75  0829               	movf	(___ftadd@f1+1)^(0+128),w
 11349  0B76  3DAC               	addwfc	(___ftadd@f2+1)^(0+128),f
 11350  0B77  082A               	movf	(___ftadd@f1+2)^(0+128),w
 11351  0B78  3DAD               	addwfc	(___ftadd@f2+2)^(0+128),f
 11352  0B79  1FAD               	btfss	(___ftadd@f2+2)^(0+128),7
 11353  0B7A  2B8D               	goto	l6677
 11354  0B7B  30FF               	movlw	255
 11355  0B7C  06AB               	xorwf	___ftadd@f2^(0+128),f
 11356  0B7D  30FF               	movlw	255
 11357  0B7E  06AC               	xorwf	(___ftadd@f2+1)^(0+128),f
 11358  0B7F  30FF               	movlw	255
 11359  0B80  06AD               	xorwf	(___ftadd@f2+2)^(0+128),f
 11360  0B81  3001               	movlw	1
 11361  0B82  07AB               	addwf	___ftadd@f2^(0+128),f
 11362  0B83  3000               	movlw	0
 11363  0B84  1803               	skipnc
 11364  0B85  3001               	movlw	1
 11365  0B86  07AC               	addwf	(___ftadd@f2+1)^(0+128),f
 11366  0B87  3000               	movlw	0
 11367  0B88  1803               	skipnc
 11368  0B89  3001               	movlw	1
 11369  0B8A  07AD               	addwf	(___ftadd@f2+2)^(0+128),f
 11370  0B8B  01B2               	clrf	___ftadd@sign^(0+128)
 11371  0B8C  0AB2               	incf	___ftadd@sign^(0+128),f
 11372  0B8D                     l6677:	
 11373  0B8D  082B               	movf	___ftadd@f2^(0+128),w
 11374  0B8E  00A0               	movwf	___ftpack@arg^(0+128)
 11375  0B8F  082C               	movf	(___ftadd@f2+1)^(0+128),w
 11376  0B90  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 11377  0B91  082D               	movf	(___ftadd@f2+2)^(0+128),w
 11378  0B92  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 11379  0B93  0834               	movf	___ftadd@exp1^(0+128),w
 11380  0B94  00AE               	movwf	??___ftadd^(0+128)
 11381  0B95  082E               	movf	??___ftadd^(0+128),w
 11382  0B96  00A3               	movwf	___ftpack@exp^(0+128)
 11383  0B97  0832               	movf	___ftadd@sign^(0+128),w
 11384  0B98  00AF               	movwf	(??___ftadd+1)^(0+128)
 11385  0B99  082F               	movf	(??___ftadd+1)^(0+128),w
 11386  0B9A  00A4               	movwf	___ftpack@sign^(0+128)
 11387  0B9B  3194  244E         	fcall	___ftpack
 11388  0B9D  0021               	movlb	1	; select bank1
 11389  0B9E  0820               	movf	?___ftpack^(0+128),w
 11390  0B9F  00A8               	movwf	?___ftadd^(0+128)
 11391  0BA0  0821               	movf	(?___ftpack+1)^(0+128),w
 11392  0BA1  00A9               	movwf	(?___ftadd+1)^(0+128)
 11393  0BA2  0822               	movf	(?___ftpack+2)^(0+128),w
 11394  0BA3  00AA               	movwf	(?___ftadd+2)^(0+128)
 11395  0BA4  0008               	return
 11396  0BA5                     __end_of___ftadd:	
 11397                           
 11398                           	psect	text29
 11399  144E                     __ptext29:	
 11400 ;; *************** function ___ftpack *****************
 11401 ;; Defined at:
 11402 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
 11403 ;; Parameters:    Size  Location     Type
 11404 ;;  arg             3    0[BANK1 ] unsigned um
 11405 ;;  exp             1    3[BANK1 ] unsigned char 
 11406 ;;  sign            1    4[BANK1 ] unsigned char 
 11407 ;; Auto vars:     Size  Location     Type
 11408 ;;		None
 11409 ;; Return value:  Size  Location     Type
 11410 ;;                  3    0[BANK1 ] float 
 11411 ;; Registers used:
 11412 ;;		wreg, status,2, status,0
 11413 ;; Tracked objects:
 11414 ;;		On entry : 0/0
 11415 ;;		On exit  : 0/0
 11416 ;;		Unchanged: 0/0
 11417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11418 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11420 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11421 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11422 ;;Total ram usage:        8 bytes
 11423 ;; Hardware stack levels used:    1
 11424 ;; Hardware stack levels required when called:    3
 11425 ;; This function calls:
 11426 ;;		Nothing
 11427 ;; This function is called by:
 11428 ;;		___altoft
 11429 ;;		___awtoft
 11430 ;;		___ftadd
 11431 ;;		___ftdiv
 11432 ;;		___ftmul
 11433 ;; This function uses a non-reentrant model
 11434 ;;
 11435                           
 11436                           
 11437                           ;psect for function ___ftpack
 11438  144E                     ___ftpack:	
 11439                           
 11440                           ;incstack = 0
 11441                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 11442  144E  0021               	movlb	1	; select bank1
 11443  144F  0823               	movf	___ftpack@exp^(0+128),w
 11444  1450  1903               	btfsc	3,2
 11445  1451  2C57               	goto	l6285
 11446  1452  0822               	movf	(___ftpack@arg+2)^(0+128),w
 11447  1453  0421               	iorwf	(___ftpack@arg+1)^(0+128),w
 11448  1454  0420               	iorwf	___ftpack@arg^(0+128),w
 11449  1455  1D03               	skipz
 11450  1456  2C68               	goto	l6291
 11451  1457                     l6285:	
 11452  1457  3000               	movlw	0
 11453  1458  00A0               	movwf	?___ftpack^(0+128)
 11454  1459  3000               	movlw	0
 11455  145A  00A1               	movwf	(?___ftpack+1)^(0+128)
 11456  145B  3000               	movlw	0
 11457  145C  00A2               	movwf	(?___ftpack+2)^(0+128)
 11458  145D  0008               	return
 11459  145E                     l6289:	
 11460  145E  3001               	movlw	1
 11461  145F  00A5               	movwf	??___ftpack^(0+128)
 11462  1460  0825               	movf	??___ftpack^(0+128),w
 11463  1461  07A3               	addwf	___ftpack@exp^(0+128),f
 11464  1462  3001               	movlw	1
 11465  1463                     u6285:	
 11466  1463  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 11467  1464  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 11468  1465  0CA0               	rrf	___ftpack@arg^(0+128),f
 11469  1466  0B89               	decfsz	9,f
 11470  1467  2C63               	goto	u6285
 11471  1468                     l6291:	
 11472  1468  30FE               	movlw	254
 11473  1469  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 11474  146A  1903               	btfsc	3,2
 11475  146B  2C81               	goto	l1895
 11476  146C  2C5E               	goto	l6289
 11477  146D                     l6293:	
 11478  146D  3001               	movlw	1
 11479  146E  00A5               	movwf	??___ftpack^(0+128)
 11480  146F  0825               	movf	??___ftpack^(0+128),w
 11481  1470  07A3               	addwf	___ftpack@exp^(0+128),f
 11482  1471  3001               	movlw	1
 11483  1472  07A0               	addwf	___ftpack@arg^(0+128),f
 11484  1473  3000               	movlw	0
 11485  1474  1803               	skipnc
 11486  1475  3001               	movlw	1
 11487  1476  07A1               	addwf	(___ftpack@arg+1)^(0+128),f
 11488  1477  3000               	movlw	0
 11489  1478  1803               	skipnc
 11490  1479  3001               	movlw	1
 11491  147A  07A2               	addwf	(___ftpack@arg+2)^(0+128),f
 11492  147B  3001               	movlw	1
 11493  147C                     u6305:	
 11494  147C  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 11495  147D  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 11496  147E  0CA0               	rrf	___ftpack@arg^(0+128),f
 11497  147F  0B89               	decfsz	9,f
 11498  1480  2C7C               	goto	u6305
 11499  1481                     l1895:	
 11500  1481  30FF               	movlw	255
 11501  1482  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 11502  1483  1903               	btfsc	3,2
 11503  1484  2C8E               	goto	l6301
 11504  1485  2C6D               	goto	l6293
 11505  1486                     l6299:	
 11506  1486  3001               	movlw	1
 11507  1487  02A3               	subwf	___ftpack@exp^(0+128),f
 11508  1488  3001               	movlw	1
 11509  1489                     u6325:	
 11510  1489  35A0               	lslf	___ftpack@arg^(0+128),f
 11511  148A  0DA1               	rlf	(___ftpack@arg+1)^(0+128),f
 11512  148B  0DA2               	rlf	(___ftpack@arg+2)^(0+128),f
 11513  148C  0B89               	decfsz	9,f
 11514  148D  2C89               	goto	u6325
 11515  148E                     l6301:	
 11516  148E  1BA1               	btfsc	(___ftpack@arg+1)^(0+128),7
 11517  148F  2C94               	goto	l1902
 11518  1490  3002               	movlw	2
 11519  1491  0223               	subwf	___ftpack@exp^(0+128),w
 11520  1492  1803               	skipnc
 11521  1493  2C86               	goto	l6299
 11522  1494                     l1902:	
 11523  1494  1823               	btfsc	___ftpack@exp^(0+128),0
 11524  1495  2C9C               	goto	l1903
 11525  1496  30FF               	movlw	255
 11526  1497  05A0               	andwf	___ftpack@arg^(0+128),f
 11527  1498  307F               	movlw	127
 11528  1499  05A1               	andwf	(___ftpack@arg+1)^(0+128),f
 11529  149A  30FF               	movlw	255
 11530  149B  05A2               	andwf	(___ftpack@arg+2)^(0+128),f
 11531  149C                     l1903:	
 11532  149C  1003               	clrc
 11533  149D  0CA3               	rrf	___ftpack@exp^(0+128),f
 11534  149E  0823               	movf	___ftpack@exp^(0+128),w
 11535  149F  00A5               	movwf	??___ftpack^(0+128)
 11536  14A0  01A6               	clrf	(??___ftpack^(0+128)+1)
 11537  14A1  01A7               	clrf	(??___ftpack^(0+128)+2)
 11538  14A2  3010               	movlw	16
 11539  14A3                     u6365:	
 11540  14A3  35A5               	lslf	??___ftpack^(0+128),f
 11541  14A4  0DA6               	rlf	(??___ftpack^(0+128)+1),f
 11542  14A5  0DA7               	rlf	(??___ftpack^(0+128)+2),f
 11543  14A6  0B89               	decfsz	9,f
 11544  14A7  2CA3               	goto	u6365
 11545  14A8  0825               	movf	??___ftpack^(0+128),w
 11546  14A9  04A0               	iorwf	___ftpack@arg^(0+128),f
 11547  14AA  0826               	movf	(??___ftpack+1)^(0+128),w
 11548  14AB  04A1               	iorwf	(___ftpack@arg+1)^(0+128),f
 11549  14AC  0827               	movf	(??___ftpack+2)^(0+128),w
 11550  14AD  04A2               	iorwf	(___ftpack@arg+2)^(0+128),f
 11551  14AE  0824               	movf	___ftpack@sign^(0+128),w
 11552  14AF  1903               	btfsc	3,2
 11553  14B0  0008               	return
 11554  14B1  17A2               	bsf	(___ftpack@arg^(0+128)+2),7
 11555  14B2  0008               	return
 11556  14B3                     __end_of___ftpack:	
 11557                           
 11558                           	psect	text30
 11559  1C75                     __ptext30:	
 11560 ;; *************** function _initSwitchBypass *****************
 11561 ;; Defined at:
 11562 ;;		line 29 in file "SwitchBypass.c"
 11563 ;; Parameters:    Size  Location     Type
 11564 ;;		None
 11565 ;; Auto vars:     Size  Location     Type
 11566 ;;  initState       2   22[BANK1 ] int 
 11567 ;; Return value:  Size  Location     Type
 11568 ;;                  1    wreg      void 
 11569 ;; Registers used:
 11570 ;;		wreg, status,2, status,0, pclath, cstack
 11571 ;; Tracked objects:
 11572 ;;		On entry : 0/0
 11573 ;;		On exit  : 0/0
 11574 ;;		Unchanged: 0/0
 11575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11577 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11579 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11580 ;;Total ram usage:        2 bytes
 11581 ;; Hardware stack levels used:    1
 11582 ;; Hardware stack levels required when called:    6
 11583 ;; This function calls:
 11584 ;;		_getSwitchBypassState
 11585 ;;		_setSwitchBypassState
 11586 ;; This function is called by:
 11587 ;;		_main
 11588 ;; This function uses a non-reentrant model
 11589 ;;
 11590                           
 11591                           
 11592                           ;psect for function _initSwitchBypass
 11593  1C75                     _initSwitchBypass:	
 11594                           
 11595                           ;SwitchBypass.c: 30: int initState = getSwitchBypassState();
 11596                           
 11597                           ;incstack = 0
 11598                           ; Regs used in _initSwitchBypass: [wreg+status,2+status,0+pclath+cstack]
 11599  1C75  319C  241A  319C   	fcall	_getSwitchBypassState
 11600  1C78  0021               	movlb	1	; select bank1
 11601  1C79  0821               	movf	(?_getSwitchBypassState+1)^(0+128),w
 11602  1C7A  00B7               	movwf	(initSwitchBypass@initState+1)^(0+128)
 11603  1C7B  0820               	movf	?_getSwitchBypassState^(0+128),w
 11604  1C7C  00B6               	movwf	initSwitchBypass@initState^(0+128)
 11605                           
 11606                           ;SwitchBypass.c: 31: setSwitchBypassState(initState);
 11607  1C7D  0837               	movf	(initSwitchBypass@initState+1)^(0+128),w
 11608  1C7E  00B3               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
 11609  1C7F  0836               	movf	initSwitchBypass@initState^(0+128),w
 11610  1C80  00B2               	movwf	setSwitchBypassState@f_state^(0+128)
 11611  1C81  3192  2222         	fcall	_setSwitchBypassState
 11612  1C83  0008               	return
 11613  1C84                     __end_of_initSwitchBypass:	
 11614                           
 11615                           	psect	text31
 11616  1222                     __ptext31:	
 11617 ;; *************** function _setSwitchBypassState *****************
 11618 ;; Defined at:
 11619 ;;		line 134 in file "SwitchBypass.c"
 11620 ;; Parameters:    Size  Location     Type
 11621 ;;  f_state         2   18[BANK1 ] int 
 11622 ;; Auto vars:     Size  Location     Type
 11623 ;;		None
 11624 ;; Return value:  Size  Location     Type
 11625 ;;                  1    wreg      void 
 11626 ;; Registers used:
 11627 ;;		wreg, status,2, status,0, pclath, cstack
 11628 ;; Tracked objects:
 11629 ;;		On entry : 0/0
 11630 ;;		On exit  : 0/0
 11631 ;;		Unchanged: 0/0
 11632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11633 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11634 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11635 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11636 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11637 ;;Total ram usage:        4 bytes
 11638 ;; Hardware stack levels used:    1
 11639 ;; Hardware stack levels required when called:    5
 11640 ;; This function calls:
 11641 ;;		_updateSwitchBypassState
 11642 ;;		_wait_ms
 11643 ;; This function is called by:
 11644 ;;		_initSwitchBypass
 11645 ;;		_updateSwitchBypass
 11646 ;; This function uses a non-reentrant model
 11647 ;;
 11648                           
 11649                           
 11650                           ;psect for function _setSwitchBypassState
 11651  1222                     _setSwitchBypassState:	
 11652                           
 11653                           ;SwitchBypass.c: 135: if (switchBypass_state == f_state) {return;}
 11654                           
 11655                           ;incstack = 0
 11656                           ; Regs used in _setSwitchBypassState: [wreg+status,2+status,0+pclath+cstack]
 11657  1222  0020               	movlb	0	; select bank0
 11658  1223  0857               	movf	_switchBypass_state,w
 11659  1224  0021               	movlb	1	; select bank1
 11660  1225  00B4               	movwf	??_setSwitchBypassState^(0+128)
 11661  1226  01B5               	clrf	(??_setSwitchBypassState^(0+128)+1)
 11662  1227  0833               	movf	(setSwitchBypassState@f_state+1)^(0+128),w
 11663  1228  0635               	xorwf	(??_setSwitchBypassState+1)^(0+128),w
 11664  1229  1D03               	skipz
 11665  122A  2A2D               	goto	u6545
 11666  122B  0832               	movf	setSwitchBypassState@f_state^(0+128),w
 11667  122C  0634               	xorwf	??_setSwitchBypassState^(0+128),w
 11668  122D                     u6545:	
 11669  122D  1903               	btfsc	3,2
 11670  122E  0008               	return
 11671                           
 11672                           ;SwitchBypass.c: 136: switchBypass_state = f_state;
 11673  122F  0832               	movf	setSwitchBypassState@f_state^(0+128),w
 11674  1230  00B4               	movwf	??_setSwitchBypassState^(0+128)
 11675  1231  0834               	movf	??_setSwitchBypassState^(0+128),w
 11676  1232  0020               	movlb	0	; select bank0
 11677  1233  00D7               	movwf	_switchBypass_state
 11678                           
 11679                           ;SwitchBypass.c: 137: LATBbits.LATB2 = f_state;
 11680  1234  0021               	movlb	1	; select bank1
 11681  1235  0C32               	rrf	setSwitchBypassState@f_state^(0+128),w
 11682  1236  0022               	movlb	2	; select bank2
 11683  1237  1C03               	skipc
 11684  1238  110D               	bcf	13,2	;volatile
 11685  1239  1803               	skipnc
 11686  123A  150D               	bsf	13,2	;volatile
 11687                           
 11688                           ;SwitchBypass.c: 138: LATBbits.LATB3 = 0;
 11689  123B  118D               	bcf	13,3	;volatile
 11690                           
 11691                           ;SwitchBypass.c: 139: LATGbits.LATG2 = f_state;
 11692  123C  0021               	movlb	1	; select bank1
 11693  123D  0C32               	rrf	setSwitchBypassState@f_state^(0+128),w
 11694  123E  0027               	movlb	7	; select bank7
 11695  123F  1C03               	skipc
 11696  1240  110D               	bcf	13,2	;volatile
 11697  1241  1803               	skipnc
 11698  1242  150D               	bsf	13,2	;volatile
 11699                           
 11700                           ;SwitchBypass.c: 140: LATGbits.LATG1 = !f_state;
 11701  1243  0021               	movlb	1	; select bank1
 11702  1244  0832               	movf	setSwitchBypassState@f_state^(0+128),w
 11703  1245  0433               	iorwf	(setSwitchBypassState@f_state+1)^(0+128),w
 11704  1246  1D03               	btfss	3,2
 11705  1247  2A4B               	goto	u6550
 11706  1248  0027               	movlb	7	; select bank7
 11707  1249  148D               	bsf	13,1	;volatile
 11708  124A  2A4D               	goto	l6505
 11709  124B                     u6550:	
 11710  124B  0027               	movlb	7	; select bank7
 11711  124C  108D               	bcf	13,1	;volatile
 11712  124D                     l6505:	
 11713                           
 11714                           ;SwitchBypass.c: 142: wait_ms(20);
 11715  124D  3014               	movlw	20
 11716  124E  0021               	movlb	1	; select bank1
 11717  124F  00AC               	movwf	wait_ms@timeSec^(0+128)
 11718  1250  3000               	movlw	0
 11719  1251  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 11720  1252  319E  2630  3192   	fcall	_wait_ms
 11721                           
 11722                           ;SwitchBypass.c: 144: LATGbits.LATG2 = 0;
 11723  1255  0027               	movlb	7	; select bank7
 11724  1256  110D               	bcf	13,2	;volatile
 11725                           
 11726                           ;SwitchBypass.c: 145: LATGbits.LATG1 = 0;
 11727  1257  108D               	bcf	13,1	;volatile
 11728                           
 11729                           ;SwitchBypass.c: 147: updateSwitchBypassState(switchBypass_state);
 11730  1258  0020               	movlb	0	; select bank0
 11731  1259  0857               	movf	_switchBypass_state,w
 11732  125A  0021               	movlb	1	; select bank1
 11733  125B  00B4               	movwf	??_setSwitchBypassState^(0+128)
 11734  125C  01B5               	clrf	(??_setSwitchBypassState^(0+128)+1)
 11735  125D  0834               	movf	??_setSwitchBypassState^(0+128),w
 11736  125E  00A0               	movwf	updateSwitchBypassState@state^(0+128)
 11737  125F  0835               	movf	(??_setSwitchBypassState+1)^(0+128),w
 11738  1260  00A1               	movwf	(updateSwitchBypassState@state+1)^(0+128)
 11739  1261  3187  27FE  3192   	fcall	_updateSwitchBypassState
 11740                           
 11741                           ;SwitchBypass.c: 148: wait_ms(20);
 11742  1264  3014               	movlw	20
 11743  1265  0021               	movlb	1	; select bank1
 11744  1266  00AC               	movwf	wait_ms@timeSec^(0+128)
 11745  1267  3000               	movlw	0
 11746  1268  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 11747  1269  319E  2630         	fcall	_wait_ms
 11748  126B  0008               	return
 11749  126C                     __end_of_setSwitchBypassState:	
 11750                           
 11751                           	psect	text32
 11752  1E30                     __ptext32:	
 11753 ;; *************** function _wait_ms *****************
 11754 ;; Defined at:
 11755 ;;		line 23 in file "system.c"
 11756 ;; Parameters:    Size  Location     Type
 11757 ;;  timeSec         2   12[BANK1 ] unsigned int 
 11758 ;; Auto vars:     Size  Location     Type
 11759 ;;  timemsl         4   14[BANK1 ] long 
 11760 ;; Return value:  Size  Location     Type
 11761 ;;                  1    wreg      void 
 11762 ;; Registers used:
 11763 ;;		wreg, status,2, status,0, pclath, cstack
 11764 ;; Tracked objects:
 11765 ;;		On entry : 0/0
 11766 ;;		On exit  : 0/0
 11767 ;;		Unchanged: 0/0
 11768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11769 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11770 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11772 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11773 ;;Total ram usage:        6 bytes
 11774 ;; Hardware stack levels used:    1
 11775 ;; Hardware stack levels required when called:    4
 11776 ;; This function calls:
 11777 ;;		___lmul
 11778 ;; This function is called by:
 11779 ;;		_ring_tactiles
 11780 ;;		_solidring_tactiles
 11781 ;;		_read_bottom_tactile
 11782 ;;		_read_top_tactile
 11783 ;;		_setSwitchBypassState
 11784 ;;		_setDoublePressState
 11785 ;;		_showError_Alternating
 11786 ;;		_show_error
 11787 ;;		_show_cancel
 11788 ;;		_star_tactiles
 11789 ;;		_initExpModeState
 11790 ;; This function uses a non-reentrant model
 11791 ;;
 11792                           
 11793                           
 11794                           ;psect for function _wait_ms
 11795  1E30                     _wait_ms:	
 11796                           
 11797                           ;system.c: 25: long timemsl = 0;
 11798                           
 11799                           ;incstack = 0
 11800                           ; Regs used in _wait_ms: [wreg+status,2+status,0+pclath+cstack]
 11801  1E30  3000               	movlw	0
 11802  1E31  0021               	movlb	1	; select bank1
 11803  1E32  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 11804  1E33  3000               	movlw	0
 11805  1E34  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 11806  1E35  3000               	movlw	0
 11807  1E36  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 11808  1E37  3000               	movlw	0
 11809  1E38  00AE               	movwf	wait_ms@timemsl^(0+128)
 11810                           
 11811                           ;system.c: 26: timemsl = timeSec * 1000l;
 11812  1E39  082C               	movf	wait_ms@timeSec^(0+128),w
 11813  1E3A  00A0               	movwf	___lmul@multiplier^(0+128)
 11814  1E3B  082D               	movf	(wait_ms@timeSec+1)^(0+128),w
 11815  1E3C  00A1               	movwf	(___lmul@multiplier^(0+128)+1)
 11816  1E3D  01A2               	clrf	(___lmul@multiplier^(0+128)+2)
 11817  1E3E  01A3               	clrf	(___lmul@multiplier^(0+128)+3)
 11818  1E3F  3000               	movlw	0
 11819  1E40  00A7               	movwf	(___lmul@multiplicand+3)^(0+128)
 11820  1E41  3000               	movlw	0
 11821  1E42  00A6               	movwf	(___lmul@multiplicand+2)^(0+128)
 11822  1E43  3003               	movlw	3
 11823  1E44  00A5               	movwf	(___lmul@multiplicand+1)^(0+128)
 11824  1E45  30E8               	movlw	232
 11825  1E46  00A4               	movwf	___lmul@multiplicand^(0+128)
 11826  1E47  319E  2600  319E   	fcall	___lmul
 11827  1E4A  0021               	movlb	1	; select bank1
 11828  1E4B  0823               	movf	(?___lmul+3)^(0+128),w
 11829  1E4C  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 11830  1E4D  0822               	movf	(?___lmul+2)^(0+128),w
 11831  1E4E  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 11832  1E4F  0821               	movf	(?___lmul+1)^(0+128),w
 11833  1E50  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 11834  1E51  0820               	movf	?___lmul^(0+128),w
 11835  1E52  00AE               	movwf	wait_ms@timemsl^(0+128)
 11836  1E53                     l388:	
 11837                           ;system.c: 27: for( ; timemsl; timemsl--);
 11838                           
 11839  1E53  0831               	movf	(wait_ms@timemsl+3)^(0+128),w
 11840  1E54  0430               	iorwf	(wait_ms@timemsl+2)^(0+128),w
 11841  1E55  042F               	iorwf	(wait_ms@timemsl+1)^(0+128),w
 11842  1E56  042E               	iorwf	wait_ms@timemsl^(0+128),w
 11843  1E57  1903               	btfsc	3,2
 11844  1E58  0008               	return
 11845  1E59  30FF               	movlw	255
 11846  1E5A  07AE               	addwf	wait_ms@timemsl^(0+128),f
 11847  1E5B  30FF               	movlw	255
 11848  1E5C  3DAF               	addwfc	(wait_ms@timemsl+1)^(0+128),f
 11849  1E5D  30FF               	movlw	255
 11850  1E5E  3DB0               	addwfc	(wait_ms@timemsl+2)^(0+128),f
 11851  1E5F  30FF               	movlw	255
 11852  1E60  3DB1               	addwfc	(wait_ms@timemsl+3)^(0+128),f
 11853  1E61  2E53               	goto	l388
 11854  1E62                     __end_of_wait_ms:	
 11855                           
 11856                           	psect	text33
 11857  1E00                     __ptext33:	
 11858 ;; *************** function ___lmul *****************
 11859 ;; Defined at:
 11860 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 11861 ;; Parameters:    Size  Location     Type
 11862 ;;  multiplier      4    0[BANK1 ] unsigned long 
 11863 ;;  multiplicand    4    4[BANK1 ] unsigned long 
 11864 ;; Auto vars:     Size  Location     Type
 11865 ;;  product         4    8[BANK1 ] unsigned long 
 11866 ;; Return value:  Size  Location     Type
 11867 ;;                  4    0[BANK1 ] unsigned long 
 11868 ;; Registers used:
 11869 ;;		wreg, status,2, status,0
 11870 ;; Tracked objects:
 11871 ;;		On entry : 0/0
 11872 ;;		On exit  : 0/0
 11873 ;;		Unchanged: 0/0
 11874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11875 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11876 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11878 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11879 ;;Total ram usage:       12 bytes
 11880 ;; Hardware stack levels used:    1
 11881 ;; Hardware stack levels required when called:    3
 11882 ;; This function calls:
 11883 ;;		Nothing
 11884 ;; This function is called by:
 11885 ;;		_wait_ms
 11886 ;; This function uses a non-reentrant model
 11887 ;;
 11888                           
 11889                           
 11890                           ;psect for function ___lmul
 11891  1E00                     ___lmul:	
 11892                           
 11893                           ;incstack = 0
 11894                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 11895  1E00  3000               	movlw	0
 11896  1E01  0021               	movlb	1	; select bank1
 11897  1E02  00AB               	movwf	(___lmul@product+3)^(0+128)
 11898  1E03  3000               	movlw	0
 11899  1E04  00AA               	movwf	(___lmul@product+2)^(0+128)
 11900  1E05  3000               	movlw	0
 11901  1E06  00A9               	movwf	(___lmul@product+1)^(0+128)
 11902  1E07  3000               	movlw	0
 11903  1E08  00A8               	movwf	___lmul@product^(0+128)
 11904  1E09                     l6183:	
 11905  1E09  1C20               	btfss	___lmul@multiplier^(0+128),0
 11906  1E0A  2E13               	goto	l6187
 11907  1E0B  0824               	movf	___lmul@multiplicand^(0+128),w
 11908  1E0C  07A8               	addwf	___lmul@product^(0+128),f
 11909  1E0D  0825               	movf	(___lmul@multiplicand+1)^(0+128),w
 11910  1E0E  3DA9               	addwfc	(___lmul@product+1)^(0+128),f
 11911  1E0F  0826               	movf	(___lmul@multiplicand+2)^(0+128),w
 11912  1E10  3DAA               	addwfc	(___lmul@product+2)^(0+128),f
 11913  1E11  0827               	movf	(___lmul@multiplicand+3)^(0+128),w
 11914  1E12  3DAB               	addwfc	(___lmul@product+3)^(0+128),f
 11915  1E13                     l6187:	
 11916  1E13  3001               	movlw	1
 11917  1E14                     u6175:	
 11918  1E14  35A4               	lslf	___lmul@multiplicand^(0+128),f
 11919  1E15  0DA5               	rlf	(___lmul@multiplicand+1)^(0+128),f
 11920  1E16  0DA6               	rlf	(___lmul@multiplicand+2)^(0+128),f
 11921  1E17  0DA7               	rlf	(___lmul@multiplicand+3)^(0+128),f
 11922  1E18  0B89               	decfsz	9,f
 11923  1E19  2E14               	goto	u6175
 11924  1E1A  3001               	movlw	1
 11925  1E1B                     u6185:	
 11926  1E1B  36A3               	lsrf	(___lmul@multiplier+3)^(0+128),f
 11927  1E1C  0CA2               	rrf	(___lmul@multiplier+2)^(0+128),f
 11928  1E1D  0CA1               	rrf	(___lmul@multiplier+1)^(0+128),f
 11929  1E1E  0CA0               	rrf	___lmul@multiplier^(0+128),f
 11930  1E1F  0B89               	decfsz	9,f
 11931  1E20  2E1B               	goto	u6185
 11932  1E21  0823               	movf	(___lmul@multiplier+3)^(0+128),w
 11933  1E22  0422               	iorwf	(___lmul@multiplier+2)^(0+128),w
 11934  1E23  0421               	iorwf	(___lmul@multiplier+1)^(0+128),w
 11935  1E24  0420               	iorwf	___lmul@multiplier^(0+128),w
 11936  1E25  1D03               	skipz
 11937  1E26  2E09               	goto	l6183
 11938  1E27  082B               	movf	(___lmul@product+3)^(0+128),w
 11939  1E28  00A3               	movwf	(?___lmul+3)^(0+128)
 11940  1E29  082A               	movf	(___lmul@product+2)^(0+128),w
 11941  1E2A  00A2               	movwf	(?___lmul+2)^(0+128)
 11942  1E2B  0829               	movf	(___lmul@product+1)^(0+128),w
 11943  1E2C  00A1               	movwf	(?___lmul+1)^(0+128)
 11944  1E2D  0828               	movf	___lmul@product^(0+128),w
 11945  1E2E  00A0               	movwf	?___lmul^(0+128)
 11946  1E2F  0008               	return
 11947  1E30                     __end_of___lmul:	
 11948                           
 11949                           	psect	text34
 11950  07FE                     __ptext34:	
 11951 ;; *************** function _updateSwitchBypassState *****************
 11952 ;; Defined at:
 11953 ;;		line 96 in file "state_manager.c"
 11954 ;; Parameters:    Size  Location     Type
 11955 ;;  state           2    0[BANK1 ] int 
 11956 ;; Auto vars:     Size  Location     Type
 11957 ;;		None
 11958 ;; Return value:  Size  Location     Type
 11959 ;;                  1    wreg      void 
 11960 ;; Registers used:
 11961 ;;		None
 11962 ;; Tracked objects:
 11963 ;;		On entry : 0/0
 11964 ;;		On exit  : 0/0
 11965 ;;		Unchanged: 0/0
 11966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11967 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11968 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11970 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11971 ;;Total ram usage:        2 bytes
 11972 ;; Hardware stack levels used:    1
 11973 ;; Hardware stack levels required when called:    3
 11974 ;; This function calls:
 11975 ;;		Nothing
 11976 ;; This function is called by:
 11977 ;;		_setSwitchBypassState
 11978 ;; This function uses a non-reentrant model
 11979 ;;
 11980                           
 11981                           
 11982                           ;psect for function _updateSwitchBypassState
 11983  07FE                     _updateSwitchBypassState:	
 11984                           
 11985                           ;incstack = 0
 11986                           ; Regs used in _updateSwitchBypassState: []
 11987  07FE  0008               	return
 11988  07FF                     __end_of_updateSwitchBypassState:	
 11989                           
 11990                           	psect	text35
 11991  1C1A                     __ptext35:	
 11992 ;; *************** function _getSwitchBypassState *****************
 11993 ;; Defined at:
 11994 ;;		line 103 in file "state_manager.c"
 11995 ;; Parameters:    Size  Location     Type
 11996 ;;		None
 11997 ;; Auto vars:     Size  Location     Type
 11998 ;;		None
 11999 ;; Return value:  Size  Location     Type
 12000 ;;                  2    0[BANK1 ] int 
 12001 ;; Registers used:
 12002 ;;		status,2
 12003 ;; Tracked objects:
 12004 ;;		On entry : 0/0
 12005 ;;		On exit  : 0/0
 12006 ;;		Unchanged: 0/0
 12007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12008 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12009 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12010 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12011 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12012 ;;Total ram usage:        2 bytes
 12013 ;; Hardware stack levels used:    1
 12014 ;; Hardware stack levels required when called:    3
 12015 ;; This function calls:
 12016 ;;		Nothing
 12017 ;; This function is called by:
 12018 ;;		_initSwitchBypass
 12019 ;; This function uses a non-reentrant model
 12020 ;;
 12021                           
 12022                           
 12023                           ;psect for function _getSwitchBypassState
 12024  1C1A                     _getSwitchBypassState:	
 12025                           
 12026                           ;state_manager.c: 108: return 0;
 12027                           
 12028                           ;incstack = 0
 12029                           ; Regs used in _getSwitchBypassState: [status,2]
 12030  1C1A  0021               	movlb	1	; select bank1
 12031  1C1B  01A0               	clrf	?_getSwitchBypassState^(0+128)
 12032  1C1C  01A1               	clrf	(?_getSwitchBypassState+1)^(0+128)
 12033  1C1D  0008               	return
 12034  1C1E                     __end_of_getSwitchBypassState:	
 12035                           
 12036                           	psect	text36
 12037  1C84                     __ptext36:	
 12038 ;; *************** function _adc_convert *****************
 12039 ;; Defined at:
 12040 ;;		line 122 in file "user.c"
 12041 ;; Parameters:    Size  Location     Type
 12042 ;;  channel         1    wreg     unsigned char 
 12043 ;; Auto vars:     Size  Location     Type
 12044 ;;  channel         1    3[BANK1 ] unsigned char 
 12045 ;; Return value:  Size  Location     Type
 12046 ;;                  2    0[BANK1 ] unsigned int 
 12047 ;; Registers used:
 12048 ;;		wreg, status,2, status,0
 12049 ;; Tracked objects:
 12050 ;;		On entry : 0/0
 12051 ;;		On exit  : 0/0
 12052 ;;		Unchanged: 0/0
 12053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12054 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12055 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12056 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12057 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12058 ;;Total ram usage:        4 bytes
 12059 ;; Hardware stack levels used:    1
 12060 ;; Hardware stack levels required when called:    3
 12061 ;; This function calls:
 12062 ;;		Nothing
 12063 ;; This function is called by:
 12064 ;;		_main
 12065 ;; This function uses a non-reentrant model
 12066 ;;
 12067                           
 12068                           
 12069                           ;psect for function _adc_convert
 12070  1C84                     _adc_convert:	
 12071                           
 12072                           ;incstack = 0
 12073                           ; Regs used in _adc_convert: [wreg+status,2+status,0]
 12074                           ;adc_convert@channel stored from wreg
 12075  1C84  0021               	movlb	1	; select bank1
 12076  1C85  00A3               	movwf	adc_convert@channel^(0+128)
 12077                           
 12078                           ;user.c: 123: ADCON0bits.CHS = channel;
 12079  1C86  0823               	movf	adc_convert@channel^(0+128),w
 12080  1C87  00A2               	movwf	??_adc_convert^(0+128)
 12081  1C88  0DA2               	rlf	??_adc_convert^(0+128),f
 12082  1C89  0DA2               	rlf	??_adc_convert^(0+128),f
 12083  1C8A  081D               	movf	29,w	;volatile
 12084  1C8B  0622               	xorwf	??_adc_convert^(0+128),w
 12085  1C8C  3983               	andlw	-125
 12086  1C8D  0622               	xorwf	??_adc_convert^(0+128),w
 12087  1C8E  009D               	movwf	29	;volatile
 12088                           
 12089                           ;user.c: 124: ADCON0bits.GO = 0b1;
 12090  1C8F  149D               	bsf	29,1	;volatile
 12091  1C90                     l586:	
 12092                           ;user.c: 125: while (ADCON0bits.GO_nDONE);
 12093                           
 12094  1C90  189D               	btfsc	29,1	;volatile
 12095  1C91  2C90               	goto	l586
 12096                           
 12097                           ;user.c: 126: return (ADRESH << 8) | ADRESL;
 12098  1C92  081C               	movf	28,w	;volatile
 12099  1C93  00A1               	movwf	(?_adc_convert+1)^(0+128)
 12100  1C94  081B               	movf	27,w	;volatile
 12101  1C95  00A0               	movwf	?_adc_convert^(0+128)
 12102  1C96  0008               	return
 12103  1C97                     __end_of_adc_convert:	
 12104                           
 12105                           	psect	text37
 12106  1150                     __ptext37:	
 12107 ;; *************** function _USARTInit *****************
 12108 ;; Defined at:
 12109 ;;		line 31 in file "usart_pic16.c"
 12110 ;; Parameters:    Size  Location     Type
 12111 ;;  baud_rate       2    0[BANK1 ] unsigned int 
 12112 ;; Auto vars:     Size  Location     Type
 12113 ;;		None
 12114 ;; Return value:  Size  Location     Type
 12115 ;;                  1    wreg      void 
 12116 ;; Registers used:
 12117 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12118 ;; Tracked objects:
 12119 ;;		On entry : 0/0
 12120 ;;		On exit  : 0/0
 12121 ;;		Unchanged: 0/0
 12122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12123 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12124 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12125 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12126 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12127 ;;Total ram usage:        3 bytes
 12128 ;; Hardware stack levels used:    1
 12129 ;; Hardware stack levels required when called:    3
 12130 ;; This function calls:
 12131 ;;		Nothing
 12132 ;; This function is called by:
 12133 ;;		_main
 12134 ;; This function uses a non-reentrant model
 12135 ;;
 12136                           
 12137                           
 12138                           ;psect for function _USARTInit
 12139  1150                     _USARTInit:	
 12140                           
 12141                           ;usart_pic16.c: 34: UQFront=UQEnd=-1;
 12142                           
 12143                           ;incstack = 0
 12144                           ; Regs used in _USARTInit: [wreg-fsr0h+status,2+status,0]
 12145  1150  30FF               	movlw	255
 12146  1151  0020               	movlb	0	; select bank0
 12147  1152  00E9               	movwf	_UQEnd	;volatile
 12148  1153  0021               	movlb	1	; select bank1
 12149  1154  00A2               	movwf	??_USARTInit^(0+128)
 12150  1155  0822               	movf	??_USARTInit^(0+128),w
 12151  1156  00FD               	movwf	_UQFront	;volatile
 12152                           
 12153                           ;usart_pic16.c: 37: switch(baud_rate)
 12154  1157  2962               	goto	l6793
 12155  1158                     l6783:	
 12156                           ;usart_pic16.c: 38: {
 12157                           ;usart_pic16.c: 39: case 9600:
 12158                           
 12159                           
 12160                           ;usart_pic16.c: 40: SPBRG=103;
 12161  1158  3067               	movlw	103
 12162  1159  295F               	goto	L13
 12163  115A                     l6785:	
 12164                           ;usart_pic16.c: 42: case 19200:
 12165                           
 12166                           ;usart_pic16.c: 41: break;
 12167                           
 12168                           
 12169                           ;usart_pic16.c: 43: SPBRG=51;
 12170  115A  3033               	movlw	51
 12171  115B  295F               	goto	L13
 12172  115C                     l6787:	
 12173                           ;usart_pic16.c: 45: case 31250:
 12174                           
 12175                           ;usart_pic16.c: 44: break;
 12176                           
 12177                           
 12178                           ;usart_pic16.c: 46: SPBRG = 31;
 12179  115C  301F               	movlw	31
 12180  115D  295F               	goto	L13
 12181  115E                     l6789:	
 12182                           ;usart_pic16.c: 48: case 38400:
 12183                           
 12184                           ;usart_pic16.c: 47: break;
 12185                           
 12186                           
 12187                           ;usart_pic16.c: 49: SPBRG=25;
 12188  115E  3019               	movlw	25
 12189  115F                     L13:	
 12190  115F  0023               	movlb	3	; select bank3
 12191  1160  009B               	movwf	27	;volatile
 12192                           
 12193                           ;usart_pic16.c: 51: }
 12194                           
 12195                           ;usart_pic16.c: 50: break;
 12196  1161  2985               	goto	l1649
 12197  1162                     l6793:	
 12198                           
 12199                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 12200                           ; Switch size 1, requested type "space"
 12201                           ; Number of cases is 4, Range of values is 37 to 150
 12202                           ; switch strategies available:
 12203                           ; Name         Instructions Cycles
 12204                           ; simple_byte           13     7 (average)
 12205                           ; direct_byte          237     9 (fixed)
 12206                           ; jumptable            263     9 (fixed)
 12207                           ;	Chosen strategy is simple_byte
 12208  1162  0021               	movlb	1	; select bank1
 12209  1163  0821               	movf	(USARTInit@baud_rate+1)^(0+128),w
 12210  1164  3A25               	xorlw	37	; case 37
 12211  1165  1903               	skipnz
 12212  1166  2971               	goto	l7707
 12213  1167  3A6E               	xorlw	110	; case 75
 12214  1168  1903               	skipnz
 12215  1169  2976               	goto	l7709
 12216  116A  3A31               	xorlw	49	; case 122
 12217  116B  1903               	skipnz
 12218  116C  297B               	goto	l7711
 12219  116D  3AEC               	xorlw	236	; case 150
 12220  116E  1903               	skipnz
 12221  116F  2980               	goto	l7713
 12222  1170  2985               	goto	l1649
 12223  1171                     l7707:	
 12224                           
 12225                           ; Switch size 1, requested type "space"
 12226                           ; Number of cases is 1, Range of values is 128 to 128
 12227                           ; switch strategies available:
 12228                           ; Name         Instructions Cycles
 12229                           ; simple_byte            4     3 (average)
 12230                           ; direct_byte           11     9 (fixed)
 12231                           ; jumptable            263     9 (fixed)
 12232                           ;	Chosen strategy is simple_byte
 12233  1171  0820               	movf	USARTInit@baud_rate^(0+128),w
 12234  1172  3A80               	xorlw	128	; case 128
 12235  1173  1903               	skipnz
 12236  1174  2958               	goto	l6783
 12237  1175  2985               	goto	l1649
 12238  1176                     l7709:	
 12239                           
 12240                           ; Switch size 1, requested type "space"
 12241                           ; Number of cases is 1, Range of values is 0 to 0
 12242                           ; switch strategies available:
 12243                           ; Name         Instructions Cycles
 12244                           ; simple_byte            4     3 (average)
 12245                           ; direct_byte            8     6 (fixed)
 12246                           ; jumptable            260     6 (fixed)
 12247                           ;	Chosen strategy is simple_byte
 12248  1176  0820               	movf	USARTInit@baud_rate^(0+128),w
 12249  1177  3A00               	xorlw	0	; case 0
 12250  1178  1903               	skipnz
 12251  1179  295A               	goto	l6785
 12252  117A  2985               	goto	l1649
 12253  117B                     l7711:	
 12254                           
 12255                           ; Switch size 1, requested type "space"
 12256                           ; Number of cases is 1, Range of values is 18 to 18
 12257                           ; switch strategies available:
 12258                           ; Name         Instructions Cycles
 12259                           ; simple_byte            4     3 (average)
 12260                           ; direct_byte           11     9 (fixed)
 12261                           ; jumptable            263     9 (fixed)
 12262                           ;	Chosen strategy is simple_byte
 12263  117B  0820               	movf	USARTInit@baud_rate^(0+128),w
 12264  117C  3A12               	xorlw	18	; case 18
 12265  117D  1903               	skipnz
 12266  117E  295C               	goto	l6787
 12267  117F  2985               	goto	l1649
 12268  1180                     l7713:	
 12269                           
 12270                           ; Switch size 1, requested type "space"
 12271                           ; Number of cases is 1, Range of values is 0 to 0
 12272                           ; switch strategies available:
 12273                           ; Name         Instructions Cycles
 12274                           ; simple_byte            4     3 (average)
 12275                           ; direct_byte            8     6 (fixed)
 12276                           ; jumptable            260     6 (fixed)
 12277                           ;	Chosen strategy is simple_byte
 12278  1180  0820               	movf	USARTInit@baud_rate^(0+128),w
 12279  1181  3A00               	xorlw	0	; case 0
 12280  1182  1903               	skipnz
 12281  1183  295E               	goto	l6789
 12282  1184  2985               	goto	l1649
 12283  1185                     l1649:	
 12284                           
 12285                           ;usart_pic16.c: 53: TXSTAbits.TX9=0;
 12286  1185  0023               	movlb	3	; select bank3
 12287  1186  131E               	bcf	30,6	;volatile
 12288                           
 12289                           ;usart_pic16.c: 54: TXSTAbits.TXEN=1;
 12290  1187  169E               	bsf	30,5	;volatile
 12291                           
 12292                           ;usart_pic16.c: 55: TXSTAbits.SYNC=0;
 12293  1188  121E               	bcf	30,4	;volatile
 12294                           
 12295                           ;usart_pic16.c: 56: TXSTAbits.BRGH=1;
 12296  1189  151E               	bsf	30,2	;volatile
 12297                           
 12298                           ;usart_pic16.c: 59: RCSTAbits.SPEN=1;
 12299  118A  179D               	bsf	29,7	;volatile
 12300                           
 12301                           ;usart_pic16.c: 60: RCSTAbits.RX9=0;
 12302  118B  131D               	bcf	29,6	;volatile
 12303                           
 12304                           ;usart_pic16.c: 61: RCSTAbits.CREN=1;
 12305  118C  161D               	bsf	29,4	;volatile
 12306                           
 12307                           ;usart_pic16.c: 62: RCSTAbits.ADDEN=0;
 12308  118D  119D               	bcf	29,3	;volatile
 12309                           
 12310                           ;usart_pic16.c: 65: RCIE=1;
 12311  118E  0021               	movlb	1	; select bank1
 12312  118F  1691               	bsf	17,5	;volatile
 12313                           
 12314                           ;usart_pic16.c: 66: PEIE=1;
 12315  1190  170B               	bsf	11,6	;volatile
 12316                           
 12317                           ;usart_pic16.c: 68: (GIE = 1);
 12318  1191  178B               	bsf	11,7	;volatile
 12319  1192  0008               	return
 12320  1193                     __end_of_USARTInit:	
 12321                           
 12322                           	psect	text38
 12323  14B3                     __ptext38:	
 12324 ;; *************** function _ReadSavedSettings *****************
 12325 ;; Defined at:
 12326 ;;		line 199 in file "user.c"
 12327 ;; Parameters:    Size  Location     Type
 12328 ;;		None
 12329 ;; Auto vars:     Size  Location     Type
 12330 ;;		None
 12331 ;; Return value:  Size  Location     Type
 12332 ;;                  1    wreg      void 
 12333 ;; Registers used:
 12334 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12335 ;; Tracked objects:
 12336 ;;		On entry : 0/0
 12337 ;;		On exit  : 0/0
 12338 ;;		Unchanged: 0/0
 12339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12342 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12343 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12344 ;;Total ram usage:        1 bytes
 12345 ;; Hardware stack levels used:    1
 12346 ;; Hardware stack levels required when called:    4
 12347 ;; This function calls:
 12348 ;;		_FLASH_ReadWord
 12349 ;;		_set_leds_bottom
 12350 ;;		_set_leds_top
 12351 ;; This function is called by:
 12352 ;;		_main
 12353 ;; This function uses a non-reentrant model
 12354 ;;
 12355                           
 12356                           
 12357                           ;psect for function _ReadSavedSettings
 12358  14B3                     _ReadSavedSettings:	
 12359                           
 12360                           ;user.c: 201: top_push_state = FLASH_ReadWord(0x1F81);
 12361                           
 12362                           ;incstack = 0
 12363                           ; Regs used in _ReadSavedSettings: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12364  14B3  3081               	movlw	129
 12365  14B4  0021               	movlb	1	; select bank1
 12366  14B5  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 12367  14B6  301F               	movlw	31
 12368  14B7  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
 12369  14B8  319D  2511  3194   	fcall	_FLASH_ReadWord
 12370  14BB  0021               	movlb	1	; select bank1
 12371  14BC  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
 12372  14BD  0020               	movlb	0	; select bank0
 12373  14BE  00D2               	movwf	_top_push_state+1
 12374  14BF  0021               	movlb	1	; select bank1
 12375  14C0  0820               	movf	?_FLASH_ReadWord^(0+128),w
 12376  14C1  0020               	movlb	0	; select bank0
 12377  14C2  00D1               	movwf	_top_push_state
 12378                           
 12379                           ;user.c: 202: bottom_push_state = FLASH_ReadWord(0x1F82);
 12380  14C3  3082               	movlw	130
 12381  14C4  0021               	movlb	1	; select bank1
 12382  14C5  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 12383  14C6  301F               	movlw	31
 12384  14C7  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
 12385  14C8  319D  2511  3194   	fcall	_FLASH_ReadWord
 12386  14CB  0021               	movlb	1	; select bank1
 12387  14CC  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
 12388  14CD  0020               	movlb	0	; select bank0
 12389  14CE  00CE               	movwf	_bottom_push_state+1
 12390  14CF  0021               	movlb	1	; select bank1
 12391  14D0  0820               	movf	?_FLASH_ReadWord^(0+128),w
 12392  14D1  0020               	movlb	0	; select bank0
 12393  14D2  00CD               	movwf	_bottom_push_state
 12394                           
 12395                           ;user.c: 204: if (top_push_state > 6) {
 12396  14D3  0852               	movf	_top_push_state+1,w
 12397  14D4  3A80               	xorlw	128
 12398  14D5  0021               	movlb	1	; select bank1
 12399  14D6  00A4               	movwf	??_ReadSavedSettings^(0+128)
 12400  14D7  3080               	movlw	128
 12401  14D8  0224               	subwf	??_ReadSavedSettings^(0+128),w
 12402  14D9  1D03               	skipz
 12403  14DA  2CDE               	goto	u7215
 12404  14DB  3007               	movlw	7
 12405  14DC  0020               	movlb	0	; select bank0
 12406  14DD  0251               	subwf	_top_push_state,w
 12407  14DE                     u7215:	
 12408  14DE  1C03               	skipc
 12409  14DF  2CE5               	goto	l615
 12410                           
 12411                           ;user.c: 206: top_push_state = 6;
 12412  14E0  3006               	movlw	6
 12413  14E1  0020               	movlb	0	; select bank0
 12414  14E2  00D1               	movwf	_top_push_state
 12415  14E3  3000               	movlw	0
 12416  14E4  00D2               	movwf	_top_push_state+1
 12417  14E5                     l615:	
 12418                           
 12419                           ;user.c: 207: }
 12420                           ;user.c: 208: if (bottom_push_state > 6) {
 12421  14E5  0020               	movlb	0	; select bank0
 12422  14E6  084E               	movf	_bottom_push_state+1,w
 12423  14E7  3A80               	xorlw	128
 12424  14E8  0021               	movlb	1	; select bank1
 12425  14E9  00A4               	movwf	??_ReadSavedSettings^(0+128)
 12426  14EA  3080               	movlw	128
 12427  14EB  0224               	subwf	??_ReadSavedSettings^(0+128),w
 12428  14EC  1D03               	skipz
 12429  14ED  2CF1               	goto	u7225
 12430  14EE  3007               	movlw	7
 12431  14EF  0020               	movlb	0	; select bank0
 12432  14F0  024D               	subwf	_bottom_push_state,w
 12433  14F1                     u7225:	
 12434  14F1  1C03               	skipc
 12435  14F2  2CF8               	goto	l6847
 12436                           
 12437                           ;user.c: 210: bottom_push_state = 6;
 12438  14F3  3006               	movlw	6
 12439  14F4  0020               	movlb	0	; select bank0
 12440  14F5  00CD               	movwf	_bottom_push_state
 12441  14F6  3000               	movlw	0
 12442  14F7  00CE               	movwf	_bottom_push_state+1
 12443  14F8                     l6847:	
 12444                           
 12445                           ;user.c: 211: }
 12446                           ;user.c: 214: LATGbits.LATG1 = !switchBypass_state;
 12447  14F8  0020               	movlb	0	; select bank0
 12448  14F9  0857               	movf	_switchBypass_state,w
 12449  14FA  1D03               	btfss	3,2
 12450  14FB  2CFF               	goto	u7230
 12451  14FC  0027               	movlb	7	; select bank7
 12452  14FD  148D               	bsf	13,1	;volatile
 12453  14FE  2D01               	goto	l6849
 12454  14FF                     u7230:	
 12455  14FF  0027               	movlb	7	; select bank7
 12456  1500  108D               	bcf	13,1	;volatile
 12457  1501                     l6849:	
 12458                           
 12459                           ;user.c: 215: LATGbits.LATG2 = switchBypass_state;
 12460  1501  0020               	movlb	0	; select bank0
 12461  1502  0C57               	rrf	_switchBypass_state,w
 12462  1503  0027               	movlb	7	; select bank7
 12463  1504  1C03               	skipc
 12464  1505  110D               	bcf	13,2	;volatile
 12465  1506  1803               	skipnc
 12466  1507  150D               	bsf	13,2	;volatile
 12467                           
 12468                           ;user.c: 216: LATBbits.LATB2 = 0;
 12469  1508  0022               	movlb	2	; select bank2
 12470  1509  110D               	bcf	13,2	;volatile
 12471                           
 12472                           ;user.c: 217: LATBbits.LATB3 = 0;
 12473  150A  118D               	bcf	13,3	;volatile
 12474                           
 12475                           ;user.c: 219: LATBbits.LATB4 = 0;
 12476  150B  120D               	bcf	13,4	;volatile
 12477                           
 12478                           ;user.c: 220: LATBbits.LATB5 = 0;
 12479  150C  128D               	bcf	13,5	;volatile
 12480                           
 12481                           ;user.c: 222: LATBbits.LATB1 = 0;
 12482  150D  108D               	bcf	13,1	;volatile
 12483                           
 12484                           ;user.c: 223: LATBbits.LATB0 = 0;
 12485  150E  100D               	bcf	13,0	;volatile
 12486                           
 12487                           ;user.c: 226: set_leds_top(top_push_state, 1);
 12488  150F  0020               	movlb	0	; select bank0
 12489  1510  0852               	movf	_top_push_state+1,w
 12490  1511  0021               	movlb	1	; select bank1
 12491  1512  00A1               	movwf	(set_leds_top@x+1)^(0+128)
 12492  1513  0020               	movlb	0	; select bank0
 12493  1514  0851               	movf	_top_push_state,w
 12494  1515  0021               	movlb	1	; select bank1
 12495  1516  00A0               	movwf	set_leds_top@x^(0+128)
 12496  1517  3001               	movlw	1
 12497  1518  00A2               	movwf	set_leds_top@ledState^(0+128)
 12498  1519  3000               	movlw	0
 12499  151A  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
 12500  151B  3193  23FA  3194   	fcall	_set_leds_top
 12501                           
 12502                           ;user.c: 227: set_leds_bottom(bottom_push_state);
 12503  151E  0020               	movlb	0	; select bank0
 12504  151F  084E               	movf	_bottom_push_state+1,w
 12505  1520  0021               	movlb	1	; select bank1
 12506  1521  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
 12507  1522  0020               	movlb	0	; select bank0
 12508  1523  084D               	movf	_bottom_push_state,w
 12509  1524  0021               	movlb	1	; select bank1
 12510  1525  00A0               	movwf	set_leds_bottom@x^(0+128)
 12511  1526  319F  270E         	fcall	_set_leds_bottom
 12512  1528  0008               	return
 12513  1529                     __end_of_ReadSavedSettings:	
 12514                           
 12515                           	psect	text39
 12516  13FA                     __ptext39:	
 12517 ;; *************** function _set_leds_top *****************
 12518 ;; Defined at:
 12519 ;;		line 16 in file "LEDs.c"
 12520 ;; Parameters:    Size  Location     Type
 12521 ;;  x               2    0[BANK1 ] int 
 12522 ;;  ledState        2    2[BANK1 ] int 
 12523 ;; Auto vars:     Size  Location     Type
 12524 ;;		None
 12525 ;; Return value:  Size  Location     Type
 12526 ;;                  1    wreg      void 
 12527 ;; Registers used:
 12528 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12529 ;; Tracked objects:
 12530 ;;		On entry : 0/0
 12531 ;;		On exit  : 0/0
 12532 ;;		Unchanged: 0/0
 12533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12534 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12535 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12537 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12538 ;;Total ram usage:        4 bytes
 12539 ;; Hardware stack levels used:    1
 12540 ;; Hardware stack levels required when called:    3
 12541 ;; This function calls:
 12542 ;;		Nothing
 12543 ;; This function is called by:
 12544 ;;		_ReadSavedSettings
 12545 ;;		_ring_tactiles
 12546 ;;		_solidring_tactiles
 12547 ;;		_read_top_tactile
 12548 ;;		_setPresetDisplay
 12549 ;;		_resetRingLEDs
 12550 ;;		_setExpressionDisplay
 12551 ;;		_star_tactiles
 12552 ;; This function uses a non-reentrant model
 12553 ;;
 12554                           
 12555                           
 12556                           ;psect for function _set_leds_top
 12557  13FA                     _set_leds_top:	
 12558                           
 12559                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 12560                           
 12561                           ;incstack = 0
 12562                           ; Regs used in _set_leds_top: [wreg-fsr0h+status,2+status,0]
 12563  13FA  0027               	movlb	7	; select bank7
 12564  13FB  100C               	bcf	12,0	;volatile
 12565                           
 12566                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 12567  13FC  108C               	bcf	12,1	;volatile
 12568                           
 12569                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 12570  13FD  110C               	bcf	12,2	;volatile
 12571                           
 12572                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 12573  13FE  118C               	bcf	12,3	;volatile
 12574                           
 12575                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 12576  13FF  120C               	bcf	12,4	;volatile
 12577                           
 12578                           ;LEDs.c: 22: switch (x) {
 12579  1400  2C30               	goto	l6209
 12580  1401                     l6197:	
 12581                           ;LEDs.c: 23: case 1:
 12582                           
 12583                           
 12584                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 12585  1401  0021               	movlb	1	; select bank1
 12586  1402  0C22               	rrf	set_leds_top@ledState^(0+128),w
 12587  1403  0027               	movlb	7	; select bank7
 12588  1404  1C03               	skipc
 12589  1405  100C               	bcf	12,0	;volatile
 12590  1406  1803               	skipnc
 12591  1407  140C               	bsf	12,0	;volatile
 12592                           
 12593                           ;LEDs.c: 25: break;
 12594  1408  0008               	return
 12595  1409                     l6199:	
 12596                           ;LEDs.c: 26: case 2:
 12597                           
 12598                           
 12599                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 12600  1409  0021               	movlb	1	; select bank1
 12601  140A  0C22               	rrf	set_leds_top@ledState^(0+128),w
 12602  140B  0027               	movlb	7	; select bank7
 12603  140C  1C03               	skipc
 12604  140D  108C               	bcf	12,1	;volatile
 12605  140E  1803               	skipnc
 12606  140F  148C               	bsf	12,1	;volatile
 12607                           
 12608                           ;LEDs.c: 28: break;
 12609  1410  0008               	return
 12610  1411                     l6201:	
 12611                           ;LEDs.c: 29: case 3:
 12612                           
 12613                           
 12614                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 12615  1411  0021               	movlb	1	; select bank1
 12616  1412  0C22               	rrf	set_leds_top@ledState^(0+128),w
 12617  1413  0027               	movlb	7	; select bank7
 12618  1414  1C03               	skipc
 12619  1415  110C               	bcf	12,2	;volatile
 12620  1416  1803               	skipnc
 12621  1417  150C               	bsf	12,2	;volatile
 12622                           
 12623                           ;LEDs.c: 31: break;
 12624  1418  0008               	return
 12625  1419                     l6203:	
 12626                           ;LEDs.c: 32: case 4:
 12627                           
 12628                           
 12629                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 12630  1419  0021               	movlb	1	; select bank1
 12631  141A  0C22               	rrf	set_leds_top@ledState^(0+128),w
 12632  141B  0027               	movlb	7	; select bank7
 12633  141C  1C03               	skipc
 12634  141D  118C               	bcf	12,3	;volatile
 12635  141E  1803               	skipnc
 12636  141F  158C               	bsf	12,3	;volatile
 12637                           
 12638                           ;LEDs.c: 34: break;
 12639  1420  0008               	return
 12640  1421                     l6205:	
 12641                           ;LEDs.c: 35: case 5:
 12642                           
 12643                           
 12644                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 12645  1421  0021               	movlb	1	; select bank1
 12646  1422  0C22               	rrf	set_leds_top@ledState^(0+128),w
 12647  1423  0027               	movlb	7	; select bank7
 12648  1424  1C03               	skipc
 12649  1425  120C               	bcf	12,4	;volatile
 12650  1426  1803               	skipnc
 12651  1427  160C               	bsf	12,4	;volatile
 12652                           
 12653                           ;LEDs.c: 39: break;
 12654                           
 12655                           ;LEDs.c: 38: case 6:
 12656                           
 12657                           ;LEDs.c: 37: break;
 12658  1428  0008               	return
 12659  1429                     l770:	
 12660                           ;LEDs.c: 40: case 100:
 12661                           
 12662                           
 12663                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 12664  1429  0027               	movlb	7	; select bank7
 12665  142A  140C               	bsf	12,0	;volatile
 12666                           
 12667                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 12668  142B  148C               	bsf	12,1	;volatile
 12669                           
 12670                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 12671  142C  150C               	bsf	12,2	;volatile
 12672                           
 12673                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 12674  142D  158C               	bsf	12,3	;volatile
 12675                           
 12676                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 12677  142E  160C               	bsf	12,4	;volatile
 12678                           
 12679                           ;LEDs.c: 47: }
 12680                           
 12681                           ;LEDs.c: 46: break;
 12682  142F  0008               	return
 12683  1430                     l6209:	
 12684                           
 12685                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12686                           ; Switch size 1, requested type "space"
 12687                           ; Number of cases is 1, Range of values is 0 to 0
 12688                           ; switch strategies available:
 12689                           ; Name         Instructions Cycles
 12690                           ; simple_byte            4     3 (average)
 12691                           ; direct_byte            8     6 (fixed)
 12692                           ; jumptable            260     6 (fixed)
 12693                           ;	Chosen strategy is simple_byte
 12694  1430  0021               	movlb	1	; select bank1
 12695  1431  0821               	movf	(set_leds_top@x+1)^(0+128),w
 12696  1432  3A00               	xorlw	0	; case 0
 12697  1433  1903               	skipnz
 12698  1434  2C36               	goto	l7715
 12699  1435  2C4D               	goto	l771
 12700  1436                     l7715:	
 12701                           
 12702                           ; Switch size 1, requested type "space"
 12703                           ; Number of cases is 7, Range of values is 1 to 100
 12704                           ; switch strategies available:
 12705                           ; Name         Instructions Cycles
 12706                           ; simple_byte           22    12 (average)
 12707                           ; direct_byte          209     9 (fixed)
 12708                           ; jumptable            263     9 (fixed)
 12709                           ;	Chosen strategy is simple_byte
 12710  1436  0820               	movf	set_leds_top@x^(0+128),w
 12711  1437  3A01               	xorlw	1	; case 1
 12712  1438  1903               	skipnz
 12713  1439  2C01               	goto	l6197
 12714  143A  3A03               	xorlw	3	; case 2
 12715  143B  1903               	skipnz
 12716  143C  2C09               	goto	l6199
 12717  143D  3A01               	xorlw	1	; case 3
 12718  143E  1903               	skipnz
 12719  143F  2C11               	goto	l6201
 12720  1440  3A07               	xorlw	7	; case 4
 12721  1441  1903               	skipnz
 12722  1442  2C19               	goto	l6203
 12723  1443  3A01               	xorlw	1	; case 5
 12724  1444  1903               	skipnz
 12725  1445  2C21               	goto	l6205
 12726  1446  3A03               	xorlw	3	; case 6
 12727  1447  1903               	skipnz
 12728  1448  2C4D               	goto	l771
 12729  1449  3A62               	xorlw	98	; case 100
 12730  144A  1903               	skipnz
 12731  144B  2C29               	goto	l770
 12732  144C  2C4D               	goto	l771
 12733  144D                     l771:	
 12734  144D  0008               	return
 12735  144E                     __end_of_set_leds_top:	
 12736                           
 12737                           	psect	text40
 12738  1F0E                     __ptext40:	
 12739 ;; *************** function _set_leds_bottom *****************
 12740 ;; Defined at:
 12741 ;;		line 51 in file "LEDs.c"
 12742 ;; Parameters:    Size  Location     Type
 12743 ;;  x               2    0[BANK1 ] int 
 12744 ;; Auto vars:     Size  Location     Type
 12745 ;;		None
 12746 ;; Return value:  Size  Location     Type
 12747 ;;                  1    wreg      void 
 12748 ;; Registers used:
 12749 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12750 ;; Tracked objects:
 12751 ;;		On entry : 0/0
 12752 ;;		On exit  : 0/0
 12753 ;;		Unchanged: 0/0
 12754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12755 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12758 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12759 ;;Total ram usage:        2 bytes
 12760 ;; Hardware stack levels used:    1
 12761 ;; Hardware stack levels required when called:    3
 12762 ;; This function calls:
 12763 ;;		Nothing
 12764 ;; This function is called by:
 12765 ;;		_ReadSavedSettings
 12766 ;;		_ring_tactiles
 12767 ;;		_solidring_tactiles
 12768 ;;		_read_bottom_tactile
 12769 ;;		_setPresetDisplay
 12770 ;;		_resetRingLEDs
 12771 ;;		_setExpressionDisplay
 12772 ;;		_star_tactiles
 12773 ;; This function uses a non-reentrant model
 12774 ;;
 12775                           
 12776                           
 12777                           ;psect for function _set_leds_bottom
 12778  1F0E                     _set_leds_bottom:	
 12779                           
 12780                           ;LEDs.c: 52: LATDbits.LATD0 = 0;
 12781                           
 12782                           ;incstack = 0
 12783                           ; Regs used in _set_leds_bottom: [wreg-fsr0h+status,2+status,0]
 12784  1F0E  0022               	movlb	2	; select bank2
 12785  1F0F  100F               	bcf	15,0	;volatile
 12786                           
 12787                           ;LEDs.c: 53: LATDbits.LATD1 = 0;
 12788  1F10  108F               	bcf	15,1	;volatile
 12789                           
 12790                           ;LEDs.c: 54: LATDbits.LATD2 = 0;
 12791  1F11  110F               	bcf	15,2	;volatile
 12792                           
 12793                           ;LEDs.c: 55: LATDbits.LATD3 = 0;
 12794  1F12  118F               	bcf	15,3	;volatile
 12795                           
 12796                           ;LEDs.c: 56: LATDbits.LATD4 = 0;
 12797  1F13  120F               	bcf	15,4	;volatile
 12798                           
 12799                           ;LEDs.c: 57: switch (x) {
 12800  1F14  2F2B               	goto	l6225
 12801  1F15                     l775:	
 12802                           ;LEDs.c: 58: case 1:
 12803                           
 12804                           
 12805                           ;LEDs.c: 59: LATDbits.LATD0 = 1;
 12806  1F15  0022               	movlb	2	; select bank2
 12807  1F16  140F               	bsf	15,0	;volatile
 12808                           
 12809                           ;LEDs.c: 60: break;
 12810  1F17  0008               	return
 12811  1F18                     l777:	
 12812                           ;LEDs.c: 61: case 2:
 12813                           
 12814                           
 12815                           ;LEDs.c: 62: LATDbits.LATD1 = 1;
 12816  1F18  0022               	movlb	2	; select bank2
 12817  1F19  148F               	bsf	15,1	;volatile
 12818                           
 12819                           ;LEDs.c: 63: break;
 12820  1F1A  0008               	return
 12821  1F1B                     l778:	
 12822                           ;LEDs.c: 64: case 3:
 12823                           
 12824                           
 12825                           ;LEDs.c: 65: LATDbits.LATD2 = 1;
 12826  1F1B  0022               	movlb	2	; select bank2
 12827  1F1C  150F               	bsf	15,2	;volatile
 12828                           
 12829                           ;LEDs.c: 66: break;
 12830  1F1D  0008               	return
 12831  1F1E                     l779:	
 12832                           ;LEDs.c: 67: case 4:
 12833                           
 12834                           
 12835                           ;LEDs.c: 68: LATDbits.LATD3 = 1;
 12836  1F1E  0022               	movlb	2	; select bank2
 12837  1F1F  158F               	bsf	15,3	;volatile
 12838                           
 12839                           ;LEDs.c: 69: break;
 12840  1F20  0008               	return
 12841  1F21                     l780:	
 12842                           ;LEDs.c: 70: case 5:
 12843                           
 12844                           
 12845                           ;LEDs.c: 71: LATDbits.LATD4 = 1;
 12846  1F21  0022               	movlb	2	; select bank2
 12847  1F22  160F               	bsf	15,4	;volatile
 12848                           
 12849                           ;LEDs.c: 74: break;
 12850                           
 12851                           ;LEDs.c: 73: case 6:
 12852                           
 12853                           ;LEDs.c: 72: break;
 12854  1F23  0008               	return
 12855  1F24                     l782:	
 12856                           ;LEDs.c: 75: case 100:
 12857                           
 12858                           
 12859                           ;LEDs.c: 76: LATDbits.LATD0 = 1;
 12860  1F24  0022               	movlb	2	; select bank2
 12861  1F25  140F               	bsf	15,0	;volatile
 12862                           
 12863                           ;LEDs.c: 77: LATDbits.LATD1 = 1;
 12864  1F26  148F               	bsf	15,1	;volatile
 12865                           
 12866                           ;LEDs.c: 78: LATDbits.LATD2 = 1;
 12867  1F27  150F               	bsf	15,2	;volatile
 12868                           
 12869                           ;LEDs.c: 79: LATDbits.LATD3 = 1;
 12870  1F28  158F               	bsf	15,3	;volatile
 12871                           
 12872                           ;LEDs.c: 80: LATDbits.LATD4 = 1;
 12873  1F29  160F               	bsf	15,4	;volatile
 12874                           
 12875                           ;LEDs.c: 82: }
 12876                           
 12877                           ;LEDs.c: 81: break;
 12878  1F2A  0008               	return
 12879  1F2B                     l6225:	
 12880                           
 12881                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12882                           ; Switch size 1, requested type "space"
 12883                           ; Number of cases is 1, Range of values is 0 to 0
 12884                           ; switch strategies available:
 12885                           ; Name         Instructions Cycles
 12886                           ; simple_byte            4     3 (average)
 12887                           ; direct_byte            8     6 (fixed)
 12888                           ; jumptable            260     6 (fixed)
 12889                           ;	Chosen strategy is simple_byte
 12890  1F2B  0021               	movlb	1	; select bank1
 12891  1F2C  0821               	movf	(set_leds_bottom@x+1)^(0+128),w
 12892  1F2D  3A00               	xorlw	0	; case 0
 12893  1F2E  1903               	skipnz
 12894  1F2F  2F31               	goto	l7717
 12895  1F30  2F48               	goto	l783
 12896  1F31                     l7717:	
 12897                           
 12898                           ; Switch size 1, requested type "space"
 12899                           ; Number of cases is 7, Range of values is 1 to 100
 12900                           ; switch strategies available:
 12901                           ; Name         Instructions Cycles
 12902                           ; simple_byte           22    12 (average)
 12903                           ; direct_byte          209     9 (fixed)
 12904                           ; jumptable            263     9 (fixed)
 12905                           ;	Chosen strategy is simple_byte
 12906  1F31  0820               	movf	set_leds_bottom@x^(0+128),w
 12907  1F32  3A01               	xorlw	1	; case 1
 12908  1F33  1903               	skipnz
 12909  1F34  2F15               	goto	l775
 12910  1F35  3A03               	xorlw	3	; case 2
 12911  1F36  1903               	skipnz
 12912  1F37  2F18               	goto	l777
 12913  1F38  3A01               	xorlw	1	; case 3
 12914  1F39  1903               	skipnz
 12915  1F3A  2F1B               	goto	l778
 12916  1F3B  3A07               	xorlw	7	; case 4
 12917  1F3C  1903               	skipnz
 12918  1F3D  2F1E               	goto	l779
 12919  1F3E  3A01               	xorlw	1	; case 5
 12920  1F3F  1903               	skipnz
 12921  1F40  2F21               	goto	l780
 12922  1F41  3A03               	xorlw	3	; case 6
 12923  1F42  1903               	skipnz
 12924  1F43  2F48               	goto	l783
 12925  1F44  3A62               	xorlw	98	; case 100
 12926  1F45  1903               	skipnz
 12927  1F46  2F24               	goto	l782
 12928  1F47  2F48               	goto	l783
 12929  1F48                     l783:	
 12930  1F48  0008               	return
 12931  1F49                     __end_of_set_leds_bottom:	
 12932                           
 12933                           	psect	text41
 12934  1D11                     __ptext41:	
 12935 ;; *************** function _FLASH_ReadWord *****************
 12936 ;; Defined at:
 12937 ;;		line 58 in file "memory.c"
 12938 ;; Parameters:    Size  Location     Type
 12939 ;;  flashAddr       2    0[BANK1 ] unsigned int 
 12940 ;; Auto vars:     Size  Location     Type
 12941 ;;  GIEBitValue     1    2[BANK1 ] unsigned char 
 12942 ;; Return value:  Size  Location     Type
 12943 ;;                  2    0[BANK1 ] unsigned int 
 12944 ;; Registers used:
 12945 ;;		wreg, status,2, status,0
 12946 ;; Tracked objects:
 12947 ;;		On entry : 0/0
 12948 ;;		On exit  : 0/0
 12949 ;;		Unchanged: 0/0
 12950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12951 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12952 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12954 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12955 ;;Total ram usage:        3 bytes
 12956 ;; Hardware stack levels used:    1
 12957 ;; Hardware stack levels required when called:    3
 12958 ;; This function calls:
 12959 ;;		Nothing
 12960 ;; This function is called by:
 12961 ;;		_ReadSavedSettings
 12962 ;;		_FLASH_WriteWord
 12963 ;; This function uses a non-reentrant model
 12964 ;;
 12965                           
 12966                           
 12967                           ;psect for function _FLASH_ReadWord
 12968  1D11                     _FLASH_ReadWord:	
 12969                           
 12970                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
 12971                           
 12972                           ;incstack = 0
 12973                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
 12974  1D11  3000               	movlw	0
 12975  1D12  1B8B               	btfsc	11,7	;volatile
 12976  1D13  3001               	movlw	1
 12977  1D14  0021               	movlb	1	; select bank1
 12978  1D15  00A2               	movwf	FLASH_ReadWord@GIEBitValue^(0+128)
 12979                           
 12980                           ;memory.c: 61: INTCONbits.GIE = 0;
 12981  1D16  138B               	bcf	11,7	;volatile
 12982                           
 12983                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
 12984  1D17  0820               	movf	FLASH_ReadWord@flashAddr^(0+128),w
 12985  1D18  0023               	movlb	3	; select bank3
 12986  1D19  0091               	movwf	17	;volatile
 12987                           
 12988                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
 12989  1D1A  0021               	movlb	1	; select bank1
 12990  1D1B  0821               	movf	(FLASH_ReadWord@flashAddr+1)^(0+128),w
 12991  1D1C  0023               	movlb	3	; select bank3
 12992  1D1D  0092               	movwf	18	;volatile
 12993                           
 12994                           ;memory.c: 65: PMCON1bits.CFGS = 0;
 12995  1D1E  1315               	bcf	21,6	;volatile
 12996                           
 12997                           ;memory.c: 66: PMCON1bits.RD = 1;
 12998  1D1F  1415               	bsf	21,0	;volatile
 12999                           
 13000                           ;memory.c: 67: __nop();
 13001  1D20  0000               	nop
 13002                           
 13003                           ;memory.c: 68: __nop();
 13004  1D21  0000               	nop
 13005                           
 13006                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
 13007  1D22  0021               	movlb	1	; select bank1
 13008  1D23  0C22               	rrf	FLASH_ReadWord@GIEBitValue^(0+128),w
 13009  1D24  1C03               	skipc
 13010  1D25  138B               	bcf	11,7	;volatile
 13011  1D26  1803               	skipnc
 13012  1D27  178B               	bsf	11,7	;volatile
 13013                           
 13014                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
 13015  1D28  0023               	movlb	3	; select bank3
 13016  1D29  0814               	movf	20,w	;volatile
 13017  1D2A  0021               	movlb	1	; select bank1
 13018  1D2B  00A1               	movwf	(?_FLASH_ReadWord+1)^(0+128)
 13019  1D2C  0023               	movlb	3	; select bank3
 13020  1D2D  0813               	movf	19,w	;volatile
 13021  1D2E  0021               	movlb	1	; select bank1
 13022  1D2F  00A0               	movwf	?_FLASH_ReadWord^(0+128)
 13023  1D30  0008               	return
 13024  1D31                     __end_of_FLASH_ReadWord:	
 13025                           
 13026                           	psect	text42
 13027  1D53                     __ptext42:	
 13028 ;; *************** function _InitializeTaps *****************
 13029 ;; Defined at:
 13030 ;;		line 193 in file "user.c"
 13031 ;; Parameters:    Size  Location     Type
 13032 ;;		None
 13033 ;; Auto vars:     Size  Location     Type
 13034 ;;  itap            2    1[BANK1 ] int 
 13035 ;; Return value:  Size  Location     Type
 13036 ;;                  1    wreg      void 
 13037 ;; Registers used:
 13038 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13039 ;; Tracked objects:
 13040 ;;		On entry : 0/0
 13041 ;;		On exit  : 0/0
 13042 ;;		Unchanged: 0/0
 13043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13045 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13046 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13047 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13048 ;;Total ram usage:        3 bytes
 13049 ;; Hardware stack levels used:    1
 13050 ;; Hardware stack levels required when called:    3
 13051 ;; This function calls:
 13052 ;;		Nothing
 13053 ;; This function is called by:
 13054 ;;		_main
 13055 ;; This function uses a non-reentrant model
 13056 ;;
 13057                           
 13058                           
 13059                           ;psect for function _InitializeTaps
 13060  1D53                     _InitializeTaps:	
 13061                           
 13062                           ;user.c: 194: for (int itap = 0; itap < 12; itap++) {
 13063                           
 13064                           ;incstack = 0
 13065                           ; Regs used in _InitializeTaps: [wreg+fsr1l+fsr1h+status,2+status,0]
 13066  1D53  0021               	movlb	1	; select bank1
 13067  1D54  01A1               	clrf	InitializeTaps@itap^(0+128)
 13068  1D55  01A2               	clrf	(InitializeTaps@itap+1)^(0+128)
 13069  1D56                     L14:	
 13070  1D56  0822               	movf	(InitializeTaps@itap+1)^(0+128),w
 13071  1D57  3A80               	xorlw	128
 13072  1D58  00A0               	movwf	??_InitializeTaps^(0+128)
 13073  1D59  3080               	movlw	128
 13074  1D5A  0220               	subwf	??_InitializeTaps^(0+128),w
 13075  1D5B  1D03               	skipz
 13076  1D5C  2D5F               	goto	u7185
 13077  1D5D  300C               	movlw	12
 13078  1D5E  0221               	subwf	InitializeTaps@itap^(0+128),w
 13079  1D5F                     u7185:	
 13080  1D5F  1803               	btfsc	3,0
 13081  1D60  0008               	return
 13082                           
 13083                           ;user.c: 195: tap[itap] = 0;
 13084  1D61  0021               	movlb	1	; select bank1
 13085  1D62  0821               	movf	InitializeTaps@itap^(0+128),w
 13086  1D63  00A0               	movwf	??_InitializeTaps^(0+128)
 13087  1D64  3001               	movlw	1
 13088  1D65                     u7195:	
 13089  1D65  35A0               	lslf	??_InitializeTaps^(0+128),f
 13090  1D66  3EFF               	addlw	-1
 13091  1D67  1D03               	skipz
 13092  1D68  2D65               	goto	u7195
 13093  1D69  3520               	lslf	??_InitializeTaps^(0+128),w
 13094  1D6A  3EA0               	addlw	(low (_tap| (0+512)))& (0+255)
 13095  1D6B  0086               	movwf	6
 13096  1D6C  3002               	movlw	2	; select bank5/6
 13097  1D6D  0087               	movwf	7
 13098  1D6E  3000               	movlw	0
 13099  1D6F  3FC0               	movwi [0]fsr1
 13100  1D70  3000               	movlw	0
 13101  1D71  3FC1               	movwi [1]fsr1
 13102  1D72  3FC2               	movwi [2]fsr1
 13103  1D73  3FC3               	movwi [3]fsr1
 13104  1D74  3001               	movlw	1
 13105  1D75  07A1               	addwf	InitializeTaps@itap^(0+128),f
 13106  1D76  3000               	movlw	0
 13107  1D77  3DA2               	addwfc	(InitializeTaps@itap+1)^(0+128),f
 13108  1D78  2D56               	goto	L14
 13109  1D79                     __end_of_InitializeTaps:	
 13110                           
 13111                           	psect	text43
 13112  1DD0                     __ptext43:	
 13113 ;; *************** function _InitApp *****************
 13114 ;; Defined at:
 13115 ;;		line 23 in file "user.c"
 13116 ;; Parameters:    Size  Location     Type
 13117 ;;		None
 13118 ;; Auto vars:     Size  Location     Type
 13119 ;;		None
 13120 ;; Return value:  Size  Location     Type
 13121 ;;                  1    wreg      void 
 13122 ;; Registers used:
 13123 ;;		wreg, status,2, status,0, pclath, cstack
 13124 ;; Tracked objects:
 13125 ;;		On entry : 0/0
 13126 ;;		On exit  : 0/0
 13127 ;;		Unchanged: 0/0
 13128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13132 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13133 ;;Total ram usage:        0 bytes
 13134 ;; Hardware stack levels used:    1
 13135 ;; Hardware stack levels required when called:    5
 13136 ;; This function calls:
 13137 ;;		_init_adc
 13138 ;;		_init_pwm
 13139 ;; This function is called by:
 13140 ;;		_main
 13141 ;; This function uses a non-reentrant model
 13142 ;;
 13143                           
 13144                           
 13145                           ;psect for function _InitApp
 13146  1DD0                     _InitApp:	
 13147                           
 13148                           ;user.c: 24: TRISBbits.TRISB0 = 0;
 13149                           
 13150                           ;incstack = 0
 13151                           ; Regs used in _InitApp: [wreg+status,2+status,0+pclath+cstack]
 13152  1DD0  0021               	movlb	1	; select bank1
 13153  1DD1  100D               	bcf	13,0	;volatile
 13154                           
 13155                           ;user.c: 25: TRISBbits.TRISB1 = 0;
 13156  1DD2  108D               	bcf	13,1	;volatile
 13157                           
 13158                           ;user.c: 26: TRISBbits.TRISB2 = 0;
 13159  1DD3  110D               	bcf	13,2	;volatile
 13160                           
 13161                           ;user.c: 27: TRISBbits.TRISB3 = 0;
 13162  1DD4  118D               	bcf	13,3	;volatile
 13163                           
 13164                           ;user.c: 28: TRISBbits.TRISB4 = 0;
 13165  1DD5  120D               	bcf	13,4	;volatile
 13166                           
 13167                           ;user.c: 29: TRISBbits.TRISB5 = 0;
 13168  1DD6  128D               	bcf	13,5	;volatile
 13169                           
 13170                           ;user.c: 31: TRISCbits.TRISC0 = 1;
 13171  1DD7  140E               	bsf	14,0	;volatile
 13172                           
 13173                           ;user.c: 32: TRISCbits.TRISC4 = 0;
 13174  1DD8  120E               	bcf	14,4	;volatile
 13175                           
 13176                           ;user.c: 33: TRISCbits.TRISC5 = 0;
 13177  1DD9  128E               	bcf	14,5	;volatile
 13178                           
 13179                           ;user.c: 36: TRISDbits.TRISD0 = 0;
 13180  1DDA  100F               	bcf	15,0	;volatile
 13181                           
 13182                           ;user.c: 37: TRISDbits.TRISD1 = 0;
 13183  1DDB  108F               	bcf	15,1	;volatile
 13184                           
 13185                           ;user.c: 38: TRISDbits.TRISD2 = 0;
 13186  1DDC  110F               	bcf	15,2	;volatile
 13187                           
 13188                           ;user.c: 39: TRISDbits.TRISD3 = 0;
 13189  1DDD  118F               	bcf	15,3	;volatile
 13190                           
 13191                           ;user.c: 40: TRISDbits.TRISD4 = 0;
 13192  1DDE  120F               	bcf	15,4	;volatile
 13193                           
 13194                           ;user.c: 41: TRISDbits.TRISD5 = 1;
 13195  1DDF  168F               	bsf	15,5	;volatile
 13196                           
 13197                           ;user.c: 42: TRISDbits.TRISD6 = 1;
 13198  1DE0  170F               	bsf	15,6	;volatile
 13199                           
 13200                           ;user.c: 43: TRISDbits.TRISD7 = 1;
 13201  1DE1  178F               	bsf	15,7	;volatile
 13202                           
 13203                           ;user.c: 49: TRISEbits.TRISE0 = 1;
 13204  1DE2  1410               	bsf	16,0	;volatile
 13205                           
 13206                           ;user.c: 50: TRISEbits.TRISE1 = 1;
 13207  1DE3  1490               	bsf	16,1	;volatile
 13208                           
 13209                           ;user.c: 51: ANSELEbits.ANSE0 = 0;
 13210  1DE4  0023               	movlb	3	; select bank3
 13211  1DE5  1010               	bcf	16,0	;volatile
 13212                           
 13213                           ;user.c: 52: ANSELEbits.ANSE1 = 0;
 13214  1DE6  1090               	bcf	16,1	;volatile
 13215                           
 13216                           ;user.c: 53: PORTEbits.RE0 = 0;
 13217  1DE7  0020               	movlb	0	; select bank0
 13218  1DE8  1010               	bcf	16,0	;volatile
 13219                           
 13220                           ;user.c: 54: PORTEbits.RE1 = 0;
 13221  1DE9  1090               	bcf	16,1	;volatile
 13222                           
 13223                           ;user.c: 56: TRISFbits.TRISF0 = 0;
 13224  1DEA  0026               	movlb	6	; select bank6
 13225  1DEB  100C               	bcf	12,0	;volatile
 13226                           
 13227                           ;user.c: 57: TRISFbits.TRISF1 = 0;
 13228  1DEC  108C               	bcf	12,1	;volatile
 13229                           
 13230                           ;user.c: 58: TRISFbits.TRISF2 = 0;
 13231  1DED  110C               	bcf	12,2	;volatile
 13232                           
 13233                           ;user.c: 59: TRISFbits.TRISF3 = 0;
 13234  1DEE  118C               	bcf	12,3	;volatile
 13235                           
 13236                           ;user.c: 60: TRISFbits.TRISF4 = 0;
 13237  1DEF  120C               	bcf	12,4	;volatile
 13238                           
 13239                           ;user.c: 61: TRISFbits.TRISF5 = 0;
 13240  1DF0  128C               	bcf	12,5	;volatile
 13241                           
 13242                           ;user.c: 62: TRISFbits.TRISF6 = 1;
 13243  1DF1  170C               	bsf	12,6	;volatile
 13244                           
 13245                           ;user.c: 63: ANSELFbits.ANSF6 = 0;
 13246  1DF2  0028               	movlb	8	; select bank8
 13247  1DF3  130C               	bcf	12,6	;volatile
 13248                           
 13249                           ;user.c: 65: TRISGbits.TRISG1 = 0;
 13250  1DF4  0026               	movlb	6	; select bank6
 13251  1DF5  108D               	bcf	13,1	;volatile
 13252                           
 13253                           ;user.c: 66: TRISGbits.TRISG2 = 0;
 13254  1DF6  110D               	bcf	13,2	;volatile
 13255                           
 13256                           ;user.c: 68: init_adc();
 13257  1DF7  319C  2437  319D   	fcall	_init_adc
 13258                           
 13259                           ;user.c: 69: init_pwm();
 13260  1DFA  3191  210F         	fcall	_init_pwm
 13261                           
 13262                           ;user.c: 71: INTCONbits.GIE = 0b1;
 13263  1DFC  178B               	bsf	11,7	;volatile
 13264                           
 13265                           ;user.c: 72: INTCONbits.TMR0IE = 0b1;
 13266  1DFD  168B               	bsf	11,5	;volatile
 13267                           
 13268                           ;user.c: 73: INTCONbits.TMR0IF = 0b0;
 13269  1DFE  110B               	bcf	11,2	;volatile
 13270  1DFF  0008               	return
 13271  1E00                     __end_of_InitApp:	
 13272                           
 13273                           	psect	text44
 13274  110F                     __ptext44:	
 13275 ;; *************** function _init_pwm *****************
 13276 ;; Defined at:
 13277 ;;		line 129 in file "user.c"
 13278 ;; Parameters:    Size  Location     Type
 13279 ;;		None
 13280 ;; Auto vars:     Size  Location     Type
 13281 ;;		None
 13282 ;; Return value:  Size  Location     Type
 13283 ;;                  1    wreg      void 
 13284 ;; Registers used:
 13285 ;;		wreg, status,2, status,0, pclath, cstack
 13286 ;; Tracked objects:
 13287 ;;		On entry : 0/0
 13288 ;;		On exit  : 0/0
 13289 ;;		Unchanged: 0/0
 13290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13292 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13294 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13295 ;;Total ram usage:        0 bytes
 13296 ;; Hardware stack levels used:    1
 13297 ;; Hardware stack levels required when called:    4
 13298 ;; This function calls:
 13299 ;;		_init_timer0
 13300 ;;		_init_timer2
 13301 ;; This function is called by:
 13302 ;;		_InitApp
 13303 ;; This function uses a non-reentrant model
 13304 ;;
 13305                           
 13306                           
 13307                           ;psect for function _init_pwm
 13308  110F                     _init_pwm:	
 13309                           
 13310                           ;user.c: 130: APFCONbits.CCP2SEL = 0;
 13311                           
 13312                           ;incstack = 0
 13313                           ; Regs used in _init_pwm: [wreg+status,2+status,0+pclath+cstack]
 13314  110F  0022               	movlb	2	; select bank2
 13315  1110  101D               	bcf	29,0	;volatile
 13316                           
 13317                           ;user.c: 131: TRISCbits.TRISC2 = 0;
 13318  1111  0021               	movlb	1	; select bank1
 13319  1112  110E               	bcf	14,2	;volatile
 13320                           
 13321                           ;user.c: 132: TRISCbits.TRISC1 = 0;
 13322  1113  108E               	bcf	14,1	;volatile
 13323                           
 13324                           ;user.c: 133: TRISGbits.TRISG0 = 0;
 13325  1114  0026               	movlb	6	; select bank6
 13326  1115  100D               	bcf	13,0	;volatile
 13327                           
 13328                           ;user.c: 134: TRISGbits.TRISG3 = 0;
 13329  1116  118D               	bcf	13,3	;volatile
 13330                           
 13331                           ;user.c: 135: TRISGbits.TRISG4 = 0;
 13332  1117  120D               	bcf	13,4	;volatile
 13333                           
 13334                           ;user.c: 136: TRISEbits.TRISE6 = 0;
 13335  1118  0021               	movlb	1	; select bank1
 13336  1119  1310               	bcf	16,6	;volatile
 13337                           
 13338                           ;user.c: 137: TRISEbits.TRISE5 = 0;
 13339  111A  1290               	bcf	16,5	;volatile
 13340                           
 13341                           ;user.c: 138: TRISEbits.TRISE4 = 0;
 13342  111B  1210               	bcf	16,4	;volatile
 13343                           
 13344                           ;user.c: 139: TRISEbits.TRISE3 = 0;
 13345  111C  1190               	bcf	16,3	;volatile
 13346                           
 13347                           ;user.c: 140: TRISEbits.TRISE2 = 0;
 13348  111D  1110               	bcf	16,2	;volatile
 13349                           
 13350                           ;user.c: 141: CCP1CONbits.CCP1M = 0b1111;
 13351  111E  300F               	movlw	15
 13352  111F  0025               	movlb	5	; select bank5
 13353  1120  0493               	iorwf	19,f	;volatile
 13354                           
 13355                           ;user.c: 142: CCP2CONbits.CCP2M = 0b1111;
 13356  1121  300F               	movlw	15
 13357  1122  049A               	iorwf	26,f	;volatile
 13358                           
 13359                           ;user.c: 143: CCP3CONbits.CCP3M = 0b1111;
 13360  1123  300F               	movlw	15
 13361  1124  0026               	movlb	6	; select bank6
 13362  1125  0493               	iorwf	19,f	;volatile
 13363                           
 13364                           ;user.c: 144: CCP4CONbits.CCP4M = 0b1111;
 13365  1126  300F               	movlw	15
 13366  1127  049A               	iorwf	26,f	;volatile
 13367                           
 13368                           ;user.c: 145: CCP5CONbits.CCP5M = 0b1111;
 13369  1128  300F               	movlw	15
 13370  1129  049E               	iorwf	30,f	;volatile
 13371                           
 13372                           ;user.c: 146: CCP6CONbits.CCP6M = 0b1111;
 13373  112A  300F               	movlw	15
 13374  112B  002C               	movlb	12	; select bank12
 13375  112C  0493               	iorwf	19,f	;volatile
 13376                           
 13377                           ;user.c: 147: CCP7CONbits.CCP7M = 0b1111;
 13378  112D  300F               	movlw	15
 13379  112E  0496               	iorwf	22,f	;volatile
 13380                           
 13381                           ;user.c: 148: CCP8CONbits.CCP8M = 0b1111;
 13382  112F  300F               	movlw	15
 13383  1130  0499               	iorwf	25,f	;volatile
 13384                           
 13385                           ;user.c: 149: CCP9CONbits.CCP9M = 0b1111;
 13386  1131  300F               	movlw	15
 13387  1132  049C               	iorwf	28,f	;volatile
 13388                           
 13389                           ;user.c: 150: CCP10CONbits.CCP10M = 0b1111;
 13390  1133  300F               	movlw	15
 13391  1134  049F               	iorwf	31,f	;volatile
 13392                           
 13393                           ;user.c: 151: CCPTMRS0 = 0b00000000;
 13394  1135  0025               	movlb	5	; select bank5
 13395  1136  019D               	clrf	29	;volatile
 13396                           
 13397                           ;user.c: 152: CCPTMRS1 = 0b00000000;
 13398  1137  019E               	clrf	30	;volatile
 13399                           
 13400                           ;user.c: 153: CCPTMRS2 = 0b00000000;
 13401  1138  019F               	clrf	31	;volatile
 13402                           
 13403                           ;user.c: 154: CCPR1 = 50;
 13404  1139  3000               	movlw	0
 13405  113A  0092               	movwf	18	;volatile
 13406  113B  3032               	movlw	50
 13407  113C  0091               	movwf	17	;volatile
 13408                           
 13409                           ;user.c: 155: CCPR2 = 100;
 13410  113D  3000               	movlw	0
 13411  113E  0099               	movwf	25	;volatile
 13412  113F  3064               	movlw	100
 13413  1140  0098               	movwf	24	;volatile
 13414                           
 13415                           ;user.c: 156: CCPR3 = 150;
 13416  1141  3000               	movlw	0
 13417  1142  0026               	movlb	6	; select bank6
 13418  1143  0092               	movwf	18	;volatile
 13419  1144  3096               	movlw	150
 13420  1145  0091               	movwf	17	;volatile
 13421                           
 13422                           ;user.c: 157: CCPR4 = 200;
 13423  1146  3000               	movlw	0
 13424  1147  0099               	movwf	25	;volatile
 13425  1148  30C8               	movlw	200
 13426  1149  0098               	movwf	24	;volatile
 13427                           
 13428                           ;user.c: 158: init_timer2();
 13429  114A  319C  2425  3191   	fcall	_init_timer2
 13430                           
 13431                           ;user.c: 159: init_timer0();
 13432  114D  319C  241E         	fcall	_init_timer0
 13433  114F  0008               	return
 13434  1150                     __end_of_init_pwm:	
 13435                           
 13436                           	psect	text45
 13437  1C25                     __ptext45:	
 13438 ;; *************** function _init_timer2 *****************
 13439 ;; Defined at:
 13440 ;;		line 162 in file "user.c"
 13441 ;; Parameters:    Size  Location     Type
 13442 ;;		None
 13443 ;; Auto vars:     Size  Location     Type
 13444 ;;		None
 13445 ;; Return value:  Size  Location     Type
 13446 ;;                  1    wreg      void 
 13447 ;; Registers used:
 13448 ;;		wreg, status,2, status,0
 13449 ;; Tracked objects:
 13450 ;;		On entry : 0/0
 13451 ;;		On exit  : 0/0
 13452 ;;		Unchanged: 0/0
 13453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13455 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13457 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13458 ;;Total ram usage:        0 bytes
 13459 ;; Hardware stack levels used:    1
 13460 ;; Hardware stack levels required when called:    3
 13461 ;; This function calls:
 13462 ;;		Nothing
 13463 ;; This function is called by:
 13464 ;;		_init_pwm
 13465 ;; This function uses a non-reentrant model
 13466 ;;
 13467                           
 13468                           
 13469                           ;psect for function _init_timer2
 13470  1C25                     _init_timer2:	
 13471                           
 13472                           ;user.c: 163: T2CONbits.T2OUTPS = 0b0000;
 13473                           
 13474                           ;incstack = 0
 13475                           ; Regs used in _init_timer2: [wreg+status,2+status,0]
 13476  1C25  3087               	movlw	-121
 13477  1C26  0020               	movlb	0	; select bank0
 13478  1C27  059C               	andwf	28,f	;volatile
 13479                           
 13480                           ;user.c: 164: T2CONbits.T2CKPS = 0b00;
 13481  1C28  30FC               	movlw	-4
 13482  1C29  059C               	andwf	28,f	;volatile
 13483                           
 13484                           ;user.c: 165: PR2 = 0xFF;
 13485  1C2A  30FF               	movlw	255
 13486  1C2B  009B               	movwf	27	;volatile
 13487                           
 13488                           ;user.c: 166: T2CONbits.TMR2ON = 1;
 13489  1C2C  151C               	bsf	28,2	;volatile
 13490  1C2D  0008               	return
 13491  1C2E                     __end_of_init_timer2:	
 13492                           
 13493                           	psect	text46
 13494  1C1E                     __ptext46:	
 13495 ;; *************** function _init_timer0 *****************
 13496 ;; Defined at:
 13497 ;;		line 169 in file "user.c"
 13498 ;; Parameters:    Size  Location     Type
 13499 ;;		None
 13500 ;; Auto vars:     Size  Location     Type
 13501 ;;		None
 13502 ;; Return value:  Size  Location     Type
 13503 ;;                  1    wreg      void 
 13504 ;; Registers used:
 13505 ;;		None
 13506 ;; Tracked objects:
 13507 ;;		On entry : 0/0
 13508 ;;		On exit  : 0/0
 13509 ;;		Unchanged: 0/0
 13510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13514 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13515 ;;Total ram usage:        0 bytes
 13516 ;; Hardware stack levels used:    1
 13517 ;; Hardware stack levels required when called:    3
 13518 ;; This function calls:
 13519 ;;		Nothing
 13520 ;; This function is called by:
 13521 ;;		_init_pwm
 13522 ;; This function uses a non-reentrant model
 13523 ;;
 13524                           
 13525                           
 13526                           ;psect for function _init_timer0
 13527  1C1E                     _init_timer0:	
 13528                           
 13529                           ;user.c: 170: OPTION_REGbits.TMR0CS = 0b0;
 13530                           
 13531                           ;incstack = 0
 13532                           ; Regs used in _init_timer0: []
 13533  1C1E  0021               	movlb	1	; select bank1
 13534  1C1F  1295               	bcf	21,5	;volatile
 13535                           
 13536                           ;user.c: 171: OPTION_REGbits.PSA = 0b0;
 13537  1C20  1195               	bcf	21,3	;volatile
 13538                           
 13539                           ;user.c: 172: OPTION_REGbits.PS0 = 0b0;
 13540  1C21  1015               	bcf	21,0	;volatile
 13541                           
 13542                           ;user.c: 173: OPTION_REGbits.PS1 = 0b1;
 13543  1C22  1495               	bsf	21,1	;volatile
 13544                           
 13545                           ;user.c: 174: OPTION_REGbits.PS2 = 0b0;
 13546  1C23  1115               	bcf	21,2	;volatile
 13547  1C24  0008               	return
 13548  1C25                     __end_of_init_timer0:	
 13549                           
 13550                           	psect	text47
 13551  1C37                     __ptext47:	
 13552 ;; *************** function _init_adc *****************
 13553 ;; Defined at:
 13554 ;;		line 115 in file "user.c"
 13555 ;; Parameters:    Size  Location     Type
 13556 ;;		None
 13557 ;; Auto vars:     Size  Location     Type
 13558 ;;		None
 13559 ;; Return value:  Size  Location     Type
 13560 ;;                  1    wreg      void 
 13561 ;; Registers used:
 13562 ;;		wreg, status,2, status,0
 13563 ;; Tracked objects:
 13564 ;;		On entry : 0/0
 13565 ;;		On exit  : 0/0
 13566 ;;		Unchanged: 0/0
 13567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13571 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13572 ;;Total ram usage:        0 bytes
 13573 ;; Hardware stack levels used:    1
 13574 ;; Hardware stack levels required when called:    3
 13575 ;; This function calls:
 13576 ;;		Nothing
 13577 ;; This function is called by:
 13578 ;;		_InitApp
 13579 ;; This function uses a non-reentrant model
 13580 ;;
 13581                           
 13582                           
 13583                           ;psect for function _init_adc
 13584  1C37                     _init_adc:	
 13585                           
 13586                           ;user.c: 116: ADCON1bits.ADFM = 0b1;
 13587                           
 13588                           ;incstack = 0
 13589                           ; Regs used in _init_adc: [wreg+status,2+status,0]
 13590  1C37  0021               	movlb	1	; select bank1
 13591  1C38  179E               	bsf	30,7	;volatile
 13592                           
 13593                           ;user.c: 117: ADCON1bits.ADCS = 0b110;
 13594  1C39  081E               	movf	30,w	;volatile
 13595  1C3A  398F               	andlw	-113
 13596  1C3B  3860               	iorlw	96
 13597  1C3C  009E               	movwf	30	;volatile
 13598                           
 13599                           ;user.c: 118: ADCON1bits.ADPREF = 0b00;
 13600  1C3D  30FC               	movlw	-4
 13601  1C3E  059E               	andwf	30,f	;volatile
 13602                           
 13603                           ;user.c: 119: ADCON0bits.ADON = 0b1;
 13604  1C3F  141D               	bsf	29,0	;volatile
 13605  1C40  0008               	return
 13606  1C41                     __end_of_init_adc:	
 13607                           
 13608                           	psect	text48
 13609  1C16                     __ptext48:	
 13610 ;; *************** function _ConfigureOscillator *****************
 13611 ;; Defined at:
 13612 ;;		line 18 in file "system.c"
 13613 ;; Parameters:    Size  Location     Type
 13614 ;;		None
 13615 ;; Auto vars:     Size  Location     Type
 13616 ;;		None
 13617 ;; Return value:  Size  Location     Type
 13618 ;;                  1    wreg      void 
 13619 ;; Registers used:
 13620 ;;		wreg, status,2, status,0
 13621 ;; Tracked objects:
 13622 ;;		On entry : 0/0
 13623 ;;		On exit  : 0/0
 13624 ;;		Unchanged: 0/0
 13625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13629 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13630 ;;Total ram usage:        0 bytes
 13631 ;; Hardware stack levels used:    1
 13632 ;; Hardware stack levels required when called:    3
 13633 ;; This function calls:
 13634 ;;		Nothing
 13635 ;; This function is called by:
 13636 ;;		_main
 13637 ;; This function uses a non-reentrant model
 13638 ;;
 13639                           
 13640                           
 13641                           ;psect for function _ConfigureOscillator
 13642  1C16                     _ConfigureOscillator:	
 13643                           
 13644                           ;system.c: 20: OSCCONbits.SCS = 0b00;
 13645                           
 13646                           ;incstack = 0
 13647                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
 13648  1C16  30FC               	movlw	-4
 13649  1C17  0021               	movlb	1	; select bank1
 13650  1C18  0599               	andwf	25,f	;volatile
 13651  1C19  0008               	return
 13652  1C1A                     __end_of_ConfigureOscillator:	
 13653                           
 13654                           	psect	intentry
 13655  0004                     __pintentry:	
 13656 ;; *************** function _isr *****************
 13657 ;; Defined at:
 13658 ;;		line 27 in file "interrupts.c"
 13659 ;; Parameters:    Size  Location     Type
 13660 ;;		None
 13661 ;; Auto vars:     Size  Location     Type
 13662 ;;  tmpSubDelay     2   35[BANK0 ] int 
 13663 ;; Return value:  Size  Location     Type
 13664 ;;                  1    wreg      void 
 13665 ;; Registers used:
 13666 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13667 ;; Tracked objects:
 13668 ;;		On entry : 0/0
 13669 ;;		On exit  : 0/0
 13670 ;;		Unchanged: 0/0
 13671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13673 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13674 ;;      Temps:          0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13675 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13676 ;;Total ram usage:       11 bytes
 13677 ;; Hardware stack levels used:    1
 13678 ;; Hardware stack levels required when called:    2
 13679 ;; This function calls:
 13680 ;;		___awdiv
 13681 ;;		_modulation
 13682 ;;		i1_set_leds_top
 13683 ;; This function is called by:
 13684 ;;		Interrupt level 1
 13685 ;; This function uses a non-reentrant model
 13686 ;;
 13687                           
 13688  0004                     _isr:	
 13689                           
 13690                           ;incstack = 0
 13691                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13692  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 13693  0005  3180               	pagesel	$
 13694  0006  0020               	movlb	0	; select bank0
 13695  0007  087F               	movf	127,w
 13696  0008  00C2               	movwf	??_isr+8
 13697                           
 13698                           ;interrupts.c: 28: int tmpSubDelay;
 13699                           ;interrupts.c: 30: extern volatile long timer;
 13700                           ;interrupts.c: 31: extern volatile long sub_timer;
 13701                           ;interrupts.c: 32: extern volatile long tap_timer;
 13702                           ;interrupts.c: 33: extern signed int adjusted_pot_value;
 13703                           ;interrupts.c: 34: extern int mod_delay_time;
 13704                           ;interrupts.c: 36: extern volatile long baseline_delay_time;
 13705                           ;interrupts.c: 38: extern int top_push_state;
 13706                           ;interrupts.c: 39: extern uint8_t feedback_start;
 13707                           ;interrupts.c: 40: extern volatile long mod_timer;
 13708                           ;interrupts.c: 41: extern volatile long delay_time;
 13709  0009  1D0B               	btfss	11,2	;volatile
 13710  000A  291E               	goto	i1l139
 13711                           
 13712                           ;interrupts.c: 45: tmpSubDelay = delay_time;
 13713  000B  084A               	movf	_delay_time+1,w	;volatile
 13714  000C  00C4               	movwf	isr@tmpSubDelay+1
 13715  000D  0849               	movf	_delay_time,w	;volatile
 13716  000E  00C3               	movwf	isr@tmpSubDelay
 13717                           
 13718                           ;interrupts.c: 46: timer = timer + 1;
 13719  000F  3001               	movlw	1
 13720  0010  00BA               	movwf	??_isr
 13721  0011  3000               	movlw	0
 13722  0012  00BB               	movwf	??_isr+1
 13723  0013  3000               	movlw	0
 13724  0014  00BC               	movwf	??_isr+2
 13725  0015  3000               	movlw	0
 13726  0016  00BD               	movwf	??_isr+3
 13727  0017  0860               	movf	_timer,w	;volatile
 13728  0018  07BA               	addwf	??_isr,f
 13729  0019  0861               	movf	_timer+1,w	;volatile
 13730  001A  3DBB               	addwfc	??_isr+1,f
 13731  001B  0862               	movf	_timer+2,w	;volatile
 13732  001C  3DBC               	addwfc	??_isr+2,f
 13733  001D  0863               	movf	_timer+3,w	;volatile
 13734  001E  3DBD               	addwfc	??_isr+3,f
 13735  001F  083D               	movf	??_isr+3,w
 13736  0020  00E3               	movwf	_timer+3	;volatile
 13737  0021  083C               	movf	??_isr+2,w
 13738  0022  00E2               	movwf	_timer+2	;volatile
 13739  0023  083B               	movf	??_isr+1,w
 13740  0024  00E1               	movwf	_timer+1	;volatile
 13741  0025  083A               	movf	??_isr,w
 13742  0026  00E0               	movwf	_timer	;volatile
 13743                           
 13744                           ;interrupts.c: 47: sub_timer = sub_timer + 1;
 13745  0027  3001               	movlw	1
 13746  0028  00BA               	movwf	??_isr
 13747  0029  3000               	movlw	0
 13748  002A  00BB               	movwf	??_isr+1
 13749  002B  3000               	movlw	0
 13750  002C  00BC               	movwf	??_isr+2
 13751  002D  3000               	movlw	0
 13752  002E  00BD               	movwf	??_isr+3
 13753  002F  0858               	movf	_sub_timer,w	;volatile
 13754  0030  07BA               	addwf	??_isr,f
 13755  0031  0859               	movf	_sub_timer+1,w	;volatile
 13756  0032  3DBB               	addwfc	??_isr+1,f
 13757  0033  085A               	movf	_sub_timer+2,w	;volatile
 13758  0034  3DBC               	addwfc	??_isr+2,f
 13759  0035  085B               	movf	_sub_timer+3,w	;volatile
 13760  0036  3DBD               	addwfc	??_isr+3,f
 13761  0037  083D               	movf	??_isr+3,w
 13762  0038  00DB               	movwf	_sub_timer+3	;volatile
 13763  0039  083C               	movf	??_isr+2,w
 13764  003A  00DA               	movwf	_sub_timer+2	;volatile
 13765  003B  083B               	movf	??_isr+1,w
 13766  003C  00D9               	movwf	_sub_timer+1	;volatile
 13767  003D  083A               	movf	??_isr,w
 13768  003E  00D8               	movwf	_sub_timer	;volatile
 13769                           
 13770                           ;interrupts.c: 48: tap_timer = tap_timer + 1;
 13771  003F  3001               	movlw	1
 13772  0040  00BA               	movwf	??_isr
 13773  0041  3000               	movlw	0
 13774  0042  00BB               	movwf	??_isr+1
 13775  0043  3000               	movlw	0
 13776  0044  00BC               	movwf	??_isr+2
 13777  0045  3000               	movlw	0
 13778  0046  00BD               	movwf	??_isr+3
 13779  0047  085C               	movf	_tap_timer,w	;volatile
 13780  0048  07BA               	addwf	??_isr,f
 13781  0049  085D               	movf	_tap_timer+1,w	;volatile
 13782  004A  3DBB               	addwfc	??_isr+1,f
 13783  004B  085E               	movf	_tap_timer+2,w	;volatile
 13784  004C  3DBC               	addwfc	??_isr+2,f
 13785  004D  085F               	movf	_tap_timer+3,w	;volatile
 13786  004E  3DBD               	addwfc	??_isr+3,f
 13787  004F  083D               	movf	??_isr+3,w
 13788  0050  00DF               	movwf	_tap_timer+3	;volatile
 13789  0051  083C               	movf	??_isr+2,w
 13790  0052  00DE               	movwf	_tap_timer+2	;volatile
 13791  0053  083B               	movf	??_isr+1,w
 13792  0054  00DD               	movwf	_tap_timer+1	;volatile
 13793  0055  083A               	movf	??_isr,w
 13794  0056  00DC               	movwf	_tap_timer	;volatile
 13795                           
 13796                           ;interrupts.c: 49: mod_timer = mod_timer + 1;
 13797  0057  3001               	movlw	1
 13798  0058  00BA               	movwf	??_isr
 13799  0059  3000               	movlw	0
 13800  005A  00BB               	movwf	??_isr+1
 13801  005B  3000               	movlw	0
 13802  005C  00BC               	movwf	??_isr+2
 13803  005D  3000               	movlw	0
 13804  005E  00BD               	movwf	??_isr+3
 13805  005F  0023               	movlb	3	; select bank3
 13806  0060  082D               	movf	_mod_timer^(0+384),w	;volatile
 13807  0061  0020               	movlb	0	; select bank0
 13808  0062  07BA               	addwf	??_isr,f
 13809  0063  0023               	movlb	3	; select bank3
 13810  0064  082E               	movf	(_mod_timer+1)^(0+384),w	;volatile
 13811  0065  0020               	movlb	0	; select bank0
 13812  0066  3DBB               	addwfc	??_isr+1,f
 13813  0067  0023               	movlb	3	; select bank3
 13814  0068  082F               	movf	(_mod_timer+2)^(0+384),w	;volatile
 13815  0069  0020               	movlb	0	; select bank0
 13816  006A  3DBC               	addwfc	??_isr+2,f
 13817  006B  0023               	movlb	3	; select bank3
 13818  006C  0830               	movf	(_mod_timer+3)^(0+384),w	;volatile
 13819  006D  0020               	movlb	0	; select bank0
 13820  006E  3DBD               	addwfc	??_isr+3,f
 13821  006F  083D               	movf	??_isr+3,w
 13822  0070  0023               	movlb	3	; select bank3
 13823  0071  00B0               	movwf	(_mod_timer+3)^(0+384)	;volatile
 13824  0072  0020               	movlb	0	; select bank0
 13825  0073  083C               	movf	??_isr+2,w
 13826  0074  0023               	movlb	3	; select bank3
 13827  0075  00AF               	movwf	(_mod_timer+2)^(0+384)	;volatile
 13828  0076  0020               	movlb	0	; select bank0
 13829  0077  083B               	movf	??_isr+1,w
 13830  0078  0023               	movlb	3	; select bank3
 13831  0079  00AE               	movwf	(_mod_timer+1)^(0+384)	;volatile
 13832  007A  0020               	movlb	0	; select bank0
 13833  007B  083A               	movf	??_isr,w
 13834  007C  0023               	movlb	3	; select bank3
 13835  007D  00AD               	movwf	_mod_timer^(0+384)	;volatile
 13836                           
 13837                           ;interrupts.c: 50: double_timer++;
 13838  007E  3001               	movlw	1
 13839  007F  07A5               	addwf	_double_timer^(0+384),f	;volatile
 13840  0080  3000               	movlw	0
 13841  0081  3DA6               	addwfc	(_double_timer+1)^(0+384),f	;volatile
 13842  0082  3000               	movlw	0
 13843  0083  3DA7               	addwfc	(_double_timer+2)^(0+384),f	;volatile
 13844  0084  3000               	movlw	0
 13845  0085  3DA8               	addwfc	(_double_timer+3)^(0+384),f	;volatile
 13846                           
 13847                           ;interrupts.c: 51: test_timer++;
 13848  0086  3001               	movlw	1
 13849  0087  07B5               	addwf	_test_timer^(0+384),f	;volatile
 13850  0088  3000               	movlw	0
 13851  0089  3DB6               	addwfc	(_test_timer+1)^(0+384),f	;volatile
 13852  008A  3000               	movlw	0
 13853  008B  3DB7               	addwfc	(_test_timer+2)^(0+384),f	;volatile
 13854  008C  3000               	movlw	0
 13855  008D  3DB8               	addwfc	(_test_timer+3)^(0+384),f	;volatile
 13856                           
 13857                           ;interrupts.c: 52: if (feedback_start == 1) {
 13858  008E  0022               	movlb	2	; select bank2
 13859  008F  035B               	decf	_feedback_start^(0+256),w
 13860  0090  1D03               	btfss	3,2
 13861  0091  28A8               	goto	i1l5391
 13862                           
 13863                           ;interrupts.c: 53: feedback_timer++;
 13864  0092  3001               	movlw	1
 13865  0093  07D3               	addwf	_feedback_timer^(0+256),f	;volatile
 13866  0094  3000               	movlw	0
 13867  0095  3DD4               	addwfc	(_feedback_timer+1)^(0+256),f	;volatile
 13868                           
 13869                           ;interrupts.c: 54: if (feedback_timer > long_press_limit) {feedback_timer = long_press_l
      +                          imit;}
 13870  0096  0854               	movf	(_feedback_timer+1)^(0+256),w	;volatile
 13871  0097  0020               	movlb	0	; select bank0
 13872  0098  0250               	subwf	_long_press_limit+1,w
 13873  0099  1D03               	skipz
 13874  009A  289F               	goto	u524_25
 13875  009B  0022               	movlb	2	; select bank2
 13876  009C  0853               	movf	_feedback_timer^(0+256),w	;volatile
 13877  009D  0020               	movlb	0	; select bank0
 13878  009E  024F               	subwf	_long_press_limit,w
 13879  009F                     u524_25:	
 13880  009F  1803               	skipnc
 13881  00A0  28A8               	goto	i1l5391
 13882  00A1  0850               	movf	_long_press_limit+1,w
 13883  00A2  0022               	movlb	2	; select bank2
 13884  00A3  00D4               	movwf	(_feedback_timer+1)^(0+256)	;volatile
 13885  00A4  0020               	movlb	0	; select bank0
 13886  00A5  084F               	movf	_long_press_limit,w
 13887  00A6  0022               	movlb	2	; select bank2
 13888  00A7  00D3               	movwf	_feedback_timer^(0+256)	;volatile
 13889  00A8                     i1l5391:	
 13890                           
 13891                           ;interrupts.c: 55: }
 13892                           ;interrupts.c: 56: if (longTap_start == 1) {
 13893  00A8  0022               	movlb	2	; select bank2
 13894  00A9  035C               	decf	_longTap_start^(0+256),w
 13895  00AA  1D03               	btfss	3,2
 13896  00AB  28C2               	goto	i1l5397
 13897                           
 13898                           ;interrupts.c: 57: longTap_timer++;
 13899  00AC  3001               	movlw	1
 13900  00AD  07D5               	addwf	_longTap_timer^(0+256),f	;volatile
 13901  00AE  3000               	movlw	0
 13902  00AF  3DD6               	addwfc	(_longTap_timer+1)^(0+256),f	;volatile
 13903                           
 13904                           ;interrupts.c: 58: if (longTap_timer > long_press_limit) {
 13905  00B0  0856               	movf	(_longTap_timer+1)^(0+256),w	;volatile
 13906  00B1  0020               	movlb	0	; select bank0
 13907  00B2  0250               	subwf	_long_press_limit+1,w
 13908  00B3  1D03               	skipz
 13909  00B4  28B9               	goto	u526_25
 13910  00B5  0022               	movlb	2	; select bank2
 13911  00B6  0855               	movf	_longTap_timer^(0+256),w	;volatile
 13912  00B7  0020               	movlb	0	; select bank0
 13913  00B8  024F               	subwf	_long_press_limit,w
 13914  00B9                     u526_25:	
 13915  00B9  1803               	skipnc
 13916  00BA  28C2               	goto	i1l5397
 13917                           
 13918                           ;interrupts.c: 59: longTap_timer = long_press_limit;
 13919  00BB  0850               	movf	_long_press_limit+1,w
 13920  00BC  0022               	movlb	2	; select bank2
 13921  00BD  00D6               	movwf	(_longTap_timer+1)^(0+256)	;volatile
 13922  00BE  0020               	movlb	0	; select bank0
 13923  00BF  084F               	movf	_long_press_limit,w
 13924  00C0  0022               	movlb	2	; select bank2
 13925  00C1  00D5               	movwf	_longTap_timer^(0+256)	;volatile
 13926  00C2                     i1l5397:	
 13927                           
 13928                           ;interrupts.c: 60: }
 13929                           ;interrupts.c: 61: }
 13930                           ;interrupts.c: 62: INTCONbits.TMR0IF = 0;
 13931  00C2  110B               	bcf	11,2	;volatile
 13932                           
 13933                           ;interrupts.c: 64: if (adjust_sub_delay == 1) {
 13934  00C3  0023               	movlb	3	; select bank3
 13935  00C4  0339               	decf	_adjust_sub_delay^(0+384),w
 13936  00C5  043A               	iorwf	(_adjust_sub_delay+1)^(0+384),w
 13937  00C6  1D03               	btfss	3,2
 13938  00C7  291E               	goto	i1l139
 13939                           
 13940                           ;interrupts.c: 65: if ((sub_timer >= delay_time) && ((baseline_delay_time - timer) < 4))
      +                           {
 13941  00C8  0020               	movlb	0	; select bank0
 13942  00C9  085B               	movf	_sub_timer+3,w	;volatile
 13943  00CA  3A80               	xorlw	128
 13944  00CB  00BA               	movwf	??_isr
 13945  00CC  084C               	movf	_delay_time+3,w	;volatile
 13946  00CD  3A80               	xorlw	128
 13947  00CE  023A               	subwf	??_isr,w
 13948  00CF  1D03               	skipz
 13949  00D0  28DB               	goto	u528_23
 13950  00D1  084B               	movf	_delay_time+2,w	;volatile
 13951  00D2  025A               	subwf	_sub_timer+2,w	;volatile
 13952  00D3  1D03               	skipz
 13953  00D4  28DB               	goto	u528_23
 13954  00D5  084A               	movf	_delay_time+1,w	;volatile
 13955  00D6  0259               	subwf	_sub_timer+1,w	;volatile
 13956  00D7  1D03               	skipz
 13957  00D8  28DB               	goto	u528_23
 13958  00D9  0849               	movf	_delay_time,w	;volatile
 13959  00DA  0258               	subwf	_sub_timer,w	;volatile
 13960  00DB                     u528_23:	
 13961  00DB  1C03               	skipc
 13962  00DC  291E               	goto	i1l139
 13963  00DD  0845               	movf	_baseline_delay_time,w	;volatile
 13964  00DE  00BA               	movwf	??_isr
 13965  00DF  0846               	movf	_baseline_delay_time+1,w	;volatile
 13966  00E0  00BB               	movwf	??_isr+1
 13967  00E1  0847               	movf	_baseline_delay_time+2,w	;volatile
 13968  00E2  00BC               	movwf	??_isr+2
 13969  00E3  0848               	movf	_baseline_delay_time+3,w	;volatile
 13970  00E4  00BD               	movwf	??_isr+3
 13971  00E5  0960               	comf	_timer,w	;volatile
 13972  00E6  00BE               	movwf	??_isr+4
 13973  00E7  0961               	comf	_timer+1,w	;volatile
 13974  00E8  00BF               	movwf	??_isr+5
 13975  00E9  0962               	comf	_timer+2,w	;volatile
 13976  00EA  00C0               	movwf	??_isr+6
 13977  00EB  0963               	comf	_timer+3,w	;volatile
 13978  00EC  00C1               	movwf	??_isr+7
 13979  00ED  0ABE               	incf	??_isr+4,f
 13980  00EE  1903               	skipnz
 13981  00EF  0ABF               	incf	??_isr+5,f
 13982  00F0  1903               	skipnz
 13983  00F1  0AC0               	incf	??_isr+6,f
 13984  00F2  1903               	skipnz
 13985  00F3  0AC1               	incf	??_isr+7,f
 13986  00F4  083E               	movf	??_isr+4,w
 13987  00F5  07BA               	addwf	??_isr,f
 13988  00F6  083F               	movf	??_isr+5,w
 13989  00F7  3DBB               	addwfc	??_isr+1,f
 13990  00F8  0840               	movf	??_isr+6,w
 13991  00F9  3DBC               	addwfc	??_isr+2,f
 13992  00FA  0841               	movf	??_isr+7,w
 13993  00FB  3DBD               	addwfc	??_isr+3,f
 13994  00FC  1BBD               	btfsc	??_isr+3,7
 13995  00FD  290B               	goto	i1l5405
 13996  00FE  083D               	movf	??_isr+3,w
 13997  00FF  1D03               	btfss	3,2
 13998  0100  291E               	goto	i1l139
 13999  0101  083C               	movf	??_isr+2,w
 14000  0102  1D03               	btfss	3,2
 14001  0103  291E               	goto	i1l139
 14002  0104  083B               	movf	??_isr+1,w
 14003  0105  1D03               	btfss	3,2
 14004  0106  291E               	goto	i1l139
 14005  0107  3004               	movlw	4
 14006  0108  023A               	subwf	??_isr,w
 14007  0109  1803               	btfsc	3,0
 14008  010A  291E               	goto	i1l139
 14009  010B                     i1l5405:	
 14010                           
 14011                           ;interrupts.c: 66: tmpSubDelay = sub_timer + (baseline_delay_time- timer);
 14012  010B  0960               	comf	_timer,w	;volatile
 14013  010C  00BA               	movwf	??_isr
 14014  010D  0961               	comf	_timer+1,w	;volatile
 14015  010E  00BB               	movwf	??_isr+1
 14016  010F  0ABA               	incf	??_isr,f
 14017  0110  1903               	skipnz
 14018  0111  0ABB               	incf	??_isr+1,f
 14019  0112  0845               	movf	_baseline_delay_time,w	;volatile
 14020  0113  073A               	addwf	??_isr,w
 14021  0114  00BC               	movwf	??_isr+2
 14022  0115  0846               	movf	_baseline_delay_time+1,w	;volatile
 14023  0116  3D3B               	addwfc	??_isr+1,w
 14024  0117  00BD               	movwf	??_isr+3
 14025  0118  0858               	movf	_sub_timer,w	;volatile
 14026  0119  073C               	addwf	??_isr+2,w
 14027  011A  00C3               	movwf	isr@tmpSubDelay
 14028  011B  0859               	movf	_sub_timer+1,w	;volatile
 14029  011C  3D3D               	addwfc	??_isr+3,w
 14030  011D  00C4               	movwf	isr@tmpSubDelay+1
 14031  011E                     i1l139:	
 14032                           
 14033                           ;interrupts.c: 67: }
 14034                           ;interrupts.c: 68: }
 14035                           ;interrupts.c: 69: }
 14036                           ;interrupts.c: 72: if (longTap_state < 1 && doubleTap_state < 1 && presetSaveMode < 1) {
 14037  011E  0020               	movlb	0	; select bank0
 14038  011F  0854               	movf	_longTap_state,w	;volatile
 14039  0120  1D03               	btfss	3,2
 14040  0121  297E               	goto	i1l5431
 14041  0122  0864               	movf	_doubleTap_state,w	;volatile
 14042  0123  1D03               	btfss	3,2
 14043  0124  297E               	goto	i1l5431
 14044  0125  0866               	movf	_presetSaveMode,w
 14045  0126  1D03               	btfss	3,2
 14046  0127  297E               	goto	i1l5431
 14047                           
 14048                           ;interrupts.c: 75: if (timer >= baseline_delay_time) {
 14049  0128  0863               	movf	_timer+3,w	;volatile
 14050  0129  3A80               	xorlw	128
 14051  012A  00BA               	movwf	??_isr
 14052  012B  0848               	movf	_baseline_delay_time+3,w	;volatile
 14053  012C  3A80               	xorlw	128
 14054  012D  023A               	subwf	??_isr,w
 14055  012E  1D03               	skipz
 14056  012F  293A               	goto	u533_23
 14057  0130  0847               	movf	_baseline_delay_time+2,w	;volatile
 14058  0131  0262               	subwf	_timer+2,w	;volatile
 14059  0132  1D03               	skipz
 14060  0133  293A               	goto	u533_23
 14061  0134  0846               	movf	_baseline_delay_time+1,w	;volatile
 14062  0135  0261               	subwf	_timer+1,w	;volatile
 14063  0136  1D03               	skipz
 14064  0137  293A               	goto	u533_23
 14065  0138  0845               	movf	_baseline_delay_time,w	;volatile
 14066  0139  0260               	subwf	_timer,w	;volatile
 14067  013A                     u533_23:	
 14068  013A  1C03               	skipc
 14069  013B  296C               	goto	i1l5427
 14070                           
 14071                           ;interrupts.c: 78: LATBbits.LATB4 = 1;
 14072  013C  0022               	movlb	2	; select bank2
 14073  013D  160D               	bsf	13,4	;volatile
 14074                           
 14075                           ;interrupts.c: 80: timer = 0;
 14076  013E  3000               	movlw	0
 14077  013F  0020               	movlb	0	; select bank0
 14078  0140  00E3               	movwf	_timer+3	;volatile
 14079  0141  3000               	movlw	0
 14080  0142  00E2               	movwf	_timer+2	;volatile
 14081  0143  3000               	movlw	0
 14082  0144  00E1               	movwf	_timer+1	;volatile
 14083  0145  3000               	movlw	0
 14084  0146  00E0               	movwf	_timer	;volatile
 14085                           
 14086                           ;interrupts.c: 81: if (reset_sub_delay == 1) {
 14087  0147  0023               	movlb	3	; select bank3
 14088  0148  0355               	decf	_reset_sub_delay^(0+384),w
 14089  0149  0456               	iorwf	(_reset_sub_delay+1)^(0+384),w
 14090  014A  1D03               	btfss	3,2
 14091  014B  296C               	goto	i1l5427
 14092                           
 14093                           ;interrupts.c: 83: CCPR1 = delay_counter;
 14094  014C  0022               	movlb	2	; select bank2
 14095  014D  0852               	movf	(_delay_counter+1)^(0+256),w	;volatile
 14096  014E  0025               	movlb	5	; select bank5
 14097  014F  0092               	movwf	18	;volatile
 14098  0150  0022               	movlb	2	; select bank2
 14099  0151  0851               	movf	_delay_counter^(0+256),w	;volatile
 14100  0152  0025               	movlb	5	; select bank5
 14101  0153  0091               	movwf	17	;volatile
 14102                           
 14103                           ;interrupts.c: 86: mod_counter = 0;
 14104  0154  0022               	movlb	2	; select bank2
 14105  0155  01D7               	clrf	_mod_counter^(0+256)
 14106  0156  01D8               	clrf	(_mod_counter+1)^(0+256)
 14107                           
 14108                           ;interrupts.c: 87: mod_timer = mod_delay_time;
 14109  0157  0023               	movlb	3	; select bank3
 14110  0158  0862               	movf	_mod_delay_time^(0+384),w
 14111  0159  00AD               	movwf	_mod_timer^(0+384)	;volatile
 14112  015A  0863               	movf	(_mod_delay_time+1)^(0+384),w
 14113  015B  00AE               	movwf	(_mod_timer+1)^(0+384)	;volatile
 14114  015C  0D89               	rlf	9,f
 14115  015D  3B89               	subwfb	9,f
 14116  015E  0989               	comf	9,f
 14117  015F  00AF               	movwf	(_mod_timer+2)^(0+384)	;volatile
 14118  0160  00B0               	movwf	(_mod_timer+3)^(0+384)	;volatile
 14119                           
 14120                           ;interrupts.c: 89: reset_sub_delay = 0;
 14121  0161  01D5               	clrf	_reset_sub_delay^(0+384)
 14122  0162  01D6               	clrf	(_reset_sub_delay+1)^(0+384)
 14123                           
 14124                           ;interrupts.c: 90: sub_timer = delay_time;
 14125  0163  0020               	movlb	0	; select bank0
 14126  0164  084C               	movf	_delay_time+3,w	;volatile
 14127  0165  00DB               	movwf	_sub_timer+3	;volatile
 14128  0166  084B               	movf	_delay_time+2,w	;volatile
 14129  0167  00DA               	movwf	_sub_timer+2	;volatile
 14130  0168  084A               	movf	_delay_time+1,w	;volatile
 14131  0169  00D9               	movwf	_sub_timer+1	;volatile
 14132  016A  0849               	movf	_delay_time,w	;volatile
 14133  016B  00D8               	movwf	_sub_timer	;volatile
 14134  016C                     i1l5427:	
 14135                           
 14136                           ;interrupts.c: 91: }
 14137                           ;interrupts.c: 92: }
 14138                           ;interrupts.c: 94: if (timer >= 30) {
 14139  016C  0020               	movlb	0	; select bank0
 14140  016D  1BE3               	btfsc	_timer+3,7	;volatile
 14141  016E  297E               	goto	i1l5431
 14142  016F  0863               	movf	_timer+3,w	;volatile
 14143  0170  1D03               	btfss	3,2
 14144  0171  297C               	goto	i1l5429
 14145  0172  0862               	movf	_timer+2,w	;volatile
 14146  0173  1D03               	btfss	3,2
 14147  0174  297C               	goto	i1l5429
 14148  0175  0861               	movf	_timer+1,w	;volatile
 14149  0176  1D03               	btfss	3,2
 14150  0177  297C               	goto	i1l5429
 14151  0178  301E               	movlw	30
 14152  0179  0260               	subwf	_timer,w	;volatile
 14153  017A  1C03               	btfss	3,0
 14154  017B  297E               	goto	i1l5431
 14155  017C                     i1l5429:	
 14156                           
 14157                           ;interrupts.c: 96: LATBbits.LATB4 = 0;
 14158  017C  0022               	movlb	2	; select bank2
 14159  017D  120D               	bcf	13,4	;volatile
 14160  017E                     i1l5431:	
 14161                           
 14162                           ;interrupts.c: 98: }
 14163                           ;interrupts.c: 99: }
 14164                           ;interrupts.c: 102: if (presetSaveMode == 1) {
 14165  017E  0020               	movlb	0	; select bank0
 14166  017F  0366               	decf	_presetSaveMode,w
 14167  0180  1D03               	btfss	3,2
 14168  0181  29AE               	goto	i1l5443
 14169                           
 14170                           ;interrupts.c: 105: if (double_timer >= 250) {
 14171  0182  0023               	movlb	3	; select bank3
 14172  0183  1BA8               	btfsc	(_double_timer+3)^(0+384),7	;volatile
 14173  0184  299D               	goto	i1l5439
 14174  0185  0828               	movf	(_double_timer+3)^(0+384),w	;volatile
 14175  0186  1D03               	btfss	3,2
 14176  0187  2992               	goto	i1l5435
 14177  0188  0827               	movf	(_double_timer+2)^(0+384),w	;volatile
 14178  0189  1D03               	btfss	3,2
 14179  018A  2992               	goto	i1l5435
 14180  018B  0826               	movf	(_double_timer+1)^(0+384),w	;volatile
 14181  018C  1D03               	btfss	3,2
 14182  018D  2992               	goto	i1l5435
 14183  018E  30FA               	movlw	250
 14184  018F  0225               	subwf	_double_timer^(0+384),w	;volatile
 14185  0190  1C03               	btfss	3,0
 14186  0191  299D               	goto	i1l5439
 14187  0192                     i1l5435:	
 14188                           
 14189                           ;interrupts.c: 106: LATBbits.LATB0 = 1;
 14190  0192  0022               	movlb	2	; select bank2
 14191  0193  140D               	bsf	13,0	;volatile
 14192                           
 14193                           ;interrupts.c: 107: double_timer = 0;
 14194  0194  3000               	movlw	0
 14195  0195  0023               	movlb	3	; select bank3
 14196  0196  00A8               	movwf	(_double_timer+3)^(0+384)	;volatile
 14197  0197  3000               	movlw	0
 14198  0198  00A7               	movwf	(_double_timer+2)^(0+384)	;volatile
 14199  0199  3000               	movlw	0
 14200  019A  00A6               	movwf	(_double_timer+1)^(0+384)	;volatile
 14201  019B  3000               	movlw	0
 14202  019C  00A5               	movwf	_double_timer^(0+384)	;volatile
 14203  019D                     i1l5439:	
 14204                           
 14205                           ;interrupts.c: 109: }
 14206                           ;interrupts.c: 110: if (double_timer >= 30) {
 14207  019D  1BA8               	btfsc	(_double_timer+3)^(0+384),7	;volatile
 14208  019E  29AE               	goto	i1l5443
 14209  019F  0828               	movf	(_double_timer+3)^(0+384),w	;volatile
 14210  01A0  1D03               	btfss	3,2
 14211  01A1  29AC               	goto	i1l5441
 14212  01A2  0827               	movf	(_double_timer+2)^(0+384),w	;volatile
 14213  01A3  1D03               	btfss	3,2
 14214  01A4  29AC               	goto	i1l5441
 14215  01A5  0826               	movf	(_double_timer+1)^(0+384),w	;volatile
 14216  01A6  1D03               	btfss	3,2
 14217  01A7  29AC               	goto	i1l5441
 14218  01A8  301E               	movlw	30
 14219  01A9  0225               	subwf	_double_timer^(0+384),w	;volatile
 14220  01AA  1C03               	btfss	3,0
 14221  01AB  29AE               	goto	i1l5443
 14222  01AC                     i1l5441:	
 14223                           
 14224                           ;interrupts.c: 112: LATBbits.LATB0 = 0;
 14225  01AC  0022               	movlb	2	; select bank2
 14226  01AD  100D               	bcf	13,0	;volatile
 14227  01AE                     i1l5443:	
 14228                           
 14229                           ;interrupts.c: 113: }
 14230                           ;interrupts.c: 114: }
 14231                           ;interrupts.c: 116: if (presetSaveMode < 1 && mode2_state == 0) {
 14232  01AE  0020               	movlb	0	; select bank0
 14233  01AF  0866               	movf	_presetSaveMode,w
 14234  01B0  1D03               	btfss	3,2
 14235  01B1  2A09               	goto	i1l5463
 14236  01B2  0865               	movf	_mode2_state,w
 14237  01B3  1D03               	btfss	3,2
 14238  01B4  2A09               	goto	i1l5463
 14239                           
 14240                           ;interrupts.c: 117: if (sub_timer >= tmpSubDelay ) {
 14241  01B5  0843               	movf	isr@tmpSubDelay,w
 14242  01B6  00BA               	movwf	??_isr
 14243  01B7  0844               	movf	isr@tmpSubDelay+1,w
 14244  01B8  00BB               	movwf	??_isr+1
 14245  01B9  3000               	movlw	0
 14246  01BA  1BBB               	btfsc	??_isr+1,7
 14247  01BB  30FF               	movlw	255
 14248  01BC  00BC               	movwf	??_isr+2
 14249  01BD  00BD               	movwf	??_isr+3
 14250  01BE  085B               	movf	_sub_timer+3,w	;volatile
 14251  01BF  3A80               	xorlw	128
 14252  01C0  00BE               	movwf	??_isr+4
 14253  01C1  083D               	movf	??_isr+3,w
 14254  01C2  3A80               	xorlw	128
 14255  01C3  023E               	subwf	??_isr+4,w
 14256  01C4  1D03               	skipz
 14257  01C5  29D0               	goto	u541_23
 14258  01C6  083C               	movf	??_isr+2,w
 14259  01C7  025A               	subwf	_sub_timer+2,w	;volatile
 14260  01C8  1D03               	skipz
 14261  01C9  29D0               	goto	u541_23
 14262  01CA  083B               	movf	??_isr+1,w
 14263  01CB  0259               	subwf	_sub_timer+1,w	;volatile
 14264  01CC  1D03               	skipz
 14265  01CD  29D0               	goto	u541_23
 14266  01CE  083A               	movf	??_isr,w
 14267  01CF  0258               	subwf	_sub_timer,w	;volatile
 14268  01D0                     u541_23:	
 14269  01D0  1C03               	skipc
 14270  01D1  29ED               	goto	i1l5457
 14271                           
 14272                           ;interrupts.c: 118: if (suspend_blink == 0) {
 14273  01D2  0867               	movf	_suspend_blink,w	;volatile
 14274  01D3  1D03               	btfss	3,2
 14275  01D4  29E0               	goto	i1l5453
 14276                           
 14277                           ;interrupts.c: 119: set_leds_top(top_push_state, 1);
 14278  01D5  0852               	movf	_top_push_state+1,w
 14279  01D6  00F1               	movwf	i1set_leds_top@x+1
 14280  01D7  0851               	movf	_top_push_state,w
 14281  01D8  00F0               	movwf	i1set_leds_top@x
 14282  01D9  3001               	movlw	1
 14283  01DA  00F2               	movwf	i1set_leds_top@ledState
 14284  01DB  3000               	movlw	0
 14285  01DC  00F3               	movwf	i1set_leds_top@ledState+1
 14286  01DD  3191  21DA  3180   	fcall	i1_set_leds_top
 14287  01E0                     i1l5453:	
 14288                           
 14289                           ;interrupts.c: 120: }
 14290                           ;interrupts.c: 121: tmpSubDelay = delay_time;
 14291  01E0  0020               	movlb	0	; select bank0
 14292  01E1  084A               	movf	_delay_time+1,w	;volatile
 14293  01E2  00C4               	movwf	isr@tmpSubDelay+1
 14294  01E3  0849               	movf	_delay_time,w	;volatile
 14295  01E4  00C3               	movwf	isr@tmpSubDelay
 14296                           
 14297                           ;interrupts.c: 122: sub_timer = 0;
 14298  01E5  3000               	movlw	0
 14299  01E6  00DB               	movwf	_sub_timer+3	;volatile
 14300  01E7  3000               	movlw	0
 14301  01E8  00DA               	movwf	_sub_timer+2	;volatile
 14302  01E9  3000               	movlw	0
 14303  01EA  00D9               	movwf	_sub_timer+1	;volatile
 14304  01EB  3000               	movlw	0
 14305  01EC  00D8               	movwf	_sub_timer	;volatile
 14306  01ED                     i1l5457:	
 14307                           
 14308                           ;interrupts.c: 123: }
 14309                           ;interrupts.c: 125: if (sub_timer >= 20) {
 14310  01ED  1BDB               	btfsc	_sub_timer+3,7	;volatile
 14311  01EE  2A09               	goto	i1l5463
 14312  01EF  085B               	movf	_sub_timer+3,w	;volatile
 14313  01F0  1D03               	btfss	3,2
 14314  01F1  29FC               	goto	i1l5459
 14315  01F2  085A               	movf	_sub_timer+2,w	;volatile
 14316  01F3  1D03               	btfss	3,2
 14317  01F4  29FC               	goto	i1l5459
 14318  01F5  0859               	movf	_sub_timer+1,w	;volatile
 14319  01F6  1D03               	btfss	3,2
 14320  01F7  29FC               	goto	i1l5459
 14321  01F8  3014               	movlw	20
 14322  01F9  0258               	subwf	_sub_timer,w	;volatile
 14323  01FA  1C03               	btfss	3,0
 14324  01FB  2A09               	goto	i1l5463
 14325  01FC                     i1l5459:	
 14326                           
 14327                           ;interrupts.c: 126: if (suspend_blink == 0) {
 14328  01FC  0867               	movf	_suspend_blink,w	;volatile
 14329  01FD  1D03               	btfss	3,2
 14330  01FE  2A09               	goto	i1l5463
 14331                           
 14332                           ;interrupts.c: 127: set_leds_top(top_push_state, 0);
 14333  01FF  0852               	movf	_top_push_state+1,w
 14334  0200  00F1               	movwf	i1set_leds_top@x+1
 14335  0201  0851               	movf	_top_push_state,w
 14336  0202  00F0               	movwf	i1set_leds_top@x
 14337  0203  3000               	movlw	0
 14338  0204  00F2               	movwf	i1set_leds_top@ledState
 14339  0205  00F3               	movwf	i1set_leds_top@ledState+1
 14340  0206  3191  21DA  3180   	fcall	i1_set_leds_top
 14341  0209                     i1l5463:	
 14342                           
 14343                           ;interrupts.c: 128: }
 14344                           ;interrupts.c: 129: }
 14345                           ;interrupts.c: 130: }
 14346                           ;interrupts.c: 145: if (mod_timer >= mod_delay_time) {
 14347  0209  0023               	movlb	3	; select bank3
 14348  020A  0862               	movf	_mod_delay_time^(0+384),w
 14349  020B  0020               	movlb	0	; select bank0
 14350  020C  00BA               	movwf	??_isr
 14351  020D  0023               	movlb	3	; select bank3
 14352  020E  0863               	movf	(_mod_delay_time+1)^(0+384),w
 14353  020F  0020               	movlb	0	; select bank0
 14354  0210  00BB               	movwf	??_isr+1
 14355  0211  3000               	movlw	0
 14356  0212  1BBB               	btfsc	??_isr+1,7
 14357  0213  30FF               	movlw	255
 14358  0214  00BC               	movwf	??_isr+2
 14359  0215  00BD               	movwf	??_isr+3
 14360  0216  0023               	movlb	3	; select bank3
 14361  0217  0830               	movf	(_mod_timer+3)^(0+384),w	;volatile
 14362  0218  3A80               	xorlw	128
 14363  0219  0020               	movlb	0	; select bank0
 14364  021A  00BE               	movwf	??_isr+4
 14365  021B  083D               	movf	??_isr+3,w
 14366  021C  3A80               	xorlw	128
 14367  021D  023E               	subwf	??_isr+4,w
 14368  021E  0023               	movlb	3	; select bank3
 14369  021F  1D03               	skipz
 14370  0220  2A31               	goto	u545_23
 14371  0221  0020               	movlb	0	; select bank0
 14372  0222  083C               	movf	??_isr+2,w
 14373  0223  0023               	movlb	3	; select bank3
 14374  0224  022F               	subwf	(_mod_timer+2)^(0+384),w	;volatile
 14375  0225  1D03               	skipz
 14376  0226  2A31               	goto	u545_23
 14377  0227  0020               	movlb	0	; select bank0
 14378  0228  083B               	movf	??_isr+1,w
 14379  0229  0023               	movlb	3	; select bank3
 14380  022A  022E               	subwf	(_mod_timer+1)^(0+384),w	;volatile
 14381  022B  1D03               	skipz
 14382  022C  2A31               	goto	u545_23
 14383  022D  0020               	movlb	0	; select bank0
 14384  022E  083A               	movf	??_isr,w
 14385  022F  0023               	movlb	3	; select bank3
 14386  0230  022D               	subwf	_mod_timer^(0+384),w	;volatile
 14387  0231                     u545_23:	
 14388  0231  1C03               	skipc
 14389  0232  2AE3               	goto	i1l5497
 14390                           
 14391                           ;interrupts.c: 146: mod_timer = 0;
 14392  0233  3000               	movlw	0
 14393  0234  00B0               	movwf	(_mod_timer+3)^(0+384)	;volatile
 14394  0235  3000               	movlw	0
 14395  0236  00AF               	movwf	(_mod_timer+2)^(0+384)	;volatile
 14396  0237  3000               	movlw	0
 14397  0238  00AE               	movwf	(_mod_timer+1)^(0+384)	;volatile
 14398  0239  3000               	movlw	0
 14399  023A  00AD               	movwf	_mod_timer^(0+384)	;volatile
 14400                           
 14401                           ;interrupts.c: 149: if (mod_counter >= 60) {
 14402  023B  0022               	movlb	2	; select bank2
 14403  023C  0858               	movf	(_mod_counter+1)^(0+256),w
 14404  023D  3A80               	xorlw	128
 14405  023E  0020               	movlb	0	; select bank0
 14406  023F  00BA               	movwf	??_isr
 14407  0240  3080               	movlw	128
 14408  0241  023A               	subwf	??_isr,w
 14409  0242  1D03               	skipz
 14410  0243  2A47               	goto	u546_25
 14411  0244  303C               	movlw	60
 14412  0245  0022               	movlb	2	; select bank2
 14413  0246  0257               	subwf	_mod_counter^(0+256),w
 14414  0247                     u546_25:	
 14415  0247  1C03               	skipc
 14416  0248  2A4C               	goto	i1l5469
 14417                           
 14418                           ;interrupts.c: 150: mod_counter = 0;
 14419  0249  0022               	movlb	2	; select bank2
 14420  024A  01D7               	clrf	_mod_counter^(0+256)
 14421  024B  01D8               	clrf	(_mod_counter+1)^(0+256)
 14422  024C                     i1l5469:	
 14423                           
 14424                           ;interrupts.c: 151: }
 14425                           ;interrupts.c: 152: PORTCbits.RC4 = 0;
 14426  024C  0020               	movlb	0	; select bank0
 14427  024D  120E               	bcf	14,4	;volatile
 14428                           
 14429                           ;interrupts.c: 153: switch (bottom_push_state) {
 14430  024E  2A89               	goto	i1l5489
 14431  024F                     i1l5471:	
 14432                           ;interrupts.c: 154: case 1:
 14433                           
 14434                           
 14435                           ;interrupts.c: 155: mod_value = (int)modSin[mod_counter];
 14436  024F  0022               	movlb	2	; select bank2
 14437  0250  0857               	movf	_mod_counter^(0+256),w
 14438  0251  3EA0               	addlw	(low (_modSin| (0+768)))& (0+255)
 14439  0252  0086               	movwf	6
 14440  0253  3003               	movlw	3	; select bank7/8
 14441  0254  2A7D               	goto	L18
 14442  0255                     i1l5473:	
 14443                           ;interrupts.c: 157: case 2:
 14444                           
 14445                           ;interrupts.c: 156: break;
 14446                           
 14447                           
 14448                           ;interrupts.c: 158: mod_value = (int)modTri[mod_counter];
 14449  0255  0022               	movlb	2	; select bank2
 14450  0256  0857               	movf	_mod_counter^(0+256),w
 14451  0257  3E20               	addlw	(low (_modTri| (0+1024)))& (0+255)
 14452  0258  2A7B               	goto	L19
 14453  0259                     i1l5475:	
 14454                           ;interrupts.c: 160: case 3:
 14455                           
 14456                           ;interrupts.c: 159: break;
 14457                           
 14458                           
 14459                           ;interrupts.c: 161: if (mod_counter < 31) {
 14460  0259  0022               	movlb	2	; select bank2
 14461  025A  0858               	movf	(_mod_counter+1)^(0+256),w
 14462  025B  3A80               	xorlw	128
 14463  025C  0020               	movlb	0	; select bank0
 14464  025D  00BA               	movwf	??_isr
 14465  025E  3080               	movlw	128
 14466  025F  023A               	subwf	??_isr,w
 14467  0260  1D03               	skipz
 14468  0261  2A65               	goto	u547_25
 14469  0262  301F               	movlw	31
 14470  0263  0022               	movlb	2	; select bank2
 14471  0264  0257               	subwf	_mod_counter^(0+256),w
 14472  0265                     u547_25:	
 14473  0265  1803               	skipnc
 14474  0266  2A6C               	goto	i1l5479
 14475                           
 14476                           ;interrupts.c: 162: mod_value = 100;
 14477  0267  3064               	movlw	100
 14478  0268  0023               	movlb	3	; select bank3
 14479  0269  00D3               	movwf	_mod_value^(0+384)
 14480  026A  3000               	movlw	0
 14481  026B  2A70               	goto	L17
 14482  026C                     i1l5479:	
 14483                           ;interrupts.c: 163: } else {
 14484                           
 14485                           
 14486                           ;interrupts.c: 164: mod_value = -100;
 14487  026C  309C               	movlw	156
 14488  026D  0023               	movlb	3	; select bank3
 14489  026E  00D3               	movwf	_mod_value^(0+384)
 14490  026F  30FF               	movlw	255
 14491  0270                     L17:	
 14492  0270  00D4               	movwf	(_mod_value^(0+384)+1)
 14493                           
 14494                           ;interrupts.c: 165: }
 14495                           ;interrupts.c: 166: break;
 14496  0271  2AA0               	goto	i1l5491
 14497  0272                     i1l5481:	
 14498                           ;interrupts.c: 167: case 4:
 14499                           
 14500                           
 14501                           ;interrupts.c: 168: mod_value = (int) modSaw[mod_counter];
 14502  0272  0022               	movlb	2	; select bank2
 14503  0273  0857               	movf	_mod_counter^(0+256),w
 14504  0274  3E20               	addlw	(low (_modSaw| (0+1280)))& (0+255)
 14505  0275  0086               	movwf	6
 14506  0276  3005               	movlw	5	; select bank10/11
 14507  0277  2A7D               	goto	L18
 14508  0278                     i1l5483:	
 14509                           ;interrupts.c: 170: case 5:
 14510                           
 14511                           ;interrupts.c: 169: break;
 14512                           
 14513                           
 14514                           ;interrupts.c: 171: mod_value = (int)modRevSaw[mod_counter];
 14515  0278  0022               	movlb	2	; select bank2
 14516  0279  0857               	movf	_mod_counter^(0+256),w
 14517  027A  3EA0               	addlw	(low (_modRevSaw| (0+1024)))& (0+255)
 14518  027B                     L19:	
 14519  027B  0086               	movwf	6
 14520  027C  3004               	movlw	4	; select bank9/10
 14521  027D                     L18:	
 14522  027D  0087               	movwf	7
 14523  027E  0801               	movf	1,w
 14524  027F  0023               	movlb	3	; select bank3
 14525  0280  00D3               	movwf	_mod_value^(0+384)
 14526  0281  01D4               	clrf	(_mod_value+1)^(0+384)
 14527  0282  1BD3               	btfsc	_mod_value^(0+384),7
 14528  0283  03D4               	decf	(_mod_value+1)^(0+384),f
 14529                           
 14530                           ;interrupts.c: 172: break;
 14531  0284  2AA0               	goto	i1l5491
 14532  0285                     i1l5485:	
 14533                           ;interrupts.c: 173: default:
 14534                           
 14535                           
 14536                           ;interrupts.c: 174: mod_value = 0;
 14537  0285  0023               	movlb	3	; select bank3
 14538  0286  01D3               	clrf	_mod_value^(0+384)
 14539  0287  01D4               	clrf	(_mod_value+1)^(0+384)
 14540                           
 14541                           ;interrupts.c: 176: }
 14542                           
 14543                           ;interrupts.c: 175: break;
 14544  0288  2AA0               	goto	i1l5491
 14545  0289                     i1l5489:	
 14546                           
 14547                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14548                           ; Switch size 1, requested type "space"
 14549                           ; Number of cases is 1, Range of values is 0 to 0
 14550                           ; switch strategies available:
 14551                           ; Name         Instructions Cycles
 14552                           ; simple_byte            4     3 (average)
 14553                           ; direct_byte            8     6 (fixed)
 14554                           ; jumptable            260     6 (fixed)
 14555                           ;	Chosen strategy is simple_byte
 14556  0289  0020               	movlb	0	; select bank0
 14557  028A  084E               	movf	_bottom_push_state+1,w
 14558  028B  3A00               	xorlw	0	; case 0
 14559  028C  1903               	skipnz
 14560  028D  2A8F               	goto	i1l7719
 14561  028E  2A85               	goto	i1l5485
 14562  028F                     i1l7719:	
 14563                           
 14564                           ; Switch size 1, requested type "space"
 14565                           ; Number of cases is 5, Range of values is 1 to 5
 14566                           ; switch strategies available:
 14567                           ; Name         Instructions Cycles
 14568                           ; simple_byte           16     9 (average)
 14569                           ; direct_byte           19     9 (fixed)
 14570                           ; jumptable            263     9 (fixed)
 14571                           ;	Chosen strategy is simple_byte
 14572  028F  084D               	movf	_bottom_push_state,w
 14573  0290  3A01               	xorlw	1	; case 1
 14574  0291  1903               	skipnz
 14575  0292  2A4F               	goto	i1l5471
 14576  0293  3A03               	xorlw	3	; case 2
 14577  0294  1903               	skipnz
 14578  0295  2A55               	goto	i1l5473
 14579  0296  3A01               	xorlw	1	; case 3
 14580  0297  1903               	skipnz
 14581  0298  2A59               	goto	i1l5475
 14582  0299  3A07               	xorlw	7	; case 4
 14583  029A  1903               	skipnz
 14584  029B  2A72               	goto	i1l5481
 14585  029C  3A01               	xorlw	1	; case 5
 14586  029D  1903               	skipnz
 14587  029E  2A78               	goto	i1l5483
 14588  029F  2A85               	goto	i1l5485
 14589  02A0                     i1l5491:	
 14590                           
 14591                           ;interrupts.c: 179: mod_value = modulation(mod_value, adjusted_pot_value);
 14592  02A0  0023               	movlb	3	; select bank3
 14593  02A1  0853               	movf	_mod_value^(0+384),w
 14594  02A2  0020               	movlb	0	; select bank0
 14595  02A3  00AE               	movwf	modulation@x
 14596  02A4  0023               	movlb	3	; select bank3
 14597  02A5  0854               	movf	(_mod_value+1)^(0+384),w
 14598  02A6  0020               	movlb	0	; select bank0
 14599  02A7  00AF               	movwf	modulation@x+1
 14600  02A8  0D89               	rlf	9,f
 14601  02A9  3B89               	subwfb	9,f
 14602  02AA  0989               	comf	9,f
 14603  02AB  00B0               	movwf	modulation@x+2
 14604  02AC  00B1               	movwf	modulation@x+3
 14605  02AD  0023               	movlb	3	; select bank3
 14606  02AE  083B               	movf	_adjusted_pot_value^(0+384),w
 14607  02AF  0020               	movlb	0	; select bank0
 14608  02B0  00B2               	movwf	modulation@y
 14609  02B1  0023               	movlb	3	; select bank3
 14610  02B2  083C               	movf	(_adjusted_pot_value+1)^(0+384),w
 14611  02B3  0020               	movlb	0	; select bank0
 14612  02B4  00B3               	movwf	modulation@y+1
 14613  02B5  0D89               	rlf	9,f
 14614  02B6  3B89               	subwfb	9,f
 14615  02B7  0989               	comf	9,f
 14616  02B8  00B4               	movwf	modulation@y+2
 14617  02B9  00B5               	movwf	modulation@y+3
 14618  02BA  3190  20CE  3180   	fcall	_modulation
 14619  02BD  0020               	movlb	0	; select bank0
 14620  02BE  082F               	movf	?_modulation+1,w
 14621  02BF  0023               	movlb	3	; select bank3
 14622  02C0  00D4               	movwf	(_mod_value+1)^(0+384)
 14623  02C1  0020               	movlb	0	; select bank0
 14624  02C2  082E               	movf	?_modulation,w
 14625  02C3  0023               	movlb	3	; select bank3
 14626  02C4  00D3               	movwf	_mod_value^(0+384)
 14627                           
 14628                           ;interrupts.c: 180: CCPR9 = mod_value / 2;
 14629  02C5  3002               	movlw	2
 14630  02C6  00F0               	movwf	___awdiv@divisor
 14631  02C7  3000               	movlw	0
 14632  02C8  00F1               	movwf	___awdiv@divisor+1
 14633  02C9  0854               	movf	(_mod_value+1)^(0+384),w
 14634  02CA  00F3               	movwf	___awdiv@dividend+1
 14635  02CB  0853               	movf	_mod_value^(0+384),w
 14636  02CC  00F2               	movwf	___awdiv@dividend
 14637  02CD  3193  2357  3180   	fcall	___awdiv
 14638  02D0  0871               	movf	?___awdiv+1,w
 14639  02D1  002C               	movlb	12	; select bank12
 14640  02D2  009B               	movwf	27	;volatile
 14641  02D3  0870               	movf	?___awdiv,w
 14642  02D4  009A               	movwf	26	;volatile
 14643                           
 14644                           ;interrupts.c: 181: mod_timer = 0;
 14645  02D5  3000               	movlw	0
 14646  02D6  0023               	movlb	3	; select bank3
 14647  02D7  00B0               	movwf	(_mod_timer+3)^(0+384)	;volatile
 14648  02D8  3000               	movlw	0
 14649  02D9  00AF               	movwf	(_mod_timer+2)^(0+384)	;volatile
 14650  02DA  3000               	movlw	0
 14651  02DB  00AE               	movwf	(_mod_timer+1)^(0+384)	;volatile
 14652  02DC  3000               	movlw	0
 14653  02DD  00AD               	movwf	_mod_timer^(0+384)	;volatile
 14654                           
 14655                           ;interrupts.c: 182: mod_counter++;
 14656  02DE  3001               	movlw	1
 14657  02DF  0022               	movlb	2	; select bank2
 14658  02E0  07D7               	addwf	_mod_counter^(0+256),f
 14659  02E1  3000               	movlw	0
 14660  02E2  3DD8               	addwfc	(_mod_counter+1)^(0+256),f
 14661  02E3                     i1l5497:	
 14662                           
 14663                           ;interrupts.c: 184: }
 14664                           ;interrupts.c: 188: if (preset_programmning_on == 1) {
 14665  02E3  0022               	movlb	2	; select bank2
 14666  02E4  035E               	decf	_preset_programmning_on^(0+256),w
 14667  02E5  1D03               	btfss	3,2
 14668  02E6  2B16               	goto	i1l5509
 14669                           
 14670                           ;interrupts.c: 189: preset_blink++;
 14671  02E7  3001               	movlw	1
 14672  02E8  0020               	movlb	0	; select bank0
 14673  02E9  00BA               	movwf	??_isr
 14674  02EA  083A               	movf	??_isr,w
 14675  02EB  0022               	movlb	2	; select bank2
 14676  02EC  07DD               	addwf	_preset_blink^(0+256),f
 14677                           
 14678                           ;interrupts.c: 191: if (preset_blink >= blink_delay) {
 14679  02ED  0023               	movlb	3	; select bank3
 14680  02EE  085F               	movf	(_blink_delay+1)^(0+384),w
 14681  02EF  3A80               	xorlw	128
 14682  02F0  3C80               	sublw	128
 14683  02F1  1D03               	skipz
 14684  02F2  2AF6               	goto	u549_25
 14685  02F3  085E               	movf	_blink_delay^(0+384),w
 14686  02F4  0022               	movlb	2	; select bank2
 14687  02F5  025D               	subwf	_preset_blink^(0+256),w
 14688  02F6                     u549_25:	
 14689  02F6  1C03               	skipc
 14690  02F7  2B14               	goto	i1l171
 14691                           
 14692                           ;interrupts.c: 192: LATBbits.LATB1 = 1;
 14693  02F8  0022               	movlb	2	; select bank2
 14694  02F9  148D               	bsf	13,1	;volatile
 14695                           
 14696                           ;interrupts.c: 193: if (preset_blink > blink_delay*2) {
 14697  02FA  0023               	movlb	3	; select bank3
 14698  02FB  085F               	movf	(_blink_delay+1)^(0+384),w
 14699  02FC  0020               	movlb	0	; select bank0
 14700  02FD  00BB               	movwf	??_isr+1
 14701  02FE  0023               	movlb	3	; select bank3
 14702  02FF  085E               	movf	_blink_delay^(0+384),w
 14703  0300  0020               	movlb	0	; select bank0
 14704  0301  00BA               	movwf	??_isr
 14705  0302  35BA               	lslf	??_isr,f
 14706  0303  0DBB               	rlf	??_isr+1,f
 14707  0304  083B               	movf	??_isr+1,w
 14708  0305  3A80               	xorlw	128
 14709  0306  00BC               	movwf	??_isr+2
 14710  0307  3080               	movlw	128
 14711  0308  023C               	subwf	??_isr+2,w
 14712  0309  1D03               	skipz
 14713  030A  2B0F               	goto	u550_25
 14714  030B  0022               	movlb	2	; select bank2
 14715  030C  085D               	movf	_preset_blink^(0+256),w
 14716  030D  0020               	movlb	0	; select bank0
 14717  030E  023A               	subwf	??_isr,w
 14718  030F                     u550_25:	
 14719  030F  1803               	skipnc
 14720  0310  2B1B               	goto	i1l176
 14721                           
 14722                           ;interrupts.c: 194: preset_blink = 0;
 14723  0311  0022               	movlb	2	; select bank2
 14724  0312  01DD               	clrf	_preset_blink^(0+256)
 14725                           
 14726                           ;interrupts.c: 195: }
 14727                           ;interrupts.c: 197: } else {
 14728  0313  2B1B               	goto	i1l176
 14729  0314                     i1l171:	
 14730                           
 14731                           ;interrupts.c: 198: LATBbits.LATB1 = 0;
 14732  0314  0022               	movlb	2	; select bank2
 14733  0315  2B1A               	goto	i1l5513
 14734  0316                     i1l5509:	
 14735                           ;interrupts.c: 199: }
 14736                           ;interrupts.c: 201: } else {
 14737                           
 14738                           
 14739                           ;interrupts.c: 202: if (preset_blink > 0) {
 14740  0316  085D               	movf	_preset_blink^(0+256),w
 14741  0317  1903               	btfsc	3,2
 14742  0318  2B1B               	goto	i1l176
 14743                           
 14744                           ;interrupts.c: 203: preset_blink = 0;
 14745  0319  01DD               	clrf	_preset_blink^(0+256)
 14746  031A                     i1l5513:	
 14747                           
 14748                           ;interrupts.c: 204: LATBbits.LATB1 = 0;
 14749  031A  108D               	bcf	13,1	;volatile
 14750  031B                     i1l176:	
 14751  031B  0020               	movlb	0	; select bank0
 14752  031C  0842               	movf	??_isr+8,w
 14753  031D  00FF               	movwf	127
 14754  031E  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 14755  031F  0009               	retfie
 14756  0320                     __end_of_isr:	
 14757                           
 14758                           	psect	text50
 14759  11DA                     __ptext50:	
 14760 ;; *************** function i1_set_leds_top *****************
 14761 ;; Defined at:
 14762 ;;		line 16 in file "LEDs.c"
 14763 ;; Parameters:    Size  Location     Type
 14764 ;;  x               2    0[COMMON] int 
 14765 ;;  ledState        2    2[COMMON] int 
 14766 ;; Auto vars:     Size  Location     Type
 14767 ;;		None
 14768 ;; Return value:  Size  Location     Type
 14769 ;;                  1    wreg      void 
 14770 ;; Registers used:
 14771 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14772 ;; Tracked objects:
 14773 ;;		On entry : 0/0
 14774 ;;		On exit  : 0/0
 14775 ;;		Unchanged: 0/0
 14776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14777 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14780 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14781 ;;Total ram usage:        4 bytes
 14782 ;; Hardware stack levels used:    1
 14783 ;; This function calls:
 14784 ;;		Nothing
 14785 ;; This function is called by:
 14786 ;;		_isr
 14787 ;; This function uses a non-reentrant model
 14788 ;;
 14789                           
 14790                           
 14791                           ;psect for function i1_set_leds_top
 14792  11DA                     i1_set_leds_top:	
 14793                           
 14794                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 14795                           
 14796                           ;incstack = 0
 14797                           ; Regs used in i1_set_leds_top: [wreg-fsr0h+status,2+status,0]
 14798  11DA  0027               	movlb	7	; select bank7
 14799  11DB  100C               	bcf	12,0	;volatile
 14800                           
 14801                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 14802  11DC  108C               	bcf	12,1	;volatile
 14803                           
 14804                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 14805  11DD  110C               	bcf	12,2	;volatile
 14806                           
 14807                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 14808  11DE  118C               	bcf	12,3	;volatile
 14809                           
 14810                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 14811  11DF  120C               	bcf	12,4	;volatile
 14812                           
 14813                           ;LEDs.c: 22: switch (x) {
 14814  11E0  2A05               	goto	i1l5375
 14815  11E1                     i1l5363:	
 14816                           ;LEDs.c: 23: case 1:
 14817                           
 14818                           
 14819                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 14820  11E1  0C72               	rrf	i1set_leds_top@ledState,w
 14821  11E2  1C03               	skipc
 14822  11E3  100C               	bcf	12,0	;volatile
 14823  11E4  1803               	skipnc
 14824  11E5  140C               	bsf	12,0	;volatile
 14825                           
 14826                           ;LEDs.c: 25: break;
 14827  11E6  0008               	return
 14828  11E7                     i1l5365:	
 14829                           ;LEDs.c: 26: case 2:
 14830                           
 14831                           
 14832                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 14833  11E7  0C72               	rrf	i1set_leds_top@ledState,w
 14834  11E8  1C03               	skipc
 14835  11E9  108C               	bcf	12,1	;volatile
 14836  11EA  1803               	skipnc
 14837  11EB  148C               	bsf	12,1	;volatile
 14838                           
 14839                           ;LEDs.c: 28: break;
 14840  11EC  0008               	return
 14841  11ED                     i1l5367:	
 14842                           ;LEDs.c: 29: case 3:
 14843                           
 14844                           
 14845                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 14846  11ED  0C72               	rrf	i1set_leds_top@ledState,w
 14847  11EE  1C03               	skipc
 14848  11EF  110C               	bcf	12,2	;volatile
 14849  11F0  1803               	skipnc
 14850  11F1  150C               	bsf	12,2	;volatile
 14851                           
 14852                           ;LEDs.c: 31: break;
 14853  11F2  0008               	return
 14854  11F3                     i1l5369:	
 14855                           ;LEDs.c: 32: case 4:
 14856                           
 14857                           
 14858                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 14859  11F3  0C72               	rrf	i1set_leds_top@ledState,w
 14860  11F4  1C03               	skipc
 14861  11F5  118C               	bcf	12,3	;volatile
 14862  11F6  1803               	skipnc
 14863  11F7  158C               	bsf	12,3	;volatile
 14864                           
 14865                           ;LEDs.c: 34: break;
 14866  11F8  0008               	return
 14867  11F9                     i1l5371:	
 14868                           ;LEDs.c: 35: case 5:
 14869                           
 14870                           
 14871                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 14872  11F9  0C72               	rrf	i1set_leds_top@ledState,w
 14873  11FA  1C03               	skipc
 14874  11FB  120C               	bcf	12,4	;volatile
 14875  11FC  1803               	skipnc
 14876  11FD  160C               	bsf	12,4	;volatile
 14877                           
 14878                           ;LEDs.c: 39: break;
 14879                           
 14880                           ;LEDs.c: 38: case 6:
 14881                           
 14882                           ;LEDs.c: 37: break;
 14883  11FE  0008               	return
 14884  11FF                     i1l770:	
 14885                           ;LEDs.c: 40: case 100:
 14886                           
 14887                           
 14888                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 14889  11FF  140C               	bsf	12,0	;volatile
 14890                           
 14891                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 14892  1200  148C               	bsf	12,1	;volatile
 14893                           
 14894                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 14895  1201  150C               	bsf	12,2	;volatile
 14896                           
 14897                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 14898  1202  158C               	bsf	12,3	;volatile
 14899                           
 14900                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 14901  1203  160C               	bsf	12,4	;volatile
 14902                           
 14903                           ;LEDs.c: 47: }
 14904                           
 14905                           ;LEDs.c: 46: break;
 14906  1204  0008               	return
 14907  1205                     i1l5375:	
 14908                           
 14909                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14910                           ; Switch size 1, requested type "space"
 14911                           ; Number of cases is 1, Range of values is 0 to 0
 14912                           ; switch strategies available:
 14913                           ; Name         Instructions Cycles
 14914                           ; simple_byte            4     3 (average)
 14915                           ; direct_byte            8     6 (fixed)
 14916                           ; jumptable            260     6 (fixed)
 14917                           ;	Chosen strategy is simple_byte
 14918  1205  0871               	movf	i1set_leds_top@x+1,w
 14919  1206  3A00               	xorlw	0	; case 0
 14920  1207  1903               	skipnz
 14921  1208  2A0A               	goto	i1l7721
 14922  1209  2A21               	goto	i1l771
 14923  120A                     i1l7721:	
 14924                           
 14925                           ; Switch size 1, requested type "space"
 14926                           ; Number of cases is 7, Range of values is 1 to 100
 14927                           ; switch strategies available:
 14928                           ; Name         Instructions Cycles
 14929                           ; simple_byte           22    12 (average)
 14930                           ; direct_byte          209     9 (fixed)
 14931                           ; jumptable            263     9 (fixed)
 14932                           ;	Chosen strategy is simple_byte
 14933  120A  0870               	movf	i1set_leds_top@x,w
 14934  120B  3A01               	xorlw	1	; case 1
 14935  120C  1903               	skipnz
 14936  120D  29E1               	goto	i1l5363
 14937  120E  3A03               	xorlw	3	; case 2
 14938  120F  1903               	skipnz
 14939  1210  29E7               	goto	i1l5365
 14940  1211  3A01               	xorlw	1	; case 3
 14941  1212  1903               	skipnz
 14942  1213  29ED               	goto	i1l5367
 14943  1214  3A07               	xorlw	7	; case 4
 14944  1215  1903               	skipnz
 14945  1216  29F3               	goto	i1l5369
 14946  1217  3A01               	xorlw	1	; case 5
 14947  1218  1903               	skipnz
 14948  1219  29F9               	goto	i1l5371
 14949  121A  3A03               	xorlw	3	; case 6
 14950  121B  1903               	skipnz
 14951  121C  2A21               	goto	i1l771
 14952  121D  3A62               	xorlw	98	; case 100
 14953  121E  1903               	skipnz
 14954  121F  29FF               	goto	i1l770
 14955  1220  2A21               	goto	i1l771
 14956  1221                     i1l771:	
 14957  1221  0008               	return
 14958  1222                     __end_ofi1_set_leds_top:	
 14959                           
 14960                           	psect	text51
 14961  10CE                     __ptext51:	
 14962 ;; *************** function _modulation *****************
 14963 ;; Defined at:
 14964 ;;		line 187 in file "user.c"
 14965 ;; Parameters:    Size  Location     Type
 14966 ;;  x               4   14[BANK0 ] long 
 14967 ;;  y               4   18[BANK0 ] long 
 14968 ;; Auto vars:     Size  Location     Type
 14969 ;;		None
 14970 ;; Return value:  Size  Location     Type
 14971 ;;                  4   14[BANK0 ] long 
 14972 ;; Registers used:
 14973 ;;		wreg, status,2, status,0, pclath, cstack
 14974 ;; Tracked objects:
 14975 ;;		On entry : 0/0
 14976 ;;		On exit  : 0/0
 14977 ;;		Unchanged: 0/0
 14978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14979 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14980 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14981 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14982 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14983 ;;Total ram usage:       12 bytes
 14984 ;; Hardware stack levels used:    1
 14985 ;; Hardware stack levels required when called:    1
 14986 ;; This function calls:
 14987 ;;		i1___aldiv
 14988 ;;		i1___lmul
 14989 ;; This function is called by:
 14990 ;;		_isr
 14991 ;; This function uses a non-reentrant model
 14992 ;;
 14993                           
 14994                           
 14995                           ;psect for function _modulation
 14996  10CE                     _modulation:	
 14997                           
 14998                           ;user.c: 190: return (127500 + (y * x)) / 1000;
 14999                           
 15000                           ;incstack = 0
 15001                           ; Regs used in _modulation: [wreg+status,2+status,0+pclath+cstack]
 15002  10CE  3000               	movlw	0
 15003  10CF  0020               	movlb	0	; select bank0
 15004  10D0  00A3               	movwf	i1___aldiv@divisor+3
 15005  10D1  3000               	movlw	0
 15006  10D2  00A2               	movwf	i1___aldiv@divisor+2
 15007  10D3  3003               	movlw	3
 15008  10D4  00A1               	movwf	i1___aldiv@divisor+1
 15009  10D5  30E8               	movlw	232
 15010  10D6  00A0               	movwf	i1___aldiv@divisor
 15011  10D7  300C               	movlw	12
 15012  10D8  00B6               	movwf	??_modulation
 15013  10D9  30F2               	movlw	242
 15014  10DA  00B7               	movwf	??_modulation+1
 15015  10DB  3001               	movlw	1
 15016  10DC  00B8               	movwf	??_modulation+2
 15017  10DD  3000               	movlw	0
 15018  10DE  00B9               	movwf	??_modulation+3
 15019  10DF  0835               	movf	modulation@y+3,w
 15020  10E0  00F3               	movwf	i1___lmul@multiplier+3
 15021  10E1  0834               	movf	modulation@y+2,w
 15022  10E2  00F2               	movwf	i1___lmul@multiplier+2
 15023  10E3  0833               	movf	modulation@y+1,w
 15024  10E4  00F1               	movwf	i1___lmul@multiplier+1
 15025  10E5  0832               	movf	modulation@y,w
 15026  10E6  00F0               	movwf	i1___lmul@multiplier
 15027  10E7  0831               	movf	modulation@x+3,w
 15028  10E8  00F7               	movwf	i1___lmul@multiplicand+3
 15029  10E9  0830               	movf	modulation@x+2,w
 15030  10EA  00F6               	movwf	i1___lmul@multiplicand+2
 15031  10EB  082F               	movf	modulation@x+1,w
 15032  10EC  00F5               	movwf	i1___lmul@multiplicand+1
 15033  10ED  082E               	movf	modulation@x,w
 15034  10EE  00F4               	movwf	i1___lmul@multiplicand
 15035  10EF  319D  25A1  3190   	fcall	i1___lmul
 15036  10F2  0870               	movf	?i1___lmul,w
 15037  10F3  0020               	movlb	0	; select bank0
 15038  10F4  07B6               	addwf	??_modulation,f
 15039  10F5  0871               	movf	?i1___lmul+1,w
 15040  10F6  3DB7               	addwfc	??_modulation+1,f
 15041  10F7  0872               	movf	?i1___lmul+2,w
 15042  10F8  3DB8               	addwfc	??_modulation+2,f
 15043  10F9  0873               	movf	?i1___lmul+3,w
 15044  10FA  3DB9               	addwfc	??_modulation+3,f
 15045  10FB  0839               	movf	??_modulation+3,w
 15046  10FC  00A7               	movwf	i1___aldiv@dividend+3
 15047  10FD  0838               	movf	??_modulation+2,w
 15048  10FE  00A6               	movwf	i1___aldiv@dividend+2
 15049  10FF  0837               	movf	??_modulation+1,w
 15050  1100  00A5               	movwf	i1___aldiv@dividend+1
 15051  1101  0836               	movf	??_modulation,w
 15052  1102  00A4               	movwf	i1___aldiv@dividend
 15053  1103  3195  2529         	fcall	i1___aldiv
 15054  1105  0020               	movlb	0	; select bank0
 15055  1106  0823               	movf	?i1___aldiv+3,w
 15056  1107  00B1               	movwf	?_modulation+3
 15057  1108  0822               	movf	?i1___aldiv+2,w
 15058  1109  00B0               	movwf	?_modulation+2
 15059  110A  0821               	movf	?i1___aldiv+1,w
 15060  110B  00AF               	movwf	?_modulation+1
 15061  110C  0820               	movf	?i1___aldiv,w
 15062  110D  00AE               	movwf	?_modulation
 15063  110E  0008               	return
 15064  110F                     __end_of_modulation:	
 15065                           
 15066                           	psect	text52
 15067  1DA1                     __ptext52:	
 15068 ;; *************** function i1___lmul *****************
 15069 ;; Defined at:
 15070 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 15071 ;; Parameters:    Size  Location     Type
 15072 ;;  multiplier      4    0[COMMON] unsigned long 
 15073 ;;  multiplicand    4    4[COMMON] unsigned long 
 15074 ;; Auto vars:     Size  Location     Type
 15075 ;;  __lmul          4    8[COMMON] unsigned long 
 15076 ;; Return value:  Size  Location     Type
 15077 ;;                  4    0[COMMON] unsigned long 
 15078 ;; Registers used:
 15079 ;;		wreg, status,2, status,0
 15080 ;; Tracked objects:
 15081 ;;		On entry : 0/0
 15082 ;;		On exit  : 0/0
 15083 ;;		Unchanged: 0/0
 15084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15085 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15086 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15088 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15089 ;;Total ram usage:       12 bytes
 15090 ;; Hardware stack levels used:    1
 15091 ;; This function calls:
 15092 ;;		Nothing
 15093 ;; This function is called by:
 15094 ;;		_modulation
 15095 ;; This function uses a non-reentrant model
 15096 ;;
 15097                           
 15098                           
 15099                           ;psect for function i1___lmul
 15100  1DA1                     i1___lmul:	
 15101                           
 15102                           ;incstack = 0
 15103                           ; Regs used in i1___lmul: [wreg+status,2+status,0]
 15104  1DA1  3000               	movlw	0
 15105  1DA2  00FB               	movwf	i1___lmul@product+3
 15106  1DA3  3000               	movlw	0
 15107  1DA4  00FA               	movwf	i1___lmul@product+2
 15108  1DA5  3000               	movlw	0
 15109  1DA6  00F9               	movwf	i1___lmul@product+1
 15110  1DA7  3000               	movlw	0
 15111  1DA8  00F8               	movwf	i1___lmul@product
 15112  1DA9                     i1l4787:	
 15113  1DA9  1C70               	btfss	i1___lmul@multiplier,0
 15114  1DAA  2DB3               	goto	i1l4791
 15115  1DAB  0874               	movf	i1___lmul@multiplicand,w
 15116  1DAC  07F8               	addwf	i1___lmul@product,f
 15117  1DAD  0875               	movf	i1___lmul@multiplicand+1,w
 15118  1DAE  3DF9               	addwfc	i1___lmul@product+1,f
 15119  1DAF  0876               	movf	i1___lmul@multiplicand+2,w
 15120  1DB0  3DFA               	addwfc	i1___lmul@product+2,f
 15121  1DB1  0877               	movf	i1___lmul@multiplicand+3,w
 15122  1DB2  3DFB               	addwfc	i1___lmul@product+3,f
 15123  1DB3                     i1l4791:	
 15124  1DB3  3001               	movlw	1
 15125  1DB4                     u409_25:	
 15126  1DB4  35F4               	lslf	i1___lmul@multiplicand,f
 15127  1DB5  0DF5               	rlf	i1___lmul@multiplicand+1,f
 15128  1DB6  0DF6               	rlf	i1___lmul@multiplicand+2,f
 15129  1DB7  0DF7               	rlf	i1___lmul@multiplicand+3,f
 15130  1DB8  0B89               	decfsz	9,f
 15131  1DB9  2DB4               	goto	u409_25
 15132  1DBA  3001               	movlw	1
 15133  1DBB                     u410_25:	
 15134  1DBB  36F3               	lsrf	i1___lmul@multiplier+3,f
 15135  1DBC  0CF2               	rrf	i1___lmul@multiplier+2,f
 15136  1DBD  0CF1               	rrf	i1___lmul@multiplier+1,f
 15137  1DBE  0CF0               	rrf	i1___lmul@multiplier,f
 15138  1DBF  0B89               	decfsz	9,f
 15139  1DC0  2DBB               	goto	u410_25
 15140  1DC1  0873               	movf	i1___lmul@multiplier+3,w
 15141  1DC2  0472               	iorwf	i1___lmul@multiplier+2,w
 15142  1DC3  0471               	iorwf	i1___lmul@multiplier+1,w
 15143  1DC4  0470               	iorwf	i1___lmul@multiplier,w
 15144  1DC5  1D03               	skipz
 15145  1DC6  2DA9               	goto	i1l4787
 15146  1DC7  087B               	movf	i1___lmul@product+3,w
 15147  1DC8  00F3               	movwf	?i1___lmul+3
 15148  1DC9  087A               	movf	i1___lmul@product+2,w
 15149  1DCA  00F2               	movwf	?i1___lmul+2
 15150  1DCB  0879               	movf	i1___lmul@product+1,w
 15151  1DCC  00F1               	movwf	?i1___lmul+1
 15152  1DCD  0878               	movf	i1___lmul@product,w
 15153  1DCE  00F0               	movwf	?i1___lmul
 15154  1DCF  0008               	return
 15155  1DD0                     __end_ofi1___lmul:	
 15156                           
 15157                           	psect	text53
 15158  1529                     __ptext53:	
 15159 ;; *************** function i1___aldiv *****************
 15160 ;; Defined at:
 15161 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
 15162 ;; Parameters:    Size  Location     Type
 15163 ;;  divisor         4    0[BANK0 ] long 
 15164 ;;  dividend        4    4[BANK0 ] long 
 15165 ;; Auto vars:     Size  Location     Type
 15166 ;;  __aldiv         4   10[BANK0 ] long 
 15167 ;;  __aldiv         1    9[BANK0 ] unsigned char 
 15168 ;;  __aldiv         1    8[BANK0 ] unsigned char 
 15169 ;; Return value:  Size  Location     Type
 15170 ;;                  4    0[BANK0 ] long 
 15171 ;; Registers used:
 15172 ;;		wreg, status,2, status,0
 15173 ;; Tracked objects:
 15174 ;;		On entry : 0/0
 15175 ;;		On exit  : 0/0
 15176 ;;		Unchanged: 0/0
 15177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15178 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15179 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15180 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15181 ;;      Totals:         1      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15182 ;;Total ram usage:       15 bytes
 15183 ;; Hardware stack levels used:    1
 15184 ;; This function calls:
 15185 ;;		Nothing
 15186 ;; This function is called by:
 15187 ;;		_modulation
 15188 ;; This function uses a non-reentrant model
 15189 ;;
 15190                           
 15191                           
 15192                           ;psect for function i1___aldiv
 15193  1529                     i1___aldiv:	
 15194                           
 15195                           ;incstack = 0
 15196                           ; Regs used in i1___aldiv: [wreg+status,2+status,0]
 15197  1529  0020               	movlb	0	; select bank0
 15198  152A  01A9               	clrf	i1___aldiv@sign
 15199  152B  1FA3               	btfss	i1___aldiv@divisor+3,7
 15200  152C  2D3A               	goto	i1l1789
 15201  152D  09A0               	comf	i1___aldiv@divisor,f
 15202  152E  09A1               	comf	i1___aldiv@divisor+1,f
 15203  152F  09A2               	comf	i1___aldiv@divisor+2,f
 15204  1530  09A3               	comf	i1___aldiv@divisor+3,f
 15205  1531  0AA0               	incf	i1___aldiv@divisor,f
 15206  1532  1903               	skipnz
 15207  1533  0AA1               	incf	i1___aldiv@divisor+1,f
 15208  1534  1903               	skipnz
 15209  1535  0AA2               	incf	i1___aldiv@divisor+2,f
 15210  1536  1903               	skipnz
 15211  1537  0AA3               	incf	i1___aldiv@divisor+3,f
 15212  1538  01A9               	clrf	i1___aldiv@sign
 15213  1539  0AA9               	incf	i1___aldiv@sign,f
 15214  153A                     i1l1789:	
 15215  153A  1FA7               	btfss	i1___aldiv@dividend+3,7
 15216  153B  2D4B               	goto	i1l4809
 15217  153C  09A4               	comf	i1___aldiv@dividend,f
 15218  153D  09A5               	comf	i1___aldiv@dividend+1,f
 15219  153E  09A6               	comf	i1___aldiv@dividend+2,f
 15220  153F  09A7               	comf	i1___aldiv@dividend+3,f
 15221  1540  0AA4               	incf	i1___aldiv@dividend,f
 15222  1541  1903               	skipnz
 15223  1542  0AA5               	incf	i1___aldiv@dividend+1,f
 15224  1543  1903               	skipnz
 15225  1544  0AA6               	incf	i1___aldiv@dividend+2,f
 15226  1545  1903               	skipnz
 15227  1546  0AA7               	incf	i1___aldiv@dividend+3,f
 15228  1547  3001               	movlw	1
 15229  1548  00FC               	movwf	??i1___aldiv
 15230  1549  087C               	movf	??i1___aldiv,w
 15231  154A  06A9               	xorwf	i1___aldiv@sign,f
 15232  154B                     i1l4809:	
 15233  154B  3000               	movlw	0
 15234  154C  00AD               	movwf	i1___aldiv@quotient+3
 15235  154D  3000               	movlw	0
 15236  154E  00AC               	movwf	i1___aldiv@quotient+2
 15237  154F  3000               	movlw	0
 15238  1550  00AB               	movwf	i1___aldiv@quotient+1
 15239  1551  3000               	movlw	0
 15240  1552  00AA               	movwf	i1___aldiv@quotient
 15241  1553  0823               	movf	i1___aldiv@divisor+3,w
 15242  1554  0422               	iorwf	i1___aldiv@divisor+2,w
 15243  1555  0421               	iorwf	i1___aldiv@divisor+1,w
 15244  1556  0420               	iorwf	i1___aldiv@divisor,w
 15245  1557  1903               	skipnz
 15246  1558  2D94               	goto	i1l4831
 15247  1559  01A8               	clrf	i1___aldiv@counter
 15248  155A  0AA8               	incf	i1___aldiv@counter,f
 15249  155B                     i1l4817:	
 15250  155B  1BA3               	btfsc	i1___aldiv@divisor+3,7
 15251  155C  2D69               	goto	i1l4819
 15252  155D  3001               	movlw	1
 15253  155E                     u415_25:	
 15254  155E  35A0               	lslf	i1___aldiv@divisor,f
 15255  155F  0DA1               	rlf	i1___aldiv@divisor+1,f
 15256  1560  0DA2               	rlf	i1___aldiv@divisor+2,f
 15257  1561  0DA3               	rlf	i1___aldiv@divisor+3,f
 15258  1562  0B89               	decfsz	9,f
 15259  1563  2D5E               	goto	u415_25
 15260  1564  3001               	movlw	1
 15261  1565  00FC               	movwf	??i1___aldiv
 15262  1566  087C               	movf	??i1___aldiv,w
 15263  1567  07A8               	addwf	i1___aldiv@counter,f
 15264  1568  2D5B               	goto	i1l4817
 15265  1569                     i1l4819:	
 15266  1569  3001               	movlw	1
 15267  156A                     u417_25:	
 15268  156A  35AA               	lslf	i1___aldiv@quotient,f
 15269  156B  0DAB               	rlf	i1___aldiv@quotient+1,f
 15270  156C  0DAC               	rlf	i1___aldiv@quotient+2,f
 15271  156D  0DAD               	rlf	i1___aldiv@quotient+3,f
 15272  156E  0B89               	decfsz	9,f
 15273  156F  2D6A               	goto	u417_25
 15274  1570  0823               	movf	i1___aldiv@divisor+3,w
 15275  1571  0227               	subwf	i1___aldiv@dividend+3,w
 15276  1572  1D03               	skipz
 15277  1573  2D7E               	goto	u418_25
 15278  1574  0822               	movf	i1___aldiv@divisor+2,w
 15279  1575  0226               	subwf	i1___aldiv@dividend+2,w
 15280  1576  1D03               	skipz
 15281  1577  2D7E               	goto	u418_25
 15282  1578  0821               	movf	i1___aldiv@divisor+1,w
 15283  1579  0225               	subwf	i1___aldiv@dividend+1,w
 15284  157A  1D03               	skipz
 15285  157B  2D7E               	goto	u418_25
 15286  157C  0820               	movf	i1___aldiv@divisor,w
 15287  157D  0224               	subwf	i1___aldiv@dividend,w
 15288  157E                     u418_25:	
 15289  157E  1C03               	skipc
 15290  157F  2D89               	goto	i1l4827
 15291  1580  0820               	movf	i1___aldiv@divisor,w
 15292  1581  02A4               	subwf	i1___aldiv@dividend,f
 15293  1582  0821               	movf	i1___aldiv@divisor+1,w
 15294  1583  3BA5               	subwfb	i1___aldiv@dividend+1,f
 15295  1584  0822               	movf	i1___aldiv@divisor+2,w
 15296  1585  3BA6               	subwfb	i1___aldiv@dividend+2,f
 15297  1586  0823               	movf	i1___aldiv@divisor+3,w
 15298  1587  3BA7               	subwfb	i1___aldiv@dividend+3,f
 15299  1588  142A               	bsf	i1___aldiv@quotient,0
 15300  1589                     i1l4827:	
 15301  1589  3001               	movlw	1
 15302  158A                     u419_25:	
 15303  158A  36A3               	lsrf	i1___aldiv@divisor+3,f
 15304  158B  0CA2               	rrf	i1___aldiv@divisor+2,f
 15305  158C  0CA1               	rrf	i1___aldiv@divisor+1,f
 15306  158D  0CA0               	rrf	i1___aldiv@divisor,f
 15307  158E  0B89               	decfsz	9,f
 15308  158F  2D8A               	goto	u419_25
 15309  1590  3001               	movlw	1
 15310  1591  02A8               	subwf	i1___aldiv@counter,f
 15311  1592  1D03               	btfss	3,2
 15312  1593  2D69               	goto	i1l4819
 15313  1594                     i1l4831:	
 15314  1594  0829               	movf	i1___aldiv@sign,w
 15315  1595  1903               	btfsc	3,2
 15316  1596  2DA2               	goto	i1l4835
 15317  1597  09AA               	comf	i1___aldiv@quotient,f
 15318  1598  09AB               	comf	i1___aldiv@quotient+1,f
 15319  1599  09AC               	comf	i1___aldiv@quotient+2,f
 15320  159A  09AD               	comf	i1___aldiv@quotient+3,f
 15321  159B  0AAA               	incf	i1___aldiv@quotient,f
 15322  159C  1903               	skipnz
 15323  159D  0AAB               	incf	i1___aldiv@quotient+1,f
 15324  159E  1903               	skipnz
 15325  159F  0AAC               	incf	i1___aldiv@quotient+2,f
 15326  15A0  1903               	skipnz
 15327  15A1  0AAD               	incf	i1___aldiv@quotient+3,f
 15328  15A2                     i1l4835:	
 15329  15A2  082D               	movf	i1___aldiv@quotient+3,w
 15330  15A3  00A3               	movwf	?i1___aldiv+3
 15331  15A4  082C               	movf	i1___aldiv@quotient+2,w
 15332  15A5  00A2               	movwf	?i1___aldiv+2
 15333  15A6  082B               	movf	i1___aldiv@quotient+1,w
 15334  15A7  00A1               	movwf	?i1___aldiv+1
 15335  15A8  082A               	movf	i1___aldiv@quotient,w
 15336  15A9  00A0               	movwf	?i1___aldiv
 15337  15AA  0008               	return
 15338  15AB                     __end_ofi1___aldiv:	
 15339                           
 15340                           	psect	text54
 15341  1357                     __ptext54:	
 15342 ;; *************** function ___awdiv *****************
 15343 ;; Defined at:
 15344 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 15345 ;; Parameters:    Size  Location     Type
 15346 ;;  divisor         2    0[COMMON] int 
 15347 ;;  dividend        2    2[COMMON] int 
 15348 ;; Auto vars:     Size  Location     Type
 15349 ;;  quotient        2    7[COMMON] int 
 15350 ;;  sign            1    6[COMMON] unsigned char 
 15351 ;;  counter         1    5[COMMON] unsigned char 
 15352 ;; Return value:  Size  Location     Type
 15353 ;;                  2    0[COMMON] int 
 15354 ;; Registers used:
 15355 ;;		wreg, status,2, status,0
 15356 ;; Tracked objects:
 15357 ;;		On entry : 0/0
 15358 ;;		On exit  : 0/0
 15359 ;;		Unchanged: 0/0
 15360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15361 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15362 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15363 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15364 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15365 ;;Total ram usage:        9 bytes
 15366 ;; Hardware stack levels used:    1
 15367 ;; This function calls:
 15368 ;;		Nothing
 15369 ;; This function is called by:
 15370 ;;		_isr
 15371 ;;		_USARTWriteInt
 15372 ;; This function uses a non-reentrant model
 15373 ;;
 15374                           
 15375                           
 15376                           ;psect for function ___awdiv
 15377  1357                     ___awdiv:	
 15378                           
 15379                           ;incstack = 0
 15380                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 15381  1357  01F6               	clrf	___awdiv@sign
 15382  1358  1FF1               	btfss	___awdiv@divisor+1,7
 15383  1359  2B61               	goto	i1l5325
 15384  135A  09F0               	comf	___awdiv@divisor,f
 15385  135B  09F1               	comf	___awdiv@divisor+1,f
 15386  135C  0AF0               	incf	___awdiv@divisor,f
 15387  135D  1903               	skipnz
 15388  135E  0AF1               	incf	___awdiv@divisor+1,f
 15389  135F  01F6               	clrf	___awdiv@sign
 15390  1360  0AF6               	incf	___awdiv@sign,f
 15391  1361                     i1l5325:	
 15392  1361  1FF3               	btfss	___awdiv@dividend+1,7
 15393  1362  2B6C               	goto	i1l5331
 15394  1363  09F2               	comf	___awdiv@dividend,f
 15395  1364  09F3               	comf	___awdiv@dividend+1,f
 15396  1365  0AF2               	incf	___awdiv@dividend,f
 15397  1366  1903               	skipnz
 15398  1367  0AF3               	incf	___awdiv@dividend+1,f
 15399  1368  3001               	movlw	1
 15400  1369  00F4               	movwf	??___awdiv
 15401  136A  0874               	movf	??___awdiv,w
 15402  136B  06F6               	xorwf	___awdiv@sign,f
 15403  136C                     i1l5331:	
 15404  136C  01F7               	clrf	___awdiv@quotient
 15405  136D  01F8               	clrf	___awdiv@quotient+1
 15406  136E  0870               	movf	___awdiv@divisor,w
 15407  136F  0471               	iorwf	___awdiv@divisor+1,w
 15408  1370  1903               	btfsc	3,2
 15409  1371  2B9B               	goto	i1l5353
 15410  1372  01F5               	clrf	___awdiv@counter
 15411  1373  0AF5               	incf	___awdiv@counter,f
 15412  1374                     i1l5341:	
 15413  1374  1BF1               	btfsc	___awdiv@divisor+1,7
 15414  1375  2B80               	goto	i1l5343
 15415  1376  3001               	movlw	1
 15416  1377                     u515_25:	
 15417  1377  35F0               	lslf	___awdiv@divisor,f
 15418  1378  0DF1               	rlf	___awdiv@divisor+1,f
 15419  1379  0B89               	decfsz	9,f
 15420  137A  2B77               	goto	u515_25
 15421  137B  3001               	movlw	1
 15422  137C  00F4               	movwf	??___awdiv
 15423  137D  0874               	movf	??___awdiv,w
 15424  137E  07F5               	addwf	___awdiv@counter,f
 15425  137F  2B74               	goto	i1l5341
 15426  1380                     i1l5343:	
 15427  1380  3001               	movlw	1
 15428  1381                     u517_25:	
 15429  1381  35F7               	lslf	___awdiv@quotient,f
 15430  1382  0DF8               	rlf	___awdiv@quotient+1,f
 15431  1383  0B89               	decfsz	9,f
 15432  1384  2B81               	goto	u517_25
 15433  1385  0871               	movf	___awdiv@divisor+1,w
 15434  1386  0273               	subwf	___awdiv@dividend+1,w
 15435  1387  1D03               	skipz
 15436  1388  2B8B               	goto	u518_25
 15437  1389  0870               	movf	___awdiv@divisor,w
 15438  138A  0272               	subwf	___awdiv@dividend,w
 15439  138B                     u518_25:	
 15440  138B  1C03               	skipc
 15441  138C  2B92               	goto	i1l5349
 15442  138D  0870               	movf	___awdiv@divisor,w
 15443  138E  02F2               	subwf	___awdiv@dividend,f
 15444  138F  0871               	movf	___awdiv@divisor+1,w
 15445  1390  3BF3               	subwfb	___awdiv@dividend+1,f
 15446  1391  1477               	bsf	___awdiv@quotient,0
 15447  1392                     i1l5349:	
 15448  1392  3001               	movlw	1
 15449  1393                     u519_25:	
 15450  1393  36F1               	lsrf	___awdiv@divisor+1,f
 15451  1394  0CF0               	rrf	___awdiv@divisor,f
 15452  1395  0B89               	decfsz	9,f
 15453  1396  2B93               	goto	u519_25
 15454  1397  3001               	movlw	1
 15455  1398  02F5               	subwf	___awdiv@counter,f
 15456  1399  1D03               	btfss	3,2
 15457  139A  2B80               	goto	i1l5343
 15458  139B                     i1l5353:	
 15459  139B  0876               	movf	___awdiv@sign,w
 15460  139C  1903               	btfsc	3,2
 15461  139D  2BA3               	goto	i1l5357
 15462  139E  09F7               	comf	___awdiv@quotient,f
 15463  139F  09F8               	comf	___awdiv@quotient+1,f
 15464  13A0  0AF7               	incf	___awdiv@quotient,f
 15465  13A1  1903               	skipnz
 15466  13A2  0AF8               	incf	___awdiv@quotient+1,f
 15467  13A3                     i1l5357:	
 15468  13A3  0878               	movf	___awdiv@quotient+1,w
 15469  13A4  00F1               	movwf	?___awdiv+1
 15470  13A5  0877               	movf	___awdiv@quotient,w
 15471  13A6  00F0               	movwf	?___awdiv
 15472  13A7  0008               	return
 15473  13A8                     __end_of___awdiv:	
 15474  007E                     btemp	set	126	;btemp
 15475  007E                     int$flags	set	126
 15476  007E                     wtemp	set	126
 15477  007E                     wtemp0	set	126
 15478  0080                     wtemp1	set	128
 15479  0082                     wtemp2	set	130
 15480  0084                     wtemp3	set	132
 15481  0086                     wtemp4	set	134
 15482  0088                     wtemp5	set	136
 15483  007F                     wtemp6	set	127
 15484  007E                     ttemp	set	126
 15485  007E                     ttemp0	set	126
 15486  0081                     ttemp1	set	129
 15487  0084                     ttemp2	set	132
 15488  0087                     ttemp3	set	135
 15489  007F                     ttemp4	set	127
 15490  007E                     ltemp	set	126
 15491  007E                     ltemp0	set	126
 15492  0082                     ltemp1	set	130
 15493  0086                     ltemp2	set	134
 15494  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        851
    BSS         287
    Persistent  4
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     37      74
    BANK1            80     80      80
    BANK2            80     49      79
    BANK3            80      0      78
    BANK4            80      6      66
    BANK5            80      0      44
    BANK6            80      0      64
    BANK7            80      0      61
    BANK8            80      0      61
    BANK9            80      0      61
    BANK10           80      0      61
    BANK11           80      0      64
    BANK12           40      0       0
    BANK13            0      0       0
    BANK14            0      0       0
    BANK15            0      0       0
    BANK16            0      0       0
    BANK17            0      0       0
    BANK18            0      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> trunc@expon(BANK2[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _modulation->i1___aldiv
    i1___aldiv->i1___lmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _isr->_modulation
    _modulation->i1___aldiv

Critical Paths under _main in BANK1

    _update_selectMode->_setExpressionDisplay
    _update_selectMode->_setPresetDisplay
    _updateSwitchTap->_setDoublePressState
    _updateSwitchBypass->_setDoublePressState
    _setDoublePressState->_showSave
    _showSave->_ring_tactiles
    _solidring_tactiles->_wait_ms
    _ring_tactiles->_wait_ms
    _setPedalMode->_setExpressionDisplay
    _setPedalMode->_setPresetDisplay
    _setPresetDisplay->_set_leds_top
    _setExpressionDisplay->_set_leds_top
    _resetRingLEDs->_set_leds_top
    _set_subdivision->_trunc
    _trunc->___fttol
    ___fttol->_map
    ___altoft->___fttol
    ___awtoft->___ftpack
    _read_top_tactile->_wait_ms
    _read_bottom_tactile->_wait_ms
    _map->___ftdiv
    ___ftmul->___ftadd
    ___ftdiv->___ftmul
    ___ftadd->___ftpack
    ___ftadd->___ftpack
    _initSwitchBypass->_setSwitchBypassState
    _setSwitchBypassState->_wait_ms
    _wait_ms->___lmul
    _ReadSavedSettings->_set_leds_top

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_set_subdivision
    _set_subdivision->_trunc
    _trunc->___altoft
    ___altoft->___fttol

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _isr in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _isr in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _isr in BANK18

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                21    21      0  119439
                                             34 BANK2     15    15      0
                                              0 BANK4      6     6      0
                _ConfigureOscillator
                            _InitApp
                     _InitializeTaps
                  _ReadSavedSettings
                          _USARTInit
                           ___awtoft
                            ___fttol
                        _adc_convert
                   _initSwitchBypass
                                _map
                _read_bottom_tactile
                   _read_top_tactile
                    _set_subdivision
                 _updateSwitchBypass
                    _updateSwitchTap
                        _update_mode
                  _update_selectMode
 ---------------------------------------------------------------------------------
 (1) _update_selectMode                                    1     1      0    5976
                                              7 BANK1      1     1      0
               _setExpressionDisplay
                   _setPresetDisplay
 ---------------------------------------------------------------------------------
 (1) _update_mode                                          1     1      0   11828
                                              7 BANK1      1     1      0
                      _resetRingLEDs
                       _setPedalMode
 ---------------------------------------------------------------------------------
 (1) _updateSwitchTap                                      9     9      0   27947
                                             28 BANK1      9     9      0
                            ___aldiv
                _setDoublePressState
                    _setLongTapState
 ---------------------------------------------------------------------------------
 (2) _setLongTapState                                      4     2      2     247
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     683
                                              0 BANK1     15     7      8
 ---------------------------------------------------------------------------------
 (1) _updateSwitchBypass                                   2     2      0   29397
                                             28 BANK1      2     2      0
                _setDoublePressState
                   _setFeedbackState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setFeedbackState                                     4     2      2     247
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) _setDoublePressState                                  4     2      2   26779
                                             24 BANK1      4     2      2
                      _resetRingLEDs
                       _setPedalMode
                   _setPresetDisplay
                           _showSave
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _showSave                                             1     1      0    9777
                                             23 BANK1      1     1      0
                      _ring_tactiles
                 _solidring_tactiles
 ---------------------------------------------------------------------------------
 (4) _solidring_tactiles                                   3     3      0    4822
                                             18 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (4) _ring_tactiles                                        5     5      0    4955
                                             18 BANK1      5     5      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _setPedalMode                                         0     0      0    8902
                      _resetRingLEDs
               _setExpressionDisplay
                   _setPresetDisplay
 ---------------------------------------------------------------------------------
 (2) _setPresetDisplay                                     3     3      0    3019
                                              4 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (2) _setExpressionDisplay                                 3     3      0    2957
                                              4 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _resetRingLEDs                                        0     0      0    2926
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (1) _set_subdivision                                     12     8      4   12771
                                             22 BANK2     12     8      4
                           ___awtoft
                            ___ftmul
                            ___fttol
                              _trunc
 ---------------------------------------------------------------------------------
 (2) _trunc                                                9     6      3    4565
                                             79 BANK1      1     1      0
                                             14 BANK2      8     5      3
                           ___altoft
                           ___awtoft (ARG)
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                6     2      4     452
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     987
                                             71 BANK1      8     4      4
                                              0 BANK2      6     6      0
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                                _map (ARG)
 ---------------------------------------------------------------------------------
 (3) ___altoft                                             8     4      4    2805
                                              6 BANK2      8     4      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    3350
                                              8 BANK1      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _read_top_tactile                                     1     1      0    3879
                                             18 BANK1      1     1      0
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _read_bottom_tactile                                  1     1      0    2709
                                             18 BANK1      1     1      0
                    _set_leds_bottom
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _map                                                 18     3     15   14504
                                             53 BANK1     18     3     15
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     430
                                              0 BANK1      3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    3474
                                             21 BANK1     16    10      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    3252
                                             37 BANK1     16    10      6
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             13     7      6    4787
                                              8 BANK1     13     7      6
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2524
                                              0 BANK1      8     3      5
 ---------------------------------------------------------------------------------
 (1) _initSwitchBypass                                     2     2      0    2405
                                             22 BANK1      2     2      0
               _getSwitchBypassState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setSwitchBypassState                                 4     2      2    2371
                                             18 BANK1      4     2      2
            _updateSwitchBypassState
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _wait_ms                                              6     4      2    1831
                                             12 BANK1      6     4      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     374
                                              0 BANK1     12     4      8
 ---------------------------------------------------------------------------------
 (3) _updateSwitchBypassState                              2     0      2      77
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _getSwitchBypassState                                 2     0      2       0
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _adc_convert                                          4     2      2      31
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (1) _USARTInit                                            3     1      2     108
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (1) _ReadSavedSettings                                    1     1      0    3253
                                              4 BANK1      1     1      0
                     _FLASH_ReadWord
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _set_leds_top                                         4     0      4    2048
                                              0 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 (3) _set_leds_bottom                                      2     0      2     878
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadWord                                       3     1      2     327
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (1) _InitializeTaps                                       3     3      0      99
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
                           _init_adc
                           _init_pwm
 ---------------------------------------------------------------------------------
 (2) _init_pwm                                             0     0      0       0
                        _init_timer0
                        _init_timer2
 ---------------------------------------------------------------------------------
 (3) _init_timer2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                 11    11      0    1485
                                             26 BANK0     11    11      0
                            ___awdiv
                         _modulation
                     i1_set_leds_top
 ---------------------------------------------------------------------------------
 (8) i1_set_leds_top                                       4     0      4     236
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (8) _modulation                                          12     4      8     668
                                             14 BANK0     12     4      8
                          i1___aldiv
                           i1___lmul
 ---------------------------------------------------------------------------------
 (9) i1___lmul                                            12     4      8     144
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (9) i1___aldiv                                           15     7      8     352
                                             12 COMMON     1     1      0
                                              0 BANK0     14     6      8
                           i1___lmul (ARG)
 ---------------------------------------------------------------------------------
 (8) ___awdiv                                              9     5      4     556
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _init_adc
     _init_pwm
       _init_timer0
       _init_timer2
   _InitializeTaps
   _ReadSavedSettings
     _FLASH_ReadWord
     _set_leds_bottom
     _set_leds_top
   _USARTInit
   ___awtoft
     ___ftpack
   ___fttol
     ___awtoft (ARG)
       ___ftpack
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     _map (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
   _adc_convert
   _initSwitchBypass
     _getSwitchBypassState
     _setSwitchBypassState
       _updateSwitchBypassState
       _wait_ms
         ___lmul
   _map
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv (ARG)
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftneg (ARG)
   _read_bottom_tactile
     _set_leds_bottom
     _wait_ms
       ___lmul
   _read_top_tactile
     _set_leds_top
     _wait_ms
       ___lmul
   _set_subdivision
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
     _trunc
       ___altoft
         ___ftpack
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
       _frexp (ARG)
   _updateSwitchBypass
     _setDoublePressState
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setPedalMode
         _resetRingLEDs
           _set_leds_bottom
           _set_leds_top
         _setExpressionDisplay
           _set_leds_bottom
           _set_leds_top
         _setPresetDisplay
           _set_leds_bottom
           _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
       _showSave
         _ring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
         _solidring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
       _wait_ms
         ___lmul
     _setFeedbackState
     _setSwitchBypassState
       _updateSwitchBypassState
       _wait_ms
         ___lmul
   _updateSwitchTap
     ___aldiv
     _setDoublePressState
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setPedalMode
         _resetRingLEDs
           _set_leds_bottom
           _set_leds_top
         _setExpressionDisplay
           _set_leds_bottom
           _set_leds_top
         _setPresetDisplay
           _set_leds_bottom
           _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
       _showSave
         _ring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
         _solidring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
       _wait_ms
         ___lmul
     _setLongTapState
   _update_mode
     _resetRingLEDs
       _set_leds_bottom
       _set_leds_top
     _setPedalMode
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setExpressionDisplay
         _set_leds_bottom
         _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
   _update_selectMode
     _setExpressionDisplay
       _set_leds_bottom
       _set_leds_top
     _setPresetDisplay
       _set_leds_bottom
       _set_leds_top

 _isr (ROOT)
   ___awdiv
   _modulation
     i1___aldiv
       i1___lmul (ARG)
     i1___lmul
   i1_set_leds_top

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     25      4A       5       92.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     50      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     31      4F       9       98.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4E      11       97.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      6      42      13       82.5%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      2C      15       55.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
ABS                  0      0     327      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      40      18       80.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0      3D      20       76.3%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0      3D      22       76.3%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0      3D      24       76.3%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0      3D      26       76.3%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
DATA                 0      0     327      28        0.0%
BANK11              50      0      40      29       80.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITBANK12           50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12              28      0       0      31        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITBANK13           50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BANK13               0      0       0      33        0.0%
BITBANK14           50      0       0      34        0.0%
BANK14               0      0       0      35        0.0%
BITBANK15           50      0       0      36        0.0%
BANK15               0      0       0      37        0.0%
BITBANK16           50      0       0      38        0.0%
BANK16               0      0       0      39        0.0%
BITBANK17           50      0       0      40        0.0%
BANK17               0      0       0      41        0.0%
BITBANK18           50      0       0      42        0.0%
BANK18               0      0       0      43        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Fri Jan 06 22:50:41 2017

                     _update_mode 1E62                      ___altoft@exp 012C                       __CFG_CP$OFF 0000  
                   ___altoft@sign 012D                      ___awdiv@sign 0076                _topTactile_pressed 0160  
      setDoublePressState@f_state 00B8                USARTInit@baud_rate 00A0                   _updateSwitchTap 05F8  
                    ___ftadd@exp1 00B4                      ___ftadd@exp2 00B3                      ___ftadd@sign 00B2  
                             l615 14E5              __size_of_adc_convert 0013                               l388 1E53  
                             l770 1429                               l586 1C90                               l771 144D  
                             l579 09C2                               l780 1F21                               l940 11CF  
                             l782 1F24                               l783 1F48                               l775 1F15  
                             l936 11A8                               l952 12FC                               l777 1F18  
                             l778 1F1B                               l779 1F1E                               l971 07DC  
                             l963 1E92                               l948 12CC                               l973 07E2  
                             l974 07EA                               l975 07FD                               l978 0808  
                             _GIE 005F                               l989 0852                               _RB1 0069  
                             _PR2 001B      solidring_tactiles@ring_delay 00B4                               _map 162D  
                             _isr 0004                               _tap 02A0                      __CFG_BORV$LO 0000  
                             wreg 0009                      __CFG_IESO$ON 0000                      __CFG_FOSC$HS 0000  
             set_subdivision@tmpX 0140           __end_of_set_leds_bottom 1F49                      __CFG_LVP$OFF 0000  
                  i1___aldiv@sign 0029                      ___ftdiv@cntr 00CF                      ___ftdiv@sign 00D4  
                            _B25k 0220                              l1225 0A4E                              l1363 060D  
                            l1377 06C4                              l1902 1494                              l1903 149C  
                            l1649 1185                              l1926 0B4E                              l6201 1411  
                            l6203 1419                              l6205 1421                              l6301 148E  
                            l1789 15BC                              l7021 061E                              ?_map 00D5  
                            l1895 1481                              l7015 0603                              l6225 1F2B  
                            l6209 1430                              l1986 1735                              l7043 0667  
                            l7035 063F                              l7117 119D                              l7061 06A4  
                            l7037 065C                              l6183 1E09                              l7127 11C4  
                            l6343 07F1                              l7311 0F24                              l7303 0EA2  
                            l7223 0BC8                              l6505 124D                              l7137 12C1  
                            l6409 1EA8                              l6257 133B                              l6249 1317  
                            l7057 068D                              l7233 0BD8                              l6187 1E13  
                            l6291 1468                              l7147 12E8                              l6355 1281  
                            l7171 091D                              l7091 0782                              l7059 0695  
                            l7331 0FF7                              l7315 0F6C                              l7307 0EEA  
                            l6197 1401                              l6293 146D                              l6285 1457  
                            l6621 0ADE                              l6357 1291                              l7173 0921  
                            l6277 1EF0                              l6541 107B                              l6533 106A  
                            l7085 0712                              l7077 0706                              l7069 06BC  
                            l7333 0FA3                              l7253 0C5D                              l6199 1409  
                            l6607 1D3C                              l6367 16D3                              l6455 13C5  
                            l7175 0925                              l7183 0936                              l7087 075C  
                            l7335 0FFD                              l7271 0D57                              l7263 0CE9  
                            l7239 0BE7                              l6289 145E                              l6617 0AD7  
                            l6393 172B                              l6385 170C                              l7177 092B  
                            l7185 094F                              l6299 1486                              l6651 0B2D  
                            l6627 0AED                              l6715 17DE                              l6707 17C5  
                            l6395 1739                              l6387 171D                              l7179 092F  
                            l7099 07C2                              l7291 0DFA                              l7259 0CAF  
                            ?_isr 0070                              l6645 0B1A                              l6549 1086  
                            l6901 082B                              l7285 0DBC                              l7711 117B  
                            l6663 0B60                              l6647 0B24                              l6639 0B07  
                            l6751 08CA                              l6735 0887                              l6399 1747  
                            l6591 1616                              l7713 1180                              l6657 0B40  
                            l6649 0B29                              l6729 0871                              l7705 093B  
                            l6577 15DD                              l6569 15CD                              l7715 1436  
                            l7707 1171                              l6667 0B72                              l6659 0B4A  
                            l6763 08E6                              l6747 08C2                              l6931 09F1  
                            l6595 1624                              l6587 160B                              l6579 15EB  
                            l6907 0837                              l7299 0E68                              l7717 1F31  
                            l7709 1176                              l6677 0B8D                              l6693 1784  
                            l6917 084E                              l6909 083C                              l6847 14F8  
                            l6783 1158                              l6687 176E                              l6759 08DE  
                            l6951 0A1F                              l6927 09DE                              l6919 0856  
                            l6849 1501                              l6785 115A                              l6793 1162  
                            l6953 0A27                              l6787 115C                              l6939 09FE  
                            l6971 0A52                              l6789 115E                              l6965 0A3F  
                            l6885 1E8F                              l6983 0A78                              l6991 0A8C  
                            l6879 1E85                              l6887 1E96                              l6977 0A6C  
                            _PEIE 005E                              u7005 17A6                              u7015 17C6  
                            u6215 1315                              u6305 147C                              u7025 17D5  
                            u7105 08CB                              u6225 1339                              u7035 17DF  
                            u7115 08D1                              _RCIE 048D                              u6325 1489  
                            u7230 14FF                              u7215 14DE                              u6175 1E14  
                            u7225 14F1                              u6185 1E1B                              u7145 08E7  
                            u6425 16DB                              u8105 0DF4                              u7155 08ED  
                            u7075 0893                              u8035 0C3E                              u6365 14A3  
                            u6285 1463                              u7085 08A3                              u8125 0E83  
                            u8045 0C5B                              u6550 124B                              u6455 170D  
                            u7415 09D7                              u7335 081A                              u8135 0EA0  
                            u8055 0CCA                              u7185 1D5F                              u6545 122D  
                            u7425 09EA                              u6705 160C                              u6625 1D02  
                            u7265 1E75                              u8145 0F05                              u8065 0CE7  
                            u7195 1D65                              u6395 1286                              u8155 0F22  
                            u6485 172C                              u6575 1CE8                              u7455 0A08  
                            u8183 0FEF                              u8175 0FD7                              u8095 0DD7  
                            u6585 105B                              u7545 0A5D                              u6665 15E0  
                            u7705 0671                              u6835 0B08                              u6925 0B41  
                            u6685 15EC                              u7805 071B                              u6695 1600  
                            u7815 0730                              u6865 0B1B                              u7905 11BD  
                            u7825 0744                              u7675 0648                              u7845 0761  
                            u6895 0B2E                              u7785 06D5                              u6995 1796  
                            u7795 06EB                              u7965 12E1                              u7995 09BB  
                    __CFG_WRT$OFF 0000                     __CFG_FCMEN$ON 0000                              _iCnt 01DC  
                            _main 0BA5                      ___ftpack@arg 00A0                      ___ftpack@exp 00A3  
                            fsr0h 0005                              fsr1h 0007                              fsr0l 0004  
                            indf0 0000                              indf1 0001                              fsr1l 0006  
                            map@x 00D5                              btemp 007E                     __CFG_BOREN$ON 0000  
                            ltemp 007E          __end_of_setFeedbackState 1CF7                              start 0320  
                            ttemp 007E                              wtemp 007E      __end_of_getSwitchBypassState 1C1E  
                 _expressModeCnst 01EB      updateSwitchTap@tapCntDivisor 00C2      __end_of_setSwitchBypassState 126C  
                 ?i1_set_leds_top 0070                     __CFG_MCLRE$ON 0000                      ___ftmul@cntr 00C3  
                    ___ftmul@sign 00C4                   __end_of_InitApp 1E00                      ___fttol@exp1 0125  
                           ??_map 00E4                      ___fttol@lval 0121                             ??_isr 003A  
                 _switchBypass_up 01E4         __size_of_initSwitchBypass 000F                   __end_of___aldiv 162D  
                           ?_main 0070                   __end_of___awdiv 13A8                   __end_of___ftadd 0BA5  
                           _CCPR1 0291                             _CCPR2 0298                             _CCPR3 0311  
                           _CCPR4 0318                             _CCPR5 031C                             _CCPR9 061A  
                   __CFG_WDTE$OFF 0000                   __end_of___ftdiv 1800                   __end_of___ftneg 1C37  
                 __end_of___ftmul 090E                   ___awdiv@divisor 0070                   __end_of___fttol 1757  
                           i1l171 0314                             i1l139 011E                             i1l176 031B  
                           i1l770 11FF                             i1l771 1221                   ___awdiv@counter 0075  
                           _RCREG 0199                             _SPBRG 019B                             _TXREG 019A  
                           _UQEnd 0069               _ConfigureOscillator 1C16                  _setPresetDisplay 1ED4  
                    ?_init_timer0 0070                      ?_init_timer2 0070               ___lmul@multiplicand 00A4  
                 _switchTap_state 016E                 ??_setLongTapState 00A2                     ___awtoft@sign 00AD  
                           _frexp 1E9A                             _myBuf 05A0                             _errno 01C7  
                   ___ftpack@sign 00A4                             _timer 0060                             main@i 025C  
                           _trunc 13A8                  __end_ofi1___lmul 1DD0                             ltemp0 007E  
                           ltemp1 0082                             ltemp2 0086                             ltemp3 0080  
                 __end_of_wait_ms 1E62                __size_of_USARTInit 0043                             ttemp0 007E  
                           ttemp1 0081                             ttemp2 0084                             ttemp3 0087  
                           ttemp4 007F                             status 0003       __end_of_read_bottom_tactile 11DA  
              __size_ofi1___aldiv 0082                             wtemp0 007E                             wtemp1 0080  
                           wtemp2 0082                             wtemp3 0084                             wtemp4 0086  
                           wtemp5 0088                             wtemp6 007F             set_subdivision@scalar 013D  
            ?_ConfigureOscillator 0070                _updateSwitchBypass 09C8           __end_of_updateSwitchTap 07DB  
                 __initialization 0322           _updateSwitchBypassState 07FE                      __end_of_main 1000  
         __size_of_InitializeTaps 0026               i1___lmul@multiplier 0070               ?_updateSwitchBypass 0070  
                  __CFG_LPBOR$OFF 0000            ring_tactiles@iLed_1489 00B5                   _set_subdivision 090E  
                          ??_main 0142                     ___fttol@sign1 0120           __size_of_FLASH_ReadWord 0020  
      __end_of_solidring_tactiles 10CE                    _feedback_timer 0153                    _feedback_state 016C  
                  _feedback_start 015B                  ?_set_leds_bottom 00A0                            ?_frexp 00A0  
                __end_of___altoft 12B7                            _ADRESH 009C                            _ADRESL 009B  
                ___awdiv@dividend 0072               _baseline_delay_time 0045                  __end_of___awtoft 1D53  
                __end_of___ftpack 14B3              ??_updateSwitchBypass 00BC                            ?_trunc 012E  
                          i1l5331 136C                            i1l5341 1374                            i1l5325 1361  
                          i1l1789 153A                            i1l5405 010B                            i1l5343 1380  
                          i1l5431 017E                            i1l5353 139B                            i1l5513 031A  
                          i1l5441 01AC                            i1l5371 11F9                            i1l5363 11E1  
                          i1l5435 0192                            i1l5443 01AE                            i1l5427 016C  
                          i1l5357 13A3                            i1l5349 1392                            i1l5365 11E7  
                          i1l5509 0316                            i1l5453 01E0                            i1l5429 017C  
                          i1l4831 1594                            i1l5367 11ED                            i1l5375 1205  
                          i1l5471 024F                            i1l5463 0209                            i1l5439 019D  
                          i1l5391 00A8                            i1l4817 155B                            i1l4809 154B  
                          i1l5369 11F3                            i1l5481 0272                            i1l5473 0255  
                          i1l5457 01ED                            i1l4835 15A2                            i1l4827 1589  
                          i1l4819 1569                            i1l5483 0278                            i1l5475 0259  
                          i1l5491 02A0                            i1l5459 01FC                            i1l5485 0285  
                          i1l5469 024C                            i1l5397 00C2                            i1l4791 1DB3  
                          i1l5479 026C                            i1l5489 0289                            i1l5497 02E3  
                          i1l4787 1DA9                            i1l7721 120A                            i1l7719 028F  
                          u410_25 1DBB                            u415_25 155E                            _PMADRH 0192  
                          _PMADRL 0191                            u417_25 156A                            u409_25 1DB4  
                          _PMDATH 0194                            u418_25 157E                            _PMDATL 0193  
                          u515_25 1377                            u419_25 158A                            _PMCON2 0196  
                          u524_25 009F                            u541_23 01D0                            u533_23 013A  
                          u517_25 1381                            u518_25 138B                            u550_25 030F  
                          u526_25 00B9                            u519_25 1393                            u528_23 00DB  
                          u545_23 0231                            u546_25 0247                            u547_25 0265  
                          u549_25 02F6                    _debounce_count 01BF                    _debounce_mode1 01C1  
                  _debounce_mode2 01C3                            _URBuff 0320                         ??_InitApp 00A0  
           ??_ConfigureOscillator 00A0          __end_of_read_top_tactile 1307                    __CFG_PWRTE$OFF 0000  
                          ___lmul 1E00                         ??___aldiv 00A8                 _update_selectMode 0801  
                       ??___awdiv 0074                         ??___ftadd 00AE                    __CFG_STVREN$ON 0000  
                       ??___ftdiv 00CB                         ??___ftneg 00A3                         ??___ftmul 00BB  
                       ??___fttol 00EB                  __end_of_init_adc 1C41                            _modSaw 0520  
                          _modSin 03A0                            _modTri 0420                  __end_of_init_pwm 1150  
              ?_update_selectMode 0070                  ___awdiv@quotient 0077             __end_of_resetRingLEDs 1CDD  
               __end_of_USARTInit 1193                      __pdataBANK10 0520                 __end_ofi1___aldiv 15AB  
           ___ftmul@f3_as_product 00C0                      __pdataBIGRAM 23E8           FLASH_ReadWord@flashAddr 00A0  
                __end_of_showSave 1CAB               ??_update_selectMode 00A7              _getSwitchBypassState 1C1A  
                       ??_wait_ms 00AE              _setSwitchBypassState 1222                            trunc@i 0131  
                          trunc@x 012E      __end_of_setExpressionDisplay 1CC3            setLongTapState@f_state 00A0  
         __end_of__initialization 03EC                        ___altoft@c 0126                        ___ftadd@f1 00A8  
                      ___ftadd@f2 00AB                 _bypass_turning_on 015A                        ___ftdiv@f1 00C8  
                      ___ftdiv@f2 00C5                        ___ftdiv@f3 00D0                    _top_push_state 0051  
       ??_updateSwitchBypassState 00A2                        ___ftneg@f1 00A0               _switchBypass_toggle 01D9  
                      ___awtoft@c 00A8             __end_of_ring_tactiles 1357         __end_of_update_selectMode 085A  
         __end_of_set_subdivision 09C8                        ___ftmul@f1 00B5                        ___ftmul@f2 00B8  
               _feedbackTriggered 01DB                        ___fttol@f1 00E7                  ?_updateSwitchTap 0070  
                    ?_update_mode 0070                    __pcstackCOMMON 0070                      __pidataBANK0 1000  
                    __pidataBANK2 1C67                      __pidataBANK3 1C59                      __pidataBANK4 1D79  
                    __pidataBANK7 1013                      __pidataBANK8 1FC3                      __pidataBANK9 1F86  
                   __end_of_frexp 1ED4                     __end_of_trunc 13FA                  _initSwitchBypass 1C75  
                       ?i1___lmul 0070                   _doubleTap_state 0064                    _OPTION_REGbits 0095  
           ?_getSwitchBypassState 00A0             ?_setSwitchBypassState 00B2                           ??_frexp 00A4  
            __size_of_init_timer0 0007              __size_of_init_timer2 0009                 i1___aldiv@divisor 0020  
               i1___aldiv@counter 0028                           ??_trunc 00EF                     ?_setPedalMode 0070  
                      __pbssBANK0 0058                        __pbssBANK2 0151                        __pbssBANK3 01A0  
                      __pbssBANK4 0248                        __pbssBANK5 02A0                        __pbssBANK6 0320  
                ??i1_set_leds_top 0074                   __CFG_VCAPEN$OFF 0000                        __pnvCOMMON 007D  
                      _delayArray 23E8                 ?_setFeedbackState 00A0          __end_of_setPresetDisplay 1F0E  
                      _delay_time 0049                  _long_press_limit 004F      __size_of_setDoublePressState 003E  
                      _delayfound 01C5                        __pmaintext 0BA5                ??_setFeedbackState 00A2  
                  _InitializeTaps 1D53                           ?___lmul 00A0                        __pintentry 0004  
                      _blink_rate 0053                     ??_adc_convert 00A2                         ?___altoft 0126  
                  ___lmul@product 00A8                   _setLongTapState 1CF7                         ?___awtoft 00A8  
                       ?___ftpack 00A0                        ??i1___lmul 0078                    _FLASH_ReadWord 1D11  
 __end_of_updateSwitchBypassState 07FF                       modulation@x 002E                       modulation@y 0032  
                 _debounce_bypass 01BD                    ??_setPedalMode 00A7                USARTWriteInt@F3536 01A0  
                   _suspend_blink 0067                           _UQFront 007D                         ?_init_adc 0070  
                       ?_init_pwm 0070                           _InitApp 1DD0            __end_of_InitializeTaps 1D79  
                   ?_set_leds_top 00A0                        _knob1_prev 0161        __size_of_update_selectMode 0059  
                      _knob2_prev 0163                        _knob3_prev 0165                        _knob4_prev 0167  
                      _knob5_prev 0169                  ?_set_subdivision 0136                         ?_showSave 0070  
                         ___aldiv 15AB                           ___awdiv 1357                   __size_of___lmul 0030  
                         ___ftadd 0AAF                           ___ftdiv 1757                           ___ftneg 1C2E  
                      _knob_1_pos 01C9                        _knob_2_pos 01CB                           ___ftmul 085A  
                      _knob_3_pos 01CD                           ___fttol 16B8                        _knob_4_pos 01CF  
                      _knob_5_pos 01D1                 _switchTap_pressed 0068                        ??___altoft 012A  
            _setExpressionDisplay 1CAB            __end_of_FLASH_ReadWord 1D31                        ??___awtoft 00AB  
                      ??___ftpack 00A5                InitializeTaps@itap 00A1                           __ptext1 0801  
                         __ptext2 1E62                           __ptext3 05F8                           __ptext4 1CF7  
                         __ptext5 15AB                           __ptext6 09C8                           __ptext7 1CDD  
                         __ptext8 1050                           __ptext9 1C97            ??_getSwitchBypassState 00A2  
                       _T2CONbits 001C                  _adjust_sub_delay 01B9                      __size_of_map 008B  
                    __size_of_isr 031C            ??_setSwitchBypassState 00B4               __end_of_adc_convert 1C97  
                ___aldiv@dividend 00A4                           _wait_ms 1E30                           clrloop0 1C4E  
            end_of_initialization 03EC                        _modulation 10CE                           init_ram 1C41  
                      ??_init_adc 00A0                           initloop 1C42                        ??_init_pwm 00A0  
    updateSwitchBypassState@state 00A0                _solidring_tactiles 108E                     _longTap_timer 0155  
                   _longTap_state 0054                     _longTap_start 015C                    ??_set_leds_top 00A4  
               ?_read_top_tactile 0070                   ?_InitializeTaps 0070           __end_of_setLongTapState 1D11  
          i1set_leds_top@ledState 0072                ??_read_top_tactile 00B2                         _RCSTAbits 019D  
                      ??_showSave 00B7                  ___aldiv@quotient 00AB      __size_of_read_bottom_tactile 0047  
             ?_solidring_tactiles 0070         FLASH_ReadWord@GIEBitValue 00A2             ?_setExpressionDisplay 0070  
            __size_of_update_mode 0038                   ?_FLASH_ReadWord 00A0                 _expressionChannel 016B  
                       _PORTAbits 000C                         _PORTCbits 000E                         _PORTDbits 000F  
                       _PORTEbits 0010                        _test_timer 01B5                         _USARTInit 1150  
                       _TRISBbits 008D                         _TRISCbits 008E                         _TRISDbits 008F  
                       _TRISEbits 0090                         _TRISFbits 030C                         _TRISGbits 030D  
                       i1___aldiv 1529           setFeedbackState@f_state 00A0              ??_solidring_tactiles 00B2  
     __end_of_ConfigureOscillator 1C1A                        map@out_max 00E1                        map@out_min 00DE  
     __size_of_updateSwitchBypass 00E7          __end_of_initSwitchBypass 1C84                       _CCP1CONbits 0293  
                     ___ftdiv@exp 00D3          __size_of_set_leds_bottom 003B                       _CCP2CONbits 029A  
                       _TXSTAbits 019E              _switchBypass_pressed 01D7                       _CCP3CONbits 0313  
                     _CCP4CONbits 031A                       _CCP5CONbits 031E                       _CCP6CONbits 0613  
                     _CCP7CONbits 0616                       ___ftmul@exp 00BF                adc_convert@channel 00A3  
                     _CCP8CONbits 0619                       _CCP9CONbits 061C              set_leds_top@ledState 00A2  
                   __pidataBANK10 1F49              __end_of_setPedalMode 07FE                    __end_of___lmul 1E30  
                   __pidataBIGRAM 03F0                      _double_timer 01A5                       _adc_convert 1C84  
                  _switchTap_down 015F             i1___lmul@multiplicand 0074                 __size_ofi1___lmul 002F  
             start_initialization 0322                        ?_USARTInit 00A0             _bottomTactile_pressed 0159  
             _setDoublePressState 1050                        ?i1___aldiv 0020                       __end_of_map 16B8  
                     __end_of_isr 0320                _adjusted_pot_value 01BB                       ?_modulation 002E  
                      frexp@value 00A0            __size_of_resetRingLEDs 001A              ?_setDoublePressState 00B8  
                ?_setLongTapState 00A0                 ?_setPresetDisplay 0070                          ??___lmul 00A8  
          ??_setExpressionDisplay 00A4                ??_setPresetDisplay 00A4                       __pdataBANK0 0045  
                     __pdataBANK2 0161                       __pdataBANK3 01DE                       __pdataBANK4 0220  
                     __pdataBANK7 03A0                       __pdataBANK8 0420                       __pdataBANK9 04A0  
              i1___aldiv@dividend 0024                     _tap_iteration 01E6          __size_of_updateSwitchTap 01E3  
               __size_of___altoft 004B                       __pbssBANK11 05A0         __size_of_setFeedbackState 001A  
               __size_of___awtoft 0022                 __size_of___ftpack 0065                     ??_init_timer0 00A0  
                   ??_init_timer2 00A0              __end_of_set_leds_top 144E                         ___latbits 0003  
  setExpressionDisplay@ledChannel 00A6                _switchBypass_state 0057                     __pcstackBANK0 0020  
                   __pcstackBANK1 00A0                     __pcstackBANK2 0120                     __pcstackBANK4 025C  
          __size_of_ring_tactiles 0050                    _expSwitchState 01EA                     _delay_counter 0151  
                i1___lmul@product 0078          ?_updateSwitchBypassState 00A0                i1___aldiv@quotient 002A  
                  isr@tmpSubDelay 0043                          ?_InitApp 0070                         __pnvBANK0 0069  
                       __pnvBANK3 01EC             ??_setDoublePressState 00BA                 __size_of_init_adc 000A  
               __size_of_init_pwm 0041                          ?___aldiv 00A0                 ??_set_leds_bottom 00A2  
              _currentBypassState 01E9                          ?___awdiv 0070                          ?___ftadd 00A8  
                        ?___ftdiv 00C5                          ?___ftneg 00A0                          ?___ftmul 00B5  
                        ?___fttol 00E7                 __size_of_showSave 0014                       _blink_delay 01DE  
             __size_of_modulation 0041                     _resetRingLEDs 1CC3                       _blink_state 01E8  
                     ??_USARTInit 00A2                        _B25kLength 01EC                          _CCPTMRS0 029D  
                        _CCPTMRS1 029E                          _CCPTMRS2 029F                       ??i1___aldiv 007C  
                        ?_wait_ms 00AC                         _modRevSaw 04A0               _read_bottom_tactile 1193  
                  __size_of_frexp 003A                    _presetModeCnst 016D                    __size_of_trunc 0052  
             __end_of_init_timer0 1C25               __end_of_init_timer2 1C2E                         _mod_value 01D3  
                       _mod_timer 01AD                  ??_InitializeTaps 00A0                   ___aldiv@divisor 00A0  
                 ___aldiv@counter 00A9                    _presetSaveMode 0066                          _LATBbits 010D  
                        _LATDbits 010F                          _LATFbits 038C                          _LATGbits 038D  
                  _mod_delay_time 01E2                         clear_ram0 1C4D                         _tap_timer 005C  
                       _tap_total 01B1             __size_of_setPedalMode 0023                     set_leds_top@x 00A0  
                        _PIR1bits 0011                     _ring_tactiles 1307                  ??_FLASH_ReadWord 00A2  
            ?_read_bottom_tactile 0070           __size_ofi1_set_leds_top 0048         initSwitchBypass@initState 00B6  
                       map@in_max 00DB                         map@in_min 00D8                    ?_resetRingLEDs 0070  
                       _sub_timer 0058                        _ADCON0bits 009D                          i1___lmul 1DA1  
                      _ADCON1bits 009E                         main@i_404 025E                         main@i_405 0260  
        __size_of_set_subdivision 00BA                  set_subdivision@x 0136                  set_subdivision@y 0138  
       __size_of_read_top_tactile 0050     __size_of_getSwitchBypassState 0004     __size_of_setSwitchBypassState 004A  
               ??_updateSwitchTap 00BC                 ___lmul@multiplier 00A0                      _setPedalMode 07DB  
               _ReadSavedSettings 14B3                 ?_initSwitchBypass 0070                 ring_tactiles@iLed 00B3  
                  wait_ms@timeSec 00AC                ?_ReadSavedSettings 0070                    wait_ms@timemsl 00AE  
                       frexp@eptr 00A3       setSwitchBypassState@f_state 00B2                ??_initSwitchBypass 00B6  
                __size_of_InitApp 0030                    ?_ring_tactiles 0070                       _mode1_state 01DD  
                   ??_update_mode 00A7                       _mode2_state 0065             ??_read_bottom_tactile 00B2  
             updateSwitchTap@iCnt 00C4               ??_ReadSavedSettings 00A4                        _APFCONbits 011D  
                __size_of___aldiv 0082                  __size_of___awdiv 0051                  __size_of___ftadd 00F6  
                __size_of___ftdiv 00A9                      ?_adc_convert 00A0                  __size_of___ftneg 0009  
                        ___altoft 126C                  __size_of___ftmul 00B4                  __size_of___fttol 009F  
                        ___awtoft 1D31             __size_of_set_leds_top 0054                          ___ftpack 144E  
                        _map$2558 00E4            _preset_programmning_on 015E                        _ANSELEbits 0190  
                      _ANSELFbits 040C                  set_leds_bottom@x 00A0                  _setFeedbackState 1CDD  
                     _init_timer0 1C1E                       _init_timer2 1C25                _delay_time_changed 01E0  
      __end_of_updateSwitchBypass 0AAF                          __ptext10 108E                          __ptext11 1307  
                        __ptext20 126C                          __ptext12 07DB                          __ptext21 1D31  
                        __ptext13 1ED4                          __ptext30 1C75                          __ptext22 12B7  
                        __ptext14 1CAB                          __ptext31 1222                          __ptext23 1193  
                        __ptext15 1CC3                          __ptext40 1F0E                          __ptext32 1E30  
                        __ptext24 162D                          __ptext16 090E                          __ptext41 1D11  
                        __ptext33 1E00                          __ptext25 1C2E                          __ptext17 13A8  
                        __ptext50 11DA                          __ptext42 1D53                          __ptext34 07FE  
                        __ptext26 085A                          __ptext18 1E9A                          __ptext51 10CE  
                        __ptext43 1DD0                          __ptext35 1C1A                          __ptext27 1757  
                        __ptext19 16B8                          __ptext52 1DA1                          __ptext44 110F  
                        __ptext36 1C84                          __ptext28 0AAF                          __ptext53 1529  
                        __ptext45 1C25                          __ptext37 1150                          __ptext29 144E  
                        __ptext54 1357                          __ptext46 1C1E                          __ptext38 14B3  
                        __ptext47 1C37                          __ptext39 13FA                          __ptext48 1C16  
       __end_of_ReadSavedSettings 1529                  __size_of_wait_ms 0032       __size_of_solidring_tactiles 0040  
                        _ledState 01A9                     _presetChannel 0056                      ??_modulation 0036  
                     _mod_counter 0157                        trunc@expon 0134                          _init_adc 1C37  
                   __size_of_main 045B                          _init_pwm 110F      __size_of_ConfigureOscillator 0004  
                    _set_leds_top 13FA                          _showSave 1C97                          _num_taps 0055  
                        int$flags 007E                   ??_resetRingLEDs 00A4                   i1set_leds_top@x 0070  
             __end_of_update_mode 1E9A                __end_of_modulation 110F                        _INTCONbits 000B  
       __size_of_setPresetDisplay 003A                       _tap_history 0248                 ??_set_subdivision 013A  
                        intlevel1 0000                   _set_leds_bottom 1F0E                        _PMCON1bits 0195  
                 ??_ring_tactiles 00B2                 __CFG_CLKOUTEN$OFF 0000                   _reset_sub_delay 01D5  
                      _OSCCONbits 0099                      _preset_blink 015D                    i1_set_leds_top 11DA  
__size_of_updateSwitchBypassState 0001     __size_of_setExpressionDisplay 0018          __size_of_setLongTapState 001A  
                _read_top_tactile 12B7                      ___aldiv@sign 00AA        __size_of_ReadSavedSettings 0076  
     __end_of_setDoublePressState 108E                      _CCP10CONbits 061F                 _bottom_push_state 004D  
      setPresetDisplay@ledChannel 00A6            __end_ofi1_set_leds_top 1222  
