

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Thu Jan 12 20:46:51 2017

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1527
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	idataBANK4,global,class=CODE,delta=2
     7                           	psect	stringtext,global,class=STRCODE,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    17                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    18                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    19                           	psect	bssBANK7,global,class=BANK7,space=1,delta=1
    20                           	psect	clrtext,global,class=CODE,delta=2
    21                           	psect	inittext,global,class=CODE,delta=2
    22                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    23                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    24                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    25                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    26                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    27                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    28                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    29                           	psect	text1,local,class=CODE,merge=1,delta=2
    30                           	psect	text2,local,class=CODE,merge=1,delta=2
    31                           	psect	text3,local,class=CODE,merge=1,delta=2
    32                           	psect	text4,local,class=CODE,merge=1,delta=2
    33                           	psect	text5,local,class=CODE,merge=1,delta=2
    34                           	psect	text6,local,class=CODE,merge=1,delta=2
    35                           	psect	text7,local,class=CODE,merge=1,delta=2
    36                           	psect	text8,local,class=CODE,merge=1,delta=2
    37                           	psect	text9,local,class=CODE,merge=1,delta=2
    38                           	psect	text10,local,class=CODE,merge=1,delta=2
    39                           	psect	text11,local,class=CODE,merge=1,delta=2
    40                           	psect	text12,local,class=CODE,merge=1,delta=2
    41                           	psect	text13,local,class=CODE,merge=1,delta=2
    42                           	psect	text14,local,class=CODE,merge=1,delta=2
    43                           	psect	text15,local,class=CODE,merge=1,delta=2
    44                           	psect	text16,local,class=CODE,merge=1,delta=2
    45                           	psect	text17,local,class=CODE,merge=1,delta=2
    46                           	psect	text18,local,class=CODE,merge=1,delta=2
    47                           	psect	text19,local,class=CODE,merge=1,delta=2
    48                           	psect	text20,local,class=CODE,merge=1,delta=2
    49                           	psect	text21,local,class=CODE,merge=1,delta=2
    50                           	psect	text22,local,class=CODE,merge=1,delta=2
    51                           	psect	text23,local,class=CODE,merge=1,delta=2
    52                           	psect	text24,local,class=CODE,merge=1,delta=2
    53                           	psect	text25,local,class=CODE,merge=1,delta=2
    54                           	psect	text26,local,class=CODE,merge=1,delta=2
    55                           	psect	text27,local,class=CODE,merge=1,delta=2
    56                           	psect	text28,local,class=CODE,merge=1,delta=2
    57                           	psect	text29,local,class=CODE,merge=1,delta=2
    58                           	psect	text30,local,class=CODE,merge=1,delta=2
    59                           	psect	text31,local,class=CODE,merge=1,delta=2
    60                           	psect	text32,local,class=CODE,merge=1,delta=2
    61                           	psect	text33,local,class=CODE,merge=1,delta=2
    62                           	psect	text34,local,class=CODE,merge=1,delta=2
    63                           	psect	text35,local,class=CODE,merge=1,delta=2
    64                           	psect	text36,local,class=CODE,merge=1,delta=2
    65                           	psect	text37,local,class=CODE,merge=1,delta=2
    66                           	psect	text38,local,class=CODE,merge=1,delta=2
    67                           	psect	text39,local,class=CODE,merge=1,delta=2
    68                           	psect	text40,local,class=CODE,merge=1,delta=2
    69                           	psect	text41,local,class=CODE,merge=1,delta=2
    70                           	psect	text42,local,class=CODE,merge=1,delta=2
    71                           	psect	text43,local,class=CODE,merge=1,delta=2
    72                           	psect	text44,local,class=CODE,merge=1,delta=2
    73                           	psect	text45,local,class=CODE,merge=1,delta=2
    74                           	psect	text46,local,class=CODE,merge=1,delta=2
    75                           	psect	text47,local,class=CODE,merge=1,delta=2
    76                           	psect	text48,local,class=CODE,merge=1,delta=2
    77                           	psect	text49,local,class=CODE,merge=1,delta=2
    78                           	psect	text50,local,class=CODE,merge=1,delta=2
    79                           	psect	text51,local,class=CODE,merge=1,delta=2
    80                           	psect	text52,local,class=CODE,merge=1,delta=2
    81                           	psect	text53,local,class=CODE,merge=1,delta=2
    82                           	psect	text54,local,class=CODE,merge=1,delta=2
    83                           	psect	text55,local,class=CODE,merge=1,delta=2
    84                           	psect	text56,local,class=CODE,merge=1,delta=2
    85                           	psect	text57,local,class=CODE,merge=1,delta=2
    86                           	psect	text58,local,class=CODE,merge=1,delta=2
    87                           	psect	text59,local,class=CODE,merge=1,delta=2
    88                           	psect	text60,local,class=CODE,merge=1,delta=2
    89                           	psect	text61,local,class=CODE,merge=1,delta=2
    90                           	psect	text62,local,class=CODE,merge=1,delta=2
    91                           	psect	text63,local,class=CODE,merge=1,delta=2
    92                           	psect	text64,local,class=CODE,merge=1,delta=2
    93                           	psect	text65,local,class=CODE,merge=1,delta=2
    94                           	psect	text66,local,class=CODE,merge=1,delta=2
    95                           	psect	text67,local,class=CODE,merge=1,delta=2
    96                           	psect	text68,local,class=CODE,merge=1,delta=2
    97                           	psect	text69,local,class=CODE,merge=1,delta=2
    98                           	psect	intentry,global,class=CODE,delta=2
    99                           	psect	text71,local,class=CODE,merge=1,delta=2
   100                           	psect	text72,local,class=CODE,merge=1,delta=2
   101                           	psect	text73,local,class=CODE,merge=1,delta=2
   102                           	psect	text74,local,class=CODE,merge=1,delta=2
   103                           	psect	text75,local,class=CODE,merge=1,delta=2
   104                           	dabs	1,0x920,80
   105                           	dabs	1,0x8A0,80
   106                           	dabs	1,0x820,80
   107                           	dabs	1,0x7A0,80
   108                           	dabs	1,0x742,46
   109                           	dabs	1,0x720,34
   110                           	dabs	1,0x6A0,80
   111                           	dabs	1,0x620,80
   112                           	dabs	1,0x5BE,50
   113                           	dabs	1,0x2482,0,_sinArray
   114                           	dabs	1,0x238E,0,_modArray
   115                           	dabs	1,0x7E,2
   116  0000                     	;# 
   117  0001                     	;# 
   118  0002                     	;# 
   119  0003                     	;# 
   120  0004                     	;# 
   121  0005                     	;# 
   122  0006                     	;# 
   123  0007                     	;# 
   124  0008                     	;# 
   125  0009                     	;# 
   126  000A                     	;# 
   127  000B                     	;# 
   128  000C                     	;# 
   129  000D                     	;# 
   130  000E                     	;# 
   131  000F                     	;# 
   132  0010                     	;# 
   133  0011                     	;# 
   134  0012                     	;# 
   135  0013                     	;# 
   136  0014                     	;# 
   137  0015                     	;# 
   138  0016                     	;# 
   139  0016                     	;# 
   140  0017                     	;# 
   141  0018                     	;# 
   142  0019                     	;# 
   143  001A                     	;# 
   144  001B                     	;# 
   145  001C                     	;# 
   146  008C                     	;# 
   147  008D                     	;# 
   148  008E                     	;# 
   149  008F                     	;# 
   150  0090                     	;# 
   151  0091                     	;# 
   152  0092                     	;# 
   153  0093                     	;# 
   154  0094                     	;# 
   155  0095                     	;# 
   156  0096                     	;# 
   157  0097                     	;# 
   158  0099                     	;# 
   159  009A                     	;# 
   160  009B                     	;# 
   161  009B                     	;# 
   162  009C                     	;# 
   163  009D                     	;# 
   164  009E                     	;# 
   165  010C                     	;# 
   166  010D                     	;# 
   167  010E                     	;# 
   168  010F                     	;# 
   169  0110                     	;# 
   170  0116                     	;# 
   171  0117                     	;# 
   172  011D                     	;# 
   173  018C                     	;# 
   174  018D                     	;# 
   175  018F                     	;# 
   176  0190                     	;# 
   177  0191                     	;# 
   178  0191                     	;# 
   179  0192                     	;# 
   180  0193                     	;# 
   181  0193                     	;# 
   182  0194                     	;# 
   183  0195                     	;# 
   184  0196                     	;# 
   185  0197                     	;# 
   186  0199                     	;# 
   187  0199                     	;# 
   188  0199                     	;# 
   189  019A                     	;# 
   190  019A                     	;# 
   191  019A                     	;# 
   192  019B                     	;# 
   193  019B                     	;# 
   194  019B                     	;# 
   195  019B                     	;# 
   196  019B                     	;# 
   197  019C                     	;# 
   198  019C                     	;# 
   199  019C                     	;# 
   200  019D                     	;# 
   201  019D                     	;# 
   202  019D                     	;# 
   203  019E                     	;# 
   204  019E                     	;# 
   205  019E                     	;# 
   206  019F                     	;# 
   207  019F                     	;# 
   208  019F                     	;# 
   209  020D                     	;# 
   210  020F                     	;# 
   211  0210                     	;# 
   212  0211                     	;# 
   213  0211                     	;# 
   214  0212                     	;# 
   215  0212                     	;# 
   216  0213                     	;# 
   217  0213                     	;# 
   218  0214                     	;# 
   219  0214                     	;# 
   220  0215                     	;# 
   221  0215                     	;# 
   222  0215                     	;# 
   223  0216                     	;# 
   224  0216                     	;# 
   225  0217                     	;# 
   226  0217                     	;# 
   227  0219                     	;# 
   228  021A                     	;# 
   229  021B                     	;# 
   230  021C                     	;# 
   231  021D                     	;# 
   232  021E                     	;# 
   233  021F                     	;# 
   234  028C                     	;# 
   235  028D                     	;# 
   236  0291                     	;# 
   237  0291                     	;# 
   238  0292                     	;# 
   239  0293                     	;# 
   240  0298                     	;# 
   241  0298                     	;# 
   242  0299                     	;# 
   243  029A                     	;# 
   244  029D                     	;# 
   245  029E                     	;# 
   246  029F                     	;# 
   247  030C                     	;# 
   248  030D                     	;# 
   249  0311                     	;# 
   250  0311                     	;# 
   251  0312                     	;# 
   252  0313                     	;# 
   253  0318                     	;# 
   254  0318                     	;# 
   255  0319                     	;# 
   256  031A                     	;# 
   257  031C                     	;# 
   258  031C                     	;# 
   259  031D                     	;# 
   260  031E                     	;# 
   261  038C                     	;# 
   262  038D                     	;# 
   263  0394                     	;# 
   264  0395                     	;# 
   265  0396                     	;# 
   266  040C                     	;# 
   267  040D                     	;# 
   268  0411                     	;# 
   269  0411                     	;# 
   270  0412                     	;# 
   271  0413                     	;# 
   272  0414                     	;# 
   273  0415                     	;# 
   274  0416                     	;# 
   275  0417                     	;# 
   276  0418                     	;# 
   277  0418                     	;# 
   278  0419                     	;# 
   279  041A                     	;# 
   280  041B                     	;# 
   281  041C                     	;# 
   282  041D                     	;# 
   283  041E                     	;# 
   284  048D                     	;# 
   285  0491                     	;# 
   286  0491                     	;# 
   287  0492                     	;# 
   288  0492                     	;# 
   289  0493                     	;# 
   290  0493                     	;# 
   291  0493                     	;# 
   292  0494                     	;# 
   293  0494                     	;# 
   294  0495                     	;# 
   295  0495                     	;# 
   296  0496                     	;# 
   297  0496                     	;# 
   298  0497                     	;# 
   299  0497                     	;# 
   300  0595                     	;# 
   301  0596                     	;# 
   302  0597                     	;# 
   303  059C                     	;# 
   304  059D                     	;# 
   305  059E                     	;# 
   306  0611                     	;# 
   307  0611                     	;# 
   308  0612                     	;# 
   309  0613                     	;# 
   310  0614                     	;# 
   311  0614                     	;# 
   312  0615                     	;# 
   313  0616                     	;# 
   314  0617                     	;# 
   315  0617                     	;# 
   316  0618                     	;# 
   317  0619                     	;# 
   318  061A                     	;# 
   319  061A                     	;# 
   320  061B                     	;# 
   321  061C                     	;# 
   322  061D                     	;# 
   323  061D                     	;# 
   324  061E                     	;# 
   325  061F                     	;# 
   326  0FE4                     	;# 
   327  0FE5                     	;# 
   328  0FE6                     	;# 
   329  0FE7                     	;# 
   330  0FE8                     	;# 
   331  0FE9                     	;# 
   332  0FEA                     	;# 
   333  0FEB                     	;# 
   334  0FED                     	;# 
   335  0FEE                     	;# 
   336  0FEF                     	;# 
   337  0000                     	;# 
   338  0001                     	;# 
   339  0002                     	;# 
   340  0003                     	;# 
   341  0004                     	;# 
   342  0005                     	;# 
   343  0006                     	;# 
   344  0007                     	;# 
   345  0008                     	;# 
   346  0009                     	;# 
   347  000A                     	;# 
   348  000B                     	;# 
   349  000C                     	;# 
   350  000D                     	;# 
   351  000E                     	;# 
   352  000F                     	;# 
   353  0010                     	;# 
   354  0011                     	;# 
   355  0012                     	;# 
   356  0013                     	;# 
   357  0014                     	;# 
   358  0015                     	;# 
   359  0016                     	;# 
   360  0016                     	;# 
   361  0017                     	;# 
   362  0018                     	;# 
   363  0019                     	;# 
   364  001A                     	;# 
   365  001B                     	;# 
   366  001C                     	;# 
   367  008C                     	;# 
   368  008D                     	;# 
   369  008E                     	;# 
   370  008F                     	;# 
   371  0090                     	;# 
   372  0091                     	;# 
   373  0092                     	;# 
   374  0093                     	;# 
   375  0094                     	;# 
   376  0095                     	;# 
   377  0096                     	;# 
   378  0097                     	;# 
   379  0099                     	;# 
   380  009A                     	;# 
   381  009B                     	;# 
   382  009B                     	;# 
   383  009C                     	;# 
   384  009D                     	;# 
   385  009E                     	;# 
   386  010C                     	;# 
   387  010D                     	;# 
   388  010E                     	;# 
   389  010F                     	;# 
   390  0110                     	;# 
   391  0116                     	;# 
   392  0117                     	;# 
   393  011D                     	;# 
   394  018C                     	;# 
   395  018D                     	;# 
   396  018F                     	;# 
   397  0190                     	;# 
   398  0191                     	;# 
   399  0191                     	;# 
   400  0192                     	;# 
   401  0193                     	;# 
   402  0193                     	;# 
   403  0194                     	;# 
   404  0195                     	;# 
   405  0196                     	;# 
   406  0197                     	;# 
   407  0199                     	;# 
   408  0199                     	;# 
   409  0199                     	;# 
   410  019A                     	;# 
   411  019A                     	;# 
   412  019A                     	;# 
   413  019B                     	;# 
   414  019B                     	;# 
   415  019B                     	;# 
   416  019B                     	;# 
   417  019B                     	;# 
   418  019C                     	;# 
   419  019C                     	;# 
   420  019C                     	;# 
   421  019D                     	;# 
   422  019D                     	;# 
   423  019D                     	;# 
   424  019E                     	;# 
   425  019E                     	;# 
   426  019E                     	;# 
   427  019F                     	;# 
   428  019F                     	;# 
   429  019F                     	;# 
   430  020D                     	;# 
   431  020F                     	;# 
   432  0210                     	;# 
   433  0211                     	;# 
   434  0211                     	;# 
   435  0212                     	;# 
   436  0212                     	;# 
   437  0213                     	;# 
   438  0213                     	;# 
   439  0214                     	;# 
   440  0214                     	;# 
   441  0215                     	;# 
   442  0215                     	;# 
   443  0215                     	;# 
   444  0216                     	;# 
   445  0216                     	;# 
   446  0217                     	;# 
   447  0217                     	;# 
   448  0219                     	;# 
   449  021A                     	;# 
   450  021B                     	;# 
   451  021C                     	;# 
   452  021D                     	;# 
   453  021E                     	;# 
   454  021F                     	;# 
   455  028C                     	;# 
   456  028D                     	;# 
   457  0291                     	;# 
   458  0291                     	;# 
   459  0292                     	;# 
   460  0293                     	;# 
   461  0298                     	;# 
   462  0298                     	;# 
   463  0299                     	;# 
   464  029A                     	;# 
   465  029D                     	;# 
   466  029E                     	;# 
   467  029F                     	;# 
   468  030C                     	;# 
   469  030D                     	;# 
   470  0311                     	;# 
   471  0311                     	;# 
   472  0312                     	;# 
   473  0313                     	;# 
   474  0318                     	;# 
   475  0318                     	;# 
   476  0319                     	;# 
   477  031A                     	;# 
   478  031C                     	;# 
   479  031C                     	;# 
   480  031D                     	;# 
   481  031E                     	;# 
   482  038C                     	;# 
   483  038D                     	;# 
   484  0394                     	;# 
   485  0395                     	;# 
   486  0396                     	;# 
   487  040C                     	;# 
   488  040D                     	;# 
   489  0411                     	;# 
   490  0411                     	;# 
   491  0412                     	;# 
   492  0413                     	;# 
   493  0414                     	;# 
   494  0415                     	;# 
   495  0416                     	;# 
   496  0417                     	;# 
   497  0418                     	;# 
   498  0418                     	;# 
   499  0419                     	;# 
   500  041A                     	;# 
   501  041B                     	;# 
   502  041C                     	;# 
   503  041D                     	;# 
   504  041E                     	;# 
   505  048D                     	;# 
   506  0491                     	;# 
   507  0491                     	;# 
   508  0492                     	;# 
   509  0492                     	;# 
   510  0493                     	;# 
   511  0493                     	;# 
   512  0493                     	;# 
   513  0494                     	;# 
   514  0494                     	;# 
   515  0495                     	;# 
   516  0495                     	;# 
   517  0496                     	;# 
   518  0496                     	;# 
   519  0497                     	;# 
   520  0497                     	;# 
   521  0595                     	;# 
   522  0596                     	;# 
   523  0597                     	;# 
   524  059C                     	;# 
   525  059D                     	;# 
   526  059E                     	;# 
   527  0611                     	;# 
   528  0611                     	;# 
   529  0612                     	;# 
   530  0613                     	;# 
   531  0614                     	;# 
   532  0614                     	;# 
   533  0615                     	;# 
   534  0616                     	;# 
   535  0617                     	;# 
   536  0617                     	;# 
   537  0618                     	;# 
   538  0619                     	;# 
   539  061A                     	;# 
   540  061A                     	;# 
   541  061B                     	;# 
   542  061C                     	;# 
   543  061D                     	;# 
   544  061D                     	;# 
   545  061E                     	;# 
   546  061F                     	;# 
   547  0FE4                     	;# 
   548  0FE5                     	;# 
   549  0FE6                     	;# 
   550  0FE7                     	;# 
   551  0FE8                     	;# 
   552  0FE9                     	;# 
   553  0FEA                     	;# 
   554  0FEB                     	;# 
   555  0FED                     	;# 
   556  0FEE                     	;# 
   557  0FEF                     	;# 
   558  0000                     	;# 
   559  0001                     	;# 
   560  0002                     	;# 
   561  0003                     	;# 
   562  0004                     	;# 
   563  0005                     	;# 
   564  0006                     	;# 
   565  0007                     	;# 
   566  0008                     	;# 
   567  0009                     	;# 
   568  000A                     	;# 
   569  000B                     	;# 
   570  000C                     	;# 
   571  000D                     	;# 
   572  000E                     	;# 
   573  000F                     	;# 
   574  0010                     	;# 
   575  0011                     	;# 
   576  0012                     	;# 
   577  0013                     	;# 
   578  0014                     	;# 
   579  0015                     	;# 
   580  0016                     	;# 
   581  0016                     	;# 
   582  0017                     	;# 
   583  0018                     	;# 
   584  0019                     	;# 
   585  001A                     	;# 
   586  001B                     	;# 
   587  001C                     	;# 
   588  008C                     	;# 
   589  008D                     	;# 
   590  008E                     	;# 
   591  008F                     	;# 
   592  0090                     	;# 
   593  0091                     	;# 
   594  0092                     	;# 
   595  0093                     	;# 
   596  0094                     	;# 
   597  0095                     	;# 
   598  0096                     	;# 
   599  0097                     	;# 
   600  0099                     	;# 
   601  009A                     	;# 
   602  009B                     	;# 
   603  009B                     	;# 
   604  009C                     	;# 
   605  009D                     	;# 
   606  009E                     	;# 
   607  010C                     	;# 
   608  010D                     	;# 
   609  010E                     	;# 
   610  010F                     	;# 
   611  0110                     	;# 
   612  0116                     	;# 
   613  0117                     	;# 
   614  011D                     	;# 
   615  018C                     	;# 
   616  018D                     	;# 
   617  018F                     	;# 
   618  0190                     	;# 
   619  0191                     	;# 
   620  0191                     	;# 
   621  0192                     	;# 
   622  0193                     	;# 
   623  0193                     	;# 
   624  0194                     	;# 
   625  0195                     	;# 
   626  0196                     	;# 
   627  0197                     	;# 
   628  0199                     	;# 
   629  0199                     	;# 
   630  0199                     	;# 
   631  019A                     	;# 
   632  019A                     	;# 
   633  019A                     	;# 
   634  019B                     	;# 
   635  019B                     	;# 
   636  019B                     	;# 
   637  019B                     	;# 
   638  019B                     	;# 
   639  019C                     	;# 
   640  019C                     	;# 
   641  019C                     	;# 
   642  019D                     	;# 
   643  019D                     	;# 
   644  019D                     	;# 
   645  019E                     	;# 
   646  019E                     	;# 
   647  019E                     	;# 
   648  019F                     	;# 
   649  019F                     	;# 
   650  019F                     	;# 
   651  020D                     	;# 
   652  020F                     	;# 
   653  0210                     	;# 
   654  0211                     	;# 
   655  0211                     	;# 
   656  0212                     	;# 
   657  0212                     	;# 
   658  0213                     	;# 
   659  0213                     	;# 
   660  0214                     	;# 
   661  0214                     	;# 
   662  0215                     	;# 
   663  0215                     	;# 
   664  0215                     	;# 
   665  0216                     	;# 
   666  0216                     	;# 
   667  0217                     	;# 
   668  0217                     	;# 
   669  0219                     	;# 
   670  021A                     	;# 
   671  021B                     	;# 
   672  021C                     	;# 
   673  021D                     	;# 
   674  021E                     	;# 
   675  021F                     	;# 
   676  028C                     	;# 
   677  028D                     	;# 
   678  0291                     	;# 
   679  0291                     	;# 
   680  0292                     	;# 
   681  0293                     	;# 
   682  0298                     	;# 
   683  0298                     	;# 
   684  0299                     	;# 
   685  029A                     	;# 
   686  029D                     	;# 
   687  029E                     	;# 
   688  029F                     	;# 
   689  030C                     	;# 
   690  030D                     	;# 
   691  0311                     	;# 
   692  0311                     	;# 
   693  0312                     	;# 
   694  0313                     	;# 
   695  0318                     	;# 
   696  0318                     	;# 
   697  0319                     	;# 
   698  031A                     	;# 
   699  031C                     	;# 
   700  031C                     	;# 
   701  031D                     	;# 
   702  031E                     	;# 
   703  038C                     	;# 
   704  038D                     	;# 
   705  0394                     	;# 
   706  0395                     	;# 
   707  0396                     	;# 
   708  040C                     	;# 
   709  040D                     	;# 
   710  0411                     	;# 
   711  0411                     	;# 
   712  0412                     	;# 
   713  0413                     	;# 
   714  0414                     	;# 
   715  0415                     	;# 
   716  0416                     	;# 
   717  0417                     	;# 
   718  0418                     	;# 
   719  0418                     	;# 
   720  0419                     	;# 
   721  041A                     	;# 
   722  041B                     	;# 
   723  041C                     	;# 
   724  041D                     	;# 
   725  041E                     	;# 
   726  048D                     	;# 
   727  0491                     	;# 
   728  0491                     	;# 
   729  0492                     	;# 
   730  0492                     	;# 
   731  0493                     	;# 
   732  0493                     	;# 
   733  0493                     	;# 
   734  0494                     	;# 
   735  0494                     	;# 
   736  0495                     	;# 
   737  0495                     	;# 
   738  0496                     	;# 
   739  0496                     	;# 
   740  0497                     	;# 
   741  0497                     	;# 
   742  0595                     	;# 
   743  0596                     	;# 
   744  0597                     	;# 
   745  059C                     	;# 
   746  059D                     	;# 
   747  059E                     	;# 
   748  0611                     	;# 
   749  0611                     	;# 
   750  0612                     	;# 
   751  0613                     	;# 
   752  0614                     	;# 
   753  0614                     	;# 
   754  0615                     	;# 
   755  0616                     	;# 
   756  0617                     	;# 
   757  0617                     	;# 
   758  0618                     	;# 
   759  0619                     	;# 
   760  061A                     	;# 
   761  061A                     	;# 
   762  061B                     	;# 
   763  061C                     	;# 
   764  061D                     	;# 
   765  061D                     	;# 
   766  061E                     	;# 
   767  061F                     	;# 
   768  0FE4                     	;# 
   769  0FE5                     	;# 
   770  0FE6                     	;# 
   771  0FE7                     	;# 
   772  0FE8                     	;# 
   773  0FE9                     	;# 
   774  0FEA                     	;# 
   775  0FEB                     	;# 
   776  0FED                     	;# 
   777  0FEE                     	;# 
   778  0FEF                     	;# 
   779  0000                     	;# 
   780  0001                     	;# 
   781  0002                     	;# 
   782  0003                     	;# 
   783  0004                     	;# 
   784  0005                     	;# 
   785  0006                     	;# 
   786  0007                     	;# 
   787  0008                     	;# 
   788  0009                     	;# 
   789  000A                     	;# 
   790  000B                     	;# 
   791  000C                     	;# 
   792  000D                     	;# 
   793  000E                     	;# 
   794  000F                     	;# 
   795  0010                     	;# 
   796  0011                     	;# 
   797  0012                     	;# 
   798  0013                     	;# 
   799  0014                     	;# 
   800  0015                     	;# 
   801  0016                     	;# 
   802  0016                     	;# 
   803  0017                     	;# 
   804  0018                     	;# 
   805  0019                     	;# 
   806  001A                     	;# 
   807  001B                     	;# 
   808  001C                     	;# 
   809  008C                     	;# 
   810  008D                     	;# 
   811  008E                     	;# 
   812  008F                     	;# 
   813  0090                     	;# 
   814  0091                     	;# 
   815  0092                     	;# 
   816  0093                     	;# 
   817  0094                     	;# 
   818  0095                     	;# 
   819  0096                     	;# 
   820  0097                     	;# 
   821  0099                     	;# 
   822  009A                     	;# 
   823  009B                     	;# 
   824  009B                     	;# 
   825  009C                     	;# 
   826  009D                     	;# 
   827  009E                     	;# 
   828  010C                     	;# 
   829  010D                     	;# 
   830  010E                     	;# 
   831  010F                     	;# 
   832  0110                     	;# 
   833  0116                     	;# 
   834  0117                     	;# 
   835  011D                     	;# 
   836  018C                     	;# 
   837  018D                     	;# 
   838  018F                     	;# 
   839  0190                     	;# 
   840  0191                     	;# 
   841  0191                     	;# 
   842  0192                     	;# 
   843  0193                     	;# 
   844  0193                     	;# 
   845  0194                     	;# 
   846  0195                     	;# 
   847  0196                     	;# 
   848  0197                     	;# 
   849  0199                     	;# 
   850  0199                     	;# 
   851  0199                     	;# 
   852  019A                     	;# 
   853  019A                     	;# 
   854  019A                     	;# 
   855  019B                     	;# 
   856  019B                     	;# 
   857  019B                     	;# 
   858  019B                     	;# 
   859  019B                     	;# 
   860  019C                     	;# 
   861  019C                     	;# 
   862  019C                     	;# 
   863  019D                     	;# 
   864  019D                     	;# 
   865  019D                     	;# 
   866  019E                     	;# 
   867  019E                     	;# 
   868  019E                     	;# 
   869  019F                     	;# 
   870  019F                     	;# 
   871  019F                     	;# 
   872  020D                     	;# 
   873  020F                     	;# 
   874  0210                     	;# 
   875  0211                     	;# 
   876  0211                     	;# 
   877  0212                     	;# 
   878  0212                     	;# 
   879  0213                     	;# 
   880  0213                     	;# 
   881  0214                     	;# 
   882  0214                     	;# 
   883  0215                     	;# 
   884  0215                     	;# 
   885  0215                     	;# 
   886  0216                     	;# 
   887  0216                     	;# 
   888  0217                     	;# 
   889  0217                     	;# 
   890  0219                     	;# 
   891  021A                     	;# 
   892  021B                     	;# 
   893  021C                     	;# 
   894  021D                     	;# 
   895  021E                     	;# 
   896  021F                     	;# 
   897  028C                     	;# 
   898  028D                     	;# 
   899  0291                     	;# 
   900  0291                     	;# 
   901  0292                     	;# 
   902  0293                     	;# 
   903  0298                     	;# 
   904  0298                     	;# 
   905  0299                     	;# 
   906  029A                     	;# 
   907  029D                     	;# 
   908  029E                     	;# 
   909  029F                     	;# 
   910  030C                     	;# 
   911  030D                     	;# 
   912  0311                     	;# 
   913  0311                     	;# 
   914  0312                     	;# 
   915  0313                     	;# 
   916  0318                     	;# 
   917  0318                     	;# 
   918  0319                     	;# 
   919  031A                     	;# 
   920  031C                     	;# 
   921  031C                     	;# 
   922  031D                     	;# 
   923  031E                     	;# 
   924  038C                     	;# 
   925  038D                     	;# 
   926  0394                     	;# 
   927  0395                     	;# 
   928  0396                     	;# 
   929  040C                     	;# 
   930  040D                     	;# 
   931  0411                     	;# 
   932  0411                     	;# 
   933  0412                     	;# 
   934  0413                     	;# 
   935  0414                     	;# 
   936  0415                     	;# 
   937  0416                     	;# 
   938  0417                     	;# 
   939  0418                     	;# 
   940  0418                     	;# 
   941  0419                     	;# 
   942  041A                     	;# 
   943  041B                     	;# 
   944  041C                     	;# 
   945  041D                     	;# 
   946  041E                     	;# 
   947  048D                     	;# 
   948  0491                     	;# 
   949  0491                     	;# 
   950  0492                     	;# 
   951  0492                     	;# 
   952  0493                     	;# 
   953  0493                     	;# 
   954  0493                     	;# 
   955  0494                     	;# 
   956  0494                     	;# 
   957  0495                     	;# 
   958  0495                     	;# 
   959  0496                     	;# 
   960  0496                     	;# 
   961  0497                     	;# 
   962  0497                     	;# 
   963  0595                     	;# 
   964  0596                     	;# 
   965  0597                     	;# 
   966  059C                     	;# 
   967  059D                     	;# 
   968  059E                     	;# 
   969  0611                     	;# 
   970  0611                     	;# 
   971  0612                     	;# 
   972  0613                     	;# 
   973  0614                     	;# 
   974  0614                     	;# 
   975  0615                     	;# 
   976  0616                     	;# 
   977  0617                     	;# 
   978  0617                     	;# 
   979  0618                     	;# 
   980  0619                     	;# 
   981  061A                     	;# 
   982  061A                     	;# 
   983  061B                     	;# 
   984  061C                     	;# 
   985  061D                     	;# 
   986  061D                     	;# 
   987  061E                     	;# 
   988  061F                     	;# 
   989  0FE4                     	;# 
   990  0FE5                     	;# 
   991  0FE6                     	;# 
   992  0FE7                     	;# 
   993  0FE8                     	;# 
   994  0FE9                     	;# 
   995  0FEA                     	;# 
   996  0FEB                     	;# 
   997  0FED                     	;# 
   998  0FEE                     	;# 
   999  0FEF                     	;# 
  1000  0000                     	;# 
  1001  0001                     	;# 
  1002  0002                     	;# 
  1003  0003                     	;# 
  1004  0004                     	;# 
  1005  0005                     	;# 
  1006  0006                     	;# 
  1007  0007                     	;# 
  1008  0008                     	;# 
  1009  0009                     	;# 
  1010  000A                     	;# 
  1011  000B                     	;# 
  1012  000C                     	;# 
  1013  000D                     	;# 
  1014  000E                     	;# 
  1015  000F                     	;# 
  1016  0010                     	;# 
  1017  0011                     	;# 
  1018  0012                     	;# 
  1019  0013                     	;# 
  1020  0014                     	;# 
  1021  0015                     	;# 
  1022  0016                     	;# 
  1023  0016                     	;# 
  1024  0017                     	;# 
  1025  0018                     	;# 
  1026  0019                     	;# 
  1027  001A                     	;# 
  1028  001B                     	;# 
  1029  001C                     	;# 
  1030  008C                     	;# 
  1031  008D                     	;# 
  1032  008E                     	;# 
  1033  008F                     	;# 
  1034  0090                     	;# 
  1035  0091                     	;# 
  1036  0092                     	;# 
  1037  0093                     	;# 
  1038  0094                     	;# 
  1039  0095                     	;# 
  1040  0096                     	;# 
  1041  0097                     	;# 
  1042  0099                     	;# 
  1043  009A                     	;# 
  1044  009B                     	;# 
  1045  009B                     	;# 
  1046  009C                     	;# 
  1047  009D                     	;# 
  1048  009E                     	;# 
  1049  010C                     	;# 
  1050  010D                     	;# 
  1051  010E                     	;# 
  1052  010F                     	;# 
  1053  0110                     	;# 
  1054  0116                     	;# 
  1055  0117                     	;# 
  1056  011D                     	;# 
  1057  018C                     	;# 
  1058  018D                     	;# 
  1059  018F                     	;# 
  1060  0190                     	;# 
  1061  0191                     	;# 
  1062  0191                     	;# 
  1063  0192                     	;# 
  1064  0193                     	;# 
  1065  0193                     	;# 
  1066  0194                     	;# 
  1067  0195                     	;# 
  1068  0196                     	;# 
  1069  0197                     	;# 
  1070  0199                     	;# 
  1071  0199                     	;# 
  1072  0199                     	;# 
  1073  019A                     	;# 
  1074  019A                     	;# 
  1075  019A                     	;# 
  1076  019B                     	;# 
  1077  019B                     	;# 
  1078  019B                     	;# 
  1079  019B                     	;# 
  1080  019B                     	;# 
  1081  019C                     	;# 
  1082  019C                     	;# 
  1083  019C                     	;# 
  1084  019D                     	;# 
  1085  019D                     	;# 
  1086  019D                     	;# 
  1087  019E                     	;# 
  1088  019E                     	;# 
  1089  019E                     	;# 
  1090  019F                     	;# 
  1091  019F                     	;# 
  1092  019F                     	;# 
  1093  020D                     	;# 
  1094  020F                     	;# 
  1095  0210                     	;# 
  1096  0211                     	;# 
  1097  0211                     	;# 
  1098  0212                     	;# 
  1099  0212                     	;# 
  1100  0213                     	;# 
  1101  0213                     	;# 
  1102  0214                     	;# 
  1103  0214                     	;# 
  1104  0215                     	;# 
  1105  0215                     	;# 
  1106  0215                     	;# 
  1107  0216                     	;# 
  1108  0216                     	;# 
  1109  0217                     	;# 
  1110  0217                     	;# 
  1111  0219                     	;# 
  1112  021A                     	;# 
  1113  021B                     	;# 
  1114  021C                     	;# 
  1115  021D                     	;# 
  1116  021E                     	;# 
  1117  021F                     	;# 
  1118  028C                     	;# 
  1119  028D                     	;# 
  1120  0291                     	;# 
  1121  0291                     	;# 
  1122  0292                     	;# 
  1123  0293                     	;# 
  1124  0298                     	;# 
  1125  0298                     	;# 
  1126  0299                     	;# 
  1127  029A                     	;# 
  1128  029D                     	;# 
  1129  029E                     	;# 
  1130  029F                     	;# 
  1131  030C                     	;# 
  1132  030D                     	;# 
  1133  0311                     	;# 
  1134  0311                     	;# 
  1135  0312                     	;# 
  1136  0313                     	;# 
  1137  0318                     	;# 
  1138  0318                     	;# 
  1139  0319                     	;# 
  1140  031A                     	;# 
  1141  031C                     	;# 
  1142  031C                     	;# 
  1143  031D                     	;# 
  1144  031E                     	;# 
  1145  038C                     	;# 
  1146  038D                     	;# 
  1147  0394                     	;# 
  1148  0395                     	;# 
  1149  0396                     	;# 
  1150  040C                     	;# 
  1151  040D                     	;# 
  1152  0411                     	;# 
  1153  0411                     	;# 
  1154  0412                     	;# 
  1155  0413                     	;# 
  1156  0414                     	;# 
  1157  0415                     	;# 
  1158  0416                     	;# 
  1159  0417                     	;# 
  1160  0418                     	;# 
  1161  0418                     	;# 
  1162  0419                     	;# 
  1163  041A                     	;# 
  1164  041B                     	;# 
  1165  041C                     	;# 
  1166  041D                     	;# 
  1167  041E                     	;# 
  1168  048D                     	;# 
  1169  0491                     	;# 
  1170  0491                     	;# 
  1171  0492                     	;# 
  1172  0492                     	;# 
  1173  0493                     	;# 
  1174  0493                     	;# 
  1175  0493                     	;# 
  1176  0494                     	;# 
  1177  0494                     	;# 
  1178  0495                     	;# 
  1179  0495                     	;# 
  1180  0496                     	;# 
  1181  0496                     	;# 
  1182  0497                     	;# 
  1183  0497                     	;# 
  1184  0595                     	;# 
  1185  0596                     	;# 
  1186  0597                     	;# 
  1187  059C                     	;# 
  1188  059D                     	;# 
  1189  059E                     	;# 
  1190  0611                     	;# 
  1191  0611                     	;# 
  1192  0612                     	;# 
  1193  0613                     	;# 
  1194  0614                     	;# 
  1195  0614                     	;# 
  1196  0615                     	;# 
  1197  0616                     	;# 
  1198  0617                     	;# 
  1199  0617                     	;# 
  1200  0618                     	;# 
  1201  0619                     	;# 
  1202  061A                     	;# 
  1203  061A                     	;# 
  1204  061B                     	;# 
  1205  061C                     	;# 
  1206  061D                     	;# 
  1207  061D                     	;# 
  1208  061E                     	;# 
  1209  061F                     	;# 
  1210  0FE4                     	;# 
  1211  0FE5                     	;# 
  1212  0FE6                     	;# 
  1213  0FE7                     	;# 
  1214  0FE8                     	;# 
  1215  0FE9                     	;# 
  1216  0FEA                     	;# 
  1217  0FEB                     	;# 
  1218  0FED                     	;# 
  1219  0FEE                     	;# 
  1220  0FEF                     	;# 
  1221  0000                     	;# 
  1222  0001                     	;# 
  1223  0002                     	;# 
  1224  0003                     	;# 
  1225  0004                     	;# 
  1226  0005                     	;# 
  1227  0006                     	;# 
  1228  0007                     	;# 
  1229  0008                     	;# 
  1230  0009                     	;# 
  1231  000A                     	;# 
  1232  000B                     	;# 
  1233  000C                     	;# 
  1234  000D                     	;# 
  1235  000E                     	;# 
  1236  000F                     	;# 
  1237  0010                     	;# 
  1238  0011                     	;# 
  1239  0012                     	;# 
  1240  0013                     	;# 
  1241  0014                     	;# 
  1242  0015                     	;# 
  1243  0016                     	;# 
  1244  0016                     	;# 
  1245  0017                     	;# 
  1246  0018                     	;# 
  1247  0019                     	;# 
  1248  001A                     	;# 
  1249  001B                     	;# 
  1250  001C                     	;# 
  1251  008C                     	;# 
  1252  008D                     	;# 
  1253  008E                     	;# 
  1254  008F                     	;# 
  1255  0090                     	;# 
  1256  0091                     	;# 
  1257  0092                     	;# 
  1258  0093                     	;# 
  1259  0094                     	;# 
  1260  0095                     	;# 
  1261  0096                     	;# 
  1262  0097                     	;# 
  1263  0099                     	;# 
  1264  009A                     	;# 
  1265  009B                     	;# 
  1266  009B                     	;# 
  1267  009C                     	;# 
  1268  009D                     	;# 
  1269  009E                     	;# 
  1270  010C                     	;# 
  1271  010D                     	;# 
  1272  010E                     	;# 
  1273  010F                     	;# 
  1274  0110                     	;# 
  1275  0116                     	;# 
  1276  0117                     	;# 
  1277  011D                     	;# 
  1278  018C                     	;# 
  1279  018D                     	;# 
  1280  018F                     	;# 
  1281  0190                     	;# 
  1282  0191                     	;# 
  1283  0191                     	;# 
  1284  0192                     	;# 
  1285  0193                     	;# 
  1286  0193                     	;# 
  1287  0194                     	;# 
  1288  0195                     	;# 
  1289  0196                     	;# 
  1290  0197                     	;# 
  1291  0199                     	;# 
  1292  0199                     	;# 
  1293  0199                     	;# 
  1294  019A                     	;# 
  1295  019A                     	;# 
  1296  019A                     	;# 
  1297  019B                     	;# 
  1298  019B                     	;# 
  1299  019B                     	;# 
  1300  019B                     	;# 
  1301  019B                     	;# 
  1302  019C                     	;# 
  1303  019C                     	;# 
  1304  019C                     	;# 
  1305  019D                     	;# 
  1306  019D                     	;# 
  1307  019D                     	;# 
  1308  019E                     	;# 
  1309  019E                     	;# 
  1310  019E                     	;# 
  1311  019F                     	;# 
  1312  019F                     	;# 
  1313  019F                     	;# 
  1314  020D                     	;# 
  1315  020F                     	;# 
  1316  0210                     	;# 
  1317  0211                     	;# 
  1318  0211                     	;# 
  1319  0212                     	;# 
  1320  0212                     	;# 
  1321  0213                     	;# 
  1322  0213                     	;# 
  1323  0214                     	;# 
  1324  0214                     	;# 
  1325  0215                     	;# 
  1326  0215                     	;# 
  1327  0215                     	;# 
  1328  0216                     	;# 
  1329  0216                     	;# 
  1330  0217                     	;# 
  1331  0217                     	;# 
  1332  0219                     	;# 
  1333  021A                     	;# 
  1334  021B                     	;# 
  1335  021C                     	;# 
  1336  021D                     	;# 
  1337  021E                     	;# 
  1338  021F                     	;# 
  1339  028C                     	;# 
  1340  028D                     	;# 
  1341  0291                     	;# 
  1342  0291                     	;# 
  1343  0292                     	;# 
  1344  0293                     	;# 
  1345  0298                     	;# 
  1346  0298                     	;# 
  1347  0299                     	;# 
  1348  029A                     	;# 
  1349  029D                     	;# 
  1350  029E                     	;# 
  1351  029F                     	;# 
  1352  030C                     	;# 
  1353  030D                     	;# 
  1354  0311                     	;# 
  1355  0311                     	;# 
  1356  0312                     	;# 
  1357  0313                     	;# 
  1358  0318                     	;# 
  1359  0318                     	;# 
  1360  0319                     	;# 
  1361  031A                     	;# 
  1362  031C                     	;# 
  1363  031C                     	;# 
  1364  031D                     	;# 
  1365  031E                     	;# 
  1366  038C                     	;# 
  1367  038D                     	;# 
  1368  0394                     	;# 
  1369  0395                     	;# 
  1370  0396                     	;# 
  1371  040C                     	;# 
  1372  040D                     	;# 
  1373  0411                     	;# 
  1374  0411                     	;# 
  1375  0412                     	;# 
  1376  0413                     	;# 
  1377  0414                     	;# 
  1378  0415                     	;# 
  1379  0416                     	;# 
  1380  0417                     	;# 
  1381  0418                     	;# 
  1382  0418                     	;# 
  1383  0419                     	;# 
  1384  041A                     	;# 
  1385  041B                     	;# 
  1386  041C                     	;# 
  1387  041D                     	;# 
  1388  041E                     	;# 
  1389  048D                     	;# 
  1390  0491                     	;# 
  1391  0491                     	;# 
  1392  0492                     	;# 
  1393  0492                     	;# 
  1394  0493                     	;# 
  1395  0493                     	;# 
  1396  0493                     	;# 
  1397  0494                     	;# 
  1398  0494                     	;# 
  1399  0495                     	;# 
  1400  0495                     	;# 
  1401  0496                     	;# 
  1402  0496                     	;# 
  1403  0497                     	;# 
  1404  0497                     	;# 
  1405  0595                     	;# 
  1406  0596                     	;# 
  1407  0597                     	;# 
  1408  059C                     	;# 
  1409  059D                     	;# 
  1410  059E                     	;# 
  1411  0611                     	;# 
  1412  0611                     	;# 
  1413  0612                     	;# 
  1414  0613                     	;# 
  1415  0614                     	;# 
  1416  0614                     	;# 
  1417  0615                     	;# 
  1418  0616                     	;# 
  1419  0617                     	;# 
  1420  0617                     	;# 
  1421  0618                     	;# 
  1422  0619                     	;# 
  1423  061A                     	;# 
  1424  061A                     	;# 
  1425  061B                     	;# 
  1426  061C                     	;# 
  1427  061D                     	;# 
  1428  061D                     	;# 
  1429  061E                     	;# 
  1430  061F                     	;# 
  1431  0FE4                     	;# 
  1432  0FE5                     	;# 
  1433  0FE6                     	;# 
  1434  0FE7                     	;# 
  1435  0FE8                     	;# 
  1436  0FE9                     	;# 
  1437  0FEA                     	;# 
  1438  0FEB                     	;# 
  1439  0FED                     	;# 
  1440  0FEE                     	;# 
  1441  0FEF                     	;# 
  1442  0000                     	;# 
  1443  0001                     	;# 
  1444  0002                     	;# 
  1445  0003                     	;# 
  1446  0004                     	;# 
  1447  0005                     	;# 
  1448  0006                     	;# 
  1449  0007                     	;# 
  1450  0008                     	;# 
  1451  0009                     	;# 
  1452  000A                     	;# 
  1453  000B                     	;# 
  1454  000C                     	;# 
  1455  000D                     	;# 
  1456  000E                     	;# 
  1457  000F                     	;# 
  1458  0010                     	;# 
  1459  0011                     	;# 
  1460  0012                     	;# 
  1461  0013                     	;# 
  1462  0014                     	;# 
  1463  0015                     	;# 
  1464  0016                     	;# 
  1465  0016                     	;# 
  1466  0017                     	;# 
  1467  0018                     	;# 
  1468  0019                     	;# 
  1469  001A                     	;# 
  1470  001B                     	;# 
  1471  001C                     	;# 
  1472  008C                     	;# 
  1473  008D                     	;# 
  1474  008E                     	;# 
  1475  008F                     	;# 
  1476  0090                     	;# 
  1477  0091                     	;# 
  1478  0092                     	;# 
  1479  0093                     	;# 
  1480  0094                     	;# 
  1481  0095                     	;# 
  1482  0096                     	;# 
  1483  0097                     	;# 
  1484  0099                     	;# 
  1485  009A                     	;# 
  1486  009B                     	;# 
  1487  009B                     	;# 
  1488  009C                     	;# 
  1489  009D                     	;# 
  1490  009E                     	;# 
  1491  010C                     	;# 
  1492  010D                     	;# 
  1493  010E                     	;# 
  1494  010F                     	;# 
  1495  0110                     	;# 
  1496  0116                     	;# 
  1497  0117                     	;# 
  1498  011D                     	;# 
  1499  018C                     	;# 
  1500  018D                     	;# 
  1501  018F                     	;# 
  1502  0190                     	;# 
  1503  0191                     	;# 
  1504  0191                     	;# 
  1505  0192                     	;# 
  1506  0193                     	;# 
  1507  0193                     	;# 
  1508  0194                     	;# 
  1509  0195                     	;# 
  1510  0196                     	;# 
  1511  0197                     	;# 
  1512  0199                     	;# 
  1513  0199                     	;# 
  1514  0199                     	;# 
  1515  019A                     	;# 
  1516  019A                     	;# 
  1517  019A                     	;# 
  1518  019B                     	;# 
  1519  019B                     	;# 
  1520  019B                     	;# 
  1521  019B                     	;# 
  1522  019B                     	;# 
  1523  019C                     	;# 
  1524  019C                     	;# 
  1525  019C                     	;# 
  1526  019D                     	;# 
  1527  019D                     	;# 
  1528  019D                     	;# 
  1529  019E                     	;# 
  1530  019E                     	;# 
  1531  019E                     	;# 
  1532  019F                     	;# 
  1533  019F                     	;# 
  1534  019F                     	;# 
  1535  020D                     	;# 
  1536  020F                     	;# 
  1537  0210                     	;# 
  1538  0211                     	;# 
  1539  0211                     	;# 
  1540  0212                     	;# 
  1541  0212                     	;# 
  1542  0213                     	;# 
  1543  0213                     	;# 
  1544  0214                     	;# 
  1545  0214                     	;# 
  1546  0215                     	;# 
  1547  0215                     	;# 
  1548  0215                     	;# 
  1549  0216                     	;# 
  1550  0216                     	;# 
  1551  0217                     	;# 
  1552  0217                     	;# 
  1553  0219                     	;# 
  1554  021A                     	;# 
  1555  021B                     	;# 
  1556  021C                     	;# 
  1557  021D                     	;# 
  1558  021E                     	;# 
  1559  021F                     	;# 
  1560  028C                     	;# 
  1561  028D                     	;# 
  1562  0291                     	;# 
  1563  0291                     	;# 
  1564  0292                     	;# 
  1565  0293                     	;# 
  1566  0298                     	;# 
  1567  0298                     	;# 
  1568  0299                     	;# 
  1569  029A                     	;# 
  1570  029D                     	;# 
  1571  029E                     	;# 
  1572  029F                     	;# 
  1573  030C                     	;# 
  1574  030D                     	;# 
  1575  0311                     	;# 
  1576  0311                     	;# 
  1577  0312                     	;# 
  1578  0313                     	;# 
  1579  0318                     	;# 
  1580  0318                     	;# 
  1581  0319                     	;# 
  1582  031A                     	;# 
  1583  031C                     	;# 
  1584  031C                     	;# 
  1585  031D                     	;# 
  1586  031E                     	;# 
  1587  038C                     	;# 
  1588  038D                     	;# 
  1589  0394                     	;# 
  1590  0395                     	;# 
  1591  0396                     	;# 
  1592  040C                     	;# 
  1593  040D                     	;# 
  1594  0411                     	;# 
  1595  0411                     	;# 
  1596  0412                     	;# 
  1597  0413                     	;# 
  1598  0414                     	;# 
  1599  0415                     	;# 
  1600  0416                     	;# 
  1601  0417                     	;# 
  1602  0418                     	;# 
  1603  0418                     	;# 
  1604  0419                     	;# 
  1605  041A                     	;# 
  1606  041B                     	;# 
  1607  041C                     	;# 
  1608  041D                     	;# 
  1609  041E                     	;# 
  1610  048D                     	;# 
  1611  0491                     	;# 
  1612  0491                     	;# 
  1613  0492                     	;# 
  1614  0492                     	;# 
  1615  0493                     	;# 
  1616  0493                     	;# 
  1617  0493                     	;# 
  1618  0494                     	;# 
  1619  0494                     	;# 
  1620  0495                     	;# 
  1621  0495                     	;# 
  1622  0496                     	;# 
  1623  0496                     	;# 
  1624  0497                     	;# 
  1625  0497                     	;# 
  1626  0595                     	;# 
  1627  0596                     	;# 
  1628  0597                     	;# 
  1629  059C                     	;# 
  1630  059D                     	;# 
  1631  059E                     	;# 
  1632  0611                     	;# 
  1633  0611                     	;# 
  1634  0612                     	;# 
  1635  0613                     	;# 
  1636  0614                     	;# 
  1637  0614                     	;# 
  1638  0615                     	;# 
  1639  0616                     	;# 
  1640  0617                     	;# 
  1641  0617                     	;# 
  1642  0618                     	;# 
  1643  0619                     	;# 
  1644  061A                     	;# 
  1645  061A                     	;# 
  1646  061B                     	;# 
  1647  061C                     	;# 
  1648  061D                     	;# 
  1649  061D                     	;# 
  1650  061E                     	;# 
  1651  061F                     	;# 
  1652  0FE4                     	;# 
  1653  0FE5                     	;# 
  1654  0FE6                     	;# 
  1655  0FE7                     	;# 
  1656  0FE8                     	;# 
  1657  0FE9                     	;# 
  1658  0FEA                     	;# 
  1659  0FEB                     	;# 
  1660  0FED                     	;# 
  1661  0FEE                     	;# 
  1662  0FEF                     	;# 
  1663  0000                     	;# 
  1664  0001                     	;# 
  1665  0002                     	;# 
  1666  0003                     	;# 
  1667  0004                     	;# 
  1668  0005                     	;# 
  1669  0006                     	;# 
  1670  0007                     	;# 
  1671  0008                     	;# 
  1672  0009                     	;# 
  1673  000A                     	;# 
  1674  000B                     	;# 
  1675  000C                     	;# 
  1676  000D                     	;# 
  1677  000E                     	;# 
  1678  000F                     	;# 
  1679  0010                     	;# 
  1680  0011                     	;# 
  1681  0012                     	;# 
  1682  0013                     	;# 
  1683  0014                     	;# 
  1684  0015                     	;# 
  1685  0016                     	;# 
  1686  0016                     	;# 
  1687  0017                     	;# 
  1688  0018                     	;# 
  1689  0019                     	;# 
  1690  001A                     	;# 
  1691  001B                     	;# 
  1692  001C                     	;# 
  1693  008C                     	;# 
  1694  008D                     	;# 
  1695  008E                     	;# 
  1696  008F                     	;# 
  1697  0090                     	;# 
  1698  0091                     	;# 
  1699  0092                     	;# 
  1700  0093                     	;# 
  1701  0094                     	;# 
  1702  0095                     	;# 
  1703  0096                     	;# 
  1704  0097                     	;# 
  1705  0099                     	;# 
  1706  009A                     	;# 
  1707  009B                     	;# 
  1708  009B                     	;# 
  1709  009C                     	;# 
  1710  009D                     	;# 
  1711  009E                     	;# 
  1712  010C                     	;# 
  1713  010D                     	;# 
  1714  010E                     	;# 
  1715  010F                     	;# 
  1716  0110                     	;# 
  1717  0116                     	;# 
  1718  0117                     	;# 
  1719  011D                     	;# 
  1720  018C                     	;# 
  1721  018D                     	;# 
  1722  018F                     	;# 
  1723  0190                     	;# 
  1724  0191                     	;# 
  1725  0191                     	;# 
  1726  0192                     	;# 
  1727  0193                     	;# 
  1728  0193                     	;# 
  1729  0194                     	;# 
  1730  0195                     	;# 
  1731  0196                     	;# 
  1732  0197                     	;# 
  1733  0199                     	;# 
  1734  0199                     	;# 
  1735  0199                     	;# 
  1736  019A                     	;# 
  1737  019A                     	;# 
  1738  019A                     	;# 
  1739  019B                     	;# 
  1740  019B                     	;# 
  1741  019B                     	;# 
  1742  019B                     	;# 
  1743  019B                     	;# 
  1744  019C                     	;# 
  1745  019C                     	;# 
  1746  019C                     	;# 
  1747  019D                     	;# 
  1748  019D                     	;# 
  1749  019D                     	;# 
  1750  019E                     	;# 
  1751  019E                     	;# 
  1752  019E                     	;# 
  1753  019F                     	;# 
  1754  019F                     	;# 
  1755  019F                     	;# 
  1756  020D                     	;# 
  1757  020F                     	;# 
  1758  0210                     	;# 
  1759  0211                     	;# 
  1760  0211                     	;# 
  1761  0212                     	;# 
  1762  0212                     	;# 
  1763  0213                     	;# 
  1764  0213                     	;# 
  1765  0214                     	;# 
  1766  0214                     	;# 
  1767  0215                     	;# 
  1768  0215                     	;# 
  1769  0215                     	;# 
  1770  0216                     	;# 
  1771  0216                     	;# 
  1772  0217                     	;# 
  1773  0217                     	;# 
  1774  0219                     	;# 
  1775  021A                     	;# 
  1776  021B                     	;# 
  1777  021C                     	;# 
  1778  021D                     	;# 
  1779  021E                     	;# 
  1780  021F                     	;# 
  1781  028C                     	;# 
  1782  028D                     	;# 
  1783  0291                     	;# 
  1784  0291                     	;# 
  1785  0292                     	;# 
  1786  0293                     	;# 
  1787  0298                     	;# 
  1788  0298                     	;# 
  1789  0299                     	;# 
  1790  029A                     	;# 
  1791  029D                     	;# 
  1792  029E                     	;# 
  1793  029F                     	;# 
  1794  030C                     	;# 
  1795  030D                     	;# 
  1796  0311                     	;# 
  1797  0311                     	;# 
  1798  0312                     	;# 
  1799  0313                     	;# 
  1800  0318                     	;# 
  1801  0318                     	;# 
  1802  0319                     	;# 
  1803  031A                     	;# 
  1804  031C                     	;# 
  1805  031C                     	;# 
  1806  031D                     	;# 
  1807  031E                     	;# 
  1808  038C                     	;# 
  1809  038D                     	;# 
  1810  0394                     	;# 
  1811  0395                     	;# 
  1812  0396                     	;# 
  1813  040C                     	;# 
  1814  040D                     	;# 
  1815  0411                     	;# 
  1816  0411                     	;# 
  1817  0412                     	;# 
  1818  0413                     	;# 
  1819  0414                     	;# 
  1820  0415                     	;# 
  1821  0416                     	;# 
  1822  0417                     	;# 
  1823  0418                     	;# 
  1824  0418                     	;# 
  1825  0419                     	;# 
  1826  041A                     	;# 
  1827  041B                     	;# 
  1828  041C                     	;# 
  1829  041D                     	;# 
  1830  041E                     	;# 
  1831  048D                     	;# 
  1832  0491                     	;# 
  1833  0491                     	;# 
  1834  0492                     	;# 
  1835  0492                     	;# 
  1836  0493                     	;# 
  1837  0493                     	;# 
  1838  0493                     	;# 
  1839  0494                     	;# 
  1840  0494                     	;# 
  1841  0495                     	;# 
  1842  0495                     	;# 
  1843  0496                     	;# 
  1844  0496                     	;# 
  1845  0497                     	;# 
  1846  0497                     	;# 
  1847  0595                     	;# 
  1848  0596                     	;# 
  1849  0597                     	;# 
  1850  059C                     	;# 
  1851  059D                     	;# 
  1852  059E                     	;# 
  1853  0611                     	;# 
  1854  0611                     	;# 
  1855  0612                     	;# 
  1856  0613                     	;# 
  1857  0614                     	;# 
  1858  0614                     	;# 
  1859  0615                     	;# 
  1860  0616                     	;# 
  1861  0617                     	;# 
  1862  0617                     	;# 
  1863  0618                     	;# 
  1864  0619                     	;# 
  1865  061A                     	;# 
  1866  061A                     	;# 
  1867  061B                     	;# 
  1868  061C                     	;# 
  1869  061D                     	;# 
  1870  061D                     	;# 
  1871  061E                     	;# 
  1872  061F                     	;# 
  1873  0FE4                     	;# 
  1874  0FE5                     	;# 
  1875  0FE6                     	;# 
  1876  0FE7                     	;# 
  1877  0FE8                     	;# 
  1878  0FE9                     	;# 
  1879  0FEA                     	;# 
  1880  0FEB                     	;# 
  1881  0FED                     	;# 
  1882  0FEE                     	;# 
  1883  0FEF                     	;# 
  1884  0000                     	;# 
  1885  0001                     	;# 
  1886  0002                     	;# 
  1887  0003                     	;# 
  1888  0004                     	;# 
  1889  0005                     	;# 
  1890  0006                     	;# 
  1891  0007                     	;# 
  1892  0008                     	;# 
  1893  0009                     	;# 
  1894  000A                     	;# 
  1895  000B                     	;# 
  1896  000C                     	;# 
  1897  000D                     	;# 
  1898  000E                     	;# 
  1899  000F                     	;# 
  1900  0010                     	;# 
  1901  0011                     	;# 
  1902  0012                     	;# 
  1903  0013                     	;# 
  1904  0014                     	;# 
  1905  0015                     	;# 
  1906  0016                     	;# 
  1907  0016                     	;# 
  1908  0017                     	;# 
  1909  0018                     	;# 
  1910  0019                     	;# 
  1911  001A                     	;# 
  1912  001B                     	;# 
  1913  001C                     	;# 
  1914  008C                     	;# 
  1915  008D                     	;# 
  1916  008E                     	;# 
  1917  008F                     	;# 
  1918  0090                     	;# 
  1919  0091                     	;# 
  1920  0092                     	;# 
  1921  0093                     	;# 
  1922  0094                     	;# 
  1923  0095                     	;# 
  1924  0096                     	;# 
  1925  0097                     	;# 
  1926  0099                     	;# 
  1927  009A                     	;# 
  1928  009B                     	;# 
  1929  009B                     	;# 
  1930  009C                     	;# 
  1931  009D                     	;# 
  1932  009E                     	;# 
  1933  010C                     	;# 
  1934  010D                     	;# 
  1935  010E                     	;# 
  1936  010F                     	;# 
  1937  0110                     	;# 
  1938  0116                     	;# 
  1939  0117                     	;# 
  1940  011D                     	;# 
  1941  018C                     	;# 
  1942  018D                     	;# 
  1943  018F                     	;# 
  1944  0190                     	;# 
  1945  0191                     	;# 
  1946  0191                     	;# 
  1947  0192                     	;# 
  1948  0193                     	;# 
  1949  0193                     	;# 
  1950  0194                     	;# 
  1951  0195                     	;# 
  1952  0196                     	;# 
  1953  0197                     	;# 
  1954  0199                     	;# 
  1955  0199                     	;# 
  1956  0199                     	;# 
  1957  019A                     	;# 
  1958  019A                     	;# 
  1959  019A                     	;# 
  1960  019B                     	;# 
  1961  019B                     	;# 
  1962  019B                     	;# 
  1963  019B                     	;# 
  1964  019B                     	;# 
  1965  019C                     	;# 
  1966  019C                     	;# 
  1967  019C                     	;# 
  1968  019D                     	;# 
  1969  019D                     	;# 
  1970  019D                     	;# 
  1971  019E                     	;# 
  1972  019E                     	;# 
  1973  019E                     	;# 
  1974  019F                     	;# 
  1975  019F                     	;# 
  1976  019F                     	;# 
  1977  020D                     	;# 
  1978  020F                     	;# 
  1979  0210                     	;# 
  1980  0211                     	;# 
  1981  0211                     	;# 
  1982  0212                     	;# 
  1983  0212                     	;# 
  1984  0213                     	;# 
  1985  0213                     	;# 
  1986  0214                     	;# 
  1987  0214                     	;# 
  1988  0215                     	;# 
  1989  0215                     	;# 
  1990  0215                     	;# 
  1991  0216                     	;# 
  1992  0216                     	;# 
  1993  0217                     	;# 
  1994  0217                     	;# 
  1995  0219                     	;# 
  1996  021A                     	;# 
  1997  021B                     	;# 
  1998  021C                     	;# 
  1999  021D                     	;# 
  2000  021E                     	;# 
  2001  021F                     	;# 
  2002  028C                     	;# 
  2003  028D                     	;# 
  2004  0291                     	;# 
  2005  0291                     	;# 
  2006  0292                     	;# 
  2007  0293                     	;# 
  2008  0298                     	;# 
  2009  0298                     	;# 
  2010  0299                     	;# 
  2011  029A                     	;# 
  2012  029D                     	;# 
  2013  029E                     	;# 
  2014  029F                     	;# 
  2015  030C                     	;# 
  2016  030D                     	;# 
  2017  0311                     	;# 
  2018  0311                     	;# 
  2019  0312                     	;# 
  2020  0313                     	;# 
  2021  0318                     	;# 
  2022  0318                     	;# 
  2023  0319                     	;# 
  2024  031A                     	;# 
  2025  031C                     	;# 
  2026  031C                     	;# 
  2027  031D                     	;# 
  2028  031E                     	;# 
  2029  038C                     	;# 
  2030  038D                     	;# 
  2031  0394                     	;# 
  2032  0395                     	;# 
  2033  0396                     	;# 
  2034  040C                     	;# 
  2035  040D                     	;# 
  2036  0411                     	;# 
  2037  0411                     	;# 
  2038  0412                     	;# 
  2039  0413                     	;# 
  2040  0414                     	;# 
  2041  0415                     	;# 
  2042  0416                     	;# 
  2043  0417                     	;# 
  2044  0418                     	;# 
  2045  0418                     	;# 
  2046  0419                     	;# 
  2047  041A                     	;# 
  2048  041B                     	;# 
  2049  041C                     	;# 
  2050  041D                     	;# 
  2051  041E                     	;# 
  2052  048D                     	;# 
  2053  0491                     	;# 
  2054  0491                     	;# 
  2055  0492                     	;# 
  2056  0492                     	;# 
  2057  0493                     	;# 
  2058  0493                     	;# 
  2059  0493                     	;# 
  2060  0494                     	;# 
  2061  0494                     	;# 
  2062  0495                     	;# 
  2063  0495                     	;# 
  2064  0496                     	;# 
  2065  0496                     	;# 
  2066  0497                     	;# 
  2067  0497                     	;# 
  2068  0595                     	;# 
  2069  0596                     	;# 
  2070  0597                     	;# 
  2071  059C                     	;# 
  2072  059D                     	;# 
  2073  059E                     	;# 
  2074  0611                     	;# 
  2075  0611                     	;# 
  2076  0612                     	;# 
  2077  0613                     	;# 
  2078  0614                     	;# 
  2079  0614                     	;# 
  2080  0615                     	;# 
  2081  0616                     	;# 
  2082  0617                     	;# 
  2083  0617                     	;# 
  2084  0618                     	;# 
  2085  0619                     	;# 
  2086  061A                     	;# 
  2087  061A                     	;# 
  2088  061B                     	;# 
  2089  061C                     	;# 
  2090  061D                     	;# 
  2091  061D                     	;# 
  2092  061E                     	;# 
  2093  061F                     	;# 
  2094  0FE4                     	;# 
  2095  0FE5                     	;# 
  2096  0FE6                     	;# 
  2097  0FE7                     	;# 
  2098  0FE8                     	;# 
  2099  0FE9                     	;# 
  2100  0FEA                     	;# 
  2101  0FEB                     	;# 
  2102  0FED                     	;# 
  2103  0FEE                     	;# 
  2104  0FEF                     	;# 
  2105  0000                     	;# 
  2106  0001                     	;# 
  2107  0002                     	;# 
  2108  0003                     	;# 
  2109  0004                     	;# 
  2110  0005                     	;# 
  2111  0006                     	;# 
  2112  0007                     	;# 
  2113  0008                     	;# 
  2114  0009                     	;# 
  2115  000A                     	;# 
  2116  000B                     	;# 
  2117  000C                     	;# 
  2118  000D                     	;# 
  2119  000E                     	;# 
  2120  000F                     	;# 
  2121  0010                     	;# 
  2122  0011                     	;# 
  2123  0012                     	;# 
  2124  0013                     	;# 
  2125  0014                     	;# 
  2126  0015                     	;# 
  2127  0016                     	;# 
  2128  0016                     	;# 
  2129  0017                     	;# 
  2130  0018                     	;# 
  2131  0019                     	;# 
  2132  001A                     	;# 
  2133  001B                     	;# 
  2134  001C                     	;# 
  2135  008C                     	;# 
  2136  008D                     	;# 
  2137  008E                     	;# 
  2138  008F                     	;# 
  2139  0090                     	;# 
  2140  0091                     	;# 
  2141  0092                     	;# 
  2142  0093                     	;# 
  2143  0094                     	;# 
  2144  0095                     	;# 
  2145  0096                     	;# 
  2146  0097                     	;# 
  2147  0099                     	;# 
  2148  009A                     	;# 
  2149  009B                     	;# 
  2150  009B                     	;# 
  2151  009C                     	;# 
  2152  009D                     	;# 
  2153  009E                     	;# 
  2154  010C                     	;# 
  2155  010D                     	;# 
  2156  010E                     	;# 
  2157  010F                     	;# 
  2158  0110                     	;# 
  2159  0116                     	;# 
  2160  0117                     	;# 
  2161  011D                     	;# 
  2162  018C                     	;# 
  2163  018D                     	;# 
  2164  018F                     	;# 
  2165  0190                     	;# 
  2166  0191                     	;# 
  2167  0191                     	;# 
  2168  0192                     	;# 
  2169  0193                     	;# 
  2170  0193                     	;# 
  2171  0194                     	;# 
  2172  0195                     	;# 
  2173  0196                     	;# 
  2174  0197                     	;# 
  2175  0199                     	;# 
  2176  0199                     	;# 
  2177  0199                     	;# 
  2178  019A                     	;# 
  2179  019A                     	;# 
  2180  019A                     	;# 
  2181  019B                     	;# 
  2182  019B                     	;# 
  2183  019B                     	;# 
  2184  019B                     	;# 
  2185  019B                     	;# 
  2186  019C                     	;# 
  2187  019C                     	;# 
  2188  019C                     	;# 
  2189  019D                     	;# 
  2190  019D                     	;# 
  2191  019D                     	;# 
  2192  019E                     	;# 
  2193  019E                     	;# 
  2194  019E                     	;# 
  2195  019F                     	;# 
  2196  019F                     	;# 
  2197  019F                     	;# 
  2198  020D                     	;# 
  2199  020F                     	;# 
  2200  0210                     	;# 
  2201  0211                     	;# 
  2202  0211                     	;# 
  2203  0212                     	;# 
  2204  0212                     	;# 
  2205  0213                     	;# 
  2206  0213                     	;# 
  2207  0214                     	;# 
  2208  0214                     	;# 
  2209  0215                     	;# 
  2210  0215                     	;# 
  2211  0215                     	;# 
  2212  0216                     	;# 
  2213  0216                     	;# 
  2214  0217                     	;# 
  2215  0217                     	;# 
  2216  0219                     	;# 
  2217  021A                     	;# 
  2218  021B                     	;# 
  2219  021C                     	;# 
  2220  021D                     	;# 
  2221  021E                     	;# 
  2222  021F                     	;# 
  2223  028C                     	;# 
  2224  028D                     	;# 
  2225  0291                     	;# 
  2226  0291                     	;# 
  2227  0292                     	;# 
  2228  0293                     	;# 
  2229  0298                     	;# 
  2230  0298                     	;# 
  2231  0299                     	;# 
  2232  029A                     	;# 
  2233  029D                     	;# 
  2234  029E                     	;# 
  2235  029F                     	;# 
  2236  030C                     	;# 
  2237  030D                     	;# 
  2238  0311                     	;# 
  2239  0311                     	;# 
  2240  0312                     	;# 
  2241  0313                     	;# 
  2242  0318                     	;# 
  2243  0318                     	;# 
  2244  0319                     	;# 
  2245  031A                     	;# 
  2246  031C                     	;# 
  2247  031C                     	;# 
  2248  031D                     	;# 
  2249  031E                     	;# 
  2250  038C                     	;# 
  2251  038D                     	;# 
  2252  0394                     	;# 
  2253  0395                     	;# 
  2254  0396                     	;# 
  2255  040C                     	;# 
  2256  040D                     	;# 
  2257  0411                     	;# 
  2258  0411                     	;# 
  2259  0412                     	;# 
  2260  0413                     	;# 
  2261  0414                     	;# 
  2262  0415                     	;# 
  2263  0416                     	;# 
  2264  0417                     	;# 
  2265  0418                     	;# 
  2266  0418                     	;# 
  2267  0419                     	;# 
  2268  041A                     	;# 
  2269  041B                     	;# 
  2270  041C                     	;# 
  2271  041D                     	;# 
  2272  041E                     	;# 
  2273  048D                     	;# 
  2274  0491                     	;# 
  2275  0491                     	;# 
  2276  0492                     	;# 
  2277  0492                     	;# 
  2278  0493                     	;# 
  2279  0493                     	;# 
  2280  0493                     	;# 
  2281  0494                     	;# 
  2282  0494                     	;# 
  2283  0495                     	;# 
  2284  0495                     	;# 
  2285  0496                     	;# 
  2286  0496                     	;# 
  2287  0497                     	;# 
  2288  0497                     	;# 
  2289  0595                     	;# 
  2290  0596                     	;# 
  2291  0597                     	;# 
  2292  059C                     	;# 
  2293  059D                     	;# 
  2294  059E                     	;# 
  2295  0611                     	;# 
  2296  0611                     	;# 
  2297  0612                     	;# 
  2298  0613                     	;# 
  2299  0614                     	;# 
  2300  0614                     	;# 
  2301  0615                     	;# 
  2302  0616                     	;# 
  2303  0617                     	;# 
  2304  0617                     	;# 
  2305  0618                     	;# 
  2306  0619                     	;# 
  2307  061A                     	;# 
  2308  061A                     	;# 
  2309  061B                     	;# 
  2310  061C                     	;# 
  2311  061D                     	;# 
  2312  061D                     	;# 
  2313  061E                     	;# 
  2314  061F                     	;# 
  2315  0FE4                     	;# 
  2316  0FE5                     	;# 
  2317  0FE6                     	;# 
  2318  0FE7                     	;# 
  2319  0FE8                     	;# 
  2320  0FE9                     	;# 
  2321  0FEA                     	;# 
  2322  0FEB                     	;# 
  2323  0FED                     	;# 
  2324  0FEE                     	;# 
  2325  0FEF                     	;# 
  2326  0000                     	;# 
  2327  0001                     	;# 
  2328  0002                     	;# 
  2329  0003                     	;# 
  2330  0004                     	;# 
  2331  0005                     	;# 
  2332  0006                     	;# 
  2333  0007                     	;# 
  2334  0008                     	;# 
  2335  0009                     	;# 
  2336  000A                     	;# 
  2337  000B                     	;# 
  2338  000C                     	;# 
  2339  000D                     	;# 
  2340  000E                     	;# 
  2341  000F                     	;# 
  2342  0010                     	;# 
  2343  0011                     	;# 
  2344  0012                     	;# 
  2345  0013                     	;# 
  2346  0014                     	;# 
  2347  0015                     	;# 
  2348  0016                     	;# 
  2349  0016                     	;# 
  2350  0017                     	;# 
  2351  0018                     	;# 
  2352  0019                     	;# 
  2353  001A                     	;# 
  2354  001B                     	;# 
  2355  001C                     	;# 
  2356  008C                     	;# 
  2357  008D                     	;# 
  2358  008E                     	;# 
  2359  008F                     	;# 
  2360  0090                     	;# 
  2361  0091                     	;# 
  2362  0092                     	;# 
  2363  0093                     	;# 
  2364  0094                     	;# 
  2365  0095                     	;# 
  2366  0096                     	;# 
  2367  0097                     	;# 
  2368  0099                     	;# 
  2369  009A                     	;# 
  2370  009B                     	;# 
  2371  009B                     	;# 
  2372  009C                     	;# 
  2373  009D                     	;# 
  2374  009E                     	;# 
  2375  010C                     	;# 
  2376  010D                     	;# 
  2377  010E                     	;# 
  2378  010F                     	;# 
  2379  0110                     	;# 
  2380  0116                     	;# 
  2381  0117                     	;# 
  2382  011D                     	;# 
  2383  018C                     	;# 
  2384  018D                     	;# 
  2385  018F                     	;# 
  2386  0190                     	;# 
  2387  0191                     	;# 
  2388  0191                     	;# 
  2389  0192                     	;# 
  2390  0193                     	;# 
  2391  0193                     	;# 
  2392  0194                     	;# 
  2393  0195                     	;# 
  2394  0196                     	;# 
  2395  0197                     	;# 
  2396  0199                     	;# 
  2397  0199                     	;# 
  2398  0199                     	;# 
  2399  019A                     	;# 
  2400  019A                     	;# 
  2401  019A                     	;# 
  2402  019B                     	;# 
  2403  019B                     	;# 
  2404  019B                     	;# 
  2405  019B                     	;# 
  2406  019B                     	;# 
  2407  019C                     	;# 
  2408  019C                     	;# 
  2409  019C                     	;# 
  2410  019D                     	;# 
  2411  019D                     	;# 
  2412  019D                     	;# 
  2413  019E                     	;# 
  2414  019E                     	;# 
  2415  019E                     	;# 
  2416  019F                     	;# 
  2417  019F                     	;# 
  2418  019F                     	;# 
  2419  020D                     	;# 
  2420  020F                     	;# 
  2421  0210                     	;# 
  2422  0211                     	;# 
  2423  0211                     	;# 
  2424  0212                     	;# 
  2425  0212                     	;# 
  2426  0213                     	;# 
  2427  0213                     	;# 
  2428  0214                     	;# 
  2429  0214                     	;# 
  2430  0215                     	;# 
  2431  0215                     	;# 
  2432  0215                     	;# 
  2433  0216                     	;# 
  2434  0216                     	;# 
  2435  0217                     	;# 
  2436  0217                     	;# 
  2437  0219                     	;# 
  2438  021A                     	;# 
  2439  021B                     	;# 
  2440  021C                     	;# 
  2441  021D                     	;# 
  2442  021E                     	;# 
  2443  021F                     	;# 
  2444  028C                     	;# 
  2445  028D                     	;# 
  2446  0291                     	;# 
  2447  0291                     	;# 
  2448  0292                     	;# 
  2449  0293                     	;# 
  2450  0298                     	;# 
  2451  0298                     	;# 
  2452  0299                     	;# 
  2453  029A                     	;# 
  2454  029D                     	;# 
  2455  029E                     	;# 
  2456  029F                     	;# 
  2457  030C                     	;# 
  2458  030D                     	;# 
  2459  0311                     	;# 
  2460  0311                     	;# 
  2461  0312                     	;# 
  2462  0313                     	;# 
  2463  0318                     	;# 
  2464  0318                     	;# 
  2465  0319                     	;# 
  2466  031A                     	;# 
  2467  031C                     	;# 
  2468  031C                     	;# 
  2469  031D                     	;# 
  2470  031E                     	;# 
  2471  038C                     	;# 
  2472  038D                     	;# 
  2473  0394                     	;# 
  2474  0395                     	;# 
  2475  0396                     	;# 
  2476  040C                     	;# 
  2477  040D                     	;# 
  2478  0411                     	;# 
  2479  0411                     	;# 
  2480  0412                     	;# 
  2481  0413                     	;# 
  2482  0414                     	;# 
  2483  0415                     	;# 
  2484  0416                     	;# 
  2485  0417                     	;# 
  2486  0418                     	;# 
  2487  0418                     	;# 
  2488  0419                     	;# 
  2489  041A                     	;# 
  2490  041B                     	;# 
  2491  041C                     	;# 
  2492  041D                     	;# 
  2493  041E                     	;# 
  2494  048D                     	;# 
  2495  0491                     	;# 
  2496  0491                     	;# 
  2497  0492                     	;# 
  2498  0492                     	;# 
  2499  0493                     	;# 
  2500  0493                     	;# 
  2501  0493                     	;# 
  2502  0494                     	;# 
  2503  0494                     	;# 
  2504  0495                     	;# 
  2505  0495                     	;# 
  2506  0496                     	;# 
  2507  0496                     	;# 
  2508  0497                     	;# 
  2509  0497                     	;# 
  2510  0595                     	;# 
  2511  0596                     	;# 
  2512  0597                     	;# 
  2513  059C                     	;# 
  2514  059D                     	;# 
  2515  059E                     	;# 
  2516  0611                     	;# 
  2517  0611                     	;# 
  2518  0612                     	;# 
  2519  0613                     	;# 
  2520  0614                     	;# 
  2521  0614                     	;# 
  2522  0615                     	;# 
  2523  0616                     	;# 
  2524  0617                     	;# 
  2525  0617                     	;# 
  2526  0618                     	;# 
  2527  0619                     	;# 
  2528  061A                     	;# 
  2529  061A                     	;# 
  2530  061B                     	;# 
  2531  061C                     	;# 
  2532  061D                     	;# 
  2533  061D                     	;# 
  2534  061E                     	;# 
  2535  061F                     	;# 
  2536  0FE4                     	;# 
  2537  0FE5                     	;# 
  2538  0FE6                     	;# 
  2539  0FE7                     	;# 
  2540  0FE8                     	;# 
  2541  0FE9                     	;# 
  2542  0FEA                     	;# 
  2543  0FEB                     	;# 
  2544  0FED                     	;# 
  2545  0FEE                     	;# 
  2546  0FEF                     	;# 
  2547  0000                     	;# 
  2548  0001                     	;# 
  2549  0002                     	;# 
  2550  0003                     	;# 
  2551  0004                     	;# 
  2552  0005                     	;# 
  2553  0006                     	;# 
  2554  0007                     	;# 
  2555  0008                     	;# 
  2556  0009                     	;# 
  2557  000A                     	;# 
  2558  000B                     	;# 
  2559  000C                     	;# 
  2560  000D                     	;# 
  2561  000E                     	;# 
  2562  000F                     	;# 
  2563  0010                     	;# 
  2564  0011                     	;# 
  2565  0012                     	;# 
  2566  0013                     	;# 
  2567  0014                     	;# 
  2568  0015                     	;# 
  2569  0016                     	;# 
  2570  0016                     	;# 
  2571  0017                     	;# 
  2572  0018                     	;# 
  2573  0019                     	;# 
  2574  001A                     	;# 
  2575  001B                     	;# 
  2576  001C                     	;# 
  2577  008C                     	;# 
  2578  008D                     	;# 
  2579  008E                     	;# 
  2580  008F                     	;# 
  2581  0090                     	;# 
  2582  0091                     	;# 
  2583  0092                     	;# 
  2584  0093                     	;# 
  2585  0094                     	;# 
  2586  0095                     	;# 
  2587  0096                     	;# 
  2588  0097                     	;# 
  2589  0099                     	;# 
  2590  009A                     	;# 
  2591  009B                     	;# 
  2592  009B                     	;# 
  2593  009C                     	;# 
  2594  009D                     	;# 
  2595  009E                     	;# 
  2596  010C                     	;# 
  2597  010D                     	;# 
  2598  010E                     	;# 
  2599  010F                     	;# 
  2600  0110                     	;# 
  2601  0116                     	;# 
  2602  0117                     	;# 
  2603  011D                     	;# 
  2604  018C                     	;# 
  2605  018D                     	;# 
  2606  018F                     	;# 
  2607  0190                     	;# 
  2608  0191                     	;# 
  2609  0191                     	;# 
  2610  0192                     	;# 
  2611  0193                     	;# 
  2612  0193                     	;# 
  2613  0194                     	;# 
  2614  0195                     	;# 
  2615  0196                     	;# 
  2616  0197                     	;# 
  2617  0199                     	;# 
  2618  0199                     	;# 
  2619  0199                     	;# 
  2620  019A                     	;# 
  2621  019A                     	;# 
  2622  019A                     	;# 
  2623  019B                     	;# 
  2624  019B                     	;# 
  2625  019B                     	;# 
  2626  019B                     	;# 
  2627  019B                     	;# 
  2628  019C                     	;# 
  2629  019C                     	;# 
  2630  019C                     	;# 
  2631  019D                     	;# 
  2632  019D                     	;# 
  2633  019D                     	;# 
  2634  019E                     	;# 
  2635  019E                     	;# 
  2636  019E                     	;# 
  2637  019F                     	;# 
  2638  019F                     	;# 
  2639  019F                     	;# 
  2640  020D                     	;# 
  2641  020F                     	;# 
  2642  0210                     	;# 
  2643  0211                     	;# 
  2644  0211                     	;# 
  2645  0212                     	;# 
  2646  0212                     	;# 
  2647  0213                     	;# 
  2648  0213                     	;# 
  2649  0214                     	;# 
  2650  0214                     	;# 
  2651  0215                     	;# 
  2652  0215                     	;# 
  2653  0215                     	;# 
  2654  0216                     	;# 
  2655  0216                     	;# 
  2656  0217                     	;# 
  2657  0217                     	;# 
  2658  0219                     	;# 
  2659  021A                     	;# 
  2660  021B                     	;# 
  2661  021C                     	;# 
  2662  021D                     	;# 
  2663  021E                     	;# 
  2664  021F                     	;# 
  2665  028C                     	;# 
  2666  028D                     	;# 
  2667  0291                     	;# 
  2668  0291                     	;# 
  2669  0292                     	;# 
  2670  0293                     	;# 
  2671  0298                     	;# 
  2672  0298                     	;# 
  2673  0299                     	;# 
  2674  029A                     	;# 
  2675  029D                     	;# 
  2676  029E                     	;# 
  2677  029F                     	;# 
  2678  030C                     	;# 
  2679  030D                     	;# 
  2680  0311                     	;# 
  2681  0311                     	;# 
  2682  0312                     	;# 
  2683  0313                     	;# 
  2684  0318                     	;# 
  2685  0318                     	;# 
  2686  0319                     	;# 
  2687  031A                     	;# 
  2688  031C                     	;# 
  2689  031C                     	;# 
  2690  031D                     	;# 
  2691  031E                     	;# 
  2692  038C                     	;# 
  2693  038D                     	;# 
  2694  0394                     	;# 
  2695  0395                     	;# 
  2696  0396                     	;# 
  2697  040C                     	;# 
  2698  040D                     	;# 
  2699  0411                     	;# 
  2700  0411                     	;# 
  2701  0412                     	;# 
  2702  0413                     	;# 
  2703  0414                     	;# 
  2704  0415                     	;# 
  2705  0416                     	;# 
  2706  0417                     	;# 
  2707  0418                     	;# 
  2708  0418                     	;# 
  2709  0419                     	;# 
  2710  041A                     	;# 
  2711  041B                     	;# 
  2712  041C                     	;# 
  2713  041D                     	;# 
  2714  041E                     	;# 
  2715  048D                     	;# 
  2716  0491                     	;# 
  2717  0491                     	;# 
  2718  0492                     	;# 
  2719  0492                     	;# 
  2720  0493                     	;# 
  2721  0493                     	;# 
  2722  0493                     	;# 
  2723  0494                     	;# 
  2724  0494                     	;# 
  2725  0495                     	;# 
  2726  0495                     	;# 
  2727  0496                     	;# 
  2728  0496                     	;# 
  2729  0497                     	;# 
  2730  0497                     	;# 
  2731  0595                     	;# 
  2732  0596                     	;# 
  2733  0597                     	;# 
  2734  059C                     	;# 
  2735  059D                     	;# 
  2736  059E                     	;# 
  2737  0611                     	;# 
  2738  0611                     	;# 
  2739  0612                     	;# 
  2740  0613                     	;# 
  2741  0614                     	;# 
  2742  0614                     	;# 
  2743  0615                     	;# 
  2744  0616                     	;# 
  2745  0617                     	;# 
  2746  0617                     	;# 
  2747  0618                     	;# 
  2748  0619                     	;# 
  2749  061A                     	;# 
  2750  061A                     	;# 
  2751  061B                     	;# 
  2752  061C                     	;# 
  2753  061D                     	;# 
  2754  061D                     	;# 
  2755  061E                     	;# 
  2756  061F                     	;# 
  2757  0FE4                     	;# 
  2758  0FE5                     	;# 
  2759  0FE6                     	;# 
  2760  0FE7                     	;# 
  2761  0FE8                     	;# 
  2762  0FE9                     	;# 
  2763  0FEA                     	;# 
  2764  0FEB                     	;# 
  2765  0FED                     	;# 
  2766  0FEE                     	;# 
  2767  0FEF                     	;# 
  2768  0000                     	;# 
  2769  0001                     	;# 
  2770  0002                     	;# 
  2771  0003                     	;# 
  2772  0004                     	;# 
  2773  0005                     	;# 
  2774  0006                     	;# 
  2775  0007                     	;# 
  2776  0008                     	;# 
  2777  0009                     	;# 
  2778  000A                     	;# 
  2779  000B                     	;# 
  2780  000C                     	;# 
  2781  000D                     	;# 
  2782  000E                     	;# 
  2783  000F                     	;# 
  2784  0010                     	;# 
  2785  0011                     	;# 
  2786  0012                     	;# 
  2787  0013                     	;# 
  2788  0014                     	;# 
  2789  0015                     	;# 
  2790  0016                     	;# 
  2791  0016                     	;# 
  2792  0017                     	;# 
  2793  0018                     	;# 
  2794  0019                     	;# 
  2795  001A                     	;# 
  2796  001B                     	;# 
  2797  001C                     	;# 
  2798  008C                     	;# 
  2799  008D                     	;# 
  2800  008E                     	;# 
  2801  008F                     	;# 
  2802  0090                     	;# 
  2803  0091                     	;# 
  2804  0092                     	;# 
  2805  0093                     	;# 
  2806  0094                     	;# 
  2807  0095                     	;# 
  2808  0096                     	;# 
  2809  0097                     	;# 
  2810  0099                     	;# 
  2811  009A                     	;# 
  2812  009B                     	;# 
  2813  009B                     	;# 
  2814  009C                     	;# 
  2815  009D                     	;# 
  2816  009E                     	;# 
  2817  010C                     	;# 
  2818  010D                     	;# 
  2819  010E                     	;# 
  2820  010F                     	;# 
  2821  0110                     	;# 
  2822  0116                     	;# 
  2823  0117                     	;# 
  2824  011D                     	;# 
  2825  018C                     	;# 
  2826  018D                     	;# 
  2827  018F                     	;# 
  2828  0190                     	;# 
  2829  0191                     	;# 
  2830  0191                     	;# 
  2831  0192                     	;# 
  2832  0193                     	;# 
  2833  0193                     	;# 
  2834  0194                     	;# 
  2835  0195                     	;# 
  2836  0196                     	;# 
  2837  0197                     	;# 
  2838  0199                     	;# 
  2839  0199                     	;# 
  2840  0199                     	;# 
  2841  019A                     	;# 
  2842  019A                     	;# 
  2843  019A                     	;# 
  2844  019B                     	;# 
  2845  019B                     	;# 
  2846  019B                     	;# 
  2847  019B                     	;# 
  2848  019B                     	;# 
  2849  019C                     	;# 
  2850  019C                     	;# 
  2851  019C                     	;# 
  2852  019D                     	;# 
  2853  019D                     	;# 
  2854  019D                     	;# 
  2855  019E                     	;# 
  2856  019E                     	;# 
  2857  019E                     	;# 
  2858  019F                     	;# 
  2859  019F                     	;# 
  2860  019F                     	;# 
  2861  020D                     	;# 
  2862  020F                     	;# 
  2863  0210                     	;# 
  2864  0211                     	;# 
  2865  0211                     	;# 
  2866  0212                     	;# 
  2867  0212                     	;# 
  2868  0213                     	;# 
  2869  0213                     	;# 
  2870  0214                     	;# 
  2871  0214                     	;# 
  2872  0215                     	;# 
  2873  0215                     	;# 
  2874  0215                     	;# 
  2875  0216                     	;# 
  2876  0216                     	;# 
  2877  0217                     	;# 
  2878  0217                     	;# 
  2879  0219                     	;# 
  2880  021A                     	;# 
  2881  021B                     	;# 
  2882  021C                     	;# 
  2883  021D                     	;# 
  2884  021E                     	;# 
  2885  021F                     	;# 
  2886  028C                     	;# 
  2887  028D                     	;# 
  2888  0291                     	;# 
  2889  0291                     	;# 
  2890  0292                     	;# 
  2891  0293                     	;# 
  2892  0298                     	;# 
  2893  0298                     	;# 
  2894  0299                     	;# 
  2895  029A                     	;# 
  2896  029D                     	;# 
  2897  029E                     	;# 
  2898  029F                     	;# 
  2899  030C                     	;# 
  2900  030D                     	;# 
  2901  0311                     	;# 
  2902  0311                     	;# 
  2903  0312                     	;# 
  2904  0313                     	;# 
  2905  0318                     	;# 
  2906  0318                     	;# 
  2907  0319                     	;# 
  2908  031A                     	;# 
  2909  031C                     	;# 
  2910  031C                     	;# 
  2911  031D                     	;# 
  2912  031E                     	;# 
  2913  038C                     	;# 
  2914  038D                     	;# 
  2915  0394                     	;# 
  2916  0395                     	;# 
  2917  0396                     	;# 
  2918  040C                     	;# 
  2919  040D                     	;# 
  2920  0411                     	;# 
  2921  0411                     	;# 
  2922  0412                     	;# 
  2923  0413                     	;# 
  2924  0414                     	;# 
  2925  0415                     	;# 
  2926  0416                     	;# 
  2927  0417                     	;# 
  2928  0418                     	;# 
  2929  0418                     	;# 
  2930  0419                     	;# 
  2931  041A                     	;# 
  2932  041B                     	;# 
  2933  041C                     	;# 
  2934  041D                     	;# 
  2935  041E                     	;# 
  2936  048D                     	;# 
  2937  0491                     	;# 
  2938  0491                     	;# 
  2939  0492                     	;# 
  2940  0492                     	;# 
  2941  0493                     	;# 
  2942  0493                     	;# 
  2943  0493                     	;# 
  2944  0494                     	;# 
  2945  0494                     	;# 
  2946  0495                     	;# 
  2947  0495                     	;# 
  2948  0496                     	;# 
  2949  0496                     	;# 
  2950  0497                     	;# 
  2951  0497                     	;# 
  2952  0595                     	;# 
  2953  0596                     	;# 
  2954  0597                     	;# 
  2955  059C                     	;# 
  2956  059D                     	;# 
  2957  059E                     	;# 
  2958  0611                     	;# 
  2959  0611                     	;# 
  2960  0612                     	;# 
  2961  0613                     	;# 
  2962  0614                     	;# 
  2963  0614                     	;# 
  2964  0615                     	;# 
  2965  0616                     	;# 
  2966  0617                     	;# 
  2967  0617                     	;# 
  2968  0618                     	;# 
  2969  0619                     	;# 
  2970  061A                     	;# 
  2971  061A                     	;# 
  2972  061B                     	;# 
  2973  061C                     	;# 
  2974  061D                     	;# 
  2975  061D                     	;# 
  2976  061E                     	;# 
  2977  061F                     	;# 
  2978  0FE4                     	;# 
  2979  0FE5                     	;# 
  2980  0FE6                     	;# 
  2981  0FE7                     	;# 
  2982  0FE8                     	;# 
  2983  0FE9                     	;# 
  2984  0FEA                     	;# 
  2985  0FEB                     	;# 
  2986  0FED                     	;# 
  2987  0FEE                     	;# 
  2988  0FEF                     	;# 
  2989  0000                     	;# 
  2990  0001                     	;# 
  2991  0002                     	;# 
  2992  0003                     	;# 
  2993  0004                     	;# 
  2994  0005                     	;# 
  2995  0006                     	;# 
  2996  0007                     	;# 
  2997  0008                     	;# 
  2998  0009                     	;# 
  2999  000A                     	;# 
  3000  000B                     	;# 
  3001  000C                     	;# 
  3002  000D                     	;# 
  3003  000E                     	;# 
  3004  000F                     	;# 
  3005  0010                     	;# 
  3006  0011                     	;# 
  3007  0012                     	;# 
  3008  0013                     	;# 
  3009  0014                     	;# 
  3010  0015                     	;# 
  3011  0016                     	;# 
  3012  0016                     	;# 
  3013  0017                     	;# 
  3014  0018                     	;# 
  3015  0019                     	;# 
  3016  001A                     	;# 
  3017  001B                     	;# 
  3018  001C                     	;# 
  3019  008C                     	;# 
  3020  008D                     	;# 
  3021  008E                     	;# 
  3022  008F                     	;# 
  3023  0090                     	;# 
  3024  0091                     	;# 
  3025  0092                     	;# 
  3026  0093                     	;# 
  3027  0094                     	;# 
  3028  0095                     	;# 
  3029  0096                     	;# 
  3030  0097                     	;# 
  3031  0099                     	;# 
  3032  009A                     	;# 
  3033  009B                     	;# 
  3034  009B                     	;# 
  3035  009C                     	;# 
  3036  009D                     	;# 
  3037  009E                     	;# 
  3038  010C                     	;# 
  3039  010D                     	;# 
  3040  010E                     	;# 
  3041  010F                     	;# 
  3042  0110                     	;# 
  3043  0116                     	;# 
  3044  0117                     	;# 
  3045  011D                     	;# 
  3046  018C                     	;# 
  3047  018D                     	;# 
  3048  018F                     	;# 
  3049  0190                     	;# 
  3050  0191                     	;# 
  3051  0191                     	;# 
  3052  0192                     	;# 
  3053  0193                     	;# 
  3054  0193                     	;# 
  3055  0194                     	;# 
  3056  0195                     	;# 
  3057  0196                     	;# 
  3058  0197                     	;# 
  3059  0199                     	;# 
  3060  0199                     	;# 
  3061  0199                     	;# 
  3062  019A                     	;# 
  3063  019A                     	;# 
  3064  019A                     	;# 
  3065  019B                     	;# 
  3066  019B                     	;# 
  3067  019B                     	;# 
  3068  019B                     	;# 
  3069  019B                     	;# 
  3070  019C                     	;# 
  3071  019C                     	;# 
  3072  019C                     	;# 
  3073  019D                     	;# 
  3074  019D                     	;# 
  3075  019D                     	;# 
  3076  019E                     	;# 
  3077  019E                     	;# 
  3078  019E                     	;# 
  3079  019F                     	;# 
  3080  019F                     	;# 
  3081  019F                     	;# 
  3082  020D                     	;# 
  3083  020F                     	;# 
  3084  0210                     	;# 
  3085  0211                     	;# 
  3086  0211                     	;# 
  3087  0212                     	;# 
  3088  0212                     	;# 
  3089  0213                     	;# 
  3090  0213                     	;# 
  3091  0214                     	;# 
  3092  0214                     	;# 
  3093  0215                     	;# 
  3094  0215                     	;# 
  3095  0215                     	;# 
  3096  0216                     	;# 
  3097  0216                     	;# 
  3098  0217                     	;# 
  3099  0217                     	;# 
  3100  0219                     	;# 
  3101  021A                     	;# 
  3102  021B                     	;# 
  3103  021C                     	;# 
  3104  021D                     	;# 
  3105  021E                     	;# 
  3106  021F                     	;# 
  3107  028C                     	;# 
  3108  028D                     	;# 
  3109  0291                     	;# 
  3110  0291                     	;# 
  3111  0292                     	;# 
  3112  0293                     	;# 
  3113  0298                     	;# 
  3114  0298                     	;# 
  3115  0299                     	;# 
  3116  029A                     	;# 
  3117  029D                     	;# 
  3118  029E                     	;# 
  3119  029F                     	;# 
  3120  030C                     	;# 
  3121  030D                     	;# 
  3122  0311                     	;# 
  3123  0311                     	;# 
  3124  0312                     	;# 
  3125  0313                     	;# 
  3126  0318                     	;# 
  3127  0318                     	;# 
  3128  0319                     	;# 
  3129  031A                     	;# 
  3130  031C                     	;# 
  3131  031C                     	;# 
  3132  031D                     	;# 
  3133  031E                     	;# 
  3134  038C                     	;# 
  3135  038D                     	;# 
  3136  0394                     	;# 
  3137  0395                     	;# 
  3138  0396                     	;# 
  3139  040C                     	;# 
  3140  040D                     	;# 
  3141  0411                     	;# 
  3142  0411                     	;# 
  3143  0412                     	;# 
  3144  0413                     	;# 
  3145  0414                     	;# 
  3146  0415                     	;# 
  3147  0416                     	;# 
  3148  0417                     	;# 
  3149  0418                     	;# 
  3150  0418                     	;# 
  3151  0419                     	;# 
  3152  041A                     	;# 
  3153  041B                     	;# 
  3154  041C                     	;# 
  3155  041D                     	;# 
  3156  041E                     	;# 
  3157  048D                     	;# 
  3158  0491                     	;# 
  3159  0491                     	;# 
  3160  0492                     	;# 
  3161  0492                     	;# 
  3162  0493                     	;# 
  3163  0493                     	;# 
  3164  0493                     	;# 
  3165  0494                     	;# 
  3166  0494                     	;# 
  3167  0495                     	;# 
  3168  0495                     	;# 
  3169  0496                     	;# 
  3170  0496                     	;# 
  3171  0497                     	;# 
  3172  0497                     	;# 
  3173  0595                     	;# 
  3174  0596                     	;# 
  3175  0597                     	;# 
  3176  059C                     	;# 
  3177  059D                     	;# 
  3178  059E                     	;# 
  3179  0611                     	;# 
  3180  0611                     	;# 
  3181  0612                     	;# 
  3182  0613                     	;# 
  3183  0614                     	;# 
  3184  0614                     	;# 
  3185  0615                     	;# 
  3186  0616                     	;# 
  3187  0617                     	;# 
  3188  0617                     	;# 
  3189  0618                     	;# 
  3190  0619                     	;# 
  3191  061A                     	;# 
  3192  061A                     	;# 
  3193  061B                     	;# 
  3194  061C                     	;# 
  3195  061D                     	;# 
  3196  061D                     	;# 
  3197  061E                     	;# 
  3198  061F                     	;# 
  3199  0FE4                     	;# 
  3200  0FE5                     	;# 
  3201  0FE6                     	;# 
  3202  0FE7                     	;# 
  3203  0FE8                     	;# 
  3204  0FE9                     	;# 
  3205  0FEA                     	;# 
  3206  0FEB                     	;# 
  3207  0FED                     	;# 
  3208  0FEE                     	;# 
  3209  0FEF                     	;# 
  3210  0000                     	;# 
  3211  0001                     	;# 
  3212  0002                     	;# 
  3213  0003                     	;# 
  3214  0004                     	;# 
  3215  0005                     	;# 
  3216  0006                     	;# 
  3217  0007                     	;# 
  3218  0008                     	;# 
  3219  0009                     	;# 
  3220  000A                     	;# 
  3221  000B                     	;# 
  3222  000C                     	;# 
  3223  000D                     	;# 
  3224  000E                     	;# 
  3225  000F                     	;# 
  3226  0010                     	;# 
  3227  0011                     	;# 
  3228  0012                     	;# 
  3229  0013                     	;# 
  3230  0014                     	;# 
  3231  0015                     	;# 
  3232  0016                     	;# 
  3233  0016                     	;# 
  3234  0017                     	;# 
  3235  0018                     	;# 
  3236  0019                     	;# 
  3237  001A                     	;# 
  3238  001B                     	;# 
  3239  001C                     	;# 
  3240  008C                     	;# 
  3241  008D                     	;# 
  3242  008E                     	;# 
  3243  008F                     	;# 
  3244  0090                     	;# 
  3245  0091                     	;# 
  3246  0092                     	;# 
  3247  0093                     	;# 
  3248  0094                     	;# 
  3249  0095                     	;# 
  3250  0096                     	;# 
  3251  0097                     	;# 
  3252  0099                     	;# 
  3253  009A                     	;# 
  3254  009B                     	;# 
  3255  009B                     	;# 
  3256  009C                     	;# 
  3257  009D                     	;# 
  3258  009E                     	;# 
  3259  010C                     	;# 
  3260  010D                     	;# 
  3261  010E                     	;# 
  3262  010F                     	;# 
  3263  0110                     	;# 
  3264  0116                     	;# 
  3265  0117                     	;# 
  3266  011D                     	;# 
  3267  018C                     	;# 
  3268  018D                     	;# 
  3269  018F                     	;# 
  3270  0190                     	;# 
  3271  0191                     	;# 
  3272  0191                     	;# 
  3273  0192                     	;# 
  3274  0193                     	;# 
  3275  0193                     	;# 
  3276  0194                     	;# 
  3277  0195                     	;# 
  3278  0196                     	;# 
  3279  0197                     	;# 
  3280  0199                     	;# 
  3281  0199                     	;# 
  3282  0199                     	;# 
  3283  019A                     	;# 
  3284  019A                     	;# 
  3285  019A                     	;# 
  3286  019B                     	;# 
  3287  019B                     	;# 
  3288  019B                     	;# 
  3289  019B                     	;# 
  3290  019B                     	;# 
  3291  019C                     	;# 
  3292  019C                     	;# 
  3293  019C                     	;# 
  3294  019D                     	;# 
  3295  019D                     	;# 
  3296  019D                     	;# 
  3297  019E                     	;# 
  3298  019E                     	;# 
  3299  019E                     	;# 
  3300  019F                     	;# 
  3301  019F                     	;# 
  3302  019F                     	;# 
  3303  020D                     	;# 
  3304  020F                     	;# 
  3305  0210                     	;# 
  3306  0211                     	;# 
  3307  0211                     	;# 
  3308  0212                     	;# 
  3309  0212                     	;# 
  3310  0213                     	;# 
  3311  0213                     	;# 
  3312  0214                     	;# 
  3313  0214                     	;# 
  3314  0215                     	;# 
  3315  0215                     	;# 
  3316  0215                     	;# 
  3317  0216                     	;# 
  3318  0216                     	;# 
  3319  0217                     	;# 
  3320  0217                     	;# 
  3321  0219                     	;# 
  3322  021A                     	;# 
  3323  021B                     	;# 
  3324  021C                     	;# 
  3325  021D                     	;# 
  3326  021E                     	;# 
  3327  021F                     	;# 
  3328  028C                     	;# 
  3329  028D                     	;# 
  3330  0291                     	;# 
  3331  0291                     	;# 
  3332  0292                     	;# 
  3333  0293                     	;# 
  3334  0298                     	;# 
  3335  0298                     	;# 
  3336  0299                     	;# 
  3337  029A                     	;# 
  3338  029D                     	;# 
  3339  029E                     	;# 
  3340  029F                     	;# 
  3341  030C                     	;# 
  3342  030D                     	;# 
  3343  0311                     	;# 
  3344  0311                     	;# 
  3345  0312                     	;# 
  3346  0313                     	;# 
  3347  0318                     	;# 
  3348  0318                     	;# 
  3349  0319                     	;# 
  3350  031A                     	;# 
  3351  031C                     	;# 
  3352  031C                     	;# 
  3353  031D                     	;# 
  3354  031E                     	;# 
  3355  038C                     	;# 
  3356  038D                     	;# 
  3357  0394                     	;# 
  3358  0395                     	;# 
  3359  0396                     	;# 
  3360  040C                     	;# 
  3361  040D                     	;# 
  3362  0411                     	;# 
  3363  0411                     	;# 
  3364  0412                     	;# 
  3365  0413                     	;# 
  3366  0414                     	;# 
  3367  0415                     	;# 
  3368  0416                     	;# 
  3369  0417                     	;# 
  3370  0418                     	;# 
  3371  0418                     	;# 
  3372  0419                     	;# 
  3373  041A                     	;# 
  3374  041B                     	;# 
  3375  041C                     	;# 
  3376  041D                     	;# 
  3377  041E                     	;# 
  3378  048D                     	;# 
  3379  0491                     	;# 
  3380  0491                     	;# 
  3381  0492                     	;# 
  3382  0492                     	;# 
  3383  0493                     	;# 
  3384  0493                     	;# 
  3385  0493                     	;# 
  3386  0494                     	;# 
  3387  0494                     	;# 
  3388  0495                     	;# 
  3389  0495                     	;# 
  3390  0496                     	;# 
  3391  0496                     	;# 
  3392  0497                     	;# 
  3393  0497                     	;# 
  3394  0595                     	;# 
  3395  0596                     	;# 
  3396  0597                     	;# 
  3397  059C                     	;# 
  3398  059D                     	;# 
  3399  059E                     	;# 
  3400  0611                     	;# 
  3401  0611                     	;# 
  3402  0612                     	;# 
  3403  0613                     	;# 
  3404  0614                     	;# 
  3405  0614                     	;# 
  3406  0615                     	;# 
  3407  0616                     	;# 
  3408  0617                     	;# 
  3409  0617                     	;# 
  3410  0618                     	;# 
  3411  0619                     	;# 
  3412  061A                     	;# 
  3413  061A                     	;# 
  3414  061B                     	;# 
  3415  061C                     	;# 
  3416  061D                     	;# 
  3417  061D                     	;# 
  3418  061E                     	;# 
  3419  061F                     	;# 
  3420  0FE4                     	;# 
  3421  0FE5                     	;# 
  3422  0FE6                     	;# 
  3423  0FE7                     	;# 
  3424  0FE8                     	;# 
  3425  0FE9                     	;# 
  3426  0FEA                     	;# 
  3427  0FEB                     	;# 
  3428  0FED                     	;# 
  3429  0FEE                     	;# 
  3430  0FEF                     	;_modArray
  3431                           
  3432                           	psect	idataBANK0
  3433  2001                     __pidataBANK0:	
  3434                           
  3435                           ;initializer for _baseline_delay_time
  3436  2001  34D0               	retlw	208
  3437  2002  3407               	retlw	7
  3438  2003  3400               	retlw	0
  3439  2004  3400               	retlw	0
  3440                           
  3441                           ;initializer for _delay_time
  3442  2005  34D0               	retlw	208
  3443  2006  3407               	retlw	7
  3444  2007  3400               	retlw	0
  3445  2008  3400               	retlw	0
  3446                           
  3447                           ;initializer for _bottom_push_state
  3448  2009  3401               	retlw	1
  3449  200A  3400               	retlw	0
  3450                           
  3451                           ;initializer for _long_press_limit
  3452  200B  34E8               	retlw	232
  3453  200C  3403               	retlw	3
  3454                           
  3455                           ;initializer for _top_push_state
  3456  200D  3406               	retlw	6
  3457  200E  3400               	retlw	0
  3458                           
  3459                           ;initializer for _blink_rate
  3460  200F  3414               	retlw	20
  3461                           
  3462                           ;initializer for _feedback_state
  3463  2010  34FF               	retlw	255
  3464                           
  3465                           ;initializer for _longTap_state
  3466  2011  34FF               	retlw	255
  3467                           
  3468                           ;initializer for _num_taps
  3469  2012  3404               	retlw	4
  3470                           
  3471                           ;initializer for _presetChannel
  3472  2013  3401               	retlw	1
  3473                           
  3474                           ;initializer for _switchBypass_state
  3475  2014  34FF               	retlw	255
  3476                           
  3477                           	psect	idataBANK3
  3478  207B                     __pidataBANK3:	
  3479                           
  3480                           ;initializer for _blink_delay
  3481  207B  3464               	retlw	100
  3482  207C  3400               	retlw	0
  3483                           
  3484                           ;initializer for _knob1_prev
  3485  207D  34D0               	retlw	208
  3486  207E  3407               	retlw	7
  3487                           
  3488                           ;initializer for _knob2_prev
  3489  207F  34D0               	retlw	208
  3490  2080  3407               	retlw	7
  3491                           
  3492                           ;initializer for _knob3_prev
  3493  2081  34D0               	retlw	208
  3494  2082  3407               	retlw	7
  3495                           
  3496                           ;initializer for _knob4_prev
  3497  2083  34D0               	retlw	208
  3498  2084  3407               	retlw	7
  3499                           
  3500                           ;initializer for _knob5_prev
  3501  2085  34D0               	retlw	208
  3502  2086  3407               	retlw	7
  3503                           
  3504                           ;initializer for _mod_delay_time
  3505  2087  34D0               	retlw	208
  3506  2088  3407               	retlw	7
  3507                           
  3508                           ;initializer for _symmetry
  3509  2089  34B4               	retlw	180
  3510  208A  3400               	retlw	0
  3511                           
  3512                           ;initializer for _tap_iteration
  3513  208B  3401               	retlw	1
  3514  208C  3400               	retlw	0
  3515                           
  3516                           ;initializer for _blink_state
  3517  208D  3401               	retlw	1
  3518                           
  3519                           ;initializer for _currentBypassState
  3520  208E  34FF               	retlw	255
  3521                           
  3522                           ;initializer for _delay_time_changed
  3523  208F  3401               	retlw	1
  3524                           
  3525                           ;initializer for _expSwitchState
  3526  2090  34FF               	retlw	255
  3527                           
  3528                           ;initializer for _expressModeCnst
  3529  2091  3402               	retlw	2
  3530                           
  3531                           ;initializer for _expressionChannel
  3532  2092  3401               	retlw	1
  3533                           
  3534                           ;initializer for _presetModeCnst
  3535  2093  3401               	retlw	1
  3536                           
  3537                           ;initializer for _switchTap_state
  3538  2094  34FF               	retlw	255
  3539                           
  3540                           	psect	idataBANK4
  3541  0002                     __pidataBANK4:	
  3542                           
  3543                           ;initializer for _switchBypass_up
  3544  0002  3401               	retlw	1
  3545  0003  3400               	retlw	0
  3546                           
  3547                           	psect	stringtext
  3548  2800                     __pstringtext:	
  3549  2800                     exp@coeff:	
  3550  2800  3400               	retlw	0
  3551  2801  3480               	retlw	128
  3552  2802  343F               	retlw	63
  3553  2803  3472               	retlw	114
  3554  2804  3431               	retlw	49
  3555  2805  343F               	retlw	63
  3556  2806  34FE               	retlw	254
  3557  2807  3475               	retlw	117
  3558  2808  343E               	retlw	62
  3559  2809  3458               	retlw	88
  3560  280A  3463               	retlw	99
  3561  280B  343D               	retlw	61
  3562  280C  3495               	retlw	149
  3563  280D  341D               	retlw	29
  3564  280E  343C               	retlw	60
  3565  280F  34C5               	retlw	197
  3566  2810  34AE               	retlw	174
  3567  2811  343A               	retlw	58
  3568  2812  3479               	retlw	121
  3569  2813  3421               	retlw	33
  3570  2814  3439               	retlw	57
  3571  2815  3494               	retlw	148
  3572  2816  3480               	retlw	128
  3573  2817  3437               	retlw	55
  3574  2818  3493               	retlw	147
  3575  2819  34A7               	retlw	167
  3576  281A  3435               	retlw	53
  3577  281B  3456               	retlw	86
  3578  281C  3415               	retlw	21
  3579  281D  3434               	retlw	52
  3580  281E                     __end_ofexp@coeff:	
  3581  281E                     log@coeff:	
  3582  281E  3400               	retlw	0
  3583  281F  3400               	retlw	0
  3584  2820  3400               	retlw	0
  3585  2821  3400               	retlw	0
  3586  2822  3480               	retlw	128
  3587  2823  343F               	retlw	63
  3588  2824  34F0               	retlw	240
  3589  2825  34FF               	retlw	255
  3590  2826  34BE               	retlw	190
  3591  2827  34E2               	retlw	226
  3592  2828  34A9               	retlw	169
  3593  2829  343E               	retlw	62
  3594  282A  3483               	retlw	131
  3595  282B  3476               	retlw	118
  3596  282C  34BE               	retlw	190
  3597  282D  34AE               	retlw	174
  3598  282E  342B               	retlw	43
  3599  282F  343E               	retlw	62
  3600  2830  343C               	retlw	60
  3601  2831  34C3               	retlw	195
  3602  2832  34BD               	retlw	189
  3603  2833  34D2               	retlw	210
  3604  2834  3413               	retlw	19
  3605  2835  343D               	retlw	61
  3606  2836  3478               	retlw	120
  3607  2837  34D3               	retlw	211
  3608  2838  34BB               	retlw	187
  3609  2839                     __end_oflog@coeff:	
  3610  2839                     sin@coeff_a:	
  3611  2839  34F4               	retlw	244
  3612  283A  344A               	retlw	74
  3613  283B  3448               	retlw	72
  3614  283C  3495               	retlw	149
  3615  283D  3495               	retlw	149
  3616  283E  34C7               	retlw	199
  3617  283F  34C1               	retlw	193
  3618  2840  34DC               	retlw	220
  3619  2841  3445               	retlw	69
  3620  2842  34DC               	retlw	220
  3621  2843  346D               	retlw	109
  3622  2844  34C3               	retlw	195
  3623  2845  34B3               	retlw	179
  3624  2846  3433               	retlw	51
  3625  2847  3440               	retlw	64
  3626  2848                     __end_ofsin@coeff_a:	
  3627  2848                     sin@coeff_b:	
  3628  2848  3434               	retlw	52
  3629  2849  3401               	retlw	1
  3630  284A  3448               	retlw	72
  3631  284B  349D               	retlw	157
  3632  284C  34B0               	retlw	176
  3633  284D  3445               	retlw	69
  3634  284E  3400               	retlw	0
  3635  284F  34DA               	retlw	218
  3636  2850  3442               	retlw	66
  3637  2851  3400               	retlw	0
  3638  2852  3480               	retlw	128
  3639  2853  343F               	retlw	63
  3640  2854                     __end_ofsin@coeff_b:	
  3641  000B                     _INTCONbits	set	11
  3642  0011                     _PIR1bits	set	17
  3643  000C                     _PORTAbits	set	12
  3644  000E                     _PORTCbits	set	14
  3645  000F                     _PORTDbits	set	15
  3646  0010                     _PORTEbits	set	16
  3647  001B                     _PR2	set	27
  3648  001C                     _T2CONbits	set	28
  3649  005F                     _GIE	set	95
  3650  005E                     _PEIE	set	94
  3651  0069                     _RB1	set	105
  3652  009D                     _ADCON0bits	set	157
  3653  009E                     _ADCON1bits	set	158
  3654  009C                     _ADRESH	set	156
  3655  009B                     _ADRESL	set	155
  3656  0095                     _OPTION_REGbits	set	149
  3657  0099                     _OSCCONbits	set	153
  3658  008D                     _TRISBbits	set	141
  3659  008E                     _TRISCbits	set	142
  3660  008F                     _TRISDbits	set	143
  3661  0090                     _TRISEbits	set	144
  3662  048D                     _RCIE	set	1165
  3663  011D                     _APFCONbits	set	285
  3664  010D                     _LATBbits	set	269
  3665  010F                     _LATDbits	set	271
  3666  0190                     _ANSELEbits	set	400
  3667  0192                     _PMADRH	set	402
  3668  0191                     _PMADRL	set	401
  3669  0195                     _PMCON1bits	set	405
  3670  0196                     _PMCON2	set	406
  3671  0194                     _PMDATH	set	404
  3672  0193                     _PMDATL	set	403
  3673  0199                     _RCREG	set	409
  3674  019D                     _RCSTAbits	set	413
  3675  019B                     _SPBRG	set	411
  3676  019A                     _TXREG	set	410
  3677  019E                     _TXSTAbits	set	414
  3678  0291                     _CCPR1	set	657
  3679  0298                     _CCPR2	set	664
  3680  0293                     _CCP1CONbits	set	659
  3681  029A                     _CCP2CONbits	set	666
  3682  029D                     _CCPTMRS0	set	669
  3683  029E                     _CCPTMRS1	set	670
  3684  029F                     _CCPTMRS2	set	671
  3685  0311                     _CCPR3	set	785
  3686  0318                     _CCPR4	set	792
  3687  031C                     _CCPR5	set	796
  3688  0313                     _CCP3CONbits	set	787
  3689  031A                     _CCP4CONbits	set	794
  3690  031E                     _CCP5CONbits	set	798
  3691  030C                     _TRISFbits	set	780
  3692  030D                     _TRISGbits	set	781
  3693  038C                     _LATFbits	set	908
  3694  038D                     _LATGbits	set	909
  3695  040C                     _ANSELFbits	set	1036
  3696  061F                     _CCP10CONbits	set	1567
  3697  0613                     _CCP6CONbits	set	1555
  3698  0616                     _CCP7CONbits	set	1558
  3699  0619                     _CCP8CONbits	set	1561
  3700  061C                     _CCP9CONbits	set	1564
  3701                           
  3702                           ; #config settings
  3703  0000                     
  3704                           	psect	cinit
  3705  02E3                     start_initialization:	
  3706  02E3                     __initialization:		;BIGRAM
  3707                           
  3708                           ; Clear objects allocated to BIGRAM
  3709  02E3  308E               	movlw	low (0+9102)
  3710  02E4  0084               	movwf	4
  3711  02E5  3023               	movlw	high (0+9102)
  3712  02E6  0085               	movwf	5
  3713  02E7  3062               	movlw	98
  3714  02E8  00FE               	movwf	btemp
  3715  02E9  3002               	movlw	2
  3716  02EA  00FF               	movwf	btemp+1
  3717  02EB  3190  2002  3182   	fcall	clear_ram0
  3718                           
  3719                           ; Clear objects allocated to COMMON
  3720  02EE  01FD               	clrf	__pbssCOMMON& (0+127)
  3721                           
  3722                           ; Clear objects allocated to BANK0
  3723  02EF  3059               	movlw	low __pbssBANK0
  3724  02F0  0084               	movwf	4
  3725  02F1  3000               	movlw	high __pbssBANK0
  3726  02F2  0085               	movwf	5
  3727  02F3  3011               	movlw	17
  3728  02F4  00FE               	movwf	btemp
  3729  02F5  3000               	movlw	0
  3730  02F6  00FF               	movwf	btemp+1
  3731  02F7  3190  2002  3182   	fcall	clear_ram0
  3732                           
  3733                           ; Clear objects allocated to BANK2
  3734  02FA  0022               	movlb	2	; select bank2
  3735  02FB  01EA               	clrf	__pbssBANK2& (0+127)
  3736  02FC  01EB               	clrf	(__pbssBANK2+1)& (0+127)
  3737  02FD  01EC               	clrf	(__pbssBANK2+2)& (0+127)
  3738                           
  3739                           ; Clear objects allocated to BANK3
  3740  02FE  30A0               	movlw	low __pbssBANK3
  3741  02FF  0084               	movwf	4
  3742  0300  3001               	movlw	high __pbssBANK3
  3743  0301  0085               	movwf	5
  3744  0302  3027               	movlw	39
  3745  0303  00FE               	movwf	btemp
  3746  0304  3000               	movlw	0
  3747  0305  00FF               	movwf	btemp+1
  3748  0306  3190  2002  3182   	fcall	clear_ram0
  3749                           
  3750                           ; Clear objects allocated to BANK4
  3751  0309  3020               	movlw	low __pbssBANK4
  3752  030A  0084               	movwf	4
  3753  030B  3002               	movlw	high __pbssBANK4
  3754  030C  0085               	movwf	5
  3755  030D  3039               	movlw	57
  3756  030E  00FE               	movwf	btemp
  3757  030F  3000               	movlw	0
  3758  0310  00FF               	movwf	btemp+1
  3759  0311  3190  2002  3182   	fcall	clear_ram0
  3760                           
  3761                           ; Clear objects allocated to BANK5
  3762  0314  30A0               	movlw	low __pbssBANK5
  3763  0315  0084               	movwf	4
  3764  0316  3002               	movlw	high __pbssBANK5
  3765  0317  0085               	movwf	5
  3766  0318  302C               	movlw	44
  3767  0319  00FE               	movwf	btemp
  3768  031A  3000               	movlw	0
  3769  031B  00FF               	movwf	btemp+1
  3770  031C  3190  2002  3182   	fcall	clear_ram0
  3771                           
  3772                           ; Clear objects allocated to BANK6
  3773  031F  3020               	movlw	low __pbssBANK6
  3774  0320  0084               	movwf	4
  3775  0321  3003               	movlw	high __pbssBANK6
  3776  0322  0085               	movwf	5
  3777  0323  3040               	movlw	64
  3778  0324  00FE               	movwf	btemp
  3779  0325  3000               	movlw	0
  3780  0326  00FF               	movwf	btemp+1
  3781  0327  3190  2002  3182   	fcall	clear_ram0
  3782                           
  3783                           ; Clear objects allocated to BANK7
  3784  032A  30A0               	movlw	low __pbssBANK7
  3785  032B  0084               	movwf	4
  3786  032C  3003               	movlw	high __pbssBANK7
  3787  032D  0085               	movwf	5
  3788  032E  3040               	movlw	64
  3789  032F  00FE               	movwf	btemp
  3790  0330  3000               	movlw	0
  3791  0331  00FF               	movwf	btemp+1
  3792  0332  3190  2002  3182   	fcall	clear_ram0
  3793                           
  3794                           ; Initialize objects allocated to BANK0
  3795  0335  3001               	movlw	low __pidataBANK0
  3796  0336  0084               	movwf	4
  3797  0337  30A0               	movlw	(high __pidataBANK0)| (0+128)
  3798  0338  0085               	movwf	5
  3799  0339  3045               	movlw	low __pdataBANK0
  3800  033A  0086               	movwf	6
  3801  033B  3000               	movlw	high __pdataBANK0
  3802  033C  0087               	movwf	7
  3803  033D  3000               	movlw	0
  3804  033E  00FF               	movwf	btemp+1
  3805  033F  3014               	movlw	20
  3806  0340  31AF  27CD  3182   	fcall	init_ram
  3807                           
  3808                           ; Initialize objects allocated to BANK3
  3809  0343  307B               	movlw	low __pidataBANK3
  3810  0344  0084               	movwf	4
  3811  0345  30A0               	movlw	(high __pidataBANK3)| (0+128)
  3812  0346  0085               	movwf	5
  3813  0347  30C7               	movlw	low __pdataBANK3
  3814  0348  0086               	movwf	6
  3815  0349  3001               	movlw	high __pdataBANK3
  3816  034A  0087               	movwf	7
  3817  034B  3000               	movlw	0
  3818  034C  00FF               	movwf	btemp+1
  3819  034D  301A               	movlw	26
  3820  034E  31AF  27CD  3182   	fcall	init_ram
  3821                           
  3822                           ; Initialize objects allocated to BANK4
  3823  0351  0024               	movlb	4	; select bank4
  3824  0352  3180  2002  3182   	fcall	__pidataBANK4	;fetch initializer
  3825  0355  00E2               	movwf	__pdataBANK4& (0+127)
  3826  0356  3180  2003         	fcall	__pidataBANK4+1	;fetch initializer
  3827  0358  00E3               	movwf	(__pdataBANK4+1)& (0+127)
  3828  0359                     end_of_initialization:	
  3829                           ;End of C runtime variable initialization code
  3830                           
  3831  0359                     __end_of__initialization:	
  3832  0359  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3833  035A  0020               	movlb	0
  3834  035B  3183  2B5D         	ljmp	_main	;jump to C main() function
  3835                           
  3836                           	psect	bssCOMMON
  3837  007D                     __pbssCOMMON:	
  3838  007D                     _UQFront:	
  3839  007D                     	ds	1
  3840                           
  3841                           	psect	bssBANK0
  3842  0059                     __pbssBANK0:	
  3843  0059                     _sub_timer:	
  3844  0059                     	ds	4
  3845  005D                     _tap_timer:	
  3846  005D                     	ds	4
  3847  0061                     _timer:	
  3848  0061                     	ds	4
  3849  0065                     _UQEnd:	
  3850  0065                     	ds	1
  3851  0066                     _doubleTap_state:	
  3852  0066                     	ds	1
  3853  0067                     _mode2_state:	
  3854  0067                     	ds	1
  3855  0068                     _presetSaveMode:	
  3856  0068                     	ds	1
  3857  0069                     _suspend_blink:	
  3858  0069                     	ds	1
  3859                           
  3860                           	psect	dataBANK0
  3861  0045                     __pdataBANK0:	
  3862  0045                     _baseline_delay_time:	
  3863  0045                     	ds	4
  3864  0049                     _delay_time:	
  3865  0049                     	ds	4
  3866  004D                     _bottom_push_state:	
  3867  004D                     	ds	2
  3868  004F                     _long_press_limit:	
  3869  004F                     	ds	2
  3870  0051                     _top_push_state:	
  3871  0051                     	ds	2
  3872  0053                     _blink_rate:	
  3873  0053                     	ds	1
  3874  0054                     _feedback_state:	
  3875  0054                     	ds	1
  3876  0055                     _longTap_state:	
  3877  0055                     	ds	1
  3878  0056                     _num_taps:	
  3879  0056                     	ds	1
  3880  0057                     _presetChannel:	
  3881  0057                     	ds	1
  3882  0058                     _switchBypass_state:	
  3883  0058                     	ds	1
  3884                           
  3885                           	psect	bssBANK2
  3886  016A                     __pbssBANK2:	
  3887  016A                     _feedback_start:	
  3888  016A                     	ds	1
  3889  016B                     _longTap_start:	
  3890  016B                     	ds	1
  3891  016C                     _switchTap_pressed:	
  3892  016C                     	ds	1
  3893                           
  3894                           	psect	bssBANK3
  3895  01A0                     __pbssBANK3:	
  3896  01A0                     _double_timer:	
  3897  01A0                     	ds	4
  3898  01A4                     _mod_timer:	
  3899  01A4                     	ds	4
  3900  01A8                     _feedback_timer:	
  3901  01A8                     	ds	2
  3902  01AA                     _knob_1_pos:	
  3903  01AA                     	ds	2
  3904  01AC                     _knob_2_pos:	
  3905  01AC                     	ds	2
  3906  01AE                     _knob_3_pos:	
  3907  01AE                     	ds	2
  3908  01B0                     _knob_4_pos:	
  3909  01B0                     	ds	2
  3910  01B2                     _knob_5_pos:	
  3911  01B2                     	ds	2
  3912  01B4                     _longTap_timer:	
  3913  01B4                     	ds	2
  3914  01B6                     _mod_counter:	
  3915  01B6                     	ds	2
  3916  01B8                     _mod_value:	
  3917  01B8                     	ds	2
  3918  01BA                     _switchBypass_pressed:	
  3919  01BA                     	ds	2
  3920  01BC                     _adjust_sub_delay:	
  3921  01BC                     	ds	1
  3922  01BD                     _bottomTactile_pressed:	
  3923  01BD                     	ds	1
  3924  01BE                     _bypass_turning_on:	
  3925  01BE                     	ds	1
  3926  01BF                     _iCnt:	
  3927  01BF                     	ds	1
  3928  01C0                     _mode1_state:	
  3929  01C0                     	ds	1
  3930  01C1                     _modulation_changed:	
  3931  01C1                     	ds	1
  3932  01C2                     _preset_blink:	
  3933  01C2                     	ds	1
  3934  01C3                     _preset_programmning_on:	
  3935  01C3                     	ds	1
  3936  01C4                     _reset_sub_delay:	
  3937  01C4                     	ds	1
  3938  01C5                     _switchTap_down:	
  3939  01C5                     	ds	1
  3940  01C6                     _topTactile_pressed:	
  3941  01C6                     	ds	1
  3942                           
  3943                           	psect	dataBANK3
  3944  01C7                     __pdataBANK3:	
  3945  01C7                     _blink_delay:	
  3946  01C7                     	ds	2
  3947  01C9                     _knob1_prev:	
  3948  01C9                     	ds	2
  3949  01CB                     _knob2_prev:	
  3950  01CB                     	ds	2
  3951  01CD                     _knob3_prev:	
  3952  01CD                     	ds	2
  3953  01CF                     _knob4_prev:	
  3954  01CF                     	ds	2
  3955  01D1                     _knob5_prev:	
  3956  01D1                     	ds	2
  3957  01D3                     _mod_delay_time:	
  3958  01D3                     	ds	2
  3959  01D5                     _symmetry:	
  3960  01D5                     	ds	2
  3961  01D7                     _tap_iteration:	
  3962  01D7                     	ds	2
  3963  01D9                     _blink_state:	
  3964  01D9                     	ds	1
  3965  01DA                     _currentBypassState:	
  3966  01DA                     	ds	1
  3967  01DB                     _delay_time_changed:	
  3968  01DB                     	ds	1
  3969  01DC                     _expSwitchState:	
  3970  01DC                     	ds	1
  3971  01DD                     _expressModeCnst:	
  3972  01DD                     	ds	1
  3973  01DE                     _expressionChannel:	
  3974  01DE                     	ds	1
  3975  01DF                     _presetModeCnst:	
  3976  01DF                     	ds	1
  3977  01E0                     _switchTap_state:	
  3978  01E0                     	ds	1
  3979                           
  3980                           	psect	bssBANK4
  3981  0220                     __pbssBANK4:	
  3982  0220                     _tap_history:	
  3983  0220                     	ds	20
  3984  0234                     USARTWriteInt@F3536:	
  3985  0234                     	ds	5
  3986  0239                     _ledState:	
  3987  0239                     	ds	4
  3988  023D                     _tap_total:	
  3989  023D                     	ds	4
  3990  0241                     _test_timer:	
  3991  0241                     	ds	4
  3992  0245                     _adjusted_pot_value:	
  3993  0245                     	ds	2
  3994  0247                     _debounce_bypass:	
  3995  0247                     	ds	2
  3996  0249                     _debounce_count:	
  3997  0249                     	ds	2
  3998  024B                     _debounce_mode1:	
  3999  024B                     	ds	2
  4000  024D                     _debounce_mode2:	
  4001  024D                     	ds	2
  4002  024F                     _delay_counter:	
  4003  024F                     	ds	2
  4004  0251                     _delayfound:	
  4005  0251                     	ds	2
  4006  0253                     _errno:	
  4007  0253                     	ds	2
  4008  0255                     _switchBypass_toggle:	
  4009  0255                     	ds	2
  4010  0257                     _tmpVal:	
  4011  0257                     	ds	2
  4012                           
  4013                           	psect	dataBANK4
  4014  0262                     __pdataBANK4:	
  4015  0262                     _switchBypass_up:	
  4016  0262                     	ds	2
  4017                           
  4018                           	psect	bssBANK5
  4019  02A0                     __pbssBANK5:	
  4020  02A0                     _tap:	
  4021  02A0                     	ds	44
  4022                           
  4023                           	psect	bssBANK6
  4024  0320                     __pbssBANK6:	
  4025  0320                     _URBuff:	
  4026  0320                     	ds	64
  4027                           
  4028                           	psect	bssBANK7
  4029  03A0                     __pbssBANK7:	
  4030  03A0                     _myBuf:	
  4031  03A0                     	ds	64
  4032                           
  4033                           	psect	clrtext
  4034  1002                     clear_ram0:	
  4035                           ;	Called with FSR0 containing the base address, and
  4036                           ;	btemp/btemp+1 has the size to clear
  4037                           
  4038  1002  0064               	clrwdt	;clear the watchdog before getting into this loop
  4039  1003                     clrloop0:	
  4040  1003  0180               	clrf	0	;clear RAM location pointed to by FSR
  4041  1004  3101               	addfsr 0,1
  4042  1005  3001               	movlw	1
  4043  1006  02FE               	subwf	126,f
  4044  1007  3000               	movlw	0
  4045  1008  3BFF               	subwfb	127,f
  4046  1009  087F               	movf	127,w
  4047  100A  047E               	iorwf	126,w
  4048  100B  1903               	btfsc	3,2
  4049  100C  3400               	retlw	0	;all done for this memory range, return
  4050  100D  2803               	goto	clrloop0	;have we reached the end yet?
  4051                           
  4052                           	psect	inittext
  4053  2FCD                     init_ram:	
  4054  2FCD  00FE               	movwf	126
  4055  2FCE                     initloop:	
  4056  2FCE  0012               	moviw fsr0++
  4057  2FCF  001E               	movwi fsr1++
  4058  2FD0  3001               	movlw	1
  4059  2FD1  02FE               	subwf	126,f
  4060  2FD2  3000               	movlw	0
  4061  2FD3  3BFF               	subwfb	127,f
  4062  2FD4  087F               	movf	127,w
  4063  2FD5  047E               	iorwf	126,w
  4064  2FD6  1903               	btfsc	3,2
  4065  2FD7  3400               	retlw	0
  4066  2FD8  2FCE               	goto	initloop
  4067                           
  4068                           	psect	cstackBANK4
  4069  0259                     __pcstackBANK4:	
  4070  0259                     _main$2806:	
  4071                           
  4072                           ; 3 bytes @ 0x0
  4073  0259                     	ds	3
  4074  025C                     _main$2807:	
  4075                           
  4076                           ; 3 bytes @ 0x3
  4077  025C                     	ds	3
  4078  025F                     _main$2808:	
  4079                           
  4080                           ; 3 bytes @ 0x6
  4081  025F                     	ds	3
  4082                           
  4083                           	psect	cstackBANK3
  4084  01E1                     __pcstackBANK3:	
  4085  01E1                     scaleA100kPot@pwm:	
  4086  01E1                     scaleA10kPot@pwm:	
  4087                           ; 3 bytes @ 0x0
  4088                           
  4089  01E1                     scaleiA10kPot@pwm:	
  4090                           ; 3 bytes @ 0x0
  4091                           
  4092                           
  4093                           ; 3 bytes @ 0x0
  4094  01E1                     	ds	3
  4095  01E4                     _scaleA100kPot$2811:	
  4096  01E4                     _scaleA10kPot$2815:	
  4097                           ; 3 bytes @ 0x3
  4098                           
  4099  01E4                     _scaleiA10kPot$2817:	
  4100                           ; 3 bytes @ 0x3
  4101                           
  4102                           
  4103                           ; 3 bytes @ 0x3
  4104  01E4                     	ds	3
  4105  01E7                     _scaleA100kPot$2812:	
  4106  01E7                     _scaleA10kPot$2816:	
  4107                           ; 3 bytes @ 0x6
  4108                           
  4109  01E7                     _scaleiA10kPot$2818:	
  4110                           ; 3 bytes @ 0x6
  4111                           
  4112                           
  4113                           ; 3 bytes @ 0x6
  4114  01E7                     	ds	3
  4115  01EA                     ??_main:	
  4116                           
  4117                           ; 1 bytes @ 0x9
  4118  01EA                     	ds	5
  4119                           
  4120                           	psect	cstackBANK2
  4121  0120                     __pcstackBANK2:	
  4122  0120                     ?___fttol:	
  4123  0120                     ___fttol@f1:	
  4124                           ; 4 bytes @ 0x0
  4125                           
  4126                           
  4127                           ; 3 bytes @ 0x0
  4128  0120                     	ds	4
  4129  0124                     ??___fttol:	
  4130                           
  4131                           ; 1 bytes @ 0x4
  4132  0124                     	ds	4
  4133  0128                     ___fttol@sign1:	
  4134                           
  4135                           ; 1 bytes @ 0x8
  4136  0128                     	ds	1
  4137  0129                     ___fttol@lval:	
  4138                           
  4139                           ; 4 bytes @ 0x9
  4140  0129                     	ds	4
  4141  012D                     ___fttol@exp1:	
  4142                           
  4143                           ; 1 bytes @ 0xD
  4144  012D                     	ds	1
  4145  012E                     ?_modTri:	
  4146  012E                     ?_modSaw:	
  4147                           ; 2 bytes @ 0xE
  4148                           
  4149  012E                     ?___wmul:	
  4150                           ; 2 bytes @ 0xE
  4151                           
  4152  012E                     ?___altoft:	
  4153                           ; 2 bytes @ 0xE
  4154                           
  4155  012E                     ___wmul@multiplier:	
  4156                           ; 3 bytes @ 0xE
  4157                           
  4158  012E                     modTri@angle:	
  4159                           ; 2 bytes @ 0xE
  4160                           
  4161  012E                     modSaw@angle:	
  4162                           ; 3 bytes @ 0xE
  4163                           
  4164  012E                     ___altoft@c:	
  4165                           ; 3 bytes @ 0xE
  4166                           
  4167                           
  4168                           ; 4 bytes @ 0xE
  4169  012E                     	ds	2
  4170  0130                     ___wmul@multiplicand:	
  4171                           
  4172                           ; 2 bytes @ 0x10
  4173  0130                     	ds	1
  4174  0131                     modTri@inflection:	
  4175  0131                     modSaw@inflection:	
  4176                           ; 3 bytes @ 0x11
  4177                           
  4178                           
  4179                           ; 3 bytes @ 0x11
  4180  0131                     	ds	1
  4181  0132                     ??___altoft:	
  4182  0132                     ___wmul@product:	
  4183                           ; 1 bytes @ 0x12
  4184                           
  4185                           
  4186                           ; 2 bytes @ 0x12
  4187  0132                     	ds	2
  4188  0134                     ?_modSin:	
  4189  0134                     ?_eval_poly:	
  4190                           ; 2 bytes @ 0x14
  4191                           
  4192  0134                     ___altoft@exp:	
  4193                           ; 3 bytes @ 0x14
  4194                           
  4195  0134                     modSin@angle:	
  4196                           ; 1 bytes @ 0x14
  4197                           
  4198  0134                     eval_poly@x:	
  4199                           ; 3 bytes @ 0x14
  4200                           
  4201  0134                     _modTri$2820:	
  4202                           ; 3 bytes @ 0x14
  4203                           
  4204  0134                     _modSaw$2821:	
  4205                           ; 3 bytes @ 0x14
  4206                           
  4207                           
  4208                           ; 3 bytes @ 0x14
  4209  0134                     	ds	1
  4210  0135                     ___altoft@sign:	
  4211                           
  4212                           ; 1 bytes @ 0x15
  4213  0135                     	ds	1
  4214  0136                     ?_trunc:	
  4215  0136                     ?_floor:	
  4216                           ; 3 bytes @ 0x16
  4217                           
  4218  0136                     trunc@x:	
  4219                           ; 3 bytes @ 0x16
  4220                           
  4221  0136                     floor@x:	
  4222                           ; 3 bytes @ 0x16
  4223                           
  4224                           
  4225                           ; 3 bytes @ 0x16
  4226  0136                     	ds	1
  4227  0137                     eval_poly@d:	
  4228  0137                     modSin@inflection:	
  4229                           ; 2 bytes @ 0x17
  4230                           
  4231  0137                     modTri@shift:	
  4232                           ; 3 bytes @ 0x17
  4233                           
  4234  0137                     _modSaw$2822:	
  4235                           ; 3 bytes @ 0x17
  4236                           
  4237                           
  4238                           ; 3 bytes @ 0x17
  4239  0137                     	ds	2
  4240  0139                     ??_trunc:	
  4241  0139                     ??_floor:	
  4242                           ; 1 bytes @ 0x19
  4243                           
  4244  0139                     eval_poly@n:	
  4245                           ; 1 bytes @ 0x19
  4246                           
  4247                           
  4248                           ; 2 bytes @ 0x19
  4249  0139                     	ds	1
  4250  013A                     ??_modSin:	
  4251  013A                     modTri@period:	
  4252                           ; 1 bytes @ 0x1A
  4253                           
  4254  013A                     trunc@i:	
  4255                           ; 3 bytes @ 0x1A
  4256                           
  4257  013A                     floor@i:	
  4258                           ; 3 bytes @ 0x1A
  4259                           
  4260  013A                     _modSaw$2823:	
  4261                           ; 3 bytes @ 0x1A
  4262                           
  4263                           
  4264                           ; 3 bytes @ 0x1A
  4265  013A                     	ds	1
  4266  013B                     eval_poly@res:	
  4267                           
  4268                           ; 3 bytes @ 0x1B
  4269  013B                     	ds	1
  4270  013C                     _modSin$2819:	
  4271                           
  4272                           ; 3 bytes @ 0x1C
  4273  013C                     	ds	1
  4274  013D                     modSaw@mod:	
  4275  013D                     trunc@expon:	
  4276                           ; 2 bytes @ 0x1D
  4277                           
  4278  013D                     floor@expon:	
  4279                           ; 2 bytes @ 0x1D
  4280                           
  4281  013D                     modTri@tmpVal:	
  4282                           ; 2 bytes @ 0x1D
  4283                           
  4284                           
  4285                           ; 3 bytes @ 0x1D
  4286  013D                     	ds	1
  4287  013E                     ?_log:	
  4288  013E                     ?_ldexp:	
  4289                           ; 3 bytes @ 0x1E
  4290                           
  4291  013E                     ldexp@value:	
  4292                           ; 3 bytes @ 0x1E
  4293                           
  4294  013E                     log@x:	
  4295                           ; 3 bytes @ 0x1E
  4296                           
  4297                           
  4298                           ; 3 bytes @ 0x1E
  4299  013E                     	ds	1
  4300  013F                     ?_set_subdivision:	
  4301  013F                     ?___ftsub:	
  4302                           ; 2 bytes @ 0x1F
  4303                           
  4304  013F                     set_subdivision@x:	
  4305                           ; 3 bytes @ 0x1F
  4306                           
  4307  013F                     modSin@shift:	
  4308                           ; 2 bytes @ 0x1F
  4309                           
  4310  013F                     modSaw@shift:	
  4311                           ; 3 bytes @ 0x1F
  4312                           
  4313  013F                     ___ftsub@f2:	
  4314                           ; 3 bytes @ 0x1F
  4315                           
  4316                           
  4317                           ; 3 bytes @ 0x1F
  4318  013F                     	ds	2
  4319  0141                     ??_log:	
  4320  0141                     set_subdivision@y:	
  4321                           ; 1 bytes @ 0x21
  4322                           
  4323  0141                     ldexp@newexp:	
  4324                           ; 2 bytes @ 0x21
  4325                           
  4326                           
  4327                           ; 2 bytes @ 0x21
  4328  0141                     	ds	1
  4329  0142                     log@exponent:	
  4330  0142                     modSin@period:	
  4331                           ; 2 bytes @ 0x22
  4332                           
  4333  0142                     modSaw@period:	
  4334                           ; 3 bytes @ 0x22
  4335                           
  4336  0142                     ___ftsub@f1:	
  4337                           ; 3 bytes @ 0x22
  4338                           
  4339                           
  4340                           ; 3 bytes @ 0x22
  4341  0142                     	ds	1
  4342  0143                     ??_set_subdivision:	
  4343  0143                     ??_ldexp:	
  4344                           ; 1 bytes @ 0x23
  4345                           
  4346                           
  4347                           ; 1 bytes @ 0x23
  4348  0143                     	ds	2
  4349  0145                     ?_modSawRev:	
  4350  0145                     ?_sin:	
  4351                           ; 2 bytes @ 0x25
  4352                           
  4353  0145                     modSin@tmpVal:	
  4354                           ; 3 bytes @ 0x25
  4355                           
  4356  0145                     modSawRev@angle:	
  4357                           ; 3 bytes @ 0x25
  4358                           
  4359  0145                     sin@f:	
  4360                           ; 3 bytes @ 0x25
  4361                           
  4362  0145                     _ldexp$2615:	
  4363                           ; 3 bytes @ 0x25
  4364                           
  4365                           
  4366                           ; 3 bytes @ 0x25
  4367  0145                     	ds	1
  4368  0146                     set_subdivision@scalar:	
  4369                           
  4370                           ; 3 bytes @ 0x26
  4371  0146                     	ds	2
  4372  0148                     ??_sin:	
  4373  0148                     ?_modSquare:	
  4374                           ; 1 bytes @ 0x28
  4375                           
  4376  0148                     ?_exp:	
  4377                           ; 2 bytes @ 0x28
  4378                           
  4379  0148                     modSawRev@inflection:	
  4380                           ; 3 bytes @ 0x28
  4381                           
  4382  0148                     modSquare@angle:	
  4383                           ; 3 bytes @ 0x28
  4384                           
  4385  0148                     exp@x:	
  4386                           ; 3 bytes @ 0x28
  4387                           
  4388                           
  4389                           ; 3 bytes @ 0x28
  4390  0148                     	ds	1
  4391  0149                     set_subdivision@tmpX:	
  4392  0149                     sin@y:	
  4393                           ; 2 bytes @ 0x29
  4394                           
  4395                           
  4396                           ; 3 bytes @ 0x29
  4397  0149                     	ds	2
  4398  014B                     ??_modSawRev:	
  4399  014B                     ??_exp:	
  4400                           ; 1 bytes @ 0x2B
  4401                           
  4402  014B                     modSquare@inflection:	
  4403                           ; 1 bytes @ 0x2B
  4404                           
  4405                           
  4406                           ; 3 bytes @ 0x2B
  4407  014B                     	ds	1
  4408  014C                     _sin$2826:	
  4409  014C                     _exp$2827:	
  4410                           ; 3 bytes @ 0x2C
  4411                           
  4412                           
  4413                           ; 3 bytes @ 0x2C
  4414  014C                     	ds	2
  4415  014E                     modSquare@tmpVal:	
  4416                           
  4417                           ; 2 bytes @ 0x2E
  4418  014E                     	ds	1
  4419  014F                     sin@x2:	
  4420  014F                     _exp$2583:	
  4421                           ; 3 bytes @ 0x2F
  4422                           
  4423                           
  4424                           ; 3 bytes @ 0x2F
  4425  014F                     	ds	1
  4426  0150                     ??_updateModulationArray:	
  4427                           
  4428                           ; 1 bytes @ 0x30
  4429  0150                     	ds	2
  4430  0152                     sin@sgn:	
  4431  0152                     exp@exponent:	
  4432                           ; 1 bytes @ 0x32
  4433                           
  4434                           
  4435                           ; 2 bytes @ 0x32
  4436  0152                     	ds	1
  4437  0153                     ??_calcSinArray:	
  4438                           
  4439                           ; 1 bytes @ 0x33
  4440  0153                     	ds	1
  4441  0154                     updateModulationArray@x:	
  4442  0154                     exp@sign:	
  4443                           ; 1 bytes @ 0x34
  4444                           
  4445                           
  4446                           ; 1 bytes @ 0x34
  4447  0154                     	ds	1
  4448  0155                     ?_pow:	
  4449  0155                     updateModulationArray@thisAngle:	
  4450                           ; 3 bytes @ 0x35
  4451                           
  4452  0155                     pow@x:	
  4453                           ; 2 bytes @ 0x35
  4454                           
  4455                           
  4456                           ; 3 bytes @ 0x35
  4457  0155                     	ds	2
  4458  0157                     calcSinArray@x:	
  4459  0157                     updateModulationArray@iAngle:	
  4460                           ; 1 bytes @ 0x37
  4461                           
  4462                           
  4463                           ; 1 bytes @ 0x37
  4464  0157                     	ds	1
  4465  0158                     calcSinArray@tmpVal:	
  4466  0158                     pow@y:	
  4467                           ; 3 bytes @ 0x38
  4468                           
  4469                           
  4470                           ; 3 bytes @ 0x38
  4471  0158                     	ds	3
  4472  015B                     ??_pow:	
  4473  015B                     calcSinArray@iAngle:	
  4474                           ; 1 bytes @ 0x3B
  4475                           
  4476                           
  4477                           ; 1 bytes @ 0x3B
  4478  015B                     	ds	1
  4479  015C                     _pow$2824:	
  4480                           
  4481                           ; 3 bytes @ 0x3C
  4482  015C                     	ds	3
  4483  015F                     _pow$2825:	
  4484                           
  4485                           ; 3 bytes @ 0x3F
  4486  015F                     	ds	3
  4487  0162                     pow@sign:	
  4488                           
  4489                           ; 1 bytes @ 0x42
  4490  0162                     	ds	1
  4491  0163                     pow@yi:	
  4492                           
  4493                           ; 4 bytes @ 0x43
  4494  0163                     	ds	4
  4495  0167                     ?_scaleA10kPot:	
  4496  0167                     ?_scaleiA10kPot:	
  4497                           ; 2 bytes @ 0x47
  4498                           
  4499  0167                     ?_scaleA100kPot:	
  4500                           ; 2 bytes @ 0x47
  4501                           
  4502  0167                     scaleA100kPot@input:	
  4503                           ; 2 bytes @ 0x47
  4504                           
  4505  0167                     scaleA10kPot@input:	
  4506                           ; 3 bytes @ 0x47
  4507                           
  4508  0167                     scaleiA10kPot@input:	
  4509                           ; 3 bytes @ 0x47
  4510                           
  4511                           
  4512                           ; 3 bytes @ 0x47
  4513  0167                     	ds	3
  4514                           
  4515                           	psect	cstackBANK1
  4516  00A0                     __pcstackBANK1:	
  4517  00A0                     ?___ftge:	
  4518  00A0                     ?_set_leds_top:	
  4519                           ; 1 bit 
  4520                           
  4521  00A0                     ?_USARTInit:	
  4522                           ; 1 bytes @ 0x0
  4523                           
  4524  00A0                     ??_ConfigureOscillator:	
  4525                           ; 1 bytes @ 0x0
  4526                           
  4527  00A0                     ??_InitApp:	
  4528                           ; 1 bytes @ 0x0
  4529                           
  4530  00A0                     ??_InitializeTaps:	
  4531                           ; 1 bytes @ 0x0
  4532                           
  4533  00A0                     ??_init_adc:	
  4534                           ; 1 bytes @ 0x0
  4535                           
  4536  00A0                     ??_init_pwm:	
  4537                           ; 1 bytes @ 0x0
  4538                           
  4539  00A0                     ??_init_timer2:	
  4540                           ; 1 bytes @ 0x0
  4541                           
  4542  00A0                     ??_init_timer0:	
  4543                           ; 1 bytes @ 0x0
  4544                           
  4545  00A0                     ?_set_leds_bottom:	
  4546                           ; 1 bytes @ 0x0
  4547                           
  4548  00A0                     ?_setFeedbackState:	
  4549                           ; 1 bytes @ 0x0
  4550                           
  4551  00A0                     ?_setLongTapState:	
  4552                           ; 1 bytes @ 0x0
  4553                           
  4554  00A0                     ?_updateSwitchBypassState:	
  4555                           ; 1 bytes @ 0x0
  4556                           
  4557  00A0                     ?_adc_convert:	
  4558                           ; 1 bytes @ 0x0
  4559                           
  4560  00A0                     ?_FLASH_ReadWord:	
  4561                           ; 2 bytes @ 0x0
  4562                           
  4563  00A0                     ?_getSwitchBypassState:	
  4564                           ; 2 bytes @ 0x0
  4565                           
  4566  00A0                     ?___ftpack:	
  4567                           ; 2 bytes @ 0x0
  4568                           
  4569  00A0                     ?_frexp:	
  4570                           ; 3 bytes @ 0x0
  4571                           
  4572  00A0                     ?___lmul:	
  4573                           ; 3 bytes @ 0x0
  4574                           
  4575  00A0                     ?___aldiv:	
  4576                           ; 4 bytes @ 0x0
  4577                           
  4578  00A0                     FLASH_ReadWord@flashAddr:	
  4579                           ; 4 bytes @ 0x0
  4580                           
  4581  00A0                     set_leds_top@x:	
  4582                           ; 2 bytes @ 0x0
  4583                           
  4584  00A0                     set_leds_bottom@x:	
  4585                           ; 2 bytes @ 0x0
  4586                           
  4587  00A0                     updateSwitchBypassState@state:	
  4588                           ; 2 bytes @ 0x0
  4589                           
  4590  00A0                     setFeedbackState@f_state:	
  4591                           ; 2 bytes @ 0x0
  4592                           
  4593  00A0                     setLongTapState@f_state:	
  4594                           ; 2 bytes @ 0x0
  4595                           
  4596  00A0                     USARTInit@baud_rate:	
  4597                           ; 2 bytes @ 0x0
  4598                           
  4599  00A0                     ___ftpack@arg:	
  4600                           ; 2 bytes @ 0x0
  4601                           
  4602  00A0                     ___ftge@ff1:	
  4603                           ; 3 bytes @ 0x0
  4604                           
  4605  00A0                     frexp@value:	
  4606                           ; 3 bytes @ 0x0
  4607                           
  4608  00A0                     ___lmul@multiplier:	
  4609                           ; 3 bytes @ 0x0
  4610                           
  4611  00A0                     ___aldiv@divisor:	
  4612                           ; 4 bytes @ 0x0
  4613                           
  4614                           
  4615                           ; 4 bytes @ 0x0
  4616  00A0                     	ds	1
  4617  00A1                     InitializeTaps@itap:	
  4618                           
  4619                           ; 2 bytes @ 0x1
  4620  00A1                     	ds	1
  4621  00A2                     ??_USARTInit:	
  4622  00A2                     ??_adc_convert:	
  4623                           ; 1 bytes @ 0x2
  4624                           
  4625  00A2                     ??_FLASH_ReadWord:	
  4626                           ; 1 bytes @ 0x2
  4627                           
  4628  00A2                     ??_set_leds_bottom:	
  4629                           ; 1 bytes @ 0x2
  4630                           
  4631  00A2                     ??_setFeedbackState:	
  4632                           ; 1 bytes @ 0x2
  4633                           
  4634  00A2                     ??_setLongTapState:	
  4635                           ; 1 bytes @ 0x2
  4636                           
  4637  00A2                     ??_updateSwitchBypassState:	
  4638                           ; 1 bytes @ 0x2
  4639                           
  4640  00A2                     ??_getSwitchBypassState:	
  4641                           ; 1 bytes @ 0x2
  4642                           
  4643  00A2                     FLASH_ReadWord@GIEBitValue:	
  4644                           ; 1 bytes @ 0x2
  4645                           
  4646  00A2                     set_leds_top@ledState:	
  4647                           ; 1 bytes @ 0x2
  4648                           
  4649                           
  4650                           ; 2 bytes @ 0x2
  4651  00A2                     	ds	1
  4652  00A3                     adc_convert@channel:	
  4653  00A3                     ___ftpack@exp:	
  4654                           ; 1 bytes @ 0x3
  4655                           
  4656  00A3                     frexp@eptr:	
  4657                           ; 1 bytes @ 0x3
  4658                           
  4659  00A3                     ___ftge@ff2:	
  4660                           ; 1 bytes @ 0x3
  4661                           
  4662                           
  4663                           ; 3 bytes @ 0x3
  4664  00A3                     	ds	1
  4665  00A4                     ??_set_leds_top:	
  4666  00A4                     ??_ReadSavedSettings:	
  4667                           ; 1 bytes @ 0x4
  4668                           
  4669  00A4                     ??_resetRingLEDs:	
  4670                           ; 1 bytes @ 0x4
  4671                           
  4672  00A4                     ??_setPresetDisplay:	
  4673                           ; 1 bytes @ 0x4
  4674                           
  4675  00A4                     ??_setExpressionDisplay:	
  4676                           ; 1 bytes @ 0x4
  4677                           
  4678  00A4                     ??_frexp:	
  4679                           ; 1 bytes @ 0x4
  4680                           
  4681  00A4                     ___ftpack@sign:	
  4682                           ; 1 bytes @ 0x4
  4683                           
  4684  00A4                     ___lmul@multiplicand:	
  4685                           ; 1 bytes @ 0x4
  4686                           
  4687  00A4                     ___aldiv@dividend:	
  4688                           ; 4 bytes @ 0x4
  4689                           
  4690                           
  4691                           ; 4 bytes @ 0x4
  4692  00A4                     	ds	1
  4693  00A5                     ??___ftpack:	
  4694                           
  4695                           ; 1 bytes @ 0x5
  4696  00A5                     	ds	1
  4697  00A6                     ??___ftge:	
  4698  00A6                     setPresetDisplay@ledChannel:	
  4699                           ; 1 bytes @ 0x6
  4700                           
  4701  00A6                     setExpressionDisplay@ledChannel:	
  4702                           ; 1 bytes @ 0x6
  4703                           
  4704                           
  4705                           ; 1 bytes @ 0x6
  4706  00A6                     	ds	1
  4707  00A7                     ??_update_mode:	
  4708  00A7                     ??_update_selectMode:	
  4709                           ; 1 bytes @ 0x7
  4710                           
  4711  00A7                     ??_setPedalMode:	
  4712                           ; 1 bytes @ 0x7
  4713                           
  4714                           
  4715                           ; 1 bytes @ 0x7
  4716  00A7                     	ds	1
  4717  00A8                     ??___lmul:	
  4718  00A8                     ??___aldiv:	
  4719                           ; 1 bytes @ 0x8
  4720                           
  4721  00A8                     ?___awtoft:	
  4722                           ; 1 bytes @ 0x8
  4723                           
  4724  00A8                     ?___lltoft:	
  4725                           ; 3 bytes @ 0x8
  4726                           
  4727  00A8                     ___awtoft@c:	
  4728                           ; 3 bytes @ 0x8
  4729                           
  4730  00A8                     ___lmul@product:	
  4731                           ; 2 bytes @ 0x8
  4732                           
  4733  00A8                     ___lltoft@c:	
  4734                           ; 4 bytes @ 0x8
  4735                           
  4736                           
  4737                           ; 4 bytes @ 0x8
  4738  00A8                     	ds	1
  4739  00A9                     ___aldiv@counter:	
  4740                           
  4741                           ; 1 bytes @ 0x9
  4742  00A9                     	ds	1
  4743  00AA                     ___aldiv@sign:	
  4744                           
  4745                           ; 1 bytes @ 0xA
  4746  00AA                     	ds	1
  4747  00AB                     ??___awtoft:	
  4748  00AB                     ___aldiv@quotient:	
  4749                           ; 1 bytes @ 0xB
  4750                           
  4751                           
  4752                           ; 4 bytes @ 0xB
  4753  00AB                     	ds	1
  4754  00AC                     ?_wait_ms:	
  4755  00AC                     ??___lltoft:	
  4756                           ; 1 bytes @ 0xC
  4757                           
  4758  00AC                     wait_ms@timeSec:	
  4759                           ; 1 bytes @ 0xC
  4760                           
  4761                           
  4762                           ; 2 bytes @ 0xC
  4763  00AC                     	ds	1
  4764  00AD                     ___awtoft@sign:	
  4765  00AD                     ___lltoft@exp:	
  4766                           ; 1 bytes @ 0xD
  4767                           
  4768                           
  4769                           ; 1 bytes @ 0xD
  4770  00AD                     	ds	1
  4771  00AE                     ??_wait_ms:	
  4772  00AE                     ?___ftmul:	
  4773                           ; 1 bytes @ 0xE
  4774                           
  4775  00AE                     ___ftmul@f1:	
  4776                           ; 3 bytes @ 0xE
  4777                           
  4778  00AE                     wait_ms@timemsl:	
  4779                           ; 3 bytes @ 0xE
  4780                           
  4781                           
  4782                           ; 4 bytes @ 0xE
  4783  00AE                     	ds	3
  4784  00B1                     ___ftmul@f2:	
  4785                           
  4786                           ; 3 bytes @ 0x11
  4787  00B1                     	ds	1
  4788  00B2                     ??_read_bottom_tactile:	
  4789  00B2                     ??_read_top_tactile:	
  4790                           ; 1 bytes @ 0x12
  4791                           
  4792  00B2                     ??_solidring_tactiles:	
  4793                           ; 1 bytes @ 0x12
  4794                           
  4795  00B2                     ??_ring_tactiles:	
  4796                           ; 1 bytes @ 0x12
  4797                           
  4798  00B2                     ?_setSwitchBypassState:	
  4799                           ; 1 bytes @ 0x12
  4800                           
  4801  00B2                     setSwitchBypassState@f_state:	
  4802                           ; 1 bytes @ 0x12
  4803                           
  4804                           
  4805                           ; 2 bytes @ 0x12
  4806  00B2                     	ds	1
  4807  00B3                     ring_tactiles@iLed:	
  4808                           
  4809                           ; 2 bytes @ 0x13
  4810  00B3                     	ds	1
  4811  00B4                     ??_setSwitchBypassState:	
  4812  00B4                     ??___ftmul:	
  4813                           ; 1 bytes @ 0x14
  4814                           
  4815  00B4                     solidring_tactiles@ring_delay:	
  4816                           ; 1 bytes @ 0x14
  4817                           
  4818                           
  4819                           ; 1 bytes @ 0x14
  4820  00B4                     	ds	1
  4821  00B5                     ring_tactiles@iLed_1541:	
  4822                           
  4823                           ; 2 bytes @ 0x15
  4824  00B5                     	ds	1
  4825  00B6                     ??_initSwitchBypass:	
  4826  00B6                     initSwitchBypass@initState:	
  4827                           ; 1 bytes @ 0x16
  4828                           
  4829                           
  4830                           ; 2 bytes @ 0x16
  4831  00B6                     	ds	1
  4832  00B7                     ??_showSave:	
  4833                           
  4834                           ; 1 bytes @ 0x17
  4835  00B7                     	ds	1
  4836  00B8                     ?_setDoublePressState:	
  4837  00B8                     ___ftmul@exp:	
  4838                           ; 1 bytes @ 0x18
  4839                           
  4840  00B8                     setDoublePressState@f_state:	
  4841                           ; 1 bytes @ 0x18
  4842                           
  4843                           
  4844                           ; 2 bytes @ 0x18
  4845  00B8                     	ds	1
  4846  00B9                     ___ftmul@f3_as_product:	
  4847                           
  4848                           ; 3 bytes @ 0x19
  4849  00B9                     	ds	1
  4850  00BA                     ??_setDoublePressState:	
  4851                           
  4852                           ; 1 bytes @ 0x1A
  4853  00BA                     	ds	2
  4854  00BC                     ??_updateSwitchBypass:	
  4855  00BC                     ??_updateSwitchTap:	
  4856                           ; 1 bytes @ 0x1C
  4857                           
  4858  00BC                     ___ftmul@cntr:	
  4859                           ; 1 bytes @ 0x1C
  4860                           
  4861                           
  4862                           ; 1 bytes @ 0x1C
  4863  00BC                     	ds	1
  4864  00BD                     ___ftmul@sign:	
  4865                           
  4866                           ; 1 bytes @ 0x1D
  4867  00BD                     	ds	1
  4868  00BE                     ?___ftneg:	
  4869  00BE                     ___ftneg@f1:	
  4870                           ; 3 bytes @ 0x1E
  4871                           
  4872                           
  4873                           ; 3 bytes @ 0x1E
  4874  00BE                     	ds	3
  4875  00C1                     ??___ftneg:	
  4876  00C1                     ?___ftadd:	
  4877                           ; 1 bytes @ 0x21
  4878                           
  4879  00C1                     ___ftadd@f1:	
  4880                           ; 3 bytes @ 0x21
  4881                           
  4882                           
  4883                           ; 3 bytes @ 0x21
  4884  00C1                     	ds	1
  4885  00C2                     updateSwitchTap@tapCntDivisor:	
  4886                           
  4887                           ; 2 bytes @ 0x22
  4888  00C2                     	ds	2
  4889  00C4                     updateSwitchTap@iCnt:	
  4890  00C4                     ___ftadd@f2:	
  4891                           ; 1 bytes @ 0x24
  4892                           
  4893                           
  4894                           ; 3 bytes @ 0x24
  4895  00C4                     	ds	3
  4896  00C7                     ??___ftadd:	
  4897                           
  4898                           ; 1 bytes @ 0x27
  4899  00C7                     	ds	4
  4900  00CB                     ___ftadd@sign:	
  4901                           
  4902                           ; 1 bytes @ 0x2B
  4903  00CB                     	ds	1
  4904  00CC                     ___ftadd@exp2:	
  4905                           
  4906                           ; 1 bytes @ 0x2C
  4907  00CC                     	ds	1
  4908  00CD                     ___ftadd@exp1:	
  4909                           
  4910                           ; 1 bytes @ 0x2D
  4911  00CD                     	ds	1
  4912  00CE                     ?___ftdiv:	
  4913  00CE                     ___ftdiv@f2:	
  4914                           ; 3 bytes @ 0x2E
  4915                           
  4916                           
  4917                           ; 3 bytes @ 0x2E
  4918  00CE                     	ds	3
  4919  00D1                     ___ftdiv@f1:	
  4920                           
  4921                           ; 3 bytes @ 0x31
  4922  00D1                     	ds	3
  4923  00D4                     ??___ftdiv:	
  4924                           
  4925                           ; 1 bytes @ 0x34
  4926  00D4                     	ds	4
  4927  00D8                     ___ftdiv@cntr:	
  4928                           
  4929                           ; 1 bytes @ 0x38
  4930  00D8                     	ds	1
  4931  00D9                     ___ftdiv@f3:	
  4932                           
  4933                           ; 3 bytes @ 0x39
  4934  00D9                     	ds	3
  4935  00DC                     ___ftdiv@exp:	
  4936                           
  4937                           ; 1 bytes @ 0x3C
  4938  00DC                     	ds	1
  4939  00DD                     ___ftdiv@sign:	
  4940                           
  4941                           ; 1 bytes @ 0x3D
  4942  00DD                     	ds	1
  4943  00DE                     ?_map:	
  4944  00DE                     map@x:	
  4945                           ; 3 bytes @ 0x3E
  4946                           
  4947                           
  4948                           ; 3 bytes @ 0x3E
  4949  00DE                     	ds	3
  4950  00E1                     map@in_min:	
  4951                           
  4952                           ; 3 bytes @ 0x41
  4953  00E1                     	ds	3
  4954  00E4                     map@in_max:	
  4955                           
  4956                           ; 3 bytes @ 0x44
  4957  00E4                     	ds	3
  4958  00E7                     map@out_min:	
  4959                           
  4960                           ; 3 bytes @ 0x47
  4961  00E7                     	ds	3
  4962  00EA                     map@out_max:	
  4963                           
  4964                           ; 3 bytes @ 0x4A
  4965  00EA                     	ds	3
  4966  00ED                     ??_map:	
  4967  00ED                     _map$2809:	
  4968                           ; 1 bytes @ 0x4D
  4969                           
  4970                           
  4971                           ; 3 bytes @ 0x4D
  4972  00ED                     	ds	3
  4973  00F0                     ??_scaleA10kPot:	
  4974  00F0                     ??_scaleiA10kPot:	
  4975                           ; 1 bytes @ 0x50
  4976                           
  4977  00F0                     ??_scaleA100kPot:	
  4978                           ; 1 bytes @ 0x50
  4979                           
  4980  00F0                     ??_modTri:	
  4981                           ; 1 bytes @ 0x50
  4982                           
  4983  00F0                     ??_modSquare:	
  4984                           ; 1 bytes @ 0x50
  4985                           
  4986  00F0                     ??_modSaw:	
  4987                           ; 1 bytes @ 0x50
  4988                           
  4989  00F0                     ??_eval_poly:	
  4990                           ; 1 bytes @ 0x50
  4991                           
  4992  00F0                     ??___wmul:	
  4993                           ; 1 bytes @ 0x50
  4994                           
  4995  00F0                     ??___ftsub:	
  4996                           ; 1 bytes @ 0x50
  4997                           
  4998                           
  4999                           	psect	cstackCOMMON
  5000  0070                     __pcstackCOMMON:	
  5001                           ; 1 bytes @ 0x50
  5002                           
  5003  0070                     ?_calcSinArray:	
  5004  0070                     ?_ConfigureOscillator:	
  5005                           ; 1 bytes @ 0x0
  5006                           
  5007  0070                     ?_InitApp:	
  5008                           ; 1 bytes @ 0x0
  5009                           
  5010  0070                     ?_InitializeTaps:	
  5011                           ; 1 bytes @ 0x0
  5012                           
  5013  0070                     ?_initSwitchBypass:	
  5014                           ; 1 bytes @ 0x0
  5015                           
  5016  0070                     ?_ReadSavedSettings:	
  5017                           ; 1 bytes @ 0x0
  5018                           
  5019  0070                     ?_update_mode:	
  5020                           ; 1 bytes @ 0x0
  5021                           
  5022  0070                     ?_update_selectMode:	
  5023                           ; 1 bytes @ 0x0
  5024                           
  5025  0070                     ?_updateSwitchBypass:	
  5026                           ; 1 bytes @ 0x0
  5027                           
  5028  0070                     ?_updateSwitchTap:	
  5029                           ; 1 bytes @ 0x0
  5030                           
  5031  0070                     ?_read_bottom_tactile:	
  5032                           ; 1 bytes @ 0x0
  5033                           
  5034  0070                     ?_read_top_tactile:	
  5035                           ; 1 bytes @ 0x0
  5036                           
  5037  0070                     ?_updateModulationArray:	
  5038                           ; 1 bytes @ 0x0
  5039                           
  5040  0070                     ?_init_adc:	
  5041                           ; 1 bytes @ 0x0
  5042                           
  5043  0070                     ?_init_pwm:	
  5044                           ; 1 bytes @ 0x0
  5045                           
  5046  0070                     ?_init_timer2:	
  5047                           ; 1 bytes @ 0x0
  5048                           
  5049  0070                     ?_init_timer0:	
  5050                           ; 1 bytes @ 0x0
  5051                           
  5052  0070                     ?_solidring_tactiles:	
  5053                           ; 1 bytes @ 0x0
  5054                           
  5055  0070                     ?_ring_tactiles:	
  5056                           ; 1 bytes @ 0x0
  5057                           
  5058  0070                     ?_resetRingLEDs:	
  5059                           ; 1 bytes @ 0x0
  5060                           
  5061  0070                     ?_setPedalMode:	
  5062                           ; 1 bytes @ 0x0
  5063                           
  5064  0070                     ?_setPresetDisplay:	
  5065                           ; 1 bytes @ 0x0
  5066                           
  5067  0070                     ?_setExpressionDisplay:	
  5068                           ; 1 bytes @ 0x0
  5069                           
  5070  0070                     ?_isr:	
  5071                           ; 1 bytes @ 0x0
  5072                           
  5073  0070                     ?_main:	
  5074                           ; 1 bytes @ 0x0
  5075                           
  5076  0070                     ?_showSave:	
  5077                           ; 1 bytes @ 0x0
  5078                           
  5079  0070                     ?i1_set_leds_top:	
  5080                           ; 1 bytes @ 0x0
  5081                           
  5082  0070                     ?___awdiv:	
  5083                           ; 1 bytes @ 0x0
  5084                           
  5085  0070                     ?i1___lmul:	
  5086                           ; 2 bytes @ 0x0
  5087                           
  5088  0070                     ___awdiv@divisor:	
  5089                           ; 4 bytes @ 0x0
  5090                           
  5091  0070                     i1set_leds_top@x:	
  5092                           ; 2 bytes @ 0x0
  5093                           
  5094  0070                     i1___lmul@multiplier:	
  5095                           ; 2 bytes @ 0x0
  5096                           
  5097                           
  5098                           ; 4 bytes @ 0x0
  5099  0070                     	ds	2
  5100  0072                     ___awdiv@dividend:	
  5101  0072                     i1set_leds_top@ledState:	
  5102                           ; 2 bytes @ 0x2
  5103                           
  5104                           
  5105                           ; 2 bytes @ 0x2
  5106  0072                     	ds	2
  5107  0074                     ??___awdiv:	
  5108  0074                     ??i1_set_leds_top:	
  5109                           ; 1 bytes @ 0x4
  5110                           
  5111  0074                     i1___lmul@multiplicand:	
  5112                           ; 1 bytes @ 0x4
  5113                           
  5114                           
  5115                           ; 4 bytes @ 0x4
  5116  0074                     	ds	1
  5117  0075                     ___awdiv@counter:	
  5118                           
  5119                           ; 1 bytes @ 0x5
  5120  0075                     	ds	1
  5121  0076                     ___awdiv@sign:	
  5122                           
  5123                           ; 1 bytes @ 0x6
  5124  0076                     	ds	1
  5125  0077                     ___awdiv@quotient:	
  5126                           
  5127                           ; 2 bytes @ 0x7
  5128  0077                     	ds	1
  5129  0078                     ??i1___lmul:	
  5130  0078                     i1___lmul@product:	
  5131                           ; 1 bytes @ 0x8
  5132                           
  5133                           
  5134                           ; 4 bytes @ 0x8
  5135  0078                     	ds	4
  5136  007C                     ??i1___aldiv:	
  5137                           
  5138                           ; 1 bytes @ 0xC
  5139  007C                     	ds	1
  5140                           
  5141                           	psect	cstackBANK0
  5142  0020                     __pcstackBANK0:	
  5143  0020                     ?i1___aldiv:	
  5144  0020                     i1___aldiv@divisor:	
  5145                           ; 4 bytes @ 0x0
  5146                           
  5147                           
  5148                           ; 4 bytes @ 0x0
  5149  0020                     	ds	4
  5150  0024                     i1___aldiv@dividend:	
  5151                           
  5152                           ; 4 bytes @ 0x4
  5153  0024                     	ds	4
  5154  0028                     i1___aldiv@counter:	
  5155                           
  5156                           ; 1 bytes @ 0x8
  5157  0028                     	ds	1
  5158  0029                     i1___aldiv@sign:	
  5159                           
  5160                           ; 1 bytes @ 0x9
  5161  0029                     	ds	1
  5162  002A                     i1___aldiv@quotient:	
  5163                           
  5164                           ; 4 bytes @ 0xA
  5165  002A                     	ds	4
  5166  002E                     ?_modulation:	
  5167  002E                     modulation@x:	
  5168                           ; 4 bytes @ 0xE
  5169                           
  5170                           
  5171                           ; 4 bytes @ 0xE
  5172  002E                     	ds	4
  5173  0032                     modulation@y:	
  5174                           
  5175                           ; 4 bytes @ 0x12
  5176  0032                     	ds	4
  5177  0036                     ??_modulation:	
  5178                           
  5179                           ; 1 bytes @ 0x16
  5180  0036                     	ds	4
  5181  003A                     ??_isr:	
  5182                           
  5183                           ; 1 bytes @ 0x1A
  5184  003A                     	ds	9
  5185  0043                     isr@tmpSubDelay:	
  5186                           
  5187                           ; 2 bytes @ 0x23
  5188  0043                     	ds	2
  5189                           
  5190                           	psect	maintext
  5191  035D                     __pmaintext:	
  5192 ;;
  5193 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  5194 ;;
  5195 ;; *************** function _main *****************
  5196 ;; Defined at:
  5197 ;;		line 68 in file "main.c"
  5198 ;; Parameters:    Size  Location     Type
  5199 ;;		None
  5200 ;; Auto vars:     Size  Location     Type
  5201 ;;		None
  5202 ;; Return value:  Size  Location     Type
  5203 ;;                  1    wreg      void 
  5204 ;; Registers used:
  5205 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5206 ;; Tracked objects:
  5207 ;;		On entry : B1F/0
  5208 ;;		On exit  : 0/0
  5209 ;;		Unchanged: 0/0
  5210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  5211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5212 ;;      Locals:         0       0       0       0       0       9       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5213 ;;      Temps:          0       0       0       0       5       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5214 ;;      Totals:         0       0       0       0       5       9       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5215 ;;Total ram usage:       14 bytes
  5216 ;; Hardware stack levels required when called:    9
  5217 ;; This function calls:
  5218 ;;		_ConfigureOscillator
  5219 ;;		_InitApp
  5220 ;;		_InitializeTaps
  5221 ;;		_ReadSavedSettings
  5222 ;;		_USARTInit
  5223 ;;		___awtoft
  5224 ;;		___fttol
  5225 ;;		_adc_convert
  5226 ;;		_calcSinArray
  5227 ;;		_initSwitchBypass
  5228 ;;		_map
  5229 ;;		_read_bottom_tactile
  5230 ;;		_read_top_tactile
  5231 ;;		_scaleA100kPot
  5232 ;;		_scaleA10kPot
  5233 ;;		_scaleiA10kPot
  5234 ;;		_set_subdivision
  5235 ;;		_updateModulationArray
  5236 ;;		_updateSwitchBypass
  5237 ;;		_updateSwitchTap
  5238 ;;		_update_mode
  5239 ;;		_update_selectMode
  5240 ;; This function is called by:
  5241 ;;		Startup code after reset
  5242 ;; This function uses a non-reentrant model
  5243 ;;
  5244                           
  5245                           
  5246                           ;psect for function _main
  5247  035D                     _main:	
  5248                           
  5249                           ;main.c: 71: calcSinArray();
  5250                           
  5251                           ;incstack = 0
  5252                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5253  035D  319B  2384  3183   	fcall	_calcSinArray
  5254                           
  5255                           ;main.c: 83: USARTInit(31250);
  5256  0360  3012               	movlw	18
  5257  0361  0021               	movlb	1	; select bank1
  5258  0362  00A0               	movwf	USARTInit@baud_rate^(0+128)
  5259  0363  307A               	movlw	122
  5260  0364  00A1               	movwf	(USARTInit@baud_rate^(0+128)+1)
  5261  0365  31A4  24B2  3183   	fcall	_USARTInit
  5262                           
  5263                           ;main.c: 84: ConfigureOscillator();
  5264  0368  31AF  27A9  3183   	fcall	_ConfigureOscillator
  5265                           
  5266                           ;main.c: 85: InitApp();
  5267  036B  31A1  21BA  3183   	fcall	_InitApp
  5268                           
  5269                           ;main.c: 87: PORTEbits.RE0 = 1;
  5270  036E  0020               	movlb	0	; select bank0
  5271  036F  1410               	bsf	16,0	;volatile
  5272                           
  5273                           ;main.c: 88: PORTEbits.RE1 = 1;
  5274  0370  1490               	bsf	16,1	;volatile
  5275                           
  5276                           ;main.c: 89: PORTDbits.RD6 = 1;
  5277  0371  170F               	bsf	15,6	;volatile
  5278                           
  5279                           ;main.c: 90: PORTDbits.RD5 = 1;
  5280  0372  168F               	bsf	15,5	;volatile
  5281                           
  5282                           ;main.c: 91: PORTCbits.RC0 = 1;
  5283  0373  140E               	bsf	14,0	;volatile
  5284                           
  5285                           ;main.c: 92: PORTDbits.RD7 = 1;
  5286  0374  178F               	bsf	15,7	;volatile
  5287                           
  5288                           ;main.c: 94: InitializeTaps();
  5289  0375  3198  2001  3183   	fcall	_InitializeTaps
  5290                           
  5291                           ;main.c: 95: initSwitchBypass();
  5292  0378  3187  27F0  3183   	fcall	_initSwitchBypass
  5293                           
  5294                           ;main.c: 98: ReadSavedSettings();
  5295  037B  3198  20FE  3183   	fcall	_ReadSavedSettings
  5296  037E                     l8831:	
  5297                           ;main.c: 100: while (1) {
  5298                           
  5299                           
  5300                           ;main.c: 103: update_mode();
  5301  037E  31A2  224C  3183   	fcall	_update_mode
  5302                           
  5303                           ;main.c: 104: update_selectMode();
  5304  0381  31A7  27A7  3183   	fcall	_update_selectMode
  5305                           
  5306                           ;main.c: 107: updateSwitchBypass();
  5307  0384  3191  2170  3183   	fcall	_updateSwitchBypass
  5308                           
  5309                           ;main.c: 108: if (presetSaveMode != 1) {
  5310  0387  0020               	movlb	0	; select bank0
  5311  0388  0368               	decf	_presetSaveMode,w
  5312  0389  1903               	btfsc	3,2
  5313  038A  2B8E               	goto	l8841
  5314                           
  5315                           ;main.c: 109: updateSwitchTap();
  5316  038B  318C  241D  3183   	fcall	_updateSwitchTap
  5317  038E                     l8841:	
  5318                           
  5319                           ;main.c: 110: }
  5320                           ;main.c: 112: if (presetSaveMode != 1 && mode2_state != presetModeCnst) {
  5321  038E  0020               	movlb	0	; select bank0
  5322  038F  0368               	decf	_presetSaveMode,w
  5323  0390  1903               	btfsc	3,2
  5324  0391  2B9D               	goto	l8847
  5325  0392  0867               	movf	_mode2_state,w
  5326  0393  0023               	movlb	3	; select bank3
  5327  0394  065F               	xorwf	_presetModeCnst^(0+384),w
  5328  0395  1903               	skipnz
  5329  0396  2B9D               	goto	l8847
  5330                           
  5331                           ;main.c: 113: read_bottom_tactile();
  5332  0397  31A5  25CF  3183   	fcall	_read_bottom_tactile
  5333                           
  5334                           ;main.c: 114: read_top_tactile();
  5335  039A  31A6  2664  3183   	fcall	_read_top_tactile
  5336  039D                     l8847:	
  5337                           
  5338                           ;main.c: 115: }
  5339                           ;main.c: 118: knob_1_pos = adc_convert(0);
  5340  039D  3000               	movlw	0
  5341  039E  31AF  27D9  3183   	fcall	_adc_convert
  5342  03A1  0021               	movlb	1	; select bank1
  5343  03A2  0821               	movf	(?_adc_convert+1)^(0+128),w
  5344  03A3  0023               	movlb	3	; select bank3
  5345  03A4  00AB               	movwf	(_knob_1_pos+1)^(0+384)
  5346  03A5  0021               	movlb	1	; select bank1
  5347  03A6  0820               	movf	?_adc_convert^(0+128),w
  5348  03A7  0023               	movlb	3	; select bank3
  5349  03A8  00AA               	movwf	_knob_1_pos^(0+384)
  5350                           
  5351                           ;main.c: 119: knob_2_pos = adc_convert(1);
  5352  03A9  3001               	movlw	1
  5353  03AA  31AF  27D9  3183   	fcall	_adc_convert
  5354  03AD  0021               	movlb	1	; select bank1
  5355  03AE  0821               	movf	(?_adc_convert+1)^(0+128),w
  5356  03AF  0023               	movlb	3	; select bank3
  5357  03B0  00AD               	movwf	(_knob_2_pos+1)^(0+384)
  5358  03B1  0021               	movlb	1	; select bank1
  5359  03B2  0820               	movf	?_adc_convert^(0+128),w
  5360  03B3  0023               	movlb	3	; select bank3
  5361  03B4  00AC               	movwf	_knob_2_pos^(0+384)
  5362                           
  5363                           ;main.c: 120: knob_3_pos = adc_convert(2);
  5364  03B5  3002               	movlw	2
  5365  03B6  31AF  27D9  3183   	fcall	_adc_convert
  5366  03B9  0021               	movlb	1	; select bank1
  5367  03BA  0821               	movf	(?_adc_convert+1)^(0+128),w
  5368  03BB  0023               	movlb	3	; select bank3
  5369  03BC  00AF               	movwf	(_knob_3_pos+1)^(0+384)
  5370  03BD  0021               	movlb	1	; select bank1
  5371  03BE  0820               	movf	?_adc_convert^(0+128),w
  5372  03BF  0023               	movlb	3	; select bank3
  5373  03C0  00AE               	movwf	_knob_3_pos^(0+384)
  5374                           
  5375                           ;main.c: 121: knob_4_pos = adc_convert(3);
  5376  03C1  3003               	movlw	3
  5377  03C2  31AF  27D9  3183   	fcall	_adc_convert
  5378  03C5  0021               	movlb	1	; select bank1
  5379  03C6  0821               	movf	(?_adc_convert+1)^(0+128),w
  5380  03C7  0023               	movlb	3	; select bank3
  5381  03C8  00B1               	movwf	(_knob_4_pos+1)^(0+384)
  5382  03C9  0021               	movlb	1	; select bank1
  5383  03CA  0820               	movf	?_adc_convert^(0+128),w
  5384  03CB  0023               	movlb	3	; select bank3
  5385  03CC  00B0               	movwf	_knob_4_pos^(0+384)
  5386                           
  5387                           ;main.c: 122: knob_5_pos = adc_convert(4);
  5388  03CD  3004               	movlw	4
  5389  03CE  31AF  27D9  3183   	fcall	_adc_convert
  5390  03D1  0021               	movlb	1	; select bank1
  5391  03D2  0821               	movf	(?_adc_convert+1)^(0+128),w
  5392  03D3  0023               	movlb	3	; select bank3
  5393  03D4  00B3               	movwf	(_knob_5_pos+1)^(0+384)
  5394  03D5  0021               	movlb	1	; select bank1
  5395  03D6  0820               	movf	?_adc_convert^(0+128),w
  5396  03D7  0023               	movlb	3	; select bank3
  5397  03D8  00B2               	movwf	_knob_5_pos^(0+384)
  5398                           
  5399                           ;main.c: 126: if ((knob_1_pos - knob1_prev) >= 4 || (knob_1_pos - knob1_prev) <= -4) {
  5400  03D9  0949               	comf	_knob1_prev^(0+384),w	;volatile
  5401  03DA  00EA               	movwf	??_main^(0+384)
  5402  03DB  094A               	comf	(_knob1_prev+1)^(0+384),w	;volatile
  5403  03DC  00EB               	movwf	(??_main^(0+384)+1)
  5404  03DD  0AEA               	incf	??_main^(0+384),f
  5405  03DE  1903               	skipnz
  5406  03DF  0AEB               	incf	(??_main^(0+384)+1),f
  5407  03E0  082A               	movf	_knob_1_pos^(0+384),w
  5408  03E1  076A               	addwf	??_main^(0+384),w
  5409  03E2  00EC               	movwf	(??_main+2)^(0+384)
  5410  03E3  082B               	movf	(_knob_1_pos+1)^(0+384),w
  5411  03E4  3D6B               	addwfc	(??_main+1)^(0+384),w
  5412  03E5  00ED               	movwf	(??_main+3)^(0+384)
  5413  03E6  086D               	movf	(??_main+3)^(0+384),w
  5414  03E7  3A80               	xorlw	128
  5415  03E8  00EE               	movwf	(??_main+4)^(0+384)
  5416  03E9  3080               	movlw	128
  5417  03EA  026E               	subwf	(??_main+4)^(0+384),w
  5418  03EB  1D03               	skipz
  5419  03EC  2BEF               	goto	u9675
  5420  03ED  3004               	movlw	4
  5421  03EE  026C               	subwf	(??_main+2)^(0+384),w
  5422  03EF                     u9675:	
  5423  03EF  1803               	skipnc
  5424  03F0  2C0A               	goto	l8861
  5425  03F1  0023               	movlb	3	; select bank3
  5426  03F2  0949               	comf	_knob1_prev^(0+384),w	;volatile
  5427  03F3  00EA               	movwf	??_main^(0+384)
  5428  03F4  094A               	comf	(_knob1_prev+1)^(0+384),w	;volatile
  5429  03F5  00EB               	movwf	(??_main^(0+384)+1)
  5430  03F6  0AEA               	incf	??_main^(0+384),f
  5431  03F7  1903               	skipnz
  5432  03F8  0AEB               	incf	(??_main^(0+384)+1),f
  5433  03F9  082A               	movf	_knob_1_pos^(0+384),w
  5434  03FA  076A               	addwf	??_main^(0+384),w
  5435  03FB  00EC               	movwf	(??_main+2)^(0+384)
  5436  03FC  082B               	movf	(_knob_1_pos+1)^(0+384),w
  5437  03FD  3D6B               	addwfc	(??_main+1)^(0+384),w
  5438  03FE  00ED               	movwf	(??_main+3)^(0+384)
  5439  03FF  086D               	movf	(??_main+3)^(0+384),w
  5440  0400  3A80               	xorlw	128
  5441  0401  00EE               	movwf	(??_main+4)^(0+384)
  5442  0402  307F               	movlw	127
  5443  0403  026E               	subwf	(??_main+4)^(0+384),w
  5444  0404  1D03               	skipz
  5445  0405  2C08               	goto	u9685
  5446  0406  30FD               	movlw	253
  5447  0407  026C               	subwf	(??_main+2)^(0+384),w
  5448  0408                     u9685:	
  5449  0408  1803               	skipnc
  5450  0409  2C68               	goto	l8871
  5451  040A                     l8861:	
  5452                           
  5453                           ;main.c: 127: knob1_prev = knob_1_pos;
  5454  040A  0023               	movlb	3	; select bank3
  5455  040B  082B               	movf	(_knob_1_pos+1)^(0+384),w
  5456  040C  00CA               	movwf	(_knob1_prev+1)^(0+384)	;volatile
  5457  040D  082A               	movf	_knob_1_pos^(0+384),w
  5458  040E  00C9               	movwf	_knob1_prev^(0+384)	;volatile
  5459                           
  5460                           ;main.c: 128: CCPR4 = scaleA10kPot(knob1_prev);
  5461  040F  084A               	movf	(_knob1_prev+1)^(0+384),w	;volatile
  5462  0410  0021               	movlb	1	; select bank1
  5463  0411  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5464  0412  0023               	movlb	3	; select bank3
  5465  0413  0849               	movf	_knob1_prev^(0+384),w	;volatile
  5466  0414  0021               	movlb	1	; select bank1
  5467  0415  00A8               	movwf	___awtoft@c^(0+128)
  5468  0416  31A0  20ED  3183   	fcall	___awtoft
  5469  0419  0021               	movlb	1	; select bank1
  5470  041A  0828               	movf	?___awtoft^(0+128),w
  5471  041B  0024               	movlb	4	; select bank4
  5472  041C  00D9               	movwf	_main$2806^(0+512)
  5473  041D  0021               	movlb	1	; select bank1
  5474  041E  0829               	movf	(?___awtoft+1)^(0+128),w
  5475  041F  0024               	movlb	4	; select bank4
  5476  0420  00DA               	movwf	(_main$2806+1)^(0+512)
  5477  0421  0021               	movlb	1	; select bank1
  5478  0422  082A               	movf	(?___awtoft+2)^(0+128),w
  5479  0423  0024               	movlb	4	; select bank4
  5480  0424  00DB               	movwf	(_main$2806+2)^(0+512)
  5481                           
  5482                           ;main.c: 128: CCPR4 = scaleA10kPot(knob1_prev);
  5483  0425  0859               	movf	_main$2806^(0+512),w
  5484  0426  0022               	movlb	2	; select bank2
  5485  0427  00E7               	movwf	scaleA10kPot@input^(0+256)
  5486  0428  0024               	movlb	4	; select bank4
  5487  0429  085A               	movf	(_main$2806+1)^(0+512),w
  5488  042A  0022               	movlb	2	; select bank2
  5489  042B  00E8               	movwf	(scaleA10kPot@input+1)^(0+256)
  5490  042C  0024               	movlb	4	; select bank4
  5491  042D  085B               	movf	(_main$2806+2)^(0+512),w
  5492  042E  0022               	movlb	2	; select bank2
  5493  042F  00E9               	movwf	(scaleA10kPot@input+2)^(0+256)
  5494  0430  3190  200E  3183   	fcall	_scaleA10kPot
  5495  0433  0022               	movlb	2	; select bank2
  5496  0434  0868               	movf	(?_scaleA10kPot+1)^(0+256),w
  5497  0435  0026               	movlb	6	; select bank6
  5498  0436  0099               	movwf	25	;volatile
  5499  0437  0022               	movlb	2	; select bank2
  5500  0438  0867               	movf	?_scaleA10kPot^(0+256),w
  5501  0439  0026               	movlb	6	; select bank6
  5502  043A  0098               	movwf	24	;volatile
  5503                           
  5504                           ;main.c: 129: CCPR5 = scaleiA10kPot(knob1_prev);
  5505  043B  0023               	movlb	3	; select bank3
  5506  043C  084A               	movf	(_knob1_prev+1)^(0+384),w	;volatile
  5507  043D  0021               	movlb	1	; select bank1
  5508  043E  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5509  043F  0023               	movlb	3	; select bank3
  5510  0440  0849               	movf	_knob1_prev^(0+384),w	;volatile
  5511  0441  0021               	movlb	1	; select bank1
  5512  0442  00A8               	movwf	___awtoft@c^(0+128)
  5513  0443  31A0  20ED  3183   	fcall	___awtoft
  5514  0446  0021               	movlb	1	; select bank1
  5515  0447  0828               	movf	?___awtoft^(0+128),w
  5516  0448  0024               	movlb	4	; select bank4
  5517  0449  00DC               	movwf	_main$2807^(0+512)
  5518  044A  0021               	movlb	1	; select bank1
  5519  044B  0829               	movf	(?___awtoft+1)^(0+128),w
  5520  044C  0024               	movlb	4	; select bank4
  5521  044D  00DD               	movwf	(_main$2807+1)^(0+512)
  5522  044E  0021               	movlb	1	; select bank1
  5523  044F  082A               	movf	(?___awtoft+2)^(0+128),w
  5524  0450  0024               	movlb	4	; select bank4
  5525  0451  00DE               	movwf	(_main$2807+2)^(0+512)
  5526                           
  5527                           ;main.c: 129: CCPR5 = scaleiA10kPot(knob1_prev);
  5528  0452  085C               	movf	_main$2807^(0+512),w
  5529  0453  0022               	movlb	2	; select bank2
  5530  0454  00E7               	movwf	scaleiA10kPot@input^(0+256)
  5531  0455  0024               	movlb	4	; select bank4
  5532  0456  085D               	movf	(_main$2807+1)^(0+512),w
  5533  0457  0022               	movlb	2	; select bank2
  5534  0458  00E8               	movwf	(scaleiA10kPot@input+1)^(0+256)
  5535  0459  0024               	movlb	4	; select bank4
  5536  045A  085E               	movf	(_main$2807+2)^(0+512),w
  5537  045B  0022               	movlb	2	; select bank2
  5538  045C  00E9               	movwf	(scaleiA10kPot@input+2)^(0+256)
  5539  045D  319D  25E6  3183   	fcall	_scaleiA10kPot
  5540  0460  0022               	movlb	2	; select bank2
  5541  0461  0868               	movf	(?_scaleiA10kPot+1)^(0+256),w
  5542  0462  0026               	movlb	6	; select bank6
  5543  0463  009D               	movwf	29	;volatile
  5544  0464  0022               	movlb	2	; select bank2
  5545  0465  0867               	movf	?_scaleiA10kPot^(0+256),w
  5546  0466  0026               	movlb	6	; select bank6
  5547  0467  009C               	movwf	28	;volatile
  5548  0468                     l8871:	
  5549                           
  5550                           ;main.c: 131: }
  5551                           ;main.c: 135: if (knob_2_pos - knob2_prev >= 4 || knob_2_pos - knob2_prev <= -4) {
  5552  0468  0023               	movlb	3	; select bank3
  5553  0469  094B               	comf	_knob2_prev^(0+384),w	;volatile
  5554  046A  00EA               	movwf	??_main^(0+384)
  5555  046B  094C               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5556  046C  00EB               	movwf	(??_main^(0+384)+1)
  5557  046D  0AEA               	incf	??_main^(0+384),f
  5558  046E  1903               	skipnz
  5559  046F  0AEB               	incf	(??_main^(0+384)+1),f
  5560  0470  082C               	movf	_knob_2_pos^(0+384),w
  5561  0471  076A               	addwf	??_main^(0+384),w
  5562  0472  00EC               	movwf	(??_main+2)^(0+384)
  5563  0473  082D               	movf	(_knob_2_pos+1)^(0+384),w
  5564  0474  3D6B               	addwfc	(??_main+1)^(0+384),w
  5565  0475  00ED               	movwf	(??_main+3)^(0+384)
  5566  0476  086D               	movf	(??_main+3)^(0+384),w
  5567  0477  3A80               	xorlw	128
  5568  0478  00EE               	movwf	(??_main+4)^(0+384)
  5569  0479  3080               	movlw	128
  5570  047A  026E               	subwf	(??_main+4)^(0+384),w
  5571  047B  1D03               	skipz
  5572  047C  2C7F               	goto	u9695
  5573  047D  3004               	movlw	4
  5574  047E  026C               	subwf	(??_main+2)^(0+384),w
  5575  047F                     u9695:	
  5576  047F  1803               	skipnc
  5577  0480  2C9A               	goto	l8875
  5578  0481  0023               	movlb	3	; select bank3
  5579  0482  094B               	comf	_knob2_prev^(0+384),w	;volatile
  5580  0483  00EA               	movwf	??_main^(0+384)
  5581  0484  094C               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5582  0485  00EB               	movwf	(??_main^(0+384)+1)
  5583  0486  0AEA               	incf	??_main^(0+384),f
  5584  0487  1903               	skipnz
  5585  0488  0AEB               	incf	(??_main^(0+384)+1),f
  5586  0489  082C               	movf	_knob_2_pos^(0+384),w
  5587  048A  076A               	addwf	??_main^(0+384),w
  5588  048B  00EC               	movwf	(??_main+2)^(0+384)
  5589  048C  082D               	movf	(_knob_2_pos+1)^(0+384),w
  5590  048D  3D6B               	addwfc	(??_main+1)^(0+384),w
  5591  048E  00ED               	movwf	(??_main+3)^(0+384)
  5592  048F  086D               	movf	(??_main+3)^(0+384),w
  5593  0490  3A80               	xorlw	128
  5594  0491  00EE               	movwf	(??_main+4)^(0+384)
  5595  0492  307F               	movlw	127
  5596  0493  026E               	subwf	(??_main+4)^(0+384),w
  5597  0494  1D03               	skipz
  5598  0495  2C98               	goto	u9705
  5599  0496  30FD               	movlw	253
  5600  0497  026C               	subwf	(??_main+2)^(0+384),w
  5601  0498                     u9705:	
  5602  0498  1803               	skipnc
  5603  0499  2D0A               	goto	l8885
  5604  049A                     l8875:	
  5605                           
  5606                           ;main.c: 136: knob2_prev = knob_2_pos;
  5607  049A  0023               	movlb	3	; select bank3
  5608  049B  082D               	movf	(_knob_2_pos+1)^(0+384),w
  5609  049C  00CC               	movwf	(_knob2_prev+1)^(0+384)	;volatile
  5610  049D  082C               	movf	_knob_2_pos^(0+384),w
  5611  049E  00CB               	movwf	_knob2_prev^(0+384)	;volatile
  5612                           
  5613                           ;main.c: 137: CCPR1 = scaleA100kPot(1023-knob2_prev);
  5614  049F  094B               	comf	_knob2_prev^(0+384),w	;volatile
  5615  04A0  00EA               	movwf	??_main^(0+384)
  5616  04A1  094C               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5617  04A2  00EB               	movwf	(??_main^(0+384)+1)
  5618  04A3  0AEA               	incf	??_main^(0+384),f
  5619  04A4  1903               	skipnz
  5620  04A5  0AEB               	incf	(??_main^(0+384)+1),f
  5621  04A6  086A               	movf	??_main^(0+384),w
  5622  04A7  3EFF               	addlw	255
  5623  04A8  0021               	movlb	1	; select bank1
  5624  04A9  00A8               	movwf	___awtoft@c^(0+128)
  5625  04AA  3003               	movlw	3
  5626  04AB  0023               	movlb	3	; select bank3
  5627  04AC  3D6B               	addwfc	(??_main+1)^(0+384),w
  5628  04AD  0021               	movlb	1	; select bank1
  5629  04AE  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5630  04AF  31A0  20ED  3183   	fcall	___awtoft
  5631  04B2  0021               	movlb	1	; select bank1
  5632  04B3  0828               	movf	?___awtoft^(0+128),w
  5633  04B4  0024               	movlb	4	; select bank4
  5634  04B5  00DF               	movwf	_main$2808^(0+512)
  5635  04B6  0021               	movlb	1	; select bank1
  5636  04B7  0829               	movf	(?___awtoft+1)^(0+128),w
  5637  04B8  0024               	movlb	4	; select bank4
  5638  04B9  00E0               	movwf	(_main$2808+1)^(0+512)
  5639  04BA  0021               	movlb	1	; select bank1
  5640  04BB  082A               	movf	(?___awtoft+2)^(0+128),w
  5641  04BC  0024               	movlb	4	; select bank4
  5642  04BD  00E1               	movwf	(_main$2808+2)^(0+512)
  5643                           
  5644                           ;main.c: 137: CCPR1 = scaleA100kPot(1023-knob2_prev);
  5645  04BE  085F               	movf	_main$2808^(0+512),w
  5646  04BF  0022               	movlb	2	; select bank2
  5647  04C0  00E7               	movwf	scaleA100kPot@input^(0+256)
  5648  04C1  0024               	movlb	4	; select bank4
  5649  04C2  0860               	movf	(_main$2808+1)^(0+512),w
  5650  04C3  0022               	movlb	2	; select bank2
  5651  04C4  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
  5652  04C5  0024               	movlb	4	; select bank4
  5653  04C6  0861               	movf	(_main$2808+2)^(0+512),w
  5654  04C7  0022               	movlb	2	; select bank2
  5655  04C8  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
  5656  04C9  319A  2278  3183   	fcall	_scaleA100kPot
  5657  04CC  0022               	movlb	2	; select bank2
  5658  04CD  0868               	movf	(?_scaleA100kPot+1)^(0+256),w
  5659  04CE  0025               	movlb	5	; select bank5
  5660  04CF  0092               	movwf	18	;volatile
  5661  04D0  0022               	movlb	2	; select bank2
  5662  04D1  0867               	movf	?_scaleA100kPot^(0+256),w
  5663  04D2  0025               	movlb	5	; select bank5
  5664  04D3  0091               	movwf	17	;volatile
  5665                           
  5666                           ;main.c: 138: CCPR2 = scaleA100kPot(1023-knob2_prev);
  5667  04D4  0023               	movlb	3	; select bank3
  5668  04D5  094B               	comf	_knob2_prev^(0+384),w	;volatile
  5669  04D6  00EA               	movwf	??_main^(0+384)
  5670  04D7  094C               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5671  04D8  00EB               	movwf	(??_main^(0+384)+1)
  5672  04D9  0AEA               	incf	??_main^(0+384),f
  5673  04DA  1903               	skipnz
  5674  04DB  0AEB               	incf	(??_main^(0+384)+1),f
  5675  04DC  086A               	movf	??_main^(0+384),w
  5676  04DD  3EFF               	addlw	255
  5677  04DE  0021               	movlb	1	; select bank1
  5678  04DF  00A8               	movwf	___awtoft@c^(0+128)
  5679  04E0  3003               	movlw	3
  5680  04E1  0023               	movlb	3	; select bank3
  5681  04E2  3D6B               	addwfc	(??_main+1)^(0+384),w
  5682  04E3  0021               	movlb	1	; select bank1
  5683  04E4  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5684  04E5  31A0  20ED  3183   	fcall	___awtoft
  5685  04E8  0021               	movlb	1	; select bank1
  5686  04E9  0828               	movf	?___awtoft^(0+128),w
  5687  04EA  0024               	movlb	4	; select bank4
  5688  04EB  00DF               	movwf	_main$2808^(0+512)
  5689  04EC  0021               	movlb	1	; select bank1
  5690  04ED  0829               	movf	(?___awtoft+1)^(0+128),w
  5691  04EE  0024               	movlb	4	; select bank4
  5692  04EF  00E0               	movwf	(_main$2808+1)^(0+512)
  5693  04F0  0021               	movlb	1	; select bank1
  5694  04F1  082A               	movf	(?___awtoft+2)^(0+128),w
  5695  04F2  0024               	movlb	4	; select bank4
  5696  04F3  00E1               	movwf	(_main$2808+2)^(0+512)
  5697                           
  5698                           ;main.c: 138: CCPR2 = scaleA100kPot(1023-knob2_prev);
  5699  04F4  085F               	movf	_main$2808^(0+512),w
  5700  04F5  0022               	movlb	2	; select bank2
  5701  04F6  00E7               	movwf	scaleA100kPot@input^(0+256)
  5702  04F7  0024               	movlb	4	; select bank4
  5703  04F8  0860               	movf	(_main$2808+1)^(0+512),w
  5704  04F9  0022               	movlb	2	; select bank2
  5705  04FA  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
  5706  04FB  0024               	movlb	4	; select bank4
  5707  04FC  0861               	movf	(_main$2808+2)^(0+512),w
  5708  04FD  0022               	movlb	2	; select bank2
  5709  04FE  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
  5710  04FF  319A  2278  3183   	fcall	_scaleA100kPot
  5711  0502  0022               	movlb	2	; select bank2
  5712  0503  0868               	movf	(?_scaleA100kPot+1)^(0+256),w
  5713  0504  0025               	movlb	5	; select bank5
  5714  0505  0099               	movwf	25	;volatile
  5715  0506  0022               	movlb	2	; select bank2
  5716  0507  0867               	movf	?_scaleA100kPot^(0+256),w
  5717  0508  0025               	movlb	5	; select bank5
  5718  0509  0098               	movwf	24	;volatile
  5719  050A                     l8885:	
  5720                           
  5721                           ;main.c: 139: }
  5722                           ;main.c: 149: if (knob_3_pos - knob3_prev >= 4 || knob_3_pos - knob3_prev <= -4) {
  5723  050A  0023               	movlb	3	; select bank3
  5724  050B  094D               	comf	_knob3_prev^(0+384),w	;volatile
  5725  050C  00EA               	movwf	??_main^(0+384)
  5726  050D  094E               	comf	(_knob3_prev+1)^(0+384),w	;volatile
  5727  050E  00EB               	movwf	(??_main^(0+384)+1)
  5728  050F  0AEA               	incf	??_main^(0+384),f
  5729  0510  1903               	skipnz
  5730  0511  0AEB               	incf	(??_main^(0+384)+1),f
  5731  0512  082E               	movf	_knob_3_pos^(0+384),w
  5732  0513  076A               	addwf	??_main^(0+384),w
  5733  0514  00EC               	movwf	(??_main+2)^(0+384)
  5734  0515  082F               	movf	(_knob_3_pos+1)^(0+384),w
  5735  0516  3D6B               	addwfc	(??_main+1)^(0+384),w
  5736  0517  00ED               	movwf	(??_main+3)^(0+384)
  5737  0518  086D               	movf	(??_main+3)^(0+384),w
  5738  0519  3A80               	xorlw	128
  5739  051A  00EE               	movwf	(??_main+4)^(0+384)
  5740  051B  3080               	movlw	128
  5741  051C  026E               	subwf	(??_main+4)^(0+384),w
  5742  051D  1D03               	skipz
  5743  051E  2D21               	goto	u9715
  5744  051F  3004               	movlw	4
  5745  0520  026C               	subwf	(??_main+2)^(0+384),w
  5746  0521                     u9715:	
  5747  0521  1803               	skipnc
  5748  0522  2D3C               	goto	l8889
  5749  0523  0023               	movlb	3	; select bank3
  5750  0524  094D               	comf	_knob3_prev^(0+384),w	;volatile
  5751  0525  00EA               	movwf	??_main^(0+384)
  5752  0526  094E               	comf	(_knob3_prev+1)^(0+384),w	;volatile
  5753  0527  00EB               	movwf	(??_main^(0+384)+1)
  5754  0528  0AEA               	incf	??_main^(0+384),f
  5755  0529  1903               	skipnz
  5756  052A  0AEB               	incf	(??_main^(0+384)+1),f
  5757  052B  082E               	movf	_knob_3_pos^(0+384),w
  5758  052C  076A               	addwf	??_main^(0+384),w
  5759  052D  00EC               	movwf	(??_main+2)^(0+384)
  5760  052E  082F               	movf	(_knob_3_pos+1)^(0+384),w
  5761  052F  3D6B               	addwfc	(??_main+1)^(0+384),w
  5762  0530  00ED               	movwf	(??_main+3)^(0+384)
  5763  0531  086D               	movf	(??_main+3)^(0+384),w
  5764  0532  3A80               	xorlw	128
  5765  0533  00EE               	movwf	(??_main+4)^(0+384)
  5766  0534  307F               	movlw	127
  5767  0535  026E               	subwf	(??_main+4)^(0+384),w
  5768  0536  1D03               	skipz
  5769  0537  2D3A               	goto	u9725
  5770  0538  30FD               	movlw	253
  5771  0539  026C               	subwf	(??_main+2)^(0+384),w
  5772  053A                     u9725:	
  5773  053A  1803               	skipnc
  5774  053B  2DA4               	goto	l8901
  5775  053C                     l8889:	
  5776                           
  5777                           ;main.c: 150: knob3_prev = knob_3_pos;
  5778  053C  0023               	movlb	3	; select bank3
  5779  053D  082F               	movf	(_knob_3_pos+1)^(0+384),w
  5780  053E  00CE               	movwf	(_knob3_prev+1)^(0+384)	;volatile
  5781  053F  082E               	movf	_knob_3_pos^(0+384),w
  5782  0540  00CD               	movwf	_knob3_prev^(0+384)	;volatile
  5783                           
  5784                           ;main.c: 151: symmetry = (int) map(knob3_prev, 0, 1023, 45, 315);
  5785  0541  3080               	movlw	128
  5786  0542  0021               	movlb	1	; select bank1
  5787  0543  00EA               	movwf	map@out_max^(0+128)
  5788  0544  309D               	movlw	157
  5789  0545  00EB               	movwf	(map@out_max+1)^(0+128)
  5790  0546  3043               	movlw	67
  5791  0547  00EC               	movwf	(map@out_max+2)^(0+128)
  5792  0548  3000               	movlw	0
  5793  0549  00E7               	movwf	map@out_min^(0+128)
  5794  054A  3034               	movlw	52
  5795  054B  00E8               	movwf	(map@out_min+1)^(0+128)
  5796  054C  3042               	movlw	66
  5797  054D  00E9               	movwf	(map@out_min+2)^(0+128)
  5798  054E  30C0               	movlw	192
  5799  054F  00E4               	movwf	map@in_max^(0+128)
  5800  0550  307F               	movlw	127
  5801  0551  00E5               	movwf	(map@in_max+1)^(0+128)
  5802  0552  3044               	movlw	68
  5803  0553  00E6               	movwf	(map@in_max+2)^(0+128)
  5804  0554  3000               	movlw	0
  5805  0555  00E1               	movwf	map@in_min^(0+128)
  5806  0556  3000               	movlw	0
  5807  0557  00E2               	movwf	(map@in_min+1)^(0+128)
  5808  0558  3000               	movlw	0
  5809  0559  00E3               	movwf	(map@in_min+2)^(0+128)
  5810  055A  0023               	movlb	3	; select bank3
  5811  055B  084E               	movf	(_knob3_prev+1)^(0+384),w	;volatile
  5812  055C  0021               	movlb	1	; select bank1
  5813  055D  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5814  055E  0023               	movlb	3	; select bank3
  5815  055F  084D               	movf	_knob3_prev^(0+384),w	;volatile
  5816  0560  0021               	movlb	1	; select bank1
  5817  0561  00A8               	movwf	___awtoft@c^(0+128)
  5818  0562  31A0  20ED  3183   	fcall	___awtoft
  5819  0565  0021               	movlb	1	; select bank1
  5820  0566  0828               	movf	?___awtoft^(0+128),w
  5821  0567  00DE               	movwf	map@x^(0+128)
  5822  0568  0829               	movf	(?___awtoft+1)^(0+128),w
  5823  0569  00DF               	movwf	(map@x+1)^(0+128)
  5824  056A  082A               	movf	(?___awtoft+2)^(0+128),w
  5825  056B  00E0               	movwf	(map@x+2)^(0+128)
  5826  056C  319C  240B  3183   	fcall	_map
  5827  056F  0021               	movlb	1	; select bank1
  5828  0570  085E               	movf	?_map^(0+128),w
  5829  0571  0022               	movlb	2	; select bank2
  5830  0572  00A0               	movwf	___fttol@f1^(0+256)
  5831  0573  0021               	movlb	1	; select bank1
  5832  0574  085F               	movf	(?_map+1)^(0+128),w
  5833  0575  0022               	movlb	2	; select bank2
  5834  0576  00A1               	movwf	(___fttol@f1+1)^(0+256)
  5835  0577  0021               	movlb	1	; select bank1
  5836  0578  0860               	movf	(?_map+2)^(0+128),w
  5837  0579  0022               	movlb	2	; select bank2
  5838  057A  00A2               	movwf	(___fttol@f1+2)^(0+256)
  5839  057B  319A  22FD  3183   	fcall	___fttol
  5840  057E  0022               	movlb	2	; select bank2
  5841  057F  0821               	movf	(?___fttol^(0+256)+1),w
  5842  0580  0023               	movlb	3	; select bank3
  5843  0581  00D6               	movwf	(_symmetry+1)^(0+384)
  5844  0582  0022               	movlb	2	; select bank2
  5845  0583  0820               	movf	?___fttol^(0+256),w
  5846  0584  0023               	movlb	3	; select bank3
  5847  0585  00D5               	movwf	_symmetry^(0+384)
  5848                           
  5849                           ;main.c: 153: modulation_changed = 1;
  5850  0586  01C1               	clrf	_modulation_changed^(0+384)
  5851  0587  0AC1               	incf	_modulation_changed^(0+384),f
  5852                           
  5853                           ;main.c: 154: if (symmetry > 177 && symmetry < 182) {
  5854  0588  0856               	movf	(_symmetry+1)^(0+384),w
  5855  0589  3A80               	xorlw	128
  5856  058A  00EA               	movwf	??_main^(0+384)
  5857  058B  3080               	movlw	128
  5858  058C  026A               	subwf	??_main^(0+384),w
  5859  058D  1D03               	skipz
  5860  058E  2D91               	goto	u9735
  5861  058F  30B2               	movlw	178
  5862  0590  0255               	subwf	_symmetry^(0+384),w
  5863  0591                     u9735:	
  5864  0591  1C03               	skipc
  5865  0592  2DA2               	goto	l364
  5866  0593  0023               	movlb	3	; select bank3
  5867  0594  0856               	movf	(_symmetry+1)^(0+384),w
  5868  0595  3A80               	xorlw	128
  5869  0596  00EA               	movwf	??_main^(0+384)
  5870  0597  3080               	movlw	128
  5871  0598  026A               	subwf	??_main^(0+384),w
  5872  0599  1D03               	skipz
  5873  059A  2D9D               	goto	u9745
  5874  059B  30B6               	movlw	182
  5875  059C  0255               	subwf	_symmetry^(0+384),w
  5876  059D                     u9745:	
  5877  059D  1803               	skipnc
  5878  059E  2DA2               	goto	l364
  5879                           
  5880                           ;main.c: 155: LATBbits.LATB1 = 1;
  5881  059F  0022               	movlb	2	; select bank2
  5882  05A0  148D               	bsf	13,1	;volatile
  5883                           
  5884                           ;main.c: 156: } else {
  5885  05A1  2DA4               	goto	l8901
  5886  05A2                     l364:	
  5887                           
  5888                           ;main.c: 157: LATBbits.LATB1 = 0;
  5889  05A2  0022               	movlb	2	; select bank2
  5890  05A3  108D               	bcf	13,1	;volatile
  5891  05A4                     l8901:	
  5892                           
  5893                           ;main.c: 158: }
  5894                           ;main.c: 159: }
  5895                           ;main.c: 170: if (knob_4_pos - knob4_prev >= 4 || knob_4_pos - knob4_prev <= -4) {
  5896  05A4  0023               	movlb	3	; select bank3
  5897  05A5  094F               	comf	_knob4_prev^(0+384),w	;volatile
  5898  05A6  00EA               	movwf	??_main^(0+384)
  5899  05A7  0950               	comf	(_knob4_prev+1)^(0+384),w	;volatile
  5900  05A8  00EB               	movwf	(??_main^(0+384)+1)
  5901  05A9  0AEA               	incf	??_main^(0+384),f
  5902  05AA  1903               	skipnz
  5903  05AB  0AEB               	incf	(??_main^(0+384)+1),f
  5904  05AC  0830               	movf	_knob_4_pos^(0+384),w
  5905  05AD  076A               	addwf	??_main^(0+384),w
  5906  05AE  00EC               	movwf	(??_main+2)^(0+384)
  5907  05AF  0831               	movf	(_knob_4_pos+1)^(0+384),w
  5908  05B0  3D6B               	addwfc	(??_main+1)^(0+384),w
  5909  05B1  00ED               	movwf	(??_main+3)^(0+384)
  5910  05B2  086D               	movf	(??_main+3)^(0+384),w
  5911  05B3  3A80               	xorlw	128
  5912  05B4  00EE               	movwf	(??_main+4)^(0+384)
  5913  05B5  3080               	movlw	128
  5914  05B6  026E               	subwf	(??_main+4)^(0+384),w
  5915  05B7  1D03               	skipz
  5916  05B8  2DBB               	goto	u9755
  5917  05B9  3004               	movlw	4
  5918  05BA  026C               	subwf	(??_main+2)^(0+384),w
  5919  05BB                     u9755:	
  5920  05BB  1803               	skipnc
  5921  05BC  2DD6               	goto	l8905
  5922  05BD  0023               	movlb	3	; select bank3
  5923  05BE  094F               	comf	_knob4_prev^(0+384),w	;volatile
  5924  05BF  00EA               	movwf	??_main^(0+384)
  5925  05C0  0950               	comf	(_knob4_prev+1)^(0+384),w	;volatile
  5926  05C1  00EB               	movwf	(??_main^(0+384)+1)
  5927  05C2  0AEA               	incf	??_main^(0+384),f
  5928  05C3  1903               	skipnz
  5929  05C4  0AEB               	incf	(??_main^(0+384)+1),f
  5930  05C5  0830               	movf	_knob_4_pos^(0+384),w
  5931  05C6  076A               	addwf	??_main^(0+384),w
  5932  05C7  00EC               	movwf	(??_main+2)^(0+384)
  5933  05C8  0831               	movf	(_knob_4_pos+1)^(0+384),w
  5934  05C9  3D6B               	addwfc	(??_main+1)^(0+384),w
  5935  05CA  00ED               	movwf	(??_main+3)^(0+384)
  5936  05CB  086D               	movf	(??_main+3)^(0+384),w
  5937  05CC  3A80               	xorlw	128
  5938  05CD  00EE               	movwf	(??_main+4)^(0+384)
  5939  05CE  307F               	movlw	127
  5940  05CF  026E               	subwf	(??_main+4)^(0+384),w
  5941  05D0  1D03               	skipz
  5942  05D1  2DD4               	goto	u9765
  5943  05D2  30FD               	movlw	253
  5944  05D3  026C               	subwf	(??_main+2)^(0+384),w
  5945  05D4                     u9765:	
  5946  05D4  1803               	skipnc
  5947  05D5  2E20               	goto	l8909
  5948  05D6                     l8905:	
  5949                           
  5950                           ;main.c: 171: knob4_prev = knob_4_pos;
  5951  05D6  0023               	movlb	3	; select bank3
  5952  05D7  0831               	movf	(_knob_4_pos+1)^(0+384),w
  5953  05D8  00D0               	movwf	(_knob4_prev+1)^(0+384)	;volatile
  5954  05D9  0830               	movf	_knob_4_pos^(0+384),w
  5955  05DA  00CF               	movwf	_knob4_prev^(0+384)	;volatile
  5956                           
  5957                           ;main.c: 173: mod_delay_time = (int)map(knob4_prev, 0, 1023, 3, 47);
  5958  05DB  3000               	movlw	0
  5959  05DC  0021               	movlb	1	; select bank1
  5960  05DD  00EA               	movwf	map@out_max^(0+128)
  5961  05DE  303C               	movlw	60
  5962  05DF  00EB               	movwf	(map@out_max+1)^(0+128)
  5963  05E0  3042               	movlw	66
  5964  05E1  00EC               	movwf	(map@out_max+2)^(0+128)
  5965  05E2  3000               	movlw	0
  5966  05E3  00E7               	movwf	map@out_min^(0+128)
  5967  05E4  3040               	movlw	64
  5968  05E5  00E8               	movwf	(map@out_min+1)^(0+128)
  5969  05E6  3040               	movlw	64
  5970  05E7  00E9               	movwf	(map@out_min+2)^(0+128)
  5971  05E8  30C0               	movlw	192
  5972  05E9  00E4               	movwf	map@in_max^(0+128)
  5973  05EA  307F               	movlw	127
  5974  05EB  00E5               	movwf	(map@in_max+1)^(0+128)
  5975  05EC  3044               	movlw	68
  5976  05ED  00E6               	movwf	(map@in_max+2)^(0+128)
  5977  05EE  3000               	movlw	0
  5978  05EF  00E1               	movwf	map@in_min^(0+128)
  5979  05F0  3000               	movlw	0
  5980  05F1  00E2               	movwf	(map@in_min+1)^(0+128)
  5981  05F2  3000               	movlw	0
  5982  05F3  00E3               	movwf	(map@in_min+2)^(0+128)
  5983  05F4  0023               	movlb	3	; select bank3
  5984  05F5  0850               	movf	(_knob4_prev+1)^(0+384),w	;volatile
  5985  05F6  0021               	movlb	1	; select bank1
  5986  05F7  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5987  05F8  0023               	movlb	3	; select bank3
  5988  05F9  084F               	movf	_knob4_prev^(0+384),w	;volatile
  5989  05FA  0021               	movlb	1	; select bank1
  5990  05FB  00A8               	movwf	___awtoft@c^(0+128)
  5991  05FC  31A0  20ED  3183   	fcall	___awtoft
  5992  05FF  0021               	movlb	1	; select bank1
  5993  0600  0828               	movf	?___awtoft^(0+128),w
  5994  0601  00DE               	movwf	map@x^(0+128)
  5995  0602  0829               	movf	(?___awtoft+1)^(0+128),w
  5996  0603  00DF               	movwf	(map@x+1)^(0+128)
  5997  0604  082A               	movf	(?___awtoft+2)^(0+128),w
  5998  0605  00E0               	movwf	(map@x+2)^(0+128)
  5999  0606  319C  240B  3183   	fcall	_map
  6000  0609  0021               	movlb	1	; select bank1
  6001  060A  085E               	movf	?_map^(0+128),w
  6002  060B  0022               	movlb	2	; select bank2
  6003  060C  00A0               	movwf	___fttol@f1^(0+256)
  6004  060D  0021               	movlb	1	; select bank1
  6005  060E  085F               	movf	(?_map+1)^(0+128),w
  6006  060F  0022               	movlb	2	; select bank2
  6007  0610  00A1               	movwf	(___fttol@f1+1)^(0+256)
  6008  0611  0021               	movlb	1	; select bank1
  6009  0612  0860               	movf	(?_map+2)^(0+128),w
  6010  0613  0022               	movlb	2	; select bank2
  6011  0614  00A2               	movwf	(___fttol@f1+2)^(0+256)
  6012  0615  319A  22FD  3183   	fcall	___fttol
  6013  0618  0022               	movlb	2	; select bank2
  6014  0619  0821               	movf	(?___fttol^(0+256)+1),w
  6015  061A  0023               	movlb	3	; select bank3
  6016  061B  00D4               	movwf	(_mod_delay_time+1)^(0+384)
  6017  061C  0022               	movlb	2	; select bank2
  6018  061D  0820               	movf	?___fttol^(0+256),w
  6019  061E  0023               	movlb	3	; select bank3
  6020  061F  00D3               	movwf	_mod_delay_time^(0+384)
  6021  0620                     l8909:	
  6022                           
  6023                           ;main.c: 174: }
  6024                           ;main.c: 179: if (knob_5_pos - knob5_prev >= 4 || knob_5_pos - knob5_prev <= -4) {
  6025  0620  0023               	movlb	3	; select bank3
  6026  0621  0951               	comf	_knob5_prev^(0+384),w	;volatile
  6027  0622  00EA               	movwf	??_main^(0+384)
  6028  0623  0952               	comf	(_knob5_prev+1)^(0+384),w	;volatile
  6029  0624  00EB               	movwf	(??_main^(0+384)+1)
  6030  0625  0AEA               	incf	??_main^(0+384),f
  6031  0626  1903               	skipnz
  6032  0627  0AEB               	incf	(??_main^(0+384)+1),f
  6033  0628  0832               	movf	_knob_5_pos^(0+384),w
  6034  0629  076A               	addwf	??_main^(0+384),w
  6035  062A  00EC               	movwf	(??_main+2)^(0+384)
  6036  062B  0833               	movf	(_knob_5_pos+1)^(0+384),w
  6037  062C  3D6B               	addwfc	(??_main+1)^(0+384),w
  6038  062D  00ED               	movwf	(??_main+3)^(0+384)
  6039  062E  086D               	movf	(??_main+3)^(0+384),w
  6040  062F  3A80               	xorlw	128
  6041  0630  00EE               	movwf	(??_main+4)^(0+384)
  6042  0631  3080               	movlw	128
  6043  0632  026E               	subwf	(??_main+4)^(0+384),w
  6044  0633  1D03               	skipz
  6045  0634  2E37               	goto	u9775
  6046  0635  3004               	movlw	4
  6047  0636  026C               	subwf	(??_main+2)^(0+384),w
  6048  0637                     u9775:	
  6049  0637  1803               	skipnc
  6050  0638  2E52               	goto	l8913
  6051  0639  0023               	movlb	3	; select bank3
  6052  063A  0951               	comf	_knob5_prev^(0+384),w	;volatile
  6053  063B  00EA               	movwf	??_main^(0+384)
  6054  063C  0952               	comf	(_knob5_prev+1)^(0+384),w	;volatile
  6055  063D  00EB               	movwf	(??_main^(0+384)+1)
  6056  063E  0AEA               	incf	??_main^(0+384),f
  6057  063F  1903               	skipnz
  6058  0640  0AEB               	incf	(??_main^(0+384)+1),f
  6059  0641  0832               	movf	_knob_5_pos^(0+384),w
  6060  0642  076A               	addwf	??_main^(0+384),w
  6061  0643  00EC               	movwf	(??_main+2)^(0+384)
  6062  0644  0833               	movf	(_knob_5_pos+1)^(0+384),w
  6063  0645  3D6B               	addwfc	(??_main+1)^(0+384),w
  6064  0646  00ED               	movwf	(??_main+3)^(0+384)
  6065  0647  086D               	movf	(??_main+3)^(0+384),w
  6066  0648  3A80               	xorlw	128
  6067  0649  00EE               	movwf	(??_main+4)^(0+384)
  6068  064A  307F               	movlw	127
  6069  064B  026E               	subwf	(??_main+4)^(0+384),w
  6070  064C  1D03               	skipz
  6071  064D  2E50               	goto	u9785
  6072  064E  30FD               	movlw	253
  6073  064F  026C               	subwf	(??_main+2)^(0+384),w
  6074  0650                     u9785:	
  6075  0650  1803               	skipnc
  6076  0651  2E9C               	goto	l8917
  6077  0652                     l8913:	
  6078                           
  6079                           ;main.c: 180: knob5_prev = knob_5_pos;
  6080  0652  0023               	movlb	3	; select bank3
  6081  0653  0833               	movf	(_knob_5_pos+1)^(0+384),w
  6082  0654  00D2               	movwf	(_knob5_prev+1)^(0+384)	;volatile
  6083  0655  0832               	movf	_knob_5_pos^(0+384),w
  6084  0656  00D1               	movwf	_knob5_prev^(0+384)	;volatile
  6085                           
  6086                           ;main.c: 181: adjusted_pot_value = (int)map(knob5_prev, 0, 1023, 1275, 0);
  6087  0657  3000               	movlw	0
  6088  0658  0021               	movlb	1	; select bank1
  6089  0659  00EA               	movwf	map@out_max^(0+128)
  6090  065A  3000               	movlw	0
  6091  065B  00EB               	movwf	(map@out_max+1)^(0+128)
  6092  065C  3000               	movlw	0
  6093  065D  00EC               	movwf	(map@out_max+2)^(0+128)
  6094  065E  3060               	movlw	96
  6095  065F  00E7               	movwf	map@out_min^(0+128)
  6096  0660  309F               	movlw	159
  6097  0661  00E8               	movwf	(map@out_min+1)^(0+128)
  6098  0662  3044               	movlw	68
  6099  0663  00E9               	movwf	(map@out_min+2)^(0+128)
  6100  0664  30C0               	movlw	192
  6101  0665  00E4               	movwf	map@in_max^(0+128)
  6102  0666  307F               	movlw	127
  6103  0667  00E5               	movwf	(map@in_max+1)^(0+128)
  6104  0668  3044               	movlw	68
  6105  0669  00E6               	movwf	(map@in_max+2)^(0+128)
  6106  066A  3000               	movlw	0
  6107  066B  00E1               	movwf	map@in_min^(0+128)
  6108  066C  3000               	movlw	0
  6109  066D  00E2               	movwf	(map@in_min+1)^(0+128)
  6110  066E  3000               	movlw	0
  6111  066F  00E3               	movwf	(map@in_min+2)^(0+128)
  6112  0670  0023               	movlb	3	; select bank3
  6113  0671  0852               	movf	(_knob5_prev+1)^(0+384),w	;volatile
  6114  0672  0021               	movlb	1	; select bank1
  6115  0673  00A9               	movwf	(___awtoft@c+1)^(0+128)
  6116  0674  0023               	movlb	3	; select bank3
  6117  0675  0851               	movf	_knob5_prev^(0+384),w	;volatile
  6118  0676  0021               	movlb	1	; select bank1
  6119  0677  00A8               	movwf	___awtoft@c^(0+128)
  6120  0678  31A0  20ED  3183   	fcall	___awtoft
  6121  067B  0021               	movlb	1	; select bank1
  6122  067C  0828               	movf	?___awtoft^(0+128),w
  6123  067D  00DE               	movwf	map@x^(0+128)
  6124  067E  0829               	movf	(?___awtoft+1)^(0+128),w
  6125  067F  00DF               	movwf	(map@x+1)^(0+128)
  6126  0680  082A               	movf	(?___awtoft+2)^(0+128),w
  6127  0681  00E0               	movwf	(map@x+2)^(0+128)
  6128  0682  319C  240B  3183   	fcall	_map
  6129  0685  0021               	movlb	1	; select bank1
  6130  0686  085E               	movf	?_map^(0+128),w
  6131  0687  0022               	movlb	2	; select bank2
  6132  0688  00A0               	movwf	___fttol@f1^(0+256)
  6133  0689  0021               	movlb	1	; select bank1
  6134  068A  085F               	movf	(?_map+1)^(0+128),w
  6135  068B  0022               	movlb	2	; select bank2
  6136  068C  00A1               	movwf	(___fttol@f1+1)^(0+256)
  6137  068D  0021               	movlb	1	; select bank1
  6138  068E  0860               	movf	(?_map+2)^(0+128),w
  6139  068F  0022               	movlb	2	; select bank2
  6140  0690  00A2               	movwf	(___fttol@f1+2)^(0+256)
  6141  0691  319A  22FD  3183   	fcall	___fttol
  6142  0694  0022               	movlb	2	; select bank2
  6143  0695  0821               	movf	(?___fttol^(0+256)+1),w
  6144  0696  0024               	movlb	4	; select bank4
  6145  0697  00C6               	movwf	(_adjusted_pot_value+1)^(0+512)
  6146  0698  0022               	movlb	2	; select bank2
  6147  0699  0820               	movf	?___fttol^(0+256),w
  6148  069A  0024               	movlb	4	; select bank4
  6149  069B  00C5               	movwf	_adjusted_pot_value^(0+512)
  6150  069C                     l8917:	
  6151                           
  6152                           ;main.c: 182: }
  6153                           ;main.c: 184: if (modulation_changed == 1) {
  6154  069C  0023               	movlb	3	; select bank3
  6155  069D  0341               	decf	_modulation_changed^(0+384),w
  6156  069E  1D03               	btfss	3,2
  6157  069F  2EA3               	goto	l8921
  6158                           
  6159                           ;main.c: 185: updateModulationArray();
  6160  06A0  3188  209F  3183   	fcall	_updateModulationArray
  6161  06A3                     l8921:	
  6162                           
  6163                           ;main.c: 186: }
  6164                           ;main.c: 189: if (delay_time_changed == 1) {
  6165  06A3  0023               	movlb	3	; select bank3
  6166  06A4  035B               	decf	_delay_time_changed^(0+384),w
  6167  06A5  1D03               	btfss	3,2
  6168  06A6  2B7E               	goto	l8831
  6169                           
  6170                           ;main.c: 190: delay_time = baseline_delay_time;
  6171  06A7  0020               	movlb	0	; select bank0
  6172  06A8  0848               	movf	_baseline_delay_time+3,w	;volatile
  6173  06A9  00CC               	movwf	_delay_time+3	;volatile
  6174  06AA  0847               	movf	_baseline_delay_time+2,w	;volatile
  6175  06AB  00CB               	movwf	_delay_time+2	;volatile
  6176  06AC  0846               	movf	_baseline_delay_time+1,w	;volatile
  6177  06AD  00CA               	movwf	_delay_time+1	;volatile
  6178  06AE  0845               	movf	_baseline_delay_time,w	;volatile
  6179  06AF  00C9               	movwf	_delay_time	;volatile
  6180                           
  6181                           ;main.c: 191: delay_time = set_subdivision(baseline_delay_time, top_push_state);
  6182  06B0  0846               	movf	_baseline_delay_time+1,w	;volatile
  6183  06B1  0022               	movlb	2	; select bank2
  6184  06B2  00C0               	movwf	(set_subdivision@x+1)^(0+256)
  6185  06B3  0020               	movlb	0	; select bank0
  6186  06B4  0845               	movf	_baseline_delay_time,w	;volatile
  6187  06B5  0022               	movlb	2	; select bank2
  6188  06B6  00BF               	movwf	set_subdivision@x^(0+256)
  6189  06B7  0020               	movlb	0	; select bank0
  6190  06B8  0852               	movf	_top_push_state+1,w
  6191  06B9  0022               	movlb	2	; select bank2
  6192  06BA  00C2               	movwf	(set_subdivision@y+1)^(0+256)
  6193  06BB  0020               	movlb	0	; select bank0
  6194  06BC  0851               	movf	_top_push_state,w
  6195  06BD  0022               	movlb	2	; select bank2
  6196  06BE  00C1               	movwf	set_subdivision@y^(0+256)
  6197  06BF  319F  2745  3183   	fcall	_set_subdivision
  6198  06C2  0022               	movlb	2	; select bank2
  6199  06C3  083F               	movf	?_set_subdivision^(0+256),w
  6200  06C4  0020               	movlb	0	; select bank0
  6201  06C5  00C9               	movwf	_delay_time	;volatile
  6202  06C6  0022               	movlb	2	; select bank2
  6203  06C7  0840               	movf	(?_set_subdivision+1)^(0+256),w
  6204  06C8  0020               	movlb	0	; select bank0
  6205  06C9  00CA               	movwf	_delay_time+1	;volatile
  6206  06CA  0D89               	rlf	9,f
  6207  06CB  3B89               	subwfb	9,f
  6208  06CC  0989               	comf	9,f
  6209  06CD  00CB               	movwf	_delay_time+2	;volatile
  6210  06CE  00CC               	movwf	_delay_time+3	;volatile
  6211                           
  6212                           ;main.c: 192: reset_sub_delay = 1;
  6213  06CF  0023               	movlb	3	; select bank3
  6214  06D0  01C4               	clrf	_reset_sub_delay^(0+384)
  6215  06D1  0AC4               	incf	_reset_sub_delay^(0+384),f
  6216                           
  6217                           ;main.c: 193: delayfound = 0;
  6218  06D2  0024               	movlb	4	; select bank4
  6219  06D3  01D1               	clrf	_delayfound^(0+512)
  6220  06D4  01D2               	clrf	(_delayfound+1)^(0+512)
  6221                           
  6222                           ;main.c: 194: delay_counter = 0;
  6223  06D5  01CF               	clrf	_delay_counter^(0+512)	;volatile
  6224  06D6  01D0               	clrf	(_delay_counter+1)^(0+512)	;volatile
  6225                           
  6226                           ;main.c: 206: delay_time_changed = 0;
  6227  06D7  0023               	movlb	3	; select bank3
  6228  06D8  01DB               	clrf	_delay_time_changed^(0+384)
  6229  06D9  2B7E               	goto	l8831
  6230  06DA                     __end_of_main:	
  6231                           
  6232                           	psect	text1
  6233  27A7                     __ptext1:	
  6234 ;; *************** function _update_selectMode *****************
  6235 ;; Defined at:
  6236 ;;		line 139 in file "tactiles.c"
  6237 ;; Parameters:    Size  Location     Type
  6238 ;;		None
  6239 ;; Auto vars:     Size  Location     Type
  6240 ;;		None
  6241 ;; Return value:  Size  Location     Type
  6242 ;;                  1    wreg      void 
  6243 ;; Registers used:
  6244 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6245 ;; Tracked objects:
  6246 ;;		On entry : 0/0
  6247 ;;		On exit  : 0/0
  6248 ;;		Unchanged: 0/0
  6249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6251 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6252 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6253 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6254 ;;Total ram usage:        1 bytes
  6255 ;; Hardware stack levels used:    1
  6256 ;; Hardware stack levels required when called:    5
  6257 ;; This function calls:
  6258 ;;		_setExpressionDisplay
  6259 ;;		_setPresetDisplay
  6260 ;; This function is called by:
  6261 ;;		_main
  6262 ;; This function uses a non-reentrant model
  6263 ;;
  6264                           
  6265                           
  6266                           ;psect for function _update_selectMode
  6267  27A7                     _update_selectMode:	
  6268                           
  6269                           ;tactiles.c: 140: if (mode2_state == 0 && presetSaveMode != 1) {
  6270                           
  6271                           ;incstack = 0
  6272                           ; Regs used in _update_selectMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6273  27A7  0020               	movlb	0	; select bank0
  6274  27A8  0867               	movf	_mode2_state,w
  6275  27A9  1D03               	btfss	3,2
  6276  27AA  2FAE               	goto	l1006
  6277  27AB  0368               	decf	_presetSaveMode,w
  6278  27AC  1D03               	btfss	3,2
  6279  27AD  0008               	return
  6280  27AE                     l1006:	
  6281                           ;tactiles.c: 142: return;
  6282                           
  6283                           
  6284                           ;tactiles.c: 143: }
  6285                           ;tactiles.c: 144: if (PORTDbits.RD7 == 0) {
  6286  27AE  1B8F               	btfsc	15,7	;volatile
  6287  27AF  2FFC               	goto	l8435
  6288                           
  6289                           ;tactiles.c: 145: debounce_mode1++;
  6290  27B0  3001               	movlw	1
  6291  27B1  0024               	movlb	4	; select bank4
  6292  27B2  07CB               	addwf	_debounce_mode1^(0+512),f
  6293  27B3  3000               	movlw	0
  6294  27B4  3DCC               	addwfc	(_debounce_mode1+1)^(0+512),f
  6295                           
  6296                           ;tactiles.c: 146: if (debounce_mode1 > 25) {
  6297  27B5  084C               	movf	(_debounce_mode1+1)^(0+512),w
  6298  27B6  3A80               	xorlw	128
  6299  27B7  0021               	movlb	1	; select bank1
  6300  27B8  00A7               	movwf	??_update_selectMode^(0+128)
  6301  27B9  3080               	movlw	128
  6302  27BA  0227               	subwf	??_update_selectMode^(0+128),w
  6303  27BB  1D03               	skipz
  6304  27BC  2FC0               	goto	u8905
  6305  27BD  301A               	movlw	26
  6306  27BE  0024               	movlb	4	; select bank4
  6307  27BF  024B               	subwf	_debounce_mode1^(0+512),w
  6308  27C0                     u8905:	
  6309  27C0  1C03               	skipc
  6310  27C1  0008               	return
  6311                           
  6312                           ;tactiles.c: 147: debounce_mode1 = 25;
  6313  27C2  3019               	movlw	25
  6314  27C3  0024               	movlb	4	; select bank4
  6315  27C4  00CB               	movwf	_debounce_mode1^(0+512)
  6316  27C5  3000               	movlw	0
  6317  27C6  00CC               	movwf	(_debounce_mode1^(0+512)+1)
  6318                           
  6319                           ;tactiles.c: 148: if (mode2_state == presetModeCnst || presetSaveMode == 1) {
  6320  27C7  0020               	movlb	0	; select bank0
  6321  27C8  0867               	movf	_mode2_state,w
  6322  27C9  0023               	movlb	3	; select bank3
  6323  27CA  065F               	xorwf	_presetModeCnst^(0+384),w
  6324  27CB  1903               	skipnz
  6325  27CC  2FD1               	goto	l8417
  6326  27CD  0020               	movlb	0	; select bank0
  6327  27CE  0368               	decf	_presetSaveMode,w
  6328  27CF  1D03               	btfss	3,2
  6329  27D0  2FE2               	goto	l8425
  6330  27D1                     l8417:	
  6331                           
  6332                           ;tactiles.c: 149: presetChannel++;
  6333  27D1  3001               	movlw	1
  6334  27D2  0021               	movlb	1	; select bank1
  6335  27D3  00A7               	movwf	??_update_selectMode^(0+128)
  6336  27D4  0827               	movf	??_update_selectMode^(0+128),w
  6337  27D5  0020               	movlb	0	; select bank0
  6338  27D6  07D7               	addwf	_presetChannel,f
  6339                           
  6340                           ;tactiles.c: 150: if (presetChannel > 10) {
  6341  27D7  300B               	movlw	11
  6342  27D8  0257               	subwf	_presetChannel,w
  6343  27D9  1C03               	skipc
  6344  27DA  2FDD               	goto	l8423
  6345                           
  6346                           ;tactiles.c: 151: presetChannel = 1;
  6347  27DB  01D7               	clrf	_presetChannel
  6348  27DC  0AD7               	incf	_presetChannel,f
  6349  27DD                     l8423:	
  6350                           
  6351                           ;tactiles.c: 152: }
  6352                           ;tactiles.c: 153: setPresetDisplay(presetChannel);
  6353  27DD  0857               	movf	_presetChannel,w
  6354  27DE  31A2  2284  31A7   	fcall	_setPresetDisplay
  6355                           
  6356                           ;tactiles.c: 154: } else if (mode2_state == expressModeCnst) {
  6357  27E1  2FF8               	goto	l1017
  6358  27E2                     l8425:	
  6359  27E2  0020               	movlb	0	; select bank0
  6360  27E3  0867               	movf	_mode2_state,w
  6361  27E4  0023               	movlb	3	; select bank3
  6362  27E5  065D               	xorwf	_expressModeCnst^(0+384),w
  6363  27E6  1D03               	skipz
  6364  27E7  2FF8               	goto	l1017
  6365                           
  6366                           ;tactiles.c: 155: expressionChannel++;
  6367  27E8  3001               	movlw	1
  6368  27E9  0021               	movlb	1	; select bank1
  6369  27EA  00A7               	movwf	??_update_selectMode^(0+128)
  6370  27EB  0827               	movf	??_update_selectMode^(0+128),w
  6371  27EC  0023               	movlb	3	; select bank3
  6372  27ED  07DE               	addwf	_expressionChannel^(0+384),f
  6373                           
  6374                           ;tactiles.c: 156: if (expressionChannel > 5) {
  6375  27EE  3006               	movlw	6
  6376  27EF  025E               	subwf	_expressionChannel^(0+384),w
  6377  27F0  1C03               	skipc
  6378  27F1  2FF4               	goto	l8433
  6379                           
  6380                           ;tactiles.c: 157: expressionChannel = 1;
  6381  27F2  01DE               	clrf	_expressionChannel^(0+384)
  6382  27F3  0ADE               	incf	_expressionChannel^(0+384),f
  6383  27F4                     l8433:	
  6384                           
  6385                           ;tactiles.c: 158: }
  6386                           ;tactiles.c: 159: setExpressionDisplay(expressionChannel);
  6387  27F4  085E               	movf	_expressionChannel^(0+384),w
  6388  27F5  31A0  2015  31A7   	fcall	_setExpressionDisplay
  6389  27F8                     l1017:	
  6390                           ;tactiles.c: 160: }
  6391                           ;tactiles.c: 167: while (PORTDbits.RD7 == 0) {
  6392                           
  6393  27F8  0020               	movlb	0	; select bank0
  6394  27F9  1B8F               	btfsc	15,7	;volatile
  6395  27FA  0008               	return
  6396  27FB  2FF8               	goto	l1017
  6397  27FC                     l8435:	
  6398                           ;tactiles.c: 168: }
  6399                           ;tactiles.c: 169: }
  6400                           ;tactiles.c: 170: } else {
  6401                           
  6402                           
  6403                           ;tactiles.c: 171: debounce_mode1 = 0;
  6404  27FC  0024               	movlb	4	; select bank4
  6405  27FD  01CB               	clrf	_debounce_mode1^(0+512)
  6406  27FE  01CC               	clrf	(_debounce_mode1+1)^(0+512)
  6407  27FF  0008               	return
  6408  2800                     __end_of_update_selectMode:	
  6409                           
  6410                           	psect	text2
  6411  224C                     __ptext2:	
  6412 ;; *************** function _update_mode *****************
  6413 ;; Defined at:
  6414 ;;		line 87 in file "tactiles.c"
  6415 ;; Parameters:    Size  Location     Type
  6416 ;;		None
  6417 ;; Auto vars:     Size  Location     Type
  6418 ;;		None
  6419 ;; Return value:  Size  Location     Type
  6420 ;;                  1    wreg      void 
  6421 ;; Registers used:
  6422 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6423 ;; Tracked objects:
  6424 ;;		On entry : 0/0
  6425 ;;		On exit  : 0/0
  6426 ;;		Unchanged: 0/0
  6427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6429 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6430 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6431 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6432 ;;Total ram usage:        1 bytes
  6433 ;; Hardware stack levels used:    1
  6434 ;; Hardware stack levels required when called:    6
  6435 ;; This function calls:
  6436 ;;		_resetRingLEDs
  6437 ;;		_setPedalMode
  6438 ;; This function is called by:
  6439 ;;		_main
  6440 ;; This function uses a non-reentrant model
  6441 ;;
  6442                           
  6443                           
  6444                           ;psect for function _update_mode
  6445  224C                     _update_mode:	
  6446                           
  6447                           ;tactiles.c: 92: if (PORTCbits.RC0 == 0) {
  6448                           
  6449                           ;incstack = 0
  6450                           ; Regs used in _update_mode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6451  224C  0020               	movlb	0	; select bank0
  6452  224D  180E               	btfsc	14,0	;volatile
  6453  224E  2A80               	goto	l8403
  6454                           
  6455                           ;tactiles.c: 95: debounce_mode2++;
  6456  224F  3001               	movlw	1
  6457  2250  0024               	movlb	4	; select bank4
  6458  2251  07CD               	addwf	_debounce_mode2^(0+512),f
  6459  2252  3000               	movlw	0
  6460  2253  3DCE               	addwfc	(_debounce_mode2+1)^(0+512),f
  6461                           
  6462                           ;tactiles.c: 96: if (debounce_mode2 > 25) {
  6463  2254  084E               	movf	(_debounce_mode2+1)^(0+512),w
  6464  2255  3A80               	xorlw	128
  6465  2256  0021               	movlb	1	; select bank1
  6466  2257  00A7               	movwf	??_update_mode^(0+128)
  6467  2258  3080               	movlw	128
  6468  2259  0227               	subwf	??_update_mode^(0+128),w
  6469  225A  1D03               	skipz
  6470  225B  2A5F               	goto	u8835
  6471  225C  301A               	movlw	26
  6472  225D  0024               	movlb	4	; select bank4
  6473  225E  024D               	subwf	_debounce_mode2^(0+512),w
  6474  225F                     u8835:	
  6475  225F  1C03               	skipc
  6476  2260  0008               	return
  6477                           
  6478                           ;tactiles.c: 97: debounce_mode2 = 25;
  6479  2261  3019               	movlw	25
  6480  2262  0024               	movlb	4	; select bank4
  6481  2263  00CD               	movwf	_debounce_mode2^(0+512)
  6482  2264  3000               	movlw	0
  6483  2265  00CE               	movwf	(_debounce_mode2^(0+512)+1)
  6484                           
  6485                           ;tactiles.c: 99: if (presetSaveMode == 1) {
  6486  2266  0020               	movlb	0	; select bank0
  6487  2267  0368               	decf	_presetSaveMode,w
  6488  2268  1D03               	btfss	3,2
  6489  2269  2A6F               	goto	l8395
  6490                           
  6491                           ;tactiles.c: 100: presetSaveMode = 0;
  6492  226A  01E8               	clrf	_presetSaveMode
  6493                           
  6494                           ;tactiles.c: 101: resetRingLEDs();
  6495  226B  31A0  202D  31A2   	fcall	_resetRingLEDs
  6496                           
  6497                           ;tactiles.c: 102: } else {
  6498  226E  2A79               	goto	l8401
  6499  226F                     l8395:	
  6500                           
  6501                           ;tactiles.c: 103: mode2_state++;
  6502  226F  3001               	movlw	1
  6503  2270  0021               	movlb	1	; select bank1
  6504  2271  00A7               	movwf	??_update_mode^(0+128)
  6505  2272  0827               	movf	??_update_mode^(0+128),w
  6506  2273  0020               	movlb	0	; select bank0
  6507  2274  07E7               	addwf	_mode2_state,f
  6508                           
  6509                           ;tactiles.c: 104: if (mode2_state > 2) {
  6510  2275  3003               	movlw	3
  6511  2276  0267               	subwf	_mode2_state,w
  6512  2277  1803               	btfsc	3,0
  6513                           
  6514                           ;tactiles.c: 105: mode2_state = 0;
  6515  2278  01E7               	clrf	_mode2_state
  6516  2279                     l8401:	
  6517                           
  6518                           ;tactiles.c: 106: }
  6519                           ;tactiles.c: 107: }
  6520                           ;tactiles.c: 109: setPedalMode();
  6521  2279  31A1  210F  31A2   	fcall	_setPedalMode
  6522  227C                     l991:	
  6523                           ;tactiles.c: 110: while (PORTCbits.RC0 == 0) {
  6524                           
  6525  227C  0020               	movlb	0	; select bank0
  6526  227D  180E               	btfsc	14,0	;volatile
  6527  227E  0008               	return
  6528  227F  2A7C               	goto	l991
  6529  2280                     l8403:	
  6530                           ;tactiles.c: 111: }
  6531                           ;tactiles.c: 112: }
  6532                           ;tactiles.c: 113: } else {
  6533                           
  6534                           
  6535                           ;tactiles.c: 114: debounce_mode2 = 0;
  6536  2280  0024               	movlb	4	; select bank4
  6537  2281  01CD               	clrf	_debounce_mode2^(0+512)
  6538  2282  01CE               	clrf	(_debounce_mode2+1)^(0+512)
  6539  2283  0008               	return
  6540  2284                     __end_of_update_mode:	
  6541                           
  6542                           	psect	text3
  6543  0C1D                     __ptext3:	
  6544 ;; *************** function _updateSwitchTap *****************
  6545 ;; Defined at:
  6546 ;;		line 48 in file "SwitchTap.c"
  6547 ;; Parameters:    Size  Location     Type
  6548 ;;		None
  6549 ;; Auto vars:     Size  Location     Type
  6550 ;;  tapCntDiviso    2   34[BANK1 ] int 
  6551 ;;  iCnt            1   36[BANK1 ] unsigned char 
  6552 ;; Return value:  Size  Location     Type
  6553 ;;                  1    wreg      void 
  6554 ;; Registers used:
  6555 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6556 ;; Tracked objects:
  6557 ;;		On entry : 0/0
  6558 ;;		On exit  : 0/0
  6559 ;;		Unchanged: 0/0
  6560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6562 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6563 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6564 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6565 ;;Total ram usage:        9 bytes
  6566 ;; Hardware stack levels used:    1
  6567 ;; Hardware stack levels required when called:    8
  6568 ;; This function calls:
  6569 ;;		___aldiv
  6570 ;;		_setDoublePressState
  6571 ;;		_setLongTapState
  6572 ;; This function is called by:
  6573 ;;		_main
  6574 ;; This function uses a non-reentrant model
  6575 ;;
  6576                           
  6577                           
  6578                           ;psect for function _updateSwitchTap
  6579  0C1D                     _updateSwitchTap:	
  6580                           
  6581                           ;SwitchTap.c: 49: uint8_t iCnt = 0;
  6582                           
  6583                           ;incstack = 0
  6584                           ; Regs used in _updateSwitchTap: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6585  0C1D  0021               	movlb	1	; select bank1
  6586  0C1E  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  6587                           
  6588                           ;SwitchTap.c: 57: if (PORTEbits.RE0 == 0) {
  6589  0C1F  0020               	movlb	0	; select bank0
  6590  0C20  1810               	btfsc	16,0	;volatile
  6591  0C21  2C29               	goto	l8531
  6592                           
  6593                           ;SwitchTap.c: 58: if (switchTap_pressed > 0) {
  6594  0C22  0022               	movlb	2	; select bank2
  6595  0C23  086C               	movf	_switchTap_pressed^(0+256),w
  6596  0C24  1903               	btfsc	3,2
  6597  0C25  2C34               	goto	l1403
  6598                           
  6599                           ;SwitchTap.c: 59: switchTap_pressed--;
  6600  0C26  3001               	movlw	1
  6601  0C27  02EC               	subwf	_switchTap_pressed^(0+256),f
  6602                           
  6603                           ;SwitchTap.c: 60: }
  6604                           ;SwitchTap.c: 61: } else if (switchTap_pressed < 25) {
  6605  0C28  2C34               	goto	l1403
  6606  0C29                     l8531:	
  6607  0C29  3019               	movlw	25
  6608  0C2A  0022               	movlb	2	; select bank2
  6609  0C2B  026C               	subwf	_switchTap_pressed^(0+256),w
  6610  0C2C  1803               	skipnc
  6611  0C2D  2C34               	goto	l1403
  6612                           
  6613                           ;SwitchTap.c: 62: switchTap_pressed++;
  6614  0C2E  3001               	movlw	1
  6615  0C2F  0021               	movlb	1	; select bank1
  6616  0C30  00BC               	movwf	??_updateSwitchTap^(0+128)
  6617  0C31  083C               	movf	??_updateSwitchTap^(0+128),w
  6618  0C32  0022               	movlb	2	; select bank2
  6619  0C33  07EC               	addwf	_switchTap_pressed^(0+256),f
  6620  0C34                     l1403:	
  6621                           
  6622                           ;SwitchTap.c: 63: }
  6623                           ;SwitchTap.c: 69: if (switchTap_pressed == 0) {
  6624  0C34  086C               	movf	_switchTap_pressed^(0+256),w
  6625  0C35  1D03               	btfss	3,2
  6626  0C36  2DEB               	goto	l8615
  6627                           
  6628                           ;SwitchTap.c: 73: if (tap_timer >= 1563) {
  6629  0C37  0020               	movlb	0	; select bank0
  6630  0C38  1BE0               	btfsc	_tap_timer+3,7	;volatile
  6631  0C39  2CBF               	goto	l8575
  6632  0C3A  0860               	movf	_tap_timer+3,w	;volatile
  6633  0C3B  1D03               	btfss	3,2
  6634  0C3C  2C46               	goto	l8537
  6635  0C3D  085F               	movf	_tap_timer+2,w	;volatile
  6636  0C3E  1D03               	btfss	3,2
  6637  0C3F  2C46               	goto	l8537
  6638  0C40  301B               	movlw	27
  6639  0C41  025D               	subwf	_tap_timer,w	;volatile
  6640  0C42  3006               	movlw	6
  6641  0C43  3B5E               	subwfb	_tap_timer+1,w	;volatile
  6642  0C44  1C03               	btfss	3,0
  6643  0C45  2CBF               	goto	l8575
  6644  0C46                     l8537:	
  6645                           
  6646                           ;SwitchTap.c: 76: if (switchTap_down != 1) {
  6647  0C46  0023               	movlb	3	; select bank3
  6648  0C47  0345               	decf	_switchTap_down^(0+384),w
  6649  0C48  1903               	btfsc	3,2
  6650  0C49  2C85               	goto	l8553
  6651                           
  6652                           ;SwitchTap.c: 78: switchTap_down = 1;
  6653  0C4A  01C5               	clrf	_switchTap_down^(0+384)
  6654  0C4B  0AC5               	incf	_switchTap_down^(0+384),f
  6655                           
  6656                           ;SwitchTap.c: 79: tap_timer = 0;
  6657  0C4C  3000               	movlw	0
  6658  0C4D  0020               	movlb	0	; select bank0
  6659  0C4E  00E0               	movwf	_tap_timer+3	;volatile
  6660  0C4F  3000               	movlw	0
  6661  0C50  00DF               	movwf	_tap_timer+2	;volatile
  6662  0C51  3000               	movlw	0
  6663  0C52  00DE               	movwf	_tap_timer+1	;volatile
  6664  0C53  3000               	movlw	0
  6665  0C54  00DD               	movwf	_tap_timer	;volatile
  6666                           
  6667                           ;SwitchTap.c: 80: tap_iteration = 1;
  6668  0C55  3001               	movlw	1
  6669  0C56  0023               	movlb	3	; select bank3
  6670  0C57  00D7               	movwf	_tap_iteration^(0+384)
  6671  0C58  3000               	movlw	0
  6672  0C59  00D8               	movwf	(_tap_iteration^(0+384)+1)
  6673                           
  6674                           ;SwitchTap.c: 81: tap_total = 0;
  6675  0C5A  3000               	movlw	0
  6676  0C5B  0024               	movlb	4	; select bank4
  6677  0C5C  00C0               	movwf	(_tap_total+3)^(0+512)
  6678  0C5D  3000               	movlw	0
  6679  0C5E  00BF               	movwf	(_tap_total+2)^(0+512)
  6680  0C5F  3000               	movlw	0
  6681  0C60  00BE               	movwf	(_tap_total+1)^(0+512)
  6682  0C61  3000               	movlw	0
  6683  0C62  00BD               	movwf	_tap_total^(0+512)
  6684                           
  6685                           ;SwitchTap.c: 82: delay_time_changed = 0;
  6686  0C63  0023               	movlb	3	; select bank3
  6687  0C64  01DB               	clrf	_delay_time_changed^(0+384)
  6688                           
  6689                           ;SwitchTap.c: 84: for (iCnt = 1; iCnt <= num_taps; iCnt++) {
  6690  0C65  0021               	movlb	1	; select bank1
  6691  0C66  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  6692  0C67  0AC4               	incf	updateSwitchTap@iCnt^(0+128),f
  6693  0C68                     l8551:	
  6694  0C68  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  6695  0C69  0020               	movlb	0	; select bank0
  6696  0C6A  0256               	subwf	_num_taps,w
  6697  0C6B  1C03               	btfss	3,0
  6698  0C6C  2C85               	goto	l8553
  6699                           
  6700                           ;SwitchTap.c: 85: tap_history[iCnt] = 0;
  6701  0C6D  0021               	movlb	1	; select bank1
  6702  0C6E  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  6703  0C6F  00BC               	movwf	??_updateSwitchTap^(0+128)
  6704  0C70  3001               	movlw	1
  6705  0C71                     u9245:	
  6706  0C71  35BC               	lslf	??_updateSwitchTap^(0+128),f
  6707  0C72  3EFF               	addlw	-1
  6708  0C73  1D03               	skipz
  6709  0C74  2C71               	goto	u9245
  6710  0C75  353C               	lslf	??_updateSwitchTap^(0+128),w
  6711  0C76  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  6712  0C77  0086               	movwf	6
  6713  0C78  3002               	movlw	2	; select bank4/5
  6714  0C79  0087               	movwf	7
  6715  0C7A  3000               	movlw	0
  6716  0C7B  3FC0               	movwi [0]fsr1
  6717  0C7C  3000               	movlw	0
  6718  0C7D  3FC1               	movwi [1]fsr1
  6719  0C7E  3FC2               	movwi [2]fsr1
  6720  0C7F  3FC3               	movwi [3]fsr1
  6721  0C80  3001               	movlw	1
  6722  0C81  00BC               	movwf	??_updateSwitchTap^(0+128)
  6723  0C82  083C               	movf	??_updateSwitchTap^(0+128),w
  6724  0C83  07C4               	addwf	updateSwitchTap@iCnt^(0+128),f
  6725  0C84  2C68               	goto	l8551
  6726  0C85                     l8553:	
  6727                           
  6728                           ;SwitchTap.c: 86: }
  6729                           ;SwitchTap.c: 87: }
  6730                           ;SwitchTap.c: 90: if (longTap_start == 0) {
  6731  0C85  0022               	movlb	2	; select bank2
  6732  0C86  086B               	movf	_longTap_start^(0+256),w
  6733  0C87  1D03               	btfss	3,2
  6734  0C88  2C90               	goto	l8559
  6735                           
  6736                           ;SwitchTap.c: 91: longTap_start = 1;
  6737  0C89  01EB               	clrf	_longTap_start^(0+256)
  6738  0C8A  0AEB               	incf	_longTap_start^(0+256),f
  6739                           
  6740                           ;SwitchTap.c: 92: longTap_state = 0;
  6741  0C8B  0020               	movlb	0	; select bank0
  6742  0C8C  01D5               	clrf	_longTap_state	;volatile
  6743                           
  6744                           ;SwitchTap.c: 93: longTap_timer = 0;
  6745  0C8D  0023               	movlb	3	; select bank3
  6746  0C8E  01B4               	clrf	_longTap_timer^(0+384)	;volatile
  6747  0C8F  01B5               	clrf	(_longTap_timer+1)^(0+384)	;volatile
  6748  0C90                     l8559:	
  6749                           
  6750                           ;SwitchTap.c: 94: }
  6751                           ;SwitchTap.c: 98: if (longTap_timer >= long_press_limit && longTap_state == 0 && doubleT
      +                          ap_state == 0) {
  6752  0C90  0020               	movlb	0	; select bank0
  6753  0C91  0850               	movf	_long_press_limit+1,w
  6754  0C92  0023               	movlb	3	; select bank3
  6755  0C93  0235               	subwf	(_longTap_timer+1)^(0+384),w	;volatile
  6756  0C94  1D03               	skipz
  6757  0C95  2C9A               	goto	u9275
  6758  0C96  0020               	movlb	0	; select bank0
  6759  0C97  084F               	movf	_long_press_limit,w
  6760  0C98  0023               	movlb	3	; select bank3
  6761  0C99  0234               	subwf	_longTap_timer^(0+384),w	;volatile
  6762  0C9A                     u9275:	
  6763  0C9A  1C03               	skipc
  6764  0C9B  0008               	return
  6765  0C9C  0020               	movlb	0	; select bank0
  6766  0C9D  0855               	movf	_longTap_state,w	;volatile
  6767  0C9E  1D03               	btfss	3,2
  6768  0C9F  0008               	return
  6769  0CA0  0866               	movf	_doubleTap_state,w	;volatile
  6770  0CA1  1D03               	btfss	3,2
  6771  0CA2  0008               	return
  6772                           
  6773                           ;SwitchTap.c: 100: longTap_timer = long_press_limit;
  6774  0CA3  0850               	movf	_long_press_limit+1,w
  6775  0CA4  0023               	movlb	3	; select bank3
  6776  0CA5  00B5               	movwf	(_longTap_timer+1)^(0+384)	;volatile
  6777  0CA6  0020               	movlb	0	; select bank0
  6778  0CA7  084F               	movf	_long_press_limit,w
  6779  0CA8  0023               	movlb	3	; select bank3
  6780  0CA9  00B4               	movwf	_longTap_timer^(0+384)	;volatile
  6781                           
  6782                           ;SwitchTap.c: 102: LATBbits.LATB4 = 0;
  6783  0CAA  0022               	movlb	2	; select bank2
  6784  0CAB  120D               	bcf	13,4	;volatile
  6785                           
  6786                           ;SwitchTap.c: 103: if (feedback_start != 1) {
  6787  0CAC  036A               	decf	_feedback_start^(0+256),w
  6788  0CAD  1903               	btfsc	3,2
  6789  0CAE  2CB7               	goto	l8573
  6790                           
  6791                           ;SwitchTap.c: 104: setLongTapState(1);
  6792  0CAF  3001               	movlw	1
  6793  0CB0  0021               	movlb	1	; select bank1
  6794  0CB1  00A0               	movwf	setLongTapState@f_state^(0+128)
  6795  0CB2  3000               	movlw	0
  6796  0CB3  00A1               	movwf	(setLongTapState@f_state^(0+128)+1)
  6797  0CB4  31A0  2061         	fcall	_setLongTapState
  6798                           
  6799                           ;SwitchTap.c: 105: } else {
  6800  0CB6  0008               	return
  6801  0CB7                     l8573:	
  6802                           
  6803                           ;SwitchTap.c: 106: setDoublePressState(1);
  6804  0CB7  3001               	movlw	1
  6805  0CB8  0021               	movlb	1	; select bank1
  6806  0CB9  00B8               	movwf	setDoublePressState@f_state^(0+128)
  6807  0CBA  3000               	movlw	0
  6808  0CBB  00B9               	movwf	(setDoublePressState@f_state^(0+128)+1)
  6809  0CBC  31A3  2372         	fcall	_setDoublePressState
  6810                           
  6811                           ;SwitchTap.c: 107: }
  6812                           ;SwitchTap.c: 108: }
  6813                           ;SwitchTap.c: 110: } else if (tap_timer < 1563 && longTap_state == 0 && switchTap_down !
      +                          = 1) {
  6814  0CBE  0008               	return
  6815  0CBF                     l8575:	
  6816  0CBF  0020               	movlb	0	; select bank0
  6817  0CC0  1BE0               	btfsc	_tap_timer+3,7	;volatile
  6818  0CC1  2CCE               	goto	l8577
  6819  0CC2  0860               	movf	_tap_timer+3,w	;volatile
  6820  0CC3  1D03               	btfss	3,2
  6821  0CC4  0008               	return
  6822  0CC5  085F               	movf	_tap_timer+2,w	;volatile
  6823  0CC6  1D03               	btfss	3,2
  6824  0CC7  0008               	return
  6825  0CC8  301B               	movlw	27
  6826  0CC9  025D               	subwf	_tap_timer,w	;volatile
  6827  0CCA  3006               	movlw	6
  6828  0CCB  3B5E               	subwfb	_tap_timer+1,w	;volatile
  6829  0CCC  1803               	btfsc	3,0
  6830  0CCD  0008               	return
  6831  0CCE                     l8577:	
  6832  0CCE  0855               	movf	_longTap_state,w	;volatile
  6833  0CCF  1D03               	btfss	3,2
  6834  0CD0  0008               	return
  6835  0CD1  0023               	movlb	3	; select bank3
  6836  0CD2  0345               	decf	_switchTap_down^(0+384),w
  6837  0CD3  1903               	btfsc	3,2
  6838  0CD4  0008               	return
  6839                           
  6840                           ;SwitchTap.c: 112: switchTap_down = 1;
  6841  0CD5  01C5               	clrf	_switchTap_down^(0+384)
  6842  0CD6  0AC5               	incf	_switchTap_down^(0+384),f
  6843                           
  6844                           ;SwitchTap.c: 113: if (tap_timer >= 1172) {
  6845  0CD7  0020               	movlb	0	; select bank0
  6846  0CD8  1BE0               	btfsc	_tap_timer+3,7	;volatile
  6847  0CD9  2CEE               	goto	l1417
  6848  0CDA  0860               	movf	_tap_timer+3,w	;volatile
  6849  0CDB  1D03               	btfss	3,2
  6850  0CDC  2CE6               	goto	l8585
  6851  0CDD  085F               	movf	_tap_timer+2,w	;volatile
  6852  0CDE  1D03               	btfss	3,2
  6853  0CDF  2CE6               	goto	l8585
  6854  0CE0  3094               	movlw	148
  6855  0CE1  025D               	subwf	_tap_timer,w	;volatile
  6856  0CE2  3004               	movlw	4
  6857  0CE3  3B5E               	subwfb	_tap_timer+1,w	;volatile
  6858  0CE4  1C03               	btfss	3,0
  6859  0CE5  2CEE               	goto	l1417
  6860  0CE6                     l8585:	
  6861                           
  6862                           ;SwitchTap.c: 114: tap_timer = 1172;
  6863  0CE6  3000               	movlw	0
  6864  0CE7  00E0               	movwf	_tap_timer+3	;volatile
  6865  0CE8  3000               	movlw	0
  6866  0CE9  00DF               	movwf	_tap_timer+2	;volatile
  6867  0CEA  3004               	movlw	4
  6868  0CEB  00DE               	movwf	_tap_timer+1	;volatile
  6869  0CEC  3094               	movlw	148
  6870  0CED  00DD               	movwf	_tap_timer	;volatile
  6871  0CEE                     l1417:	
  6872                           
  6873                           ;SwitchTap.c: 115: }
  6874                           ;SwitchTap.c: 117: int tapCntDivisor = num_taps;
  6875  0CEE  0856               	movf	_num_taps,w
  6876  0CEF  0021               	movlb	1	; select bank1
  6877  0CF0  00BC               	movwf	??_updateSwitchTap^(0+128)
  6878  0CF1  01BD               	clrf	(??_updateSwitchTap^(0+128)+1)
  6879  0CF2  083C               	movf	??_updateSwitchTap^(0+128),w
  6880  0CF3  00C2               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  6881  0CF4  083D               	movf	(??_updateSwitchTap+1)^(0+128),w
  6882  0CF5  00C3               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  6883                           
  6884                           ;SwitchTap.c: 118: if (tap_iteration <= num_taps) {
  6885  0CF6  0023               	movlb	3	; select bank3
  6886  0CF7  0858               	movf	(_tap_iteration+1)^(0+384),w
  6887  0CF8  3A80               	xorlw	128
  6888  0CF9  3C80               	sublw	128
  6889  0CFA  1D03               	skipz
  6890  0CFB  2CFF               	goto	u9355
  6891  0CFC  0857               	movf	_tap_iteration^(0+384),w
  6892  0CFD  0020               	movlb	0	; select bank0
  6893  0CFE  0256               	subwf	_num_taps,w
  6894  0CFF                     u9355:	
  6895  0CFF  1C03               	skipc
  6896  0D00  2D31               	goto	l8593
  6897                           
  6898                           ;SwitchTap.c: 119: tap_total += tap_timer;
  6899  0D01  0020               	movlb	0	; select bank0
  6900  0D02  085D               	movf	_tap_timer,w	;volatile
  6901  0D03  0024               	movlb	4	; select bank4
  6902  0D04  07BD               	addwf	_tap_total^(0+512),f
  6903  0D05  0020               	movlb	0	; select bank0
  6904  0D06  085E               	movf	_tap_timer+1,w	;volatile
  6905  0D07  0024               	movlb	4	; select bank4
  6906  0D08  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  6907  0D09  0020               	movlb	0	; select bank0
  6908  0D0A  085F               	movf	_tap_timer+2,w	;volatile
  6909  0D0B  0024               	movlb	4	; select bank4
  6910  0D0C  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  6911  0D0D  0020               	movlb	0	; select bank0
  6912  0D0E  0860               	movf	_tap_timer+3,w	;volatile
  6913  0D0F  0024               	movlb	4	; select bank4
  6914  0D10  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  6915                           
  6916                           ;SwitchTap.c: 120: tap_history[tap_iteration] = tap_timer;
  6917  0D11  0023               	movlb	3	; select bank3
  6918  0D12  0857               	movf	_tap_iteration^(0+384),w
  6919  0D13  0021               	movlb	1	; select bank1
  6920  0D14  00BC               	movwf	??_updateSwitchTap^(0+128)
  6921  0D15  3001               	movlw	1
  6922  0D16                     u9365:	
  6923  0D16  35BC               	lslf	??_updateSwitchTap^(0+128),f
  6924  0D17  3EFF               	addlw	-1
  6925  0D18  1D03               	skipz
  6926  0D19  2D16               	goto	u9365
  6927  0D1A  353C               	lslf	??_updateSwitchTap^(0+128),w
  6928  0D1B  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  6929  0D1C  0086               	movwf	6
  6930  0D1D  3002               	movlw	2	; select bank4/5
  6931  0D1E  0087               	movwf	7
  6932  0D1F  0020               	movlb	0	; select bank0
  6933  0D20  085D               	movf	_tap_timer,w	;volatile
  6934  0D21  3FC0               	movwi [0]fsr1
  6935  0D22  085E               	movf	_tap_timer+1,w	;volatile
  6936  0D23  3FC1               	movwi [1]fsr1
  6937  0D24  085F               	movf	_tap_timer+2,w	;volatile
  6938  0D25  3FC2               	movwi [2]fsr1
  6939  0D26  0860               	movf	_tap_timer+3,w	;volatile
  6940  0D27  3FC3               	movwi [3]fsr1
  6941                           
  6942                           ;SwitchTap.c: 121: tapCntDivisor = tap_iteration;
  6943  0D28  0023               	movlb	3	; select bank3
  6944  0D29  0858               	movf	(_tap_iteration+1)^(0+384),w
  6945  0D2A  0021               	movlb	1	; select bank1
  6946  0D2B  00C3               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  6947  0D2C  0023               	movlb	3	; select bank3
  6948  0D2D  0857               	movf	_tap_iteration^(0+384),w
  6949  0D2E  0021               	movlb	1	; select bank1
  6950  0D2F  00C2               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  6951                           
  6952                           ;SwitchTap.c: 122: } else {
  6953  0D30  2DAD               	goto	l8607
  6954  0D31                     l8593:	
  6955                           
  6956                           ;SwitchTap.c: 123: tap_total = 0;
  6957  0D31  3000               	movlw	0
  6958  0D32  0024               	movlb	4	; select bank4
  6959  0D33  00C0               	movwf	(_tap_total+3)^(0+512)
  6960  0D34  3000               	movlw	0
  6961  0D35  00BF               	movwf	(_tap_total+2)^(0+512)
  6962  0D36  3000               	movlw	0
  6963  0D37  00BE               	movwf	(_tap_total+1)^(0+512)
  6964  0D38  3000               	movlw	0
  6965  0D39  00BD               	movwf	_tap_total^(0+512)
  6966                           
  6967                           ;SwitchTap.c: 124: for (iCnt = 1; iCnt < num_taps; iCnt++) {
  6968  0D3A  0021               	movlb	1	; select bank1
  6969  0D3B  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  6970  0D3C  0AC4               	incf	updateSwitchTap@iCnt^(0+128),f
  6971  0D3D                     l8601:	
  6972  0D3D  0020               	movlb	0	; select bank0
  6973  0D3E  0856               	movf	_num_taps,w
  6974  0D3F  0021               	movlb	1	; select bank1
  6975  0D40  0244               	subwf	updateSwitchTap@iCnt^(0+128),w
  6976  0D41  1803               	btfsc	3,0
  6977  0D42  2D87               	goto	l8603
  6978                           
  6979                           ;SwitchTap.c: 125: tap_history[iCnt] = tap_history[iCnt + 1];
  6980  0D43  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  6981  0D44  00BC               	movwf	??_updateSwitchTap^(0+128)
  6982  0D45  3001               	movlw	1
  6983  0D46                     u9375:	
  6984  0D46  35BC               	lslf	??_updateSwitchTap^(0+128),f
  6985  0D47  3EFF               	addlw	-1
  6986  0D48  1D03               	skipz
  6987  0D49  2D46               	goto	u9375
  6988  0D4A  353C               	lslf	??_updateSwitchTap^(0+128),w
  6989  0D4B  3E04               	addlw	4
  6990  0D4C  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  6991  0D4D  0086               	movwf	6
  6992  0D4E  3002               	movlw	2	; select bank4/5
  6993  0D4F  0087               	movwf	7
  6994  0D50  3F40               	moviw [0]fsr1
  6995  0D51  00BD               	movwf	(??_updateSwitchTap+1)^(0+128)
  6996  0D52  3F41               	moviw [1]fsr1
  6997  0D53  00BE               	movwf	((??_updateSwitchTap+1)^(0+128)+1)
  6998  0D54  3F42               	moviw [2]fsr1
  6999  0D55  00BF               	movwf	((??_updateSwitchTap+1)^(0+128)+2)
  7000  0D56  3F43               	moviw [3]fsr1
  7001  0D57  00C0               	movwf	((??_updateSwitchTap+1)^(0+128)+3)
  7002  0D58  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7003  0D59  00C1               	movwf	(??_updateSwitchTap+5)^(0+128)
  7004  0D5A  3001               	movlw	1
  7005  0D5B                     u9385:	
  7006  0D5B  35C1               	lslf	(??_updateSwitchTap+5)^(0+128),f
  7007  0D5C  3EFF               	addlw	-1
  7008  0D5D  1D03               	skipz
  7009  0D5E  2D5B               	goto	u9385
  7010  0D5F  3541               	lslf	(??_updateSwitchTap+5)^(0+128),w
  7011  0D60  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7012  0D61  0086               	movwf	6
  7013  0D62  3002               	movlw	2	; select bank4/5
  7014  0D63  0087               	movwf	7
  7015  0D64  083D               	movf	(??_updateSwitchTap+1)^(0+128),w
  7016  0D65  3FC0               	movwi [0]fsr1
  7017  0D66  083E               	movf	(??_updateSwitchTap+2)^(0+128),w
  7018  0D67  3FC1               	movwi [1]fsr1
  7019  0D68  083F               	movf	(??_updateSwitchTap+3)^(0+128),w
  7020  0D69  3FC2               	movwi [2]fsr1
  7021  0D6A  0840               	movf	(??_updateSwitchTap+4)^(0+128),w
  7022  0D6B  3FC3               	movwi [3]fsr1
  7023                           
  7024                           ;SwitchTap.c: 126: tap_total += tap_history[iCnt];
  7025  0D6C  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7026  0D6D  00BC               	movwf	??_updateSwitchTap^(0+128)
  7027  0D6E  3001               	movlw	1
  7028  0D6F                     u9395:	
  7029  0D6F  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7030  0D70  3EFF               	addlw	-1
  7031  0D71  1D03               	skipz
  7032  0D72  2D6F               	goto	u9395
  7033  0D73  353C               	lslf	??_updateSwitchTap^(0+128),w
  7034  0D74  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7035  0D75  0086               	movwf	6
  7036  0D76  3002               	movlw	2	; select bank4/5
  7037  0D77  0087               	movwf	7
  7038  0D78  3F40               	moviw [0]fsr1
  7039  0D79  0024               	movlb	4	; select bank4
  7040  0D7A  07BD               	addwf	_tap_total^(0+512),f
  7041  0D7B  3F41               	moviw [1]fsr1
  7042  0D7C  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  7043  0D7D  3F42               	moviw [2]fsr1
  7044  0D7E  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  7045  0D7F  3F43               	moviw [3]fsr1
  7046  0D80  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  7047  0D81  3001               	movlw	1
  7048  0D82  0021               	movlb	1	; select bank1
  7049  0D83  00BC               	movwf	??_updateSwitchTap^(0+128)
  7050  0D84  083C               	movf	??_updateSwitchTap^(0+128),w
  7051  0D85  07C4               	addwf	updateSwitchTap@iCnt^(0+128),f
  7052  0D86  2D3D               	goto	l8601
  7053  0D87                     l8603:	
  7054                           
  7055                           ;SwitchTap.c: 127: }
  7056                           ;SwitchTap.c: 128: tap_history[num_taps] = tap_timer;
  7057  0D87  0020               	movlb	0	; select bank0
  7058  0D88  0856               	movf	_num_taps,w
  7059  0D89  0021               	movlb	1	; select bank1
  7060  0D8A  00BC               	movwf	??_updateSwitchTap^(0+128)
  7061  0D8B  3001               	movlw	1
  7062  0D8C                     u9415:	
  7063  0D8C  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7064  0D8D  3EFF               	addlw	-1
  7065  0D8E  1D03               	skipz
  7066  0D8F  2D8C               	goto	u9415
  7067  0D90  353C               	lslf	??_updateSwitchTap^(0+128),w
  7068  0D91  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7069  0D92  0086               	movwf	6
  7070  0D93  3002               	movlw	2	; select bank4/5
  7071  0D94  0087               	movwf	7
  7072  0D95  0020               	movlb	0	; select bank0
  7073  0D96  085D               	movf	_tap_timer,w	;volatile
  7074  0D97  3FC0               	movwi [0]fsr1
  7075  0D98  085E               	movf	_tap_timer+1,w	;volatile
  7076  0D99  3FC1               	movwi [1]fsr1
  7077  0D9A  085F               	movf	_tap_timer+2,w	;volatile
  7078  0D9B  3FC2               	movwi [2]fsr1
  7079  0D9C  0860               	movf	_tap_timer+3,w	;volatile
  7080  0D9D  3FC3               	movwi [3]fsr1
  7081                           
  7082                           ;SwitchTap.c: 129: tap_total += tap_timer;
  7083  0D9E  085D               	movf	_tap_timer,w	;volatile
  7084  0D9F  0024               	movlb	4	; select bank4
  7085  0DA0  07BD               	addwf	_tap_total^(0+512),f
  7086  0DA1  0020               	movlb	0	; select bank0
  7087  0DA2  085E               	movf	_tap_timer+1,w	;volatile
  7088  0DA3  0024               	movlb	4	; select bank4
  7089  0DA4  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  7090  0DA5  0020               	movlb	0	; select bank0
  7091  0DA6  085F               	movf	_tap_timer+2,w	;volatile
  7092  0DA7  0024               	movlb	4	; select bank4
  7093  0DA8  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  7094  0DA9  0020               	movlb	0	; select bank0
  7095  0DAA  0860               	movf	_tap_timer+3,w	;volatile
  7096  0DAB  0024               	movlb	4	; select bank4
  7097  0DAC  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  7098  0DAD                     l8607:	
  7099                           
  7100                           ;SwitchTap.c: 130: }
  7101                           ;SwitchTap.c: 132: baseline_delay_time = tap_total / tapCntDivisor;
  7102  0DAD  0021               	movlb	1	; select bank1
  7103  0DAE  0842               	movf	updateSwitchTap@tapCntDivisor^(0+128),w
  7104  0DAF  00A0               	movwf	___aldiv@divisor^(0+128)
  7105  0DB0  0843               	movf	(updateSwitchTap@tapCntDivisor+1)^(0+128),w
  7106  0DB1  00A1               	movwf	(___aldiv@divisor+1)^(0+128)
  7107  0DB2  0D89               	rlf	9,f
  7108  0DB3  3B89               	subwfb	9,f
  7109  0DB4  0989               	comf	9,f
  7110  0DB5  00A2               	movwf	(___aldiv@divisor+2)^(0+128)
  7111  0DB6  00A3               	movwf	(___aldiv@divisor+3)^(0+128)
  7112  0DB7  0024               	movlb	4	; select bank4
  7113  0DB8  0840               	movf	(_tap_total+3)^(0+512),w
  7114  0DB9  0021               	movlb	1	; select bank1
  7115  0DBA  00A7               	movwf	(___aldiv@dividend+3)^(0+128)
  7116  0DBB  0024               	movlb	4	; select bank4
  7117  0DBC  083F               	movf	(_tap_total+2)^(0+512),w
  7118  0DBD  0021               	movlb	1	; select bank1
  7119  0DBE  00A6               	movwf	(___aldiv@dividend+2)^(0+128)
  7120  0DBF  0024               	movlb	4	; select bank4
  7121  0DC0  083E               	movf	(_tap_total+1)^(0+512),w
  7122  0DC1  0021               	movlb	1	; select bank1
  7123  0DC2  00A5               	movwf	(___aldiv@dividend+1)^(0+128)
  7124  0DC3  0024               	movlb	4	; select bank4
  7125  0DC4  083D               	movf	_tap_total^(0+512),w
  7126  0DC5  0021               	movlb	1	; select bank1
  7127  0DC6  00A4               	movwf	___aldiv@dividend^(0+128)
  7128  0DC7  3199  21F6         	fcall	___aldiv
  7129  0DC9  0021               	movlb	1	; select bank1
  7130  0DCA  0823               	movf	(?___aldiv+3)^(0+128),w
  7131  0DCB  0020               	movlb	0	; select bank0
  7132  0DCC  00C8               	movwf	_baseline_delay_time+3	;volatile
  7133  0DCD  0021               	movlb	1	; select bank1
  7134  0DCE  0822               	movf	(?___aldiv+2)^(0+128),w
  7135  0DCF  0020               	movlb	0	; select bank0
  7136  0DD0  00C7               	movwf	_baseline_delay_time+2	;volatile
  7137  0DD1  0021               	movlb	1	; select bank1
  7138  0DD2  0821               	movf	(?___aldiv+1)^(0+128),w
  7139  0DD3  0020               	movlb	0	; select bank0
  7140  0DD4  00C6               	movwf	_baseline_delay_time+1	;volatile
  7141  0DD5  0021               	movlb	1	; select bank1
  7142  0DD6  0820               	movf	?___aldiv^(0+128),w
  7143  0DD7  0020               	movlb	0	; select bank0
  7144  0DD8  00C5               	movwf	_baseline_delay_time	;volatile
  7145                           
  7146                           ;SwitchTap.c: 133: delay_time_changed = 1;
  7147  0DD9  0023               	movlb	3	; select bank3
  7148  0DDA  01DB               	clrf	_delay_time_changed^(0+384)
  7149  0DDB  0ADB               	incf	_delay_time_changed^(0+384),f
  7150                           
  7151                           ;SwitchTap.c: 134: tap_timer = 0;
  7152  0DDC  3000               	movlw	0
  7153  0DDD  0020               	movlb	0	; select bank0
  7154  0DDE  00E0               	movwf	_tap_timer+3	;volatile
  7155  0DDF  3000               	movlw	0
  7156  0DE0  00DF               	movwf	_tap_timer+2	;volatile
  7157  0DE1  3000               	movlw	0
  7158  0DE2  00DE               	movwf	_tap_timer+1	;volatile
  7159  0DE3  3000               	movlw	0
  7160  0DE4  00DD               	movwf	_tap_timer	;volatile
  7161                           
  7162                           ;SwitchTap.c: 136: tap_iteration++;
  7163  0DE5  3001               	movlw	1
  7164  0DE6  0023               	movlb	3	; select bank3
  7165  0DE7  07D7               	addwf	_tap_iteration^(0+384),f
  7166  0DE8  3000               	movlw	0
  7167  0DE9  3DD8               	addwfc	(_tap_iteration+1)^(0+384),f
  7168                           
  7169                           ;SwitchTap.c: 137: }
  7170                           ;SwitchTap.c: 139: } else if (switchTap_pressed >= 25) {
  7171  0DEA  0008               	return
  7172  0DEB                     l8615:	
  7173  0DEB  3019               	movlw	25
  7174  0DEC  0022               	movlb	2	; select bank2
  7175  0DED  026C               	subwf	_switchTap_pressed^(0+256),w
  7176  0DEE  1C03               	skipc
  7177  0DEF  0008               	return
  7178                           
  7179                           ;SwitchTap.c: 140: switchTap_down = 0;
  7180  0DF0  0023               	movlb	3	; select bank3
  7181  0DF1  01C5               	clrf	_switchTap_down^(0+384)
  7182                           
  7183                           ;SwitchTap.c: 141: switchTap_state = 0;
  7184  0DF2  01E0               	clrf	_switchTap_state^(0+384)
  7185                           
  7186                           ;SwitchTap.c: 147: setLongTapState(0);
  7187  0DF3  3000               	movlw	0
  7188  0DF4  0021               	movlb	1	; select bank1
  7189  0DF5  00A0               	movwf	setLongTapState@f_state^(0+128)
  7190  0DF6  00A1               	movwf	(setLongTapState@f_state+1)^(0+128)
  7191  0DF7  31A0  2061         	fcall	_setLongTapState
  7192                           
  7193                           ;SwitchTap.c: 149: longTap_timer = 0;
  7194  0DF9  0023               	movlb	3	; select bank3
  7195  0DFA  01B4               	clrf	_longTap_timer^(0+384)	;volatile
  7196  0DFB  01B5               	clrf	(_longTap_timer+1)^(0+384)	;volatile
  7197                           
  7198                           ;SwitchTap.c: 150: longTap_start = 0;
  7199  0DFC  0022               	movlb	2	; select bank2
  7200  0DFD  01EB               	clrf	_longTap_start^(0+256)
  7201                           
  7202                           ;SwitchTap.c: 152: switchTap_pressed = 25;
  7203  0DFE  3019               	movlw	25
  7204  0DFF  0021               	movlb	1	; select bank1
  7205  0E00  00BC               	movwf	??_updateSwitchTap^(0+128)
  7206  0E01  083C               	movf	??_updateSwitchTap^(0+128),w
  7207  0E02  0022               	movlb	2	; select bank2
  7208  0E03  00EC               	movwf	_switchTap_pressed^(0+256)
  7209  0E04  0008               	return
  7210  0E05                     __end_of_updateSwitchTap:	
  7211                           
  7212                           	psect	text4
  7213  2061                     __ptext4:	
  7214 ;; *************** function _setLongTapState *****************
  7215 ;; Defined at:
  7216 ;;		line 167 in file "SwitchTap.c"
  7217 ;; Parameters:    Size  Location     Type
  7218 ;;  f_state         2    0[BANK1 ] int 
  7219 ;; Auto vars:     Size  Location     Type
  7220 ;;		None
  7221 ;; Return value:  Size  Location     Type
  7222 ;;                  1    wreg      void 
  7223 ;; Registers used:
  7224 ;;		wreg, status,0
  7225 ;; Tracked objects:
  7226 ;;		On entry : 0/0
  7227 ;;		On exit  : 0/0
  7228 ;;		Unchanged: 0/0
  7229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7230 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7232 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7233 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7234 ;;Total ram usage:        4 bytes
  7235 ;; Hardware stack levels used:    1
  7236 ;; Hardware stack levels required when called:    3
  7237 ;; This function calls:
  7238 ;;		Nothing
  7239 ;; This function is called by:
  7240 ;;		_updateSwitchTap
  7241 ;; This function uses a non-reentrant model
  7242 ;;
  7243                           
  7244                           
  7245                           ;psect for function _setLongTapState
  7246  2061                     _setLongTapState:	
  7247                           
  7248                           ;SwitchTap.c: 168: if (longTap_state == f_state) {return;}
  7249                           
  7250                           ;incstack = 0
  7251                           ; Regs used in _setLongTapState: [wreg+status,0]
  7252  2061  0020               	movlb	0	; select bank0
  7253  2062  0855               	movf	_longTap_state,w	;volatile
  7254  2063  0021               	movlb	1	; select bank1
  7255  2064  00A2               	movwf	??_setLongTapState^(0+128)
  7256  2065  01A3               	clrf	(??_setLongTapState^(0+128)+1)
  7257  2066  0821               	movf	(setLongTapState@f_state+1)^(0+128),w
  7258  2067  0623               	xorwf	(??_setLongTapState+1)^(0+128),w
  7259  2068  1D03               	skipz
  7260  2069  286C               	goto	u8525
  7261  206A  0820               	movf	setLongTapState@f_state^(0+128),w
  7262  206B  0622               	xorwf	??_setLongTapState^(0+128),w
  7263  206C                     u8525:	
  7264  206C  1903               	btfsc	3,2
  7265  206D  0008               	return
  7266                           
  7267                           ;SwitchTap.c: 169: longTap_state = f_state;
  7268  206E  0820               	movf	setLongTapState@f_state^(0+128),w
  7269  206F  00A2               	movwf	??_setLongTapState^(0+128)
  7270  2070  0822               	movf	??_setLongTapState^(0+128),w
  7271  2071  0020               	movlb	0	; select bank0
  7272  2072  00D5               	movwf	_longTap_state	;volatile
  7273                           
  7274                           ;SwitchTap.c: 170: LATBbits.LATB5 = f_state;
  7275  2073  0021               	movlb	1	; select bank1
  7276  2074  0C20               	rrf	setLongTapState@f_state^(0+128),w
  7277  2075  0022               	movlb	2	; select bank2
  7278  2076  1C03               	skipc
  7279  2077  128D               	bcf	13,5	;volatile
  7280  2078  1803               	skipnc
  7281  2079  168D               	bsf	13,5	;volatile
  7282  207A  0008               	return
  7283  207B                     __end_of_setLongTapState:	
  7284                           
  7285                           	psect	text5
  7286  19F6                     __ptext5:	
  7287 ;; *************** function ___aldiv *****************
  7288 ;; Defined at:
  7289 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
  7290 ;; Parameters:    Size  Location     Type
  7291 ;;  divisor         4    0[BANK1 ] long 
  7292 ;;  dividend        4    4[BANK1 ] long 
  7293 ;; Auto vars:     Size  Location     Type
  7294 ;;  quotient        4   11[BANK1 ] long 
  7295 ;;  sign            1   10[BANK1 ] unsigned char 
  7296 ;;  counter         1    9[BANK1 ] unsigned char 
  7297 ;; Return value:  Size  Location     Type
  7298 ;;                  4    0[BANK1 ] long 
  7299 ;; Registers used:
  7300 ;;		wreg, status,2, status,0
  7301 ;; Tracked objects:
  7302 ;;		On entry : 0/0
  7303 ;;		On exit  : 0/0
  7304 ;;		Unchanged: 0/0
  7305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7306 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7307 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7308 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7309 ;;      Totals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7310 ;;Total ram usage:       15 bytes
  7311 ;; Hardware stack levels used:    1
  7312 ;; Hardware stack levels required when called:    3
  7313 ;; This function calls:
  7314 ;;		Nothing
  7315 ;; This function is called by:
  7316 ;;		_updateSwitchTap
  7317 ;; This function uses a non-reentrant model
  7318 ;;
  7319                           
  7320                           
  7321                           ;psect for function ___aldiv
  7322  19F6                     ___aldiv:	
  7323                           
  7324                           ;incstack = 0
  7325                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  7326  19F6  0021               	movlb	1	; select bank1
  7327  19F7  01AA               	clrf	___aldiv@sign^(0+128)
  7328  19F8  1FA3               	btfss	(___aldiv@divisor+3)^(0+128),7
  7329  19F9  2A07               	goto	l1983
  7330  19FA  09A0               	comf	___aldiv@divisor^(0+128),f
  7331  19FB  09A1               	comf	(___aldiv@divisor+1)^(0+128),f
  7332  19FC  09A2               	comf	(___aldiv@divisor+2)^(0+128),f
  7333  19FD  09A3               	comf	(___aldiv@divisor+3)^(0+128),f
  7334  19FE  0AA0               	incf	___aldiv@divisor^(0+128),f
  7335  19FF  1903               	skipnz
  7336  1A00  0AA1               	incf	(___aldiv@divisor+1)^(0+128),f
  7337  1A01  1903               	skipnz
  7338  1A02  0AA2               	incf	(___aldiv@divisor+2)^(0+128),f
  7339  1A03  1903               	skipnz
  7340  1A04  0AA3               	incf	(___aldiv@divisor+3)^(0+128),f
  7341  1A05  01AA               	clrf	___aldiv@sign^(0+128)
  7342  1A06  0AAA               	incf	___aldiv@sign^(0+128),f
  7343  1A07                     l1983:	
  7344  1A07  1FA7               	btfss	(___aldiv@dividend+3)^(0+128),7
  7345  1A08  2A18               	goto	l8251
  7346  1A09  09A4               	comf	___aldiv@dividend^(0+128),f
  7347  1A0A  09A5               	comf	(___aldiv@dividend+1)^(0+128),f
  7348  1A0B  09A6               	comf	(___aldiv@dividend+2)^(0+128),f
  7349  1A0C  09A7               	comf	(___aldiv@dividend+3)^(0+128),f
  7350  1A0D  0AA4               	incf	___aldiv@dividend^(0+128),f
  7351  1A0E  1903               	skipnz
  7352  1A0F  0AA5               	incf	(___aldiv@dividend+1)^(0+128),f
  7353  1A10  1903               	skipnz
  7354  1A11  0AA6               	incf	(___aldiv@dividend+2)^(0+128),f
  7355  1A12  1903               	skipnz
  7356  1A13  0AA7               	incf	(___aldiv@dividend+3)^(0+128),f
  7357  1A14  3001               	movlw	1
  7358  1A15  00A8               	movwf	??___aldiv^(0+128)
  7359  1A16  0828               	movf	??___aldiv^(0+128),w
  7360  1A17  06AA               	xorwf	___aldiv@sign^(0+128),f
  7361  1A18                     l8251:	
  7362  1A18  3000               	movlw	0
  7363  1A19  00AE               	movwf	(___aldiv@quotient+3)^(0+128)
  7364  1A1A  3000               	movlw	0
  7365  1A1B  00AD               	movwf	(___aldiv@quotient+2)^(0+128)
  7366  1A1C  3000               	movlw	0
  7367  1A1D  00AC               	movwf	(___aldiv@quotient+1)^(0+128)
  7368  1A1E  3000               	movlw	0
  7369  1A1F  00AB               	movwf	___aldiv@quotient^(0+128)
  7370  1A20  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7371  1A21  0422               	iorwf	(___aldiv@divisor+2)^(0+128),w
  7372  1A22  0421               	iorwf	(___aldiv@divisor+1)^(0+128),w
  7373  1A23  0420               	iorwf	___aldiv@divisor^(0+128),w
  7374  1A24  1903               	skipnz
  7375  1A25  2A61               	goto	l8273
  7376  1A26  01A9               	clrf	___aldiv@counter^(0+128)
  7377  1A27  0AA9               	incf	___aldiv@counter^(0+128),f
  7378  1A28                     l8259:	
  7379  1A28  1BA3               	btfsc	(___aldiv@divisor+3)^(0+128),7
  7380  1A29  2A36               	goto	l8261
  7381  1A2A  3001               	movlw	1
  7382  1A2B                     u8665:	
  7383  1A2B  35A0               	lslf	___aldiv@divisor^(0+128),f
  7384  1A2C  0DA1               	rlf	(___aldiv@divisor+1)^(0+128),f
  7385  1A2D  0DA2               	rlf	(___aldiv@divisor+2)^(0+128),f
  7386  1A2E  0DA3               	rlf	(___aldiv@divisor+3)^(0+128),f
  7387  1A2F  0B89               	decfsz	9,f
  7388  1A30  2A2B               	goto	u8665
  7389  1A31  3001               	movlw	1
  7390  1A32  00A8               	movwf	??___aldiv^(0+128)
  7391  1A33  0828               	movf	??___aldiv^(0+128),w
  7392  1A34  07A9               	addwf	___aldiv@counter^(0+128),f
  7393  1A35  2A28               	goto	l8259
  7394  1A36                     l8261:	
  7395  1A36  3001               	movlw	1
  7396  1A37                     u8685:	
  7397  1A37  35AB               	lslf	___aldiv@quotient^(0+128),f
  7398  1A38  0DAC               	rlf	(___aldiv@quotient+1)^(0+128),f
  7399  1A39  0DAD               	rlf	(___aldiv@quotient+2)^(0+128),f
  7400  1A3A  0DAE               	rlf	(___aldiv@quotient+3)^(0+128),f
  7401  1A3B  0B89               	decfsz	9,f
  7402  1A3C  2A37               	goto	u8685
  7403  1A3D  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7404  1A3E  0227               	subwf	(___aldiv@dividend+3)^(0+128),w
  7405  1A3F  1D03               	skipz
  7406  1A40  2A4B               	goto	u8695
  7407  1A41  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7408  1A42  0226               	subwf	(___aldiv@dividend+2)^(0+128),w
  7409  1A43  1D03               	skipz
  7410  1A44  2A4B               	goto	u8695
  7411  1A45  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  7412  1A46  0225               	subwf	(___aldiv@dividend+1)^(0+128),w
  7413  1A47  1D03               	skipz
  7414  1A48  2A4B               	goto	u8695
  7415  1A49  0820               	movf	___aldiv@divisor^(0+128),w
  7416  1A4A  0224               	subwf	___aldiv@dividend^(0+128),w
  7417  1A4B                     u8695:	
  7418  1A4B  1C03               	skipc
  7419  1A4C  2A56               	goto	l8269
  7420  1A4D  0820               	movf	___aldiv@divisor^(0+128),w
  7421  1A4E  02A4               	subwf	___aldiv@dividend^(0+128),f
  7422  1A4F  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  7423  1A50  3BA5               	subwfb	(___aldiv@dividend+1)^(0+128),f
  7424  1A51  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7425  1A52  3BA6               	subwfb	(___aldiv@dividend+2)^(0+128),f
  7426  1A53  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7427  1A54  3BA7               	subwfb	(___aldiv@dividend+3)^(0+128),f
  7428  1A55  142B               	bsf	___aldiv@quotient^(0+128),0
  7429  1A56                     l8269:	
  7430  1A56  3001               	movlw	1
  7431  1A57                     u8705:	
  7432  1A57  36A3               	lsrf	(___aldiv@divisor+3)^(0+128),f
  7433  1A58  0CA2               	rrf	(___aldiv@divisor+2)^(0+128),f
  7434  1A59  0CA1               	rrf	(___aldiv@divisor+1)^(0+128),f
  7435  1A5A  0CA0               	rrf	___aldiv@divisor^(0+128),f
  7436  1A5B  0B89               	decfsz	9,f
  7437  1A5C  2A57               	goto	u8705
  7438  1A5D  3001               	movlw	1
  7439  1A5E  02A9               	subwf	___aldiv@counter^(0+128),f
  7440  1A5F  1D03               	btfss	3,2
  7441  1A60  2A36               	goto	l8261
  7442  1A61                     l8273:	
  7443  1A61  082A               	movf	___aldiv@sign^(0+128),w
  7444  1A62  1903               	btfsc	3,2
  7445  1A63  2A6F               	goto	l8277
  7446  1A64  09AB               	comf	___aldiv@quotient^(0+128),f
  7447  1A65  09AC               	comf	(___aldiv@quotient+1)^(0+128),f
  7448  1A66  09AD               	comf	(___aldiv@quotient+2)^(0+128),f
  7449  1A67  09AE               	comf	(___aldiv@quotient+3)^(0+128),f
  7450  1A68  0AAB               	incf	___aldiv@quotient^(0+128),f
  7451  1A69  1903               	skipnz
  7452  1A6A  0AAC               	incf	(___aldiv@quotient+1)^(0+128),f
  7453  1A6B  1903               	skipnz
  7454  1A6C  0AAD               	incf	(___aldiv@quotient+2)^(0+128),f
  7455  1A6D  1903               	skipnz
  7456  1A6E  0AAE               	incf	(___aldiv@quotient+3)^(0+128),f
  7457  1A6F                     l8277:	
  7458  1A6F  082E               	movf	(___aldiv@quotient+3)^(0+128),w
  7459  1A70  00A3               	movwf	(?___aldiv+3)^(0+128)
  7460  1A71  082D               	movf	(___aldiv@quotient+2)^(0+128),w
  7461  1A72  00A2               	movwf	(?___aldiv+2)^(0+128)
  7462  1A73  082C               	movf	(___aldiv@quotient+1)^(0+128),w
  7463  1A74  00A1               	movwf	(?___aldiv+1)^(0+128)
  7464  1A75  082B               	movf	___aldiv@quotient^(0+128),w
  7465  1A76  00A0               	movwf	?___aldiv^(0+128)
  7466  1A77  0008               	return
  7467  1A78                     __end_of___aldiv:	
  7468                           
  7469                           	psect	text6
  7470  1170                     __ptext6:	
  7471 ;; *************** function _updateSwitchBypass *****************
  7472 ;; Defined at:
  7473 ;;		line 34 in file "SwitchBypass.c"
  7474 ;; Parameters:    Size  Location     Type
  7475 ;;		None
  7476 ;; Auto vars:     Size  Location     Type
  7477 ;;		None
  7478 ;; Return value:  Size  Location     Type
  7479 ;;                  1    wreg      void 
  7480 ;; Registers used:
  7481 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7482 ;; Tracked objects:
  7483 ;;		On entry : 0/0
  7484 ;;		On exit  : 0/0
  7485 ;;		Unchanged: 0/0
  7486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7487 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7488 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7489 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7490 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7491 ;;Total ram usage:        2 bytes
  7492 ;; Hardware stack levels used:    1
  7493 ;; Hardware stack levels required when called:    8
  7494 ;; This function calls:
  7495 ;;		_setDoublePressState
  7496 ;;		_setFeedbackState
  7497 ;;		_setSwitchBypassState
  7498 ;; This function is called by:
  7499 ;;		_main
  7500 ;; This function uses a non-reentrant model
  7501 ;;
  7502                           
  7503                           
  7504                           ;psect for function _updateSwitchBypass
  7505  1170                     _updateSwitchBypass:	
  7506                           
  7507                           ;SwitchBypass.c: 41: if (PORTEbits.RE1 == 0) {
  7508                           
  7509                           ;incstack = 0
  7510                           ; Regs used in _updateSwitchBypass: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7511  1170  0020               	movlb	0	; select bank0
  7512  1171  1890               	btfsc	16,1	;volatile
  7513  1172  2986               	goto	l8443
  7514                           
  7515                           ;SwitchBypass.c: 42: if (switchBypass_pressed > 0) {
  7516  1173  0023               	movlb	3	; select bank3
  7517  1174  083B               	movf	(_switchBypass_pressed+1)^(0+384),w
  7518  1175  3A80               	xorlw	128
  7519  1176  0021               	movlb	1	; select bank1
  7520  1177  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7521  1178  3080               	movlw	128
  7522  1179  023C               	subwf	??_updateSwitchBypass^(0+128),w
  7523  117A  1D03               	skipz
  7524  117B  297F               	goto	u8985
  7525  117C  3001               	movlw	1
  7526  117D  0023               	movlb	3	; select bank3
  7527  117E  023A               	subwf	_switchBypass_pressed^(0+384),w
  7528  117F                     u8985:	
  7529  117F  1C03               	skipc
  7530  1180  2999               	goto	l8447
  7531                           
  7532                           ;SwitchBypass.c: 43: switchBypass_pressed--;
  7533  1181  30FF               	movlw	255
  7534  1182  0023               	movlb	3	; select bank3
  7535  1183  07BA               	addwf	_switchBypass_pressed^(0+384),f
  7536  1184  30FF               	movlw	255
  7537  1185  2998               	goto	L1
  7538  1186                     l8443:	
  7539                           ;SwitchBypass.c: 44: }
  7540                           ;SwitchBypass.c: 45: } else if (switchBypass_pressed < 25) {
  7541                           
  7542  1186  0023               	movlb	3	; select bank3
  7543  1187  083B               	movf	(_switchBypass_pressed+1)^(0+384),w
  7544  1188  3A80               	xorlw	128
  7545  1189  0021               	movlb	1	; select bank1
  7546  118A  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7547  118B  3080               	movlw	128
  7548  118C  023C               	subwf	??_updateSwitchBypass^(0+128),w
  7549  118D  1D03               	skipz
  7550  118E  2992               	goto	u8995
  7551  118F  3019               	movlw	25
  7552  1190  0023               	movlb	3	; select bank3
  7553  1191  023A               	subwf	_switchBypass_pressed^(0+384),w
  7554  1192                     u8995:	
  7555  1192  1803               	skipnc
  7556  1193  2999               	goto	l8447
  7557                           
  7558                           ;SwitchBypass.c: 46: switchBypass_pressed++;
  7559  1194  3001               	movlw	1
  7560  1195  0023               	movlb	3	; select bank3
  7561  1196  07BA               	addwf	_switchBypass_pressed^(0+384),f
  7562  1197  3000               	movlw	0
  7563  1198                     L1:	
  7564  1198  3DBB               	addwfc	(_switchBypass_pressed+1)^(0+384),f
  7565  1199                     l8447:	
  7566                           
  7567                           ;SwitchBypass.c: 47: }
  7568                           ;SwitchBypass.c: 53: if (switchBypass_pressed == 0) {
  7569  1199  0023               	movlb	3	; select bank3
  7570  119A  083A               	movf	_switchBypass_pressed^(0+384),w
  7571  119B  043B               	iorwf	(_switchBypass_pressed+1)^(0+384),w
  7572  119C  1D03               	btfss	3,2
  7573  119D  29FA               	goto	l8487
  7574                           
  7575                           ;SwitchBypass.c: 56: if (feedback_start == 0) {
  7576  119E  0022               	movlb	2	; select bank2
  7577  119F  086A               	movf	_feedback_start^(0+256),w
  7578  11A0  1D03               	btfss	3,2
  7579  11A1  29A7               	goto	l8455
  7580                           
  7581                           ;SwitchBypass.c: 57: feedback_start = 1;
  7582  11A2  01EA               	clrf	_feedback_start^(0+256)
  7583  11A3  0AEA               	incf	_feedback_start^(0+256),f
  7584                           
  7585                           ;SwitchBypass.c: 58: feedback_timer = 0;
  7586  11A4  0023               	movlb	3	; select bank3
  7587  11A5  01A8               	clrf	_feedback_timer^(0+384)	;volatile
  7588  11A6  01A9               	clrf	(_feedback_timer+1)^(0+384)	;volatile
  7589  11A7                     l8455:	
  7590                           
  7591                           ;SwitchBypass.c: 59: }
  7592                           ;SwitchBypass.c: 61: if (feedback_timer >= long_press_limit && feedback_state == 0 && do
      +                          ubleTap_state == 0) {
  7593  11A7  0020               	movlb	0	; select bank0
  7594  11A8  0850               	movf	_long_press_limit+1,w
  7595  11A9  0023               	movlb	3	; select bank3
  7596  11AA  0229               	subwf	(_feedback_timer+1)^(0+384),w	;volatile
  7597  11AB  1D03               	skipz
  7598  11AC  29B1               	goto	u9025
  7599  11AD  0020               	movlb	0	; select bank0
  7600  11AE  084F               	movf	_long_press_limit,w
  7601  11AF  0023               	movlb	3	; select bank3
  7602  11B0  0228               	subwf	_feedback_timer^(0+384),w	;volatile
  7603  11B1                     u9025:	
  7604  11B1  1C03               	skipc
  7605  11B2  29D0               	goto	l8469
  7606  11B3  0020               	movlb	0	; select bank0
  7607  11B4  0854               	movf	_feedback_state,w	;volatile
  7608  11B5  1D03               	btfss	3,2
  7609  11B6  29D0               	goto	l8469
  7610  11B7  0866               	movf	_doubleTap_state,w	;volatile
  7611  11B8  1D03               	btfss	3,2
  7612  11B9  29D0               	goto	l8469
  7613                           
  7614                           ;SwitchBypass.c: 64: LATBbits.LATB2 = 0;
  7615  11BA  0022               	movlb	2	; select bank2
  7616  11BB  110D               	bcf	13,2	;volatile
  7617                           
  7618                           ;SwitchBypass.c: 65: if (longTap_start != 1) {
  7619  11BC  036B               	decf	_longTap_start^(0+256),w
  7620  11BD  1903               	btfsc	3,2
  7621  11BE  29C8               	goto	l8467
  7622                           
  7623                           ;SwitchBypass.c: 66: setFeedbackState(1);
  7624  11BF  3001               	movlw	1
  7625  11C0  0021               	movlb	1	; select bank1
  7626  11C1  00A0               	movwf	setFeedbackState@f_state^(0+128)
  7627  11C2  3000               	movlw	0
  7628  11C3  00A1               	movwf	(setFeedbackState@f_state^(0+128)+1)
  7629  11C4  31A0  2047  3191   	fcall	_setFeedbackState
  7630                           
  7631                           ;SwitchBypass.c: 67: } else {
  7632  11C7  29D0               	goto	l8469
  7633  11C8                     l8467:	
  7634                           
  7635                           ;SwitchBypass.c: 68: setDoublePressState(1);
  7636  11C8  3001               	movlw	1
  7637  11C9  0021               	movlb	1	; select bank1
  7638  11CA  00B8               	movwf	setDoublePressState@f_state^(0+128)
  7639  11CB  3000               	movlw	0
  7640  11CC  00B9               	movwf	(setDoublePressState@f_state^(0+128)+1)
  7641  11CD  31A3  2372  3191   	fcall	_setDoublePressState
  7642  11D0                     l8469:	
  7643                           
  7644                           ;SwitchBypass.c: 69: }
  7645                           ;SwitchBypass.c: 70: }
  7646                           ;SwitchBypass.c: 72: if (doubleTap_state == 0 && feedback_state == 0) {
  7647  11D0  0020               	movlb	0	; select bank0
  7648  11D1  0866               	movf	_doubleTap_state,w	;volatile
  7649  11D2  1D03               	btfss	3,2
  7650  11D3  29F6               	goto	l1261
  7651  11D4  0854               	movf	_feedback_state,w	;volatile
  7652  11D5  1D03               	btfss	3,2
  7653  11D6  29F6               	goto	l1261
  7654                           
  7655                           ;SwitchBypass.c: 73: if (switchBypass_state == 1) {
  7656  11D7  0358               	decf	_switchBypass_state,w
  7657  11D8  1D03               	btfss	3,2
  7658  11D9  29E8               	goto	l8481
  7659                           
  7660                           ;SwitchBypass.c: 75: if (switchBypass_up == 1) {
  7661  11DA  0024               	movlb	4	; select bank4
  7662  11DB  0362               	decf	_switchBypass_up^(0+512),w
  7663  11DC  0463               	iorwf	(_switchBypass_up+1)^(0+512),w
  7664  11DD  1D03               	btfss	3,2
  7665  11DE  29F6               	goto	l1261
  7666                           
  7667                           ;SwitchBypass.c: 76: currentBypassState = 1;
  7668  11DF  0023               	movlb	3	; select bank3
  7669  11E0  01DA               	clrf	_currentBypassState^(0+384)
  7670  11E1  0ADA               	incf	_currentBypassState^(0+384),f
  7671                           
  7672                           ;SwitchBypass.c: 77: switchBypass_toggle = 1;
  7673  11E2  3001               	movlw	1
  7674  11E3  0024               	movlb	4	; select bank4
  7675  11E4  00D5               	movwf	_switchBypass_toggle^(0+512)
  7676  11E5  3000               	movlw	0
  7677  11E6  00D6               	movwf	(_switchBypass_toggle^(0+512)+1)
  7678                           
  7679                           ;SwitchBypass.c: 78: }
  7680                           ;SwitchBypass.c: 93: } else {
  7681  11E7  29F6               	goto	l1261
  7682  11E8                     l8481:	
  7683                           
  7684                           ;SwitchBypass.c: 94: if (bypass_turning_on != 1) {
  7685  11E8  0023               	movlb	3	; select bank3
  7686  11E9  033E               	decf	_bypass_turning_on^(0+384),w
  7687  11EA  1903               	btfsc	3,2
  7688  11EB  29F6               	goto	l1261
  7689                           
  7690                           ;SwitchBypass.c: 96: currentBypassState = 0;
  7691  11EC  01DA               	clrf	_currentBypassState^(0+384)
  7692                           
  7693                           ;SwitchBypass.c: 98: bypass_turning_on = 1;
  7694  11ED  01BE               	clrf	_bypass_turning_on^(0+384)
  7695  11EE  0ABE               	incf	_bypass_turning_on^(0+384),f
  7696                           
  7697                           ;SwitchBypass.c: 99: switchBypass_toggle = 0;
  7698  11EF  0024               	movlb	4	; select bank4
  7699  11F0  01D5               	clrf	_switchBypass_toggle^(0+512)
  7700  11F1  01D6               	clrf	(_switchBypass_toggle+1)^(0+512)
  7701                           
  7702                           ;SwitchBypass.c: 101: feedback_state = 0;
  7703  11F2  0020               	movlb	0	; select bank0
  7704  11F3  01D4               	clrf	_feedback_state	;volatile
  7705                           
  7706                           ;SwitchBypass.c: 102: feedback_start = 0;
  7707  11F4  0022               	movlb	2	; select bank2
  7708  11F5  01EA               	clrf	_feedback_start^(0+256)
  7709  11F6                     l1261:	
  7710                           
  7711                           ;SwitchBypass.c: 103: }
  7712                           ;SwitchBypass.c: 104: }
  7713                           ;SwitchBypass.c: 106: }
  7714                           ;SwitchBypass.c: 107: switchBypass_up = 0;
  7715  11F6  0024               	movlb	4	; select bank4
  7716  11F7  01E2               	clrf	_switchBypass_up^(0+512)
  7717  11F8  01E3               	clrf	(_switchBypass_up+1)^(0+512)
  7718                           
  7719                           ;SwitchBypass.c: 108: } else if (switchBypass_pressed >= 25) {
  7720  11F9  0008               	return
  7721  11FA                     l8487:	
  7722  11FA  0023               	movlb	3	; select bank3
  7723  11FB  083B               	movf	(_switchBypass_pressed+1)^(0+384),w
  7724  11FC  3A80               	xorlw	128
  7725  11FD  0021               	movlb	1	; select bank1
  7726  11FE  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7727  11FF  3080               	movlw	128
  7728  1200  023C               	subwf	??_updateSwitchBypass^(0+128),w
  7729  1201  1D03               	skipz
  7730  1202  2A06               	goto	u9115
  7731  1203  3019               	movlw	25
  7732  1204  0023               	movlb	3	; select bank3
  7733  1205  023A               	subwf	_switchBypass_pressed^(0+384),w
  7734  1206                     u9115:	
  7735  1206  1C03               	skipc
  7736  1207  0008               	return
  7737                           
  7738                           ;SwitchBypass.c: 109: if (doubleTap_state == 1) {
  7739  1208  0020               	movlb	0	; select bank0
  7740  1209  0366               	decf	_doubleTap_state,w	;volatile
  7741  120A  1D03               	btfss	3,2
  7742  120B  2A15               	goto	l8493
  7743                           
  7744                           ;SwitchBypass.c: 110: setSwitchBypassState(currentBypassState);
  7745  120C  0023               	movlb	3	; select bank3
  7746  120D  085A               	movf	_currentBypassState^(0+384),w
  7747  120E  0021               	movlb	1	; select bank1
  7748  120F  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7749  1210  01BD               	clrf	(??_updateSwitchBypass^(0+128)+1)
  7750  1211  083C               	movf	??_updateSwitchBypass^(0+128),w
  7751  1212  00B2               	movwf	setSwitchBypassState@f_state^(0+128)
  7752  1213  083D               	movf	(??_updateSwitchBypass+1)^(0+128),w
  7753  1214  2A32               	goto	L2
  7754  1215                     l8493:	
  7755                           ;SwitchBypass.c: 111: } else if (bypass_turning_on == 1 || feedback_state == 1) {
  7756                           
  7757  1215  0023               	movlb	3	; select bank3
  7758  1216  033E               	decf	_bypass_turning_on^(0+384),w
  7759  1217  1903               	btfsc	3,2
  7760  1218  2A1D               	goto	l8497
  7761  1219  0020               	movlb	0	; select bank0
  7762  121A  0354               	decf	_feedback_state,w	;volatile
  7763  121B  1D03               	btfss	3,2
  7764  121C  2A23               	goto	l8499
  7765  121D                     l8497:	
  7766                           
  7767                           ;SwitchBypass.c: 112: setSwitchBypassState(1);
  7768  121D  3001               	movlw	1
  7769  121E  0021               	movlb	1	; select bank1
  7770  121F  00B2               	movwf	setSwitchBypassState@f_state^(0+128)
  7771  1220  3000               	movlw	0
  7772  1221  00B3               	movwf	(setSwitchBypassState@f_state^(0+128)+1)
  7773  1222  2A33               	goto	L3
  7774  1223                     l8499:	
  7775                           ;SwitchBypass.c: 113: } else if (switchBypass_toggle == 1 && feedback_state == 0 && doub
      +                          leTap_state == 0) {
  7776                           
  7777  1223  0024               	movlb	4	; select bank4
  7778  1224  0355               	decf	_switchBypass_toggle^(0+512),w
  7779  1225  0456               	iorwf	(_switchBypass_toggle+1)^(0+512),w
  7780  1226  1D03               	btfss	3,2
  7781  1227  2A36               	goto	l8507
  7782  1228  0020               	movlb	0	; select bank0
  7783  1229  0854               	movf	_feedback_state,w	;volatile
  7784  122A  1D03               	btfss	3,2
  7785  122B  2A36               	goto	l8507
  7786  122C  0866               	movf	_doubleTap_state,w	;volatile
  7787  122D  1D03               	btfss	3,2
  7788  122E  2A36               	goto	l8507
  7789                           
  7790                           ;SwitchBypass.c: 114: setSwitchBypassState(0);
  7791  122F  3000               	movlw	0
  7792  1230  0021               	movlb	1	; select bank1
  7793  1231  00B2               	movwf	setSwitchBypassState@f_state^(0+128)
  7794  1232                     L2:	
  7795  1232  00B3               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
  7796  1233                     L3:	
  7797  1233  31A5  2585  3191   	fcall	_setSwitchBypassState
  7798  1236                     l8507:	
  7799                           
  7800                           ;SwitchBypass.c: 115: }
  7801                           ;SwitchBypass.c: 118: LATBbits.LATB2 = switchBypass_state;
  7802  1236  0020               	movlb	0	; select bank0
  7803  1237  0C58               	rrf	_switchBypass_state,w
  7804  1238  0022               	movlb	2	; select bank2
  7805  1239  1C03               	skipc
  7806  123A  110D               	bcf	13,2	;volatile
  7807  123B  1803               	skipnc
  7808  123C  150D               	bsf	13,2	;volatile
  7809                           
  7810                           ;SwitchBypass.c: 120: setFeedbackState(0);
  7811  123D  3000               	movlw	0
  7812  123E  0021               	movlb	1	; select bank1
  7813  123F  00A0               	movwf	setFeedbackState@f_state^(0+128)
  7814  1240  00A1               	movwf	(setFeedbackState@f_state+1)^(0+128)
  7815  1241  31A0  2047  3191   	fcall	_setFeedbackState
  7816                           
  7817                           ;SwitchBypass.c: 121: setDoublePressState(0);
  7818  1244  3000               	movlw	0
  7819  1245  0021               	movlb	1	; select bank1
  7820  1246  00B8               	movwf	setDoublePressState@f_state^(0+128)
  7821  1247  00B9               	movwf	(setDoublePressState@f_state+1)^(0+128)
  7822  1248  31A3  2372         	fcall	_setDoublePressState
  7823                           
  7824                           ;SwitchBypass.c: 122: feedback_start = 0;
  7825  124A  0022               	movlb	2	; select bank2
  7826  124B  01EA               	clrf	_feedback_start^(0+256)
  7827                           
  7828                           ;SwitchBypass.c: 123: bypass_turning_on = 0;
  7829  124C  0023               	movlb	3	; select bank3
  7830  124D  01BE               	clrf	_bypass_turning_on^(0+384)
  7831                           
  7832                           ;SwitchBypass.c: 124: switchBypass_toggle = 0;
  7833  124E  0024               	movlb	4	; select bank4
  7834  124F  01D5               	clrf	_switchBypass_toggle^(0+512)
  7835  1250  01D6               	clrf	(_switchBypass_toggle+1)^(0+512)
  7836                           
  7837                           ;SwitchBypass.c: 125: switchBypass_up = 1;
  7838  1251  3001               	movlw	1
  7839  1252  00E2               	movwf	_switchBypass_up^(0+512)
  7840  1253  3000               	movlw	0
  7841  1254  00E3               	movwf	(_switchBypass_up^(0+512)+1)
  7842                           
  7843                           ;SwitchBypass.c: 127: switchBypass_pressed = 25;
  7844  1255  3019               	movlw	25
  7845  1256  0023               	movlb	3	; select bank3
  7846  1257  00BA               	movwf	_switchBypass_pressed^(0+384)
  7847  1258  3000               	movlw	0
  7848  1259  00BB               	movwf	(_switchBypass_pressed^(0+384)+1)
  7849  125A  0008               	return
  7850  125B                     __end_of_updateSwitchBypass:	
  7851                           
  7852                           	psect	text7
  7853  2047                     __ptext7:	
  7854 ;; *************** function _setFeedbackState *****************
  7855 ;; Defined at:
  7856 ;;		line 151 in file "SwitchBypass.c"
  7857 ;; Parameters:    Size  Location     Type
  7858 ;;  f_state         2    0[BANK1 ] int 
  7859 ;; Auto vars:     Size  Location     Type
  7860 ;;		None
  7861 ;; Return value:  Size  Location     Type
  7862 ;;                  1    wreg      void 
  7863 ;; Registers used:
  7864 ;;		wreg, status,0
  7865 ;; Tracked objects:
  7866 ;;		On entry : 0/0
  7867 ;;		On exit  : 0/0
  7868 ;;		Unchanged: 0/0
  7869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7870 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7872 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7873 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7874 ;;Total ram usage:        4 bytes
  7875 ;; Hardware stack levels used:    1
  7876 ;; Hardware stack levels required when called:    3
  7877 ;; This function calls:
  7878 ;;		Nothing
  7879 ;; This function is called by:
  7880 ;;		_updateSwitchBypass
  7881 ;; This function uses a non-reentrant model
  7882 ;;
  7883                           
  7884                           
  7885                           ;psect for function _setFeedbackState
  7886  2047                     _setFeedbackState:	
  7887                           
  7888                           ;SwitchBypass.c: 152: if (feedback_state == f_state) {return;}
  7889                           
  7890                           ;incstack = 0
  7891                           ; Regs used in _setFeedbackState: [wreg+status,0]
  7892  2047  0020               	movlb	0	; select bank0
  7893  2048  0854               	movf	_feedback_state,w	;volatile
  7894  2049  0021               	movlb	1	; select bank1
  7895  204A  00A2               	movwf	??_setFeedbackState^(0+128)
  7896  204B  01A3               	clrf	(??_setFeedbackState^(0+128)+1)
  7897  204C  0821               	movf	(setFeedbackState@f_state+1)^(0+128),w
  7898  204D  0623               	xorwf	(??_setFeedbackState+1)^(0+128),w
  7899  204E  1D03               	skipz
  7900  204F  2852               	goto	u8475
  7901  2050  0820               	movf	setFeedbackState@f_state^(0+128),w
  7902  2051  0622               	xorwf	??_setFeedbackState^(0+128),w
  7903  2052                     u8475:	
  7904  2052  1903               	btfsc	3,2
  7905  2053  0008               	return
  7906                           
  7907                           ;SwitchBypass.c: 153: feedback_state = f_state;
  7908  2054  0820               	movf	setFeedbackState@f_state^(0+128),w
  7909  2055  00A2               	movwf	??_setFeedbackState^(0+128)
  7910  2056  0822               	movf	??_setFeedbackState^(0+128),w
  7911  2057  0020               	movlb	0	; select bank0
  7912  2058  00D4               	movwf	_feedback_state	;volatile
  7913                           
  7914                           ;SwitchBypass.c: 154: LATBbits.LATB3 = f_state;
  7915  2059  0021               	movlb	1	; select bank1
  7916  205A  0C20               	rrf	setFeedbackState@f_state^(0+128),w
  7917  205B  0022               	movlb	2	; select bank2
  7918  205C  1C03               	skipc
  7919  205D  118D               	bcf	13,3	;volatile
  7920  205E  1803               	skipnc
  7921  205F  158D               	bsf	13,3	;volatile
  7922  2060  0008               	return
  7923  2061                     __end_of_setFeedbackState:	
  7924                           
  7925                           	psect	text8
  7926  2372                     __ptext8:	
  7927 ;; *************** function _setDoublePressState *****************
  7928 ;; Defined at:
  7929 ;;		line 21 in file "preset_programming.c"
  7930 ;; Parameters:    Size  Location     Type
  7931 ;;  f_state         2   24[BANK1 ] int 
  7932 ;; Auto vars:     Size  Location     Type
  7933 ;;		None
  7934 ;; Return value:  Size  Location     Type
  7935 ;;                  1    wreg      void 
  7936 ;; Registers used:
  7937 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7938 ;; Tracked objects:
  7939 ;;		On entry : 0/0
  7940 ;;		On exit  : 0/0
  7941 ;;		Unchanged: 0/0
  7942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7943 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7945 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7946 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7947 ;;Total ram usage:        4 bytes
  7948 ;; Hardware stack levels used:    1
  7949 ;; Hardware stack levels required when called:    7
  7950 ;; This function calls:
  7951 ;;		_resetRingLEDs
  7952 ;;		_setPedalMode
  7953 ;;		_setPresetDisplay
  7954 ;;		_showSave
  7955 ;;		_wait_ms
  7956 ;; This function is called by:
  7957 ;;		_updateSwitchBypass
  7958 ;;		_updateSwitchTap
  7959 ;; This function uses a non-reentrant model
  7960 ;;
  7961                           
  7962                           
  7963                           ;psect for function _setDoublePressState
  7964  2372                     _setDoublePressState:	
  7965                           
  7966                           ;preset_programming.c: 22: if (doubleTap_state == f_state) {return;}
  7967                           
  7968                           ;incstack = 0
  7969                           ; Regs used in _setDoublePressState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7970  2372  0020               	movlb	0	; select bank0
  7971  2373  0866               	movf	_doubleTap_state,w	;volatile
  7972  2374  0021               	movlb	1	; select bank1
  7973  2375  00BA               	movwf	??_setDoublePressState^(0+128)
  7974  2376  01BB               	clrf	(??_setDoublePressState^(0+128)+1)
  7975  2377  0839               	movf	(setDoublePressState@f_state+1)^(0+128),w
  7976  2378  063B               	xorwf	(??_setDoublePressState+1)^(0+128),w
  7977  2379  1D03               	skipz
  7978  237A  2B7D               	goto	u8485
  7979  237B  0838               	movf	setDoublePressState@f_state^(0+128),w
  7980  237C  063A               	xorwf	??_setDoublePressState^(0+128),w
  7981  237D                     u8485:	
  7982  237D  1903               	btfsc	3,2
  7983  237E  0008               	return
  7984                           
  7985                           ;preset_programming.c: 23: doubleTap_state = f_state;
  7986  237F  0838               	movf	setDoublePressState@f_state^(0+128),w
  7987  2380  00BA               	movwf	??_setDoublePressState^(0+128)
  7988  2381  083A               	movf	??_setDoublePressState^(0+128),w
  7989  2382  0020               	movlb	0	; select bank0
  7990  2383  00E6               	movwf	_doubleTap_state	;volatile
  7991                           
  7992                           ;preset_programming.c: 24: if (f_state == 1) {
  7993  2384  0021               	movlb	1	; select bank1
  7994  2385  0338               	decf	setDoublePressState@f_state^(0+128),w
  7995  2386  0439               	iorwf	(setDoublePressState@f_state+1)^(0+128),w
  7996  2387  1D03               	btfss	3,2
  7997  2388  2B8C               	goto	l8151
  7998                           
  7999                           ;preset_programming.c: 25: LATBbits.LATB4 = 0;
  8000  2389  0022               	movlb	2	; select bank2
  8001  238A  120D               	bcf	13,4	;volatile
  8002                           
  8003                           ;preset_programming.c: 27: LATBbits.LATB5 = 0;
  8004  238B  128D               	bcf	13,5	;volatile
  8005  238C                     l8151:	
  8006                           
  8007                           ;preset_programming.c: 30: }
  8008                           ;preset_programming.c: 32: if (doubleTap_state == 1) {
  8009  238C  0020               	movlb	0	; select bank0
  8010  238D  0366               	decf	_doubleTap_state,w	;volatile
  8011  238E  1D03               	btfss	3,2
  8012  238F  2BA8               	goto	l8167
  8013                           
  8014                           ;preset_programming.c: 33: if (presetSaveMode == 0) {
  8015  2390  0868               	movf	_presetSaveMode,w
  8016  2391  1D03               	btfss	3,2
  8017  2392  2B9D               	goto	l8159
  8018                           
  8019                           ;preset_programming.c: 34: presetSaveMode = 1;
  8020  2393  01E8               	clrf	_presetSaveMode
  8021  2394  0AE8               	incf	_presetSaveMode,f
  8022                           
  8023                           ;preset_programming.c: 35: LATBbits.LATB1 = 0;
  8024  2395  0022               	movlb	2	; select bank2
  8025  2396  108D               	bcf	13,1	;volatile
  8026                           
  8027                           ;preset_programming.c: 36: setPresetDisplay(presetChannel);
  8028  2397  0020               	movlb	0	; select bank0
  8029  2398  0857               	movf	_presetChannel,w
  8030  2399  31A2  2284  31A3   	fcall	_setPresetDisplay
  8031                           
  8032                           ;preset_programming.c: 37: } else {
  8033  239C  2BA8               	goto	l8167
  8034  239D                     l8159:	
  8035                           
  8036                           ;preset_programming.c: 39: presetSaveMode = 0;
  8037  239D  0020               	movlb	0	; select bank0
  8038  239E  01E8               	clrf	_presetSaveMode
  8039                           
  8040                           ;preset_programming.c: 40: setPedalMode();
  8041  239F  31A1  210F  31A3   	fcall	_setPedalMode
  8042                           
  8043                           ;preset_programming.c: 41: resetRingLEDs();
  8044  23A2  31A0  202D  31A3   	fcall	_resetRingLEDs
  8045                           
  8046                           ;preset_programming.c: 42: showSave();
  8047  23A5  31AF  27EC  31A3   	fcall	_showSave
  8048  23A8                     l8167:	
  8049                           
  8050                           ;preset_programming.c: 44: }
  8051                           ;preset_programming.c: 45: }
  8052                           ;preset_programming.c: 47: wait_ms(20);
  8053  23A8  3014               	movlw	20
  8054  23A9  0021               	movlb	1	; select bank1
  8055  23AA  00AC               	movwf	wait_ms@timeSec^(0+128)
  8056  23AB  3000               	movlw	0
  8057  23AC  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8058  23AD  31A2  221A         	fcall	_wait_ms
  8059  23AF  0008               	return
  8060  23B0                     __end_of_setDoublePressState:	
  8061                           
  8062                           	psect	text9
  8063  2FEC                     __ptext9:	
  8064 ;; *************** function _showSave *****************
  8065 ;; Defined at:
  8066 ;;		line 112 in file "LEDs.c"
  8067 ;; Parameters:    Size  Location     Type
  8068 ;;		None
  8069 ;; Auto vars:     Size  Location     Type
  8070 ;;		None
  8071 ;; Return value:  Size  Location     Type
  8072 ;;                  1    wreg      void 
  8073 ;; Registers used:
  8074 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8075 ;; Tracked objects:
  8076 ;;		On entry : 0/0
  8077 ;;		On exit  : 0/0
  8078 ;;		Unchanged: 0/0
  8079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8082 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8083 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8084 ;;Total ram usage:        1 bytes
  8085 ;; Hardware stack levels used:    1
  8086 ;; Hardware stack levels required when called:    6
  8087 ;; This function calls:
  8088 ;;		_ring_tactiles
  8089 ;;		_solidring_tactiles
  8090 ;; This function is called by:
  8091 ;;		_setDoublePressState
  8092 ;; This function uses a non-reentrant model
  8093 ;;
  8094                           
  8095                           
  8096                           ;psect for function _showSave
  8097  2FEC                     _showSave:	
  8098                           
  8099                           ;LEDs.c: 113: suspend_blink = 1;
  8100                           
  8101                           ;incstack = 0
  8102                           ; Regs used in _showSave: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8103  2FEC  3001               	movlw	1
  8104  2FED  0021               	movlb	1	; select bank1
  8105  2FEE  00B7               	movwf	??_showSave^(0+128)
  8106  2FEF  0837               	movf	??_showSave^(0+128),w
  8107  2FF0  0020               	movlb	0	; select bank0
  8108  2FF1  00E9               	movwf	_suspend_blink	;volatile
  8109                           
  8110                           ;LEDs.c: 114: ring_tactiles();
  8111  2FF2  31A6  26B2  31AF   	fcall	_ring_tactiles
  8112                           
  8113                           ;LEDs.c: 115: ring_tactiles();
  8114  2FF5  31A6  26B2  31AF   	fcall	_ring_tactiles
  8115                           
  8116                           ;LEDs.c: 116: solidring_tactiles();
  8117  2FF8  31A3  23F0  31AF   	fcall	_solidring_tactiles
  8118                           
  8119                           ;LEDs.c: 117: solidring_tactiles();
  8120  2FFB  31A3  23F0         	fcall	_solidring_tactiles
  8121                           
  8122                           ;LEDs.c: 118: suspend_blink = 0;
  8123  2FFD  0020               	movlb	0	; select bank0
  8124  2FFE  01E9               	clrf	_suspend_blink	;volatile
  8125  2FFF  0008               	return
  8126  3000                     __end_of_showSave:	
  8127                           
  8128                           	psect	text10
  8129  23F0                     __ptext10:	
  8130 ;; *************** function _solidring_tactiles *****************
  8131 ;; Defined at:
  8132 ;;		line 208 in file "LEDs.c"
  8133 ;; Parameters:    Size  Location     Type
  8134 ;;		None
  8135 ;; Auto vars:     Size  Location     Type
  8136 ;;  ring_delay      1   20[BANK1 ] unsigned char 
  8137 ;; Return value:  Size  Location     Type
  8138 ;;                  1    wreg      void 
  8139 ;; Registers used:
  8140 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8141 ;; Tracked objects:
  8142 ;;		On entry : 0/0
  8143 ;;		On exit  : 0/0
  8144 ;;		Unchanged: 0/0
  8145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8147 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8148 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8149 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8150 ;;Total ram usage:        3 bytes
  8151 ;; Hardware stack levels used:    1
  8152 ;; Hardware stack levels required when called:    5
  8153 ;; This function calls:
  8154 ;;		_set_leds_bottom
  8155 ;;		_set_leds_top
  8156 ;;		_wait_ms
  8157 ;; This function is called by:
  8158 ;;		_showSave
  8159 ;;		_showBootSequence
  8160 ;; This function uses a non-reentrant model
  8161 ;;
  8162                           
  8163                           
  8164                           ;psect for function _solidring_tactiles
  8165  23F0                     _solidring_tactiles:	
  8166                           
  8167                           ;LEDs.c: 209: uint8_t ring_delay = 30;
  8168                           
  8169                           ;incstack = 0
  8170                           ; Regs used in _solidring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8171  23F0  301E               	movlw	30
  8172  23F1  0021               	movlb	1	; select bank1
  8173  23F2  00B2               	movwf	??_solidring_tactiles^(0+128)
  8174  23F3  0832               	movf	??_solidring_tactiles^(0+128),w
  8175  23F4  00B4               	movwf	solidring_tactiles@ring_delay^(0+128)
  8176                           
  8177                           ;LEDs.c: 210: set_leds_top(100, 1);
  8178  23F5  3064               	movlw	100
  8179  23F6  00A0               	movwf	set_leds_top@x^(0+128)
  8180  23F7  3000               	movlw	0
  8181  23F8  00A1               	movwf	(set_leds_top@x^(0+128)+1)
  8182  23F9  3001               	movlw	1
  8183  23FA  00A2               	movwf	set_leds_top@ledState^(0+128)
  8184  23FB  3000               	movlw	0
  8185  23FC  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8186  23FD  31A7  2753  31A3   	fcall	_set_leds_top
  8187                           
  8188                           ;LEDs.c: 211: set_leds_bottom(100);
  8189  2400  3064               	movlw	100
  8190  2401  0021               	movlb	1	; select bank1
  8191  2402  00A0               	movwf	set_leds_bottom@x^(0+128)
  8192  2403  3000               	movlw	0
  8193  2404  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8194  2405  31A2  22BE  31A3   	fcall	_set_leds_bottom
  8195                           
  8196                           ;LEDs.c: 212: wait_ms(ring_delay);
  8197  2408  0021               	movlb	1	; select bank1
  8198  2409  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8199  240A  00B2               	movwf	??_solidring_tactiles^(0+128)
  8200  240B  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8201  240C  0832               	movf	??_solidring_tactiles^(0+128),w
  8202  240D  00AC               	movwf	wait_ms@timeSec^(0+128)
  8203  240E  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8204  240F  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8205  2410  31A2  221A  31A3   	fcall	_wait_ms
  8206                           
  8207                           ;LEDs.c: 214: set_leds_top(0, 1);
  8208  2413  3000               	movlw	0
  8209  2414  0021               	movlb	1	; select bank1
  8210  2415  00A0               	movwf	set_leds_top@x^(0+128)
  8211  2416  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8212  2417  3001               	movlw	1
  8213  2418  00A2               	movwf	set_leds_top@ledState^(0+128)
  8214  2419  3000               	movlw	0
  8215  241A  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8216  241B  31A7  2753  31A3   	fcall	_set_leds_top
  8217                           
  8218                           ;LEDs.c: 215: set_leds_bottom(0);
  8219  241E  3000               	movlw	0
  8220  241F  0021               	movlb	1	; select bank1
  8221  2420  00A0               	movwf	set_leds_bottom@x^(0+128)
  8222  2421  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8223  2422  31A2  22BE  31A3   	fcall	_set_leds_bottom
  8224                           
  8225                           ;LEDs.c: 216: wait_ms(ring_delay);
  8226  2425  0021               	movlb	1	; select bank1
  8227  2426  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8228  2427  00B2               	movwf	??_solidring_tactiles^(0+128)
  8229  2428  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8230  2429  0832               	movf	??_solidring_tactiles^(0+128),w
  8231  242A  00AC               	movwf	wait_ms@timeSec^(0+128)
  8232  242B  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8233  242C  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8234  242D  31A2  221A         	fcall	_wait_ms
  8235  242F  0008               	return
  8236  2430                     __end_of_solidring_tactiles:	
  8237                           
  8238                           	psect	text11
  8239  26B2                     __ptext11:	
  8240 ;; *************** function _ring_tactiles *****************
  8241 ;; Defined at:
  8242 ;;		line 196 in file "LEDs.c"
  8243 ;; Parameters:    Size  Location     Type
  8244 ;;		None
  8245 ;; Auto vars:     Size  Location     Type
  8246 ;;  iLed            2   21[BANK1 ] int 
  8247 ;;  iLed            2   19[BANK1 ] int 
  8248 ;; Return value:  Size  Location     Type
  8249 ;;                  1    wreg      void 
  8250 ;; Registers used:
  8251 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8252 ;; Tracked objects:
  8253 ;;		On entry : 0/0
  8254 ;;		On exit  : 0/0
  8255 ;;		Unchanged: 0/0
  8256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8258 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8259 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8260 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8261 ;;Total ram usage:        5 bytes
  8262 ;; Hardware stack levels used:    1
  8263 ;; Hardware stack levels required when called:    5
  8264 ;; This function calls:
  8265 ;;		_set_leds_bottom
  8266 ;;		_set_leds_top
  8267 ;;		_wait_ms
  8268 ;; This function is called by:
  8269 ;;		_showSave
  8270 ;; This function uses a non-reentrant model
  8271 ;;
  8272                           
  8273                           
  8274                           ;psect for function _ring_tactiles
  8275  26B2                     _ring_tactiles:	
  8276                           
  8277                           ;LEDs.c: 197: for (int iLed = 1; iLed < 7; iLed++) {
  8278                           
  8279                           ;incstack = 0
  8280                           ; Regs used in _ring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8281  26B2  3001               	movlw	1
  8282  26B3  0021               	movlb	1	; select bank1
  8283  26B4  00B3               	movwf	ring_tactiles@iLed^(0+128)
  8284  26B5  3000               	movlw	0
  8285  26B6  00B4               	movwf	(ring_tactiles@iLed^(0+128)+1)
  8286  26B7  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8287  26B8  3A80               	xorlw	128
  8288  26B9  00B2               	movwf	??_ring_tactiles^(0+128)
  8289  26BA  3080               	movlw	128
  8290  26BB  0232               	subwf	??_ring_tactiles^(0+128),w
  8291  26BC  1D03               	skipz
  8292  26BD  2EC0               	goto	u7985
  8293  26BE  3007               	movlw	7
  8294  26BF  0233               	subwf	ring_tactiles@iLed^(0+128),w
  8295  26C0                     u7985:	
  8296  26C0  1803               	btfsc	3,0
  8297  26C1  2EE6               	goto	l7683
  8298  26C2                     l7675:	
  8299                           
  8300                           ;LEDs.c: 198: set_leds_top(iLed, 1);
  8301  26C2  0021               	movlb	1	; select bank1
  8302  26C3  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8303  26C4  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8304  26C5  0833               	movf	ring_tactiles@iLed^(0+128),w
  8305  26C6  00A0               	movwf	set_leds_top@x^(0+128)
  8306  26C7  3001               	movlw	1
  8307  26C8  00A2               	movwf	set_leds_top@ledState^(0+128)
  8308  26C9  3000               	movlw	0
  8309  26CA  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8310  26CB  31A7  2753  31A6   	fcall	_set_leds_top
  8311                           
  8312                           ;LEDs.c: 199: wait_ms(5);
  8313  26CE  3005               	movlw	5
  8314  26CF  0021               	movlb	1	; select bank1
  8315  26D0  00AC               	movwf	wait_ms@timeSec^(0+128)
  8316  26D1  3000               	movlw	0
  8317  26D2  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8318  26D3  31A2  221A  31A6   	fcall	_wait_ms
  8319  26D6  3001               	movlw	1
  8320  26D7  0021               	movlb	1	; select bank1
  8321  26D8  07B3               	addwf	ring_tactiles@iLed^(0+128),f
  8322  26D9  3000               	movlw	0
  8323  26DA  3DB4               	addwfc	(ring_tactiles@iLed+1)^(0+128),f
  8324  26DB  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8325  26DC  3A80               	xorlw	128
  8326  26DD  00B2               	movwf	??_ring_tactiles^(0+128)
  8327  26DE  3080               	movlw	128
  8328  26DF  0232               	subwf	??_ring_tactiles^(0+128),w
  8329  26E0  1D03               	skipz
  8330  26E1  2EE4               	goto	u7995
  8331  26E2  3007               	movlw	7
  8332  26E3  0233               	subwf	ring_tactiles@iLed^(0+128),w
  8333  26E4                     u7995:	
  8334  26E4  1C03               	skipc
  8335  26E5  2EC2               	goto	l7675
  8336  26E6                     l7683:	
  8337                           
  8338                           ;LEDs.c: 200: }
  8339                           ;LEDs.c: 201: for (int iLed = 5; iLed > -1; iLed--) {
  8340  26E6  3005               	movlw	5
  8341  26E7  0021               	movlb	1	; select bank1
  8342  26E8  00B5               	movwf	ring_tactiles@iLed_1541^(0+128)
  8343  26E9  3000               	movlw	0
  8344  26EA  00B6               	movwf	(ring_tactiles@iLed_1541^(0+128)+1)
  8345  26EB                     L4:	
  8346  26EB  1BB6               	btfsc	(ring_tactiles@iLed_1541+1)^(0+128),7
  8347  26EC  0008               	return
  8348                           
  8349                           ;LEDs.c: 202: set_leds_bottom(iLed);
  8350  26ED  0836               	movf	(ring_tactiles@iLed_1541+1)^(0+128),w
  8351  26EE  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8352  26EF  0835               	movf	ring_tactiles@iLed_1541^(0+128),w
  8353  26F0  00A0               	movwf	set_leds_bottom@x^(0+128)
  8354  26F1  31A2  22BE  31A6   	fcall	_set_leds_bottom
  8355                           
  8356                           ;LEDs.c: 203: wait_ms(5);
  8357  26F4  3005               	movlw	5
  8358  26F5  0021               	movlb	1	; select bank1
  8359  26F6  00AC               	movwf	wait_ms@timeSec^(0+128)
  8360  26F7  3000               	movlw	0
  8361  26F8  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8362  26F9  31A2  221A  31A6   	fcall	_wait_ms
  8363  26FC  30FF               	movlw	255
  8364  26FD  0021               	movlb	1	; select bank1
  8365  26FE  07B5               	addwf	ring_tactiles@iLed_1541^(0+128),f
  8366  26FF  30FF               	movlw	255
  8367  2700  3DB6               	addwfc	(ring_tactiles@iLed_1541+1)^(0+128),f
  8368  2701  2EEB               	goto	L4
  8369  2702                     __end_of_ring_tactiles:	
  8370                           
  8371                           	psect	text12
  8372  210F                     __ptext12:	
  8373 ;; *************** function _setPedalMode *****************
  8374 ;; Defined at:
  8375 ;;		line 119 in file "tactiles.c"
  8376 ;; Parameters:    Size  Location     Type
  8377 ;;		None
  8378 ;; Auto vars:     Size  Location     Type
  8379 ;;		None
  8380 ;; Return value:  Size  Location     Type
  8381 ;;                  1    wreg      void 
  8382 ;; Registers used:
  8383 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8384 ;; Tracked objects:
  8385 ;;		On entry : 0/0
  8386 ;;		On exit  : 0/0
  8387 ;;		Unchanged: 0/0
  8388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8390 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8392 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8393 ;;Total ram usage:        0 bytes
  8394 ;; Hardware stack levels used:    1
  8395 ;; Hardware stack levels required when called:    5
  8396 ;; This function calls:
  8397 ;;		_resetRingLEDs
  8398 ;;		_setExpressionDisplay
  8399 ;;		_setPresetDisplay
  8400 ;; This function is called by:
  8401 ;;		_update_mode
  8402 ;;		_setDoublePressState
  8403 ;; This function uses a non-reentrant model
  8404 ;;
  8405                           
  8406                           
  8407                           ;psect for function _setPedalMode
  8408  210F                     _setPedalMode:	
  8409                           
  8410                           ;tactiles.c: 120: switch (mode2_state) {
  8411                           
  8412                           ;incstack = 0
  8413                           ; Regs used in _setPedalMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8414  210F  2926               	goto	l7883
  8415  2110                     l999:	
  8416                           ;tactiles.c: 121: case 0:
  8417                           
  8418                           
  8419                           ;tactiles.c: 122: LATBbits.LATB1 = 0;
  8420  2110  0022               	movlb	2	; select bank2
  8421  2111  108D               	bcf	13,1	;volatile
  8422                           
  8423                           ;tactiles.c: 123: LATBbits.LATB0 = 0;
  8424  2112  100D               	bcf	13,0	;volatile
  8425                           
  8426                           ;tactiles.c: 124: resetRingLEDs();
  8427  2113  31A0  202D         	fcall	_resetRingLEDs
  8428                           
  8429                           ;tactiles.c: 125: break;
  8430  2115  0008               	return
  8431  2116                     l1001:	
  8432                           ;tactiles.c: 126: case 1:
  8433                           
  8434                           
  8435                           ;tactiles.c: 127: LATBbits.LATB1 = 0;
  8436  2116  0022               	movlb	2	; select bank2
  8437  2117  108D               	bcf	13,1	;volatile
  8438                           
  8439                           ;tactiles.c: 128: LATBbits.LATB0 = 1;
  8440  2118  140D               	bsf	13,0	;volatile
  8441                           
  8442                           ;tactiles.c: 129: setPresetDisplay(presetChannel);
  8443  2119  0020               	movlb	0	; select bank0
  8444  211A  0857               	movf	_presetChannel,w
  8445  211B  31A2  2284         	fcall	_setPresetDisplay
  8446                           
  8447                           ;tactiles.c: 130: break;
  8448  211D  0008               	return
  8449  211E                     l1002:	
  8450                           ;tactiles.c: 131: case 2:
  8451                           
  8452                           
  8453                           ;tactiles.c: 132: LATBbits.LATB1 = 1;
  8454  211E  0022               	movlb	2	; select bank2
  8455  211F  148D               	bsf	13,1	;volatile
  8456                           
  8457                           ;tactiles.c: 133: LATBbits.LATB0 = 0;
  8458  2120  100D               	bcf	13,0	;volatile
  8459                           
  8460                           ;tactiles.c: 134: setExpressionDisplay(expressionChannel);
  8461  2121  0023               	movlb	3	; select bank3
  8462  2122  085E               	movf	_expressionChannel^(0+384),w
  8463  2123  31A0  2015         	fcall	_setExpressionDisplay
  8464                           
  8465                           ;tactiles.c: 136: }
  8466                           
  8467                           ;tactiles.c: 135: break;
  8468  2125  0008               	return
  8469  2126                     l7883:	
  8470  2126  0020               	movlb	0	; select bank0
  8471  2127  0867               	movf	_mode2_state,w
  8472                           
  8473                           ; Switch size 1, requested type "space"
  8474                           ; Number of cases is 3, Range of values is 0 to 2
  8475                           ; switch strategies available:
  8476                           ; Name         Instructions Cycles
  8477                           ; simple_byte           10     6 (average)
  8478                           ; direct_byte           12     6 (fixed)
  8479                           ; jumptable            260     6 (fixed)
  8480                           ;	Chosen strategy is simple_byte
  8481  2128  3A00               	xorlw	0	; case 0
  8482  2129  1903               	skipnz
  8483  212A  2910               	goto	l999
  8484  212B  3A01               	xorlw	1	; case 1
  8485  212C  1903               	skipnz
  8486  212D  2916               	goto	l1001
  8487  212E  3A03               	xorlw	3	; case 2
  8488  212F  1903               	skipnz
  8489  2130  291E               	goto	l1002
  8490  2131  2932               	goto	l1003
  8491  2132                     l1003:	
  8492  2132  0008               	return
  8493  2133                     __end_of_setPedalMode:	
  8494                           
  8495                           	psect	text13
  8496  2284                     __ptext13:	
  8497 ;; *************** function _setPresetDisplay *****************
  8498 ;; Defined at:
  8499 ;;		line 51 in file "preset_programming.c"
  8500 ;; Parameters:    Size  Location     Type
  8501 ;;  ledChannel      1    wreg     unsigned char 
  8502 ;; Auto vars:     Size  Location     Type
  8503 ;;  ledChannel      1    6[BANK1 ] unsigned char 
  8504 ;; Return value:  Size  Location     Type
  8505 ;;                  1    wreg      void 
  8506 ;; Registers used:
  8507 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8508 ;; Tracked objects:
  8509 ;;		On entry : 0/0
  8510 ;;		On exit  : 0/0
  8511 ;;		Unchanged: 0/0
  8512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8514 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8515 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8516 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8517 ;;Total ram usage:        3 bytes
  8518 ;; Hardware stack levels used:    1
  8519 ;; Hardware stack levels required when called:    4
  8520 ;; This function calls:
  8521 ;;		_set_leds_bottom
  8522 ;;		_set_leds_top
  8523 ;; This function is called by:
  8524 ;;		_setPedalMode
  8525 ;;		_update_selectMode
  8526 ;;		_setDoublePressState
  8527 ;; This function uses a non-reentrant model
  8528 ;;
  8529                           
  8530                           
  8531                           ;psect for function _setPresetDisplay
  8532  2284                     _setPresetDisplay:	
  8533                           
  8534                           ;incstack = 0
  8535                           ; Regs used in _setPresetDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8536                           ;setPresetDisplay@ledChannel stored from wreg
  8537  2284  0021               	movlb	1	; select bank1
  8538  2285  00A6               	movwf	setPresetDisplay@ledChannel^(0+128)
  8539                           
  8540                           ;preset_programming.c: 52: if (ledChannel < 6) {
  8541  2286  3006               	movlw	6
  8542  2287  0226               	subwf	setPresetDisplay@ledChannel^(0+128),w
  8543  2288  1803               	skipnc
  8544  2289  2AA0               	goto	l7703
  8545                           
  8546                           ;preset_programming.c: 53: set_leds_top(ledChannel, 1);
  8547  228A  0826               	movf	setPresetDisplay@ledChannel^(0+128),w
  8548  228B  00A4               	movwf	??_setPresetDisplay^(0+128)
  8549  228C  01A5               	clrf	(??_setPresetDisplay^(0+128)+1)
  8550  228D  0824               	movf	??_setPresetDisplay^(0+128),w
  8551  228E  00A0               	movwf	set_leds_top@x^(0+128)
  8552  228F  0825               	movf	(??_setPresetDisplay+1)^(0+128),w
  8553  2290  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8554  2291  3001               	movlw	1
  8555  2292  00A2               	movwf	set_leds_top@ledState^(0+128)
  8556  2293  3000               	movlw	0
  8557  2294  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8558  2295  31A7  2753  31A2   	fcall	_set_leds_top
  8559                           
  8560                           ;preset_programming.c: 54: set_leds_bottom(6);
  8561  2298  3006               	movlw	6
  8562  2299  0021               	movlb	1	; select bank1
  8563  229A  00A0               	movwf	set_leds_bottom@x^(0+128)
  8564  229B  3000               	movlw	0
  8565  229C  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8566  229D  31A2  22BE         	fcall	_set_leds_bottom
  8567                           
  8568                           ;preset_programming.c: 55: } else {
  8569  229F  0008               	return
  8570  22A0                     l7703:	
  8571                           
  8572                           ;preset_programming.c: 56: set_leds_top(6, 1);
  8573  22A0  3006               	movlw	6
  8574  22A1  0021               	movlb	1	; select bank1
  8575  22A2  00A0               	movwf	set_leds_top@x^(0+128)
  8576  22A3  3000               	movlw	0
  8577  22A4  00A1               	movwf	(set_leds_top@x^(0+128)+1)
  8578  22A5  3001               	movlw	1
  8579  22A6  00A2               	movwf	set_leds_top@ledState^(0+128)
  8580  22A7  3000               	movlw	0
  8581  22A8  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8582  22A9  31A7  2753  31A2   	fcall	_set_leds_top
  8583                           
  8584                           ;preset_programming.c: 57: set_leds_bottom(10 - ledChannel + 1);
  8585  22AC  0021               	movlb	1	; select bank1
  8586  22AD  0826               	movf	setPresetDisplay@ledChannel^(0+128),w
  8587  22AE  00A4               	movwf	??_setPresetDisplay^(0+128)
  8588  22AF  01A5               	clrf	(??_setPresetDisplay^(0+128)+1)
  8589  22B0  09A4               	comf	??_setPresetDisplay^(0+128),f
  8590  22B1  09A5               	comf	(??_setPresetDisplay^(0+128)+1),f
  8591  22B2  0AA4               	incf	??_setPresetDisplay^(0+128),f
  8592  22B3  1903               	skipnz
  8593  22B4  0AA5               	incf	(??_setPresetDisplay^(0+128)+1),f
  8594  22B5  0824               	movf	??_setPresetDisplay^(0+128),w
  8595  22B6  3E0B               	addlw	11
  8596  22B7  00A0               	movwf	set_leds_bottom@x^(0+128)
  8597  22B8  3000               	movlw	0
  8598  22B9  3D25               	addwfc	(??_setPresetDisplay+1)^(0+128),w
  8599  22BA  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8600  22BB  31A2  22BE         	fcall	_set_leds_bottom
  8601  22BD  0008               	return
  8602  22BE                     __end_of_setPresetDisplay:	
  8603                           
  8604                           	psect	text14
  8605  2015                     __ptext14:	
  8606 ;; *************** function _setExpressionDisplay *****************
  8607 ;; Defined at:
  8608 ;;		line 66 in file "preset_programming.c"
  8609 ;; Parameters:    Size  Location     Type
  8610 ;;  ledChannel      1    wreg     unsigned char 
  8611 ;; Auto vars:     Size  Location     Type
  8612 ;;  ledChannel      1    6[BANK1 ] unsigned char 
  8613 ;; Return value:  Size  Location     Type
  8614 ;;                  1    wreg      void 
  8615 ;; Registers used:
  8616 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8617 ;; Tracked objects:
  8618 ;;		On entry : 0/0
  8619 ;;		On exit  : 0/0
  8620 ;;		Unchanged: 0/0
  8621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8623 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8624 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8625 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8626 ;;Total ram usage:        3 bytes
  8627 ;; Hardware stack levels used:    1
  8628 ;; Hardware stack levels required when called:    4
  8629 ;; This function calls:
  8630 ;;		_set_leds_bottom
  8631 ;;		_set_leds_top
  8632 ;; This function is called by:
  8633 ;;		_setPedalMode
  8634 ;;		_update_selectMode
  8635 ;; This function uses a non-reentrant model
  8636 ;;
  8637                           
  8638                           
  8639                           ;psect for function _setExpressionDisplay
  8640  2015                     _setExpressionDisplay:	
  8641                           
  8642                           ;incstack = 0
  8643                           ; Regs used in _setExpressionDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8644                           ;setExpressionDisplay@ledChannel stored from wreg
  8645  2015  0021               	movlb	1	; select bank1
  8646  2016  00A6               	movwf	setExpressionDisplay@ledChannel^(0+128)
  8647                           
  8648                           ;preset_programming.c: 67: set_leds_top(ledChannel, 1);
  8649  2017  0826               	movf	setExpressionDisplay@ledChannel^(0+128),w
  8650  2018  00A4               	movwf	??_setExpressionDisplay^(0+128)
  8651  2019  01A5               	clrf	(??_setExpressionDisplay^(0+128)+1)
  8652  201A  0824               	movf	??_setExpressionDisplay^(0+128),w
  8653  201B  00A0               	movwf	set_leds_top@x^(0+128)
  8654  201C  0825               	movf	(??_setExpressionDisplay+1)^(0+128),w
  8655  201D  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8656  201E  3001               	movlw	1
  8657  201F  00A2               	movwf	set_leds_top@ledState^(0+128)
  8658  2020  3000               	movlw	0
  8659  2021  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8660  2022  31A7  2753  31A0   	fcall	_set_leds_top
  8661                           
  8662                           ;preset_programming.c: 68: set_leds_bottom(6);
  8663  2025  3006               	movlw	6
  8664  2026  0021               	movlb	1	; select bank1
  8665  2027  00A0               	movwf	set_leds_bottom@x^(0+128)
  8666  2028  3000               	movlw	0
  8667  2029  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8668  202A  31A2  22BE         	fcall	_set_leds_bottom
  8669  202C  0008               	return
  8670  202D                     __end_of_setExpressionDisplay:	
  8671                           
  8672                           	psect	text15
  8673  202D                     __ptext15:	
  8674 ;; *************** function _resetRingLEDs *****************
  8675 ;; Defined at:
  8676 ;;		line 61 in file "preset_programming.c"
  8677 ;; Parameters:    Size  Location     Type
  8678 ;;		None
  8679 ;; Auto vars:     Size  Location     Type
  8680 ;;		None
  8681 ;; Return value:  Size  Location     Type
  8682 ;;                  1    wreg      void 
  8683 ;; Registers used:
  8684 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8685 ;; Tracked objects:
  8686 ;;		On entry : 0/0
  8687 ;;		On exit  : 0/0
  8688 ;;		Unchanged: 0/0
  8689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8691 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8693 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8694 ;;Total ram usage:        0 bytes
  8695 ;; Hardware stack levels used:    1
  8696 ;; Hardware stack levels required when called:    4
  8697 ;; This function calls:
  8698 ;;		_set_leds_bottom
  8699 ;;		_set_leds_top
  8700 ;; This function is called by:
  8701 ;;		_update_mode
  8702 ;;		_setPedalMode
  8703 ;;		_setDoublePressState
  8704 ;; This function uses a non-reentrant model
  8705 ;;
  8706                           
  8707                           
  8708                           ;psect for function _resetRingLEDs
  8709  202D                     _resetRingLEDs:	
  8710                           
  8711                           ;preset_programming.c: 62: set_leds_top(top_push_state, 1);
  8712                           
  8713                           ;incstack = 0
  8714                           ; Regs used in _resetRingLEDs: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8715  202D  0020               	movlb	0	; select bank0
  8716  202E  0852               	movf	_top_push_state+1,w
  8717  202F  0021               	movlb	1	; select bank1
  8718  2030  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8719  2031  0020               	movlb	0	; select bank0
  8720  2032  0851               	movf	_top_push_state,w
  8721  2033  0021               	movlb	1	; select bank1
  8722  2034  00A0               	movwf	set_leds_top@x^(0+128)
  8723  2035  3001               	movlw	1
  8724  2036  00A2               	movwf	set_leds_top@ledState^(0+128)
  8725  2037  3000               	movlw	0
  8726  2038  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8727  2039  31A7  2753  31A0   	fcall	_set_leds_top
  8728                           
  8729                           ;preset_programming.c: 63: set_leds_bottom(bottom_push_state);
  8730  203C  0020               	movlb	0	; select bank0
  8731  203D  084E               	movf	_bottom_push_state+1,w
  8732  203E  0021               	movlb	1	; select bank1
  8733  203F  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8734  2040  0020               	movlb	0	; select bank0
  8735  2041  084D               	movf	_bottom_push_state,w
  8736  2042  0021               	movlb	1	; select bank1
  8737  2043  00A0               	movwf	set_leds_bottom@x^(0+128)
  8738  2044  31A2  22BE         	fcall	_set_leds_bottom
  8739  2046  0008               	return
  8740  2047                     __end_of_resetRingLEDs:	
  8741                           
  8742                           	psect	text16
  8743  089F                     __ptext16:	
  8744 ;; *************** function _updateModulationArray *****************
  8745 ;; Defined at:
  8746 ;;		line 24 in file "modulation.c"
  8747 ;; Parameters:    Size  Location     Type
  8748 ;;		None
  8749 ;; Auto vars:     Size  Location     Type
  8750 ;;  thisAngle       2   53[BANK2 ] int 
  8751 ;;  iAngle          1   55[BANK2 ] unsigned char 
  8752 ;;  x               1   52[BANK2 ] unsigned char 
  8753 ;; Return value:  Size  Location     Type
  8754 ;;                  1    wreg      void 
  8755 ;; Registers used:
  8756 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8757 ;; Tracked objects:
  8758 ;;		On entry : 0/0
  8759 ;;		On exit  : 0/0
  8760 ;;		Unchanged: 0/0
  8761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8763 ;;      Locals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8764 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8765 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8766 ;;Total ram usage:        8 bytes
  8767 ;; Hardware stack levels used:    1
  8768 ;; Hardware stack levels required when called:    7
  8769 ;; This function calls:
  8770 ;;		___awtoft
  8771 ;;		___wmul
  8772 ;;		_modSaw
  8773 ;;		_modSawRev
  8774 ;;		_modSin
  8775 ;;		_modSquare
  8776 ;;		_modTri
  8777 ;; This function is called by:
  8778 ;;		_main
  8779 ;; This function uses a non-reentrant model
  8780 ;;
  8781                           
  8782                           
  8783                           ;psect for function _updateModulationArray
  8784  089F                     _updateModulationArray:	
  8785                           
  8786                           ;modulation.c: 25: for (char iAngle = 0; iAngle < 60; iAngle++) {
  8787                           
  8788                           ;incstack = 0
  8789                           ; Regs used in _updateModulationArray: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8790  089F  0022               	movlb	2	; select bank2
  8791  08A0  01D7               	clrf	updateModulationArray@iAngle^(0+256)
  8792  08A1  303C               	movlw	60
  8793  08A2  0257               	subwf	updateModulationArray@iAngle^(0+256),w
  8794  08A3  1803               	btfsc	3,0
  8795  08A4  2A4B               	goto	l1887
  8796  08A5                     l8747:	
  8797                           
  8798                           ;modulation.c: 26: int thisAngle = 6 * iAngle;
  8799  08A5  0857               	movf	updateModulationArray@iAngle^(0+256),w
  8800  08A6  00D0               	movwf	??_updateModulationArray^(0+256)
  8801  08A7  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  8802  08A8  0850               	movf	??_updateModulationArray^(0+256),w
  8803  08A9  00AE               	movwf	___wmul@multiplier^(0+256)
  8804  08AA  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  8805  08AB  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
  8806  08AC  3006               	movlw	6
  8807  08AD  00B0               	movwf	___wmul@multiplicand^(0+256)
  8808  08AE  3000               	movlw	0
  8809  08AF  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
  8810  08B0  31A0  2095  3188   	fcall	___wmul
  8811  08B3  0022               	movlb	2	; select bank2
  8812  08B4  082F               	movf	(?___wmul+1)^(0+256),w
  8813  08B5  00D6               	movwf	(updateModulationArray@thisAngle+1)^(0+256)
  8814  08B6  082E               	movf	?___wmul^(0+256),w
  8815  08B7  00D5               	movwf	updateModulationArray@thisAngle^(0+256)
  8816                           
  8817                           ;modulation.c: 27: switch (bottom_push_state) {
  8818  08B8  2A2B               	goto	l8763
  8819  08B9                     l8749:	
  8820                           ;modulation.c: 28: case 1:
  8821                           
  8822                           
  8823                           ;modulation.c: 29: modArray[iAngle] = modSin(thisAngle, symmetry);
  8824  08B9  0022               	movlb	2	; select bank2
  8825  08BA  0856               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  8826  08BB  0021               	movlb	1	; select bank1
  8827  08BC  00A9               	movwf	(___awtoft@c+1)^(0+128)
  8828  08BD  0022               	movlb	2	; select bank2
  8829  08BE  0855               	movf	updateModulationArray@thisAngle^(0+256),w
  8830  08BF  0021               	movlb	1	; select bank1
  8831  08C0  00A8               	movwf	___awtoft@c^(0+128)
  8832  08C1  31A0  20ED  3188   	fcall	___awtoft
  8833  08C4  0021               	movlb	1	; select bank1
  8834  08C5  0828               	movf	?___awtoft^(0+128),w
  8835  08C6  0022               	movlb	2	; select bank2
  8836  08C7  00B4               	movwf	modSin@angle^(0+256)
  8837  08C8  0021               	movlb	1	; select bank1
  8838  08C9  0829               	movf	(?___awtoft+1)^(0+128),w
  8839  08CA  0022               	movlb	2	; select bank2
  8840  08CB  00B5               	movwf	(modSin@angle+1)^(0+256)
  8841  08CC  0021               	movlb	1	; select bank1
  8842  08CD  082A               	movf	(?___awtoft+2)^(0+128),w
  8843  08CE  0022               	movlb	2	; select bank2
  8844  08CF  00B6               	movwf	(modSin@angle+2)^(0+256)
  8845  08D0  0023               	movlb	3	; select bank3
  8846  08D1  0856               	movf	(_symmetry+1)^(0+384),w
  8847  08D2  0021               	movlb	1	; select bank1
  8848  08D3  00A9               	movwf	(___awtoft@c+1)^(0+128)
  8849  08D4  0023               	movlb	3	; select bank3
  8850  08D5  0855               	movf	_symmetry^(0+384),w
  8851  08D6  0021               	movlb	1	; select bank1
  8852  08D7  00A8               	movwf	___awtoft@c^(0+128)
  8853  08D8  31A0  20ED  3188   	fcall	___awtoft
  8854  08DB  0021               	movlb	1	; select bank1
  8855  08DC  0828               	movf	?___awtoft^(0+128),w
  8856  08DD  0022               	movlb	2	; select bank2
  8857  08DE  00B7               	movwf	modSin@inflection^(0+256)
  8858  08DF  0021               	movlb	1	; select bank1
  8859  08E0  0829               	movf	(?___awtoft+1)^(0+128),w
  8860  08E1  0022               	movlb	2	; select bank2
  8861  08E2  00B8               	movwf	(modSin@inflection+1)^(0+256)
  8862  08E3  0021               	movlb	1	; select bank1
  8863  08E4  082A               	movf	(?___awtoft+2)^(0+128),w
  8864  08E5  0022               	movlb	2	; select bank2
  8865  08E6  00B9               	movwf	(modSin@inflection+2)^(0+256)
  8866  08E7  3196  2654  3188   	fcall	_modSin
  8867  08EA  0022               	movlb	2	; select bank2
  8868  08EB  0857               	movf	updateModulationArray@iAngle^(0+256),w
  8869  08EC  00D0               	movwf	??_updateModulationArray^(0+256)
  8870  08ED  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  8871  08EE  35D0               	lslf	??_updateModulationArray^(0+256),f
  8872  08EF  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  8873  08F0  308E               	movlw	142
  8874  08F1  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  8875  08F2  3023               	movlw	35
  8876  08F3  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  8877  08F4  0850               	movf	??_updateModulationArray^(0+256),w
  8878  08F5  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  8879  08F6  0086               	movwf	6
  8880  08F7  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  8881  08F8  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  8882  08F9  0087               	movwf	7
  8883  08FA  0834               	movf	?_modSin^(0+256),w
  8884  08FB  3FC0               	movwi [0]fsr1
  8885  08FC  0835               	movf	(?_modSin+1)^(0+256),w
  8886  08FD  3FC1               	movwi [1]fsr1
  8887                           
  8888                           ;modulation.c: 30: break;
  8889  08FE  2A42               	goto	l8765
  8890  08FF                     l8751:	
  8891                           ;modulation.c: 31: case 2:
  8892                           
  8893                           
  8894                           ;modulation.c: 32: modArray[iAngle] = modTri(thisAngle, symmetry);
  8895  08FF  0022               	movlb	2	; select bank2
  8896  0900  0856               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  8897  0901  0021               	movlb	1	; select bank1
  8898  0902  00A9               	movwf	(___awtoft@c+1)^(0+128)
  8899  0903  0022               	movlb	2	; select bank2
  8900  0904  0855               	movf	updateModulationArray@thisAngle^(0+256),w
  8901  0905  0021               	movlb	1	; select bank1
  8902  0906  00A8               	movwf	___awtoft@c^(0+128)
  8903  0907  31A0  20ED  3188   	fcall	___awtoft
  8904  090A  0021               	movlb	1	; select bank1
  8905  090B  0828               	movf	?___awtoft^(0+128),w
  8906  090C  0022               	movlb	2	; select bank2
  8907  090D  00AE               	movwf	modTri@angle^(0+256)
  8908  090E  0021               	movlb	1	; select bank1
  8909  090F  0829               	movf	(?___awtoft+1)^(0+128),w
  8910  0910  0022               	movlb	2	; select bank2
  8911  0911  00AF               	movwf	(modTri@angle+1)^(0+256)
  8912  0912  0021               	movlb	1	; select bank1
  8913  0913  082A               	movf	(?___awtoft+2)^(0+128),w
  8914  0914  0022               	movlb	2	; select bank2
  8915  0915  00B0               	movwf	(modTri@angle+2)^(0+256)
  8916  0916  0023               	movlb	3	; select bank3
  8917  0917  0856               	movf	(_symmetry+1)^(0+384),w
  8918  0918  0021               	movlb	1	; select bank1
  8919  0919  00A9               	movwf	(___awtoft@c+1)^(0+128)
  8920  091A  0023               	movlb	3	; select bank3
  8921  091B  0855               	movf	_symmetry^(0+384),w
  8922  091C  0021               	movlb	1	; select bank1
  8923  091D  00A8               	movwf	___awtoft@c^(0+128)
  8924  091E  31A0  20ED  3188   	fcall	___awtoft
  8925  0921  0021               	movlb	1	; select bank1
  8926  0922  0828               	movf	?___awtoft^(0+128),w
  8927  0923  0022               	movlb	2	; select bank2
  8928  0924  00B1               	movwf	modTri@inflection^(0+256)
  8929  0925  0021               	movlb	1	; select bank1
  8930  0926  0829               	movf	(?___awtoft+1)^(0+128),w
  8931  0927  0022               	movlb	2	; select bank2
  8932  0928  00B2               	movwf	(modTri@inflection+1)^(0+256)
  8933  0929  0021               	movlb	1	; select bank1
  8934  092A  082A               	movf	(?___awtoft+2)^(0+128),w
  8935  092B  0022               	movlb	2	; select bank2
  8936  092C  00B3               	movwf	(modTri@inflection+2)^(0+256)
  8937  092D  318E  2605  3188   	fcall	_modTri
  8938  0930  0022               	movlb	2	; select bank2
  8939  0931  0857               	movf	updateModulationArray@iAngle^(0+256),w
  8940  0932  00D0               	movwf	??_updateModulationArray^(0+256)
  8941  0933  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  8942  0934  35D0               	lslf	??_updateModulationArray^(0+256),f
  8943  0935  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  8944  0936  308E               	movlw	142
  8945  0937  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  8946  0938  3023               	movlw	35
  8947  0939  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  8948  093A  0850               	movf	??_updateModulationArray^(0+256),w
  8949  093B  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  8950  093C  0086               	movwf	6
  8951  093D  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  8952  093E  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  8953  093F  0087               	movwf	7
  8954  0940  082E               	movf	?_modTri^(0+256),w
  8955  0941  3FC0               	movwi [0]fsr1
  8956  0942  082F               	movf	(?_modTri+1)^(0+256),w
  8957  0943  3FC1               	movwi [1]fsr1
  8958                           
  8959                           ;modulation.c: 33: break;
  8960  0944  2A42               	goto	l8765
  8961  0945                     l8753:	
  8962                           ;modulation.c: 34: case 3:
  8963                           
  8964                           
  8965                           ;modulation.c: 35: modArray[iAngle] = modSquare(thisAngle, symmetry);
  8966  0945  0022               	movlb	2	; select bank2
  8967  0946  0856               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  8968  0947  0021               	movlb	1	; select bank1
  8969  0948  00A9               	movwf	(___awtoft@c+1)^(0+128)
  8970  0949  0022               	movlb	2	; select bank2
  8971  094A  0855               	movf	updateModulationArray@thisAngle^(0+256),w
  8972  094B  0021               	movlb	1	; select bank1
  8973  094C  00A8               	movwf	___awtoft@c^(0+128)
  8974  094D  31A0  20ED  3188   	fcall	___awtoft
  8975  0950  0021               	movlb	1	; select bank1
  8976  0951  0828               	movf	?___awtoft^(0+128),w
  8977  0952  0022               	movlb	2	; select bank2
  8978  0953  00C8               	movwf	modSquare@angle^(0+256)
  8979  0954  0021               	movlb	1	; select bank1
  8980  0955  0829               	movf	(?___awtoft+1)^(0+128),w
  8981  0956  0022               	movlb	2	; select bank2
  8982  0957  00C9               	movwf	(modSquare@angle+1)^(0+256)
  8983  0958  0021               	movlb	1	; select bank1
  8984  0959  082A               	movf	(?___awtoft+2)^(0+128),w
  8985  095A  0022               	movlb	2	; select bank2
  8986  095B  00CA               	movwf	(modSquare@angle+2)^(0+256)
  8987  095C  0023               	movlb	3	; select bank3
  8988  095D  0856               	movf	(_symmetry+1)^(0+384),w
  8989  095E  0021               	movlb	1	; select bank1
  8990  095F  00A9               	movwf	(___awtoft@c+1)^(0+128)
  8991  0960  0023               	movlb	3	; select bank3
  8992  0961  0855               	movf	_symmetry^(0+384),w
  8993  0962  0021               	movlb	1	; select bank1
  8994  0963  00A8               	movwf	___awtoft@c^(0+128)
  8995  0964  31A0  20ED  3188   	fcall	___awtoft
  8996  0967  0021               	movlb	1	; select bank1
  8997  0968  0828               	movf	?___awtoft^(0+128),w
  8998  0969  0022               	movlb	2	; select bank2
  8999  096A  00CB               	movwf	modSquare@inflection^(0+256)
  9000  096B  0021               	movlb	1	; select bank1
  9001  096C  0829               	movf	(?___awtoft+1)^(0+128),w
  9002  096D  0022               	movlb	2	; select bank2
  9003  096E  00CC               	movwf	(modSquare@inflection+1)^(0+256)
  9004  096F  0021               	movlb	1	; select bank1
  9005  0970  082A               	movf	(?___awtoft+2)^(0+128),w
  9006  0971  0022               	movlb	2	; select bank2
  9007  0972  00CD               	movwf	(modSquare@inflection+2)^(0+256)
  9008  0973  31A3  2335  3188   	fcall	_modSquare
  9009  0976  0022               	movlb	2	; select bank2
  9010  0977  0857               	movf	updateModulationArray@iAngle^(0+256),w
  9011  0978  00D0               	movwf	??_updateModulationArray^(0+256)
  9012  0979  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9013  097A  35D0               	lslf	??_updateModulationArray^(0+256),f
  9014  097B  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9015  097C  308E               	movlw	142
  9016  097D  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9017  097E  3023               	movlw	35
  9018  097F  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9019  0980  0850               	movf	??_updateModulationArray^(0+256),w
  9020  0981  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9021  0982  0086               	movwf	6
  9022  0983  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9023  0984  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9024  0985  0087               	movwf	7
  9025  0986  0848               	movf	?_modSquare^(0+256),w
  9026  0987  3FC0               	movwi [0]fsr1
  9027  0988  0849               	movf	(?_modSquare+1)^(0+256),w
  9028  0989  3FC1               	movwi [1]fsr1
  9029                           
  9030                           ;modulation.c: 36: break;
  9031  098A  2A42               	goto	l8765
  9032  098B                     l8755:	
  9033                           ;modulation.c: 37: case 4:
  9034                           
  9035                           
  9036                           ;modulation.c: 38: modArray[iAngle] = modSaw(thisAngle, symmetry);
  9037  098B  0022               	movlb	2	; select bank2
  9038  098C  0856               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9039  098D  0021               	movlb	1	; select bank1
  9040  098E  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9041  098F  0022               	movlb	2	; select bank2
  9042  0990  0855               	movf	updateModulationArray@thisAngle^(0+256),w
  9043  0991  0021               	movlb	1	; select bank1
  9044  0992  00A8               	movwf	___awtoft@c^(0+128)
  9045  0993  31A0  20ED  3188   	fcall	___awtoft
  9046  0996  0021               	movlb	1	; select bank1
  9047  0997  0828               	movf	?___awtoft^(0+128),w
  9048  0998  0022               	movlb	2	; select bank2
  9049  0999  00AE               	movwf	modSaw@angle^(0+256)
  9050  099A  0021               	movlb	1	; select bank1
  9051  099B  0829               	movf	(?___awtoft+1)^(0+128),w
  9052  099C  0022               	movlb	2	; select bank2
  9053  099D  00AF               	movwf	(modSaw@angle+1)^(0+256)
  9054  099E  0021               	movlb	1	; select bank1
  9055  099F  082A               	movf	(?___awtoft+2)^(0+128),w
  9056  09A0  0022               	movlb	2	; select bank2
  9057  09A1  00B0               	movwf	(modSaw@angle+2)^(0+256)
  9058  09A2  0023               	movlb	3	; select bank3
  9059  09A3  0856               	movf	(_symmetry+1)^(0+384),w
  9060  09A4  0021               	movlb	1	; select bank1
  9061  09A5  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9062  09A6  0023               	movlb	3	; select bank3
  9063  09A7  0855               	movf	_symmetry^(0+384),w
  9064  09A8  0021               	movlb	1	; select bank1
  9065  09A9  00A8               	movwf	___awtoft@c^(0+128)
  9066  09AA  31A0  20ED  3188   	fcall	___awtoft
  9067  09AD  0021               	movlb	1	; select bank1
  9068  09AE  0828               	movf	?___awtoft^(0+128),w
  9069  09AF  0022               	movlb	2	; select bank2
  9070  09B0  00B1               	movwf	modSaw@inflection^(0+256)
  9071  09B1  0021               	movlb	1	; select bank1
  9072  09B2  0829               	movf	(?___awtoft+1)^(0+128),w
  9073  09B3  0022               	movlb	2	; select bank2
  9074  09B4  00B2               	movwf	(modSaw@inflection+1)^(0+256)
  9075  09B5  0021               	movlb	1	; select bank1
  9076  09B6  082A               	movf	(?___awtoft+2)^(0+128),w
  9077  09B7  0022               	movlb	2	; select bank2
  9078  09B8  00B3               	movwf	(modSaw@inflection+2)^(0+256)
  9079  09B9  3194  24AA  3188   	fcall	_modSaw
  9080  09BC  0022               	movlb	2	; select bank2
  9081  09BD  0857               	movf	updateModulationArray@iAngle^(0+256),w
  9082  09BE  00D0               	movwf	??_updateModulationArray^(0+256)
  9083  09BF  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9084  09C0  35D0               	lslf	??_updateModulationArray^(0+256),f
  9085  09C1  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9086  09C2  308E               	movlw	142
  9087  09C3  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9088  09C4  3023               	movlw	35
  9089  09C5  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9090  09C6  0850               	movf	??_updateModulationArray^(0+256),w
  9091  09C7  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9092  09C8  0086               	movwf	6
  9093  09C9  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9094  09CA  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9095  09CB  0087               	movwf	7
  9096  09CC  082E               	movf	?_modSaw^(0+256),w
  9097  09CD  3FC0               	movwi [0]fsr1
  9098  09CE  082F               	movf	(?_modSaw+1)^(0+256),w
  9099  09CF  3FC1               	movwi [1]fsr1
  9100                           
  9101                           ;modulation.c: 39: break;
  9102  09D0  2A42               	goto	l8765
  9103  09D1                     l8757:	
  9104                           ;modulation.c: 40: case 5:
  9105                           
  9106                           
  9107                           ;modulation.c: 41: modArray[iAngle] = modSawRev(thisAngle, symmetry);
  9108  09D1  0022               	movlb	2	; select bank2
  9109  09D2  0856               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9110  09D3  0021               	movlb	1	; select bank1
  9111  09D4  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9112  09D5  0022               	movlb	2	; select bank2
  9113  09D6  0855               	movf	updateModulationArray@thisAngle^(0+256),w
  9114  09D7  0021               	movlb	1	; select bank1
  9115  09D8  00A8               	movwf	___awtoft@c^(0+128)
  9116  09D9  31A0  20ED  3188   	fcall	___awtoft
  9117  09DC  0021               	movlb	1	; select bank1
  9118  09DD  0828               	movf	?___awtoft^(0+128),w
  9119  09DE  0022               	movlb	2	; select bank2
  9120  09DF  00C5               	movwf	modSawRev@angle^(0+256)
  9121  09E0  0021               	movlb	1	; select bank1
  9122  09E1  0829               	movf	(?___awtoft+1)^(0+128),w
  9123  09E2  0022               	movlb	2	; select bank2
  9124  09E3  00C6               	movwf	(modSawRev@angle+1)^(0+256)
  9125  09E4  0021               	movlb	1	; select bank1
  9126  09E5  082A               	movf	(?___awtoft+2)^(0+128),w
  9127  09E6  0022               	movlb	2	; select bank2
  9128  09E7  00C7               	movwf	(modSawRev@angle+2)^(0+256)
  9129  09E8  0023               	movlb	3	; select bank3
  9130  09E9  0856               	movf	(_symmetry+1)^(0+384),w
  9131  09EA  0021               	movlb	1	; select bank1
  9132  09EB  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9133  09EC  0023               	movlb	3	; select bank3
  9134  09ED  0855               	movf	_symmetry^(0+384),w
  9135  09EE  0021               	movlb	1	; select bank1
  9136  09EF  00A8               	movwf	___awtoft@c^(0+128)
  9137  09F0  31A0  20ED  3188   	fcall	___awtoft
  9138  09F3  0021               	movlb	1	; select bank1
  9139  09F4  0828               	movf	?___awtoft^(0+128),w
  9140  09F5  0022               	movlb	2	; select bank2
  9141  09F6  00C8               	movwf	modSawRev@inflection^(0+256)
  9142  09F7  0021               	movlb	1	; select bank1
  9143  09F8  0829               	movf	(?___awtoft+1)^(0+128),w
  9144  09F9  0022               	movlb	2	; select bank2
  9145  09FA  00C9               	movwf	(modSawRev@inflection+1)^(0+256)
  9146  09FB  0021               	movlb	1	; select bank1
  9147  09FC  082A               	movf	(?___awtoft+2)^(0+128),w
  9148  09FD  0022               	movlb	2	; select bank2
  9149  09FE  00CA               	movwf	(modSawRev@inflection+2)^(0+256)
  9150  09FF  31A0  20B1  3188   	fcall	_modSawRev
  9151  0A02  0022               	movlb	2	; select bank2
  9152  0A03  0857               	movf	updateModulationArray@iAngle^(0+256),w
  9153  0A04  00D0               	movwf	??_updateModulationArray^(0+256)
  9154  0A05  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9155  0A06  35D0               	lslf	??_updateModulationArray^(0+256),f
  9156  0A07  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9157  0A08  308E               	movlw	142
  9158  0A09  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9159  0A0A  3023               	movlw	35
  9160  0A0B  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9161  0A0C  0850               	movf	??_updateModulationArray^(0+256),w
  9162  0A0D  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9163  0A0E  0086               	movwf	6
  9164  0A0F  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9165  0A10  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9166  0A11  0087               	movwf	7
  9167  0A12  0845               	movf	?_modSawRev^(0+256),w
  9168  0A13  3FC0               	movwi [0]fsr1
  9169  0A14  0846               	movf	(?_modSawRev+1)^(0+256),w
  9170  0A15  3FC1               	movwi [1]fsr1
  9171                           
  9172                           ;modulation.c: 42: break;
  9173  0A16  2A42               	goto	l8765
  9174  0A17                     l8759:	
  9175                           ;modulation.c: 43: default:
  9176                           
  9177                           
  9178                           ;modulation.c: 44: modArray[iAngle] = 0;
  9179  0A17  0022               	movlb	2	; select bank2
  9180  0A18  0857               	movf	updateModulationArray@iAngle^(0+256),w
  9181  0A19  00D0               	movwf	??_updateModulationArray^(0+256)
  9182  0A1A  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9183  0A1B  35D0               	lslf	??_updateModulationArray^(0+256),f
  9184  0A1C  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9185  0A1D  308E               	movlw	142
  9186  0A1E  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9187  0A1F  3023               	movlw	35
  9188  0A20  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9189  0A21  0850               	movf	??_updateModulationArray^(0+256),w
  9190  0A22  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9191  0A23  0086               	movwf	6
  9192  0A24  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9193  0A25  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9194  0A26  0087               	movwf	7
  9195  0A27  3000               	movlw	0
  9196  0A28  3FC0               	movwi [0]fsr1
  9197  0A29  3FC1               	movwi [1]fsr1
  9198                           
  9199                           ;modulation.c: 46: }
  9200                           
  9201                           ;modulation.c: 45: break;
  9202  0A2A  2A42               	goto	l8765
  9203  0A2B                     l8763:	
  9204                           
  9205                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9206                           ; Switch size 1, requested type "space"
  9207                           ; Number of cases is 1, Range of values is 0 to 0
  9208                           ; switch strategies available:
  9209                           ; Name         Instructions Cycles
  9210                           ; simple_byte            4     3 (average)
  9211                           ; direct_byte            8     6 (fixed)
  9212                           ; jumptable            260     6 (fixed)
  9213                           ;	Chosen strategy is simple_byte
  9214  0A2B  0020               	movlb	0	; select bank0
  9215  0A2C  084E               	movf	_bottom_push_state+1,w
  9216  0A2D  3A00               	xorlw	0	; case 0
  9217  0A2E  1903               	skipnz
  9218  0A2F  2A31               	goto	l9307
  9219  0A30  2A17               	goto	l8759
  9220  0A31                     l9307:	
  9221                           
  9222                           ; Switch size 1, requested type "space"
  9223                           ; Number of cases is 5, Range of values is 1 to 5
  9224                           ; switch strategies available:
  9225                           ; Name         Instructions Cycles
  9226                           ; simple_byte           16     9 (average)
  9227                           ; direct_byte           19     9 (fixed)
  9228                           ; jumptable            263     9 (fixed)
  9229                           ;	Chosen strategy is simple_byte
  9230  0A31  084D               	movf	_bottom_push_state,w
  9231  0A32  3A01               	xorlw	1	; case 1
  9232  0A33  1903               	skipnz
  9233  0A34  28B9               	goto	l8749
  9234  0A35  3A03               	xorlw	3	; case 2
  9235  0A36  1903               	skipnz
  9236  0A37  28FF               	goto	l8751
  9237  0A38  3A01               	xorlw	1	; case 3
  9238  0A39  1903               	skipnz
  9239  0A3A  2945               	goto	l8753
  9240  0A3B  3A07               	xorlw	7	; case 4
  9241  0A3C  1903               	skipnz
  9242  0A3D  298B               	goto	l8755
  9243  0A3E  3A01               	xorlw	1	; case 5
  9244  0A3F  1903               	skipnz
  9245  0A40  29D1               	goto	l8757
  9246  0A41  2A17               	goto	l8759
  9247  0A42                     l8765:	
  9248  0A42  3001               	movlw	1
  9249  0A43  0022               	movlb	2	; select bank2
  9250  0A44  00D0               	movwf	??_updateModulationArray^(0+256)
  9251  0A45  0850               	movf	??_updateModulationArray^(0+256),w
  9252  0A46  07D7               	addwf	updateModulationArray@iAngle^(0+256),f
  9253  0A47  303C               	movlw	60
  9254  0A48  0257               	subwf	updateModulationArray@iAngle^(0+256),w
  9255  0A49  1C03               	skipc
  9256  0A4A  28A5               	goto	l8747
  9257  0A4B                     l1887:	
  9258                           
  9259                           ;modulation.c: 47: }
  9260                           ;modulation.c: 48: char x = 1;
  9261  0A4B  01D4               	clrf	updateModulationArray@x^(0+256)
  9262  0A4C  0AD4               	incf	updateModulationArray@x^(0+256),f
  9263  0A4D  0008               	return
  9264  0A4E                     __end_of_updateModulationArray:	
  9265                           
  9266                           	psect	text17
  9267  0E05                     __ptext17:	
  9268 ;; *************** function _modTri *****************
  9269 ;; Defined at:
  9270 ;;		line 67 in file "modulation.c"
  9271 ;; Parameters:    Size  Location     Type
  9272 ;;  angle           3   14[BANK2 ] void 
  9273 ;;  inflection      3   17[BANK2 ] void 
  9274 ;; Auto vars:     Size  Location     Type
  9275 ;;  tmpVal          3   29[BANK2 ] void 
  9276 ;;  period          3   26[BANK2 ] void 
  9277 ;;  shift           3   23[BANK2 ] void 
  9278 ;; Return value:  Size  Location     Type
  9279 ;;                  2   14[BANK2 ] int 
  9280 ;; Registers used:
  9281 ;;		wreg, status,2, status,0, pclath, cstack
  9282 ;; Tracked objects:
  9283 ;;		On entry : 0/0
  9284 ;;		On exit  : 0/0
  9285 ;;		Unchanged: 0/0
  9286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9287 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9288 ;;      Locals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9290 ;;      Totals:         0       0       0      18       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9291 ;;Total ram usage:       18 bytes
  9292 ;; Hardware stack levels used:    1
  9293 ;; Hardware stack levels required when called:    5
  9294 ;; This function calls:
  9295 ;;		___ftadd
  9296 ;;		___ftdiv
  9297 ;;		___ftge
  9298 ;;		___ftmul
  9299 ;;		___ftneg
  9300 ;;		___fttol
  9301 ;; This function is called by:
  9302 ;;		_updateModulationArray
  9303 ;; This function uses a non-reentrant model
  9304 ;;
  9305                           
  9306                           
  9307                           ;psect for function _modTri
  9308  0E05                     _modTri:	
  9309                           
  9310                           ;modulation.c: 68: double period = 1.0;
  9311                           
  9312                           ;incstack = 0
  9313                           ; Regs used in _modTri: [wreg+status,2+status,0+pclath+cstack]
  9314  0E05  3000               	movlw	0
  9315  0E06  0022               	movlb	2	; select bank2
  9316  0E07  00BA               	movwf	modTri@period^(0+256)
  9317  0E08  3080               	movlw	128
  9318  0E09  00BB               	movwf	(modTri@period+1)^(0+256)
  9319  0E0A  303F               	movlw	63
  9320  0E0B  00BC               	movwf	(modTri@period+2)^(0+256)
  9321                           
  9322                           ;modulation.c: 69: double shift = 0;
  9323  0E0C  3000               	movlw	0
  9324  0E0D  00B7               	movwf	modTri@shift^(0+256)
  9325  0E0E  3000               	movlw	0
  9326  0E0F  00B8               	movwf	(modTri@shift+1)^(0+256)
  9327  0E10  3000               	movlw	0
  9328  0E11  00B9               	movwf	(modTri@shift+2)^(0+256)
  9329                           
  9330                           ;modulation.c: 71: if(angle<=inflection) {
  9331  0E12  0831               	movf	modTri@inflection^(0+256),w
  9332  0E13  0021               	movlb	1	; select bank1
  9333  0E14  00A0               	movwf	___ftge@ff1^(0+128)
  9334  0E15  0022               	movlb	2	; select bank2
  9335  0E16  0832               	movf	(modTri@inflection+1)^(0+256),w
  9336  0E17  0021               	movlb	1	; select bank1
  9337  0E18  00A1               	movwf	(___ftge@ff1+1)^(0+128)
  9338  0E19  0022               	movlb	2	; select bank2
  9339  0E1A  0833               	movf	(modTri@inflection+2)^(0+256),w
  9340  0E1B  0021               	movlb	1	; select bank1
  9341  0E1C  00A2               	movwf	(___ftge@ff1+2)^(0+128)
  9342  0E1D  0022               	movlb	2	; select bank2
  9343  0E1E  082E               	movf	modTri@angle^(0+256),w
  9344  0E1F  0021               	movlb	1	; select bank1
  9345  0E20  00A3               	movwf	___ftge@ff2^(0+128)
  9346  0E21  0022               	movlb	2	; select bank2
  9347  0E22  082F               	movf	(modTri@angle+1)^(0+256),w
  9348  0E23  0021               	movlb	1	; select bank1
  9349  0E24  00A4               	movwf	(___ftge@ff2+1)^(0+128)
  9350  0E25  0022               	movlb	2	; select bank2
  9351  0E26  0830               	movf	(modTri@angle+2)^(0+256),w
  9352  0E27  0021               	movlb	1	; select bank1
  9353  0E28  00A5               	movwf	(___ftge@ff2+2)^(0+128)
  9354  0E29  31A2  22F9  318E   	fcall	___ftge
  9355  0E2C  1C03               	btfss	3,0
  9356  0E2D  2E3A               	goto	l8217
  9357                           
  9358                           ;modulation.c: 72: period = 180.0/inflection;
  9359  0E2E  0022               	movlb	2	; select bank2
  9360  0E2F  0831               	movf	modTri@inflection^(0+256),w
  9361  0E30  0021               	movlb	1	; select bank1
  9362  0E31  00CE               	movwf	___ftdiv@f2^(0+128)
  9363  0E32  0022               	movlb	2	; select bank2
  9364  0E33  0832               	movf	(modTri@inflection+1)^(0+256),w
  9365  0E34  0021               	movlb	1	; select bank1
  9366  0E35  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
  9367  0E36  0022               	movlb	2	; select bank2
  9368  0E37  0833               	movf	(modTri@inflection+2)^(0+256),w
  9369  0E38  0021               	movlb	1	; select bank1
  9370  0E39  2EF5               	goto	L5
  9371  0E3A                     l8217:	
  9372                           ;modulation.c: 73: } else {
  9373                           
  9374                           
  9375                           ;modulation.c: 74: shift = -(360-inflection*2)*(180/(360-inflection));
  9376  0E3A  0022               	movlb	2	; select bank2
  9377  0E3B  0831               	movf	modTri@inflection^(0+256),w
  9378  0E3C  0021               	movlb	1	; select bank1
  9379  0E3D  00B1               	movwf	___ftmul@f2^(0+128)
  9380  0E3E  0022               	movlb	2	; select bank2
  9381  0E3F  0832               	movf	(modTri@inflection+1)^(0+256),w
  9382  0E40  0021               	movlb	1	; select bank1
  9383  0E41  00B2               	movwf	(___ftmul@f2+1)^(0+128)
  9384  0E42  0022               	movlb	2	; select bank2
  9385  0E43  0833               	movf	(modTri@inflection+2)^(0+256),w
  9386  0E44  0021               	movlb	1	; select bank1
  9387  0E45  00B3               	movwf	(___ftmul@f2+2)^(0+128)
  9388  0E46  3000               	movlw	0
  9389  0E47  00AE               	movwf	___ftmul@f1^(0+128)
  9390  0E48  3000               	movlw	0
  9391  0E49  00AF               	movwf	(___ftmul@f1+1)^(0+128)
  9392  0E4A  3040               	movlw	64
  9393  0E4B  00B0               	movwf	(___ftmul@f1+2)^(0+128)
  9394  0E4C  319E  2691  318E   	fcall	___ftmul
  9395  0E4F  0021               	movlb	1	; select bank1
  9396  0E50  082E               	movf	?___ftmul^(0+128),w
  9397  0E51  00BE               	movwf	___ftneg@f1^(0+128)
  9398  0E52  082F               	movf	(?___ftmul+1)^(0+128),w
  9399  0E53  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9400  0E54  0830               	movf	(?___ftmul+2)^(0+128),w
  9401  0E55  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9402  0E56  31AF  27BA  318E   	fcall	___ftneg
  9403  0E59  0021               	movlb	1	; select bank1
  9404  0E5A  083E               	movf	?___ftneg^(0+128),w
  9405  0E5B  00C4               	movwf	___ftadd@f2^(0+128)
  9406  0E5C  083F               	movf	(?___ftneg+1)^(0+128),w
  9407  0E5D  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9408  0E5E  0840               	movf	(?___ftneg+2)^(0+128),w
  9409  0E5F  00C6               	movwf	(___ftadd@f2+2)^(0+128)
  9410  0E60  3000               	movlw	0
  9411  0E61  00C1               	movwf	___ftadd@f1^(0+128)
  9412  0E62  30B4               	movlw	180
  9413  0E63  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9414  0E64  3043               	movlw	67
  9415  0E65  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9416  0E66  3192  225B  318E   	fcall	___ftadd
  9417  0E69  0021               	movlb	1	; select bank1
  9418  0E6A  0841               	movf	?___ftadd^(0+128),w
  9419  0E6B  0022               	movlb	2	; select bank2
  9420  0E6C  00B4               	movwf	_modTri$2820^(0+256)
  9421  0E6D  0021               	movlb	1	; select bank1
  9422  0E6E  0842               	movf	(?___ftadd+1)^(0+128),w
  9423  0E6F  0022               	movlb	2	; select bank2
  9424  0E70  00B5               	movwf	(_modTri$2820+1)^(0+256)
  9425  0E71  0021               	movlb	1	; select bank1
  9426  0E72  0843               	movf	(?___ftadd+2)^(0+128),w
  9427  0E73  0022               	movlb	2	; select bank2
  9428  0E74  00B6               	movwf	(_modTri$2820+2)^(0+256)
  9429                           
  9430                           ;modulation.c: 74: shift = -(360-inflection*2)*(180/(360-inflection));
  9431  0E75  0834               	movf	_modTri$2820^(0+256),w
  9432  0E76  0021               	movlb	1	; select bank1
  9433  0E77  00BE               	movwf	___ftneg@f1^(0+128)
  9434  0E78  0022               	movlb	2	; select bank2
  9435  0E79  0835               	movf	(_modTri$2820+1)^(0+256),w
  9436  0E7A  0021               	movlb	1	; select bank1
  9437  0E7B  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9438  0E7C  0022               	movlb	2	; select bank2
  9439  0E7D  0836               	movf	(_modTri$2820+2)^(0+256),w
  9440  0E7E  0021               	movlb	1	; select bank1
  9441  0E7F  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9442  0E80  31AF  27BA  318E   	fcall	___ftneg
  9443  0E83  0021               	movlb	1	; select bank1
  9444  0E84  083E               	movf	?___ftneg^(0+128),w
  9445  0E85  00AE               	movwf	___ftmul@f1^(0+128)
  9446  0E86  083F               	movf	(?___ftneg+1)^(0+128),w
  9447  0E87  00AF               	movwf	(___ftmul@f1+1)^(0+128)
  9448  0E88  0840               	movf	(?___ftneg+2)^(0+128),w
  9449  0E89  00B0               	movwf	(___ftmul@f1+2)^(0+128)
  9450  0E8A  3000               	movlw	0
  9451  0E8B  00C1               	movwf	___ftadd@f1^(0+128)
  9452  0E8C  30B4               	movlw	180
  9453  0E8D  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9454  0E8E  3043               	movlw	67
  9455  0E8F  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9456  0E90  0022               	movlb	2	; select bank2
  9457  0E91  0831               	movf	modTri@inflection^(0+256),w
  9458  0E92  0021               	movlb	1	; select bank1
  9459  0E93  00BE               	movwf	___ftneg@f1^(0+128)
  9460  0E94  0022               	movlb	2	; select bank2
  9461  0E95  0832               	movf	(modTri@inflection+1)^(0+256),w
  9462  0E96  0021               	movlb	1	; select bank1
  9463  0E97  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9464  0E98  0022               	movlb	2	; select bank2
  9465  0E99  0833               	movf	(modTri@inflection+2)^(0+256),w
  9466  0E9A  0021               	movlb	1	; select bank1
  9467  0E9B  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9468  0E9C  31AF  27BA  318E   	fcall	___ftneg
  9469  0E9F  0021               	movlb	1	; select bank1
  9470  0EA0  083E               	movf	?___ftneg^(0+128),w
  9471  0EA1  00C4               	movwf	___ftadd@f2^(0+128)
  9472  0EA2  083F               	movf	(?___ftneg+1)^(0+128),w
  9473  0EA3  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9474  0EA4  0840               	movf	(?___ftneg+2)^(0+128),w
  9475  0EA5  00C6               	movwf	(___ftadd@f2+2)^(0+128)
  9476  0EA6  3192  225B  318E   	fcall	___ftadd
  9477  0EA9  0021               	movlb	1	; select bank1
  9478  0EAA  0841               	movf	?___ftadd^(0+128),w
  9479  0EAB  00CE               	movwf	___ftdiv@f2^(0+128)
  9480  0EAC  0842               	movf	(?___ftadd+1)^(0+128),w
  9481  0EAD  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
  9482  0EAE  0843               	movf	(?___ftadd+2)^(0+128),w
  9483  0EAF  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
  9484  0EB0  3000               	movlw	0
  9485  0EB1  00D1               	movwf	___ftdiv@f1^(0+128)
  9486  0EB2  3034               	movlw	52
  9487  0EB3  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
  9488  0EB4  3043               	movlw	67
  9489  0EB5  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
  9490  0EB6  319D  253D  318E   	fcall	___ftdiv
  9491  0EB9  0021               	movlb	1	; select bank1
  9492  0EBA  084E               	movf	?___ftdiv^(0+128),w
  9493  0EBB  00B1               	movwf	___ftmul@f2^(0+128)
  9494  0EBC  084F               	movf	(?___ftdiv+1)^(0+128),w
  9495  0EBD  00B2               	movwf	(___ftmul@f2+1)^(0+128)
  9496  0EBE  0850               	movf	(?___ftdiv+2)^(0+128),w
  9497  0EBF  00B3               	movwf	(___ftmul@f2+2)^(0+128)
  9498  0EC0  319E  2691  318E   	fcall	___ftmul
  9499  0EC3  0021               	movlb	1	; select bank1
  9500  0EC4  082E               	movf	?___ftmul^(0+128),w
  9501  0EC5  0022               	movlb	2	; select bank2
  9502  0EC6  00B7               	movwf	modTri@shift^(0+256)
  9503  0EC7  0021               	movlb	1	; select bank1
  9504  0EC8  082F               	movf	(?___ftmul+1)^(0+128),w
  9505  0EC9  0022               	movlb	2	; select bank2
  9506  0ECA  00B8               	movwf	(modTri@shift+1)^(0+256)
  9507  0ECB  0021               	movlb	1	; select bank1
  9508  0ECC  0830               	movf	(?___ftmul+2)^(0+128),w
  9509  0ECD  0022               	movlb	2	; select bank2
  9510  0ECE  00B9               	movwf	(modTri@shift+2)^(0+256)
  9511                           
  9512                           ;modulation.c: 75: period = 180/(360-inflection);
  9513  0ECF  3000               	movlw	0
  9514  0ED0  0021               	movlb	1	; select bank1
  9515  0ED1  00C1               	movwf	___ftadd@f1^(0+128)
  9516  0ED2  30B4               	movlw	180
  9517  0ED3  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9518  0ED4  3043               	movlw	67
  9519  0ED5  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9520  0ED6  0022               	movlb	2	; select bank2
  9521  0ED7  0831               	movf	modTri@inflection^(0+256),w
  9522  0ED8  0021               	movlb	1	; select bank1
  9523  0ED9  00BE               	movwf	___ftneg@f1^(0+128)
  9524  0EDA  0022               	movlb	2	; select bank2
  9525  0EDB  0832               	movf	(modTri@inflection+1)^(0+256),w
  9526  0EDC  0021               	movlb	1	; select bank1
  9527  0EDD  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9528  0EDE  0022               	movlb	2	; select bank2
  9529  0EDF  0833               	movf	(modTri@inflection+2)^(0+256),w
  9530  0EE0  0021               	movlb	1	; select bank1
  9531  0EE1  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9532  0EE2  31AF  27BA  318E   	fcall	___ftneg
  9533  0EE5  0021               	movlb	1	; select bank1
  9534  0EE6  083E               	movf	?___ftneg^(0+128),w
  9535  0EE7  00C4               	movwf	___ftadd@f2^(0+128)
  9536  0EE8  083F               	movf	(?___ftneg+1)^(0+128),w
  9537  0EE9  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9538  0EEA  0840               	movf	(?___ftneg+2)^(0+128),w
  9539  0EEB  00C6               	movwf	(___ftadd@f2+2)^(0+128)
  9540  0EEC  3192  225B  318E   	fcall	___ftadd
  9541  0EEF  0021               	movlb	1	; select bank1
  9542  0EF0  0841               	movf	?___ftadd^(0+128),w
  9543  0EF1  00CE               	movwf	___ftdiv@f2^(0+128)
  9544  0EF2  0842               	movf	(?___ftadd+1)^(0+128),w
  9545  0EF3  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
  9546  0EF4  0843               	movf	(?___ftadd+2)^(0+128),w
  9547  0EF5                     L5:	
  9548  0EF5  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
  9549  0EF6  3000               	movlw	0
  9550  0EF7  00D1               	movwf	___ftdiv@f1^(0+128)
  9551  0EF8  3034               	movlw	52
  9552  0EF9  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
  9553  0EFA  3043               	movlw	67
  9554  0EFB  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
  9555  0EFC  319D  253D  318E   	fcall	___ftdiv
  9556  0EFF  0021               	movlb	1	; select bank1
  9557  0F00  084E               	movf	?___ftdiv^(0+128),w
  9558  0F01  0022               	movlb	2	; select bank2
  9559  0F02  00BA               	movwf	modTri@period^(0+256)
  9560  0F03  0021               	movlb	1	; select bank1
  9561  0F04  084F               	movf	(?___ftdiv+1)^(0+128),w
  9562  0F05  0022               	movlb	2	; select bank2
  9563  0F06  00BB               	movwf	(modTri@period+1)^(0+256)
  9564  0F07  0021               	movlb	1	; select bank1
  9565  0F08  0850               	movf	(?___ftdiv+2)^(0+128),w
  9566  0F09  0022               	movlb	2	; select bank2
  9567  0F0A  00BC               	movwf	(modTri@period+2)^(0+256)
  9568                           
  9569                           ;modulation.c: 77: }
  9570                           ;modulation.c: 78: double tmpVal = (period*angle-shift) ;
  9571  0F0B  0837               	movf	modTri@shift^(0+256),w
  9572  0F0C  0021               	movlb	1	; select bank1
  9573  0F0D  00BE               	movwf	___ftneg@f1^(0+128)
  9574  0F0E  0022               	movlb	2	; select bank2
  9575  0F0F  0838               	movf	(modTri@shift+1)^(0+256),w
  9576  0F10  0021               	movlb	1	; select bank1
  9577  0F11  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9578  0F12  0022               	movlb	2	; select bank2
  9579  0F13  0839               	movf	(modTri@shift+2)^(0+256),w
  9580  0F14  0021               	movlb	1	; select bank1
  9581  0F15  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9582  0F16  31AF  27BA  318E   	fcall	___ftneg
  9583  0F19  0021               	movlb	1	; select bank1
  9584  0F1A  083E               	movf	?___ftneg^(0+128),w
  9585  0F1B  00C1               	movwf	___ftadd@f1^(0+128)
  9586  0F1C  083F               	movf	(?___ftneg+1)^(0+128),w
  9587  0F1D  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9588  0F1E  0840               	movf	(?___ftneg+2)^(0+128),w
  9589  0F1F  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9590  0F20  0022               	movlb	2	; select bank2
  9591  0F21  082E               	movf	modTri@angle^(0+256),w
  9592  0F22  0021               	movlb	1	; select bank1
  9593  0F23  00AE               	movwf	___ftmul@f1^(0+128)
  9594  0F24  0022               	movlb	2	; select bank2
  9595  0F25  082F               	movf	(modTri@angle+1)^(0+256),w
  9596  0F26  0021               	movlb	1	; select bank1
  9597  0F27  00AF               	movwf	(___ftmul@f1+1)^(0+128)
  9598  0F28  0022               	movlb	2	; select bank2
  9599  0F29  0830               	movf	(modTri@angle+2)^(0+256),w
  9600  0F2A  0021               	movlb	1	; select bank1
  9601  0F2B  00B0               	movwf	(___ftmul@f1+2)^(0+128)
  9602  0F2C  0022               	movlb	2	; select bank2
  9603  0F2D  083A               	movf	modTri@period^(0+256),w
  9604  0F2E  0021               	movlb	1	; select bank1
  9605  0F2F  00B1               	movwf	___ftmul@f2^(0+128)
  9606  0F30  0022               	movlb	2	; select bank2
  9607  0F31  083B               	movf	(modTri@period+1)^(0+256),w
  9608  0F32  0021               	movlb	1	; select bank1
  9609  0F33  00B2               	movwf	(___ftmul@f2+1)^(0+128)
  9610  0F34  0022               	movlb	2	; select bank2
  9611  0F35  083C               	movf	(modTri@period+2)^(0+256),w
  9612  0F36  0021               	movlb	1	; select bank1
  9613  0F37  00B3               	movwf	(___ftmul@f2+2)^(0+128)
  9614  0F38  319E  2691  318E   	fcall	___ftmul
  9615  0F3B  0021               	movlb	1	; select bank1
  9616  0F3C  082E               	movf	?___ftmul^(0+128),w
  9617  0F3D  00C4               	movwf	___ftadd@f2^(0+128)
  9618  0F3E  082F               	movf	(?___ftmul+1)^(0+128),w
  9619  0F3F  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9620  0F40  0830               	movf	(?___ftmul+2)^(0+128),w
  9621  0F41  00C6               	movwf	(___ftadd@f2+2)^(0+128)
  9622  0F42  3192  225B  318E   	fcall	___ftadd
  9623  0F45  0021               	movlb	1	; select bank1
  9624  0F46  0841               	movf	?___ftadd^(0+128),w
  9625  0F47  0022               	movlb	2	; select bank2
  9626  0F48  00BD               	movwf	modTri@tmpVal^(0+256)
  9627  0F49  0021               	movlb	1	; select bank1
  9628  0F4A  0842               	movf	(?___ftadd+1)^(0+128),w
  9629  0F4B  0022               	movlb	2	; select bank2
  9630  0F4C  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
  9631  0F4D  0021               	movlb	1	; select bank1
  9632  0F4E  0843               	movf	(?___ftadd+2)^(0+128),w
  9633  0F4F  0022               	movlb	2	; select bank2
  9634  0F50  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
  9635                           
  9636                           ;modulation.c: 79: if (tmpVal > 270) {
  9637  0F51  3000               	movlw	0
  9638  0F52  0021               	movlb	1	; select bank1
  9639  0F53  00A0               	movwf	___ftge@ff1^(0+128)
  9640  0F54  3087               	movlw	135
  9641  0F55  00A1               	movwf	(___ftge@ff1+1)^(0+128)
  9642  0F56  3043               	movlw	67
  9643  0F57  00A2               	movwf	(___ftge@ff1+2)^(0+128)
  9644  0F58  0022               	movlb	2	; select bank2
  9645  0F59  083D               	movf	modTri@tmpVal^(0+256),w
  9646  0F5A  0021               	movlb	1	; select bank1
  9647  0F5B  00A3               	movwf	___ftge@ff2^(0+128)
  9648  0F5C  0022               	movlb	2	; select bank2
  9649  0F5D  083E               	movf	(modTri@tmpVal+1)^(0+256),w
  9650  0F5E  0021               	movlb	1	; select bank1
  9651  0F5F  00A4               	movwf	(___ftge@ff2+1)^(0+128)
  9652  0F60  0022               	movlb	2	; select bank2
  9653  0F61  083F               	movf	(modTri@tmpVal+2)^(0+256),w
  9654  0F62  0021               	movlb	1	; select bank1
  9655  0F63  00A5               	movwf	(___ftge@ff2+2)^(0+128)
  9656  0F64  31A2  22F9  318E   	fcall	___ftge
  9657  0F67  1803               	btfsc	3,0
  9658  0F68  2F7C               	goto	l8221
  9659                           
  9660                           ;modulation.c: 80: tmpVal = tmpVal - 360.0;
  9661  0F69  3000               	movlw	0
  9662  0F6A  0021               	movlb	1	; select bank1
  9663  0F6B  00C1               	movwf	___ftadd@f1^(0+128)
  9664  0F6C  30B4               	movlw	180
  9665  0F6D  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9666  0F6E  30C3               	movlw	195
  9667  0F6F  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9668  0F70  0022               	movlb	2	; select bank2
  9669  0F71  083D               	movf	modTri@tmpVal^(0+256),w
  9670  0F72  0021               	movlb	1	; select bank1
  9671  0F73  00C4               	movwf	___ftadd@f2^(0+128)
  9672  0F74  0022               	movlb	2	; select bank2
  9673  0F75  083E               	movf	(modTri@tmpVal+1)^(0+256),w
  9674  0F76  0021               	movlb	1	; select bank1
  9675  0F77  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9676  0F78  0022               	movlb	2	; select bank2
  9677  0F79  083F               	movf	(modTri@tmpVal+2)^(0+256),w
  9678  0F7A  0021               	movlb	1	; select bank1
  9679  0F7B  2FB0               	goto	L7
  9680  0F7C                     l8221:	
  9681                           ;modulation.c: 81: } else if (tmpVal > 90) {
  9682                           
  9683  0F7C  3000               	movlw	0
  9684  0F7D  0021               	movlb	1	; select bank1
  9685  0F7E  00A0               	movwf	___ftge@ff1^(0+128)
  9686  0F7F  30B4               	movlw	180
  9687  0F80  00A1               	movwf	(___ftge@ff1+1)^(0+128)
  9688  0F81  3042               	movlw	66
  9689  0F82  00A2               	movwf	(___ftge@ff1+2)^(0+128)
  9690  0F83  0022               	movlb	2	; select bank2
  9691  0F84  083D               	movf	modTri@tmpVal^(0+256),w
  9692  0F85  0021               	movlb	1	; select bank1
  9693  0F86  00A3               	movwf	___ftge@ff2^(0+128)
  9694  0F87  0022               	movlb	2	; select bank2
  9695  0F88  083E               	movf	(modTri@tmpVal+1)^(0+256),w
  9696  0F89  0021               	movlb	1	; select bank1
  9697  0F8A  00A4               	movwf	(___ftge@ff2+1)^(0+128)
  9698  0F8B  0022               	movlb	2	; select bank2
  9699  0F8C  083F               	movf	(modTri@tmpVal+2)^(0+256),w
  9700  0F8D  0021               	movlb	1	; select bank1
  9701  0F8E  00A5               	movwf	(___ftge@ff2+2)^(0+128)
  9702  0F8F  31A2  22F9  318E   	fcall	___ftge
  9703  0F92  1803               	btfsc	3,0
  9704  0F93  2FC0               	goto	l1907
  9705                           
  9706                           ;modulation.c: 82: tmpVal = 180 - tmpVal;
  9707  0F94  3000               	movlw	0
  9708  0F95  0021               	movlb	1	; select bank1
  9709  0F96  00C1               	movwf	___ftadd@f1^(0+128)
  9710  0F97  3034               	movlw	52
  9711  0F98  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9712  0F99  3043               	movlw	67
  9713  0F9A  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9714  0F9B  0022               	movlb	2	; select bank2
  9715  0F9C  083D               	movf	modTri@tmpVal^(0+256),w
  9716  0F9D  0021               	movlb	1	; select bank1
  9717  0F9E  00BE               	movwf	___ftneg@f1^(0+128)
  9718  0F9F  0022               	movlb	2	; select bank2
  9719  0FA0  083E               	movf	(modTri@tmpVal+1)^(0+256),w
  9720  0FA1  0021               	movlb	1	; select bank1
  9721  0FA2  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9722  0FA3  0022               	movlb	2	; select bank2
  9723  0FA4  083F               	movf	(modTri@tmpVal+2)^(0+256),w
  9724  0FA5  0021               	movlb	1	; select bank1
  9725  0FA6  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9726  0FA7  31AF  27BA  318E   	fcall	___ftneg
  9727  0FAA  0021               	movlb	1	; select bank1
  9728  0FAB  083E               	movf	?___ftneg^(0+128),w
  9729  0FAC  00C4               	movwf	___ftadd@f2^(0+128)
  9730  0FAD  083F               	movf	(?___ftneg+1)^(0+128),w
  9731  0FAE  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9732  0FAF  0840               	movf	(?___ftneg+2)^(0+128),w
  9733  0FB0                     L7:	
  9734  0FB0  00C6               	movwf	(___ftadd@f2+2)^(0+128)
  9735  0FB1  3192  225B  318E   	fcall	___ftadd
  9736  0FB4  0021               	movlb	1	; select bank1
  9737  0FB5  0841               	movf	?___ftadd^(0+128),w
  9738  0FB6  0022               	movlb	2	; select bank2
  9739  0FB7  00BD               	movwf	modTri@tmpVal^(0+256)
  9740  0FB8  0021               	movlb	1	; select bank1
  9741  0FB9  0842               	movf	(?___ftadd+1)^(0+128),w
  9742  0FBA  0022               	movlb	2	; select bank2
  9743  0FBB  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
  9744  0FBC  0021               	movlb	1	; select bank1
  9745  0FBD  0843               	movf	(?___ftadd+2)^(0+128),w
  9746  0FBE  0022               	movlb	2	; select bank2
  9747  0FBF  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
  9748  0FC0                     l1907:	
  9749                           
  9750                           ;modulation.c: 83: }
  9751                           ;modulation.c: 84: tmpVal = tmpVal * 10/9;
  9752  0FC0  3000               	movlw	0
  9753  0FC1  0021               	movlb	1	; select bank1
  9754  0FC2  00CE               	movwf	___ftdiv@f2^(0+128)
  9755  0FC3  3010               	movlw	16
  9756  0FC4  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
  9757  0FC5  3041               	movlw	65
  9758  0FC6  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
  9759  0FC7  3000               	movlw	0
  9760  0FC8  00AE               	movwf	___ftmul@f1^(0+128)
  9761  0FC9  3020               	movlw	32
  9762  0FCA  00AF               	movwf	(___ftmul@f1+1)^(0+128)
  9763  0FCB  3041               	movlw	65
  9764  0FCC  00B0               	movwf	(___ftmul@f1+2)^(0+128)
  9765  0FCD  0022               	movlb	2	; select bank2
  9766  0FCE  083D               	movf	modTri@tmpVal^(0+256),w
  9767  0FCF  0021               	movlb	1	; select bank1
  9768  0FD0  00B1               	movwf	___ftmul@f2^(0+128)
  9769  0FD1  0022               	movlb	2	; select bank2
  9770  0FD2  083E               	movf	(modTri@tmpVal+1)^(0+256),w
  9771  0FD3  0021               	movlb	1	; select bank1
  9772  0FD4  00B2               	movwf	(___ftmul@f2+1)^(0+128)
  9773  0FD5  0022               	movlb	2	; select bank2
  9774  0FD6  083F               	movf	(modTri@tmpVal+2)^(0+256),w
  9775  0FD7  0021               	movlb	1	; select bank1
  9776  0FD8  00B3               	movwf	(___ftmul@f2+2)^(0+128)
  9777  0FD9  319E  2691  318E   	fcall	___ftmul
  9778  0FDC  0021               	movlb	1	; select bank1
  9779  0FDD  082E               	movf	?___ftmul^(0+128),w
  9780  0FDE  00D1               	movwf	___ftdiv@f1^(0+128)
  9781  0FDF  082F               	movf	(?___ftmul+1)^(0+128),w
  9782  0FE0  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
  9783  0FE1  0830               	movf	(?___ftmul+2)^(0+128),w
  9784  0FE2  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
  9785  0FE3  319D  253D  318E   	fcall	___ftdiv
  9786  0FE6  0021               	movlb	1	; select bank1
  9787  0FE7  084E               	movf	?___ftdiv^(0+128),w
  9788  0FE8  0022               	movlb	2	; select bank2
  9789  0FE9  00BD               	movwf	modTri@tmpVal^(0+256)
  9790  0FEA  0021               	movlb	1	; select bank1
  9791  0FEB  084F               	movf	(?___ftdiv+1)^(0+128),w
  9792  0FEC  0022               	movlb	2	; select bank2
  9793  0FED  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
  9794  0FEE  0021               	movlb	1	; select bank1
  9795  0FEF  0850               	movf	(?___ftdiv+2)^(0+128),w
  9796  0FF0  0022               	movlb	2	; select bank2
  9797  0FF1  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
  9798                           
  9799                           ;modulation.c: 86: return (int)(tmpVal);
  9800  0FF2  083D               	movf	modTri@tmpVal^(0+256),w
  9801  0FF3  00A0               	movwf	___fttol@f1^(0+256)
  9802  0FF4  083E               	movf	(modTri@tmpVal+1)^(0+256),w
  9803  0FF5  00A1               	movwf	(___fttol@f1+1)^(0+256)
  9804  0FF6  083F               	movf	(modTri@tmpVal+2)^(0+256),w
  9805  0FF7  00A2               	movwf	(___fttol@f1+2)^(0+256)
  9806  0FF8  319A  22FD         	fcall	___fttol
  9807  0FFA  0022               	movlb	2	; select bank2
  9808  0FFB  0821               	movf	(?___fttol^(0+256)+1),w
  9809  0FFC  00AF               	movwf	(?_modTri+1)^(0+256)
  9810  0FFD  0820               	movf	?___fttol^(0+256),w
  9811  0FFE  00AE               	movwf	?_modTri^(0+256)
  9812  0FFF  0008               	return
  9813  1000                     __end_of_modTri:	
  9814                           
  9815                           	psect	text18
  9816  2335                     __ptext18:	
  9817 ;; *************** function _modSquare *****************
  9818 ;; Defined at:
  9819 ;;		line 112 in file "modulation.c"
  9820 ;; Parameters:    Size  Location     Type
  9821 ;;  angle           3   40[BANK2 ] int 
  9822 ;;  inflection      3   43[BANK2 ] int 
  9823 ;; Auto vars:     Size  Location     Type
  9824 ;;  tmpVal          2   46[BANK2 ] int 
  9825 ;; Return value:  Size  Location     Type
  9826 ;;                  2   40[BANK2 ] int 
  9827 ;; Registers used:
  9828 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9829 ;; Tracked objects:
  9830 ;;		On entry : 0/0
  9831 ;;		On exit  : 0/0
  9832 ;;		Unchanged: 0/0
  9833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9834 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9835 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9837 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9838 ;;Total ram usage:        8 bytes
  9839 ;; Hardware stack levels used:    1
  9840 ;; Hardware stack levels required when called:    6
  9841 ;; This function calls:
  9842 ;;		___ftge
  9843 ;;		_modSin
  9844 ;; This function is called by:
  9845 ;;		_updateModulationArray
  9846 ;; This function uses a non-reentrant model
  9847 ;;
  9848                           
  9849                           
  9850                           ;psect for function _modSquare
  9851  2335                     _modSquare:	
  9852                           
  9853                           ;modulation.c: 113: int tmpVal = modSin(angle, inflection);
  9854                           
  9855                           ;incstack = 0
  9856                           ; Regs used in _modSquare: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9857  2335  0022               	movlb	2	; select bank2
  9858  2336  0848               	movf	modSquare@angle^(0+256),w
  9859  2337  00B4               	movwf	modSin@angle^(0+256)
  9860  2338  0849               	movf	(modSquare@angle+1)^(0+256),w
  9861  2339  00B5               	movwf	(modSin@angle+1)^(0+256)
  9862  233A  084A               	movf	(modSquare@angle+2)^(0+256),w
  9863  233B  00B6               	movwf	(modSin@angle+2)^(0+256)
  9864  233C  084B               	movf	modSquare@inflection^(0+256),w
  9865  233D  00B7               	movwf	modSin@inflection^(0+256)
  9866  233E  084C               	movf	(modSquare@inflection+1)^(0+256),w
  9867  233F  00B8               	movwf	(modSin@inflection+1)^(0+256)
  9868  2340  084D               	movf	(modSquare@inflection+2)^(0+256),w
  9869  2341  00B9               	movwf	(modSin@inflection+2)^(0+256)
  9870  2342  3196  2654  31A3   	fcall	_modSin
  9871  2345  0022               	movlb	2	; select bank2
  9872  2346  0835               	movf	(?_modSin+1)^(0+256),w
  9873  2347  00CF               	movwf	(modSquare@tmpVal+1)^(0+256)
  9874  2348  0834               	movf	?_modSin^(0+256),w
  9875  2349  00CE               	movwf	modSquare@tmpVal^(0+256)
  9876                           
  9877                           ;modulation.c: 115: return (angle <= inflection) ? 100 : -100;
  9878  234A  084B               	movf	modSquare@inflection^(0+256),w
  9879  234B  0021               	movlb	1	; select bank1
  9880  234C  00A0               	movwf	___ftge@ff1^(0+128)
  9881  234D  0022               	movlb	2	; select bank2
  9882  234E  084C               	movf	(modSquare@inflection+1)^(0+256),w
  9883  234F  0021               	movlb	1	; select bank1
  9884  2350  00A1               	movwf	(___ftge@ff1+1)^(0+128)
  9885  2351  0022               	movlb	2	; select bank2
  9886  2352  084D               	movf	(modSquare@inflection+2)^(0+256),w
  9887  2353  0021               	movlb	1	; select bank1
  9888  2354  00A2               	movwf	(___ftge@ff1+2)^(0+128)
  9889  2355  0022               	movlb	2	; select bank2
  9890  2356  0848               	movf	modSquare@angle^(0+256),w
  9891  2357  0021               	movlb	1	; select bank1
  9892  2358  00A3               	movwf	___ftge@ff2^(0+128)
  9893  2359  0022               	movlb	2	; select bank2
  9894  235A  0849               	movf	(modSquare@angle+1)^(0+256),w
  9895  235B  0021               	movlb	1	; select bank1
  9896  235C  00A4               	movwf	(___ftge@ff2+1)^(0+128)
  9897  235D  0022               	movlb	2	; select bank2
  9898  235E  084A               	movf	(modSquare@angle+2)^(0+256),w
  9899  235F  0021               	movlb	1	; select bank1
  9900  2360  00A5               	movwf	(___ftge@ff2+2)^(0+128)
  9901  2361  31A2  22F9  31A3   	fcall	___ftge
  9902  2364  1803               	btfsc	3,0
  9903  2365  2B6C               	goto	l8233
  9904  2366  309C               	movlw	156
  9905  2367  0022               	movlb	2	; select bank2
  9906  2368  00C8               	movwf	?_modSquare^(0+256)
  9907  2369  30FF               	movlw	255
  9908  236A  00C9               	movwf	(?_modSquare^(0+256)+1)
  9909  236B  0008               	return
  9910  236C                     l8233:	
  9911  236C  3064               	movlw	100
  9912  236D  0022               	movlb	2	; select bank2
  9913  236E  00C8               	movwf	?_modSquare^(0+256)
  9914  236F  3000               	movlw	0
  9915  2370  00C9               	movwf	(?_modSquare^(0+256)+1)
  9916  2371  0008               	return
  9917  2372                     __end_of_modSquare:	
  9918                           
  9919                           	psect	text19
  9920  1654                     __ptext19:	
  9921 ;; *************** function _modSin *****************
  9922 ;; Defined at:
  9923 ;;		line 51 in file "modulation.c"
  9924 ;; Parameters:    Size  Location     Type
  9925 ;;  angle           3   20[BANK2 ] int 
  9926 ;;  inflection      3   23[BANK2 ] int 
  9927 ;; Auto vars:     Size  Location     Type
  9928 ;;  tmpVal          3   37[BANK2 ] int 
  9929 ;;  period          3   34[BANK2 ] int 
  9930 ;;  shift           3   31[BANK2 ] int 
  9931 ;; Return value:  Size  Location     Type
  9932 ;;                  2   20[BANK2 ] int 
  9933 ;; Registers used:
  9934 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9935 ;; Tracked objects:
  9936 ;;		On entry : 0/0
  9937 ;;		On exit  : 0/0
  9938 ;;		Unchanged: 0/0
  9939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9940 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9941 ;;      Locals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9942 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9943 ;;      Totals:         0       0       0      20       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9944 ;;Total ram usage:       20 bytes
  9945 ;; Hardware stack levels used:    1
  9946 ;; Hardware stack levels required when called:    5
  9947 ;; This function calls:
  9948 ;;		___ftadd
  9949 ;;		___ftdiv
  9950 ;;		___ftge
  9951 ;;		___ftmul
  9952 ;;		___ftneg
  9953 ;;		___fttol
  9954 ;;		___wmul
  9955 ;; This function is called by:
  9956 ;;		_updateModulationArray
  9957 ;;		_modSquare
  9958 ;; This function uses a non-reentrant model
  9959 ;;
  9960                           
  9961                           
  9962                           ;psect for function _modSin
  9963  1654                     _modSin:	
  9964                           
  9965                           ;modulation.c: 52: double period = 1.0;
  9966                           
  9967                           ;incstack = 0
  9968                           ; Regs used in _modSin: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9969  1654  3000               	movlw	0
  9970  1655  0022               	movlb	2	; select bank2
  9971  1656  00C2               	movwf	modSin@period^(0+256)
  9972  1657  3080               	movlw	128
  9973  1658  00C3               	movwf	(modSin@period+1)^(0+256)
  9974  1659  303F               	movlw	63
  9975  165A  00C4               	movwf	(modSin@period+2)^(0+256)
  9976                           
  9977                           ;modulation.c: 53: double shift = 0.0;
  9978  165B  3000               	movlw	0
  9979  165C  00BF               	movwf	modSin@shift^(0+256)
  9980  165D  3000               	movlw	0
  9981  165E  00C0               	movwf	(modSin@shift+1)^(0+256)
  9982  165F  3000               	movlw	0
  9983  1660  00C1               	movwf	(modSin@shift+2)^(0+256)
  9984                           
  9985                           ;modulation.c: 55: if(angle<=inflection) {
  9986  1661  0837               	movf	modSin@inflection^(0+256),w
  9987  1662  0021               	movlb	1	; select bank1
  9988  1663  00A0               	movwf	___ftge@ff1^(0+128)
  9989  1664  0022               	movlb	2	; select bank2
  9990  1665  0838               	movf	(modSin@inflection+1)^(0+256),w
  9991  1666  0021               	movlb	1	; select bank1
  9992  1667  00A1               	movwf	(___ftge@ff1+1)^(0+128)
  9993  1668  0022               	movlb	2	; select bank2
  9994  1669  0839               	movf	(modSin@inflection+2)^(0+256),w
  9995  166A  0021               	movlb	1	; select bank1
  9996  166B  00A2               	movwf	(___ftge@ff1+2)^(0+128)
  9997  166C  0022               	movlb	2	; select bank2
  9998  166D  0834               	movf	modSin@angle^(0+256),w
  9999  166E  0021               	movlb	1	; select bank1
 10000  166F  00A3               	movwf	___ftge@ff2^(0+128)
 10001  1670  0022               	movlb	2	; select bank2
 10002  1671  0835               	movf	(modSin@angle+1)^(0+256),w
 10003  1672  0021               	movlb	1	; select bank1
 10004  1673  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10005  1674  0022               	movlb	2	; select bank2
 10006  1675  0836               	movf	(modSin@angle+2)^(0+256),w
 10007  1676  0021               	movlb	1	; select bank1
 10008  1677  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10009  1678  31A2  22F9  3196   	fcall	___ftge
 10010  167B  1C03               	btfss	3,0
 10011  167C  2E89               	goto	l7891
 10012                           
 10013                           ;modulation.c: 56: period = 180.0/inflection;
 10014  167D  0022               	movlb	2	; select bank2
 10015  167E  0837               	movf	modSin@inflection^(0+256),w
 10016  167F  0021               	movlb	1	; select bank1
 10017  1680  00CE               	movwf	___ftdiv@f2^(0+128)
 10018  1681  0022               	movlb	2	; select bank2
 10019  1682  0838               	movf	(modSin@inflection+1)^(0+256),w
 10020  1683  0021               	movlb	1	; select bank1
 10021  1684  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10022  1685  0022               	movlb	2	; select bank2
 10023  1686  0839               	movf	(modSin@inflection+2)^(0+256),w
 10024  1687  0021               	movlb	1	; select bank1
 10025  1688  2F44               	goto	L8
 10026  1689                     l7891:	
 10027                           ;modulation.c: 57: } else {
 10028                           
 10029                           
 10030                           ;modulation.c: 58: shift = -(360-inflection*2)*(180/(360-inflection));
 10031  1689  0022               	movlb	2	; select bank2
 10032  168A  0837               	movf	modSin@inflection^(0+256),w
 10033  168B  0021               	movlb	1	; select bank1
 10034  168C  00B1               	movwf	___ftmul@f2^(0+128)
 10035  168D  0022               	movlb	2	; select bank2
 10036  168E  0838               	movf	(modSin@inflection+1)^(0+256),w
 10037  168F  0021               	movlb	1	; select bank1
 10038  1690  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10039  1691  0022               	movlb	2	; select bank2
 10040  1692  0839               	movf	(modSin@inflection+2)^(0+256),w
 10041  1693  0021               	movlb	1	; select bank1
 10042  1694  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10043  1695  3000               	movlw	0
 10044  1696  00AE               	movwf	___ftmul@f1^(0+128)
 10045  1697  3000               	movlw	0
 10046  1698  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10047  1699  3040               	movlw	64
 10048  169A  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10049  169B  319E  2691  3196   	fcall	___ftmul
 10050  169E  0021               	movlb	1	; select bank1
 10051  169F  082E               	movf	?___ftmul^(0+128),w
 10052  16A0  00BE               	movwf	___ftneg@f1^(0+128)
 10053  16A1  082F               	movf	(?___ftmul+1)^(0+128),w
 10054  16A2  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10055  16A3  0830               	movf	(?___ftmul+2)^(0+128),w
 10056  16A4  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10057  16A5  31AF  27BA  3196   	fcall	___ftneg
 10058  16A8  0021               	movlb	1	; select bank1
 10059  16A9  083E               	movf	?___ftneg^(0+128),w
 10060  16AA  00C4               	movwf	___ftadd@f2^(0+128)
 10061  16AB  083F               	movf	(?___ftneg+1)^(0+128),w
 10062  16AC  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10063  16AD  0840               	movf	(?___ftneg+2)^(0+128),w
 10064  16AE  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10065  16AF  3000               	movlw	0
 10066  16B0  00C1               	movwf	___ftadd@f1^(0+128)
 10067  16B1  30B4               	movlw	180
 10068  16B2  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10069  16B3  3043               	movlw	67
 10070  16B4  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10071  16B5  3192  225B  3196   	fcall	___ftadd
 10072  16B8  0021               	movlb	1	; select bank1
 10073  16B9  0841               	movf	?___ftadd^(0+128),w
 10074  16BA  0022               	movlb	2	; select bank2
 10075  16BB  00BC               	movwf	_modSin$2819^(0+256)
 10076  16BC  0021               	movlb	1	; select bank1
 10077  16BD  0842               	movf	(?___ftadd+1)^(0+128),w
 10078  16BE  0022               	movlb	2	; select bank2
 10079  16BF  00BD               	movwf	(_modSin$2819+1)^(0+256)
 10080  16C0  0021               	movlb	1	; select bank1
 10081  16C1  0843               	movf	(?___ftadd+2)^(0+128),w
 10082  16C2  0022               	movlb	2	; select bank2
 10083  16C3  00BE               	movwf	(_modSin$2819+2)^(0+256)
 10084                           
 10085                           ;modulation.c: 58: shift = -(360-inflection*2)*(180/(360-inflection));
 10086  16C4  083C               	movf	_modSin$2819^(0+256),w
 10087  16C5  0021               	movlb	1	; select bank1
 10088  16C6  00BE               	movwf	___ftneg@f1^(0+128)
 10089  16C7  0022               	movlb	2	; select bank2
 10090  16C8  083D               	movf	(_modSin$2819+1)^(0+256),w
 10091  16C9  0021               	movlb	1	; select bank1
 10092  16CA  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10093  16CB  0022               	movlb	2	; select bank2
 10094  16CC  083E               	movf	(_modSin$2819+2)^(0+256),w
 10095  16CD  0021               	movlb	1	; select bank1
 10096  16CE  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10097  16CF  31AF  27BA  3196   	fcall	___ftneg
 10098  16D2  0021               	movlb	1	; select bank1
 10099  16D3  083E               	movf	?___ftneg^(0+128),w
 10100  16D4  00AE               	movwf	___ftmul@f1^(0+128)
 10101  16D5  083F               	movf	(?___ftneg+1)^(0+128),w
 10102  16D6  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10103  16D7  0840               	movf	(?___ftneg+2)^(0+128),w
 10104  16D8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10105  16D9  3000               	movlw	0
 10106  16DA  00C1               	movwf	___ftadd@f1^(0+128)
 10107  16DB  30B4               	movlw	180
 10108  16DC  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10109  16DD  3043               	movlw	67
 10110  16DE  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10111  16DF  0022               	movlb	2	; select bank2
 10112  16E0  0837               	movf	modSin@inflection^(0+256),w
 10113  16E1  0021               	movlb	1	; select bank1
 10114  16E2  00BE               	movwf	___ftneg@f1^(0+128)
 10115  16E3  0022               	movlb	2	; select bank2
 10116  16E4  0838               	movf	(modSin@inflection+1)^(0+256),w
 10117  16E5  0021               	movlb	1	; select bank1
 10118  16E6  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10119  16E7  0022               	movlb	2	; select bank2
 10120  16E8  0839               	movf	(modSin@inflection+2)^(0+256),w
 10121  16E9  0021               	movlb	1	; select bank1
 10122  16EA  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10123  16EB  31AF  27BA  3196   	fcall	___ftneg
 10124  16EE  0021               	movlb	1	; select bank1
 10125  16EF  083E               	movf	?___ftneg^(0+128),w
 10126  16F0  00C4               	movwf	___ftadd@f2^(0+128)
 10127  16F1  083F               	movf	(?___ftneg+1)^(0+128),w
 10128  16F2  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10129  16F3  0840               	movf	(?___ftneg+2)^(0+128),w
 10130  16F4  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10131  16F5  3192  225B  3196   	fcall	___ftadd
 10132  16F8  0021               	movlb	1	; select bank1
 10133  16F9  0841               	movf	?___ftadd^(0+128),w
 10134  16FA  00CE               	movwf	___ftdiv@f2^(0+128)
 10135  16FB  0842               	movf	(?___ftadd+1)^(0+128),w
 10136  16FC  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10137  16FD  0843               	movf	(?___ftadd+2)^(0+128),w
 10138  16FE  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10139  16FF  3000               	movlw	0
 10140  1700  00D1               	movwf	___ftdiv@f1^(0+128)
 10141  1701  3034               	movlw	52
 10142  1702  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10143  1703  3043               	movlw	67
 10144  1704  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10145  1705  319D  253D  3196   	fcall	___ftdiv
 10146  1708  0021               	movlb	1	; select bank1
 10147  1709  084E               	movf	?___ftdiv^(0+128),w
 10148  170A  00B1               	movwf	___ftmul@f2^(0+128)
 10149  170B  084F               	movf	(?___ftdiv+1)^(0+128),w
 10150  170C  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10151  170D  0850               	movf	(?___ftdiv+2)^(0+128),w
 10152  170E  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10153  170F  319E  2691  3196   	fcall	___ftmul
 10154  1712  0021               	movlb	1	; select bank1
 10155  1713  082E               	movf	?___ftmul^(0+128),w
 10156  1714  0022               	movlb	2	; select bank2
 10157  1715  00BF               	movwf	modSin@shift^(0+256)
 10158  1716  0021               	movlb	1	; select bank1
 10159  1717  082F               	movf	(?___ftmul+1)^(0+128),w
 10160  1718  0022               	movlb	2	; select bank2
 10161  1719  00C0               	movwf	(modSin@shift+1)^(0+256)
 10162  171A  0021               	movlb	1	; select bank1
 10163  171B  0830               	movf	(?___ftmul+2)^(0+128),w
 10164  171C  0022               	movlb	2	; select bank2
 10165  171D  00C1               	movwf	(modSin@shift+2)^(0+256)
 10166                           
 10167                           ;modulation.c: 59: period = 180/(360-inflection);
 10168  171E  3000               	movlw	0
 10169  171F  0021               	movlb	1	; select bank1
 10170  1720  00C1               	movwf	___ftadd@f1^(0+128)
 10171  1721  30B4               	movlw	180
 10172  1722  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10173  1723  3043               	movlw	67
 10174  1724  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10175  1725  0022               	movlb	2	; select bank2
 10176  1726  0837               	movf	modSin@inflection^(0+256),w
 10177  1727  0021               	movlb	1	; select bank1
 10178  1728  00BE               	movwf	___ftneg@f1^(0+128)
 10179  1729  0022               	movlb	2	; select bank2
 10180  172A  0838               	movf	(modSin@inflection+1)^(0+256),w
 10181  172B  0021               	movlb	1	; select bank1
 10182  172C  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10183  172D  0022               	movlb	2	; select bank2
 10184  172E  0839               	movf	(modSin@inflection+2)^(0+256),w
 10185  172F  0021               	movlb	1	; select bank1
 10186  1730  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10187  1731  31AF  27BA  3196   	fcall	___ftneg
 10188  1734  0021               	movlb	1	; select bank1
 10189  1735  083E               	movf	?___ftneg^(0+128),w
 10190  1736  00C4               	movwf	___ftadd@f2^(0+128)
 10191  1737  083F               	movf	(?___ftneg+1)^(0+128),w
 10192  1738  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10193  1739  0840               	movf	(?___ftneg+2)^(0+128),w
 10194  173A  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10195  173B  3192  225B  3196   	fcall	___ftadd
 10196  173E  0021               	movlb	1	; select bank1
 10197  173F  0841               	movf	?___ftadd^(0+128),w
 10198  1740  00CE               	movwf	___ftdiv@f2^(0+128)
 10199  1741  0842               	movf	(?___ftadd+1)^(0+128),w
 10200  1742  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10201  1743  0843               	movf	(?___ftadd+2)^(0+128),w
 10202  1744                     L8:	
 10203  1744  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10204  1745  3000               	movlw	0
 10205  1746  00D1               	movwf	___ftdiv@f1^(0+128)
 10206  1747  3034               	movlw	52
 10207  1748  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10208  1749  3043               	movlw	67
 10209  174A  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10210  174B  319D  253D  3196   	fcall	___ftdiv
 10211  174E  0021               	movlb	1	; select bank1
 10212  174F  084E               	movf	?___ftdiv^(0+128),w
 10213  1750  0022               	movlb	2	; select bank2
 10214  1751  00C2               	movwf	modSin@period^(0+256)
 10215  1752  0021               	movlb	1	; select bank1
 10216  1753  084F               	movf	(?___ftdiv+1)^(0+128),w
 10217  1754  0022               	movlb	2	; select bank2
 10218  1755  00C3               	movwf	(modSin@period+1)^(0+256)
 10219  1756  0021               	movlb	1	; select bank1
 10220  1757  0850               	movf	(?___ftdiv+2)^(0+128),w
 10221  1758  0022               	movlb	2	; select bank2
 10222  1759  00C4               	movwf	(modSin@period+2)^(0+256)
 10223                           
 10224                           ;modulation.c: 61: }
 10225                           ;modulation.c: 62: double tmpVal = (period*angle-shift) /3;
 10226  175A  3000               	movlw	0
 10227  175B  0021               	movlb	1	; select bank1
 10228  175C  00CE               	movwf	___ftdiv@f2^(0+128)
 10229  175D  3040               	movlw	64
 10230  175E  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10231  175F  3040               	movlw	64
 10232  1760  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10233  1761  0022               	movlb	2	; select bank2
 10234  1762  083F               	movf	modSin@shift^(0+256),w
 10235  1763  0021               	movlb	1	; select bank1
 10236  1764  00BE               	movwf	___ftneg@f1^(0+128)
 10237  1765  0022               	movlb	2	; select bank2
 10238  1766  0840               	movf	(modSin@shift+1)^(0+256),w
 10239  1767  0021               	movlb	1	; select bank1
 10240  1768  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10241  1769  0022               	movlb	2	; select bank2
 10242  176A  0841               	movf	(modSin@shift+2)^(0+256),w
 10243  176B  0021               	movlb	1	; select bank1
 10244  176C  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10245  176D  31AF  27BA  3196   	fcall	___ftneg
 10246  1770  0021               	movlb	1	; select bank1
 10247  1771  083E               	movf	?___ftneg^(0+128),w
 10248  1772  00C1               	movwf	___ftadd@f1^(0+128)
 10249  1773  083F               	movf	(?___ftneg+1)^(0+128),w
 10250  1774  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10251  1775  0840               	movf	(?___ftneg+2)^(0+128),w
 10252  1776  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10253  1777  0022               	movlb	2	; select bank2
 10254  1778  0834               	movf	modSin@angle^(0+256),w
 10255  1779  0021               	movlb	1	; select bank1
 10256  177A  00AE               	movwf	___ftmul@f1^(0+128)
 10257  177B  0022               	movlb	2	; select bank2
 10258  177C  0835               	movf	(modSin@angle+1)^(0+256),w
 10259  177D  0021               	movlb	1	; select bank1
 10260  177E  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10261  177F  0022               	movlb	2	; select bank2
 10262  1780  0836               	movf	(modSin@angle+2)^(0+256),w
 10263  1781  0021               	movlb	1	; select bank1
 10264  1782  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10265  1783  0022               	movlb	2	; select bank2
 10266  1784  0842               	movf	modSin@period^(0+256),w
 10267  1785  0021               	movlb	1	; select bank1
 10268  1786  00B1               	movwf	___ftmul@f2^(0+128)
 10269  1787  0022               	movlb	2	; select bank2
 10270  1788  0843               	movf	(modSin@period+1)^(0+256),w
 10271  1789  0021               	movlb	1	; select bank1
 10272  178A  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10273  178B  0022               	movlb	2	; select bank2
 10274  178C  0844               	movf	(modSin@period+2)^(0+256),w
 10275  178D  0021               	movlb	1	; select bank1
 10276  178E  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10277  178F  319E  2691  3196   	fcall	___ftmul
 10278  1792  0021               	movlb	1	; select bank1
 10279  1793  082E               	movf	?___ftmul^(0+128),w
 10280  1794  00C4               	movwf	___ftadd@f2^(0+128)
 10281  1795  082F               	movf	(?___ftmul+1)^(0+128),w
 10282  1796  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10283  1797  0830               	movf	(?___ftmul+2)^(0+128),w
 10284  1798  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10285  1799  3192  225B  3196   	fcall	___ftadd
 10286  179C  0021               	movlb	1	; select bank1
 10287  179D  0841               	movf	?___ftadd^(0+128),w
 10288  179E  00D1               	movwf	___ftdiv@f1^(0+128)
 10289  179F  0842               	movf	(?___ftadd+1)^(0+128),w
 10290  17A0  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10291  17A1  0843               	movf	(?___ftadd+2)^(0+128),w
 10292  17A2  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10293  17A3  319D  253D  3196   	fcall	___ftdiv
 10294  17A6  0021               	movlb	1	; select bank1
 10295  17A7  084E               	movf	?___ftdiv^(0+128),w
 10296  17A8  0022               	movlb	2	; select bank2
 10297  17A9  00C5               	movwf	modSin@tmpVal^(0+256)
 10298  17AA  0021               	movlb	1	; select bank1
 10299  17AB  084F               	movf	(?___ftdiv+1)^(0+128),w
 10300  17AC  0022               	movlb	2	; select bank2
 10301  17AD  00C6               	movwf	(modSin@tmpVal+1)^(0+256)
 10302  17AE  0021               	movlb	1	; select bank1
 10303  17AF  0850               	movf	(?___ftdiv+2)^(0+128),w
 10304  17B0  0022               	movlb	2	; select bank2
 10305  17B1  00C7               	movwf	(modSin@tmpVal+2)^(0+256)
 10306                           
 10307                           ;modulation.c: 63: tmpVal = sinArray[(int)(tmpVal)];
 10308  17B2  0845               	movf	modSin@tmpVal^(0+256),w
 10309  17B3  00A0               	movwf	___fttol@f1^(0+256)
 10310  17B4  0846               	movf	(modSin@tmpVal+1)^(0+256),w
 10311  17B5  00A1               	movwf	(___fttol@f1+1)^(0+256)
 10312  17B6  0847               	movf	(modSin@tmpVal+2)^(0+256),w
 10313  17B7  00A2               	movwf	(___fttol@f1+2)^(0+256)
 10314  17B8  319A  22FD  3196   	fcall	___fttol
 10315  17BB  0022               	movlb	2	; select bank2
 10316  17BC  0821               	movf	(?___fttol^(0+256)+1),w
 10317  17BD  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 10318  17BE  0820               	movf	?___fttol^(0+256),w
 10319  17BF  00AE               	movwf	___wmul@multiplier^(0+256)
 10320  17C0  3003               	movlw	3
 10321  17C1  00B0               	movwf	___wmul@multiplicand^(0+256)
 10322  17C2  3000               	movlw	0
 10323  17C3  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 10324  17C4  31A0  2095  3196   	fcall	___wmul
 10325  17C7  3082               	movlw	130
 10326  17C8  0022               	movlb	2	; select bank2
 10327  17C9  00BA               	movwf	??_modSin^(0+256)
 10328  17CA  3024               	movlw	36
 10329  17CB  00BB               	movwf	(??_modSin^(0+256)+1)
 10330  17CC  082E               	movf	?___wmul^(0+256),w
 10331  17CD  073A               	addwf	??_modSin^(0+256),w
 10332  17CE  0086               	movwf	6
 10333  17CF  082F               	movf	(?___wmul+1)^(0+256),w
 10334  17D0  3D3B               	addwfc	(??_modSin+1)^(0+256),w
 10335  17D1  0087               	movwf	7
 10336  17D2  3F40               	moviw [0]fsr1
 10337  17D3  00C5               	movwf	modSin@tmpVal^(0+256)
 10338  17D4  3F41               	moviw [1]fsr1
 10339  17D5  00C6               	movwf	(modSin@tmpVal+1)^(0+256)
 10340  17D6  3F42               	moviw [2]fsr1
 10341  17D7  00C7               	movwf	(modSin@tmpVal+2)^(0+256)
 10342                           
 10343                           ;modulation.c: 64: return (int)(100.0 * tmpVal);
 10344  17D8  0845               	movf	modSin@tmpVal^(0+256),w
 10345  17D9  0021               	movlb	1	; select bank1
 10346  17DA  00B1               	movwf	___ftmul@f2^(0+128)
 10347  17DB  0022               	movlb	2	; select bank2
 10348  17DC  0846               	movf	(modSin@tmpVal+1)^(0+256),w
 10349  17DD  0021               	movlb	1	; select bank1
 10350  17DE  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10351  17DF  0022               	movlb	2	; select bank2
 10352  17E0  0847               	movf	(modSin@tmpVal+2)^(0+256),w
 10353  17E1  0021               	movlb	1	; select bank1
 10354  17E2  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10355  17E3  3000               	movlw	0
 10356  17E4  00AE               	movwf	___ftmul@f1^(0+128)
 10357  17E5  30C8               	movlw	200
 10358  17E6  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10359  17E7  3042               	movlw	66
 10360  17E8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10361  17E9  319E  2691  3196   	fcall	___ftmul
 10362  17EC  0021               	movlb	1	; select bank1
 10363  17ED  082E               	movf	?___ftmul^(0+128),w
 10364  17EE  0022               	movlb	2	; select bank2
 10365  17EF  00A0               	movwf	___fttol@f1^(0+256)
 10366  17F0  0021               	movlb	1	; select bank1
 10367  17F1  082F               	movf	(?___ftmul+1)^(0+128),w
 10368  17F2  0022               	movlb	2	; select bank2
 10369  17F3  00A1               	movwf	(___fttol@f1+1)^(0+256)
 10370  17F4  0021               	movlb	1	; select bank1
 10371  17F5  0830               	movf	(?___ftmul+2)^(0+128),w
 10372  17F6  0022               	movlb	2	; select bank2
 10373  17F7  00A2               	movwf	(___fttol@f1+2)^(0+256)
 10374  17F8  319A  22FD         	fcall	___fttol
 10375  17FA  0022               	movlb	2	; select bank2
 10376  17FB  0821               	movf	(?___fttol^(0+256)+1),w
 10377  17FC  00B5               	movwf	(?_modSin+1)^(0+256)
 10378  17FD  0820               	movf	?___fttol^(0+256),w
 10379  17FE  00B4               	movwf	?_modSin^(0+256)
 10380  17FF  0008               	return
 10381  1800                     __end_of_modSin:	
 10382                           
 10383                           	psect	text20
 10384  20B1                     __ptext20:	
 10385 ;; *************** function _modSawRev *****************
 10386 ;; Defined at:
 10387 ;;		line 106 in file "modulation.c"
 10388 ;; Parameters:    Size  Location     Type
 10389 ;;  angle           3   37[BANK2 ] int 
 10390 ;;  inflection      3   40[BANK2 ] int 
 10391 ;; Auto vars:     Size  Location     Type
 10392 ;;		None
 10393 ;; Return value:  Size  Location     Type
 10394 ;;                  2   37[BANK2 ] int 
 10395 ;; Registers used:
 10396 ;;		wreg, status,2, status,0, pclath, cstack
 10397 ;; Tracked objects:
 10398 ;;		On entry : 0/0
 10399 ;;		On exit  : 0/0
 10400 ;;		Unchanged: 0/0
 10401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10402 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10404 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10405 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10406 ;;Total ram usage:        8 bytes
 10407 ;; Hardware stack levels used:    1
 10408 ;; Hardware stack levels required when called:    6
 10409 ;; This function calls:
 10410 ;;		_modSaw
 10411 ;; This function is called by:
 10412 ;;		_updateModulationArray
 10413 ;; This function uses a non-reentrant model
 10414 ;;
 10415                           
 10416                           
 10417                           ;psect for function _modSawRev
 10418  20B1                     _modSawRev:	
 10419                           
 10420                           ;modulation.c: 107: return -1 * modSaw(angle, inflection);
 10421                           
 10422                           ;incstack = 0
 10423                           ; Regs used in _modSawRev: [wreg+status,2+status,0+pclath+cstack]
 10424  20B1  0022               	movlb	2	; select bank2
 10425  20B2  0845               	movf	modSawRev@angle^(0+256),w
 10426  20B3  00AE               	movwf	modSaw@angle^(0+256)
 10427  20B4  0846               	movf	(modSawRev@angle+1)^(0+256),w
 10428  20B5  00AF               	movwf	(modSaw@angle+1)^(0+256)
 10429  20B6  0847               	movf	(modSawRev@angle+2)^(0+256),w
 10430  20B7  00B0               	movwf	(modSaw@angle+2)^(0+256)
 10431  20B8  0848               	movf	modSawRev@inflection^(0+256),w
 10432  20B9  00B1               	movwf	modSaw@inflection^(0+256)
 10433  20BA  0849               	movf	(modSawRev@inflection+1)^(0+256),w
 10434  20BB  00B2               	movwf	(modSaw@inflection+1)^(0+256)
 10435  20BC  084A               	movf	(modSawRev@inflection+2)^(0+256),w
 10436  20BD  00B3               	movwf	(modSaw@inflection+2)^(0+256)
 10437  20BE  3194  24AA         	fcall	_modSaw
 10438  20C0  0022               	movlb	2	; select bank2
 10439  20C1  092E               	comf	?_modSaw^(0+256),w
 10440  20C2  00CB               	movwf	??_modSawRev^(0+256)
 10441  20C3  092F               	comf	(?_modSaw+1)^(0+256),w
 10442  20C4  00CC               	movwf	(??_modSawRev^(0+256)+1)
 10443  20C5  0ACB               	incf	??_modSawRev^(0+256),f
 10444  20C6  1903               	skipnz
 10445  20C7  0ACC               	incf	(??_modSawRev^(0+256)+1),f
 10446  20C8  084B               	movf	??_modSawRev^(0+256),w
 10447  20C9  00C5               	movwf	?_modSawRev^(0+256)
 10448  20CA  084C               	movf	(??_modSawRev+1)^(0+256),w
 10449  20CB  00C6               	movwf	(?_modSawRev+1)^(0+256)
 10450  20CC  0008               	return
 10451  20CD                     __end_of_modSawRev:	
 10452                           
 10453                           	psect	text21
 10454  14AA                     __ptext21:	
 10455 ;; *************** function _modSaw *****************
 10456 ;; Defined at:
 10457 ;;		line 90 in file "modulation.c"
 10458 ;; Parameters:    Size  Location     Type
 10459 ;;  angle           3   14[BANK2 ] int 
 10460 ;;  inflection      3   17[BANK2 ] int 
 10461 ;; Auto vars:     Size  Location     Type
 10462 ;;  period          3   34[BANK2 ] int 
 10463 ;;  shift           3   31[BANK2 ] int 
 10464 ;;  mod             2   29[BANK2 ] int 
 10465 ;; Return value:  Size  Location     Type
 10466 ;;                  2   14[BANK2 ] int 
 10467 ;; Registers used:
 10468 ;;		wreg, status,2, status,0, pclath, cstack
 10469 ;; Tracked objects:
 10470 ;;		On entry : 0/0
 10471 ;;		On exit  : 0/0
 10472 ;;		Unchanged: 0/0
 10473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10474 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10475 ;;      Locals:         0       0       0      17       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10477 ;;      Totals:         0       0       0      23       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10478 ;;Total ram usage:       23 bytes
 10479 ;; Hardware stack levels used:    1
 10480 ;; Hardware stack levels required when called:    5
 10481 ;; This function calls:
 10482 ;;		___ftadd
 10483 ;;		___ftdiv
 10484 ;;		___ftge
 10485 ;;		___ftmul
 10486 ;;		___ftneg
 10487 ;;		___fttol
 10488 ;; This function is called by:
 10489 ;;		_updateModulationArray
 10490 ;;		_modSawRev
 10491 ;; This function uses a non-reentrant model
 10492 ;;
 10493                           
 10494                           
 10495                           ;psect for function _modSaw
 10496  14AA                     _modSaw:	
 10497                           
 10498                           ;modulation.c: 91: double period = 1.0;
 10499                           
 10500                           ;incstack = 0
 10501                           ; Regs used in _modSaw: [wreg+status,2+status,0+pclath+cstack]
 10502  14AA  3000               	movlw	0
 10503  14AB  0022               	movlb	2	; select bank2
 10504  14AC  00C2               	movwf	modSaw@period^(0+256)
 10505  14AD  3080               	movlw	128
 10506  14AE  00C3               	movwf	(modSaw@period+1)^(0+256)
 10507  14AF  303F               	movlw	63
 10508  14B0  00C4               	movwf	(modSaw@period+2)^(0+256)
 10509                           
 10510                           ;modulation.c: 92: double shift = 0;
 10511  14B1  3000               	movlw	0
 10512  14B2  00BF               	movwf	modSaw@shift^(0+256)
 10513  14B3  3000               	movlw	0
 10514  14B4  00C0               	movwf	(modSaw@shift+1)^(0+256)
 10515  14B5  3000               	movlw	0
 10516  14B6  00C1               	movwf	(modSaw@shift+2)^(0+256)
 10517                           
 10518                           ;modulation.c: 94: if(angle<=inflection) {
 10519  14B7  0831               	movf	modSaw@inflection^(0+256),w
 10520  14B8  0021               	movlb	1	; select bank1
 10521  14B9  00A0               	movwf	___ftge@ff1^(0+128)
 10522  14BA  0022               	movlb	2	; select bank2
 10523  14BB  0832               	movf	(modSaw@inflection+1)^(0+256),w
 10524  14BC  0021               	movlb	1	; select bank1
 10525  14BD  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10526  14BE  0022               	movlb	2	; select bank2
 10527  14BF  0833               	movf	(modSaw@inflection+2)^(0+256),w
 10528  14C0  0021               	movlb	1	; select bank1
 10529  14C1  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10530  14C2  0022               	movlb	2	; select bank2
 10531  14C3  082E               	movf	modSaw@angle^(0+256),w
 10532  14C4  0021               	movlb	1	; select bank1
 10533  14C5  00A3               	movwf	___ftge@ff2^(0+128)
 10534  14C6  0022               	movlb	2	; select bank2
 10535  14C7  082F               	movf	(modSaw@angle+1)^(0+256),w
 10536  14C8  0021               	movlb	1	; select bank1
 10537  14C9  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10538  14CA  0022               	movlb	2	; select bank2
 10539  14CB  0830               	movf	(modSaw@angle+2)^(0+256),w
 10540  14CC  0021               	movlb	1	; select bank1
 10541  14CD  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10542  14CE  31A2  22F9  3194   	fcall	___ftge
 10543  14D1  1C03               	btfss	3,0
 10544  14D2  2CDF               	goto	l7905
 10545                           
 10546                           ;modulation.c: 95: period = 180.0/inflection;
 10547  14D3  0022               	movlb	2	; select bank2
 10548  14D4  0831               	movf	modSaw@inflection^(0+256),w
 10549  14D5  0021               	movlb	1	; select bank1
 10550  14D6  00CE               	movwf	___ftdiv@f2^(0+128)
 10551  14D7  0022               	movlb	2	; select bank2
 10552  14D8  0832               	movf	(modSaw@inflection+1)^(0+256),w
 10553  14D9  0021               	movlb	1	; select bank1
 10554  14DA  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10555  14DB  0022               	movlb	2	; select bank2
 10556  14DC  0833               	movf	(modSaw@inflection+2)^(0+256),w
 10557  14DD  0021               	movlb	1	; select bank1
 10558  14DE  2DBC               	goto	L9
 10559  14DF                     l7905:	
 10560                           ;modulation.c: 96: } else {
 10561                           
 10562                           
 10563                           ;modulation.c: 97: shift = -(360-inflection*2)*(180/(360-inflection)) + 360;
 10564  14DF  0022               	movlb	2	; select bank2
 10565  14E0  0831               	movf	modSaw@inflection^(0+256),w
 10566  14E1  0021               	movlb	1	; select bank1
 10567  14E2  00B1               	movwf	___ftmul@f2^(0+128)
 10568  14E3  0022               	movlb	2	; select bank2
 10569  14E4  0832               	movf	(modSaw@inflection+1)^(0+256),w
 10570  14E5  0021               	movlb	1	; select bank1
 10571  14E6  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10572  14E7  0022               	movlb	2	; select bank2
 10573  14E8  0833               	movf	(modSaw@inflection+2)^(0+256),w
 10574  14E9  0021               	movlb	1	; select bank1
 10575  14EA  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10576  14EB  3000               	movlw	0
 10577  14EC  00AE               	movwf	___ftmul@f1^(0+128)
 10578  14ED  3000               	movlw	0
 10579  14EE  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10580  14EF  3040               	movlw	64
 10581  14F0  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10582  14F1  319E  2691  3194   	fcall	___ftmul
 10583  14F4  0021               	movlb	1	; select bank1
 10584  14F5  082E               	movf	?___ftmul^(0+128),w
 10585  14F6  00BE               	movwf	___ftneg@f1^(0+128)
 10586  14F7  082F               	movf	(?___ftmul+1)^(0+128),w
 10587  14F8  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10588  14F9  0830               	movf	(?___ftmul+2)^(0+128),w
 10589  14FA  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10590  14FB  31AF  27BA  3194   	fcall	___ftneg
 10591  14FE  0021               	movlb	1	; select bank1
 10592  14FF  083E               	movf	?___ftneg^(0+128),w
 10593  1500  00C4               	movwf	___ftadd@f2^(0+128)
 10594  1501  083F               	movf	(?___ftneg+1)^(0+128),w
 10595  1502  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10596  1503  0840               	movf	(?___ftneg+2)^(0+128),w
 10597  1504  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10598  1505  3000               	movlw	0
 10599  1506  00C1               	movwf	___ftadd@f1^(0+128)
 10600  1507  30B4               	movlw	180
 10601  1508  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10602  1509  3043               	movlw	67
 10603  150A  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10604  150B  3192  225B  3194   	fcall	___ftadd
 10605  150E  0021               	movlb	1	; select bank1
 10606  150F  0841               	movf	?___ftadd^(0+128),w
 10607  1510  0022               	movlb	2	; select bank2
 10608  1511  00B4               	movwf	_modSaw$2821^(0+256)
 10609  1512  0021               	movlb	1	; select bank1
 10610  1513  0842               	movf	(?___ftadd+1)^(0+128),w
 10611  1514  0022               	movlb	2	; select bank2
 10612  1515  00B5               	movwf	(_modSaw$2821+1)^(0+256)
 10613  1516  0021               	movlb	1	; select bank1
 10614  1517  0843               	movf	(?___ftadd+2)^(0+128),w
 10615  1518  0022               	movlb	2	; select bank2
 10616  1519  00B6               	movwf	(_modSaw$2821+2)^(0+256)
 10617                           
 10618                           ;modulation.c: 97: shift = -(360-inflection*2)*(180/(360-inflection)) + 360;
 10619  151A  0834               	movf	_modSaw$2821^(0+256),w
 10620  151B  0021               	movlb	1	; select bank1
 10621  151C  00BE               	movwf	___ftneg@f1^(0+128)
 10622  151D  0022               	movlb	2	; select bank2
 10623  151E  0835               	movf	(_modSaw$2821+1)^(0+256),w
 10624  151F  0021               	movlb	1	; select bank1
 10625  1520  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10626  1521  0022               	movlb	2	; select bank2
 10627  1522  0836               	movf	(_modSaw$2821+2)^(0+256),w
 10628  1523  0021               	movlb	1	; select bank1
 10629  1524  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10630  1525  31AF  27BA  3194   	fcall	___ftneg
 10631  1528  0021               	movlb	1	; select bank1
 10632  1529  083E               	movf	?___ftneg^(0+128),w
 10633  152A  00AE               	movwf	___ftmul@f1^(0+128)
 10634  152B  083F               	movf	(?___ftneg+1)^(0+128),w
 10635  152C  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10636  152D  0840               	movf	(?___ftneg+2)^(0+128),w
 10637  152E  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10638  152F  3000               	movlw	0
 10639  1530  00C1               	movwf	___ftadd@f1^(0+128)
 10640  1531  30B4               	movlw	180
 10641  1532  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10642  1533  3043               	movlw	67
 10643  1534  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10644  1535  0022               	movlb	2	; select bank2
 10645  1536  0831               	movf	modSaw@inflection^(0+256),w
 10646  1537  0021               	movlb	1	; select bank1
 10647  1538  00BE               	movwf	___ftneg@f1^(0+128)
 10648  1539  0022               	movlb	2	; select bank2
 10649  153A  0832               	movf	(modSaw@inflection+1)^(0+256),w
 10650  153B  0021               	movlb	1	; select bank1
 10651  153C  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10652  153D  0022               	movlb	2	; select bank2
 10653  153E  0833               	movf	(modSaw@inflection+2)^(0+256),w
 10654  153F  0021               	movlb	1	; select bank1
 10655  1540  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10656  1541  31AF  27BA  3194   	fcall	___ftneg
 10657  1544  0021               	movlb	1	; select bank1
 10658  1545  083E               	movf	?___ftneg^(0+128),w
 10659  1546  00C4               	movwf	___ftadd@f2^(0+128)
 10660  1547  083F               	movf	(?___ftneg+1)^(0+128),w
 10661  1548  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10662  1549  0840               	movf	(?___ftneg+2)^(0+128),w
 10663  154A  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10664  154B  3192  225B  3194   	fcall	___ftadd
 10665  154E  0021               	movlb	1	; select bank1
 10666  154F  0841               	movf	?___ftadd^(0+128),w
 10667  1550  00CE               	movwf	___ftdiv@f2^(0+128)
 10668  1551  0842               	movf	(?___ftadd+1)^(0+128),w
 10669  1552  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10670  1553  0843               	movf	(?___ftadd+2)^(0+128),w
 10671  1554  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10672  1555  3000               	movlw	0
 10673  1556  00D1               	movwf	___ftdiv@f1^(0+128)
 10674  1557  3034               	movlw	52
 10675  1558  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10676  1559  3043               	movlw	67
 10677  155A  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10678  155B  319D  253D  3194   	fcall	___ftdiv
 10679  155E  0021               	movlb	1	; select bank1
 10680  155F  084E               	movf	?___ftdiv^(0+128),w
 10681  1560  00B1               	movwf	___ftmul@f2^(0+128)
 10682  1561  084F               	movf	(?___ftdiv+1)^(0+128),w
 10683  1562  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10684  1563  0850               	movf	(?___ftdiv+2)^(0+128),w
 10685  1564  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10686  1565  319E  2691  3194   	fcall	___ftmul
 10687  1568  0021               	movlb	1	; select bank1
 10688  1569  082E               	movf	?___ftmul^(0+128),w
 10689  156A  0022               	movlb	2	; select bank2
 10690  156B  00B7               	movwf	_modSaw$2822^(0+256)
 10691  156C  0021               	movlb	1	; select bank1
 10692  156D  082F               	movf	(?___ftmul+1)^(0+128),w
 10693  156E  0022               	movlb	2	; select bank2
 10694  156F  00B8               	movwf	(_modSaw$2822+1)^(0+256)
 10695  1570  0021               	movlb	1	; select bank1
 10696  1571  0830               	movf	(?___ftmul+2)^(0+128),w
 10697  1572  0022               	movlb	2	; select bank2
 10698  1573  00B9               	movwf	(_modSaw$2822+2)^(0+256)
 10699                           
 10700                           ;modulation.c: 97: shift = -(360-inflection*2)*(180/(360-inflection)) + 360;
 10701  1574  3000               	movlw	0
 10702  1575  0021               	movlb	1	; select bank1
 10703  1576  00C1               	movwf	___ftadd@f1^(0+128)
 10704  1577  30B4               	movlw	180
 10705  1578  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10706  1579  3043               	movlw	67
 10707  157A  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10708  157B  0022               	movlb	2	; select bank2
 10709  157C  0837               	movf	_modSaw$2822^(0+256),w
 10710  157D  0021               	movlb	1	; select bank1
 10711  157E  00C4               	movwf	___ftadd@f2^(0+128)
 10712  157F  0022               	movlb	2	; select bank2
 10713  1580  0838               	movf	(_modSaw$2822+1)^(0+256),w
 10714  1581  0021               	movlb	1	; select bank1
 10715  1582  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10716  1583  0022               	movlb	2	; select bank2
 10717  1584  0839               	movf	(_modSaw$2822+2)^(0+256),w
 10718  1585  0021               	movlb	1	; select bank1
 10719  1586  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10720  1587  3192  225B  3194   	fcall	___ftadd
 10721  158A  0021               	movlb	1	; select bank1
 10722  158B  0841               	movf	?___ftadd^(0+128),w
 10723  158C  0022               	movlb	2	; select bank2
 10724  158D  00BF               	movwf	modSaw@shift^(0+256)
 10725  158E  0021               	movlb	1	; select bank1
 10726  158F  0842               	movf	(?___ftadd+1)^(0+128),w
 10727  1590  0022               	movlb	2	; select bank2
 10728  1591  00C0               	movwf	(modSaw@shift+1)^(0+256)
 10729  1592  0021               	movlb	1	; select bank1
 10730  1593  0843               	movf	(?___ftadd+2)^(0+128),w
 10731  1594  0022               	movlb	2	; select bank2
 10732  1595  00C1               	movwf	(modSaw@shift+2)^(0+256)
 10733                           
 10734                           ;modulation.c: 98: period = 180/(360-inflection);
 10735  1596  3000               	movlw	0
 10736  1597  0021               	movlb	1	; select bank1
 10737  1598  00C1               	movwf	___ftadd@f1^(0+128)
 10738  1599  30B4               	movlw	180
 10739  159A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10740  159B  3043               	movlw	67
 10741  159C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10742  159D  0022               	movlb	2	; select bank2
 10743  159E  0831               	movf	modSaw@inflection^(0+256),w
 10744  159F  0021               	movlb	1	; select bank1
 10745  15A0  00BE               	movwf	___ftneg@f1^(0+128)
 10746  15A1  0022               	movlb	2	; select bank2
 10747  15A2  0832               	movf	(modSaw@inflection+1)^(0+256),w
 10748  15A3  0021               	movlb	1	; select bank1
 10749  15A4  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10750  15A5  0022               	movlb	2	; select bank2
 10751  15A6  0833               	movf	(modSaw@inflection+2)^(0+256),w
 10752  15A7  0021               	movlb	1	; select bank1
 10753  15A8  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10754  15A9  31AF  27BA  3194   	fcall	___ftneg
 10755  15AC  0021               	movlb	1	; select bank1
 10756  15AD  083E               	movf	?___ftneg^(0+128),w
 10757  15AE  00C4               	movwf	___ftadd@f2^(0+128)
 10758  15AF  083F               	movf	(?___ftneg+1)^(0+128),w
 10759  15B0  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10760  15B1  0840               	movf	(?___ftneg+2)^(0+128),w
 10761  15B2  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10762  15B3  3192  225B  3194   	fcall	___ftadd
 10763  15B6  0021               	movlb	1	; select bank1
 10764  15B7  0841               	movf	?___ftadd^(0+128),w
 10765  15B8  00CE               	movwf	___ftdiv@f2^(0+128)
 10766  15B9  0842               	movf	(?___ftadd+1)^(0+128),w
 10767  15BA  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10768  15BB  0843               	movf	(?___ftadd+2)^(0+128),w
 10769  15BC                     L9:	
 10770  15BC  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10771  15BD  3000               	movlw	0
 10772  15BE  00D1               	movwf	___ftdiv@f1^(0+128)
 10773  15BF  3034               	movlw	52
 10774  15C0  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10775  15C1  3043               	movlw	67
 10776  15C2  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10777  15C3  319D  253D  3194   	fcall	___ftdiv
 10778  15C6  0021               	movlb	1	; select bank1
 10779  15C7  084E               	movf	?___ftdiv^(0+128),w
 10780  15C8  0022               	movlb	2	; select bank2
 10781  15C9  00C2               	movwf	modSaw@period^(0+256)
 10782  15CA  0021               	movlb	1	; select bank1
 10783  15CB  084F               	movf	(?___ftdiv+1)^(0+128),w
 10784  15CC  0022               	movlb	2	; select bank2
 10785  15CD  00C3               	movwf	(modSaw@period+1)^(0+256)
 10786  15CE  0021               	movlb	1	; select bank1
 10787  15CF  0850               	movf	(?___ftdiv+2)^(0+128),w
 10788  15D0  0022               	movlb	2	; select bank2
 10789  15D1  00C4               	movwf	(modSaw@period+2)^(0+256)
 10790                           
 10791                           ;modulation.c: 99: }
 10792                           ;modulation.c: 102: int mod = (int)((period*angle-shift)*5/9);
 10793  15D2  0842               	movf	modSaw@period^(0+256),w
 10794  15D3  0021               	movlb	1	; select bank1
 10795  15D4  00B1               	movwf	___ftmul@f2^(0+128)
 10796  15D5  0022               	movlb	2	; select bank2
 10797  15D6  0843               	movf	(modSaw@period+1)^(0+256),w
 10798  15D7  0021               	movlb	1	; select bank1
 10799  15D8  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10800  15D9  0022               	movlb	2	; select bank2
 10801  15DA  0844               	movf	(modSaw@period+2)^(0+256),w
 10802  15DB  0021               	movlb	1	; select bank1
 10803  15DC  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10804  15DD  0022               	movlb	2	; select bank2
 10805  15DE  082E               	movf	modSaw@angle^(0+256),w
 10806  15DF  0021               	movlb	1	; select bank1
 10807  15E0  00AE               	movwf	___ftmul@f1^(0+128)
 10808  15E1  0022               	movlb	2	; select bank2
 10809  15E2  082F               	movf	(modSaw@angle+1)^(0+256),w
 10810  15E3  0021               	movlb	1	; select bank1
 10811  15E4  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10812  15E5  0022               	movlb	2	; select bank2
 10813  15E6  0830               	movf	(modSaw@angle+2)^(0+256),w
 10814  15E7  0021               	movlb	1	; select bank1
 10815  15E8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10816  15E9  319E  2691  3194   	fcall	___ftmul
 10817  15EC  0021               	movlb	1	; select bank1
 10818  15ED  082E               	movf	?___ftmul^(0+128),w
 10819  15EE  00C4               	movwf	___ftadd@f2^(0+128)
 10820  15EF  082F               	movf	(?___ftmul+1)^(0+128),w
 10821  15F0  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10822  15F1  0830               	movf	(?___ftmul+2)^(0+128),w
 10823  15F2  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10824  15F3  0022               	movlb	2	; select bank2
 10825  15F4  083F               	movf	modSaw@shift^(0+256),w
 10826  15F5  0021               	movlb	1	; select bank1
 10827  15F6  00BE               	movwf	___ftneg@f1^(0+128)
 10828  15F7  0022               	movlb	2	; select bank2
 10829  15F8  0840               	movf	(modSaw@shift+1)^(0+256),w
 10830  15F9  0021               	movlb	1	; select bank1
 10831  15FA  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10832  15FB  0022               	movlb	2	; select bank2
 10833  15FC  0841               	movf	(modSaw@shift+2)^(0+256),w
 10834  15FD  0021               	movlb	1	; select bank1
 10835  15FE  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10836  15FF  31AF  27BA  3194   	fcall	___ftneg
 10837  1602  0021               	movlb	1	; select bank1
 10838  1603  083E               	movf	?___ftneg^(0+128),w
 10839  1604  00C1               	movwf	___ftadd@f1^(0+128)
 10840  1605  083F               	movf	(?___ftneg+1)^(0+128),w
 10841  1606  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10842  1607  0840               	movf	(?___ftneg+2)^(0+128),w
 10843  1608  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10844  1609  3192  225B  3194   	fcall	___ftadd
 10845  160C  0021               	movlb	1	; select bank1
 10846  160D  0841               	movf	?___ftadd^(0+128),w
 10847  160E  0022               	movlb	2	; select bank2
 10848  160F  00BA               	movwf	_modSaw$2823^(0+256)
 10849  1610  0021               	movlb	1	; select bank1
 10850  1611  0842               	movf	(?___ftadd+1)^(0+128),w
 10851  1612  0022               	movlb	2	; select bank2
 10852  1613  00BB               	movwf	(_modSaw$2823+1)^(0+256)
 10853  1614  0021               	movlb	1	; select bank1
 10854  1615  0843               	movf	(?___ftadd+2)^(0+128),w
 10855  1616  0022               	movlb	2	; select bank2
 10856  1617  00BC               	movwf	(_modSaw$2823+2)^(0+256)
 10857                           
 10858                           ;modulation.c: 99: }
 10859                           ;modulation.c: 102: int mod = (int)((period*angle-shift)*5/9);
 10860  1618  083A               	movf	_modSaw$2823^(0+256),w
 10861  1619  0021               	movlb	1	; select bank1
 10862  161A  00B1               	movwf	___ftmul@f2^(0+128)
 10863  161B  0022               	movlb	2	; select bank2
 10864  161C  083B               	movf	(_modSaw$2823+1)^(0+256),w
 10865  161D  0021               	movlb	1	; select bank1
 10866  161E  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10867  161F  0022               	movlb	2	; select bank2
 10868  1620  083C               	movf	(_modSaw$2823+2)^(0+256),w
 10869  1621  0021               	movlb	1	; select bank1
 10870  1622  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10871  1623  3000               	movlw	0
 10872  1624  00AE               	movwf	___ftmul@f1^(0+128)
 10873  1625  30A0               	movlw	160
 10874  1626  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10875  1627  3040               	movlw	64
 10876  1628  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10877  1629  319E  2691  3194   	fcall	___ftmul
 10878  162C  0021               	movlb	1	; select bank1
 10879  162D  082E               	movf	?___ftmul^(0+128),w
 10880  162E  00D1               	movwf	___ftdiv@f1^(0+128)
 10881  162F  082F               	movf	(?___ftmul+1)^(0+128),w
 10882  1630  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10883  1631  0830               	movf	(?___ftmul+2)^(0+128),w
 10884  1632  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10885  1633  3000               	movlw	0
 10886  1634  00CE               	movwf	___ftdiv@f2^(0+128)
 10887  1635  3010               	movlw	16
 10888  1636  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10889  1637  3041               	movlw	65
 10890  1638  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10891  1639  319D  253D  3194   	fcall	___ftdiv
 10892  163C  0021               	movlb	1	; select bank1
 10893  163D  084E               	movf	?___ftdiv^(0+128),w
 10894  163E  0022               	movlb	2	; select bank2
 10895  163F  00A0               	movwf	___fttol@f1^(0+256)
 10896  1640  0021               	movlb	1	; select bank1
 10897  1641  084F               	movf	(?___ftdiv+1)^(0+128),w
 10898  1642  0022               	movlb	2	; select bank2
 10899  1643  00A1               	movwf	(___fttol@f1+1)^(0+256)
 10900  1644  0021               	movlb	1	; select bank1
 10901  1645  0850               	movf	(?___ftdiv+2)^(0+128),w
 10902  1646  0022               	movlb	2	; select bank2
 10903  1647  00A2               	movwf	(___fttol@f1+2)^(0+256)
 10904  1648  319A  22FD         	fcall	___fttol
 10905  164A  0022               	movlb	2	; select bank2
 10906  164B  0821               	movf	(?___fttol^(0+256)+1),w
 10907  164C  00BE               	movwf	(modSaw@mod+1)^(0+256)
 10908  164D  0820               	movf	?___fttol^(0+256),w
 10909  164E  00BD               	movwf	modSaw@mod^(0+256)
 10910                           
 10911                           ;modulation.c: 103: return mod;
 10912  164F  083E               	movf	(modSaw@mod+1)^(0+256),w
 10913  1650  00AF               	movwf	(?_modSaw+1)^(0+256)
 10914  1651  083D               	movf	modSaw@mod^(0+256),w
 10915  1652  00AE               	movwf	?_modSaw^(0+256)
 10916  1653  0008               	return
 10917  1654                     __end_of_modSaw:	
 10918                           
 10919                           	psect	text22
 10920  1F45                     __ptext22:	
 10921 ;; *************** function _set_subdivision *****************
 10922 ;; Defined at:
 10923 ;;		line 77 in file "user.c"
 10924 ;; Parameters:    Size  Location     Type
 10925 ;;  x               2   31[BANK2 ] int 
 10926 ;;  y               2   33[BANK2 ] int 
 10927 ;; Auto vars:     Size  Location     Type
 10928 ;;  scalar          3   38[BANK2 ] float 
 10929 ;;  tmpX            2   41[BANK2 ] int 
 10930 ;; Return value:  Size  Location     Type
 10931 ;;                  2   31[BANK2 ] int 
 10932 ;; Registers used:
 10933 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10934 ;; Tracked objects:
 10935 ;;		On entry : 0/0
 10936 ;;		On exit  : 0/0
 10937 ;;		Unchanged: 0/0
 10938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10939 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10940 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10941 ;;      Temps:          0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10942 ;;      Totals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10943 ;;Total ram usage:       12 bytes
 10944 ;; Hardware stack levels used:    1
 10945 ;; Hardware stack levels required when called:    6
 10946 ;; This function calls:
 10947 ;;		___awtoft
 10948 ;;		___ftmul
 10949 ;;		___fttol
 10950 ;;		_trunc
 10951 ;; This function is called by:
 10952 ;;		_main
 10953 ;; This function uses a non-reentrant model
 10954 ;;
 10955                           
 10956                           
 10957                           ;psect for function _set_subdivision
 10958  1F45                     _set_subdivision:	
 10959                           
 10960                           ;user.c: 81: adjust_sub_delay = 0;
 10961                           
 10962                           ;incstack = 0
 10963                           ; Regs used in _set_subdivision: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10964  1F45  0023               	movlb	3	; select bank3
 10965  1F46  01BC               	clrf	_adjust_sub_delay^(0+384)
 10966                           
 10967                           ;user.c: 82: int tmpX = x;
 10968  1F47  0022               	movlb	2	; select bank2
 10969  1F48  0840               	movf	(set_subdivision@x+1)^(0+256),w
 10970  1F49  00CA               	movwf	(set_subdivision@tmpX+1)^(0+256)
 10971  1F4A  083F               	movf	set_subdivision@x^(0+256),w
 10972  1F4B  00C9               	movwf	set_subdivision@tmpX^(0+256)
 10973                           
 10974                           ;user.c: 83: float scalar = 1.0;
 10975  1F4C  3000               	movlw	0
 10976  1F4D  00C6               	movwf	set_subdivision@scalar^(0+256)
 10977  1F4E  3080               	movlw	128
 10978  1F4F  00C7               	movwf	(set_subdivision@scalar+1)^(0+256)
 10979  1F50  303F               	movlw	63
 10980  1F51  00C8               	movwf	(set_subdivision@scalar+2)^(0+256)
 10981                           
 10982                           ;user.c: 85: switch (y) {
 10983  1F52  2F6E               	goto	l8791
 10984  1F53                     l8779:	
 10985                           ;user.c: 86: case 1:
 10986                           
 10987                           
 10988                           ;user.c: 87: scalar = 2.0;
 10989  1F53  3000               	movlw	0
 10990  1F54  00C6               	movwf	set_subdivision@scalar^(0+256)
 10991  1F55  3000               	movlw	0
 10992  1F56  00C7               	movwf	(set_subdivision@scalar+1)^(0+256)
 10993  1F57  3040               	movlw	64
 10994  1F58  2F6C               	goto	L13
 10995  1F59                     l8781:	
 10996                           ;user.c: 89: case 2:
 10997                           
 10998                           ;user.c: 88: break;
 10999                           
 11000                           
 11001                           ;user.c: 90: scalar = 0.6666;
 11002  1F59  30A6               	movlw	166
 11003  1F5A  00C6               	movwf	set_subdivision@scalar^(0+256)
 11004  1F5B  302A               	movlw	42
 11005  1F5C  2F60               	goto	L15
 11006  1F5D                     l8783:	
 11007                           ;user.c: 92: case 3:
 11008                           
 11009                           ;user.c: 91: break;
 11010                           
 11011                           
 11012                           ;user.c: 93: scalar = .5;
 11013  1F5D  3000               	movlw	0
 11014  1F5E  00C6               	movwf	set_subdivision@scalar^(0+256)
 11015  1F5F  3000               	movlw	0
 11016  1F60                     L15:	
 11017  1F60  00C7               	movwf	(set_subdivision@scalar+1)^(0+256)
 11018  1F61  303F               	movlw	63
 11019  1F62  2F6C               	goto	L13
 11020  1F63                     l8785:	
 11021                           ;user.c: 95: case 4:
 11022                           
 11023                           ;user.c: 94: break;
 11024                           
 11025                           
 11026                           ;user.c: 96: scalar = 0.3333;
 11027  1F63  30A6               	movlw	166
 11028  1F64  00C6               	movwf	set_subdivision@scalar^(0+256)
 11029  1F65  30AA               	movlw	170
 11030  1F66  2F6A               	goto	L14
 11031  1F67                     l8787:	
 11032                           ;user.c: 98: case 5:
 11033                           
 11034                           ;user.c: 97: break;
 11035                           
 11036                           
 11037                           ;user.c: 99: scalar = 0.25;
 11038  1F67  3000               	movlw	0
 11039  1F68  00C6               	movwf	set_subdivision@scalar^(0+256)
 11040  1F69  3080               	movlw	128
 11041  1F6A                     L14:	
 11042  1F6A  00C7               	movwf	(set_subdivision@scalar+1)^(0+256)
 11043  1F6B  303E               	movlw	62
 11044  1F6C                     L13:	
 11045  1F6C  00C8               	movwf	(set_subdivision@scalar+2)^(0+256)
 11046                           
 11047                           ;user.c: 104: }
 11048                           
 11049                           ;user.c: 103: break;
 11050                           
 11051                           ;user.c: 101: case 6:
 11052                           
 11053                           ;user.c: 100: break;
 11054  1F6D  2F87               	goto	l8793
 11055  1F6E                     l8791:	
 11056                           
 11057                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11058                           ; Switch size 1, requested type "space"
 11059                           ; Number of cases is 1, Range of values is 0 to 0
 11060                           ; switch strategies available:
 11061                           ; Name         Instructions Cycles
 11062                           ; simple_byte            4     3 (average)
 11063                           ; direct_byte            8     6 (fixed)
 11064                           ; jumptable            260     6 (fixed)
 11065                           ;	Chosen strategy is simple_byte
 11066  1F6E  0842               	movf	(set_subdivision@y+1)^(0+256),w
 11067  1F6F  3A00               	xorlw	0	; case 0
 11068  1F70  1903               	skipnz
 11069  1F71  2F73               	goto	l9309
 11070  1F72  2F87               	goto	l8793
 11071  1F73                     l9309:	
 11072                           
 11073                           ; Switch size 1, requested type "space"
 11074                           ; Number of cases is 6, Range of values is 1 to 6
 11075                           ; switch strategies available:
 11076                           ; Name         Instructions Cycles
 11077                           ; simple_byte           19    10 (average)
 11078                           ; direct_byte           21     9 (fixed)
 11079                           ; jumptable            263     9 (fixed)
 11080                           ;	Chosen strategy is simple_byte
 11081  1F73  0841               	movf	set_subdivision@y^(0+256),w
 11082  1F74  3A01               	xorlw	1	; case 1
 11083  1F75  1903               	skipnz
 11084  1F76  2F53               	goto	l8779
 11085  1F77  3A03               	xorlw	3	; case 2
 11086  1F78  1903               	skipnz
 11087  1F79  2F59               	goto	l8781
 11088  1F7A  3A01               	xorlw	1	; case 3
 11089  1F7B  1903               	skipnz
 11090  1F7C  2F5D               	goto	l8783
 11091  1F7D  3A07               	xorlw	7	; case 4
 11092  1F7E  1903               	skipnz
 11093  1F7F  2F63               	goto	l8785
 11094  1F80  3A01               	xorlw	1	; case 5
 11095  1F81  1903               	skipnz
 11096  1F82  2F67               	goto	l8787
 11097  1F83  3A03               	xorlw	3	; case 6
 11098  1F84  1903               	skipnz
 11099  1F85  2F87               	goto	l8793
 11100  1F86  2F87               	goto	l8793
 11101  1F87                     l8793:	
 11102                           
 11103                           ;user.c: 106: tmpX = tmpX * scalar;
 11104  1F87  084A               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11105  1F88  0021               	movlb	1	; select bank1
 11106  1F89  00A9               	movwf	(___awtoft@c+1)^(0+128)
 11107  1F8A  0022               	movlb	2	; select bank2
 11108  1F8B  0849               	movf	set_subdivision@tmpX^(0+256),w
 11109  1F8C  0021               	movlb	1	; select bank1
 11110  1F8D  00A8               	movwf	___awtoft@c^(0+128)
 11111  1F8E  31A0  20ED  319F   	fcall	___awtoft
 11112  1F91  0021               	movlb	1	; select bank1
 11113  1F92  0828               	movf	?___awtoft^(0+128),w
 11114  1F93  00B1               	movwf	___ftmul@f2^(0+128)
 11115  1F94  0829               	movf	(?___awtoft+1)^(0+128),w
 11116  1F95  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11117  1F96  082A               	movf	(?___awtoft+2)^(0+128),w
 11118  1F97  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11119  1F98  0022               	movlb	2	; select bank2
 11120  1F99  0846               	movf	set_subdivision@scalar^(0+256),w
 11121  1F9A  0021               	movlb	1	; select bank1
 11122  1F9B  00AE               	movwf	___ftmul@f1^(0+128)
 11123  1F9C  0022               	movlb	2	; select bank2
 11124  1F9D  0847               	movf	(set_subdivision@scalar+1)^(0+256),w
 11125  1F9E  0021               	movlb	1	; select bank1
 11126  1F9F  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11127  1FA0  0022               	movlb	2	; select bank2
 11128  1FA1  0848               	movf	(set_subdivision@scalar+2)^(0+256),w
 11129  1FA2  0021               	movlb	1	; select bank1
 11130  1FA3  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11131  1FA4  319E  2691  319F   	fcall	___ftmul
 11132  1FA7  0021               	movlb	1	; select bank1
 11133  1FA8  082E               	movf	?___ftmul^(0+128),w
 11134  1FA9  0022               	movlb	2	; select bank2
 11135  1FAA  00A0               	movwf	___fttol@f1^(0+256)
 11136  1FAB  0021               	movlb	1	; select bank1
 11137  1FAC  082F               	movf	(?___ftmul+1)^(0+128),w
 11138  1FAD  0022               	movlb	2	; select bank2
 11139  1FAE  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11140  1FAF  0021               	movlb	1	; select bank1
 11141  1FB0  0830               	movf	(?___ftmul+2)^(0+128),w
 11142  1FB1  0022               	movlb	2	; select bank2
 11143  1FB2  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11144  1FB3  319A  22FD  319F   	fcall	___fttol
 11145  1FB6  0022               	movlb	2	; select bank2
 11146  1FB7  0821               	movf	(?___fttol^(0+256)+1),w
 11147  1FB8  00CA               	movwf	(set_subdivision@tmpX+1)^(0+256)
 11148  1FB9  0820               	movf	?___fttol^(0+256),w
 11149  1FBA  00C9               	movwf	set_subdivision@tmpX^(0+256)
 11150                           
 11151                           ;user.c: 108: if (trunc(tmpX) != tmpX) {
 11152  1FBB  084A               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11153  1FBC  0021               	movlb	1	; select bank1
 11154  1FBD  00A9               	movwf	(___awtoft@c+1)^(0+128)
 11155  1FBE  0022               	movlb	2	; select bank2
 11156  1FBF  0849               	movf	set_subdivision@tmpX^(0+256),w
 11157  1FC0  0021               	movlb	1	; select bank1
 11158  1FC1  00A8               	movwf	___awtoft@c^(0+128)
 11159  1FC2  31A0  20ED  319F   	fcall	___awtoft
 11160  1FC5  0021               	movlb	1	; select bank1
 11161  1FC6  0828               	movf	?___awtoft^(0+128),w
 11162  1FC7  0022               	movlb	2	; select bank2
 11163  1FC8  00B6               	movwf	trunc@x^(0+256)
 11164  1FC9  0021               	movlb	1	; select bank1
 11165  1FCA  0829               	movf	(?___awtoft+1)^(0+128),w
 11166  1FCB  0022               	movlb	2	; select bank2
 11167  1FCC  00B7               	movwf	(trunc@x+1)^(0+256)
 11168  1FCD  0021               	movlb	1	; select bank1
 11169  1FCE  082A               	movf	(?___awtoft+2)^(0+128),w
 11170  1FCF  0022               	movlb	2	; select bank2
 11171  1FD0  00B8               	movwf	(trunc@x+2)^(0+256)
 11172  1FD1  31A5  253D  319F   	fcall	_trunc
 11173  1FD4  0022               	movlb	2	; select bank2
 11174  1FD5  0836               	movf	?_trunc^(0+256),w
 11175  1FD6  00C3               	movwf	??_set_subdivision^(0+256)
 11176  1FD7  0837               	movf	(?_trunc+1)^(0+256),w
 11177  1FD8  00C4               	movwf	(??_set_subdivision^(0+256)+1)
 11178  1FD9  0838               	movf	(?_trunc+2)^(0+256),w
 11179  1FDA  00C5               	movwf	(??_set_subdivision^(0+256)+2)
 11180  1FDB  084A               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11181  1FDC  0021               	movlb	1	; select bank1
 11182  1FDD  00A9               	movwf	(___awtoft@c+1)^(0+128)
 11183  1FDE  0022               	movlb	2	; select bank2
 11184  1FDF  0849               	movf	set_subdivision@tmpX^(0+256),w
 11185  1FE0  0021               	movlb	1	; select bank1
 11186  1FE1  00A8               	movwf	___awtoft@c^(0+128)
 11187  1FE2  31A0  20ED  319F   	fcall	___awtoft
 11188  1FE5  0021               	movlb	1	; select bank1
 11189  1FE6  082A               	movf	(?___awtoft+2)^(0+128),w
 11190  1FE7  0022               	movlb	2	; select bank2
 11191  1FE8  0645               	xorwf	(??_set_subdivision+2)^(0+256),w
 11192  1FE9  1D03               	skipz
 11193  1FEA  2FF5               	goto	u9635
 11194  1FEB  0021               	movlb	1	; select bank1
 11195  1FEC  0829               	movf	(?___awtoft+1)^(0+128),w
 11196  1FED  0022               	movlb	2	; select bank2
 11197  1FEE  0644               	xorwf	(??_set_subdivision+1)^(0+256),w
 11198  1FEF  1D03               	skipz
 11199  1FF0  2FF5               	goto	u9635
 11200  1FF1  0021               	movlb	1	; select bank1
 11201  1FF2  0828               	movf	?___awtoft^(0+128),w
 11202  1FF3  0022               	movlb	2	; select bank2
 11203  1FF4  0643               	xorwf	??_set_subdivision^(0+256),w
 11204  1FF5                     u9635:	
 11205  1FF5  1903               	skipnz
 11206  1FF6  2FFA               	goto	l8799
 11207                           
 11208                           ;user.c: 109: adjust_sub_delay = 1;
 11209  1FF7  0023               	movlb	3	; select bank3
 11210  1FF8  01BC               	clrf	_adjust_sub_delay^(0+384)
 11211  1FF9  0ABC               	incf	_adjust_sub_delay^(0+384),f
 11212  1FFA                     l8799:	
 11213                           
 11214                           ;user.c: 110: }
 11215                           ;user.c: 112: return tmpX;
 11216  1FFA  0022               	movlb	2	; select bank2
 11217  1FFB  084A               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11218  1FFC  00C0               	movwf	(?_set_subdivision+1)^(0+256)
 11219  1FFD  0849               	movf	set_subdivision@tmpX^(0+256),w
 11220  1FFE  00BF               	movwf	?_set_subdivision^(0+256)
 11221  1FFF  0008               	return
 11222  2000                     __end_of_set_subdivision:	
 11223                           
 11224                           	psect	text23
 11225  253D                     __ptext23:	
 11226 ;; *************** function _trunc *****************
 11227 ;; Defined at:
 11228 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\trunc.c"
 11229 ;; Parameters:    Size  Location     Type
 11230 ;;  x               3   22[BANK2 ] int 
 11231 ;; Auto vars:     Size  Location     Type
 11232 ;;  i               3   26[BANK2 ] int 
 11233 ;;  expon           2   29[BANK2 ] int 
 11234 ;; Return value:  Size  Location     Type
 11235 ;;                  3   22[BANK2 ] int 
 11236 ;; Registers used:
 11237 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11238 ;; Tracked objects:
 11239 ;;		On entry : 0/0
 11240 ;;		On exit  : 0/0
 11241 ;;		Unchanged: 0/0
 11242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11243 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11244 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11245 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11246 ;;      Totals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11247 ;;Total ram usage:        9 bytes
 11248 ;; Hardware stack levels used:    1
 11249 ;; Hardware stack levels required when called:    5
 11250 ;; This function calls:
 11251 ;;		___altoft
 11252 ;;		___fttol
 11253 ;;		_frexp
 11254 ;; This function is called by:
 11255 ;;		_set_subdivision
 11256 ;; This function uses a non-reentrant model
 11257 ;;
 11258                           
 11259                           
 11260                           ;psect for function _trunc
 11261  253D                     _trunc:	
 11262                           
 11263                           ;incstack = 0
 11264                           ; Regs used in _trunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11265  253D  0022               	movlb	2	; select bank2
 11266  253E  0836               	movf	trunc@x^(0+256),w
 11267  253F  0021               	movlb	1	; select bank1
 11268  2540  00A0               	movwf	frexp@value^(0+128)
 11269  2541  0022               	movlb	2	; select bank2
 11270  2542  0837               	movf	(trunc@x+1)^(0+256),w
 11271  2543  0021               	movlb	1	; select bank1
 11272  2544  00A1               	movwf	(frexp@value+1)^(0+128)
 11273  2545  0022               	movlb	2	; select bank2
 11274  2546  0838               	movf	(trunc@x+2)^(0+256),w
 11275  2547  0021               	movlb	1	; select bank1
 11276  2548  00A2               	movwf	(frexp@value+2)^(0+128)
 11277  2549  303D               	movlw	(low (trunc@expon| (0+256)))& (0+255)
 11278  254A  0022               	movlb	2	; select bank2
 11279  254B  00B9               	movwf	??_trunc^(0+256)
 11280  254C  0839               	movf	??_trunc^(0+256),w
 11281  254D  0021               	movlb	1	; select bank1
 11282  254E  00A3               	movwf	frexp@eptr^(0+128)
 11283  254F  31A3  23B0  31A5   	fcall	_frexp
 11284  2552  0022               	movlb	2	; select bank2
 11285  2553  1FBE               	btfss	(trunc@expon+1)^(0+256),7
 11286  2554  2D5C               	goto	l8033
 11287  2555  3000               	movlw	0
 11288  2556  00B6               	movwf	?_trunc^(0+256)
 11289  2557  3000               	movlw	0
 11290  2558  00B7               	movwf	(?_trunc+1)^(0+256)
 11291  2559  3000               	movlw	0
 11292  255A  00B8               	movwf	(?_trunc+2)^(0+256)
 11293  255B  0008               	return
 11294  255C                     l8033:	
 11295  255C  3000               	movlw	0
 11296  255D  023E               	subwf	(trunc@expon+1)^(0+256),w
 11297  255E  3015               	movlw	21
 11298  255F  1903               	skipnz
 11299  2560  023D               	subwf	trunc@expon^(0+256),w
 11300  2561  1803               	btfsc	3,0
 11301  2562  0008               	return
 11302  2563  0836               	movf	trunc@x^(0+256),w
 11303  2564  00A0               	movwf	___fttol@f1^(0+256)
 11304  2565  0837               	movf	(trunc@x+1)^(0+256),w
 11305  2566  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11306  2567  0838               	movf	(trunc@x+2)^(0+256),w
 11307  2568  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11308  2569  319A  22FD  31A5   	fcall	___fttol
 11309  256C  0022               	movlb	2	; select bank2
 11310  256D  0823               	movf	(?___fttol+3)^(0+256),w
 11311  256E  00B1               	movwf	(___altoft@c+3)^(0+256)
 11312  256F  0822               	movf	(?___fttol+2)^(0+256),w
 11313  2570  00B0               	movwf	(___altoft@c+2)^(0+256)
 11314  2571  0821               	movf	(?___fttol+1)^(0+256),w
 11315  2572  00AF               	movwf	(___altoft@c+1)^(0+256)
 11316  2573  0820               	movf	?___fttol^(0+256),w
 11317  2574  00AE               	movwf	___altoft@c^(0+256)
 11318  2575  31A6  2619         	fcall	___altoft
 11319  2577  0022               	movlb	2	; select bank2
 11320  2578  082E               	movf	?___altoft^(0+256),w
 11321  2579  00BA               	movwf	trunc@i^(0+256)
 11322  257A  082F               	movf	(?___altoft+1)^(0+256),w
 11323  257B  00BB               	movwf	(trunc@i+1)^(0+256)
 11324  257C  0830               	movf	(?___altoft+2)^(0+256),w
 11325  257D  00BC               	movwf	(trunc@i+2)^(0+256)
 11326  257E  083A               	movf	trunc@i^(0+256),w
 11327  257F  00B6               	movwf	?_trunc^(0+256)
 11328  2580  083B               	movf	(trunc@i+1)^(0+256),w
 11329  2581  00B7               	movwf	(?_trunc+1)^(0+256)
 11330  2582  083C               	movf	(trunc@i+2)^(0+256),w
 11331  2583  00B8               	movwf	(?_trunc+2)^(0+256)
 11332  2584  0008               	return
 11333  2585                     __end_of_trunc:	
 11334                           
 11335                           	psect	text24
 11336  1DE6                     __ptext24:	
 11337 ;; *************** function _scaleiA10kPot *****************
 11338 ;; Defined at:
 11339 ;;		line 211 in file "user.c"
 11340 ;; Parameters:    Size  Location     Type
 11341 ;;  input           3   71[BANK2 ] int 
 11342 ;; Auto vars:     Size  Location     Type
 11343 ;;  pwm             3    0[BANK3 ] float 
 11344 ;; Return value:  Size  Location     Type
 11345 ;;                  2   71[BANK2 ] int 
 11346 ;; Registers used:
 11347 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11348 ;; Tracked objects:
 11349 ;;		On entry : 0/0
 11350 ;;		On exit  : 0/0
 11351 ;;		Unchanged: 0/0
 11352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11353 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11354 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11356 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11357 ;;Total ram usage:       12 bytes
 11358 ;; Hardware stack levels used:    1
 11359 ;; Hardware stack levels required when called:    8
 11360 ;; This function calls:
 11361 ;;		___ftadd
 11362 ;;		___ftdiv
 11363 ;;		___ftmul
 11364 ;;		___ftneg
 11365 ;;		___fttol
 11366 ;;		_pow
 11367 ;; This function is called by:
 11368 ;;		_main
 11369 ;; This function uses a non-reentrant model
 11370 ;;
 11371                           
 11372                           
 11373                           ;psect for function _scaleiA10kPot
 11374  1DE6                     _scaleiA10kPot:	
 11375                           
 11376                           ;user.c: 214: if (input == 0.0) {return 0;}
 11377                           
 11378                           ;incstack = 0
 11379                           ; Regs used in _scaleiA10kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11380  1DE6  0022               	movlb	2	; select bank2
 11381  1DE7  0869               	movf	(scaleiA10kPot@input+2)^(0+256),w
 11382  1DE8  0468               	iorwf	(scaleiA10kPot@input+1)^(0+256),w
 11383  1DE9  0467               	iorwf	scaleiA10kPot@input^(0+256),w
 11384  1DEA  1D03               	skipz
 11385  1DEB  2DEF               	goto	l8707
 11386  1DEC  01E7               	clrf	?_scaleiA10kPot^(0+256)
 11387  1DED  01E8               	clrf	(?_scaleiA10kPot+1)^(0+256)
 11388  1DEE  0008               	return
 11389  1DEF                     l8707:	
 11390                           
 11391                           ;user.c: 216: if (input == 1023.0) {return 255;}
 11392  1DEF  30C0               	movlw	192
 11393  1DF0  0667               	xorwf	scaleiA10kPot@input^(0+256),w
 11394  1DF1  307F               	movlw	127
 11395  1DF2  1903               	skipnz
 11396  1DF3  0668               	xorwf	(scaleiA10kPot@input+1)^(0+256),w
 11397  1DF4  3044               	movlw	68
 11398  1DF5  1903               	skipnz
 11399  1DF6  0669               	xorwf	(scaleiA10kPot@input+2)^(0+256),w
 11400  1DF7  1D03               	btfss	3,2
 11401  1DF8  2DFE               	goto	l8713
 11402  1DF9  30FF               	movlw	255
 11403  1DFA  00E7               	movwf	?_scaleiA10kPot^(0+256)
 11404  1DFB  3000               	movlw	0
 11405  1DFC  00E8               	movwf	(?_scaleiA10kPot^(0+256)+1)
 11406  1DFD  0008               	return
 11407  1DFE                     l8713:	
 11408                           
 11409                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 11410  1DFE  3000               	movlw	0
 11411  1DFF  0021               	movlb	1	; select bank1
 11412  1E00  00C1               	movwf	___ftadd@f1^(0+128)
 11413  1E01  3080               	movlw	128
 11414  1E02  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11415  1E03  303F               	movlw	63
 11416  1E04  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11417  1E05  0022               	movlb	2	; select bank2
 11418  1E06  0867               	movf	scaleiA10kPot@input^(0+256),w
 11419  1E07  0021               	movlb	1	; select bank1
 11420  1E08  00D1               	movwf	___ftdiv@f1^(0+128)
 11421  1E09  0022               	movlb	2	; select bank2
 11422  1E0A  0868               	movf	(scaleiA10kPot@input+1)^(0+256),w
 11423  1E0B  0021               	movlb	1	; select bank1
 11424  1E0C  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11425  1E0D  0022               	movlb	2	; select bank2
 11426  1E0E  0869               	movf	(scaleiA10kPot@input+2)^(0+256),w
 11427  1E0F  0021               	movlb	1	; select bank1
 11428  1E10  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11429  1E11  30C0               	movlw	192
 11430  1E12  00CE               	movwf	___ftdiv@f2^(0+128)
 11431  1E13  307F               	movlw	127
 11432  1E14  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11433  1E15  3044               	movlw	68
 11434  1E16  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11435  1E17  319D  253D  319D   	fcall	___ftdiv
 11436  1E1A  0021               	movlb	1	; select bank1
 11437  1E1B  084E               	movf	?___ftdiv^(0+128),w
 11438  1E1C  00BE               	movwf	___ftneg@f1^(0+128)
 11439  1E1D  084F               	movf	(?___ftdiv+1)^(0+128),w
 11440  1E1E  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11441  1E1F  0850               	movf	(?___ftdiv+2)^(0+128),w
 11442  1E20  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11443  1E21  31AF  27BA  319D   	fcall	___ftneg
 11444  1E24  0021               	movlb	1	; select bank1
 11445  1E25  083E               	movf	?___ftneg^(0+128),w
 11446  1E26  00C4               	movwf	___ftadd@f2^(0+128)
 11447  1E27  083F               	movf	(?___ftneg+1)^(0+128),w
 11448  1E28  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11449  1E29  0840               	movf	(?___ftneg+2)^(0+128),w
 11450  1E2A  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11451  1E2B  3192  225B  319D   	fcall	___ftadd
 11452  1E2E  0021               	movlb	1	; select bank1
 11453  1E2F  0841               	movf	?___ftadd^(0+128),w
 11454  1E30  0023               	movlb	3	; select bank3
 11455  1E31  00E4               	movwf	_scaleiA10kPot$2817^(0+384)
 11456  1E32  0021               	movlb	1	; select bank1
 11457  1E33  0842               	movf	(?___ftadd+1)^(0+128),w
 11458  1E34  0023               	movlb	3	; select bank3
 11459  1E35  00E5               	movwf	(_scaleiA10kPot$2817+1)^(0+384)
 11460  1E36  0021               	movlb	1	; select bank1
 11461  1E37  0843               	movf	(?___ftadd+2)^(0+128),w
 11462  1E38  0023               	movlb	3	; select bank3
 11463  1E39  00E6               	movwf	(_scaleiA10kPot$2817+2)^(0+384)
 11464                           
 11465                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 11466  1E3A  306A               	movlw	106
 11467  1E3B  0022               	movlb	2	; select bank2
 11468  1E3C  00D8               	movwf	pow@y^(0+256)
 11469  1E3D  309C               	movlw	156
 11470  1E3E  00D9               	movwf	(pow@y+1)^(0+256)
 11471  1E3F  30BF               	movlw	191
 11472  1E40  00DA               	movwf	(pow@y+2)^(0+256)
 11473  1E41  0023               	movlb	3	; select bank3
 11474  1E42  0864               	movf	_scaleiA10kPot$2817^(0+384),w
 11475  1E43  0022               	movlb	2	; select bank2
 11476  1E44  00D5               	movwf	pow@x^(0+256)
 11477  1E45  0023               	movlb	3	; select bank3
 11478  1E46  0865               	movf	(_scaleiA10kPot$2817+1)^(0+384),w
 11479  1E47  0022               	movlb	2	; select bank2
 11480  1E48  00D6               	movwf	(pow@x+1)^(0+256)
 11481  1E49  0023               	movlb	3	; select bank3
 11482  1E4A  0866               	movf	(_scaleiA10kPot$2817+2)^(0+384),w
 11483  1E4B  0022               	movlb	2	; select bank2
 11484  1E4C  00D7               	movwf	(pow@x+2)^(0+256)
 11485  1E4D  3186  26DA  319D   	fcall	_pow
 11486  1E50  0022               	movlb	2	; select bank2
 11487  1E51  0855               	movf	?_pow^(0+256),w
 11488  1E52  0023               	movlb	3	; select bank3
 11489  1E53  00E7               	movwf	_scaleiA10kPot$2818^(0+384)
 11490  1E54  0022               	movlb	2	; select bank2
 11491  1E55  0856               	movf	(?_pow+1)^(0+256),w
 11492  1E56  0023               	movlb	3	; select bank3
 11493  1E57  00E8               	movwf	(_scaleiA10kPot$2818+1)^(0+384)
 11494  1E58  0022               	movlb	2	; select bank2
 11495  1E59  0857               	movf	(?_pow+2)^(0+256),w
 11496  1E5A  0023               	movlb	3	; select bank3
 11497  1E5B  00E9               	movwf	(_scaleiA10kPot$2818+2)^(0+384)
 11498                           
 11499                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 11500  1E5C  30E3               	movlw	227
 11501  1E5D  0021               	movlb	1	; select bank1
 11502  1E5E  00AE               	movwf	___ftmul@f1^(0+128)
 11503  1E5F  300B               	movlw	11
 11504  1E60  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11505  1E61  3041               	movlw	65
 11506  1E62  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11507  1E63  0023               	movlb	3	; select bank3
 11508  1E64  0867               	movf	_scaleiA10kPot$2818^(0+384),w
 11509  1E65  0021               	movlb	1	; select bank1
 11510  1E66  00B1               	movwf	___ftmul@f2^(0+128)
 11511  1E67  0023               	movlb	3	; select bank3
 11512  1E68  0868               	movf	(_scaleiA10kPot$2818+1)^(0+384),w
 11513  1E69  0021               	movlb	1	; select bank1
 11514  1E6A  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11515  1E6B  0023               	movlb	3	; select bank3
 11516  1E6C  0869               	movf	(_scaleiA10kPot$2818+2)^(0+384),w
 11517  1E6D  0021               	movlb	1	; select bank1
 11518  1E6E  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11519  1E6F  319E  2691  319D   	fcall	___ftmul
 11520  1E72  0021               	movlb	1	; select bank1
 11521  1E73  082E               	movf	?___ftmul^(0+128),w
 11522  1E74  0023               	movlb	3	; select bank3
 11523  1E75  00E1               	movwf	scaleiA10kPot@pwm^(0+384)
 11524  1E76  0021               	movlb	1	; select bank1
 11525  1E77  082F               	movf	(?___ftmul+1)^(0+128),w
 11526  1E78  0023               	movlb	3	; select bank3
 11527  1E79  00E2               	movwf	(scaleiA10kPot@pwm+1)^(0+384)
 11528  1E7A  0021               	movlb	1	; select bank1
 11529  1E7B  0830               	movf	(?___ftmul+2)^(0+128),w
 11530  1E7C  0023               	movlb	3	; select bank3
 11531  1E7D  00E3               	movwf	(scaleiA10kPot@pwm+2)^(0+384)
 11532                           
 11533                           ;user.c: 219: return (int)(pwm);
 11534  1E7E  0861               	movf	scaleiA10kPot@pwm^(0+384),w
 11535  1E7F  0022               	movlb	2	; select bank2
 11536  1E80  00A0               	movwf	___fttol@f1^(0+256)
 11537  1E81  0023               	movlb	3	; select bank3
 11538  1E82  0862               	movf	(scaleiA10kPot@pwm+1)^(0+384),w
 11539  1E83  0022               	movlb	2	; select bank2
 11540  1E84  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11541  1E85  0023               	movlb	3	; select bank3
 11542  1E86  0863               	movf	(scaleiA10kPot@pwm+2)^(0+384),w
 11543  1E87  0022               	movlb	2	; select bank2
 11544  1E88  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11545  1E89  319A  22FD         	fcall	___fttol
 11546  1E8B  0022               	movlb	2	; select bank2
 11547  1E8C  0821               	movf	(?___fttol^(0+256)+1),w
 11548  1E8D  00E8               	movwf	(?_scaleiA10kPot+1)^(0+256)
 11549  1E8E  0820               	movf	?___fttol^(0+256),w
 11550  1E8F  00E7               	movwf	?_scaleiA10kPot^(0+256)
 11551  1E90  0008               	return
 11552  1E91                     __end_of_scaleiA10kPot:	
 11553                           
 11554                           	psect	text25
 11555  100E                     __ptext25:	
 11556 ;; *************** function _scaleA10kPot *****************
 11557 ;; Defined at:
 11558 ;;		line 202 in file "user.c"
 11559 ;; Parameters:    Size  Location     Type
 11560 ;;  input           3   71[BANK2 ] int 
 11561 ;; Auto vars:     Size  Location     Type
 11562 ;;  pwm             3    0[BANK3 ] float 
 11563 ;; Return value:  Size  Location     Type
 11564 ;;                  2   71[BANK2 ] int 
 11565 ;; Registers used:
 11566 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11567 ;; Tracked objects:
 11568 ;;		On entry : 0/0
 11569 ;;		On exit  : 0/0
 11570 ;;		Unchanged: 0/0
 11571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11572 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11573 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11575 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11576 ;;Total ram usage:       12 bytes
 11577 ;; Hardware stack levels used:    1
 11578 ;; Hardware stack levels required when called:    8
 11579 ;; This function calls:
 11580 ;;		___ftdiv
 11581 ;;		___ftmul
 11582 ;;		___fttol
 11583 ;;		_pow
 11584 ;; This function is called by:
 11585 ;;		_main
 11586 ;; This function uses a non-reentrant model
 11587 ;;
 11588                           
 11589                           
 11590                           ;psect for function _scaleA10kPot
 11591  100E                     _scaleA10kPot:	
 11592                           
 11593                           ;user.c: 204: if (input == 0.0) {return 255;}
 11594                           
 11595                           ;incstack = 0
 11596                           ; Regs used in _scaleA10kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11597  100E  0022               	movlb	2	; select bank2
 11598  100F  0869               	movf	(scaleA10kPot@input+2)^(0+256),w
 11599  1010  0468               	iorwf	(scaleA10kPot@input+1)^(0+256),w
 11600  1011  0467               	iorwf	scaleA10kPot@input^(0+256),w
 11601  1012  1D03               	skipz
 11602  1013  2819               	goto	l8685
 11603  1014  30FF               	movlw	255
 11604  1015  00E7               	movwf	?_scaleA10kPot^(0+256)
 11605  1016  3000               	movlw	0
 11606  1017  00E8               	movwf	(?_scaleA10kPot^(0+256)+1)
 11607  1018  0008               	return
 11608  1019                     l8685:	
 11609                           
 11610                           ;user.c: 205: if (input == 1023.0) {return 0;}
 11611  1019  30C0               	movlw	192
 11612  101A  0667               	xorwf	scaleA10kPot@input^(0+256),w
 11613  101B  307F               	movlw	127
 11614  101C  1903               	skipnz
 11615  101D  0668               	xorwf	(scaleA10kPot@input+1)^(0+256),w
 11616  101E  3044               	movlw	68
 11617  101F  1903               	skipnz
 11618  1020  0669               	xorwf	(scaleA10kPot@input+2)^(0+256),w
 11619  1021  1D03               	btfss	3,2
 11620  1022  2826               	goto	l8691
 11621  1023  01E7               	clrf	?_scaleA10kPot^(0+256)
 11622  1024  01E8               	clrf	(?_scaleA10kPot+1)^(0+256)
 11623  1025  0008               	return
 11624  1026                     l8691:	
 11625                           
 11626                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 11627  1026  30C0               	movlw	192
 11628  1027  0021               	movlb	1	; select bank1
 11629  1028  00CE               	movwf	___ftdiv@f2^(0+128)
 11630  1029  307F               	movlw	127
 11631  102A  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11632  102B  3044               	movlw	68
 11633  102C  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11634  102D  0022               	movlb	2	; select bank2
 11635  102E  0867               	movf	scaleA10kPot@input^(0+256),w
 11636  102F  0021               	movlb	1	; select bank1
 11637  1030  00D1               	movwf	___ftdiv@f1^(0+128)
 11638  1031  0022               	movlb	2	; select bank2
 11639  1032  0868               	movf	(scaleA10kPot@input+1)^(0+256),w
 11640  1033  0021               	movlb	1	; select bank1
 11641  1034  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11642  1035  0022               	movlb	2	; select bank2
 11643  1036  0869               	movf	(scaleA10kPot@input+2)^(0+256),w
 11644  1037  0021               	movlb	1	; select bank1
 11645  1038  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11646  1039  319D  253D  3190   	fcall	___ftdiv
 11647  103C  0021               	movlb	1	; select bank1
 11648  103D  084E               	movf	?___ftdiv^(0+128),w
 11649  103E  0023               	movlb	3	; select bank3
 11650  103F  00E4               	movwf	_scaleA10kPot$2815^(0+384)
 11651  1040  0021               	movlb	1	; select bank1
 11652  1041  084F               	movf	(?___ftdiv+1)^(0+128),w
 11653  1042  0023               	movlb	3	; select bank3
 11654  1043  00E5               	movwf	(_scaleA10kPot$2815+1)^(0+384)
 11655  1044  0021               	movlb	1	; select bank1
 11656  1045  0850               	movf	(?___ftdiv+2)^(0+128),w
 11657  1046  0023               	movlb	3	; select bank3
 11658  1047  00E6               	movwf	(_scaleA10kPot$2815+2)^(0+384)
 11659                           
 11660                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 11661  1048  306A               	movlw	106
 11662  1049  0022               	movlb	2	; select bank2
 11663  104A  00D8               	movwf	pow@y^(0+256)
 11664  104B  309C               	movlw	156
 11665  104C  00D9               	movwf	(pow@y+1)^(0+256)
 11666  104D  30BF               	movlw	191
 11667  104E  00DA               	movwf	(pow@y+2)^(0+256)
 11668  104F  0023               	movlb	3	; select bank3
 11669  1050  0864               	movf	_scaleA10kPot$2815^(0+384),w
 11670  1051  0022               	movlb	2	; select bank2
 11671  1052  00D5               	movwf	pow@x^(0+256)
 11672  1053  0023               	movlb	3	; select bank3
 11673  1054  0865               	movf	(_scaleA10kPot$2815+1)^(0+384),w
 11674  1055  0022               	movlb	2	; select bank2
 11675  1056  00D6               	movwf	(pow@x+1)^(0+256)
 11676  1057  0023               	movlb	3	; select bank3
 11677  1058  0866               	movf	(_scaleA10kPot$2815+2)^(0+384),w
 11678  1059  0022               	movlb	2	; select bank2
 11679  105A  00D7               	movwf	(pow@x+2)^(0+256)
 11680  105B  3186  26DA  3190   	fcall	_pow
 11681  105E  0022               	movlb	2	; select bank2
 11682  105F  0855               	movf	?_pow^(0+256),w
 11683  1060  0023               	movlb	3	; select bank3
 11684  1061  00E7               	movwf	_scaleA10kPot$2816^(0+384)
 11685  1062  0022               	movlb	2	; select bank2
 11686  1063  0856               	movf	(?_pow+1)^(0+256),w
 11687  1064  0023               	movlb	3	; select bank3
 11688  1065  00E8               	movwf	(_scaleA10kPot$2816+1)^(0+384)
 11689  1066  0022               	movlb	2	; select bank2
 11690  1067  0857               	movf	(?_pow+2)^(0+256),w
 11691  1068  0023               	movlb	3	; select bank3
 11692  1069  00E9               	movwf	(_scaleA10kPot$2816+2)^(0+384)
 11693                           
 11694                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 11695  106A  30E3               	movlw	227
 11696  106B  0021               	movlb	1	; select bank1
 11697  106C  00AE               	movwf	___ftmul@f1^(0+128)
 11698  106D  300B               	movlw	11
 11699  106E  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11700  106F  3041               	movlw	65
 11701  1070  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11702  1071  0023               	movlb	3	; select bank3
 11703  1072  0867               	movf	_scaleA10kPot$2816^(0+384),w
 11704  1073  0021               	movlb	1	; select bank1
 11705  1074  00B1               	movwf	___ftmul@f2^(0+128)
 11706  1075  0023               	movlb	3	; select bank3
 11707  1076  0868               	movf	(_scaleA10kPot$2816+1)^(0+384),w
 11708  1077  0021               	movlb	1	; select bank1
 11709  1078  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11710  1079  0023               	movlb	3	; select bank3
 11711  107A  0869               	movf	(_scaleA10kPot$2816+2)^(0+384),w
 11712  107B  0021               	movlb	1	; select bank1
 11713  107C  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11714  107D  319E  2691  3190   	fcall	___ftmul
 11715  1080  0021               	movlb	1	; select bank1
 11716  1081  082E               	movf	?___ftmul^(0+128),w
 11717  1082  0023               	movlb	3	; select bank3
 11718  1083  00E1               	movwf	scaleA10kPot@pwm^(0+384)
 11719  1084  0021               	movlb	1	; select bank1
 11720  1085  082F               	movf	(?___ftmul+1)^(0+128),w
 11721  1086  0023               	movlb	3	; select bank3
 11722  1087  00E2               	movwf	(scaleA10kPot@pwm+1)^(0+384)
 11723  1088  0021               	movlb	1	; select bank1
 11724  1089  0830               	movf	(?___ftmul+2)^(0+128),w
 11725  108A  0023               	movlb	3	; select bank3
 11726  108B  00E3               	movwf	(scaleA10kPot@pwm+2)^(0+384)
 11727                           
 11728                           ;user.c: 207: return (int)(pwm);
 11729  108C  0861               	movf	scaleA10kPot@pwm^(0+384),w
 11730  108D  0022               	movlb	2	; select bank2
 11731  108E  00A0               	movwf	___fttol@f1^(0+256)
 11732  108F  0023               	movlb	3	; select bank3
 11733  1090  0862               	movf	(scaleA10kPot@pwm+1)^(0+384),w
 11734  1091  0022               	movlb	2	; select bank2
 11735  1092  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11736  1093  0023               	movlb	3	; select bank3
 11737  1094  0863               	movf	(scaleA10kPot@pwm+2)^(0+384),w
 11738  1095  0022               	movlb	2	; select bank2
 11739  1096  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11740  1097  319A  22FD         	fcall	___fttol
 11741  1099  0022               	movlb	2	; select bank2
 11742  109A  0821               	movf	(?___fttol^(0+256)+1),w
 11743  109B  00E8               	movwf	(?_scaleA10kPot+1)^(0+256)
 11744  109C  0820               	movf	?___fttol^(0+256),w
 11745  109D  00E7               	movwf	?_scaleA10kPot^(0+256)
 11746  109E  0008               	return
 11747  109F                     __end_of_scaleA10kPot:	
 11748                           
 11749                           	psect	text26
 11750  1A78                     __ptext26:	
 11751 ;; *************** function _scaleA100kPot *****************
 11752 ;; Defined at:
 11753 ;;		line 188 in file "user.c"
 11754 ;; Parameters:    Size  Location     Type
 11755 ;;  input           3   71[BANK2 ] int 
 11756 ;; Auto vars:     Size  Location     Type
 11757 ;;  pwm             3    0[BANK3 ] float 
 11758 ;; Return value:  Size  Location     Type
 11759 ;;                  2   71[BANK2 ] int 
 11760 ;; Registers used:
 11761 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11762 ;; Tracked objects:
 11763 ;;		On entry : 0/0
 11764 ;;		On exit  : 0/0
 11765 ;;		Unchanged: 0/0
 11766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11767 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11768 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11770 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11771 ;;Total ram usage:       12 bytes
 11772 ;; Hardware stack levels used:    1
 11773 ;; Hardware stack levels required when called:    8
 11774 ;; This function calls:
 11775 ;;		___ftdiv
 11776 ;;		___ftmul
 11777 ;;		___fttol
 11778 ;;		_pow
 11779 ;; This function is called by:
 11780 ;;		_main
 11781 ;; This function uses a non-reentrant model
 11782 ;;
 11783                           
 11784                           
 11785                           ;psect for function _scaleA100kPot
 11786  1A78                     _scaleA100kPot:	
 11787                           
 11788                           ;user.c: 190: if (input == 0.0) {input = 1.0;}
 11789                           
 11790                           ;incstack = 0
 11791                           ; Regs used in _scaleA100kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11792  1A78  0022               	movlb	2	; select bank2
 11793  1A79  0869               	movf	(scaleA100kPot@input+2)^(0+256),w
 11794  1A7A  0468               	iorwf	(scaleA100kPot@input+1)^(0+256),w
 11795  1A7B  0467               	iorwf	scaleA100kPot@input^(0+256),w
 11796  1A7C  1D03               	skipz
 11797  1A7D  2A84               	goto	l8727
 11798  1A7E  3000               	movlw	0
 11799  1A7F  00E7               	movwf	scaleA100kPot@input^(0+256)
 11800  1A80  3080               	movlw	128
 11801  1A81  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
 11802  1A82  303F               	movlw	63
 11803  1A83  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
 11804  1A84                     l8727:	
 11805                           
 11806                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 11807  1A84  30C0               	movlw	192
 11808  1A85  0021               	movlb	1	; select bank1
 11809  1A86  00CE               	movwf	___ftdiv@f2^(0+128)
 11810  1A87  307F               	movlw	127
 11811  1A88  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11812  1A89  3044               	movlw	68
 11813  1A8A  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11814  1A8B  0022               	movlb	2	; select bank2
 11815  1A8C  0867               	movf	scaleA100kPot@input^(0+256),w
 11816  1A8D  0021               	movlb	1	; select bank1
 11817  1A8E  00D1               	movwf	___ftdiv@f1^(0+128)
 11818  1A8F  0022               	movlb	2	; select bank2
 11819  1A90  0868               	movf	(scaleA100kPot@input+1)^(0+256),w
 11820  1A91  0021               	movlb	1	; select bank1
 11821  1A92  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11822  1A93  0022               	movlb	2	; select bank2
 11823  1A94  0869               	movf	(scaleA100kPot@input+2)^(0+256),w
 11824  1A95  0021               	movlb	1	; select bank1
 11825  1A96  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11826  1A97  319D  253D  319A   	fcall	___ftdiv
 11827  1A9A  0021               	movlb	1	; select bank1
 11828  1A9B  084E               	movf	?___ftdiv^(0+128),w
 11829  1A9C  0023               	movlb	3	; select bank3
 11830  1A9D  00E4               	movwf	_scaleA100kPot$2811^(0+384)
 11831  1A9E  0021               	movlb	1	; select bank1
 11832  1A9F  084F               	movf	(?___ftdiv+1)^(0+128),w
 11833  1AA0  0023               	movlb	3	; select bank3
 11834  1AA1  00E5               	movwf	(_scaleA100kPot$2811+1)^(0+384)
 11835  1AA2  0021               	movlb	1	; select bank1
 11836  1AA3  0850               	movf	(?___ftdiv+2)^(0+128),w
 11837  1AA4  0023               	movlb	3	; select bank3
 11838  1AA5  00E6               	movwf	(_scaleA100kPot$2811+2)^(0+384)
 11839                           
 11840                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 11841  1AA6  3056               	movlw	86
 11842  1AA7  0022               	movlb	2	; select bank2
 11843  1AA8  00D8               	movwf	pow@y^(0+256)
 11844  1AA9  308E               	movlw	142
 11845  1AAA  00D9               	movwf	(pow@y+1)^(0+256)
 11846  1AAB  30BF               	movlw	191
 11847  1AAC  00DA               	movwf	(pow@y+2)^(0+256)
 11848  1AAD  0023               	movlb	3	; select bank3
 11849  1AAE  0864               	movf	_scaleA100kPot$2811^(0+384),w
 11850  1AAF  0022               	movlb	2	; select bank2
 11851  1AB0  00D5               	movwf	pow@x^(0+256)
 11852  1AB1  0023               	movlb	3	; select bank3
 11853  1AB2  0865               	movf	(_scaleA100kPot$2811+1)^(0+384),w
 11854  1AB3  0022               	movlb	2	; select bank2
 11855  1AB4  00D6               	movwf	(pow@x+1)^(0+256)
 11856  1AB5  0023               	movlb	3	; select bank3
 11857  1AB6  0866               	movf	(_scaleA100kPot$2811+2)^(0+384),w
 11858  1AB7  0022               	movlb	2	; select bank2
 11859  1AB8  00D7               	movwf	(pow@x+2)^(0+256)
 11860  1AB9  3186  26DA  319A   	fcall	_pow
 11861  1ABC  0022               	movlb	2	; select bank2
 11862  1ABD  0855               	movf	?_pow^(0+256),w
 11863  1ABE  0023               	movlb	3	; select bank3
 11864  1ABF  00E7               	movwf	_scaleA100kPot$2812^(0+384)
 11865  1AC0  0022               	movlb	2	; select bank2
 11866  1AC1  0856               	movf	(?_pow+1)^(0+256),w
 11867  1AC2  0023               	movlb	3	; select bank3
 11868  1AC3  00E8               	movwf	(_scaleA100kPot$2812+1)^(0+384)
 11869  1AC4  0022               	movlb	2	; select bank2
 11870  1AC5  0857               	movf	(?_pow+2)^(0+256),w
 11871  1AC6  0023               	movlb	3	; select bank3
 11872  1AC7  00E9               	movwf	(_scaleA100kPot$2812+2)^(0+384)
 11873                           
 11874                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 11875  1AC8  309F               	movlw	159
 11876  1AC9  0021               	movlb	1	; select bank1
 11877  1ACA  00AE               	movwf	___ftmul@f1^(0+128)
 11878  1ACB  3068               	movlw	104
 11879  1ACC  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11880  1ACD  3040               	movlw	64
 11881  1ACE  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11882  1ACF  0023               	movlb	3	; select bank3
 11883  1AD0  0867               	movf	_scaleA100kPot$2812^(0+384),w
 11884  1AD1  0021               	movlb	1	; select bank1
 11885  1AD2  00B1               	movwf	___ftmul@f2^(0+128)
 11886  1AD3  0023               	movlb	3	; select bank3
 11887  1AD4  0868               	movf	(_scaleA100kPot$2812+1)^(0+384),w
 11888  1AD5  0021               	movlb	1	; select bank1
 11889  1AD6  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11890  1AD7  0023               	movlb	3	; select bank3
 11891  1AD8  0869               	movf	(_scaleA100kPot$2812+2)^(0+384),w
 11892  1AD9  0021               	movlb	1	; select bank1
 11893  1ADA  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11894  1ADB  319E  2691  319A   	fcall	___ftmul
 11895  1ADE  0021               	movlb	1	; select bank1
 11896  1ADF  082E               	movf	?___ftmul^(0+128),w
 11897  1AE0  0023               	movlb	3	; select bank3
 11898  1AE1  00E1               	movwf	scaleA100kPot@pwm^(0+384)
 11899  1AE2  0021               	movlb	1	; select bank1
 11900  1AE3  082F               	movf	(?___ftmul+1)^(0+128),w
 11901  1AE4  0023               	movlb	3	; select bank3
 11902  1AE5  00E2               	movwf	(scaleA100kPot@pwm+1)^(0+384)
 11903  1AE6  0021               	movlb	1	; select bank1
 11904  1AE7  0830               	movf	(?___ftmul+2)^(0+128),w
 11905  1AE8  0023               	movlb	3	; select bank3
 11906  1AE9  00E3               	movwf	(scaleA100kPot@pwm+2)^(0+384)
 11907                           
 11908                           ;user.c: 192: return (int)(pwm);
 11909  1AEA  0861               	movf	scaleA100kPot@pwm^(0+384),w
 11910  1AEB  0022               	movlb	2	; select bank2
 11911  1AEC  00A0               	movwf	___fttol@f1^(0+256)
 11912  1AED  0023               	movlb	3	; select bank3
 11913  1AEE  0862               	movf	(scaleA100kPot@pwm+1)^(0+384),w
 11914  1AEF  0022               	movlb	2	; select bank2
 11915  1AF0  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11916  1AF1  0023               	movlb	3	; select bank3
 11917  1AF2  0863               	movf	(scaleA100kPot@pwm+2)^(0+384),w
 11918  1AF3  0022               	movlb	2	; select bank2
 11919  1AF4  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11920  1AF5  319A  22FD         	fcall	___fttol
 11921  1AF7  0022               	movlb	2	; select bank2
 11922  1AF8  0821               	movf	(?___fttol^(0+256)+1),w
 11923  1AF9  00E8               	movwf	(?_scaleA100kPot+1)^(0+256)
 11924  1AFA  0820               	movf	?___fttol^(0+256),w
 11925  1AFB  00E7               	movwf	?_scaleA100kPot^(0+256)
 11926  1AFC  0008               	return
 11927  1AFD                     __end_of_scaleA100kPot:	
 11928                           
 11929                           	psect	text27
 11930  06DA                     __ptext27:	
 11931 ;; *************** function _pow *****************
 11932 ;; Defined at:
 11933 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\pow.c"
 11934 ;; Parameters:    Size  Location     Type
 11935 ;;  x               3   53[BANK2 ] int 
 11936 ;;  y               3   56[BANK2 ] int 
 11937 ;; Auto vars:     Size  Location     Type
 11938 ;;  yi              4   67[BANK2 ] unsigned long 
 11939 ;;  sign            1   66[BANK2 ] unsigned char 
 11940 ;; Return value:  Size  Location     Type
 11941 ;;                  3   53[BANK2 ] unsigned char 
 11942 ;; Registers used:
 11943 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11944 ;; Tracked objects:
 11945 ;;		On entry : 0/0
 11946 ;;		On exit  : 0/0
 11947 ;;		Unchanged: 0/0
 11948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11949 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11950 ;;      Locals:         0       0       0      11       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11951 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11952 ;;      Totals:         0       0       0      18       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11953 ;;Total ram usage:       18 bytes
 11954 ;; Hardware stack levels used:    1
 11955 ;; Hardware stack levels required when called:    7
 11956 ;; This function calls:
 11957 ;;		___ftge
 11958 ;;		___ftmul
 11959 ;;		___ftneg
 11960 ;;		___fttol
 11961 ;;		___lltoft
 11962 ;;		_exp
 11963 ;;		_log
 11964 ;; This function is called by:
 11965 ;;		_scaleA100kPot
 11966 ;;		_scaleA10kPot
 11967 ;;		_scaleiA10kPot
 11968 ;;		_scaleiA100kPot
 11969 ;; This function uses a non-reentrant model
 11970 ;;
 11971                           
 11972                           
 11973                           ;psect for function _pow
 11974  06DA                     _pow:	
 11975                           
 11976                           ;incstack = 0
 11977                           ; Regs used in _pow: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11978  06DA  0022               	movlb	2	; select bank2
 11979  06DB  01E2               	clrf	pow@sign^(0+256)
 11980  06DC  0857               	movf	(pow@x+2)^(0+256),w
 11981  06DD  0456               	iorwf	(pow@x+1)^(0+256),w
 11982  06DE  0455               	iorwf	pow@x^(0+256),w
 11983  06DF  1D03               	skipz
 11984  06E0  2F06               	goto	l8053
 11985  06E1  3000               	movlw	0
 11986  06E2  0021               	movlb	1	; select bank1
 11987  06E3  00A0               	movwf	___ftge@ff1^(0+128)
 11988  06E4  3000               	movlw	0
 11989  06E5  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 11990  06E6  3000               	movlw	0
 11991  06E7  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 11992  06E8  0022               	movlb	2	; select bank2
 11993  06E9  0858               	movf	pow@y^(0+256),w
 11994  06EA  0021               	movlb	1	; select bank1
 11995  06EB  00A3               	movwf	___ftge@ff2^(0+128)
 11996  06EC  0022               	movlb	2	; select bank2
 11997  06ED  0859               	movf	(pow@y+1)^(0+256),w
 11998  06EE  0021               	movlb	1	; select bank1
 11999  06EF  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12000  06F0  0022               	movlb	2	; select bank2
 12001  06F1  085A               	movf	(pow@y+2)^(0+256),w
 12002  06F2  0021               	movlb	1	; select bank1
 12003  06F3  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12004  06F4  31A2  22F9  3186   	fcall	___ftge
 12005  06F7  1C03               	btfss	3,0
 12006  06F8  2EFE               	goto	l2292
 12007  06F9  3021               	movlw	33
 12008  06FA  0024               	movlb	4	; select bank4
 12009  06FB  00D3               	movwf	_errno^(0+512)
 12010  06FC  3000               	movlw	0
 12011  06FD  00D4               	movwf	(_errno^(0+512)+1)
 12012  06FE                     l2292:	
 12013  06FE  3000               	movlw	0
 12014  06FF  0022               	movlb	2	; select bank2
 12015  0700  00D5               	movwf	?_pow^(0+256)
 12016  0701  3000               	movlw	0
 12017  0702  00D6               	movwf	(?_pow+1)^(0+256)
 12018  0703  3000               	movlw	0
 12019  0704  00D7               	movwf	(?_pow+2)^(0+256)
 12020  0705  0008               	return
 12021  0706                     l8053:	
 12022  0706  085A               	movf	(pow@y+2)^(0+256),w
 12023  0707  0459               	iorwf	(pow@y+1)^(0+256),w
 12024  0708  0458               	iorwf	pow@y^(0+256),w
 12025  0709  1D03               	skipz
 12026  070A  2F12               	goto	l8059
 12027  070B  3000               	movlw	0
 12028  070C  00D5               	movwf	?_pow^(0+256)
 12029  070D  3080               	movlw	128
 12030  070E  00D6               	movwf	(?_pow+1)^(0+256)
 12031  070F  303F               	movlw	63
 12032  0710  00D7               	movwf	(?_pow+2)^(0+256)
 12033  0711  0008               	return
 12034  0712                     l8059:	
 12035  0712  0855               	movf	pow@x^(0+256),w
 12036  0713  0021               	movlb	1	; select bank1
 12037  0714  00A0               	movwf	___ftge@ff1^(0+128)
 12038  0715  0022               	movlb	2	; select bank2
 12039  0716  0856               	movf	(pow@x+1)^(0+256),w
 12040  0717  0021               	movlb	1	; select bank1
 12041  0718  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12042  0719  0022               	movlb	2	; select bank2
 12043  071A  0857               	movf	(pow@x+2)^(0+256),w
 12044  071B  0021               	movlb	1	; select bank1
 12045  071C  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12046  071D  3000               	movlw	0
 12047  071E  00A3               	movwf	___ftge@ff2^(0+128)
 12048  071F  3000               	movlw	0
 12049  0720  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12050  0721  3000               	movlw	0
 12051  0722  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12052  0723  31A2  22F9  3186   	fcall	___ftge
 12053  0726  1803               	btfsc	3,0
 12054  0727  2F8C               	goto	l8071
 12055  0728  0022               	movlb	2	; select bank2
 12056  0729  0858               	movf	pow@y^(0+256),w
 12057  072A  00A0               	movwf	___fttol@f1^(0+256)
 12058  072B  0859               	movf	(pow@y+1)^(0+256),w
 12059  072C  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12060  072D  085A               	movf	(pow@y+2)^(0+256),w
 12061  072E  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12062  072F  319A  22FD  3186   	fcall	___fttol
 12063  0732  0022               	movlb	2	; select bank2
 12064  0733  0823               	movf	(?___fttol+3)^(0+256),w
 12065  0734  00E6               	movwf	(pow@yi+3)^(0+256)
 12066  0735  0822               	movf	(?___fttol+2)^(0+256),w
 12067  0736  00E5               	movwf	(pow@yi+2)^(0+256)
 12068  0737  0821               	movf	(?___fttol+1)^(0+256),w
 12069  0738  00E4               	movwf	(pow@yi+1)^(0+256)
 12070  0739  0820               	movf	?___fttol^(0+256),w
 12071  073A  00E3               	movwf	pow@yi^(0+256)
 12072  073B  0866               	movf	(pow@yi+3)^(0+256),w
 12073  073C  0021               	movlb	1	; select bank1
 12074  073D  00AB               	movwf	(___lltoft@c+3)^(0+128)
 12075  073E  0022               	movlb	2	; select bank2
 12076  073F  0865               	movf	(pow@yi+2)^(0+256),w
 12077  0740  0021               	movlb	1	; select bank1
 12078  0741  00AA               	movwf	(___lltoft@c+2)^(0+128)
 12079  0742  0022               	movlb	2	; select bank2
 12080  0743  0864               	movf	(pow@yi+1)^(0+256),w
 12081  0744  0021               	movlb	1	; select bank1
 12082  0745  00A9               	movwf	(___lltoft@c+1)^(0+128)
 12083  0746  0022               	movlb	2	; select bank2
 12084  0747  0863               	movf	pow@yi^(0+256),w
 12085  0748  0021               	movlb	1	; select bank1
 12086  0749  00A8               	movwf	___lltoft@c^(0+128)
 12087  074A  31A1  2133  3186   	fcall	___lltoft
 12088  074D  0022               	movlb	2	; select bank2
 12089  074E  085A               	movf	(pow@y+2)^(0+256),w
 12090  074F  0021               	movlb	1	; select bank1
 12091  0750  062A               	xorwf	(?___lltoft+2)^(0+128),w
 12092  0751  1D03               	skipz
 12093  0752  2F5D               	goto	u8425
 12094  0753  0022               	movlb	2	; select bank2
 12095  0754  0859               	movf	(pow@y+1)^(0+256),w
 12096  0755  0021               	movlb	1	; select bank1
 12097  0756  0629               	xorwf	(?___lltoft+1)^(0+128),w
 12098  0757  1D03               	skipz
 12099  0758  2F5D               	goto	u8425
 12100  0759  0022               	movlb	2	; select bank2
 12101  075A  0858               	movf	pow@y^(0+256),w
 12102  075B  0021               	movlb	1	; select bank1
 12103  075C  0628               	xorwf	?___lltoft^(0+128),w
 12104  075D                     u8425:	
 12105  075D  1903               	skipnz
 12106  075E  2F6C               	goto	l8067
 12107  075F  3021               	movlw	33
 12108  0760  0024               	movlb	4	; select bank4
 12109  0761  00D3               	movwf	_errno^(0+512)
 12110  0762  3000               	movlw	0
 12111  0763  00D4               	movwf	(_errno^(0+512)+1)
 12112  0764  3000               	movlw	0
 12113  0765  0022               	movlb	2	; select bank2
 12114  0766  00D5               	movwf	?_pow^(0+256)
 12115  0767  3000               	movlw	0
 12116  0768  00D6               	movwf	(?_pow+1)^(0+256)
 12117  0769  3000               	movlw	0
 12118  076A  00D7               	movwf	(?_pow+2)^(0+256)
 12119  076B  0008               	return
 12120  076C                     l8067:	
 12121  076C  0022               	movlb	2	; select bank2
 12122  076D  0863               	movf	pow@yi^(0+256),w
 12123  076E  3901               	andlw	1
 12124  076F  00DB               	movwf	??_pow^(0+256)
 12125  0770  085B               	movf	??_pow^(0+256),w
 12126  0771  00E2               	movwf	pow@sign^(0+256)
 12127  0772  0855               	movf	pow@x^(0+256),w
 12128  0773  0021               	movlb	1	; select bank1
 12129  0774  00BE               	movwf	___ftneg@f1^(0+128)
 12130  0775  0022               	movlb	2	; select bank2
 12131  0776  0856               	movf	(pow@x+1)^(0+256),w
 12132  0777  0021               	movlb	1	; select bank1
 12133  0778  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12134  0779  0022               	movlb	2	; select bank2
 12135  077A  0857               	movf	(pow@x+2)^(0+256),w
 12136  077B  0021               	movlb	1	; select bank1
 12137  077C  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12138  077D  31AF  27BA  3186   	fcall	___ftneg
 12139  0780  0021               	movlb	1	; select bank1
 12140  0781  083E               	movf	?___ftneg^(0+128),w
 12141  0782  0022               	movlb	2	; select bank2
 12142  0783  00D5               	movwf	pow@x^(0+256)
 12143  0784  0021               	movlb	1	; select bank1
 12144  0785  083F               	movf	(?___ftneg+1)^(0+128),w
 12145  0786  0022               	movlb	2	; select bank2
 12146  0787  00D6               	movwf	(pow@x+1)^(0+256)
 12147  0788  0021               	movlb	1	; select bank1
 12148  0789  0840               	movf	(?___ftneg+2)^(0+128),w
 12149  078A  0022               	movlb	2	; select bank2
 12150  078B  00D7               	movwf	(pow@x+2)^(0+256)
 12151  078C                     l8071:	
 12152  078C  0022               	movlb	2	; select bank2
 12153  078D  0855               	movf	pow@x^(0+256),w
 12154  078E  00BE               	movwf	log@x^(0+256)
 12155  078F  0856               	movf	(pow@x+1)^(0+256),w
 12156  0790  00BF               	movwf	(log@x+1)^(0+256)
 12157  0791  0857               	movf	(pow@x+2)^(0+256),w
 12158  0792  00C0               	movwf	(log@x+2)^(0+256)
 12159  0793  3190  209F  3186   	fcall	_log
 12160  0796  0022               	movlb	2	; select bank2
 12161  0797  083E               	movf	?_log^(0+256),w
 12162  0798  00DC               	movwf	_pow$2824^(0+256)
 12163  0799  083F               	movf	(?_log+1)^(0+256),w
 12164  079A  00DD               	movwf	(_pow$2824+1)^(0+256)
 12165  079B  0840               	movf	(?_log+2)^(0+256),w
 12166  079C  00DE               	movwf	(_pow$2824+2)^(0+256)
 12167  079D  0858               	movf	pow@y^(0+256),w
 12168  079E  0021               	movlb	1	; select bank1
 12169  079F  00AE               	movwf	___ftmul@f1^(0+128)
 12170  07A0  0022               	movlb	2	; select bank2
 12171  07A1  0859               	movf	(pow@y+1)^(0+256),w
 12172  07A2  0021               	movlb	1	; select bank1
 12173  07A3  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12174  07A4  0022               	movlb	2	; select bank2
 12175  07A5  085A               	movf	(pow@y+2)^(0+256),w
 12176  07A6  0021               	movlb	1	; select bank1
 12177  07A7  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12178  07A8  0022               	movlb	2	; select bank2
 12179  07A9  085C               	movf	_pow$2824^(0+256),w
 12180  07AA  0021               	movlb	1	; select bank1
 12181  07AB  00B1               	movwf	___ftmul@f2^(0+128)
 12182  07AC  0022               	movlb	2	; select bank2
 12183  07AD  085D               	movf	(_pow$2824+1)^(0+256),w
 12184  07AE  0021               	movlb	1	; select bank1
 12185  07AF  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12186  07B0  0022               	movlb	2	; select bank2
 12187  07B1  085E               	movf	(_pow$2824+2)^(0+256),w
 12188  07B2  0021               	movlb	1	; select bank1
 12189  07B3  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12190  07B4  319E  2691  3186   	fcall	___ftmul
 12191  07B7  0021               	movlb	1	; select bank1
 12192  07B8  082E               	movf	?___ftmul^(0+128),w
 12193  07B9  0022               	movlb	2	; select bank2
 12194  07BA  00DF               	movwf	_pow$2825^(0+256)
 12195  07BB  0021               	movlb	1	; select bank1
 12196  07BC  082F               	movf	(?___ftmul+1)^(0+128),w
 12197  07BD  0022               	movlb	2	; select bank2
 12198  07BE  00E0               	movwf	(_pow$2825+1)^(0+256)
 12199  07BF  0021               	movlb	1	; select bank1
 12200  07C0  0830               	movf	(?___ftmul+2)^(0+128),w
 12201  07C1  0022               	movlb	2	; select bank2
 12202  07C2  00E1               	movwf	(_pow$2825+2)^(0+256)
 12203  07C3  085F               	movf	_pow$2825^(0+256),w
 12204  07C4  00C8               	movwf	exp@x^(0+256)
 12205  07C5  0860               	movf	(_pow$2825+1)^(0+256),w
 12206  07C6  00C9               	movwf	(exp@x+1)^(0+256)
 12207  07C7  0861               	movf	(_pow$2825+2)^(0+256),w
 12208  07C8  00CA               	movwf	(exp@x+2)^(0+256)
 12209  07C9  3193  2351  3186   	fcall	_exp
 12210  07CC  0022               	movlb	2	; select bank2
 12211  07CD  0848               	movf	?_exp^(0+256),w
 12212  07CE  00D5               	movwf	pow@x^(0+256)
 12213  07CF  0849               	movf	(?_exp+1)^(0+256),w
 12214  07D0  00D6               	movwf	(pow@x+1)^(0+256)
 12215  07D1  084A               	movf	(?_exp+2)^(0+256),w
 12216  07D2  00D7               	movwf	(pow@x+2)^(0+256)
 12217  07D3  0862               	movf	pow@sign^(0+256),w
 12218  07D4  1903               	btfsc	3,2
 12219  07D5  0008               	return
 12220  07D6  0855               	movf	pow@x^(0+256),w
 12221  07D7  0021               	movlb	1	; select bank1
 12222  07D8  00BE               	movwf	___ftneg@f1^(0+128)
 12223  07D9  0022               	movlb	2	; select bank2
 12224  07DA  0856               	movf	(pow@x+1)^(0+256),w
 12225  07DB  0021               	movlb	1	; select bank1
 12226  07DC  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12227  07DD  0022               	movlb	2	; select bank2
 12228  07DE  0857               	movf	(pow@x+2)^(0+256),w
 12229  07DF  0021               	movlb	1	; select bank1
 12230  07E0  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12231  07E1  31AF  27BA         	fcall	___ftneg
 12232  07E3  0021               	movlb	1	; select bank1
 12233  07E4  083E               	movf	?___ftneg^(0+128),w
 12234  07E5  0022               	movlb	2	; select bank2
 12235  07E6  00D5               	movwf	?_pow^(0+256)
 12236  07E7  0021               	movlb	1	; select bank1
 12237  07E8  083F               	movf	(?___ftneg+1)^(0+128),w
 12238  07E9  0022               	movlb	2	; select bank2
 12239  07EA  00D6               	movwf	(?_pow+1)^(0+256)
 12240  07EB  0021               	movlb	1	; select bank1
 12241  07EC  0840               	movf	(?___ftneg+2)^(0+128),w
 12242  07ED  0022               	movlb	2	; select bank2
 12243  07EE  00D7               	movwf	(?_pow+2)^(0+256)
 12244  07EF  0008               	return
 12245  07F0                     __end_of_pow:	
 12246                           
 12247                           	psect	text28
 12248  109F                     __ptext28:	
 12249 ;; *************** function _log *****************
 12250 ;; Defined at:
 12251 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\log.c"
 12252 ;; Parameters:    Size  Location     Type
 12253 ;;  x               3   30[BANK2 ] unsigned char 
 12254 ;; Auto vars:     Size  Location     Type
 12255 ;;  exponent        2   34[BANK2 ] int 
 12256 ;; Return value:  Size  Location     Type
 12257 ;;                  3   30[BANK2 ] int 
 12258 ;; Registers used:
 12259 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12260 ;; Tracked objects:
 12261 ;;		On entry : 0/0
 12262 ;;		On exit  : 0/0
 12263 ;;		Unchanged: 0/0
 12264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12265 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12266 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12267 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12268 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12269 ;;Total ram usage:        6 bytes
 12270 ;; Hardware stack levels used:    1
 12271 ;; Hardware stack levels required when called:    6
 12272 ;; This function calls:
 12273 ;;		___awtoft
 12274 ;;		___ftadd
 12275 ;;		___ftge
 12276 ;;		___ftmul
 12277 ;;		_eval_poly
 12278 ;;		_frexp
 12279 ;; This function is called by:
 12280 ;;		_pow
 12281 ;; This function uses a non-reentrant model
 12282 ;;
 12283                           
 12284                           
 12285                           ;psect for function _log
 12286  109F                     _log:	
 12287                           
 12288                           ;incstack = 0
 12289                           ; Regs used in _log: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12290  109F  0022               	movlb	2	; select bank2
 12291  10A0  083E               	movf	log@x^(0+256),w
 12292  10A1  0021               	movlb	1	; select bank1
 12293  10A2  00A0               	movwf	___ftge@ff1^(0+128)
 12294  10A3  0022               	movlb	2	; select bank2
 12295  10A4  083F               	movf	(log@x+1)^(0+256),w
 12296  10A5  0021               	movlb	1	; select bank1
 12297  10A6  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12298  10A7  0022               	movlb	2	; select bank2
 12299  10A8  0840               	movf	(log@x+2)^(0+256),w
 12300  10A9  0021               	movlb	1	; select bank1
 12301  10AA  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12302  10AB  3000               	movlw	0
 12303  10AC  00A3               	movwf	___ftge@ff2^(0+128)
 12304  10AD  3000               	movlw	0
 12305  10AE  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12306  10AF  3000               	movlw	0
 12307  10B0  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12308  10B1  31A2  22F9  3190   	fcall	___ftge
 12309  10B4  1803               	btfsc	3,0
 12310  10B5  28C3               	goto	l7927
 12311  10B6  3021               	movlw	33
 12312  10B7  0024               	movlb	4	; select bank4
 12313  10B8  00D3               	movwf	_errno^(0+512)
 12314  10B9  3000               	movlw	0
 12315  10BA  00D4               	movwf	(_errno^(0+512)+1)
 12316  10BB  3000               	movlw	0
 12317  10BC  0022               	movlb	2	; select bank2
 12318  10BD  00BE               	movwf	?_log^(0+256)
 12319  10BE  3000               	movlw	0
 12320  10BF  00BF               	movwf	(?_log+1)^(0+256)
 12321  10C0  3000               	movlw	0
 12322  10C1  00C0               	movwf	(?_log+2)^(0+256)
 12323  10C2  0008               	return
 12324  10C3                     l7927:	
 12325  10C3  0022               	movlb	2	; select bank2
 12326  10C4  0840               	movf	(log@x+2)^(0+256),w
 12327  10C5  043F               	iorwf	(log@x+1)^(0+256),w
 12328  10C6  043E               	iorwf	log@x^(0+256),w
 12329  10C7  1D03               	skipz
 12330  10C8  28D6               	goto	l7933
 12331  10C9  3022               	movlw	34
 12332  10CA  0024               	movlb	4	; select bank4
 12333  10CB  00D3               	movwf	_errno^(0+512)
 12334  10CC  3000               	movlw	0
 12335  10CD  00D4               	movwf	(_errno^(0+512)+1)
 12336  10CE  3000               	movlw	0
 12337  10CF  0022               	movlb	2	; select bank2
 12338  10D0  00BE               	movwf	?_log^(0+256)
 12339  10D1  3000               	movlw	0
 12340  10D2  00BF               	movwf	(?_log+1)^(0+256)
 12341  10D3  3000               	movlw	0
 12342  10D4  00C0               	movwf	(?_log+2)^(0+256)
 12343  10D5  0008               	return
 12344  10D6                     l7933:	
 12345  10D6  3000               	movlw	0
 12346  10D7  0021               	movlb	1	; select bank1
 12347  10D8  00C1               	movwf	___ftadd@f1^(0+128)
 12348  10D9  3080               	movlw	128
 12349  10DA  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 12350  10DB  30BF               	movlw	191
 12351  10DC  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 12352  10DD  3000               	movlw	0
 12353  10DE  00AE               	movwf	___ftmul@f1^(0+128)
 12354  10DF  3000               	movlw	0
 12355  10E0  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12356  10E1  3040               	movlw	64
 12357  10E2  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12358  10E3  3042               	movlw	(low (log@exponent| (0+256)))& (0+255)
 12359  10E4  0022               	movlb	2	; select bank2
 12360  10E5  00C1               	movwf	??_log^(0+256)
 12361  10E6  0841               	movf	??_log^(0+256),w
 12362  10E7  0021               	movlb	1	; select bank1
 12363  10E8  00A3               	movwf	frexp@eptr^(0+128)
 12364  10E9  0022               	movlb	2	; select bank2
 12365  10EA  083E               	movf	log@x^(0+256),w
 12366  10EB  0021               	movlb	1	; select bank1
 12367  10EC  00A0               	movwf	frexp@value^(0+128)
 12368  10ED  0022               	movlb	2	; select bank2
 12369  10EE  083F               	movf	(log@x+1)^(0+256),w
 12370  10EF  0021               	movlb	1	; select bank1
 12371  10F0  00A1               	movwf	(frexp@value+1)^(0+128)
 12372  10F1  0022               	movlb	2	; select bank2
 12373  10F2  0840               	movf	(log@x+2)^(0+256),w
 12374  10F3  0021               	movlb	1	; select bank1
 12375  10F4  00A2               	movwf	(frexp@value+2)^(0+128)
 12376  10F5  31A3  23B0  3190   	fcall	_frexp
 12377  10F8  0021               	movlb	1	; select bank1
 12378  10F9  0820               	movf	?_frexp^(0+128),w
 12379  10FA  00B1               	movwf	___ftmul@f2^(0+128)
 12380  10FB  0821               	movf	(?_frexp+1)^(0+128),w
 12381  10FC  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12382  10FD  0822               	movf	(?_frexp+2)^(0+128),w
 12383  10FE  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12384  10FF  319E  2691  3190   	fcall	___ftmul
 12385  1102  0021               	movlb	1	; select bank1
 12386  1103  082E               	movf	?___ftmul^(0+128),w
 12387  1104  00C4               	movwf	___ftadd@f2^(0+128)
 12388  1105  082F               	movf	(?___ftmul+1)^(0+128),w
 12389  1106  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 12390  1107  0830               	movf	(?___ftmul+2)^(0+128),w
 12391  1108  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 12392  1109  3192  225B  3190   	fcall	___ftadd
 12393  110C  0021               	movlb	1	; select bank1
 12394  110D  0841               	movf	?___ftadd^(0+128),w
 12395  110E  0022               	movlb	2	; select bank2
 12396  110F  00BE               	movwf	log@x^(0+256)
 12397  1110  0021               	movlb	1	; select bank1
 12398  1111  0842               	movf	(?___ftadd+1)^(0+128),w
 12399  1112  0022               	movlb	2	; select bank2
 12400  1113  00BF               	movwf	(log@x+1)^(0+256)
 12401  1114  0021               	movlb	1	; select bank1
 12402  1115  0843               	movf	(?___ftadd+2)^(0+128),w
 12403  1116  0022               	movlb	2	; select bank2
 12404  1117  00C0               	movwf	(log@x+2)^(0+256)
 12405  1118  30FF               	movlw	255
 12406  1119  07C2               	addwf	log@exponent^(0+256),f
 12407  111A  30FF               	movlw	255
 12408  111B  3DC3               	addwfc	(log@exponent+1)^(0+256),f
 12409  111C  083E               	movf	log@x^(0+256),w
 12410  111D  00B4               	movwf	eval_poly@x^(0+256)
 12411  111E  083F               	movf	(log@x+1)^(0+256),w
 12412  111F  00B5               	movwf	(eval_poly@x+1)^(0+256)
 12413  1120  0840               	movf	(log@x+2)^(0+256),w
 12414  1121  00B6               	movwf	(eval_poly@x+2)^(0+256)
 12415  1122  301E               	movlw	low (log@coeff| (0+32768))
 12416  1123  00B7               	movwf	eval_poly@d^(0+256)
 12417  1124  30A8               	movlw	high (log@coeff| (0+32768))
 12418  1125  00B8               	movwf	(eval_poly@d^(0+256)+1)
 12419  1126  3008               	movlw	8
 12420  1127  00B9               	movwf	eval_poly@n^(0+256)
 12421  1128  3000               	movlw	0
 12422  1129  00BA               	movwf	(eval_poly@n^(0+256)+1)
 12423  112A  3198  208C  3190   	fcall	_eval_poly
 12424  112D  0022               	movlb	2	; select bank2
 12425  112E  0834               	movf	?_eval_poly^(0+256),w
 12426  112F  00BE               	movwf	log@x^(0+256)
 12427  1130  0835               	movf	(?_eval_poly+1)^(0+256),w
 12428  1131  00BF               	movwf	(log@x+1)^(0+256)
 12429  1132  0836               	movf	(?_eval_poly+2)^(0+256),w
 12430  1133  00C0               	movwf	(log@x+2)^(0+256)
 12431  1134  083E               	movf	log@x^(0+256),w
 12432  1135  0021               	movlb	1	; select bank1
 12433  1136  00C1               	movwf	___ftadd@f1^(0+128)
 12434  1137  0022               	movlb	2	; select bank2
 12435  1138  083F               	movf	(log@x+1)^(0+256),w
 12436  1139  0021               	movlb	1	; select bank1
 12437  113A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 12438  113B  0022               	movlb	2	; select bank2
 12439  113C  0840               	movf	(log@x+2)^(0+256),w
 12440  113D  0021               	movlb	1	; select bank1
 12441  113E  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 12442  113F  3072               	movlw	114
 12443  1140  00AE               	movwf	___ftmul@f1^(0+128)
 12444  1141  3031               	movlw	49
 12445  1142  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12446  1143  303F               	movlw	63
 12447  1144  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12448  1145  0022               	movlb	2	; select bank2
 12449  1146  0843               	movf	(log@exponent+1)^(0+256),w
 12450  1147  0021               	movlb	1	; select bank1
 12451  1148  00A9               	movwf	(___awtoft@c+1)^(0+128)
 12452  1149  0022               	movlb	2	; select bank2
 12453  114A  0842               	movf	log@exponent^(0+256),w
 12454  114B  0021               	movlb	1	; select bank1
 12455  114C  00A8               	movwf	___awtoft@c^(0+128)
 12456  114D  31A0  20ED  3190   	fcall	___awtoft
 12457  1150  0021               	movlb	1	; select bank1
 12458  1151  0828               	movf	?___awtoft^(0+128),w
 12459  1152  00B1               	movwf	___ftmul@f2^(0+128)
 12460  1153  0829               	movf	(?___awtoft+1)^(0+128),w
 12461  1154  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12462  1155  082A               	movf	(?___awtoft+2)^(0+128),w
 12463  1156  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12464  1157  319E  2691  3190   	fcall	___ftmul
 12465  115A  0021               	movlb	1	; select bank1
 12466  115B  082E               	movf	?___ftmul^(0+128),w
 12467  115C  00C4               	movwf	___ftadd@f2^(0+128)
 12468  115D  082F               	movf	(?___ftmul+1)^(0+128),w
 12469  115E  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 12470  115F  0830               	movf	(?___ftmul+2)^(0+128),w
 12471  1160  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 12472  1161  3192  225B         	fcall	___ftadd
 12473  1163  0021               	movlb	1	; select bank1
 12474  1164  0841               	movf	?___ftadd^(0+128),w
 12475  1165  0022               	movlb	2	; select bank2
 12476  1166  00BE               	movwf	?_log^(0+256)
 12477  1167  0021               	movlb	1	; select bank1
 12478  1168  0842               	movf	(?___ftadd+1)^(0+128),w
 12479  1169  0022               	movlb	2	; select bank2
 12480  116A  00BF               	movwf	(?_log+1)^(0+256)
 12481  116B  0021               	movlb	1	; select bank1
 12482  116C  0843               	movf	(?___ftadd+2)^(0+128),w
 12483  116D  0022               	movlb	2	; select bank2
 12484  116E  00C0               	movwf	(?_log+2)^(0+256)
 12485  116F  0008               	return
 12486  1170                     __end_of_log:	
 12487                           
 12488                           	psect	text29
 12489  1351                     __ptext29:	
 12490 ;; *************** function _exp *****************
 12491 ;; Defined at:
 12492 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\exp.c"
 12493 ;; Parameters:    Size  Location     Type
 12494 ;;  x               3   40[BANK2 ] int 
 12495 ;; Auto vars:     Size  Location     Type
 12496 ;;  exponent        2   50[BANK2 ] int 
 12497 ;;  sign            1   52[BANK2 ] unsigned char 
 12498 ;; Return value:  Size  Location     Type
 12499 ;;                  3   40[BANK2 ] unsigned char 
 12500 ;; Registers used:
 12501 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12502 ;; Tracked objects:
 12503 ;;		On entry : 0/0
 12504 ;;		On exit  : 0/0
 12505 ;;		Unchanged: 0/0
 12506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12507 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12508 ;;      Locals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12509 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12510 ;;      Totals:         0       0       0      13       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12511 ;;Total ram usage:       13 bytes
 12512 ;; Hardware stack levels used:    1
 12513 ;; Hardware stack levels required when called:    6
 12514 ;; This function calls:
 12515 ;;		___awtoft
 12516 ;;		___ftdiv
 12517 ;;		___ftge
 12518 ;;		___ftmul
 12519 ;;		___ftneg
 12520 ;;		___ftsub
 12521 ;;		___fttol
 12522 ;;		_eval_poly
 12523 ;;		_floor
 12524 ;;		_ldexp
 12525 ;; This function is called by:
 12526 ;;		_pow
 12527 ;; This function uses a non-reentrant model
 12528 ;;
 12529                           
 12530                           
 12531                           ;psect for function _exp
 12532  1351                     _exp:	
 12533                           
 12534                           ;incstack = 0
 12535                           ; Regs used in _exp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12536  1351  0022               	movlb	2	; select bank2
 12537  1352  084A               	movf	(exp@x+2)^(0+256),w
 12538  1353  0449               	iorwf	(exp@x+1)^(0+256),w
 12539  1354  0448               	iorwf	exp@x^(0+256),w
 12540  1355  1D03               	skipz
 12541  1356  2B5E               	goto	l7949
 12542  1357  3000               	movlw	0
 12543  1358  00C8               	movwf	?_exp^(0+256)
 12544  1359  3080               	movlw	128
 12545  135A  00C9               	movwf	(?_exp+1)^(0+256)
 12546  135B  303F               	movlw	63
 12547  135C  00CA               	movwf	(?_exp+2)^(0+256)
 12548  135D  0008               	return
 12549  135E                     l7949:	
 12550  135E  3072               	movlw	114
 12551  135F  0021               	movlb	1	; select bank1
 12552  1360  00A0               	movwf	___ftge@ff1^(0+128)
 12553  1361  3031               	movlw	49
 12554  1362  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12555  1363  3044               	movlw	68
 12556  1364  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12557  1365  0022               	movlb	2	; select bank2
 12558  1366  0848               	movf	exp@x^(0+256),w
 12559  1367  0021               	movlb	1	; select bank1
 12560  1368  00A3               	movwf	___ftge@ff2^(0+128)
 12561  1369  0022               	movlb	2	; select bank2
 12562  136A  0849               	movf	(exp@x+1)^(0+256),w
 12563  136B  0021               	movlb	1	; select bank1
 12564  136C  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12565  136D  0022               	movlb	2	; select bank2
 12566  136E  084A               	movf	(exp@x+2)^(0+256),w
 12567  136F  0021               	movlb	1	; select bank1
 12568  1370  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12569  1371  31A2  22F9  3193   	fcall	___ftge
 12570  1374  1803               	btfsc	3,0
 12571  1375  2B83               	goto	l7959
 12572  1376  3022               	movlw	34
 12573  1377  0024               	movlb	4	; select bank4
 12574  1378  00D3               	movwf	_errno^(0+512)
 12575  1379  3000               	movlw	0
 12576  137A  00D4               	movwf	(_errno^(0+512)+1)
 12577  137B  30FF               	movlw	255
 12578  137C  0022               	movlb	2	; select bank2
 12579  137D  00C8               	movwf	?_exp^(0+256)
 12580  137E  307F               	movlw	127
 12581  137F  00C9               	movwf	(?_exp+1)^(0+256)
 12582  1380  307F               	movlw	127
 12583  1381  00CA               	movwf	(?_exp+2)^(0+256)
 12584  1382  0008               	return
 12585  1383                     l7959:	
 12586  1383  0022               	movlb	2	; select bank2
 12587  1384  0848               	movf	exp@x^(0+256),w
 12588  1385  0021               	movlb	1	; select bank1
 12589  1386  00A0               	movwf	___ftge@ff1^(0+128)
 12590  1387  0022               	movlb	2	; select bank2
 12591  1388  0849               	movf	(exp@x+1)^(0+256),w
 12592  1389  0021               	movlb	1	; select bank1
 12593  138A  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12594  138B  0022               	movlb	2	; select bank2
 12595  138C  084A               	movf	(exp@x+2)^(0+256),w
 12596  138D  0021               	movlb	1	; select bank1
 12597  138E  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12598  138F  3049               	movlw	73
 12599  1390  00A3               	movwf	___ftge@ff2^(0+128)
 12600  1391  303A               	movlw	58
 12601  1392  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12602  1393  30C4               	movlw	196
 12603  1394  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12604  1395  31A2  22F9  3193   	fcall	___ftge
 12605  1398  1803               	btfsc	3,0
 12606  1399  2BA7               	goto	l7965
 12607  139A  3022               	movlw	34
 12608  139B  0024               	movlb	4	; select bank4
 12609  139C  00D3               	movwf	_errno^(0+512)
 12610  139D  3000               	movlw	0
 12611  139E  00D4               	movwf	(_errno^(0+512)+1)
 12612  139F  3000               	movlw	0
 12613  13A0  0022               	movlb	2	; select bank2
 12614  13A1  00C8               	movwf	?_exp^(0+256)
 12615  13A2  3000               	movlw	0
 12616  13A3  00C9               	movwf	(?_exp+1)^(0+256)
 12617  13A4  3000               	movlw	0
 12618  13A5  00CA               	movwf	(?_exp+2)^(0+256)
 12619  13A6  0008               	return
 12620  13A7                     l7965:	
 12621  13A7  0022               	movlb	2	; select bank2
 12622  13A8  0848               	movf	exp@x^(0+256),w
 12623  13A9  0021               	movlb	1	; select bank1
 12624  13AA  00A0               	movwf	___ftge@ff1^(0+128)
 12625  13AB  0022               	movlb	2	; select bank2
 12626  13AC  0849               	movf	(exp@x+1)^(0+256),w
 12627  13AD  0021               	movlb	1	; select bank1
 12628  13AE  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12629  13AF  0022               	movlb	2	; select bank2
 12630  13B0  084A               	movf	(exp@x+2)^(0+256),w
 12631  13B1  0021               	movlb	1	; select bank1
 12632  13B2  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12633  13B3  3000               	movlw	0
 12634  13B4  00A3               	movwf	___ftge@ff2^(0+128)
 12635  13B5  3000               	movlw	0
 12636  13B6  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12637  13B7  3000               	movlw	0
 12638  13B8  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12639  13B9  31A2  22F9  3193   	fcall	___ftge
 12640  13BC  1803               	btfsc	3,0
 12641  13BD  2BC0               	goto	u8310
 12642  13BE  3001               	movlw	1
 12643  13BF  2BC1               	goto	u8320
 12644  13C0                     u8310:	
 12645  13C0  3000               	movlw	0
 12646  13C1                     u8320:	
 12647  13C1  0022               	movlb	2	; select bank2
 12648  13C2  00CB               	movwf	??_exp^(0+256)
 12649  13C3  084B               	movf	??_exp^(0+256),w
 12650  13C4  00D4               	movwf	exp@sign^(0+256)
 12651  13C5  0854               	movf	exp@sign^(0+256),w
 12652  13C6  1903               	btfsc	3,2
 12653  13C7  2BE2               	goto	l7971
 12654  13C8  0848               	movf	exp@x^(0+256),w
 12655  13C9  0021               	movlb	1	; select bank1
 12656  13CA  00BE               	movwf	___ftneg@f1^(0+128)
 12657  13CB  0022               	movlb	2	; select bank2
 12658  13CC  0849               	movf	(exp@x+1)^(0+256),w
 12659  13CD  0021               	movlb	1	; select bank1
 12660  13CE  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12661  13CF  0022               	movlb	2	; select bank2
 12662  13D0  084A               	movf	(exp@x+2)^(0+256),w
 12663  13D1  0021               	movlb	1	; select bank1
 12664  13D2  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12665  13D3  31AF  27BA  3193   	fcall	___ftneg
 12666  13D6  0021               	movlb	1	; select bank1
 12667  13D7  083E               	movf	?___ftneg^(0+128),w
 12668  13D8  0022               	movlb	2	; select bank2
 12669  13D9  00C8               	movwf	exp@x^(0+256)
 12670  13DA  0021               	movlb	1	; select bank1
 12671  13DB  083F               	movf	(?___ftneg+1)^(0+128),w
 12672  13DC  0022               	movlb	2	; select bank2
 12673  13DD  00C9               	movwf	(exp@x+1)^(0+256)
 12674  13DE  0021               	movlb	1	; select bank1
 12675  13DF  0840               	movf	(?___ftneg+2)^(0+128),w
 12676  13E0  0022               	movlb	2	; select bank2
 12677  13E1  00CA               	movwf	(exp@x+2)^(0+256)
 12678  13E2                     l7971:	
 12679  13E2  30AA               	movlw	170
 12680  13E3  0021               	movlb	1	; select bank1
 12681  13E4  00AE               	movwf	___ftmul@f1^(0+128)
 12682  13E5  30B8               	movlw	184
 12683  13E6  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12684  13E7  303F               	movlw	63
 12685  13E8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12686  13E9  0022               	movlb	2	; select bank2
 12687  13EA  0848               	movf	exp@x^(0+256),w
 12688  13EB  0021               	movlb	1	; select bank1
 12689  13EC  00B1               	movwf	___ftmul@f2^(0+128)
 12690  13ED  0022               	movlb	2	; select bank2
 12691  13EE  0849               	movf	(exp@x+1)^(0+256),w
 12692  13EF  0021               	movlb	1	; select bank1
 12693  13F0  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12694  13F1  0022               	movlb	2	; select bank2
 12695  13F2  084A               	movf	(exp@x+2)^(0+256),w
 12696  13F3  0021               	movlb	1	; select bank1
 12697  13F4  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12698  13F5  319E  2691  3193   	fcall	___ftmul
 12699  13F8  0021               	movlb	1	; select bank1
 12700  13F9  082E               	movf	?___ftmul^(0+128),w
 12701  13FA  0022               	movlb	2	; select bank2
 12702  13FB  00C8               	movwf	exp@x^(0+256)
 12703  13FC  0021               	movlb	1	; select bank1
 12704  13FD  082F               	movf	(?___ftmul+1)^(0+128),w
 12705  13FE  0022               	movlb	2	; select bank2
 12706  13FF  00C9               	movwf	(exp@x+1)^(0+256)
 12707  1400  0021               	movlb	1	; select bank1
 12708  1401  0830               	movf	(?___ftmul+2)^(0+128),w
 12709  1402  0022               	movlb	2	; select bank2
 12710  1403  00CA               	movwf	(exp@x+2)^(0+256)
 12711  1404  0848               	movf	exp@x^(0+256),w
 12712  1405  00B6               	movwf	floor@x^(0+256)
 12713  1406  0849               	movf	(exp@x+1)^(0+256),w
 12714  1407  00B7               	movwf	(floor@x+1)^(0+256)
 12715  1408  084A               	movf	(exp@x+2)^(0+256),w
 12716  1409  00B8               	movwf	(floor@x+2)^(0+256)
 12717  140A  319C  2496  3193   	fcall	_floor
 12718  140D  0022               	movlb	2	; select bank2
 12719  140E  0836               	movf	?_floor^(0+256),w
 12720  140F  00CC               	movwf	_exp$2827^(0+256)
 12721  1410  0837               	movf	(?_floor+1)^(0+256),w
 12722  1411  00CD               	movwf	(_exp$2827+1)^(0+256)
 12723  1412  0838               	movf	(?_floor+2)^(0+256),w
 12724  1413  00CE               	movwf	(_exp$2827+2)^(0+256)
 12725  1414  084C               	movf	_exp$2827^(0+256),w
 12726  1415  00A0               	movwf	___fttol@f1^(0+256)
 12727  1416  084D               	movf	(_exp$2827+1)^(0+256),w
 12728  1417  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12729  1418  084E               	movf	(_exp$2827+2)^(0+256),w
 12730  1419  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12731  141A  319A  22FD  3193   	fcall	___fttol
 12732  141D  0022               	movlb	2	; select bank2
 12733  141E  0821               	movf	(?___fttol^(0+256)+1),w
 12734  141F  00D3               	movwf	(exp@exponent+1)^(0+256)
 12735  1420  0820               	movf	?___fttol^(0+256),w
 12736  1421  00D2               	movwf	exp@exponent^(0+256)
 12737  1422  0853               	movf	(exp@exponent+1)^(0+256),w
 12738  1423  0021               	movlb	1	; select bank1
 12739  1424  00A9               	movwf	(___awtoft@c+1)^(0+128)
 12740  1425  0022               	movlb	2	; select bank2
 12741  1426  0852               	movf	exp@exponent^(0+256),w
 12742  1427  0021               	movlb	1	; select bank1
 12743  1428  00A8               	movwf	___awtoft@c^(0+128)
 12744  1429  31A0  20ED  3193   	fcall	___awtoft
 12745  142C  0021               	movlb	1	; select bank1
 12746  142D  0828               	movf	?___awtoft^(0+128),w
 12747  142E  0022               	movlb	2	; select bank2
 12748  142F  00BF               	movwf	___ftsub@f2^(0+256)
 12749  1430  0021               	movlb	1	; select bank1
 12750  1431  0829               	movf	(?___awtoft+1)^(0+128),w
 12751  1432  0022               	movlb	2	; select bank2
 12752  1433  00C0               	movwf	(___ftsub@f2+1)^(0+256)
 12753  1434  0021               	movlb	1	; select bank1
 12754  1435  082A               	movf	(?___awtoft+2)^(0+128),w
 12755  1436  0022               	movlb	2	; select bank2
 12756  1437  00C1               	movwf	(___ftsub@f2+2)^(0+256)
 12757  1438  0848               	movf	exp@x^(0+256),w
 12758  1439  00C2               	movwf	___ftsub@f1^(0+256)
 12759  143A  0849               	movf	(exp@x+1)^(0+256),w
 12760  143B  00C3               	movwf	(___ftsub@f1+1)^(0+256)
 12761  143C  084A               	movf	(exp@x+2)^(0+256),w
 12762  143D  00C4               	movwf	(___ftsub@f1+2)^(0+256)
 12763  143E  31A1  215D  3193   	fcall	___ftsub
 12764  1441  0022               	movlb	2	; select bank2
 12765  1442  083F               	movf	?___ftsub^(0+256),w
 12766  1443  00C8               	movwf	exp@x^(0+256)
 12767  1444  0840               	movf	(?___ftsub+1)^(0+256),w
 12768  1445  00C9               	movwf	(exp@x+1)^(0+256)
 12769  1446  0841               	movf	(?___ftsub+2)^(0+256),w
 12770  1447  00CA               	movwf	(exp@x+2)^(0+256)
 12771  1448  0848               	movf	exp@x^(0+256),w
 12772  1449  00B4               	movwf	eval_poly@x^(0+256)
 12773  144A  0849               	movf	(exp@x+1)^(0+256),w
 12774  144B  00B5               	movwf	(eval_poly@x+1)^(0+256)
 12775  144C  084A               	movf	(exp@x+2)^(0+256),w
 12776  144D  00B6               	movwf	(eval_poly@x+2)^(0+256)
 12777  144E  3000               	movlw	low (exp@coeff| (0+32768))
 12778  144F  00B7               	movwf	eval_poly@d^(0+256)
 12779  1450  30A8               	movlw	high (exp@coeff| (0+32768))
 12780  1451  00B8               	movwf	(eval_poly@d^(0+256)+1)
 12781  1452  3009               	movlw	9
 12782  1453  00B9               	movwf	eval_poly@n^(0+256)
 12783  1454  3000               	movlw	0
 12784  1455  00BA               	movwf	(eval_poly@n^(0+256)+1)
 12785  1456  3198  208C  3193   	fcall	_eval_poly
 12786  1459  0022               	movlb	2	; select bank2
 12787  145A  0834               	movf	?_eval_poly^(0+256),w
 12788  145B  00BE               	movwf	ldexp@value^(0+256)
 12789  145C  0835               	movf	(?_eval_poly+1)^(0+256),w
 12790  145D  00BF               	movwf	(ldexp@value+1)^(0+256)
 12791  145E  0836               	movf	(?_eval_poly+2)^(0+256),w
 12792  145F  00C0               	movwf	(ldexp@value+2)^(0+256)
 12793  1460  0853               	movf	(exp@exponent+1)^(0+256),w
 12794  1461  00C2               	movwf	(ldexp@newexp+1)^(0+256)
 12795  1462  0852               	movf	exp@exponent^(0+256),w
 12796  1463  00C1               	movwf	ldexp@newexp^(0+256)
 12797  1464  3188  2008  3193   	fcall	_ldexp
 12798  1467  0022               	movlb	2	; select bank2
 12799  1468  083E               	movf	?_ldexp^(0+256),w
 12800  1469  00C8               	movwf	exp@x^(0+256)
 12801  146A  083F               	movf	(?_ldexp+1)^(0+256),w
 12802  146B  00C9               	movwf	(exp@x+1)^(0+256)
 12803  146C  0840               	movf	(?_ldexp+2)^(0+256),w
 12804  146D  00CA               	movwf	(exp@x+2)^(0+256)
 12805  146E  0854               	movf	exp@sign^(0+256),w
 12806  146F  1903               	btfsc	3,2
 12807  1470  0008               	return
 12808  1471  30FF               	movlw	255
 12809  1472  00CF               	movwf	_exp$2583^(0+256)
 12810  1473  307F               	movlw	127
 12811  1474  00D0               	movwf	(_exp$2583+1)^(0+256)
 12812  1475  307F               	movlw	127
 12813  1476  00D1               	movwf	(_exp$2583+2)^(0+256)
 12814  1477  084A               	movf	(exp@x+2)^(0+256),w
 12815  1478  0651               	xorwf	(_exp$2583+2)^(0+256),w
 12816  1479  1D03               	skipz
 12817  147A  2C81               	goto	u8355
 12818  147B  0849               	movf	(exp@x+1)^(0+256),w
 12819  147C  0650               	xorwf	(_exp$2583+1)^(0+256),w
 12820  147D  1D03               	skipz
 12821  147E  2C81               	goto	u8355
 12822  147F  0848               	movf	exp@x^(0+256),w
 12823  1480  064F               	xorwf	_exp$2583^(0+256),w
 12824  1481                     u8355:	
 12825  1481  1D03               	skipz
 12826  1482  2C8A               	goto	l7993
 12827  1483  3000               	movlw	0
 12828  1484  00C8               	movwf	?_exp^(0+256)
 12829  1485  3000               	movlw	0
 12830  1486  00C9               	movwf	(?_exp+1)^(0+256)
 12831  1487  3000               	movlw	0
 12832  1488  00CA               	movwf	(?_exp+2)^(0+256)
 12833  1489  0008               	return
 12834  148A                     l7993:	
 12835  148A  0848               	movf	exp@x^(0+256),w
 12836  148B  0021               	movlb	1	; select bank1
 12837  148C  00CE               	movwf	___ftdiv@f2^(0+128)
 12838  148D  0022               	movlb	2	; select bank2
 12839  148E  0849               	movf	(exp@x+1)^(0+256),w
 12840  148F  0021               	movlb	1	; select bank1
 12841  1490  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 12842  1491  0022               	movlb	2	; select bank2
 12843  1492  084A               	movf	(exp@x+2)^(0+256),w
 12844  1493  0021               	movlb	1	; select bank1
 12845  1494  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 12846  1495  3000               	movlw	0
 12847  1496  00D1               	movwf	___ftdiv@f1^(0+128)
 12848  1497  3080               	movlw	128
 12849  1498  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 12850  1499  303F               	movlw	63
 12851  149A  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 12852  149B  319D  253D         	fcall	___ftdiv
 12853  149D  0021               	movlb	1	; select bank1
 12854  149E  084E               	movf	?___ftdiv^(0+128),w
 12855  149F  0022               	movlb	2	; select bank2
 12856  14A0  00C8               	movwf	?_exp^(0+256)
 12857  14A1  0021               	movlb	1	; select bank1
 12858  14A2  084F               	movf	(?___ftdiv+1)^(0+128),w
 12859  14A3  0022               	movlb	2	; select bank2
 12860  14A4  00C9               	movwf	(?_exp+1)^(0+256)
 12861  14A5  0021               	movlb	1	; select bank1
 12862  14A6  0850               	movf	(?___ftdiv+2)^(0+128),w
 12863  14A7  0022               	movlb	2	; select bank2
 12864  14A8  00CA               	movwf	(?_exp+2)^(0+256)
 12865  14A9  0008               	return
 12866  14AA                     __end_of_exp:	
 12867                           
 12868                           	psect	text30
 12869  0808                     __ptext30:	
 12870 ;; *************** function _ldexp *****************
 12871 ;; Defined at:
 12872 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
 12873 ;; Parameters:    Size  Location     Type
 12874 ;;  value           3   30[BANK2 ] unsigned char 
 12875 ;;  newexp          2   33[BANK2 ] int 
 12876 ;; Auto vars:     Size  Location     Type
 12877 ;;		None
 12878 ;; Return value:  Size  Location     Type
 12879 ;;                  3   30[BANK2 ] int 
 12880 ;; Registers used:
 12881 ;;		wreg, status,2, status,0, pclath, cstack
 12882 ;; Tracked objects:
 12883 ;;		On entry : 0/0
 12884 ;;		On exit  : 0/0
 12885 ;;		Unchanged: 0/0
 12886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12887 ;;      Params:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12888 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12889 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12890 ;;      Totals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12891 ;;Total ram usage:       10 bytes
 12892 ;; Hardware stack levels used:    1
 12893 ;; Hardware stack levels required when called:    4
 12894 ;; This function calls:
 12895 ;;		___ftge
 12896 ;;		___ftneg
 12897 ;; This function is called by:
 12898 ;;		_exp
 12899 ;; This function uses a non-reentrant model
 12900 ;;
 12901                           
 12902                           
 12903                           ;psect for function _ldexp
 12904  0808                     _ldexp:	
 12905                           
 12906                           ;incstack = 0
 12907                           ; Regs used in _ldexp: [wreg+status,2+status,0+pclath+cstack]
 12908  0808  0022               	movlb	2	; select bank2
 12909  0809  0840               	movf	(ldexp@value+2)^(0+256),w
 12910  080A  043F               	iorwf	(ldexp@value+1)^(0+256),w
 12911  080B  043E               	iorwf	ldexp@value^(0+256),w
 12912  080C  1D03               	skipz
 12913  080D  2815               	goto	l7813
 12914  080E  3000               	movlw	0
 12915  080F  00BE               	movwf	?_ldexp^(0+256)
 12916  0810  3000               	movlw	0
 12917  0811  00BF               	movwf	(?_ldexp+1)^(0+256)
 12918  0812  3000               	movlw	0
 12919  0813  00C0               	movwf	(?_ldexp+2)^(0+256)
 12920  0814  0008               	return
 12921  0815                     l7813:	
 12922  0815  0840               	movf	(ldexp@value^(0+256)+2),w
 12923  0816  397F               	andlw	127
 12924  0817  00C3               	movwf	??_ldexp^(0+256)
 12925  0818  01C4               	clrf	(??_ldexp^(0+256)+1)
 12926  0819  35C3               	lslf	??_ldexp^(0+256),f
 12927  081A  0DC4               	rlf	(??_ldexp^(0+256)+1),f
 12928  081B  0843               	movf	??_ldexp^(0+256),w
 12929  081C  07C1               	addwf	ldexp@newexp^(0+256),f
 12930  081D  0844               	movf	(??_ldexp+1)^(0+256),w
 12931  081E  3DC2               	addwfc	(ldexp@newexp+1)^(0+256),f
 12932  081F  0D3F               	rlf	(ldexp@value^(0+256)+1),w
 12933  0820  0D3F               	rlf	(ldexp@value^(0+256)+1),w
 12934  0821  3901               	andlw	1
 12935  0822  00C3               	movwf	??_ldexp^(0+256)
 12936  0823  01C4               	clrf	(??_ldexp^(0+256)+1)
 12937  0824  0843               	movf	??_ldexp^(0+256),w
 12938  0825  07C1               	addwf	ldexp@newexp^(0+256),f
 12939  0826  0844               	movf	(??_ldexp+1)^(0+256),w
 12940  0827  3DC2               	addwfc	(ldexp@newexp+1)^(0+256),f
 12941  0828  1FC2               	btfss	(ldexp@newexp+1)^(0+256),7
 12942  0829  2837               	goto	l7823
 12943  082A  3022               	movlw	34
 12944  082B  0024               	movlb	4	; select bank4
 12945  082C  00D3               	movwf	_errno^(0+512)
 12946  082D  3000               	movlw	0
 12947  082E  00D4               	movwf	(_errno^(0+512)+1)
 12948  082F  3000               	movlw	0
 12949  0830  0022               	movlb	2	; select bank2
 12950  0831  00BE               	movwf	?_ldexp^(0+256)
 12951  0832  3000               	movlw	0
 12952  0833  00BF               	movwf	(?_ldexp+1)^(0+256)
 12953  0834  3000               	movlw	0
 12954  0835  00C0               	movwf	(?_ldexp+2)^(0+256)
 12955  0836  0008               	return
 12956  0837                     l7823:	
 12957  0837  0842               	movf	(ldexp@newexp+1)^(0+256),w
 12958  0838  3A80               	xorlw	128
 12959  0839  00C3               	movwf	??_ldexp^(0+256)
 12960  083A  3081               	movlw	129
 12961  083B  0243               	subwf	??_ldexp^(0+256),w
 12962  083C  1D03               	skipz
 12963  083D  2840               	goto	u8205
 12964  083E  3000               	movlw	0
 12965  083F  0241               	subwf	ldexp@newexp^(0+256),w
 12966  0840                     u8205:	
 12967  0840  1C03               	skipc
 12968  0841  2887               	goto	l7847
 12969  0842  3022               	movlw	34
 12970  0843  0024               	movlb	4	; select bank4
 12971  0844  00D3               	movwf	_errno^(0+512)
 12972  0845  3000               	movlw	0
 12973  0846  00D4               	movwf	(_errno^(0+512)+1)
 12974  0847  0022               	movlb	2	; select bank2
 12975  0848  083E               	movf	ldexp@value^(0+256),w
 12976  0849  0021               	movlb	1	; select bank1
 12977  084A  00A0               	movwf	___ftge@ff1^(0+128)
 12978  084B  0022               	movlb	2	; select bank2
 12979  084C  083F               	movf	(ldexp@value+1)^(0+256),w
 12980  084D  0021               	movlb	1	; select bank1
 12981  084E  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12982  084F  0022               	movlb	2	; select bank2
 12983  0850  0840               	movf	(ldexp@value+2)^(0+256),w
 12984  0851  0021               	movlb	1	; select bank1
 12985  0852  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12986  0853  3000               	movlw	0
 12987  0854  00A3               	movwf	___ftge@ff2^(0+128)
 12988  0855  3000               	movlw	0
 12989  0856  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12990  0857  3000               	movlw	0
 12991  0858  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12992  0859  31A2  22F9  3188   	fcall	___ftge
 12993  085C  1803               	btfsc	3,0
 12994  085D  287F               	goto	l7843
 12995  085E  30FF               	movlw	255
 12996  085F  0022               	movlb	2	; select bank2
 12997  0860  00C5               	movwf	_ldexp$2615^(0+256)
 12998  0861  307F               	movlw	127
 12999  0862  00C6               	movwf	(_ldexp$2615+1)^(0+256)
 13000  0863  307F               	movlw	127
 13001  0864  00C7               	movwf	(_ldexp$2615+2)^(0+256)
 13002  0865  0845               	movf	_ldexp$2615^(0+256),w
 13003  0866  0021               	movlb	1	; select bank1
 13004  0867  00BE               	movwf	___ftneg@f1^(0+128)
 13005  0868  0022               	movlb	2	; select bank2
 13006  0869  0846               	movf	(_ldexp$2615+1)^(0+256),w
 13007  086A  0021               	movlb	1	; select bank1
 13008  086B  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13009  086C  0022               	movlb	2	; select bank2
 13010  086D  0847               	movf	(_ldexp$2615+2)^(0+256),w
 13011  086E  0021               	movlb	1	; select bank1
 13012  086F  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13013  0870  31AF  27BA         	fcall	___ftneg
 13014  0872  0021               	movlb	1	; select bank1
 13015  0873  083E               	movf	?___ftneg^(0+128),w
 13016  0874  0022               	movlb	2	; select bank2
 13017  0875  00BE               	movwf	?_ldexp^(0+256)
 13018  0876  0021               	movlb	1	; select bank1
 13019  0877  083F               	movf	(?___ftneg+1)^(0+128),w
 13020  0878  0022               	movlb	2	; select bank2
 13021  0879  00BF               	movwf	(?_ldexp+1)^(0+256)
 13022  087A  0021               	movlb	1	; select bank1
 13023  087B  0840               	movf	(?___ftneg+2)^(0+128),w
 13024  087C  0022               	movlb	2	; select bank2
 13025  087D  00C0               	movwf	(?_ldexp+2)^(0+256)
 13026  087E  0008               	return
 13027  087F                     l7843:	
 13028  087F  30FF               	movlw	255
 13029  0880  0022               	movlb	2	; select bank2
 13030  0881  00BE               	movwf	?_ldexp^(0+256)
 13031  0882  307F               	movlw	127
 13032  0883  00BF               	movwf	(?_ldexp+1)^(0+256)
 13033  0884  307F               	movlw	127
 13034  0885  00C0               	movwf	(?_ldexp+2)^(0+256)
 13035  0886  0008               	return
 13036  0887                     l7847:	
 13037  0887  0022               	movlb	2	; select bank2
 13038  0888  0842               	movf	(ldexp@newexp+1)^(0+256),w
 13039  0889  00C4               	movwf	(??_ldexp^(0+256)+1)
 13040  088A  0841               	movf	ldexp@newexp^(0+256),w
 13041  088B  00C3               	movwf	??_ldexp^(0+256)
 13042  088C  0D44               	rlf	(??_ldexp^(0+256)+1),w
 13043  088D  0CC4               	rrf	(??_ldexp^(0+256)+1),f
 13044  088E  0CC3               	rrf	??_ldexp^(0+256),f
 13045  088F  0840               	movf	(ldexp@value^(0+256)+2),w
 13046  0890  0643               	xorwf	??_ldexp^(0+256),w
 13047  0891  3980               	andlw	-128
 13048  0892  0643               	xorwf	??_ldexp^(0+256),w
 13049  0893  00C0               	movwf	(ldexp@value^(0+256)+2)
 13050  0894  0841               	movf	ldexp@newexp^(0+256),w
 13051  0895  3901               	andlw	1
 13052  0896  00C3               	movwf	??_ldexp^(0+256)
 13053  0897  0CC3               	rrf	??_ldexp^(0+256),f
 13054  0898  0CC3               	rrf	??_ldexp^(0+256),f
 13055  0899  083F               	movf	(ldexp@value^(0+256)+1),w
 13056  089A  0643               	xorwf	??_ldexp^(0+256),w
 13057  089B  397F               	andlw	-129
 13058  089C  0643               	xorwf	??_ldexp^(0+256),w
 13059  089D  00BF               	movwf	(ldexp@value^(0+256)+1)
 13060  089E  0008               	return
 13061  089F                     __end_of_ldexp:	
 13062                           
 13063                           	psect	text31
 13064  2133                     __ptext31:	
 13065 ;; *************** function ___lltoft *****************
 13066 ;; Defined at:
 13067 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lltoft.c"
 13068 ;; Parameters:    Size  Location     Type
 13069 ;;  c               4    8[BANK1 ] unsigned long 
 13070 ;; Auto vars:     Size  Location     Type
 13071 ;;  exp             1   13[BANK1 ] unsigned char 
 13072 ;; Return value:  Size  Location     Type
 13073 ;;                  3    8[BANK1 ] float 
 13074 ;; Registers used:
 13075 ;;		wreg, status,2, status,0, pclath, cstack
 13076 ;; Tracked objects:
 13077 ;;		On entry : 0/0
 13078 ;;		On exit  : 0/0
 13079 ;;		Unchanged: 0/0
 13080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13081 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13082 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13083 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13084 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13085 ;;Total ram usage:        6 bytes
 13086 ;; Hardware stack levels used:    1
 13087 ;; Hardware stack levels required when called:    4
 13088 ;; This function calls:
 13089 ;;		___ftpack
 13090 ;; This function is called by:
 13091 ;;		_pow
 13092 ;; This function uses a non-reentrant model
 13093 ;;
 13094                           
 13095                           
 13096                           ;psect for function ___lltoft
 13097  2133                     ___lltoft:	
 13098                           
 13099                           ;incstack = 0
 13100                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
 13101  2133  308E               	movlw	142
 13102  2134  0021               	movlb	1	; select bank1
 13103  2135  00AC               	movwf	??___lltoft^(0+128)
 13104  2136  082C               	movf	??___lltoft^(0+128),w
 13105  2137  00AD               	movwf	___lltoft@exp^(0+128)
 13106  2138                     l7915:	
 13107  2138  30FF               	movlw	255
 13108  2139  052B               	andwf	(___lltoft@c+3)^(0+128),w
 13109  213A  1903               	btfsc	3,2
 13110  213B  2948               	goto	l7917
 13111  213C  3001               	movlw	1
 13112  213D                     u8245:	
 13113  213D  36AB               	lsrf	(___lltoft@c+3)^(0+128),f
 13114  213E  0CAA               	rrf	(___lltoft@c+2)^(0+128),f
 13115  213F  0CA9               	rrf	(___lltoft@c+1)^(0+128),f
 13116  2140  0CA8               	rrf	___lltoft@c^(0+128),f
 13117  2141  0B89               	decfsz	9,f
 13118  2142  293D               	goto	u8245
 13119  2143  3001               	movlw	1
 13120  2144  00AC               	movwf	??___lltoft^(0+128)
 13121  2145  082C               	movf	??___lltoft^(0+128),w
 13122  2146  07AD               	addwf	___lltoft@exp^(0+128),f
 13123  2147  2938               	goto	l7915
 13124  2148                     l7917:	
 13125  2148  0828               	movf	___lltoft@c^(0+128),w
 13126  2149  00A0               	movwf	___ftpack@arg^(0+128)
 13127  214A  0829               	movf	(___lltoft@c+1)^(0+128),w
 13128  214B  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 13129  214C  082A               	movf	(___lltoft@c+2)^(0+128),w
 13130  214D  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 13131  214E  082D               	movf	___lltoft@exp^(0+128),w
 13132  214F  00AC               	movwf	??___lltoft^(0+128)
 13133  2150  082C               	movf	??___lltoft^(0+128),w
 13134  2151  00A3               	movwf	___ftpack@exp^(0+128)
 13135  2152  01A4               	clrf	___ftpack@sign^(0+128)
 13136  2153  3198  2027         	fcall	___ftpack
 13137  2155  0021               	movlb	1	; select bank1
 13138  2156  0820               	movf	?___ftpack^(0+128),w
 13139  2157  00A8               	movwf	?___lltoft^(0+128)
 13140  2158  0821               	movf	(?___ftpack+1)^(0+128),w
 13141  2159  00A9               	movwf	(?___lltoft+1)^(0+128)
 13142  215A  0822               	movf	(?___ftpack+2)^(0+128),w
 13143  215B  00AA               	movwf	(?___lltoft+2)^(0+128)
 13144  215C  0008               	return
 13145  215D                     __end_of___lltoft:	
 13146                           
 13147                           	psect	text32
 13148  2664                     __ptext32:	
 13149 ;; *************** function _read_top_tactile *****************
 13150 ;; Defined at:
 13151 ;;		line 50 in file "tactiles.c"
 13152 ;; Parameters:    Size  Location     Type
 13153 ;;		None
 13154 ;; Auto vars:     Size  Location     Type
 13155 ;;		None
 13156 ;; Return value:  Size  Location     Type
 13157 ;;                  1    wreg      void 
 13158 ;; Registers used:
 13159 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13160 ;; Tracked objects:
 13161 ;;		On entry : 0/0
 13162 ;;		On exit  : 0/0
 13163 ;;		Unchanged: 0/0
 13164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13166 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13167 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13168 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13169 ;;Total ram usage:        1 bytes
 13170 ;; Hardware stack levels used:    1
 13171 ;; Hardware stack levels required when called:    5
 13172 ;; This function calls:
 13173 ;;		_set_leds_top
 13174 ;;		_wait_ms
 13175 ;; This function is called by:
 13176 ;;		_main
 13177 ;; This function uses a non-reentrant model
 13178 ;;
 13179                           
 13180                           
 13181                           ;psect for function _read_top_tactile
 13182  2664                     _read_top_tactile:	
 13183                           
 13184                           ;tactiles.c: 60: if (PORTDbits.RD5 == 0) {
 13185                           
 13186                           ;incstack = 0
 13187                           ; Regs used in _read_top_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13188  2664  0020               	movlb	0	; select bank0
 13189  2665  1A8F               	btfsc	15,5	;volatile
 13190  2666  2E6E               	goto	l8655
 13191                           
 13192                           ;tactiles.c: 61: if (topTactile_pressed > 0) {
 13193  2667  0023               	movlb	3	; select bank3
 13194  2668  0846               	movf	_topTactile_pressed^(0+384),w
 13195  2669  1903               	btfsc	3,2
 13196  266A  2E79               	goto	l976
 13197                           
 13198                           ;tactiles.c: 62: topTactile_pressed--;
 13199  266B  3001               	movlw	1
 13200  266C  02C6               	subwf	_topTactile_pressed^(0+384),f
 13201                           
 13202                           ;tactiles.c: 63: }
 13203                           ;tactiles.c: 64: } else if (topTactile_pressed < 25) {
 13204  266D  2E79               	goto	l976
 13205  266E                     l8655:	
 13206  266E  3019               	movlw	25
 13207  266F  0023               	movlb	3	; select bank3
 13208  2670  0246               	subwf	_topTactile_pressed^(0+384),w
 13209  2671  1803               	skipnc
 13210  2672  2E79               	goto	l976
 13211                           
 13212                           ;tactiles.c: 65: topTactile_pressed++;
 13213  2673  3001               	movlw	1
 13214  2674  0021               	movlb	1	; select bank1
 13215  2675  00B2               	movwf	??_read_top_tactile^(0+128)
 13216  2676  0832               	movf	??_read_top_tactile^(0+128),w
 13217  2677  0023               	movlb	3	; select bank3
 13218  2678  07C6               	addwf	_topTactile_pressed^(0+384),f
 13219  2679                     l976:	
 13220                           
 13221                           ;tactiles.c: 66: }
 13222                           ;tactiles.c: 71: if (topTactile_pressed == 0) {
 13223  2679  0846               	movf	_topTactile_pressed^(0+384),w
 13224  267A  1D03               	btfss	3,2
 13225  267B  0008               	return
 13226                           
 13227                           ;tactiles.c: 73: top_push_state = top_push_state + 1;
 13228  267C  0020               	movlb	0	; select bank0
 13229  267D  0851               	movf	_top_push_state,w
 13230  267E  3E01               	addlw	1
 13231  267F  00D1               	movwf	_top_push_state
 13232  2680  3000               	movlw	0
 13233  2681  3D52               	addwfc	_top_push_state+1,w
 13234  2682  00D2               	movwf	_top_push_state+1
 13235                           
 13236                           ;tactiles.c: 74: if (top_push_state >= 7) {
 13237  2683  0852               	movf	_top_push_state+1,w
 13238  2684  3A80               	xorlw	128
 13239  2685  0021               	movlb	1	; select bank1
 13240  2686  00B2               	movwf	??_read_top_tactile^(0+128)
 13241  2687  3080               	movlw	128
 13242  2688  0232               	subwf	??_read_top_tactile^(0+128),w
 13243  2689  1D03               	skipz
 13244  268A  2E8E               	goto	u9535
 13245  268B  3007               	movlw	7
 13246  268C  0020               	movlb	0	; select bank0
 13247  268D  0251               	subwf	_top_push_state,w
 13248  268E                     u9535:	
 13249  268E  1C03               	skipc
 13250  268F  2E95               	goto	l8665
 13251                           
 13252                           ;tactiles.c: 75: top_push_state = 1;
 13253  2690  3001               	movlw	1
 13254  2691  0020               	movlb	0	; select bank0
 13255  2692  00D1               	movwf	_top_push_state
 13256  2693  3000               	movlw	0
 13257  2694  00D2               	movwf	_top_push_state+1
 13258  2695                     l8665:	
 13259                           
 13260                           ;tactiles.c: 76: }
 13261                           ;tactiles.c: 77: set_leds_top(top_push_state, 1);
 13262  2695  0020               	movlb	0	; select bank0
 13263  2696  0852               	movf	_top_push_state+1,w
 13264  2697  0021               	movlb	1	; select bank1
 13265  2698  00A1               	movwf	(set_leds_top@x+1)^(0+128)
 13266  2699  0020               	movlb	0	; select bank0
 13267  269A  0851               	movf	_top_push_state,w
 13268  269B  0021               	movlb	1	; select bank1
 13269  269C  00A0               	movwf	set_leds_top@x^(0+128)
 13270  269D  3001               	movlw	1
 13271  269E  00A2               	movwf	set_leds_top@ledState^(0+128)
 13272  269F  3000               	movlw	0
 13273  26A0  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
 13274  26A1  31A7  2753  31A6   	fcall	_set_leds_top
 13275                           
 13276                           ;tactiles.c: 78: delay_time_changed = 1;
 13277  26A4  0023               	movlb	3	; select bank3
 13278  26A5  01DB               	clrf	_delay_time_changed^(0+384)
 13279  26A6  0ADB               	incf	_delay_time_changed^(0+384),f
 13280  26A7                     l980:	
 13281                           ;tactiles.c: 81: while (PORTDbits.RD5 == 0) {
 13282                           
 13283  26A7  0020               	movlb	0	; select bank0
 13284  26A8  1E8F               	btfss	15,5	;volatile
 13285  26A9  2EA7               	goto	l980
 13286                           
 13287                           ;tactiles.c: 82: }
 13288                           ;tactiles.c: 83: wait_ms(20);
 13289  26AA  3014               	movlw	20
 13290  26AB  0021               	movlb	1	; select bank1
 13291  26AC  00AC               	movwf	wait_ms@timeSec^(0+128)
 13292  26AD  3000               	movlw	0
 13293  26AE  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 13294  26AF  31A2  221A         	fcall	_wait_ms
 13295  26B1  0008               	return
 13296  26B2                     __end_of_read_top_tactile:	
 13297                           
 13298                           	psect	text33
 13299  25CF                     __ptext33:	
 13300 ;; *************** function _read_bottom_tactile *****************
 13301 ;; Defined at:
 13302 ;;		line 18 in file "tactiles.c"
 13303 ;; Parameters:    Size  Location     Type
 13304 ;;		None
 13305 ;; Auto vars:     Size  Location     Type
 13306 ;;		None
 13307 ;; Return value:  Size  Location     Type
 13308 ;;                  1    wreg      void 
 13309 ;; Registers used:
 13310 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13311 ;; Tracked objects:
 13312 ;;		On entry : 0/0
 13313 ;;		On exit  : 0/0
 13314 ;;		Unchanged: 0/0
 13315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13317 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13318 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13319 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13320 ;;Total ram usage:        1 bytes
 13321 ;; Hardware stack levels used:    1
 13322 ;; Hardware stack levels required when called:    5
 13323 ;; This function calls:
 13324 ;;		_set_leds_bottom
 13325 ;;		_wait_ms
 13326 ;; This function is called by:
 13327 ;;		_main
 13328 ;; This function uses a non-reentrant model
 13329 ;;
 13330                           
 13331                           
 13332                           ;psect for function _read_bottom_tactile
 13333  25CF                     _read_bottom_tactile:	
 13334                           
 13335                           ;tactiles.c: 27: if (PORTDbits.RD6 == 0) {
 13336                           
 13337                           ;incstack = 0
 13338                           ; Regs used in _read_bottom_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13339  25CF  0020               	movlb	0	; select bank0
 13340  25D0  1B0F               	btfsc	15,6	;volatile
 13341  25D1  2DD9               	goto	l8633
 13342                           
 13343                           ;tactiles.c: 28: if (bottomTactile_pressed > 0) {
 13344  25D2  0023               	movlb	3	; select bank3
 13345  25D3  083D               	movf	_bottomTactile_pressed^(0+384),w
 13346  25D4  1903               	btfsc	3,2
 13347  25D5  2DE4               	goto	l964
 13348                           
 13349                           ;tactiles.c: 29: bottomTactile_pressed--;
 13350  25D6  3001               	movlw	1
 13351  25D7  02BD               	subwf	_bottomTactile_pressed^(0+384),f
 13352                           
 13353                           ;tactiles.c: 30: }
 13354                           ;tactiles.c: 31: } else if (bottomTactile_pressed < 25) {
 13355  25D8  2DE4               	goto	l964
 13356  25D9                     l8633:	
 13357  25D9  3019               	movlw	25
 13358  25DA  0023               	movlb	3	; select bank3
 13359  25DB  023D               	subwf	_bottomTactile_pressed^(0+384),w
 13360  25DC  1803               	skipnc
 13361  25DD  2DE4               	goto	l964
 13362                           
 13363                           ;tactiles.c: 32: bottomTactile_pressed++;
 13364  25DE  3001               	movlw	1
 13365  25DF  0021               	movlb	1	; select bank1
 13366  25E0  00B2               	movwf	??_read_bottom_tactile^(0+128)
 13367  25E1  0832               	movf	??_read_bottom_tactile^(0+128),w
 13368  25E2  0023               	movlb	3	; select bank3
 13369  25E3  07BD               	addwf	_bottomTactile_pressed^(0+384),f
 13370  25E4                     l964:	
 13371                           
 13372                           ;tactiles.c: 33: }
 13373                           ;tactiles.c: 36: if (bottomTactile_pressed == 0) {
 13374  25E4  083D               	movf	_bottomTactile_pressed^(0+384),w
 13375  25E5  1D03               	btfss	3,2
 13376  25E6  0008               	return
 13377                           
 13378                           ;tactiles.c: 37: bottom_push_state = bottom_push_state + 1;
 13379  25E7  0020               	movlb	0	; select bank0
 13380  25E8  084D               	movf	_bottom_push_state,w
 13381  25E9  3E01               	addlw	1
 13382  25EA  00CD               	movwf	_bottom_push_state
 13383  25EB  3000               	movlw	0
 13384  25EC  3D4E               	addwfc	_bottom_push_state+1,w
 13385  25ED  00CE               	movwf	_bottom_push_state+1
 13386                           
 13387                           ;tactiles.c: 38: if (bottom_push_state > 5) {
 13388  25EE  084E               	movf	_bottom_push_state+1,w
 13389  25EF  3A80               	xorlw	128
 13390  25F0  0021               	movlb	1	; select bank1
 13391  25F1  00B2               	movwf	??_read_bottom_tactile^(0+128)
 13392  25F2  3080               	movlw	128
 13393  25F3  0232               	subwf	??_read_bottom_tactile^(0+128),w
 13394  25F4  1D03               	skipz
 13395  25F5  2DF9               	goto	u9475
 13396  25F6  3006               	movlw	6
 13397  25F7  0020               	movlb	0	; select bank0
 13398  25F8  024D               	subwf	_bottom_push_state,w
 13399  25F9                     u9475:	
 13400  25F9  1C03               	skipc
 13401  25FA  2E00               	goto	l8643
 13402                           
 13403                           ;tactiles.c: 39: bottom_push_state = 1;
 13404  25FB  3001               	movlw	1
 13405  25FC  0020               	movlb	0	; select bank0
 13406  25FD  00CD               	movwf	_bottom_push_state
 13407  25FE  3000               	movlw	0
 13408  25FF  00CE               	movwf	_bottom_push_state+1
 13409  2600                     l8643:	
 13410                           
 13411                           ;tactiles.c: 40: }
 13412                           ;tactiles.c: 41: modulation_changed = 1;
 13413  2600  0023               	movlb	3	; select bank3
 13414  2601  01C1               	clrf	_modulation_changed^(0+384)
 13415  2602  0AC1               	incf	_modulation_changed^(0+384),f
 13416                           
 13417                           ;tactiles.c: 42: set_leds_bottom(bottom_push_state);
 13418  2603  0020               	movlb	0	; select bank0
 13419  2604  084E               	movf	_bottom_push_state+1,w
 13420  2605  0021               	movlb	1	; select bank1
 13421  2606  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
 13422  2607  0020               	movlb	0	; select bank0
 13423  2608  084D               	movf	_bottom_push_state,w
 13424  2609  0021               	movlb	1	; select bank1
 13425  260A  00A0               	movwf	set_leds_bottom@x^(0+128)
 13426  260B  31A2  22BE  31A5   	fcall	_set_leds_bottom
 13427  260E                     l968:	
 13428                           ;tactiles.c: 44: while (PORTDbits.RD6 == 0) {
 13429                           
 13430  260E  0020               	movlb	0	; select bank0
 13431  260F  1F0F               	btfss	15,6	;volatile
 13432  2610  2E0E               	goto	l968
 13433                           
 13434                           ;tactiles.c: 45: }
 13435                           ;tactiles.c: 46: wait_ms(20);
 13436  2611  3014               	movlw	20
 13437  2612  0021               	movlb	1	; select bank1
 13438  2613  00AC               	movwf	wait_ms@timeSec^(0+128)
 13439  2614  3000               	movlw	0
 13440  2615  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 13441  2616  31A2  221A         	fcall	_wait_ms
 13442  2618  0008               	return
 13443  2619                     __end_of_read_bottom_tactile:	
 13444                           
 13445                           	psect	text34
 13446  1C0B                     __ptext34:	
 13447 ;; *************** function _map *****************
 13448 ;; Defined at:
 13449 ;;		line 177 in file "user.c"
 13450 ;; Parameters:    Size  Location     Type
 13451 ;;  x               3   62[BANK1 ] float 
 13452 ;;  in_min          3   65[BANK1 ] float 
 13453 ;;  in_max          3   68[BANK1 ] float 
 13454 ;;  out_min         3   71[BANK1 ] float 
 13455 ;;  out_max         3   74[BANK1 ] float 
 13456 ;; Auto vars:     Size  Location     Type
 13457 ;;		None
 13458 ;; Return value:  Size  Location     Type
 13459 ;;                  3   62[BANK1 ] float 
 13460 ;; Registers used:
 13461 ;;		wreg, status,2, status,0, pclath, cstack
 13462 ;; Tracked objects:
 13463 ;;		On entry : 0/0
 13464 ;;		On exit  : 0/0
 13465 ;;		Unchanged: 0/0
 13466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13467 ;;      Params:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13468 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13470 ;;      Totals:         0       0      18       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13471 ;;Total ram usage:       18 bytes
 13472 ;; Hardware stack levels used:    1
 13473 ;; Hardware stack levels required when called:    5
 13474 ;; This function calls:
 13475 ;;		___ftadd
 13476 ;;		___ftdiv
 13477 ;;		___ftmul
 13478 ;;		___ftneg
 13479 ;; This function is called by:
 13480 ;;		_main
 13481 ;; This function uses a non-reentrant model
 13482 ;;
 13483                           
 13484                           
 13485                           ;psect for function _map
 13486  1C0B                     _map:	
 13487                           
 13488                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 13489                           
 13490                           ;incstack = 0
 13491                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
 13492  1C0B  0021               	movlb	1	; select bank1
 13493  1C0C  0864               	movf	map@in_max^(0+128),w
 13494  1C0D  00C1               	movwf	___ftadd@f1^(0+128)
 13495  1C0E  0865               	movf	(map@in_max+1)^(0+128),w
 13496  1C0F  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 13497  1C10  0866               	movf	(map@in_max+2)^(0+128),w
 13498  1C11  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 13499  1C12  0861               	movf	map@in_min^(0+128),w
 13500  1C13  00BE               	movwf	___ftneg@f1^(0+128)
 13501  1C14  0862               	movf	(map@in_min+1)^(0+128),w
 13502  1C15  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13503  1C16  0863               	movf	(map@in_min+2)^(0+128),w
 13504  1C17  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13505  1C18  31AF  27BA  319C   	fcall	___ftneg
 13506  1C1B  0021               	movlb	1	; select bank1
 13507  1C1C  083E               	movf	?___ftneg^(0+128),w
 13508  1C1D  00C4               	movwf	___ftadd@f2^(0+128)
 13509  1C1E  083F               	movf	(?___ftneg+1)^(0+128),w
 13510  1C1F  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 13511  1C20  0840               	movf	(?___ftneg+2)^(0+128),w
 13512  1C21  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 13513  1C22  3192  225B  319C   	fcall	___ftadd
 13514  1C25  0021               	movlb	1	; select bank1
 13515  1C26  0841               	movf	?___ftadd^(0+128),w
 13516  1C27  00CE               	movwf	___ftdiv@f2^(0+128)
 13517  1C28  0842               	movf	(?___ftadd+1)^(0+128),w
 13518  1C29  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 13519  1C2A  0843               	movf	(?___ftadd+2)^(0+128),w
 13520  1C2B  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 13521  1C2C  086A               	movf	map@out_max^(0+128),w
 13522  1C2D  00C1               	movwf	___ftadd@f1^(0+128)
 13523  1C2E  086B               	movf	(map@out_max+1)^(0+128),w
 13524  1C2F  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 13525  1C30  086C               	movf	(map@out_max+2)^(0+128),w
 13526  1C31  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 13527  1C32  0867               	movf	map@out_min^(0+128),w
 13528  1C33  00BE               	movwf	___ftneg@f1^(0+128)
 13529  1C34  0868               	movf	(map@out_min+1)^(0+128),w
 13530  1C35  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13531  1C36  0869               	movf	(map@out_min+2)^(0+128),w
 13532  1C37  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13533  1C38  31AF  27BA  319C   	fcall	___ftneg
 13534  1C3B  0021               	movlb	1	; select bank1
 13535  1C3C  083E               	movf	?___ftneg^(0+128),w
 13536  1C3D  00C4               	movwf	___ftadd@f2^(0+128)
 13537  1C3E  083F               	movf	(?___ftneg+1)^(0+128),w
 13538  1C3F  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 13539  1C40  0840               	movf	(?___ftneg+2)^(0+128),w
 13540  1C41  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 13541  1C42  3192  225B  319C   	fcall	___ftadd
 13542  1C45  0021               	movlb	1	; select bank1
 13543  1C46  0841               	movf	?___ftadd^(0+128),w
 13544  1C47  00AE               	movwf	___ftmul@f1^(0+128)
 13545  1C48  0842               	movf	(?___ftadd+1)^(0+128),w
 13546  1C49  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 13547  1C4A  0843               	movf	(?___ftadd+2)^(0+128),w
 13548  1C4B  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 13549  1C4C  085E               	movf	map@x^(0+128),w
 13550  1C4D  00C1               	movwf	___ftadd@f1^(0+128)
 13551  1C4E  085F               	movf	(map@x+1)^(0+128),w
 13552  1C4F  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 13553  1C50  0860               	movf	(map@x+2)^(0+128),w
 13554  1C51  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 13555  1C52  0861               	movf	map@in_min^(0+128),w
 13556  1C53  00BE               	movwf	___ftneg@f1^(0+128)
 13557  1C54  0862               	movf	(map@in_min+1)^(0+128),w
 13558  1C55  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13559  1C56  0863               	movf	(map@in_min+2)^(0+128),w
 13560  1C57  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13561  1C58  31AF  27BA  319C   	fcall	___ftneg
 13562  1C5B  0021               	movlb	1	; select bank1
 13563  1C5C  083E               	movf	?___ftneg^(0+128),w
 13564  1C5D  00C4               	movwf	___ftadd@f2^(0+128)
 13565  1C5E  083F               	movf	(?___ftneg+1)^(0+128),w
 13566  1C5F  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 13567  1C60  0840               	movf	(?___ftneg+2)^(0+128),w
 13568  1C61  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 13569  1C62  3192  225B  319C   	fcall	___ftadd
 13570  1C65  0021               	movlb	1	; select bank1
 13571  1C66  0841               	movf	?___ftadd^(0+128),w
 13572  1C67  00B1               	movwf	___ftmul@f2^(0+128)
 13573  1C68  0842               	movf	(?___ftadd+1)^(0+128),w
 13574  1C69  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 13575  1C6A  0843               	movf	(?___ftadd+2)^(0+128),w
 13576  1C6B  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 13577  1C6C  319E  2691  319C   	fcall	___ftmul
 13578  1C6F  0021               	movlb	1	; select bank1
 13579  1C70  082E               	movf	?___ftmul^(0+128),w
 13580  1C71  00D1               	movwf	___ftdiv@f1^(0+128)
 13581  1C72  082F               	movf	(?___ftmul+1)^(0+128),w
 13582  1C73  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 13583  1C74  0830               	movf	(?___ftmul+2)^(0+128),w
 13584  1C75  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 13585  1C76  319D  253D  319C   	fcall	___ftdiv
 13586  1C79  0021               	movlb	1	; select bank1
 13587  1C7A  084E               	movf	?___ftdiv^(0+128),w
 13588  1C7B  00ED               	movwf	_map$2809^(0+128)
 13589  1C7C  084F               	movf	(?___ftdiv+1)^(0+128),w
 13590  1C7D  00EE               	movwf	(_map$2809+1)^(0+128)
 13591  1C7E  0850               	movf	(?___ftdiv+2)^(0+128),w
 13592  1C7F  00EF               	movwf	(_map$2809+2)^(0+128)
 13593                           
 13594                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 13595  1C80  0867               	movf	map@out_min^(0+128),w
 13596  1C81  00C1               	movwf	___ftadd@f1^(0+128)
 13597  1C82  0868               	movf	(map@out_min+1)^(0+128),w
 13598  1C83  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 13599  1C84  0869               	movf	(map@out_min+2)^(0+128),w
 13600  1C85  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 13601  1C86  086D               	movf	_map$2809^(0+128),w
 13602  1C87  00C4               	movwf	___ftadd@f2^(0+128)
 13603  1C88  086E               	movf	(_map$2809+1)^(0+128),w
 13604  1C89  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 13605  1C8A  086F               	movf	(_map$2809+2)^(0+128),w
 13606  1C8B  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 13607  1C8C  3192  225B         	fcall	___ftadd
 13608  1C8E  0021               	movlb	1	; select bank1
 13609  1C8F  0841               	movf	?___ftadd^(0+128),w
 13610  1C90  00DE               	movwf	?_map^(0+128)
 13611  1C91  0842               	movf	(?___ftadd+1)^(0+128),w
 13612  1C92  00DF               	movwf	(?_map+1)^(0+128)
 13613  1C93  0843               	movf	(?___ftadd+2)^(0+128),w
 13614  1C94  00E0               	movwf	(?_map+2)^(0+128)
 13615  1C95  0008               	return
 13616  1C96                     __end_of_map:	
 13617                           
 13618                           	psect	text35
 13619  07F0                     __ptext35:	
 13620 ;; *************** function _initSwitchBypass *****************
 13621 ;; Defined at:
 13622 ;;		line 29 in file "SwitchBypass.c"
 13623 ;; Parameters:    Size  Location     Type
 13624 ;;		None
 13625 ;; Auto vars:     Size  Location     Type
 13626 ;;  initState       2   22[BANK1 ] int 
 13627 ;; Return value:  Size  Location     Type
 13628 ;;                  1    wreg      void 
 13629 ;; Registers used:
 13630 ;;		wreg, status,2, status,0, pclath, cstack
 13631 ;; Tracked objects:
 13632 ;;		On entry : 0/0
 13633 ;;		On exit  : 0/0
 13634 ;;		Unchanged: 0/0
 13635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13637 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13638 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13639 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13640 ;;Total ram usage:        2 bytes
 13641 ;; Hardware stack levels used:    1
 13642 ;; Hardware stack levels required when called:    6
 13643 ;; This function calls:
 13644 ;;		_getSwitchBypassState
 13645 ;;		_setSwitchBypassState
 13646 ;; This function is called by:
 13647 ;;		_main
 13648 ;; This function uses a non-reentrant model
 13649 ;;
 13650                           
 13651                           
 13652                           ;psect for function _initSwitchBypass
 13653  07F0                     _initSwitchBypass:	
 13654                           
 13655                           ;SwitchBypass.c: 30: int initState = getSwitchBypassState();
 13656                           
 13657                           ;incstack = 0
 13658                           ; Regs used in _initSwitchBypass: [wreg+status,2+status,0+pclath+cstack]
 13659  07F0  31AF  27AD  3187   	fcall	_getSwitchBypassState
 13660  07F3  0021               	movlb	1	; select bank1
 13661  07F4  0821               	movf	(?_getSwitchBypassState+1)^(0+128),w
 13662  07F5  00B7               	movwf	(initSwitchBypass@initState+1)^(0+128)
 13663  07F6  0820               	movf	?_getSwitchBypassState^(0+128),w
 13664  07F7  00B6               	movwf	initSwitchBypass@initState^(0+128)
 13665                           
 13666                           ;SwitchBypass.c: 31: setSwitchBypassState(initState);
 13667  07F8  0837               	movf	(initSwitchBypass@initState+1)^(0+128),w
 13668  07F9  00B3               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
 13669  07FA  0836               	movf	initSwitchBypass@initState^(0+128),w
 13670  07FB  00B2               	movwf	setSwitchBypassState@f_state^(0+128)
 13671  07FC  31A5  2585         	fcall	_setSwitchBypassState
 13672  07FE  0008               	return
 13673  07FF                     __end_of_initSwitchBypass:	
 13674                           
 13675                           	psect	text36
 13676  2585                     __ptext36:	
 13677 ;; *************** function _setSwitchBypassState *****************
 13678 ;; Defined at:
 13679 ;;		line 134 in file "SwitchBypass.c"
 13680 ;; Parameters:    Size  Location     Type
 13681 ;;  f_state         2   18[BANK1 ] int 
 13682 ;; Auto vars:     Size  Location     Type
 13683 ;;		None
 13684 ;; Return value:  Size  Location     Type
 13685 ;;                  1    wreg      void 
 13686 ;; Registers used:
 13687 ;;		wreg, status,2, status,0, pclath, cstack
 13688 ;; Tracked objects:
 13689 ;;		On entry : 0/0
 13690 ;;		On exit  : 0/0
 13691 ;;		Unchanged: 0/0
 13692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13693 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13694 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13695 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13696 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13697 ;;Total ram usage:        4 bytes
 13698 ;; Hardware stack levels used:    1
 13699 ;; Hardware stack levels required when called:    5
 13700 ;; This function calls:
 13701 ;;		_updateSwitchBypassState
 13702 ;;		_wait_ms
 13703 ;; This function is called by:
 13704 ;;		_initSwitchBypass
 13705 ;;		_updateSwitchBypass
 13706 ;; This function uses a non-reentrant model
 13707 ;;
 13708                           
 13709                           
 13710                           ;psect for function _setSwitchBypassState
 13711  2585                     _setSwitchBypassState:	
 13712                           
 13713                           ;SwitchBypass.c: 135: if (switchBypass_state == f_state) {return;}
 13714                           
 13715                           ;incstack = 0
 13716                           ; Regs used in _setSwitchBypassState: [wreg+status,2+status,0+pclath+cstack]
 13717  2585  0020               	movlb	0	; select bank0
 13718  2586  0858               	movf	_switchBypass_state,w
 13719  2587  0021               	movlb	1	; select bank1
 13720  2588  00B4               	movwf	??_setSwitchBypassState^(0+128)
 13721  2589  01B5               	clrf	(??_setSwitchBypassState^(0+128)+1)
 13722  258A  0833               	movf	(setSwitchBypassState@f_state+1)^(0+128),w
 13723  258B  0635               	xorwf	(??_setSwitchBypassState+1)^(0+128),w
 13724  258C  1D03               	skipz
 13725  258D  2D90               	goto	u8445
 13726  258E  0832               	movf	setSwitchBypassState@f_state^(0+128),w
 13727  258F  0634               	xorwf	??_setSwitchBypassState^(0+128),w
 13728  2590                     u8445:	
 13729  2590  1903               	btfsc	3,2
 13730  2591  0008               	return
 13731                           
 13732                           ;SwitchBypass.c: 136: switchBypass_state = f_state;
 13733  2592  0832               	movf	setSwitchBypassState@f_state^(0+128),w
 13734  2593  00B4               	movwf	??_setSwitchBypassState^(0+128)
 13735  2594  0834               	movf	??_setSwitchBypassState^(0+128),w
 13736  2595  0020               	movlb	0	; select bank0
 13737  2596  00D8               	movwf	_switchBypass_state
 13738                           
 13739                           ;SwitchBypass.c: 137: LATBbits.LATB2 = f_state;
 13740  2597  0021               	movlb	1	; select bank1
 13741  2598  0C32               	rrf	setSwitchBypassState@f_state^(0+128),w
 13742  2599  0022               	movlb	2	; select bank2
 13743  259A  1C03               	skipc
 13744  259B  110D               	bcf	13,2	;volatile
 13745  259C  1803               	skipnc
 13746  259D  150D               	bsf	13,2	;volatile
 13747                           
 13748                           ;SwitchBypass.c: 138: LATBbits.LATB3 = 0;
 13749  259E  118D               	bcf	13,3	;volatile
 13750                           
 13751                           ;SwitchBypass.c: 139: LATGbits.LATG2 = f_state;
 13752  259F  0021               	movlb	1	; select bank1
 13753  25A0  0C32               	rrf	setSwitchBypassState@f_state^(0+128),w
 13754  25A1  0027               	movlb	7	; select bank7
 13755  25A2  1C03               	skipc
 13756  25A3  110D               	bcf	13,2	;volatile
 13757  25A4  1803               	skipnc
 13758  25A5  150D               	bsf	13,2	;volatile
 13759                           
 13760                           ;SwitchBypass.c: 140: LATGbits.LATG1 = !f_state;
 13761  25A6  0021               	movlb	1	; select bank1
 13762  25A7  0832               	movf	setSwitchBypassState@f_state^(0+128),w
 13763  25A8  0433               	iorwf	(setSwitchBypassState@f_state+1)^(0+128),w
 13764  25A9  1D03               	btfss	3,2
 13765  25AA  2DAE               	goto	u8450
 13766  25AB  0027               	movlb	7	; select bank7
 13767  25AC  148D               	bsf	13,1	;volatile
 13768  25AD  2DB0               	goto	l8123
 13769  25AE                     u8450:	
 13770  25AE  0027               	movlb	7	; select bank7
 13771  25AF  108D               	bcf	13,1	;volatile
 13772  25B0                     l8123:	
 13773                           
 13774                           ;SwitchBypass.c: 142: wait_ms(20);
 13775  25B0  3014               	movlw	20
 13776  25B1  0021               	movlb	1	; select bank1
 13777  25B2  00AC               	movwf	wait_ms@timeSec^(0+128)
 13778  25B3  3000               	movlw	0
 13779  25B4  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 13780  25B5  31A2  221A  31A5   	fcall	_wait_ms
 13781                           
 13782                           ;SwitchBypass.c: 144: LATGbits.LATG2 = 0;
 13783  25B8  0027               	movlb	7	; select bank7
 13784  25B9  110D               	bcf	13,2	;volatile
 13785                           
 13786                           ;SwitchBypass.c: 145: LATGbits.LATG1 = 0;
 13787  25BA  108D               	bcf	13,1	;volatile
 13788                           
 13789                           ;SwitchBypass.c: 147: updateSwitchBypassState(switchBypass_state);
 13790  25BB  0020               	movlb	0	; select bank0
 13791  25BC  0858               	movf	_switchBypass_state,w
 13792  25BD  0021               	movlb	1	; select bank1
 13793  25BE  00B4               	movwf	??_setSwitchBypassState^(0+128)
 13794  25BF  01B5               	clrf	(??_setSwitchBypassState^(0+128)+1)
 13795  25C0  0834               	movf	??_setSwitchBypassState^(0+128),w
 13796  25C1  00A0               	movwf	updateSwitchBypassState@state^(0+128)
 13797  25C2  0835               	movf	(??_setSwitchBypassState+1)^(0+128),w
 13798  25C3  00A1               	movwf	(updateSwitchBypassState@state+1)^(0+128)
 13799  25C4  3187  27FF  31A5   	fcall	_updateSwitchBypassState
 13800                           
 13801                           ;SwitchBypass.c: 148: wait_ms(20);
 13802  25C7  3014               	movlw	20
 13803  25C8  0021               	movlb	1	; select bank1
 13804  25C9  00AC               	movwf	wait_ms@timeSec^(0+128)
 13805  25CA  3000               	movlw	0
 13806  25CB  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 13807  25CC  31A2  221A         	fcall	_wait_ms
 13808  25CE  0008               	return
 13809  25CF                     __end_of_setSwitchBypassState:	
 13810                           
 13811                           	psect	text37
 13812  221A                     __ptext37:	
 13813 ;; *************** function _wait_ms *****************
 13814 ;; Defined at:
 13815 ;;		line 23 in file "system.c"
 13816 ;; Parameters:    Size  Location     Type
 13817 ;;  timeSec         2   12[BANK1 ] unsigned int 
 13818 ;; Auto vars:     Size  Location     Type
 13819 ;;  timemsl         4   14[BANK1 ] long 
 13820 ;; Return value:  Size  Location     Type
 13821 ;;                  1    wreg      void 
 13822 ;; Registers used:
 13823 ;;		wreg, status,2, status,0, pclath, cstack
 13824 ;; Tracked objects:
 13825 ;;		On entry : 0/0
 13826 ;;		On exit  : 0/0
 13827 ;;		Unchanged: 0/0
 13828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13829 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13830 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13832 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13833 ;;Total ram usage:        6 bytes
 13834 ;; Hardware stack levels used:    1
 13835 ;; Hardware stack levels required when called:    4
 13836 ;; This function calls:
 13837 ;;		___lmul
 13838 ;; This function is called by:
 13839 ;;		_ring_tactiles
 13840 ;;		_solidring_tactiles
 13841 ;;		_read_bottom_tactile
 13842 ;;		_read_top_tactile
 13843 ;;		_setSwitchBypassState
 13844 ;;		_setDoublePressState
 13845 ;;		_showError_Alternating
 13846 ;;		_show_error
 13847 ;;		_show_cancel
 13848 ;;		_star_tactiles
 13849 ;;		_initExpModeState
 13850 ;; This function uses a non-reentrant model
 13851 ;;
 13852                           
 13853                           
 13854                           ;psect for function _wait_ms
 13855  221A                     _wait_ms:	
 13856                           
 13857                           ;system.c: 25: long timemsl = 0;
 13858                           
 13859                           ;incstack = 0
 13860                           ; Regs used in _wait_ms: [wreg+status,2+status,0+pclath+cstack]
 13861  221A  3000               	movlw	0
 13862  221B  0021               	movlb	1	; select bank1
 13863  221C  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 13864  221D  3000               	movlw	0
 13865  221E  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 13866  221F  3000               	movlw	0
 13867  2220  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 13868  2221  3000               	movlw	0
 13869  2222  00AE               	movwf	wait_ms@timemsl^(0+128)
 13870                           
 13871                           ;system.c: 26: timemsl = timeSec * 1000l;
 13872  2223  082C               	movf	wait_ms@timeSec^(0+128),w
 13873  2224  00A0               	movwf	___lmul@multiplier^(0+128)
 13874  2225  082D               	movf	(wait_ms@timeSec+1)^(0+128),w
 13875  2226  00A1               	movwf	(___lmul@multiplier^(0+128)+1)
 13876  2227  01A2               	clrf	(___lmul@multiplier^(0+128)+2)
 13877  2228  01A3               	clrf	(___lmul@multiplier^(0+128)+3)
 13878  2229  3000               	movlw	0
 13879  222A  00A7               	movwf	(___lmul@multiplicand+3)^(0+128)
 13880  222B  3000               	movlw	0
 13881  222C  00A6               	movwf	(___lmul@multiplicand+2)^(0+128)
 13882  222D  3003               	movlw	3
 13883  222E  00A5               	movwf	(___lmul@multiplicand+1)^(0+128)
 13884  222F  30E8               	movlw	232
 13885  2230  00A4               	movwf	___lmul@multiplicand^(0+128)
 13886  2231  31A1  21EA  31A2   	fcall	___lmul
 13887  2234  0021               	movlb	1	; select bank1
 13888  2235  0823               	movf	(?___lmul+3)^(0+128),w
 13889  2236  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 13890  2237  0822               	movf	(?___lmul+2)^(0+128),w
 13891  2238  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 13892  2239  0821               	movf	(?___lmul+1)^(0+128),w
 13893  223A  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 13894  223B  0820               	movf	?___lmul^(0+128),w
 13895  223C  00AE               	movwf	wait_ms@timemsl^(0+128)
 13896  223D                     l384:	
 13897                           ;system.c: 27: for( ; timemsl; timemsl--);
 13898                           
 13899  223D  0831               	movf	(wait_ms@timemsl+3)^(0+128),w
 13900  223E  0430               	iorwf	(wait_ms@timemsl+2)^(0+128),w
 13901  223F  042F               	iorwf	(wait_ms@timemsl+1)^(0+128),w
 13902  2240  042E               	iorwf	wait_ms@timemsl^(0+128),w
 13903  2241  1903               	btfsc	3,2
 13904  2242  0008               	return
 13905  2243  30FF               	movlw	255
 13906  2244  07AE               	addwf	wait_ms@timemsl^(0+128),f
 13907  2245  30FF               	movlw	255
 13908  2246  3DAF               	addwfc	(wait_ms@timemsl+1)^(0+128),f
 13909  2247  30FF               	movlw	255
 13910  2248  3DB0               	addwfc	(wait_ms@timemsl+2)^(0+128),f
 13911  2249  30FF               	movlw	255
 13912  224A  3DB1               	addwfc	(wait_ms@timemsl+3)^(0+128),f
 13913  224B  2A3D               	goto	l384
 13914  224C                     __end_of_wait_ms:	
 13915                           
 13916                           	psect	text38
 13917  21EA                     __ptext38:	
 13918 ;; *************** function ___lmul *****************
 13919 ;; Defined at:
 13920 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 13921 ;; Parameters:    Size  Location     Type
 13922 ;;  multiplier      4    0[BANK1 ] unsigned long 
 13923 ;;  multiplicand    4    4[BANK1 ] unsigned long 
 13924 ;; Auto vars:     Size  Location     Type
 13925 ;;  product         4    8[BANK1 ] unsigned long 
 13926 ;; Return value:  Size  Location     Type
 13927 ;;                  4    0[BANK1 ] unsigned long 
 13928 ;; Registers used:
 13929 ;;		wreg, status,2, status,0
 13930 ;; Tracked objects:
 13931 ;;		On entry : 0/0
 13932 ;;		On exit  : 0/0
 13933 ;;		Unchanged: 0/0
 13934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13935 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13936 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13938 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13939 ;;Total ram usage:       12 bytes
 13940 ;; Hardware stack levels used:    1
 13941 ;; Hardware stack levels required when called:    3
 13942 ;; This function calls:
 13943 ;;		Nothing
 13944 ;; This function is called by:
 13945 ;;		_wait_ms
 13946 ;; This function uses a non-reentrant model
 13947 ;;
 13948                           
 13949                           
 13950                           ;psect for function ___lmul
 13951  21EA                     ___lmul:	
 13952                           
 13953                           ;incstack = 0
 13954                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 13955  21EA  3000               	movlw	0
 13956  21EB  0021               	movlb	1	; select bank1
 13957  21EC  00AB               	movwf	(___lmul@product+3)^(0+128)
 13958  21ED  3000               	movlw	0
 13959  21EE  00AA               	movwf	(___lmul@product+2)^(0+128)
 13960  21EF  3000               	movlw	0
 13961  21F0  00A9               	movwf	(___lmul@product+1)^(0+128)
 13962  21F1  3000               	movlw	0
 13963  21F2  00A8               	movwf	___lmul@product^(0+128)
 13964  21F3                     l7337:	
 13965  21F3  1C20               	btfss	___lmul@multiplier^(0+128),0
 13966  21F4  29FD               	goto	l7341
 13967  21F5  0824               	movf	___lmul@multiplicand^(0+128),w
 13968  21F6  07A8               	addwf	___lmul@product^(0+128),f
 13969  21F7  0825               	movf	(___lmul@multiplicand+1)^(0+128),w
 13970  21F8  3DA9               	addwfc	(___lmul@product+1)^(0+128),f
 13971  21F9  0826               	movf	(___lmul@multiplicand+2)^(0+128),w
 13972  21FA  3DAA               	addwfc	(___lmul@product+2)^(0+128),f
 13973  21FB  0827               	movf	(___lmul@multiplicand+3)^(0+128),w
 13974  21FC  3DAB               	addwfc	(___lmul@product+3)^(0+128),f
 13975  21FD                     l7341:	
 13976  21FD  3001               	movlw	1
 13977  21FE                     u7255:	
 13978  21FE  35A4               	lslf	___lmul@multiplicand^(0+128),f
 13979  21FF  0DA5               	rlf	(___lmul@multiplicand+1)^(0+128),f
 13980  2200  0DA6               	rlf	(___lmul@multiplicand+2)^(0+128),f
 13981  2201  0DA7               	rlf	(___lmul@multiplicand+3)^(0+128),f
 13982  2202  0B89               	decfsz	9,f
 13983  2203  29FE               	goto	u7255
 13984  2204  3001               	movlw	1
 13985  2205                     u7265:	
 13986  2205  36A3               	lsrf	(___lmul@multiplier+3)^(0+128),f
 13987  2206  0CA2               	rrf	(___lmul@multiplier+2)^(0+128),f
 13988  2207  0CA1               	rrf	(___lmul@multiplier+1)^(0+128),f
 13989  2208  0CA0               	rrf	___lmul@multiplier^(0+128),f
 13990  2209  0B89               	decfsz	9,f
 13991  220A  2A05               	goto	u7265
 13992  220B  0823               	movf	(___lmul@multiplier+3)^(0+128),w
 13993  220C  0422               	iorwf	(___lmul@multiplier+2)^(0+128),w
 13994  220D  0421               	iorwf	(___lmul@multiplier+1)^(0+128),w
 13995  220E  0420               	iorwf	___lmul@multiplier^(0+128),w
 13996  220F  1D03               	skipz
 13997  2210  29F3               	goto	l7337
 13998  2211  082B               	movf	(___lmul@product+3)^(0+128),w
 13999  2212  00A3               	movwf	(?___lmul+3)^(0+128)
 14000  2213  082A               	movf	(___lmul@product+2)^(0+128),w
 14001  2214  00A2               	movwf	(?___lmul+2)^(0+128)
 14002  2215  0829               	movf	(___lmul@product+1)^(0+128),w
 14003  2216  00A1               	movwf	(?___lmul+1)^(0+128)
 14004  2217  0828               	movf	___lmul@product^(0+128),w
 14005  2218  00A0               	movwf	?___lmul^(0+128)
 14006  2219  0008               	return
 14007  221A                     __end_of___lmul:	
 14008                           
 14009                           	psect	text39
 14010  07FF                     __ptext39:	
 14011 ;; *************** function _updateSwitchBypassState *****************
 14012 ;; Defined at:
 14013 ;;		line 96 in file "state_manager.c"
 14014 ;; Parameters:    Size  Location     Type
 14015 ;;  state           2    0[BANK1 ] int 
 14016 ;; Auto vars:     Size  Location     Type
 14017 ;;		None
 14018 ;; Return value:  Size  Location     Type
 14019 ;;                  1    wreg      void 
 14020 ;; Registers used:
 14021 ;;		None
 14022 ;; Tracked objects:
 14023 ;;		On entry : 0/0
 14024 ;;		On exit  : 0/0
 14025 ;;		Unchanged: 0/0
 14026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14027 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14030 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14031 ;;Total ram usage:        2 bytes
 14032 ;; Hardware stack levels used:    1
 14033 ;; Hardware stack levels required when called:    3
 14034 ;; This function calls:
 14035 ;;		Nothing
 14036 ;; This function is called by:
 14037 ;;		_setSwitchBypassState
 14038 ;; This function uses a non-reentrant model
 14039 ;;
 14040                           
 14041                           
 14042                           ;psect for function _updateSwitchBypassState
 14043  07FF                     _updateSwitchBypassState:	
 14044                           
 14045                           ;incstack = 0
 14046                           ; Regs used in _updateSwitchBypassState: []
 14047  07FF  0008               	return
 14048  0800                     __end_of_updateSwitchBypassState:	
 14049                           
 14050                           	psect	text40
 14051  2FAD                     __ptext40:	
 14052 ;; *************** function _getSwitchBypassState *****************
 14053 ;; Defined at:
 14054 ;;		line 103 in file "state_manager.c"
 14055 ;; Parameters:    Size  Location     Type
 14056 ;;		None
 14057 ;; Auto vars:     Size  Location     Type
 14058 ;;		None
 14059 ;; Return value:  Size  Location     Type
 14060 ;;                  2    0[BANK1 ] int 
 14061 ;; Registers used:
 14062 ;;		status,2
 14063 ;; Tracked objects:
 14064 ;;		On entry : 0/0
 14065 ;;		On exit  : 0/0
 14066 ;;		Unchanged: 0/0
 14067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14068 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14071 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14072 ;;Total ram usage:        2 bytes
 14073 ;; Hardware stack levels used:    1
 14074 ;; Hardware stack levels required when called:    3
 14075 ;; This function calls:
 14076 ;;		Nothing
 14077 ;; This function is called by:
 14078 ;;		_initSwitchBypass
 14079 ;; This function uses a non-reentrant model
 14080 ;;
 14081                           
 14082                           
 14083                           ;psect for function _getSwitchBypassState
 14084  2FAD                     _getSwitchBypassState:	
 14085                           
 14086                           ;state_manager.c: 108: return 0;
 14087                           
 14088                           ;incstack = 0
 14089                           ; Regs used in _getSwitchBypassState: [status,2]
 14090  2FAD  0021               	movlb	1	; select bank1
 14091  2FAE  01A0               	clrf	?_getSwitchBypassState^(0+128)
 14092  2FAF  01A1               	clrf	(?_getSwitchBypassState+1)^(0+128)
 14093  2FB0  0008               	return
 14094  2FB1                     __end_of_getSwitchBypassState:	
 14095                           
 14096                           	psect	text41
 14097  1B84                     __ptext41:	
 14098 ;; *************** function _calcSinArray *****************
 14099 ;; Defined at:
 14100 ;;		line 15 in file "modulation.c"
 14101 ;; Parameters:    Size  Location     Type
 14102 ;;		None
 14103 ;; Auto vars:     Size  Location     Type
 14104 ;;  tmpVal          3   56[BANK2 ] int 
 14105 ;;  iAngle          1   59[BANK2 ] unsigned char 
 14106 ;;  x               1   55[BANK2 ] unsigned char 
 14107 ;; Return value:  Size  Location     Type
 14108 ;;                  1    wreg      void 
 14109 ;; Registers used:
 14110 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14111 ;; Tracked objects:
 14112 ;;		On entry : 0/0
 14113 ;;		On exit  : 0/0
 14114 ;;		Unchanged: 0/0
 14115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14117 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14118 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14119 ;;      Totals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14120 ;;Total ram usage:        9 bytes
 14121 ;; Hardware stack levels used:    1
 14122 ;; Hardware stack levels required when called:    7
 14123 ;; This function calls:
 14124 ;;		___awtoft
 14125 ;;		___ftdiv
 14126 ;;		___ftmul
 14127 ;;		___wmul
 14128 ;;		_sin
 14129 ;; This function is called by:
 14130 ;;		_main
 14131 ;; This function uses a non-reentrant model
 14132 ;;
 14133                           
 14134                           
 14135                           ;psect for function _calcSinArray
 14136  1B84                     _calcSinArray:	
 14137                           
 14138                           ;modulation.c: 16: for (char iAngle = 0; iAngle < 120; iAngle++) {
 14139                           
 14140                           ;incstack = 0
 14141                           ; Regs used in _calcSinArray: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14142  1B84  0022               	movlb	2	; select bank2
 14143  1B85  01DB               	clrf	calcSinArray@iAngle^(0+256)
 14144  1B86  3078               	movlw	120
 14145  1B87  025B               	subwf	calcSinArray@iAngle^(0+256),w
 14146  1B88  1803               	btfsc	3,0
 14147  1B89  2C08               	goto	l1882
 14148  1B8A                     l8287:	
 14149                           
 14150                           ;modulation.c: 17: double tmpVal = 3 * iAngle * 3.14159265358979323846/180.0;
 14151  1B8A  3000               	movlw	0
 14152  1B8B  0021               	movlb	1	; select bank1
 14153  1B8C  00CE               	movwf	___ftdiv@f2^(0+128)
 14154  1B8D  3034               	movlw	52
 14155  1B8E  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 14156  1B8F  3043               	movlw	67
 14157  1B90  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 14158  1B91  3010               	movlw	16
 14159  1B92  00AE               	movwf	___ftmul@f1^(0+128)
 14160  1B93  3049               	movlw	73
 14161  1B94  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 14162  1B95  3040               	movlw	64
 14163  1B96  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 14164  1B97  0022               	movlb	2	; select bank2
 14165  1B98  085B               	movf	calcSinArray@iAngle^(0+256),w
 14166  1B99  00D3               	movwf	??_calcSinArray^(0+256)
 14167  1B9A  01D4               	clrf	(??_calcSinArray^(0+256)+1)
 14168  1B9B  0853               	movf	??_calcSinArray^(0+256),w
 14169  1B9C  00AE               	movwf	___wmul@multiplier^(0+256)
 14170  1B9D  0854               	movf	(??_calcSinArray+1)^(0+256),w
 14171  1B9E  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 14172  1B9F  3003               	movlw	3
 14173  1BA0  00B0               	movwf	___wmul@multiplicand^(0+256)
 14174  1BA1  3000               	movlw	0
 14175  1BA2  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 14176  1BA3  31A0  2095  319B   	fcall	___wmul
 14177  1BA6  0022               	movlb	2	; select bank2
 14178  1BA7  082F               	movf	(?___wmul+1)^(0+256),w
 14179  1BA8  0021               	movlb	1	; select bank1
 14180  1BA9  00A9               	movwf	(___awtoft@c+1)^(0+128)
 14181  1BAA  0022               	movlb	2	; select bank2
 14182  1BAB  082E               	movf	?___wmul^(0+256),w
 14183  1BAC  0021               	movlb	1	; select bank1
 14184  1BAD  00A8               	movwf	___awtoft@c^(0+128)
 14185  1BAE  31A0  20ED  319B   	fcall	___awtoft
 14186  1BB1  0021               	movlb	1	; select bank1
 14187  1BB2  0828               	movf	?___awtoft^(0+128),w
 14188  1BB3  00B1               	movwf	___ftmul@f2^(0+128)
 14189  1BB4  0829               	movf	(?___awtoft+1)^(0+128),w
 14190  1BB5  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 14191  1BB6  082A               	movf	(?___awtoft+2)^(0+128),w
 14192  1BB7  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 14193  1BB8  319E  2691  319B   	fcall	___ftmul
 14194  1BBB  0021               	movlb	1	; select bank1
 14195  1BBC  082E               	movf	?___ftmul^(0+128),w
 14196  1BBD  00D1               	movwf	___ftdiv@f1^(0+128)
 14197  1BBE  082F               	movf	(?___ftmul+1)^(0+128),w
 14198  1BBF  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 14199  1BC0  0830               	movf	(?___ftmul+2)^(0+128),w
 14200  1BC1  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 14201  1BC2  319D  253D  319B   	fcall	___ftdiv
 14202  1BC5  0021               	movlb	1	; select bank1
 14203  1BC6  084E               	movf	?___ftdiv^(0+128),w
 14204  1BC7  0022               	movlb	2	; select bank2
 14205  1BC8  00D8               	movwf	calcSinArray@tmpVal^(0+256)
 14206  1BC9  0021               	movlb	1	; select bank1
 14207  1BCA  084F               	movf	(?___ftdiv+1)^(0+128),w
 14208  1BCB  0022               	movlb	2	; select bank2
 14209  1BCC  00D9               	movwf	(calcSinArray@tmpVal+1)^(0+256)
 14210  1BCD  0021               	movlb	1	; select bank1
 14211  1BCE  0850               	movf	(?___ftdiv+2)^(0+128),w
 14212  1BCF  0022               	movlb	2	; select bank2
 14213  1BD0  00DA               	movwf	(calcSinArray@tmpVal+2)^(0+256)
 14214                           
 14215                           ;modulation.c: 18: tmpVal = sin(tmpVal);
 14216  1BD1  0858               	movf	calcSinArray@tmpVal^(0+256),w
 14217  1BD2  00C5               	movwf	sin@f^(0+256)
 14218  1BD3  0859               	movf	(calcSinArray@tmpVal+1)^(0+256),w
 14219  1BD4  00C6               	movwf	(sin@f+1)^(0+256)
 14220  1BD5  085A               	movf	(calcSinArray@tmpVal+2)^(0+256),w
 14221  1BD6  00C7               	movwf	(sin@f+2)^(0+256)
 14222  1BD7  318A  224E  319B   	fcall	_sin
 14223  1BDA  0022               	movlb	2	; select bank2
 14224  1BDB  0845               	movf	?_sin^(0+256),w
 14225  1BDC  00D8               	movwf	calcSinArray@tmpVal^(0+256)
 14226  1BDD  0846               	movf	(?_sin+1)^(0+256),w
 14227  1BDE  00D9               	movwf	(calcSinArray@tmpVal+1)^(0+256)
 14228  1BDF  0847               	movf	(?_sin+2)^(0+256),w
 14229  1BE0  00DA               	movwf	(calcSinArray@tmpVal+2)^(0+256)
 14230                           
 14231                           ;modulation.c: 19: sinArray[iAngle] = tmpVal;
 14232  1BE1  085B               	movf	calcSinArray@iAngle^(0+256),w
 14233  1BE2  00D3               	movwf	??_calcSinArray^(0+256)
 14234  1BE3  01D4               	clrf	(??_calcSinArray^(0+256)+1)
 14235  1BE4  0853               	movf	??_calcSinArray^(0+256),w
 14236  1BE5  00AE               	movwf	___wmul@multiplier^(0+256)
 14237  1BE6  0854               	movf	(??_calcSinArray+1)^(0+256),w
 14238  1BE7  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 14239  1BE8  3003               	movlw	3
 14240  1BE9  00B0               	movwf	___wmul@multiplicand^(0+256)
 14241  1BEA  3000               	movlw	0
 14242  1BEB  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 14243  1BEC  31A0  2095  319B   	fcall	___wmul
 14244  1BEF  3082               	movlw	130
 14245  1BF0  0022               	movlb	2	; select bank2
 14246  1BF1  00D5               	movwf	(??_calcSinArray+2)^(0+256)
 14247  1BF2  3024               	movlw	36
 14248  1BF3  00D6               	movwf	((??_calcSinArray+2)^(0+256)+1)
 14249  1BF4  082E               	movf	?___wmul^(0+256),w
 14250  1BF5  0755               	addwf	(??_calcSinArray+2)^(0+256),w
 14251  1BF6  0086               	movwf	6
 14252  1BF7  082F               	movf	(?___wmul+1)^(0+256),w
 14253  1BF8  3D56               	addwfc	(??_calcSinArray+3)^(0+256),w
 14254  1BF9  0087               	movwf	7
 14255  1BFA  0858               	movf	calcSinArray@tmpVal^(0+256),w
 14256  1BFB  3FC0               	movwi [0]fsr1
 14257  1BFC  0859               	movf	(calcSinArray@tmpVal+1)^(0+256),w
 14258  1BFD  3FC1               	movwi [1]fsr1
 14259  1BFE  085A               	movf	(calcSinArray@tmpVal+2)^(0+256),w
 14260  1BFF  3FC2               	movwi [2]fsr1
 14261  1C00  3001               	movlw	1
 14262  1C01  00D3               	movwf	??_calcSinArray^(0+256)
 14263  1C02  0853               	movf	??_calcSinArray^(0+256),w
 14264  1C03  07DB               	addwf	calcSinArray@iAngle^(0+256),f
 14265  1C04  3078               	movlw	120
 14266  1C05  025B               	subwf	calcSinArray@iAngle^(0+256),w
 14267  1C06  1C03               	skipc
 14268  1C07  2B8A               	goto	l8287
 14269  1C08                     l1882:	
 14270                           
 14271                           ;modulation.c: 20: }
 14272                           ;modulation.c: 21: char x = 1;
 14273  1C08  01D7               	clrf	calcSinArray@x^(0+256)
 14274  1C09  0AD7               	incf	calcSinArray@x^(0+256),f
 14275  1C0A  0008               	return
 14276  1C0B                     __end_of_calcSinArray:	
 14277                           
 14278                           	psect	text42
 14279  0A4E                     __ptext42:	
 14280 ;; *************** function _sin *****************
 14281 ;; Defined at:
 14282 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\sin.c"
 14283 ;; Parameters:    Size  Location     Type
 14284 ;;  f               3   37[BANK2 ] void 
 14285 ;; Auto vars:     Size  Location     Type
 14286 ;;  x2              3   47[BANK2 ] void 
 14287 ;;  y               3   41[BANK2 ] void 
 14288 ;;  sgn             1   50[BANK2 ] unsigned char 
 14289 ;; Return value:  Size  Location     Type
 14290 ;;                  3   37[BANK2 ] unsigned char 
 14291 ;; Registers used:
 14292 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14293 ;; Tracked objects:
 14294 ;;		On entry : 0/0
 14295 ;;		On exit  : 0/0
 14296 ;;		Unchanged: 0/0
 14297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14298 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14299 ;;      Locals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14300 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14301 ;;      Totals:         0       0       0      14       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14302 ;;Total ram usage:       14 bytes
 14303 ;; Hardware stack levels used:    1
 14304 ;; Hardware stack levels required when called:    6
 14305 ;; This function calls:
 14306 ;;		___ftadd
 14307 ;;		___ftdiv
 14308 ;;		___ftge
 14309 ;;		___ftmul
 14310 ;;		___ftneg
 14311 ;;		___ftsub
 14312 ;;		_eval_poly
 14313 ;;		_floor
 14314 ;; This function is called by:
 14315 ;;		_calcSinArray
 14316 ;; This function uses a non-reentrant model
 14317 ;;
 14318                           
 14319                           
 14320                           ;psect for function _sin
 14321  0A4E                     _sin:	
 14322                           
 14323                           ;incstack = 0
 14324                           ; Regs used in _sin: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14325  0A4E  0022               	movlb	2	; select bank2
 14326  0A4F  01D2               	clrf	sin@sgn^(0+256)
 14327  0A50  0845               	movf	sin@f^(0+256),w
 14328  0A51  0021               	movlb	1	; select bank1
 14329  0A52  00A0               	movwf	___ftge@ff1^(0+128)
 14330  0A53  0022               	movlb	2	; select bank2
 14331  0A54  0846               	movf	(sin@f+1)^(0+256),w
 14332  0A55  0021               	movlb	1	; select bank1
 14333  0A56  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 14334  0A57  0022               	movlb	2	; select bank2
 14335  0A58  0847               	movf	(sin@f+2)^(0+256),w
 14336  0A59  0021               	movlb	1	; select bank1
 14337  0A5A  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 14338  0A5B  3000               	movlw	0
 14339  0A5C  00A3               	movwf	___ftge@ff2^(0+128)
 14340  0A5D  3000               	movlw	0
 14341  0A5E  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 14342  0A5F  3000               	movlw	0
 14343  0A60  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 14344  0A61  31A2  22F9  318A   	fcall	___ftge
 14345  0A64  1803               	btfsc	3,0
 14346  0A65  2A83               	goto	l8185
 14347  0A66  0022               	movlb	2	; select bank2
 14348  0A67  0845               	movf	sin@f^(0+256),w
 14349  0A68  0021               	movlb	1	; select bank1
 14350  0A69  00BE               	movwf	___ftneg@f1^(0+128)
 14351  0A6A  0022               	movlb	2	; select bank2
 14352  0A6B  0846               	movf	(sin@f+1)^(0+256),w
 14353  0A6C  0021               	movlb	1	; select bank1
 14354  0A6D  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 14355  0A6E  0022               	movlb	2	; select bank2
 14356  0A6F  0847               	movf	(sin@f+2)^(0+256),w
 14357  0A70  0021               	movlb	1	; select bank1
 14358  0A71  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 14359  0A72  31AF  27BA  318A   	fcall	___ftneg
 14360  0A75  0021               	movlb	1	; select bank1
 14361  0A76  083E               	movf	?___ftneg^(0+128),w
 14362  0A77  0022               	movlb	2	; select bank2
 14363  0A78  00C5               	movwf	sin@f^(0+256)
 14364  0A79  0021               	movlb	1	; select bank1
 14365  0A7A  083F               	movf	(?___ftneg+1)^(0+128),w
 14366  0A7B  0022               	movlb	2	; select bank2
 14367  0A7C  00C6               	movwf	(sin@f+1)^(0+256)
 14368  0A7D  0021               	movlb	1	; select bank1
 14369  0A7E  0840               	movf	(?___ftneg+2)^(0+128),w
 14370  0A7F  0022               	movlb	2	; select bank2
 14371  0A80  00C7               	movwf	(sin@f+2)^(0+256)
 14372  0A81  01D2               	clrf	sin@sgn^(0+256)
 14373  0A82  0AD2               	incf	sin@sgn^(0+256),f
 14374  0A83                     l8185:	
 14375  0A83  30FA               	movlw	250
 14376  0A84  0021               	movlb	1	; select bank1
 14377  0A85  00AE               	movwf	___ftmul@f1^(0+128)
 14378  0A86  3022               	movlw	34
 14379  0A87  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 14380  0A88  303E               	movlw	62
 14381  0A89  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 14382  0A8A  0022               	movlb	2	; select bank2
 14383  0A8B  0845               	movf	sin@f^(0+256),w
 14384  0A8C  0021               	movlb	1	; select bank1
 14385  0A8D  00B1               	movwf	___ftmul@f2^(0+128)
 14386  0A8E  0022               	movlb	2	; select bank2
 14387  0A8F  0846               	movf	(sin@f+1)^(0+256),w
 14388  0A90  0021               	movlb	1	; select bank1
 14389  0A91  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 14390  0A92  0022               	movlb	2	; select bank2
 14391  0A93  0847               	movf	(sin@f+2)^(0+256),w
 14392  0A94  0021               	movlb	1	; select bank1
 14393  0A95  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 14394  0A96  319E  2691  318A   	fcall	___ftmul
 14395  0A99  0021               	movlb	1	; select bank1
 14396  0A9A  082E               	movf	?___ftmul^(0+128),w
 14397  0A9B  0022               	movlb	2	; select bank2
 14398  0A9C  00C5               	movwf	sin@f^(0+256)
 14399  0A9D  0021               	movlb	1	; select bank1
 14400  0A9E  082F               	movf	(?___ftmul+1)^(0+128),w
 14401  0A9F  0022               	movlb	2	; select bank2
 14402  0AA0  00C6               	movwf	(sin@f+1)^(0+256)
 14403  0AA1  0021               	movlb	1	; select bank1
 14404  0AA2  0830               	movf	(?___ftmul+2)^(0+128),w
 14405  0AA3  0022               	movlb	2	; select bank2
 14406  0AA4  00C7               	movwf	(sin@f+2)^(0+256)
 14407  0AA5  0845               	movf	sin@f^(0+256),w
 14408  0AA6  00B6               	movwf	floor@x^(0+256)
 14409  0AA7  0846               	movf	(sin@f+1)^(0+256),w
 14410  0AA8  00B7               	movwf	(floor@x+1)^(0+256)
 14411  0AA9  0847               	movf	(sin@f+2)^(0+256),w
 14412  0AAA  00B8               	movwf	(floor@x+2)^(0+256)
 14413  0AAB  319C  2496  318A   	fcall	_floor
 14414  0AAE  0022               	movlb	2	; select bank2
 14415  0AAF  0836               	movf	?_floor^(0+256),w
 14416  0AB0  00BF               	movwf	___ftsub@f2^(0+256)
 14417  0AB1  0837               	movf	(?_floor+1)^(0+256),w
 14418  0AB2  00C0               	movwf	(___ftsub@f2+1)^(0+256)
 14419  0AB3  0838               	movf	(?_floor+2)^(0+256),w
 14420  0AB4  00C1               	movwf	(___ftsub@f2+2)^(0+256)
 14421  0AB5  0845               	movf	sin@f^(0+256),w
 14422  0AB6  00C2               	movwf	___ftsub@f1^(0+256)
 14423  0AB7  0846               	movf	(sin@f+1)^(0+256),w
 14424  0AB8  00C3               	movwf	(___ftsub@f1+1)^(0+256)
 14425  0AB9  0847               	movf	(sin@f+2)^(0+256),w
 14426  0ABA  00C4               	movwf	(___ftsub@f1+2)^(0+256)
 14427  0ABB  31A1  215D  318A   	fcall	___ftsub
 14428  0ABE  0022               	movlb	2	; select bank2
 14429  0ABF  083F               	movf	?___ftsub^(0+256),w
 14430  0AC0  00C5               	movwf	sin@f^(0+256)
 14431  0AC1  0840               	movf	(?___ftsub+1)^(0+256),w
 14432  0AC2  00C6               	movwf	(sin@f+1)^(0+256)
 14433  0AC3  0841               	movf	(?___ftsub+2)^(0+256),w
 14434  0AC4  00C7               	movwf	(sin@f+2)^(0+256)
 14435  0AC5  3000               	movlw	0
 14436  0AC6  0021               	movlb	1	; select bank1
 14437  0AC7  00AE               	movwf	___ftmul@f1^(0+128)
 14438  0AC8  3080               	movlw	128
 14439  0AC9  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 14440  0ACA  3040               	movlw	64
 14441  0ACB  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 14442  0ACC  0022               	movlb	2	; select bank2
 14443  0ACD  0845               	movf	sin@f^(0+256),w
 14444  0ACE  0021               	movlb	1	; select bank1
 14445  0ACF  00B1               	movwf	___ftmul@f2^(0+128)
 14446  0AD0  0022               	movlb	2	; select bank2
 14447  0AD1  0846               	movf	(sin@f+1)^(0+256),w
 14448  0AD2  0021               	movlb	1	; select bank1
 14449  0AD3  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 14450  0AD4  0022               	movlb	2	; select bank2
 14451  0AD5  0847               	movf	(sin@f+2)^(0+256),w
 14452  0AD6  0021               	movlb	1	; select bank1
 14453  0AD7  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 14454  0AD8  319E  2691  318A   	fcall	___ftmul
 14455  0ADB  0021               	movlb	1	; select bank1
 14456  0ADC  082E               	movf	?___ftmul^(0+128),w
 14457  0ADD  0022               	movlb	2	; select bank2
 14458  0ADE  00C5               	movwf	sin@f^(0+256)
 14459  0ADF  0021               	movlb	1	; select bank1
 14460  0AE0  082F               	movf	(?___ftmul+1)^(0+128),w
 14461  0AE1  0022               	movlb	2	; select bank2
 14462  0AE2  00C6               	movwf	(sin@f+1)^(0+256)
 14463  0AE3  0021               	movlb	1	; select bank1
 14464  0AE4  0830               	movf	(?___ftmul+2)^(0+128),w
 14465  0AE5  0022               	movlb	2	; select bank2
 14466  0AE6  00C7               	movwf	(sin@f+2)^(0+256)
 14467  0AE7  3000               	movlw	0
 14468  0AE8  0021               	movlb	1	; select bank1
 14469  0AE9  00A0               	movwf	___ftge@ff1^(0+128)
 14470  0AEA  3000               	movlw	0
 14471  0AEB  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 14472  0AEC  3040               	movlw	64
 14473  0AED  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 14474  0AEE  0022               	movlb	2	; select bank2
 14475  0AEF  0845               	movf	sin@f^(0+256),w
 14476  0AF0  0021               	movlb	1	; select bank1
 14477  0AF1  00A3               	movwf	___ftge@ff2^(0+128)
 14478  0AF2  0022               	movlb	2	; select bank2
 14479  0AF3  0846               	movf	(sin@f+1)^(0+256),w
 14480  0AF4  0021               	movlb	1	; select bank1
 14481  0AF5  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 14482  0AF6  0022               	movlb	2	; select bank2
 14483  0AF7  0847               	movf	(sin@f+2)^(0+256),w
 14484  0AF8  0021               	movlb	1	; select bank1
 14485  0AF9  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 14486  0AFA  31A2  22F9  318A   	fcall	___ftge
 14487  0AFD  1803               	btfsc	3,0
 14488  0AFE  2B1F               	goto	l8197
 14489  0AFF  3000               	movlw	0
 14490  0B00  0022               	movlb	2	; select bank2
 14491  0B01  00BF               	movwf	___ftsub@f2^(0+256)
 14492  0B02  3000               	movlw	0
 14493  0B03  00C0               	movwf	(___ftsub@f2+1)^(0+256)
 14494  0B04  3040               	movlw	64
 14495  0B05  00C1               	movwf	(___ftsub@f2+2)^(0+256)
 14496  0B06  0845               	movf	sin@f^(0+256),w
 14497  0B07  00C2               	movwf	___ftsub@f1^(0+256)
 14498  0B08  0846               	movf	(sin@f+1)^(0+256),w
 14499  0B09  00C3               	movwf	(___ftsub@f1+1)^(0+256)
 14500  0B0A  0847               	movf	(sin@f+2)^(0+256),w
 14501  0B0B  00C4               	movwf	(___ftsub@f1+2)^(0+256)
 14502  0B0C  31A1  215D  318A   	fcall	___ftsub
 14503  0B0F  0022               	movlb	2	; select bank2
 14504  0B10  083F               	movf	?___ftsub^(0+256),w
 14505  0B11  00C5               	movwf	sin@f^(0+256)
 14506  0B12  0840               	movf	(?___ftsub+1)^(0+256),w
 14507  0B13  00C6               	movwf	(sin@f+1)^(0+256)
 14508  0B14  0841               	movf	(?___ftsub+2)^(0+256),w
 14509  0B15  00C7               	movwf	(sin@f+2)^(0+256)
 14510  0B16  0852               	movf	sin@sgn^(0+256),w
 14511  0B17  1D03               	btfss	3,2
 14512  0B18  2B1B               	goto	u8550
 14513  0B19  3001               	movlw	1
 14514  0B1A  2B1C               	goto	u8560
 14515  0B1B                     u8550:	
 14516  0B1B  3000               	movlw	0
 14517  0B1C                     u8560:	
 14518  0B1C  00C8               	movwf	??_sin^(0+256)
 14519  0B1D  0848               	movf	??_sin^(0+256),w
 14520  0B1E  00D2               	movwf	sin@sgn^(0+256)
 14521  0B1F                     l8197:	
 14522  0B1F  3000               	movlw	0
 14523  0B20  0021               	movlb	1	; select bank1
 14524  0B21  00A0               	movwf	___ftge@ff1^(0+128)
 14525  0B22  3080               	movlw	128
 14526  0B23  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 14527  0B24  303F               	movlw	63
 14528  0B25  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 14529  0B26  0022               	movlb	2	; select bank2
 14530  0B27  0845               	movf	sin@f^(0+256),w
 14531  0B28  0021               	movlb	1	; select bank1
 14532  0B29  00A3               	movwf	___ftge@ff2^(0+128)
 14533  0B2A  0022               	movlb	2	; select bank2
 14534  0B2B  0846               	movf	(sin@f+1)^(0+256),w
 14535  0B2C  0021               	movlb	1	; select bank1
 14536  0B2D  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 14537  0B2E  0022               	movlb	2	; select bank2
 14538  0B2F  0847               	movf	(sin@f+2)^(0+256),w
 14539  0B30  0021               	movlb	1	; select bank1
 14540  0B31  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 14541  0B32  31A2  22F9  318A   	fcall	___ftge
 14542  0B35  1803               	btfsc	3,0
 14543  0B36  2B63               	goto	l2310
 14544  0B37  3000               	movlw	0
 14545  0B38  0021               	movlb	1	; select bank1
 14546  0B39  00C1               	movwf	___ftadd@f1^(0+128)
 14547  0B3A  3000               	movlw	0
 14548  0B3B  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 14549  0B3C  3040               	movlw	64
 14550  0B3D  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 14551  0B3E  0022               	movlb	2	; select bank2
 14552  0B3F  0845               	movf	sin@f^(0+256),w
 14553  0B40  0021               	movlb	1	; select bank1
 14554  0B41  00BE               	movwf	___ftneg@f1^(0+128)
 14555  0B42  0022               	movlb	2	; select bank2
 14556  0B43  0846               	movf	(sin@f+1)^(0+256),w
 14557  0B44  0021               	movlb	1	; select bank1
 14558  0B45  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 14559  0B46  0022               	movlb	2	; select bank2
 14560  0B47  0847               	movf	(sin@f+2)^(0+256),w
 14561  0B48  0021               	movlb	1	; select bank1
 14562  0B49  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 14563  0B4A  31AF  27BA  318A   	fcall	___ftneg
 14564  0B4D  0021               	movlb	1	; select bank1
 14565  0B4E  083E               	movf	?___ftneg^(0+128),w
 14566  0B4F  00C4               	movwf	___ftadd@f2^(0+128)
 14567  0B50  083F               	movf	(?___ftneg+1)^(0+128),w
 14568  0B51  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 14569  0B52  0840               	movf	(?___ftneg+2)^(0+128),w
 14570  0B53  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 14571  0B54  3192  225B  318A   	fcall	___ftadd
 14572  0B57  0021               	movlb	1	; select bank1
 14573  0B58  0841               	movf	?___ftadd^(0+128),w
 14574  0B59  0022               	movlb	2	; select bank2
 14575  0B5A  00C5               	movwf	sin@f^(0+256)
 14576  0B5B  0021               	movlb	1	; select bank1
 14577  0B5C  0842               	movf	(?___ftadd+1)^(0+128),w
 14578  0B5D  0022               	movlb	2	; select bank2
 14579  0B5E  00C6               	movwf	(sin@f+1)^(0+256)
 14580  0B5F  0021               	movlb	1	; select bank1
 14581  0B60  0843               	movf	(?___ftadd+2)^(0+128),w
 14582  0B61  0022               	movlb	2	; select bank2
 14583  0B62  00C7               	movwf	(sin@f+2)^(0+256)
 14584  0B63                     l2310:	
 14585  0B63  0022               	movlb	2	; select bank2
 14586  0B64  0845               	movf	sin@f^(0+256),w
 14587  0B65  0021               	movlb	1	; select bank1
 14588  0B66  00AE               	movwf	___ftmul@f1^(0+128)
 14589  0B67  0022               	movlb	2	; select bank2
 14590  0B68  0846               	movf	(sin@f+1)^(0+256),w
 14591  0B69  0021               	movlb	1	; select bank1
 14592  0B6A  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 14593  0B6B  0022               	movlb	2	; select bank2
 14594  0B6C  0847               	movf	(sin@f+2)^(0+256),w
 14595  0B6D  0021               	movlb	1	; select bank1
 14596  0B6E  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 14597  0B6F  0022               	movlb	2	; select bank2
 14598  0B70  0845               	movf	sin@f^(0+256),w
 14599  0B71  0021               	movlb	1	; select bank1
 14600  0B72  00B1               	movwf	___ftmul@f2^(0+128)
 14601  0B73  0022               	movlb	2	; select bank2
 14602  0B74  0846               	movf	(sin@f+1)^(0+256),w
 14603  0B75  0021               	movlb	1	; select bank1
 14604  0B76  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 14605  0B77  0022               	movlb	2	; select bank2
 14606  0B78  0847               	movf	(sin@f+2)^(0+256),w
 14607  0B79  0021               	movlb	1	; select bank1
 14608  0B7A  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 14609  0B7B  319E  2691  318A   	fcall	___ftmul
 14610  0B7E  0021               	movlb	1	; select bank1
 14611  0B7F  082E               	movf	?___ftmul^(0+128),w
 14612  0B80  0022               	movlb	2	; select bank2
 14613  0B81  00CF               	movwf	sin@x2^(0+256)
 14614  0B82  0021               	movlb	1	; select bank1
 14615  0B83  082F               	movf	(?___ftmul+1)^(0+128),w
 14616  0B84  0022               	movlb	2	; select bank2
 14617  0B85  00D0               	movwf	(sin@x2+1)^(0+256)
 14618  0B86  0021               	movlb	1	; select bank1
 14619  0B87  0830               	movf	(?___ftmul+2)^(0+128),w
 14620  0B88  0022               	movlb	2	; select bank2
 14621  0B89  00D1               	movwf	(sin@x2+2)^(0+256)
 14622  0B8A  084F               	movf	sin@x2^(0+256),w
 14623  0B8B  00B4               	movwf	eval_poly@x^(0+256)
 14624  0B8C  0850               	movf	(sin@x2+1)^(0+256),w
 14625  0B8D  00B5               	movwf	(eval_poly@x+1)^(0+256)
 14626  0B8E  0851               	movf	(sin@x2+2)^(0+256),w
 14627  0B8F  00B6               	movwf	(eval_poly@x+2)^(0+256)
 14628  0B90  3048               	movlw	low (sin@coeff_b| (0+32768))
 14629  0B91  00B7               	movwf	eval_poly@d^(0+256)
 14630  0B92  30A8               	movlw	high (sin@coeff_b| (0+32768))
 14631  0B93  00B8               	movwf	(eval_poly@d^(0+256)+1)
 14632  0B94  3003               	movlw	3
 14633  0B95  00B9               	movwf	eval_poly@n^(0+256)
 14634  0B96  3000               	movlw	0
 14635  0B97  00BA               	movwf	(eval_poly@n^(0+256)+1)
 14636  0B98  3198  208C  318A   	fcall	_eval_poly
 14637  0B9B  0022               	movlb	2	; select bank2
 14638  0B9C  0834               	movf	?_eval_poly^(0+256),w
 14639  0B9D  00C9               	movwf	sin@y^(0+256)
 14640  0B9E  0835               	movf	(?_eval_poly+1)^(0+256),w
 14641  0B9F  00CA               	movwf	(sin@y+1)^(0+256)
 14642  0BA0  0836               	movf	(?_eval_poly+2)^(0+256),w
 14643  0BA1  00CB               	movwf	(sin@y+2)^(0+256)
 14644  0BA2  3004               	movlw	4
 14645  0BA3  00B9               	movwf	eval_poly@n^(0+256)
 14646  0BA4  3000               	movlw	0
 14647  0BA5  00BA               	movwf	(eval_poly@n^(0+256)+1)
 14648  0BA6  3039               	movlw	low (sin@coeff_a| (0+32768))
 14649  0BA7  00B7               	movwf	eval_poly@d^(0+256)
 14650  0BA8  30A8               	movlw	high (sin@coeff_a| (0+32768))
 14651  0BA9  00B8               	movwf	(eval_poly@d^(0+256)+1)
 14652  0BAA  084F               	movf	sin@x2^(0+256),w
 14653  0BAB  00B4               	movwf	eval_poly@x^(0+256)
 14654  0BAC  0850               	movf	(sin@x2+1)^(0+256),w
 14655  0BAD  00B5               	movwf	(eval_poly@x+1)^(0+256)
 14656  0BAE  0851               	movf	(sin@x2+2)^(0+256),w
 14657  0BAF  00B6               	movwf	(eval_poly@x+2)^(0+256)
 14658  0BB0  3198  208C  318A   	fcall	_eval_poly
 14659  0BB3  0022               	movlb	2	; select bank2
 14660  0BB4  0834               	movf	?_eval_poly^(0+256),w
 14661  0BB5  0021               	movlb	1	; select bank1
 14662  0BB6  00D1               	movwf	___ftdiv@f1^(0+128)
 14663  0BB7  0022               	movlb	2	; select bank2
 14664  0BB8  0835               	movf	(?_eval_poly+1)^(0+256),w
 14665  0BB9  0021               	movlb	1	; select bank1
 14666  0BBA  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 14667  0BBB  0022               	movlb	2	; select bank2
 14668  0BBC  0836               	movf	(?_eval_poly+2)^(0+256),w
 14669  0BBD  0021               	movlb	1	; select bank1
 14670  0BBE  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 14671  0BBF  0022               	movlb	2	; select bank2
 14672  0BC0  0849               	movf	sin@y^(0+256),w
 14673  0BC1  0021               	movlb	1	; select bank1
 14674  0BC2  00CE               	movwf	___ftdiv@f2^(0+128)
 14675  0BC3  0022               	movlb	2	; select bank2
 14676  0BC4  084A               	movf	(sin@y+1)^(0+256),w
 14677  0BC5  0021               	movlb	1	; select bank1
 14678  0BC6  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 14679  0BC7  0022               	movlb	2	; select bank2
 14680  0BC8  084B               	movf	(sin@y+2)^(0+256),w
 14681  0BC9  0021               	movlb	1	; select bank1
 14682  0BCA  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 14683  0BCB  319D  253D  318A   	fcall	___ftdiv
 14684  0BCE  0021               	movlb	1	; select bank1
 14685  0BCF  084E               	movf	?___ftdiv^(0+128),w
 14686  0BD0  0022               	movlb	2	; select bank2
 14687  0BD1  00CC               	movwf	_sin$2826^(0+256)
 14688  0BD2  0021               	movlb	1	; select bank1
 14689  0BD3  084F               	movf	(?___ftdiv+1)^(0+128),w
 14690  0BD4  0022               	movlb	2	; select bank2
 14691  0BD5  00CD               	movwf	(_sin$2826+1)^(0+256)
 14692  0BD6  0021               	movlb	1	; select bank1
 14693  0BD7  0850               	movf	(?___ftdiv+2)^(0+128),w
 14694  0BD8  0022               	movlb	2	; select bank2
 14695  0BD9  00CE               	movwf	(_sin$2826+2)^(0+256)
 14696  0BDA  084C               	movf	_sin$2826^(0+256),w
 14697  0BDB  0021               	movlb	1	; select bank1
 14698  0BDC  00AE               	movwf	___ftmul@f1^(0+128)
 14699  0BDD  0022               	movlb	2	; select bank2
 14700  0BDE  084D               	movf	(_sin$2826+1)^(0+256),w
 14701  0BDF  0021               	movlb	1	; select bank1
 14702  0BE0  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 14703  0BE1  0022               	movlb	2	; select bank2
 14704  0BE2  084E               	movf	(_sin$2826+2)^(0+256),w
 14705  0BE3  0021               	movlb	1	; select bank1
 14706  0BE4  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 14707  0BE5  0022               	movlb	2	; select bank2
 14708  0BE6  0845               	movf	sin@f^(0+256),w
 14709  0BE7  0021               	movlb	1	; select bank1
 14710  0BE8  00B1               	movwf	___ftmul@f2^(0+128)
 14711  0BE9  0022               	movlb	2	; select bank2
 14712  0BEA  0846               	movf	(sin@f+1)^(0+256),w
 14713  0BEB  0021               	movlb	1	; select bank1
 14714  0BEC  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 14715  0BED  0022               	movlb	2	; select bank2
 14716  0BEE  0847               	movf	(sin@f+2)^(0+256),w
 14717  0BEF  0021               	movlb	1	; select bank1
 14718  0BF0  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 14719  0BF1  319E  2691  318A   	fcall	___ftmul
 14720  0BF4  0021               	movlb	1	; select bank1
 14721  0BF5  082E               	movf	?___ftmul^(0+128),w
 14722  0BF6  0022               	movlb	2	; select bank2
 14723  0BF7  00C5               	movwf	sin@f^(0+256)
 14724  0BF8  0021               	movlb	1	; select bank1
 14725  0BF9  082F               	movf	(?___ftmul+1)^(0+128),w
 14726  0BFA  0022               	movlb	2	; select bank2
 14727  0BFB  00C6               	movwf	(sin@f+1)^(0+256)
 14728  0BFC  0021               	movlb	1	; select bank1
 14729  0BFD  0830               	movf	(?___ftmul+2)^(0+128),w
 14730  0BFE  0022               	movlb	2	; select bank2
 14731  0BFF  00C7               	movwf	(sin@f+2)^(0+256)
 14732  0C00  0852               	movf	sin@sgn^(0+256),w
 14733  0C01  1903               	btfsc	3,2
 14734  0C02  0008               	return
 14735  0C03  0845               	movf	sin@f^(0+256),w
 14736  0C04  0021               	movlb	1	; select bank1
 14737  0C05  00BE               	movwf	___ftneg@f1^(0+128)
 14738  0C06  0022               	movlb	2	; select bank2
 14739  0C07  0846               	movf	(sin@f+1)^(0+256),w
 14740  0C08  0021               	movlb	1	; select bank1
 14741  0C09  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 14742  0C0A  0022               	movlb	2	; select bank2
 14743  0C0B  0847               	movf	(sin@f+2)^(0+256),w
 14744  0C0C  0021               	movlb	1	; select bank1
 14745  0C0D  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 14746  0C0E  31AF  27BA         	fcall	___ftneg
 14747  0C10  0021               	movlb	1	; select bank1
 14748  0C11  083E               	movf	?___ftneg^(0+128),w
 14749  0C12  0022               	movlb	2	; select bank2
 14750  0C13  00C5               	movwf	?_sin^(0+256)
 14751  0C14  0021               	movlb	1	; select bank1
 14752  0C15  083F               	movf	(?___ftneg+1)^(0+128),w
 14753  0C16  0022               	movlb	2	; select bank2
 14754  0C17  00C6               	movwf	(?_sin+1)^(0+256)
 14755  0C18  0021               	movlb	1	; select bank1
 14756  0C19  0840               	movf	(?___ftneg+2)^(0+128),w
 14757  0C1A  0022               	movlb	2	; select bank2
 14758  0C1B  00C7               	movwf	(?_sin+2)^(0+256)
 14759  0C1C  0008               	return
 14760  0C1D                     __end_of_sin:	
 14761                           
 14762                           	psect	text43
 14763  1C96                     __ptext43:	
 14764 ;; *************** function _floor *****************
 14765 ;; Defined at:
 14766 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\floor.c"
 14767 ;; Parameters:    Size  Location     Type
 14768 ;;  x               3   22[BANK2 ] unsigned char 
 14769 ;; Auto vars:     Size  Location     Type
 14770 ;;  i               3   26[BANK2 ] unsigned char 
 14771 ;;  expon           2   29[BANK2 ] int 
 14772 ;; Return value:  Size  Location     Type
 14773 ;;                  3   22[BANK2 ] int 
 14774 ;; Registers used:
 14775 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14776 ;; Tracked objects:
 14777 ;;		On entry : 0/0
 14778 ;;		On exit  : 0/0
 14779 ;;		Unchanged: 0/0
 14780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14781 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14782 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14783 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14784 ;;      Totals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14785 ;;Total ram usage:        9 bytes
 14786 ;; Hardware stack levels used:    1
 14787 ;; Hardware stack levels required when called:    5
 14788 ;; This function calls:
 14789 ;;		___altoft
 14790 ;;		___ftadd
 14791 ;;		___ftge
 14792 ;;		___fttol
 14793 ;;		_frexp
 14794 ;; This function is called by:
 14795 ;;		_sin
 14796 ;;		_exp
 14797 ;; This function uses a non-reentrant model
 14798 ;;
 14799                           
 14800                           
 14801                           ;psect for function _floor
 14802  1C96                     _floor:	
 14803                           
 14804                           ;incstack = 0
 14805                           ; Regs used in _floor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14806  1C96  0022               	movlb	2	; select bank2
 14807  1C97  0836               	movf	floor@x^(0+256),w
 14808  1C98  0021               	movlb	1	; select bank1
 14809  1C99  00A0               	movwf	frexp@value^(0+128)
 14810  1C9A  0022               	movlb	2	; select bank2
 14811  1C9B  0837               	movf	(floor@x+1)^(0+256),w
 14812  1C9C  0021               	movlb	1	; select bank1
 14813  1C9D  00A1               	movwf	(frexp@value+1)^(0+128)
 14814  1C9E  0022               	movlb	2	; select bank2
 14815  1C9F  0838               	movf	(floor@x+2)^(0+256),w
 14816  1CA0  0021               	movlb	1	; select bank1
 14817  1CA1  00A2               	movwf	(frexp@value+2)^(0+128)
 14818  1CA2  303D               	movlw	(low (floor@expon| (0+256)))& (0+255)
 14819  1CA3  0022               	movlb	2	; select bank2
 14820  1CA4  00B9               	movwf	??_floor^(0+256)
 14821  1CA5  0839               	movf	??_floor^(0+256),w
 14822  1CA6  0021               	movlb	1	; select bank1
 14823  1CA7  00A3               	movwf	frexp@eptr^(0+128)
 14824  1CA8  31A3  23B0  319C   	fcall	_frexp
 14825  1CAB  0022               	movlb	2	; select bank2
 14826  1CAC  1FBE               	btfss	(floor@expon+1)^(0+256),7
 14827  1CAD  2CD4               	goto	l7783
 14828  1CAE  0836               	movf	floor@x^(0+256),w
 14829  1CAF  0021               	movlb	1	; select bank1
 14830  1CB0  00A0               	movwf	___ftge@ff1^(0+128)
 14831  1CB1  0022               	movlb	2	; select bank2
 14832  1CB2  0837               	movf	(floor@x+1)^(0+256),w
 14833  1CB3  0021               	movlb	1	; select bank1
 14834  1CB4  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 14835  1CB5  0022               	movlb	2	; select bank2
 14836  1CB6  0838               	movf	(floor@x+2)^(0+256),w
 14837  1CB7  0021               	movlb	1	; select bank1
 14838  1CB8  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 14839  1CB9  3000               	movlw	0
 14840  1CBA  00A3               	movwf	___ftge@ff2^(0+128)
 14841  1CBB  3000               	movlw	0
 14842  1CBC  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 14843  1CBD  3000               	movlw	0
 14844  1CBE  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 14845  1CBF  31A2  22F9  319C   	fcall	___ftge
 14846  1CC2  1803               	btfsc	3,0
 14847  1CC3  2CCC               	goto	l7779
 14848  1CC4  3000               	movlw	0
 14849  1CC5  0022               	movlb	2	; select bank2
 14850  1CC6  00B6               	movwf	?_floor^(0+256)
 14851  1CC7  3080               	movlw	128
 14852  1CC8  00B7               	movwf	(?_floor+1)^(0+256)
 14853  1CC9  30BF               	movlw	191
 14854  1CCA  00B8               	movwf	(?_floor+2)^(0+256)
 14855  1CCB  0008               	return
 14856  1CCC                     l7779:	
 14857  1CCC  3000               	movlw	0
 14858  1CCD  0022               	movlb	2	; select bank2
 14859  1CCE  00B6               	movwf	?_floor^(0+256)
 14860  1CCF  3000               	movlw	0
 14861  1CD0  00B7               	movwf	(?_floor+1)^(0+256)
 14862  1CD1  3000               	movlw	0
 14863  1CD2  00B8               	movwf	(?_floor+2)^(0+256)
 14864  1CD3  0008               	return
 14865  1CD4                     l7783:	
 14866  1CD4  3000               	movlw	0
 14867  1CD5  023E               	subwf	(floor@expon+1)^(0+256),w
 14868  1CD6  3015               	movlw	21
 14869  1CD7  1903               	skipnz
 14870  1CD8  023D               	subwf	floor@expon^(0+256),w
 14871  1CD9  1803               	btfsc	3,0
 14872  1CDA  0008               	return
 14873  1CDB  0836               	movf	floor@x^(0+256),w
 14874  1CDC  00A0               	movwf	___fttol@f1^(0+256)
 14875  1CDD  0837               	movf	(floor@x+1)^(0+256),w
 14876  1CDE  00A1               	movwf	(___fttol@f1+1)^(0+256)
 14877  1CDF  0838               	movf	(floor@x+2)^(0+256),w
 14878  1CE0  00A2               	movwf	(___fttol@f1+2)^(0+256)
 14879  1CE1  319A  22FD  319C   	fcall	___fttol
 14880  1CE4  0022               	movlb	2	; select bank2
 14881  1CE5  0823               	movf	(?___fttol+3)^(0+256),w
 14882  1CE6  00B1               	movwf	(___altoft@c+3)^(0+256)
 14883  1CE7  0822               	movf	(?___fttol+2)^(0+256),w
 14884  1CE8  00B0               	movwf	(___altoft@c+2)^(0+256)
 14885  1CE9  0821               	movf	(?___fttol+1)^(0+256),w
 14886  1CEA  00AF               	movwf	(___altoft@c+1)^(0+256)
 14887  1CEB  0820               	movf	?___fttol^(0+256),w
 14888  1CEC  00AE               	movwf	___altoft@c^(0+256)
 14889  1CED  31A6  2619  319C   	fcall	___altoft
 14890  1CF0  0022               	movlb	2	; select bank2
 14891  1CF1  082E               	movf	?___altoft^(0+256),w
 14892  1CF2  00BA               	movwf	floor@i^(0+256)
 14893  1CF3  082F               	movf	(?___altoft+1)^(0+256),w
 14894  1CF4  00BB               	movwf	(floor@i+1)^(0+256)
 14895  1CF5  0830               	movf	(?___altoft+2)^(0+256),w
 14896  1CF6  00BC               	movwf	(floor@i+2)^(0+256)
 14897  1CF7  0836               	movf	floor@x^(0+256),w
 14898  1CF8  0021               	movlb	1	; select bank1
 14899  1CF9  00A0               	movwf	___ftge@ff1^(0+128)
 14900  1CFA  0022               	movlb	2	; select bank2
 14901  1CFB  0837               	movf	(floor@x+1)^(0+256),w
 14902  1CFC  0021               	movlb	1	; select bank1
 14903  1CFD  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 14904  1CFE  0022               	movlb	2	; select bank2
 14905  1CFF  0838               	movf	(floor@x+2)^(0+256),w
 14906  1D00  0021               	movlb	1	; select bank1
 14907  1D01  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 14908  1D02  0022               	movlb	2	; select bank2
 14909  1D03  083A               	movf	floor@i^(0+256),w
 14910  1D04  0021               	movlb	1	; select bank1
 14911  1D05  00A3               	movwf	___ftge@ff2^(0+128)
 14912  1D06  0022               	movlb	2	; select bank2
 14913  1D07  083B               	movf	(floor@i+1)^(0+256),w
 14914  1D08  0021               	movlb	1	; select bank1
 14915  1D09  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 14916  1D0A  0022               	movlb	2	; select bank2
 14917  1D0B  083C               	movf	(floor@i+2)^(0+256),w
 14918  1D0C  0021               	movlb	1	; select bank1
 14919  1D0D  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 14920  1D0E  31A2  22F9  319C   	fcall	___ftge
 14921  1D11  1803               	btfsc	3,0
 14922  1D12  2D35               	goto	l7793
 14923  1D13  3000               	movlw	0
 14924  1D14  0021               	movlb	1	; select bank1
 14925  1D15  00C1               	movwf	___ftadd@f1^(0+128)
 14926  1D16  3080               	movlw	128
 14927  1D17  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 14928  1D18  30BF               	movlw	191
 14929  1D19  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 14930  1D1A  0022               	movlb	2	; select bank2
 14931  1D1B  083A               	movf	floor@i^(0+256),w
 14932  1D1C  0021               	movlb	1	; select bank1
 14933  1D1D  00C4               	movwf	___ftadd@f2^(0+128)
 14934  1D1E  0022               	movlb	2	; select bank2
 14935  1D1F  083B               	movf	(floor@i+1)^(0+256),w
 14936  1D20  0021               	movlb	1	; select bank1
 14937  1D21  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 14938  1D22  0022               	movlb	2	; select bank2
 14939  1D23  083C               	movf	(floor@i+2)^(0+256),w
 14940  1D24  0021               	movlb	1	; select bank1
 14941  1D25  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 14942  1D26  3192  225B         	fcall	___ftadd
 14943  1D28  0021               	movlb	1	; select bank1
 14944  1D29  0841               	movf	?___ftadd^(0+128),w
 14945  1D2A  0022               	movlb	2	; select bank2
 14946  1D2B  00B6               	movwf	?_floor^(0+256)
 14947  1D2C  0021               	movlb	1	; select bank1
 14948  1D2D  0842               	movf	(?___ftadd+1)^(0+128),w
 14949  1D2E  0022               	movlb	2	; select bank2
 14950  1D2F  00B7               	movwf	(?_floor+1)^(0+256)
 14951  1D30  0021               	movlb	1	; select bank1
 14952  1D31  0843               	movf	(?___ftadd+2)^(0+128),w
 14953  1D32  0022               	movlb	2	; select bank2
 14954  1D33  00B8               	movwf	(?_floor+2)^(0+256)
 14955  1D34  0008               	return
 14956  1D35                     l7793:	
 14957  1D35  0022               	movlb	2	; select bank2
 14958  1D36  083A               	movf	floor@i^(0+256),w
 14959  1D37  00B6               	movwf	?_floor^(0+256)
 14960  1D38  083B               	movf	(floor@i+1)^(0+256),w
 14961  1D39  00B7               	movwf	(?_floor+1)^(0+256)
 14962  1D3A  083C               	movf	(floor@i+2)^(0+256),w
 14963  1D3B  00B8               	movwf	(?_floor+2)^(0+256)
 14964  1D3C  0008               	return
 14965  1D3D                     __end_of_floor:	
 14966                           
 14967                           	psect	text44
 14968  23B0                     __ptext44:	
 14969 ;; *************** function _frexp *****************
 14970 ;; Defined at:
 14971 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
 14972 ;; Parameters:    Size  Location     Type
 14973 ;;  value           3    0[BANK1 ] int 
 14974 ;;  eptr            1    3[BANK1 ] PTR int 
 14975 ;;		 -> log@exponent(2), floor@expon(2), trunc@expon(2), 
 14976 ;; Auto vars:     Size  Location     Type
 14977 ;;		None
 14978 ;; Return value:  Size  Location     Type
 14979 ;;                  3    0[BANK1 ] PTR int 
 14980 ;; Registers used:
 14981 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14982 ;; Tracked objects:
 14983 ;;		On entry : 0/0
 14984 ;;		On exit  : 0/0
 14985 ;;		Unchanged: 0/0
 14986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14987 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14989 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14990 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14991 ;;Total ram usage:        6 bytes
 14992 ;; Hardware stack levels used:    1
 14993 ;; Hardware stack levels required when called:    3
 14994 ;; This function calls:
 14995 ;;		Nothing
 14996 ;; This function is called by:
 14997 ;;		_trunc
 14998 ;;		_floor
 14999 ;;		_log
 15000 ;; This function uses a non-reentrant model
 15001 ;;
 15002                           
 15003                           
 15004                           ;psect for function _frexp
 15005  23B0                     _frexp:	
 15006                           
 15007                           ;incstack = 0
 15008                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
 15009  23B0  0021               	movlb	1	; select bank1
 15010  23B1  0822               	movf	(frexp@value+2)^(0+128),w
 15011  23B2  0421               	iorwf	(frexp@value+1)^(0+128),w
 15012  23B3  0420               	iorwf	frexp@value^(0+128),w
 15013  23B4  1D03               	skipz
 15014  23B5  2BC4               	goto	l7645
 15015  23B6  0823               	movf	frexp@eptr^(0+128),w
 15016  23B7  0086               	movwf	6
 15017  23B8  3001               	movlw	1	; select bank2/3
 15018  23B9  0087               	movwf	7
 15019  23BA  3000               	movlw	0
 15020  23BB  3FC0               	movwi [0]fsr1
 15021  23BC  3FC1               	movwi [1]fsr1
 15022  23BD  3000               	movlw	0
 15023  23BE  00A0               	movwf	?_frexp^(0+128)
 15024  23BF  3000               	movlw	0
 15025  23C0  00A1               	movwf	(?_frexp+1)^(0+128)
 15026  23C1  3000               	movlw	0
 15027  23C2  00A2               	movwf	(?_frexp+2)^(0+128)
 15028  23C3  0008               	return
 15029  23C4                     l7645:	
 15030  23C4  0822               	movf	(frexp@value^(0+128)+2),w
 15031  23C5  397F               	andlw	127
 15032  23C6  00A4               	movwf	??_frexp^(0+128)
 15033  23C7  01A5               	clrf	(??_frexp^(0+128)+1)
 15034  23C8  35A4               	lslf	??_frexp^(0+128),f
 15035  23C9  0DA5               	rlf	(??_frexp^(0+128)+1),f
 15036  23CA  0823               	movf	frexp@eptr^(0+128),w
 15037  23CB  0086               	movwf	6
 15038  23CC  3001               	movlw	1	; select bank2/3
 15039  23CD  0087               	movwf	7
 15040  23CE  0824               	movf	??_frexp^(0+128),w
 15041  23CF  3FC0               	movwi [0]fsr1
 15042  23D0  0825               	movf	(??_frexp+1)^(0+128),w
 15043  23D1  3FC1               	movwi [1]fsr1
 15044  23D2  0D21               	rlf	(frexp@value^(0+128)+1),w
 15045  23D3  0D21               	rlf	(frexp@value^(0+128)+1),w
 15046  23D4  3901               	andlw	1
 15047  23D5  00A4               	movwf	??_frexp^(0+128)
 15048  23D6  01A5               	clrf	(??_frexp^(0+128)+1)
 15049  23D7  0823               	movf	frexp@eptr^(0+128),w
 15050  23D8  0086               	movwf	6
 15051  23D9  3001               	movlw	1	; select bank2/3
 15052  23DA  0087               	movwf	7
 15053  23DB  0824               	movf	??_frexp^(0+128),w
 15054  23DC  0481               	iorwf	1,f
 15055  23DD  3141               	addfsr 1,1
 15056  23DE  0825               	movf	(??_frexp+1)^(0+128),w
 15057  23DF  0481               	iorwf	1,f
 15058  23E0  0823               	movf	frexp@eptr^(0+128),w
 15059  23E1  0086               	movwf	6
 15060  23E2  3001               	movlw	1	; select bank2/3
 15061  23E3  0087               	movwf	7
 15062  23E4  3082               	movlw	130
 15063  23E5  0781               	addwf	1,f
 15064  23E6  3141               	addfsr 1,1
 15065  23E7  30FF               	movlw	255
 15066  23E8  3D81               	addwfc	1,f
 15067  23E9  317F               	addfsr 1,-1
 15068  23EA  0822               	movf	(frexp@value^(0+128)+2),w
 15069  23EB  3980               	andlw	-128
 15070  23EC  383F               	iorlw	63
 15071  23ED  00A2               	movwf	(frexp@value^(0+128)+2)
 15072  23EE  13A1               	bcf	(frexp@value^(0+128)+1),7
 15073  23EF  0008               	return
 15074  23F0                     __end_of_frexp:	
 15075                           
 15076                           	psect	text45
 15077  1AFD                     __ptext45:	
 15078 ;; *************** function ___fttol *****************
 15079 ;; Defined at:
 15080 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
 15081 ;; Parameters:    Size  Location     Type
 15082 ;;  f1              3    0[BANK2 ] float 
 15083 ;; Auto vars:     Size  Location     Type
 15084 ;;  lval            4    9[BANK2 ] unsigned long 
 15085 ;;  exp1            1   13[BANK2 ] unsigned char 
 15086 ;;  sign1           1    8[BANK2 ] unsigned char 
 15087 ;; Return value:  Size  Location     Type
 15088 ;;                  4    0[BANK2 ] long 
 15089 ;; Registers used:
 15090 ;;		wreg, status,2, status,0
 15091 ;; Tracked objects:
 15092 ;;		On entry : 0/0
 15093 ;;		On exit  : 0/0
 15094 ;;		Unchanged: 0/0
 15095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15096 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15097 ;;      Locals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15098 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15099 ;;      Totals:         0       0       0      14       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15100 ;;Total ram usage:       14 bytes
 15101 ;; Hardware stack levels used:    1
 15102 ;; Hardware stack levels required when called:    3
 15103 ;; This function calls:
 15104 ;;		Nothing
 15105 ;; This function is called by:
 15106 ;;		_main
 15107 ;;		_set_subdivision
 15108 ;;		_scaleA100kPot
 15109 ;;		_scaleA10kPot
 15110 ;;		_scaleiA10kPot
 15111 ;;		_modSin
 15112 ;;		_modTri
 15113 ;;		_modSaw
 15114 ;;		_pow
 15115 ;;		_trunc
 15116 ;;		_exp
 15117 ;;		_floor
 15118 ;;		_scaleiA100kPot
 15119 ;; This function uses a non-reentrant model
 15120 ;;
 15121                           
 15122                           
 15123                           ;psect for function ___fttol
 15124  1AFD                     ___fttol:	
 15125                           
 15126                           ;incstack = 0
 15127                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 15128  1AFD  0022               	movlb	2	; select bank2
 15129  1AFE  0820               	movf	___fttol@f1^(0+256),w
 15130  1AFF  00A4               	movwf	??___fttol^(0+256)
 15131  1B00  0821               	movf	(___fttol@f1+1)^(0+256),w
 15132  1B01  00A5               	movwf	(??___fttol^(0+256)+1)
 15133  1B02  0822               	movf	(___fttol@f1+2)^(0+256),w
 15134  1B03  00A6               	movwf	(??___fttol^(0+256)+2)
 15135  1B04  1003               	clrc
 15136  1B05  0D25               	rlf	(??___fttol^(0+256)+1),w
 15137  1B06  0D26               	rlf	(??___fttol^(0+256)+2),w
 15138  1B07  00A7               	movwf	(??___fttol+3)^(0+256)
 15139  1B08  0827               	movf	(??___fttol+3)^(0+256),w
 15140  1B09  00AD               	movwf	___fttol@exp1^(0+256)
 15141  1B0A  082D               	movf	___fttol@exp1^(0+256),w
 15142  1B0B  1D03               	btfss	3,2
 15143  1B0C  2B16               	goto	l7601
 15144  1B0D  3000               	movlw	0
 15145  1B0E  00A3               	movwf	(?___fttol+3)^(0+256)
 15146  1B0F  3000               	movlw	0
 15147  1B10  00A2               	movwf	(?___fttol+2)^(0+256)
 15148  1B11  3000               	movlw	0
 15149  1B12  00A1               	movwf	(?___fttol+1)^(0+256)
 15150  1B13  3000               	movlw	0
 15151  1B14  00A0               	movwf	?___fttol^(0+256)
 15152  1B15  0008               	return
 15153  1B16                     l7601:	
 15154  1B16  0820               	movf	___fttol@f1^(0+256),w
 15155  1B17  00A4               	movwf	??___fttol^(0+256)
 15156  1B18  0821               	movf	(___fttol@f1+1)^(0+256),w
 15157  1B19  00A5               	movwf	(??___fttol^(0+256)+1)
 15158  1B1A  0822               	movf	(___fttol@f1+2)^(0+256),w
 15159  1B1B  00A6               	movwf	(??___fttol^(0+256)+2)
 15160  1B1C  3017               	movlw	23
 15161  1B1D                     u7885:	
 15162  1B1D  36A6               	lsrf	(??___fttol^(0+256)+2),f
 15163  1B1E  0CA5               	rrf	(??___fttol^(0+256)+1),f
 15164  1B1F  0CA4               	rrf	??___fttol^(0+256),f
 15165  1B20  0B89               	decfsz	9,f
 15166  1B21  2B1D               	goto	u7885
 15167  1B22  0824               	movf	??___fttol^(0+256),w
 15168  1B23  00A7               	movwf	(??___fttol+3)^(0+256)
 15169  1B24  0827               	movf	(??___fttol+3)^(0+256),w
 15170  1B25  00A8               	movwf	___fttol@sign1^(0+256)
 15171  1B26  17A1               	bsf	(___fttol@f1^(0+256)+1),7
 15172  1B27  30FF               	movlw	255
 15173  1B28  05A0               	andwf	___fttol@f1^(0+256),f
 15174  1B29  30FF               	movlw	255
 15175  1B2A  05A1               	andwf	(___fttol@f1+1)^(0+256),f
 15176  1B2B  3000               	movlw	0
 15177  1B2C  05A2               	andwf	(___fttol@f1+2)^(0+256),f
 15178  1B2D  0820               	movf	___fttol@f1^(0+256),w
 15179  1B2E  00A9               	movwf	___fttol@lval^(0+256)
 15180  1B2F  0821               	movf	(___fttol@f1+1)^(0+256),w
 15181  1B30  00AA               	movwf	(___fttol@lval^(0+256)+1)
 15182  1B31  0822               	movf	(___fttol@f1+2)^(0+256),w
 15183  1B32  00AB               	movwf	(___fttol@lval^(0+256)+2)
 15184  1B33  01AC               	clrf	(___fttol@lval^(0+256)+3)
 15185  1B34  308E               	movlw	142
 15186  1B35  02AD               	subwf	___fttol@exp1^(0+256),f
 15187  1B36  1FAD               	btfss	___fttol@exp1^(0+256),7
 15188  1B37  2B54               	goto	l7621
 15189  1B38  082D               	movf	___fttol@exp1^(0+256),w
 15190  1B39  3A80               	xorlw	128
 15191  1B3A  3E8F               	addlw	143
 15192  1B3B  1803               	skipnc
 15193  1B3C  2B46               	goto	l7619
 15194  1B3D  3000               	movlw	0
 15195  1B3E  00A3               	movwf	(?___fttol+3)^(0+256)
 15196  1B3F  3000               	movlw	0
 15197  1B40  00A2               	movwf	(?___fttol+2)^(0+256)
 15198  1B41  3000               	movlw	0
 15199  1B42  00A1               	movwf	(?___fttol+1)^(0+256)
 15200  1B43  3000               	movlw	0
 15201  1B44  00A0               	movwf	?___fttol^(0+256)
 15202  1B45  0008               	return
 15203  1B46                     l7619:	
 15204  1B46  3001               	movlw	1
 15205  1B47                     u7915:	
 15206  1B47  36AC               	lsrf	(___fttol@lval+3)^(0+256),f
 15207  1B48  0CAB               	rrf	(___fttol@lval+2)^(0+256),f
 15208  1B49  0CAA               	rrf	(___fttol@lval+1)^(0+256),f
 15209  1B4A  0CA9               	rrf	___fttol@lval^(0+256),f
 15210  1B4B  0B89               	decfsz	9,f
 15211  1B4C  2B47               	goto	u7915
 15212  1B4D  3001               	movlw	1
 15213  1B4E  00A4               	movwf	??___fttol^(0+256)
 15214  1B4F  0824               	movf	??___fttol^(0+256),w
 15215  1B50  07AD               	addwf	___fttol@exp1^(0+256),f
 15216  1B51  1903               	btfsc	3,2
 15217  1B52  2B6D               	goto	l7629
 15218  1B53  2B46               	goto	l7619
 15219  1B54                     l7621:	
 15220  1B54  3018               	movlw	24
 15221  1B55  022D               	subwf	___fttol@exp1^(0+256),w
 15222  1B56  1C03               	skipc
 15223  1B57  2B6A               	goto	l2180
 15224  1B58  3000               	movlw	0
 15225  1B59  00A3               	movwf	(?___fttol+3)^(0+256)
 15226  1B5A  3000               	movlw	0
 15227  1B5B  00A2               	movwf	(?___fttol+2)^(0+256)
 15228  1B5C  3000               	movlw	0
 15229  1B5D  00A1               	movwf	(?___fttol+1)^(0+256)
 15230  1B5E  3000               	movlw	0
 15231  1B5F  00A0               	movwf	?___fttol^(0+256)
 15232  1B60  0008               	return
 15233  1B61                     l7627:	
 15234  1B61  3001               	movlw	1
 15235  1B62                     u7945:	
 15236  1B62  35A9               	lslf	___fttol@lval^(0+256),f
 15237  1B63  0DAA               	rlf	(___fttol@lval+1)^(0+256),f
 15238  1B64  0DAB               	rlf	(___fttol@lval+2)^(0+256),f
 15239  1B65  0DAC               	rlf	(___fttol@lval+3)^(0+256),f
 15240  1B66  0B89               	decfsz	9,f
 15241  1B67  2B62               	goto	u7945
 15242  1B68  3001               	movlw	1
 15243  1B69  02AD               	subwf	___fttol@exp1^(0+256),f
 15244  1B6A                     l2180:	
 15245  1B6A  082D               	movf	___fttol@exp1^(0+256),w
 15246  1B6B  1D03               	btfss	3,2
 15247  1B6C  2B61               	goto	l7627
 15248  1B6D                     l7629:	
 15249  1B6D  0828               	movf	___fttol@sign1^(0+256),w
 15250  1B6E  1903               	btfsc	3,2
 15251  1B6F  2B7B               	goto	l7633
 15252  1B70  09A9               	comf	___fttol@lval^(0+256),f
 15253  1B71  09AA               	comf	(___fttol@lval+1)^(0+256),f
 15254  1B72  09AB               	comf	(___fttol@lval+2)^(0+256),f
 15255  1B73  09AC               	comf	(___fttol@lval+3)^(0+256),f
 15256  1B74  0AA9               	incf	___fttol@lval^(0+256),f
 15257  1B75  1903               	skipnz
 15258  1B76  0AAA               	incf	(___fttol@lval+1)^(0+256),f
 15259  1B77  1903               	skipnz
 15260  1B78  0AAB               	incf	(___fttol@lval+2)^(0+256),f
 15261  1B79  1903               	skipnz
 15262  1B7A  0AAC               	incf	(___fttol@lval+3)^(0+256),f
 15263  1B7B                     l7633:	
 15264  1B7B  082C               	movf	(___fttol@lval+3)^(0+256),w
 15265  1B7C  00A3               	movwf	(?___fttol+3)^(0+256)
 15266  1B7D  082B               	movf	(___fttol@lval+2)^(0+256),w
 15267  1B7E  00A2               	movwf	(?___fttol+2)^(0+256)
 15268  1B7F  082A               	movf	(___fttol@lval+1)^(0+256),w
 15269  1B80  00A1               	movwf	(?___fttol+1)^(0+256)
 15270  1B81  0829               	movf	___fttol@lval^(0+256),w
 15271  1B82  00A0               	movwf	?___fttol^(0+256)
 15272  1B83  0008               	return
 15273  1B84                     __end_of___fttol:	
 15274                           
 15275                           	psect	text46
 15276  22F9                     __ptext46:	
 15277 ;; *************** function ___ftge *****************
 15278 ;; Defined at:
 15279 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftge.c"
 15280 ;; Parameters:    Size  Location     Type
 15281 ;;  ff1             3    0[BANK1 ] float 
 15282 ;;  ff2             3    3[BANK1 ] float 
 15283 ;; Auto vars:     Size  Location     Type
 15284 ;;		None
 15285 ;; Return value:  Size  Location     Type
 15286 ;;		None               void
 15287 ;; Registers used:
 15288 ;;		wreg, status,2, status,0
 15289 ;; Tracked objects:
 15290 ;;		On entry : 0/0
 15291 ;;		On exit  : 0/0
 15292 ;;		Unchanged: 0/0
 15293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15294 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15295 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15296 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15297 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15298 ;;Total ram usage:        9 bytes
 15299 ;; Hardware stack levels used:    1
 15300 ;; Hardware stack levels required when called:    3
 15301 ;; This function calls:
 15302 ;;		Nothing
 15303 ;; This function is called by:
 15304 ;;		_modSin
 15305 ;;		_modTri
 15306 ;;		_modSaw
 15307 ;;		_modSquare
 15308 ;;		_pow
 15309 ;;		_sin
 15310 ;;		_exp
 15311 ;;		_floor
 15312 ;;		_ldexp
 15313 ;;		_log
 15314 ;; This function uses a non-reentrant model
 15315 ;;
 15316                           
 15317                           
 15318                           ;psect for function ___ftge
 15319  22F9                     ___ftge:	
 15320                           
 15321                           ;incstack = 0
 15322                           ; Regs used in ___ftge: [wreg+status,2+status,0]
 15323  22F9  0021               	movlb	1	; select bank1
 15324  22FA  1FA2               	btfss	(___ftge@ff1+2)^(0+128),7
 15325  22FB  2B10               	goto	l7521
 15326  22FC  0920               	comf	___ftge@ff1^(0+128),w
 15327  22FD  00A6               	movwf	??___ftge^(0+128)
 15328  22FE  0921               	comf	(___ftge@ff1+1)^(0+128),w
 15329  22FF  00A7               	movwf	(??___ftge^(0+128)+1)
 15330  2300  0922               	comf	(___ftge@ff1+2)^(0+128),w
 15331  2301  00A8               	movwf	(??___ftge^(0+128)+2)
 15332  2302  0AA6               	incf	??___ftge^(0+128),f
 15333  2303  1903               	skipnz
 15334  2304  0AA7               	incf	(??___ftge^(0+128)+1),f
 15335  2305  1903               	skipnz
 15336  2306  0AA8               	incf	(??___ftge^(0+128)+2),f
 15337  2307  3000               	movlw	0
 15338  2308  0726               	addwf	??___ftge^(0+128),w
 15339  2309  00A0               	movwf	___ftge@ff1^(0+128)
 15340  230A  3000               	movlw	0
 15341  230B  3D27               	addwfc	(??___ftge+1)^(0+128),w
 15342  230C  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15343  230D  3080               	movlw	128
 15344  230E  3D28               	addwfc	(??___ftge+2)^(0+128),w
 15345  230F  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15346  2310                     l7521:	
 15347  2310  1FA5               	btfss	(___ftge@ff2+2)^(0+128),7
 15348  2311  2B26               	goto	l7525
 15349  2312  0923               	comf	___ftge@ff2^(0+128),w
 15350  2313  00A6               	movwf	??___ftge^(0+128)
 15351  2314  0924               	comf	(___ftge@ff2+1)^(0+128),w
 15352  2315  00A7               	movwf	(??___ftge^(0+128)+1)
 15353  2316  0925               	comf	(___ftge@ff2+2)^(0+128),w
 15354  2317  00A8               	movwf	(??___ftge^(0+128)+2)
 15355  2318  0AA6               	incf	??___ftge^(0+128),f
 15356  2319  1903               	skipnz
 15357  231A  0AA7               	incf	(??___ftge^(0+128)+1),f
 15358  231B  1903               	skipnz
 15359  231C  0AA8               	incf	(??___ftge^(0+128)+2),f
 15360  231D  3000               	movlw	0
 15361  231E  0726               	addwf	??___ftge^(0+128),w
 15362  231F  00A3               	movwf	___ftge@ff2^(0+128)
 15363  2320  3000               	movlw	0
 15364  2321  3D27               	addwfc	(??___ftge+1)^(0+128),w
 15365  2322  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15366  2323  3080               	movlw	128
 15367  2324  3D28               	addwfc	(??___ftge+2)^(0+128),w
 15368  2325  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15369  2326                     l7525:	
 15370  2326  3080               	movlw	128
 15371  2327  06A2               	xorwf	(___ftge@ff1+2)^(0+128),f
 15372  2328  3080               	movlw	128
 15373  2329  06A5               	xorwf	(___ftge@ff2+2)^(0+128),f
 15374  232A  0825               	movf	(___ftge@ff2+2)^(0+128),w
 15375  232B  0222               	subwf	(___ftge@ff1+2)^(0+128),w
 15376  232C  1D03               	skipz
 15377  232D  0008               	return
 15378  232E  0824               	movf	(___ftge@ff2+1)^(0+128),w
 15379  232F  0221               	subwf	(___ftge@ff1+1)^(0+128),w
 15380  2330  1D03               	skipz
 15381  2331  0008               	return
 15382  2332  0823               	movf	___ftge@ff2^(0+128),w
 15383  2333  0220               	subwf	___ftge@ff1^(0+128),w
 15384  2334  0008               	return
 15385  2335                     __end_of___ftge:	
 15386                           
 15387                           	psect	text47
 15388  2619                     __ptext47:	
 15389 ;; *************** function ___altoft *****************
 15390 ;; Defined at:
 15391 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\altoft.c"
 15392 ;; Parameters:    Size  Location     Type
 15393 ;;  c               4   14[BANK2 ] long 
 15394 ;; Auto vars:     Size  Location     Type
 15395 ;;  sign            1   21[BANK2 ] unsigned char 
 15396 ;;  exp             1   20[BANK2 ] unsigned char 
 15397 ;; Return value:  Size  Location     Type
 15398 ;;                  3   14[BANK2 ] float 
 15399 ;; Registers used:
 15400 ;;		wreg, status,2, status,0, pclath, cstack
 15401 ;; Tracked objects:
 15402 ;;		On entry : 0/0
 15403 ;;		On exit  : 0/0
 15404 ;;		Unchanged: 0/0
 15405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15406 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15407 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15408 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15409 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15410 ;;Total ram usage:        8 bytes
 15411 ;; Hardware stack levels used:    1
 15412 ;; Hardware stack levels required when called:    4
 15413 ;; This function calls:
 15414 ;;		___ftpack
 15415 ;; This function is called by:
 15416 ;;		_trunc
 15417 ;;		_floor
 15418 ;; This function uses a non-reentrant model
 15419 ;;
 15420                           
 15421                           
 15422                           ;psect for function ___altoft
 15423  2619                     ___altoft:	
 15424                           
 15425                           ;incstack = 0
 15426                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
 15427  2619  0022               	movlb	2	; select bank2
 15428  261A  01B5               	clrf	___altoft@sign^(0+256)
 15429  261B  308E               	movlw	142
 15430  261C  00B2               	movwf	??___altoft^(0+256)
 15431  261D  0832               	movf	??___altoft^(0+256),w
 15432  261E  00B4               	movwf	___altoft@exp^(0+256)
 15433  261F  1FB1               	btfss	(___altoft@c+3)^(0+256),7
 15434  2620  2E2E               	goto	l7441
 15435  2621  09AE               	comf	___altoft@c^(0+256),f
 15436  2622  09AF               	comf	(___altoft@c+1)^(0+256),f
 15437  2623  09B0               	comf	(___altoft@c+2)^(0+256),f
 15438  2624  09B1               	comf	(___altoft@c+3)^(0+256),f
 15439  2625  0AAE               	incf	___altoft@c^(0+256),f
 15440  2626  1903               	skipnz
 15441  2627  0AAF               	incf	(___altoft@c+1)^(0+256),f
 15442  2628  1903               	skipnz
 15443  2629  0AB0               	incf	(___altoft@c+2)^(0+256),f
 15444  262A  1903               	skipnz
 15445  262B  0AB1               	incf	(___altoft@c+3)^(0+256),f
 15446  262C  01B5               	clrf	___altoft@sign^(0+256)
 15447  262D  0AB5               	incf	___altoft@sign^(0+256),f
 15448  262E                     l7441:	
 15449  262E  30FF               	movlw	255
 15450  262F  0531               	andwf	(___altoft@c+3)^(0+256),w
 15451  2630  1903               	btfsc	3,2
 15452  2631  2E3E               	goto	l7443
 15453  2632  3001               	movlw	1
 15454  2633                     u7465:	
 15455  2633  36B1               	lsrf	(___altoft@c+3)^(0+256),f
 15456  2634  0CB0               	rrf	(___altoft@c+2)^(0+256),f
 15457  2635  0CAF               	rrf	(___altoft@c+1)^(0+256),f
 15458  2636  0CAE               	rrf	___altoft@c^(0+256),f
 15459  2637  0B89               	decfsz	9,f
 15460  2638  2E33               	goto	u7465
 15461  2639  3001               	movlw	1
 15462  263A  00B2               	movwf	??___altoft^(0+256)
 15463  263B  0832               	movf	??___altoft^(0+256),w
 15464  263C  07B4               	addwf	___altoft@exp^(0+256),f
 15465  263D  2E2E               	goto	l7441
 15466  263E                     l7443:	
 15467  263E  082E               	movf	___altoft@c^(0+256),w
 15468  263F  0021               	movlb	1	; select bank1
 15469  2640  00A0               	movwf	___ftpack@arg^(0+128)
 15470  2641  0022               	movlb	2	; select bank2
 15471  2642  082F               	movf	(___altoft@c+1)^(0+256),w
 15472  2643  0021               	movlb	1	; select bank1
 15473  2644  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 15474  2645  0022               	movlb	2	; select bank2
 15475  2646  0830               	movf	(___altoft@c+2)^(0+256),w
 15476  2647  0021               	movlb	1	; select bank1
 15477  2648  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 15478  2649  0022               	movlb	2	; select bank2
 15479  264A  0834               	movf	___altoft@exp^(0+256),w
 15480  264B  00B2               	movwf	??___altoft^(0+256)
 15481  264C  0832               	movf	??___altoft^(0+256),w
 15482  264D  0021               	movlb	1	; select bank1
 15483  264E  00A3               	movwf	___ftpack@exp^(0+128)
 15484  264F  0022               	movlb	2	; select bank2
 15485  2650  0835               	movf	___altoft@sign^(0+256),w
 15486  2651  00B3               	movwf	(??___altoft+1)^(0+256)
 15487  2652  0833               	movf	(??___altoft+1)^(0+256),w
 15488  2653  0021               	movlb	1	; select bank1
 15489  2654  00A4               	movwf	___ftpack@sign^(0+128)
 15490  2655  3198  2027         	fcall	___ftpack
 15491  2657  0021               	movlb	1	; select bank1
 15492  2658  0820               	movf	?___ftpack^(0+128),w
 15493  2659  0022               	movlb	2	; select bank2
 15494  265A  00AE               	movwf	?___altoft^(0+256)
 15495  265B  0021               	movlb	1	; select bank1
 15496  265C  0821               	movf	(?___ftpack+1)^(0+128),w
 15497  265D  0022               	movlb	2	; select bank2
 15498  265E  00AF               	movwf	(?___altoft+1)^(0+256)
 15499  265F  0021               	movlb	1	; select bank1
 15500  2660  0822               	movf	(?___ftpack+2)^(0+128),w
 15501  2661  0022               	movlb	2	; select bank2
 15502  2662  00B0               	movwf	(?___altoft+2)^(0+256)
 15503  2663  0008               	return
 15504  2664                     __end_of___altoft:	
 15505                           
 15506                           	psect	text48
 15507  188C                     __ptext48:	
 15508 ;; *************** function _eval_poly *****************
 15509 ;; Defined at:
 15510 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\evalpoly.c"
 15511 ;; Parameters:    Size  Location     Type
 15512 ;;  x               3   20[BANK2 ] float 
 15513 ;;  d               2   23[BANK2 ] PTR const 
 15514 ;;		 -> log@coeff(27), exp@coeff(30), sin@coeff_a(15), sin@coeff_b(12), 
 15515 ;;  n               2   25[BANK2 ] int 
 15516 ;; Auto vars:     Size  Location     Type
 15517 ;;  res             3   27[BANK2 ] int 
 15518 ;; Return value:  Size  Location     Type
 15519 ;;                  3   20[BANK2 ] int 
 15520 ;; Registers used:
 15521 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 15522 ;; Tracked objects:
 15523 ;;		On entry : 0/0
 15524 ;;		On exit  : 0/0
 15525 ;;		Unchanged: 0/0
 15526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15527 ;;      Params:         0       0       0       7       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15528 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15530 ;;      Totals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15531 ;;Total ram usage:       10 bytes
 15532 ;; Hardware stack levels used:    1
 15533 ;; Hardware stack levels required when called:    5
 15534 ;; This function calls:
 15535 ;;		___ftadd
 15536 ;;		___ftmul
 15537 ;;		___wmul
 15538 ;; This function is called by:
 15539 ;;		_sin
 15540 ;;		_exp
 15541 ;;		_log
 15542 ;; This function uses a non-reentrant model
 15543 ;;
 15544                           
 15545                           
 15546                           ;psect for function _eval_poly
 15547  188C                     _eval_poly:	
 15548                           
 15549                           ;incstack = 0
 15550                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 15551  188C  0022               	movlb	2	; select bank2
 15552  188D  083A               	movf	(eval_poly@n+1)^(0+256),w
 15553  188E  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 15554  188F  0839               	movf	eval_poly@n^(0+256),w
 15555  1890  00AE               	movwf	___wmul@multiplier^(0+256)
 15556  1891  3003               	movlw	3
 15557  1892  00B0               	movwf	___wmul@multiplicand^(0+256)
 15558  1893  3000               	movlw	0
 15559  1894  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 15560  1895  31A0  2095  3198   	fcall	___wmul
 15561  1898  0022               	movlb	2	; select bank2
 15562  1899  0837               	movf	eval_poly@d^(0+256),w
 15563  189A  072E               	addwf	?___wmul^(0+256),w
 15564  189B  0084               	movwf	4
 15565  189C  0838               	movf	(eval_poly@d+1)^(0+256),w
 15566  189D  3D2F               	addwfc	(?___wmul+1)^(0+256),w
 15567  189E  0085               	movwf	5
 15568  189F  3F00               	moviw [0]fsr0
 15569  18A0  00BB               	movwf	eval_poly@res^(0+256)
 15570  18A1  3F01               	moviw [1]fsr0
 15571  18A2  00BC               	movwf	(eval_poly@res+1)^(0+256)
 15572  18A3  3F02               	moviw [2]fsr0
 15573  18A4                     L18:	
 15574  18A4  00BD               	movwf	(eval_poly@res+2)^(0+256)
 15575  18A5  0839               	movf	eval_poly@n^(0+256),w
 15576  18A6  043A               	iorwf	(eval_poly@n+1)^(0+256),w
 15577  18A7  1903               	btfsc	3,2
 15578  18A8  28F7               	goto	l7803
 15579  18A9  30FF               	movlw	255
 15580  18AA  07B9               	addwf	eval_poly@n^(0+256),f
 15581  18AB  30FF               	movlw	255
 15582  18AC  3DBA               	addwfc	(eval_poly@n+1)^(0+256),f
 15583  18AD  083A               	movf	(eval_poly@n+1)^(0+256),w
 15584  18AE  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 15585  18AF  0839               	movf	eval_poly@n^(0+256),w
 15586  18B0  00AE               	movwf	___wmul@multiplier^(0+256)
 15587  18B1  3003               	movlw	3
 15588  18B2  00B0               	movwf	___wmul@multiplicand^(0+256)
 15589  18B3  3000               	movlw	0
 15590  18B4  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 15591  18B5  31A0  2095  3198   	fcall	___wmul
 15592  18B8  0022               	movlb	2	; select bank2
 15593  18B9  0837               	movf	eval_poly@d^(0+256),w
 15594  18BA  072E               	addwf	?___wmul^(0+256),w
 15595  18BB  0084               	movwf	4
 15596  18BC  0838               	movf	(eval_poly@d+1)^(0+256),w
 15597  18BD  3D2F               	addwfc	(?___wmul+1)^(0+256),w
 15598  18BE  0085               	movwf	5
 15599  18BF  3F00               	moviw [0]fsr0
 15600  18C0  0021               	movlb	1	; select bank1
 15601  18C1  00C1               	movwf	___ftadd@f1^(0+128)
 15602  18C2  3F01               	moviw [1]fsr0
 15603  18C3  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 15604  18C4  3F02               	moviw [2]fsr0
 15605  18C5  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 15606  18C6  0022               	movlb	2	; select bank2
 15607  18C7  083B               	movf	eval_poly@res^(0+256),w
 15608  18C8  0021               	movlb	1	; select bank1
 15609  18C9  00AE               	movwf	___ftmul@f1^(0+128)
 15610  18CA  0022               	movlb	2	; select bank2
 15611  18CB  083C               	movf	(eval_poly@res+1)^(0+256),w
 15612  18CC  0021               	movlb	1	; select bank1
 15613  18CD  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15614  18CE  0022               	movlb	2	; select bank2
 15615  18CF  083D               	movf	(eval_poly@res+2)^(0+256),w
 15616  18D0  0021               	movlb	1	; select bank1
 15617  18D1  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15618  18D2  0022               	movlb	2	; select bank2
 15619  18D3  0834               	movf	eval_poly@x^(0+256),w
 15620  18D4  0021               	movlb	1	; select bank1
 15621  18D5  00B1               	movwf	___ftmul@f2^(0+128)
 15622  18D6  0022               	movlb	2	; select bank2
 15623  18D7  0835               	movf	(eval_poly@x+1)^(0+256),w
 15624  18D8  0021               	movlb	1	; select bank1
 15625  18D9  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15626  18DA  0022               	movlb	2	; select bank2
 15627  18DB  0836               	movf	(eval_poly@x+2)^(0+256),w
 15628  18DC  0021               	movlb	1	; select bank1
 15629  18DD  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15630  18DE  319E  2691  3198   	fcall	___ftmul
 15631  18E1  0021               	movlb	1	; select bank1
 15632  18E2  082E               	movf	?___ftmul^(0+128),w
 15633  18E3  00C4               	movwf	___ftadd@f2^(0+128)
 15634  18E4  082F               	movf	(?___ftmul+1)^(0+128),w
 15635  18E5  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 15636  18E6  0830               	movf	(?___ftmul+2)^(0+128),w
 15637  18E7  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 15638  18E8  3192  225B  3198   	fcall	___ftadd
 15639  18EB  0021               	movlb	1	; select bank1
 15640  18EC  0841               	movf	?___ftadd^(0+128),w
 15641  18ED  0022               	movlb	2	; select bank2
 15642  18EE  00BB               	movwf	eval_poly@res^(0+256)
 15643  18EF  0021               	movlb	1	; select bank1
 15644  18F0  0842               	movf	(?___ftadd+1)^(0+128),w
 15645  18F1  0022               	movlb	2	; select bank2
 15646  18F2  00BC               	movwf	(eval_poly@res+1)^(0+256)
 15647  18F3  0021               	movlb	1	; select bank1
 15648  18F4  0843               	movf	(?___ftadd+2)^(0+128),w
 15649  18F5  0022               	movlb	2	; select bank2
 15650  18F6  28A4               	goto	L18
 15651  18F7                     l7803:	
 15652  18F7  083B               	movf	eval_poly@res^(0+256),w
 15653  18F8  00B4               	movwf	?_eval_poly^(0+256)
 15654  18F9  083C               	movf	(eval_poly@res+1)^(0+256),w
 15655  18FA  00B5               	movwf	(?_eval_poly+1)^(0+256)
 15656  18FB  083D               	movf	(eval_poly@res+2)^(0+256),w
 15657  18FC  00B6               	movwf	(?_eval_poly+2)^(0+256)
 15658  18FD  0008               	return
 15659  18FE                     __end_of_eval_poly:	
 15660                           
 15661                           	psect	text49
 15662  2095                     __ptext49:	
 15663 ;; *************** function ___wmul *****************
 15664 ;; Defined at:
 15665 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
 15666 ;; Parameters:    Size  Location     Type
 15667 ;;  multiplier      2   14[BANK2 ] unsigned int 
 15668 ;;  multiplicand    2   16[BANK2 ] unsigned int 
 15669 ;; Auto vars:     Size  Location     Type
 15670 ;;  product         2   18[BANK2 ] unsigned int 
 15671 ;; Return value:  Size  Location     Type
 15672 ;;                  2   14[BANK2 ] unsigned int 
 15673 ;; Registers used:
 15674 ;;		wreg, status,2, status,0
 15675 ;; Tracked objects:
 15676 ;;		On entry : 0/0
 15677 ;;		On exit  : 0/0
 15678 ;;		Unchanged: 0/0
 15679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15680 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15681 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15682 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15683 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15684 ;;Total ram usage:        6 bytes
 15685 ;; Hardware stack levels used:    1
 15686 ;; Hardware stack levels required when called:    3
 15687 ;; This function calls:
 15688 ;;		Nothing
 15689 ;; This function is called by:
 15690 ;;		_calcSinArray
 15691 ;;		_updateModulationArray
 15692 ;;		_modSin
 15693 ;;		_eval_poly
 15694 ;; This function uses a non-reentrant model
 15695 ;;
 15696                           
 15697                           
 15698                           ;psect for function ___wmul
 15699  2095                     ___wmul:	
 15700                           
 15701                           ;incstack = 0
 15702                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 15703  2095  0022               	movlb	2	; select bank2
 15704  2096  01B2               	clrf	___wmul@product^(0+256)
 15705  2097  01B3               	clrf	(___wmul@product+1)^(0+256)
 15706  2098                     l7419:	
 15707  2098  1C2E               	btfss	___wmul@multiplier^(0+256),0
 15708  2099  289E               	goto	l1928
 15709  209A  0830               	movf	___wmul@multiplicand^(0+256),w
 15710  209B  07B2               	addwf	___wmul@product^(0+256),f
 15711  209C  0831               	movf	(___wmul@multiplicand+1)^(0+256),w
 15712  209D  3DB3               	addwfc	(___wmul@product+1)^(0+256),f
 15713  209E                     l1928:	
 15714  209E  3001               	movlw	1
 15715  209F                     u7425:	
 15716  209F  35B0               	lslf	___wmul@multiplicand^(0+256),f
 15717  20A0  0DB1               	rlf	(___wmul@multiplicand+1)^(0+256),f
 15718  20A1  0B89               	decfsz	9,f
 15719  20A2  289F               	goto	u7425
 15720  20A3  3001               	movlw	1
 15721  20A4                     u7435:	
 15722  20A4  36AF               	lsrf	(___wmul@multiplier+1)^(0+256),f
 15723  20A5  0CAE               	rrf	___wmul@multiplier^(0+256),f
 15724  20A6  0B89               	decfsz	9,f
 15725  20A7  28A4               	goto	u7435
 15726  20A8  082E               	movf	___wmul@multiplier^(0+256),w
 15727  20A9  042F               	iorwf	(___wmul@multiplier+1)^(0+256),w
 15728  20AA  1D03               	btfss	3,2
 15729  20AB  2898               	goto	l7419
 15730  20AC  0833               	movf	(___wmul@product+1)^(0+256),w
 15731  20AD  00AF               	movwf	(?___wmul+1)^(0+256)
 15732  20AE  0832               	movf	___wmul@product^(0+256),w
 15733  20AF  00AE               	movwf	?___wmul^(0+256)
 15734  20B0  0008               	return
 15735  20B1                     __end_of___wmul:	
 15736                           
 15737                           	psect	text50
 15738  1E91                     __ptext50:	
 15739 ;; *************** function ___ftmul *****************
 15740 ;; Defined at:
 15741 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
 15742 ;; Parameters:    Size  Location     Type
 15743 ;;  f1              3   14[BANK1 ] float 
 15744 ;;  f2              3   17[BANK1 ] float 
 15745 ;; Auto vars:     Size  Location     Type
 15746 ;;  f3_as_produc    3   25[BANK1 ] unsigned um
 15747 ;;  sign            1   29[BANK1 ] unsigned char 
 15748 ;;  cntr            1   28[BANK1 ] unsigned char 
 15749 ;;  exp             1   24[BANK1 ] unsigned char 
 15750 ;; Return value:  Size  Location     Type
 15751 ;;                  3   14[BANK1 ] float 
 15752 ;; Registers used:
 15753 ;;		wreg, status,2, status,0, pclath, cstack
 15754 ;; Tracked objects:
 15755 ;;		On entry : 0/0
 15756 ;;		On exit  : 0/0
 15757 ;;		Unchanged: 0/0
 15758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15759 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15760 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15761 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15762 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15763 ;;Total ram usage:       16 bytes
 15764 ;; Hardware stack levels used:    1
 15765 ;; Hardware stack levels required when called:    4
 15766 ;; This function calls:
 15767 ;;		___ftpack
 15768 ;; This function is called by:
 15769 ;;		_set_subdivision
 15770 ;;		_map
 15771 ;;		_scaleA100kPot
 15772 ;;		_scaleA10kPot
 15773 ;;		_scaleiA10kPot
 15774 ;;		_calcSinArray
 15775 ;;		_modSin
 15776 ;;		_modTri
 15777 ;;		_modSaw
 15778 ;;		_pow
 15779 ;;		_sin
 15780 ;;		_eval_poly
 15781 ;;		_exp
 15782 ;;		_log
 15783 ;;		_scalePotValue
 15784 ;;		_scaleiA100kPot
 15785 ;; This function uses a non-reentrant model
 15786 ;;
 15787                           
 15788                           
 15789                           ;psect for function ___ftmul
 15790  1E91                     ___ftmul:	
 15791                           
 15792                           ;incstack = 0
 15793                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 15794  1E91  0021               	movlb	1	; select bank1
 15795  1E92  082E               	movf	___ftmul@f1^(0+128),w
 15796  1E93  00B4               	movwf	??___ftmul^(0+128)
 15797  1E94  082F               	movf	(___ftmul@f1+1)^(0+128),w
 15798  1E95  00B5               	movwf	(??___ftmul^(0+128)+1)
 15799  1E96  0830               	movf	(___ftmul@f1+2)^(0+128),w
 15800  1E97  00B6               	movwf	(??___ftmul^(0+128)+2)
 15801  1E98  1003               	clrc
 15802  1E99  0D35               	rlf	(??___ftmul^(0+128)+1),w
 15803  1E9A  0D36               	rlf	(??___ftmul^(0+128)+2),w
 15804  1E9B  00B7               	movwf	(??___ftmul+3)^(0+128)
 15805  1E9C  0837               	movf	(??___ftmul+3)^(0+128),w
 15806  1E9D  00B8               	movwf	___ftmul@exp^(0+128)
 15807  1E9E  0838               	movf	___ftmul@exp^(0+128),w
 15808  1E9F  1D03               	btfss	3,2
 15809  1EA0  2EA8               	goto	l7543
 15810  1EA1  3000               	movlw	0
 15811  1EA2  00AE               	movwf	?___ftmul^(0+128)
 15812  1EA3  3000               	movlw	0
 15813  1EA4  00AF               	movwf	(?___ftmul+1)^(0+128)
 15814  1EA5  3000               	movlw	0
 15815  1EA6  00B0               	movwf	(?___ftmul+2)^(0+128)
 15816  1EA7  0008               	return
 15817  1EA8                     l7543:	
 15818  1EA8  0831               	movf	___ftmul@f2^(0+128),w
 15819  1EA9  00B4               	movwf	??___ftmul^(0+128)
 15820  1EAA  0832               	movf	(___ftmul@f2+1)^(0+128),w
 15821  1EAB  00B5               	movwf	(??___ftmul^(0+128)+1)
 15822  1EAC  0833               	movf	(___ftmul@f2+2)^(0+128),w
 15823  1EAD  00B6               	movwf	(??___ftmul^(0+128)+2)
 15824  1EAE  1003               	clrc
 15825  1EAF  0D35               	rlf	(??___ftmul^(0+128)+1),w
 15826  1EB0  0D36               	rlf	(??___ftmul^(0+128)+2),w
 15827  1EB1  00B7               	movwf	(??___ftmul+3)^(0+128)
 15828  1EB2  0837               	movf	(??___ftmul+3)^(0+128),w
 15829  1EB3  00BD               	movwf	___ftmul@sign^(0+128)
 15830  1EB4  083D               	movf	___ftmul@sign^(0+128),w
 15831  1EB5  1D03               	btfss	3,2
 15832  1EB6  2EBE               	goto	l7549
 15833  1EB7  3000               	movlw	0
 15834  1EB8  00AE               	movwf	?___ftmul^(0+128)
 15835  1EB9  3000               	movlw	0
 15836  1EBA  00AF               	movwf	(?___ftmul+1)^(0+128)
 15837  1EBB  3000               	movlw	0
 15838  1EBC  00B0               	movwf	(?___ftmul+2)^(0+128)
 15839  1EBD  0008               	return
 15840  1EBE                     l7549:	
 15841  1EBE  083D               	movf	___ftmul@sign^(0+128),w
 15842  1EBF  3E7B               	addlw	123
 15843  1EC0  00B4               	movwf	??___ftmul^(0+128)
 15844  1EC1  0834               	movf	??___ftmul^(0+128),w
 15845  1EC2  07B8               	addwf	___ftmul@exp^(0+128),f
 15846  1EC3  082E               	movf	___ftmul@f1^(0+128),w
 15847  1EC4  00B4               	movwf	??___ftmul^(0+128)
 15848  1EC5  082F               	movf	(___ftmul@f1+1)^(0+128),w
 15849  1EC6  00B5               	movwf	(??___ftmul^(0+128)+1)
 15850  1EC7  0830               	movf	(___ftmul@f1+2)^(0+128),w
 15851  1EC8  00B6               	movwf	(??___ftmul^(0+128)+2)
 15852  1EC9  3010               	movlw	16
 15853  1ECA                     u7765:	
 15854  1ECA  36B6               	lsrf	(??___ftmul^(0+128)+2),f
 15855  1ECB  0CB5               	rrf	(??___ftmul^(0+128)+1),f
 15856  1ECC  0CB4               	rrf	??___ftmul^(0+128),f
 15857  1ECD  0B89               	decfsz	9,f
 15858  1ECE  2ECA               	goto	u7765
 15859  1ECF  0834               	movf	??___ftmul^(0+128),w
 15860  1ED0  00B7               	movwf	(??___ftmul+3)^(0+128)
 15861  1ED1  0837               	movf	(??___ftmul+3)^(0+128),w
 15862  1ED2  00BD               	movwf	___ftmul@sign^(0+128)
 15863  1ED3  0831               	movf	___ftmul@f2^(0+128),w
 15864  1ED4  00B4               	movwf	??___ftmul^(0+128)
 15865  1ED5  0832               	movf	(___ftmul@f2+1)^(0+128),w
 15866  1ED6  00B5               	movwf	(??___ftmul^(0+128)+1)
 15867  1ED7  0833               	movf	(___ftmul@f2+2)^(0+128),w
 15868  1ED8  00B6               	movwf	(??___ftmul^(0+128)+2)
 15869  1ED9  3010               	movlw	16
 15870  1EDA                     u7775:	
 15871  1EDA  36B6               	lsrf	(??___ftmul^(0+128)+2),f
 15872  1EDB  0CB5               	rrf	(??___ftmul^(0+128)+1),f
 15873  1EDC  0CB4               	rrf	??___ftmul^(0+128),f
 15874  1EDD  0B89               	decfsz	9,f
 15875  1EDE  2EDA               	goto	u7775
 15876  1EDF  0834               	movf	??___ftmul^(0+128),w
 15877  1EE0  00B7               	movwf	(??___ftmul+3)^(0+128)
 15878  1EE1  0837               	movf	(??___ftmul+3)^(0+128),w
 15879  1EE2  06BD               	xorwf	___ftmul@sign^(0+128),f
 15880  1EE3  3080               	movlw	128
 15881  1EE4  00B4               	movwf	??___ftmul^(0+128)
 15882  1EE5  0834               	movf	??___ftmul^(0+128),w
 15883  1EE6  05BD               	andwf	___ftmul@sign^(0+128),f
 15884  1EE7  17AF               	bsf	(___ftmul@f1^(0+128)+1),7
 15885  1EE8  17B2               	bsf	(___ftmul@f2^(0+128)+1),7
 15886  1EE9  30FF               	movlw	255
 15887  1EEA  05B1               	andwf	___ftmul@f2^(0+128),f
 15888  1EEB  30FF               	movlw	255
 15889  1EEC  05B2               	andwf	(___ftmul@f2+1)^(0+128),f
 15890  1EED  3000               	movlw	0
 15891  1EEE  05B3               	andwf	(___ftmul@f2+2)^(0+128),f
 15892  1EEF  3000               	movlw	0
 15893  1EF0  00B9               	movwf	___ftmul@f3_as_product^(0+128)
 15894  1EF1  3000               	movlw	0
 15895  1EF2  00BA               	movwf	(___ftmul@f3_as_product+1)^(0+128)
 15896  1EF3  3000               	movlw	0
 15897  1EF4  00BB               	movwf	(___ftmul@f3_as_product+2)^(0+128)
 15898  1EF5  3007               	movlw	7
 15899  1EF6  00B4               	movwf	??___ftmul^(0+128)
 15900  1EF7  0834               	movf	??___ftmul^(0+128),w
 15901  1EF8  00BC               	movwf	___ftmul@cntr^(0+128)
 15902  1EF9                     l7561:	
 15903  1EF9  1C2E               	btfss	___ftmul@f1^(0+128),0
 15904  1EFA  2F01               	goto	l7565
 15905  1EFB  0831               	movf	___ftmul@f2^(0+128),w
 15906  1EFC  07B9               	addwf	___ftmul@f3_as_product^(0+128),f
 15907  1EFD  0832               	movf	(___ftmul@f2+1)^(0+128),w
 15908  1EFE  3DBA               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
 15909  1EFF  0833               	movf	(___ftmul@f2+2)^(0+128),w
 15910  1F00  3DBB               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
 15911  1F01                     l7565:	
 15912  1F01  3001               	movlw	1
 15913  1F02                     u7795:	
 15914  1F02  36B0               	lsrf	(___ftmul@f1+2)^(0+128),f
 15915  1F03  0CAF               	rrf	(___ftmul@f1+1)^(0+128),f
 15916  1F04  0CAE               	rrf	___ftmul@f1^(0+128),f
 15917  1F05  0B89               	decfsz	9,f
 15918  1F06  2F02               	goto	u7795
 15919  1F07  3001               	movlw	1
 15920  1F08                     u7805:	
 15921  1F08  35B1               	lslf	___ftmul@f2^(0+128),f
 15922  1F09  0DB2               	rlf	(___ftmul@f2+1)^(0+128),f
 15923  1F0A  0DB3               	rlf	(___ftmul@f2+2)^(0+128),f
 15924  1F0B  0B89               	decfsz	9,f
 15925  1F0C  2F08               	goto	u7805
 15926  1F0D  3001               	movlw	1
 15927  1F0E  02BC               	subwf	___ftmul@cntr^(0+128),f
 15928  1F0F  1D03               	btfss	3,2
 15929  1F10  2EF9               	goto	l7561
 15930  1F11  3009               	movlw	9
 15931  1F12  00B4               	movwf	??___ftmul^(0+128)
 15932  1F13  0834               	movf	??___ftmul^(0+128),w
 15933  1F14  00BC               	movwf	___ftmul@cntr^(0+128)
 15934  1F15                     l7573:	
 15935  1F15  1C2E               	btfss	___ftmul@f1^(0+128),0
 15936  1F16  2F1D               	goto	l7577
 15937  1F17  0831               	movf	___ftmul@f2^(0+128),w
 15938  1F18  07B9               	addwf	___ftmul@f3_as_product^(0+128),f
 15939  1F19  0832               	movf	(___ftmul@f2+1)^(0+128),w
 15940  1F1A  3DBA               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
 15941  1F1B  0833               	movf	(___ftmul@f2+2)^(0+128),w
 15942  1F1C  3DBB               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
 15943  1F1D                     l7577:	
 15944  1F1D  3001               	movlw	1
 15945  1F1E                     u7835:	
 15946  1F1E  36B0               	lsrf	(___ftmul@f1+2)^(0+128),f
 15947  1F1F  0CAF               	rrf	(___ftmul@f1+1)^(0+128),f
 15948  1F20  0CAE               	rrf	___ftmul@f1^(0+128),f
 15949  1F21  0B89               	decfsz	9,f
 15950  1F22  2F1E               	goto	u7835
 15951  1F23  3001               	movlw	1
 15952  1F24                     u7845:	
 15953  1F24  36BB               	lsrf	(___ftmul@f3_as_product+2)^(0+128),f
 15954  1F25  0CBA               	rrf	(___ftmul@f3_as_product+1)^(0+128),f
 15955  1F26  0CB9               	rrf	___ftmul@f3_as_product^(0+128),f
 15956  1F27  0B89               	decfsz	9,f
 15957  1F28  2F24               	goto	u7845
 15958  1F29  3001               	movlw	1
 15959  1F2A  02BC               	subwf	___ftmul@cntr^(0+128),f
 15960  1F2B  1D03               	btfss	3,2
 15961  1F2C  2F15               	goto	l7573
 15962  1F2D  0839               	movf	___ftmul@f3_as_product^(0+128),w
 15963  1F2E  00A0               	movwf	___ftpack@arg^(0+128)
 15964  1F2F  083A               	movf	(___ftmul@f3_as_product+1)^(0+128),w
 15965  1F30  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 15966  1F31  083B               	movf	(___ftmul@f3_as_product+2)^(0+128),w
 15967  1F32  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 15968  1F33  0838               	movf	___ftmul@exp^(0+128),w
 15969  1F34  00B4               	movwf	??___ftmul^(0+128)
 15970  1F35  0834               	movf	??___ftmul^(0+128),w
 15971  1F36  00A3               	movwf	___ftpack@exp^(0+128)
 15972  1F37  083D               	movf	___ftmul@sign^(0+128),w
 15973  1F38  00B5               	movwf	(??___ftmul+1)^(0+128)
 15974  1F39  0835               	movf	(??___ftmul+1)^(0+128),w
 15975  1F3A  00A4               	movwf	___ftpack@sign^(0+128)
 15976  1F3B  3198  2027         	fcall	___ftpack
 15977  1F3D  0021               	movlb	1	; select bank1
 15978  1F3E  0820               	movf	?___ftpack^(0+128),w
 15979  1F3F  00AE               	movwf	?___ftmul^(0+128)
 15980  1F40  0821               	movf	(?___ftpack+1)^(0+128),w
 15981  1F41  00AF               	movwf	(?___ftmul+1)^(0+128)
 15982  1F42  0822               	movf	(?___ftpack+2)^(0+128),w
 15983  1F43  00B0               	movwf	(?___ftmul+2)^(0+128)
 15984  1F44  0008               	return
 15985  1F45                     __end_of___ftmul:	
 15986                           
 15987                           	psect	text51
 15988  215D                     __ptext51:	
 15989 ;; *************** function ___ftsub *****************
 15990 ;; Defined at:
 15991 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftsub.c"
 15992 ;; Parameters:    Size  Location     Type
 15993 ;;  f2              3   31[BANK2 ] float 
 15994 ;;  f1              3   34[BANK2 ] float 
 15995 ;; Auto vars:     Size  Location     Type
 15996 ;;		None
 15997 ;; Return value:  Size  Location     Type
 15998 ;;                  3   31[BANK2 ] float 
 15999 ;; Registers used:
 16000 ;;		wreg, status,2, status,0, pclath, cstack
 16001 ;; Tracked objects:
 16002 ;;		On entry : 0/0
 16003 ;;		On exit  : 0/0
 16004 ;;		Unchanged: 0/0
 16005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16006 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16007 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16009 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16010 ;;Total ram usage:        6 bytes
 16011 ;; Hardware stack levels used:    1
 16012 ;; Hardware stack levels required when called:    5
 16013 ;; This function calls:
 16014 ;;		___ftadd
 16015 ;; This function is called by:
 16016 ;;		_sin
 16017 ;;		_exp
 16018 ;; This function uses a non-reentrant model
 16019 ;;
 16020                           
 16021                           
 16022                           ;psect for function ___ftsub
 16023  215D                     ___ftsub:	
 16024                           
 16025                           ;incstack = 0
 16026                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
 16027  215D  0022               	movlb	2	; select bank2
 16028  215E  0841               	movf	(___ftsub@f2+2)^(0+256),w
 16029  215F  0440               	iorwf	(___ftsub@f2+1)^(0+256),w
 16030  2160  043F               	iorwf	___ftsub@f2^(0+256),w
 16031  2161  1903               	skipnz
 16032  2162  2965               	goto	l7765
 16033  2163  3080               	movlw	128
 16034  2164  06C1               	xorwf	(___ftsub@f2+2)^(0+256),f
 16035  2165                     l7765:	
 16036  2165  0842               	movf	___ftsub@f1^(0+256),w
 16037  2166  0021               	movlb	1	; select bank1
 16038  2167  00C1               	movwf	___ftadd@f1^(0+128)
 16039  2168  0022               	movlb	2	; select bank2
 16040  2169  0843               	movf	(___ftsub@f1+1)^(0+256),w
 16041  216A  0021               	movlb	1	; select bank1
 16042  216B  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 16043  216C  0022               	movlb	2	; select bank2
 16044  216D  0844               	movf	(___ftsub@f1+2)^(0+256),w
 16045  216E  0021               	movlb	1	; select bank1
 16046  216F  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 16047  2170  0022               	movlb	2	; select bank2
 16048  2171  083F               	movf	___ftsub@f2^(0+256),w
 16049  2172  0021               	movlb	1	; select bank1
 16050  2173  00C4               	movwf	___ftadd@f2^(0+128)
 16051  2174  0022               	movlb	2	; select bank2
 16052  2175  0840               	movf	(___ftsub@f2+1)^(0+256),w
 16053  2176  0021               	movlb	1	; select bank1
 16054  2177  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 16055  2178  0022               	movlb	2	; select bank2
 16056  2179  0841               	movf	(___ftsub@f2+2)^(0+256),w
 16057  217A  0021               	movlb	1	; select bank1
 16058  217B  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 16059  217C  3192  225B         	fcall	___ftadd
 16060  217E  0021               	movlb	1	; select bank1
 16061  217F  0841               	movf	?___ftadd^(0+128),w
 16062  2180  0022               	movlb	2	; select bank2
 16063  2181  00BF               	movwf	?___ftsub^(0+256)
 16064  2182  0021               	movlb	1	; select bank1
 16065  2183  0842               	movf	(?___ftadd+1)^(0+128),w
 16066  2184  0022               	movlb	2	; select bank2
 16067  2185  00C0               	movwf	(?___ftsub+1)^(0+256)
 16068  2186  0021               	movlb	1	; select bank1
 16069  2187  0843               	movf	(?___ftadd+2)^(0+128),w
 16070  2188  0022               	movlb	2	; select bank2
 16071  2189  00C1               	movwf	(?___ftsub+2)^(0+256)
 16072  218A  0008               	return
 16073  218B                     __end_of___ftsub:	
 16074                           
 16075                           	psect	text52
 16076  125B                     __ptext52:	
 16077 ;; *************** function ___ftadd *****************
 16078 ;; Defined at:
 16079 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
 16080 ;; Parameters:    Size  Location     Type
 16081 ;;  f1              3   33[BANK1 ] float 
 16082 ;;  f2              3   36[BANK1 ] float 
 16083 ;; Auto vars:     Size  Location     Type
 16084 ;;  exp1            1   45[BANK1 ] unsigned char 
 16085 ;;  exp2            1   44[BANK1 ] unsigned char 
 16086 ;;  sign            1   43[BANK1 ] unsigned char 
 16087 ;; Return value:  Size  Location     Type
 16088 ;;                  3   33[BANK1 ] float 
 16089 ;; Registers used:
 16090 ;;		wreg, status,2, status,0, pclath, cstack
 16091 ;; Tracked objects:
 16092 ;;		On entry : 0/0
 16093 ;;		On exit  : 0/0
 16094 ;;		Unchanged: 0/0
 16095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16096 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16097 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16098 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16099 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16100 ;;Total ram usage:       13 bytes
 16101 ;; Hardware stack levels used:    1
 16102 ;; Hardware stack levels required when called:    4
 16103 ;; This function calls:
 16104 ;;		___ftpack
 16105 ;; This function is called by:
 16106 ;;		_map
 16107 ;;		_scaleiA10kPot
 16108 ;;		_modSin
 16109 ;;		_modTri
 16110 ;;		_modSaw
 16111 ;;		___ftsub
 16112 ;;		_sin
 16113 ;;		_eval_poly
 16114 ;;		_floor
 16115 ;;		_log
 16116 ;;		_scalePotValue
 16117 ;; This function uses a non-reentrant model
 16118 ;;
 16119                           
 16120                           
 16121                           ;psect for function ___ftadd
 16122  125B                     ___ftadd:	
 16123                           
 16124                           ;incstack = 0
 16125                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 16126  125B  0021               	movlb	1	; select bank1
 16127  125C  0841               	movf	___ftadd@f1^(0+128),w
 16128  125D  00C7               	movwf	??___ftadd^(0+128)
 16129  125E  0842               	movf	(___ftadd@f1+1)^(0+128),w
 16130  125F  00C8               	movwf	(??___ftadd^(0+128)+1)
 16131  1260  0843               	movf	(___ftadd@f1+2)^(0+128),w
 16132  1261  00C9               	movwf	(??___ftadd^(0+128)+2)
 16133  1262  1003               	clrc
 16134  1263  0D48               	rlf	(??___ftadd^(0+128)+1),w
 16135  1264  0D49               	rlf	(??___ftadd^(0+128)+2),w
 16136  1265  00CA               	movwf	(??___ftadd+3)^(0+128)
 16137  1266  084A               	movf	(??___ftadd+3)^(0+128),w
 16138  1267  00CD               	movwf	___ftadd@exp1^(0+128)
 16139  1268  0844               	movf	___ftadd@f2^(0+128),w
 16140  1269  00C7               	movwf	??___ftadd^(0+128)
 16141  126A  0845               	movf	(___ftadd@f2+1)^(0+128),w
 16142  126B  00C8               	movwf	(??___ftadd^(0+128)+1)
 16143  126C  0846               	movf	(___ftadd@f2+2)^(0+128),w
 16144  126D  00C9               	movwf	(??___ftadd^(0+128)+2)
 16145  126E  1003               	clrc
 16146  126F  0D48               	rlf	(??___ftadd^(0+128)+1),w
 16147  1270  0D49               	rlf	(??___ftadd^(0+128)+2),w
 16148  1271  00CA               	movwf	(??___ftadd+3)^(0+128)
 16149  1272  084A               	movf	(??___ftadd+3)^(0+128),w
 16150  1273  00CC               	movwf	___ftadd@exp2^(0+128)
 16151  1274  084D               	movf	___ftadd@exp1^(0+128),w
 16152  1275  1903               	btfsc	3,2
 16153  1276  2A83               	goto	l7453
 16154  1277  084C               	movf	___ftadd@exp2^(0+128),w
 16155  1278  024D               	subwf	___ftadd@exp1^(0+128),w
 16156  1279  1803               	skipnc
 16157  127A  2A8A               	goto	l7457
 16158  127B  034D               	decf	___ftadd@exp1^(0+128),w
 16159  127C  3AFF               	xorlw	255
 16160  127D  074C               	addwf	___ftadd@exp2^(0+128),w
 16161  127E  00C7               	movwf	??___ftadd^(0+128)
 16162  127F  3019               	movlw	25
 16163  1280  0247               	subwf	??___ftadd^(0+128),w
 16164  1281  1C03               	skipc
 16165  1282  2A8A               	goto	l7457
 16166  1283                     l7453:	
 16167  1283  0844               	movf	___ftadd@f2^(0+128),w
 16168  1284  00C1               	movwf	?___ftadd^(0+128)
 16169  1285  0845               	movf	(___ftadd@f2+1)^(0+128),w
 16170  1286  00C2               	movwf	(?___ftadd+1)^(0+128)
 16171  1287  0846               	movf	(___ftadd@f2+2)^(0+128),w
 16172  1288  00C3               	movwf	(?___ftadd+2)^(0+128)
 16173  1289  0008               	return
 16174  128A                     l7457:	
 16175  128A  084C               	movf	___ftadd@exp2^(0+128),w
 16176  128B  1903               	btfsc	3,2
 16177  128C  0008               	return
 16178  128D  084D               	movf	___ftadd@exp1^(0+128),w
 16179  128E  024C               	subwf	___ftadd@exp2^(0+128),w
 16180  128F  1803               	skipnc
 16181  1290  2A99               	goto	l7463
 16182  1291  034C               	decf	___ftadd@exp2^(0+128),w
 16183  1292  3AFF               	xorlw	255
 16184  1293  074D               	addwf	___ftadd@exp1^(0+128),w
 16185  1294  00C7               	movwf	??___ftadd^(0+128)
 16186  1295  3019               	movlw	25
 16187  1296  0247               	subwf	??___ftadd^(0+128),w
 16188  1297  1803               	btfsc	3,0
 16189  1298  0008               	return
 16190  1299                     l7463:	
 16191  1299  3006               	movlw	6
 16192  129A  00C7               	movwf	??___ftadd^(0+128)
 16193  129B  0847               	movf	??___ftadd^(0+128),w
 16194  129C  00CB               	movwf	___ftadd@sign^(0+128)
 16195  129D  1BC3               	btfsc	(___ftadd@f1+2)^(0+128),7
 16196  129E  17CB               	bsf	___ftadd@sign^(0+128),7
 16197  129F  1BC6               	btfsc	(___ftadd@f2+2)^(0+128),7
 16198  12A0  174B               	bsf	___ftadd@sign^(0+128),6
 16199  12A1  17C2               	bsf	(___ftadd@f1^(0+128)+1),7
 16200  12A2  30FF               	movlw	255
 16201  12A3  05C1               	andwf	___ftadd@f1^(0+128),f
 16202  12A4  30FF               	movlw	255
 16203  12A5  05C2               	andwf	(___ftadd@f1+1)^(0+128),f
 16204  12A6  3000               	movlw	0
 16205  12A7  05C3               	andwf	(___ftadd@f1+2)^(0+128),f
 16206  12A8  17C5               	bsf	(___ftadd@f2^(0+128)+1),7
 16207  12A9  30FF               	movlw	255
 16208  12AA  05C4               	andwf	___ftadd@f2^(0+128),f
 16209  12AB  30FF               	movlw	255
 16210  12AC  05C5               	andwf	(___ftadd@f2+1)^(0+128),f
 16211  12AD  3000               	movlw	0
 16212  12AE  05C6               	andwf	(___ftadd@f2+2)^(0+128),f
 16213  12AF  084C               	movf	___ftadd@exp2^(0+128),w
 16214  12B0  024D               	subwf	___ftadd@exp1^(0+128),w
 16215  12B1  1803               	skipnc
 16216  12B2  2AD5               	goto	l7485
 16217  12B3                     l7475:	
 16218  12B3  3001               	movlw	1
 16219  12B4                     u7575:	
 16220  12B4  35C4               	lslf	___ftadd@f2^(0+128),f
 16221  12B5  0DC5               	rlf	(___ftadd@f2+1)^(0+128),f
 16222  12B6  0DC6               	rlf	(___ftadd@f2+2)^(0+128),f
 16223  12B7  0B89               	decfsz	9,f
 16224  12B8  2AB4               	goto	u7575
 16225  12B9  3001               	movlw	1
 16226  12BA  02CC               	subwf	___ftadd@exp2^(0+128),f
 16227  12BB  084C               	movf	___ftadd@exp2^(0+128),w
 16228  12BC  064D               	xorwf	___ftadd@exp1^(0+128),w
 16229  12BD  1903               	skipnz
 16230  12BE  2AD0               	goto	l7483
 16231  12BF  3001               	movlw	1
 16232  12C0  02CB               	subwf	___ftadd@sign^(0+128),f
 16233  12C1  084B               	movf	___ftadd@sign^(0+128),w
 16234  12C2  3907               	andlw	7
 16235  12C3  1903               	btfsc	3,2
 16236  12C4  2AD0               	goto	l7483
 16237  12C5  2AB3               	goto	l7475
 16238  12C6                     l7481:	
 16239  12C6  3001               	movlw	1
 16240  12C7                     u7605:	
 16241  12C7  36C3               	lsrf	(___ftadd@f1+2)^(0+128),f
 16242  12C8  0CC2               	rrf	(___ftadd@f1+1)^(0+128),f
 16243  12C9  0CC1               	rrf	___ftadd@f1^(0+128),f
 16244  12CA  0B89               	decfsz	9,f
 16245  12CB  2AC7               	goto	u7605
 16246  12CC  3001               	movlw	1
 16247  12CD  00C7               	movwf	??___ftadd^(0+128)
 16248  12CE  0847               	movf	??___ftadd^(0+128),w
 16249  12CF  07CD               	addwf	___ftadd@exp1^(0+128),f
 16250  12D0                     l7483:	
 16251  12D0  084D               	movf	___ftadd@exp1^(0+128),w
 16252  12D1  064C               	xorwf	___ftadd@exp2^(0+128),w
 16253  12D2  1903               	btfsc	3,2
 16254  12D3  2AFA               	goto	l2120
 16255  12D4  2AC6               	goto	l7481
 16256  12D5                     l7485:	
 16257  12D5  084D               	movf	___ftadd@exp1^(0+128),w
 16258  12D6  024C               	subwf	___ftadd@exp2^(0+128),w
 16259  12D7  1803               	skipnc
 16260  12D8  2AFA               	goto	l2120
 16261  12D9                     l7487:	
 16262  12D9  3001               	movlw	1
 16263  12DA                     u7635:	
 16264  12DA  35C1               	lslf	___ftadd@f1^(0+128),f
 16265  12DB  0DC2               	rlf	(___ftadd@f1+1)^(0+128),f
 16266  12DC  0DC3               	rlf	(___ftadd@f1+2)^(0+128),f
 16267  12DD  0B89               	decfsz	9,f
 16268  12DE  2ADA               	goto	u7635
 16269  12DF  3001               	movlw	1
 16270  12E0  02CD               	subwf	___ftadd@exp1^(0+128),f
 16271  12E1  084C               	movf	___ftadd@exp2^(0+128),w
 16272  12E2  064D               	xorwf	___ftadd@exp1^(0+128),w
 16273  12E3  1903               	skipnz
 16274  12E4  2AF6               	goto	l7495
 16275  12E5  3001               	movlw	1
 16276  12E6  02CB               	subwf	___ftadd@sign^(0+128),f
 16277  12E7  084B               	movf	___ftadd@sign^(0+128),w
 16278  12E8  3907               	andlw	7
 16279  12E9  1903               	btfsc	3,2
 16280  12EA  2AF6               	goto	l7495
 16281  12EB  2AD9               	goto	l7487
 16282  12EC                     l7493:	
 16283  12EC  3001               	movlw	1
 16284  12ED                     u7665:	
 16285  12ED  36C6               	lsrf	(___ftadd@f2+2)^(0+128),f
 16286  12EE  0CC5               	rrf	(___ftadd@f2+1)^(0+128),f
 16287  12EF  0CC4               	rrf	___ftadd@f2^(0+128),f
 16288  12F0  0B89               	decfsz	9,f
 16289  12F1  2AED               	goto	u7665
 16290  12F2  3001               	movlw	1
 16291  12F3  00C7               	movwf	??___ftadd^(0+128)
 16292  12F4  0847               	movf	??___ftadd^(0+128),w
 16293  12F5  07CC               	addwf	___ftadd@exp2^(0+128),f
 16294  12F6                     l7495:	
 16295  12F6  084D               	movf	___ftadd@exp1^(0+128),w
 16296  12F7  064C               	xorwf	___ftadd@exp2^(0+128),w
 16297  12F8  1D03               	skipz
 16298  12F9  2AEC               	goto	l7493
 16299  12FA                     l2120:	
 16300  12FA  1FCB               	btfss	___ftadd@sign^(0+128),7
 16301  12FB  2B0C               	goto	l7499
 16302  12FC  30FF               	movlw	255
 16303  12FD  06C1               	xorwf	___ftadd@f1^(0+128),f
 16304  12FE  30FF               	movlw	255
 16305  12FF  06C2               	xorwf	(___ftadd@f1+1)^(0+128),f
 16306  1300  30FF               	movlw	255
 16307  1301  06C3               	xorwf	(___ftadd@f1+2)^(0+128),f
 16308  1302  3001               	movlw	1
 16309  1303  07C1               	addwf	___ftadd@f1^(0+128),f
 16310  1304  3000               	movlw	0
 16311  1305  1803               	skipnc
 16312  1306  3001               	movlw	1
 16313  1307  07C2               	addwf	(___ftadd@f1+1)^(0+128),f
 16314  1308  3000               	movlw	0
 16315  1309  1803               	skipnc
 16316  130A  3001               	movlw	1
 16317  130B  07C3               	addwf	(___ftadd@f1+2)^(0+128),f
 16318  130C                     l7499:	
 16319  130C  1F4B               	btfss	___ftadd@sign^(0+128),6
 16320  130D  2B1E               	goto	l7503
 16321  130E  30FF               	movlw	255
 16322  130F  06C4               	xorwf	___ftadd@f2^(0+128),f
 16323  1310  30FF               	movlw	255
 16324  1311  06C5               	xorwf	(___ftadd@f2+1)^(0+128),f
 16325  1312  30FF               	movlw	255
 16326  1313  06C6               	xorwf	(___ftadd@f2+2)^(0+128),f
 16327  1314  3001               	movlw	1
 16328  1315  07C4               	addwf	___ftadd@f2^(0+128),f
 16329  1316  3000               	movlw	0
 16330  1317  1803               	skipnc
 16331  1318  3001               	movlw	1
 16332  1319  07C5               	addwf	(___ftadd@f2+1)^(0+128),f
 16333  131A  3000               	movlw	0
 16334  131B  1803               	skipnc
 16335  131C  3001               	movlw	1
 16336  131D  07C6               	addwf	(___ftadd@f2+2)^(0+128),f
 16337  131E                     l7503:	
 16338  131E  01CB               	clrf	___ftadd@sign^(0+128)
 16339  131F  0841               	movf	___ftadd@f1^(0+128),w
 16340  1320  07C4               	addwf	___ftadd@f2^(0+128),f
 16341  1321  0842               	movf	(___ftadd@f1+1)^(0+128),w
 16342  1322  3DC5               	addwfc	(___ftadd@f2+1)^(0+128),f
 16343  1323  0843               	movf	(___ftadd@f1+2)^(0+128),w
 16344  1324  3DC6               	addwfc	(___ftadd@f2+2)^(0+128),f
 16345  1325  1FC6               	btfss	(___ftadd@f2+2)^(0+128),7
 16346  1326  2B39               	goto	l7513
 16347  1327  30FF               	movlw	255
 16348  1328  06C4               	xorwf	___ftadd@f2^(0+128),f
 16349  1329  30FF               	movlw	255
 16350  132A  06C5               	xorwf	(___ftadd@f2+1)^(0+128),f
 16351  132B  30FF               	movlw	255
 16352  132C  06C6               	xorwf	(___ftadd@f2+2)^(0+128),f
 16353  132D  3001               	movlw	1
 16354  132E  07C4               	addwf	___ftadd@f2^(0+128),f
 16355  132F  3000               	movlw	0
 16356  1330  1803               	skipnc
 16357  1331  3001               	movlw	1
 16358  1332  07C5               	addwf	(___ftadd@f2+1)^(0+128),f
 16359  1333  3000               	movlw	0
 16360  1334  1803               	skipnc
 16361  1335  3001               	movlw	1
 16362  1336  07C6               	addwf	(___ftadd@f2+2)^(0+128),f
 16363  1337  01CB               	clrf	___ftadd@sign^(0+128)
 16364  1338  0ACB               	incf	___ftadd@sign^(0+128),f
 16365  1339                     l7513:	
 16366  1339  0844               	movf	___ftadd@f2^(0+128),w
 16367  133A  00A0               	movwf	___ftpack@arg^(0+128)
 16368  133B  0845               	movf	(___ftadd@f2+1)^(0+128),w
 16369  133C  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 16370  133D  0846               	movf	(___ftadd@f2+2)^(0+128),w
 16371  133E  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 16372  133F  084D               	movf	___ftadd@exp1^(0+128),w
 16373  1340  00C7               	movwf	??___ftadd^(0+128)
 16374  1341  0847               	movf	??___ftadd^(0+128),w
 16375  1342  00A3               	movwf	___ftpack@exp^(0+128)
 16376  1343  084B               	movf	___ftadd@sign^(0+128),w
 16377  1344  00C8               	movwf	(??___ftadd+1)^(0+128)
 16378  1345  0848               	movf	(??___ftadd+1)^(0+128),w
 16379  1346  00A4               	movwf	___ftpack@sign^(0+128)
 16380  1347  3198  2027         	fcall	___ftpack
 16381  1349  0021               	movlb	1	; select bank1
 16382  134A  0820               	movf	?___ftpack^(0+128),w
 16383  134B  00C1               	movwf	?___ftadd^(0+128)
 16384  134C  0821               	movf	(?___ftpack+1)^(0+128),w
 16385  134D  00C2               	movwf	(?___ftadd+1)^(0+128)
 16386  134E  0822               	movf	(?___ftpack+2)^(0+128),w
 16387  134F  00C3               	movwf	(?___ftadd+2)^(0+128)
 16388  1350  0008               	return
 16389  1351                     __end_of___ftadd:	
 16390                           
 16391                           	psect	text53
 16392  2FBA                     __ptext53:	
 16393 ;; *************** function ___ftneg *****************
 16394 ;; Defined at:
 16395 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
 16396 ;; Parameters:    Size  Location     Type
 16397 ;;  f1              3   30[BANK1 ] float 
 16398 ;; Auto vars:     Size  Location     Type
 16399 ;;		None
 16400 ;; Return value:  Size  Location     Type
 16401 ;;                  3   30[BANK1 ] float 
 16402 ;; Registers used:
 16403 ;;		wreg
 16404 ;; Tracked objects:
 16405 ;;		On entry : 0/0
 16406 ;;		On exit  : 0/0
 16407 ;;		Unchanged: 0/0
 16408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16409 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16410 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16412 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16413 ;;Total ram usage:        3 bytes
 16414 ;; Hardware stack levels used:    1
 16415 ;; Hardware stack levels required when called:    3
 16416 ;; This function calls:
 16417 ;;		Nothing
 16418 ;; This function is called by:
 16419 ;;		_map
 16420 ;;		_scaleiA10kPot
 16421 ;;		_modSin
 16422 ;;		_modTri
 16423 ;;		_modSaw
 16424 ;;		_pow
 16425 ;;		_sin
 16426 ;;		_exp
 16427 ;;		_ldexp
 16428 ;;		_scalePotValue
 16429 ;; This function uses a non-reentrant model
 16430 ;;
 16431                           
 16432                           
 16433                           ;psect for function ___ftneg
 16434  2FBA                     ___ftneg:	
 16435                           
 16436                           ;incstack = 0
 16437                           ; Regs used in ___ftneg: [wreg]
 16438  2FBA  0021               	movlb	1	; select bank1
 16439  2FBB  0840               	movf	(___ftneg@f1+2)^(0+128),w
 16440  2FBC  043F               	iorwf	(___ftneg@f1+1)^(0+128),w
 16441  2FBD  043E               	iorwf	___ftneg@f1^(0+128),w
 16442  2FBE  1903               	skipnz
 16443  2FBF  0008               	return
 16444  2FC0  3080               	movlw	128
 16445  2FC1  06C0               	xorwf	(___ftneg@f1+2)^(0+128),f
 16446  2FC2  0008               	return
 16447  2FC3                     __end_of___ftneg:	
 16448                           
 16449                           	psect	text54
 16450  1D3D                     __ptext54:	
 16451 ;; *************** function ___ftdiv *****************
 16452 ;; Defined at:
 16453 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
 16454 ;; Parameters:    Size  Location     Type
 16455 ;;  f2              3   46[BANK1 ] float 
 16456 ;;  f1              3   49[BANK1 ] float 
 16457 ;; Auto vars:     Size  Location     Type
 16458 ;;  f3              3   57[BANK1 ] float 
 16459 ;;  sign            1   61[BANK1 ] unsigned char 
 16460 ;;  exp             1   60[BANK1 ] unsigned char 
 16461 ;;  cntr            1   56[BANK1 ] unsigned char 
 16462 ;; Return value:  Size  Location     Type
 16463 ;;                  3   46[BANK1 ] float 
 16464 ;; Registers used:
 16465 ;;		wreg, status,2, status,0, pclath, cstack
 16466 ;; Tracked objects:
 16467 ;;		On entry : 0/0
 16468 ;;		On exit  : 0/0
 16469 ;;		Unchanged: 0/0
 16470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16471 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16472 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16473 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16474 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16475 ;;Total ram usage:       16 bytes
 16476 ;; Hardware stack levels used:    1
 16477 ;; Hardware stack levels required when called:    4
 16478 ;; This function calls:
 16479 ;;		___ftpack
 16480 ;; This function is called by:
 16481 ;;		_map
 16482 ;;		_scaleA100kPot
 16483 ;;		_scaleA10kPot
 16484 ;;		_scaleiA10kPot
 16485 ;;		_calcSinArray
 16486 ;;		_modSin
 16487 ;;		_modTri
 16488 ;;		_modSaw
 16489 ;;		_sin
 16490 ;;		_exp
 16491 ;;		_scalePotValue
 16492 ;;		_scaleiA100kPot
 16493 ;; This function uses a non-reentrant model
 16494 ;;
 16495                           
 16496                           
 16497                           ;psect for function ___ftdiv
 16498  1D3D                     ___ftdiv:	
 16499                           
 16500                           ;incstack = 0
 16501                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 16502  1D3D  0021               	movlb	1	; select bank1
 16503  1D3E  0851               	movf	___ftdiv@f1^(0+128),w
 16504  1D3F  00D4               	movwf	??___ftdiv^(0+128)
 16505  1D40  0852               	movf	(___ftdiv@f1+1)^(0+128),w
 16506  1D41  00D5               	movwf	(??___ftdiv^(0+128)+1)
 16507  1D42  0853               	movf	(___ftdiv@f1+2)^(0+128),w
 16508  1D43  00D6               	movwf	(??___ftdiv^(0+128)+2)
 16509  1D44  1003               	clrc
 16510  1D45  0D55               	rlf	(??___ftdiv^(0+128)+1),w
 16511  1D46  0D56               	rlf	(??___ftdiv^(0+128)+2),w
 16512  1D47  00D7               	movwf	(??___ftdiv+3)^(0+128)
 16513  1D48  0857               	movf	(??___ftdiv+3)^(0+128),w
 16514  1D49  00DC               	movwf	___ftdiv@exp^(0+128)
 16515  1D4A  085C               	movf	___ftdiv@exp^(0+128),w
 16516  1D4B  1D03               	btfss	3,2
 16517  1D4C  2D54               	goto	l7725
 16518  1D4D  3000               	movlw	0
 16519  1D4E  00CE               	movwf	?___ftdiv^(0+128)
 16520  1D4F  3000               	movlw	0
 16521  1D50  00CF               	movwf	(?___ftdiv+1)^(0+128)
 16522  1D51  3000               	movlw	0
 16523  1D52  00D0               	movwf	(?___ftdiv+2)^(0+128)
 16524  1D53  0008               	return
 16525  1D54                     l7725:	
 16526  1D54  084E               	movf	___ftdiv@f2^(0+128),w
 16527  1D55  00D4               	movwf	??___ftdiv^(0+128)
 16528  1D56  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 16529  1D57  00D5               	movwf	(??___ftdiv^(0+128)+1)
 16530  1D58  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 16531  1D59  00D6               	movwf	(??___ftdiv^(0+128)+2)
 16532  1D5A  1003               	clrc
 16533  1D5B  0D55               	rlf	(??___ftdiv^(0+128)+1),w
 16534  1D5C  0D56               	rlf	(??___ftdiv^(0+128)+2),w
 16535  1D5D  00D7               	movwf	(??___ftdiv+3)^(0+128)
 16536  1D5E  0857               	movf	(??___ftdiv+3)^(0+128),w
 16537  1D5F  00DD               	movwf	___ftdiv@sign^(0+128)
 16538  1D60  085D               	movf	___ftdiv@sign^(0+128),w
 16539  1D61  1D03               	btfss	3,2
 16540  1D62  2D6A               	goto	l7731
 16541  1D63  3000               	movlw	0
 16542  1D64  00CE               	movwf	?___ftdiv^(0+128)
 16543  1D65  3000               	movlw	0
 16544  1D66  00CF               	movwf	(?___ftdiv+1)^(0+128)
 16545  1D67  3000               	movlw	0
 16546  1D68  00D0               	movwf	(?___ftdiv+2)^(0+128)
 16547  1D69  0008               	return
 16548  1D6A                     l7731:	
 16549  1D6A  3000               	movlw	0
 16550  1D6B  00D9               	movwf	___ftdiv@f3^(0+128)
 16551  1D6C  3000               	movlw	0
 16552  1D6D  00DA               	movwf	(___ftdiv@f3+1)^(0+128)
 16553  1D6E  3000               	movlw	0
 16554  1D6F  00DB               	movwf	(___ftdiv@f3+2)^(0+128)
 16555  1D70  3089               	movlw	137
 16556  1D71  075D               	addwf	___ftdiv@sign^(0+128),w
 16557  1D72  00D4               	movwf	??___ftdiv^(0+128)
 16558  1D73  0854               	movf	??___ftdiv^(0+128),w
 16559  1D74  02DC               	subwf	___ftdiv@exp^(0+128),f
 16560  1D75  0851               	movf	___ftdiv@f1^(0+128),w
 16561  1D76  00D4               	movwf	??___ftdiv^(0+128)
 16562  1D77  0852               	movf	(___ftdiv@f1+1)^(0+128),w
 16563  1D78  00D5               	movwf	(??___ftdiv^(0+128)+1)
 16564  1D79  0853               	movf	(___ftdiv@f1+2)^(0+128),w
 16565  1D7A  00D6               	movwf	(??___ftdiv^(0+128)+2)
 16566  1D7B  3010               	movlw	16
 16567  1D7C                     u8065:	
 16568  1D7C  36D6               	lsrf	(??___ftdiv^(0+128)+2),f
 16569  1D7D  0CD5               	rrf	(??___ftdiv^(0+128)+1),f
 16570  1D7E  0CD4               	rrf	??___ftdiv^(0+128),f
 16571  1D7F  0B89               	decfsz	9,f
 16572  1D80  2D7C               	goto	u8065
 16573  1D81  0854               	movf	??___ftdiv^(0+128),w
 16574  1D82  00D7               	movwf	(??___ftdiv+3)^(0+128)
 16575  1D83  0857               	movf	(??___ftdiv+3)^(0+128),w
 16576  1D84  00DD               	movwf	___ftdiv@sign^(0+128)
 16577  1D85  084E               	movf	___ftdiv@f2^(0+128),w
 16578  1D86  00D4               	movwf	??___ftdiv^(0+128)
 16579  1D87  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 16580  1D88  00D5               	movwf	(??___ftdiv^(0+128)+1)
 16581  1D89  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 16582  1D8A  00D6               	movwf	(??___ftdiv^(0+128)+2)
 16583  1D8B  3010               	movlw	16
 16584  1D8C                     u8075:	
 16585  1D8C  36D6               	lsrf	(??___ftdiv^(0+128)+2),f
 16586  1D8D  0CD5               	rrf	(??___ftdiv^(0+128)+1),f
 16587  1D8E  0CD4               	rrf	??___ftdiv^(0+128),f
 16588  1D8F  0B89               	decfsz	9,f
 16589  1D90  2D8C               	goto	u8075
 16590  1D91  0854               	movf	??___ftdiv^(0+128),w
 16591  1D92  00D7               	movwf	(??___ftdiv+3)^(0+128)
 16592  1D93  0857               	movf	(??___ftdiv+3)^(0+128),w
 16593  1D94  06DD               	xorwf	___ftdiv@sign^(0+128),f
 16594  1D95  3080               	movlw	128
 16595  1D96  00D4               	movwf	??___ftdiv^(0+128)
 16596  1D97  0854               	movf	??___ftdiv^(0+128),w
 16597  1D98  05DD               	andwf	___ftdiv@sign^(0+128),f
 16598  1D99  17D2               	bsf	(___ftdiv@f1^(0+128)+1),7
 16599  1D9A  30FF               	movlw	255
 16600  1D9B  05D1               	andwf	___ftdiv@f1^(0+128),f
 16601  1D9C  30FF               	movlw	255
 16602  1D9D  05D2               	andwf	(___ftdiv@f1+1)^(0+128),f
 16603  1D9E  3000               	movlw	0
 16604  1D9F  05D3               	andwf	(___ftdiv@f1+2)^(0+128),f
 16605  1DA0  17CF               	bsf	(___ftdiv@f2^(0+128)+1),7
 16606  1DA1  30FF               	movlw	255
 16607  1DA2  05CE               	andwf	___ftdiv@f2^(0+128),f
 16608  1DA3  30FF               	movlw	255
 16609  1DA4  05CF               	andwf	(___ftdiv@f2+1)^(0+128),f
 16610  1DA5  3000               	movlw	0
 16611  1DA6  05D0               	andwf	(___ftdiv@f2+2)^(0+128),f
 16612  1DA7  3018               	movlw	24
 16613  1DA8  00D4               	movwf	??___ftdiv^(0+128)
 16614  1DA9  0854               	movf	??___ftdiv^(0+128),w
 16615  1DAA  00D8               	movwf	___ftdiv@cntr^(0+128)
 16616  1DAB                     l7745:	
 16617  1DAB  3001               	movlw	1
 16618  1DAC                     u8085:	
 16619  1DAC  35D9               	lslf	___ftdiv@f3^(0+128),f
 16620  1DAD  0DDA               	rlf	(___ftdiv@f3+1)^(0+128),f
 16621  1DAE  0DDB               	rlf	(___ftdiv@f3+2)^(0+128),f
 16622  1DAF  0B89               	decfsz	9,f
 16623  1DB0  2DAC               	goto	u8085
 16624  1DB1  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 16625  1DB2  0253               	subwf	(___ftdiv@f1+2)^(0+128),w
 16626  1DB3  1D03               	skipz
 16627  1DB4  2DBB               	goto	u8095
 16628  1DB5  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 16629  1DB6  0252               	subwf	(___ftdiv@f1+1)^(0+128),w
 16630  1DB7  1D03               	skipz
 16631  1DB8  2DBB               	goto	u8095
 16632  1DB9  084E               	movf	___ftdiv@f2^(0+128),w
 16633  1DBA  0251               	subwf	___ftdiv@f1^(0+128),w
 16634  1DBB                     u8095:	
 16635  1DBB  1C03               	skipc
 16636  1DBC  2DC4               	goto	l7753
 16637  1DBD  084E               	movf	___ftdiv@f2^(0+128),w
 16638  1DBE  02D1               	subwf	___ftdiv@f1^(0+128),f
 16639  1DBF  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 16640  1DC0  3BD2               	subwfb	(___ftdiv@f1+1)^(0+128),f
 16641  1DC1  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 16642  1DC2  3BD3               	subwfb	(___ftdiv@f1+2)^(0+128),f
 16643  1DC3  1459               	bsf	___ftdiv@f3^(0+128),0
 16644  1DC4                     l7753:	
 16645  1DC4  3001               	movlw	1
 16646  1DC5                     u8105:	
 16647  1DC5  35D1               	lslf	___ftdiv@f1^(0+128),f
 16648  1DC6  0DD2               	rlf	(___ftdiv@f1+1)^(0+128),f
 16649  1DC7  0DD3               	rlf	(___ftdiv@f1+2)^(0+128),f
 16650  1DC8  0B89               	decfsz	9,f
 16651  1DC9  2DC5               	goto	u8105
 16652  1DCA  3001               	movlw	1
 16653  1DCB  02D8               	subwf	___ftdiv@cntr^(0+128),f
 16654  1DCC  1D03               	btfss	3,2
 16655  1DCD  2DAB               	goto	l7745
 16656  1DCE  0859               	movf	___ftdiv@f3^(0+128),w
 16657  1DCF  00A0               	movwf	___ftpack@arg^(0+128)
 16658  1DD0  085A               	movf	(___ftdiv@f3+1)^(0+128),w
 16659  1DD1  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 16660  1DD2  085B               	movf	(___ftdiv@f3+2)^(0+128),w
 16661  1DD3  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 16662  1DD4  085C               	movf	___ftdiv@exp^(0+128),w
 16663  1DD5  00D4               	movwf	??___ftdiv^(0+128)
 16664  1DD6  0854               	movf	??___ftdiv^(0+128),w
 16665  1DD7  00A3               	movwf	___ftpack@exp^(0+128)
 16666  1DD8  085D               	movf	___ftdiv@sign^(0+128),w
 16667  1DD9  00D5               	movwf	(??___ftdiv+1)^(0+128)
 16668  1DDA  0855               	movf	(??___ftdiv+1)^(0+128),w
 16669  1DDB  00A4               	movwf	___ftpack@sign^(0+128)
 16670  1DDC  3198  2027         	fcall	___ftpack
 16671  1DDE  0021               	movlb	1	; select bank1
 16672  1DDF  0820               	movf	?___ftpack^(0+128),w
 16673  1DE0  00CE               	movwf	?___ftdiv^(0+128)
 16674  1DE1  0821               	movf	(?___ftpack+1)^(0+128),w
 16675  1DE2  00CF               	movwf	(?___ftdiv+1)^(0+128)
 16676  1DE3  0822               	movf	(?___ftpack+2)^(0+128),w
 16677  1DE4  00D0               	movwf	(?___ftdiv+2)^(0+128)
 16678  1DE5  0008               	return
 16679  1DE6                     __end_of___ftdiv:	
 16680                           
 16681                           	psect	text55
 16682  20ED                     __ptext55:	
 16683 ;; *************** function ___awtoft *****************
 16684 ;; Defined at:
 16685 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awtoft.c"
 16686 ;; Parameters:    Size  Location     Type
 16687 ;;  c               2    8[BANK1 ] int 
 16688 ;; Auto vars:     Size  Location     Type
 16689 ;;  sign            1   13[BANK1 ] unsigned char 
 16690 ;; Return value:  Size  Location     Type
 16691 ;;                  3    8[BANK1 ] float 
 16692 ;; Registers used:
 16693 ;;		wreg, status,2, status,0, pclath, cstack
 16694 ;; Tracked objects:
 16695 ;;		On entry : 0/0
 16696 ;;		On exit  : 0/0
 16697 ;;		Unchanged: 0/0
 16698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16699 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16700 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16701 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16702 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16703 ;;Total ram usage:        6 bytes
 16704 ;; Hardware stack levels used:    1
 16705 ;; Hardware stack levels required when called:    4
 16706 ;; This function calls:
 16707 ;;		___ftpack
 16708 ;; This function is called by:
 16709 ;;		_main
 16710 ;;		_set_subdivision
 16711 ;;		_calcSinArray
 16712 ;;		_updateModulationArray
 16713 ;;		_exp
 16714 ;;		_log
 16715 ;; This function uses a non-reentrant model
 16716 ;;
 16717                           
 16718                           
 16719                           ;psect for function ___awtoft
 16720  20ED                     ___awtoft:	
 16721                           
 16722                           ;incstack = 0
 16723                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 16724  20ED  0021               	movlb	1	; select bank1
 16725  20EE  01AD               	clrf	___awtoft@sign^(0+128)
 16726  20EF  1FA9               	btfss	(___awtoft@c+1)^(0+128),7
 16727  20F0  28F8               	goto	l7715
 16728  20F1  09A8               	comf	___awtoft@c^(0+128),f
 16729  20F2  09A9               	comf	(___awtoft@c+1)^(0+128),f
 16730  20F3  0AA8               	incf	___awtoft@c^(0+128),f
 16731  20F4  1903               	skipnz
 16732  20F5  0AA9               	incf	(___awtoft@c+1)^(0+128),f
 16733  20F6  01AD               	clrf	___awtoft@sign^(0+128)
 16734  20F7  0AAD               	incf	___awtoft@sign^(0+128),f
 16735  20F8                     l7715:	
 16736  20F8  0828               	movf	___awtoft@c^(0+128),w
 16737  20F9  00A0               	movwf	___ftpack@arg^(0+128)
 16738  20FA  0829               	movf	(___awtoft@c+1)^(0+128),w
 16739  20FB  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 16740  20FC  01A2               	clrf	(___ftpack@arg+2)^(0+128)
 16741  20FD  308E               	movlw	142
 16742  20FE  00AB               	movwf	??___awtoft^(0+128)
 16743  20FF  082B               	movf	??___awtoft^(0+128),w
 16744  2100  00A3               	movwf	___ftpack@exp^(0+128)
 16745  2101  082D               	movf	___awtoft@sign^(0+128),w
 16746  2102  00AC               	movwf	(??___awtoft+1)^(0+128)
 16747  2103  082C               	movf	(??___awtoft+1)^(0+128),w
 16748  2104  00A4               	movwf	___ftpack@sign^(0+128)
 16749  2105  3198  2027         	fcall	___ftpack
 16750  2107  0021               	movlb	1	; select bank1
 16751  2108  0820               	movf	?___ftpack^(0+128),w
 16752  2109  00A8               	movwf	?___awtoft^(0+128)
 16753  210A  0821               	movf	(?___ftpack+1)^(0+128),w
 16754  210B  00A9               	movwf	(?___awtoft+1)^(0+128)
 16755  210C  0822               	movf	(?___ftpack+2)^(0+128),w
 16756  210D  00AA               	movwf	(?___awtoft+2)^(0+128)
 16757  210E  0008               	return
 16758  210F                     __end_of___awtoft:	
 16759                           
 16760                           	psect	text56
 16761  1827                     __ptext56:	
 16762 ;; *************** function ___ftpack *****************
 16763 ;; Defined at:
 16764 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
 16765 ;; Parameters:    Size  Location     Type
 16766 ;;  arg             3    0[BANK1 ] unsigned um
 16767 ;;  exp             1    3[BANK1 ] unsigned char 
 16768 ;;  sign            1    4[BANK1 ] unsigned char 
 16769 ;; Auto vars:     Size  Location     Type
 16770 ;;		None
 16771 ;; Return value:  Size  Location     Type
 16772 ;;                  3    0[BANK1 ] float 
 16773 ;; Registers used:
 16774 ;;		wreg, status,2, status,0
 16775 ;; Tracked objects:
 16776 ;;		On entry : 0/0
 16777 ;;		On exit  : 0/0
 16778 ;;		Unchanged: 0/0
 16779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16780 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16782 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16783 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16784 ;;Total ram usage:        8 bytes
 16785 ;; Hardware stack levels used:    1
 16786 ;; Hardware stack levels required when called:    3
 16787 ;; This function calls:
 16788 ;;		Nothing
 16789 ;; This function is called by:
 16790 ;;		___altoft
 16791 ;;		___awtoft
 16792 ;;		___ftadd
 16793 ;;		___ftdiv
 16794 ;;		___ftmul
 16795 ;;		___lltoft
 16796 ;; This function uses a non-reentrant model
 16797 ;;
 16798                           
 16799                           
 16800                           ;psect for function ___ftpack
 16801  1827                     ___ftpack:	
 16802                           
 16803                           ;incstack = 0
 16804                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 16805  1827  0021               	movlb	1	; select bank1
 16806  1828  0823               	movf	___ftpack@exp^(0+128),w
 16807  1829  1903               	btfsc	3,2
 16808  182A  2830               	goto	l7353
 16809  182B  0822               	movf	(___ftpack@arg+2)^(0+128),w
 16810  182C  0421               	iorwf	(___ftpack@arg+1)^(0+128),w
 16811  182D  0420               	iorwf	___ftpack@arg^(0+128),w
 16812  182E  1D03               	skipz
 16813  182F  2841               	goto	l7359
 16814  1830                     l7353:	
 16815  1830  3000               	movlw	0
 16816  1831  00A0               	movwf	?___ftpack^(0+128)
 16817  1832  3000               	movlw	0
 16818  1833  00A1               	movwf	(?___ftpack+1)^(0+128)
 16819  1834  3000               	movlw	0
 16820  1835  00A2               	movwf	(?___ftpack+2)^(0+128)
 16821  1836  0008               	return
 16822  1837                     l7357:	
 16823  1837  3001               	movlw	1
 16824  1838  00A5               	movwf	??___ftpack^(0+128)
 16825  1839  0825               	movf	??___ftpack^(0+128),w
 16826  183A  07A3               	addwf	___ftpack@exp^(0+128),f
 16827  183B  3001               	movlw	1
 16828  183C                     u7305:	
 16829  183C  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 16830  183D  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 16831  183E  0CA0               	rrf	___ftpack@arg^(0+128),f
 16832  183F  0B89               	decfsz	9,f
 16833  1840  283C               	goto	u7305
 16834  1841                     l7359:	
 16835  1841  30FE               	movlw	254
 16836  1842  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 16837  1843  1903               	btfsc	3,2
 16838  1844  285A               	goto	l2089
 16839  1845  2837               	goto	l7357
 16840  1846                     l7361:	
 16841  1846  3001               	movlw	1
 16842  1847  00A5               	movwf	??___ftpack^(0+128)
 16843  1848  0825               	movf	??___ftpack^(0+128),w
 16844  1849  07A3               	addwf	___ftpack@exp^(0+128),f
 16845  184A  3001               	movlw	1
 16846  184B  07A0               	addwf	___ftpack@arg^(0+128),f
 16847  184C  3000               	movlw	0
 16848  184D  1803               	skipnc
 16849  184E  3001               	movlw	1
 16850  184F  07A1               	addwf	(___ftpack@arg+1)^(0+128),f
 16851  1850  3000               	movlw	0
 16852  1851  1803               	skipnc
 16853  1852  3001               	movlw	1
 16854  1853  07A2               	addwf	(___ftpack@arg+2)^(0+128),f
 16855  1854  3001               	movlw	1
 16856  1855                     u7325:	
 16857  1855  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 16858  1856  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 16859  1857  0CA0               	rrf	___ftpack@arg^(0+128),f
 16860  1858  0B89               	decfsz	9,f
 16861  1859  2855               	goto	u7325
 16862  185A                     l2089:	
 16863  185A  30FF               	movlw	255
 16864  185B  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 16865  185C  1903               	btfsc	3,2
 16866  185D  2867               	goto	l7369
 16867  185E  2846               	goto	l7361
 16868  185F                     l7367:	
 16869  185F  3001               	movlw	1
 16870  1860  02A3               	subwf	___ftpack@exp^(0+128),f
 16871  1861  3001               	movlw	1
 16872  1862                     u7345:	
 16873  1862  35A0               	lslf	___ftpack@arg^(0+128),f
 16874  1863  0DA1               	rlf	(___ftpack@arg+1)^(0+128),f
 16875  1864  0DA2               	rlf	(___ftpack@arg+2)^(0+128),f
 16876  1865  0B89               	decfsz	9,f
 16877  1866  2862               	goto	u7345
 16878  1867                     l7369:	
 16879  1867  1BA1               	btfsc	(___ftpack@arg+1)^(0+128),7
 16880  1868  286D               	goto	l2096
 16881  1869  3002               	movlw	2
 16882  186A  0223               	subwf	___ftpack@exp^(0+128),w
 16883  186B  1803               	skipnc
 16884  186C  285F               	goto	l7367
 16885  186D                     l2096:	
 16886  186D  1823               	btfsc	___ftpack@exp^(0+128),0
 16887  186E  2875               	goto	l2097
 16888  186F  30FF               	movlw	255
 16889  1870  05A0               	andwf	___ftpack@arg^(0+128),f
 16890  1871  307F               	movlw	127
 16891  1872  05A1               	andwf	(___ftpack@arg+1)^(0+128),f
 16892  1873  30FF               	movlw	255
 16893  1874  05A2               	andwf	(___ftpack@arg+2)^(0+128),f
 16894  1875                     l2097:	
 16895  1875  1003               	clrc
 16896  1876  0CA3               	rrf	___ftpack@exp^(0+128),f
 16897  1877  0823               	movf	___ftpack@exp^(0+128),w
 16898  1878  00A5               	movwf	??___ftpack^(0+128)
 16899  1879  01A6               	clrf	(??___ftpack^(0+128)+1)
 16900  187A  01A7               	clrf	(??___ftpack^(0+128)+2)
 16901  187B  3010               	movlw	16
 16902  187C                     u7385:	
 16903  187C  35A5               	lslf	??___ftpack^(0+128),f
 16904  187D  0DA6               	rlf	(??___ftpack^(0+128)+1),f
 16905  187E  0DA7               	rlf	(??___ftpack^(0+128)+2),f
 16906  187F  0B89               	decfsz	9,f
 16907  1880  287C               	goto	u7385
 16908  1881  0825               	movf	??___ftpack^(0+128),w
 16909  1882  04A0               	iorwf	___ftpack@arg^(0+128),f
 16910  1883  0826               	movf	(??___ftpack+1)^(0+128),w
 16911  1884  04A1               	iorwf	(___ftpack@arg+1)^(0+128),f
 16912  1885  0827               	movf	(??___ftpack+2)^(0+128),w
 16913  1886  04A2               	iorwf	(___ftpack@arg+2)^(0+128),f
 16914  1887  0824               	movf	___ftpack@sign^(0+128),w
 16915  1888  1903               	btfsc	3,2
 16916  1889  0008               	return
 16917  188A  17A2               	bsf	(___ftpack@arg^(0+128)+2),7
 16918  188B  0008               	return
 16919  188C                     __end_of___ftpack:	
 16920                           
 16921                           	psect	text57
 16922  2FD9                     __ptext57:	
 16923 ;; *************** function _adc_convert *****************
 16924 ;; Defined at:
 16925 ;;		line 122 in file "user.c"
 16926 ;; Parameters:    Size  Location     Type
 16927 ;;  channel         1    wreg     unsigned char 
 16928 ;; Auto vars:     Size  Location     Type
 16929 ;;  channel         1    3[BANK1 ] unsigned char 
 16930 ;; Return value:  Size  Location     Type
 16931 ;;                  2    0[BANK1 ] unsigned int 
 16932 ;; Registers used:
 16933 ;;		wreg, status,2, status,0
 16934 ;; Tracked objects:
 16935 ;;		On entry : 0/0
 16936 ;;		On exit  : 0/0
 16937 ;;		Unchanged: 0/0
 16938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16939 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16940 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16941 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16942 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16943 ;;Total ram usage:        4 bytes
 16944 ;; Hardware stack levels used:    1
 16945 ;; Hardware stack levels required when called:    3
 16946 ;; This function calls:
 16947 ;;		Nothing
 16948 ;; This function is called by:
 16949 ;;		_main
 16950 ;; This function uses a non-reentrant model
 16951 ;;
 16952                           
 16953                           
 16954                           ;psect for function _adc_convert
 16955  2FD9                     _adc_convert:	
 16956                           
 16957                           ;incstack = 0
 16958                           ; Regs used in _adc_convert: [wreg+status,2+status,0]
 16959                           ;adc_convert@channel stored from wreg
 16960  2FD9  0021               	movlb	1	; select bank1
 16961  2FDA  00A3               	movwf	adc_convert@channel^(0+128)
 16962                           
 16963                           ;user.c: 123: ADCON0bits.CHS = channel;
 16964  2FDB  0823               	movf	adc_convert@channel^(0+128),w
 16965  2FDC  00A2               	movwf	??_adc_convert^(0+128)
 16966  2FDD  0DA2               	rlf	??_adc_convert^(0+128),f
 16967  2FDE  0DA2               	rlf	??_adc_convert^(0+128),f
 16968  2FDF  081D               	movf	29,w	;volatile
 16969  2FE0  0622               	xorwf	??_adc_convert^(0+128),w
 16970  2FE1  3983               	andlw	-125
 16971  2FE2  0622               	xorwf	??_adc_convert^(0+128),w
 16972  2FE3  009D               	movwf	29	;volatile
 16973                           
 16974                           ;user.c: 124: ADCON0bits.GO = 0b1;
 16975  2FE4  149D               	bsf	29,1	;volatile
 16976  2FE5                     l588:	
 16977                           ;user.c: 125: while (ADCON0bits.GO_nDONE);
 16978                           
 16979  2FE5  189D               	btfsc	29,1	;volatile
 16980  2FE6  2FE5               	goto	l588
 16981                           
 16982                           ;user.c: 126: return (ADRESH << 8) | ADRESL;
 16983  2FE7  081C               	movf	28,w	;volatile
 16984  2FE8  00A1               	movwf	(?_adc_convert+1)^(0+128)
 16985  2FE9  081B               	movf	27,w	;volatile
 16986  2FEA  00A0               	movwf	?_adc_convert^(0+128)
 16987  2FEB  0008               	return
 16988  2FEC                     __end_of_adc_convert:	
 16989                           
 16990                           	psect	text58
 16991  24B2                     __ptext58:	
 16992 ;; *************** function _USARTInit *****************
 16993 ;; Defined at:
 16994 ;;		line 31 in file "usart_pic16.c"
 16995 ;; Parameters:    Size  Location     Type
 16996 ;;  baud_rate       2    0[BANK1 ] unsigned int 
 16997 ;; Auto vars:     Size  Location     Type
 16998 ;;		None
 16999 ;; Return value:  Size  Location     Type
 17000 ;;                  1    wreg      void 
 17001 ;; Registers used:
 17002 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 17003 ;; Tracked objects:
 17004 ;;		On entry : 0/0
 17005 ;;		On exit  : 0/0
 17006 ;;		Unchanged: 0/0
 17007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17008 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17009 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17010 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17011 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17012 ;;Total ram usage:        3 bytes
 17013 ;; Hardware stack levels used:    1
 17014 ;; Hardware stack levels required when called:    3
 17015 ;; This function calls:
 17016 ;;		Nothing
 17017 ;; This function is called by:
 17018 ;;		_main
 17019 ;; This function uses a non-reentrant model
 17020 ;;
 17021                           
 17022                           
 17023                           ;psect for function _USARTInit
 17024  24B2                     _USARTInit:	
 17025                           
 17026                           ;usart_pic16.c: 34: UQFront=UQEnd=-1;
 17027                           
 17028                           ;incstack = 0
 17029                           ; Regs used in _USARTInit: [wreg-fsr0h+status,2+status,0]
 17030  24B2  30FF               	movlw	255
 17031  24B3  0020               	movlb	0	; select bank0
 17032  24B4  00E5               	movwf	_UQEnd	;volatile
 17033  24B5  0021               	movlb	1	; select bank1
 17034  24B6  00A2               	movwf	??_USARTInit^(0+128)
 17035  24B7  0822               	movf	??_USARTInit^(0+128),w
 17036  24B8  00FD               	movwf	_UQFront	;volatile
 17037                           
 17038                           ;usart_pic16.c: 37: switch(baud_rate)
 17039  24B9  2CC4               	goto	l8309
 17040  24BA                     l8299:	
 17041                           ;usart_pic16.c: 38: {
 17042                           ;usart_pic16.c: 39: case 9600:
 17043                           
 17044                           
 17045                           ;usart_pic16.c: 40: SPBRG=103;
 17046  24BA  3067               	movlw	103
 17047  24BB  2CC1               	goto	L21
 17048  24BC                     l8301:	
 17049                           ;usart_pic16.c: 42: case 19200:
 17050                           
 17051                           ;usart_pic16.c: 41: break;
 17052                           
 17053                           
 17054                           ;usart_pic16.c: 43: SPBRG=51;
 17055  24BC  3033               	movlw	51
 17056  24BD  2CC1               	goto	L21
 17057  24BE                     l8303:	
 17058                           ;usart_pic16.c: 45: case 31250:
 17059                           
 17060                           ;usart_pic16.c: 44: break;
 17061                           
 17062                           
 17063                           ;usart_pic16.c: 46: SPBRG = 31;
 17064  24BE  301F               	movlw	31
 17065  24BF  2CC1               	goto	L21
 17066  24C0                     l8305:	
 17067                           ;usart_pic16.c: 48: case 38400:
 17068                           
 17069                           ;usart_pic16.c: 47: break;
 17070                           
 17071                           
 17072                           ;usart_pic16.c: 49: SPBRG=25;
 17073  24C0  3019               	movlw	25
 17074  24C1                     L21:	
 17075  24C1  0023               	movlb	3	; select bank3
 17076  24C2  009B               	movwf	27	;volatile
 17077                           
 17078                           ;usart_pic16.c: 51: }
 17079                           
 17080                           ;usart_pic16.c: 50: break;
 17081  24C3  2CE7               	goto	l1697
 17082  24C4                     l8309:	
 17083                           
 17084                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 17085                           ; Switch size 1, requested type "space"
 17086                           ; Number of cases is 4, Range of values is 37 to 150
 17087                           ; switch strategies available:
 17088                           ; Name         Instructions Cycles
 17089                           ; simple_byte           13     7 (average)
 17090                           ; direct_byte          237     9 (fixed)
 17091                           ; jumptable            263     9 (fixed)
 17092                           ;	Chosen strategy is simple_byte
 17093  24C4  0021               	movlb	1	; select bank1
 17094  24C5  0821               	movf	(USARTInit@baud_rate+1)^(0+128),w
 17095  24C6  3A25               	xorlw	37	; case 37
 17096  24C7  1903               	skipnz
 17097  24C8  2CD3               	goto	l9311
 17098  24C9  3A6E               	xorlw	110	; case 75
 17099  24CA  1903               	skipnz
 17100  24CB  2CD8               	goto	l9313
 17101  24CC  3A31               	xorlw	49	; case 122
 17102  24CD  1903               	skipnz
 17103  24CE  2CDD               	goto	l9315
 17104  24CF  3AEC               	xorlw	236	; case 150
 17105  24D0  1903               	skipnz
 17106  24D1  2CE2               	goto	l9317
 17107  24D2  2CE7               	goto	l1697
 17108  24D3                     l9311:	
 17109                           
 17110                           ; Switch size 1, requested type "space"
 17111                           ; Number of cases is 1, Range of values is 128 to 128
 17112                           ; switch strategies available:
 17113                           ; Name         Instructions Cycles
 17114                           ; simple_byte            4     3 (average)
 17115                           ; direct_byte           11     9 (fixed)
 17116                           ; jumptable            263     9 (fixed)
 17117                           ;	Chosen strategy is simple_byte
 17118  24D3  0820               	movf	USARTInit@baud_rate^(0+128),w
 17119  24D4  3A80               	xorlw	128	; case 128
 17120  24D5  1903               	skipnz
 17121  24D6  2CBA               	goto	l8299
 17122  24D7  2CE7               	goto	l1697
 17123  24D8                     l9313:	
 17124                           
 17125                           ; Switch size 1, requested type "space"
 17126                           ; Number of cases is 1, Range of values is 0 to 0
 17127                           ; switch strategies available:
 17128                           ; Name         Instructions Cycles
 17129                           ; simple_byte            4     3 (average)
 17130                           ; direct_byte            8     6 (fixed)
 17131                           ; jumptable            260     6 (fixed)
 17132                           ;	Chosen strategy is simple_byte
 17133  24D8  0820               	movf	USARTInit@baud_rate^(0+128),w
 17134  24D9  3A00               	xorlw	0	; case 0
 17135  24DA  1903               	skipnz
 17136  24DB  2CBC               	goto	l8301
 17137  24DC  2CE7               	goto	l1697
 17138  24DD                     l9315:	
 17139                           
 17140                           ; Switch size 1, requested type "space"
 17141                           ; Number of cases is 1, Range of values is 18 to 18
 17142                           ; switch strategies available:
 17143                           ; Name         Instructions Cycles
 17144                           ; simple_byte            4     3 (average)
 17145                           ; direct_byte           11     9 (fixed)
 17146                           ; jumptable            263     9 (fixed)
 17147                           ;	Chosen strategy is simple_byte
 17148  24DD  0820               	movf	USARTInit@baud_rate^(0+128),w
 17149  24DE  3A12               	xorlw	18	; case 18
 17150  24DF  1903               	skipnz
 17151  24E0  2CBE               	goto	l8303
 17152  24E1  2CE7               	goto	l1697
 17153  24E2                     l9317:	
 17154                           
 17155                           ; Switch size 1, requested type "space"
 17156                           ; Number of cases is 1, Range of values is 0 to 0
 17157                           ; switch strategies available:
 17158                           ; Name         Instructions Cycles
 17159                           ; simple_byte            4     3 (average)
 17160                           ; direct_byte            8     6 (fixed)
 17161                           ; jumptable            260     6 (fixed)
 17162                           ;	Chosen strategy is simple_byte
 17163  24E2  0820               	movf	USARTInit@baud_rate^(0+128),w
 17164  24E3  3A00               	xorlw	0	; case 0
 17165  24E4  1903               	skipnz
 17166  24E5  2CC0               	goto	l8305
 17167  24E6  2CE7               	goto	l1697
 17168  24E7                     l1697:	
 17169                           
 17170                           ;usart_pic16.c: 53: TXSTAbits.TX9=0;
 17171  24E7  0023               	movlb	3	; select bank3
 17172  24E8  131E               	bcf	30,6	;volatile
 17173                           
 17174                           ;usart_pic16.c: 54: TXSTAbits.TXEN=1;
 17175  24E9  169E               	bsf	30,5	;volatile
 17176                           
 17177                           ;usart_pic16.c: 55: TXSTAbits.SYNC=0;
 17178  24EA  121E               	bcf	30,4	;volatile
 17179                           
 17180                           ;usart_pic16.c: 56: TXSTAbits.BRGH=1;
 17181  24EB  151E               	bsf	30,2	;volatile
 17182                           
 17183                           ;usart_pic16.c: 59: RCSTAbits.SPEN=1;
 17184  24EC  179D               	bsf	29,7	;volatile
 17185                           
 17186                           ;usart_pic16.c: 60: RCSTAbits.RX9=0;
 17187  24ED  131D               	bcf	29,6	;volatile
 17188                           
 17189                           ;usart_pic16.c: 61: RCSTAbits.CREN=1;
 17190  24EE  161D               	bsf	29,4	;volatile
 17191                           
 17192                           ;usart_pic16.c: 62: RCSTAbits.ADDEN=0;
 17193  24EF  119D               	bcf	29,3	;volatile
 17194                           
 17195                           ;usart_pic16.c: 65: RCIE=1;
 17196  24F0  0021               	movlb	1	; select bank1
 17197  24F1  1691               	bsf	17,5	;volatile
 17198                           
 17199                           ;usart_pic16.c: 66: PEIE=1;
 17200  24F2  170B               	bsf	11,6	;volatile
 17201                           
 17202                           ;usart_pic16.c: 68: (GIE = 1);
 17203  24F3  178B               	bsf	11,7	;volatile
 17204  24F4  0008               	return
 17205  24F5                     __end_of_USARTInit:	
 17206                           
 17207                           	psect	text59
 17208  18FE                     __ptext59:	
 17209 ;; *************** function _ReadSavedSettings *****************
 17210 ;; Defined at:
 17211 ;;		line 234 in file "user.c"
 17212 ;; Parameters:    Size  Location     Type
 17213 ;;		None
 17214 ;; Auto vars:     Size  Location     Type
 17215 ;;		None
 17216 ;; Return value:  Size  Location     Type
 17217 ;;                  1    wreg      void 
 17218 ;; Registers used:
 17219 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 17220 ;; Tracked objects:
 17221 ;;		On entry : 0/0
 17222 ;;		On exit  : 0/0
 17223 ;;		Unchanged: 0/0
 17224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17226 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17227 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17228 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17229 ;;Total ram usage:        1 bytes
 17230 ;; Hardware stack levels used:    1
 17231 ;; Hardware stack levels required when called:    4
 17232 ;; This function calls:
 17233 ;;		_FLASH_ReadWord
 17234 ;;		_set_leds_bottom
 17235 ;;		_set_leds_top
 17236 ;; This function is called by:
 17237 ;;		_main
 17238 ;; This function uses a non-reentrant model
 17239 ;;
 17240                           
 17241                           
 17242                           ;psect for function _ReadSavedSettings
 17243  18FE                     _ReadSavedSettings:	
 17244                           
 17245                           ;user.c: 236: top_push_state = FLASH_ReadWord(0x1F81);
 17246                           
 17247                           ;incstack = 0
 17248                           ; Regs used in _ReadSavedSettings: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 17249  18FE  3081               	movlw	129
 17250  18FF  0021               	movlb	1	; select bank1
 17251  1900  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 17252  1901  301F               	movlw	31
 17253  1902  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
 17254  1903  31A0  20CD  3198   	fcall	_FLASH_ReadWord
 17255  1906  0021               	movlb	1	; select bank1
 17256  1907  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
 17257  1908  0020               	movlb	0	; select bank0
 17258  1909  00D2               	movwf	_top_push_state+1
 17259  190A  0021               	movlb	1	; select bank1
 17260  190B  0820               	movf	?_FLASH_ReadWord^(0+128),w
 17261  190C  0020               	movlb	0	; select bank0
 17262  190D  00D1               	movwf	_top_push_state
 17263                           
 17264                           ;user.c: 237: bottom_push_state = FLASH_ReadWord(0x1F82);
 17265  190E  3082               	movlw	130
 17266  190F  0021               	movlb	1	; select bank1
 17267  1910  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 17268  1911  301F               	movlw	31
 17269  1912  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
 17270  1913  31A0  20CD  3198   	fcall	_FLASH_ReadWord
 17271  1916  0021               	movlb	1	; select bank1
 17272  1917  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
 17273  1918  0020               	movlb	0	; select bank0
 17274  1919  00CE               	movwf	_bottom_push_state+1
 17275  191A  0021               	movlb	1	; select bank1
 17276  191B  0820               	movf	?_FLASH_ReadWord^(0+128),w
 17277  191C  0020               	movlb	0	; select bank0
 17278  191D  00CD               	movwf	_bottom_push_state
 17279                           
 17280                           ;user.c: 239: if (top_push_state > 6) {
 17281  191E  0852               	movf	_top_push_state+1,w
 17282  191F  3A80               	xorlw	128
 17283  1920  0021               	movlb	1	; select bank1
 17284  1921  00A4               	movwf	??_ReadSavedSettings^(0+128)
 17285  1922  3080               	movlw	128
 17286  1923  0224               	subwf	??_ReadSavedSettings^(0+128),w
 17287  1924  1D03               	skipz
 17288  1925  2929               	goto	u8785
 17289  1926  3007               	movlw	7
 17290  1927  0020               	movlb	0	; select bank0
 17291  1928  0251               	subwf	_top_push_state,w
 17292  1929                     u8785:	
 17293  1929  1C03               	skipc
 17294  192A  2930               	goto	l635
 17295                           
 17296                           ;user.c: 241: top_push_state = 6;
 17297  192B  3006               	movlw	6
 17298  192C  0020               	movlb	0	; select bank0
 17299  192D  00D1               	movwf	_top_push_state
 17300  192E  3000               	movlw	0
 17301  192F  00D2               	movwf	_top_push_state+1
 17302  1930                     l635:	
 17303                           
 17304                           ;user.c: 242: }
 17305                           ;user.c: 243: if (bottom_push_state > 5) {
 17306  1930  0020               	movlb	0	; select bank0
 17307  1931  084E               	movf	_bottom_push_state+1,w
 17308  1932  3A80               	xorlw	128
 17309  1933  0021               	movlb	1	; select bank1
 17310  1934  00A4               	movwf	??_ReadSavedSettings^(0+128)
 17311  1935  3080               	movlw	128
 17312  1936  0224               	subwf	??_ReadSavedSettings^(0+128),w
 17313  1937  1D03               	skipz
 17314  1938  293C               	goto	u8795
 17315  1939  3006               	movlw	6
 17316  193A  0020               	movlb	0	; select bank0
 17317  193B  024D               	subwf	_bottom_push_state,w
 17318  193C                     u8795:	
 17319  193C  1C03               	skipc
 17320  193D  2943               	goto	l8363
 17321                           
 17322                           ;user.c: 245: bottom_push_state = 1;
 17323  193E  3001               	movlw	1
 17324  193F  0020               	movlb	0	; select bank0
 17325  1940  00CD               	movwf	_bottom_push_state
 17326  1941  3000               	movlw	0
 17327  1942  00CE               	movwf	_bottom_push_state+1
 17328  1943                     l8363:	
 17329                           
 17330                           ;user.c: 246: }
 17331                           ;user.c: 249: LATGbits.LATG1 = !switchBypass_state;
 17332  1943  0020               	movlb	0	; select bank0
 17333  1944  0858               	movf	_switchBypass_state,w
 17334  1945  1D03               	btfss	3,2
 17335  1946  294A               	goto	u8800
 17336  1947  0027               	movlb	7	; select bank7
 17337  1948  148D               	bsf	13,1	;volatile
 17338  1949  294C               	goto	l8365
 17339  194A                     u8800:	
 17340  194A  0027               	movlb	7	; select bank7
 17341  194B  108D               	bcf	13,1	;volatile
 17342  194C                     l8365:	
 17343                           
 17344                           ;user.c: 250: LATGbits.LATG2 = switchBypass_state;
 17345  194C  0020               	movlb	0	; select bank0
 17346  194D  0C58               	rrf	_switchBypass_state,w
 17347  194E  0027               	movlb	7	; select bank7
 17348  194F  1C03               	skipc
 17349  1950  110D               	bcf	13,2	;volatile
 17350  1951  1803               	skipnc
 17351  1952  150D               	bsf	13,2	;volatile
 17352                           
 17353                           ;user.c: 251: LATBbits.LATB2 = 0;
 17354  1953  0022               	movlb	2	; select bank2
 17355  1954  110D               	bcf	13,2	;volatile
 17356                           
 17357                           ;user.c: 252: LATBbits.LATB3 = 0;
 17358  1955  118D               	bcf	13,3	;volatile
 17359                           
 17360                           ;user.c: 254: LATBbits.LATB4 = 0;
 17361  1956  120D               	bcf	13,4	;volatile
 17362                           
 17363                           ;user.c: 255: LATBbits.LATB5 = 0;
 17364  1957  128D               	bcf	13,5	;volatile
 17365                           
 17366                           ;user.c: 257: LATBbits.LATB1 = 0;
 17367  1958  108D               	bcf	13,1	;volatile
 17368                           
 17369                           ;user.c: 258: LATBbits.LATB0 = 0;
 17370  1959  100D               	bcf	13,0	;volatile
 17371                           
 17372                           ;user.c: 261: set_leds_top(top_push_state, 1);
 17373  195A  0020               	movlb	0	; select bank0
 17374  195B  0852               	movf	_top_push_state+1,w
 17375  195C  0021               	movlb	1	; select bank1
 17376  195D  00A1               	movwf	(set_leds_top@x+1)^(0+128)
 17377  195E  0020               	movlb	0	; select bank0
 17378  195F  0851               	movf	_top_push_state,w
 17379  1960  0021               	movlb	1	; select bank1
 17380  1961  00A0               	movwf	set_leds_top@x^(0+128)
 17381  1962  3001               	movlw	1
 17382  1963  00A2               	movwf	set_leds_top@ledState^(0+128)
 17383  1964  3000               	movlw	0
 17384  1965  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
 17385  1966  31A7  2753  3198   	fcall	_set_leds_top
 17386                           
 17387                           ;user.c: 262: set_leds_bottom(bottom_push_state);
 17388  1969  0020               	movlb	0	; select bank0
 17389  196A  084E               	movf	_bottom_push_state+1,w
 17390  196B  0021               	movlb	1	; select bank1
 17391  196C  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
 17392  196D  0020               	movlb	0	; select bank0
 17393  196E  084D               	movf	_bottom_push_state,w
 17394  196F  0021               	movlb	1	; select bank1
 17395  1970  00A0               	movwf	set_leds_bottom@x^(0+128)
 17396  1971  31A2  22BE         	fcall	_set_leds_bottom
 17397  1973  0008               	return
 17398  1974                     __end_of_ReadSavedSettings:	
 17399                           
 17400                           	psect	text60
 17401  2753                     __ptext60:	
 17402 ;; *************** function _set_leds_top *****************
 17403 ;; Defined at:
 17404 ;;		line 16 in file "LEDs.c"
 17405 ;; Parameters:    Size  Location     Type
 17406 ;;  x               2    0[BANK1 ] int 
 17407 ;;  ledState        2    2[BANK1 ] int 
 17408 ;; Auto vars:     Size  Location     Type
 17409 ;;		None
 17410 ;; Return value:  Size  Location     Type
 17411 ;;                  1    wreg      void 
 17412 ;; Registers used:
 17413 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 17414 ;; Tracked objects:
 17415 ;;		On entry : 0/0
 17416 ;;		On exit  : 0/0
 17417 ;;		Unchanged: 0/0
 17418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17419 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17420 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17422 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17423 ;;Total ram usage:        4 bytes
 17424 ;; Hardware stack levels used:    1
 17425 ;; Hardware stack levels required when called:    3
 17426 ;; This function calls:
 17427 ;;		Nothing
 17428 ;; This function is called by:
 17429 ;;		_ReadSavedSettings
 17430 ;;		_ring_tactiles
 17431 ;;		_solidring_tactiles
 17432 ;;		_read_top_tactile
 17433 ;;		_setPresetDisplay
 17434 ;;		_resetRingLEDs
 17435 ;;		_setExpressionDisplay
 17436 ;;		_star_tactiles
 17437 ;; This function uses a non-reentrant model
 17438 ;;
 17439                           
 17440                           
 17441                           ;psect for function _set_leds_top
 17442  2753                     _set_leds_top:	
 17443                           
 17444                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 17445                           
 17446                           ;incstack = 0
 17447                           ; Regs used in _set_leds_top: [wreg-fsr0h+status,2+status,0]
 17448  2753  0027               	movlb	7	; select bank7
 17449  2754  100C               	bcf	12,0	;volatile
 17450                           
 17451                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 17452  2755  108C               	bcf	12,1	;volatile
 17453                           
 17454                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 17455  2756  110C               	bcf	12,2	;volatile
 17456                           
 17457                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 17458  2757  118C               	bcf	12,3	;volatile
 17459                           
 17460                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 17461  2758  120C               	bcf	12,4	;volatile
 17462                           
 17463                           ;LEDs.c: 22: switch (x) {
 17464  2759  2F89               	goto	l7395
 17465  275A                     l7383:	
 17466                           ;LEDs.c: 23: case 1:
 17467                           
 17468                           
 17469                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 17470  275A  0021               	movlb	1	; select bank1
 17471  275B  0C22               	rrf	set_leds_top@ledState^(0+128),w
 17472  275C  0027               	movlb	7	; select bank7
 17473  275D  1C03               	skipc
 17474  275E  100C               	bcf	12,0	;volatile
 17475  275F  1803               	skipnc
 17476  2760  140C               	bsf	12,0	;volatile
 17477                           
 17478                           ;LEDs.c: 25: break;
 17479  2761  0008               	return
 17480  2762                     l7385:	
 17481                           ;LEDs.c: 26: case 2:
 17482                           
 17483                           
 17484                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 17485  2762  0021               	movlb	1	; select bank1
 17486  2763  0C22               	rrf	set_leds_top@ledState^(0+128),w
 17487  2764  0027               	movlb	7	; select bank7
 17488  2765  1C03               	skipc
 17489  2766  108C               	bcf	12,1	;volatile
 17490  2767  1803               	skipnc
 17491  2768  148C               	bsf	12,1	;volatile
 17492                           
 17493                           ;LEDs.c: 28: break;
 17494  2769  0008               	return
 17495  276A                     l7387:	
 17496                           ;LEDs.c: 29: case 3:
 17497                           
 17498                           
 17499                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 17500  276A  0021               	movlb	1	; select bank1
 17501  276B  0C22               	rrf	set_leds_top@ledState^(0+128),w
 17502  276C  0027               	movlb	7	; select bank7
 17503  276D  1C03               	skipc
 17504  276E  110C               	bcf	12,2	;volatile
 17505  276F  1803               	skipnc
 17506  2770  150C               	bsf	12,2	;volatile
 17507                           
 17508                           ;LEDs.c: 31: break;
 17509  2771  0008               	return
 17510  2772                     l7389:	
 17511                           ;LEDs.c: 32: case 4:
 17512                           
 17513                           
 17514                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 17515  2772  0021               	movlb	1	; select bank1
 17516  2773  0C22               	rrf	set_leds_top@ledState^(0+128),w
 17517  2774  0027               	movlb	7	; select bank7
 17518  2775  1C03               	skipc
 17519  2776  118C               	bcf	12,3	;volatile
 17520  2777  1803               	skipnc
 17521  2778  158C               	bsf	12,3	;volatile
 17522                           
 17523                           ;LEDs.c: 34: break;
 17524  2779  0008               	return
 17525  277A                     l7391:	
 17526                           ;LEDs.c: 35: case 5:
 17527                           
 17528                           
 17529                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 17530  277A  0021               	movlb	1	; select bank1
 17531  277B  0C22               	rrf	set_leds_top@ledState^(0+128),w
 17532  277C  0027               	movlb	7	; select bank7
 17533  277D  1C03               	skipc
 17534  277E  120C               	bcf	12,4	;volatile
 17535  277F  1803               	skipnc
 17536  2780  160C               	bsf	12,4	;volatile
 17537                           
 17538                           ;LEDs.c: 39: break;
 17539                           
 17540                           ;LEDs.c: 38: case 6:
 17541                           
 17542                           ;LEDs.c: 37: break;
 17543  2781  0008               	return
 17544  2782                     l794:	
 17545                           ;LEDs.c: 40: case 100:
 17546                           
 17547                           
 17548                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 17549  2782  0027               	movlb	7	; select bank7
 17550  2783  140C               	bsf	12,0	;volatile
 17551                           
 17552                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 17553  2784  148C               	bsf	12,1	;volatile
 17554                           
 17555                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 17556  2785  150C               	bsf	12,2	;volatile
 17557                           
 17558                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 17559  2786  158C               	bsf	12,3	;volatile
 17560                           
 17561                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 17562  2787  160C               	bsf	12,4	;volatile
 17563                           
 17564                           ;LEDs.c: 47: }
 17565                           
 17566                           ;LEDs.c: 46: break;
 17567  2788  0008               	return
 17568  2789                     l7395:	
 17569                           
 17570                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17571                           ; Switch size 1, requested type "space"
 17572                           ; Number of cases is 1, Range of values is 0 to 0
 17573                           ; switch strategies available:
 17574                           ; Name         Instructions Cycles
 17575                           ; simple_byte            4     3 (average)
 17576                           ; direct_byte            8     6 (fixed)
 17577                           ; jumptable            260     6 (fixed)
 17578                           ;	Chosen strategy is simple_byte
 17579  2789  0021               	movlb	1	; select bank1
 17580  278A  0821               	movf	(set_leds_top@x+1)^(0+128),w
 17581  278B  3A00               	xorlw	0	; case 0
 17582  278C  1903               	skipnz
 17583  278D  2F8F               	goto	l9319
 17584  278E  2FA6               	goto	l795
 17585  278F                     l9319:	
 17586                           
 17587                           ; Switch size 1, requested type "space"
 17588                           ; Number of cases is 7, Range of values is 1 to 100
 17589                           ; switch strategies available:
 17590                           ; Name         Instructions Cycles
 17591                           ; simple_byte           22    12 (average)
 17592                           ; direct_byte          209     9 (fixed)
 17593                           ; jumptable            263     9 (fixed)
 17594                           ;	Chosen strategy is simple_byte
 17595  278F  0820               	movf	set_leds_top@x^(0+128),w
 17596  2790  3A01               	xorlw	1	; case 1
 17597  2791  1903               	skipnz
 17598  2792  2F5A               	goto	l7383
 17599  2793  3A03               	xorlw	3	; case 2
 17600  2794  1903               	skipnz
 17601  2795  2F62               	goto	l7385
 17602  2796  3A01               	xorlw	1	; case 3
 17603  2797  1903               	skipnz
 17604  2798  2F6A               	goto	l7387
 17605  2799  3A07               	xorlw	7	; case 4
 17606  279A  1903               	skipnz
 17607  279B  2F72               	goto	l7389
 17608  279C  3A01               	xorlw	1	; case 5
 17609  279D  1903               	skipnz
 17610  279E  2F7A               	goto	l7391
 17611  279F  3A03               	xorlw	3	; case 6
 17612  27A0  1903               	skipnz
 17613  27A1  2FA6               	goto	l795
 17614  27A2  3A62               	xorlw	98	; case 100
 17615  27A3  1903               	skipnz
 17616  27A4  2F82               	goto	l794
 17617  27A5  2FA6               	goto	l795
 17618  27A6                     l795:	
 17619  27A6  0008               	return
 17620  27A7                     __end_of_set_leds_top:	
 17621                           
 17622                           	psect	text61
 17623  22BE                     __ptext61:	
 17624 ;; *************** function _set_leds_bottom *****************
 17625 ;; Defined at:
 17626 ;;		line 51 in file "LEDs.c"
 17627 ;; Parameters:    Size  Location     Type
 17628 ;;  x               2    0[BANK1 ] int 
 17629 ;; Auto vars:     Size  Location     Type
 17630 ;;		None
 17631 ;; Return value:  Size  Location     Type
 17632 ;;                  1    wreg      void 
 17633 ;; Registers used:
 17634 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 17635 ;; Tracked objects:
 17636 ;;		On entry : 0/0
 17637 ;;		On exit  : 0/0
 17638 ;;		Unchanged: 0/0
 17639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17640 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17641 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17643 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17644 ;;Total ram usage:        2 bytes
 17645 ;; Hardware stack levels used:    1
 17646 ;; Hardware stack levels required when called:    3
 17647 ;; This function calls:
 17648 ;;		Nothing
 17649 ;; This function is called by:
 17650 ;;		_ReadSavedSettings
 17651 ;;		_ring_tactiles
 17652 ;;		_solidring_tactiles
 17653 ;;		_read_bottom_tactile
 17654 ;;		_setPresetDisplay
 17655 ;;		_resetRingLEDs
 17656 ;;		_setExpressionDisplay
 17657 ;;		_star_tactiles
 17658 ;; This function uses a non-reentrant model
 17659 ;;
 17660                           
 17661                           
 17662                           ;psect for function _set_leds_bottom
 17663  22BE                     _set_leds_bottom:	
 17664                           
 17665                           ;LEDs.c: 52: LATDbits.LATD0 = 0;
 17666                           
 17667                           ;incstack = 0
 17668                           ; Regs used in _set_leds_bottom: [wreg-fsr0h+status,2+status,0]
 17669  22BE  0022               	movlb	2	; select bank2
 17670  22BF  100F               	bcf	15,0	;volatile
 17671                           
 17672                           ;LEDs.c: 53: LATDbits.LATD1 = 0;
 17673  22C0  108F               	bcf	15,1	;volatile
 17674                           
 17675                           ;LEDs.c: 54: LATDbits.LATD2 = 0;
 17676  22C1  110F               	bcf	15,2	;volatile
 17677                           
 17678                           ;LEDs.c: 55: LATDbits.LATD3 = 0;
 17679  22C2  118F               	bcf	15,3	;volatile
 17680                           
 17681                           ;LEDs.c: 56: LATDbits.LATD4 = 0;
 17682  22C3  120F               	bcf	15,4	;volatile
 17683                           
 17684                           ;LEDs.c: 57: switch (x) {
 17685  22C4  2ADB               	goto	l7411
 17686  22C5                     l799:	
 17687                           ;LEDs.c: 58: case 1:
 17688                           
 17689                           
 17690                           ;LEDs.c: 59: LATDbits.LATD0 = 1;
 17691  22C5  0022               	movlb	2	; select bank2
 17692  22C6  140F               	bsf	15,0	;volatile
 17693                           
 17694                           ;LEDs.c: 60: break;
 17695  22C7  0008               	return
 17696  22C8                     l801:	
 17697                           ;LEDs.c: 61: case 2:
 17698                           
 17699                           
 17700                           ;LEDs.c: 62: LATDbits.LATD1 = 1;
 17701  22C8  0022               	movlb	2	; select bank2
 17702  22C9  148F               	bsf	15,1	;volatile
 17703                           
 17704                           ;LEDs.c: 63: break;
 17705  22CA  0008               	return
 17706  22CB                     l802:	
 17707                           ;LEDs.c: 64: case 3:
 17708                           
 17709                           
 17710                           ;LEDs.c: 65: LATDbits.LATD2 = 1;
 17711  22CB  0022               	movlb	2	; select bank2
 17712  22CC  150F               	bsf	15,2	;volatile
 17713                           
 17714                           ;LEDs.c: 66: break;
 17715  22CD  0008               	return
 17716  22CE                     l803:	
 17717                           ;LEDs.c: 67: case 4:
 17718                           
 17719                           
 17720                           ;LEDs.c: 68: LATDbits.LATD3 = 1;
 17721  22CE  0022               	movlb	2	; select bank2
 17722  22CF  158F               	bsf	15,3	;volatile
 17723                           
 17724                           ;LEDs.c: 69: break;
 17725  22D0  0008               	return
 17726  22D1                     l804:	
 17727                           ;LEDs.c: 70: case 5:
 17728                           
 17729                           
 17730                           ;LEDs.c: 71: LATDbits.LATD4 = 1;
 17731  22D1  0022               	movlb	2	; select bank2
 17732  22D2  160F               	bsf	15,4	;volatile
 17733                           
 17734                           ;LEDs.c: 74: break;
 17735                           
 17736                           ;LEDs.c: 73: case 6:
 17737                           
 17738                           ;LEDs.c: 72: break;
 17739  22D3  0008               	return
 17740  22D4                     l806:	
 17741                           ;LEDs.c: 75: case 100:
 17742                           
 17743                           
 17744                           ;LEDs.c: 76: LATDbits.LATD0 = 1;
 17745  22D4  0022               	movlb	2	; select bank2
 17746  22D5  140F               	bsf	15,0	;volatile
 17747                           
 17748                           ;LEDs.c: 77: LATDbits.LATD1 = 1;
 17749  22D6  148F               	bsf	15,1	;volatile
 17750                           
 17751                           ;LEDs.c: 78: LATDbits.LATD2 = 1;
 17752  22D7  150F               	bsf	15,2	;volatile
 17753                           
 17754                           ;LEDs.c: 79: LATDbits.LATD3 = 1;
 17755  22D8  158F               	bsf	15,3	;volatile
 17756                           
 17757                           ;LEDs.c: 80: LATDbits.LATD4 = 1;
 17758  22D9  160F               	bsf	15,4	;volatile
 17759                           
 17760                           ;LEDs.c: 82: }
 17761                           
 17762                           ;LEDs.c: 81: break;
 17763  22DA  0008               	return
 17764  22DB                     l7411:	
 17765                           
 17766                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17767                           ; Switch size 1, requested type "space"
 17768                           ; Number of cases is 1, Range of values is 0 to 0
 17769                           ; switch strategies available:
 17770                           ; Name         Instructions Cycles
 17771                           ; simple_byte            4     3 (average)
 17772                           ; direct_byte            8     6 (fixed)
 17773                           ; jumptable            260     6 (fixed)
 17774                           ;	Chosen strategy is simple_byte
 17775  22DB  0021               	movlb	1	; select bank1
 17776  22DC  0821               	movf	(set_leds_bottom@x+1)^(0+128),w
 17777  22DD  3A00               	xorlw	0	; case 0
 17778  22DE  1903               	skipnz
 17779  22DF  2AE1               	goto	l9321
 17780  22E0  2AF8               	goto	l807
 17781  22E1                     l9321:	
 17782                           
 17783                           ; Switch size 1, requested type "space"
 17784                           ; Number of cases is 7, Range of values is 1 to 100
 17785                           ; switch strategies available:
 17786                           ; Name         Instructions Cycles
 17787                           ; simple_byte           22    12 (average)
 17788                           ; direct_byte          209     9 (fixed)
 17789                           ; jumptable            263     9 (fixed)
 17790                           ;	Chosen strategy is simple_byte
 17791  22E1  0820               	movf	set_leds_bottom@x^(0+128),w
 17792  22E2  3A01               	xorlw	1	; case 1
 17793  22E3  1903               	skipnz
 17794  22E4  2AC5               	goto	l799
 17795  22E5  3A03               	xorlw	3	; case 2
 17796  22E6  1903               	skipnz
 17797  22E7  2AC8               	goto	l801
 17798  22E8  3A01               	xorlw	1	; case 3
 17799  22E9  1903               	skipnz
 17800  22EA  2ACB               	goto	l802
 17801  22EB  3A07               	xorlw	7	; case 4
 17802  22EC  1903               	skipnz
 17803  22ED  2ACE               	goto	l803
 17804  22EE  3A01               	xorlw	1	; case 5
 17805  22EF  1903               	skipnz
 17806  22F0  2AD1               	goto	l804
 17807  22F1  3A03               	xorlw	3	; case 6
 17808  22F2  1903               	skipnz
 17809  22F3  2AF8               	goto	l807
 17810  22F4  3A62               	xorlw	98	; case 100
 17811  22F5  1903               	skipnz
 17812  22F6  2AD4               	goto	l806
 17813  22F7  2AF8               	goto	l807
 17814  22F8                     l807:	
 17815  22F8  0008               	return
 17816  22F9                     __end_of_set_leds_bottom:	
 17817                           
 17818                           	psect	text62
 17819  20CD                     __ptext62:	
 17820 ;; *************** function _FLASH_ReadWord *****************
 17821 ;; Defined at:
 17822 ;;		line 58 in file "memory.c"
 17823 ;; Parameters:    Size  Location     Type
 17824 ;;  flashAddr       2    0[BANK1 ] unsigned int 
 17825 ;; Auto vars:     Size  Location     Type
 17826 ;;  GIEBitValue     1    2[BANK1 ] unsigned char 
 17827 ;; Return value:  Size  Location     Type
 17828 ;;                  2    0[BANK1 ] unsigned int 
 17829 ;; Registers used:
 17830 ;;		wreg, status,2, status,0
 17831 ;; Tracked objects:
 17832 ;;		On entry : 0/0
 17833 ;;		On exit  : 0/0
 17834 ;;		Unchanged: 0/0
 17835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17836 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17837 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17839 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17840 ;;Total ram usage:        3 bytes
 17841 ;; Hardware stack levels used:    1
 17842 ;; Hardware stack levels required when called:    3
 17843 ;; This function calls:
 17844 ;;		Nothing
 17845 ;; This function is called by:
 17846 ;;		_ReadSavedSettings
 17847 ;;		_FLASH_WriteWord
 17848 ;; This function uses a non-reentrant model
 17849 ;;
 17850                           
 17851                           
 17852                           ;psect for function _FLASH_ReadWord
 17853  20CD                     _FLASH_ReadWord:	
 17854                           
 17855                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
 17856                           
 17857                           ;incstack = 0
 17858                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
 17859  20CD  3000               	movlw	0
 17860  20CE  1B8B               	btfsc	11,7	;volatile
 17861  20CF  3001               	movlw	1
 17862  20D0  0021               	movlb	1	; select bank1
 17863  20D1  00A2               	movwf	FLASH_ReadWord@GIEBitValue^(0+128)
 17864                           
 17865                           ;memory.c: 61: INTCONbits.GIE = 0;
 17866  20D2  138B               	bcf	11,7	;volatile
 17867                           
 17868                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
 17869  20D3  0820               	movf	FLASH_ReadWord@flashAddr^(0+128),w
 17870  20D4  0023               	movlb	3	; select bank3
 17871  20D5  0091               	movwf	17	;volatile
 17872                           
 17873                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
 17874  20D6  0021               	movlb	1	; select bank1
 17875  20D7  0821               	movf	(FLASH_ReadWord@flashAddr+1)^(0+128),w
 17876  20D8  0023               	movlb	3	; select bank3
 17877  20D9  0092               	movwf	18	;volatile
 17878                           
 17879                           ;memory.c: 65: PMCON1bits.CFGS = 0;
 17880  20DA  1315               	bcf	21,6	;volatile
 17881                           
 17882                           ;memory.c: 66: PMCON1bits.RD = 1;
 17883  20DB  1415               	bsf	21,0	;volatile
 17884                           
 17885                           ;memory.c: 67: __nop();
 17886  20DC  0000               	nop
 17887                           
 17888                           ;memory.c: 68: __nop();
 17889  20DD  0000               	nop
 17890                           
 17891                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
 17892  20DE  0021               	movlb	1	; select bank1
 17893  20DF  0C22               	rrf	FLASH_ReadWord@GIEBitValue^(0+128),w
 17894  20E0  1C03               	skipc
 17895  20E1  138B               	bcf	11,7	;volatile
 17896  20E2  1803               	skipnc
 17897  20E3  178B               	bsf	11,7	;volatile
 17898                           
 17899                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
 17900  20E4  0023               	movlb	3	; select bank3
 17901  20E5  0814               	movf	20,w	;volatile
 17902  20E6  0021               	movlb	1	; select bank1
 17903  20E7  00A1               	movwf	(?_FLASH_ReadWord+1)^(0+128)
 17904  20E8  0023               	movlb	3	; select bank3
 17905  20E9  0813               	movf	19,w	;volatile
 17906  20EA  0021               	movlb	1	; select bank1
 17907  20EB  00A0               	movwf	?_FLASH_ReadWord^(0+128)
 17908  20EC  0008               	return
 17909  20ED                     __end_of_FLASH_ReadWord:	
 17910                           
 17911                           	psect	text63
 17912  1801                     __ptext63:	
 17913 ;; *************** function _InitializeTaps *****************
 17914 ;; Defined at:
 17915 ;;		line 228 in file "user.c"
 17916 ;; Parameters:    Size  Location     Type
 17917 ;;		None
 17918 ;; Auto vars:     Size  Location     Type
 17919 ;;  itap            2    1[BANK1 ] int 
 17920 ;; Return value:  Size  Location     Type
 17921 ;;                  1    wreg      void 
 17922 ;; Registers used:
 17923 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17924 ;; Tracked objects:
 17925 ;;		On entry : 0/0
 17926 ;;		On exit  : 0/0
 17927 ;;		Unchanged: 0/0
 17928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17930 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17931 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17932 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17933 ;;Total ram usage:        3 bytes
 17934 ;; Hardware stack levels used:    1
 17935 ;; Hardware stack levels required when called:    3
 17936 ;; This function calls:
 17937 ;;		Nothing
 17938 ;; This function is called by:
 17939 ;;		_main
 17940 ;; This function uses a non-reentrant model
 17941 ;;
 17942                           
 17943                           
 17944                           ;psect for function _InitializeTaps
 17945  1801                     _InitializeTaps:	
 17946                           
 17947                           ;user.c: 229: for (int itap = 0; itap < 12; itap++) {
 17948                           
 17949                           ;incstack = 0
 17950                           ; Regs used in _InitializeTaps: [wreg+fsr1l+fsr1h+status,2+status,0]
 17951  1801  0021               	movlb	1	; select bank1
 17952  1802  01A1               	clrf	InitializeTaps@itap^(0+128)
 17953  1803  01A2               	clrf	(InitializeTaps@itap+1)^(0+128)
 17954  1804                     L22:	
 17955  1804  0822               	movf	(InitializeTaps@itap+1)^(0+128),w
 17956  1805  3A80               	xorlw	128
 17957  1806  00A0               	movwf	??_InitializeTaps^(0+128)
 17958  1807  3080               	movlw	128
 17959  1808  0220               	subwf	??_InitializeTaps^(0+128),w
 17960  1809  1D03               	skipz
 17961  180A  280D               	goto	u8755
 17962  180B  300C               	movlw	12
 17963  180C  0221               	subwf	InitializeTaps@itap^(0+128),w
 17964  180D                     u8755:	
 17965  180D  1803               	btfsc	3,0
 17966  180E  0008               	return
 17967                           
 17968                           ;user.c: 230: tap[itap] = 0;
 17969  180F  0021               	movlb	1	; select bank1
 17970  1810  0821               	movf	InitializeTaps@itap^(0+128),w
 17971  1811  00A0               	movwf	??_InitializeTaps^(0+128)
 17972  1812  3001               	movlw	1
 17973  1813                     u8765:	
 17974  1813  35A0               	lslf	??_InitializeTaps^(0+128),f
 17975  1814  3EFF               	addlw	-1
 17976  1815  1D03               	skipz
 17977  1816  2813               	goto	u8765
 17978  1817  3520               	lslf	??_InitializeTaps^(0+128),w
 17979  1818  3EA0               	addlw	(low (_tap| (0+512)))& (0+255)
 17980  1819  0086               	movwf	6
 17981  181A  3002               	movlw	2	; select bank5/6
 17982  181B  0087               	movwf	7
 17983  181C  3000               	movlw	0
 17984  181D  3FC0               	movwi [0]fsr1
 17985  181E  3000               	movlw	0
 17986  181F  3FC1               	movwi [1]fsr1
 17987  1820  3FC2               	movwi [2]fsr1
 17988  1821  3FC3               	movwi [3]fsr1
 17989  1822  3001               	movlw	1
 17990  1823  07A1               	addwf	InitializeTaps@itap^(0+128),f
 17991  1824  3000               	movlw	0
 17992  1825  3DA2               	addwfc	(InitializeTaps@itap+1)^(0+128),f
 17993  1826  2804               	goto	L22
 17994  1827                     __end_of_InitializeTaps:	
 17995                           
 17996                           	psect	text64
 17997  21BA                     __ptext64:	
 17998 ;; *************** function _InitApp *****************
 17999 ;; Defined at:
 18000 ;;		line 23 in file "user.c"
 18001 ;; Parameters:    Size  Location     Type
 18002 ;;		None
 18003 ;; Auto vars:     Size  Location     Type
 18004 ;;		None
 18005 ;; Return value:  Size  Location     Type
 18006 ;;                  1    wreg      void 
 18007 ;; Registers used:
 18008 ;;		wreg, status,2, status,0, pclath, cstack
 18009 ;; Tracked objects:
 18010 ;;		On entry : 0/0
 18011 ;;		On exit  : 0/0
 18012 ;;		Unchanged: 0/0
 18013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18017 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18018 ;;Total ram usage:        0 bytes
 18019 ;; Hardware stack levels used:    1
 18020 ;; Hardware stack levels required when called:    5
 18021 ;; This function calls:
 18022 ;;		_init_adc
 18023 ;;		_init_pwm
 18024 ;; This function is called by:
 18025 ;;		_main
 18026 ;; This function uses a non-reentrant model
 18027 ;;
 18028                           
 18029                           
 18030                           ;psect for function _InitApp
 18031  21BA                     _InitApp:	
 18032                           
 18033                           ;user.c: 24: TRISBbits.TRISB0 = 0;
 18034                           
 18035                           ;incstack = 0
 18036                           ; Regs used in _InitApp: [wreg+status,2+status,0+pclath+cstack]
 18037  21BA  0021               	movlb	1	; select bank1
 18038  21BB  100D               	bcf	13,0	;volatile
 18039                           
 18040                           ;user.c: 25: TRISBbits.TRISB1 = 0;
 18041  21BC  108D               	bcf	13,1	;volatile
 18042                           
 18043                           ;user.c: 26: TRISBbits.TRISB2 = 0;
 18044  21BD  110D               	bcf	13,2	;volatile
 18045                           
 18046                           ;user.c: 27: TRISBbits.TRISB3 = 0;
 18047  21BE  118D               	bcf	13,3	;volatile
 18048                           
 18049                           ;user.c: 28: TRISBbits.TRISB4 = 0;
 18050  21BF  120D               	bcf	13,4	;volatile
 18051                           
 18052                           ;user.c: 29: TRISBbits.TRISB5 = 0;
 18053  21C0  128D               	bcf	13,5	;volatile
 18054                           
 18055                           ;user.c: 31: TRISCbits.TRISC0 = 1;
 18056  21C1  140E               	bsf	14,0	;volatile
 18057                           
 18058                           ;user.c: 32: TRISCbits.TRISC4 = 0;
 18059  21C2  120E               	bcf	14,4	;volatile
 18060                           
 18061                           ;user.c: 33: TRISCbits.TRISC5 = 0;
 18062  21C3  128E               	bcf	14,5	;volatile
 18063                           
 18064                           ;user.c: 36: TRISDbits.TRISD0 = 0;
 18065  21C4  100F               	bcf	15,0	;volatile
 18066                           
 18067                           ;user.c: 37: TRISDbits.TRISD1 = 0;
 18068  21C5  108F               	bcf	15,1	;volatile
 18069                           
 18070                           ;user.c: 38: TRISDbits.TRISD2 = 0;
 18071  21C6  110F               	bcf	15,2	;volatile
 18072                           
 18073                           ;user.c: 39: TRISDbits.TRISD3 = 0;
 18074  21C7  118F               	bcf	15,3	;volatile
 18075                           
 18076                           ;user.c: 40: TRISDbits.TRISD4 = 0;
 18077  21C8  120F               	bcf	15,4	;volatile
 18078                           
 18079                           ;user.c: 41: TRISDbits.TRISD5 = 1;
 18080  21C9  168F               	bsf	15,5	;volatile
 18081                           
 18082                           ;user.c: 42: TRISDbits.TRISD6 = 1;
 18083  21CA  170F               	bsf	15,6	;volatile
 18084                           
 18085                           ;user.c: 43: TRISDbits.TRISD7 = 1;
 18086  21CB  178F               	bsf	15,7	;volatile
 18087                           
 18088                           ;user.c: 49: TRISEbits.TRISE0 = 1;
 18089  21CC  1410               	bsf	16,0	;volatile
 18090                           
 18091                           ;user.c: 50: TRISEbits.TRISE1 = 1;
 18092  21CD  1490               	bsf	16,1	;volatile
 18093                           
 18094                           ;user.c: 51: ANSELEbits.ANSE0 = 0;
 18095  21CE  0023               	movlb	3	; select bank3
 18096  21CF  1010               	bcf	16,0	;volatile
 18097                           
 18098                           ;user.c: 52: ANSELEbits.ANSE1 = 0;
 18099  21D0  1090               	bcf	16,1	;volatile
 18100                           
 18101                           ;user.c: 53: PORTEbits.RE0 = 0;
 18102  21D1  0020               	movlb	0	; select bank0
 18103  21D2  1010               	bcf	16,0	;volatile
 18104                           
 18105                           ;user.c: 54: PORTEbits.RE1 = 0;
 18106  21D3  1090               	bcf	16,1	;volatile
 18107                           
 18108                           ;user.c: 56: TRISFbits.TRISF0 = 0;
 18109  21D4  0026               	movlb	6	; select bank6
 18110  21D5  100C               	bcf	12,0	;volatile
 18111                           
 18112                           ;user.c: 57: TRISFbits.TRISF1 = 0;
 18113  21D6  108C               	bcf	12,1	;volatile
 18114                           
 18115                           ;user.c: 58: TRISFbits.TRISF2 = 0;
 18116  21D7  110C               	bcf	12,2	;volatile
 18117                           
 18118                           ;user.c: 59: TRISFbits.TRISF3 = 0;
 18119  21D8  118C               	bcf	12,3	;volatile
 18120                           
 18121                           ;user.c: 60: TRISFbits.TRISF4 = 0;
 18122  21D9  120C               	bcf	12,4	;volatile
 18123                           
 18124                           ;user.c: 61: TRISFbits.TRISF5 = 0;
 18125  21DA  128C               	bcf	12,5	;volatile
 18126                           
 18127                           ;user.c: 62: TRISFbits.TRISF6 = 1;
 18128  21DB  170C               	bsf	12,6	;volatile
 18129                           
 18130                           ;user.c: 63: ANSELFbits.ANSF6 = 0;
 18131  21DC  0028               	movlb	8	; select bank8
 18132  21DD  130C               	bcf	12,6	;volatile
 18133                           
 18134                           ;user.c: 65: TRISGbits.TRISG1 = 0;
 18135  21DE  0026               	movlb	6	; select bank6
 18136  21DF  108D               	bcf	13,1	;volatile
 18137                           
 18138                           ;user.c: 66: TRISGbits.TRISG2 = 0;
 18139  21E0  110D               	bcf	13,2	;volatile
 18140                           
 18141                           ;user.c: 68: init_adc();
 18142  21E1  31AF  27C3  31A1   	fcall	_init_adc
 18143                           
 18144                           ;user.c: 69: init_pwm();
 18145  21E4  31A4  2471         	fcall	_init_pwm
 18146                           
 18147                           ;user.c: 71: INTCONbits.GIE = 0b1;
 18148  21E6  178B               	bsf	11,7	;volatile
 18149                           
 18150                           ;user.c: 72: INTCONbits.TMR0IE = 0b1;
 18151  21E7  168B               	bsf	11,5	;volatile
 18152                           
 18153                           ;user.c: 73: INTCONbits.TMR0IF = 0b0;
 18154  21E8  110B               	bcf	11,2	;volatile
 18155  21E9  0008               	return
 18156  21EA                     __end_of_InitApp:	
 18157                           
 18158                           	psect	text65
 18159  2471                     __ptext65:	
 18160 ;; *************** function _init_pwm *****************
 18161 ;; Defined at:
 18162 ;;		line 129 in file "user.c"
 18163 ;; Parameters:    Size  Location     Type
 18164 ;;		None
 18165 ;; Auto vars:     Size  Location     Type
 18166 ;;		None
 18167 ;; Return value:  Size  Location     Type
 18168 ;;                  1    wreg      void 
 18169 ;; Registers used:
 18170 ;;		wreg, status,2, status,0, pclath, cstack
 18171 ;; Tracked objects:
 18172 ;;		On entry : 0/0
 18173 ;;		On exit  : 0/0
 18174 ;;		Unchanged: 0/0
 18175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18177 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18179 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18180 ;;Total ram usage:        0 bytes
 18181 ;; Hardware stack levels used:    1
 18182 ;; Hardware stack levels required when called:    4
 18183 ;; This function calls:
 18184 ;;		_init_timer0
 18185 ;;		_init_timer2
 18186 ;; This function is called by:
 18187 ;;		_InitApp
 18188 ;; This function uses a non-reentrant model
 18189 ;;
 18190                           
 18191                           
 18192                           ;psect for function _init_pwm
 18193  2471                     _init_pwm:	
 18194                           
 18195                           ;user.c: 130: APFCONbits.CCP2SEL = 0;
 18196                           
 18197                           ;incstack = 0
 18198                           ; Regs used in _init_pwm: [wreg+status,2+status,0+pclath+cstack]
 18199  2471  0022               	movlb	2	; select bank2
 18200  2472  101D               	bcf	29,0	;volatile
 18201                           
 18202                           ;user.c: 131: TRISCbits.TRISC2 = 0;
 18203  2473  0021               	movlb	1	; select bank1
 18204  2474  110E               	bcf	14,2	;volatile
 18205                           
 18206                           ;user.c: 132: TRISCbits.TRISC1 = 0;
 18207  2475  108E               	bcf	14,1	;volatile
 18208                           
 18209                           ;user.c: 133: TRISGbits.TRISG0 = 0;
 18210  2476  0026               	movlb	6	; select bank6
 18211  2477  100D               	bcf	13,0	;volatile
 18212                           
 18213                           ;user.c: 134: TRISGbits.TRISG3 = 0;
 18214  2478  118D               	bcf	13,3	;volatile
 18215                           
 18216                           ;user.c: 135: TRISGbits.TRISG4 = 0;
 18217  2479  120D               	bcf	13,4	;volatile
 18218                           
 18219                           ;user.c: 136: TRISEbits.TRISE6 = 0;
 18220  247A  0021               	movlb	1	; select bank1
 18221  247B  1310               	bcf	16,6	;volatile
 18222                           
 18223                           ;user.c: 137: TRISEbits.TRISE5 = 0;
 18224  247C  1290               	bcf	16,5	;volatile
 18225                           
 18226                           ;user.c: 138: TRISEbits.TRISE4 = 0;
 18227  247D  1210               	bcf	16,4	;volatile
 18228                           
 18229                           ;user.c: 139: TRISEbits.TRISE3 = 0;
 18230  247E  1190               	bcf	16,3	;volatile
 18231                           
 18232                           ;user.c: 140: TRISEbits.TRISE2 = 0;
 18233  247F  1110               	bcf	16,2	;volatile
 18234                           
 18235                           ;user.c: 141: CCP1CONbits.CCP1M = 0b1111;
 18236  2480  300F               	movlw	15
 18237  2481  0025               	movlb	5	; select bank5
 18238  2482  0493               	iorwf	19,f	;volatile
 18239                           
 18240                           ;user.c: 142: CCP2CONbits.CCP2M = 0b1111;
 18241  2483  300F               	movlw	15
 18242  2484  049A               	iorwf	26,f	;volatile
 18243                           
 18244                           ;user.c: 143: CCP3CONbits.CCP3M = 0b1111;
 18245  2485  300F               	movlw	15
 18246  2486  0026               	movlb	6	; select bank6
 18247  2487  0493               	iorwf	19,f	;volatile
 18248                           
 18249                           ;user.c: 144: CCP4CONbits.CCP4M = 0b1111;
 18250  2488  300F               	movlw	15
 18251  2489  049A               	iorwf	26,f	;volatile
 18252                           
 18253                           ;user.c: 145: CCP5CONbits.CCP5M = 0b1111;
 18254  248A  300F               	movlw	15
 18255  248B  049E               	iorwf	30,f	;volatile
 18256                           
 18257                           ;user.c: 146: CCP6CONbits.CCP6M = 0b1111;
 18258  248C  300F               	movlw	15
 18259  248D  002C               	movlb	12	; select bank12
 18260  248E  0493               	iorwf	19,f	;volatile
 18261                           
 18262                           ;user.c: 147: CCP7CONbits.CCP7M = 0b1111;
 18263  248F  300F               	movlw	15
 18264  2490  0496               	iorwf	22,f	;volatile
 18265                           
 18266                           ;user.c: 148: CCP8CONbits.CCP8M = 0b1111;
 18267  2491  300F               	movlw	15
 18268  2492  0499               	iorwf	25,f	;volatile
 18269                           
 18270                           ;user.c: 149: CCP9CONbits.CCP9M = 0b1111;
 18271  2493  300F               	movlw	15
 18272  2494  049C               	iorwf	28,f	;volatile
 18273                           
 18274                           ;user.c: 150: CCP10CONbits.CCP10M = 0b1111;
 18275  2495  300F               	movlw	15
 18276  2496  049F               	iorwf	31,f	;volatile
 18277                           
 18278                           ;user.c: 151: CCPTMRS0 = 0b00000000;
 18279  2497  0025               	movlb	5	; select bank5
 18280  2498  019D               	clrf	29	;volatile
 18281                           
 18282                           ;user.c: 152: CCPTMRS1 = 0b00000000;
 18283  2499  019E               	clrf	30	;volatile
 18284                           
 18285                           ;user.c: 153: CCPTMRS2 = 0b00000000;
 18286  249A  019F               	clrf	31	;volatile
 18287                           
 18288                           ;user.c: 154: CCPR1 = 50;
 18289  249B  3000               	movlw	0
 18290  249C  0092               	movwf	18	;volatile
 18291  249D  3032               	movlw	50
 18292  249E  0091               	movwf	17	;volatile
 18293                           
 18294                           ;user.c: 155: CCPR2 = 100;
 18295  249F  3000               	movlw	0
 18296  24A0  0099               	movwf	25	;volatile
 18297  24A1  3064               	movlw	100
 18298  24A2  0098               	movwf	24	;volatile
 18299                           
 18300                           ;user.c: 156: CCPR3 = 150;
 18301  24A3  3000               	movlw	0
 18302  24A4  0026               	movlb	6	; select bank6
 18303  24A5  0092               	movwf	18	;volatile
 18304  24A6  3096               	movlw	150
 18305  24A7  0091               	movwf	17	;volatile
 18306                           
 18307                           ;user.c: 157: CCPR4 = 200;
 18308  24A8  3000               	movlw	0
 18309  24A9  0099               	movwf	25	;volatile
 18310  24AA  30C8               	movlw	200
 18311  24AB  0098               	movwf	24	;volatile
 18312                           
 18313                           ;user.c: 158: init_timer2();
 18314  24AC  31AF  27B1  31A4   	fcall	_init_timer2
 18315                           
 18316                           ;user.c: 159: init_timer0();
 18317  24AF  3188  2001         	fcall	_init_timer0
 18318  24B1  0008               	return
 18319  24B2                     __end_of_init_pwm:	
 18320                           
 18321                           	psect	text66
 18322  2FB1                     __ptext66:	
 18323 ;; *************** function _init_timer2 *****************
 18324 ;; Defined at:
 18325 ;;		line 162 in file "user.c"
 18326 ;; Parameters:    Size  Location     Type
 18327 ;;		None
 18328 ;; Auto vars:     Size  Location     Type
 18329 ;;		None
 18330 ;; Return value:  Size  Location     Type
 18331 ;;                  1    wreg      void 
 18332 ;; Registers used:
 18333 ;;		wreg, status,2, status,0
 18334 ;; Tracked objects:
 18335 ;;		On entry : 0/0
 18336 ;;		On exit  : 0/0
 18337 ;;		Unchanged: 0/0
 18338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18340 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18342 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18343 ;;Total ram usage:        0 bytes
 18344 ;; Hardware stack levels used:    1
 18345 ;; Hardware stack levels required when called:    3
 18346 ;; This function calls:
 18347 ;;		Nothing
 18348 ;; This function is called by:
 18349 ;;		_init_pwm
 18350 ;; This function uses a non-reentrant model
 18351 ;;
 18352                           
 18353                           
 18354                           ;psect for function _init_timer2
 18355  2FB1                     _init_timer2:	
 18356                           
 18357                           ;user.c: 163: T2CONbits.T2OUTPS = 0b0000;
 18358                           
 18359                           ;incstack = 0
 18360                           ; Regs used in _init_timer2: [wreg+status,2+status,0]
 18361  2FB1  3087               	movlw	-121
 18362  2FB2  0020               	movlb	0	; select bank0
 18363  2FB3  059C               	andwf	28,f	;volatile
 18364                           
 18365                           ;user.c: 164: T2CONbits.T2CKPS = 0b00;
 18366  2FB4  30FC               	movlw	-4
 18367  2FB5  059C               	andwf	28,f	;volatile
 18368                           
 18369                           ;user.c: 165: PR2 = 0xFF;
 18370  2FB6  30FF               	movlw	255
 18371  2FB7  009B               	movwf	27	;volatile
 18372                           
 18373                           ;user.c: 166: T2CONbits.TMR2ON = 1;
 18374  2FB8  151C               	bsf	28,2	;volatile
 18375  2FB9  0008               	return
 18376  2FBA                     __end_of_init_timer2:	
 18377                           
 18378                           	psect	text67
 18379  0801                     __ptext67:	
 18380 ;; *************** function _init_timer0 *****************
 18381 ;; Defined at:
 18382 ;;		line 169 in file "user.c"
 18383 ;; Parameters:    Size  Location     Type
 18384 ;;		None
 18385 ;; Auto vars:     Size  Location     Type
 18386 ;;		None
 18387 ;; Return value:  Size  Location     Type
 18388 ;;                  1    wreg      void 
 18389 ;; Registers used:
 18390 ;;		None
 18391 ;; Tracked objects:
 18392 ;;		On entry : 0/0
 18393 ;;		On exit  : 0/0
 18394 ;;		Unchanged: 0/0
 18395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18396 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18397 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18398 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18399 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18400 ;;Total ram usage:        0 bytes
 18401 ;; Hardware stack levels used:    1
 18402 ;; Hardware stack levels required when called:    3
 18403 ;; This function calls:
 18404 ;;		Nothing
 18405 ;; This function is called by:
 18406 ;;		_init_pwm
 18407 ;; This function uses a non-reentrant model
 18408 ;;
 18409                           
 18410                           
 18411                           ;psect for function _init_timer0
 18412  0801                     _init_timer0:	
 18413                           
 18414                           ;user.c: 170: OPTION_REGbits.TMR0CS = 0b0;
 18415                           
 18416                           ;incstack = 0
 18417                           ; Regs used in _init_timer0: []
 18418  0801  0021               	movlb	1	; select bank1
 18419  0802  1295               	bcf	21,5	;volatile
 18420                           
 18421                           ;user.c: 171: OPTION_REGbits.PSA = 0b0;
 18422  0803  1195               	bcf	21,3	;volatile
 18423                           
 18424                           ;user.c: 172: OPTION_REGbits.PS0 = 0b0;
 18425  0804  1015               	bcf	21,0	;volatile
 18426                           
 18427                           ;user.c: 173: OPTION_REGbits.PS1 = 0b1;
 18428  0805  1495               	bsf	21,1	;volatile
 18429                           
 18430                           ;user.c: 174: OPTION_REGbits.PS2 = 0b0;
 18431  0806  1115               	bcf	21,2	;volatile
 18432  0807  0008               	return
 18433  0808                     __end_of_init_timer0:	
 18434                           
 18435                           	psect	text68
 18436  2FC3                     __ptext68:	
 18437 ;; *************** function _init_adc *****************
 18438 ;; Defined at:
 18439 ;;		line 115 in file "user.c"
 18440 ;; Parameters:    Size  Location     Type
 18441 ;;		None
 18442 ;; Auto vars:     Size  Location     Type
 18443 ;;		None
 18444 ;; Return value:  Size  Location     Type
 18445 ;;                  1    wreg      void 
 18446 ;; Registers used:
 18447 ;;		wreg, status,2, status,0
 18448 ;; Tracked objects:
 18449 ;;		On entry : 0/0
 18450 ;;		On exit  : 0/0
 18451 ;;		Unchanged: 0/0
 18452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18456 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18457 ;;Total ram usage:        0 bytes
 18458 ;; Hardware stack levels used:    1
 18459 ;; Hardware stack levels required when called:    3
 18460 ;; This function calls:
 18461 ;;		Nothing
 18462 ;; This function is called by:
 18463 ;;		_InitApp
 18464 ;; This function uses a non-reentrant model
 18465 ;;
 18466                           
 18467                           
 18468                           ;psect for function _init_adc
 18469  2FC3                     _init_adc:	
 18470                           
 18471                           ;user.c: 116: ADCON1bits.ADFM = 0b1;
 18472                           
 18473                           ;incstack = 0
 18474                           ; Regs used in _init_adc: [wreg+status,2+status,0]
 18475  2FC3  0021               	movlb	1	; select bank1
 18476  2FC4  179E               	bsf	30,7	;volatile
 18477                           
 18478                           ;user.c: 117: ADCON1bits.ADCS = 0b110;
 18479  2FC5  081E               	movf	30,w	;volatile
 18480  2FC6  398F               	andlw	-113
 18481  2FC7  3860               	iorlw	96
 18482  2FC8  009E               	movwf	30	;volatile
 18483                           
 18484                           ;user.c: 118: ADCON1bits.ADPREF = 0b00;
 18485  2FC9  30FC               	movlw	-4
 18486  2FCA  059E               	andwf	30,f	;volatile
 18487                           
 18488                           ;user.c: 119: ADCON0bits.ADON = 0b1;
 18489  2FCB  141D               	bsf	29,0	;volatile
 18490  2FCC  0008               	return
 18491  2FCD                     __end_of_init_adc:	
 18492                           
 18493                           	psect	text69
 18494  2FA9                     __ptext69:	
 18495 ;; *************** function _ConfigureOscillator *****************
 18496 ;; Defined at:
 18497 ;;		line 18 in file "system.c"
 18498 ;; Parameters:    Size  Location     Type
 18499 ;;		None
 18500 ;; Auto vars:     Size  Location     Type
 18501 ;;		None
 18502 ;; Return value:  Size  Location     Type
 18503 ;;                  1    wreg      void 
 18504 ;; Registers used:
 18505 ;;		wreg, status,2, status,0
 18506 ;; Tracked objects:
 18507 ;;		On entry : 0/0
 18508 ;;		On exit  : 0/0
 18509 ;;		Unchanged: 0/0
 18510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18514 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18515 ;;Total ram usage:        0 bytes
 18516 ;; Hardware stack levels used:    1
 18517 ;; Hardware stack levels required when called:    3
 18518 ;; This function calls:
 18519 ;;		Nothing
 18520 ;; This function is called by:
 18521 ;;		_main
 18522 ;; This function uses a non-reentrant model
 18523 ;;
 18524                           
 18525                           
 18526                           ;psect for function _ConfigureOscillator
 18527  2FA9                     _ConfigureOscillator:	
 18528                           
 18529                           ;system.c: 20: OSCCONbits.SCS = 0b00;
 18530                           
 18531                           ;incstack = 0
 18532                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
 18533  2FA9  30FC               	movlw	-4
 18534  2FAA  0021               	movlb	1	; select bank1
 18535  2FAB  0599               	andwf	25,f	;volatile
 18536  2FAC  0008               	return
 18537  2FAD                     __end_of_ConfigureOscillator:	
 18538                           
 18539                           	psect	intentry
 18540  0004                     __pintentry:	
 18541 ;; *************** function _isr *****************
 18542 ;; Defined at:
 18543 ;;		line 28 in file "interrupts.c"
 18544 ;; Parameters:    Size  Location     Type
 18545 ;;		None
 18546 ;; Auto vars:     Size  Location     Type
 18547 ;;  tmpSubDelay     2   35[BANK0 ] int 
 18548 ;; Return value:  Size  Location     Type
 18549 ;;                  1    wreg      void 
 18550 ;; Registers used:
 18551 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18552 ;; Tracked objects:
 18553 ;;		On entry : 0/0
 18554 ;;		On exit  : 0/0
 18555 ;;		Unchanged: 0/0
 18556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18558 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18559 ;;      Temps:          0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18560 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18561 ;;Total ram usage:       11 bytes
 18562 ;; Hardware stack levels used:    1
 18563 ;; Hardware stack levels required when called:    2
 18564 ;; This function calls:
 18565 ;;		___awdiv
 18566 ;;		_modulation
 18567 ;;		i1_set_leds_top
 18568 ;; This function is called by:
 18569 ;;		Interrupt level 1
 18570 ;; This function uses a non-reentrant model
 18571 ;;
 18572                           
 18573  0004                     _isr:	
 18574                           
 18575                           ;incstack = 0
 18576                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18577  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 18578  0005  3180               	pagesel	$
 18579  0006  0020               	movlb	0	; select bank0
 18580  0007  087F               	movf	127,w
 18581  0008  00C2               	movwf	??_isr+8
 18582                           
 18583                           ;interrupts.c: 29: int tmpSubDelay;
 18584                           ;interrupts.c: 32: extern volatile long timer;
 18585                           ;interrupts.c: 33: extern volatile long sub_timer;
 18586                           ;interrupts.c: 34: extern volatile long tap_timer;
 18587                           ;interrupts.c: 35: extern signed int adjusted_pot_value;
 18588                           ;interrupts.c: 36: extern int mod_delay_time;
 18589                           ;interrupts.c: 38: extern volatile long baseline_delay_time;
 18590                           ;interrupts.c: 40: extern int top_push_state;
 18591                           ;interrupts.c: 41: extern uint8_t feedback_start;
 18592                           ;interrupts.c: 42: extern volatile long mod_timer;
 18593                           ;interrupts.c: 43: extern volatile long delay_time;
 18594  0009  1D0B               	btfss	11,2	;volatile
 18595  000A  2921               	goto	i1l135
 18596                           
 18597                           ;interrupts.c: 47: test_timer++;
 18598  000B  3001               	movlw	1
 18599  000C  0024               	movlb	4	; select bank4
 18600  000D  07C1               	addwf	_test_timer^(0+512),f
 18601  000E  3000               	movlw	0
 18602  000F  3DC2               	addwfc	(_test_timer+1)^(0+512),f
 18603  0010  3000               	movlw	0
 18604  0011  3DC3               	addwfc	(_test_timer+2)^(0+512),f
 18605  0012  3000               	movlw	0
 18606  0013  3DC4               	addwfc	(_test_timer+3)^(0+512),f
 18607                           
 18608                           ;interrupts.c: 48: tmpSubDelay = delay_time;
 18609  0014  0020               	movlb	0	; select bank0
 18610  0015  084A               	movf	_delay_time+1,w	;volatile
 18611  0016  00C4               	movwf	isr@tmpSubDelay+1
 18612  0017  0849               	movf	_delay_time,w	;volatile
 18613  0018  00C3               	movwf	isr@tmpSubDelay
 18614                           
 18615                           ;interrupts.c: 49: timer = timer + 1;
 18616  0019  3001               	movlw	1
 18617  001A  00BA               	movwf	??_isr
 18618  001B  3000               	movlw	0
 18619  001C  00BB               	movwf	??_isr+1
 18620  001D  3000               	movlw	0
 18621  001E  00BC               	movwf	??_isr+2
 18622  001F  3000               	movlw	0
 18623  0020  00BD               	movwf	??_isr+3
 18624  0021  0861               	movf	_timer,w	;volatile
 18625  0022  07BA               	addwf	??_isr,f
 18626  0023  0862               	movf	_timer+1,w	;volatile
 18627  0024  3DBB               	addwfc	??_isr+1,f
 18628  0025  0863               	movf	_timer+2,w	;volatile
 18629  0026  3DBC               	addwfc	??_isr+2,f
 18630  0027  0864               	movf	_timer+3,w	;volatile
 18631  0028  3DBD               	addwfc	??_isr+3,f
 18632  0029  083D               	movf	??_isr+3,w
 18633  002A  00E4               	movwf	_timer+3	;volatile
 18634  002B  083C               	movf	??_isr+2,w
 18635  002C  00E3               	movwf	_timer+2	;volatile
 18636  002D  083B               	movf	??_isr+1,w
 18637  002E  00E2               	movwf	_timer+1	;volatile
 18638  002F  083A               	movf	??_isr,w
 18639  0030  00E1               	movwf	_timer	;volatile
 18640                           
 18641                           ;interrupts.c: 50: sub_timer = sub_timer + 1;
 18642  0031  3001               	movlw	1
 18643  0032  00BA               	movwf	??_isr
 18644  0033  3000               	movlw	0
 18645  0034  00BB               	movwf	??_isr+1
 18646  0035  3000               	movlw	0
 18647  0036  00BC               	movwf	??_isr+2
 18648  0037  3000               	movlw	0
 18649  0038  00BD               	movwf	??_isr+3
 18650  0039  0859               	movf	_sub_timer,w	;volatile
 18651  003A  07BA               	addwf	??_isr,f
 18652  003B  085A               	movf	_sub_timer+1,w	;volatile
 18653  003C  3DBB               	addwfc	??_isr+1,f
 18654  003D  085B               	movf	_sub_timer+2,w	;volatile
 18655  003E  3DBC               	addwfc	??_isr+2,f
 18656  003F  085C               	movf	_sub_timer+3,w	;volatile
 18657  0040  3DBD               	addwfc	??_isr+3,f
 18658  0041  083D               	movf	??_isr+3,w
 18659  0042  00DC               	movwf	_sub_timer+3	;volatile
 18660  0043  083C               	movf	??_isr+2,w
 18661  0044  00DB               	movwf	_sub_timer+2	;volatile
 18662  0045  083B               	movf	??_isr+1,w
 18663  0046  00DA               	movwf	_sub_timer+1	;volatile
 18664  0047  083A               	movf	??_isr,w
 18665  0048  00D9               	movwf	_sub_timer	;volatile
 18666                           
 18667                           ;interrupts.c: 51: tap_timer = tap_timer + 1;
 18668  0049  3001               	movlw	1
 18669  004A  00BA               	movwf	??_isr
 18670  004B  3000               	movlw	0
 18671  004C  00BB               	movwf	??_isr+1
 18672  004D  3000               	movlw	0
 18673  004E  00BC               	movwf	??_isr+2
 18674  004F  3000               	movlw	0
 18675  0050  00BD               	movwf	??_isr+3
 18676  0051  085D               	movf	_tap_timer,w	;volatile
 18677  0052  07BA               	addwf	??_isr,f
 18678  0053  085E               	movf	_tap_timer+1,w	;volatile
 18679  0054  3DBB               	addwfc	??_isr+1,f
 18680  0055  085F               	movf	_tap_timer+2,w	;volatile
 18681  0056  3DBC               	addwfc	??_isr+2,f
 18682  0057  0860               	movf	_tap_timer+3,w	;volatile
 18683  0058  3DBD               	addwfc	??_isr+3,f
 18684  0059  083D               	movf	??_isr+3,w
 18685  005A  00E0               	movwf	_tap_timer+3	;volatile
 18686  005B  083C               	movf	??_isr+2,w
 18687  005C  00DF               	movwf	_tap_timer+2	;volatile
 18688  005D  083B               	movf	??_isr+1,w
 18689  005E  00DE               	movwf	_tap_timer+1	;volatile
 18690  005F  083A               	movf	??_isr,w
 18691  0060  00DD               	movwf	_tap_timer	;volatile
 18692                           
 18693                           ;interrupts.c: 52: mod_timer = mod_timer + 1;
 18694  0061  3001               	movlw	1
 18695  0062  00BA               	movwf	??_isr
 18696  0063  3000               	movlw	0
 18697  0064  00BB               	movwf	??_isr+1
 18698  0065  3000               	movlw	0
 18699  0066  00BC               	movwf	??_isr+2
 18700  0067  3000               	movlw	0
 18701  0068  00BD               	movwf	??_isr+3
 18702  0069  0023               	movlb	3	; select bank3
 18703  006A  0824               	movf	_mod_timer^(0+384),w	;volatile
 18704  006B  0020               	movlb	0	; select bank0
 18705  006C  07BA               	addwf	??_isr,f
 18706  006D  0023               	movlb	3	; select bank3
 18707  006E  0825               	movf	(_mod_timer+1)^(0+384),w	;volatile
 18708  006F  0020               	movlb	0	; select bank0
 18709  0070  3DBB               	addwfc	??_isr+1,f
 18710  0071  0023               	movlb	3	; select bank3
 18711  0072  0826               	movf	(_mod_timer+2)^(0+384),w	;volatile
 18712  0073  0020               	movlb	0	; select bank0
 18713  0074  3DBC               	addwfc	??_isr+2,f
 18714  0075  0023               	movlb	3	; select bank3
 18715  0076  0827               	movf	(_mod_timer+3)^(0+384),w	;volatile
 18716  0077  0020               	movlb	0	; select bank0
 18717  0078  3DBD               	addwfc	??_isr+3,f
 18718  0079  083D               	movf	??_isr+3,w
 18719  007A  0023               	movlb	3	; select bank3
 18720  007B  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 18721  007C  0020               	movlb	0	; select bank0
 18722  007D  083C               	movf	??_isr+2,w
 18723  007E  0023               	movlb	3	; select bank3
 18724  007F  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 18725  0080  0020               	movlb	0	; select bank0
 18726  0081  083B               	movf	??_isr+1,w
 18727  0082  0023               	movlb	3	; select bank3
 18728  0083  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 18729  0084  0020               	movlb	0	; select bank0
 18730  0085  083A               	movf	??_isr,w
 18731  0086  0023               	movlb	3	; select bank3
 18732  0087  00A4               	movwf	_mod_timer^(0+384)	;volatile
 18733                           
 18734                           ;interrupts.c: 53: double_timer++;
 18735  0088  3001               	movlw	1
 18736  0089  07A0               	addwf	_double_timer^(0+384),f	;volatile
 18737  008A  3000               	movlw	0
 18738  008B  3DA1               	addwfc	(_double_timer+1)^(0+384),f	;volatile
 18739  008C  3000               	movlw	0
 18740  008D  3DA2               	addwfc	(_double_timer+2)^(0+384),f	;volatile
 18741  008E  3000               	movlw	0
 18742  008F  3DA3               	addwfc	(_double_timer+3)^(0+384),f	;volatile
 18743                           
 18744                           ;interrupts.c: 58: if (feedback_start == 1) {
 18745  0090  0022               	movlb	2	; select bank2
 18746  0091  036A               	decf	_feedback_start^(0+256),w
 18747  0092  1D03               	btfss	3,2
 18748  0093  28AB               	goto	i1l6571
 18749                           
 18750                           ;interrupts.c: 59: feedback_timer++;
 18751  0094  3001               	movlw	1
 18752  0095  0023               	movlb	3	; select bank3
 18753  0096  07A8               	addwf	_feedback_timer^(0+384),f	;volatile
 18754  0097  3000               	movlw	0
 18755  0098  3DA9               	addwfc	(_feedback_timer+1)^(0+384),f	;volatile
 18756                           
 18757                           ;interrupts.c: 60: if (feedback_timer > long_press_limit) {feedback_timer = long_press_l
      +                          imit;}
 18758  0099  0829               	movf	(_feedback_timer+1)^(0+384),w	;volatile
 18759  009A  0020               	movlb	0	; select bank0
 18760  009B  0250               	subwf	_long_press_limit+1,w
 18761  009C  1D03               	skipz
 18762  009D  28A2               	goto	u634_25
 18763  009E  0023               	movlb	3	; select bank3
 18764  009F  0828               	movf	_feedback_timer^(0+384),w	;volatile
 18765  00A0  0020               	movlb	0	; select bank0
 18766  00A1  024F               	subwf	_long_press_limit,w
 18767  00A2                     u634_25:	
 18768  00A2  1803               	skipnc
 18769  00A3  28AB               	goto	i1l6571
 18770  00A4  0850               	movf	_long_press_limit+1,w
 18771  00A5  0023               	movlb	3	; select bank3
 18772  00A6  00A9               	movwf	(_feedback_timer+1)^(0+384)	;volatile
 18773  00A7  0020               	movlb	0	; select bank0
 18774  00A8  084F               	movf	_long_press_limit,w
 18775  00A9  0023               	movlb	3	; select bank3
 18776  00AA  00A8               	movwf	_feedback_timer^(0+384)	;volatile
 18777  00AB                     i1l6571:	
 18778                           
 18779                           ;interrupts.c: 61: }
 18780                           ;interrupts.c: 62: if (longTap_start == 1) {
 18781  00AB  0022               	movlb	2	; select bank2
 18782  00AC  036B               	decf	_longTap_start^(0+256),w
 18783  00AD  1D03               	btfss	3,2
 18784  00AE  28C6               	goto	i1l6577
 18785                           
 18786                           ;interrupts.c: 63: longTap_timer++;
 18787  00AF  3001               	movlw	1
 18788  00B0  0023               	movlb	3	; select bank3
 18789  00B1  07B4               	addwf	_longTap_timer^(0+384),f	;volatile
 18790  00B2  3000               	movlw	0
 18791  00B3  3DB5               	addwfc	(_longTap_timer+1)^(0+384),f	;volatile
 18792                           
 18793                           ;interrupts.c: 64: if (longTap_timer > long_press_limit) {
 18794  00B4  0835               	movf	(_longTap_timer+1)^(0+384),w	;volatile
 18795  00B5  0020               	movlb	0	; select bank0
 18796  00B6  0250               	subwf	_long_press_limit+1,w
 18797  00B7  1D03               	skipz
 18798  00B8  28BD               	goto	u636_25
 18799  00B9  0023               	movlb	3	; select bank3
 18800  00BA  0834               	movf	_longTap_timer^(0+384),w	;volatile
 18801  00BB  0020               	movlb	0	; select bank0
 18802  00BC  024F               	subwf	_long_press_limit,w
 18803  00BD                     u636_25:	
 18804  00BD  1803               	skipnc
 18805  00BE  28C6               	goto	i1l6577
 18806                           
 18807                           ;interrupts.c: 65: longTap_timer = long_press_limit;
 18808  00BF  0850               	movf	_long_press_limit+1,w
 18809  00C0  0023               	movlb	3	; select bank3
 18810  00C1  00B5               	movwf	(_longTap_timer+1)^(0+384)	;volatile
 18811  00C2  0020               	movlb	0	; select bank0
 18812  00C3  084F               	movf	_long_press_limit,w
 18813  00C4  0023               	movlb	3	; select bank3
 18814  00C5  00B4               	movwf	_longTap_timer^(0+384)	;volatile
 18815  00C6                     i1l6577:	
 18816                           
 18817                           ;interrupts.c: 66: }
 18818                           ;interrupts.c: 67: }
 18819                           ;interrupts.c: 68: INTCONbits.TMR0IF = 0;
 18820  00C6  110B               	bcf	11,2	;volatile
 18821                           
 18822                           ;interrupts.c: 70: if (adjust_sub_delay == 1) {
 18823  00C7  0023               	movlb	3	; select bank3
 18824  00C8  033C               	decf	_adjust_sub_delay^(0+384),w
 18825  00C9  1D03               	btfss	3,2
 18826  00CA  2921               	goto	i1l135
 18827                           
 18828                           ;interrupts.c: 71: if ((sub_timer >= delay_time) && ((baseline_delay_time - timer) < 4))
      +                           {
 18829  00CB  0020               	movlb	0	; select bank0
 18830  00CC  085C               	movf	_sub_timer+3,w	;volatile
 18831  00CD  3A80               	xorlw	128
 18832  00CE  00BA               	movwf	??_isr
 18833  00CF  084C               	movf	_delay_time+3,w	;volatile
 18834  00D0  3A80               	xorlw	128
 18835  00D1  023A               	subwf	??_isr,w
 18836  00D2  1D03               	skipz
 18837  00D3  28DE               	goto	u638_23
 18838  00D4  084B               	movf	_delay_time+2,w	;volatile
 18839  00D5  025B               	subwf	_sub_timer+2,w	;volatile
 18840  00D6  1D03               	skipz
 18841  00D7  28DE               	goto	u638_23
 18842  00D8  084A               	movf	_delay_time+1,w	;volatile
 18843  00D9  025A               	subwf	_sub_timer+1,w	;volatile
 18844  00DA  1D03               	skipz
 18845  00DB  28DE               	goto	u638_23
 18846  00DC  0849               	movf	_delay_time,w	;volatile
 18847  00DD  0259               	subwf	_sub_timer,w	;volatile
 18848  00DE                     u638_23:	
 18849  00DE  1C03               	skipc
 18850  00DF  2921               	goto	i1l135
 18851  00E0  0845               	movf	_baseline_delay_time,w	;volatile
 18852  00E1  00BA               	movwf	??_isr
 18853  00E2  0846               	movf	_baseline_delay_time+1,w	;volatile
 18854  00E3  00BB               	movwf	??_isr+1
 18855  00E4  0847               	movf	_baseline_delay_time+2,w	;volatile
 18856  00E5  00BC               	movwf	??_isr+2
 18857  00E6  0848               	movf	_baseline_delay_time+3,w	;volatile
 18858  00E7  00BD               	movwf	??_isr+3
 18859  00E8  0961               	comf	_timer,w	;volatile
 18860  00E9  00BE               	movwf	??_isr+4
 18861  00EA  0962               	comf	_timer+1,w	;volatile
 18862  00EB  00BF               	movwf	??_isr+5
 18863  00EC  0963               	comf	_timer+2,w	;volatile
 18864  00ED  00C0               	movwf	??_isr+6
 18865  00EE  0964               	comf	_timer+3,w	;volatile
 18866  00EF  00C1               	movwf	??_isr+7
 18867  00F0  0ABE               	incf	??_isr+4,f
 18868  00F1  1903               	skipnz
 18869  00F2  0ABF               	incf	??_isr+5,f
 18870  00F3  1903               	skipnz
 18871  00F4  0AC0               	incf	??_isr+6,f
 18872  00F5  1903               	skipnz
 18873  00F6  0AC1               	incf	??_isr+7,f
 18874  00F7  083E               	movf	??_isr+4,w
 18875  00F8  07BA               	addwf	??_isr,f
 18876  00F9  083F               	movf	??_isr+5,w
 18877  00FA  3DBB               	addwfc	??_isr+1,f
 18878  00FB  0840               	movf	??_isr+6,w
 18879  00FC  3DBC               	addwfc	??_isr+2,f
 18880  00FD  0841               	movf	??_isr+7,w
 18881  00FE  3DBD               	addwfc	??_isr+3,f
 18882  00FF  1BBD               	btfsc	??_isr+3,7
 18883  0100  290E               	goto	i1l6585
 18884  0101  083D               	movf	??_isr+3,w
 18885  0102  1D03               	btfss	3,2
 18886  0103  2921               	goto	i1l135
 18887  0104  083C               	movf	??_isr+2,w
 18888  0105  1D03               	btfss	3,2
 18889  0106  2921               	goto	i1l135
 18890  0107  083B               	movf	??_isr+1,w
 18891  0108  1D03               	btfss	3,2
 18892  0109  2921               	goto	i1l135
 18893  010A  3004               	movlw	4
 18894  010B  023A               	subwf	??_isr,w
 18895  010C  1803               	btfsc	3,0
 18896  010D  2921               	goto	i1l135
 18897  010E                     i1l6585:	
 18898                           
 18899                           ;interrupts.c: 72: tmpSubDelay = sub_timer + (baseline_delay_time- timer);
 18900  010E  0961               	comf	_timer,w	;volatile
 18901  010F  00BA               	movwf	??_isr
 18902  0110  0962               	comf	_timer+1,w	;volatile
 18903  0111  00BB               	movwf	??_isr+1
 18904  0112  0ABA               	incf	??_isr,f
 18905  0113  1903               	skipnz
 18906  0114  0ABB               	incf	??_isr+1,f
 18907  0115  0845               	movf	_baseline_delay_time,w	;volatile
 18908  0116  073A               	addwf	??_isr,w
 18909  0117  00BC               	movwf	??_isr+2
 18910  0118  0846               	movf	_baseline_delay_time+1,w	;volatile
 18911  0119  3D3B               	addwfc	??_isr+1,w
 18912  011A  00BD               	movwf	??_isr+3
 18913  011B  0859               	movf	_sub_timer,w	;volatile
 18914  011C  073C               	addwf	??_isr+2,w
 18915  011D  00C3               	movwf	isr@tmpSubDelay
 18916  011E  085A               	movf	_sub_timer+1,w	;volatile
 18917  011F  3D3D               	addwfc	??_isr+3,w
 18918  0120  00C4               	movwf	isr@tmpSubDelay+1
 18919  0121                     i1l135:	
 18920                           
 18921                           ;interrupts.c: 73: }
 18922                           ;interrupts.c: 74: }
 18923                           ;interrupts.c: 75: }
 18924                           ;interrupts.c: 78: if (longTap_state < 1 && doubleTap_state < 1 && presetSaveMode < 1) {
 18925  0121  0020               	movlb	0	; select bank0
 18926  0122  0855               	movf	_longTap_state,w	;volatile
 18927  0123  1D03               	btfss	3,2
 18928  0124  2978               	goto	i1l6611
 18929  0125  0866               	movf	_doubleTap_state,w	;volatile
 18930  0126  1D03               	btfss	3,2
 18931  0127  2978               	goto	i1l6611
 18932  0128  0868               	movf	_presetSaveMode,w
 18933  0129  1D03               	btfss	3,2
 18934  012A  2978               	goto	i1l6611
 18935                           
 18936                           ;interrupts.c: 81: if (timer >= baseline_delay_time) {
 18937  012B  0864               	movf	_timer+3,w	;volatile
 18938  012C  3A80               	xorlw	128
 18939  012D  00BA               	movwf	??_isr
 18940  012E  0848               	movf	_baseline_delay_time+3,w	;volatile
 18941  012F  3A80               	xorlw	128
 18942  0130  023A               	subwf	??_isr,w
 18943  0131  1D03               	skipz
 18944  0132  293D               	goto	u643_23
 18945  0133  0847               	movf	_baseline_delay_time+2,w	;volatile
 18946  0134  0263               	subwf	_timer+2,w	;volatile
 18947  0135  1D03               	skipz
 18948  0136  293D               	goto	u643_23
 18949  0137  0846               	movf	_baseline_delay_time+1,w	;volatile
 18950  0138  0262               	subwf	_timer+1,w	;volatile
 18951  0139  1D03               	skipz
 18952  013A  293D               	goto	u643_23
 18953  013B  0845               	movf	_baseline_delay_time,w	;volatile
 18954  013C  0261               	subwf	_timer,w	;volatile
 18955  013D                     u643_23:	
 18956  013D  1C03               	skipc
 18957  013E  2966               	goto	i1l6607
 18958                           
 18959                           ;interrupts.c: 84: LATBbits.LATB4 = 1;
 18960  013F  0022               	movlb	2	; select bank2
 18961  0140  160D               	bsf	13,4	;volatile
 18962                           
 18963                           ;interrupts.c: 86: timer = 0;
 18964  0141  3000               	movlw	0
 18965  0142  0020               	movlb	0	; select bank0
 18966  0143  00E4               	movwf	_timer+3	;volatile
 18967  0144  3000               	movlw	0
 18968  0145  00E3               	movwf	_timer+2	;volatile
 18969  0146  3000               	movlw	0
 18970  0147  00E2               	movwf	_timer+1	;volatile
 18971  0148  3000               	movlw	0
 18972  0149  00E1               	movwf	_timer	;volatile
 18973                           
 18974                           ;interrupts.c: 88: if (reset_sub_delay == 1 || modulation_changed == 1) {
 18975  014A  0023               	movlb	3	; select bank3
 18976  014B  0344               	decf	_reset_sub_delay^(0+384),w
 18977  014C  1D03               	btfss	3,2
 18978  014D  0341               	decf	_modulation_changed^(0+384),w
 18979  014E  1D03               	btfss	3,2
 18980  014F  2966               	goto	i1l6607
 18981                           
 18982                           ;interrupts.c: 93: mod_counter = 0;
 18983  0150  01B6               	clrf	_mod_counter^(0+384)
 18984  0151  01B7               	clrf	(_mod_counter+1)^(0+384)
 18985                           
 18986                           ;interrupts.c: 94: modulation_changed = 0;
 18987  0152  01C1               	clrf	_modulation_changed^(0+384)
 18988                           
 18989                           ;interrupts.c: 95: mod_timer = mod_delay_time;
 18990  0153  0853               	movf	_mod_delay_time^(0+384),w
 18991  0154  00A4               	movwf	_mod_timer^(0+384)	;volatile
 18992  0155  0854               	movf	(_mod_delay_time+1)^(0+384),w
 18993  0156  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 18994  0157  0D89               	rlf	9,f
 18995  0158  3B89               	subwfb	9,f
 18996  0159  0989               	comf	9,f
 18997  015A  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 18998  015B  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 18999                           
 19000                           ;interrupts.c: 97: reset_sub_delay = 0;
 19001  015C  01C4               	clrf	_reset_sub_delay^(0+384)
 19002                           
 19003                           ;interrupts.c: 98: sub_timer = delay_time;
 19004  015D  0020               	movlb	0	; select bank0
 19005  015E  084C               	movf	_delay_time+3,w	;volatile
 19006  015F  00DC               	movwf	_sub_timer+3	;volatile
 19007  0160  084B               	movf	_delay_time+2,w	;volatile
 19008  0161  00DB               	movwf	_sub_timer+2	;volatile
 19009  0162  084A               	movf	_delay_time+1,w	;volatile
 19010  0163  00DA               	movwf	_sub_timer+1	;volatile
 19011  0164  0849               	movf	_delay_time,w	;volatile
 19012  0165  00D9               	movwf	_sub_timer	;volatile
 19013  0166                     i1l6607:	
 19014                           
 19015                           ;interrupts.c: 99: }
 19016                           ;interrupts.c: 100: }
 19017                           ;interrupts.c: 102: if (timer >= 30) {
 19018  0166  0020               	movlb	0	; select bank0
 19019  0167  1BE4               	btfsc	_timer+3,7	;volatile
 19020  0168  2978               	goto	i1l6611
 19021  0169  0864               	movf	_timer+3,w	;volatile
 19022  016A  1D03               	btfss	3,2
 19023  016B  2976               	goto	i1l6609
 19024  016C  0863               	movf	_timer+2,w	;volatile
 19025  016D  1D03               	btfss	3,2
 19026  016E  2976               	goto	i1l6609
 19027  016F  0862               	movf	_timer+1,w	;volatile
 19028  0170  1D03               	btfss	3,2
 19029  0171  2976               	goto	i1l6609
 19030  0172  301E               	movlw	30
 19031  0173  0261               	subwf	_timer,w	;volatile
 19032  0174  1C03               	btfss	3,0
 19033  0175  2978               	goto	i1l6611
 19034  0176                     i1l6609:	
 19035                           
 19036                           ;interrupts.c: 104: LATBbits.LATB4 = 0;
 19037  0176  0022               	movlb	2	; select bank2
 19038  0177  120D               	bcf	13,4	;volatile
 19039  0178                     i1l6611:	
 19040                           
 19041                           ;interrupts.c: 106: }
 19042                           ;interrupts.c: 107: }
 19043                           ;interrupts.c: 110: if (presetSaveMode == 1) {
 19044  0178  0020               	movlb	0	; select bank0
 19045  0179  0368               	decf	_presetSaveMode,w
 19046  017A  1D03               	btfss	3,2
 19047  017B  29A8               	goto	i1l6623
 19048                           
 19049                           ;interrupts.c: 113: if (double_timer >= 250) {
 19050  017C  0023               	movlb	3	; select bank3
 19051  017D  1BA3               	btfsc	(_double_timer+3)^(0+384),7	;volatile
 19052  017E  2997               	goto	i1l6619
 19053  017F  0823               	movf	(_double_timer+3)^(0+384),w	;volatile
 19054  0180  1D03               	btfss	3,2
 19055  0181  298C               	goto	i1l6615
 19056  0182  0822               	movf	(_double_timer+2)^(0+384),w	;volatile
 19057  0183  1D03               	btfss	3,2
 19058  0184  298C               	goto	i1l6615
 19059  0185  0821               	movf	(_double_timer+1)^(0+384),w	;volatile
 19060  0186  1D03               	btfss	3,2
 19061  0187  298C               	goto	i1l6615
 19062  0188  30FA               	movlw	250
 19063  0189  0220               	subwf	_double_timer^(0+384),w	;volatile
 19064  018A  1C03               	btfss	3,0
 19065  018B  2997               	goto	i1l6619
 19066  018C                     i1l6615:	
 19067                           
 19068                           ;interrupts.c: 114: LATBbits.LATB0 = 1;
 19069  018C  0022               	movlb	2	; select bank2
 19070  018D  140D               	bsf	13,0	;volatile
 19071                           
 19072                           ;interrupts.c: 115: double_timer = 0;
 19073  018E  3000               	movlw	0
 19074  018F  0023               	movlb	3	; select bank3
 19075  0190  00A3               	movwf	(_double_timer+3)^(0+384)	;volatile
 19076  0191  3000               	movlw	0
 19077  0192  00A2               	movwf	(_double_timer+2)^(0+384)	;volatile
 19078  0193  3000               	movlw	0
 19079  0194  00A1               	movwf	(_double_timer+1)^(0+384)	;volatile
 19080  0195  3000               	movlw	0
 19081  0196  00A0               	movwf	_double_timer^(0+384)	;volatile
 19082  0197                     i1l6619:	
 19083                           
 19084                           ;interrupts.c: 117: }
 19085                           ;interrupts.c: 118: if (double_timer >= 30) {
 19086  0197  1BA3               	btfsc	(_double_timer+3)^(0+384),7	;volatile
 19087  0198  29A8               	goto	i1l6623
 19088  0199  0823               	movf	(_double_timer+3)^(0+384),w	;volatile
 19089  019A  1D03               	btfss	3,2
 19090  019B  29A6               	goto	i1l6621
 19091  019C  0822               	movf	(_double_timer+2)^(0+384),w	;volatile
 19092  019D  1D03               	btfss	3,2
 19093  019E  29A6               	goto	i1l6621
 19094  019F  0821               	movf	(_double_timer+1)^(0+384),w	;volatile
 19095  01A0  1D03               	btfss	3,2
 19096  01A1  29A6               	goto	i1l6621
 19097  01A2  301E               	movlw	30
 19098  01A3  0220               	subwf	_double_timer^(0+384),w	;volatile
 19099  01A4  1C03               	btfss	3,0
 19100  01A5  29A8               	goto	i1l6623
 19101  01A6                     i1l6621:	
 19102                           
 19103                           ;interrupts.c: 120: LATBbits.LATB0 = 0;
 19104  01A6  0022               	movlb	2	; select bank2
 19105  01A7  100D               	bcf	13,0	;volatile
 19106  01A8                     i1l6623:	
 19107                           
 19108                           ;interrupts.c: 121: }
 19109                           ;interrupts.c: 122: }
 19110                           ;interrupts.c: 124: if (presetSaveMode < 1 && mode2_state == 0) {
 19111  01A8  0020               	movlb	0	; select bank0
 19112  01A9  0868               	movf	_presetSaveMode,w
 19113  01AA  1D03               	btfss	3,2
 19114  01AB  2A03               	goto	i1l6643
 19115  01AC  0867               	movf	_mode2_state,w
 19116  01AD  1D03               	btfss	3,2
 19117  01AE  2A03               	goto	i1l6643
 19118                           
 19119                           ;interrupts.c: 125: if (sub_timer >= tmpSubDelay ) {
 19120  01AF  0843               	movf	isr@tmpSubDelay,w
 19121  01B0  00BA               	movwf	??_isr
 19122  01B1  0844               	movf	isr@tmpSubDelay+1,w
 19123  01B2  00BB               	movwf	??_isr+1
 19124  01B3  3000               	movlw	0
 19125  01B4  1BBB               	btfsc	??_isr+1,7
 19126  01B5  30FF               	movlw	255
 19127  01B6  00BC               	movwf	??_isr+2
 19128  01B7  00BD               	movwf	??_isr+3
 19129  01B8  085C               	movf	_sub_timer+3,w	;volatile
 19130  01B9  3A80               	xorlw	128
 19131  01BA  00BE               	movwf	??_isr+4
 19132  01BB  083D               	movf	??_isr+3,w
 19133  01BC  3A80               	xorlw	128
 19134  01BD  023E               	subwf	??_isr+4,w
 19135  01BE  1D03               	skipz
 19136  01BF  29CA               	goto	u652_23
 19137  01C0  083C               	movf	??_isr+2,w
 19138  01C1  025B               	subwf	_sub_timer+2,w	;volatile
 19139  01C2  1D03               	skipz
 19140  01C3  29CA               	goto	u652_23
 19141  01C4  083B               	movf	??_isr+1,w
 19142  01C5  025A               	subwf	_sub_timer+1,w	;volatile
 19143  01C6  1D03               	skipz
 19144  01C7  29CA               	goto	u652_23
 19145  01C8  083A               	movf	??_isr,w
 19146  01C9  0259               	subwf	_sub_timer,w	;volatile
 19147  01CA                     u652_23:	
 19148  01CA  1C03               	skipc
 19149  01CB  29E7               	goto	i1l6637
 19150                           
 19151                           ;interrupts.c: 126: if (suspend_blink == 0) {
 19152  01CC  0869               	movf	_suspend_blink,w	;volatile
 19153  01CD  1D03               	btfss	3,2
 19154  01CE  29DA               	goto	i1l6633
 19155                           
 19156                           ;interrupts.c: 127: set_leds_top(top_push_state, 1);
 19157  01CF  0852               	movf	_top_push_state+1,w
 19158  01D0  00F1               	movwf	i1set_leds_top@x+1
 19159  01D1  0851               	movf	_top_push_state,w
 19160  01D2  00F0               	movwf	i1set_leds_top@x
 19161  01D3  3001               	movlw	1
 19162  01D4  00F2               	movwf	i1set_leds_top@ledState
 19163  01D5  3000               	movlw	0
 19164  01D6  00F3               	movwf	i1set_leds_top@ledState+1
 19165  01D7  31A4  24F5  3180   	fcall	i1_set_leds_top
 19166  01DA                     i1l6633:	
 19167                           
 19168                           ;interrupts.c: 128: }
 19169                           ;interrupts.c: 129: tmpSubDelay = delay_time;
 19170  01DA  0020               	movlb	0	; select bank0
 19171  01DB  084A               	movf	_delay_time+1,w	;volatile
 19172  01DC  00C4               	movwf	isr@tmpSubDelay+1
 19173  01DD  0849               	movf	_delay_time,w	;volatile
 19174  01DE  00C3               	movwf	isr@tmpSubDelay
 19175                           
 19176                           ;interrupts.c: 130: sub_timer = 0;
 19177  01DF  3000               	movlw	0
 19178  01E0  00DC               	movwf	_sub_timer+3	;volatile
 19179  01E1  3000               	movlw	0
 19180  01E2  00DB               	movwf	_sub_timer+2	;volatile
 19181  01E3  3000               	movlw	0
 19182  01E4  00DA               	movwf	_sub_timer+1	;volatile
 19183  01E5  3000               	movlw	0
 19184  01E6  00D9               	movwf	_sub_timer	;volatile
 19185  01E7                     i1l6637:	
 19186                           
 19187                           ;interrupts.c: 131: }
 19188                           ;interrupts.c: 133: if (sub_timer >= 20) {
 19189  01E7  1BDC               	btfsc	_sub_timer+3,7	;volatile
 19190  01E8  2A03               	goto	i1l6643
 19191  01E9  085C               	movf	_sub_timer+3,w	;volatile
 19192  01EA  1D03               	btfss	3,2
 19193  01EB  29F6               	goto	i1l6639
 19194  01EC  085B               	movf	_sub_timer+2,w	;volatile
 19195  01ED  1D03               	btfss	3,2
 19196  01EE  29F6               	goto	i1l6639
 19197  01EF  085A               	movf	_sub_timer+1,w	;volatile
 19198  01F0  1D03               	btfss	3,2
 19199  01F1  29F6               	goto	i1l6639
 19200  01F2  3014               	movlw	20
 19201  01F3  0259               	subwf	_sub_timer,w	;volatile
 19202  01F4  1C03               	btfss	3,0
 19203  01F5  2A03               	goto	i1l6643
 19204  01F6                     i1l6639:	
 19205                           
 19206                           ;interrupts.c: 134: if (suspend_blink == 0) {
 19207  01F6  0869               	movf	_suspend_blink,w	;volatile
 19208  01F7  1D03               	btfss	3,2
 19209  01F8  2A03               	goto	i1l6643
 19210                           
 19211                           ;interrupts.c: 135: set_leds_top(top_push_state, 0);
 19212  01F9  0852               	movf	_top_push_state+1,w
 19213  01FA  00F1               	movwf	i1set_leds_top@x+1
 19214  01FB  0851               	movf	_top_push_state,w
 19215  01FC  00F0               	movwf	i1set_leds_top@x
 19216  01FD  3000               	movlw	0
 19217  01FE  00F2               	movwf	i1set_leds_top@ledState
 19218  01FF  00F3               	movwf	i1set_leds_top@ledState+1
 19219  0200  31A4  24F5  3180   	fcall	i1_set_leds_top
 19220  0203                     i1l6643:	
 19221                           
 19222                           ;interrupts.c: 136: }
 19223                           ;interrupts.c: 137: }
 19224                           ;interrupts.c: 138: }
 19225                           ;interrupts.c: 154: if (mod_timer >= mod_delay_time) {
 19226  0203  0023               	movlb	3	; select bank3
 19227  0204  0853               	movf	_mod_delay_time^(0+384),w
 19228  0205  0020               	movlb	0	; select bank0
 19229  0206  00BA               	movwf	??_isr
 19230  0207  0023               	movlb	3	; select bank3
 19231  0208  0854               	movf	(_mod_delay_time+1)^(0+384),w
 19232  0209  0020               	movlb	0	; select bank0
 19233  020A  00BB               	movwf	??_isr+1
 19234  020B  3000               	movlw	0
 19235  020C  1BBB               	btfsc	??_isr+1,7
 19236  020D  30FF               	movlw	255
 19237  020E  00BC               	movwf	??_isr+2
 19238  020F  00BD               	movwf	??_isr+3
 19239  0210  0023               	movlb	3	; select bank3
 19240  0211  0827               	movf	(_mod_timer+3)^(0+384),w	;volatile
 19241  0212  3A80               	xorlw	128
 19242  0213  0020               	movlb	0	; select bank0
 19243  0214  00BE               	movwf	??_isr+4
 19244  0215  083D               	movf	??_isr+3,w
 19245  0216  3A80               	xorlw	128
 19246  0217  023E               	subwf	??_isr+4,w
 19247  0218  0023               	movlb	3	; select bank3
 19248  0219  1D03               	skipz
 19249  021A  2A2B               	goto	u656_23
 19250  021B  0020               	movlb	0	; select bank0
 19251  021C  083C               	movf	??_isr+2,w
 19252  021D  0023               	movlb	3	; select bank3
 19253  021E  0226               	subwf	(_mod_timer+2)^(0+384),w	;volatile
 19254  021F  1D03               	skipz
 19255  0220  2A2B               	goto	u656_23
 19256  0221  0020               	movlb	0	; select bank0
 19257  0222  083B               	movf	??_isr+1,w
 19258  0223  0023               	movlb	3	; select bank3
 19259  0224  0225               	subwf	(_mod_timer+1)^(0+384),w	;volatile
 19260  0225  1D03               	skipz
 19261  0226  2A2B               	goto	u656_23
 19262  0227  0020               	movlb	0	; select bank0
 19263  0228  083A               	movf	??_isr,w
 19264  0229  0023               	movlb	3	; select bank3
 19265  022A  0224               	subwf	_mod_timer^(0+384),w	;volatile
 19266  022B                     u656_23:	
 19267  022B  1C03               	skipc
 19268  022C  2AA7               	goto	i1l6661
 19269                           
 19270                           ;interrupts.c: 155: mod_timer = 0;
 19271  022D  3000               	movlw	0
 19272  022E  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 19273  022F  3000               	movlw	0
 19274  0230  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 19275  0231  3000               	movlw	0
 19276  0232  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 19277  0233  3000               	movlw	0
 19278  0234  00A4               	movwf	_mod_timer^(0+384)	;volatile
 19279                           
 19280                           ;interrupts.c: 159: if (mod_counter >= 60) {
 19281  0235  0837               	movf	(_mod_counter+1)^(0+384),w
 19282  0236  3A80               	xorlw	128
 19283  0237  0020               	movlb	0	; select bank0
 19284  0238  00BA               	movwf	??_isr
 19285  0239  3080               	movlw	128
 19286  023A  023A               	subwf	??_isr,w
 19287  023B  1D03               	skipz
 19288  023C  2A40               	goto	u657_25
 19289  023D  303C               	movlw	60
 19290  023E  0023               	movlb	3	; select bank3
 19291  023F  0236               	subwf	_mod_counter^(0+384),w
 19292  0240                     u657_25:	
 19293  0240  1C03               	skipc
 19294  0241  2A51               	goto	i1l157
 19295                           
 19296                           ;interrupts.c: 160: mod_counter = 0;
 19297  0242  0023               	movlb	3	; select bank3
 19298  0243  01B6               	clrf	_mod_counter^(0+384)
 19299  0244  01B7               	clrf	(_mod_counter+1)^(0+384)
 19300                           
 19301                           ;interrupts.c: 161: test_timer = 0;
 19302  0245  3000               	movlw	0
 19303  0246  0024               	movlb	4	; select bank4
 19304  0247  00C4               	movwf	(_test_timer+3)^(0+512)
 19305  0248  3000               	movlw	0
 19306  0249  00C3               	movwf	(_test_timer+2)^(0+512)
 19307  024A  3000               	movlw	0
 19308  024B  00C2               	movwf	(_test_timer+1)^(0+512)
 19309  024C  3000               	movlw	0
 19310  024D  00C1               	movwf	_test_timer^(0+512)
 19311                           
 19312                           ;interrupts.c: 162: LATBbits.LATB0 = 1;
 19313  024E  0022               	movlb	2	; select bank2
 19314  024F  140D               	bsf	13,0	;volatile
 19315                           
 19316                           ;interrupts.c: 163: } else {
 19317  0250  2A53               	goto	i1l158
 19318  0251                     i1l157:	
 19319                           
 19320                           ;interrupts.c: 164: LATBbits.LATB0 = 0;
 19321  0251  0022               	movlb	2	; select bank2
 19322  0252  100D               	bcf	13,0	;volatile
 19323  0253                     i1l158:	
 19324                           
 19325                           ;interrupts.c: 165: }
 19326                           ;interrupts.c: 169: PORTCbits.RC4 = 0;
 19327  0253  0020               	movlb	0	; select bank0
 19328  0254  120E               	bcf	14,4	;volatile
 19329                           
 19330                           ;interrupts.c: 191: mod_value = modArray[mod_counter];
 19331  0255  0023               	movlb	3	; select bank3
 19332  0256  0837               	movf	(_mod_counter+1)^(0+384),w
 19333  0257  0020               	movlb	0	; select bank0
 19334  0258  00BB               	movwf	??_isr+1
 19335  0259  0023               	movlb	3	; select bank3
 19336  025A  0836               	movf	_mod_counter^(0+384),w
 19337  025B  0020               	movlb	0	; select bank0
 19338  025C  00BA               	movwf	??_isr
 19339  025D  35BA               	lslf	??_isr,f
 19340  025E  0DBB               	rlf	??_isr+1,f
 19341  025F  308E               	movlw	142
 19342  0260  00BC               	movwf	??_isr+2
 19343  0261  3023               	movlw	35
 19344  0262  00BD               	movwf	??_isr+3
 19345  0263  083A               	movf	??_isr,w
 19346  0264  073C               	addwf	??_isr+2,w
 19347  0265  0086               	movwf	6
 19348  0266  083B               	movf	??_isr+1,w
 19349  0267  3D3D               	addwfc	??_isr+3,w
 19350  0268  0087               	movwf	7
 19351  0269  3F40               	moviw [0]fsr1
 19352  026A  0023               	movlb	3	; select bank3
 19353  026B  00B8               	movwf	_mod_value^(0+384)
 19354  026C  3F41               	moviw [1]fsr1
 19355  026D  00B9               	movwf	(_mod_value+1)^(0+384)
 19356                           
 19357                           ;interrupts.c: 198: mod_value = modulation(mod_value, adjusted_pot_value);
 19358  026E  0838               	movf	_mod_value^(0+384),w
 19359  026F  0020               	movlb	0	; select bank0
 19360  0270  00AE               	movwf	modulation@x
 19361  0271  0023               	movlb	3	; select bank3
 19362  0272  0839               	movf	(_mod_value+1)^(0+384),w
 19363  0273  0020               	movlb	0	; select bank0
 19364  0274  00AF               	movwf	modulation@x+1
 19365  0275  0D89               	rlf	9,f
 19366  0276  3B89               	subwfb	9,f
 19367  0277  0989               	comf	9,f
 19368  0278  00B0               	movwf	modulation@x+2
 19369  0279  00B1               	movwf	modulation@x+3
 19370  027A  0024               	movlb	4	; select bank4
 19371  027B  0845               	movf	_adjusted_pot_value^(0+512),w
 19372  027C  0020               	movlb	0	; select bank0
 19373  027D  00B2               	movwf	modulation@y
 19374  027E  0024               	movlb	4	; select bank4
 19375  027F  0846               	movf	(_adjusted_pot_value+1)^(0+512),w
 19376  0280  0020               	movlb	0	; select bank0
 19377  0281  00B3               	movwf	modulation@y+1
 19378  0282  0D89               	rlf	9,f
 19379  0283  3B89               	subwfb	9,f
 19380  0284  0989               	comf	9,f
 19381  0285  00B4               	movwf	modulation@y+2
 19382  0286  00B5               	movwf	modulation@y+3
 19383  0287  31A4  2430  3180   	fcall	_modulation
 19384  028A  0020               	movlb	0	; select bank0
 19385  028B  082F               	movf	?_modulation+1,w
 19386  028C  0023               	movlb	3	; select bank3
 19387  028D  00B9               	movwf	(_mod_value+1)^(0+384)
 19388  028E  0020               	movlb	0	; select bank0
 19389  028F  082E               	movf	?_modulation,w
 19390  0290  0023               	movlb	3	; select bank3
 19391  0291  00B8               	movwf	_mod_value^(0+384)
 19392                           
 19393                           ;interrupts.c: 199: CCPR3 = mod_value / 2;
 19394  0292  3002               	movlw	2
 19395  0293  00F0               	movwf	___awdiv@divisor
 19396  0294  3000               	movlw	0
 19397  0295  00F1               	movwf	___awdiv@divisor+1
 19398  0296  0839               	movf	(_mod_value+1)^(0+384),w
 19399  0297  00F3               	movwf	___awdiv@dividend+1
 19400  0298  0838               	movf	_mod_value^(0+384),w
 19401  0299  00F2               	movwf	___awdiv@dividend
 19402  029A  31A7  2702  3180   	fcall	___awdiv
 19403  029D  0871               	movf	?___awdiv+1,w
 19404  029E  0026               	movlb	6	; select bank6
 19405  029F  0092               	movwf	18	;volatile
 19406  02A0  0870               	movf	?___awdiv,w
 19407  02A1  0091               	movwf	17	;volatile
 19408                           
 19409                           ;interrupts.c: 200: mod_counter++;
 19410  02A2  3001               	movlw	1
 19411  02A3  0023               	movlb	3	; select bank3
 19412  02A4  07B6               	addwf	_mod_counter^(0+384),f
 19413  02A5  3000               	movlw	0
 19414  02A6  3DB7               	addwfc	(_mod_counter+1)^(0+384),f
 19415  02A7                     i1l6661:	
 19416                           
 19417                           ;interrupts.c: 204: }
 19418                           ;interrupts.c: 208: if (preset_programmning_on == 1) {
 19419  02A7  0343               	decf	_preset_programmning_on^(0+384),w
 19420  02A8  1D03               	btfss	3,2
 19421  02A9  2AD5               	goto	i1l6673
 19422                           
 19423                           ;interrupts.c: 209: preset_blink++;
 19424  02AA  3001               	movlw	1
 19425  02AB  0020               	movlb	0	; select bank0
 19426  02AC  00BA               	movwf	??_isr
 19427  02AD  083A               	movf	??_isr,w
 19428  02AE  0023               	movlb	3	; select bank3
 19429  02AF  07C2               	addwf	_preset_blink^(0+384),f
 19430                           
 19431                           ;interrupts.c: 211: if (preset_blink >= blink_delay) {
 19432  02B0  0848               	movf	(_blink_delay+1)^(0+384),w
 19433  02B1  3A80               	xorlw	128
 19434  02B2  3C80               	sublw	128
 19435  02B3  1D03               	skipz
 19436  02B4  2AB7               	goto	u659_25
 19437  02B5  0847               	movf	_blink_delay^(0+384),w
 19438  02B6  0242               	subwf	_preset_blink^(0+384),w
 19439  02B7                     u659_25:	
 19440  02B7  1C03               	skipc
 19441  02B8  2ADA               	goto	i1l6677
 19442                           
 19443                           ;interrupts.c: 212: LATBbits.LATB1 = 1;
 19444  02B9  0022               	movlb	2	; select bank2
 19445  02BA  148D               	bsf	13,1	;volatile
 19446                           
 19447                           ;interrupts.c: 213: if (preset_blink > blink_delay*2) {
 19448  02BB  0023               	movlb	3	; select bank3
 19449  02BC  0848               	movf	(_blink_delay+1)^(0+384),w
 19450  02BD  0020               	movlb	0	; select bank0
 19451  02BE  00BB               	movwf	??_isr+1
 19452  02BF  0023               	movlb	3	; select bank3
 19453  02C0  0847               	movf	_blink_delay^(0+384),w
 19454  02C1  0020               	movlb	0	; select bank0
 19455  02C2  00BA               	movwf	??_isr
 19456  02C3  35BA               	lslf	??_isr,f
 19457  02C4  0DBB               	rlf	??_isr+1,f
 19458  02C5  083B               	movf	??_isr+1,w
 19459  02C6  3A80               	xorlw	128
 19460  02C7  00BC               	movwf	??_isr+2
 19461  02C8  3080               	movlw	128
 19462  02C9  023C               	subwf	??_isr+2,w
 19463  02CA  1D03               	skipz
 19464  02CB  2AD0               	goto	u660_25
 19465  02CC  0023               	movlb	3	; select bank3
 19466  02CD  0842               	movf	_preset_blink^(0+384),w
 19467  02CE  0020               	movlb	0	; select bank0
 19468  02CF  023A               	subwf	??_isr,w
 19469  02D0                     u660_25:	
 19470  02D0  1803               	skipnc
 19471  02D1  2ADC               	goto	i1l165
 19472                           
 19473                           ;interrupts.c: 214: preset_blink = 0;
 19474  02D2  0023               	movlb	3	; select bank3
 19475  02D3  01C2               	clrf	_preset_blink^(0+384)
 19476                           
 19477                           ;interrupts.c: 215: }
 19478                           ;interrupts.c: 217: } else {
 19479  02D4  2ADC               	goto	i1l165
 19480  02D5                     i1l6673:	
 19481                           ;interrupts.c: 219: }
 19482                           ;interrupts.c: 221: } else {
 19483                           
 19484                           ;interrupts.c: 218: LATBbits.LATB1 = 0;
 19485                           
 19486                           
 19487                           ;interrupts.c: 222: if (preset_blink > 0) {
 19488  02D5  0023               	movlb	3	; select bank3
 19489  02D6  0842               	movf	_preset_blink^(0+384),w
 19490  02D7  1903               	btfsc	3,2
 19491  02D8  2ADC               	goto	i1l165
 19492                           
 19493                           ;interrupts.c: 223: preset_blink = 0;
 19494  02D9  01C2               	clrf	_preset_blink^(0+384)
 19495  02DA                     i1l6677:	
 19496                           
 19497                           ;interrupts.c: 224: LATBbits.LATB1 = 0;
 19498  02DA  0022               	movlb	2	; select bank2
 19499  02DB  108D               	bcf	13,1	;volatile
 19500  02DC                     i1l165:	
 19501  02DC  0020               	movlb	0	; select bank0
 19502  02DD  0842               	movf	??_isr+8,w
 19503  02DE  00FF               	movwf	127
 19504  02DF  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 19505  02E0  0009               	retfie
 19506  02E1                     __end_of_isr:	
 19507                           
 19508                           	psect	text71
 19509  24F5                     __ptext71:	
 19510 ;; *************** function i1_set_leds_top *****************
 19511 ;; Defined at:
 19512 ;;		line 16 in file "LEDs.c"
 19513 ;; Parameters:    Size  Location     Type
 19514 ;;  x               2    0[COMMON] int 
 19515 ;;  ledState        2    2[COMMON] int 
 19516 ;; Auto vars:     Size  Location     Type
 19517 ;;		None
 19518 ;; Return value:  Size  Location     Type
 19519 ;;                  1    wreg      void 
 19520 ;; Registers used:
 19521 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 19522 ;; Tracked objects:
 19523 ;;		On entry : 0/0
 19524 ;;		On exit  : 0/0
 19525 ;;		Unchanged: 0/0
 19526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19527 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19528 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19530 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19531 ;;Total ram usage:        4 bytes
 19532 ;; Hardware stack levels used:    1
 19533 ;; This function calls:
 19534 ;;		Nothing
 19535 ;; This function is called by:
 19536 ;;		_isr
 19537 ;; This function uses a non-reentrant model
 19538 ;;
 19539                           
 19540                           
 19541                           ;psect for function i1_set_leds_top
 19542  24F5                     i1_set_leds_top:	
 19543                           
 19544                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 19545                           
 19546                           ;incstack = 0
 19547                           ; Regs used in i1_set_leds_top: [wreg-fsr0h+status,2+status,0]
 19548  24F5  0027               	movlb	7	; select bank7
 19549  24F6  100C               	bcf	12,0	;volatile
 19550                           
 19551                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 19552  24F7  108C               	bcf	12,1	;volatile
 19553                           
 19554                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 19555  24F8  110C               	bcf	12,2	;volatile
 19556                           
 19557                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 19558  24F9  118C               	bcf	12,3	;volatile
 19559                           
 19560                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 19561  24FA  120C               	bcf	12,4	;volatile
 19562                           
 19563                           ;LEDs.c: 22: switch (x) {
 19564  24FB  2D20               	goto	i1l6555
 19565  24FC                     i1l6543:	
 19566                           ;LEDs.c: 23: case 1:
 19567                           
 19568                           
 19569                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 19570  24FC  0C72               	rrf	i1set_leds_top@ledState,w
 19571  24FD  1C03               	skipc
 19572  24FE  100C               	bcf	12,0	;volatile
 19573  24FF  1803               	skipnc
 19574  2500  140C               	bsf	12,0	;volatile
 19575                           
 19576                           ;LEDs.c: 25: break;
 19577  2501  0008               	return
 19578  2502                     i1l6545:	
 19579                           ;LEDs.c: 26: case 2:
 19580                           
 19581                           
 19582                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 19583  2502  0C72               	rrf	i1set_leds_top@ledState,w
 19584  2503  1C03               	skipc
 19585  2504  108C               	bcf	12,1	;volatile
 19586  2505  1803               	skipnc
 19587  2506  148C               	bsf	12,1	;volatile
 19588                           
 19589                           ;LEDs.c: 28: break;
 19590  2507  0008               	return
 19591  2508                     i1l6547:	
 19592                           ;LEDs.c: 29: case 3:
 19593                           
 19594                           
 19595                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 19596  2508  0C72               	rrf	i1set_leds_top@ledState,w
 19597  2509  1C03               	skipc
 19598  250A  110C               	bcf	12,2	;volatile
 19599  250B  1803               	skipnc
 19600  250C  150C               	bsf	12,2	;volatile
 19601                           
 19602                           ;LEDs.c: 31: break;
 19603  250D  0008               	return
 19604  250E                     i1l6549:	
 19605                           ;LEDs.c: 32: case 4:
 19606                           
 19607                           
 19608                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 19609  250E  0C72               	rrf	i1set_leds_top@ledState,w
 19610  250F  1C03               	skipc
 19611  2510  118C               	bcf	12,3	;volatile
 19612  2511  1803               	skipnc
 19613  2512  158C               	bsf	12,3	;volatile
 19614                           
 19615                           ;LEDs.c: 34: break;
 19616  2513  0008               	return
 19617  2514                     i1l6551:	
 19618                           ;LEDs.c: 35: case 5:
 19619                           
 19620                           
 19621                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 19622  2514  0C72               	rrf	i1set_leds_top@ledState,w
 19623  2515  1C03               	skipc
 19624  2516  120C               	bcf	12,4	;volatile
 19625  2517  1803               	skipnc
 19626  2518  160C               	bsf	12,4	;volatile
 19627                           
 19628                           ;LEDs.c: 39: break;
 19629                           
 19630                           ;LEDs.c: 38: case 6:
 19631                           
 19632                           ;LEDs.c: 37: break;
 19633  2519  0008               	return
 19634  251A                     i1l794:	
 19635                           ;LEDs.c: 40: case 100:
 19636                           
 19637                           
 19638                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 19639  251A  140C               	bsf	12,0	;volatile
 19640                           
 19641                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 19642  251B  148C               	bsf	12,1	;volatile
 19643                           
 19644                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 19645  251C  150C               	bsf	12,2	;volatile
 19646                           
 19647                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 19648  251D  158C               	bsf	12,3	;volatile
 19649                           
 19650                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 19651  251E  160C               	bsf	12,4	;volatile
 19652                           
 19653                           ;LEDs.c: 47: }
 19654                           
 19655                           ;LEDs.c: 46: break;
 19656  251F  0008               	return
 19657  2520                     i1l6555:	
 19658                           
 19659                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 19660                           ; Switch size 1, requested type "space"
 19661                           ; Number of cases is 1, Range of values is 0 to 0
 19662                           ; switch strategies available:
 19663                           ; Name         Instructions Cycles
 19664                           ; simple_byte            4     3 (average)
 19665                           ; direct_byte            8     6 (fixed)
 19666                           ; jumptable            260     6 (fixed)
 19667                           ;	Chosen strategy is simple_byte
 19668  2520  0871               	movf	i1set_leds_top@x+1,w
 19669  2521  3A00               	xorlw	0	; case 0
 19670  2522  1903               	skipnz
 19671  2523  2D25               	goto	i1l9323
 19672  2524  2D3C               	goto	i1l795
 19673  2525                     i1l9323:	
 19674                           
 19675                           ; Switch size 1, requested type "space"
 19676                           ; Number of cases is 7, Range of values is 1 to 100
 19677                           ; switch strategies available:
 19678                           ; Name         Instructions Cycles
 19679                           ; simple_byte           22    12 (average)
 19680                           ; direct_byte          209     9 (fixed)
 19681                           ; jumptable            263     9 (fixed)
 19682                           ;	Chosen strategy is simple_byte
 19683  2525  0870               	movf	i1set_leds_top@x,w
 19684  2526  3A01               	xorlw	1	; case 1
 19685  2527  1903               	skipnz
 19686  2528  2CFC               	goto	i1l6543
 19687  2529  3A03               	xorlw	3	; case 2
 19688  252A  1903               	skipnz
 19689  252B  2D02               	goto	i1l6545
 19690  252C  3A01               	xorlw	1	; case 3
 19691  252D  1903               	skipnz
 19692  252E  2D08               	goto	i1l6547
 19693  252F  3A07               	xorlw	7	; case 4
 19694  2530  1903               	skipnz
 19695  2531  2D0E               	goto	i1l6549
 19696  2532  3A01               	xorlw	1	; case 5
 19697  2533  1903               	skipnz
 19698  2534  2D14               	goto	i1l6551
 19699  2535  3A03               	xorlw	3	; case 6
 19700  2536  1903               	skipnz
 19701  2537  2D3C               	goto	i1l795
 19702  2538  3A62               	xorlw	98	; case 100
 19703  2539  1903               	skipnz
 19704  253A  2D1A               	goto	i1l794
 19705  253B  2D3C               	goto	i1l795
 19706  253C                     i1l795:	
 19707  253C  0008               	return
 19708  253D                     __end_ofi1_set_leds_top:	
 19709                           
 19710                           	psect	text72
 19711  2430                     __ptext72:	
 19712 ;; *************** function _modulation *****************
 19713 ;; Defined at:
 19714 ;;		line 222 in file "user.c"
 19715 ;; Parameters:    Size  Location     Type
 19716 ;;  x               4   14[BANK0 ] long 
 19717 ;;  y               4   18[BANK0 ] long 
 19718 ;; Auto vars:     Size  Location     Type
 19719 ;;		None
 19720 ;; Return value:  Size  Location     Type
 19721 ;;                  4   14[BANK0 ] long 
 19722 ;; Registers used:
 19723 ;;		wreg, status,2, status,0, pclath, cstack
 19724 ;; Tracked objects:
 19725 ;;		On entry : 0/0
 19726 ;;		On exit  : 0/0
 19727 ;;		Unchanged: 0/0
 19728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19729 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19731 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19732 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19733 ;;Total ram usage:       12 bytes
 19734 ;; Hardware stack levels used:    1
 19735 ;; Hardware stack levels required when called:    1
 19736 ;; This function calls:
 19737 ;;		i1___aldiv
 19738 ;;		i1___lmul
 19739 ;; This function is called by:
 19740 ;;		_isr
 19741 ;; This function uses a non-reentrant model
 19742 ;;
 19743                           
 19744                           
 19745                           ;psect for function _modulation
 19746  2430                     _modulation:	
 19747                           
 19748                           ;user.c: 225: return (127500 + (y * x)) / 1000;
 19749                           
 19750                           ;incstack = 0
 19751                           ; Regs used in _modulation: [wreg+status,2+status,0+pclath+cstack]
 19752  2430  3000               	movlw	0
 19753  2431  0020               	movlb	0	; select bank0
 19754  2432  00A3               	movwf	i1___aldiv@divisor+3
 19755  2433  3000               	movlw	0
 19756  2434  00A2               	movwf	i1___aldiv@divisor+2
 19757  2435  3003               	movlw	3
 19758  2436  00A1               	movwf	i1___aldiv@divisor+1
 19759  2437  30E8               	movlw	232
 19760  2438  00A0               	movwf	i1___aldiv@divisor
 19761  2439  300C               	movlw	12
 19762  243A  00B6               	movwf	??_modulation
 19763  243B  30F2               	movlw	242
 19764  243C  00B7               	movwf	??_modulation+1
 19765  243D  3001               	movlw	1
 19766  243E  00B8               	movwf	??_modulation+2
 19767  243F  3000               	movlw	0
 19768  2440  00B9               	movwf	??_modulation+3
 19769  2441  0835               	movf	modulation@y+3,w
 19770  2442  00F3               	movwf	i1___lmul@multiplier+3
 19771  2443  0834               	movf	modulation@y+2,w
 19772  2444  00F2               	movwf	i1___lmul@multiplier+2
 19773  2445  0833               	movf	modulation@y+1,w
 19774  2446  00F1               	movwf	i1___lmul@multiplier+1
 19775  2447  0832               	movf	modulation@y,w
 19776  2448  00F0               	movwf	i1___lmul@multiplier
 19777  2449  0831               	movf	modulation@x+3,w
 19778  244A  00F7               	movwf	i1___lmul@multiplicand+3
 19779  244B  0830               	movf	modulation@x+2,w
 19780  244C  00F6               	movwf	i1___lmul@multiplicand+2
 19781  244D  082F               	movf	modulation@x+1,w
 19782  244E  00F5               	movwf	i1___lmul@multiplicand+1
 19783  244F  082E               	movf	modulation@x,w
 19784  2450  00F4               	movwf	i1___lmul@multiplicand
 19785  2451  31A1  218B  31A4   	fcall	i1___lmul
 19786  2454  0870               	movf	?i1___lmul,w
 19787  2455  0020               	movlb	0	; select bank0
 19788  2456  07B6               	addwf	??_modulation,f
 19789  2457  0871               	movf	?i1___lmul+1,w
 19790  2458  3DB7               	addwfc	??_modulation+1,f
 19791  2459  0872               	movf	?i1___lmul+2,w
 19792  245A  3DB8               	addwfc	??_modulation+2,f
 19793  245B  0873               	movf	?i1___lmul+3,w
 19794  245C  3DB9               	addwfc	??_modulation+3,f
 19795  245D  0839               	movf	??_modulation+3,w
 19796  245E  00A7               	movwf	i1___aldiv@dividend+3
 19797  245F  0838               	movf	??_modulation+2,w
 19798  2460  00A6               	movwf	i1___aldiv@dividend+2
 19799  2461  0837               	movf	??_modulation+1,w
 19800  2462  00A5               	movwf	i1___aldiv@dividend+1
 19801  2463  0836               	movf	??_modulation,w
 19802  2464  00A4               	movwf	i1___aldiv@dividend
 19803  2465  3199  2174         	fcall	i1___aldiv
 19804  2467  0020               	movlb	0	; select bank0
 19805  2468  0823               	movf	?i1___aldiv+3,w
 19806  2469  00B1               	movwf	?_modulation+3
 19807  246A  0822               	movf	?i1___aldiv+2,w
 19808  246B  00B0               	movwf	?_modulation+2
 19809  246C  0821               	movf	?i1___aldiv+1,w
 19810  246D  00AF               	movwf	?_modulation+1
 19811  246E  0820               	movf	?i1___aldiv,w
 19812  246F  00AE               	movwf	?_modulation
 19813  2470  0008               	return
 19814  2471                     __end_of_modulation:	
 19815                           
 19816                           	psect	text73
 19817  218B                     __ptext73:	
 19818 ;; *************** function i1___lmul *****************
 19819 ;; Defined at:
 19820 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 19821 ;; Parameters:    Size  Location     Type
 19822 ;;  multiplier      4    0[COMMON] unsigned long 
 19823 ;;  multiplicand    4    4[COMMON] unsigned long 
 19824 ;; Auto vars:     Size  Location     Type
 19825 ;;  __lmul          4    8[COMMON] unsigned long 
 19826 ;; Return value:  Size  Location     Type
 19827 ;;                  4    0[COMMON] unsigned long 
 19828 ;; Registers used:
 19829 ;;		wreg, status,2, status,0
 19830 ;; Tracked objects:
 19831 ;;		On entry : 0/0
 19832 ;;		On exit  : 0/0
 19833 ;;		Unchanged: 0/0
 19834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19835 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19836 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19838 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19839 ;;Total ram usage:       12 bytes
 19840 ;; Hardware stack levels used:    1
 19841 ;; This function calls:
 19842 ;;		Nothing
 19843 ;; This function is called by:
 19844 ;;		_modulation
 19845 ;; This function uses a non-reentrant model
 19846 ;;
 19847                           
 19848                           
 19849                           ;psect for function i1___lmul
 19850  218B                     i1___lmul:	
 19851                           
 19852                           ;incstack = 0
 19853                           ; Regs used in i1___lmul: [wreg+status,2+status,0]
 19854  218B  3000               	movlw	0
 19855  218C  00FB               	movwf	i1___lmul@product+3
 19856  218D  3000               	movlw	0
 19857  218E  00FA               	movwf	i1___lmul@product+2
 19858  218F  3000               	movlw	0
 19859  2190  00F9               	movwf	i1___lmul@product+1
 19860  2191  3000               	movlw	0
 19861  2192  00F8               	movwf	i1___lmul@product
 19862  2193                     i1l5857:	
 19863  2193  1C70               	btfss	i1___lmul@multiplier,0
 19864  2194  299D               	goto	i1l5861
 19865  2195  0874               	movf	i1___lmul@multiplicand,w
 19866  2196  07F8               	addwf	i1___lmul@product,f
 19867  2197  0875               	movf	i1___lmul@multiplicand+1,w
 19868  2198  3DF9               	addwfc	i1___lmul@product+1,f
 19869  2199  0876               	movf	i1___lmul@multiplicand+2,w
 19870  219A  3DFA               	addwfc	i1___lmul@product+2,f
 19871  219B  0877               	movf	i1___lmul@multiplicand+3,w
 19872  219C  3DFB               	addwfc	i1___lmul@product+3,f
 19873  219D                     i1l5861:	
 19874  219D  3001               	movlw	1
 19875  219E                     u510_25:	
 19876  219E  35F4               	lslf	i1___lmul@multiplicand,f
 19877  219F  0DF5               	rlf	i1___lmul@multiplicand+1,f
 19878  21A0  0DF6               	rlf	i1___lmul@multiplicand+2,f
 19879  21A1  0DF7               	rlf	i1___lmul@multiplicand+3,f
 19880  21A2  0B89               	decfsz	9,f
 19881  21A3  299E               	goto	u510_25
 19882  21A4  3001               	movlw	1
 19883  21A5                     u511_25:	
 19884  21A5  36F3               	lsrf	i1___lmul@multiplier+3,f
 19885  21A6  0CF2               	rrf	i1___lmul@multiplier+2,f
 19886  21A7  0CF1               	rrf	i1___lmul@multiplier+1,f
 19887  21A8  0CF0               	rrf	i1___lmul@multiplier,f
 19888  21A9  0B89               	decfsz	9,f
 19889  21AA  29A5               	goto	u511_25
 19890  21AB  0873               	movf	i1___lmul@multiplier+3,w
 19891  21AC  0472               	iorwf	i1___lmul@multiplier+2,w
 19892  21AD  0471               	iorwf	i1___lmul@multiplier+1,w
 19893  21AE  0470               	iorwf	i1___lmul@multiplier,w
 19894  21AF  1D03               	skipz
 19895  21B0  2993               	goto	i1l5857
 19896  21B1  087B               	movf	i1___lmul@product+3,w
 19897  21B2  00F3               	movwf	?i1___lmul+3
 19898  21B3  087A               	movf	i1___lmul@product+2,w
 19899  21B4  00F2               	movwf	?i1___lmul+2
 19900  21B5  0879               	movf	i1___lmul@product+1,w
 19901  21B6  00F1               	movwf	?i1___lmul+1
 19902  21B7  0878               	movf	i1___lmul@product,w
 19903  21B8  00F0               	movwf	?i1___lmul
 19904  21B9  0008               	return
 19905  21BA                     __end_ofi1___lmul:	
 19906                           
 19907                           	psect	text74
 19908  1974                     __ptext74:	
 19909 ;; *************** function i1___aldiv *****************
 19910 ;; Defined at:
 19911 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
 19912 ;; Parameters:    Size  Location     Type
 19913 ;;  divisor         4    0[BANK0 ] long 
 19914 ;;  dividend        4    4[BANK0 ] long 
 19915 ;; Auto vars:     Size  Location     Type
 19916 ;;  __aldiv         4   10[BANK0 ] long 
 19917 ;;  __aldiv         1    9[BANK0 ] unsigned char 
 19918 ;;  __aldiv         1    8[BANK0 ] unsigned char 
 19919 ;; Return value:  Size  Location     Type
 19920 ;;                  4    0[BANK0 ] long 
 19921 ;; Registers used:
 19922 ;;		wreg, status,2, status,0
 19923 ;; Tracked objects:
 19924 ;;		On entry : 0/0
 19925 ;;		On exit  : 0/0
 19926 ;;		Unchanged: 0/0
 19927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19928 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19929 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19930 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19931 ;;      Totals:         1      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19932 ;;Total ram usage:       15 bytes
 19933 ;; Hardware stack levels used:    1
 19934 ;; This function calls:
 19935 ;;		Nothing
 19936 ;; This function is called by:
 19937 ;;		_modulation
 19938 ;; This function uses a non-reentrant model
 19939 ;;
 19940                           
 19941                           
 19942                           ;psect for function i1___aldiv
 19943  1974                     i1___aldiv:	
 19944                           
 19945                           ;incstack = 0
 19946                           ; Regs used in i1___aldiv: [wreg+status,2+status,0]
 19947  1974  0020               	movlb	0	; select bank0
 19948  1975  01A9               	clrf	i1___aldiv@sign
 19949  1976  1FA3               	btfss	i1___aldiv@divisor+3,7
 19950  1977  2985               	goto	i1l1983
 19951  1978  09A0               	comf	i1___aldiv@divisor,f
 19952  1979  09A1               	comf	i1___aldiv@divisor+1,f
 19953  197A  09A2               	comf	i1___aldiv@divisor+2,f
 19954  197B  09A3               	comf	i1___aldiv@divisor+3,f
 19955  197C  0AA0               	incf	i1___aldiv@divisor,f
 19956  197D  1903               	skipnz
 19957  197E  0AA1               	incf	i1___aldiv@divisor+1,f
 19958  197F  1903               	skipnz
 19959  1980  0AA2               	incf	i1___aldiv@divisor+2,f
 19960  1981  1903               	skipnz
 19961  1982  0AA3               	incf	i1___aldiv@divisor+3,f
 19962  1983  01A9               	clrf	i1___aldiv@sign
 19963  1984  0AA9               	incf	i1___aldiv@sign,f
 19964  1985                     i1l1983:	
 19965  1985  1FA7               	btfss	i1___aldiv@dividend+3,7
 19966  1986  2996               	goto	i1l5879
 19967  1987  09A4               	comf	i1___aldiv@dividend,f
 19968  1988  09A5               	comf	i1___aldiv@dividend+1,f
 19969  1989  09A6               	comf	i1___aldiv@dividend+2,f
 19970  198A  09A7               	comf	i1___aldiv@dividend+3,f
 19971  198B  0AA4               	incf	i1___aldiv@dividend,f
 19972  198C  1903               	skipnz
 19973  198D  0AA5               	incf	i1___aldiv@dividend+1,f
 19974  198E  1903               	skipnz
 19975  198F  0AA6               	incf	i1___aldiv@dividend+2,f
 19976  1990  1903               	skipnz
 19977  1991  0AA7               	incf	i1___aldiv@dividend+3,f
 19978  1992  3001               	movlw	1
 19979  1993  00FC               	movwf	??i1___aldiv
 19980  1994  087C               	movf	??i1___aldiv,w
 19981  1995  06A9               	xorwf	i1___aldiv@sign,f
 19982  1996                     i1l5879:	
 19983  1996  3000               	movlw	0
 19984  1997  00AD               	movwf	i1___aldiv@quotient+3
 19985  1998  3000               	movlw	0
 19986  1999  00AC               	movwf	i1___aldiv@quotient+2
 19987  199A  3000               	movlw	0
 19988  199B  00AB               	movwf	i1___aldiv@quotient+1
 19989  199C  3000               	movlw	0
 19990  199D  00AA               	movwf	i1___aldiv@quotient
 19991  199E  0823               	movf	i1___aldiv@divisor+3,w
 19992  199F  0422               	iorwf	i1___aldiv@divisor+2,w
 19993  19A0  0421               	iorwf	i1___aldiv@divisor+1,w
 19994  19A1  0420               	iorwf	i1___aldiv@divisor,w
 19995  19A2  1903               	skipnz
 19996  19A3  29DF               	goto	i1l5901
 19997  19A4  01A8               	clrf	i1___aldiv@counter
 19998  19A5  0AA8               	incf	i1___aldiv@counter,f
 19999  19A6                     i1l5887:	
 20000  19A6  1BA3               	btfsc	i1___aldiv@divisor+3,7
 20001  19A7  29B4               	goto	i1l5889
 20002  19A8  3001               	movlw	1
 20003  19A9                     u516_25:	
 20004  19A9  35A0               	lslf	i1___aldiv@divisor,f
 20005  19AA  0DA1               	rlf	i1___aldiv@divisor+1,f
 20006  19AB  0DA2               	rlf	i1___aldiv@divisor+2,f
 20007  19AC  0DA3               	rlf	i1___aldiv@divisor+3,f
 20008  19AD  0B89               	decfsz	9,f
 20009  19AE  29A9               	goto	u516_25
 20010  19AF  3001               	movlw	1
 20011  19B0  00FC               	movwf	??i1___aldiv
 20012  19B1  087C               	movf	??i1___aldiv,w
 20013  19B2  07A8               	addwf	i1___aldiv@counter,f
 20014  19B3  29A6               	goto	i1l5887
 20015  19B4                     i1l5889:	
 20016  19B4  3001               	movlw	1
 20017  19B5                     u518_25:	
 20018  19B5  35AA               	lslf	i1___aldiv@quotient,f
 20019  19B6  0DAB               	rlf	i1___aldiv@quotient+1,f
 20020  19B7  0DAC               	rlf	i1___aldiv@quotient+2,f
 20021  19B8  0DAD               	rlf	i1___aldiv@quotient+3,f
 20022  19B9  0B89               	decfsz	9,f
 20023  19BA  29B5               	goto	u518_25
 20024  19BB  0823               	movf	i1___aldiv@divisor+3,w
 20025  19BC  0227               	subwf	i1___aldiv@dividend+3,w
 20026  19BD  1D03               	skipz
 20027  19BE  29C9               	goto	u519_25
 20028  19BF  0822               	movf	i1___aldiv@divisor+2,w
 20029  19C0  0226               	subwf	i1___aldiv@dividend+2,w
 20030  19C1  1D03               	skipz
 20031  19C2  29C9               	goto	u519_25
 20032  19C3  0821               	movf	i1___aldiv@divisor+1,w
 20033  19C4  0225               	subwf	i1___aldiv@dividend+1,w
 20034  19C5  1D03               	skipz
 20035  19C6  29C9               	goto	u519_25
 20036  19C7  0820               	movf	i1___aldiv@divisor,w
 20037  19C8  0224               	subwf	i1___aldiv@dividend,w
 20038  19C9                     u519_25:	
 20039  19C9  1C03               	skipc
 20040  19CA  29D4               	goto	i1l5897
 20041  19CB  0820               	movf	i1___aldiv@divisor,w
 20042  19CC  02A4               	subwf	i1___aldiv@dividend,f
 20043  19CD  0821               	movf	i1___aldiv@divisor+1,w
 20044  19CE  3BA5               	subwfb	i1___aldiv@dividend+1,f
 20045  19CF  0822               	movf	i1___aldiv@divisor+2,w
 20046  19D0  3BA6               	subwfb	i1___aldiv@dividend+2,f
 20047  19D1  0823               	movf	i1___aldiv@divisor+3,w
 20048  19D2  3BA7               	subwfb	i1___aldiv@dividend+3,f
 20049  19D3  142A               	bsf	i1___aldiv@quotient,0
 20050  19D4                     i1l5897:	
 20051  19D4  3001               	movlw	1
 20052  19D5                     u520_25:	
 20053  19D5  36A3               	lsrf	i1___aldiv@divisor+3,f
 20054  19D6  0CA2               	rrf	i1___aldiv@divisor+2,f
 20055  19D7  0CA1               	rrf	i1___aldiv@divisor+1,f
 20056  19D8  0CA0               	rrf	i1___aldiv@divisor,f
 20057  19D9  0B89               	decfsz	9,f
 20058  19DA  29D5               	goto	u520_25
 20059  19DB  3001               	movlw	1
 20060  19DC  02A8               	subwf	i1___aldiv@counter,f
 20061  19DD  1D03               	btfss	3,2
 20062  19DE  29B4               	goto	i1l5889
 20063  19DF                     i1l5901:	
 20064  19DF  0829               	movf	i1___aldiv@sign,w
 20065  19E0  1903               	btfsc	3,2
 20066  19E1  29ED               	goto	i1l5905
 20067  19E2  09AA               	comf	i1___aldiv@quotient,f
 20068  19E3  09AB               	comf	i1___aldiv@quotient+1,f
 20069  19E4  09AC               	comf	i1___aldiv@quotient+2,f
 20070  19E5  09AD               	comf	i1___aldiv@quotient+3,f
 20071  19E6  0AAA               	incf	i1___aldiv@quotient,f
 20072  19E7  1903               	skipnz
 20073  19E8  0AAB               	incf	i1___aldiv@quotient+1,f
 20074  19E9  1903               	skipnz
 20075  19EA  0AAC               	incf	i1___aldiv@quotient+2,f
 20076  19EB  1903               	skipnz
 20077  19EC  0AAD               	incf	i1___aldiv@quotient+3,f
 20078  19ED                     i1l5905:	
 20079  19ED  082D               	movf	i1___aldiv@quotient+3,w
 20080  19EE  00A3               	movwf	?i1___aldiv+3
 20081  19EF  082C               	movf	i1___aldiv@quotient+2,w
 20082  19F0  00A2               	movwf	?i1___aldiv+2
 20083  19F1  082B               	movf	i1___aldiv@quotient+1,w
 20084  19F2  00A1               	movwf	?i1___aldiv+1
 20085  19F3  082A               	movf	i1___aldiv@quotient,w
 20086  19F4  00A0               	movwf	?i1___aldiv
 20087  19F5  0008               	return
 20088  19F6                     __end_ofi1___aldiv:	
 20089                           
 20090                           	psect	text75
 20091  2702                     __ptext75:	
 20092 ;; *************** function ___awdiv *****************
 20093 ;; Defined at:
 20094 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 20095 ;; Parameters:    Size  Location     Type
 20096 ;;  divisor         2    0[COMMON] int 
 20097 ;;  dividend        2    2[COMMON] int 
 20098 ;; Auto vars:     Size  Location     Type
 20099 ;;  quotient        2    7[COMMON] int 
 20100 ;;  sign            1    6[COMMON] unsigned char 
 20101 ;;  counter         1    5[COMMON] unsigned char 
 20102 ;; Return value:  Size  Location     Type
 20103 ;;                  2    0[COMMON] int 
 20104 ;; Registers used:
 20105 ;;		wreg, status,2, status,0
 20106 ;; Tracked objects:
 20107 ;;		On entry : 0/0
 20108 ;;		On exit  : 0/0
 20109 ;;		Unchanged: 0/0
 20110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20111 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20112 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20113 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20114 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20115 ;;Total ram usage:        9 bytes
 20116 ;; Hardware stack levels used:    1
 20117 ;; This function calls:
 20118 ;;		Nothing
 20119 ;; This function is called by:
 20120 ;;		_isr
 20121 ;;		_USARTWriteInt
 20122 ;; This function uses a non-reentrant model
 20123 ;;
 20124                           
 20125                           
 20126                           ;psect for function ___awdiv
 20127  2702                     ___awdiv:	
 20128                           
 20129                           ;incstack = 0
 20130                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 20131  2702  01F6               	clrf	___awdiv@sign
 20132  2703  1FF1               	btfss	___awdiv@divisor+1,7
 20133  2704  2F0C               	goto	i1l6505
 20134  2705  09F0               	comf	___awdiv@divisor,f
 20135  2706  09F1               	comf	___awdiv@divisor+1,f
 20136  2707  0AF0               	incf	___awdiv@divisor,f
 20137  2708  1903               	skipnz
 20138  2709  0AF1               	incf	___awdiv@divisor+1,f
 20139  270A  01F6               	clrf	___awdiv@sign
 20140  270B  0AF6               	incf	___awdiv@sign,f
 20141  270C                     i1l6505:	
 20142  270C  1FF3               	btfss	___awdiv@dividend+1,7
 20143  270D  2F17               	goto	i1l6511
 20144  270E  09F2               	comf	___awdiv@dividend,f
 20145  270F  09F3               	comf	___awdiv@dividend+1,f
 20146  2710  0AF2               	incf	___awdiv@dividend,f
 20147  2711  1903               	skipnz
 20148  2712  0AF3               	incf	___awdiv@dividend+1,f
 20149  2713  3001               	movlw	1
 20150  2714  00F4               	movwf	??___awdiv
 20151  2715  0874               	movf	??___awdiv,w
 20152  2716  06F6               	xorwf	___awdiv@sign,f
 20153  2717                     i1l6511:	
 20154  2717  01F7               	clrf	___awdiv@quotient
 20155  2718  01F8               	clrf	___awdiv@quotient+1
 20156  2719  0870               	movf	___awdiv@divisor,w
 20157  271A  0471               	iorwf	___awdiv@divisor+1,w
 20158  271B  1903               	btfsc	3,2
 20159  271C  2F46               	goto	i1l6533
 20160  271D  01F5               	clrf	___awdiv@counter
 20161  271E  0AF5               	incf	___awdiv@counter,f
 20162  271F                     i1l6521:	
 20163  271F  1BF1               	btfsc	___awdiv@divisor+1,7
 20164  2720  2F2B               	goto	i1l6523
 20165  2721  3001               	movlw	1
 20166  2722                     u625_25:	
 20167  2722  35F0               	lslf	___awdiv@divisor,f
 20168  2723  0DF1               	rlf	___awdiv@divisor+1,f
 20169  2724  0B89               	decfsz	9,f
 20170  2725  2F22               	goto	u625_25
 20171  2726  3001               	movlw	1
 20172  2727  00F4               	movwf	??___awdiv
 20173  2728  0874               	movf	??___awdiv,w
 20174  2729  07F5               	addwf	___awdiv@counter,f
 20175  272A  2F1F               	goto	i1l6521
 20176  272B                     i1l6523:	
 20177  272B  3001               	movlw	1
 20178  272C                     u627_25:	
 20179  272C  35F7               	lslf	___awdiv@quotient,f
 20180  272D  0DF8               	rlf	___awdiv@quotient+1,f
 20181  272E  0B89               	decfsz	9,f
 20182  272F  2F2C               	goto	u627_25
 20183  2730  0871               	movf	___awdiv@divisor+1,w
 20184  2731  0273               	subwf	___awdiv@dividend+1,w
 20185  2732  1D03               	skipz
 20186  2733  2F36               	goto	u628_25
 20187  2734  0870               	movf	___awdiv@divisor,w
 20188  2735  0272               	subwf	___awdiv@dividend,w
 20189  2736                     u628_25:	
 20190  2736  1C03               	skipc
 20191  2737  2F3D               	goto	i1l6529
 20192  2738  0870               	movf	___awdiv@divisor,w
 20193  2739  02F2               	subwf	___awdiv@dividend,f
 20194  273A  0871               	movf	___awdiv@divisor+1,w
 20195  273B  3BF3               	subwfb	___awdiv@dividend+1,f
 20196  273C  1477               	bsf	___awdiv@quotient,0
 20197  273D                     i1l6529:	
 20198  273D  3001               	movlw	1
 20199  273E                     u629_25:	
 20200  273E  36F1               	lsrf	___awdiv@divisor+1,f
 20201  273F  0CF0               	rrf	___awdiv@divisor,f
 20202  2740  0B89               	decfsz	9,f
 20203  2741  2F3E               	goto	u629_25
 20204  2742  3001               	movlw	1
 20205  2743  02F5               	subwf	___awdiv@counter,f
 20206  2744  1D03               	btfss	3,2
 20207  2745  2F2B               	goto	i1l6523
 20208  2746                     i1l6533:	
 20209  2746  0876               	movf	___awdiv@sign,w
 20210  2747  1903               	btfsc	3,2
 20211  2748  2F4E               	goto	i1l6537
 20212  2749  09F7               	comf	___awdiv@quotient,f
 20213  274A  09F8               	comf	___awdiv@quotient+1,f
 20214  274B  0AF7               	incf	___awdiv@quotient,f
 20215  274C  1903               	skipnz
 20216  274D  0AF8               	incf	___awdiv@quotient+1,f
 20217  274E                     i1l6537:	
 20218  274E  0878               	movf	___awdiv@quotient+1,w
 20219  274F  00F1               	movwf	?___awdiv+1
 20220  2750  0877               	movf	___awdiv@quotient,w
 20221  2751  00F0               	movwf	?___awdiv
 20222  2752  0008               	return
 20223  2753                     __end_of___awdiv:	
 20224  007E                     btemp	set	126	;btemp
 20225  007E                     int$flags	set	126
 20226  007E                     wtemp	set	126
 20227  007E                     wtemp0	set	126
 20228  0080                     wtemp1	set	128
 20229  0082                     wtemp2	set	130
 20230  0084                     wtemp3	set	132
 20231  0086                     wtemp4	set	134
 20232  0088                     wtemp5	set	136
 20233  007F                     wtemp6	set	127
 20234  007E                     ttemp	set	126
 20235  007E                     ttemp0	set	126
 20236  0081                     ttemp1	set	129
 20237  0084                     ttemp2	set	132
 20238  0087                     ttemp3	set	135
 20239  007F                     ttemp4	set	127
 20240  007E                     ltemp	set	126
 20241  007E                     ltemp0	set	126
 20242  0082                     ltemp1	set	130
 20243  0086                     ltemp2	set	134
 20244  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    84
    Data        48
    BSS         289
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     37      74
    BANK1            80     80      80
    BANK2            80     74      77
    BANK3            80     14      79
    BANK4            80      9      68
    BANK5            80      0      44
    BANK6            80      0      64
    BANK7            80      0      64
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           30      0       0
    BANK12            0      0       0
    BANK13            0      0       0
    BANK14            0      0       0
    BANK15            0      0       0
    BANK16            0      0       0
    BANK17            0      0       0
    BANK18            0      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK2[2]), floor@expon(BANK2[2]), trunc@expon(BANK2[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), sin@coeff_a(CODE[15]), sin@coeff_b(CODE[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _modulation->i1___aldiv
    i1___aldiv->i1___lmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _isr->_modulation
    _modulation->i1___aldiv

Critical Paths under _main in BANK1

    _main->_map
    _update_selectMode->_setExpressionDisplay
    _update_selectMode->_setPresetDisplay
    _updateSwitchTap->_setDoublePressState
    _updateSwitchBypass->_setDoublePressState
    _setDoublePressState->_showSave
    _showSave->_ring_tactiles
    _solidring_tactiles->_wait_ms
    _ring_tactiles->_wait_ms
    _setPedalMode->_setExpressionDisplay
    _setPedalMode->_setPresetDisplay
    _setPresetDisplay->_set_leds_top
    _setExpressionDisplay->_set_leds_top
    _resetRingLEDs->_set_leds_top
    ___lltoft->___ftpack
    _read_top_tactile->_wait_ms
    _read_bottom_tactile->_wait_ms
    _map->___ftdiv
    _initSwitchBypass->_setSwitchBypassState
    _setSwitchBypassState->_wait_ms
    _wait_ms->___lmul
    ___fttol->_map
    ___ftmul->___awtoft
    ___ftadd->___ftneg
    ___ftneg->___ftmul
    ___ftdiv->___ftadd
    ___awtoft->___ftpack
    _ReadSavedSettings->_set_leds_top

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_scaleA100kPot
    _main->_scaleA10kPot
    _main->_scaleiA10kPot
    _updateModulationArray->_modSquare
    _modTri->___fttol
    _modSquare->_modSin
    _modSin->___wmul
    _modSawRev->_modSaw
    _modSaw->___fttol
    _set_subdivision->_trunc
    _trunc->___altoft
    _scaleiA10kPot->_pow
    _scaleA10kPot->_pow
    _scaleA100kPot->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _calcSinArray->_sin
    _sin->___ftsub
    _floor->___altoft
    ___altoft->___fttol
    _eval_poly->___wmul
    ___wmul->___fttol
    ___ftsub->_floor

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_scaleA100kPot
    _main->_scaleA10kPot
    _main->_scaleiA10kPot

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _isr in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _isr in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _isr in BANK18

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0  855326
                                              9 BANK3      5     5      0
                                              0 BANK4      9     9      0
                _ConfigureOscillator
                            _InitApp
                     _InitializeTaps
                  _ReadSavedSettings
                          _USARTInit
                           ___awtoft
                            ___fttol
                        _adc_convert
                       _calcSinArray
                   _initSwitchBypass
                                _map
                _read_bottom_tactile
                   _read_top_tactile
                      _scaleA100kPot
                       _scaleA10kPot
                      _scaleiA10kPot
                    _set_subdivision
              _updateModulationArray
                 _updateSwitchBypass
                    _updateSwitchTap
                        _update_mode
                  _update_selectMode
 ---------------------------------------------------------------------------------
 (1) _update_selectMode                                    1     1      0    5976
                                              7 BANK1      1     1      0
               _setExpressionDisplay
                   _setPresetDisplay
 ---------------------------------------------------------------------------------
 (1) _update_mode                                          1     1      0   11828
                                              7 BANK1      1     1      0
                      _resetRingLEDs
                       _setPedalMode
 ---------------------------------------------------------------------------------
 (1) _updateSwitchTap                                      9     9      0   27947
                                             28 BANK1      9     9      0
                            ___aldiv
                _setDoublePressState
                    _setLongTapState
 ---------------------------------------------------------------------------------
 (2) _setLongTapState                                      4     2      2     247
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     683
                                              0 BANK1     15     7      8
 ---------------------------------------------------------------------------------
 (1) _updateSwitchBypass                                   2     2      0   29397
                                             28 BANK1      2     2      0
                _setDoublePressState
                   _setFeedbackState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setFeedbackState                                     4     2      2     247
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) _setDoublePressState                                  4     2      2   26779
                                             24 BANK1      4     2      2
                      _resetRingLEDs
                       _setPedalMode
                   _setPresetDisplay
                           _showSave
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _showSave                                             1     1      0    9777
                                             23 BANK1      1     1      0
                      _ring_tactiles
                 _solidring_tactiles
 ---------------------------------------------------------------------------------
 (4) _solidring_tactiles                                   3     3      0    4822
                                             18 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (4) _ring_tactiles                                        5     5      0    4955
                                             18 BANK1      5     5      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _setPedalMode                                         0     0      0    8902
                      _resetRingLEDs
               _setExpressionDisplay
                   _setPresetDisplay
 ---------------------------------------------------------------------------------
 (2) _setPresetDisplay                                     3     3      0    3019
                                              4 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (2) _setExpressionDisplay                                 3     3      0    2957
                                              4 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _resetRingLEDs                                        0     0      0    2926
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (1) _updateModulationArray                                8     8      0  159170
                                             48 BANK2      8     8      0
                           ___awtoft
                             ___wmul
                             _modSaw
                          _modSawRev
                             _modSin
                          _modSquare
                             _modTri
 ---------------------------------------------------------------------------------
 (2) _modTri                                              18    12      6   29485
                                             14 BANK2     18    12      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) _modSquare                                            8     2      6   33820
                                             40 BANK2      8     2      6
                           ___awtoft (ARG)
                             ___ftge
                             _modSin
 ---------------------------------------------------------------------------------
 (3) _modSin                                              20    14      6   30569
                                             20 BANK2     20    14      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _modSawRev                                            8     2      6   29759
                                             37 BANK2      8     2      6
                           ___awtoft (ARG)
                             _modSaw
 ---------------------------------------------------------------------------------
 (3) _modSaw                                              23    17      6   29543
                                             14 BANK2     23    17      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _set_subdivision                                     12     8      4   19788
                                             31 BANK2     12     8      4
                           ___awtoft
                            ___ftmul
                            ___fttol
                              _trunc
 ---------------------------------------------------------------------------------
 (2) _trunc                                                9     6      3    5650
                                             22 BANK2      9     6      3
                           ___altoft
                           ___awtoft (ARG)
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (1) _scaleiA10kPot                                       12     9      3  162066
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (1) _scaleA10kPot                                        12     9      3  151724
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (1) _scaleA100kPot                                       12     9      3  151773
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (2) _pow                                                 18    12      6  135959
                                             53 BANK2     18    12      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  6     3      3   42410
                                             30 BANK2      6     3      3
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                 13    10      3   75207
                                             40 BANK2     13    10      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                               10     5      5    5741
                                             30 BANK2     10     5      5
                             ___ftge
                            ___ftneg
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    2763
                                              8 BANK1      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _read_top_tactile                                     1     1      0    3879
                                             18 BANK1      1     1      0
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _read_bottom_tactile                                  1     1      0    2709
                                             18 BANK1      1     1      0
                    _set_leds_bottom
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _map                                                 18     3     15   25638
                                             62 BANK1     18     3     15
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (1) _initSwitchBypass                                     2     2      0    2405
                                             22 BANK1      2     2      0
               _getSwitchBypassState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setSwitchBypassState                                 4     2      2    2371
                                             18 BANK1      4     2      2
            _updateSwitchBypassState
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _wait_ms                                              6     4      2    1831
                                             12 BANK1      6     4      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     374
                                              0 BANK1     12     4      8
 ---------------------------------------------------------------------------------
 (3) _updateSwitchBypassState                              2     0      2      77
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _getSwitchBypassState                                 2     0      2       0
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _calcSinArray                                         9     9      0   91240
                                             51 BANK2      9     9      0
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                             ___wmul
                                _sin
 ---------------------------------------------------------------------------------
 (2) _sin                                                 14    11      3   71601
                                             37 BANK2     14    11      3
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                          _eval_poly
                              _floor
 ---------------------------------------------------------------------------------
 (4) _floor                                                9     6      3   16942
                                             22 BANK2      9     6      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                6     2      4     784
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4    1603
                                              0 BANK2     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                                _map (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    2970
                                              0 BANK1      9     3      6
 ---------------------------------------------------------------------------------
 (3) ___altoft                                             8     4      4    2942
                                             14 BANK2      8     4      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           10     3      7   18011
                                             20 BANK2     10     3      7
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1060
                                             14 BANK2      6     2      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    7652
                                             14 BANK1     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    8679
                                             31 BANK2      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
                              _floor (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    8121
                                             33 BANK1     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3    2221
                                             30 BANK1      3     0      3
                            ___ftmul (ARG)
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    6238
                                             46 BANK1     16    10      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    4488
                                              8 BANK1      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2584
                                              0 BANK1      8     3      5
 ---------------------------------------------------------------------------------
 (1) _adc_convert                                          4     2      2      31
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (1) _USARTInit                                            3     1      2     108
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (1) _ReadSavedSettings                                    1     1      0    3253
                                              4 BANK1      1     1      0
                     _FLASH_ReadWord
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _set_leds_top                                         4     0      4    2048
                                              0 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 (3) _set_leds_bottom                                      2     0      2     878
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadWord                                       3     1      2     327
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (1) _InitializeTaps                                       3     3      0      99
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
                           _init_adc
                           _init_pwm
 ---------------------------------------------------------------------------------
 (2) _init_pwm                                             0     0      0       0
                        _init_timer0
                        _init_timer2
 ---------------------------------------------------------------------------------
 (3) _init_timer2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                 11    11      0    1485
                                             26 BANK0     11    11      0
                            ___awdiv
                         _modulation
                     i1_set_leds_top
 ---------------------------------------------------------------------------------
 (8) i1_set_leds_top                                       4     0      4     236
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (8) _modulation                                          12     4      8     668
                                             14 BANK0     12     4      8
                          i1___aldiv
                           i1___lmul
 ---------------------------------------------------------------------------------
 (9) i1___lmul                                            12     4      8     144
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (9) i1___aldiv                                           15     7      8     352
                                             12 COMMON     1     1      0
                                              0 BANK0     14     6      8
                           i1___lmul (ARG)
 ---------------------------------------------------------------------------------
 (8) ___awdiv                                              9     5      4     556
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _init_adc
     _init_pwm
       _init_timer0
       _init_timer2
   _InitializeTaps
   _ReadSavedSettings
     _FLASH_ReadWord
     _set_leds_bottom
     _set_leds_top
   _USARTInit
   ___awtoft
     ___ftpack
   ___fttol
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     _map (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
   _adc_convert
   _calcSinArray
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___wmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _sin
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftsub
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _floor (ARG)
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
       _eval_poly
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
       _floor
         ___altoft
           ___ftpack
           ___fttol (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _frexp
   _initSwitchBypass
     _getSwitchBypassState
     _setSwitchBypassState
       _updateSwitchBypassState
       _wait_ms
         ___lmul
   _map
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
   _read_bottom_tactile
     _set_leds_bottom
     _wait_ms
       ___lmul
   _read_top_tactile
     _set_leds_top
     _wait_ms
       ___lmul
   _scaleA100kPot
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _frexp
   _scaleA10kPot
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _frexp
   _scaleiA10kPot
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _frexp
   _set_subdivision
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _trunc
       ___altoft
         ___ftpack
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       _frexp (ARG)
   _updateModulationArray
     ___awtoft
       ___ftpack
     ___wmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _modSaw
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _modSawRev
       ___awtoft (ARG)
         ___ftpack
       _modSaw (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
     _modSin
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___wmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
     _modSquare
       ___awtoft (ARG)
         ___ftpack
       ___ftge (ARG)
       _modSin (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
     _modTri
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
   _updateSwitchBypass
     _setDoublePressState
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setPedalMode
         _resetRingLEDs
           _set_leds_bottom
           _set_leds_top
         _setExpressionDisplay
           _set_leds_bottom
           _set_leds_top
         _setPresetDisplay
           _set_leds_bottom
           _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
       _showSave
         _ring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
         _solidring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
       _wait_ms
         ___lmul
     _setFeedbackState
     _setSwitchBypassState
       _updateSwitchBypassState
       _wait_ms
         ___lmul
   _updateSwitchTap
     ___aldiv
     _setDoublePressState
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setPedalMode
         _resetRingLEDs
           _set_leds_bottom
           _set_leds_top
         _setExpressionDisplay
           _set_leds_bottom
           _set_leds_top
         _setPresetDisplay
           _set_leds_bottom
           _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
       _showSave
         _ring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
         _solidring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
       _wait_ms
         ___lmul
     _setLongTapState
   _update_mode
     _resetRingLEDs
       _set_leds_bottom
       _set_leds_top
     _setPedalMode
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setExpressionDisplay
         _set_leds_bottom
         _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
   _update_selectMode
     _setExpressionDisplay
       _set_leds_bottom
       _set_leds_top
     _setPresetDisplay
       _set_leds_bottom
       _set_leds_top

 _isr (ROOT)
   ___awdiv
   _modulation
     i1___aldiv
       i1___lmul (ARG)
     i1___lmul
   i1_set_leds_top

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     25      4A       5       92.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     50      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     4A      4D       9       96.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      E      4F      11       98.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      9      44      13       85.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      2C      15       55.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
ABS                  0      0     234      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      40      18       80.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0      40      20       80.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
DATA                 0      0     234      28        0.0%
BANK11              1E      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITBANK12           50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BANK12               0      0       0      31        0.0%
BITBANK13           50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BANK13               0      0       0      33        0.0%
BITBANK14           50      0       0      34        0.0%
BANK14               0      0       0      35        0.0%
BITBANK15           50      0       0      36        0.0%
BANK15               0      0       0      37        0.0%
BITBANK16           50      0       0      38        0.0%
BANK16               0      0       0      39        0.0%
BITBANK17           50      0       0      40        0.0%
BANK17               0      0       0      41        0.0%
BITBANK18           50      0       0      42        0.0%
BANK18               0      0       0      43        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Thu Jan 12 20:46:51 2017

                     _update_mode 224C                      ___altoft@exp 0134                       __CFG_CP$OFF 0000  
                   ___altoft@sign 0135                  modSaw@inflection 0131                  scaleA100kPot@pwm 01E1  
                    ___awdiv@sign 0076                _topTactile_pressed 01C6        setDoublePressState@f_state 00B8  
             ___wmul@multiplicand 0130                USARTInit@baud_rate 00A0                   _updateSwitchTap 0C1D  
                    ___ftadd@exp1 00CD                      ___ftadd@exp2 00CC                      ___ftadd@sign 00CB  
                             l364 05A2                               l384 223D                               l801 22C8  
                             l802 22CB                               l803 22CE                               l635 1930  
            __size_of_adc_convert 0013                               l804 22D1                               l806 22D4  
                             l807 22F8                               l588 2FE5                               l794 2782  
                             l795 27A6                               l964 25E4                               l980 26A7  
                             l799 22C5                               l991 227C                               l968 260E  
                             l976 2679                               _GIE 005F                               l999 2110  
                             _RB1 0069                               _PR2 001B      solidring_tactiles@ring_delay 00B4  
                             _map 1C0B                               _exp 1351                               _log 109F  
                             _isr 0004                               _tap 02A0                               _sin 0A4E  
                             _pow 06DA                      __CFG_BORV$LO 0000                               wreg 0009  
                    __CFG_IESO$ON 0000                      __CFG_FOSC$HS 0000               set_subdivision@tmpX 0149  
         __end_of_set_leds_bottom 22F9                      __CFG_LVP$OFF 0000                    i1___aldiv@sign 0029  
                    ___ftdiv@cntr 00D8                      ___ftdiv@sign 00DD                              l1001 2116  
                            l1002 211E                              l1003 2132                              l1006 27AE  
                            l1017 27F8                              l2120 12FA                              l1403 0C34  
                            l1261 11F6                              l2310 0B63                              l1417 0CEE  
                            l2180 1B6A                              l2096 186D                              l2097 1875  
                            l2089 185A                              l2292 06FE                              l1907 0FC0  
                            l1928 209E                              l1697 24E7                              l1882 1C08  
                            ?_map 00DE                              l1887 0A4B                              l1983 1A07  
                            l8033 255C                              l7411 22DB                              l8123 25B0  
                            ?_exp 0148                              l8301 24BC                              l7341 21FD  
                            l8053 0706                              l8221 0F7C                              ?_log 013E  
                            l8303 24BE                              l7503 131E                              l8071 078C  
                            l8151 238C                              l8305 24C0                              l7361 1846  
                            l7353 1830                              l7513 1339                              l7441 262E  
                            l7521 2310                              l7601 1B16                              l7337 21F3  
                            l8233 236C                              l8217 0E3A                              l8401 2279  
                            l7419 2098                              l7443 263E                              l8067 076C  
                            l8059 0712                              l8251 1A18                              l8403 2280  
                            ?_isr 0070                              l8309 24C4                              l7357 1837  
                            l7453 1283                              l7525 2326                              l7621 1B54  
                            l8261 1A36                              l7391 277A                              l7383 275A  
                            l9311 24D3                              l7367 185F                              l7359 1841  
                            l7463 1299                              l7543 1EA8                              l7703 22A0  
                            l8159 239D                              l8167 23A8                              l8423 27DD  
                            l9321 22E1                              l7385 2762                              l9313 24D8  
                            l7369 1867                              l7481 12C6                              l7457 128A  
                            l7561 1EF9                              l7633 1B7B                              l8185 0A83  
                            l8273 1A61                              l8601 0D3D                              l8433 27F4  
                            l8425 27E2                              l8417 27D1                              l7387 276A  
                            l7395 2789                              l8363 1943                              l9315 24DD  
                            l7715 20F8                              l7731 1D6A                              l7483 12D0  
                            l7475 12B3                              l7803 18F7                              l7627 1B61  
                            l7619 1B46                              l9307 0A31                              l8507 1236  
                            l8443 1186                              l8259 1A28                              l8603 0D87  
                            l8531 0C29                              l8435 27FC                              l7389 2772  
                            l8365 194C                              l9317 24E2                              l7725 1D54  
                            l7493 12EC                              l7485 12D5                              l7573 1F15  
                            l7565 1F01                              l7549 1EBE                              l7629 1B6D  
                            l7645 23C4                              l8197 0B1F                              l7813 0815  
                            l9309 1F73                              l8277 1A6F                              l8269 1A56  
                            l9319 278F                              l7495 12F6                              l7487 12D9  
                            l8287 1B8A                              l7823 0837                              l8455 11A7  
                            l8447 1199                              l8607 0DAD                              l8551 0C68  
                            l8615 0DEB                              l7753 1DC4                              l7745 1DAB  
                            l7577 1F1D                              l8633 25D9                              l8713 1DFE  
                            l7905 14DF                              l8481 11E8                              l8553 0C85  
                            l8537 0C46                              l8299 24BA                              l7499 130C  
                            l8643 2600                              l7915 2138                              l7843 087F  
                            l8707 1DEF                              l7683 26E6                              l7675 26C2  
                            l8467 11C8                              l8395 226F                              ?_sin 0145  
                            l7765 2165                              l7917 2148                              l7933 10D6  
                            l8493 1215                              l8469 11D0                              l8573 0CB7  
                            l8901 05A4                              l7783 1CD4                              l8655 266E  
                            l7847 0887                              l7927 10C3                              l8727 1A84  
                            l8751 08FF                              l8487 11FA                              l8559 0C90  
                            l8575 0CBF                              l8831 037E                              l7793 1D35  
                            l8665 2695                              l8753 0945                              l8497 121D  
                            l8593 0D31                              l8585 0CE6                              l8577 0CCE  
                            l8921 06A3                              l8913 0652                              l8905 05D6  
                            l8841 038E                              l7779 1CCC                              l7971 13E2  
                            l8691 1026                              l7891 1689                              l8755 098B  
                            l8763 0A2B                              l8747 08A5                              l7883 2126  
                            l8499 1223                              l7965 13A7                              l7949 135E  
                            l8685 1019                              l8781 1F59                              l8757 09D1  
                            l8765 0A42                              l8749 08B9                              l8917 069C  
                            l8909 0620                              l8861 040A                              ?_pow 0155  
                            l7959 1383                              l8783 1F5D                              l8791 1F6E  
                            l8759 0A17                              l8871 0468                              l8847 039D  
                            l7993 148A                              l8785 1F63                              l8793 1F87  
                            l8787 1F67                              l8779 1F53                              l8875 049A  
                            l8885 050A                              l8799 1FFA                              l8889 053C  
                            _PEIE 005E                              _RCIE 048D                              u7305 183C  
                            u8105 1DC5                              u7325 1855                              u8205 0840  
                            u8310 13C0                              u7255 21FE                              u8320 13C1  
                            u7345 1862                              u8065 1D7C                              u7425 209F  
                            u7265 2205                              u9025 11B1                              u8075 1D8C  
                            u7435 20A4                              u9115 1206                              u8085 1DAC  
                            u7605 12C7                              u8245 213D                              u8095 1DBB  
                            u7385 187C                              u7465 2633                              u8425 075D  
                            u8450 25AE                              u7635 12DA                              u8355 1481  
                            u7805 1F08                              u8445 2590                              u8525 206C  
                            u9245 0C71                              u8550 0B1B                              u7575 12B4  
                            u9415 0D8C                              u8800 194A                              u8560 0B1C  
                            u7665 12ED                              u8705 1A57                              u7835 1F1E  
                            u7915 1B47                              u8475 2052                              u9355 0CFF  
                            u9275 0C9A                              u7845 1F24                              u7765 1ECA  
                            u8485 237D                              u9365 0D16                              u7775 1EDA  
                            u9535 268E                              u9375 0D46                              u7945 1B62  
                            u8665 1A2B                              u9385 0D5B                              u8905 27C0  
                            u9705 0498                              u8755 180D                              u7795 1F02  
                            u9475 25F9                              u9635 1FF5                              u9395 0D6F  
                            u8835 225F                              u9715 0521                              u8765 1813  
                            u7885 1B1D                              u8685 1A37                              u9725 053A  
                            u8695 1A4B                              u9735 0591                              u8785 1929  
                            u7985 26C0                              u9745 059D                              u8795 193C  
                            u7995 26E4                              u9755 05BB                              u9675 03EF  
                            u9765 05D4                              u9685 0408                              u9775 0637  
                            u9695 047F                              u8985 117F                              u9785 0650  
                            u8995 1192                scaleA100kPot@input 0167                      __CFG_WRT$OFF 0000  
               _scaleA10kPot$2815 01E4                 _scaleA10kPot$2816 01E7                     __CFG_FCMEN$ON 0000  
                            _iCnt 01BF                              _main 035D                      ___ftpack@arg 00A0  
                    ___ftpack@exp 00A3                              fsr0h 0005                              fsr1h 0007  
                            fsr0l 0004                              indf0 0000                              indf1 0001  
                            fsr1l 0006                              map@x 00DE                              btemp 007E  
                            exp@x 0148                              log@x 013E                     __CFG_BOREN$ON 0000  
                            sin@f 0145                              sin@y 0149                              ltemp 007E  
                            pow@x 0155                              pow@y 0158          __end_of_setFeedbackState 2061  
                            start 02E1                              ttemp 007E                              wtemp 007E  
    __end_of_getSwitchBypassState 2FB1                   _expressModeCnst 01DD      updateSwitchTap@tapCntDivisor 00C2  
    __end_of_setSwitchBypassState 25CF                   ?i1_set_leds_top 0070                     __CFG_MCLRE$ON 0000  
                    ___ftmul@cntr 00BC                      ___ftmul@sign 00BD                   __end_of_InitApp 21EA  
                    ___fttol@exp1 012D                             ??_map 00ED                             ??_exp 014B  
                           ??_log 0141                      ___fttol@lval 0129                             ??_isr 003A  
                           ??_sin 0148                             ??_pow 015B                   _switchBypass_up 0262  
       __size_of_initSwitchBypass 000F                   __end_of___aldiv 1A78                             ?_main 0070  
                 __end_of___awdiv 2753                   __end_of___ftadd 1351                             _CCPR1 0291  
                           _CCPR2 0298                             _CCPR3 0311                             _CCPR4 0318  
                           _CCPR5 031C                     __CFG_WDTE$OFF 0000                   __end_of___ftdiv 1DE6  
                 __end_of___ftneg 2FC3                   __end_of___ftmul 1F45                   ___awdiv@divisor 0070  
                 __end_of___ftsub 218B                   __end_of___fttol 1B84                             i1l135 0121  
                           i1l165 02DC                             i1l157 0251                             i1l158 0253  
                           i1l794 251A                             i1l795 253C                   ___awdiv@counter 0075  
                           _RCREG 0199                             _SPBRG 019B                __end_ofsin@coeff_a 2848  
              __end_ofsin@coeff_b 2854                             _TXREG 019A                             _UQEnd 0065  
             _ConfigureOscillator 2FA9                  _setPresetDisplay 2284                      ?_init_timer0 0070  
                    ?_init_timer2 0070               ___lmul@multiplicand 00A4                      ___lltoft@exp 00AD  
           __size_of_calcSinArray 0087                   _switchTap_state 01E0                 ??_setLongTapState 00A2  
                   ___awtoft@sign 00AD                             _floor 1C96                             _ldexp 0808  
                           _frexp 23B0                             _myBuf 03A0                             _errno 0253  
                   ___ftpack@sign 00A4                             _timer 0061                             _trunc 253D  
                __end_ofi1___lmul 21BA                             sin@x2 014F                             ltemp0 007E  
                           ltemp1 0082                             ltemp2 0086                             ltemp3 0080  
                 __end_of_wait_ms 224C                             pow@yi 0163                   scaleA10kPot@pwm 01E1  
              __size_of_USARTInit 0043                             ttemp0 007E                             ttemp1 0081  
                           ttemp2 0084                             ttemp3 0087                             ttemp4 007F  
                           status 0003       __end_of_read_bottom_tactile 2619                __size_ofi1___aldiv 0082  
                           wtemp0 007E                             wtemp1 0080                             wtemp2 0082  
                           wtemp3 0084                             wtemp4 0086                             wtemp5 0088  
                           wtemp6 007F             set_subdivision@scalar 0146                       exp@exponent 0152  
            ?_ConfigureOscillator 0070                _updateSwitchBypass 1170                       ldexp@newexp 0141  
         __end_of_updateSwitchTap 0E05                   __initialization 02E3                       log@exponent 0142  
     updateModulationArray@iAngle 0157           _updateSwitchBypassState 07FF                      __end_of_main 06DA  
         __size_of_InitializeTaps 0026               i1___lmul@multiplier 0070            __size_of_scaleA100kPot 0085  
             ?_updateSwitchBypass 0070                    __CFG_LPBOR$OFF 0000            ring_tactiles@iLed_1541 00B5  
                 _set_subdivision 1F45                      _calcSinArray 1B84                            ??_main 01EA  
                   ___fttol@sign1 0128                     ?_scaleA10kPot 0167           __size_of_FLASH_ReadWord 0020  
      __end_of_solidring_tactiles 2430                    _feedback_timer 01A8                    _feedback_state 0054  
                  _feedback_start 016A                  ?_set_leds_bottom 00A0                            ?_floor 0136  
                          ?_ldexp 013E                            ?_frexp 00A0                  __end_of___altoft 2664  
                          _ADRESH 009C                            _ADRESL 009B                  ___awdiv@dividend 0072  
             _baseline_delay_time 0045                  __end_of___awtoft 210F                  __end_of___ftpack 188C  
            ??_updateSwitchBypass 00BC                            ?_trunc 0136                  __end_of___lltoft 215D  
                          i1l1983 1985                            i1l6511 2717                            i1l6521 271F  
                          i1l6505 270C                            i1l6523 272B                            i1l6611 0178  
                          i1l6533 2746                            i1l5901 19DF                            i1l6621 01A6  
                          i1l6551 2514                            i1l6543 24FC                            i1l6615 018C  
                          i1l6623 01A8                            i1l6607 0166                            i1l6537 274E  
                          i1l6529 273D                            i1l5905 19ED                            i1l6545 2502  
                          i1l6633 01DA                            i1l6609 0176                            i1l6547 2508  
                          i1l6555 2520                            i1l6643 0203                            i1l6619 0197  
                          i1l6571 00AB                            i1l5861 219D                            i1l6549 250E  
                          i1l6661 02A7                            i1l6637 01E7                            i1l6639 01F6  
                          i1l5857 2193                            i1l6673 02D5                            i1l6585 010E  
                          i1l6577 00C6                            i1l9323 2525                            i1l6677 02DA  
                          i1l5887 19A6                            i1l5879 1996                            i1l5897 19D4  
                          i1l5889 19B4                            u510_25 219E                            u511_25 21A5  
                          _PMADRH 0192                            u520_25 19D5                            _PMADRL 0191  
                          _PMDATH 0194                            _PMDATL 0193                            _PMCON2 0196  
                          u516_25 19A9                            u518_25 19B5                            u519_25 19C9  
                          u625_25 2722                            u634_25 00A2                            u643_23 013D  
                          u627_25 272C                            u652_23 01CA                            u628_25 2736  
                          u660_25 02D0                            u636_25 00BD                            u629_25 273E  
                          u638_23 00DE                            u656_23 022B                            u657_25 0240  
                          u659_25 02B7                    _debounce_count 0249                       modSaw@angle 012E  
                  _debounce_mode1 024B                    _debounce_mode2 024D                       modSaw@shift 013F  
                          _URBuff 0320                         ??_InitApp 00A0             ??_ConfigureOscillator 00A0  
        __end_of_read_top_tactile 26B2                       modSin@angle 0134                    __CFG_PWRTE$OFF 0000  
                     modSin@shift 013F                            ___ftge 22F9                            ___lmul 21EA  
                       ??___aldiv 00A8                            ___wmul 2095                 _update_selectMode 27A7  
                       ??___awdiv 0074                         ??___ftadd 00C7                    __CFG_STVREN$ON 0000  
                       ??___ftdiv 00D4                         ??___ftneg 00C1                         ??___ftmul 00B4  
                       ??___ftsub 00F0                         ??___fttol 0124                       modTri@angle 012E  
                __end_of_init_adc 2FCD                            _modSaw 14AA                            _modSin 1654  
                          _modTri 0E05                  __end_of_init_pwm 24B2                ?_update_selectMode 0070  
                     modTri@shift 0137                  ___awdiv@quotient 0077             __end_of_resetRingLEDs 2047  
                          _tmpVal 0257                 __end_of_USARTInit 24F5                    ??_scaleA10kPot 00F0  
               __end_ofi1___aldiv 19F6                            floor@i 013A                            floor@x 0136  
           ___ftmul@f3_as_product 00B9           FLASH_ReadWord@flashAddr 00A0                            sin@sgn 0152  
                __end_of_showSave 3000               ??_update_selectMode 00A7              _getSwitchBypassState 2FAD  
                       ??_wait_ms 00AE              _setSwitchBypassState 2585                            trunc@i 013A  
                          trunc@x 0136                     _scaleA100kPot 1A78      __end_of_setExpressionDisplay 202D  
          __size_of_scaleiA10kPot 00AB            setLongTapState@f_state 00A0                  modSin@inflection 0137  
                __end_ofexp@coeff 281E                  __end_oflog@coeff 2839           __end_of__initialization 0359  
                      ___altoft@c 012E                        ___ftadd@f1 00C1                        ___ftadd@f2 00C4  
                      ___ftge@ff1 00A0                        ___ftge@ff2 00A3                 _bypass_turning_on 01BE  
                    eval_poly@res 013B                        ___ftdiv@f1 00D1                        ___ftdiv@f2 00CE  
                      ___ftdiv@f3 00D9                    _top_push_state 0051         ??_updateSwitchBypassState 00A2  
                      ___ftneg@f1 00BE               _switchBypass_toggle 0255                        ___awtoft@c 00A8  
           __end_of_ring_tactiles 2702         __end_of_update_selectMode 2800           __end_of_set_subdivision 2000  
                      ___ftmul@f1 00AE                        ___ftmul@f2 00B1                        ___ftsub@f1 0142  
                      ___ftsub@f2 013F                        ___fttol@f1 0120                  ?_updateSwitchTap 0070  
                    ?_update_mode 0070                    __pcstackCOMMON 0070                      __pidataBANK0 2001  
                    __pidataBANK3 207B                      __pidataBANK4 0002                        ___lltoft@c 00A8  
                   __end_of_floor 1D3D                     __end_of_ldexp 089F                     __end_of_frexp 23F0  
                   __end_of_trunc 2585                  _initSwitchBypass 07F0                         ?i1___lmul 0070  
           _updateModulationArray 089F                   _doubleTap_state 0066                    _OPTION_REGbits 0095  
           ?_getSwitchBypassState 00A0             ?_setSwitchBypassState 00B2                    ?_scaleA100kPot 0167  
                         ??_floor 0139                           ??_ldexp 0143                           ??_frexp 00A4  
            __size_of_init_timer0 0007              __size_of_init_timer2 0009                 i1___aldiv@divisor 0020  
               i1___aldiv@counter 0028                           ??_trunc 0139                     ?_setPedalMode 0070  
                      __pbssBANK0 0059                        __pbssBANK2 016A                        __pbssBANK3 01A0  
                      __pbssBANK4 0220                        __pbssBANK5 02A0                        __pbssBANK6 0320  
                      __pbssBANK7 03A0                __size_of_eval_poly 0072                  ??i1_set_leds_top 0074  
                 __CFG_VCAPEN$OFF 0000                __size_of_modSawRev 001C                __size_of_modSquare 003D  
               ?_setFeedbackState 00A0          __end_of_setPresetDisplay 22BE                        _delay_time 0049  
                _long_press_limit 004F      __size_of_setDoublePressState 003E                        _delayfound 0251  
                      __pmaintext 035D                ??_setFeedbackState 00A2                    _InitializeTaps 1801  
                         ?___ftge 00A0                           ?___lmul 00A0                           ?___wmul 012E  
  updateModulationArray@thisAngle 0155                        __pintentry 0004                     _scaleiA10kPot 1DE6  
                      _blink_rate 0053                     ??_adc_convert 00A2                         ?___altoft 012E  
                         ?_modSaw 012E                           ?_modSin 0134                           ?_modTri 012E  
                  ___lmul@product 00A8                   _setLongTapState 2061                         ?___awtoft 00A8  
                       ?___ftpack 00A0               modSquare@inflection 014B                         ?___lltoft 00A8  
                      ??i1___lmul 0078                    _FLASH_ReadWord 20CD   __end_of_updateSwitchBypassState 0800  
                     modulation@x 002E                       modulation@y 0032                        _ldexp$2615 0145  
                 _debounce_bypass 0247                    ??_setPedalMode 00A7                USARTWriteInt@F3536 0234  
                   _suspend_blink 0069                      modSaw@period 0142                           _UQFront 007D  
                       ?_init_adc 0070                         ?_init_pwm 0070                           _InitApp 21BA  
            __end_of_scaleA10kPot 109F                      modSin@period 0142            __end_of_InitializeTaps 1827  
                    modSin@tmpVal 0145                     ?_set_leds_top 00A0                        _knob1_prev 01C9  
      __size_of_update_selectMode 0059                        _knob2_prev 01CB                        _knob3_prev 01CD  
                      _knob4_prev 01CF                        _knob5_prev 01D1                  ?_set_subdivision 013F  
                       ?_showSave 0070                           ___aldiv 19F6                    ?_scaleiA10kPot 0167  
                 __size_of___ftge 003C                           ___awdiv 2702                   __size_of___lmul 0030  
                         ___ftadd 125B                           ___ftdiv 1D3D                           ___ftneg 2FBA  
                      _knob_1_pos 01AA                        _knob_2_pos 01AC                   __size_of___wmul 001C  
                         ___ftmul 1E91                        _knob_3_pos 01AE                           ___ftsub 215D  
                         ___fttol 1AFD                        _knob_4_pos 01B0                        _knob_5_pos 01B2  
               _switchTap_pressed 016C                        ??___altoft 0132              _setExpressionDisplay 2015  
          ?_updateModulationArray 0070            __end_of_FLASH_ReadWord 20ED                   __size_of_modSaw 01AA  
                 __size_of_modSin 01AC                        ??___awtoft 00AB                        ??___ftpack 00A5  
                 __size_of_modTri 01FB                 __end_of_eval_poly 18FE                InitializeTaps@itap 00A1  
                      ??___lltoft 00AC                           __ptext1 27A7                           __ptext2 224C  
                         __ptext3 0C1D                           __ptext4 2061                           __ptext5 19F6  
                         __ptext6 1170                           __ptext7 2047                           __ptext8 2372  
                         __ptext9 2FEC            ??_getSwitchBypassState 00A2                 __end_of_modSawRev 20CD  
          updateModulationArray@x 0154                         _T2CONbits 001C                  _adjust_sub_delay 01BC  
                    __size_of_map 008B                      __size_of_exp 0159                      __size_of_log 00D1  
                    __size_of_isr 02DD            ??_setSwitchBypassState 00B4                      __size_of_sin 01CF  
                    __size_of_pow 0116               __end_of_adc_convert 2FEC                      modTri@period 013A  
               __end_of_modSquare 2372                   ??_scaleA100kPot 00F0                  ___aldiv@dividend 00A4  
                    modTri@tmpVal 013D                           _wait_ms 221A                           clrloop0 1003  
            end_of_initialization 0359                           exp@sign 0154                        _modulation 2430  
                         init_ram 2FCD                        ??_init_adc 00A0                           initloop 2FCE  
                      ??_init_pwm 00A0      updateSwitchBypassState@state 00A0                _solidring_tactiles 23F0  
                   _longTap_timer 01B4                     _longTap_state 0055                     _longTap_start 016B  
                  ??_set_leds_top 00A4                 ?_read_top_tactile 0070                   ?_InitializeTaps 0070  
                         pow@sign 0162                 scaleA10kPot@input 0167           __end_of_setLongTapState 207B  
          i1set_leds_top@ledState 0072                ??_read_top_tactile 00B2                         _RCSTAbits 019D  
                      ??_showSave 00B7                  ___aldiv@quotient 00AB      __size_of_read_bottom_tactile 004A  
             ?_solidring_tactiles 0070                      __pstringtext 2800         FLASH_ReadWord@GIEBitValue 00A2  
           ?_setExpressionDisplay 0070              __size_of_update_mode 0038                   ?_FLASH_ReadWord 00A0  
               _expressionChannel 01DE                         _PORTAbits 000C                         _PORTCbits 000E  
                       _PORTDbits 000F                         _PORTEbits 0010                        _test_timer 0241  
                       _USARTInit 24B2                         _TRISBbits 008D                         _TRISCbits 008E  
                       _TRISDbits 008F                         _TRISEbits 0090                         _TRISFbits 030C  
                       _TRISGbits 030D                         i1___aldiv 1974           setFeedbackState@f_state 00A0  
            ??_solidring_tactiles 00B2       __end_of_ConfigureOscillator 2FAD                        map@out_max 00EA  
                      map@out_min 00E7       __size_of_updateSwitchBypass 00EB          __end_of_initSwitchBypass 07FF  
                     _CCP1CONbits 0293                       ___ftdiv@exp 00DC          __size_of_set_leds_bottom 003B  
                     _CCP2CONbits 029A                         _TXSTAbits 019E              _switchBypass_pressed 01BA  
                     _CCP3CONbits 0313                       _CCP4CONbits 031A                       _CCP5CONbits 031E  
                     _CCP6CONbits 0613                   ??_scaleiA10kPot 00F0                       _CCP7CONbits 0616  
                     ___ftmul@exp 00B8                adc_convert@channel 00A3                       _CCP8CONbits 0619  
                     _CCP9CONbits 061C              set_leds_top@ledState 00A2                    __end_of___ftge 2335  
            __end_of_setPedalMode 2133                    __end_of___lmul 221A                    __end_of___wmul 20B1  
                    _double_timer 01A0                       _adc_convert 2FD9                    _switchTap_down 01C5  
                  __end_of_modSaw 1654                    __end_of_modSin 1800                    __end_of_modTri 1000  
                  modSawRev@angle 0145                        floor@expon 013D             i1___lmul@multiplicand 0074  
               __size_ofi1___lmul 002F               start_initialization 02E3                        ?_USARTInit 00A0  
                      eval_poly@d 0137                        eval_poly@n 0139                        eval_poly@x 0134  
           _bottomTactile_pressed 01BD               _setDoublePressState 2372                        ldexp@value 013E  
                      ?i1___aldiv 0020                       __end_of_map 1C96                       __end_of_exp 14AA  
                     __end_of_log 1170                       __end_of_isr 02E1                       __end_of_sin 0C1D  
                     __end_of_pow 07F0             __size_of_scaleA10kPot 0091                _adjusted_pot_value 0245  
                     ?_modulation 002E                scaleiA10kPot@input 0167                        frexp@value 00A0  
          __size_of_resetRingLEDs 001A              ?_setDoublePressState 00B8                  ?_setLongTapState 00A0  
               ?_setPresetDisplay 0070                          ??___ftge 00A6                          ??___lmul 00A8  
          ??_setExpressionDisplay 00A4                          ??___wmul 00F0                ??_setPresetDisplay 00A4  
                     __pdataBANK0 0045                       __pdataBANK3 01C7                       __pdataBANK4 0262  
                        ??_modSaw 00F0                          ??_modSin 013A                i1___aldiv@dividend 0024  
                        ??_modTri 00F0                     _tap_iteration 01D7          __size_of_updateSwitchTap 01E8  
               __size_of___altoft 004B         __size_of_setFeedbackState 001A                 __size_of___awtoft 0022  
               __size_of___ftpack 0065                       __pbssBIGRAM 238E                      _scaleA10kPot 100E  
               __size_of___lltoft 002A                     ??_init_timer0 00A0                     ??_init_timer2 00A0  
                     __pbssCOMMON 007D              __end_of_set_leds_top 27A7                         ___latbits 0003  
  setExpressionDisplay@ledChannel 00A6                _switchBypass_state 0058                     __pcstackBANK0 0020  
                   __pcstackBANK1 00A0                     __pcstackBANK2 0120                     __pcstackBANK3 01E1  
                   __pcstackBANK4 0259            __size_of_ring_tactiles 0050                    _expSwitchState 01DC  
                   _delay_counter 024F                  i1___lmul@product 0078                  scaleiA10kPot@pwm 01E1  
        ?_updateSwitchBypassState 00A0                        sin@coeff_a 2839                        sin@coeff_b 2848  
              i1___aldiv@quotient 002A                    isr@tmpSubDelay 0043                          ?_InitApp 0070  
           ??_setDoublePressState 00BA                 __size_of_init_adc 000A                 __size_of_init_pwm 0041  
                       _main$2806 0259                         _main$2807 025C                         _main$2808 025F  
         ??_updateModulationArray 0150                          ?___aldiv 00A0                 ??_set_leds_bottom 00A2  
              _currentBypassState 01DA                          ?___awdiv 0070                          ?___ftadd 00C1  
                        ?___ftdiv 00CE                          ?___ftneg 00BE                          ?___ftmul 00AE  
                        ?___ftsub 013F                          ?___fttol 0120                 __size_of_showSave 0014  
              _modulation_changed 01C1                _scaleA100kPot$2811 01E4                _scaleA100kPot$2812 01E7  
                   ?_calcSinArray 0070                       _blink_delay 01C7               __size_of_modulation 0041  
                   _resetRingLEDs 202D                       _blink_state 01D9                         _eval_poly 188C  
                     ??_USARTInit 00A2                          _CCPTMRS0 029D                          _CCPTMRS1 029E  
                        _CCPTMRS2 029F                       ??i1___aldiv 007C                          ?_wait_ms 00AC  
                       _modSawRev 20B1               _read_bottom_tactile 25CF                    __size_of_floor 00A7  
                  __size_of_ldexp 0097                    __size_of_frexp 0040                         _modSquare 2335  
                  _presetModeCnst 01DF                    __size_of_trunc 0048               __end_of_init_timer0 0808  
             __end_of_init_timer2 2FBA                         _mod_value 01B8                         _mod_timer 01A4  
                ??_InitializeTaps 00A0                   ___aldiv@divisor 00A0                   ___aldiv@counter 00A9  
                  _presetSaveMode 0068                    ___wmul@product 0132                          _LATBbits 010D  
                        _LATDbits 010F                          _LATFbits 038C                          _LATGbits 038D  
                  _mod_delay_time 01D3                         clear_ram0 1002                         _tap_timer 005D  
                       _tap_total 023D             __size_of_setPedalMode 0024                     set_leds_top@x 00A0  
                        _PIR1bits 0011                     _ring_tactiles 26B2                  ??_FLASH_ReadWord 00A2  
            ?_read_bottom_tactile 0070           __size_ofi1_set_leds_top 0048                    ??_calcSinArray 0153  
       initSwitchBypass@initState 00B6                         map@in_max 00E4                         map@in_min 00E1  
                  ?_resetRingLEDs 0070                         _sub_timer 0059                        _ADCON0bits 009D  
                        i1___lmul 218B                        _ADCON1bits 009E          __size_of_set_subdivision 00BB  
               ___wmul@multiplier 012E                  set_subdivision@x 013F                  set_subdivision@y 0141  
       __size_of_read_top_tactile 004E                        ?_eval_poly 0134     __size_of_getSwitchBypassState 0004  
   __size_of_setSwitchBypassState 004A                        ?_modSawRev 0145             __end_of_scaleA100kPot 1AFD  
               ??_updateSwitchTap 00BC                 ___lmul@multiplier 00A0                        ?_modSquare 0148  
                 modSquare@tmpVal 014E                      _setPedalMode 210F                 _ReadSavedSettings 18FE  
               ?_initSwitchBypass 0070                 ring_tactiles@iLed 00B3                    wait_ms@timeSec 00AC  
              ?_ReadSavedSettings 0070                       _modSaw$2821 0134                       _modSaw$2822 0137  
                     _modSaw$2823 013A                    wait_ms@timemsl 00AE                         frexp@eptr 00A3  
     setSwitchBypassState@f_state 00B2                       _modSin$2819 013C                ??_initSwitchBypass 00B6  
                __size_of_InitApp 0030                    ?_ring_tactiles 0070                         modSaw@mod 013D  
                     _mode1_state 01C0                     ??_update_mode 00A7                       _mode2_state 0067  
           ??_read_bottom_tactile 00B2                       _modTri$2820 0134               updateSwitchTap@iCnt 00C4  
             ??_ReadSavedSettings 00A4                        _APFCONbits 011D                  __size_of___aldiv 0082  
                __size_of___awdiv 0051                  __size_of___ftadd 00F6                  __size_of___ftdiv 00A9  
                    ?_adc_convert 00A0                  __size_of___ftneg 0009                          ___altoft 2619  
                __size_of___ftmul 00B4                  __size_of___ftsub 002E                  __size_of___fttol 0087  
                        ___awtoft 20ED             __size_of_set_leds_top 0054                          ___ftpack 1827  
                        _map$2809 00ED                          ___lltoft 2133            _preset_programmning_on 01C3  
                      _ANSELEbits 0190                        _ANSELFbits 040C                  modTri@inflection 0131  
                set_leds_bottom@x 00A0                  _setFeedbackState 2047                          _exp$2583 014F  
                        _exp$2827 014C                       _init_timer0 0801                       _init_timer2 2FB1  
              _delay_time_changed 01DB        __end_of_updateSwitchBypass 125B                          __ptext10 23F0  
                        __ptext11 26B2                          __ptext20 20B1                          __ptext12 210F  
                        __ptext21 14AA                          __ptext13 2284                          __ptext30 0808  
                        __ptext22 1F45                          __ptext14 2015                          __ptext31 2133  
                        __ptext23 253D                          __ptext15 202D                          __ptext40 2FAD  
                        __ptext32 2664                          __ptext24 1DE6                          __ptext16 089F  
                        __ptext41 1B84                          __ptext33 25CF                          __ptext25 100E  
                        __ptext17 0E05                          __ptext50 1E91                          __ptext42 0A4E  
                        __ptext34 1C0B                          __ptext26 1A78                          __ptext18 2335  
                        __ptext51 215D                          __ptext43 1C96                          __ptext35 07F0  
                        __ptext27 06DA                          __ptext19 1654                          __ptext60 2753  
                        __ptext52 125B                          __ptext44 23B0                          __ptext36 2585  
                        __ptext28 109F                          __ptext61 22BE                          __ptext53 2FBA  
                        __ptext45 1AFD                          __ptext37 221A                          __ptext29 1351  
                        __ptext62 20CD                          __ptext54 1D3D                          __ptext46 22F9  
                        __ptext38 21EA                          __ptext71 24F5                          __ptext63 1801  
                        __ptext55 20ED                          __ptext47 2619                          __ptext39 07FF  
                        __ptext72 2430                          __ptext64 21BA                          __ptext56 1827  
                        __ptext48 188C                          __ptext73 218B                          __ptext65 2471  
                        __ptext57 2FD9                          __ptext49 2095                          __ptext74 1974  
                        __ptext66 2FB1                          __ptext58 24B2                          __ptext75 2702  
                        __ptext67 0801                          __ptext59 18FE                          __ptext68 2FC3  
                        __ptext69 2FA9                          _sin$2826 014C         __end_of_ReadSavedSettings 1974  
                __size_of_wait_ms 0032       __size_of_solidring_tactiles 0040                          _ledState 0239  
                        _pow$2824 015C                          _pow$2825 015F                     _presetChannel 0057  
                    ??_modulation 0036                       _mod_counter 01B6                          _modArray 238E  
                      trunc@expon 013D                          _init_adc 2FC3                     __size_of_main 037D  
                        _init_pwm 2471                          _sinArray 2482      __size_of_ConfigureOscillator 0004  
                    _set_leds_top 2753                          _showSave 2FEC                          _num_taps 0056  
                   calcSinArray@x 0157             __end_of_scaleiA10kPot 1E91                          int$flags 007E  
                 ??_resetRingLEDs 00A4                   i1set_leds_top@x 0070                    modSquare@angle 0148  
             __end_of_update_mode 2284                          exp@coeff 2800                          _symmetry 01D5  
             modSawRev@inflection 0148                          log@coeff 281E                __end_of_modulation 2471  
              calcSinArray@iAngle 015B                        _INTCONbits 000B                       ??_eval_poly 00F0  
       __size_of_setPresetDisplay 003A                       _tap_history 0220                       ??_modSawRev 014B  
               ??_set_subdivision 0143                       ??_modSquare 00F0                calcSinArray@tmpVal 0158  
                        intlevel1 0000              __end_of_calcSinArray 1C0B                   _set_leds_bottom 22BE  
                      _PMCON1bits 0195                   ??_ring_tactiles 00B2                 __CFG_CLKOUTEN$OFF 0000  
                 _reset_sub_delay 01C4                        _OSCCONbits 0099                      _preset_blink 01C2  
                  i1_set_leds_top 24F5    __size_of_updateModulationArray 01AF  __size_of_updateSwitchBypassState 0001  
   __end_of_updateModulationArray 0A4E     __size_of_setExpressionDisplay 0018                _scaleiA10kPot$2817 01E4  
              _scaleiA10kPot$2818 01E7          __size_of_setLongTapState 001A                  _read_top_tactile 2664  
                    ___aldiv@sign 00AA        __size_of_ReadSavedSettings 0076       __end_of_setDoublePressState 23B0  
                    _CCP10CONbits 061F                 _bottom_push_state 004D        setPresetDisplay@ledChannel 00A6  
          __end_ofi1_set_leds_top 253D  
